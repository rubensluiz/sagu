<?php

class GrdOfertaDeUnidadeTematicaSearch extends SGrid
{

    private $positionActEncerrar;
    private $positionActEncontros;
    private $isFromFrmUnidadesTematicasDoPreceptor; //Indica quando vem de tela FrmUnidadesTematicasDoPreceptor

    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = $MIOLO->getCurrentAction();
        $this->isFromFrmUnidadesTematicasDoPreceptor = $filters->isFromFrmUnidadesTematicasDoPreceptor;

        $columns[] = new MGridColumn(_M('Código', $module), 'right', true, NULL, true, NULL, true);
        if ($action == 'main:process:ofertaDeUnidadeTematica')
        {
            $columns[] = new MGridColumn(_M('Código do rodízio', $module), 'right', true, NULL, true, NULL, true);
            $columns[] = new MGridColumn(_M('Turma', $module), 'left', true, NULL, true, NULL, true);
        }

        $columns[] = new MGridColumn(_M('Descrição', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Período', $module), 'left', true, NULL, true, MedUnidadeTematica::listPeriodos(), true);
        $columns[] = new MGridColumn(_M('Tipo', $module), 'left', true, NULL, true, MedUnidadeTematica::listTipos(), true);
        $columns[] = new MGridColumn(_M('CH lançada/prevista', $module), 'right', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Frequência mínima', $module), 'right', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Núcleos profissionais'), 'left', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('Ênfases'), 'left', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('Início', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Fim', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Encerramento', $module), 'left', true, NULL, true, NULL, true);
        //$columns[] = new MGridColumn(_M('Preceptores', $module), 'left', true, NULL, true, NULL, true);
        if (MIOLO::_REQUEST('module') == 'services')
        {
            $columns[] = new MGridColumn(_M('Preceptor do rodízio', $module), 'left', true, null, true, SAGU::listYesNo(0), true);
        }

        $primaryKeys = array('ofertaDeUnidadeTematicaId' => '%0%',);
        parent::__construct($filters, $columns, __CLASS__, $primaryKeys);

        //Desabilita acoes editar/excluir e paginacao quando for deste form
        if ($this->isFromFrmUnidadesTematicasDoPreceptor)
        {
            $this->actions = array();
        }

        $args = array('ofertaDeUnidadeTematicaId' => '%0%');

        //Emitir caderno de chamada
        $href = SAGU::getActionURL('resmedica', 'main:document:listaDeChamada', $args);
        $href = "javascript:doIt('" . urldecode($href) . "')";
        $this->addActionIcon(_M('Lista de chamada', $module), 'doc.png', $href);

        $this->positionActEncontros = count($this->actions);
        $this->addActionIcon(null, null, null);


        //Encerramento de unidade tematica
        if (!$this->isFromFrmUnidadesTematicasDoPreceptor)
        {
            $this->positionActEncerrar = count($this->actions);
            $this->addActionIcon(null, null, null);

            // Acao Mais informacoes
            $href = SForm::getPopupLink(array('args' => array('ofertaDeUnidadeTematicaId' => '%0%'), 'method' => 'showInformation', 'encodeArgs' => false));
            $this->addActionIcon(_M('Mais informações', $module), 'find.png', $href);
        }

        // Registro de notas
        if ($this->isFromFrmUnidadesTematicasDoPreceptor)
        {
            $args['return_to'] = 'services';
            $hrefNotas = SAGU::getActionURL('services', 'main:resmedicaNotasDaOfertaDaUnidadeTematica', $args);
        }
        else
        {
            $args['return_to'] = 'resmedica';
            $hrefNotas = SAGU::getActionURL('resmedica', 'main:process:notasDaOfertaDaUnidadeTematica', $args);
        }
        $this->addActionIcon(_M('Consultar/Cadastrar notas', $module), 'register-16x16.png', $hrefNotas);

        // Registro de indicadores
        if ($this->isFromFrmUnidadesTematicasDoPreceptor)
        {
            $args['return_to'] = 'services';
            $hrefIndicadores = SAGU::getActionURL('services', 'main:resmedicaResidenteIndicadores', $args);
            $this->addActionIcon(_M('Residentes e indicadores', $module), 'botao_workflow.png', $hrefIndicadores);
        }

        /*
        else
        {
            $args['return_to'] = 'resmedica';
            $hrefRelatorioIndicadores = SAGU::getActionURL('resmedica', 'main:process:resmedicaResidenteIndicadores', $args);
            $this->addActionIcon(_M('Relatorio dos indicadores', $module), 'botao_workflow.png', $hrefRelatorioIndicadores);
        }*/


        // Acao de enviar e-mail
        if ($this->isFromFrmUnidadesTematicasDoPreceptor)
        {
            $href = SAGU::getActionURL('services', 'main:resmedica:enviarEmail', $args);
            $this->addActionIcon(_M('Enviar e-mail', $module), 'button_sendemail.png', $href);

            $args = array('ofertadeunidadetematicaid' => '%0%', 'event' => 'btnManage');
            $hrefDiarioDeCampoPreceptor = SAGU::getActionURL('services', 'main:resmedica:diarioDeCampoPreceptor', $args);
            $this->addActionIcon(_M('Diario de campo do preceptor', $module), 'selectiveProcess-16x16.png', $hrefDiarioDeCampoPreceptor);
        }

        $this->setRowMethod($this, 'myRowMethod');

        //Cria select com formato dos documentos
        $selLabel = new MLabel(_M('Formato dos documentos', $module) . ':');
        $sel = new MSelection('reportFormat');
        $sel->options = SReport::listReportFormat();
        $sel->setJsHint(_M('Informe o formato dos documentos', $module));
        $hctSel = new MHContainer(rand(), array($selLabel, $sel));
        $this->setControls(array($hctSel));
    }

    public function myRowMethod($i, $row, $actions, $columns)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = SAGU::getFileModule(__FILE__);

        if ($action == 'main:process:ofertaDeUnidadeTematica')
        {
            list($null, $unidadeTematicaId, $null, $null, $null, $null, $null, $null, $null, $null, $null, $null, $encerramento) = $this->data[$i];
        }
        else
        {
            list($ofertaDeUnidadeTematicaId, $null, $null, $null, $null, $null, $null, $null, $null, $null, $null, $encerramento) = $this->data[$i];
        }

        if (strlen($this->positionActEncontros) > 0) {

            $ofertaDeUnidadeTematica = new MedOfertaDeUnidadeTematica($this->data[$i][0]);

            $_action = $this->actions[$this->positionActEncontros];
            $args = array('ofertaDeUnidadeTematicaId' => '%0%');

            $_action->value = 'frequency-on.png';

            if ($ofertaDeUnidadeTematica->acompanhamentoEncontro == MedOfertaDeUnidadeTematica::ACOMPANHAMENTO_ENCONTRO_SIMPLES) {

                if ($this->isFromFrmUnidadesTematicasDoPreceptor) {
                    $modulo = 'services';
                    $acao = 'main:resmedicaFaltasDaOfertaDaUnidadeTematica';
                    $args['return_to'] = $modulo;
                } else {
                    $modulo = 'resmedica';
                    $acao = 'main:process:faltasDaOfertaDaUnidadeTematica';
                    $args['return_to'] = $modulo;
                }

                $_action->alt = _M('Registro de faltas', $module);
                $_action->href = SAGU::getActionURL($modulo, $acao, $args);
            } else {


                if ($this->isFromFrmUnidadesTematicasDoPreceptor) {
                    $modulo = 'services';
                    $acao = 'main:resmedicaEncontro';
                    $args['return_to'] = $modulo;
                } else {
                    $modulo = 'resmedica';
                    $acao = 'main:register:encontro';
                    $args['return_to'] = $modulo;
                }

                $_action->alt = _M('Registro de encontros', $module);
                $_action->href = SAGU::getActionURL($modulo, $acao, $args);
            }
        }


        //Altera acao de encerramento
        if (strlen($this->positionActEncerrar) > 0)
        {
            $args = array('ofertaDeUnidadeTematicaId' => '%0%');
            $_action = $this->actions[$this->positionActEncerrar];
            if (strlen($encerramento) > 0) //Quando estiver encerrado
            {
                $args['event'] = 'reabrirUnidadeTematicaConfirm';
                $_action->value = 'lock.png';
                $_action->alt = _M('Reabrir oferta de rodízio');
                $_action->href = SAGU::getActionURL($module, 'main:register:encerrarUnidadeTematica', $args);
            }
            else //Quando ainda nao foi encerrado
            {
                $_action->value = 'unlock.png';
                $_action->alt = _M('Encerrar rodízio', $module);
                $_action->href = SAGU::getActionURL($module, 'main:register:encerrarUnidadeTematica', $args);
            }
        }

        if (strlen($ofertaDeUnidadeTematicaId) > 0)
        {
            $ofertaUnidadeTematicaObj = new MedOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
            $unidadeTematicaId = $ofertaUnidadeTematicaObj->unidadeTematicaId;
        }

        $unidadeTematica = new MedUnidadeTematica($unidadeTematicaId);

        if (!strlen($unidadeTematica->notaMinimaParaAprovacao) > 0)
        {
            if ($action == 'main:process:ofertaDeUnidadeTematica')
            {
                $this->actions[6]->enabled = false;
            }
            else
            {
                $this->actions[2]->enabled = false;
            }
        }
        else
        {
            if ($action == 'main:process:ofertaDeUnidadeTematica')
            {
                $this->actions[6]->enabled = true;
            }
            else
            {
                $this->actions[2]->enabled = true;
            }
        }
    }

}

?>