<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Samuel koch [samuel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Samuel koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class MedTipoDeCargaHorariaComplementar extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $tipoDeCargaHorariaComplementarId;
    /**
     * @AttributeType character varying
     * 
     */
    protected $descricao;

    public function __construct($tipoDeCargaHorariaComplementarId = NULL)
    {
        if ( (strlen($tipoDeCargaHorariaComplementarId)  >  0) )
        {
            $this->tipoDeCargaHorariaComplementarId = $tipoDeCargaHorariaComplementarId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT tipodecargahorariacomplementarid
                  FROM med.tipodecargahorariacomplementar';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY descricao ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new MedTipoDeCargaHorariaComplementar($result[$i][0]);
        }

        return $retVal;
    }

    public static function getSearchGridSQL($filters  =  null)
    {
        $sql = 'SELECT tipodecargahorariacomplementarid,
                       descricao
                  FROM med.tipodecargahorariacomplementar';
        $args = array();

        if ( strlen($filters->tipoDeCargaHorariaComplementarId)  >  0 )
        {
            $where.=' AND tipodecargahorariacomplementarid = ?';
            $args[] = $filters->tipoDeCargaHorariaComplementarId;
        }

        if ( strlen($filters->descricao)  >  0 )
        {
            $where.=' AND UNACCENT(descricao) ILIKE UNACCENT(?) ';
            $args[] = $filters->descricao.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4);
        }
        
        $sql .= ' ORDER BY descricao ';

        return SAGU::prepare($sql, $args);
    }
    
    /**
     * Mantem codigo legado funcionando
     * 
     * @param stdClass $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = self::getSearchGridSQL($filters);
        
        return preg_match('/ WHERE /', $sql) ? SDatabase::query($sql) : array();
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       tipodecargahorariacomplementarid,
                       descricao
                  FROM med.tipodecargahorariacomplementar
                 WHERE tipodecargahorariacomplementarid = ?';

        $result = SDatabase::query($sql, array($this->tipoDeCargaHorariaComplementarId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->userName,
              $this->dateTime,
              $this->ipAddress,
              $this->tipoDeCargaHorariaComplementarId,
              $this->descricao ) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->tipoDeCargaHorariaComplementarId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO med.tipodecargahorariacomplementar 
                            ( tipodecargahorariacomplementarid,
                              descricao )
                     VALUES (?, ?)';

        $sqlPK = "SELECT nextval('seq_medtipodecargahorariacomplementar_tipodecargahorariacomplementarid'::regclass)";

        $result = SDatabase::query($sqlPK);

        $tipoDeCargaHorariaComplementarId = $result[0][0];
        $args = array($tipoDeCargaHorariaComplementarId, $this->descricao);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->tipoDeCargaHorariaComplementarId = $tipoDeCargaHorariaComplementarId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE med.tipodecargahorariacomplementar
                   SET descricao = ?
                 WHERE tipodecargahorariacomplementarid = ?';

        $args = array( $this->descricao,
                       $this->tipoDeCargaHorariaComplementarId );

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->tipoDeCargaHorariaComplementarId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM med.tipodecargahorariacomplementar
                      WHERE tipodecargahorariacomplementarid = ?';

        $args = array( $this->tipoDeCargaHorariaComplementarId );
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->tipoDeCargaHorariaComplementarId = null;
        }

        return $result;
    }


    public static function listRecords()
    {
        $sql = "SELECT tipodecargahorariacomplementarid,
                       descricao
                  FROM med.tipodecargahorariacomplementar";

        $result = (array) SDatabase::query($sql);

        $list = array();
        foreach ( $result as $row )
        {
            $list[ $row[0] ] = $row[1];
        }
        return $list;
    }
}
?>