<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type da tabela med.unidadeTematica
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 15/07/2011
 */
class MedUnidadeTematica extends SType
{
    const PERIODO_PRIMEIRO_ANO = 'P1';
    const PERIODO_SEGUNDO_ANO = 'P2';
    const PERIODO_TERCEIRO_ANO = 'P3';
    const PERIODO_QUARTO_ANO = 'P4';
    const PERIODO_QUINTO_ANO = 'P5';

    /**
     * @AttributeType integer
     */
    protected $unidadeTematicaId;
    /**
     * @AttributeType character varying
     */
    protected $periodo;
    /**
     * @AttributeType character varying
     */
    protected $descricao;
    /**
     * @AttributeType text
     */
    protected $sumula;
    /**
     * @AttributeType real
     */
    protected $cargaHoraria;
    /**
     * @AttributeType real
     */
    protected $frequenciaMinima;
    /**
     * @AttributeType character
     */
    protected $tipo;

    /**
     * @AssociationType MedNucleoDaUnidadeTematica
     */
    protected $nucleosProfissionais = null;
    /**
     * @AssociationType MedEnfaseDaUnidadeTematica
     */
    protected $enfases = null;
    
    /**
     * @AttributeType 
     */
    protected $notaMaxima;
    /**
     * @AttributeType 
     */
    protected $notaMinimaParaAprovacao;

    /**
     * @AttributeType text
     */
    protected $justificativaNota;

    /**
     * Instancia se necessário (Magic method)
     *
     * @param string $name
     * @return boolean
     */
    public function __get($name)
    {
        // Filter
        $filters = new stdClass();
        $filters->unidadeTematicaId = $this->unidadeTematicaId;

        // Núcleos profissionais
        if ( $name == 'nucleosProfissionais' )
        {
            if ( (!count($this->nucleosProfissionais) > 0) && (strlen($this->unidadeTematicaId) > 0) )
            {
                // array $nucleosProfissionais
                $this->nucleosProfissionais = MedNucleoDaUnidadeTematica::search($filters);
            }
        }

        // Ênfases
        if ( $name == 'enfases' )
        {
            if ( (!count($this->enfases) > 0) && (strlen($this->unidadeTematicaId) > 0) )
            {
                // array $enfases
                $this->enfases = MedEnfaseDaUnidadeTematica::search($filters);
            }
        }

        return parent::__get($name);
    }

    /**
     * Contrutor
     *
     * @param integer $unidadeTematicaId
     */
    public function __construct($unidadeTematicaId = NULL)
    {
        if ( (strlen($unidadeTematicaId) > 0) )
        {
            $this->unidadeTematicaId = $unidadeTematicaId;
            $this->populate();
        }
    }

    /**
     * Função de busca
     *
     * @param object $filters
     * @return UnidadeTematica
     */
    public static function search($filters)
    {
        $sql = 'SELECT unidadeTematicaId
                  FROM med.unidadeTematica';

        $where = '';
        foreach ( (array)$filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where .= " AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE '.substr($where, 5);
        }

        $sql .= ' ORDER BY unidadeTematicaId ';
        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new MedUnidadeTematica($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Função de busca para a grid
     *
     * @param object $filters
     * @return array
     */
    public static function getSearchGridSQL($filters = null)
    {
        $sql = "SELECT UT.unidadeTematicaId,
                       UT.descricao,
                       UT.periodo,
                       UT.tipo,
                       UT.cargaHoraria || 'h' AS cargaHoraria,
                       UT.frequenciaMinima || '%' AS frequenciaMinima,
                       -- núcleos profissionais
                       (SELECT ARRAY_TO_STRING(ARRAY(
                        SELECT NP.descricao
                          FROM med.nucleoDaUnidadeTematica NDUT
                    INNER JOIN med.nucleoProfissional NP
                            ON NDUT.nucleoProfissionalId = NP.nucleoProfissionalId
                         WHERE NDUT.unidadeTematicaId = UT.unidadeTematicaId
                      ORDER BY NP.descricao), ', ')) AS nucleosProfissionais,

                       -- ênfases
                       (SELECT ARRAY_TO_STRING(ARRAY(
                        SELECT E.descricao
                          FROM med.enfaseDaUnidadeTematica EDUT
                    INNER JOIN med.enfase E
                            ON EDUT.enfaseId = E.enfaseId
                         WHERE EDUT.unidadeTematicaId = UT.unidadeTematicaId
                      ORDER BY E.descricao), ', ')) AS enfases
                  FROM med.unidadeTematica UT
             LEFT JOIN med.nucleoDaUnidadeTematica NPUT
                    ON UT.unidadeTematicaId = NPUT.unidadeTematicaId
             LEFT JOIN med.enfaseDaUnidadeTematica EUT
                    ON UT.unidadeTematicaId = EUT.unidadeTematicaId
             LEFT JOIN med.enfase EN
                    ON EUT.enfaseid = EN.enfaseid";

        $where = '';
        $params = array();
        if ( strlen($filters->unidadeTematicaId) > 0 )
        {
            $where .= ' AND UT.unidadeTematicaId = ?';
            $params[] = $filters->unidadeTematicaId;
        }

        if ( strlen($filters->descricao) > 0 )
        {
            $where .= ' AND UNACCENT(UT.descricao) ILIKE UNACCENT(?) ';
            $params[] = $filters->descricao.'%';
        }

        if ( strlen($filters->periodo) > 0 )
        {
            $where .= ' AND UNACCENT(UT.periodo) ILIKE UNACCENT(?) ';
            $params[] = $filters->periodo.'%';
        }

        if ( strlen($filters->tipo) > 0 )
        {
            $where .= ' AND UT.tipo = ?';
            $params[] = $filters->tipo;
        }

        if ( strlen($filters->sumula) > 0 )
        {
            $where .= ' AND UNACCENT(UT.sumula) ILIKE UNACCENT(?) ';
            $params[] = $filters->sumula.'%';
        }

        if ( strlen($filters->cargaHoraria) > 0 )
        {
            $where .= ' AND UT.cargaHoraria = ?';
            $params[] = $filters->cargaHoraria;
        }

        if ( strlen($filters->frequenciaMinima) > 0 )
        {
            $where .= ' AND UT.frequenciaMinima = ?';
            $params[] = $filters->frequenciaMinima;
        }

        if ( is_array($filters->nucleosProfissionais) && count($filters->nucleosProfissionais) > 0 )
        {
            $tmpWhere = '';
            foreach ( $filters->nucleosProfissionais as $nucleoProfissionalId )
            {
                $tmpWhere .= " OR EXISTS (SELECT 1
                                            FROM med.nucleoDaUnidadeTematica
                                           WHERE unidadeTematicaId = UT.unidadeTematicaId
                                             AND nucleoProfissionalId = ?) ";

                $params[] = $nucleoProfissionalId;
            }

            $where .= " AND (1=0 {$tmpWhere})";
        }

        if ( is_array($filters->enfases) && count($filters->enfases) > 0 )
        {
            $tmpWhere = '';
            foreach ( $filters->enfases as $enfaseId )
            {
                $tmpWhere .= " OR EXISTS (SELECT 1
                                             FROM med.enfaseDaUnidadeTematica
                                            WHERE unidadeTematicaId = UT.unidadeTematicaId
                                              AND enfaseId = ?) ";
                $params[] = $enfaseId;
            }

            $where .= " AND (1=0 {$tmpWhere})";
        }

        $usuario = MedEnfase::retornaAdminDaEspecialidadeResidenciaMedica();
        if ( $usuario )
        {
            $where .= " AND EN.enfaseid in (SELECT AA.enfaseid FROM med.enfaseresponsavel AA WHERE AA.responsavel = ?)";
            $params[] = $usuario;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
        }

        $sql .= ' GROUP BY 1, 2, 3, 4, 5, 6, 7 ';
        $sql .= ' ORDER BY UT.periodo, UT.descricao ';

        return SAGU::prepare($sql, $params);
    }

    /**
     * Mantem codigo legado funcionando
     *
     * @param stdClass $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = self::getSearchGridSQL($filters);

        return preg_match('/ WHERE /', $sql) ? SDatabase::query($sql) : array();
    }

    /**
     * Função que popula a Grid de núcleos da unidade temática
     *
     * @param object $filters
     * @return array
     */
    public static function obterNucleos($unidadeTematicaId)
    {
        $sql = 'SELECT A.nucleoProfissionalId,
                       A.descricao,
                       B.nucleoProfissionalId
                  FROM med.nucleoProfissional A
             LEFT JOIN med.nucleoDaUnidadeTematica B
                    ON A.nucleoProfissionalId = B.nucleoProfissionalId
                   AND B.unidadeTematicaId = ?
              ORDER BY A.nucleoProfissionalId';

        $params = array();
        $params[] = $unidadeTematicaId;

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return $result;
    }

    /**
     * Função que popula a Grid de ênfases da unidade temática
     *
     * @param object $filters
     * @return array
     */
    public static function obterEnfases($unidadeTematicaId)
    {
        $where = '';
        $usuario = MedEnfase::retornaAdminDaEspecialidadeResidenciaMedica();
        if ( $usuario )
        {
            $where = " WHERE A.enfaseid in (SELECT AA.enfaseid FROM med.enfaseresponsavel AA WHERE AA.responsavel = " . $usuario . ")";
        }

        $sql = "SELECT A.enfaseId,
                       A.descricao,
                       B.enfaseId
                  FROM med.enfase A
             LEFT JOIN med.enfaseDaUnidadeTematica B
                    ON A.enfaseId = B.enfaseId
                   AND B.unidadeTematicaId = ?
                   $where
              ORDER BY A.enfaseId";




        $params = array();
        $params[] = $unidadeTematicaId;

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return $result;
    }

    /**
     * Popula essa classe
     */
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT unidadeTematicaId,
                       periodo,
                       descricao,
                       sumula,
                       cargaHoraria,
                       frequenciaMinima,
                       tipo,
                       notaMaxima,
                       notaMinimaParaAprovacao,
                       justificativaNota
                  FROM med.unidadeTematica
                 WHERE unidadeTematicaId = ?';

        $params = array();
        $params[] = $this->unidadeTematicaId;

        $result = SDatabase::query($sql, $params);

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->unidadeTematicaId,
              $this->periodo,
              $this->descricao,
              $this->sumula,
              $this->cargaHoraria,
              $this->frequenciaMinima,
              $this->tipo,
              $this->notaMaxima,
              $this->notaMinimaParaAprovacao,
              $this->justificativaNota  ) = $result[0];

        $this->nucleosProfissionais = null;
        $this->enfases = null;
    }

    /**
     * Salva os dados
     *
     * @return integer - Código do registro inserido/atualizado
     */
    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Verifica se os dados estão corretos
        $this->valida();

        if ( strlen($this->unidadeTematicaId) == 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        // Salva os núcleos profissionais
        foreach ( (array)$this->nucleosProfissionais as $nucleoProfissional )
        {
            $nucleoProfissional->unidadeTematicaId = $this->unidadeTematicaId;
            $ok = $nucleoProfissional->save();
            if ( !$ok )
            {
                $msg = _M('Erro ao salvar os núcleos profissionais');
                throw new Exception($msg);
            }
        }

        // Salva as ênfases
        foreach ( (array)$this->enfases as $enfase )
        {
            $enfase->unidadeTematicaId = $this->unidadeTematicaId;
            $ok = $enfase->save();
            if ( !$ok )
            {
                $msg = _M('Erro ao salvar as ênfases');
                throw new Exception($msg);
            }
        }

        return $retVal;
    }

    /**
     * Insere os dados na base
     *
     * @return boolean
     */
    private function insert()
    {
        $sql = 'INSERT INTO med.unidadeTematica
                            ( unidadeTematicaId,
                              periodo,
                              descricao,
                              sumula,
                              cargaHoraria,
                              frequenciaMinima,
                              tipo,
                              notaMaxima,
                              notaMinimaParaAprovacao,
                              justificativanota )
                     VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';

        $sqlPK = "SELECT nextval('seq_medunidadetematica_unidadetematicaid'::regclass)";
        $result = SDatabase::query($sqlPK);
        $unidadeTematicaId = $result[0][0];

        $params = array();
        $params[] = $unidadeTematicaId;
        $params[] = $this->periodo;
        $params[] = $this->descricao;
        $params[] = $this->sumula;
        $params[] = $this->cargaHoraria;
        $params[] = $this->frequenciaMinima;
        $params[] = $this->tipo;
        $params[] = $this->notaMaxima;
        $params[] = $this->notaMinimaParaAprovacao;
        $params[] = $this->justificativaNota;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->unidadeTematicaId = $unidadeTematicaId;
        }

        return $result;
    }

    /**
     * Atualiza os dados na base
     *
     * @return boolean
     */
    private function update()
    {
        $sql = 'UPDATE med.unidadeTematica
                   SET periodo = ?,
                       descricao = ?,
                       sumula = ?,
                       cargaHoraria = ?,
                       frequenciaMinima = ?,
                       tipo = ?,
                       notaMaxima = ?,
                       notaMinimaParaAprovacao = ?,
                       justificativanota = ?
                 WHERE unidadeTematicaId = ?';

        $params = array();
        $params[] = $this->periodo;
        $params[] = $this->descricao;
        $params[] = $this->sumula;
        $params[] = $this->cargaHoraria;
        $params[] = $this->frequenciaMinima;
        $params[] = $this->tipo;
        $params[] = $this->notaMaxima;
        $params[] = $this->notaMinimaParaAprovacao;
        $params[] = $this->justificativaNota;
        $params[] = $this->unidadeTematicaId;

        return SDatabase::execute($sql, $params);
    }

    /**
     * Função que deleta o registro
     *
     * @return boolean
     */
    public function delete()
    {
        // Popula os temas/núcleos/ênfases
        $this->__get('temas');
        $this->__get('nucleosProfissionais');
        $this->__get('enfases');

        if ( strlen($this->unidadeTematicaId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        // Verifica se há oferta de unidade temática para este registro
        $this->verificaOferta();

        // Deleta os núcleos profissionais da unidade temática
        foreach ( (array)$this->nucleosProfissionais as $nucleoProfissional )
        {
            $ok = $nucleoProfissional->delete();
            if ( !$ok )
            {
                $msg = _M('Erro ao excluir os núcleos profissionais da unidade temática');
                throw new Exception($msg);
            }
        }

        // Deleta as ênfases da unidade temática
        foreach ( (array)$this->enfases as $enfase )
        {
            $ok = $enfase->delete();
            if ( !$ok )
            {
                $msg = _M('Erro ao excluir as ênfases da unidade temática');
                throw new Exception($msg);
            }
        }

        // Deleta a unidade temática
        $sql = 'DELETE FROM med.unidadeTematica
                      WHERE unidadeTematicaId = ?';

        $result = SDatabase::execute($sql, array($this->unidadeTematicaId));

        if ( $result )
        {
            $this->unidadeTematicaId = null;
        }

        return $result;
    }

    /**
     * Valida os dados da classe
     */
    public function valida()
    {
        $module = SAGU::getFileModule(__FILE__);

        if ( count($this->nucleosProfissionais) == 0 )
        {
            $msg = _M('A unidade temática precisa ter ao menos um núcleo profissional');
            throw new Exception($msg);
        }

        if ( count($this->enfases) == 0 )
        {
            $msg = _M('A unidade temática precisa ter ao menos uma ênfase');
            throw new Exception($msg);
        }
    }

    /**
     * Verifica se há oferta de unidade temática para esse registro
     */
    public function verificaOferta()
    {
        $module = SAGU::getFileModule(__FILE__);

        $filters = new stdClass();
        $filters->unidadeTematicaId = $this->unidadeTematicaId;
        $ofertas = MedOfertaDeUnidadeTematica::search($filters);
        if ( count($ofertas) > 0 )
        {
            $msg = _M('Este registro não pode ser excluído. Existe uma ou mais oferta de unidade temática para esta unidade temática.', $module);
            throw new Exception($msg);
        }
    }

    /**
     * Lista os tipos que a unidade temática
     *
     * @return array
     */
    public static function listTipos()
    {
        return MedTipoDeUnidadeTematica::listTipos();
    }

    /**
     * Lista os períodos ao qual a unidade temática pertence, sendo que:
     * P1 indica o primeiro ano de residência; e
     * P2 indica o segundo ano.
     * P3 indica o terceiro ano.
     * P4 indica o quarto ano.
     * P5 indica o terceiro ano.
     * 
     * Alterado o método para obter as informações dos períodos da tabela med.periodo
     * Os dados populados na tabela são referentes as constantes 
     * 
     * @return array
     */
    public static function listPeriodos()
    {
        $sql = " SELECT periodo,
                        descricao
                   FROM med.periodo ";
        
        $periodos = SDatabase::query($sql);
        
        $result = array();
        foreach ( $periodos as $periodo )
        {
            $result[$periodo[0]] = $periodo[1];
        }
        
        return $result;
    }
}
?>