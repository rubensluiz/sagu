<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 19/07/2011
 *
 */
class MedEncontro extends SType
{
    /**
     * @AttributeType integer
     *
     */
    protected $encontroId;
    /**
     * @AttributeType integer
     *
     */
    protected $temaId;
    /**
     * @AttributeType integer
     *
     */
    protected $ofertaDeUnidadeTematicaId;
    /**
     * @AttributeType timestamp without time zone
     *
     */
    protected $inicio;
    /**
     * @AttributeType timestamp without time zone
     *
     */
    protected $fim;
    /**
     * @AttributeType real
     *
     */
    protected $cargaHoraria;
    /**
     * @AttributeType text
     *
     */
    protected $conteudoMinistrado;

    /**
     * @AttributeType object
     *
     */
    protected $ofertaDeUnidadeTematica;
    /**
     * @AttributeType array
     *
     */
    protected $frequencias = array();

    protected $preceptores;

    /**
     * @AttributeType integer
     *
     */
    protected $instituicaoExecutoraId;

    public function __construct($encontroId = NULL)
    {
        if ( (strlen($encontroId) > 0 ) )
        {
            $this->encontroId = $encontroId;
            $this->populate();
        }
    }

    public function __get($name)
    {
        $MIOLO = MIOLO::getInstance();

        // Load on demand
        if ( $name == 'ofertaDeUnidadeTematica' && !$this->ofertaDeUnidadeTematica && strlen($this->ofertaDeUnidadeTematicaId) > 0 )
        {
            $this->ofertaDeUnidadeTematica = new MedOfertaDeUnidadeTematica($this->ofertaDeUnidadeTematicaId);
        }
        if ( $name == 'frequencias' && !$this->frequencias && strlen($this->encontroId) > 0 )
        {
            $filters = new stdClass();
            $filters->encontroId = $this->encontroId;
            $this->frequencias = MedFrequencia::search($filters);
        }

        if ( $name == 'preceptores' && !$this->preceptores && strlen($this->encontroId) > 0 )
        {
            $filters = new stdClass();
            $filters->encontroId = $this->encontroId;
            $this->preceptores = MedEncontroPreceptor::search($filters);
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT encontroid
                  FROM med.encontro';
        $where = '';

        foreach ( $filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 5);
        }

        $sql.=' ORDER BY inicio, encontroid';
        $result = SDatabase::query($sql);
        $retVal = array( );

        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new MedEncontro($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters = null)
    {
        $sql = "SELECT encontroid,
                       temaid,
                       ofertadeunidadetematicaid,
                       TO_CHAR(inicio, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME') . "'),
                       TO_CHAR(fim, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME') . "'),
                       cargahoraria,
                       conteudoministrado,
                       instituicaoexecutoraid
                  FROM med.encontro";

        $args = array( );
        if ( strlen($filters->encontroId) > 0 )
        {
            $where.=' AND encontroid = ?';
            $args[] = $filters->encontroId;
        }

        if ( strlen($filters->temaId) > 0 )
        {
            $where.=' AND temaid = ?';
            $args[] = $filters->temaId;
        }

        if ( strlen($filters->ofertaDeUnidadeTematicaId) > 0 )
        {
            $where.=' AND ofertadeunidadetematicaid = ?';
            $args[] = $filters->ofertaDeUnidadeTematicaId;
        }

        if ( strlen($filters->inicio) > 0 )
        {
            $where.=' AND inicio = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')';
            $args[] = $filters->inicio;
        }

        if ( strlen($filters->fim) > 0 )
        {
            $where.=' AND fim = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')';
            $args[] = $filters->fim;
        }

        if ( strlen($filters->cargaHoraria) > 0 )
        {
            $where.=' AND cargahoraria = ?';
            $args[] = $filters->cargaHoraria;
        }

        if ( strlen($filters->conteudoMinistrado) > 0 )
        {
            $where.=' AND UNACCENT(conteudoministrado) ILIKE UNACCENT(?) ';
            $args[] = $filters->conteudoMinistrado . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 4) . '
                   ORDER BY encontroid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = "SELECT username,
                       TO_CHAR(datetime, '" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       ipaddress,
                       encontroid,
                       temaid,
                       ofertadeunidadetematicaid,
                       TO_CHAR(inicio, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME') . "'),
                       TO_CHAR(fim, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME') . "'),
                       cargahoraria,
                       conteudoministrado,
                       instituicaoexecutoraid
                  FROM med.encontro
                 WHERE encontroid = ?";
        $result = SDatabase::query($sql, array( $this->encontroId ));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName,
             $this->dateTime,
             $this->ipAddress,
             $this->encontroId,
             $this->temaId,
             $this->ofertaDeUnidadeTematicaId,
             $this->inicio,
             $this->fim,
             $this->cargaHoraria,
             $this->conteudoMinistrado,
             $this->instituicaoExecutoraId) = $result[0];
    }


    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if( !SAGU::compareTimestamp( $this->inicio, '<=', $this->fim ) )
        {
            throw new Exception(_M('O período inicial @1 deve ser menor que o período final @2',$module, $this->inicio, $this->fim).'.');
        }
        if( $this->validaIntervaloDeDatas() )
        {
            throw new Exception(_M('O intervalo de tempo informado @1 à @2 está em conflito com o intervalo de tempo de outro encontro já cadastrado',$module, $this->inicio, $this->fim).'.');
        }

        if ( strlen($this->encontroId) == 0 )
        {
            $retVal = $this->insert();
        }

        //Insere ou atualiza as frequências do encontro
        if ( strlen($this->encontroId) > 0 )
        {
            $retVal = $this->update();

            // salvar frequências
            if ( count($this->frequencias)>0 )
            {
                foreach ( $this->frequencias as $frequencias )
                {
                    $frequencias->encontroId = $this->encontroId;
                    $frequencias->save();
                }
            }
        }


        // Salva os preceptores
        foreach ( (array)$this->preceptores as $preceptor )
        {
            $preceptor->encontroId = $this->encontroId;
            $ok = $preceptor->save();
            if ( !$ok )
            {
                $msg = _M('Erro ao salvar os preceptores', $module);
                throw new Exception($msg);
            }
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO med.encontro
                            (encontroid,
                            temaid,
                            ofertadeunidadetematicaid,
                            inicio,
                            fim,
                            cargahoraria,
                            conteudoministrado,
                            instituicaoexecutoraid)
                     VALUES (?, ?, ?, TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'), TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'), ?, ?, ?)';

        $sqlPK = "SELECT nextval('seq_medencontro_encontroid'::regclass)";
        $result = SDatabase::query($sqlPK);
        $encontroId = $result[0][0];

        $args = array( $encontroId,
                       $this->temaId,
                       $this->ofertaDeUnidadeTematicaId,
                       $this->inicio,
                       $this->fim,
                       $this->cargaHoraria,
                       $this->conteudoMinistrado,
                       $this->instituicaoExecutoraId);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->encontroId = $encontroId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE med.encontro
                   SET temaid = ?,
                       ofertadeunidadetematicaid = ?,
                       inicio = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       fim = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       cargahoraria = ?,
                       conteudoministrado = ?,
                       instituicaoexecutoraid = ?
                 WHERE encontroid = ?';

        $args = array($this->temaId,
                      $this->ofertaDeUnidadeTematicaId,
                      $this->inicio,
                      $this->fim,
                      $this->cargaHoraria,
                      $this->conteudoMinistrado,
                      $this->instituicaoExecutoraId,
                      $this->encontroId);

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->encontroId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }
        //Obtem as frequências
        $this->__get('frequencias');
        // excluir frequencias
        foreach ( $this->frequencias as $frequencia )
        {
            $frequencia->delete();
        }


        //Obtem as preceptores
        $this->__get('preceptores');
        // excluir preceptores
        foreach ( $this->preceptores as $preceptor )
        {
            $preceptor->delete();
        }

        $sql = 'DELETE FROM med.encontro
                      WHERE encontroid = ?';
        $args = array( $this->encontroId );

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->encontroId = null;
        }

        return $result;
    }

    /**
     * Obtém a diferença em horas de um timestemp e outro
     * @param timestamp $inicio
     * @param timestamp $fim
     * @return int
     */
    public static function timestampDiff($inicio, $fim)
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $maskTime = SAGU::getParameter('BASIC', 'MASK_TIME');

        $sql = "SELECT ROUND((EXTRACT(EPOCH FROM TO_TIMESTAMP(?, '" . $maskDate . ' ' . $maskTime . "') -
                                                 TO_TIMESTAMP(?, '" . $maskDate . ' ' . $maskTime . "'))/60/60)::numeric,2)";

        $args[] = $fim;
        $args[] = $inicio;
        $return = SDatabase::query($sql, $args);

        return $return[0][0];
    }

    /**
     * Valida se já existe um encontro no mesmo intervalo de datas
     *
     * @return boolean
     */
    private function validaIntervaloDeDatas()
    {
        $sql = "SELECT * FROM med.encontro A
                        WHERE (? > A.inicio AND ? < A.fim
                           OR  ? > A.inicio AND ? < A.fim)";

        $args = array();
        $args[] = $this->inicio;
        $args[] = $this->inicio;
        $args[] = $this->fim;
        $args[] = $this->fim;

        if ( strlen($this->ofertaDeUnidadeTematicaId) > 0 )
        {
            $sql.=' AND ofertaDeUnidadeTematicaId = ?';
            $args[] = $this->ofertaDeUnidadeTematicaId;
        }

        if ( strlen($this->encontroId) > 0 )
        {
            $sql.=' AND encontroid != ?';
            $args[] = $this->encontroId;
        }

        $result = SDatabase::query(SAGU::prepare($sql, $args));

        return ( strlen($result[0][0]) >0 );
    }

    public static function retornaQuantidadeDeHorasJaDefinidaProTemaNaUnidadeTematica($tema, $encontroId = null, $ofertaDeUnidadeTematicaId)
    {
        $sql = "SELECT encontroid, temaid, cargahoraria FROM med.encontro
                        WHERE temaid = ? AND ofertadeunidadetematicaid = ?";

        $args = array();
        $args[] = $tema;
        $args[] = $ofertaDeUnidadeTematicaId;

        $result = SDatabase::query(SAGU::prepare($sql, $args));

        $qtdHoras = 0;
        foreach ($result as $tema) {
            if ($tema['0'] != $encontroId) {
                $qtdHoras += $tema[2];
            }
        }

        return $qtdHoras;
    }

}

?>