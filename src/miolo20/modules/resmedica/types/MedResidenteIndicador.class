<?php

class MedResidenteIndicador extends SType
{
    /**
     * @AttributeType integer
     */
    protected $residenteIndicadorId;

    /**
     * @AttributeType integer
     */
    protected $indicadorId;

    /**
     * @AttributeType integer
     */
    protected $residenteId;


    protected $periodoInicio;
    protected $periodoFim;

    /**
     * @AttributeType integer
     */
    protected $quantidade;

    /**
     * @AttributeType integer
     */
    protected $preceptorId;

    /**
     * @param mixed $residenteIndicadorId
     */
    public function setResidenteIndicadorId($residenteIndicadorId)
    {
        $this->residenteIndicadorId = $residenteIndicadorId;
    }

    /**
     * @return mixed
     */
    public function getResidenteIndicadorId()
    {
        return $this->residenteIndicadorId;
    }

    /**
     * @param mixed $indicadorId
     */
    public function setIndicadorId($indicadorId)
    {
        $this->indicadorId = $indicadorId;
    }

    /**
     * @param mixed $residenteId
     */
    public function setResidenteId($residenteId)
    {
        $this->residenteId = $residenteId;
    }

    /**
     * @param mixed $periodoInicio
     */
    public function setPeriodoInicio($periodoInicio)
    {
        $this->periodoInicio = $periodoInicio;
    }

    /**
     * @param mixed $periodoFim
     */
    public function setPeriodoFim($periodoFim)
    {
        $this->periodoFim = $periodoFim;
    }

    /**
     * @param mixed $quantidade
     */
    public function setQuantidade($quantidade)
    {
        $this->quantidade = $quantidade;
    }

    /**
     * @return mixed
     */
    public function getQuantidade()
    {
        return $this->quantidade;
    }

    /**
     * @param mixed $preceptorId
     */
    public function setPreceptorId($preceptorId)
    {
        $this->preceptorId = $preceptorId;
    }

    /**
     * @param mixed $justificativa
     */
    public function setJustificativa($justificativa)
    {
        $this->justificativa = $justificativa;
    }

    /**
     * @return mixed
     */
    public function getJustificativa()
    {
        return $this->justificativa;
    }

    /**
     * @param mixed $situacao
     */
    public function setSituacao($situacao)
    {
        $this->situacao = $situacao;
    }

    public function getSituacao()
    {
        return $this->situacao;
    }


    protected $justificativa;

    const SITUACAO_AGUARDANDO_AVALIACAO = '0';
    const SITUACAO_AVALIACAO_VALIDA = '1';
    const SITUACAO_AVALIACAO_INVALIDA = '2';
    protected $situacao;


    public function __construct($residenteIndicadorId = NULL)
    {
        if ( (strlen($residenteIndicadorId)  >  0) )
        {
            $this->residenteIndicadorId = $residenteIndicadorId;
            $this->populate();
        }
    }

    public static function listarSituacoes($situacao = null)
    {
        $module = MIOLO::getCurrentModule();

        $arraySituacoes = array(
            self::SITUACAO_AVALIACAO_VALIDA => _M('VÁLIDO', $module),
            self::SITUACAO_AVALIACAO_INVALIDA => _M('INVÁLIDO', $module)
        );

        if (!is_null($situacao)) {
            $arraySituacoes[$situacao];
        }

        return $arraySituacoes;
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->residenteIndicadorId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO med.residenteindicador
                            (indicadorid,
                             residenteid,
                             periodoinicio,
                             periodofim,
                             quantidade,
                             preceptorid,
                             justificativa,
                             situacao)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?)';

        $params = array();
        $params[] = $this->indicadorId;
        $params[] = $this->residenteId;
        $params[] = $this->periodoInicio;
        $params[] = $this->periodoFim;
        $params[] = $this->quantidade;
        $params[] = $this->preceptorId;
        $params[] = $this->justificativa;
        $params[] = $this->situacao;
        
        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE med.residenteindicador
                   SET indicadorid = ?,
                        residenteid = ?,
                         periodoinicio = ?,
                         periodofim = ?,
                         quantidade = ?,
                         preceptorid = ?,
                         justificativa = ?,
                         situacao = ?
                 WHERE residenteindicadorid = ?';

        $params = array();
        $params[] = $this->indicadorId;
        $params[] = $this->residenteId;
        $params[] = $this->periodoInicio;
        $params[] = $this->periodoFim;
        $params[] = $this->quantidade;
        $params[] = $this->preceptorId;
        $params[] = $this->justificativa;
        $params[] = $this->situacao;
        $params[] = $this->residenteIndicadorId;

        return SDatabase::execute($sql, $params);
    }

    public function retornaIndicadorPorResidenteIndicadorEPeriodo($indicadorId, $residenteId, $periodoInicio, $periodoFim)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT
                       residenteIndicadorId,
                       indicadorId,
                       residenteid,
                       periodoinicio,
                       periodofim,
                       quantidade,
                       preceptorid,
                       justificativa,
                       situacao
                  FROM med.residenteindicador
                 WHERE indicadorid = ?
                        AND residenteid = ?
                         AND periodoinicio = ?
                         AND periodofim = ?
                 ";

        $result = SDatabase::query($sql, array($indicadorId, $residenteId, $periodoInicio, $periodoFim));

        if (!isset($result[0][1])) {
            return false;
        }

        list(
            $this->residenteIndicadorId,
            $this->indicadorId,
            $this->residenteId,
            $this->periodoInicio,
            $this->periodoFim,
            $this->quantidade,
            $this->preceptorId,
            $this->justificativa,
            $this->situacao) = $result[0];
    }

    public static function retornaIndicadoresDoResidentePorPeriodoEEspecialidade($dataInicial, $dataFinal, $especialidadeid, $residenteId, $filtro)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $where = 'B.periodoinicio >= ? AND
                    B.periodofim <= ? AND
                    A.enfaseid = ? AND
                    B.residenteid = ?';

        if (count($filtro)) {
            if ($filtro->indicador > 0) {
                $where .= 'AND A.indicadorid = ' . $filtro->indicador;
            }

            if (!empty($filtro->dataInicio) && !empty($filtro->dataFim)) {
                $where .= "AND (B.periodoinicio >= '" . $filtro->dataInicio . "' AND B.periodofim <= '" . $filtro->dataFim . "')";
            }
        }

        $sql = "SELECT
                    A.indicadorid,
                    A.enfaseid,
                    A.periodoid,
                    A.descricao,
                    A.periodicidade,
                    A.meta,
                    B.residenteindicadorid,
                    B.residenteid,
                    B.periodoinicio,
                    B.periodofim,
                    B.quantidade,
                    B.situacao AS situacaoIndicadorDoResidente,
                    B.justificativa
                FROM  med.indicador A INNER JOIN med.residenteindicador B
                ON A.indicadorid = B.indicadorid
                WHERE
                    $where
                ORDER BY B.periodoinicio, B.residenteindicadorid
        ";

        $result = SDatabase::query($sql, array(SAGU::convertDateToDb($dataInicial), SAGU::convertDateToDb($dataFinal), $especialidadeid, $residenteId));

        $retorno = array();
        foreach ($result as $valor) {
            $retorno[] = array(
                'indicadorid' => $valor[0],
                'enfaseid' => $valor[1],
                'periodoid' => $valor[2],
                'descricao' => $valor[3],
                'periodicidade' => $valor[4],
                'meta' => $valor[5],
                'residenteindicadorid' => $valor[6],
                'residenteid' => $valor[7],
                'periodoinicio' => $valor[8],
                'periodofim' => $valor[9],
                'quantidade' => $valor[10],
                'situacaoIndicadorDoResidente' => $valor[11],
                'justificativa' => $valor[12]
            );
        }

        return $retorno;
    }


    private function populate()
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT residenteindicadorid,
                       indicadorid,
                       residenteid,
                       periodoinicio,
                       periodofim,
                       quantidade,
                       preceptorid,
                       justificativa,
                       situacao
                  FROM med.residenteindicador
                 WHERE residenteindicadorid = ?";

        $result = SDatabase::query($sql, array($this->residenteIndicadorId));

        if ( !isset($result[0][1]) )
        {
            throw new Exception(_M('Registro inexistente. (@1)', $module, __CLASS__));
        }

        list( $this->residenteIndicadorId,
                $this->indicadorId,
                $this->residenteId,
                $this->periodoInicio,
                $this->periodoFim,
                $this->quantidade,
                $this->preceptorId,
                $this->justificativa,
                $this->situacao) = $result[0];
    }
}
?>