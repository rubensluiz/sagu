<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers: \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class MedResidente extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $residenteId;
    /**
     * @AttributeType integer
     * 
     */
    protected $enfaseId;
    /**
     * @AttributeType integer
     * 
     */
    protected $nucleoProfissionalId;
    /**
     * @AttributeType date
     * 
     */
    protected $inicio;
    /**
     * @AttributeType date
     * 
     */
    protected $fimPrevisto;
    /**
     * @AttributeType real
     * 
     */
    protected $notaFinal;
    /**
     * @AttributeType text
     * 
     */
    protected $parecerFinal;

    /**
     *
     * @var int
     */
    protected $personId;


    /**
     *
     * @var BasPhysicalPerson
     */
    protected $physicalPerson;

    /**
     *
     * @var MedEnfase
     */
    protected $enfase;

    const CODIGO_GRUPO_RESIDENTE_RESIDENCIA_MEDICA = 7;

    /**
     *
     * @var MedNucleoProfissional
     */
    protected $nucleoProfissional;


    /**
     *
     * @var MedCargaHorariaComplementar
     */
    protected $cargaHorariaComplementar;
    
    /**
     * @var MedCargaHorariaComplementar
     */
    protected $ocorrenciaDeContrato;

    /**
     *
     * @var MedTrabalhoDeConclusao
     */
    protected $trabalhoDeConclusao;

    /**
     * @var int
     */
    protected $subscriptionId;

    /**
     * @var int
     */
    protected $unidade1;

    /**
     * @var int
     */
    protected $unidade2;
    
    
    protected $trabalhoDeConclusaoPopulated = false;
    
    /**
     * Indica se residente esta ativo (ver metodo self::getSQLExpressionIsActive() )
     *
     * @var boolean
     */
    protected $isActive;
    
    /**
     * Id do ultimo estado contratual
     *
     * @var int
     */
    protected $ultimaOcorrenciaDeContratoId;
    
    /**
     * Status do ultimo estado contratual
     * 
     * @var int
     */
    protected $ultimoStatusDaOcorrenciaDeContratoId;
    
    /**
     *
     * @var MedStatusDaOcorrenciaDeContrato
     */
    protected $ultimoStatusDaOcorrenciaDeContrato;
    
    /*
     * 
     * Descrição do estágio
     */
    protected $descricao;
    
    /*
     * Id da turma
     * 
     * @var int
     */
    protected $turmaId;
    
    /**
     *
     * @var type 
     */
    public $instituicaoFormadora;
    
    /**
     * Código de registro de conclusão do pré-requisito do requisito
     * @var varchar
     */
    public $registroDeConclusaoDoPreRequisito;


    public function __construct($residenteId = NULL)
    {
        if ( (strlen($residenteId)  >  0) )
        {
            $this->residenteId = $residenteId;
            $this->populate();
        }
    }

    public function  __get($name)
    {
        if ( $name == 'physicalPerson' && !$this->physicalPerson && ( strlen($this->personId) > 0 ) )
        {
            $MIOLO = MIOLO::getInstance();
            $busPP = new BusinessBasicBusPhysicalPerson();
            $this->physicalPerson = $busPP->getPhysicalPerson($this->personId);
        }

        if ( $name == 'enfase' && !$this->enfase )
        {
            $this->enfase = new MedEnfase($this->enfaseId);
        }

        if ( $name == 'nucleoProfissional' && !$this->nucleoProfissional )
        {
            $this->nucleoProfissional = new MedNucleoProfissional($this->nucleoProfissionalId);
        }

        if ( $name == 'cargaHorariaComplementar' && !$this->cargaHorariaComplementar )
        {
            $filters = new stdClass();
            $filters->residenteId = $this->residenteId;
            $this->cargaHorariaComplementar = MedCargaHorariaComplementar::search($filters);
        }
        
        if ( $name == 'ocorrenciaDeContrato' && !$this->ocorrenciaDeContrato )
        {
            $filters = new stdClass();
            $filters->residenteId = $this->residenteId;
            $this->ocorrenciaDeContrato = MedOcorrenciaDeContrato::search($filters);
        }

        if ( $name == 'trabalhoDeConclusao' && !$this->trabalhoDeConclusaoPopulated && !$this->trabalhoDeConclusao )
        {
            $this->trabalhoDeConclusaoPopulated = true;
            $filters = new stdClass();
            $filters->residenteId = $this->residenteId;
            $find = MedTrabalhoDeConclusao::search($filters);
            if ( $find[0] )
            {
                $this->trabalhoDeConclusao = $find[0];
            }
        }
        
        if ( $name == 'ultimoStatusDaOcorrenciaDeContrato' && $this->needCheckPopulate('ultimoStatusDaOcorrenciaDeContrato') )
        {
            $this->ultimoStatusDaOcorrenciaDeContrato = new MedStatusDaOcorrenciaDeContrato($this->ultimoStatusDaOcorrenciaDeContratoId);
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT A.residenteid
                  FROM med.residente A';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY A.residenteid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new MedResidente($result[$i][0]);
        }

        return $retVal;
    }

    public static function getSearchGridSQL($filters  =  null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = '    SELECT PP.photoId,
                       A.residenteid,
                       PP.personId,
                       PP.name,
                       TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(A.fimprevisto, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       NP.descricao,
                       E.descricao,
                       G.descricao as status,
                       U1.description AS unidade1,
                       U2.description AS unidade2,
                       (G.statusdaocorrenciadecontratoid IN ( ' . implode(',', array(MedStatusDaOcorrenciaDeContrato::STATUS_BLOQUEIA, MedStatusDaOcorrenciaDeContrato::STATUS_DESLIGADO)) .' )) AS trancadoOuCancelado,
                       medturma.descricao
                  FROM med.residente A
       INNER JOIN ONLY basPhysicalPerson PP
                    ON PP.personId = A.personId
            INNER JOIN med.nucleoProfissional NP
                    ON NP.nucleoProfissionalId = A.nucleoProfissionalId
            INNER JOIN med.enfase E
                    ON E.enfaseId = A.enfaseId
             LEFT JOIN med.ocorrenciadecontrato F
                    ON F.ocorrenciadecontratoid = med.ultimaOcorrenciaDeContratoId(A.residenteId)
             LEFT JOIN med.statusdaocorrenciadecontrato G
                    ON G.statusdaocorrenciadecontratoid = F.statusdaocorrenciadecontratoid
             LEFT JOIN basUnit U1
                    ON U1.unitId = A.unidade1
             LEFT JOIN basUnit U2
                    ON U2.unitId = A.unidade2
             LEFT JOIN med.turma medturma
                    ON A.turmaId = medturma.turmaId';
        $args = array();

        // Quando for da tela via SERVICES, filtra apenas por residentes em que o preceptor é responsavel.
        if ( SAGU::userIsFromServices() && $filters->residente != DB_TRUE )
        {
            $busPerson = new BusinessBasicBusPerson();
            $person = $busPerson->getCurrentLoginPerson();

            $sqlVigencia = MedPreceptoria::SQL_VIGENCIA;

            // Filtra nucleoProfissionalId e ênfase
            $where .= " AND EXISTS(SELECT 1
                                  FROM med.preceptoria P
                                 WHERE {$sqlVigencia}
                                   AND P.personId = ?
                                   AND P.nucleoProfissionalId = A.nucleoProfissionalId
                                   AND P.enfaseId = A.enfaseId
                                   AND P.responsavel IS TRUE) ";
            $args[] = $person->personId;

            // Filtra apenas residentes com contrato ativo
            $where .= " AND NOW()::date BETWEEN A.inicio AND A.fimPrevisto ";
        }

        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND A.residenteid = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->enfaseId)  >  0 )
        {
            $where.=' AND A.enfaseid = ?';
            $args[] = $filters->enfaseId;
        }

        if ( strlen($filters->nucleoProfissionalId)  >  0 )
        {
            $where.=' AND A.nucleoprofissionalid = ?';
            $args[] = $filters->nucleoProfissionalId;
        }

        if ( strlen($filters->inicio)  >  0 )
        {
            $where.=' AND A.inicio = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->inicio;
        }

        if ( strlen($filters->fimPrevisto)  >  0 )
        {
            $where.=' AND A.fimprevisto = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->fimPrevisto;
        }

        if ( strlen($filters->notaFinal)  >  0 )
        {
            $where.=' AND A.notafinal = ?';
            $args[] = $filters->notaFinal;
        }

        if ( strlen($filters->parecerFinal)  >  0 )
        {
            $where.=' AND UNACCENT(A.parecerfinal) ILIKE UNACCENT(?) ';
            $args[] = $filters->parecerFinal.'%';
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $where.=' AND A.personId = ?';
            $args[] = $filters->personId;
        }

        if ( ( strlen($filters->betweenInicio) > 0 ) && ( strlen($filters->betweenFim) > 0 ) )
        {
            $where .= ' AND A.inicio BETWEEN 
                            TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') 
                        AND TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') ';
            
            $args[] = $filters->betweenInicio;
            $args[] = $filters->betweenFim;            
        }

        if ( count($filters->nucleosProfissionais) > 0 )
        {
            $list = implode(', ', $filters->nucleosProfissionais);
            $where .= " AND A.nucleoProfissionalId IN ({$list})";
        }

        if ( count($filters->enfases) > 0 )
        {
            $list = implode(', ', $filters->enfases);
            $where .= " AND A.enfaseId IN ({$list})";
        }

        if ( strlen($filters->personName)  >  0 )
        {
            $where.=' AND UNACCENT(PP.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->personName . '%';
        }

        if ( strlen($filters->unidade1) >  0 )
        {
            $where.=' AND A.unidade1 = ?';
            $args[] = $filters->unidade1;
        }

        if ( strlen($filters->unidade2) >  0 )
        {
            $where.=' AND A.unidade2 = ?';
            $args[] = $filters->unidade2;
        }
        
        if ( strlen($filters->instituicaoFormadora) >  0 )
        {
            $where.=' AND A.instituicaoFormadora = ?';
            $args[] = $filters->instituicaoFormadora;
        }
        
        if ( strlen($filters->codigoTurma) >  0 )
        {
            $turma = MedTurma::obtemTurma($filters->codigoTurma);
            
            $where.=' AND A.turmaId = ?';
            $args[] = $turma->turmaId;
        }

        $usuario = MedTurma::retornaAdminDaTurmaResidenciaMedica();
        if ( $usuario )
        {
            $where .= " AND A.turmaid in (SELECT AA.turmaid FROM med.turmaresponsavel AA WHERE AA.responsavel = ?)";
            $args[] = $usuario;
        }

        if ( strlen($where)  >  0 || SAGU::userIsFromServices() )
        {
            $sql .= ' WHERE '.substr($where, 4);
        }
        
        $sql .= ' ORDER BY PP.name ';

        return SAGU::prepare($sql, $args);
    }

    /**
     * Mantem codigo legado funcionando
     * 
     * @param stdClass $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = self::getSearchGridSQL($filters);
        
        return preg_match('/ WHERE /', $sql) ? SDatabase::query($sql) : array();
    }

    
    public static function searchMatriculaEmLote($filters = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.residenteid,
                       PP.personId,
                       PP.name
                  FROM med.residente A
       INNER JOIN ONLY basPhysicalPerson PP
                    ON PP.personId = A.personId
            INNER JOIN med.nucleoProfissional NP
                    ON NP.nucleoProfissionalId = A.nucleoProfissionalId
            INNER JOIN med.enfase E
                    ON E.enfaseId = A.enfaseId
             LEFT JOIN basUnit U1
                    ON U1.unitId = A.unidade1
             LEFT JOIN basUnit U2
                    ON U2.unitId = A.unidade2
             LEFT JOIN med.turma medturma
                    ON A.turmaId = medturma.turmaId';
        
        $args = array();

        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND A.residenteid = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->enfaseId)  >  0 )
        {
            $where.=' AND A.enfaseid = ?';
            $args[] = $filters->enfaseId;
        }

        if ( strlen($filters->nucleoProfissionalId)  >  0 )
        {
            $where.=' AND A.nucleoprofissionalid = ?';
            $args[] = $filters->nucleoProfissionalId;
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $where.=' AND A.personId = ?';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->codigoTurma) >  0 )
        {
            $turma = MedTurma::obtemTurma($filters->codigoTurma);
            
            $where.=' AND A.turmaId = ?';
            $args[] = $turma->turmaId;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY PP.name';

            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT A.username,
                       TO_CHAR(A.datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       A.ipaddress,
                       A.residenteid,
                       A.enfaseid,
                       A.nucleoprofissionalid,
                       TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(A.fimprevisto, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       A.notafinal,
                       A.parecerfinal,
                       A.personId,
                       A.subscriptionId,
                       A.unidade1,
                       A.unidade2,
                       A.descricao,
                       ' . self::getSQLExpressionIsActive() . ' AS isActive,
                       med.ultimaocorrenciadecontratoid(A.residenteId) AS ultimaOcorrenciaDeContratoId,
                       (SELECT statusDaOcorrenciaDeContratoId FROM med.ocorrenciaDeContrato WHERE ocorrenciaDeContratoId = med.ultimaocorrenciadecontratoid(A.residenteId)) AS ultimoStatusDaOcorrenciaDeContratoId,
                       A.turmaId,
                       A.instituicaoFormadora,
                       A.registroDeConclusaoDoPreRequisito
                  FROM med.residente A
                 WHERE A.residenteid = ?';
        $result = SDatabase::query($sql, array($this->residenteId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName,
                $this->dateTime,
                $this->ipAddress,
                $this->residenteId,
                $this->enfaseId,
                $this->nucleoProfissionalId,
                $this->inicio,
                $this->fimPrevisto,
                $this->notaFinal,
                $this->parecerFinal,
                $this->personId,
                $this->subscriptionId,
                $this->unidade1,
                $this->unidade2,
                $this->descricao,
                $this->isActive,
                $this->ultimaOcorrenciaDeContratoId,
                $this->ultimoStatusDaOcorrenciaDeContratoId,
                $this->turmaId,
                $this->instituicaoFormadora,
                $this->registroDeConclusaoDoPreRequisito) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        

        if ( strlen($this->residenteId)  ==  0 )
        {
            $retVal = $this->insert();
            $this->insertGrupo($this->personId, self::CODIGO_GRUPO_RESIDENTE_RESIDENCIA_MEDICA);
        }
        else
        {
            $retVal = $this->update();
        }

        foreach ( (array) $this->cargaHorariaComplementar as $row )
        {
            $row->residenteId = $this->residenteId;
            $row->save();
        }
        
        foreach ( (array) $this->ocorrenciaDeContrato as $ocorrencia )
        {
            $ocorrencia->residenteId = $this->residenteId;
            $ocorrencia->save();
        }

        return $retVal;
    }


    public function insertGrupo($personId, $groupId)
    {
        $busPerson = new BusinessBasicBusPerson();
        $personData = $busPerson->getPerson($personId);
        $busUser = new BusinessAdminUser();
        $idUser = $busUser->getByLogin($personData->mioloLogin);

        $dataUser = new BusinessAdminGroupUser();
        $group = new BusinessAdminGroup();
        $existGroup = $group->getGroup($groupId);

        if($existGroup->idgroup)
        {

            $unit = sMultiUnidade::obterUnidadesDoUsuario($idUser);
            $multiUnidadeAtiva = sMultiUnidade::estaHabilitada();

            //Se tiver mais de uma unidade e multiunidade HABILITADO manda o codigo da unidade que esta logada
            if ( $multiUnidadeAtiva && sizeof($unit) > 1 )
            {
                $unitId = sMultiUnidade::obterUnidadeLogada();
            }
            //se for apenas multiunidade ativa
            elseif( $multiUnidadeAtiva )
            {
                foreach($unit as $cod => $descricao)
                {
                    $unitId = $cod;
                }
            }

            $filter = new stdClass();
            $filter->idUser = $idUser->idUser;
            $filter->idGroup = $groupId;
            $filter->unitId = $unitId;
            $existUser = $dataUser->search($filter);

            if ( count($existUser) == 0)
            {
                $dataUser->setIdUser($idUser->idUser);
                $dataUser->setIdGroup($groupId);
                $dataUser->setUnitId($unitId);

                $dataUser->insertUserInGroups($dataUser);
            }
        }
    }

    private function insert()
    {
        if ( $this->turmaId == SType::NULL_VALUE )
        {
            $this->turmaId = NULL;
        }
        
        $sql = 'INSERT INTO med.residente 
                            (residenteid,
                             enfaseid,
                             nucleoprofissionalid,
                             inicio,
                             fimprevisto,
                             notafinal,
                             parecerfinal,
                             personId,
                             subscriptionId,
                             unidade1,
                             unidade2,
                             descricao,
                             turmaId,
                             instituicaoFormadora,
                             registroDeConclusaoDoPreRequisito
                             )
                     VALUES (?,
                             ?,
                             ?,
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';
        $sqlPK = "SELECT nextval('seq_medresidente_residenteid'::regclass)";
        $result = SDatabase::query($sqlPK);
        $residenteId = $result[0][0];
        $args = array(
            $residenteId,
            $this->enfaseId,
            $this->nucleoProfissionalId,
            $this->inicio,
            $this->fimPrevisto,
            $this->notaFinal,
            $this->parecerFinal,
            $this->personId,
            $this->subscriptionId,
            $this->unidade1,
            $this->unidade2,
            $this->descricao,
            $this->turmaId,
            $this->instituicaoFormadora,
            $this->registroDeConclusaoDoPreRequisito);
        
        $result = SDatabase::execute($sql, $args);
        
        if ( $result )
        {
            $this->residenteId = $residenteId;
        }

        // Insere uma ocorrencia de contrato ATIVA
        $ocorrenciaDeContrato = new MedOcorrenciaDeContrato();
        $ocorrenciaDeContrato->residenteId = $residenteId;
        $ocorrenciaDeContrato->dataHora = SAGU::getDateNow( SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP') );
        $ocorrenciaDeContrato->statusDaOcorrenciaDeContratoId = MedStatusDaOcorrenciaDeContrato::STATUS_ATIVO;
        $ocorrenciaDeContrato->save();

        return $result;
    }

    private function update()
    {
        $sql = "UPDATE med.residente
                   SET residenteid = ?";
        $args[] = $this->residenteId;
        
        if ( !is_null($this->enfaseId) )
        {
            $sql .= " ,enfaseId = ?";
            $args[] = $this->enfaseId;
        }
        if ( !is_null($this->nucleoProfissionalId) )
        {
            $sql .= " ,nucleoProfissionalId = ?";
            $args[] = $this->nucleoProfissionalId;
        }
        if ( !is_null($this->inicio) )
        {
            $sql .= " ,inicio = ?";
            $args[] = $this->inicio;
        }
        if ( !is_null($this->fimPrevisto) )
        {
            $sql .= " ,fimPrevisto = ?";
            $args[] = $this->fimPrevisto;
        }
        if ( !is_null($this->notaFinal) )
        {
            $sql .= " ,notaFinal = ?";
            $args[] = $this->notaFinal;
        }
        if ( !is_null($this->parecerFinal) )
        {
            $sql .= " ,parecerFinal = ?";
            $args[] = $this->parecerFinal;
        }
        if ( !is_null($this->personId) )
        {
            $sql .= " ,personId = ?";
            $args[] = $this->personId;
        }
        if ( !is_null($this->subscriptionId) )
        {
            $sql .= " ,subscriptionId = ?";
            $args[] = $this->subscriptionId;
        }
        if ( !is_null($this->unidade1) )
        {
            $sql .= " ,unidade1 = ?";
            $args[] = $this->unidade1;
        }
        if ( !is_null($this->unidade2) )
        {
            $sql .= " ,unidade2 = ?";
            $args[] = $this->unidade2;
        }
        if ( !is_null($this->descricao) )
        {
            $sql .= " ,descricao = ?";
            $args[] = $this->descricao;
        }
        if ( !is_null($this->turmaId) )
        {
            if ( $this->turmaId == SType::NULL_VALUE )
            {
                $sql .= ', turmaId = NULL';
            }
            else
            {
                $sql .= " ,turmaId = ?";
                $args[] = $this->turmaId;
            }
        }
        if ( !is_null($this->instituicaoFormadora) )
        {
            $sql .= " ,instituicaoFormadora = ?";
            $args[] = $this->instituicaoFormadora;
        }
        if ( !is_null($this->registroDeConclusaoDoPreRequisito) )
        {
            $sql .= " ,registroDeConclusaoDoPreRequisito = ?";
            $args[] = $this->registroDeConclusaoDoPreRequisito;
        }
        
        $sql .= " WHERE residenteid = ?";
        $args[] = $this->residenteId;
        
        return SDatabase::execute($sql, $args);
    }
    
    /**
     * Função que retorna um valor booleano se esta pessoa é residente.
     */
    public static function isResident($personId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM med.residente
                 WHERE personId = ?';

        $params = array();
        $params[] = $personId;

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return ($result[0][0] > 0);
    }

    public function delete()
    {

        $this->__get('cargaHorariaComplementar');
        $this->__get('ocorrenciaDeContrato');
        
        if ( strlen($this->residenteId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        foreach ( $this->cargaHorariaComplementar as $row )
        {
            $row->delete();
        }
        
        foreach ( $this->ocorrenciaDeContrato as $ocorrencia )
        {
            $ocorrencia->delete();
        }

        $sql = 'DELETE FROM med.residente
                      WHERE residenteid = ?';
        $args = array($this->residenteId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->residenteId = null;
        }

        return $result;
    }


    /**
     * Retorna se ultimo estado da ocorrencia de contrato esta como concluido
     *
     * @param int $residenteId
     * @return boolean
     */
    public static function ultimoEstadoResidente($residenteId)
    {
        $sql = "SELECT statusDaOcorrenciaDeContratoId
                  FROM med.ocorrenciaDeContrato
                 WHERE ocorrenciaDeContratoId = med.ultimaOcorrenciaDeContratoId(?)";
        $args = array($residenteId);
        $result = SDatabase::query($sql, $args);

        return $result[0][0];
    }


    /**
     * Retorna lista de unidades onde residente nao possui carga horaria suficiente
     * Regra descrita no link: http://redmine.solis.coop.br:3000/issues/10059#note-13
     *
     * @return int
     */
    public static function unidadesCargaHorariaPendente($residenteId)
    {
        $sql = "SELECT A.unidadeTematicaId,
                       A.descricao AS unidadeTematica,
                       A.cargaHoraria,
                       ROUND((SELECT SUM(cargaHoraria)
				FROM med.encontro
			       WHERE ofertadeunidadetematicaid = OU.ofertadeunidadetematicaid)::numeric, 0) AS cargaHorariaRealizada
                  FROM med.ofertadeunidadetematica OU
            INNER JOIN med.unidadetematica A
                    ON A.unidadetematicaid = OU.unidadetematicaid
            INNER JOIN med.ofertadoresidente _OR
                    ON _OR.ofertadeunidadetematicaid = OU.ofertadeunidadetematicaid
                 WHERE EXISTS (SELECT 'x'
                                 FROM med.enfaseDaUnidadeTematica B
                                WHERE B.unidadeTematicaId = A.unidadeTematicaId
                                  AND B.enfaseId = (SELECT enfaseId
                                                      FROM med.residente
                                                     WHERE residenteId = ?))
                   AND EXISTS (SELECT 'x'
                                 FROM med.nucleoDaUnidadeTematica B
                                WHERE B.unidadeTematicaId = A.unidadeTematicaId
                                  AND B.nucleoProfissionalId = (SELECT nucleoProfissionalId
                                                                  FROM med.residente
                                                                 WHERE residenteId = ?))
                   AND A.frequenciaminima > (med.obtemcargahorariadoresidentenaoferta(?, OU.ofertadeunidadetematicaid)*100)/A.cargahoraria
                   AND _OR.residenteid = ?";
                   
        $args = array($residenteId, $residenteId, $residenteId, $residenteId);

        $result = SDatabase::query($sql, $args);

        return (array) SAGU::resultToObject($result, array(
            'unidadeTematicaId',
            'unidadeTematica',
            'cargaHoraria',
            'cargaHorariaRealizada'
        ));
    }
    
    /**
     * Obtem a CONDICAO sql que retorna se residente esta ativo.
     * Ativo significa que o ultimo estado contratual é diferente de BLOQUEIA ou CONCLUIDO.
     * 
     * @param $tableAlias string Alias da tabela
     */
    public static function getSQLExpressionIsActive($tableAlias = 'A')
    {
        $sql = "(   NOT EXISTS(SELECT 1
                                 FROM med.statusDaOcorrenciaDeContrato S
                           INNER JOIN med.ocorrenciaDeContrato O
                                   ON S.statusdaocorrenciadecontratoid = O.statusdaocorrenciadecontratoid
                                WHERE O.ocorrenciaDeContratoId = med.ultimaocorrenciadecontratoid(%s.residenteId)
                                  AND (bloqueiaresidencia IS TRUE
                                    OR concluiresidencia IS TRUE
                                    OR O.datahora > now()
                                    )) )";

        return sprintf($sql, $tableAlias);
    }
    
    /**
     * Obtém alunos não alocados em nenhuma turma
     * 
     * @param type $filters
     * @return type
     */
    public static function obtemAlunosNaoALocados($filters)
    {
        $sql = " SELECT A.residenteId,
                        B.name,
                        C.descricao as nucleoProfissional,
                        D.descricao as enfase,
                        COALESCE(B.email, B.emailalternative) as email,
                        COALESCE(B.cellphone, B.residentialphone) as telefone,
                        E.name
                   FROM med.residente A
        INNER JOIN ONLY basPhysicalPerson B 
                     ON (A.personId = B.personId)
             INNER JOIN med.nucleoProfissional C
                     ON (A.nucleoProfissionalId = C.nucleoProfissionalId)
             INNER JOIN med.enfase D
                     ON (A.enfaseId = D.enfaseId)
              LEFT JOIN basLegalPerson E 
                     ON (A.instituicaoformadora = E.personId) 
                  WHERE A.turmaId IS NULL 
                    AND CASE WHEN A.fimPrevisto IS NOT NULL
                             THEN
                                 A.fimPrevisto > now()::date
                             ELSE
                                 TRUE
                        END ";
        
        if ( strlen($filters->nucleoProfissionalId) > 0 )
        {
            $sql .= " AND A.nucleoProfissionalId = ? ";
            $args[] = $filters->nucleoProfissionalId;
        }
        
        if ( strlen($filters->enfaseId) > 0 )
        {
            $sql .= " AND A.enfaseId = ? ";
            $args[] = $filters->enfaseId;
        }
        
        $sql .= " ORDER BY B.name, C.descricao, D.descricao ";
        
        return SDatabase::query($sql, $args);
    }
    
    /**
     * Obtém alunos da turma
     * 
     * @param type $filters
     * @return type
     */
    public static function obtemAlunosDaTurma($filters)
    {
        $sql = " SELECT A.residenteId,
                        B.name,
                        C.descricao as nucleoProfissional,
                        D.descricao as enfase,
                        COALESCE(B.email, B.emailalternative) as email,
                        COALESCE(B.cellphone, B.residentialphone) as telefone,
                        E.name
                   FROM med.residente A
        INNER JOIN ONLY basPhysicalPerson B 
                     ON (A.personId = B.personId)
             INNER JOIN med.nucleoProfissional C
                     ON (A.nucleoProfissionalId = C.nucleoProfissionalId)
             INNER JOIN med.enfase D
                     ON (A.enfaseId = D.enfaseId)
              LEFT JOIN basLegalPerson E 
                     ON (A.instituicaoformadora = E.personId) 
                  WHERE A.turmaId = ? ";
        
        $args[] = $filters->turmaId;
        
        if ( strlen($filters->nucleoProfissionalId) > 0 )
        {
            $sql .= " AND A.nucleoProfissionalId = ? ";
            $args[] = $filters->nucleoProfissionalId;
        }
        
        if ( strlen($filters->enfaseId) > 0 )
        {
            $sql .= " AND A.enfaseId = ? ";
            $args[] = $filters->enfaseId;
        }
        
        $sql .= " ORDER BY B.name, C.descricao, D.descricao ";
        
        return SDatabase::query($sql, $args);
    }
    
    public static function obtemEmailDoResidente($residenteId)
    {
        $sql = " SELECT COALESCE(B.email, B.emailalternative) as email
                   FROM med.residente A
        INNER JOIN ONLY basPhysicalPerson B 
                     ON (A.personId = B.personId) 
                  WHERE A.residenteId = ? ";
        
        $args[] = $residenteId;
        
        $email = SDatabase::query($sql, $args);
        
        return $email[0][0];
    }
    
    /**
     * Obtem cod do residente ativo
     * 
     * @return int
     */
    public static function obterResidenteIdAtivo($personId)
    {
        $sql = "SELECT A.residenteid
                  FROM med.residente A
                 WHERE A.personId = ?
                   AND ( NOW()::date BETWEEN A.inicio AND A.fimPrevisto )
              ORDER BY A.inicio, A.fimPrevisto";
        
        $result = SDatabase::query($sql, array($personId));
        
        return $result[0][0];
    }
}
?>