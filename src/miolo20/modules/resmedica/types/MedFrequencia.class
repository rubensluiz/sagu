<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 19/07/2011
 *
 */
class MedFrequencia extends SType
{
    const PRESENTE = 'P';
    const AUSENTE = 'A';
    const JUSTIFICADA = 'J';
 
    /**
     * @AttributeType integer
     *
     */
    protected $encontroId;
    /**
     * @AttributeType integer
     *
     */
    protected $residenteId;
    /**
     * @AttributeType text
     *
     */
    protected $presenca;
    /**
     * @AttributeType text
     *
     */
    protected $justificativa;
    /**
     * @AttributeType int
     *
     */
    protected $fileId;
    /**
     * @AttributeType (object)
     *
     */
    protected $encontro;
    /**
     * @AttributeType (object)
     *
     */
    protected $residente;


    public function __construct($encontroId = NULL, $residenteId = NULL)
    {
        if ( (strlen($encontroId)  >  0) && (strlen($residenteId)  >  0) )
        {
            $this->encontroId = $encontroId;
            $this->residenteId = $residenteId;
            $this->populate();
        }
    }

    public function __get($name)
    {
        $MIOLO = MIOLO::getInstance();

        // Load on demand
        if ( $name == 'encontro' && !$this->encontro && strlen($this->encontroId) > 0 )
        {
            // Object ocorrencia de oferta
            $filters = new stdClass();
            $filters->encontroId = $this->encontroId;
            $this->encontro = new MedEncontro($this->encontroId);
        }

        // Load on demand
        if ( $name == 'residente' && !$this->residente && strlen($this->residenteId) > 0 )
        {
            // Object resindente
            $this->residente = new MedResidente($this->residenteId);
        }
        
        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT A.encontroid,
                       A.residenteid,
                       A.presenca,
                       A.justificativa,
                       A.fileId
                  FROM med.frequencia A';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY A.encontroid';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new MedFrequencia($result[$i][0], $result[$i][1]);
        }

        return $retVal;
    }

    public static function searchGrid($filters = null)
    {
        $sql = 'SELECT A.encontroid,
                       A.residenteid,
                       A.presenca,
                       A.justificativa,
                       A.fileId
                  FROM med.frequencia A';

        $args = array();
        if ( strlen($filters->encontroId)  >  0 )
        {
            $where.=' AND A.encontroid = ?';
            $args[] = $filters->encontroId;
        }

        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND A.residenteId = ?';
            $args[] = $filters->residenteId;
        }
        
        if ( strlen($filters->presenca)  >  0 )
        {
            $where.=' AND A.presenca = ?';
            $args[] = $filters->presenca;
        }

        if ( strlen($filters->justificativa)  >  0 )
        {
            $where.=' AND A.justificativa = ?';
            $args[] = $filters->justificativa;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY A.encontroid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.username,
                       TO_CHAR(A.datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       A.ipaddress,
                       A.encontroid,
                       residenteid,
                       presenca,
                       justificativa,
                       fileId
                  FROM med.frequencia A
                 WHERE A.encontroId = ?
                   AND A.residenteId = ?';
        
        $result = SDatabase::query($sql, array($this->encontroId, $this->residenteId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName,
             $this->dateTime,
             $this->ipAddress,
             $this->encontroId,
             $this->residenteId,
             $this->presenca,
             $this->justificativa,
             $this->fileId) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $this->__get('residente');

        if( ($this->presenca == MedFrequencia::JUSTIFICADA) && (strlen($this->justificativa)==0) )
        {
            $msg = _M('O campo justificativa do residente @1 deve ser informado','basic', $this->residente->physicalPerson->name). '.';
            throw new Exception($msg);
        }

        $filters = new stdClass();
        $filters->encontroId = $this->encontroId;
        $filters->residenteId = $this->residenteId;
        if ( count($this->search($filters)) == 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO med.frequencia
                            (encontroid,
                             residenteid,
                             presenca,
                             justificativa,
                             fileId)
                     VALUES (?, ?, ?, ?, ?)';

        $args = array($this->encontroId,
                      $this->residenteId,
                      $this->presenca,
                      $this->justificativa,
                      $this->fileId);
        
        $result = SDatabase::execute($sql, $args);

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE med.frequencia
                   SET presenca = ?,
                       justificativa = ?,
                       fileid = ?
                 WHERE encontroid = ?
                   AND residenteid = ?';
        
        $args = array($this->presenca,
                      $this->justificativa,
                      $this->fileId,
                      $this->encontroId,
                      $this->residenteId);
        
        return SDatabase::execute($sql, $args);
    }


    public function delete()
    {        
        if ( strlen($this->encontroId)  ==  0 || strlen($this->residenteId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM med.frequencia
                      WHERE encontroId = ?
                        AND residenteId = ?';

        $args = array($this->encontroId, $this->residenteId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->encontroId = null;
            $this->residenteId = null;
        }

        return $result;
    }
}
?>