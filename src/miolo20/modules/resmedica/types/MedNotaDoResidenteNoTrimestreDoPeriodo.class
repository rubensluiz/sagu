<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * @since
 * Class created on 09/01/2015
 */

class MedNotaDoResidenteNoTrimestreDoPeriodo extends SType
{
    public $notaDoResidenteNoTrimestreDoPeriodoId;
    public $residenteId;
    public $periodoId;
    public $trimestre;
    public $tipoDeNota;
    public $nota;
    public $parecer;
    public $pareceResidente;
    
    const NOTA_TRIMESTRAL = 'T';
    const NOTA_MEDIA = 'M';
    
    /**
     * Insere ou atualiza as notas do residente no período
     * 
     * @param MedNotaDoResidenteNoTrimestreDoPeriodo $data
     * @return boolean
     */
    public static function salvar(MedNotaDoResidenteNoTrimestreDoPeriodo $data)
    {
        // Obtém o periodoId
        $periodoId = self::obtemPeriodo($data->periodoId);
        
        //  Verifica se já existe o registro da nota
        $sql = " SELECT COUNT(*) > 0,
                        notaDoResidenteNoTrimestreDoPeriodoId
                   FROM med.NotaDoResidenteNoTrimestreDoPeriodo
                  WHERE residenteId = ? 
                    AND periodoId = ?
                    AND trimestre = ? 
                    AND tipoDeNota = ? 
               GROUP BY notaDoResidenteNoTrimestreDoPeriodoId ";
        
        $args[] = $data->residenteId;
        $args[] = $periodoId;
        $args[] = $data->trimestre;
        $args[] = $data->tipoDeNota;
        
        $existeRegistro = SDatabase::query($sql, $args);
        
        if ( $existeRegistro[0][0]  == DB_TRUE )
        {
            $data->notaDoResidenteNoTrimestreDoPeriodoId = $existeRegistro[0][1];
            
            $sql = " UPDATE med.NotaDoResidenteNoTrimestreDoPeriodo
                        SET nota = ?,
                            parecer = ?,
                            pareceResidente = ?
                      WHERE notaDoResidenteNoTrimestreDoPeriodoId = ? ";
            
            $argsNota[] = $data->nota; 
            $argsNota[] = $data->parecer; 
            $argsNota[] = $data->pareceResidente; 
            $argsNota[] = $data->notaDoResidenteNoTrimestreDoPeriodoId; 
        }
        else
        {
            $sql = " INSERT INTO med.NotaDoResidenteNoTrimestreDoPeriodo
                                 (residenteId,
                                 periodoId,
                                 trimestre,
                                 tipoDeNota,
                                 nota,
                                 parecer,
                                 pareceResidente)
                          VALUES (?, ?, ?, ?, ?, ?, ?) ";
            
            $argsNota[] = $data->residenteId; 
            $argsNota[] = $periodoId; 
            $argsNota[] = $data->trimestre; 
            $argsNota[] = $data->tipoDeNota; 
            $argsNota[] = $data->nota; 
            $argsNota[] = $data->parecer; 
            $argsNota[] = $data->pareceResidente; 
        }
                 
        return SDatabase::execute($sql, $argsNota);
    }
    
    /**
     * Obtem o id do período
     * 
     * @param string $periodo
     * @return int
     */
    public static function obtemPeriodo($periodo)
    {
        $sql = " SELECT periodoId 
                   FROM med.periodo 
                  WHERE periodo = ? ";
        
        $periodoId = SDatabase::query($sql, array($periodo));
        
        return $periodoId[0][0];
    }
    
    /**
     * Obtém a nota do residente do trimestre no período
     * 
     * @param objeto array $filters-> residenteId, periodoId, trimestre, tipoDeNota
     * @return int
     */
    public static function obtemNotaDoResidente($filters)
    {
        $sql = " SELECT nota
                   FROM med.NotaDoResidenteNoTrimestreDoPeriodo
                  WHERE residenteId = ? 
                    AND periodoId = ?
                    AND trimestre = ? 
                    AND tipoDeNota = ? ";
        
        $args[] = $filters->residenteId;
        $args[] = $filters->periodoId;
        $args[] = $filters->trimestre;
        $args[] = $filters->tipoDeNota;
                
        $result = SDatabase::query($sql, $args);
        
        return $result[0][0];
    }
    
    /**
     * Obtém o parecer do residente do trimestre no período
     * 
     * @param type $filters
     * @return string
     */
    public static function obtemParecerDoResidente($filters)
    {
        $sql = " SELECT parecer
                   FROM med.NotaDoResidenteNoTrimestreDoPeriodo
                  WHERE residenteId = ? 
                    AND periodoId = ?
                    AND trimestre = ? 
                    AND tipoDeNota = ? ";
        
        $args[] = $filters->residenteId;
        $args[] = $filters->periodoId;
        $args[] = $filters->trimestre;
        $args[] = $filters->tipoDeNota;
        
        $result = SDatabase::query($sql, $args);
        
        return $result[0][0];
    }
    
    /**
     * Obtem auto avaliacao do residente do trimestre no período
     * 
     * @param type $filters
     * @return string
     */
    public static function obtemAutoAvaliacaoDoResidente($filters)
    {
        $sql = " SELECT pareceresidente
                   FROM med.NotaDoResidenteNoTrimestreDoPeriodo
                  WHERE residenteId = ? 
                    AND periodoId = ?
                    AND trimestre = ? 
                    AND tipoDeNota = ? ";
        
        $args[] = $filters->residenteId;
        $args[] = $filters->periodoId;
        $args[] = $filters->trimestre;
        $args[] = $filters->tipoDeNota;
        
        $result = SDatabase::query($sql, $args);
        
        return $result[0][0];
    }
}