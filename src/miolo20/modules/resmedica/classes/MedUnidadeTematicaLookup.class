<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Componente UnidadeTematica criado para o caso de ter que adicionar mais informacoes
 * neste lookup no futuro.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 **/

class MedUnidadeTematicaLookup extends SFieldGroup
{
    /**
     *
     * @param array $options
     * <br><b>residenteInfo</b> (boolean) Mostra informacao de carga horaria ja cursada pelo residente (deve existir campo residenteId no formulario, para passar como filtro)
     */
    public function  __construct($options = array( ))
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $options = array_merge(array(
            'id' => 'unidadeTematicaId',
            'value' => null,
            'label' => _M('Rodízio', $module),
            'item' => 'UnidadeTematica',
            'module' => 'resmedica',
            'baseGroup' => false,
            'residenteInfo' => false,
        ), $options);

        $options['filter'] = array('unidadeTematicaId' => $options['id']);
        if ( $options['residenteInfo'] )
        {
            $options['filter']['residenteId'] = 'residenteId';
        }

        $options['related'] = array($options['id'] . 'Description');
        $options['related'][] = '_periodo';
        $options['related'][] = '_tipo';
        $options['related'][] = '_cargaHoraria';
        $options['related'][] = '_frequenciaMinima';
        $options['related'][] = '_notaMaxima';
        $options['related'][] = '_notaMinimaParaAprovacao';
        $options['related'][] = '_nucleosProfissionais';
        $options['related'][] = '_enfases';
        $options['related'][] = '_cargaHorariaCursada';

        $this->fields[] = $this->objects[$options['id']] = new SLookupContainer($options['id'], $options['value'], $options);

        $this->fields[] = $periodo = new MTextField('_periodo', null, _M('Período', $module), 20);
        $periodo->setReadOnly(true);

        $this->fields[] = $tipo = new MTextField('_tipo', null, _M('Tipo', $module), 20);
        $tipo->setReadOnly(true);

        $this->fields[] = $cargaHoraria = new MTextField('_cargaHoraria', null, _M('Carga horária', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('horas', $module));
        $cargaHoraria->setReadOnly(true);

        $this->fields[] = $frequenciaMinima = new MTextField('_frequenciaMinima', null, _M('Frequência mínima', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('%', $module));
        $frequenciaMinima->setReadOnly(true);

        $this->fields[] = $notaMaxima = new MTextField('_notaMaxima', null, _M('Nota máxima', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $notaMaxima->setReadOnly(true);
        
        $this->fields[] = $notaMinimaParaAprovacao = new MTextField('_notaMinimaParaAprovacao', null, _M('Nota mínima para aprovação', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $notaMinimaParaAprovacao->setReadOnly(true);
        
        $this->fields[] = $nucleos = new MMultiLineField('_nucleosProfissionais', null, _M('Núcleos profissionais'), null, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $nucleos->setReadOnly(true);

        $this->fields[] = $enfases = new MMultiLineField('_enfases', null, _M('Ênfases'), null, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $enfases->setReadOnly(true);

        $this->fields[] = $cargaHorariaCursada = new MTextField('_cargaHorariaCursada', null, _M('Carga horária já cursada', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('horas', $module));
        $cargaHorariaCursada->setReadOnly(true);
        if ( !$options['residenteInfo'] )
        {
            $cargaHorariaCursada->addBoxStyle('display', 'none');
        }

        $this->fields = SAGU::alignFields($this->fields);

        parent::__construct($options);

        $this->setControls($this->fields);
    }
}
?>