<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 */
class FrmResidenteSearch extends SSearchForm
{
    public function __construct($data)
    {
        parent::__construct(null, new MedResidente(), array('residenteId'));

        //Acessado pelo módulo de serviços
        if ( SAGU::userIsFromServices() )
        {
            // Desabilita a Toolbar
            $this->disableToolbar();
        }
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Código do residente
        $fields[] = new MIntegerField('residenteIdS', $this->getRequestValue('residenteIdS'), _M('Código do residente'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));

        // Pessoa
        $opts = array(
            'label' => _M('Pessoa', $module),
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'descriptionReadOnly' => false,
            'descriptionName' => 'personName',
        );
        $fields[] = new SLookupContainer('personIdS', $data->personIdS, $opts);
        $validators[] = new MIntegerValidator('personIdS', _M('Pessoa', $module), 'optional');

        // Apenas exibir estes campos quando nao vier do SERVICES
        if ( ! SAGU::userIsFromServices() )
        {
            $fields[] = new SBeginEndPeriod(array(
                'label' => _M('Período de entrada', $module),
                'baseGroup' => false,
                'disposition' => 'horizontal',
                'begin' => array(
                    'label' => _M('entre', $module),
                    'dateId' => 'betweenInicioS'
                ),
                'end' => array(
                    'label' => _M('e', $module),
                    'dateId' => 'betweenFimS'
                ),
            ));

            // Lookup de turma
        $optsTurma = array(
            'label' => _M('Turma', $module),
            'item' => 'Turma',
            'module' => 'resmedica',
        );
        $fields[] = $turmaId = new SLookupContainer('codigoTurmaS', $this->getRequestValue('codigoTurmaS'), $optsTurma);
        $turmaId->addAttribute('onblur', SForm::getAjaxAction('obtemInformacaoTurma', 'divTurma', false));
            
            // Núcleos profissionais
            $fields[] = $nucleosProfissionais = new MMultiSelection('nucleosProfissionaisS', (array) $this->getFormValue('nucleosProfissionaisS'), _M('Núcleos profissionais'), MedNucleoProfissional::listRecords());
            $nucleosProfissionais->setJsHint(_M('Selecione os núcleos profissionais'));

            // Ênfases
            $fields[] = $enfases = new MMultiSelection('enfasesS', (array) $this->getFormValue('enfasesS'), _M('Ênfases'), MedEnfase::listRecords());
            $enfases->setJsHint(_M('Selecione as ênfases'));

            // Unidade de saude 1
            $busUnit = new BusinessBasicBusUnit();
            $fields[] = $unidade1 = new MSelection('unidade1S', $this->getRequestValue('unidade1S', $data->unidade1S), _M('Unidade de saúde 1', $module), $busUnit->listUnit());
            $unidade1->setJsHint(_M('Informe a unidade', $module));
            $unidade1->setVisibility(false);

            // Unidade de saude 2
            $fields[] = $unidade2 = new MSelection('unidade2S', $this->getRequestValue('unidade2S', $data->unidade2S), _M('Unidade de saúde 2', $module), $busUnit->listUnit());
            $unidade2->setJsHint(_M('Informe a unidade', $module));
            $unidade2->setVisibility(false);
        }
        
        // LegalPerson
        $optsInstituicao = array(
            'label' => _M('Instituição formadora', $module),
            'item' => 'LegalPerson',
            'module' => 'basic',
        );
        $fields[] = $turmaId = new SLookupContainer('instituicaoFormadoraS', $this->getRequestValue('instituicaoFormadoraS', $data->instituicaoFormadoraS), $optsInstituicao);
        
        // Exibir foto
        $exibirFotoValue = $this->getRequestValue('exibirFotoS');
        $fields[] = $exibirFoto = new MCheckBox('exibirFotoS', DB_TRUE, _M('Exibir foto', $module), $exibirFotoValue == DB_TRUE, _M('Exibir foto do residente nos resultados.', $module));

        $data->codigoTurmaS = MIOLO::_REQUEST('codigoTurmaS');
        
        $fields[] = new MDiv('divTurma', $this->obtemInformacaoTurma($data));
        
        parent::defineFields($fields, $module, 'GrdResidenteSearch', $validators);

        //Se for chamado pelo módulo de serviços exibe botão voltar
        if( SAGU::userIsFromServices() )
        {
            $url = $MIOLO->GetActionURL('services', 'main');
            $this->AddField(new MButton('btnBack', _M('<< Voltar', $module), $url));
        }
        
        if ( substr_count(MIOLO::_REQUEST('personName'), '%') > 0 )
        {
            $MIOLO->page->onload("document.getElementById('personName').value = '';");
        }
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->enfases = $this->getRequestValue('enfasesS');
        $data->nucleosProfissionais = $this->getRequestValue('nucleosProfissionaisS');
        $data->betweenInicio = $this->getRequestValue('betweenInicioS');
        $data->betweenFim = $this->getRequestValue('betweenFimS');
        $data->personName = $this->getRequestValue('personName');
        
        //Se vier do módulo services ja vem com dados na grid
        if(SAGU::userIsFromServices())
        {
            $data->personName = $this->getRequestValue('personName'). '%';
        }
        
        $data->codigoTurma = $this->getRequestValue('codigoTurmaS');
        
        return $data;
    }
    
    public function obtemInformacaoTurma($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        if ( strlen($args->codigoTurmaS) > 0 )
        {
            $infoTurma = MedTurma::obtemTurma($args->codigoTurmaS);
                        
            if ( strlen($infoTurma->enfaseId) > 0 )
            {
                $jsCode .= " document.getElementById('enfasesS').value = '{$infoTurma->enfaseId}'; 
                             document.getElementById('enfasesS').disabled = true; ";   
            }
            else
            {
                $jsCode .= " document.getElementById('enfasesS').disabled = false; "; 
            }
            
            if ( strlen($infoTurma->nucleoProfissionalId) > 0 )
            {
                $jsCode .= " document.getElementById('nucleosProfissionaisS').value = '{$infoTurma->nucleoProfissionalId}'; 
                             document.getElementById('nucleosProfissionaisS').disabled = true; ";    
            }
            else
            {
                $jsCode .= " document.getElementById('nucleosProfissionaisS').disabled = false; ";
            }
        }
        else
        {
            if ( $args->phpFunction  )
            {
                $jsCode = " document.getElementById('nucleosProfissionaisS').value = ''; 
                            document.getElementById('enfasesS').value = '';

                            document.getElementById('nucleosProfissionaisS').disabled = false; 
                            document.getElementById('enfasesS').disabled = false;";
            }
        }
        
        if ( $args->phpFunction )
        {
            $MIOLO->page->addAJAXJsCode($jsCode);
        }
        else
        {
            $MIOLO->page->addJsCode($jsCode);
        }
    }
}
?>