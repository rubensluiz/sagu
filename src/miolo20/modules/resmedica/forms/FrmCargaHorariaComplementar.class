<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class FrmCargaHorariaComplementar extends SManagementForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $MIOLO->uses('/ui/controls/msubdetail.class');

        parent::__construct(new MedCargahorariacomplementar(), array( 'cargaHorariaComplementarId' ));

        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        
        $this->toolbar->setButtonURL(MToolBar::BUTTON_BACK, $this->getPreviousURL());
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $residenteId = $this->getRequestValue('residenteId');

        if ( strlen($residenteId) <= 0 )
        {
            $MIOLO->error( _M('Deve ser informado um residente para acessar esta interface', $module) );
        }

        $fields[] = new MedResidenteInformation(array( 'residenteId' => $residenteId ));

        $fields[] = $residente = new MTextField('residenteId', $residenteId);
        $residente->addAttribute('style', 'display:none'); 
        $fields[] = new MDiv('divLimbo', null);

        $opts = array(
            'label' => _M('Oferta de rodízio', $module),
            'item' => 'ofertaDeUnidadeTematica',
            'module' => 'resmedica',
            'filter' => array('ofertaDeUnidadeTematicaId' => 'ofertaDeUnidadeTematicaId'),
            'related' => 'ofertaDeUnidadeTematicaIdDescription'
        );
        $subFields[] = $ofertaDeUnidadeTematicaId =  new SLookupContainer('ofertaDeUnidadeTematicaId', null, $opts);
        $subValids[] = new MIntegerValidator('ofertaDeUnidadeTematicaId', _M('Oferta de rodízio ', $module), 'required');

        //Tipo de carga horaria
        $subFields[] = $tipoCargaHoraria = new MSelection('tipoDeCargaHorariaComplementarId', null, _M('Tipo de carga horária', $module), MedTipoDeCargaHorariaComplementar::listRecords());
        $tipoCargaHoraria->setJsHint(_M('Informe o tipo de carga horária', $module));
        $subValids[] = new MIntegerValidator('tipoDeCargaHorariaComplementarId', _M('Tipo de carga horária', $module), 'required');

        //Carga horaria
        $cargaHorariaLabel = new MLabel(_M('Carga horária', $module) . ':');
        $cargaHorariaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $cargaHorariaLabel->setClass('m-caption m-caption-required');
        $cargaHoraria = new MTextField('cargaHoraria', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('horas', $module));
        $cargaHoraria->setJsHint(_M('Informe a carga horária (em horas)', $module));
        $subFields[] = new MHContainer('hctCargaHoraria', array($cargaHorariaLabel, $cargaHoraria, $cargaHorariaDesc));
        $subValids[] = new mFloatValidator('cargaHoraria', _M('Carga horária', $module), '.', null, 'required');

        //Justificativa
        $subFields[] = $justificativa = new MMultiLineField('justificativa', null, _M('Descrição da atividade', $module), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'));

        $columns[] = new sSubDetailColumn('ofertaDeUnidadeTematicaId', array('label' => 'Cod. oferta de rodízio', 'visible' => false));
        $columns[] = new sSubDetailColumn('ofertaDeUnidadeTematicaIdDescription', array('label' => 'Oferta do rodízio'));
        $columns[] = new sSubDetailColumn('tipoDeCargaHorariaComplementarId', array('label' => 'Tipo de carga horária', 'replace' => MedTipoDeCargaHorariaComplementar::listRecords()));
        $columns[] = new sSubDetailColumn('cargaHoraria', array('label' => 'Carga horária'));
        $columns[] = new sSubDetailColumn('justificativa', array('label' => 'Descrição da atividade'));
        $columns[] = new sSubDetailColumn('cargaHorariaNaUnidadeTematica', array('visible' => false));
        $fields[] = $sub = new MSubDetail('chComplementar', _M('Carga horária complementar', $module), $columns, $subFields);
        $sub->setValidators($subValids);

        if ( !$MIOLO->page->isPostBack() && $MIOLO->_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click' )
        {
            $residente = new MedResidente( $residenteId );
            $sub->setData( SAGU::convertSTypeToSubDetail($columns, $residente->cargaHorariaComplementar) );
        }

        $fields[] = new MButton('btnBack', _M('Voltar', $module), $this->getPreviousURL());

        parent::defineFields($fields, $validators, $data);
    }


    public function  tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $subData = (array) MSubDetail::getData('chComplementar');
        $data = $this->getData();
        
        try
        {
            foreach ( $subData as $key => $val )
            {
                if ( $val->removeData )
                {
                    unset($subData[$key]);
                }
            }

            $residente = new MedResidente( $data->residenteId );

            foreach ( $residente->cargaHorariaComplementar as $row )
            {
                $row->delete();
            }

            $chComplementar = array();
            foreach ( $subData as $row )
            {
                $chComplementar[] = $obj = new MedCargaHorariaComplementar();
                foreach ( $row as $k => $v )
                {
                    $obj->$k = $v;
                }
            }
            $residente->cargaHorariaComplementar = $chComplementar;            
            $residente->save();

            $goto = SAGU::getActionURL($module, 'main:process:residente', $opts);
            SAGU::information(_M('Dados salvos com sucesso.', $module), $goto);
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
    }
}

?>