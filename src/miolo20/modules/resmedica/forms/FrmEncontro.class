<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * \b Maintainers \n
 *  Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class FrmEncontro extends SManagementForm
{

    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(new MedEncontro(), array( 'encontroId' ), null, _M('Encontros', $module));

        //Desabilita botões toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);

        //Desabilita toolbar
        if( MIOLO::_REQUEST('return_to') == 'services' )
        {
            $this->disableToolbar();
        }
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( MIOLO::_REQUEST('module') == 'services' )
        {
            //Caso a pessoa não veja o professor da oferecida e nem o responsável
            $check = $check = $this->verificaUsuario();
        }
        else
        {
            $check = DB_TRUE;
        }

        try
        {
            if ( !strlen($ofertaDeUnidadeTematicaId = $this->getFormValue('ofertaDeUnidadeTematicaId')) > 0 )
            {
                throw new Exception(_M('Oferta de rodízio', $module) . '.');
            }
            //Oferta de unidade tematica
            $ofertaDeUnidadeTematica = new MedOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
            //Lista de tipos de unidade temática
            $listTipoDeUnidadeTematica = MedUnidadeTematica::listTipos();
            //Lista de períodos de unidade temática
            $listPeriodoDaUnidadeTematica = MedUnidadeTematica::listPeriodos();
            //Retorno do botão voltar
            $returnTo = $this->getRequestValue('return_to');
            $fields[] = new SHiddenField('return_to', $returnTo);

            //Não habilita o botão salvar caso a unidade temática esteja fechada
            if( strlen($ofertaDeUnidadeTematica->encerramento) > 0 )
            {
                $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            }

        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }
        //Hidden field oferta de unidade temática
        $fields[] = new SHiddenField('ofertaDeUnidadeTematicaId', $this->getRequestValue('ofertaDeUnidadeTematicaId'));

        //Informações da unidade temática
        $options = array(
            'title' => _M('Dados da oferta do rodizio', $module),
            'columns' => 1,
            'value' => array(
                _M('Descrição') => $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId . ' - ' . $ofertaDeUnidadeTematica->unidadeTematica->descricao,
                _M('CH lançada/prevista') => $ofertaDeUnidadeTematica->cargaHorariaCursada,
                _M('Frequência mínima') => $ofertaDeUnidadeTematica->unidadeTematica->frequenciaMinima . '%',
                _M('Tipo') => $listTipoDeUnidadeTematica[$ofertaDeUnidadeTematica->unidadeTematica->tipo],
                _M('Período') => $listPeriodoDaUnidadeTematica[$ofertaDeUnidadeTematica->unidadeTematica->periodo],
                _M('Início') => $ofertaDeUnidadeTematica->inicio,
                _M('Fim') => $ofertaDeUnidadeTematica->fim )
        );
        $fields[] = new SInformationField($options);
        $fields[] = new MSeparator();

        $grdData = new stdClass();
        $grdData->readOnly = true;
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdTemaUnidadeTematica', $grdData);
        $grid->setData($ofertaDeUnidadeTematica->retornaTemasDaOfertaEmArray());
        $divGrid = new MDiv('divGridTemas', $grid);
        $divGrid->addBoxStyle('width', '100%');
        $fields[] = new MBaseGroup('baseGroupTemas', _M('Atividades do rodízio',$module), array($divGrid));

        if ( !in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro')) )
        {
            $fields[] = new SBeginEndPeriod(array(
                            'begin' => array( 'dateValue' => $data->beginDate ),
                            'end' => array( 'dateValue' => $data->endDate ),
                        ));
            $validators[] = new MDateDMYValidator('beginDate', _M('Início', $module));
            $validators[] = new MRequiredValidator('beginDate', _M('Início', $module));
            $validators[] = new MDateDMYValidator('endDate', _M('Fim', $module));
            $validators[] = new MRequiredValidator('endDate', _M('Fim', $module));

            $fields[] = new MButton('btnFilter', _M('Filtrar', $module));
        }

        //Se evento nao for novo encontro adiciona botao para inserir novo
        if ( !in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro', 'tbBtnSave:click' )) )
        {
            //Desabilita botão deletar
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);

            //Botão novo encontro
            $fields[] = new MVContainer('tabelaEncontros', $this->obtemTabelaEncontros($ofertaDeUnidadeTematicaId));
        }
        //Se evento for novo encontro mostra grid para inserção/edicao e campos do encontro
        elseif ( in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro', 'tbBtnSave:click' )) )
        {
            $encontroId = $this->getRequestValue('encontroId');
            $encontro = new MedEncontro($encontroId);

            $fields[] = new SHiddenField('encontroId', $encontroId);
            //Abilita botão salvar
            $this->toolbar->enableButton(MToolBar::BUTTON_SAVE);

            //Se for endição habilita botao deletar
            if( strlen($encontroId)>0 )
            {
                $this->toolbar->enableButton(MToolBar::BUTTON_DELETE);
                $this->toolbar->setButtonURL(MToolBar::BUTTON_DELETE, $MIOLO->getActionURL($module, 'main:register:encontro', null, array('event'=>'tbBtnDelete_click','ofertaDeUnidadeTematicaId'=>$this->getRequestValue('ofertaDeUnidadeTematicaId'), 'encontroId'=>$encontroId, 'return_to'=>$returnTo)));
            }
            else
            {
                $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            }

            $gfields = new sGenericFields();
            $fields[] = $gfields->labelDica( _M('Formato de horas padrão 0 a 24h.'));


            $opts = array( 'event' => 'button_new_encontro', 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId ,'return_to'=>$this->getRequestValue('return_to'));
            $hrefNew = $MIOLO->getActionURL('resmedica', 'main:register:encontroMultiplos', null, $opts);
            $fields[] = $buttonMultiplosEncontros =  new MButton('button_new_encontro_multiplos', _M('Registrar multiplos encontros +', $module), $hrefNew);
            //$buttonMultiplosEncontros->_addStyle('margin', '0 auto;');
            $buttonMultiplosEncontros->addBoxStyle('text-align', 'center');
            $buttonMultiplosEncontros->_addStyle('background-color', '#1F72BF');
            $buttonMultiplosEncontros->_addStyle('color', '#FFF');

            //Campo tema da unidade temática
            $filters = new stdClass();
            $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
            $fields[] = new MSelection('temaId', $this->getFormValue('temaId',$encontro->temaId), _M('Atividade do rodizio', $module), MedTema::listTema($filters));

            //Data e hora do encontro caso tenha quebra timestamp em data e hora
            list($encontro->inicioData, $encontro->inicioHora) = explode(' ', $encontro->inicio);
            list($encontro->fimData, $encontro->fimHora) = explode(' ', $encontro->fim);

            //Valores para data e hora(caso edição peaga data e hora registrada, caso inserção data e hora atual)
            $dateValue = new stdClass();
            $dateValue->inicioData = strlen($this->getFormValue('inicioData',$encontro->inicioData)) > 0 ? $this->getFormValue('inicioData',$encontro->inicioData) : SAGU::getDateNow();
            $dateValue->fimData = strlen($this->getFormValue('fimData',$encontro->fimData)) > 0 ? $this->getFormValue('fimData',$encontro->fimData) : SAGU::getDateNow();
            $dateValue->inicioHora = strlen($this->getFormValue('inicioHora',$encontro->inicioHora)) > 0 ? $this->getFormValue('inicioHora',$encontro->inicioHora) : SAGU::getDateNow(SAGU::getParameter('BASIC', 'MASK_TIME_PHP_DEFAULT'));
            $dateValue->fimHora = strlen($this->getFormValue('fimHora',$encontro->fimHora)) > 0 ? $this->getFormValue('fimHora',$encontro->fimHora) : SAGU::getDateNow(SAGU::getParameter('BASIC', 'MASK_TIME_PHP_DEFAULT'));
            $fields[] = $obj = new SBeginEndPeriod(array(
                        'data' => $dateValue,
                        'required' => true,
                        'baseGroup' => false,
                        'type' => 'timestamp',
                        'begin' => array(
                            'dateId' => 'inicioData',
                            'timeId' => 'inicioHora',
                            'label' => _M('Início', $module),
                            'dateHint' => _M('Informe a data de início', $module),
                            'timeHint' => _M('Informe a hora de início. Formato: hh:mm', $module)
                        ),
                        'end' => array(
                            'dateId' => 'fimData',
                            'timeId' => 'fimHora',
                            'label' => _M('Fim', $module),
                            'dateHint' => _M('Informe a data de fim', $module),
                            'timeHint' => _M('Informe a hora de fim. Formato: hh:mm', $module)
                        )
                    ));

            //Evento quando tiver alguma alteração no período(calcula a carga horária)
            $obj->getField('inicioData')->addAttribute('onchange', $this->getAjaxAction('timestampDiff', 'divNull', false));
            $obj->getField('inicioHora')->addAttribute('onchange', $this->getAjaxAction('timestampDiff', 'divNull', false));
            $obj->getField('fimData')->addAttribute('onchange', $this->getAjaxAction('timestampDiff', 'divNull', false));
            $obj->getField('fimHora')->addAttribute('onchange', $this->getAjaxAction('timestampDiff', 'divNull', false));

            $fields[] = new MDiv('divNull', null);
            // Campo carga horária
            if(strlen($this->getFormValue('cargaHoraria', $encontro->cargaHoraria))==0)
            {
                $this->page->onLoad($this->getAjaxAction('timestampDiff', 'divNull', false));
            }

            $campoCargaHoraria = new MTextField('cargaHoraria', $this->getFormValue('cargaHoraria', $encontro->cargaHoraria), _M('Carga horária', $module), SAGU::getParameter('basic', 'FIELD_ID_SIZE'), _M('horas', $module));
            $campoCargaHoraria->setJsHint(_M('Informe a carga horária(em horas). Ex.: 140', $module));
            $fields[] = $campoCargaHoraria;
            // Campo conteúdo ministrado
            $fields[] = $conteudoMinistrado = new MMultilineField('conteudoMinistrado', $this->getFormValue('conteudoMinistrado', $encontro->conteudoMinistrado), _M('Conteúdo ministrado', $module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_COLS'));
            $conteudoMinistrado->setJsHint(_M('Informe o conteúdo ministrado', $module));


            $filters = new stdClass();
            $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
            $preceptoresLista = MedOfertaDeUnidadeTematicaPreceptor::listPreceptoresDaOfertaDeRodizio($filters);
            $preceptoresIds = null;
            if( strlen($encontroId)>0 ) {
                $filters = new stdClass();
                $filters->encontroId = $encontroId;
                $preceptoresIds = MedEncontroPreceptor::retornaIdsDosPreceptoresDoEncontro($filters);
            }
            $selectPreceptores = new MultiSelection('preceptores', $preceptoresIds, _M('Preceptores', $module), $preceptoresLista, false, null, 6);
            $selectPreceptores->setIsRequired(true);
            $fields[] = $selectPreceptores;


            $filters = new stdClass();
            $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
            $instituicoesLista = MedOfertaDeUnidadeTematicaInstituicaoExecutora::listIntituicoesDaOfertaDeRodizio($filters);
            $selectInstituicao = new MSelection('instituicaoExecutoraId', $this->getFormValue('instituicaoExecutoraId', $encontro->instituicaoExecutoraId), _M('Instituição executora', $module), $instituicoesLista);

            $fields[] = $selectInstituicao;

            //Validadores
            $validators[] = new MDATEDMYValidator('inicioData', _M('Início', $module), 'required');
            $validators[] = new MTIMEValidator('inicioHora', _M('Hora fim', $module), 'required');
            $validators[] = new MDATEDMYValidator('fimData', _M('Fim', $module), 'required');
            $validators[] = new MTIMEValidator('fimHora', _M('Hora fim', $module), 'required');
            $validators[] = new MFloatValidator('cargaHoraria', _M('Carga horária', $module), '.', null, 'required');
            $validators[] = new MRequiredValidator('instituicaoExecutoraId', _M('Instituição executora', $module));

            $fields[] = new MHContainer('tabelaEdicaoEncontro', $this->obtemTabelaEdicaoEncontro($ofertaDeUnidadeTematicaId, $encontroId));
        }

        //Verifica se a unidade tematica está fechada e impede editar a frequência
        if( strlen($ofertaDeUnidadeTematica->encerramento) > 0 )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        }

        //Botão voltar
        if ( in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro', 'tbBtnSave:click' )) )
        {
            $opts = array( 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId ,'return_to'=>$this->getRequestValue('return_to'));
            $href = $MIOLO->getActionURL('resmedica', 'main:register:encontro', null, $opts);
            $btns[] = new MButton('button_back', _M('<< Voltar', $module), $href);
        }
        else
        {
            $href = $this->getRequestValue('return_to') == 'services' ? $MIOLO->getActionURL('services', 'main:resmedica:unidadesTematicasDoPreceptor') : SAGU::getActionURL('resmedica', 'main:process:ofertaDeUnidadeTematica',null);
            $btns[] = new MButton('button_back', _M('<< Voltar', $module), $href);
        }

        //Não exibe botão de novo encontro depois que a unidade temática estiver fechada
        if( !strlen($ofertaDeUnidadeTematica->encerramento) > 0 )
        {
            if ( (MIOLO::_REQUEST('return_to') == 'services' && $check == DB_TRUE) || (MIOLO::_REQUEST('return_to') == 'resmedica' && $check == DB_TRUE) )
            {
                //Botao novo encontro (só é exibido quando tem residentes para essa oferta)
                $opts = array( 'event' => 'button_new_encontro', 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId ,'return_to'=>$this->getRequestValue('return_to'));
                $hrefNew = $MIOLO->getActionURL('resmedica', 'main:register:encontro', null, $opts);
                $btns[] = new MButton('button_new_encontro', _M('Registrar novo encontro', $module), $hrefNew);
            }
        }

        //Imagens
        $presence = $MIOLO->getActionUrl('resmedica', 'html:images:presence.png');
        $justfy = $MIOLO->getActionUrl('resmedica', 'html:images:justfy.png');
        $absence = $MIOLO->getActionUrl('resmedica', 'html:images:absence.png');

        //Javascrip troca de imagem
        $this->addJsCode("

                // funçao para nao precisar usar ctrl do teclado para selecionar mais de um item
                window.onmousedown = function (e) {
                    var el = e.target;
                    if (el.tagName.toLowerCase() == 'option' && el.parentNode.hasAttribute('multiple')) {
                        e.preventDefault();

                        if (el.hasAttribute('selected')) el.removeAttribute('selected');
                        else el.setAttribute('selected', '');

                        var select = el.parentNode.cloneNode(true);
                        el.parentNode.parentNode.replaceChild(select, el.parentNode);
                    }
                }

                function setFrequency(ofertaDoResidenteId)
                {
                    var imagemFrequenciaElementId = 'imagemFrequencia_'+ofertaDoResidenteId;
                    var freqField = 'valorFrequencia['+ofertaDoResidenteId+']';
                    var freqValue = xGetElementById(freqField);
                    var divJustificatica = 'divJustificativa_'+ofertaDoResidenteId;
                    var divArquivo = 'divArquivo_'+ofertaDoResidenteId;
                    var justificativa = 'justificativa['+ofertaDoResidenteId+']';
                    var arquivo = 'arquivo_'+ofertaDoResidenteId;
                    var oldFileId = 'oldFileIds['+ofertaDoResidenteId+']';

                    switch ( freqValue.value )
                    {
                        case '" . MedFrequencia::PRESENTE . "':
                            xGetElementById(imagemFrequenciaElementId).src ='{$absence}';
                            xGetElementById(freqField).value = '" . MedFrequencia::AUSENTE . "';

                            xGetElementById(divJustificatica).style.display='none';
                            xGetElementById(justificativa).value = '';

                            xGetElementById(divArquivo).style.display='none';
                            xGetElementById(arquivo).value = '';

                            xGetElementById(oldFileId).value = '';
                        break;
                        case '" . MedFrequencia::AUSENTE . "':
                            xGetElementById(imagemFrequenciaElementId).src ='{$justfy}';
                            xGetElementById(freqField).value = '" . MedFrequencia::JUSTIFICADA . "';

                            xGetElementById(divJustificatica).style.display='block';
                            xGetElementById(justificativa).value = '';

                            xGetElementById(divArquivo).style.display='block';
                            xGetElementById(arquivo).value = '';
                            
                            xGetElementById(oldFileId).value = '';
                        break;
                        case '" . MedFrequencia::JUSTIFICADA . "':
                            xGetElementById(imagemFrequenciaElementId).src ='{$presence}';
                            xGetElementById(freqField).value = '" . MedFrequencia::PRESENTE . "';

                            xGetElementById(divJustificatica).style.display='none';
                            xGetElementById(justificativa).value = '';

                            xGetElementById(divArquivo).style.display='none';
                            xGetElementById(arquivo).value = '';
                            
                            xGetElementById(oldFileId).value = '';
                        break;
                    }
                }");

        //Se for do módulo de serviços
        if( MIOLO::_REQUEST('return_to') == 'services' )
        {
            // Botão salvar
            if( (in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro', 'tbBtnSave:click' ))) && ($check == DB_TRUE) )
            {
                $btns[] = new MButton('tbBtnSave', _M('Salvar', $module));
            }
            $fields[] = new MHContainer('cntButtons', $btns);
        }
        else
        {
            $fields[] = $btns;
        }

        parent::defineFields($fields, $validators, $data);

        //Se evento não for novo encontro desabilita botao salvar
        if ( !in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro', 'tbBtnSave:click' )) )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    /**
     * Obtém a diferença em horas de um timestemp e outro
     */
    public function timestampDiff($args)
    {
        $inicioData = $this->getFormValue('inicioData', $args->inicioData);
        $inicioHora = $this->getFormValue('inicioHora', $args->inicioHora);
        $fimData = $this->getFormValue('fimData', $args->fimData);
        $fimHora = $this->getFormValue('fimHora', $args->fimHora);

        if ( strlen($inicioData) > 0 && strlen($inicioHora) > 0 && strlen($fimData) > 0 && strlen($fimHora) > 0 )
        {
            $hours = MedEncontro::timestampDiff($inicioData . ' ' . $inicioHora, $fimData . ' ' . $fimHora);
            $this->page->addAJAXJsCode("xGetElementById('cargaHoraria').value = {$hours};");
        } else {
            $this->page->addAJAXJsCode("xGetElementById('cargaHoraria').value = 0;");
        }

        return null;
    }

    /**
     * Obtém tabela para editar encontro solicitado, ou inserir um
     * novo encontro
     *
     * @param int $ofertaDeUnidadeTematicaId
     * @param int $encontroId
     * @return array
     */
    public function obtemTabelaEdicaoEncontro($ofertaDeUnidadeTematicaId, $encontroId)
    {
        $module = SAGU::getFileModule(__FILE__);
        $MIOLO = MIOLO::getInstance();

        //Imagens
        $presence = $MIOLO->getActionUrl('resmedica', 'html:images:presence.png');
        $justfy = $MIOLO->getActionUrl('resmedica', 'html:images:justfy.png');
        $absence = $MIOLO->getActionUrl('resmedica', 'html:images:absence.png');

        //Business file
        $busFile = $MIOLO->getBusiness('basic', 'BusFile');

        //Obtém residentes e registros de frequência e justificativa para cada encontro
        $tabelaFrequencias = MedOfertaDeUnidadeTematica::obtemTabelaFrequencias($ofertaDeUnidadeTematicaId, $encontroId, true);
        //Array utilizado pela tabela
        $dataTable = array( );
        //Controla se ja tem cabeçalho
        $cabecalho = false;
        if ( count($tabelaFrequencias) > 0 )
        {
            //Colunas fixas
            $columns[] = _M('Foto', $module);
            $columns[] = _M('Residente', $module);
            $columns[] = _M('Status na oferta do rodizio', $module);
            $columns[] = _M('Frequência', $module);
            $columns[] = _M('Justificativa', $module);
            $columns[] = _M('Arquivo', $module);

            foreach ( $tabelaFrequencias as $key => $row )
            {
                $ofertaDoResidenteId = $row->ofertaDoResidenteId;
                //Contador colunas da tabela
                $coluna = 0;

                unset($personFile);
                if ( strlen($row->photoId) > 0 )
                {
                    $path = $busFile->getUrl($row->photoId, array( 'permission' => true ));
                    $personFile = new MImage('personFile_' . $row->photoId, NULL, $path, 'width="' . (int) SAGU::getParameter('BASIC', 'PHOTO_WIDTH') . '" height="' . (int) SAGU::getParameter('BASIC', 'PHOTO_HEIGHT') . '"');
                    $personFile->addBoxStyle('text-align', 'center');
                }

                if ( strlen($encontroId) > 0 )
                {
                    //Encontros
                    if ( is_array($row->encontros) )
                    {
                        // FIXME Atencao: O array $row->encontros na verdade seria $row->frequencias , que vem da tabela med.frequencia

                        foreach ( $row->encontros as $encontro )
                        {
                            $encontro instanceof MedEncontro;

                            //Frequência do residente no encontro
                            $hrefImage = null;
                            $imageFrequency = null;

                            if ( MedFrequencia::PRESENTE == $encontro->presenca )
                            {
                                $valorPresenca = MedFrequencia::PRESENTE;
                                $hrefImage = $presence;
                            }
                            if ( MedFrequencia::AUSENTE == $encontro->presenca )
                            {
                                $valorPresenca = MedFrequencia::AUSENTE;
                                $hrefImage = $absence;
                            }
                            if ( MedFrequencia::JUSTIFICADA == $encontro->presenca )
                            {
                                $valorPresenca = MedFrequencia::JUSTIFICADA;
                                $hrefImage = $justfy;
                                $valorJustificativa = $encontro->justificativa;
                            }

                            $valorFileId = $encontro->fileId;
                        }
                    }
                }

                $presenca = strlen($valorPresenca) > 0 ? $valorPresenca : MedFrequencia::PRESENTE;
                $imagem = strlen($hrefImage) > 0 ? $hrefImage : $presence;
                $justificativa = strlen($valorJustificativa) > 0 ? $valorJustificativa : null;
                $valorJustificativa = null;
                //Imagem da frequência do residente (default presenca)
                $buttonChangeFrequency = new MImage('imagemFrequencia_' . $ofertaDoResidenteId, NULL, $imagem, array( 'onclick' => "javascript:setFrequency({$ofertaDoResidenteId})", 'style' => 'cursor:pointer' ));
                $divFrequency = new MDiv('divFreq', $buttonChangeFrequency);
                $divFrequency->addBoxStyle('text-align', 'center');

                //Valor da frequência que será armazenado na base de dados
                $textField = new SHiddenField("valorFrequencia[$ofertaDoResidenteId]", $presenca);

                //Campo de justificativa da presenca justificada
                $fieldJustificativa = new MMultiLineField("justificativa[$ofertaDoResidenteId]", $justificativa, null, 10, 8, 40);
                $displayDiv = strlen($justificativa) > 0 ? 'display:block' : 'display:none';
                $divJustificativa = new MDiv("divJustificativa_$ofertaDoResidenteId", $fieldJustificativa, null, array( 'style' => $displayDiv, 'align' => 'center' ));

                //Arquivo
                $this->page->setEnctype('multipart/form-data'); // precisamos disto para que o upload funcione
                $fieldArquivo = new SFileField("arquivo_{$ofertaDoResidenteId}", $this, array('fieldLabel' => false));
                $displayDiv = strlen($valorFileId) > 0 ? 'display:block' : 'display:none';
                $oldFileId = new SHiddenField("oldFileIds[{$ofertaDoResidenteId}]", $valorFileId);
                $divArquivo = new MDiv("divArquivo_{$ofertaDoResidenteId}", array($fieldArquivo, $oldFileId), null, array( 'style' => $displayDiv, 'align' => 'center' ));

                //Status do residente na oferta
                $listStatus = MedOcorrenciaDeOferta::listStatus();
                $statusResidenteOferta = new MTextLabel('labelStatus_'.$ofertaDoResidenteId, $listStatus[$row->ocorrenciaStatus]);
                $divStatusResidente = new MDiv('divStatusResidente', $statusResidenteOferta);
                $divStatusResidente->addBoxStyle('text-align', 'center');

                //Colunas da tabela
                $dataTable[$key][0] = $personFile;
                $dataTable[$key][1] = $row->name;
                $dataTable[$key][2] = $divStatusResidente;
                $dataTable[$key][3] = $divFrequency->generate() . $textField->generate();
                $dataTable[$key][4] = $divJustificativa;
                $dataTable[$key][5] = $divArquivo;
            }
            //Tabela de edicao de encontros
            $fields[] = $obj = new MTableRaw(_M('Encontro', $module), $dataTable, $columns);
        }
        else
        {
            // Desativa salvar e adiciona alerta
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);

            $this->addAlert(_M('Nenhum residente ativo para adicionar este encontro.', $module));
        }

        return $fields;
    }

    /**
     * Obtém a tabela de encontros e registros de frequência,
     * registros são somente leitura
     *
     * @param int $ofertaDeUnidadeTematicaId
     * @return array $fields
     */
    public function obtemTabelaEncontros($ofertaDeUnidadeTematicaId)
    {
        $MIOLO = MIOLO::getInstance();

        //Imagens
        $presenceDisabled = $MIOLO->getActionUrl('resmedica', 'html:images:presence_disabled.png');
        $justfyDisabled = $MIOLO->getActionUrl('resmedica', 'html:images:justfy_disabled.png');
        $absenceDisabled = $MIOLO->getActionUrl('resmedica', 'html:images:absence_disabled.png');
        $presence = $MIOLO->GetActionURL('residency', 'html:images:presence.png');
        $justfy = $MIOLO->getActionUrl('residency', 'html:images:justfy.png');
        $absence = $MIOLO->getActionUrl('residency', 'html:images:absence.png');

        //Business file
        $busFile = $MIOLO->getBusiness('basic', 'BusFile');

        //Obtém residentes e registros de frequência e justificativa para cada encontro
        $tabelaFrequencias = MedOfertaDeUnidadeTematica::obtemTabelaFrequencias($ofertaDeUnidadeTematicaId);

        //Deixa habilitado inserção e adição apenas para preceptor responsável
        $check = $this->verificaUsuario();

        //Array utilizado pela tabela
        $dataTable = array( );
        //Controla se ja tem cabeçalho
        $cabecalho = false;
        if ( count($tabelaFrequencias) > 0 )
        {
            //Colunas fixas
            $columns[] = _M('Diário de campo', $module);
            $columns[] = _M('Foto', $module);
            $columns[] = _M('Residente', $module);
            $columns[] = _M('Status na oferta do rodizio', $module);
            $columns[] = _M('Carga horária realizada', $module);
            $columns[] = _M('Frequência atual', $module);

            foreach ( $tabelaFrequencias as $key => $row )
            {
                //Contador colunas da tabela
                $coluna = 0;


                $opts = array( 'event' => 'btnPrint', 'ofertadeunidadetematicaid' => $ofertaDeUnidadeTematicaId, 'residenteid' => $row->residenteId );
                $url = $MIOLO->getActionURL('services', 'main:resmedica:diarioDeCampo', null, $opts);
                $imprimirDiario = new MButton('btnPrint', _M('Gerar diário'), $url);
                $dataTable[$key][$coluna] = $imprimirDiario->generate();
                $coluna++;

                unset($personFile);

                if ( strlen($row->photoId) > 0 )
                {
                    $path = $busFile->getUrl($row->photoId, array( 'permission' => true ));
                    $personFile = new MImage('personFile_' . $row->photoId, NULL, $path, 'width="' . (int) SAGU::getParameter('BASIC', 'PHOTO_WIDTH') . '" height="' . (int) SAGU::getParameter('BASIC', 'PHOTO_HEIGHT') . '"');
                    $personFile->addBoxStyle('text-align', 'center');
                }
                //Status do residente na oferta
                $listStatus = MedOcorrenciaDeOferta::listStatus();
                $statusResidenteOferta = new MTextLabel('labelStatus_'.$ofertaDoResidenteId, $listStatus[$row->ocorrenciaStatus]);
                $divStatusResidente = new MDiv('divStatusResidente', $statusResidenteOferta);
                $divStatusResidente->addBoxStyle('text-align', 'center');

                //Imagem da pessoa
                $dataTable[$key][$coluna] = $personFile;
                $coluna++;

                //Nome da pessoa
                $notActiveAlert = '';

                $residente = new MedResidente($row->residenteId);
                if ( $residente->isActive == DB_FALSE )
                {
                    $alert = new MLabel(_M('Bloqueado pelo último estado contratual: @1', $module, $residente->ultimoStatusDaOcorrenciaDeContrato->descricao));
                    $alert->setColor('red');
                    $alert->setBold(true);

                    $notActiveAlert = '<br>' . $alert->generate();
                }

                // Obtém a carga horária realizada e a frequência atual
                $ofertaDoResidente = new MedOfertaDoResidente($row->ofertaDoResidenteId);
                $cargaHorariaRealizada = 0;

                foreach ( $row->encontros as $encontro )
                {
                    if ( strlen($encontro->presenca) > 0 )
                    {
                        $cargaHorariaRealizada = $encontro->cargaHoraria + $cargaHorariaRealizada;
                    }
                }

                $dataTable[$key][$coluna] = $row->name . $notActiveAlert;
                $coluna++;

                 //Status na oferta de unidade temática
                $dataTable[$key][$coluna] = $divStatusResidente;
                $coluna++;

                // Carga horária realizada pelo aluno
                $dataTable[$key][$coluna] = "{$cargaHorariaRealizada}h";
                $coluna++;

                // Frequência atual do aluno
                $dataTable[$key][$coluna] = "{$ofertaDoResidente->percentualCargaHorariaRealizada}%";
                $coluna++;

                //Encontros
                if ( is_array($row->encontros) )
                {
                    foreach ( $row->encontros as $encontro )
                    {
                        $encontro instanceof MedFrequencia;

                        $beginDate = SAGU::NVL(MIOLO::_REQUEST('beginDate'), $encontro->inicio);
                        $endDate = SAGU::NVL(MIOLO::_REQUEST('endDate'), $encontro->fim);

                        if($beginDate && $endDate)
                        {
                            $inicio = (substr($encontro->inicio, 0, 10));
                            $fim = (substr($encontro->fim, 0, 10));

                            $result1 = SAGU::dateDiff($beginDate, $inicio);
                            $result2 = SAGU::dateDiff($endDate, $fim);

                            if( $result1<=0 && $result2>=0)
                            {
                                //Se não tiver cabeçalho dos encontros
                                if ( !$cabecalho )
                                {
                                    //Cabeçalho dinamico dos encontros(data e botao editar)
                                    $opts = array( 'event' => 'button_edit_encontro', 'encontroId' => $encontro->encontroId, 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId, 'return_to'=>$this->getRequestValue('return_to') );
                                    $hrefEdit = $MIOLO->getActionURL('resmedica', 'main:register:encontro', null, $opts);
                                    $image = new MImageButton('encontro_' . $encontro->encontroId, _M('Editar', $module), $hrefEdit, $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'edit.png'));
                                    $header = _M('Início', $module) . ' ' . $encontro->inicio . "<br>" . _M('Fim', $module) . ' ' . $encontro->fim . "<br>" . $image->generate();
                                    $divHeader = new MDiv('divHeader', $header, 'aling=left');
                                    $columns[] = $divHeader;
                                }

                                //Frequência do residente no encontro
                                $hrefImage = null;
                                $imageFrequency = null;
                                $divContent = array();

                                if ( MedFrequencia::PRESENTE == $encontro->presenca )
                                {
                                    $hrefImage = $presence;
                                }
                                if ( MedFrequencia::AUSENTE == $encontro->presenca )
                                {
                                    $hrefImage = $absence;
                                }
                                if ( MedFrequencia::JUSTIFICADA == $encontro->presenca )
                                {
                                    $hrefImage = $justfy;
                                }

                                //Imagem da frequência
                                if ( strlen($hrefImage) > 0 )
                                {
                                    $imageFrequency = new MImage('imageFrequency_' . $encontro->encontroId . $row->residenteId, null, $hrefImage);
                                    $imageFrequency->setJsHint($encontro->justificativa);

                                    $divContent[] = $imageFrequency;
                                }

                                // adiciona link de download, caso exista
                                if ( ( MedFrequencia::JUSTIFICADA == $encontro->presenca ) && ( strlen($encontro->fileId) > 0 ) )
                                {
                                    $hrefDownload = $MIOLO->getUI()->getImageTheme($MIOLO->getTheme()->getId(), 'close_disable.png');
                                    $url = $busFile->getUrl($encontro->fileId, array('permission' => true));

                                    $imgDownload = new MImageLink('imgDownload_' . $encontro->encontroId . $row->residenteId, null, $url, $hrefDownload);
                                    $imgDownload->setJsHint(_M('Baixar arquivo anexo'));

                                    $divContent[] = $imgDownload;
                                }

                                $dataTable[$key][$coluna] = $divEnc = new MDiv('div_' . $encontro->encontroId . $row->residenteId, $divContent);
                                $divEnc->addBoxStyle('margin-left', '44%');
                                $coluna++;
                            }
                        }
                        else
                        {
                            //Se não tiver cabeçalho dos encontros
                            if ( !$cabecalho )
                            {
                                //Cabeçalho dinamico dos encontros(data e botao editar)
                                $opts = array( 'event' => 'button_edit_encontro', 'encontroId' => $encontro->encontroId, 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId, 'return_to'=>$this->getRequestValue('return_to') );
                                $hrefEdit = $MIOLO->getActionURL('resmedica', 'main:register:encontro', null, $opts);
                                $image = new MImageButton('encontro_' . $encontro->encontroId, _M('Editar', $module), $hrefEdit, $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'edit.png'));

                                $gerarIcone = $check == DB_TRUE ? $image->generate() : null;

                                $header = _M('Início', $module) . ' ' . $encontro->inicio . "<br>" . _M('Fim', $module) . ' ' . $encontro->fim . "<br>" . $gerarIcone;
                                $divHeader = new MDiv('divHeader', $header, 'aling=left');
                                $columns[] = $divHeader;
                            }

                            //Frequência do residente no encontro
                            $hrefImage = null;
                            $imageFrequency = null;

                            if ( MedFrequencia::PRESENTE == $encontro->presenca )
                            {
                                $hrefImage = $presence;
                            }
                            if ( MedFrequencia::AUSENTE == $encontro->presenca )
                            {
                                $hrefImage = $absence;
                            }
                            if ( MedFrequencia::JUSTIFICADA == $encontro->presenca )
                            {
                                $hrefImage = $justfy;
                            }

                            //Imagem da frequência
                            if ( strlen($hrefImage) > 0 )
                            {
                                $imageFrequency = new MImage('imageFrequency_' . $encontro->encontroId . $row->residenteId, null, $hrefImage);
                                $imageFrequency->setJsHint($encontro->justificativa);
                            }

                            $dataTable[$key][$coluna] = $divEnc = new MDiv('div_' . $encontro->encontroId . $row->residenteId, $imageFrequency);
                            $divEnc->addBoxStyle('text-align', 'center');
                            $coluna++;
                        }
                    }
                }
                //Ja tem cabeçalho
                $cabecalho = true;
            }

            $table = new MTableRaw(_M('Encontros', $module), $dataTable, $columns);
            $fields[] = $tableEncontrosDiv = new MDiv('tableEncontrosDiv', $table, null, 'width=100%');
        }
        else
        {
            $info = _M('Nenhum residente matriculado nessa oferta de rodízio') . '.';
            $this->AddInfo($info);
        }

        return $fields;
    }

    /**
     * Ação do botão deletar
     * */
    public function tbBtnDelete_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $encontroId = $args->encontroId ? $args->encontroId : MIOLO::_REQUEST('encontroId');
        $ofertaDeUnidadeTematicaId = $args->ofertaDeUnidadeTematicaId ? $args->ofertaDeUnidadeTematicaId : MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        $return_to = $args->return_to ? $args->return_to : MIOLO::_REQUEST('return_to');

        $gotoYes = $MIOLO->getActionURL($module, 'main:register:encontro', null, array( 'event' => 'btnDelete_confirm', 'encontroId' => $encontroId, 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId , 'return_to'=>$return_to));
        $gotoNo = $MIOLO->getActionURL($module, 'main:register:encontro', null, array( 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId ,'return_to'=>$return_to));
        $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE'), $gotoYes, $gotoNo);
    }

    /**
     * Ação do botão confirmar deletar
     */
    public function btnDelete_confirm($args)
    {
        $MIOLO = MIOLO::getInstance();
        $encontroId = $args->encontroId ? $args->encontroId : MIOLO::_REQUEST('encontroId');
        $ofertaDeUnidadeTematicaId = $args->ofertaDeUnidadeTematicaId ? $args->ofertaDeUnidadeTematicaId : MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        $return_to = $args->return_to ? $args->return_to : MIOLO::_REQUEST('return_to');
        try
        {
            SDatabase::beginTransaction();
            //Deleta encontro
            $encontro = new MedEncontro($encontroId);
            $encontro->delete();

            SDatabase::commit();
            $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), $MIOLO->getActionURL($module, 'main:register:encontro', null, array( 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId, 'return_to'=>$return_to)));
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $this->AddError($e->getMessage());
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->encontroId = $this->getFormValue('encontroId', MIOLO::_request('encontroId'));
        $data->temaId = $this->getFormValue('temaId', MIOLO::_request('temaId'));
        $data->ofertaDeUnidadeTematicaId = $this->getFormValue('ofertaDeUnidadeTematicaId', MIOLO::_request('ofertaDeUnidadeTematicaId'));
        $data->inicioData = $this->getFormValue('inicioData', MIOLO::_request('inicioData'));
        $data->inicioHora = $this->getFormValue('inicioHora', MIOLO::_request('inicioHora'));
        $data->fimData = $this->getFormValue('fimData', MIOLO::_request('fimData'));
        $data->fimHora = $this->getFormValue('fimHora', MIOLO::_request('fimHora'));
        $data->cargaHoraria = $this->getFormValue('cargaHoraria', MIOLO::_request('cargaHoraria'));
        $data->conteudoMinistrado = $this->getFormValue('conteudoMinistrado', MIOLO::_request('conteudoMinistrado'));
        $data->preceptores = $this->getFormValue('preceptores', MIOLO::_request('preceptores'));
        $data->instituicaoExecutoraId = $this->getFormValue('instituicaoExecutoraId', MIOLO::_request('instituicaoExecutoraId'));
        $data->return_to = $this->getFormValue('return_to', MIOLO::_request('return_to'));

        return $data;
    }

    /**
     * Função que salva os dados
     *
     * @param $sender
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Obtém os dados do form
        $dataForm = $this->getTypesData();

        //Mensagem de retorno para o usuário
        $msgUpdate = _M('Encontro atualizado com sucesso', $module) . '.';
        $msgInsert = _M('Encontro inserido com sucesso', $module) . '.';
        $msg = strlen($dataForm->encontroId) > 0 ? $msgUpdate : $msgInsert;

        try
        {
            SDatabase::beginTransaction();

            //Verificar se o encontro nao está sendo cadastro fora da oferta da unidade
            $ofertaUnidade = new MedOfertaDeUnidadeTematica(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));

            //Se o encontro e as datas da oferta nao bateram, o encontro está errado
            if ( !SAGU::dateOverlaps($ofertaUnidade->getInicio(), SAGU::addIntervalInDate($ofertaUnidade->getFim(), 'd', '1', '+'), $dataForm->inicioData, $dataForm->fimData))
            {
                throw new Exception(_M("Você está tentando cadastrar um encontro fora do período da oferta de rodízio."));
            }

            $temaDaUnidadeTematica = new MedTemaDaUnidadeTematica($dataForm->ofertaDeUnidadeTematicaId, $dataForm->temaId);

            $quantidadeHorasJaDefinida = MedEncontro::retornaQuantidadeDeHorasJaDefinidaProTemaNaUnidadeTematica($dataForm->temaId, $dataForm->encontroId, $dataForm->ofertaDeUnidadeTematicaId);
            $carga = $quantidadeHorasJaDefinida + $dataForm->cargaHoraria;

            if ($carga > $temaDaUnidadeTematica->cargahoraria ) {
                throw new Exception(_M("Você está tentando cadastrar um encontro com carga horária maior que a carga horária definido para o tema da oferta do rodízio."));
            }

            /**
             * Objeto encontro
             */
            $encontro = new MedEncontro();
            $encontro->encontroId = $dataForm->encontroId;
            $encontro->temaId = $dataForm->temaId;
            $encontro->ofertaDeUnidadeTematicaId = $dataForm->ofertaDeUnidadeTematicaId;
            $encontro->inicio = $dataForm->inicioData . " " . $dataForm->inicioHora;
            $encontro->fim = $dataForm->fimData . " " . $dataForm->fimHora;
            $encontro->cargaHoraria = $dataForm->cargaHoraria;
            $encontro->conteudoMinistrado = $dataForm->conteudoMinistrado;
            $encontro->instituicaoExecutoraId = $dataForm->instituicaoExecutoraId;

            // Preceptores
            foreach ( (array)$encontro->preceptores as $preceptor ) {
                $ok = $preceptor->delete();
                if (!$ok) {
                    $msg = _M('Erro ao excluir os preceptores do rodízio', $module);
                    throw new Exception($msg);
                }
            }

            $preceptores = array();
            foreach ((array)$dataForm->preceptores as $preceptor) {
                $preceptorObj = new MedEncontroPreceptor();
                $preceptorObj->preceptorId = $preceptor;
                $preceptores[] = $preceptorObj;
            }
            $encontro->preceptores = $preceptores;

            /**
             * Frequências
             */
            // Obtem valores frequencias
            $camposFrequencias = MIOLO::_REQUEST('valorFrequencia', 'POST');
            // Obtem valores justificativas
            $camposJustificativas = MIOLO::_REQUEST('justificativa', 'POST');
            // Obtem valores arquivos (fileid)
            $camposOldFileIds = MIOLO::_REQUEST('oldFileIds', 'POST');

            //Busca os residentes da oferta
            $filters = new stdClass();
            $filters->ofertaDeUnidadeTematicaId = $dataForm->ofertaDeUnidadeTematicaId;
            $filters->filterOnlyActive = DB_TRUE;
            $dataOfertaDoResidente = MedOfertaDoResidente::searchGrid($filters); //FIXME Esta consulta está errada, está trazendo os alunos que cancelaram junto

            $busFile = new BusinessBasicBusFile();

            foreach ( (array) $dataOfertaDoResidente as $ofertaResidente )
            {
                $frequencia = new MedFrequencia();
                $frequencia->encontroId = $dataForm->encontroId;
                $frequencia->residenteId = $ofertaResidente[1];
                $frequencia->presenca = $camposFrequencias[$ofertaResidente[0]];
                $frequencia->justificativa = $camposJustificativas[$ofertaResidente[0]];

                // tratamento do arquivo upload
                $fileData = $_FILES["arquivo_{$ofertaResidente[0]}"];

                if ( strlen($fileData['tmp_name']) > 0 )
                {
                    $frequencia->fileId = $busFile->insertFileUpload($fileData);
                }
                else
                {
                    $frequencia->fileId = $camposOldFileIds[$ofertaResidente[0]];
                }

                $frequencias[] = $frequencia;
            }
            //Adiciona as frequências dos residentes
            $encontro->frequencias = $frequencias;
            //Salva os dados
            $ok = $encontro->save();

            SDatabase::commit();
            if ( $ok )
            {
                $caption = _M('Informação', $module);
                SAGU::information($msg, $MIOLO->getActionURL($module, 'main:register:encontro', null, array( 'ofertaDeUnidadeTematicaId' => $dataForm->ofertaDeUnidadeTematicaId, 'return_to'=>$this->getRequestValue('return_to'))));
            }
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $this->AddError($e->getMessage());
        }
    }

    /*
     * Verifica se usuário é professor ou responsável, se não bloqueia a edição
     */
    public function verificaUsuario()
    {
        $MIOLO = MIOLO::getInstance();

        // Obtem pessoa
        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson = $MIOLO->getBusiness('basic', 'BusPerson');
        $personData = $busPerson->getPersonByMioloUserName($mioloUserName);

        //Caso a pessoa não veja o professor da oferecida e nem o responsável
        $check = DB_FALSE;

        //Verfica se a pessoa logada é o professor da oferecida
        $oferta = new MedOfertaDeUnidadeTematica( MIOLO::_REQUEST('ofertaDeUnidadeTematicaId') );

        $preceptor = MedPreceptoria::responsavelNucleoEnfaseReferencia($personData->personId);

        //Verifica se é professor responsável
        $responsavel = MIOLO::_REQUEST('responsavel');

        //Caso o não seja o professor da oferecida, verfica se é um responsável, e referencia a enfase
        if ( ($personData->personId == $oferta->personId && $responsavel == DB_TRUE) || count($preceptor) > 0 )
        {
            $check = DB_TRUE;
        }

        return $check;
    }
}
?>