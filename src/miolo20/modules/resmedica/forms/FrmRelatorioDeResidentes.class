<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário do relatório de residentes
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 21/07/2011
 */
class FrmRelatorioDeResidentes extends SForm
{
    // Tipos de relatório
    const TIPO_RESUMIDO = 0;
    const TIPO_COMPLETO = 1;
    const TIPO_VAGAS = 2;

    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Relatório de residentes', $module), null, null);

        // Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        // Campo núcleo profissional
        $nucleoProfissional = new MSelection('nucleoProfissionalId', $this->getFormValue('nucleoProfissionalId'), _M('Núcleo profissional'), MedNucleoProfissional::listRecords());
        $nucleoProfissional->setJsHint(_M('Informe o núcleo profissional'));
        $fields[] = $nucleoProfissional;

        // Campo ênfase
        $enfase = new MSelection('enfaseId', $this->getFormValue('enfaseId'), _M('Ênfase'), MedEnfase::listRecords());
        $enfase->setJsHint(_M('Informe a ênfase'));
        $fields[] = $enfase;

        // Campo período
        $periodo = new MSelection('periodo', $this->getFormValue('periodo'), _M('Período de residência', $module), MedUnidadeTematica::listPeriodos());
        $periodo->setJsHint(_M('Informe o período de residência', $module));
        $fields[] = $periodo;

        /*
         * Incluir inativos
         */
        $options = array();

        // Somente inativos
        $somenteInativosSim = new MRadioButton('incluirInativos', DB_TRUE, _M('Somente inativos', 'basic'));
        $somenteInativosSim->text = _M('Somente inativos', 'basic');
        $somenteInativosSim->setJsHint(_M('Inativo é um residente com período de residência fora de vigência, ou com status do contrato que bloqueia ou conclui a residência.', $module));
        $options[] = $somenteInativosSim;

        // Somente ativos
        $somenteInativosNao = new MRadioButton('incluirInativos', DB_FALSE, _M('Somente ativos', 'basic'));
        $somenteInativosNao->setJsHint(_M('Ativo é um residente com período de residência em vigência e status do contrato que não bloqueia nem conclui a residência.', $module));
        $somenteInativosNao->text = _M('Somente ativos', 'basic');
        $options[] = $somenteInativosNao;

        // Indiferente
        $somenteInativosIndiferente = new MRadioButton('incluirInativos', NULL, _M('Indiferente', 'basic'), true);
        $somenteInativosIndiferente->setJsHint(_M('Ignora período de vigência e status do contrato.', $module));
        $somenteInativosIndiferente->text = _M('Indiferente', 'basic');
        $options[] = $somenteInativosIndiferente;

        // Campo incluir inativos
        $somenteInativos = new MRadioButtonGroup('incluirInativos', _M('Incluir inativos', $module), $options, '', NULL, 'horizontal');
        $fields[] = $somenteInativos;

        // Campo formato
        $formatos = array(
            self::TIPO_RESUMIDO => _M('Resumido', $module),
            self::TIPO_COMPLETO => _M('Completo', $module),
            self::TIPO_VAGAS => _M('Vagas', $module)
        );
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat', self::TIPO_VAGAS), _M('Formato', $module), $formatos);
        $validators[] = new MRequiredValidator('reportFormat', _M('Formato do relatório', $module));

        $fields[] = new MSeparator();
        $fields[] = new MButton('btnGenerate', _M('Localizar', $module));
        $fields[] = new MSeparator();

        $this->setValidators($validators);
        $this->setFields($fields);
        parent::defineFields();
    }

    /**
     * Função chamada na ação do botão localizar
     */
    public function btnGenerate_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Obtém os filtros
        $filters = $this->getTypesData();

        try
        {
            if ( !is_null($filters) )
            {
                // Verifica que tipo é
                if ( $filters->reportFormat == self::TIPO_COMPLETO ) // TIPO_COMPLETO
                {
                    $dataResidentes = MedRelatorios::searchResidentesCompleto($filters);
                    $gridResult = $MIOLO->getUI()->getGrid($module, 'GrdRelatorioDeResidentesCompleto', array('event' => 'btnGenerate_click'));
                    $gridResult->setData($dataResidentes);
                    $gridResult->setTitle(_M('Relatório de residentes - Completo', $module));
                }
                elseif ( $filters->reportFormat == self::TIPO_VAGAS ) // TIPO_VAGAS
                {
                    $dataResidentes = MedRelatorios::searchResidentesVagas($filters);
                    $gridResult = $MIOLO->getUI()->getGrid($module, 'GrdRelatorioDeResidentesVagas', array('event' => 'btnGenerate_click'));

                    // Adiciona uma linha no final da Grid com os totais gerais
                    $dataResidentes = $this->adicionaUltimaLinha($dataResidentes);
                    $gridResult->setData($dataResidentes);

                    // Se filtrado por período P2, oculta a coluna P1 e P3
                    if ( $filters->periodo == MedUnidadeTematica::PERIODO_SEGUNDO_ANO )
                    {
                        $gridResult->colP1->visible = false;
                        $gridResult->colP3->visible = false;
                    }
                    // Se filtrado por período P1, oculta a coluna P2 e P3
                    if ( $filters->periodo == MedUnidadeTematica::PERIODO_PRIMEIRO_ANO )
                    {
                        $gridResult->colP2->visible = false;
                        $gridResult->colP3->visible = false;
                    }
                    //Se filtrado por período P3, oculta a coluna P1 e P2
                    if ( $filters->periodo == MedUnidadeTematica::PERIODO_TERCEIRO_ANO )
                    {
                        $gridResult->colP1->visible = false;
                        $gridResult->colP2->visible = false;
                    }
                    
                    $gridResult->setTitle(_M('Relatório de residentes - Vagas', $module));
                }
                else // TIPO_RESUMIDO
                {
                    $dataResidentes = MedRelatorios::searchResidentesResumido($filters);
                    $gridResult = $MIOLO->getUI()->getGrid($module, 'GrdRelatorioDeResidentesResumido', array('event' => 'btnGenerate_click'));
                    $gridResult->setData($dataResidentes);
                    $gridResult->setTitle(_M('Relatório de residentes - Resumido', $module));
                }

                // Adiciona grid no form
                $this->addField($gridResult);
            }
            else
            {
                throw new Exception(_M('Você precisa especificar um tipo de relatório.', $module));
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Método que obtem os dados do formulário.
     */
    public function getTypesData()
    {
        $data = new stdClass();
        $data->enfaseId = $this->GetFormValue('enfaseId');
        $data->nucleoProfissionalId = $this->GetFormValue('nucleoProfissionalId');
        $data->incluirInativos = $this->GetFormValue('incluirInativos');
        $data->periodo = $this->GetFormValue('periodo');
        $data->reportFormat = $this->GetFormValue('reportFormat');

        return $data;
    }

    /**
     * Exporta os dados da Grid para um arquivo.CSV
     */
    public function exportGridAsCSV_click()
    {
        $this->btnGenerate_click();

        parent::exportGridAsCSV_click();
    }
    
    public function exportGridAsPDF_click()
    {
        $this->btnGenerate_click();
        
        parent::exportGridAsPDF_click();
    }

    /**
     * Adiciona uma linha final na Grid
     */
    public function adicionaUltimaLinha($data = null)
    {
        // Caso não tenha nenhum registro, não precisa totalizador
        if ( !is_null($data) )
        {
            $module = SAGU::getFileModule(__FILE__);

            $totalP1 = 0;
            $totalP2 = 0;
            $totalGeral = 0;
            foreach ( (array)$data as $row )
            {
                // Soma os totais
                $totalP1 += $row[1];
                $totalP2 += $row[2];
                $totalGeral += $row[3];
            }

            // Acrescenta a última linha com os totais
            $data = array_merge((array)$data, array(
                array(
                    '<b><big>' . _M('Total', $module) . '</big></b>',
                    '<b><big>' . $totalP1 . '</big></b>',
                    '<b><big>' . $totalP2 . '</big></b>',
                    '<b><big>' . $totalGeral . '</big></b>')
                )
            );
        }

        return $data;
    }
}
?>