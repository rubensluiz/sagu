<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * \b Maintainers: \n
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 04/11/2014
 *
 */

class FrmPenalidadesPreceptor extends SManagementForm
{
    
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $MIOLO->uses('ui/controls/msubdetail.class');
        parent::__construct(null, null);

        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $preceptorId = $this->getRequestValue('preceptorId');
        $penalidadeId = MIOLO::_REQUEST('penalidadeId');
        
        $resPenalidade = new MedPenalidade();
        $resPreceptoria = new MedPreceptoria($preceptorId);
        $basPerson = new BusinessBasicBusPerson();
        $pessoa = $basPerson->getPerson($resPreceptoria->personId);
        $resEnfase = new MedEnfase($resPreceptoria->enfaseId);
        $resNucleo = new MedNucleoProfissional($resPreceptoria->nucleoProfissionalId);
//        $resTurma = new MedTurma();
        
        // delete function
        if ( $function == SForm::FUNCTION_DELETE )
        {
            $penalidade = new MedPenalidade($penalidadeId);
            $penalidade->delete();
            
            $goto = $MIOLO->GetActionURL($module, $action, null, array('preceptorId' => MIOLO::_REQUEST('preceptorId')));
            $this->messageSuccess(_M('Registro excluído com sucesso'), $goto);
            
            return;
        }
        
        $fields[] = new SHiddenField('preceptorId', $preceptorId);
        
        if ( strlen($preceptorId) <= 0 )
        {
            $MIOLO->error( _M('Deve ser informado um preceptor para acessar esta interface', $module) );
        }

        $resTipoPenalidade = new MedTipoDePenalidade();
        $sql = new MSQL('tipopenalidadeid, descricao', null, null, 'descricao');
        
        //Basegroup dos dados
        
        $var = 'ESPERA';
        $options = array(
            'value' => array(
                _M('Nome', $module) => $pessoa->name,
                _M('Ênfase') =>$resEnfase->descricao,
                _M('Núcleo profissional') => $resNucleo->descricao,
                _M('Período preceptoria', $module) => $resPreceptoria->inicio . _M(" a ", $module) . $resPreceptoria->fim
            ),
            'title' => _M("Dados do preceptor", $module),
            'columns' => '1',
            'textWidth' => '500px'
        );
        
        $informacoes = new SInformationField($options);
        $fields[] = $informacoes;

        // load data
        $penalidadeId = MIOLO::_REQUEST('penalidadeId');
        
        if ( strlen($penalidadeId) > 0 )
        {
            $penalidade = new MedPenalidade($penalidadeId);
        }
        
        //Data e hora
        $dataLabel = new MLabel(_M("Data da penalidade:", $module));
        $dataLabel->setClass('m-caption m-caption-required');
        $dataLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $data = new MCalendarField('data', $this->getRequestValue('data', $penalidade->data), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $horaLabel = new MLabel(_M("Hora:", $module));
        $horaLabel->setClass('m-caption m-caption-required');
        $hora = new MTextField('hora', $this->getRequestValue('hora', $penalidade->hora), null, SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), 'hh:mm');
        
        $controls[] = new MHContainer('hctDataHora', array($dataLabel, $data, $horaLabel, $hora));
        
        //Tipo de penalidade
        $tipoPenalidade = new MComboBox('tipoPenalidadeId', $this->getRequestValue('tipoPenalidadeId', $penalidade->tipoDePenalidadeId), null, $resTipoPenalidade->findList($sql));
        $tipoPenalidadeLabel = new MLabel(_M("Tipo de penalidade:"));
        $tipoPenalidadeLabel->setClass('m-caption m-caption-required');
        $tipoPenalidadeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $controls[] = new MHContainer('hctTipoPenalidade', array($tipoPenalidadeLabel, $tipoPenalidade));
        
        //Observacoes
        $observacoesLabel = new MLabel(_M("Observações:", $module));
        $observacoesLabel->setClass('m-caption');
        $observacoesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $observacoes = new MMultiLineField('observacoes', $this->getRequestValue('observacoes', $penalidade->observacoes), null, null, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $controls[] = new MHContainer('hctObservacoes', array($observacoesLabel, $observacoes));
        
        // arquivo #1
        $arquivo1 = $controls[] = new SFileField('arquivo1', $this, array(
            'fieldLabel' => _M('Arquivo 1'),
            'fileId' => $penalidade->arquivo1,
        ));
        
        // arquivo #2
        $arquivo2 = $controls[] = new SFileField('arquivo2', $this, array(
            'fieldLabel' => _M('Arquivo 2'),
            'fileId' => $penalidade->arquivo2,
        ));
        
        //Código da penalidade
        $fields[] = new SHiddenField('penalidadeId');
        
//        //Notificado
        $controls[] = new SHiddenField('notificado', $penalidade->notificado);
        
        $validators[] = new MDATEDMYValidator('data', _M("Data da penalidade", $module), 'required');
        $validators[] = new MTimeValidator('hora', _M("Hora da penalidade", $module), 'required');
        $validators[] = new MRequiredValidator('tipoPenalidadeId', _M("Tipo de penalidade", $module));
        
        // buttons
        if ( strlen($penalidadeId) > 0 )
        {
            $buttons[] = new MButton('btnAdd', _M('Atualizar'));
            $buttons[] = new MButton('btnCancel', _M('Cancelar'));
        }
        else
        {
            $buttons[] = new MButton('btnAdd', _M('Adicionar'));
        }
        
        $controls[] = $divButtons = new MDIV('divButtons', $buttons);
        $divButtons->addBoxStyle('width', '100%');
        $divButtons->addBoxStyle('text-align', 'center');
        
        $cols['penalidadeId'] = new MGridColumn(_M('Código', $module), 'left', true, '', false);
        $cols['data'] = new MGridColumn(_M('Data da penalidade', $module), 'center', true, '', true);
        $cols['hora'] = new MGridColumn(_M('Hora da penalidade', $module), 'center', true, '', true);
        $cols['tipoPenalidadeId'] = new MGridColumn(_M('Tipo de penalidade', $module), 'left', true, '', true, $resTipoPenalidade->findList($sql));
        $cols['observacoes'] = new MGridColumn(_M('Observações', $module), 'left', true, '' , true);
        $cols['notificado'] = new MGridColumn(_M('Notificado', $module), 'center', true, '', true);

        $grid = new SGrid($filters, $cols, 'GrdPenalidades', array('preceptorId' => MIOLO::_REQUEST('preceptorId'), 'penalidadeId' => '%penalidadeId%'));
        $grid->setData($this->obterDados($preceptorId));
        $grid->disableColumnSorting();
        $grid->disableExports();
        $grid->disablePagination();
        
        $controls[] = new MSeparator();
        $controls[] = new MDiv('divGrd', $grid);
        
        $fields[] = $bgr = new sBaseGroup('bgrPenals', _M('Penalidades do residente'), $controls);
        
        $goto = $MIOLO->GetActionURL('resmedica', 'main:register:preceptoria');
        $fields[] = new MButton('btnBack', _M('Voltar', $module), $goto);
        
        parent::defineFields($fields, $validators, $data);
    }
    
    public function tbBtnDelete_confirm($sender = NULL)
    {
    }
    
    public function tbBtnDelete_click($sender = NULL)
    {
    }
    
    public function btnCancel_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $goto = $MIOLO->GetActionURL($module, $action, null, array('preceptorId' => MIOLO::_REQUEST('preceptorId')));
        $MIOLO->page->Redirect($goto);
    }
    
    
    public function btnAdd_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $busFile = new BusinessBasicBusFile();
        
        $resPenalidade = new MedPenalidade();
        $penal = (object) $_REQUEST;
        
        $resPenalidade->penalidadeId = $penal->penalidadeId;
        $resPenalidade->data = $penal->data;
        $resPenalidade->hora = $penal->hora;
        $resPenalidade->preceptorId = $penal->preceptorId;
        $resPenalidade->observacoes = $penal->observacoes;
        $resPenalidade->tipoDePenalidadeId = $penal->tipoPenalidadeId;

        // arquivo #1
        if ( strlen($_FILES['arquivo1']['name']) > 0 )
        {
            $resPenalidade->arquivo1 = $busFile->insertFileUpload($_FILES['arquivo1']);
        }
        else
        {
            $resPenalidade->arquivo1 = SAGU::NVL($penal->arquivo1Old, SType::NULL_VALUE);
        }
        
        // arquivo #2
        if ( strlen($_FILES['arquivo2']['name']) > 0 )
        {
            $resPenalidade->arquivo2 = $busFile->insertFileUpload($_FILES['arquivo2']);
        }
        else
        {
            $resPenalidade->arquivo2 = SAGU::NVL($penal->arquivo2Old, SType::NULL_VALUE);
        }
        
        //notificado enviar email
        if ($penal->notificado == _M("Não se aplica"))
        {
            $resPenalidade->notificado = MedPenalidade::NOTIFICADO_NAO_SE_APLICA;
        }
        elseif ($penal->notificado == _M("Não"))
        {
            $resTipoPenalidade = new MedTipoDePenalidade($penal->tipoPenalidadeId);

            $retorno = $this->enviarEmail($resTipoPenalidade->emailId, MIOLO::_REQUEST('preceptorId'));

            if ($retorno)
            {
                $this->addInfo(_M("E-mail enviado com sucesso."));
                $resPenalidade->notificado = MedPenalidade::NOTIFICADO_SIM;
            }
            else
            {
                $this->addError(_M("Erro ao enviar e-mail. Cheque se o servidor de e-mail está configurado corretamente. Depois clique em SALVAR novamente."));
                $resPenalidade->notificado = MedPenalidade::NOTIFICADO_NAO;
            }

        }
        elseif ($penal->notificado == _M("Sim"))
        {
            $resPenalidade->notificado = MedPenalidade::NOTIFICADO_SIM;
        }

        $resPenalidade->save();

        $goto = $MIOLO->GetActionURL($module, $action, null, array('preceptorId' => MIOLO::_REQUEST('preceptorId')));
        $this->messageSuccess(_M('Registro inserido/atualizado com sucesso.'), $goto);
    }
    
    //Preenche subdetail
    public function obterDados($preceptorId)
    {
        $resPenalidade = new MedPenalidade();
        $penals = $resPenalidade->searchPreceptor($preceptorId);
        $dados = array();
        
        foreach ($penals as $item)
        {
            //Notificado
            if ($item[10] == MedPenalidade::NOTIFICADO_SIM)
            {
                $notificado = _M("Sim");
            }
            elseif ($item[10] == MedPenalidade::NOTIFICADO_NAO_SE_APLICA)
            {
                $notificado = _M("Não se aplica");
            }
            else
            {
                $notificado = _M("Não");
            }
            
            $dados[] = array(
                'data' => SAGU::dateToUser($item[7]),
                'hora' => $item[8],
                'tipoPenalidadeId' => $item[6],
                'observacoes' => $item[9],
                'penalidadeId' => $item[3],
                'notificado' => $notificado
            );
        }
            
        return $dados;
    }
    
    //Adiciona status de notificaçao por email ao adicionar
    public function subDetailEventAdd($args = null)
    {
        $resTipoPenalidade = new MedTipoDePenalidade($args->tipoPenalidadeId);
        
        if (strlen ($resTipoPenalidade->emailId) > 0 && strlen ($args->penalidadeId) == 0)
        {
            $args->notificado = _M("Não");
        }
        elseif ( strlen ($resTipoPenalidade->emailId) > 0 && strlen ($args->penalidadeId) > 0)
        {
            $args->notificado = _M("Sim");
        }
        else
        {
            $args->notificado = _M("Não se aplica");
        }
        
        return $args;
    }
    
    //Adiciona status de notificaçao por email ao editar
    public function subDetailEventEdit($args = null)
    {
        $args->notificado = $args->notificado;
        
        return $args;
    }
    
    //Enviar e-mail da penalidade
    public function enviarEmail($emailId, $preceptorId)
    {
        //Email a ser enviado
        $basEmail = new BusinessBasicBusEmail();
        $email = $basEmail->getEmail($emailId);
        
        //Email que vai receber
        $resPreceptor = new MedPreceptoria($preceptorId);
        $basPerson = new BusinessBasicBusPerson();
        $pessoa = $basPerson->getPerson($resPreceptor->personId);
        
        //Enviar email
        $sendEmail = new sendEmail($email->from, '', $pessoa->email, $email->description, $email->body);
        $retorno = $sendEmail->sendEmail();
        
        return $retorno;
    }
}
?>