<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * @since
 * Class created on 06/01/2015
 */

class FrmNotasDaOfertaDaUnidadeTematicaPreceptor extends SForm
{
    public function __construct()
    {
        parent::__construct(_M('Registro de notas'));
        
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
    }
    
    public function defineFields($options = array())
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');

        $preceptor = MedPreceptoria::retornaPreceptorLogado();
        
        $fields[] = MMessage::getStaticMessage($name, 'Importante! Lembre-se de salvar após concluir a digitação de notas.', MMessage::TYPE_WARNING);
        
        $busFile = new BusinessBasicBusFile();
        
        //Oferta de unidade tematica
        $ofertaDeUnidadeTematica = new MedOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
        //Lista de períodos de unidade temática
        $listPeriodoDaUnidadeTematica = MedUnidadeTematica::listPeriodos();
        
        //Informações da unidade temática
        $options = array(
            'title' => _M('Informações do rodízio ofertado'),
            'columns' => 1,
            'value' => array(
                _M('Descrição') => $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId . ' - ' . $ofertaDeUnidadeTematica->unidadeTematica->descricao,
                _M('Frequência mínima') => $ofertaDeUnidadeTematica->unidadeTematica->frequenciaMinima . '%',
                _M('Nota máxima') => $ofertaDeUnidadeTematica->notaMaxima,
                _M('Nota mínima para aprovação') => $ofertaDeUnidadeTematica->notaMinimaParaAprovacao,
                _M('Período') => $listPeriodoDaUnidadeTematica[$ofertaDeUnidadeTematica->unidadeTematica->periodo],
                _M('Início') => $ofertaDeUnidadeTematica->inicio,
                _M('Fim') => $ofertaDeUnidadeTematica->fim )
        );
        $fields[] = new SInformationField($options, 350);
        
        $residentes = MedOfertaDeUnidadeTematica::obtemAlunosDaOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
        
        $columns[] = _M('Foto', $module);
        $columns[] = _M('Residente', $module);
        $columns[] = _M('Status na oferta do rodizio', $module);
        $columns[] = _M('Nota', $module);
                
        foreach ( $residentes as $key => $residente )
        {            
            //Contador colunas da tabela
            $coluna = 0;

            unset($personFile);

            if ( strlen($residente->photoId) > 0 )
            {
                $path = $busFile->getUrl($residente->photoId, array( 'permission' => true ));
                $personFile = new MImage('personFile_' . $residente->photoId, NULL, $path, 'width="' . (int) SAGU::getParameter('BASIC', 'PHOTO_WIDTH') . '" height="' . (int) SAGU::getParameter('BASIC', 'PHOTO_HEIGHT') . '"');
                $personFile->addBoxStyle('text-align', 'center');
            }
            //Status do residente na oferta
            $listStatus = MedOcorrenciaDeOferta::listStatus();
            $statusResidenteOferta = new MTextLabel('labelStatus_' . $key, $listStatus[$residente->ocorrenciaStatus]);
            $divStatusResidente = new MDiv('divStatusResidente', $statusResidenteOferta);
            $divStatusResidente->addBoxStyle('text-align', 'center');

            //Imagem da pessoa
            $dataTable[$key][$coluna] = $personFile;
            $coluna++;
            
            // Nome da pessoa
            $dataTable[$key][$coluna] = $residente->name;
            $coluna++;

            //Status na oferta de unidade temática
            $dataTable[$key][$coluna] = $divStatusResidente;
            $coluna++;

            $nota = MedNotaDoResidenteNaOfertaDeRodizioPreceptor::obtemNotaDoResidenteNaOfertaDeUnidadeTematicaEPreceptor($residente->residenteId, $ofertaDeUnidadeTematicaId, $preceptor->preceptorId);
            
            $notaResidente = new MTextField('nota_' . $residente->residenteId, $nota, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $notaResidente->setAttribute('onchange', "javascript:verificaNota('nota_$residente->residenteId')");
            $divNotaResidente = new MDiv('divNotaResidente', $notaResidente);
            $divNotaResidente->addBoxStyle('text-align', 'center');
            
            //Status na oferta de unidade temática
            $dataTable[$key][$coluna] = $divNotaResidente->generate();
            $coluna++;
        }
                
        $table = new MTableRaw(null, $dataTable, $columns);
        $fields[] = $tableEncontrosDiv = new MDiv('tableNotasDiv', $table, null, 'width=100%');
        
        $href = $this->getPreviousURL();
        
        $btns[] = new MButton('button_back', _M('<< Voltar', $module), $href);
        
        if ( count($residentes) > 0 )
        {
            $btns[] = new MButton('button_save', _M('Salvar', $module));
        }
        
        $fields[] = new MSeparator();
        
        $fields[] = new MDiv('divButtons', $btns, '', 'style="margin-left:41%"');
        
        $jsCode = " function verificaNota(notaResidente) 
                    {
                        var nota = document.getElementById(notaResidente); 
                        
                        // Verifica se tem virgula e troca pelo ponto 
                        nota.value = nota.value.replace(',', '.');
                        
                        // Verifica se é um número 
                        if ( isNaN(nota.value*1) )
                        {
                            document.getElementById(notaResidente).value = '';
                            return;
                        }
                        
                        // Verifica se a nota informada é maior que a nota máxima configurada na unidade temática
                        if ( nota.value > $ofertaDeUnidadeTematica->notaMaxima )
                        {
                            alert('A nota informada não pode ser superior a nota máxima configurada para o rodízio.');
                            nota.value = '';
                            nota.focus();
                        }

                    } ";
        
        $this->AddJsCode($jsCode);
        
        parent::defineFields(array('fields' => $fields));
    }
    
    /**
     * Registra a nota para cada residente
     * 
     * @throws Exception
     */
    public function button_save_click()
    {
        $MIOLO = MIOLO::getInstance();
        
        $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');

        try
        {
            SDatabase::beginTransaction();

            $preceptor = MedPreceptoria::retornaPreceptorLogado();
            
            $residentes = MedOfertaDeUnidadeTematica::obtemAlunosDaOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
            
            foreach ( $residentes as $key => $residente )
            {
                $ok = false;
                $nota = null;
                $campoNota = 'nota_' . $residente->residenteId;
                $nota = $_REQUEST[$campoNota];

                $data = new stdClass();
                $data->residenteId = $residente->residenteId;
                $data->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
                $data->nota = $nota;
                $data->preceptorId = $preceptor->preceptorId;

                $ok = MedNotaDoResidenteNaOfertaDeRodizioPreceptor::salvaNotaDoResidenteParcial($data);
                    
                if ( !$ok )
                {
                    throw new Exception(_M("Não foi possível salvar a nota do residente {$residente->residenteId} - $residente->name."));
                }
            }
        
            SDatabase::commit();
            
            $this->AddInfo(_M('Notas salvas com sucesso.'));
            
            // Chamado o define fields para carregar e exibir as notas salvas
            $this->defineFields();
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            
            $this->Error($e->getMessage());
        }
    }
}