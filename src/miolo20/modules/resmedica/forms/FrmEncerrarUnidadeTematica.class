<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 18/07/2011
 *
 */
class FrmEncerrarUnidadeTematica extends SManagementForm
{
    public $oferta;

    public function __construct()
    {
        parent::__construct(new MedOfertaDeUnidadeTematica(), array('ofertaDeUnidadeTematicaId'));

        $this->toolbar->disableButton( MToolBar::BUTTON_BACK );
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        
        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        
        
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
        $fields[] = new SHiddenField('ofertaDeUnidadeTematicaId', $ofertaDeUnidadeTematicaId);

        $this->oferta = $oferta = new MedOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
        
        $fields[] = new MedOfertaDeUnidadeTematicaInformation(array('ofertaDeUnidadeTematica' => $oferta));

        $fields[] = new MSeparator();

        //Encerrado por
        $encerradoDate = MUtil::NVL( $this->getRequestValue('encerradoPorDate'), SAGU::getDateNow() );
        $encerradoTime = MUtil::NVL( $this->getRequestValue('encerradoPorTime'), SAGU::getDateNow(SAGU::getParameter('BASIC', 'MASK_TIME_PHP_DEFAULT')) );
        $encerradoPorLabel = new MLabel(_M('Encerrado em', $module) . ':');
        $encerradoPorLabel->setClass('m-caption m-caption-required');
        $encerradoPorDate = new MCalendarField('encerradoPorDate', $encerradoDate, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $encerradoPorTime = new MTextField('encerradoPorTime', $encerradoTime, null, SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'));
        $fields[] = $hct = new MHContainer(rand(), array($encerradoPorLabel, $encerradoPorDate, $encerradoPorTime));
        $validators[] = new MDateDMYValidator('encerradoPorDate', _M('Encerrado por (data)', $module), 'required' );
        $validators[] = new MRequiredValidator('encerradoPorDate', _M('Encerrado por (data)', $module), 'required' );
        $validators[] = new MTIMEValidator('encerradoPorTime', _M('Encerrado por (hora)', $module), 'required' );

        //Usuario
        $fields[] = $usuario = new MTextLabel(rand(), $MIOLO->getLogin()->id, _M('Usuário', $module));

        $fields[] = new MSeparator();

        $fields[] = $grid = $MIOLO->getUI()->getGrid($module, 'GrdEncerrarUnidadeTematica');

        if ( !(MIOLO::_REQUEST('event') == 'reabrirUnidadeTematicaConfirm' || MIOLO::_REQUEST('event') == 'reabrirUnidadeTematica') )
        {
            $gridData = array();
            foreach ( $oferta->ofertaDoResidente as $i => $val )
            {
                $nota = MedOfertaDoResidente::obtemNotaDoResidenteNaOfertaDeUnidadeTematica($val->residente->residenteId, $ofertaDeUnidadeTematicaId);
                
                $status = $this->obtemStatusDoResidente($val->residente->residenteId, $ofertaDeUnidadeTematicaId, $val->atingiuFrequenciaMinima) == DB_TRUE ? _M('APTO', $module) : _M('INAPTO', $module);
                
                $gridData[] = array(
                    $val->residente->physicalPerson->name,
                    $val->cargaHorariaNaUnidadeTematica . 'h (' . $val->percentualCargaHorariaRealizada . '%)',
                    $nota,
                    $status);
                
                asort($gridData);
            }
            $grid->setData($gridData);
        }

        $fields[] = new MButton('btnBack', _M('Voltar', $module), $this->getPreviousURL());

        parent::defineFields($fields, $validators, $data);
    }

    public function reabrirUnidadeTematicaConfirm()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $gotoYes = SAGU::getActionURL($module, $action, array(
            'ofertaDeUnidadeTematicaId' => $this->getFormValue('ofertaDeUnidadeTematicaId'),
            'event' => 'reabrirUnidadeTematica'
        ));
        $gotoNo = $this->getPreviousURL();
        SAGU::question(_M('Deseja reabrir a oferta de rodízio?', $module), $gotoYes, $gotoNo);
    }

    /**
     * Reabrir unidade tematica.
     * Define data de encerramento como NULL na base
     */
    public function reabrirUnidadeTematica()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        try
        {
            SDatabase::beginTransaction();

            //Define data de encerramento como NULL na base
            $this->oferta->encerramento = NULL;

            $dataHora = SAGU::getDateNow( SAGU::getParameter('BASIC', 'MASK_DATE_PHP') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME_PHP') );
            $msgOferta = _M("Status gerado pela reativação da oferta de rodízio em @1 pelo usuário @2", $module, $dataHora, $MIOLO->getLogin()->id);

            foreach ( (array) $this->oferta->ofertaDoResidente as $i => $ofertaDoResidente )
            {
                $ultimaOcorrenciaDeOferta = end( $ofertaDoResidente->ocorrenciasDeOferta );
                if ( in_array($ultimaOcorrenciaDeOferta->status, array(MedOcorrenciaDeOferta::STATUS_APTO, MedOcorrenciaDeOferta::STATUS_INAPTO)) )
                {
                    $ocorrenciaDeOferta = new MedOcorrenciaDeOferta();
                    $ocorrenciaDeOferta->ofertaDoResidenteId  = $ofertaDoResidente->ofertaDoResidenteId;
                    $ocorrenciaDeOferta->status = MedOcorrenciaDeOferta::STATUS_MATRICULADO;
                    $ocorrenciaDeOferta->observacoes = $msgOferta;
                    $ocorrenciaDeOferta->dataHora = $dataHora;
                    $ocorrenciaDeOferta->save();
                }
            }

            $this->oferta->save();

            SDatabase::commit();

            SAGU::information(_M('Oferta de rodízio reaberta com sucesso.', $module), $this->getPreviousURL());
        }
        catch (Exception $e)
        {
            $MIOLO->error($e->getMessage());
        }
    }

    
    public function  tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();

        try
        {
            SDatabase::beginTransaction();

            $encerramento = trim($this->getRequestValue('encerradoPorDate') . ' ' . $this->getRequestValue('encerradoPorTime'));

            $this->oferta->encerramento = $encerramento;
            $this->oferta->encerradoPor = $MIOLO->getLogin()->idkey;
            $ok = $this->oferta->save();

            if ( !$ok )
            {
                throw new Exception(_M('Erro ao salvar dados', $module));
            }

            //Salva ocorrencias
            $msgOferta = _M("Status gerado pelo encerramento da oferta de rodízio em @1 pelo usuário @2", $module, $encerramento, $MIOLO->getLogin()->id);
            foreach ( (array) $this->oferta->ofertaDoResidente as $i => $ofertaDoResidente )
            {
                $ultimaOcorrenciaDeOferta = end( $ofertaDoResidente->ocorrenciasDeOferta );
                if ( $ultimaOcorrenciaDeOferta->status == MedOcorrenciaDeOferta::STATUS_MATRICULADO )
                {
                    $ocorrenciaDeOferta = new MedOcorrenciaDeOferta();
                    $ocorrenciaDeOferta->ofertaDoResidenteId  = $ofertaDoResidente->ofertaDoResidenteId;
                    $ocorrenciaDeOferta->status =  $this->obtemStatusDoResidente($ofertaDoResidente->residenteId, $ofertaDoResidente->ofertaDeUnidadeTematicaId, $ofertaDoResidente->atingiuFrequenciaMinima) == DB_TRUE ? MedOcorrenciaDeOferta::STATUS_APTO : MedOcorrenciaDeOferta::STATUS_INAPTO;
                    $ocorrenciaDeOferta->observacoes = $msgOferta;
                    $ocorrenciaDeOferta->dataHora = SAGU::getDateNow( SAGU::getParameter('BASIC', 'MASK_DATE_PHP') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME_PHP') );
                    $ocorrenciaDeOferta->save();
                }
            }

            SDatabase::commit();

            SAGU::information(_M('Oferta de rodízio encerrada com sucesso.', $module), $this->getPreviousURL());
        }
        catch (Exception $e)
        {
            $MIOLO->error($e->getMessage());
        }
    }
    
    /**
     * Obtém o status do residente com base na frequência e nota
     * 
     * @param type $residenteId
     * @param type $ofertaDeUnidadeTematicaId
     * @param type $atingiuFrequenciaMinima
     * @return type DB_TRUE or DB_FALSE
     */
    public static function obtemStatusDoResidente($residenteId, $ofertaDeUnidadeTematicaId, $atingiuFrequenciaMinima)
    {
        $oferta = new MedOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
        $nota = MedOfertaDoResidente::obtemNotaDoResidenteNaOfertaDeUnidadeTematica($residenteId, $ofertaDeUnidadeTematicaId);
        
        $verificaNota = strlen($oferta->notaMinimaParaAprovacao) > 0 ? true : false;
        $statusNota = $verificaNota ? $nota >= $oferta->notaMinimaParaAprovacao : true;
        
        return $atingiuFrequenciaMinima == DB_TRUE && $statusNota ? DB_TRUE : DB_FALSE;
    }
}
?>