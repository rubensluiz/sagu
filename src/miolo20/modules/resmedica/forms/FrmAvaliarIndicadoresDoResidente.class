<?php

class FrmAvaliarIndicadoresDoResidente extends SForm
{
    public function __construct()
    {
        parent::__construct(_M('Avaliação dos indicadores'));
        
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
    }
    
    public function defineFields($options = array())
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $data = null;

        $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        $residenteId = MIOLO::_REQUEST('residenteId');

        $busFile = new BusinessBasicBusFile();
        
        //Oferta de unidade tematica
        $ofertaDeUnidadeTematica = new MedOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
        //Lista de períodos de unidade temática
        $listPeriodoDaUnidadeTematica = MedUnidadeTematica::listPeriodos();

        $enfaseDaUnidadeTematica = $ofertaDeUnidadeTematica->unidadeTematica->enfases;
        $enfaseId =  $enfaseDaUnidadeTematica[0]->enfaseId;

        $resi = new MedResidente($residenteId);

        $options = array(
            'title' => _M('Informações do residente'),
            'columns' => 1,
            'value' => array(
                _M('Residente') => $resi->physicalPerson->name,
                _M('Descrição') => $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId . ' - ' . $ofertaDeUnidadeTematica->unidadeTematica->descricao,
                _M('Período') => $listPeriodoDaUnidadeTematica[$ofertaDeUnidadeTematica->unidadeTematica->periodo],
                _M('Início') => $ofertaDeUnidadeTematica->inicio,
                _M('Fim') => $ofertaDeUnidadeTematica->fim )
        );
        $fields[] = new SInformationField($options, 350);

        $fields[] = new MSeparator();
        $fields[] = new MSeparator();

        $periodo = str_replace('P', '', $ofertaDeUnidadeTematica->unidadeTematica->periodo);
        $indicadores = MedIndicador::retornaIndicadoresPorEspecialidadeEPeriodoEPeriodicidade($enfaseId, array($periodo), MedIndicador::PERIODICIDADE_SEMANA);
        $indicadoresValoresSelect = array();
        foreach ($indicadores as $indi) {
            $indicadoresValoresSelect[$indi['indicadorId']] = $indi['descricao'];
        }
        $campoIndicador = new MSelection('indicador', $this->getFormValue('indicador', 6), _M('Filtro por indicador', $module), $indicadoresValoresSelect);
        $campoIndicador->setJsHint(_M('Informe o tipo', $module));
        $fields[] = $campoIndicador;

        $fields[] = new SBeginEndPeriod(array(
            'title' => _M('Intervalo de datas', $module),
            'begin' => array('label' => _M('Data inicial', $module), 'dateId' => 'dataInicio', 'dateValue' => $this->getRequestValue('dataInicio', $data->dataInicio)),
            'end' => array('label' => _M('Data final', $module), 'dateId' => 'dataFim', 'dateValue' => $this->getRequestValue('dataFim', $data->dataFim)),
        ));

        $botaoFiltro = new MButton('filtrarIndicadores', _M('Filtrar indicadores', $module), '');
        $botaoFiltro->_AddStyle('margin-left', '600px');


        $fields[] = $botaoFiltro;
        $fields[] = new MSeparator();

        $fields[] = new MDiv('divVazia', null);

        $filtro = new stdClass();
        $filtro->indicador = $this->getFormValue('indicador', $data->indicador);
        $filtro->dataInicio = $this->getRequestValue('dataInicio', $data->dataInicio);
        $filtro->dataFim = $this->getRequestValue('dataFim', $data->dataFim);

        $indicadoresDoResidente = MedResidenteIndicador::retornaIndicadoresDoResidentePorPeriodoEEspecialidade($ofertaDeUnidadeTematica->inicio, $ofertaDeUnidadeTematica->fim, $enfaseId, $residenteId, $filtro);

        $columns[] = _M('Identificador', $module);
        $columns[] = _M('Indicador', $module);
        $columns[] = _M('Meta', $module);
        $columns[] = _M('Período inicial', $module);
        $columns[] = _M('Período fim', $module);
        $columns[] = _M('Quantidade', $module);
        $columns[] = _M('Justificativa', $module);
        $columns[] = _M('Validar', $module);
                
        foreach ( $indicadoresDoResidente as $key => $indicador )
        {            
            //Contador colunas da tabela
            $coluna = 0;

            $residenteIndicador = $indicador['residenteindicadorid'];

            $dataTable[$key][$coluna] = $residenteIndicador;
            $coluna++;

            $dataTable[$key][$coluna] = $indicador['descricao'];
            $coluna++;

            $dataTable[$key][$coluna] = $indicador['meta'];
            $coluna++;

            $dataTable[$key][$coluna] = SAGU::dateToUser($indicador['periodoinicio']);
            $coluna++;

            $dataTable[$key][$coluna] = SAGU::dateToUser($indicador['periodofim']);
            $coluna++;

            $dataTable[$key][$coluna] = $indicador['quantidade'];
            $coluna++;

            $justificativa= new MMultilineField('justificativa_'.$residenteIndicador, $indicador['justificativa'], _M('Justificativa', $module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_COLS'));
            $justificativa->setJsHint(_M('Informe a justificativa', $module));
            $justificativa->addAttribute('onblur', $this->getAjaxAction('salvarAvaliacaoDosIndicadores', 'divVazia', false, array('residenteIndicadorId' => $residenteIndicador), true, true));

            $dataTable[$key][$coluna] = $justificativa;
            $coluna++;

            $validar = new MSelection('validar_'.$residenteIndicador, $indicador['situacaoIndicadorDoResidente'], _M('Validar', $module), MedResidenteIndicador::listarSituacoes());
            $validar->addAttribute('onchange', $this->getAjaxAction('salvarAvaliacaoDosIndicadores', 'divVazia', false, array('residenteIndicadorId' => $residenteIndicador), true, true));

            $dataTable[$key][$coluna] = $validar;
            $coluna++;
        }
                
        $table = new MTableRaw(null, $dataTable, $columns);
        $fields[] = $tableEncontrosDiv = new MDiv('tableNotasDiv', $table, null, 'width=100%');
        
        $href = $this->getPreviousURL();
        
        $btns[] = new MButton('button_back', _M('<< Voltar', $module), $href);

        $fields[] = new MSeparator();
        
        $fields[] = new MDiv('divButtons', $btns, '', 'style="margin-left:41%"');
        
        parent::defineFields(array('fields' => $fields));
    }

    public function salvarAvaliacaoDosIndicadores($args)
    {
        $args = (array) $args;

        $MIOLO = MIOLO::getInstance();

        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson = new BusinessBasicBusPerson();
        $personData = $busPerson->getPersonByMioloUserName($mioloUserName);

        $filters = new stdClass();
        $filters->personId = $personData->personId;
        $preceptor = MedPreceptoria::searchGrid($filters);
        $preceptorId = $preceptor[0][0];

        $residenteIndicadorId = $args['residenteIndicadorId'];
        $justificativa = $args['justificativa_'.$residenteIndicadorId];
        $validar = $args['validar_'.$residenteIndicadorId];

        $residenteIndicador = new MedResidenteIndicador($residenteIndicadorId);
        $residenteIndicador->setJustificativa($justificativa);
        $validar = empty($validar) ? MedResidenteIndicador::SITUACAO_AGUARDANDO_AVALIACAO : $validar;
        $residenteIndicador->setSituacao($validar);
        $residenteIndicador->setPreceptorId($preceptorId);

        $residenteIndicador->save();
    }
}