<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class FrmOcorrenciaDeContrato extends SManagementForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/ui/controls/msubdetail.class');

        parent::__construct(new MedCargahorariacomplementar(), array( 'ocorrenciaDeContratoId' ));

        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        
        
        
        $this->toolbar->setButtonURL(MToolBar::BUTTON_SAVE, SAGU::getActionURL($module, $action, array('event'=>'tbBtnSave:click')));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event = MIOLO::_REQUEST('event');

        if( strlen($this->getRequestValue('residenteId')) == 0 )
        {
            $MIOLO->error(_M('Nenhum residente informado', $module));
        }

        $fields[] = new MedResidenteInformation(array( 'residenteId' => $this->getRequestValue('residenteId') ));

        $fields[] = new SHiddenField('residenteId', $this->getRequestValue('residenteId'));

        $subFields[] = new SHiddenField('ocorrenciaDeContratoId', $this->getRequestValue('ocorrenciaDeContratoId'));

        $this->page->setEnctype('multipart/form-data'); // precisamos disto para que o upload funcione
        $fieldArquivo = new SFileField("fileid_[]", $this, array('fieldLabel' => false));
        $subFields[] = new SHiddenField('fileid', htmlentities($fieldArquivo->generate()));


        //Período de ocorrencia
        $opts = array(
                'label' => null,
                'baseGroup' => false,
                'disposition' => 'horizontal',
                'type' => 'timestamp',
                'begin' => array_merge( array('label' => _M('Período de ocorrência', $module).'<font color="#c61217">*</font>')),
                'end' => array('enable'=>false));
        $subFields[] = new SBeginEndPeriod($opts);
        $subValids[] = new MDATEDMYValidator('beginDate', _M('Data de ocorrência', $module), 'required');
        $subValids[] = new MTIMEValidator('beginTime', _M('Hora de ocorrência', $module), 'required');

        //Ocorrencia
        $subFields[] = $statusDaOcorrenciaDeContratoId = new MSelection('statusDaOcorrenciaDeContratoId', null, _M('Ocorrência', $module), MedStatusDaOcorrenciaDeContrato::listRecords());
        $statusDaOcorrenciaDeContratoId->setJsHint(_M('Informe o status da ocorrencia de contrato', $module));
        $subValids[] = new MRequiredValidator('statusDaOcorrenciaDeContratoId', _M('Ocorrência', $module));

        //Observações
        $subFields[] = $justificativa = new MMultiLineField('observacoes', null, _M('Observações', $module), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'));

        $columns[] = new sSubDetailColumn('ocorrenciaDeContratoId', array('label' => 'Código', 'visible' => false));
        $columns[] = new sSubDetailColumn('beginDate', array('label' => 'Data', 'visible' => true));
        $columns[] = new sSubDetailColumn('beginTime', array('label' => 'Hora', 'visible' => true));
        $columns[] = new sSubDetailColumn('statusDaOcorrenciaDeContratoId', array('label' => 'Ocorrência', 'replace' => MedStatusDaOcorrenciaDeContrato::listRecords()));
        $columns[] = new sSubDetailColumn('observacoes', array('label' => 'Observações'));
        $columns[] = new sSubDetailColumn('fileid', array('label' => 'Documento'));
        
        // Verifica permissoes de acesso (inserir, editar, excluir na subdetail)
        $subOptions = array();
        if ( SAGU::userHasAccessAny('FrmOcorrenciaDeContratoMed', array(A_ADMIN, A_UPDATE)) )
        {
            $subOptions[] = 'edit';
        }
        if ( SAGU::userHasAccessAny('FrmOcorrenciaDeContratoMed', array(A_ADMIN, A_DELETE)) )
        {
            $subOptions[] = 'remove';
        }
        if ( ! SAGU::userHasAccessAny('FrmOcorrenciaDeContratoMed', array(A_ADMIN, A_INSERT)) )
        {
            $subOptions[] = 'hideButtonsOnAdd';
        }
        if ( ! SAGU::userHasAccessAny('FrmOcorrenciaDeContratoMed', array(A_ADMIN, A_INSERT, A_UPDATE)) )
        {
            $subFields = array();
        }
        
        $fields[] = $sub = new MSubDetail('chOcorrenciasDeContrato', _M('Ocorrências', $module), $columns, $subFields, $subOptions);
        $sub->setValidators($subValids);

        $busFile = new BusinessBasicBusFile();

        if ( !$MIOLO->page->isPostBack() && $event != 'tbBtnSave:click' )
        {
            $residente = new MedResidente( $this->getRequestValue('residenteId') );

            $data = array();
            for($o=0; $o<count($residente->ocorrenciaDeContrato); $o++)
            {
                $data[$o] = new stdClass();
                $data[$o]->ocorrenciaDeContratoId = $residente->ocorrenciaDeContrato[$o]->ocorrenciaDeContratoId;
                $data[$o]->statusDaOcorrenciaDeContratoId = $residente->ocorrenciaDeContrato[$o]->statusDaOcorrenciaDeContratoId;
                $data[$o]->residenteId = $residente->ocorrenciaDeContrato[$o]->residenteId;
                $data[$o]->observacoes = $residente->ocorrenciaDeContrato[$o]->observacoes;
                list($data[$o]->beginDate, $data[$o]->beginTime) = explode(' ', $residente->ocorrenciaDeContrato[$o]->dataHora);



                $hrefDownload = $MIOLO->getUI()->getImageTheme($MIOLO->getTheme()->getId(), 'close_disable.png');
                $url = $busFile->getUrl($residente->ocorrenciaDeContrato[$o]->fileId, array('permission' => true));
                $imgDownload = new MImageLink('imgDownload_' . $residente->ocorrenciaDeContrato[$o]->ocorrenciaDeContratoId, null, $url, $hrefDownload);
                $imgDownload->setJsHint(_M('Baixar arquivo anexo'));

                $fieldArquivo = new SFileField("fileid_".$residente->ocorrenciaDeContrato[$o]->ocorrenciaDeContratoId, $this, array('fieldLabel' => false));

                if ($residente->ocorrenciaDeContrato[$o]->fileid > 0) {
                    $fileid = $fieldArquivo->generate() . ' ' . $imgDownload->generate();
                } else {
                    $fileid = $fieldArquivo->generate();
                }


                $data[$o]->fileid = $fileid;



                $data[$o]->fileid_old = $residente->ocorrenciaDeContrato[$o]->fileid;
            }
            $sub->setData($data);
        }
        $fields[] = new MButton('btnReturn', _M('Voltar', $module), $this->getPreviousURL());
        parent::defineFields($fields, $validators, $data);
    }

    public function  tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $subData = (array) MSubDetail::getData('chOcorrenciasDeContrato');
        $data = $this->getData();

        try
        {
            SDatabase::beginTransaction();

            if ( count($subData) == 0 )
            {
                throw new Exception(_M('Nenhum registro adicionado.', $module));
            }

            $residente = new MedResidente( $data->residenteId );

            $chOcorrenciaDeContrato = array();

            $busFile = new BusinessBasicBusFile();

            $i=0;
            $j = 0;
            foreach ( $subData as $row )
            {
                $chOcorrenciaDeContrato[$i] = $obj = new MedOcorrenciaDeContrato();

                foreach ( $row as $k => $v )
                {
                    if( ($k != 'beginDate') && ($k != 'beginTime') && ($k != 'fileid') )
                    {
                        $obj->$k = $v;
                    }
                }
                $obj->dataHora = trim($row->beginDate . ' ' . $row->beginTime);


                if (empty($row->ocorrenciaDeContratoId)) {

                   $fileData = $_FILES["fileid_"];

                   if ( strlen($fileData['tmp_name'][$j]) > 0 )
                   {

                       $arquivo = array(
                           'name' => $fileData['name'][$j],
                           'type' => $fileData['type'][$j],
                           'tmp_name' => $fileData['tmp_name'][$j],
                           'error' => $fileData['error'][$j],
                           'size' => $fileData['size'][$j]
                       );

                       if ($this->isArquivoValido($arquivo)) {
                           $chOcorrenciaDeContrato[$i]->fileid = $busFile->insertFileUpload($arquivo);
                       }

                       $j++;
                   }
                } else {

                    $fileData = $_FILES["fileid_{$row->ocorrenciaDeContratoId}"];
                    if ( strlen($fileData['tmp_name']) > 0 )
                    {

                        if ($this->isArquivoValido($fileData)) {
                            $chOcorrenciaDeContrato[$i]->fileid = $busFile->insertFileUpload($fileData);
                        }

                    } else {
                        $chOcorrenciaDeContrato[$i]->fileid = $row->fileid_old;
                    }
                }



                if( ( strlen($row->ocorrenciaDeContratoId) > 0 ) && ($row->removeData) )
                {
                    $obj->delete();
                    unset($chOcorrenciaDeContrato[$i]);
                }
                elseif($row->removeData)
                {
                    unset($chOcorrenciaDeContrato[$i]);
                }
                $i++;
            }
            $residente->ocorrenciaDeContrato = $chOcorrenciaDeContrato;

            $residente->save();

            // Busca ultimo estado e
            // Verifica se ultimo estado da ocorrencia de contrato é CONCLUIDO
            // Motivo desta rotina estar depois do save: para repopular e ja vir reordenado o campo dataHora, assim nao eh necessario fazer ordenacao via php
            $residente->ocorrenciaDeContrato = array();
            $residente->__get('ocorrenciaDeContrato');
            $last = current($residente->ocorrenciaDeContrato);
            if ( $last->statusDaOcorrenciaDeContratoId == MedStatusDaOcorrenciaDeContrato::STATUS_CONCLUIDO )
            {
                // Verifica se esta apto
                if ( $residente->trabalhoDeConclusao->apto != DB_TRUE )
                {
                    throw new Exception( _M('O residente ainda não possui o trabalho de conclusão como APTO. Operação abortada.', $module) );
                }

                // Verifica carga horaria valida (regra definida no ticket #10059)
                $rows = MedResidente::unidadesCargaHorariaPendente($residente->residenteId);

                if ( count($rows) > 0 )
                {
                    $unidades = array();
                    foreach ( $rows as $row )
                    {
                        if ( $row->cargaHorariaRealizada < $row->cargaHoraria )
                        {
                            $unidades[] = sprintf('%s (%sh de %sh)', $row->unidadeTematica, $row->cargaHorariaRealizada, $row->cargaHoraria);
                        }
                    }

                    if ( count($unidades) > 0 )
                    {
                        $unidades = implode('<br />', $unidades);
                        throw new Exception( _M('O residente não atingiu a carga horária mínima nas seguintes unidades temáticas:<br />@1<br /><br />Operação abortada.', $module, $unidades) );
                    }
                }
            }

            SDatabase::commit();

            SAGU::information(_M('Dados salvos com sucesso.', $module), $this->getPreviousURL());
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            $this->addError($e->getMessage());
        }
    }

    private function isArquivoValido($arquivo)
    {
        $extensoesPermitidas = array('.jpg', '.jpeg', '.png', '.pdf');
        $extensaoArquivo = strrchr($arquivo['name'], '.');

        if ($arquivo['error'] != UPLOAD_ERR_OK) {
            throw new Exception("Não foi possível enviar o arquivo, tente novamente mais tarde");
        }

        if (in_array($extensaoArquivo, $extensoesPermitidas) == false) {
            throw new Exception("Formato do arquivo inválido. Formatos de arquivos permitidos (JPG, PNG, PDF)");
        }

        return true;
    }
}

?>