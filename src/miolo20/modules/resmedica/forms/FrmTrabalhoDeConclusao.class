<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 19/07/2011
 *
 */
class FrmTrabalhoDeConclusao extends SManagementForm
{
    private $residente;

    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $MIOLO->uses('ui/controls/msubdetail.class');
        parent::__construct(null, null);

        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );

        $this->toolbar->setButtonURL(MToolBar::BUTTON_SAVE, SAGU::getActionURL($module, $action, array('event'=>'tbBtnSave:click')));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $residenteId = $this->getRequestValue('residenteId');

        $fields[] = new SHiddenField('residenteId', $residenteId);

        if ( strlen($residenteId) <= 0 )
        {
            $MIOLO->error( _M('Deve ser informado um residente para acessar esta interface', $module) );
        }

        $this->residente = $residente = new MedResidente( $residenteId );
        $trabalhoDeConclusao = $residente->trabalhoDeConclusao;

        $fields[] = new MedResidenteInformation(array('residente' => $residente));

        $fields[] = $tab = new MTabbedBaseGroup( 'tabTDC' );

        //
        // TAB DADOS GERAIS
        //
        unset($_fields);


        $_fields[] = $enfaseId =  new MSelection('modalidadeId', $this->GetFormValue('modalidadeId', $trabalhoDeConclusao->modalidadeId), _M('Modalidade'), MedTrabalhoDeConclusaoModalidade::listModalidades());
        $validators[] = new MRequiredValidator('modalidadeId', _M('Modalidade', $module));

        $_fields[] = $titulo = new MTextField('titulo', $this->getRequestValue('titulo', $trabalhoDeConclusao->titulo), _M('Título', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $titulo->setJsHint(_M('Informe o título do trabalho de conclusão', $module));
        $validators[] = new MRequiredValidator('titulo', _M('Título', $module));

        $_fields[] = $tema = new MMultiLineField('tema', $this->getRequestValue('tema', $trabalhoDeConclusao->tema), _M('Tema', $module), null, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $tema->setJsHint(_M('Informe o tema do trabalho de conclusão', $module));

        $_fields[] = $orientador = new SLookupContainer('orientadorId', $this->getRequestValue('orientadorId', $trabalhoDeConclusao->orientadorId), array(
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'label' => _M('Orientador', $module),
            'hint' => _M('Informe o orientador do trabalho de conclusão', $module),
            'descriptionHint' => _M('Orientador', $module),
        ));
        $validators[] = new MIntegerValidator('orientadorId', _M('Orientador', $module), 'optional');
        $tab->createTab('tabDadosGerais', _M('Dados gerais', $module), $_fields);
        //$this->setReadOnlyFields($_fields);

        //
        // TAB COORIENTADORES
        //
        unset($_fields, $columns, $subFields);
        $subFields[] = new SLookupContainer('personId', null, array(
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'label' => _M('Pessoa', $module),
            'required' => true,
        ));
        $subValids[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');
        $subValids[] = new MSubDetailUniqueValidator('personId', _M('Pessoa', $module));

        $columns[] = new sSubDetailColumn('personId', array('label' => _M('Pessoa', $module)));
        $columns[] = new sSubDetailColumn('personIdDescription', array('label' => _M('Nome', $module)));
        $_fields[] = $sub = new MSubDetail('coorientadores', _M('Coorientadores', $module), $columns, $subFields, array('remove'));
        $sub->setValidators($subValids);
        if ( ! $MIOLO->page->isPostBack() && (strlen(SAGU::getEventName()) <= 0) )
        {
            $sub->setData( SAGU::convertSTypeToSubDetail($columns, $residente->trabalhoDeConclusao->coorientadores) );
        }
        $sub->addActionEvent(MSubDetail::EVENT_ADD, 'eventSubAdd', __CLASS__);
        $tab->createTab('tabCoorientadores', _M('Coorientadores', $module), $_fields);
        $this->setReadOnlyFields($_fields);

        //
        // TAB BANCA EXAMINADORA
        //
        unset($_fields, $columns, $subFields, $subValids);
        $subFields[] = new SLookupContainer('_personId', null, array(
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'label' => _M('Pessoa', $module),
            'required' => true,
        ));
        $subValids[] = new MIntegerValidator('_personId', _M('Pessoa', $module), 'required');
        $subValids[] = new MSubDetailUniqueValidator('_personId', _M('Pessoa', $module));

        $columns[] = new sSubDetailColumn('_personId', array('label' => _M('Pessoa', $module)));
        $columns[] = new sSubDetailColumn('_personIdDescription', array('label' => _M('Nome', $module)));

        $_fields[] = $sub = new MSubDetail('membroDaBanca', _M('Banca examinadora', $module), $columns, $subFields, array('remove'));
        $sub->setValidators($subValids);
        if ( ! $MIOLO->page->isPostBack() && (strlen(SAGU::getEventName()) <= 0) )
        {
            $sub->setData( SAGU::convertSTypeToSubDetail($columns, $residente->trabalhoDeConclusao->membroDaBanca) );
        }
        $sub->addActionEvent(MSubDetail::EVENT_ADD, 'eventSubAdd', __CLASS__);
        $tab->createTab('tabmembroDaBanca', _M('Banca examinadora', $module), $_fields);
        $this->setReadOnlyFields($_fields);

        $fields[] = new MButton('btnBack', _M('Voltar', $module), $this->getPreviousURL());

        parent::defineFields($fields, $validators, $data);
    }

    public function eventSubAdd($args)
    {
        $MIOLO = MIOLO::getInstance();

        $personId = $args->personId ? $args->personId : $args->_personId;

        if ( is_numeric($personId) )
        {
            $pessoa = BasPessoaFisica::verificaPessoa($personId);

            if ( $pessoa == DB_FALSE )
            {
                $args->removeData = true;
            }
            else if ( !$args->personIdDescription || !$args->_personIdDescription )
            {
                $pessoa = new BasPessoaFisica($personId);
                if ( $args->personId )
                {
                    $args->personIdDescription = $pessoa->name;
                }
                else if ( $args->_personId )
                {
                    $args->_personIdDescription = $pessoa->name;
                }
            }
        }
        else
        {
            $args->removeData = true;
        }

        return $args;
    }

    public function  tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $data = $this->getData();

        try
        {
            SDatabase::beginTransaction();

            $trabalhoDeConclusaoId = $this->residente->trabalhoDeConclusao->trabalhoDeConclusaoId;

            //O registro na tabela MedTrabalhoDeConclusao pode existir ou não, caso existir,
            //será populado, caso não, irá inserir um registro novo.
            $trabalhoDeConclusao = new MedTrabalhoDeConclusao( $trabalhoDeConclusaoId );
            $trabalhoDeConclusao->orientadorId = $this->getRequestValue('orientadorId');
            $trabalhoDeConclusao->titulo = $this->getRequestValue('titulo');
            $trabalhoDeConclusao->tema = $this->getRequestValue('tema');
            $trabalhoDeConclusao->residenteId = $this->residente->residenteId;
            $trabalhoDeConclusao->modalidadeId = $this->getRequestValue('modalidadeId');

            //Coorientadores
            foreach ( (array) $this->residente->trabalhoDeConclusao->coorientadores as $row )
            {
                $row->delete();
            }
            $coorientadores = array();
            foreach ( (array) MSubDetail::getData('coorientadores') as $row )
            {
                if ( !$row->removeData )
                {
                    $coorientadores[] = $obj = new MedCoorientador();
                    $obj->personId = $row->personId;
                }
            }
            $trabalhoDeConclusao->coorientadores = $coorientadores;


            //Membro da banca
            foreach ( (array) $this->residente->trabalhoDeConclusao->membroDaBanca as $row )
            {
                $row->delete();
            }
            $membroDaBanca = array();
            foreach ( (array) MSubDetail::getData('membroDaBanca') as $row )
            {
                if ( !$row->removeData )
                {
                    $membroDaBanca[] = $obj = new MedMembroDaBanca();
                    $obj->personId = $row->_personId;
                }
            }
            $trabalhoDeConclusao->membroDaBanca = $membroDaBanca;

            $trabalhoDeConclusao->save();
            SDatabase::commit();

            SAGU::information(_M('Dados salvos com sucesso.', $module), $this->getPreviousURL());
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }


    private function setReadOnlyFields($fields = array())
    {
        if ( !SAGU::userHasAccess(__CLASS__, A_UPDATE) )
        {
            foreach ( $fields as $fld )
            {
                $fld->setReadOnly(true);
            }
        }
    }
}
?>