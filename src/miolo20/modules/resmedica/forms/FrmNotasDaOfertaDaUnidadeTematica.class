<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * @since
 * Class created on 06/01/2015
 */

class FrmNotasDaOfertaDaUnidadeTematica extends SForm
{
    public function __construct()
    {
        parent::__construct(_M('Registro de notas'));
        
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
    }
    
    public function defineFields($options = array())
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        
        $fields[] = MMessage::getStaticMessage($name, 'Importante! Lembre-se de salvar após concluir a digitação de notas.', MMessage::TYPE_WARNING);
        
        $busFile = new BusinessBasicBusFile();
        
        //Oferta de unidade tematica
        $ofertaDeUnidadeTematica = new MedOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
        //Lista de períodos de unidade temática
        $listPeriodoDaUnidadeTematica = MedUnidadeTematica::listPeriodos();
        
        //Informações da unidade temática
        $options = array(
            'title' => _M('Informações do rodízio ofertado'),
            'columns' => 1,
            'value' => array(
                _M('Descrição') => $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId . ' - ' . $ofertaDeUnidadeTematica->unidadeTematica->descricao,
                _M('Frequência mínima') => $ofertaDeUnidadeTematica->unidadeTematica->frequenciaMinima . '%',
                _M('Nota máxima') => $ofertaDeUnidadeTematica->notaMaxima,
                _M('Nota mínima para aprovação') => $ofertaDeUnidadeTematica->notaMinimaParaAprovacao,
                _M('Período') => $listPeriodoDaUnidadeTematica[$ofertaDeUnidadeTematica->unidadeTematica->periodo],
                _M('Início') => $ofertaDeUnidadeTematica->inicio,
                _M('Fim') => $ofertaDeUnidadeTematica->fim )
        );
        $fields[] = new SInformationField($options, 350);
        
        $residentes = MedOfertaDeUnidadeTematica::obtemAlunosDaOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
        
        $columns[] = _M('Foto', $module);
        $columns[] = _M('Residente', $module);
        $columns[] = _M('Status na oferta do rodizio', $module);
        $columns[] = _M('Média das notas dos preceptores', $module);
        $columns[] = _M('Nota atual', $module);
        $columns[] = _M('Autoavaliação do residente', $module);
                
        foreach ( $residentes as $key => $residente )
        {            
            //Contador colunas da tabela
            $coluna = 0;

            unset($personFile);

            if ( strlen($residente->photoId) > 0 )
            {
                $path = $busFile->getUrl($residente->photoId, array( 'permission' => true ));
                $personFile = new MImage('personFile_' . $residente->photoId, NULL, $path, 'width="' . (int) SAGU::getParameter('BASIC', 'PHOTO_WIDTH') . '" height="' . (int) SAGU::getParameter('BASIC', 'PHOTO_HEIGHT') . '"');
                $personFile->addBoxStyle('text-align', 'center');
            }
            //Status do residente na oferta
            $listStatus = MedOcorrenciaDeOferta::listStatus();
            $statusResidenteOferta = new MTextLabel('labelStatus_' . $key, $listStatus[$residente->ocorrenciaStatus]);
            $divStatusResidente = new MDiv('divStatusResidente', $statusResidenteOferta);
            $divStatusResidente->addBoxStyle('text-align', 'center');

            //Imagem da pessoa
            $dataTable[$key][$coluna] = $personFile;
            $coluna++;
            
            // Nome da pessoa
            $dataTable[$key][$coluna] = $residente->name;
            $coluna++;

            //Status na oferta de unidade temática
            $dataTable[$key][$coluna] = $divStatusResidente;
            $coluna++;
             
            // Obtém a nota do residente pra oferta de unidade temática
            $nota = MedOfertaDoResidente::obtemNotaDoResidenteNaOfertaDeUnidadeTematica($residente->residenteId, $ofertaDeUnidadeTematicaId);
            $notaMediaPreceptor = MedNotaDoResidenteNaOfertaDeRodizioPreceptor::obtemMediaDoResidenteNaOfertaDeUnidadeTematica($residente->residenteId, $ofertaDeUnidadeTematicaId);

            if ($nota == $notaMediaPreceptor) {
                $nota = $notaMediaPreceptor;
            }

            $args = array(
                'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId,
                'residenteId' => $residente->residenteId

            );
            $href = SForm::getPopupLink(array('args' => $args, 'method' => 'notasPreceptor', 'encodeArgs' => false));
            $notasPreceptorLink = new MLink('notasPreceptor', _M('Detalhes das notas (+)'), $href);

            $divNotaMediaPreceptor = new MDiv('divNotaMediaPreceptor', $notaMediaPreceptor == null ? ' Sem nota ' : $notasPreceptorLink);
            $divNotaMediaPreceptor->addBoxStyle('text-align', 'center');
            $dataTable[$key][$coluna] = $divNotaMediaPreceptor->generate();
            $coluna++;

            $notaResidente = new MTextField('nota_' . $residente->residenteId, $nota, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $notaResidente->setAttribute('onchange', "javascript:verificaNota('nota_$residente->residenteId')");
            $divNotaResidente = new MDiv('divNotaResidente', $notaResidente);
            $divNotaResidente->addBoxStyle('text-align', 'center');
            $dataTable[$key][$coluna] = $divNotaResidente->generate();
            $coluna++;


            $avaliacao = new MedOfertaDeUnidadeTematicaAutoAvaliacao($ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId, $residente->residenteId);
            $notaAuto = $avaliacao->getNota();
            if (!empty($notaAuto)) {

                $args = array(
                    'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId,
                    'residenteId' => $residente->residenteId

                );

                $href = SForm::getPopupLink(array('args' => $args, 'method' => 'autoAvaliacao', 'encodeArgs' => false));
                $avaliacaoResidente = new MLink('autoAvaliacao', _M(' Mais detalhes (+)'), $href);

            } else {
                $avaliacaoResidente = 'Sem Autoavaliação';
            }

            $divAvaliacaoResidente = new MDiv('divAvaliacaoResidente', $avaliacaoResidente);
            $divAvaliacaoResidente->addBoxStyle('text-align', 'center');
            $dataTable[$key][$coluna] = $divAvaliacaoResidente->generate();
            $coluna++;
        }
                
        $table = new MTableRaw(null, $dataTable, $columns);
        $fields[] = $tableEncontrosDiv = new MDiv('tableNotasDiv', $table, null, 'width=100%');
        
        $href = $this->getPreviousURL();
        
        $btns[] = new MButton('button_back', _M('<< Voltar', $module), $href);
        
        if ( count($residentes) > 0 )
        {
            $btns[] = new MButton('button_save', _M('Salvar', $module));
        }
        
        $fields[] = new MSeparator();
        
        $fields[] = new MDiv('divButtons', $btns, '', 'style="margin-left:41%"');
        
        $jsCode = " function verificaNota(notaResidente) 
                    {
                        var nota = document.getElementById(notaResidente); 
                        
                        // Verifica se tem virgula e troca pelo ponto 
                        nota.value = nota.value.replace(',', '.');
                        
                        // Verifica se é um número 
                        if ( isNaN(nota.value*1) )
                        {
                            document.getElementById(notaResidente).value = '';
                            return;
                        }
                        
                        // Verifica se a nota informada é maior que a nota máxima configurada na unidade temática
                        if ( nota.value > $ofertaDeUnidadeTematica->notaMaxima )
                        {
                            alert('A nota informada não pode ser superior a nota máxima configurada para a unidade temática.');
                            nota.value = '';
                            nota.focus();
                        }

                    } ";
        
        $this->AddJsCode($jsCode);
        
        parent::defineFields(array('fields' => $fields));
    }
    
    /**
     * Registra a nota para cada residente
     * 
     * @throws Exception
     */
    public function button_save_click()
    {
        $MIOLO = MIOLO::getInstance();
        
        $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        
        try
        {
            SDatabase::beginTransaction();
            
            $residentes = MedOfertaDeUnidadeTematica::obtemAlunosDaOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
            
            foreach ( $residentes as $key => $residente )
            {
                $ok = false;
                $nota = null;
                $campoNota = 'nota_' . $residente->residenteId;
                $nota = $_REQUEST[$campoNota];

                $data = new stdClass();
                $data->residenteId = $residente->residenteId;
                $data->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
                $data->nota = $nota;
                
                $ok = MedOfertaDoResidente::salvaNotaDoResidente($data);
                    
                if ( !$ok )
                {
                    throw new Exception(_M("Não foi possível salvar a nota do residente {$residente->residenteId} - $residente->name."));
                }
            }
        
            SDatabase::commit();
            
            $this->AddInfo(_M('Notas salvas com sucesso.'));
            
            // Chamado o define fields para carregar e exibir as notas salvas
            $this->defineFields();
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            
            $this->Error($e->getMessage());
        }
    }


    public function autoAvaliacao($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $residenteId = $this->getRequestValue('residenteId');

        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
        $ut = current(MedOfertaDeUnidadeTematica::searchGrid($filters));

        $ofertaUnidadeTematicaId = $ut[0];

        $avaliacao = new MedOfertaDeUnidadeTematicaAutoAvaliacao($ofertaUnidadeTematicaId, $residenteId);

        $periodos = MedUnidadeTematica::listPeriodos();
        $tipos = MedUnidadeTematica::listTipos();
        $options = array(
            _M('Unidade temática', $module) => $ut[1],
            _M('Período', $module) => $periodos[$ut[2]],
            _M('Tipo', $module) => $tipos[$ut[3]],
            _M('Carga horária', $module) => $ut[4],
            _M('Frequência mínima', $module) => $ut[5],
            _M('Núcleos profissionais') => $ut[6],
            _M('Especialidades') => $ut[7],
            _M('Início', $module) => $ut[8],
            _M('Fim', $module) => $ut[9],
            _M('Preceptor', $module) => $ut[11],
        );
        $fields[] = new SInformationField(array(
            'value' => $options,
            'columns' => 1,
        ));


        $fields[] = MMessage::getStaticMessage(null, 'Autoavaliação do residente ', MMessage::TYPE_INFORMATION);

        // Get grid
        $fields[] = new MSeparator();

        $residente = new MedResidente($avaliacao->getResidenteId());

        $residenteNome = new MTextField('residente', $residente->physicalPerson->personId . ' - ' . $residente->physicalPerson->name, _M('Residente'), 50);
        $residenteNome->addAttribute('disabled', 'disabled');
        $fields[] = $residenteNome;

        $notaResidente = new MTextField('nota', $avaliacao->getNota(), _M('Nota de autoavaliaçao'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $notaResidente->addAttribute('disabled', 'disabled');
        $fields[] = $notaResidente;

        $avaliacao = new MMultiLineField('avaliacao', $avaliacao->getAvaliacao(), _M('Autoavaliação'), null, 10, 50);
        $avaliacao->addAttribute('disabled', 'disabled');
        $fields[] = $avaliacao;

        MPopup::show('divPopup', $fields, _M('Autoavaliação', $module));
    }


    public function notasPreceptor($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $residenteId = $this->getRequestValue('residenteId');

        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
        $ut = current(MedOfertaDeUnidadeTematica::searchGrid($filters));

        $ofertaUnidadeTematicaId = $ut[0];

        $avaliacao = new MedOfertaDeUnidadeTematicaAutoAvaliacao($ofertaUnidadeTematicaId, $residenteId);

        $periodos = MedUnidadeTematica::listPeriodos();
        $tipos = MedUnidadeTematica::listTipos();

        $residente = new MedResidente($avaliacao->getResidenteId());
        $residenteNome = new MTextField('residente', $residente->physicalPerson->personId . ' - ' . $residente->physicalPerson->name, _M('RESIDENTE'), 50);
        $residenteNome->addAttribute('disabled', 'disabled');
        $fields[] = $residenteNome;

        $preceptorOferta = new MedOfertaDeUnidadeTematicaPreceptor();
        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = $ofertaUnidadeTematicaId;
        $preceptorOferta = $preceptorOferta->search($filters);
        $fields[] = new MSeparator();
        $separator = new MSeparator('<b style="margin: 50px;font-size:13px;">NOTAS DOS PRECEPTORES</b>');
        $fields[] = $separator;

        foreach ($preceptorOferta as $preceptorOferta) {

            $preceptor = new MedPreceptoria($preceptorOferta->preceptorId);
            $notaPreceptor = MedNotaDoResidenteNaOfertaDeRodizioPreceptor::obtemNotaDoResidenteNaOfertaDeUnidadeTematicaEPreceptor($residenteId, $ofertaUnidadeTematicaId, $preceptorOferta->preceptorId);

            $nota = new MTextField('nota', $notaPreceptor, _M($preceptor->physicalPerson->name), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $nota->addAttribute('disabled', 'disabled');
            $fields[] = $nota;
        }

        $mediaPreceptores = MedNotaDoResidenteNaOfertaDeRodizioPreceptor::obtemMediaDoResidenteNaOfertaDeUnidadeTematica($residenteId, $ofertaUnidadeTematicaId);
        $media = new MTextField('mediaPreceptores', $mediaPreceptores, _M('<b>MÉDIA DOS PRECEPTORES</b>'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $media->addAttribute('disabled', 'disabled');
        $fields[] = $media;

        $options = array(
            _M('Unidade temática', $module) => $ut[1],
            _M('Período', $module) => $periodos[$ut[2]],
            _M('Tipo', $module) => $tipos[$ut[3]],
            _M('Carga horária', $module) => $ut[4],
            _M('Frequência mínima', $module) => $ut[5],
            _M('Núcleos profissionais') => $ut[6],
            _M('Especialidades') => $ut[7],
            _M('Início', $module) => $ut[8],
            _M('Fim', $module) => $ut[9],
            _M('Preceptor', $module) => $ut[11],
        );
        $fields[] = new SInformationField(array(
            'value' => $options,
            'columns' => 1,
        ));

        MPopup::show('divPopup', $fields, _M('Mais detalhes - Notas lançada pelos preceptores', $module));
    }
}