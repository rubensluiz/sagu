<?php

class FrmResidenteIndicadores extends SForm
{
    public function __construct()
    {
        parent::__construct(_M('Residentes indicadores'));
        
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
    }
    
    public function defineFields($options = array())
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');

        $busFile = new BusinessBasicBusFile();
        
        //Oferta de unidade tematica
        $ofertaDeUnidadeTematica = new MedOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
        //Lista de períodos de unidade temática
        $listPeriodoDaUnidadeTematica = MedUnidadeTematica::listPeriodos();
        
        //Informações da unidade temática
        $options = array(
            'title' => _M('Informações do rodízio ofertado'),
            'columns' => 1,
            'value' => array(
                _M('Descrição') => $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId . ' - ' . $ofertaDeUnidadeTematica->unidadeTematica->descricao,
                _M('Frequência mínima') => $ofertaDeUnidadeTematica->unidadeTematica->frequenciaMinima . '%',
                _M('Nota máxima') => $ofertaDeUnidadeTematica->notaMaxima,
                _M('Nota mínima para aprovação') => $ofertaDeUnidadeTematica->notaMinimaParaAprovacao,
                _M('Período') => $listPeriodoDaUnidadeTematica[$ofertaDeUnidadeTematica->unidadeTematica->periodo],
                _M('Início') => $ofertaDeUnidadeTematica->inicio,
                _M('Fim') => $ofertaDeUnidadeTematica->fim )
        );
        $fields[] = new SInformationField($options, 350);
        
        $residentes = MedOfertaDeUnidadeTematica::obtemAlunosDaOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
        
        $columns[] = _M('Foto', $module);
        $columns[] = _M('Residente', $module);
        $columns[] = _M('Status na oferta do rodizio', $module);
        $columns[] = _M('Ações', $module);
                
        foreach ( $residentes as $key => $residente )
        {            
            //Contador colunas da tabela
            $coluna = 0;

            unset($personFile);

            if ( strlen($residente->photoId) > 0 )
            {
                $path = $busFile->getUrl($residente->photoId, array( 'permission' => true ));
                $personFile = new MImage('personFile_' . $residente->photoId, NULL, $path, 'width="' . (int) SAGU::getParameter('BASIC', 'PHOTO_WIDTH') . '" height="' . (int) SAGU::getParameter('BASIC', 'PHOTO_HEIGHT') . '"');
                $personFile->addBoxStyle('text-align', 'center');
            }
            //Status do residente na oferta
            $listStatus = MedOcorrenciaDeOferta::listStatus();
            $statusResidenteOferta = new MTextLabel('labelStatus_' . $key, $listStatus[$residente->ocorrenciaStatus]);
            $divStatusResidente = new MDiv('divStatusResidente', $statusResidenteOferta);
            $divStatusResidente->addBoxStyle('text-align', 'center');

            //Imagem da pessoa
            $dataTable[$key][$coluna] = $personFile;
            $coluna++;
            
            // Nome da pessoa
            $dataTable[$key][$coluna] = $residente->name;
            $coluna++;

            //Status na oferta de unidade temática
            $dataTable[$key][$coluna] = $divStatusResidente;
            $coluna++;

            $args['residenteId'] = $residente->residenteId;
            $args['ofertaDeUnidadeTematicaId'] = $ofertaDeUnidadeTematicaId;
            $args['return_to'] = 'services';
            $href = SAGU::getActionURL($module, 'main:resmedicaAvaliarIndicadoresDoResidente', $args);
            $link = new MLink('avaliarIndicadores', _M(' Avaliar (+)'), $href);
            $dataTable[$key][$coluna] = $link;

            $coluna++;
        }
                
        $table = new MTableRaw(null, $dataTable, $columns);
        $fields[] = $tableEncontrosDiv = new MDiv('tableNotasDiv', $table, null, 'width=100%');
        
        $href = $this->getPreviousURL();
        
        $btns[] = new MButton('button_back', _M('<< Voltar', $module), $href);

        $fields[] = new MSeparator();
        
        $fields[] = new MDiv('divButtons', $btns, '', 'style="margin-left:41%"');
        
        parent::defineFields(array('fields' => $fields));
    }
}