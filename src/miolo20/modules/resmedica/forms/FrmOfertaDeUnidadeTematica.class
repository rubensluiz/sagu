<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 16/07/2011
 *
 */
class FrmOfertaDeUnidadeTematica extends SManagementForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('ui/controls/msubdetail.class');

        parent::__construct(new MedOfertaDeUnidadeTematica(), array('ofertaDeUnidadeTematicaId'));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function,  array(SForm::FUNCTION_UPDATE,  SForm::FUNCTION_DELETE)) )
        {
            $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
            $fields[] = new SHiddenField('ofertaDeUnidadeTematicaId', $ofertaDeUnidadeTematicaId);
            $data = new MedOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
        }

        if ( strlen($this->getRequestValue('ofertaDeUnidadeTematicaId')) > 0 )
        {
            $filters = new stdClass();
            $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
            $unidadeTematica = MedOfertaDeUnidadeTematica::searchGrid($filters);

            //Não permite edição caso a unidade temática esteja fechada
            if( strlen($unidadeTematica[0][12]) > 0 )
            {
                $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
                $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            }
        }

        //Unidade tematica
        $options = array('required' => true, 'value' => $this->getRequestValue('unidadeTematicaId', $data->unidadeTematicaId));
        $fields[] = new MedUnidadeTematicaLookup($options);
        $validators[] = new MIntegerValidator('unidadeTematicaId', _M('Rodízio', $module), 'required');


        $codigoTurma = new MedTurma($data->turmaId);

        $data->codigoTurma = $codigoTurma->codigoTurma;

        // Lookup de turma
        $optsTurma = array(
            'label' => _M('Turma', $module),
            'item' => 'Turma',
            'module' => 'resmedica',
        );
        $fields[] = $turmaId = new SLookupContainer('turmaId', $this->getRequestValue('turmaId', $codigoTurma->turmaId), $optsTurma);



        $fields[] = $acompanhamentoEncontro =  new MSelection('acompanhamentoencontro', $this->GetFormValue('acompanhamentoencontro', $data->acompanhamentoencontro), _M('Acompanhamento do encontro', $module), MedOfertaDeUnidadeTematica::listTipoAcompanhamento(), null);
        $acompanhamentoEncontro->setIsRequired(true);


        //Periodo de ocorrencia
        $fields[] = new SBeginEndPeriod(array(
            'baseGroup' => false,
            'begin' => array('dateId' => 'inicio', 'dateValue'=> $this->getRequestValue('inicio', $data->inicio), 'label' => _M('Início previsto', $module)),
            'end' => array('dateId' => 'fim', 'dateValue' => $this->getRequestValue('fim', $data->fim), 'label' => _M('Fim previsto', $module)),
            'required' => true,
        ));
        $validators[] = new MDateDMYValidator('inicio', _M('Início previsto', $module));
        $validators[] = new MDateDMYValidator('fim', _M('Fim previsto', $module));
        $validators[] = new MRequiredValidator('inicio', _M('Início previsto', $module), 'required');
        $validators[] = new MRequiredValidator('fim', _M('Fim previsto', $module), 'required');

        $campoObservacao= new MMultilineField('observacao', $data->observacao, _M('Informações adicionais', $module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_COLS'));
        $mensagem = 'Esse campo deverá ser preenchido, preferencialmente, caso a oferta de rodízio ocorra fora do período da turma';
        $campoObservacao->setJsHint(_M($mensagem, $module));
        $campoObservacao->setAttribute('placeholder', $mensagem);
        $fields[] = $campoObservacao;

        /*
         * MSubdetail
         */
        // Campo tema
        $options = array(
            'label' => _M("Atividade do rodízio<font style='color:#c61217' >*</font>", $module),
            'module' => $module,
            'item' => 'Tema',
            'filter' => array('temaId' => 'temaId'),
            'related' => 'temaIdDescription',
            'hint' => _M('Informe o código do tema', $module),
            'descriptionHint' => _M('Descrição do tema', $module) );
        $camposSubDetailTemas[] = new SLookupContainer('temaId', null, $options);
        $validadoresSubDetailTemas[] = new MIntegerValidator('temaId', _M('Tema', $module), 'required');
        $colunasSubDetailTemas[] = new sSubDetailColumn('temaId', array( 'label' => _M('Código', $module) ));
        $colunasSubDetailTemas[] = new sSubDetailColumn('temaIdDescription', array( 'label' => _M('Descrição', $module) ));

        // Campo carga horária
        $campoCargaHoraria = new MTextField('cargaHorariaSubDetail', null, _M('Carga horária', $module), SAGU::getParameter('basic', 'FIELD_ID_SIZE'), _M('horas', $module));
        $campoCargaHoraria->setJsHint(_M('Informe a carga horária (em horas). Ex.: 40', $module));
        $camposSubDetailTemas[] = $campoCargaHoraria;
        $validadoresSubDetailTemas[] = new mFloatValidator('cargaHorariaSubDetail', _M('Carga horária', $module), '.', null, 'required');
        $colunasSubDetailTemas[] = new sSubDetailColumn('cargaHorariaSubDetail', array( 'label' => _M('Carga horária', $module) ));

        $subDetailTemas = new MSubDetail('_temas', _M('Atividades do rodízio', $module), $colunasSubDetailTemas, $camposSubDetailTemas);
        $validadoresSubDetailTemas[] = new MSubDetailUniqueValidator('temaId', _M('Tema', $module));
        $subDetailTemas->setValidators($validadoresSubDetailTemas);

        // Popula a subDetail

        if ( !$this->estaEmUmEvento() )
        {
            MSubDetail::clearData('_temas');
            if ( count((array)$data->temas) > 0 )
            {
                $dadosDaSubDetail = SAGU::convertSTypeToSubDetail((array)$colunasSubDetailTemas, (array)$data->temas);
                $subDetailTemas->setData($dadosDaSubDetail);
            }
        }
        $fields[] = $subDetailTemas;


        /**
         * Preceptor
         */
        $opts = array(
            'label' => _M('Preceptor', $module),
            'module' => $module,
            'item' => 'Preceptor',
            'filter' => array('preceptorId' => 'preceptorId'),
            'related' => 'preceptorIdDescription',
        );
        $camposSubDetailPreceptor[] = new SLookupContainer('preceptorId', null, $opts);
        $colunasSubDetailPreceptor[] = new sSubDetailColumn('preceptorId', array( 'label' => _M('Código', $module) ));
        $colunasSubDetailPreceptor[] = new sSubDetailColumn('preceptorIdDescription', array( 'label' => _M('Preceptor', $module) ));

        $subDetailPreceptor = new MSubDetail('_preceptores', _M('Preceptores', $module), $colunasSubDetailPreceptor, $camposSubDetailPreceptor);

        $validadoresSubDetailPreceptor[] = new MSubDetailUniqueValidator('preceptorId', _M('Preceptor', $module));
        $subDetailPreceptor->setValidators($validadoresSubDetailPreceptor);

        // Popula a subDetail
        if ( !$this->estaEmUmEvento() )
        {
            MSubDetail::clearData('_preceptores');
            if ( count((array)$data->preceptores) > 0 )
            {
                $dadosDaSubDetail = SAGU::convertSTypeToSubDetail((array)$colunasSubDetailPreceptor, (array)$data->preceptores);
                $subDetailPreceptor->setData($dadosDaSubDetail);
            }
        }
        $fields[] = $subDetailPreceptor;




        $opts = array(
            'label' => _M('Instituição executora', $module),
            'module' => $module,
            'item' => 'InstituicaoExecutora',
            'filter' => array('instituicaoExecutoraId' => 'instituicaoExecutoraId'),
            'related' => 'instituicaoExecutoraIdDescription',
        );
        $camposSubDetailInstituicaoExecutora[] = new SLookupContainer('instituicaoExecutoraId', null, $opts);
        $colunasSubDetailInstituicaoExecutora[] = new sSubDetailColumn('instituicaoExecutoraId', array( 'label' => _M('Código', $module) ));
        $colunasSubDetailInstituicaoExecutora[] = new sSubDetailColumn('instituicaoExecutoraIdDescription', array( 'label' => _M('Insituição executora', $module) ));

        $subDetailInstituicaoExecutora = new MSubDetail('_instituicoesExecutoras', _M('Instituições executoras', $module), $colunasSubDetailInstituicaoExecutora, $camposSubDetailInstituicaoExecutora);

        $validadoresSubDetailPreceptor[] = new MSubDetailUniqueValidator('preceptorId', _M('Preceptor', $module));
        $subDetailPreceptor->setValidators($validadoresSubDetailPreceptor);

        // Popula a subDetail
        if ( !$this->estaEmUmEvento() )
        {
            MSubDetail::clearData('_instituicoesExecutoras');
            if ( count((array)$data->instituicoesExecutoras) > 0 )
            {
                $dadosDaSubDetail = SAGU::convertSTypeToSubDetail((array)$colunasSubDetailInstituicaoExecutora, (array)$data->instituicoesExecutoras);
                $subDetailInstituicaoExecutora->setData($dadosDaSubDetail);
            }
        }
        $fields[] = $subDetailInstituicaoExecutora;

        parent::defineFields($fields, $validators, $data);
    }


    public function  tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();

        try
        {
            SDatabase::beginTransaction();

            $object = $this->getTypeObjectPopulated();

            //
            foreach ( (array) $object->getObjectVars() as $key => $val )
            {
                if ( $key != 'temas' || $key != 'preceptores')
                {
                    $object->$key = $data->$key;
                }
            }

            if ( SAGU::compareTimestamp($object->inicio, '>', $object->fim) )
            {
                throw new Exception( _M('A data de início não pode ser maior que a data de fim', $module) );
            }

            // Temas
            foreach ( (array)$object->temas as $tema )
            {
                $ok = $tema->delete();
                if ( !$ok )
                {
                    $msg = _M('Erro ao excluir as atividades do rodízio', $module);
                    throw new Exception($msg);
                }
            }

            // Preceptores
            foreach ( (array)$object->preceptores as $preceptor )
            {
                $ok = $preceptor->delete();
                if ( !$ok )
                {
                    $msg = _M('Erro ao excluir os preceptores do rodízio', $module);
                    throw new Exception($msg);
                }
            }

            foreach ( (array)$object->instituicoesExecutoras as $instituicaoExecutora )
            {
                $ok = $instituicaoExecutora->delete();
                if ( !$ok )
                {
                    $msg = _M('Erro ao excluir as instituições executoras do rodízio', $module);
                    throw new Exception($msg);
                }
            }

            $temas = array();
            foreach ( (array)MSubDetail::getData('_temas') as $row )
            {
                if ( !$row->removeData )
                {
                    $tema = new MedTemaDaUnidadeTematica();
                    $tema->temaId = $row->temaId;
                    $tema->cargaHoraria = $row->cargaHorariaSubDetail;
                    $temas[] = $tema;
                }
            }
            $object->temas = $temas;

            $preceptores = array();
            foreach ( (array)MSubDetail::getData('_preceptores') as $row )
            {
                if ( !$row->removeData )
                {
                    $preceptor = new MedOfertaDeUnidadeTematicaPreceptor();
                    $preceptor->preceptorId = $row->preceptorId;
                    $preceptores[] = $preceptor;
                }
            }
            $object->preceptores = $preceptores;

            $instituicoesExecutoras = array();
            foreach ( (array)MSubDetail::getData('_instituicoesExecutoras') as $row )
            {
                if ( !$row->removeData )
                {
                    $instituicaoExecutora = new MedOfertaDeUnidadeTematicaInstituicaoExecutora();
                    $instituicaoExecutora->instituicaoExecutoraId = $row->instituicaoExecutoraId;
                    $instituicoesExecutoras[] = $instituicaoExecutora;
                }
            }
            $object->instituicoesExecutoras = $instituicoesExecutoras;


            // Verifica se carga horaria entrada na subdetail nao ultrapassa a carga horaria da unidade tematica
            $unidadeTematica = new MedUnidadeTematica($data->unidadeTematicaId);
            $sumCargaHoraria = 0;
            foreach ( (array) $object->temas as $tema )
            {
                $sumCargaHoraria += $tema->cargaHoraria;
            }
            if ( $sumCargaHoraria > $unidadeTematica->cargaHoraria )
            {
                throw new Exception( _M('O total de carga horária dos temas (@1 horas) está excedendo a carga horária permitida pela oferta de rodízio @2 (@3 horas)', $module, $sumCargaHoraria, $unidadeTematica->descricao, $unidadeTematica->cargaHoraria) );
            }

            $ok = $object->save();

            SDatabase::commit();

            $this->confirmInsertUpdate( $ok );
        }
        catch ( Exception $e )
        {
            $this->AddError( $e->getMessage() );
        }
    }
}
?>