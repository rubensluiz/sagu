<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário para impressão da declaração de participação em banca
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Luís Felpe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 06/04/2011
 **/

class FrmDeclaracaoDeParticipacaoEmBanca extends SForm
{
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Declaração de participação em banca', $module), null, null);

        //Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        //Membro da banca
        $person = new MLookupContainer('personId', 'personName', '', _M('Membro da banca',$module), 'personName', 'basic', 'PhysicalPerson', null, true, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), !$this->page->isPostBack(), true);
        $person->setLookupJsHint(_M('Informe o código do membro da banca', $module));
        $person->setDescriptionJsHint(_M('Membro da banca', $module));
        $fields[] = $person;
        $validators[] = new MRequiredValidator('personId', _M('Membro da banca', $module));

        //Núcleo
        $fields[] = $reportFormat = new MSelection('nucleoProfissionalId', null, _M('Núcleo'), MedNucleoProfissional::listRecords());
        $validators[] = new MRequiredValidator('nucleoProfissionalId', _M('Núcleo'));
        
        //Ênfase
        $fields[] = $reportFormat = new MSelection('endaseId', null, _M('Ênfase'), MedEnfase::listRecords());
        $validators[] = new MRequiredValidator('endaseId', _M('Ênfase'));
                
        //Turma
        $resTurma = new MedTurma();
        $sql = new MSQL('codigoturma, medturma.descricao as turma', null, null, 'medturma.descricao');
        $turma = new MComboBox('turma', null, _M("Turma", $module), $resTurma->findList($sql));
        $turma->setJsHint(_M('Informe o código da turma', $module));
        $fields[] = $turma;
        $validators[] = new MRequiredValidator('turma', _M('Turma', $module));
 
        //Realização
        $realizacaoLabel = new MText('realizacaoLabel', _M('Realização',$module) . ':');
        $realizacaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $realizacao = new MTextField('realizacao', null, _M('Realização', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));        
        $realizacao->setJsHint(_M('Ex: 08, 09, 10 e 11 de dezembro', $module));
        $fields[] = $realizacao;
        $validators[] = new MRequiredValidator('realizacao', _M('Realização', $module));

        //Formato
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat', _M('Formato do relatório', $module));

        // Current date
        $fields[] = new MHiddenField('dateNow', SAGU::getDateByExtense(SAGU::getDateNow()));

        //Separator
        $fields[] = new MSeparator('');

        $this->setValidators($validators);
        $this->setFields($fields);
        
        parent::defineFields();
    }

    /**
     * Método para geração do Relatório
     *
     */
    public function generateReport($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();
        $options['module'] = $module;
        $options['reportName'] = 'declaracaoDeParticipacaoEmBanca';

        if ( strlen($data->personId)>0 )
        {
            $options['parameters']['personid'] = $data->personId;
        }
        if ( strlen($data->personName)>0 )
        {
            $options['parameters']['personname'] = $data->personName;
        }
        if ( strlen($data->nucleoProfissionalId)>0 )
        {
            $nucleoList = MedNucleoProfissional::listRecords();            
            $options['parameters']['nucleoprofissional'] = $nucleoList[$data->nucleoProfissionalId];
        }
        if ( strlen($data->endaseId)>0 )
        {
            $enfaseList = MedEnfase::listRecords();
            $options['parameters']['enfase'] = $enfaseList[$data->endaseId];
        }
        if ( strlen($data->dateNow)>0 )
        {
            $options['parameters']['dateNow'] = $data->dateNow;
        }
        if ( strlen($data->turma)>0 )
        {
            $options['parameters']['turma'] = $data->turma;
        }
        if ( strlen($data->realizacao)>0 )
        {
            $options['parameters']['realizacao'] = $data->realizacao;
        }
        if ( strlen($data->reportFormat)>0 )
        {
            $options['fileType'] = $data->reportFormat;
        }

        $sreport = new SReport($options);

        if ( !$sreport->generate() )
        {
            $this->addError(_M('Nenhum registro encontrado.', $module ));
        }
    }

    /**
     * Método que obtem os dados do formulário.
     *
     */
    public function getTypesData() 
    {
        $data = new stdClass();
        $data->personId = $this->GetFormValue('personId');
        $data->personName = $this->GetFormValue('personName');
        $data->nucleoProfissionalId = $this->GetFormValue('nucleoProfissionalId');
        $data->endaseId = $this->GetFormValue('endaseId');
        $data->dateNow = $this->GetFormValue('dateNow');
        $data->turma = $this->GetFormValue('turma');
        $data->realizacao = $this->GetFormValue('realizacao');
        $data->reportFormat = $this->GetFormValue('reportFormat');

        return $data;
    }
}
?>
