<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 15/07/2011
 *
 */
class FrmPreceptoria extends SManagementForm
{
    public function __construct()
    {
        parent::__construct(new MedPreceptoria(), array('preceptorId'));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function,  array(SForm::FUNCTION_UPDATE,  SForm::FUNCTION_DELETE)) )
        {
            $preceptorId = MIOLO::_REQUEST('preceptorId');
            $data = new $this->object($preceptorId);
            $fields[] = new MTextLabel('preceptorId', $preceptorId, _M('Código', $module));
            $fields[] = new SHiddenField('preceptorId', $preceptorId);
        }

        // Pessoa
        $fields[] = $personId = new SLookupContainer('personId', $this->getRequestValue('personId', $data->personId), array(
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'label' => _M('Pessoa', $module),
            'required' => true,
        ));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $personId->setReadOnly(true);
        }

        // Inicio
        $fields[] = $inicio = new MCalendarField('inicio', $this->getRequestValue('inicio', $data->inicio), _M('Início', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[] = new MDateDMYValidator('inicio', _M('Início', $module), 'required');

        // Fim
        $fields[] = $fim = new MCalendarField('fim', $this->getRequestValue('fim', $data->fim), _M('Fim', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[] = new MDateDMYValidator('fim', _M('Fim', $module));

        // Responsavel
        $showResponsavel = $this->getRequestValue('responsavel', $data->responsavel) == DB_TRUE;
        $fields[] = new MCheckBox('responsavel', DB_TRUE, _M('Responsável por núcleo/ênfase'), $showResponsavel, NULL, _M('No portal do preceptor, permite lançamento de notas.', $module));
        
        // Referencia enfase
        $showReferencia = $this->getRequestValue('referencia', $data->referencia) == DB_TRUE;
        $fields[] = new MCheckBox('referencia', DB_TRUE, _M('Referência da especialidade'), $showReferencia, NULL, _M('Exibe no portal do preceptor todas as ofertas de rodízio da especialidade selecionada (somente visualização).'));

        //Nucleo profissional
        $en[] = $nucleoProfissional = new MSelection('nucleoProfissionalId', $this->getRequestValue('nucleoProfissionalId', $data->nucleoProfissionalId), _M('Núcleo profissional'), MedNucleoProfissional::listRecords());
        $nucleoProfissional->setJsHint(_M('Informe o núcleo profissional'));

        //Enfase
        $en[] = $enfase = new MSelection('enfaseId', $this->getRequestValue('enfaseId', $data->enfaseId), _M('Ênfase'), MedEnfase::listRecords());
        $enfase->setJsHint(_M('Informe a ênfase'));

        //
        $fields[] = $vct = new MVContainer('nucleoEnfase', $en);
        $vct->setFormMode(MControl::FORM_MODE_SHOW_SIDE);

        // Titulacao
        $fields[] = new sMultiLineField('titulacao', array(
            'label' => _M('Titulação', $module),
            'value' => $this->getRequestValue('titulacao', $data->titulacao),
        ));
        
        //
        $fields[] = new MTextField('chSemanal', $this->getRequestValue('chSemanal', $data->chSemanal), _M('Carga horária semanal', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), 'h');
        $validators[] = new MFloatValidator('chSemanal', _M('Carga horária semanal', $module));
        
        //
        $fields[] = new MTextField('chMensal', $this->getRequestValue('chMensal', $data->chMensal), _M('Carga horária mensal', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), 'h');
        $validators[] = new MFloatValidator('chMensal', _M('Carga horária mensal', $module));
        
        parent::defineFields($fields, $validators, $data);
    }

    /*
     * Limpa os argumentos da pesquisa
     */
    public function getSearchParams()
    {
        return array();
    }

    public function  tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        try
        {
            $responsavel = $this->getRequestValue('responsavel');

            if ( $responsavel == DB_TRUE )
            {
                if ( ( strlen( $this->getRequestValue('nucleoProfissionalId') ) <= 0 ) ||
                     ( strlen( $this->getRequestValue('enfaseId') ) <= 0 ) )
                {
                    throw new Exception( _M('O preceptor será um preceptor responsável portanto o núcleo profissional e a ênfase devem ser informados.') );
                }
            }

            parent::tbBtnSave_click($sender);
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
    }

    /*
     * Obtém os filtros do form
     */
    public function  getTypesData()
    {
        $data = parent::getTypesData();

        $responsavel = $this->getRequestValue('responsavel');
        if ( $responsavel != DB_TRUE )
        {
            $data->responsavel = DB_FALSE;
        }
        
        return $data;
    }
}
?>