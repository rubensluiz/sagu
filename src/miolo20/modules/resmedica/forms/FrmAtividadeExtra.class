<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class FrmAtividadeExtra extends SStepByStepForm
{
    public function __construct($steps)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct( null, $steps, __CLASS__, new MedAtividadeExtra(), array('atividadeExtraId'));
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            
        }
    }

    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function,  array(SForm::FUNCTION_UPDATE,  SForm::FUNCTION_DELETE)) )
        {
            $atividadeExtraId = MIOLO::_REQUEST('atividadeExtraId');
            $data = new MedAtividadeExtra($atividadeExtraId);
            $data->cargaHorariaAtividade = $data->cargaHoraria;
            list($data->beginDateMin, $data->beginTimeMin) = explode(' ', $data->inicio);
            list($data->beginDateMax, $data->beginTimeMax) = explode(' ', $data->fim);
            $fields[] = new MTextLabel('atividadeExtraId', $atividadeExtraId, _M('Código', $module));
            $fields[] = new MHiddenField('atividadeExtraId', $atividadeExtraId);
        }

        //Load data
        if( !$this->isFirstAccess() )
        {
            $data = $this->getStepDataByForm(__CLASS__);
        }

        $fields[] = $descricao = new MTextField('descricao', $this->getFormValue('descricao', $data->descricao), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descricao->addAttribute('maxlength', '255');
        $descricao->setJsHint(_M('Informe a descrição', $module));
        $fields[] = $conteudo = new MMultilineField('conteudo', $this->getFormValue('conteudo', $data->conteudo), _M('Conteúdo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $conteudo->setJsHint(_M('Informe o conteúdo', $module));

                $opts = array(
                'label' => _M('Período de ocorrência', $module),
                'baseGroup' => false,
                'disposition' => 'horizontal',
                'required' => true,
                'type' => 'timestamp',
                'begin' => array_merge( array('label' => _M('entre', $module)), array('dateId' => 'beginDateMin', 'timeId' => 'beginTimeMin', 'dateValue'=>$data->beginDateMin, 'timeValue' => $data->beginTimeMin, 'classCaption' => false) ),
                'end' => array_merge( array('label' => _M('e', $module)), array('dateId' => 'beginDateMax', 'timeId' => 'beginTimeMax', 'dateValue'=>$data->beginDateMax, 'timeValue' => $data->beginTimeMax, 'classCaption' => false) ),
        );
        $fields[] = new SBeginEndPeriod($opts);

        $validators[] = new MDATEDMYValidator('beginDateMin', _M('Data inicial @1', $module, _M('minima', $module)), 'required');
        $validators[] = new MTIMEValidator('beginTimeMin', _M('Hora inicial @1', $module, _M('minima', $module)), 'required');
        $validators[] = new MDATEDMYValidator('beginDateMax', _M('Data final @1', $module, _M('máxima', $module)), 'required');
        $validators[] = new MTIMEValidator('beginTimeMax', _M('Hora final @1', $module, _M('máxima', $module)), 'required');

        $fields[] = $cargaHorariaAtividade = new MTextField('cargaHorariaAtividade', $this->getFormValue('cargaHorariaAtividade', $data->cargaHorariaAtividade), _M('Carga horária', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('horas', $module));
        $cargaHorariaAtividade->setJsHint(_M('Informe a carga horária', $module));

        $fields[] = new MSpacer();

        $validators[] = new MRequiredValidator('descricao', _M('Descrição', $module));
        $validators[] = new mFloatValidator('cargaHorariaAtividade', _M('Carga horária', $module), '.', null, 'required');

        $this->setFields($fields);
        $this->setValidators($validators);
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->atividadeExtraId = $this->getFormValue('atividadeExtraId', MIOLO::_REQUEST('atividadeExtraId'));
        $data->descricao = $this->getFormValue('descricao', MIOLO::_REQUEST('descricao'));
        $data->conteudo = $this->getFormValue('conteudo', MIOLO::_REQUEST('conteudo'));
        $data->inicio = $this->getFormValue('beginDateMin', MIOLO::_REQUEST('beginDateMin')).' '.$this->getFormValue('beginTimeMin', MIOLO::_REQUEST('beginTimeMin'));
        $data->fim = $this->getFormValue('beginDateMax', MIOLO::_REQUEST('beginDateMax')).' '.$this->getFormValue('beginTimeMax', MIOLO::_REQUEST('beginTimeMax'));
        $data->cargaHoraria = $this->getFormValue('cargaHorariaAtividade', MIOLO::_REQUEST('cargaHorariaAtividade'));
        return $data;
    }

    //Validar o campo de data
    public function nextStepButton_click($args = null)
    {
        $data = $this->getTypesData();
        
        $beginDate = $this->getFormValue('beginDateMin', MIOLO::_REQUEST('beginDateMin'));
        $endDate = $this->getFormValue('beginDateMax', MIOLO::_REQUEST('beginDateMax'));
        
        try
        {
            if ( !SAGU::isDate($beginDate) )
            {
                throw new Exception(_M('A data de início não compõe uma data válida', $module));
            }
            
            if ( !SAGU::isDate($endDate) )
            {
                throw new Exception(_M('A data de fim não compõe uma data válida', $module));
            }
            
            if ( SAGU::compareTimestamp($data->fim, '<', $data->inicio) )
            {
                throw new Exception(_M('A data inicial não pode ser maior que a data final', $module));
            }
            
            parent::nextStepButton_click($args);
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }

    public function tbBtnDelete_confirm($sender = NULL, $opts)
    {
        $MIOLO = MIOLO::getInstance();

        // Obtém o código do registro a ser removido
        $atividadeExtraId = MIOLO::_REQUEST('atividadeExtraId');

        try
        {
            $atividadeExtra = new MedAtividadeExtra($atividadeExtraId);
            $ok = $atividadeExtra->delete();
        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }

        parent::tbBtnDelete_confirm($sender, $ok);
    }
}


?>