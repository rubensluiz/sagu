<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file manipulate the lookups for the basic module of sagu
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 28/03/2011
 */
class BusinessTrainingLookup
{
    /**
     * Auto complete for area
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteArea(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.description
                  FROM tra.area A
                 WHERE A.areaId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for Area
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupArea(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        // Área Id
        $areaId = $lookup->getFilterValue('areaId');
        // Área description
        $areaDescription = $lookup->getFilterValue('areaDescription');

        $lookup->addFilterField(new MTextField('areaId', $areaId, _M('Área', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('areaDescription', $areaDescription, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns[] = new DataGridColumn('areaId', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('areaDescription', _M('Descrição', $module), 'left', true, null, true);

        $sql = 'SELECT A.areaId,
                       A.description AS areaDescription
                  FROM tra.area A';

        if ( strlen($areaId) > 0 )
        {
            $where .= ' AND A.areaId = ?';
            $args[] = $areaId;
        }

        if ( strlen($areaDescription) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $areaDescription;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description, A.areaId';

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar Área', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

   public function autoCompleteUnit(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.description
                  FROM tra.unit A
                 WHERE A.unitId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupUnit(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $unitId = $lookup->getFilterValue('unitId');
        $unit = $lookup->getFilterValue('unit');

        $lookup->addFilterField(new MTextField('unitId', $unitId, _M('Unidade', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('unit', $unit, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns[] = new DataGridColumn('unitId', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('unit', _M('Descrição', $module), 'left', true, null, true);

        $sql = 'SELECT A.unitId,
                   A.description AS unit
              FROM tra.unit A';

        if ( strlen($unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen($unit) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $unit;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar unidade', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for course
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteCourse(&$context)
    {
        $sql = 'SELECT description
                  FROM tra.course
                 WHERE courseId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for course
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function AS actions evaluated by MIOLO
     */
    public function lookupCourse(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $courseId = $lookup->getFilterValue('courseId');
        $description = $lookup->getFilterValue('courseName');

        $lookup->addFilterField(new MTextField('courseId', $courseId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('courseName', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array();
        $columns[] = new DataGridColumn('courseId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Descrição', $module), 'left', true, null, true);

        $sql = 'SELECT courseId,
                       description
                  FROM tra.course';

        if ( strlen($courseId) > 0 )
        {
            $where .= ' AND courseId = ? ';
            $params[] = $courseId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND description ILIKE (?) ';
            $params[] = $description . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar curso', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Lookup for agreement
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function AS actions evaluated by MIOLO
     */
    public function autoCompleteAgreement(&$context)
    {
        // Autocomplete popula conveniada 'legalPerson'.
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT C.personId,
                       C.name as personName
                  FROM tra.agreement A
            INNER JOIN basLegalPerson C
                    ON (A.legalPersonId = C.personId)
                 WHERE A.agreementId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Auto complete for agreement
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupAgreement(&$lookup)
    {
        global $MIOLO;

        $module = MIOLO::_REQUEST('lmodule');
        $MIOLO->uses('classes/sagu.class', 'basic');

        $agreementId = $lookup->getFilterValue('agreementId');
        $legalPersonId = $lookup->getFilterValue('legalPersonId');
        $personName = $lookup->getFilterValue('personName');

        $lookup->addFilterField(new MTextField('agreementId', $courseId, _M('Código do convênio', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('legalPersonId', $legalPersonId, _M('Código da instituição', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome da instituição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array();
        $columns[] = new MDataGridColumn('agreementId', _M('Código', $module), 'rigth', true, NULL, true);
        $columns[] = new MDataGridColumn('legalPersonId', _M('Pessoa', $module), 'right', true, NULL, true);
        $columns[] = new MDataGridColumn('personName', _M('Nome', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('beginDate', _M('Data inicial', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('endDate', _M('Data final', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('suspensionDate', _M('Data de suspensão', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('object', _M('Objeto', $module), 'left', true, NULL, true);

        $sql = 'SELECT A.agreementId,
                       B.personId AS legalPersonId,
                       B.name AS personName,
                       A.beginDate,
                       A.endDate,
                       A.suspensionDate,
                       A.object
                  FROM tra.agreement A
            INNER JOIN basLegalPerson B
                    ON (A.legalpersonId = B.personId)';

        if ( strlen($agreementId) > 0 )
        {
            $where .=' AND A.agreementId = ?';
            $args[] = $agreementId;
        }

        if ( strlen($legalPersonId) > 0 )
        {
            $where .=' AND A.legalPersonId = ?';
            $args[] = $legalPersonId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .=' AND B.name ILIKE ?';
            $args[] = $personName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . ' ORDER BY B.name';
        }

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= 'LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar do convênio', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for training
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteTraining(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.personId,
                       B.name AS personName
                  FROM tra.request A
       INNER JOIN ONLY basPhysicalPerson B
                    ON (A.personId = B.personId)
            INNER JOIN tra.subscription C
                    ON (A.requestId = C.requestId)
                 WHERE A.personId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for training
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupTraining(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        // Subscription Id
        $personId = $lookup->getFilterValue('personId');
        $name = $lookup->getFilterValue('personName');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $name, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array(new DataGridColumn('personId', _M('Código da pessoa', $module), 'right', true, null, true),
            new DataGridColumn('personName', _M('Nome da pessoa', $module), 'left', true, null, true)
        );

        $sql = 'SELECT A.personId,
                       B.name AS personName
                  FROM tra.request A
       INNER JOIN ONLY basPhysicalPerson B
                    ON (A.personId = B.personId)
            INNER JOIN tra.subscription C
                    ON (A.requestId = C.requestId)';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($name) > 0 )
        {
            $where .= ' AND B.name ILIKE ?';
            $args[] = $name . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY B.name';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar estagiários', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for training
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteSubscription(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.personId,
                       B.name AS personName,
                       D.unitId,
                       E.description AS unitDescription,
                       A.courseId,
                       G.description AS courseDescription,
                       D.areaId,
                       F.description AS areaDescription,
                       A.requestId,
                       TO_CHAR(A.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS beginDate,
                       TO_CHAR(A.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS endDate,
                       A.trainingTypeId,
                       (select content from basdocument where personid = A.personId and documenttypeid = getparameter(\'BASIC\',\'DEFAULT_DOCUMENT_TYPE_ID_CPF\')::int limit 1) as cpf
                  FROM tra.request A
       INNER JOIN ONLY basPhysicalPerson B
                    ON (A.personId = B.personId)
            INNER JOIN tra.subscription C
                    ON (A.requestId = C.requestId)
            INNER JOIN tra.unitArea D
                    ON (A.unitareaId = D.unitAreaId)
            INNER JOIN tra.Unit E
                    ON (D.unitId = E.unitId)
            INNER JOIN tra.area F
                    ON (D.areaId = F.areaId)
            INNER JOIN tra.course G
                    ON (A.courseId = G.courseId)
                 WHERE A.personId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for training
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupSubscription(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        // Subscription Id
        $areaId = $lookup->getFilterValue('areaId');
        $unitId = $lookup->getFilterValue('unitId');
        $courseId = $lookup->getFilterValue('courseId');
        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $areaDescription = $lookup->getFilterValue('areaDescription');
        $unitDescription = $lookup->getFilterValue('unitDescription');
        $courseDescription = $lookup->getFilterValue('courseDescription');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('unitId', $unitId, _M('Código da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('unitDescription', $unitDescription, _M('Descrição da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('courseId', $courseId, _M('Código do curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('courseDescription', $courseDescription, _M('Descrição do curso', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('areaId', $areaId, _M('Código da área', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('areaDescription', $areaDescription, _M('Descrição da área', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array();
        $columns[] = new DataGridColumn('personId', _M('Código da pessoa', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome da pessoa', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('unitId', _M('Código da unidade', $module), 'right', false, null, false);
        $columns[] = new DataGridColumn('unitDescription', _M('Descrição da unidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('courseId', _M('Código do curso', $module), 'right', false, null, false);
        $columns[] = new DataGridColumn('courseDescription', _M('Descrição do curso', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('areaId', _M('Código da área', $module), 'right', false, null, false);
        $columns[] = new DataGridColumn('areaDescription', _M('Descrição da área', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('beginDate', _M('Data inicial', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('endDate', _M('Data final', $module), 'left', true, null, true);

        $sql = 'SELECT A.personId,
                       B.name AS personName,
                       D.unitId,
                       E.description AS unitDescription,
                       A.courseId,
                       G.description AS courseDescription,
                       D.areaId,
                       F.description AS areaDescription,
                       A.requestId,
                       TO_CHAR(A.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS beginDate,
                       TO_CHAR(A.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS endDate,
                       A.trainingTypeId,
                       (select content from basdocument where personid = A.personId and documenttypeid = getparameter(\'BASIC\',\'DEFAULT_DOCUMENT_TYPE_ID_CPF\')::int limit 1) as cpf
                  FROM tra.requestCurrentData A
       INNER JOIN ONLY basPhysicalPerson B
                    ON (A.personId = B.personId)
            INNER JOIN tra.subscription C
                    ON (A.requestId = C.requestId)
            INNER JOIN tra.unitArea D
                    ON (A.unitareaId = D.unitAreaId)
            INNER JOIN tra.Unit E
                    ON (D.unitId = E.unitId)
            INNER JOIN tra.area F
                    ON (D.areaId = F.areaId)
            INNER JOIN tra.course G
                    ON (A.courseId = G.courseId)';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = (?)';
            $args[] = $personId;
        }
        
        if ( strlen($personName) > 0 )
        {
            $where .= ' AND B.name ILIKE (?)';
            $args[] = $personName . '%';
        }

        if ( strlen($unitId) > 0 )
        {
            $where .= ' AND D.unitId = ?';
            $args[] = $unitId;
        }
        
        if ( strlen($unitDescription) > 0 )
        {
            $where .= ' AND E.description ILIKE (?)';
            $args[] = $unitDescription . '%';
        }

        if ( strlen($courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $courseId;
        }
        
        if ( strlen($courseDescription) > 0 )
        {
            $where .= ' AND G.description ILIKE (?)';
            $args[] = $courseDescription . '%';
        }

        if ( strlen($areaId) > 0 )
        {
            $where .= ' AND D.areaId = ?';
            $args[] = $areaId;
        }
        
        if ( strlen($areaDescription) > 0 )
        {
            $where .= ' AND F.description ILIKE (?)';
            $args[] = $areaDescription . '%';
        }

        if ( strlen($teamId) > 0 )
        {
            $where .= ' AND H.teamId = ?';
            $args[] = $teamId;
        }
        
        if ( strlen($teamDescription) > 0 )
        {
            $where .= ' AND I.description ILIKE (?)';
            $args[] = $teamDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY B.name ';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar estagiários', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for preceptor
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePreceptor(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT DISTINCT A.preceptorId,
                                B.name AS personName
                           FROM tra.team A
                INNER JOIN ONLY basPhysicalPerson B
                             ON (A.preceptorId = B.personId)
                          WHERE A.preceptorId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for training
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupPreceptor(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        // Subscription Id
        $personId = $lookup->getFilterValue('preceptorId');
        $name = $lookup->getFilterValue('personName');

        $lookup->addFilterField(new MTextField('preceptorId', $personId, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $name, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array(new DataGridColumn('preceptorId', _M('Código da pessoa', $module), 'right', true, null, true),
            new DataGridColumn('personName', _M('Nome da pessoa', $module), 'left', true, null, true)
        );

        $sql = 'SELECT DISTINCT A.personId,
                                A.name AS personName
                      FROM ONLY basPhysicalPerson A
                          WHERE ( A.personId IN (SELECT preceptorId FROM tra.team)
                             OR A.personId IN (SELECT preceptorId FROM tra.unitArea) )';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.preceptorId = ?';
            $args[] = $personId;
        }

        if ( strlen($name) > 0 )
        {
            $where .= ' AND A.name ILIKE ?';
            $args[] = $name . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' AND ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar preceptor', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for team
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteTeam(&$context)
    {
        $sql = 'SELECT teamId,
                       description
                  FROM tra.team
                 WHERE teamId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for team
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function AS actions evaluated by MIOLO
     */
    public function lookupTeam(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $teamId = $lookup->getFilterValue('teamId');
        $teamDescription = $lookup->getFilterValue('teamDescription');
        $preceptorId = $lookup->getFilterValue('preceptorId');
        $preceptorName = $lookup->getFilterValue('preceptorName');
        $vacancies = $lookup->getFilterValue('vacancies');

        $lookup->addFilterField(new MTextField('teamId', $teamId, _M('Código da equipe', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('teamDescription', $teamDescription, _M('Descrição da equipe', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('preceptorId', $preceptorId, _M('Código do preceptor', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('preceptorName', $preceptorName, _M('Nome do preceptor', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('vacancies', $vacancy, _M('vagas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));

        $columns = array();
        $columns[] = new DataGridColumn('teamId', _M('Código da equipe', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('teamDescription', _M('Descrição da equipe', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('preceptorId', _M('Código do preceptor', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('preceptorName', _M('Nome do preceptor', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('beginDate', _M('Data inicial', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('endDate', _M('Data final', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('vacancies', _M('Vagas', $module), 'right', true, null, true);

        $sql = 'SELECT A.teamId,
                       A.description AS teamDescription,
                       A.preceptorId,
                       B.name AS preceptorName,
                       A.beginDate,
                       A.endDate,
                       A.vacancies
                  FROM tra.team A
       INNER JOIN ONLY basPhysicalPerson B
                    ON (A.preceptorId = B.personId)';

        if ( strlen($teamId) > 0 )
        {
            $where .= ' AND A.teamId = ? ';
            $params[] = $teamId;
        }

        if ( strlen($teamDescription) > 0 )
        {
            $where .= ' AND A.description ILIKE (?) ';
            $params[] = $teamDescription . '%';
        }
        if ( strlen($preceptorId) > 0 )
        {
            $where .= ' AND A.preceptorId = ? ';
            $params[] = $preceptorId;
        }
        if ( strlen($preceptorName) > 0 )
        {
            $where .= ' AND B.name ILIKE (?) ';
            $params[] = $preceptorName . '%';
        }
        if ( strlen($vacancies) > 0 )
        {
            $where .= ' AND A.vacancies = ? ';
            $params[] = $vacancies;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' order by A.description, B.name';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar equipes', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteSubscriptionTeam(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT     D.name,
                       A.subscriptionteamid,
                       A.teamid,
                       A.subscriptionid,
                       TO_CHAR(A.begindate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.enddate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.degree,
                       A.approved,
                       A.trainingended,
                       A.frequency,
                       A.evaluationcomments
                  FROM tra.subscriptionteam A
            INNER JOIN tra.subscription B
                    ON (A.subscriptionId = B.subscriptionId)
            INNER JOIN tra.request C
                    ON (C.requestId = B.requestId)
       INNER JOIN ONLY basPhysicalPerson D
                    ON (D.personId = C.personId)
                 WHERE A.subscriptionteamid = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupSubscriptionTeam(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');
        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.beginDate.focus()");

        $personName = $lookup->getFilterValue('personName');
        $beginDate = $lookup->getFilterValue('beginDate');
        $endDate = $lookup->getFilterValue('endDate');

        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MCalendarField('beginDate', $beginDate, _M('Data inicial', $module), 10));
        $lookup->addFilterField(new MCalendarField('endDate', $endDate, _M('Data final', $module), 10));

        $columns[] = new MDataGridColumn('subscriptionTeamId', _M('Código', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('name', _M('Nome', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('teamId', _M('Turma', $module), 'left', true, NULL, false);
        $columns[] = new MDataGridColumn('subscriptionId', _M('Inscrição', $module), 'left', true, NULL, false);
        $columns[] = new MDataGridColumn('beginDate', _M('Data inicial', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('endDate', _M('Data final', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('degree', _M('Grau', $module), 'left', true, NULL, false);
        $columns[] = new MDataGridColumn('approved', _M('Aprovado', $module), 'left', true, NULL, true, SAGU::listYesNo(0));
        $columns[] = new MDataGridColumn('trainingEnded', _M('Estágio concluído', $module), 'left', true, NULL, true, SAGU::listYesNo(0));
        $columns[] = new MDataGridColumn('frequency', _M('Frequência', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('evaluationComments', _M('Comentários da avaliação', $module), 'left', true, NULL, false);

        $sql = 'SELECT A.subscriptionteamid,
                       D.name,
                       A.teamid,
                       A.subscriptionid,
                       TO_CHAR(A.begindate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.enddate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.degree,
                       A.approved,
                       A.trainingended,
                       A.frequency,
                       A.evaluationcomments
                  FROM tra.subscriptionteam A
            INNER JOIN tra.subscription B
                    ON (A.subscriptionId = B.subscriptionId)
            INNER JOIN tra.request C
                    ON (C.requestId = B.requestId)
       INNER JOIN ONLY basPhysicalPerson D
                    ON (D.personId = C.personId)';


        if ( strlen($filters->subscriptionTeamId) > 0 )
        {
            $where.=' AND A.subscriptionteamid = ?';
            $args[] = $filters->subscriptionTeamId;
        }

        if ( strlen($filters->teamId) > 0 )
        {
            $where.=' AND A.teamid = ?';
            $args[] = $filters->teamId;
        }

        if ( strlen($filters->subscriptionId) > 0 )
        {
            $where.=' AND A.subscriptionid = ?';
            $args[] = $filters->subscriptionId;
        }

        if ( strlen($beginDate) > 0 )
        {
            $where.=' AND A.begindate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $beginDate;
        }

        if ( strlen($endDate) > 0 )
        {
            $where.=' AND A.enddate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $endDate;
        }

        if ( strlen($filters->degree) > 0 )
        {
            $where.=' AND A.degree = ?';
            $args[] = $filters->degree;
        }

        if ( strlen($filters->approved) > 0 )
        {
            $where.=' AND A.approved = ?';
            $args[] = $filters->approved;
        }

        if ( strlen($filters->trainingEnded) > 0 )
        {
            $where.=' AND A.trainingended = ?';
            $args[] = $filters->trainingEnded;
        }

        if ( strlen($filters->frequency) > 0 )
        {
            $where.=' AND A.frequency = ?';
            $args[] = $filters->frequency;
        }

        if ( strlen($filters->evaluationComments) > 0 )
        {
            $where.=' AND UNACCENT(A.evaluationcomments) ILIKE UNACCENT(?) ';
            $args[] = $filters->evaluationComments . '%';
        }

        if ( strlen($personName) > 0 )
        {
            $where.=' AND UNACCENT(D.name) ILIKE UNACCENT(?) ';
            $args[] = $personName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql.=$where;
        }

        $sql.=' ORDER BY A.subscriptionteamid';

        if ( strlen($where) == 0 )
        {
            $sql.=' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteEvaluationGroup(&$context)
    {
        $sql = 'SELECT evaluationGroupId,
                   description
              FROM tra.evaluationGroup
             WHERE evaluationGroupId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupEvaluationGroup(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $evaluationGroupId = $lookup->getFilterValue('evaluationGroupId');
        $description = $lookup->getFilterValue('description');
        $groupOrder = $lookup->getFilterValue('groupOrder');

        $lookup->addFilterField(new MTextField('evaluationGroupId', $evaluationGroupId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('description', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('groupOrder', $groupOrder, _M('Ordem', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array();
        $columns[] = new DataGridColumn('evaluationGroupId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Descrição', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('groupOrder', _M('Ordem', $module), 'left', true, null, true);

        $sql = 'SELECT      A.evaluationGroupId,
                        A.description,
                        A.groupOrder
                   FROM tra.evaluationGroup A';

        if ( strlen($evaluationGroupId) > 0 )
        {
            $where .= ' AND A.evaluationGroupId = ? ';
            $params[] = $evaluationGroupId;
        }
        if ( strlen($description) > 0 )
        {
            $where .= ' AND A.description ILIKE (?) ';
            $params[] = $description . '%';
        }
        if ( strlen($groupOrder) > 0 )
        {
            $where .= ' AND A.groupOrder = ? ';
            $params[] = $groupOrder;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' ORDER BY A.description';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteRequest(&$context)
    {
        $sql = 'SELECT A.requestId,
                       A.personId,
                       B.name as personName,
                       C.unitId as unitId,
                       D.description as unitDescription,
                       A.courseId,
                       F.description as courseName,
                       C.areaid as areaId,
                       E.description as areaDescription,
                       TO_CHAR(A.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.trainingTypeid
                  FROM tra.requestCurrentData A
       INNER JOIN ONLY basPhysicalPerson B
                    ON (A.personId = B.personId)
             LEFT JOIN tra.unitArea C
                    ON (A.unitareaid = C.unitareaid)
             LEFT JOIN tra.unit D
                    ON (C.unitId=D.unitId)
             LEFT JOIN tra.area E
                    ON (C.areaid=E.areaid)
             LEFT JOIN tra.course F
                    ON (A.courseid=F.courseid)
                 WHERE A.requestId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupRequest(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $requestId = $lookup->getFilterValue('requestId');
        $personId = $lookup->getFilterValue('personId');
        $name = $lookup->getFilterValue('personName');
        $unitId = $lookup->getFilterValue('unitId');
        $areaId = $lookup->getFilterValue('areaId');
        $beginDate = $lookup->getFilterValue('beginDate');
        $endDate = $lookup->getFilterValue('endDate');

        $lookup->addFilterField(new MTextField('requestId', $requestId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $name, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('unitId', $unitId, _M('Código da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('areaId', $areaId, _M('Área', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MCalendarField('beginDate', $beginDate, _M('Data inicial', $module), 10));
        $lookup->addFilterField(new MCalendarField('endDate', $endDate, _M('Data final', $module), 10));

        $columns = array();
        $columns[] = new DataGridColumn('requestId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personId', _M('Código da pessoa', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('unitId', _M('Código da Unidade', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('unitDescription', _M('Unidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('courseId', _M('Código do curso', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('courseName', _M('Curso', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('areaId', _M('Código da área', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('areaDescription', _M('Área', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('beginDate', _M('Data inicial', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('endDate', _M('Data final', $module), 'left', true, null, true);

        $sql = 'SELECT A.requestId,
                       A.personId,
                       B.name as personName,
                       C.unitId as unitId,
                       D.description as unitDescription,
                       A.courseId,
                       F.description as courseName,
                       C.areaid as areaId,
                       E.description as areaDescription,
                       TO_CHAR(A.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.trainingTypeid
                  FROM tra.requestCurrentData A
       INNER JOIN ONLY basPhysicalPerson B
                    ON (A.personId = B.personId)
             LEFT JOIN tra.unitArea C
                    ON (A.unitareaid = C.unitareaid)
             LEFT JOIN tra.unit D
                    ON (C.unitId=D.unitId)
             LEFT JOIN tra.area E
                    ON (C.areaid=E.areaid)
             LEFT JOIN tra.course F
                    ON (A.courseid=F.courseid)';

        if ( strlen($requestId) > 0 )
        {
            $where .= ' AND A.requestId = ? ';
            $params[] = $requestId;
        }
        if ( strlen($name) > 0 )
        {
            $where .= ' AND B.name ILIKE (?) ';
            $params[] = $name . '%';
        }
        if ( strlen($unitId) > 0 )
        {
            $where .= ' AND C.unitId= ? ';
            $params[] = $unitId;
        }
        if ( strlen($areaId) > 0 )
        {
            $where .= ' AND C.areaId= ? ';
            $params[] = $areaId;
        }
        if ( strlen($beginDate) > 0 )
        {
            $where.=' AND A.begindate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $beginDate;
        }

        if ( strlen($endDate) > 0 )
        {
            $where.=' AND A.enddate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $endDate;
        }


        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' ORDER BY B.name';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
}
?>