<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 2011/04/01
 *
 */
class TraDeliveredDocumentFile extends SType
{
    
    protected $deliveredDocumentFileId;
    /**
     * @AttributeType integer
     *
     */
    protected $deliveredDocumentId;
    /**
     * @AttributeType integer
     *
     */
    protected $fileId;

    /**
     * Construtor da classe
     *
     * @param (integer) $deliveredDocumentFileId Chave primária da tabela
     */
    public function __construct($deliveredDocumentFileId = null)
    {
        if ( !is_null($deliveredDocumentFileId) )
        {
            $this->deliveredDocumentFileId = $deliveredDocumentFileId;
            $this->populate();
        }
    }
    
    public function search($filters)
    {
        $sql = 'SELECT delivereddocumentfileid,
                       delivereddocumentid,
                       fileid
                  FROM tra.delivereddocumentfile';
        $where = '';

        foreach ($filters as $key=>$value)
        {
            if ((is_scalar($value)) && (strlen($value) > 0))
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY delivereddocumentfileid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new TraDeliveredDocumentFile($result[$i][0]);
        }

        return $retVal;
    }

    public function searchGrid($filters = null)
    {
        $sql = "SELECT delivereddocumentfileid,
                       delivereddocumentid,
                       fileid
                  FROM tra.delivereddocumentfile";

        $args = array();

        if (strlen($filters->deliveredDocumentFileId) > 0)
        {
            $where.=' AND delivereddocumentfileid = ?';
            $args[] = $filters->deliveredDocumentFileId;
        }

        if (strlen($filters->deliveredDocumentId) > 0)
        {
            $where.=' AND delivereddocumentid = ?';
            $args[] = $filters->deliveredDocumentId;
        }

        if (strlen($filters->fileId) > 0)
        {
            $where.=' AND fileid = ?';
            $args[] = $filters->fileId;
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY delivereddocumentfileid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT delivereddocumentfileid,
                       delivereddocumentid,
                       fileid,
                       username,
                       TO_CHAR(datetime, '". SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       ipaddress
                  FROM tra.delivereddocumentfile
                 WHERE delivereddocumentfileid = ?";

        $result = SDatabase::query($sql, array($this->deliveredDocumentFileId));

        if (!strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->deliveredDocumentFileId,
             $this->deliveredDocumentId,
             $this->fileId,
             $this->userName,
             $this->dateTime,
             $this->ipAddress,) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if (strlen($this->deliveredDocumentFileId) == 0)
        {
            $retVal = $this->insert();
        } else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO tra.delivereddocumentfile
                            (delivereddocumentfileid,
                             delivereddocumentid,
                             fileid)
                      VALUES (?, ?, ?)';

        $sql2 = "SELECT nextval('tra.delivereddocumentfile_delivereddocumentfileid_seq'::regclass)";

        $result = SDatabase::query($sql2);
        $deliveredDocumentFileId = $result[0][0];

        $args = array($deliveredDocumentFileId,
                      $this->deliveredDocumentId,
                      $this->fileId);

        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->deliveredDocumentFileId = $deliveredDocumentFileId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.delivereddocumentfile
                   SET delivereddocumentid = ?,
                       fileid = ?
                 WHERE delivereddocumentfileid = ?';

        $args = array( $this->deliveredDocumentId,
                       $this->fileId,
                       $this->deliveredDocumentFileId );

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        $MIOLO = MIOLO::getInstance();

        if (strlen($this->deliveredDocumentFileId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM tra.delivereddocumentfile
                      WHERE delivereddocumentfileid = ?';

        $args = array($this->deliveredDocumentFileId);

        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->deliveredDocumentFileId = null;
        }

        //Deleta o registro da basFile e remove o arquivo do local
        if ( strlen($this->fileId)>0 )
        {
            $businessFile = new BusinessBasicBusFile();
            $businessFile->deleteFile($this->fileId);
        }
        
        return $result;
    }
}
?>