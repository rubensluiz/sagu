<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2011
 */
class TraAddendumCourseArea extends SType
{
    protected $addendumCourseAreaId;

    protected $vacancies;

    protected $areaId;

    protected $areaIdDescription;

    protected $addendumCourseId;

    
    public function __construct($addendumCourseAreaId = null)
    {
        if ( strlen($addendumCourseAreaId)  >  0 )
        {
            $this->addendumCourseAreaId = $addendumCourseAreaId;
            $this->populate();
        }
    }


    public function  __get($name)
    {
        if ( ( $name == 'areaIdDescription' ) && ( strlen($this->areaId) >= 0 ) && $this->needCheckPopulate('areaIdDescription') )
        {
            $obj = new TraArea($this->areaId);
            $this->areaIdDescription = $obj->description;
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT addendumCourseAreaId
                  FROM tra.addendumCourseArea';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY addendumCourseAreaId ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new TraAddendumCourseArea($result[$i][0]);
        }

        return $retVal;
    }

    
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT addendumCourseAreaId,
                       vacancies,
                       areaId,
                       addendumcourseid,
                       username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress
                  FROM tra.addendumCourseArea
                 WHERE addendumCourseAreaId = ?';
        $result = SDatabase::query($sql, array($this->addendumCourseAreaId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente. (@1)', $module));
        }

        list( $this->addendumCourseAreaId,
                $this->vacancies,
                $this->areaId,
                $this->addendumCourseId,
                $this->userName,
                $this->dateTime,
                $this->ipAddress,
                ) = $result[0];
    }

    
    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $retVal = $this->insert();

        return $retVal;
    }


    private function insert()
    {
        $sql = "SELECT NEXTVAL('tra.addendumcoursearea_addendumcourseareaid_seq')";
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.addendumCourseArea
                            (addendumcourseareaid,
                             vacancies,
                             areaId,
                             addendumcourseid)
                     VALUES (?,
                             ?,
                             ?,
                             ?)';
        $args = array(
            $newId,
            $this->vacancies,
            $this->areaId,
            $this->addendumCourseId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->addendumCourseAreaId = $newId;
        }

        return $result;
    }
    

    public function delete()
    {
        if ( strlen($this->addendumCourseAreaId)  ==  0  )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo. (@1)', $module, __CLASS__));
        }

        $sql = 'DELETE FROM tra.addendumCourseArea
                      WHERE addendumCourseAreaId = ?';
        $args = array($this->addendumCourseAreaId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->addendumCourseAreaId = null;
        }

        return $result;
    }
}


?>