<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Conceitos da instituição.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 25/03/2011
 *
 **/

class TraConcept extends SType
{
    /**
     *
     * @var int
     */
    protected $conceptId;


    /**
     *
     * @var int
     */
    protected $degreeEquivalenceId;

    /**
     * Descrição do conceito, tal como: A, B, C, D, E ou ainda Apto, Inapto, etc.
     *
     * @var string
     */
    protected $concept;

    /**
     * Valor mínimo para se enquadrar neste conceito.
     *
     * @var float
     */
    protected $lowerBound;

    /**
     * Valor máximo para se enquadrar neste conceito.
     *
     * @var float
     */
    protected $upperBound;


    /**
     * Indica se notas que se enquadram neste conceito caracterizam aprovação (true) ou reprovação (false).
     *
     * @var boolean
     */
    protected $approves;
    
    public function __construct($conceptId = null)
    {
        if ( strlen($conceptId) > 0 )
        {
            $this->conceptId = $conceptId;
            $this->populate();
        }
    }


    /**
     * Insere ou atualiza os registros na base
     *
     * @return boolean
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        if ( $this->removeData )
        {
            if ( strlen($this->conceptId) > 0 )
            {
                $this->delete();
            }
            return;
        }

        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->conceptId) <= 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }


    /**
     * Remove o registro na base, através de sua chave primaria
     *
     * @return boolean
     */
    public function delete()
    {
        if ( strlen($this->conceptId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um conceito que ainda não foi salvo.', $module));
        }
        
        $sql = 'DELETE FROM tra.concept
                  WHERE conceptId = ?';

        $args = array($this->conceptId);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->conceptId = null;
        }

        return $result;
    }

    
    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $row = clone($this);
        $row->conceptId = null;

        return $row;
    }

    
    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function search($filters)
    {
        $sql = 'SELECT conceptId,
                   degreeEquivalenceId,
                   concept,
                   lowerBound,
                   upperBound,
                   approves
              FROM tra.concept';

        $where = '';
        $args = array();
        foreach ( $filters as $key => $value )
        {
            if ( $key == 'betweenBound' )
            {
                $where .= ' AND (? BETWEEN lowerBound AND upperBound) ';
                $args[] = $value;
            }
            else
            {
                $where .= ' AND ' . $key . ' = ?';
                $args[] = $value;
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $args);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new TraConcept( $result[$i][0] );
        }

        return $retVal;
    }
    
    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.conceptId,
                   A.degreeEquivalenceId,
                   A.concept,
                   A.lowerBound,
                   A.upperBound,
                   A.approves
              FROM tra.concept A
             WHERE conceptId = ?';

        $result = SDatabase::query($sql, array($this->conceptId));

        if ( strlen($result[0][0]) <= 0 )
        {
            throw new Exception(_M('Código @1 inexistente.', $module, $this->conceptId));
        }

        list (
            $this->conceptId,
            $this->degreeEquivalenceId,
            $this->concept,
            $this->lowerBound,
            $this->upperBound,
            $this->approves) = $result[0];
    }

    
    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'tra.concept_conceptid_seq\')';

        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.concept (conceptId,
                   degreeEquivalenceId,
                   concept,
                   lowerBound,
                   upperBound,
                   approves)
                 VALUES (?, ?, ?, ?, ?, ?)';

        $args = array(
            $newId,
            $this->degreeEquivalenceId,
            $this->concept,
            $this->lowerBound,
            $this->upperBound,
            $this->approves
        );

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->conceptId = $newId;
        }

        return $result;
    }

    
    /*
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE tra.concept
               SET degreeEquivalenceId = ?,
                   concept = ?,
                   lowerBound = ?,
                   upperBound = ?,
                   approves = ?
             WHERE conceptId = ?';

        $args = array(
            $this->degreeEquivalenceId,
            $this->concept,
            $this->lowerBound,
            $this->upperBound,
            $this->approves,
            $this->conceptId
        );

        return SDatabase::execute($sql, $args);
    }
    
    
    public static function listRecords($filters = null)
    {
        $sql = 'SELECT A.conceptId,
                       A.concept
                  FROM tra.concept A';

        $args = array();
        if ( strlen($filters->degreeEquivalenceId) > 0 )
        {
            $sql .= " WHERE A.degreeEquivalenceId = ? ";
            $args[] = $filters->degreeEquivalenceId;
        }
        
        $sql .= ' ORDER BY A.concept DESC';
        
        $result = (array) SDatabase::query($sql, $args);
        
        $list = array();
        foreach ( $result as $r )
        {
            $list[ $r[0] ] = $r[1];
        }
        
        return $list;
    }
}
?>