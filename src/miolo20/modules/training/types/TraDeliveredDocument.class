<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 2011/04/01
 *
 */
class TraDeliveredDocument extends SType
{
    /**
     * @AttributeType integer
     *
     */
    protected $deliveredDocumentId;
    /**
     * @AttributeType integer
     *
     */
    protected $requestId;
    /**
     * @AttributeType integer
     *
     */
    protected $documentId;
    /**
     * @AttributeType character varying
     *
     */
    protected $contents;
    /**
     * @AttributeType timestamp without time zone
     *
     */
    protected $deliveryDate;
    /**
     * @AttributeType array
     *
     */
    protected $deliveredDocumentFiles = array();
    
    /**
     * Construtor da classe
     *
     * @param (integer) $deliveredDocumentId Chave primária da tabela
     */
    public function __construct($deliveredDocumentId = null)
    {
        if ( !is_null($deliveredDocumentId) )
        {
            $this->deliveredDocumentId = $deliveredDocumentId;
            $this->populate();
        }
    }

    public function search($filters)
    {
        $sql = 'SELECT delivereddocumentid,
                       requestid,
                       documentid,
                       contents,
                       TO_CHAR(deliverydate, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\')
                  FROM tra.delivereddocument';
        $where = '';

        foreach ($filters as $key=>$value)
        {
            if ((is_scalar($value)) && (strlen($value) > 0))
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY delivereddocumentid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        if ( count($result)>0 )
        {
            for ($i = 0; $i < count($result); $i++)
            {
                $retVal[] = new TraDeliveredDocument($result[$i][0]);
            }
        }

        return $retVal;
    }

    public function searchGrid($filters = null)
    {
        $sql = "SELECT delivereddocumentid,
                       requestid,
                       documentid,
                       contents,
                       TO_CHAR(deliverydate, " . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . ")
                  FROM tra.delivereddocument";
        
        $args = array();

        if (strlen($filters->deliveredDocumentId) > 0)
        {
            $where.=' AND delivereddocumentid = ?';
            $args[] = $filters->deliveredDocumentId;
        }

        if (strlen($filters->requestId) > 0)
        {
            $where.=' AND requestid = ?';
            $args[] = $filters->requestId;
        }

        if (strlen($filters->documentId) > 0)
        {
            $where.=' AND documentid = ?';
            $args[] = $filters->documentId;
        }

        if (strlen($filters->contents) > 0)
        {
            $where.=' AND UNACCENT(contents) ILIKE UNACCENT(?) ';
            $args[] = $filters->contents.'%';
        }

        if (strlen($filters->deliveryDate) > 0)
        {
            $where.=' AND deliverydate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\')';
            $args[] = $filters->deliveryDate;
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY delivereddocumentid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT delivereddocumentid,
                       requestid,
                       documentid,
                       contents,
                       TO_CHAR(deliverydate, '" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       username,
                       TO_CHAR(datetime, '". SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       ipaddress
                  FROM tra.delivereddocument
                 WHERE delivereddocumentid = ?";
        
        $result = SDatabase::query($sql, array($this->deliveredDocumentId));

        if (!strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->deliveredDocumentId,
              $this->requestId,
              $this->documentId,
              $this->contents,
              $this->deliveryDate,
              $this->userName,
              $this->dateTime,
              $this->ipAddress) = $result[0];

        $filters = new stdClass();
        $filters->deliveredDocumentId =  $this->deliveredDocumentId;
        $this->deliveredDocumentFiles = TraDeliveredDocumentFile::search($filters);
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if (strlen($this->deliveredDocumentId) == 0)
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        //Documentos
        foreach ( (array)$this->deliveredDocumentFile as $obj)
        {
            $obj->deliveredDocumentId = $this->deliveredDocumentId;
            $obj->save();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO tra.delivereddocument
                            (delivereddocumentid,
                             requestid,
                             documentid,
                             contents,
                             deliverydate)
                      VALUES (?, ?, ?, ?, now())';

        $sql2 = "SELECT nextval('tra.delivereddocument_delivereddocumentid_seq'::regclass)";
        
        $result = SDatabase::query($sql2);
        $deliveredDocumentId = $result[0][0];

        $args = array( $deliveredDocumentId,
                       $this->requestId,
                       $this->documentId,
                       $this->contents);
        
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->deliveredDocumentId = $deliveredDocumentId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.delivereddocument
                   SET requestid = ?,
                       documentid = ?,
                       contents = ?,
                       deliverydate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\')
                 WHERE delivereddocumentid = ?';

        $args = array($this->requestId,
                      $this->documentId,
                      $this->contents,
                      $this->deliveryDate,
                      $this->deliveredDocumentId);
        
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( isset($this->deliveredDocumentFiles) )
        {
            foreach( (array)$this->deliveredDocumentFiles as $deliveredDocumentFile )
            {
                $deliveredDocumentFile->delete();
            }
        }

        if (strlen($this->deliveredDocumentId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM tra.delivereddocument
                      WHERE delivereddocumentid = ?';

        $args = array($this->deliveredDocumentId);

        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->deliveredDocumentId = null;
        }

        return $result;
    }
}
?>