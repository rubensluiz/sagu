<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela tra.trainingType
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 25/03/2011
 */
class TraTrainingType extends SType
{
    //Constantes da tabela
    const TYPE_CURRICULAR = 1;

    //Tipos de modelo de Termo de compromisso
    //Isto e utilizado apenas para os relatorios jasper
    //Padronizar nome de constantes
    const TIPO_CURRICULAR = 'curricular';
    const TIPO_ATUALIZACAO_SERVICO = 'atualizacaoServico';
    const TIPO_ATUALIZACAO_SERVICO_FORMANDOS = 'atualizacaoServicoFormandos';
    const TIPO_ATUALIZACAO_PROFISSIONAL = 'atualizacaoProfissional';

    //Modos de listagem de tipo de Termo de compromisso
    //Quando for via portal/historico de usuario no modulo estagio, deve exibir apenas 2 tipos (ticket #8952),
    //se for via sistema, deve listar tudo
    const TERM_TYPES_SYSTEM = 1;
    const TERM_TYPES_USER = 2;
    
    const REQUIRE_SEMESTRE = 'S';
    const REQUIRE_RESIDENCIA = 'P';
    const REQUIRE_NENHUM = 'N';
    
    const PERIODO_RESIDENCIA_R1 = 1;
    const PERIODO_RESIDENCIA_R2 = 2;
    const PERIODO_RESIDENCIA_R3 = 3;

    /**
     * Table fields
     */
    /**
     * Identificador único da modalidade.
     */
    protected $trainingTypeId;
    /**
     * Descrição da modalidade.
     */
    protected $description;
    /**
     * Descrição complementar da modalidade.
     */
    protected $longDescription;
    /**
     * Intervalo mínimo de dias para a solicitação de um novo estágio
     */
    protected $minimumInterval;
    
    /**
     * Exigir semestre na solicitação
     */
    protected $requireSemester;
    
    /**
     * Exigir instituição na solicitação
     */
    protected $requireInstitution;
    
    protected $evaluationTypeId;
    
    protected $degreeEquivalenceId;
    
    /**
     * Documentos requeridos
     *
     * @var string
     */
    protected $requiredDocuments;
    
    /**
     * Construtor da classe
     *
     * @param (integer) $trainingTypeId Chave primária da tabela
     */
    public function __construct($trainingTypeId = null)
    {
        if ( !is_null($trainingTypeId) )
        {
            $this->trainingTypeId = $trainingTypeId;
            $this->populate();
        }
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->trainingTypeId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM tra.trainingType
                      WHERE trainingTypeId = ?';

        $params = array();
        $params[] = $this->trainingTypeId;
        
        $result = SDatabase::execute($sql, $params);
        
        if ( $result )
        {
            $this->trainingTypeId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $trainingType = clone($this);
        $trainingType->trainingTypeId = null;

        return $trainingType;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters = null)
    {
        $sql = 'SELECT trainingTypeId,
                       description,
                       longDescription
                  FROM tra.trainingType';

        $params = array();
        foreach ( (array) $filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ?';
            $params[] = $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new TraTrainingType($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function searchGrid($filters)
    {
        $sql = 'SELECT A.trainingTypeId,
                       A.description,
                       A.longDescription,
                       A.minimumInterval,
                       B.description AS evaluationType,
                       C.description AS degreeEquivalence
                  FROM tra.trainingType A
             LEFT JOIN tra.evaluationType B
                    ON A.evaluationTypeId = B.evaluationTypeId
             LEFT JOIN tra.degreeEquivalence C
                    ON A.degreeEquivalenceId = C.degreeEquivalenceId';

        $params = array();
        if ( strlen($filters->trainingTypeId) > 0 )
        {
            $where .= ' AND A.trainingTypeId = ?';
            $params[] = $filters->trainingTypeId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE UNACCENT(?)';
            $params[] = $filters->description;
        }
        if ( strlen($filters->longDescription) > 0 )
        {
            $where .= ' AND A.longDescription ILIKE UNACCENT(?)';
            $params[] = $filters->longDescription;
        }
        if ( strlen($filters->minimumInterval) > 0 )
        {
            $where .= ' AND A.minimumInterval = ?';
            $params[] = $filters->minimumInterval;
        }
        if ( strlen($filters->evaluationTypeId) > 0 )
        {
            $where .= ' AND A.evaluationTypeId = ?';
            $params[] = $filters->evaluationTypeId;
        }
        if ( strlen($filters->degreeEquivalenceId) > 0 )
        {
            $where .= ' AND A.degreeEquivalenceId = ?';
            $params[] = $filters->degreeEquivalenceId;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY A.description';
            $result = SDatabase::query($sql, $params);
        }

        return $result;
    }

    public static function listRecords()
    {
        $params = array();
        $sql = 'SELECT trainingTypeId,
                   description,
                   longDescription
              FROM tra.trainingType';
        
        $result = SDatabase::query($sql, $params);
        
        return $result;
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT trainingTypeId,
                       description,
                       longDescription,
                       minimumInterval,
                       requireSemester,
                       requireInstitution,
                       evaluationTypeId,
                       degreeEquivalenceId,
                       requiredDocuments,
                       username,
                       TO_CHAR(datetime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipaddress
                  FROM tra.trainingType
                 WHERE trainingTypeId = ?';

        $params = array();
        $params[] = $this->trainingTypeId;

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Modalidade @1 inexistente.', $module, $this->trainingTypeId));
        }

        list ( $this->trainingTypeId,
               $this->description,
               $this->longDescription,
               $this->minimumInterval,
               $this->requireSemester,
               $this->requireInstitution,
               $this->evaluationTypeId,
               $this->degreeEquivalenceId,
               $this->requiredDocuments,
               $this->userName,
               $this->dateTime,
               $this->ipAddress ) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'tra.trainingType_trainingTypeId_seq\')';
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.trainingType
                            (trainingTypeId,
                             description,
                             longDescription,
                             minimumInterval,
                             requireSemester,
                             requireInstitution,
                             evaluationTypeId,
                             degreeEquivalenceId,
                             requiredDocuments)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';

        $params = array();
        $params[] = $newId;
        $params[] = $this->description;
        $params[] = $this->longDescription;
        $params[] = $this->minimumInterval;
        $params[] = $this->requireSemester;
        $params[] = $this->requireInstitution;
        $params[] = $this->evaluationTypeId;
        $params[] = $this->degreeEquivalenceId;
        $params[] = $this->requiredDocuments;
        
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->trainingTypeId = $newId;
        }

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE tra.trainingType
                   SET description = ?,
                       longDescription = ?,
                       minimumInterval = ?,
                       requireSemester = ?,
                       requireInstitution = ?,
                       evaluationTypeId = ?,
                       degreeEquivalenceId = ?,
                       requiredDocuments = ?
                 WHERE trainingTypeId = ?';

        $params = array();
        $params[] = $this->description;
        $params[] = $this->longDescription;
        $params[] = $this->minimumInterval;
        $params[] = $this->requireSemester;
        $params[] = $this->requireInstitution;
        $params[] = $this->evaluationTypeId;
        $params[] = $this->degreeEquivalenceId;
        $params[] = $this->requiredDocuments;
        $params[] = $this->trainingTypeId;

        return SDatabase::execute($sql, $params);
    }

    /**
     * Lista os tipos de compromisso de estágios
     * OBS: Isto nao tem relacao com o campo trainingTypeId na tabela.
     */
    public static function listCommitmentTermTypes($type = self::TERM_TYPES_SYSTEM)
    {
        $types = array(
            self::TIPO_CURRICULAR => _M('Estágio curricular', $module),
            self::TIPO_ATUALIZACAO_SERVICO => _M('Atualização em Serviço', $module));

        if ( $type == self::TERM_TYPES_SYSTEM )
        {
            $types[self::TIPO_ATUALIZACAO_SERVICO_FORMANDOS] = _M('Atualização em Serviço para formados', $module);
            $types[self::TIPO_ATUALIZACAO_PROFISSIONAL] = _M('Atualização Profissional', $module);
        }

        return $types;
    }
}
?>