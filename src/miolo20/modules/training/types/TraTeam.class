<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela tra.team
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moisés Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 28/03/2011
 */
class TraTeam extends SType
{
    /**
     * Table fields
     */
    /**
     * Identificador único da equipe.
     */
    protected $teamId;
    /**
     * Código da area da unidade.
     */
    protected $unitAreaId;
    /**
     * Código indentificaro preceptor.
     */
    protected $preceptorId;
    
    protected $_preceptorIdDescription;
    
    /**
     * Descrição da equipe.
     */
    protected $description;
    /**
     * Data inicial da equipe.
     */
    protected $beginDate;
    /**
     * Data final da equipe.
     */
    protected $endDate;
    /**
     * Vagas.
     */
    protected $vacancies;
    /**
     * Área da unidade
     */
    protected $unitArea;
    /**
     * @AttributeType BasPhysicalPerson
     */
    protected $preceptor;
    
    /**
     * Local
     */
    protected $place;
    
    
    protected $_description, $_beginDate, $_endDate, $_vacancies, $_preceptorId;
    
    
    /**
     * Construtor da classe
     *
     * @param (integer) $teamId Chave primária da tabela
     */
    public function __construct($teamId = null)
    {
        // Campos subdetail
        $this->addAlias('_description', 'description');
        $this->addAlias('_beginDate', 'beginDate');
        $this->addAlias('_endDate', 'endDate');
        $this->addAlias('_vacancies', 'vacancies');
        $this->addAlias('_preceptorId', 'preceptorId');
        
        if ( !is_null($teamId) )
        {
            $this->teamId = $teamId;
            $this->populate();
        }
    }

    // Carrega apenas sob demanda
    public function __get($name)
    {
        // Objeto unitArea
        if ( $name == 'unitArea' && !$this->unitArea && (strlen($this->unitAreaId) > 0) )
        {
            $this->unitArea = new TraUnitArea($this->unitAreaId);
        }

        // Objeto preceptor
        if ( (in_array($name, array('preceptor', '_preceptorIdDescription'))) && !$this->preceptor && (strlen($this->preceptorId) > 0) )
        {
            $MIOLO = MIOLO::getInstance();
            $busPP = new BusinessBasicBusPhysicalPerson();
            $this->preceptor = $busPP->getPhysicalPerson($this->preceptorId);
            
            $this->_preceptorIdDescription = $this->preceptor->name;
        }

        return parent::__get($name);
    }


    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        if ( $this->removeData )
        {
            if ( strlen($this->teamId) > 0 )
            {
                $this->delete();
            }
            return;
        }
        
        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->teamId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM tra.team
                      WHERE teamId = ?';

        $params = array();
        $params[] = $this->teamId;
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->teamId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $area = clone($this);
        $area->teamId = null;

        return $area;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT teamId
                  FROM tra.team';

        $params = array();
        foreach ( (array)$filters as $key => $value )
        {
            if ( $key == 'betweenDates' )
            {
                $where .= ' AND ( TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') BETWEEN beginDate AND COALESCE (endDate, TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'))';
                $where .= ' OR TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') BETWEEN beginDate AND COALESCE (endDate, TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')) )';
                $params[] = $value[0];
                $params[] = $value[0];
                $params[] = $value[1];
                $params[] = $value[1];
            }
            else
            {
                $where .= ' AND ' . $key . ' = ?';
                $params[] = $value;
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY description ';

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new TraTeam($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function searchGrid($filters)
    {
        if ( !is_null($filters) )
        {
            $sql = 'SELECT A.teamId,
                           A.description,
                           A.unitAreaId,
                           A.preceptorId,
                           D.name,
                           TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as beginDate,
                           TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as endDate,
                           A.vacancies
                      FROM tra.team A
           INNER JOIN ONLY basphysicalperson D
                        ON (A.preceptorId = D.personid)
                 LEFT JOIN tra.subscriptionTeam E
                        ON (E.teamId = A.teamId)
                 LEFT JOIN tra.subscription F
                        ON (E.subscriptionId = F.subscriptionId)
                 LEFT JOIN tra.request G
                        ON (G.requestId = F.requestId)';

            $params = array();
            if ( $filters->teamId )
            {
                $where .= ' AND A.teamId = ?';
                $params[] = $filters->teamId;
            }
            if ( $filters->description )
            {
                $where .= ' AND A.description ILIKE ?';
                $params[] = $filters->description . '%';
            }
            if ( $filters->preceptorId )
            {
                $where .= ' AND preceptorId = ?';
                $params[] = $filters->preceptorId;
            }
            if ( $filters->preceptorName )
            {
                $where .= ' AND D.name ILIKE ?%';
                $params[] = $filters->preceptorName;
            }
            if ( $filters->beginDate )
            {
                $where .= ' AND A.beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
                $params[] = $filters->beginDate;
            }
            if ( $filters->endDate )
            {
                $where .= ' AND A.endDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
                $params[] = $filters->endDate;
            }
            if ( $filters->vacancies )
            {
                $where .= ' AND A.vacancies = ?';
                $params[] = $filters->vacancies;
            }
            if ( $filters->personId )
            {
                $where .= ' AND G.personId = ?';
                $params[] = $filters->personId;
            }
            if ( strlen($where) > 0 )
            {
                $sql .= ' WHERE ' . substr($where, 5);
                $sql .= ' GROUP BY 1,2,3,4,5,6,7,8';
                $sql .= ' ORDER BY A.description ';
            }

            return count($params) > 0 ? SDatabase::query($sql, $params) : array();
        }

        return $result;
    }
    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $params = array();
        $params[] = $this->teamId;

        $sql = 'SELECT teamId,
                       unitAreaId,
                       preceptorId,
                       description,
                       TO_CHAR(beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as beginDate,
                       TO_CHAR(endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as endDate,
                       vacancies,
                       place,
                       userName,
                       dateTime,
                       ipAddress
                  FROM tra.team
                 WHERE teamId = ?';

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Equipe @1 inexistente.', $module, $this->teamId));
        }

        list ( $this->teamId,
               $this->unitAreaId,
               $this->preceptorId,
               $this->description,
               $this->beginDate,
               $this->endDate,
               $this->vacancies,
               $this->place,
               $this->userName,
               $this->dateTime,
               $this->ipAddress) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'tra.team_teamId_seq\')';
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.team
                            (teamId,
                             unitAreaId,
                             preceptorId,
                             description,
                             beginDate,
                             endDate,
                             vacancies,
                             place)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             ?,
                             ?)';

        $params = array();
        $params[] = $newId;
        $params[] = $this->unitAreaId;
        $params[] = $this->preceptorId;
        $params[] = $this->description;
        $params[] = $this->beginDate;
        $params[] = $this->endDate;
        $params[] = $this->vacancies;
        $params[] = $this->place;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->teamId = $newId;
        }

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE tra.team
                   SET unitAreaId = ?,
                       preceptorId = ?,
                       description = ?,
                       beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       endDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       vacancies = ?,
                       place = ?
                 WHERE teamId = ?';

        $params = array();
        $params[] = $this->unitAreaId;
        $params[] = $this->preceptorId;
        $params[] = $this->description;
        $params[] = $this->beginDate;
        $params[] = $this->endDate;
        $params[] = $this->vacancies;
        $params[] = $this->place;
        $params[] = $this->teamId;

        return SDatabase::execute($sql, $params);
    }

    public static function listRecords($filters = null)
    {
        $sql = 'SELECT teamId,
                       description
                  FROM tra.team A
       INNER JOIN ONLY basphysicalPerson B
                    ON (A.preceptorId = B.personId)';

        $params = array();
        if ( strlen($filters->personId) > 0 )
        {
            $sql .= ' AND B.personId = ?';
            $params[] = $filters->personId;
        }
        if ( strlen($filters->unitAreaId) > 0 )
        {
            $sql .= ' AND A.unitAreaId = ?';
            $params[] = $filters->unitAreaId;
        }


        $sql .= 'ORDER BY A.description';
        $query = SDatabase::query($sql, $params);

        $result = array();
        foreach ( (array)$query as $row )
        {
            $result[$row[0]] = $row[1];
        }

        return $result;
    }

    /**
     * Função que retorna um valor booleanos se esta pessoa é um preceptor
     * de equipe.
     */
    public static function isTeamPreceptor($personId)
    {
        $sql = 'SELECT (SELECT COUNT(*) FROM tra.team WHERE preceptorId = ?) +
                       (SELECT COUNT(*) FROM tra.unitArea WHERE preceptorId = ?) +
                       (SELECT COUNT(*) FROM tra.preceptorSubstitution
                                       WHERE personId = ?
                                         AND now()::date BETWEEN begindate AND COALESCE(enddate, \'01-01-3000\'::date) )';

        $params = array();
        $params[] = $personId;
        $params[] = $personId;
        $params[] = $personId;

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return ($result[0][0] > 0);
    }
}
?>