<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela tra.courseArea
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 25/03/2011
 */

class TraCourseArea extends SType
{
    /**
     * Table fields
     */

    /**
     * Identificador único do curso por área.
     */
    protected $courseAreaId;

    /**
     * Identificador único do curso.
     */
    protected $courseId;
    
    
    protected $courseIdDescription;
   

    /**
     * Plano de atividades.
     * É um campo textual indicando todas as atividades que deverão
     * ser realizadas em estágios desta área e neste curso.
     */
    protected $activitiesPlan;
    
    protected $unitAreaId;


    /**
     * Construtor da classe
     *
     * @param (integer) $courseAreaId Chave primária da tabela
     */
    public function __construct($courseAreaId = null)
    {
        if ( !is_null($courseAreaId) )
        {
            $this->courseAreaId = $courseAreaId;
            $this->populate();
        }
    }
    
    public function __get($name)
    {
        if ( ($name == 'courseIdDescription') && ( strlen($this->courseId) > 0 ) && ($this->needCheckPopulate('courseIdDescription')) )
        {
            $course = new TraCourse( $this->courseId );
            $this->courseIdDescription = $course->description;
        }
        
        return parent::__get($name);
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        if ( ( strlen($this->courseAreaId) > 0 ) && $this->removeData )
        {
            $this->delete();
            return;
        }
        
        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->courseAreaId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        foreach ( (array)$this->documents as $document )
        {
            $document->delete();
        }

        $sql = 'DELETE FROM tra.courseArea
                      WHERE courseAreaId = ?';

        $params = array();
        $params[] = $this->courseAreaId;
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->courseAreaId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $courseArea = clone($this);
        $courseArea->courseAreaId = null;

        return $courseArea;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT courseAreaId,
                       courseId,
                       activitiesPlan
                  FROM tra.courseArea';

        $params = array();
        foreach ( (array)$filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ?';
            $params[] = $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new TraCourseArea($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchGrid($filters)
    {
        $sql = 'SELECT ROW_NUMBER() OVER() AS line, --Contador
                       B.courseId,
                       A.description AS areaDescription,
                       B.activitiesPlan
                  FROM tra.area A
             LEFT JOIN tra.courseArea B
                    ON A.areaId = B.areaId';

        $params = array();
        $on = '';
        $where = '';

        if ( $filters->courseAreaId )
        {
            $on .= ' AND B.courseAreaId = ?';
            $params[] = $filters->courseAreaId;
        }

        if ( $filters->courseId )
        {
            $on .= ' AND B.courseId = ?';
            $params[] = $filters->courseId;
        }
        
        if ( $filters->unitAreaId )
        {
            $on .= ' AND B.unitAreaId = ?';
            $params[] = $filters->unitAreaId;
        }

        if ( $filters->activitiesPlan )
        {
            $on .= ' AND B.activitiesPlan ILIKE (?)';
            $params[] = $filters->activitiesPlan . '%';
        }

        if ( strlen($on) > 0 )
        {
            $sql .= $on;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT courseAreaId,
                       courseId,
                       activitiesPlan,
                       unitAreaId
                  FROM tra.courseArea
                 WHERE courseAreaId = ?';

        $params = array();
        $params[] = $this->courseAreaId;

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Área @1 inexistente.', $module, $this->courseAreaId));
        }

        list ( $this->courseAreaId,
               $this->courseId,
               $this->activitiesPlan,
               $this->unitAreaId) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'tra.courseArea_courseAreaId_seq\')';
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.courseArea
                            ( courseAreaId,
                              courseId,
                              activitiesPlan,
                              unitAreaId )
                     VALUES ( ?, ?, ?, ? )';

        $params = array();
        $params[] = $newId;
        $params[] = $this->courseId;
        $params[] = $this->activitiesPlan;
        $params[] = $this->unitAreaId;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->courseAreaId = $newId;
        }

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE tra.courseArea
                   SET courseId = ?,
                       activitiesPlan = ?,
                       unitAreaId = ?
                 WHERE courseAreaId = ?';

        $params = array();
        $params[] = $this->courseId;
        $params[] = $this->activitiesPlan;
        $params[] = $this->unitAreaId;
        $params[] = $this->courseAreaId;

        return SDatabase::execute($sql, $params);
    }
}
?>