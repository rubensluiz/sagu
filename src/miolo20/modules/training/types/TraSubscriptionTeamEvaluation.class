<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Herbele [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moises Herbele [moises@solis.coop.br]
 *
 * @since
 * Class created on 07/04/2011
 */
class TraSubscriptionTeamEvaluation extends SType
{
    protected $subscriptionTeamEvaluationId;
    
    /**
     * @AttributeType integer
     */
    protected $evaluationItemId;
    /**
     * @AttributeType integer
     */
    protected $subscriptionId;
    /**
     * @AttributeType character varying
     */
    protected $concept;
    
    protected $subscriptionTeamId;


    public function __construct($subscriptionTeamEvaluationId = null)
    {
        if ( strlen($subscriptionTeamEvaluationId) > 0 )
        {
            $this->subscriptionTeamEvaluationId = $subscriptionTeamEvaluationId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT subscriptionTeamEvaluationId
                  FROM tra.subscriptionTeamEvaluation';

        $where = '';
        $args = array();
        foreach ($filters as $key=>$value)
        {
            if ( $key == 'personId' )
            {
                $where.=" AND personId = ?";
                $args[] = $value;
            }
            elseif ((is_scalar($value)) && (strlen($value) > 0))
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY subscriptionId, evaluationitemid ';
        $result = SDatabase::query($sql, $args);
        $retVal = array();

        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new TraSubscriptionTeamEvaluation( $result[$i][0] );
        }

        return $retVal;
    }

    public function searchGrid($filters = null)
    {
        $sql = 'SELECT evaluationitemid,
                       subscriptionId,
                       concept,
                       username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress
                  FROM tra.subscriptionteamevaluation';

        $args = array();
        if (strlen($filters->evaluationItemId) > 0)
        {
            $where.=' AND evaluationitemid = ?';
            $args[] = $filters->evaluationItemId;
        }

        if (strlen($filters->subscriptionId) > 0)
        {
            $where.=' AND subscriptionId = ?';
            $args[] = $filters->subscriptionId;
        }

        if (strlen($filters->concept) > 0)
        {
            $where.=' AND UNACCENT(concept) ILIKE UNACCENT(?) ';
            $args[] = $filters->concept.'%';
        }

        if (strlen($filters->username) > 0)
        {
            $where.=' AND UNACCENT(username) ILIKE UNACCENT(?) ';
            $args[] = $filters->username.'%';
        }

        if (strlen($filters->datetime) > 0)
        {
            $where.=' AND datetime = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\')';
            $args[] = $filters->datetime;
        }

        if (strlen($filters->ipaddress) > 0)
        {
            $where.=' AND ipaddress = ?';
            $args[] = $filters->ipaddress;
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY subscriptionId, evaluationitemid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT subscriptionteamevaluationid,
                       evaluationitemid,
                       subscriptionId,
                       subscriptionTeamId,
                       concept,
                       username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress
                  FROM tra.subscriptionteamevaluation
                 WHERE subscriptionteamevaluationid = ?';
        $result = SDatabase::query($sql, array($this->subscriptionTeamEvaluationId));

        if (!strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->subscriptionTeamEvaluationId,
              $this->evaluationItemId,
              $this->subscriptionId,
              $this->subscriptionTeamId,
              $this->concept,
              $this->username,
              $this->datetime,
              $this->ipaddress ) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( (strlen($this->subscriptionId) > 0) && (strlen($this->subscriptionTeamId) > 0) )
        {
            throw new Exception( _M('Os conceitos de avaliações de estágios devem ser salvos OU por inscrição, OU por inscrição na equipe, não os dois.', $module) );
        }
        
        $retVal = $this->insert();

        return $retVal;
    }

    private function insert()
    {
        $sql = "SELECT nextval('tra.subscriptionteamevaluation_subscriptionteamevaluationid_seq'::regclass)";
        $result = SDatabase::query($sql);
        $subscriptionTeamEvaluationId = $result[0][0];
        
        $sql = 'INSERT INTO tra.subscriptionteamevaluation
                            ( subscriptionteamevaluationid,
                              evaluationitemid,
                              subscriptionId,
                              concept,
                              subscriptionTeamId
                              )
                     VALUES ( ?, ?, ?, ?, ? )';

        $args = array();
        $args[] = $subscriptionTeamEvaluationId;
        $args[] = $this->evaluationItemId;
        $args[] = $this->subscriptionId;
        $args[] = $this->concept;
        $args[] = $this->subscriptionTeamId;
        
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->subscriptionTeamEvaluationId = $subscriptionTeamEvaluationId;
        }
        
        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.subscriptionteamevaluation
                   SET concept = ?,
                       evaluationItemId = ?,
                       subscriptionId = ?,
                       subscriptionTeamId = ?
                 WHERE subscriptionteamevaluationid = ?';

        $args = array();
        $args[] = $this->concept;
        $args[] = $this->evaluationItemId;
        $args[] = $this->subscriptionId;
        $args[] = $this->subscriptionTeamId;
        $agrs[] = $this->subscriptionTeamEvaluationId;

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->subscriptionTeamEvaluationId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM tra.subscriptionteamevaluation WHERE subscriptionteamevaluationid = ?';

        $args = array();
        $args[] = $this->subscriptionTeamEvaluationId;

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->subscriptionTeamEvaluationId = null;
        }

        return $result;
    }
}
?>