<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Classe que contém funções específicas de relatórios
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 19/01/2011
 */
class TraReports
{
    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchRequestList($filters)
    {
        $sql = "SELECT  A.requestid,
                        A.personid,
                        B.name as nome,
                        C.description as tipoDeEstagio,
                        A.semester as semestre,
                        E.description as area,
                        TO_CHAR(A.begindate, '" . SAGU::getParameter('basic', 'MASK_DATE') . "') AS dataInicial,
                        TO_CHAR(A.enddate, '" . SAGU::getParameter('basic', 'MASK_DATE') . "') AS dataFinal,
                        TO_CHAR(A.desistenceDate, '" . SAGU::getParameter('basic', 'MASK_DATE') . "') AS desistencia
                        FROM tra.request A
                INNER JOIN ONLY basphysicalperson B
                        ON (A.personid = B.personid)
                INNER JOIN tra.trainingtype C
                        ON (A.trainingtypeid=C.trainingtypeid)
                INNER JOIN tra.unitarea D
                        ON (A.unitareaid = D.unitareaid)
                INNER JOIN tra.area E
                        ON (D.areaid=E.areaid)";

        $where = '';
        $params = array();
        if ( $filters->requestId )
        {
            $where .= ' AND A.requestId = ?';
            $params[] = $filters->requestId;
        }

        if ( $filters->courseId )
        {
            $where .= ' AND A.courseId = ?';
            $params[] = $filters->courseId;
        }

        if ( $filters->areaId )
        {
            $where .= ' AND D.areaId = ?';
            $params[] = $filters->areaId;
        }

        if ( strlen($filters->beginDate) > 0 )
        {
            $where.=' AND A.beginDate >= TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $params[] = $filters->beginDate;
        }

        if ( strlen($filters->endDate) > 0 )
        {
            $where.=' AND A.endDate <= TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $params[] = $filters->endDate;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . ' GROUP BY 1,2,3,4,5,6,7,8,9
                                                     ORDER BY 2,4';
        }

        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchSubscriptionList($filters)
    {
        $sql = "SELECT  A.subscriptionid,
                        B.personid as personId,
                        C.name as personName,
                        D.description as tipoDeEstagio,
                        B.semester as semestre,
                        F.description as area,
                        TO_CHAR(B.begindate, '" . SAGU::getParameter('basic', 'MASK_DATE') . "') AS dataInicial,
                        TO_CHAR(B.enddate, '" . SAGU::getParameter('basic', 'MASK_DATE') . "') AS dataFinal,
                        TO_CHAR(A.desistenceDate, '" . SAGU::getParameter('basic', 'MASK_DATE') . "') AS desistencia
                FROM tra.subscription A
                INNER JOIN tra.request B
                        ON (A.requestid=B.requestid)
                INNER JOIN ONLY basphysicalperson C
                        ON (B.personid = C.personid)
                INNER JOIN tra.trainingtype D
                        ON (B.trainingtypeid=D.trainingtypeid)
                INNER JOIN tra.unitarea E
                        ON (B.unitareaid = E.unitareaid)
                INNER JOIN tra.area F
                        ON (E.areaid=F.areaid)";

        $where = '';
        $params = array();
        if ( $filters->requestId )
        {
            $where .= ' AND B.requestId = ?';
            $params[] = $filters->requestId;
        }

        if ( $filters->courseId )
        {
            $where .= ' AND B.courseId = ?';
            $params[] = $filters->courseId;
        }

        if ( $filters->areaId )
        {
            $where .= ' AND E.areaId = ?';
            $params[] = $filters->areaId;
        }

        if ( strlen($filters->beginDate) > 0 )
        {
            $where.=' AND B.beginDate >= TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $params[] = $filters->beginDate;
        }

        if ( strlen($filters->endDate) > 0 )
        {
            $where.=' AND B.endDate <= TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $params[] = $filters->endDate;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . ' GROUP BY 1,2,3,4,5,6,7,8,9
                                                     ORDER BY 2,4';
        }

        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchAreaList($filters)
    {
        $sql = 'SELECT A.legalPersonId as personId,
                       B.name as personName,
                       E.areaId as areaId,
                       E.description as areaDescription,
                       f.description as coursedescription,
                       aca.vacancies,
                       TO_CHAR(A.begindate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.enddate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM tra.agreement A
            INNER JOIN tra.addendum C
                    ON C.agreementid = A.agreementid
            INNER JOIN basLegalPerson B
                    ON (A.legalPersonId = B.personId)
            INNER JOIN tra.addendumcourse D
                    ON D.addendumid = C.addendumid
            INNER JOIN tra.course F
                    ON F.courseid = D.courseid
            INNER JOIN tra.addendumcoursearea ACA
                    ON D.addendumcourseid = ACA.addendumcourseid
            INNER JOIN tra.area E
                    ON (ACA.areaId = E.areaId)';

        $where = '';
        $params = array();
        
        if ( $filters->agreementId )
        {
            $where .= ' AND A.agreementId = ?';
            $params[] = $filters->agreementId;
        }

        if ( $filters->areaId )
        {
            $where .= ' AND E.areaId = ?';
            $params[] = $filters->areaId;
        }
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' GROUP BY 1,2,3,4,5,6,7,8 ';
            $sql .= ' ORDER BY 2,4,5 ';
        }

        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchVacancyList($filters)
    {
        $sql =     'SELECT _A.agreementId,
                           LP.name,
                           C.description as courseDescription,
                           AC.vacancies AS totalVacancies,
                           ACA.vacancies,
                           __A.description AS area
                      FROM tra.addendumCourseArea ACA
                INNER JOIN tra.addendumCourse AC
                        ON ACA.addendumCourseId = AC.addendumCourseId
                INNER JOIN tra.addendum A
                        ON A.addendumId = AC.addendumId
                INNER JOIN tra.agreement _A
                        ON _A.agreementId = A.agreementId
                INNER JOIN baslegalperson LP
                        ON _A.legalPersonId = LP.personId
                INNER JOIN tra.course C
                        ON C.courseid = AC.courseid
                INNER JOIN tra.area __A
                        ON ACA.areaid = __A.areaid';

        $where = '';
        $params = array();
        if ( $filters->institutionId )
        {
            $where .= ' AND _A.legalPersonId = ?';
            $params[] = $filters->institutionId;
        }

        if ( $filters->agreementId )
        {
            $where .= ' AND _A.agreementId = ?';
            $params[] = $filters->agreementId;
        }

        if ( $filters->courseId )
        {
            $where .= ' AND AC.courseId = ?';
            $params[] = $filters->courseId;
        }

        if ( $filters->areaId )
        {
            $where .= ' AND __A.areaId = ?';
            $params[] = $filters->areaId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY C.description, __A.description';
        }

        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchAgreementList($filters)
    {
        $sql = 'SELECT A.agreementId,
                       A.legalPersonId,
                       B.name,
                       TO_CHAR(A.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM tra.agreement A
       INNER JOIN ONLY basLegalperson B
                    ON (A.legalPersonId = B.personId)';

        $where = '';
        $params = array();
        if ( $filters->legalPersonId )
        {
            $where .= ' AND B.personId = ?';
            $params[] = $filters->legalPersonId;
        }

        if ( $filters->agreementId )
        {
            $where .= ' AND A.agreementId = ?';
            $params[] = $filters->agreementId;
        }

        if ( $filters->courseId )
        {
            $where .= ' AND EXISTS(SELECT 1
                                     FROM tra.addendumCourse AC
                               INNER JOIN tra.addendum AD
                                       ON AD.addendumId = AC.addendumId
                                    WHERE A.agreementId = AD.agreementId
                                      AND AC.courseId = ?)';
            $params[] = $filters->courseId;
        }

        if ( $filters->areaId )
        {
            $where .= ' AND EXISTS(SELECT 1
                                     FROM tra.addendumCourseArea ACA
                               INNER JOIN tra.addendumCourse AC
                                       ON ACA.addendumCourseId = AC.addendumCourseId
                               INNER JOIN tra.addendum AD
                                       ON AD.addendumId = AC.addendumId
                                    WHERE A.agreementId = AD.agreementId
                                      AND ACA.areaId = ?)';
            $params[] = $filters->areaId;
        }

        if ( strlen($filters->beginDate) > 0 )
        {
            $where.=' AND A.beginDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $params[] = $filters->beginDate;
        }

        if ( strlen($filters->endDate) > 0 )
        {
            $where.=' AND A.endDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $params[] = $filters->endDate;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY A.agreementId';
        }

        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchPreceptorList($filters)
    {
        $sql = "SELECT distinct 
               B.personId as preceptorId,
               B.name,
               B.Email,
               B.residentialPhone,
               B.cellPhone,
               CONCAT(D.description||',') as area
          FROM only basPhysicalPerson B
             LEFT JOIN tra.team A
                    ON (A.preceptorId = B.personId)
             LEFT JOIN tra.unitArea UATEAM
                    ON UATEAM.unitAreaId = A.unitAreaId
             LEFT JOIN tra.unitarea C
                    ON (C.preceptorId = B.personId)
             LEFT JOIN tra.area D
                    ON (D.areaid = C.areaid
                    OR  D.areaId = UATEAM.areaId)";

        $where = ' AND ( a.preceptorid is not null
                        OR C.preceptorid is not null ) ';
        
        $params = array();
        if ( $filters->areaId )
        {
            $where .= ' AND (C.areaId = ? OR UATEAM.areaId = ?)';
            $params[] = $filters->areaId;
            $params[] = $filters->areaId;
        }

        if ( $filters->unitId )
        {
            $where .= ' AND (C.unitId = ? OR UATEAM.unitId = ?)';
            $params[] = $filters->unitId;
            $params[] = $filters->unitId;
        }

        if ( $filters->personId )
        {
            $where .= ' AND A.preceptorId = ?';
            $params[] = $filters->personId;
        }

        $where .= ' AND 1=1';
        $sql .= ' WHERE ' . substr($where, 5) . ' GROUP BY 1,2,3,4,5
                                                    ORDER BY 2 ';

        return SDatabase::query($sql, $params);
    }

    public static function searchTraining($filters)
    {
        $sql = "SELECT C.name as personName,
                       B.semester AS semester,
                       B.institution AS institution,
                       H.description,
                       TO_CHAR(B.begindate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') || ' - ' || TO_CHAR(B.enddate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS period,
                       COALESCE(E.description, 'SEM EQUIPE')AS team
                  FROM tra.subscription A
            INNER JOIN tra.requestCurrentData B
                    ON (A.requestId = B.requestId)
            INNER JOIN tra.unitArea F
                    ON (F.unitAreaId = B.unitAreaId)
            INNER JOIN tra.trainingtype H
                    ON (H.trainingTypeId = B.trainingTypeId)
       INNER JOIN ONLY basPhysicalPerson C
                    ON (B.personId = C.personId)
             LEFT JOIN tra.subscriptionTeam G
                    ON (G.subscriptionId = A.subscriptionId)
             LEFT JOIN tra.team E
                    ON (G.teamId = E.teamId)";

        $where = '';
        $params = array();
        
        $where .= ' AND A.desistenceDate IS NULL';
        
        if ( ( strlen($filters->beginDate) > 0 ) && ( strlen($filters->endDate) > 0 ) )
        {
            $where .= " AND ( (datetodb(?), datetodb(?)) OVERLAPS (B.beginDate, B.endDate) )";
            $params[] = $filters->beginDate;
            $params[] = $filters->endDate;
        }

        if ( strlen($filters->teamId) > 0 )
        {
            $where.=' AND E.teamId = ?';
            $params[] = $filters->teamId;
        }

        if ( strlen($filters->preceptorId) > 0 )
        {
            $where.=' AND F.preceptorId = ?';
            $params[] = $filters->preceptorId;
        }

        if ( strlen($filters->courseId) > 0 )
        {
            $where.=' AND B.courseId = ?';
            $params[] = $filters->courseId;
        }

        if ( strlen($filters->unitAreaId) > 0 )
        {
            $where.=' AND F.unitAreaId = ?';
            $params[] = $filters->unitAreaId;
        }

        if ( strlen($filters->trainingTypeId) > 0 )
        {
            $where.=' AND B.trainingTypeId = ?';
            $params[] = $filters->trainingTypeId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            
            if ( strlen($filters->order) > 0 )
            {
                $sql .=' ORDER BY ' . $filters->order;
            }
        }

        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }
}
?>