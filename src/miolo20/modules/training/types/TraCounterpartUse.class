<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 2011/04/05
 *
 */
class TraCounterpartUse extends SType
{
    /**
     * @AttributeType integer
     *
     */
    protected $counterpartUseId;
    /**
     * @AttributeType integer
     *
     */
    protected $counterpartId;
    /**
     * @AttributeType text
     *
     */
    protected $description;
    /**
     * @AttributeType date
     *
     */
    protected $dateOfUse;


    public function  __construct($counterpartUseId = null)
    {
        if ( strlen($counterpartUseId) > 0 )
        {
            $this->counterpartUseId = $counterpartUseId;
            $this->populate();
        }
    }

    public function search($filters)
    {
        $sql = 'SELECT counterpartuseid
              FROM tra.counterpartuse';
        $where = '';

        foreach ($filters as $key=>$value)
        {
            if ((is_scalar($value)) && (strlen($value) > 0))
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY counterpartuseid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new TraCounterpartUse($result[$i][0]);
        }

        return $retVal;
    }

    public function searchGrid($filters = null)
    {
        $sql =       "SELECT counterpartuseid,
                       counterpartid,
                       description,
                       TO_CHAR(dateofuse, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM tra.counterpartuse";
        $args = array();

        if (strlen($filters->counterpartUseId) > 0)
        {
            $where.=' AND counterpartuseid = ?';
            $args[] = $filters->counterpartUseId;
        }

        if (strlen($filters->counterpartId) > 0)
        {
            $where.=' AND counterpartid = ?';
            $args[] = $filters->counterpartId;
        }

        if (strlen($filters->description) > 0)
        {
            $where.=' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description.'%';
        }

        if (strlen($filters->dateOfUse) > 0)
        {
            $where.=' AND dateofuse = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->dateOfUse;
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY counterpartuseid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT counterpartuseid,
                       counterpartid,
                       description,
                       TO_CHAR(dateofuse, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       username,
                       TO_CHAR(datetime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipaddress
                  FROM tra.counterpartuse
                 WHERE counterpartuseid = ?';
        $result = SDatabase::query($sql, array($this->counterpartUseId));

        if (!strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->counterpartUseId,
                $this->counterpartId,
                $this->description,
                $this->dateOfUse,
                $this->userName,
                $this->dateTime,
                $this->ipAddress,
                ) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( $this->removeData && (strlen($this->counterpartUseId) > 0) )
        {
            $this->delete();
            return false;
        }

        if (strlen($this->counterpartUseId) == 0)
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = "SELECT nextval('tra.counterpartuse_counterpartuseid_seq'::regclass)";
        $result = SDatabase::query($sql);
        $counterpartUseId = $result[0][0];

        $sql = 'INSERT INTO tra.counterpartuse (
                counterpartuseid,
                counterpartid,
                description,
                dateofuse) VALUES (?, ?, ?,
                   TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                )';

        $args = array(
            $counterpartUseId,
            $this->counterpartId,
            $this->description,
            $this->dateOfUse);
        
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->counterpartUseId = $counterpartUseId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.counterpartuse
                   SET counterpartid = ?,
                       description = ?,
                       dateofuse = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                 WHERE counterpartuseid = ?';
        $args = array(
            $this->counterpartId,
            $this->description,
            $this->dateOfUse,
            $this->counterpartUseId);
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if (strlen($this->counterpartUseId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM tra.counterpartuse
                      WHERE counterpartuseid = ?';
        $args = array($this->counterpartUseId);
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->counterpartUseId = null;
        }

        return $result;
    }
}
?>