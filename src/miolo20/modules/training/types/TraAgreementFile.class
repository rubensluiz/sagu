<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 2011/04/01
 *
 */
class TraAgreementFile extends SType
{
    /**
     * @AttributeType integer
     *
     */
    protected $agreementFileId;
    /**
     * @AttributeType integer
     *
     */
    protected $fileId;
    /**
     * @AttributeType character varying
     *
     */
    protected $agreementId;

    
    public function __construct($agreementFileId = null)
    {
        if (strlen($agreementFileId) > 0)
        {
            $this->agreementFileId = $agreementFileId;
            $this->populate();
        }
    }
    
    
    public static function search($filters)
    {
        $sql = 'SELECT agreementfileid
                  FROM tra.agreementfile';
        $where = '';

        foreach ($filters as $key=>$value)
        {
            if ((is_scalar($value)) && (strlen($value) > 0))
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY agreementfileid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new TraAgreementFile($result[$i][0]);
        }

        return $retVal;
    }

    public function searchGrid($filters = null)
    {
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipaddress,
                       agreementfileid,
                       fileid,
                       agreementid
                  FROM tra.agreementfile';
        $args = array();

        if (strlen($filters->userName) > 0)
        {
            $where.=' AND UNACCENT(username) ILIKE UNACCENT(?) ';
            $args[] = $filters->userName.'%';
        }

        if (strlen($filters->dateTime) > 0)
        {
            $where.=' AND datetime = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\')';
            $args[] = $filters->dateTime;
        }

        if (strlen($filters->ipAddress) > 0)
        {
            $where.=' AND ipaddress = ?';
            $args[] = $filters->ipAddress;
        }

        if (strlen($filters->agreementFileId) > 0)
        {
            $where.=' AND agreementfileid = ?';
            $args[] = $filters->agreementFileId;
        }

        if (strlen($filters->fileId) > 0)
        {
            $where.=' AND fileid = ?';
            $args[] = $filters->fileId;
        }

        if (strlen($filters->agreementId) > 0)
        {
            $where.=' AND UNACCENT(agreementid) ILIKE UNACCENT(?) ';
            $args[] = $filters->agreementId.'%';
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY agreementfileid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT agreementfileid,
                       fileid,
                       agreementid,
                       username,
                       TO_CHAR(datetime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipaddress
                  FROM tra.agreementfile
                 WHERE agreementfileid = ?';
        $result = SDatabase::query($sql, array($this->agreementFileId));

        if (!strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->agreementFileId,
              $this->fileId,
              $this->agreementId,
              $this->userName,
              $this->dateTime,
              $this->ipAddress ) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if (strlen($this->agreementFileId) == 0)
        {
            $retVal = $this->insert();
        } else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = "SELECT nextval('tra.agreementfile_agreementfileid_seq'::regclass)";
        $result = SDatabase::query($sql);
        $agreementFileId = $result[0][0];

        $sql = 'INSERT INTO tra.agreementfile (agreementfileid, fileid, agreementid) VALUES (?, ?, ?)';
        $args = array($agreementFileId, $this->fileId, $this->agreementId);
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->agreementFileId = $agreementFileId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.agreementfile
                   SET fileid = ?,
                       agreementid = ?
                 WHERE agreementfileid = ?';
        $args = array($this->fileId, $this->agreementId, $this->agreementFileId);
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if (strlen($this->agreementFileId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM tra.agreementfile
                      WHERE agreementfileid = ?';
        $args = array($this->agreementFileId);
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->agreementFileId = null;
        }

        return $result;
    }
}
?>