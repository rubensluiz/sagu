<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 06/04/2011
 */
class TraRequestAdjustment extends SType
{
    /**
     * @AttributeType integer
     *
     */
    protected $requestAdjustmentId;
    /**
     * @AttributeType integer
     *
     */
    protected $requestId;
    /**
     * @AttributeType date
     *
     */
    protected $beginDate;
    /**
     * @AttributeType date
     *
     */
    protected $endDate;
    /**
     * @AttributeType character varying
     *
     */
    protected $institution;
    /**
     * @AttributeType text
     *
     */
    protected $observation;
    /**
     * @AttributeType text
     *
     */
    protected $semester;

    /**
     * @AttributeType int
     */
    protected $trainingTypeId;
    
    /**
     * @var TraTrainingType
     */
    protected $trainingType;

    /**
     * @AttributeType int
     */
    protected $agreementId;
    
    /**
     *
     * @var string
     */
    protected $place;
    
    /**
     *
     * @var int
     */
    protected $unitAreaId;
    
    /**
     *
     * @var TraUnitArea
     */
    protected $unitArea;
    
    /**
     *
     * @var string
     */
    protected $supervisor;
    
    /**
     *
     * @var int
     */
    protected $courseId;

    public function __construct($requestAdjustmentId = null)
    {
        if ((strlen($requestAdjustmentId) > 0))
        {
            $this->requestAdjustmentId = $requestAdjustmentId;
            $this->populate();
        }
    }
    
    public function __get($name)
    {
        // unitArea
        if ( $name == 'unitArea' && !$this->unitArea && strlen($this->unitAreaId) > 0 )
        {
            // Object unitArea
            $this->unitArea = new TraUnitArea($this->unitAreaId);
        }
        
        if ( ( $name == 'trainingType' ) && ( strlen($this->trainingTypeId) > 0 ) && ( $this->needCheckPopulate('trainingType') ) )
        {
            $this->trainingType = new TraTrainingType( $this->trainingTypeId );
        }
        
        return parent::__get($name);
    }

    public function search($filters)
    {
        $sql = 'SELECT requestadjustmentid
                  FROM tra.requestadjustment';
        $where = '';

        foreach ($filters as $key=>$value)
        {
            if ((is_scalar($value)) && (strlen($value) > 0))
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY requestadjustmentid ';


        $result = SDatabase::query($sql);
        $retVal = array();

        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new TraRequestAdjustment($result[$i][0]);
        }

        return $retVal;
    }

    public function searchGrid($filters = null)
    {
        $sql = 'SELECT requestadjustmentid,
                       requestid,
                       TO_CHAR(begindate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(enddate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       institution,
                       observation,
                       semester
                  FROM tra.requestadjustment';
        $args = array();

        if (strlen($filters->requestAdjustmentId) > 0)
        {
            $where.=' AND requestadjustmentid = ?';
            $args[] = $filters->requestAdjustmentId;
        }

        if (strlen($filters->requestId) > 0)
        {
            $where.=' AND requestid = ?';
            $args[] = $filters->requestId;
        }

        if (strlen($filters->beginDate) > 0)
        {
            $where.=' AND begindate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->beginDate;
        }

        if (strlen($filters->endDate) > 0)
        {
            $where.=' AND enddate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->endDate;
        }

        if (strlen($filters->institution) > 0)
        {
            $where.=' AND UNACCENT(institution) ILIKE UNACCENT(?) ';
            $args[] = $filters->institution.'%';
        }

        if (strlen($filters->observation) > 0)
        {
            $where.=' AND UNACCENT(observation) ILIKE UNACCENT(?) ';
            $args[] = $filters->observation.'%';
        }

        if (strlen($filters->semester) > 0)
        {
            $where.=' AND semester = ?';
            $args[] = $filters->semester;
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY requestadjustmentid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT requestadjustmentid,
                       requestid,
                       TO_CHAR(begindate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(enddate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       institution,
                       observation,
                       semester,
                       trainingTypeId,
                       place,
                       unitAreaId,
                       supervisor,
                       agreementId,
                       courseId
                  FROM tra.requestadjustment
                 WHERE requestadjustmentid = ?';
        
        $result = SDatabase::query($sql, array($this->requestAdjustmentId));

        if (!strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->requestAdjustmentId,
             $this->requestId,
             $this->beginDate,
             $this->endDate,
             $this->institution,
             $this->observation,
             $this->semester,
             $this->trainingTypeId,
             $this->place,
             $this->unitAreaId,
             $this->supervisor,
             $this->agreementId,
             $this->courseId) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Verifica tipo de estagio + convenio associado
        // Ticket #9541
        if ( ( $this->trainingTypeId == TraTrainingType::TYPE_CURRICULAR ) && ( strlen($this->agreementId) <= 0 ) )
        {
            throw new Exception( _M('Estágios do tipo CURRICULAR devem ter um um convênio associado.', $module) );
        }
        
        if ( strlen($this->agreementId) > 0 )
        {
            $agreement = new TraAgreement($this->agreementId);
            $this->institution = $agreement->legalPerson->name;
        }

        if (strlen($this->requestAdjustmentId) == 0)
        {
            $retVal = $this->insert();
        } else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = "SELECT nextval('tra.requestadjustment_requestadjustmentid_seq'::regclass)";
        $result = SDatabase::query($sql);

        $sql = 'INSERT INTO tra.requestadjustment
                            (requestadjustmentid,
                             requestid,
                             begindate,
                             enddate,
                             institution,
                             observation,
                             semester,
                             trainingtypeid,
                             place,
                             unitAreaId,
                             supervisor,
                             agreementId,
                             courseId)
                     VALUES (?,
                             ?,
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';
        
        $requestAdjustmentId = $result[0][0];

        $args = array($requestAdjustmentId,
                      $this->requestId,
                      $this->beginDate,
                      $this->endDate,
                      $this->institution,
                      $this->observation,
                      $this->semester,
                      $this->trainingTypeId,
                      $this->place,
                      $this->unitAreaId,
                      $this->supervisor,
                      $this->agreementId,
                      $this->courseId);

        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->requestAdjustmentId = $requestAdjustmentId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.requestadjustment
                   SET requestid = ?,
                       begindate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       enddate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       institution = ?,
                       observation = ?,
                       semester = ?,
                       trainingTypeId = ?,
                       place = ?,
                       unitAreaId = ?,
                       supervisor = ?,
                       agreementId = ?,
                       courseId = ?
                 WHERE requestadjustmentid = ?';

        $args = array($this->requestId,
                      $this->beginDate,
                      $this->endDate,
                      $this->institution,
                      $this->observation,
                      $this->semester,
                      $this->trainingTypeId,
                      $this->place,
                      $this->unitAreaId,
                      $this->supervisor,
                      $this->agreementId,
                      $this->courseId,
                      $this->requestAdjustmentId);
        
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if (strlen($this->requestAdjustmentId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM tra.requestadjustment
                      WHERE requestadjustmentid = ?';

        $args = array($this->requestAdjustmentId);

        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->requestAdjustmentId = null;
        }

        return $result;
    }
}
?>