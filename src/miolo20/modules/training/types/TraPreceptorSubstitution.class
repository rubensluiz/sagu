<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela tra.preceptorSubstitution
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 17/06/2011
 */
class TraPreceptorSubstitution extends SType
{
    /**
     * Table fields
     */

    /**
     * @AttributeType Integer
     */
    protected $preceptorSubstitutionId;
    /**
     * @AttributeType Integer
     */
    protected $personId;
    /**
     * @AttributeType Date
     */
    protected $beginDate;
    /**
     * @AttributeType Date
     */
    protected $endDate;
    /**
     * @AttributeType BasPhysicalPerson
     */
    protected $preceptorSubstitution;
    /**
     * @AttributeType TraTeam
     */
    protected $team;

    // Carrega apenas sob demanda
    public function __get($name)
    {
        $MIOLO = MIOLO::getInstance();

        // Objeto preceptorSubstitution
        if ( $name == 'preceptorSubstitution' && !$this->preceptorSubstitution && (strlen($this->preceptorSubstitutionId) > 0) )
        {
            $busPP = new BusinessBasicBusPhysicalPerson();
            $this->preceptorSubstitution = $busPP->getPhysicalPerson($this->preceptorSubstitutionId);
        }

        // Objeto traTeam
        if ( $name == 'team' && !$this->team && (strlen($this->teamId) > 0) )
        {
            $this->team = TraTeam($this->teamId);
        }

        return parent::__get($name);
    }

    /**
     * Construtor da classe
     *
     * @param (integer) $preceptorSubstitutionId Chave primária da tabela
     */
    public function __construct($preceptorSubstitutionId = null)
    {
        if ( !is_null($preceptorSubstitutionId) )
        {
            $this->preceptorSubstitutionId = $preceptorSubstitutionId;
            $this->populate();
        }
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        // Valida as datas
        if ( SAGU::dateDiff($this->endDate, $this->beginDate) < 0 )
        {
            throw new Exception(_M('As datas informadas não são válidas. Verifique se a data de fim é maior que a data de início.', $module));
        }

        /*
         * Verifica se já não há um preceptor substituto para essa equipe nesse
         * horário.
         */
        if ( $this->checkHasPreceptorSubstitution() )
        {
            throw new Exception(_M('Esta equipe já tem um preceptor substituto cadastrado para esse período.', $module));
        }

        /*
         * Verifica se o preceptor substituto já não está em outra equipe
         */
        if ( $this->checkPreceptorSubstitutionHasTeam() )
        {
            throw new Exception(_M('Este preceptor substituto já está em outra equipe para esse período.', $module));
        }

        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->preceptorSubstitutionId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM tra.preceptorSubstitution
                      WHERE preceptorSubstitutionId = ?';

        $params = array();
        $params[] = $this->preceptorSubstitutionId;
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->preceptorSubstitutionId = null;
        }

        return $result;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT preceptorSubstitutionId
                  FROM tra.preceptorSubstitution';

        $params = array();
        foreach ( (array)$filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ?';
            $params[] = $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY preceptorSubstitutionId ';

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new TraPreceptorSubstitution($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function searchGrid($filters)
    {
        $sql = "SELECT A.preceptorSubstitutionId,
                       A.personId,
                       C.name,
                       A.teamId,
                       B.description,
                       TO_CHAR(A.beginDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') as beginDate,
                       TO_CHAR(A.endDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') as endDate
                  FROM tra.preceptorSubstitution A
            INNER JOIN tra.team B
                    ON (A.teamId = B.teamId)
       INNER JOIN ONLY basPhysicalPerson C
                    ON (A.personId = C.personId)";

        $result = array();
        $params = array();
        if ( $filters->preceptorSubstitutionId )
        {
            $where .= ' AND A.preceptorSubstitutionId = ?';
            $params[] = $filters->preceptorSubstitutionId;
        }

        if ( $filters->personId )
        {
            $where .= ' AND A.personId = ?';
            $params[] = $filters->personId;
        }
        elseif ( $filters->preceptorSubstitutionName )
        {
            $where .= ' AND C.name ILIKE ?';
            $params[] = $filters->preceptorSubstitutionName . '%';
        }

        if ( $filters->teamId )
        {
            $where .= ' AND A.teamId = ?';
            $params[] = $filters->teamId;
        }
        elseif ( $filters->teamDescription )
        {
            $where .= ' AND B.description ILIKE ?';
            $params[] = $filters->teamDescription . '%';
        }

        if ( $filters->beginDate )
        {
            $where .= " AND A.beginDate = TO_DATE(?,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "')";
            $params[] = $filters->beginDate;
        }

        if ( $filters->endDate )
        {
            $where .= " AND A.endDate = TO_DATE(?,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "')";
            $params[] = $filters->endDate;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY A.teamId ';

            $result = SDatabase::query($sql, $params);
        }

        return $result;
    }
    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = "SELECT preceptorSubstitutionId,
                       personId,
                       teamId,
                       TO_CHAR(beginDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') as beginDate,
                       TO_CHAR(endDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') as endDate,
                       userName,
                       dateTime,
                       ipAddress
                  FROM tra.preceptorSubstitution
                 WHERE preceptorSubstitutionId = ?";

        $params = array();
        $params[] = $this->preceptorSubstitutionId;

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Preceptor substituto inexistente.', $module));
        }

        list ( $this->preceptorSubstitutionId,
               $this->personId,
               $this->teamId,
               $this->beginDate,
               $this->endDate,
               $this->userName,
               $this->dateTime,
               $this->ipAddress ) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = "SELECT nextval('tra.preceptorSubstitution_preceptorSubstitutionId_seq')";
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.preceptorSubstitution
                            (preceptorSubstitutionId,
                             personId,
                             teamId,
                             beginDate,
                             endDate)
                     VALUES (?,
                             ?,
                             ?,
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'))';

        $params = array();
        $params[] = $newId;
        $params[] = $this->personId;
        $params[] = $this->teamId;
        $params[] = $this->beginDate;
        $params[] = $this->endDate;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->preceptorSubstitutionId = $newId;
        }

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE tra.preceptorSubstitution
                   SET personId = ?,
                       teamId = ?,
                       beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       endDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                 WHERE preceptorSubstitutionId = ?';

        $params = array();
        $params[] = $this->personId;
        $params[] = $this->teamId;
        $params[] = $this->beginDate;
        $params[] = $this->endDate;
        $params[] = $this->preceptorSubstitutionId;

        return SDatabase::execute($sql, $params);
    }

    /**
     * Função que retorna um valor booleano se esta pessoa é um preceptor substituto.
     */
    public static function isTeamPreceptorSubstitution($personId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM tra.preceptorSubstitution
                 WHERE preceptorSubstitutionId = ?';

        $params = array();
        $params[] = $personId;

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return ($result[0][0] > 0);
    }

    /**
     * Verifica se já não há um preceptor substituto para essa equipe para esse
     * período.
     *
     * @return boolean
     */
    public function checkHasPreceptorSubstitution()
    {
        $sql = "SELECT tra.fn_chk_has_preceptor_substitution(?::int,
                                                             ?::int,
                                                             ?::int,
                                                             TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . "')::date,
                                                             TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . "')::date)";

        $params = array();
        $params[] = $this->preceptorSubstitutionId;
        $params[] = $this->teamId;
        $params[] = $this->personId;
        $params[] = $this->beginDate;
        $params[] = $this->endDate;

        $result = SDatabase::query($sql, $params);

        return $result[0][0] == DB_TRUE;
    }

    /**
     * Verifica se o preceptor substituto já não está em outra equipe para este
     * período.
     *
     * @return boolean
     */
    public function checkPreceptorSubstitutionHasTeam()
    {
        $sql = "SELECT tra.fn_chk_preceptor_substitution_has_team(?::int,
                                                                  ?::int,
                                                                  ?::int,
                                                                  TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . "')::date,
                                                                  TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . "')::date)";

        $params = array();
        $params[] = $this->preceptorSubstitutionId;
        $params[] = $this->teamId;
        $params[] = $this->personId;
        $params[] = $this->beginDate;
        $params[] = $this->endDate;

        $result = SDatabase::query($sql, $params);

        return $result[0][0] == DB_TRUE;
    }
}
?>