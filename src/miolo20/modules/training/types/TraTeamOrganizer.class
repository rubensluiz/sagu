<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 30/06/2011
 *
 */
class TraTeamOrganizer extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $teamOrganizerId;
    /**
     * @AttributeType integer
     * 
     */
    protected $personId;
    /**
     * @AttributeType integer
     * 
     */
    protected $unitAreaId;

    /**
     * Atributo utilizado para exibicao na subdetail
     *
     * @AttributeType string
     */
    protected $personIdDescription;


    public function __construct($teamOrganizerId = NULL)
    {
        if ( (strlen($teamOrganizerId)  >  0) )
        {
            $this->teamOrganizerId = $teamOrganizerId;
            $this->populate();
        }
    }

    public function  __get($name)
    {
        if ( ( $name == 'personIdDescription' ) && ( ! $this->personIdDescription ) && ( strlen($this->personId) > 0 ) )
        {
            $MIOLO = MIOLO::getInstance();
            $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
            
            $this->personIdDescription = $busPhysicalPerson->getPhysicalPerson($this->personId)->name;
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT teamorganizerid
                  FROM tra.teamorganizer';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY teamorganizerid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new TraTeamOrganizer($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT tra.teamorganizerid,
                       tra.personId,
                       tra.unitareaid
                  FROM tra.teamorganizer';
        $args = array();

        if ( strlen($filters->teamOrganizerId)  >  0 )
        {
            $where.=' AND tra.teamorganizerid = ?';
            $args[] = $filters->teamOrganizerId;
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $where.=' AND tra.personId = ?';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->unitAreaId)  >  0 )
        {
            $where.=' AND tra.unitareaid = ?';
            $args[] = $filters->unitAreaId;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY teamorganizerid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT personId,
                       unitareaid,
                       username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress
                  FROM tra.teamorganizer
                 WHERE teamorganizerid = ?';
        $result = SDatabase::query($sql, array($this->teamOrganizerId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->personId,
              $this->unitAreaId,
              $this->userName,
              $this->dateTime,
              $this->ipAddress ) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( $this->removeData )
        {
            return;
        }

        if ( strlen($this->teamOrganizerId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO tra.teamorganizer 
                            (teamorganizerid, personId, unitareaid)
                     VALUES (?, ?, ?)';
        
        $sqlPK = "SELECT nextval('tra.teamorganizer_teamorganizerid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $teamOrganizerId = $result[0][0];
        
        $args = array($teamOrganizerId, $this->personId, $this->unitAreaId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->teamOrganizerId = $teamOrganizerId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.teamorganizer
                   SET personId = ?,
                       unitareaid = ?
                 WHERE teamorganizerid = ?';

        $args = array();
        $args[] = $this->personId;
        $args[] = $this->unitAreaId;
        $args[] = $this->teamOrganizerId;

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->teamOrganizerId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM tra.teamorganizer
                      WHERE teamorganizerid = ?';
        $args = array($this->teamOrganizerId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->teamOrganizerId = null;
        }

        return $result;
    }
    
    
    /**
     * Verifica se pessoa é organizador de equipe
     *
     * @param int $personId
     * 
     * @return boolean
     */
    public static function isTeamOrganizer($personId)
    {
        //
        $sql = "SELECT COUNT(*) > 0
                  FROM tra.teamOrganizer
                 WHERE personId = ?";
        $queryTO = SDatabase::query($sql, array($personId));
        
 
        //
        $sql = "SELECT COUNT(*) > 0
                  FROM tra.unitUser UU
                 WHERE UU.idUser = (SELECT idUser
                                      FROM miolo_user
                                     WHERE login = (
                                            SELECT PP.mioloUsername
                                         FROM ONLY basPhysicalPerson PP
                                             WHERE PP.personId = ?
                                     ))";
        $queryUU = SDatabase::query($sql, array($personId));
        
        return $queryTO[0][0] == DB_TRUE || $queryUU[0][0] == DB_TRUE;
    }
}
?>