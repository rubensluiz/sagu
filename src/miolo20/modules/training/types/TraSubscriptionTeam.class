<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 07/04/2011
 */
class TraSubscriptionTeam extends SType
{
    /**
     * @AttributeType integer
     */
    protected $subscriptionTeamId;
    /**
     * @AttributeType integer
     */
    protected $teamId;
    /**
     * @AttributeType TraTeam
     */
    protected $team;
    /**
     * @AttributeType integer
     */
    protected $subscriptionId;
    /**
     * @AttributeType date
     */
    protected $beginDate;
    /**
     * @AttributeType date
     */
    protected $endDate;
    /**
     * @AttributeType TraSubscription
     */
    protected $subscription;
    
    protected $degree;
    /**
     * @AttributeType real
     */
    protected $frequency;
    /**
     * @AttributeType boolean
     */
    protected $approved;
    /**
     * @AttributeType boolean
     *
     */
    protected $trainingEnded;

    protected $evaluationComments;
    
    protected $subscriptionTeamEvaluation;
    
    
    public function __construct($subscriptionTeamId = null)
    {
        if ((strlen($subscriptionTeamId) > 0))
        {
            $this->subscriptionTeamId = $subscriptionTeamId;
            $this->populate();
        }
        
        // Campos da subdetail do form FrmSubscriptionTeamAllocation
        $this->addAlias('_beginDate', 'beginDate');
        $this->addAlias('_endDate', 'endDate');
    }

    public function  __get($name)
    {
        if ( ($name == 'subscription') && (!$this->subscription) && (strlen($this->subscriptionId) > 0) )
        {
            $this->subscription = new TraSubscription($this->subscriptionId);
        }

        if ( ($name == 'subscriptionTeamEvaluation') && ( $this->needCheckPopulate('subscriptionTeamEvaluation') ) && (strlen($this->subscriptionTeamId) > 0) )
        {
            $filters = new stdClass();
            $filters->subscriptionTeamId = $this->subscriptionTeamId;
            $this->subscriptionTeamEvaluation = TraSubscriptionTeamEvaluation::search($filters);
        }
        
        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT A.subscriptionTeamId
                  FROM tra.subscriptionteam A
            INNER JOIN tra.subscription B
                    ON A.subscriptionId = B.subscriptionId
            INNER JOIN tra.request C
                    ON B.requestId = C.requestId';

        $where = '';
        $args = array();
        foreach ($filters as $key=>$value)
        {
            if ( $key == 'personId' )
            {
                $where.=" AND C.personId = ?";
                $args[] = $value;
            }
            else if ((is_scalar($value)) && (strlen($value) > 0))
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY A.subscriptionTeamId ';

        $result = SDatabase::query($sql, $args);
        $retVal = array();

        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new TraSubscriptionTeam($result[$i][0]);
        }

        return $retVal;
    }

    public function searchGrid($filters = null)
    {
        $sql = 'SELECT A.subscriptionteamid,
                   D.personId,
                   D.name,
                   D.residentialPhone,
                   D.email,
                   C.institution,
                   C.semester,
                   TO_CHAR(A.begindate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                   TO_CHAR(A.enddate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                   E.description,
                   B.status
             FROM tra.subscriptionTeam A
       INNER JOIN tra.subscription B
               ON (A.subscriptionId = B.subscriptionId)
       INNER JOIN tra.request C
               ON (B.requestId = C.requestId)
  INNER JOIN ONLY basPhysicalPerson D
               ON (D.personId = C.personId)
       INNER JOIN tra.team E
               ON (E.teamId = A.teamId)';
        
        $args = array();

        if (strlen($filters->subscriptionTeamId) > 0)
        {
            $where.=' AND A.subscriptionteamid = ?';
            $args[] = $filters->subscriptionTeamId;
        }

        if (strlen($filters->teamId) > 0)
        {
            $where.=' AND A.teamid = ?';
            $args[] = $filters->teamId;
        }

        if (strlen($filters->subscriptionId) > 0)
        {
            $where.=' AND A.subscriptionid = ?';
            $args[] = $filters->subscriptionId;
        }

        if (strlen($filters->beginDate) > 0)
        {
            $where.=' AND A.begindate >= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->beginDate;
        }

        if (strlen($filters->endDate) > 0)
        {
            $where.=' AND A.enddate <= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->endDate;
        }

        if ( strlen($filters->preceptorId) > 0 )
        {
            $where .= ' AND E.preceptorId = ? ';
            $args[] = $filters->preceptorId;
        }

        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->personName . '%';
        }
        
        if (strlen($filters->degree) > 0)
        {
            $where.=' AND A.degree = ?';
            $args[] = $filters->degree;
        }

        if (strlen($filters->approved) > 0)
        {
            $where.=' AND A.approved = ?';
            $args[] = $filters->approved;
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY A.subscriptionteamid';
            
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT subscriptionteamid,
                       teamid,
                       subscriptionid,
                       TO_CHAR(begindate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(enddate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       degree,
                       approved,
                       frequency,
                       trainingEnded,
                       evaluationComments,
                       username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress
                  FROM tra.subscriptionteam
                 WHERE subscriptionteamid = ?';
        $result = SDatabase::query($sql, array($this->subscriptionTeamId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente. (@1)', $module, __CLASS__));
        }

        list( $this->subscriptionTeamId,
              $this->teamId,
              $this->subscriptionId,
              $this->beginDate,
              $this->endDate,
              $this->degree,
              $this->approved,
              $this->frequency,
              $this->trainingEnded,
              $this->evaluationComments,
              $this->userName,
              $this->dateTime,
              $this->ipAddress ) = $result[0];

        //Objeto team
        $this->team = new TraTeam($this->teamId);

        // Objeto subscription
        $this->subscription = new TraSubscription($this->subscriptionId);
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');

        //Ticket #8958
        $this->__get('subscription');

        //Verifica se data de inicio e fim nao estao no intervalo de datas de inicio e fim da request (ticket #8958)
        $request = $this->subscription->request;
        $adjustment = $this->subscription->request->requestAdjustment;
        $requestAdjustment = $adjustment[0];
        $reqBeginDate = strlen($requestAdjustment->beginDate) > 0 ? $requestAdjustment->beginDate : $request->beginDate;
        $reqEndDate = strlen($requestAdjustment->endDate) > 0 ? $requestAdjustment->endDate : $request->endDate;
        $queryBegin = SDatabase::query("SELECT TO_DATE(?, '{$maskDate}') BETWEEN TO_DATE(?, '{$maskDate}') AND TO_DATE(?, '{$maskDate}')", array($this->beginDate, $reqBeginDate, $reqEndDate));
        if ( $queryBegin[0][0] == DB_FALSE )
        {
            throw new Exception( _M('A data @1 não está no intervalo correto do período de início e fim da inscrição de "@2".', $module, $this->beginDate, $this->subscription->request->physicalPerson->name) );
        }
        $queryEnd = SDatabase::query("SELECT TO_DATE(?, '{$maskDate}') BETWEEN TO_DATE(?, '{$maskDate}') AND TO_DATE(?, '{$maskDate}')", array($this->endDate, $reqBeginDate, $reqEndDate));
        if ( $queryEnd[0][0] == DB_FALSE )
        {
            throw new Exception( _M('A data @1 não está no intervalo correto do período de início e fim da inscrição de "@2".', $module, $this->endDate, $this->subscription->request->physicalPerson->name) );
        }

        if (strlen($this->subscriptionTeamId) == 0)
        {
            $retVal = $this->insert();
        } else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        if ( $this->checkDateConflict($this->subscriptionId, $this->beginDate, $this->endDate) )
        {
            throw new Exception( _M('Existe datas em conflito para inscrição da pessoa "@1". Verifique se nas datas das equipes foi adicionado datas de início e fim que se sobrepõem ou a equipe anterior desta inscrição já possui avaliações/foi aprovada.', $module, $this->subscription->request->physicalPerson->name) );
        }
        $sql = "SELECT nextval('tra.subscriptionteam_subscriptionteamid_seq'::regclass)";
        $result = SDatabase::query($sql);
        $subscriptionTeamId = $result[0][0];

        $sql = 'INSERT INTO tra.subscriptionteam
                            ( subscriptionteamid,
                              teamid,
                              subscriptionid,
                              begindate,
                              enddate,
                                degree,
                                approved,
                                frequency,
                                trainingEnded,
                                evaluationComments
                            )
                     VALUES ( ?, ?, ?,
                              TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                              TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                              ?,
                              ?,
                              ?,
                              ?,
                              ?
                            )';

        $args = array();
        $args[] = $subscriptionTeamId;
        $args[] = $this->teamId;
        $args[] = $this->subscriptionId;
        $args[] = $this->beginDate;
        $args[] = $this->endDate;
        $args[] = $this->degree;
        $args[] = $this->approved;
        $args[] = $this->frequency;
        $args[] = $this->trainingEnded;
        $args[] = $this->evaluationComments;
        
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->subscriptionTeamId = $subscriptionTeamId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.subscriptionteam
                   SET teamid = ?,
                       subscriptionid = ?,
                       begindate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       enddate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       frequency = ?,
                       degree = ?,
                       approved = ?,
                       trainingEnded = ?,
                       evaluationComments = ?
                 WHERE subscriptionteamid = ?';
        
        $args = array();
        $args[] = $this->teamId;
        $args[] = $this->subscriptionId;
        $args[] = $this->beginDate;
        $args[] = $this->endDate;
        $args[] = $this->frequency;
        $args[] = $this->degree;
        $args[] = $this->approved;
        $args[] = $this->trainingEnded;
        $args[] = $this->evaluationComments;
        $args[] = $this->subscriptionTeamId;

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if (strlen($this->subscriptionTeamId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM tra.subscriptionteam
                      WHERE subscriptionteamid = ?';
        $args = array($this->subscriptionTeamId);
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->subscriptionTeamId = null;
        }

        return $result;
    }

    /**
     * Verifica conflito de datas, para maiores informacoes, consulte documentacao da funcao
     * tra.fn_chk_date_conflict
     *
     * @param int $subscriptionId
     * @param string $beginDate
     * @param string $endDate
     * @return string DB_FALSE or DB_TRUE
     */
    public function checkDateConflict($subscriptionId, $beginDate, $endDate)
    {
        $sql = 'SELECT tra.fn_chk_date_conflict(
                ?,
                TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'))';
        $result = SDatabase::query($sql, array($subscriptionId, $beginDate, $endDate));
        return $result[0][0] == DB_TRUE;
    }

    /**
     *  Verifica e retorna as seguintes pendências do usuário em forma de mensagem:
     *  - Crachás não entregues
     *  - Documento obrigatório não entregue
     */
    
    public function getTraineePendings()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $traineePendings = array(); //Inicializa array das pendencias

        $busPerson = new BusinessBasicBusPerson();
        
        //Informações do usuario
        $personData = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));
        if ( strlen($personData->personId) > 0 )
        {
            // Verifica os crachás que deveriam ser devolvidos até ontem
            $filters = new stdClass();
            $filters->personId = $personData->personId;
            $filters->expectedReturnDateFinal = SAGU::addIntervalInDate(SAGU::getDateNow(), 'd', 1, ' - ');
            $badgeLoans = BasBadgeLoan::search($filters);
            foreach ( (array)$badgeLoans as $badgeLoan )
            {
                // Verifica se tem data de devolução
                if ( $badgeLoan->returnDate == null )
                {
                    $traineePendings[] = _M('O crachá @1 não foi entregue', $module, $badgeLoan->badgeId);
                }
            }
            
            //Obter Documento obrigatório não fornecido;
            $filters2 = new stdClass();
            $filters2->personId = $personData->personId;
            $searchRequest = TraRequest::search($filters2);
            foreach( (array)$searchRequest as $request )
            {
                //array de documentos entregues
                $deliveredDocuments = $request->deliveredDocument;
                foreach( (array)$deliveredDocuments as $deliveredDocument )
                {
                    $deliveredDocumentIds[] = $deliveredDocument->documentId;
                }

                //array de documentos
                $documents = $request->unitArea->documents;
                foreach( (array)$documents as $document )
                {
                    if( $document->isMandatory == DB_TRUE ) //documentos obrigatórios
                    {                        
                        if ( (!in_array($document->documentId, (array)$deliveredDocumentIds)) && (!in_array($document->documentId, (array)$control)) )
                        {
                            $control[] = $document->documentId; //Adicionada variavel de controle para que nao seje axibida mais requisições ára a mesma pessoa
                            $traineePendings[] = _M('Documento @1 - @2 não foi entregue', $module, $document->documentId, $document->description);
                        }
                    }
                }
            }
        }
        return $traineePendings;
    }


    /**
     * Mantido este metodo aqui por questoes de compatibilidade na BasSystemTask
     */
    public static function notifyPendingEvaluations(BasSystemTask $bst)
    {
        return TraSubscription::notifyPendingEvaluations($bst);
    }
}
?>