<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela tra.document
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 25/03/2011
 */
class TraDocument extends SType
{
    /**
     * Table fields
     */
    /**
     * Identificador único da area.
     */
    protected $unitAreaId;
    /**
     * Identificador único do documento.
     */
    protected $documentId;
    /**
     * Descrição do documento.
     */
    protected $description;
    /**
     * É obrigatório.
     */
    protected $isMandatory;
    /**
     * É extinto.
     */
    protected $extinct;
    /**
     * Indica se este tipo de documento terá um campo texto
     * onde poderá ser informado um valor, número, texto.
     */
    protected $hasTextContent;
    /**
     * Quantidade máxima de anexos.
     */
    protected $numberOfAttachments;
    
    protected $__description;
    
    /**
     * Construtor da classe
     *
     * @param (integer) $documentId Chave primária da tabela
     */
    public function __construct($documentId = null)
    {
        $this->addAlias('__description', 'description');
        
        if ( !is_null($documentId) )
        {
            $this->documentId = $documentId;
            $this->populate();
        }
    }


    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        if ( strlen($this->documentId) > 0 && $this->removeData )
        {
            $this->delete();
            return;
        }

        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->documentId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM tra.document
                      WHERE documentId = ?';

        $params = array();
        $params[] = $this->documentId;
        $result = SDatabase::execute($sql, $params);
        
        if ( $result )
        {
            $this->documentId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $document = clone($this);
        $document->documentId = null;

        return $document;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function search($filters)
    {
        $sql = 'SELECT documentId,
                       description,
                       isMandatory,
                       extinct,
                       hasTextContent,
                       numberOfAttachments
                  FROM tra.document';

        $params = array();
        foreach ( (array)$filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ?';
            $params[] = $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new TraDocument($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function searchGrid($filters)
    {
        if ( !is_null($filters) )
        {
            $sql = 'SELECT documentId,
                           description,
                           isMandatory,
                           extinct,
                           hasTextContent,
                           numberOfAttachments
                      FROM tra.document';

            $params = array();
            if ( $filters->documentId )
            {
                $where .= ' AND documentId = ?';
                $params[] = $filters->documentId;
            }
            elseif ( $filters->description )
            {
                $where .= ' AND description ILIKE UNACCENT(?)';
                $params[] = $filters->description;
            }

            if ( $filters->isMandatory )
            {
                $where .= ' AND isMandatory = ?';
                $params[] = $filters->isMandatory;
            }

            if ( $filters->extinct )
            {
                $where .= ' AND extinct = ?';
                $params[] = $filters->extinct;
            }

            if ( $filters->hasTextContent )
            {
                $where .= ' AND hasTextContent = ?';
                $params[] = $filters->hasTextContent;
            }

            if ( $filters->numberOfAttachments )
            {
                $where .= ' AND numberOfAttachments = ?';
                $params[] = $filters->numberOfAttachments;
            }

            if ( strlen($where) > 0 )
            {
                $sql .= ' WHERE ' . substr($where, 5);
            }

            $result = SDatabase::query($sql, $params);
        }

        return $result;
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT documentId,
                       description,
                       isMandatory,
                       extinct,
                       hasTextContent,
                       numberOfAttachments
                  FROM tra.document
                 WHERE documentId = ?';

        $params = array();
        $params[] = $this->documentId;
        
        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Documento @1 inexistente.', $module, $this->documentId));
        }

        list ( $this->documentId,
               $this->description,
               $this->isMandatory,
               $this->extinct,
               $this->hasTextContent,
               $this->numberOfAttachments ) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'tra.document_documentId_seq\')';
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.document
                            ( unitAreaId,
                              documentId,
                              description,
                              isMandatory,
                              extinct,
                              hasTextContent,
                              numberOfAttachments )
                     VALUES ( ?, ?, ?, ?, ?, ?, ? )';

        $params = array();
        $params[] = $this->unitAreaId;
        $params[] = $newId;
        $params[] = $this->description;
        $params[] = $this->isMandatory;
        $params[] = $this->extinct;
        $params[] = $this->hasTextContent;
        $params[] = $this->numberOfAttachments;
        
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->documentId = $newId;
        }

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE tra.document
                   SET description = ?,
                       isMandatory = ?,
                       extinct = ?,
                       hasTextContent = ?,
                       numberOfAttachments = ?
                 WHERE documentId = ?';

        $params = array();
        $params[] = $this->description;
        $params[] = $this->isMandatory;
        $params[] = $this->extinct;
        $params[] = $this->hasTextContent;
        $params[] = $this->numberOfAttachments;
        $params[] = $this->documentId;

        return SDatabase::execute($sql, $params);
    }
}
?>