<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2011
 *
 */
class TraAddendum extends SType
{
    protected $addendumId;

    protected $agreementId;

    protected $beginDate;

    protected $endDate;

    protected $object;

    protected $counterpart = array();

    protected $addendumFile = array();

    protected $addendumCourse = array();

    protected $agreement;

    
    public function __construct($addendumId = null)
    {
        $MIOLO = MIOLO::getInstance();
        $function = $MIOLO->_REQUEST("function");
        
        if ( strlen($addendumId) > 0 && $function != "insert" )
        {
            $this->addendumId = $addendumId;
            $this->populate();
        }
    }

    
    public function  __get($name)
    {
        if ( ( $name == 'addendumCourse' ) && (strlen($this->addendumId) > 0) && (count($this->addendumCourse) <= 0) )
        {
            $filters = new stdClass();
            $filters->addendumId = $this->addendumId;
            $this->addendumCourse = TraAddendumCourse::search($filters);
        }

        if ( ( $name == 'agreement' ) && ( strlen($this->agreementId) > 0 ) && $this->needCheckPopulate('agreement') )
        {
            $this->agreement = new TraAgreement($this->agreementId);
        }

        return parent::__get($name);
    }

    
    public static function search($filters)
    {
        $sql = 'SELECT addendumId
              FROM tra.addendum';
        $where = '';

        $args = array( );
        foreach ( $filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 5);
        }

        $sql .=' ORDER BY addendumId ';

        $result = SDatabase::query($sql, $args);
        $retVal = array( );

        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new TraAddendum($result[$i][0]);
        }

        return $retVal;
    }

    /**
     *
     * @param array $filters
     * @return array
     */
    public function searchGrid($filters = null)
    {
        $sql = 'SELECT A.agreementId,
                       A.addendumId,
                       TO_CHAR(A.begindate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.enddate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM tra.addendum A';
        $args = array( );

        if ( strlen($filters->addendumId) > 0 )
        {
            $where.=' AND A.addendumId = ? ';
            $args[] = $filters->addendumId;
        }

        if ( strlen($filters->agreementId) > 0 )
        {
            $where.=' AND A.agreementId = ?';
            $args[] = $filters->agreementId;
        }

        if ( strlen($filters->beginDate) > 0 )
        {
            $where.=' AND A.begindate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->beginDate;
        }

        if ( strlen($filters->endDate) > 0 )
        {
            $where.=' AND A.enddate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->endDate;
        }

        if ( strlen($filters->object) > 0 )
        {
            $where.=' AND UNACCENT(A.object) ILIKE UNACCENT(?) ';
            $args[] = $filters->object . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 4) . '
                   ORDER BY A.addendumId';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT addendumId,
                       agreementId,
                       TO_CHAR(begindate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(enddate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       object,
                       username,
                       TO_CHAR(datetime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipaddress
                  FROM tra.addendum
                 WHERE addendumId = ?';

        $result = SDatabase::query($sql, array( $this->addendumId ));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente. (@1)', $module, __CLASS__));
        }

        list( 
                $this->addendumId,
                $this->agreementId,
                $this->beginDate,
                $this->endDate,
                $this->object,
                $this->userName,
                $this->dateTime,
                $this->ipAddress,) = $result[0];

        if ( strlen($this->addendumId) > 0 )
        {
            //Filtro para popular objetos de outras tabelas
            $filters = new stdClass();
            $filters->addendumId = $this->addendumId;

            //Contraparida
            $this->counterpart = TraCounterpart::search($filters);

            //File
            $this->addendumFile = TraAddendumFile::search($filters);
        }
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $filters = new stdClass();
        $filters->addendumId = $this->addendumId;
        $rows = TraAddendum::search($filters);

        if ( ( strlen($this->addendumId) == 0 ) || ( count($rows) <= 0 ) )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        foreach ( (array) $this->addendumCourse as $row )
        {
            $row->addendumId = $this->addendumId;
            $row->save();
        }

        foreach ( (array) $this->counterpart as $row )
        {
            $row->addendumId = $this->addendumId;
            $row->save();
        }

        foreach ( (array) $this->addendumFile as $row )
        {
            $row->addendumId = $this->addendumId;
            $row->save();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO tra.addendum (
                            addendumId,
                            agreementId,
                            begindate,
                            enddate,
                            object)
                    VALUES (?,
                            ?,
                            TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                            ?)';

        $args = array( $this->addendumId,
            $this->agreementId,
            $this->beginDate,
            $this->endDate,
            $this->object);

        $result = SDatabase::execute($sql, $args);

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.addendum
                   SET username = ?,
                       datetime = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipaddress = ?,
                       agreementId = ?,
                       begindate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       enddate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       object = ?
                 WHERE addendumId = ?';

        $args = array( $this->userName,
            $this->dateTime,
            $this->ipAddress,
            $this->agreementId,
            $this->beginDate,
            $this->endDate,
            $this->object,
            $this->addendumId );

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->addendumId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $this->__get('addendumCourse');
        foreach ( (array) $this->addendumCourse as $row )
        {
            $row->delete();
        }

        $this->__get('counterpart');
        foreach ( (array) $this->counterpart as $row )
        {
            $row->delete();
        }

        $this->__get('addendumFile');
        foreach ( (array) $this->addendumFile as $row )
        {
            $row->delete();
        }

        $sql = 'DELETE FROM tra.addendum
                      WHERE addendumId = ?';
        $args = array( $this->addendumId );

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->addendumId = null;
        }

        return $result;
    }
}

?>