<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2011
 */
class TraAddendumCourseAdmin extends SType
{
    protected $addendumCourseAdminId;

    protected $personId;

    protected $addendumCourseId;

    protected $personName;

    
    public function __construct($addendumCourseAdminId = null)
    {
        if ( strlen($addendumCourseAdminId)  >  0 )
        {
            $this->addendumCourseAdminId = $addendumCourseAdminId;
            $this->populate();
        }
    }


    public function  __get($name)
    {
        if ( ( $name == 'personName' ) && ( strlen($this->personId) >= 0 ) && $this->needCheckPopulate('personName') )
        {
            $MIOLO = MIOLO::getInstance();
            $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();

            $this->personName = $busPhysicalPerson->getPhysicalPerson($this->personId)->name;
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT addendumCourseAdminId
                  FROM tra.addendumCourseAdmin';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY addendumCourseAdminId ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new TraAddendumCourseAdmin($result[$i][0]);
        }

        return $retVal;
    }

    
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT addendumcourseadminid,
                       personid,
                       addendumcourseid,
                       username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress
                  FROM tra.addendumCourseAdmin
                 WHERE addendumCourseAdminId = ?';
        $result = SDatabase::query($sql, array($this->addendumCourseAdminId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente. (@1)', $module));
        }

        list(   $this->addendumCourseAdminId,
                $this->personId,
                $this->addendumCourseId,
                $this->userName,
                $this->dateTime,
                $this->ipAddress,) = $result[0];
    }

    
    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $retVal = $this->insert();

        return $retVal;
    }


    private function insert()
    {
        $sql = 'SELECT nextval(\'tra.addendumcourseadmin_addendumcourseadminid_seq\')';
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.addendumCourseAdmin
                            (addendumcourseadminid, personid, addendumcourseid)
                     VALUES (?, ?, ?)';
        $args = array($newId, $this->personId, $this->addendumCourseId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->addendumCourseAdminId = $newId;
        }

        return $result;
    }
    

    public function delete()
    {
        if ( strlen($this->addendumCourseAdminId)  ==  0  )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo. (@1)', $module, __CLASS__));
        }

        $sql = 'DELETE FROM tra.addendumCourseAdmin
                      WHERE addendumCourseAdminId = ?';
        $args = array($this->addendumCourseAdminId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->addendumCourseAdminId = null;
        }

        return $result;
    }


    /**
     * Função que retorna um valor booleanos se esta pessoa é uma conveniada.
     */
    public static function isAgreement($personId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM tra.addendumCourseAdmin
                 WHERE personId = ?';

        $params = array();
        $params[] = $personId;

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return ($result[0][0] > 0);
    }
    
    public static function getAddendumCourseAdminId($personId)
    {
        $sql = ' SELECT addendumcourseadminid
                   FROM tra.addendumcourseadmin
                  WHERE personid = ? ';
        
        $params = array();
        $params[] = $personId;
        
        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return $result[0][0];
    }

        /**
     * Função que retorna o convênio da pessoa conveniada.
     */
    public static function getAgreementId($personId)
    {
        $sql = 'SELECT C.agreementId
                  FROM tra.addendumCourseAdmin A
            INNER JOIN tra.addendumCourse B
                    ON (A.addendumcourseid = B.addendumcourseid)
            INNER JOIN tra.addendum C
                    ON (B.addendumid = C.addendumid)
                 WHERE personId = ?';

        $params = array();
        $params[] = $personId;

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return $result;
    }


    /**
     * Lista conveniadas onde o usuário informado possui algum convênio
     */
    public static function listConvening($filters)
    {
        $sql = 'SELECT A.personId,
                       A.name
             FROM ONLY basPerson A
            INNER JOIN tra.agreement B
                    ON (B.legalPersonId = A.personId)';

        $params = array();
        if ( strlen($filters->personId) > 0 )
        {
            $sql .= ' WHERE EXISTS(SELECT 1
                                   FROM tra.addendumCourseAdmin ACA
                             INNER JOIN tra.addendumCourse AC
                                     ON AC.addendumCourseId = ACA.addendumCourseId
                             INNER JOIN tra.addendum AD
                                     ON AD.addendumId = AC.addendumId
                                  WHERE ACA.personId = ?
                                    AND AD.agreementId = B.agreementId)';
            $params[] = $filters->personId;
        }
        
        $sql .= ' ORDER BY A.name ';

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        if ( is_array($result) )
        {
            foreach ( $result as $line )
            {
                $personId = $line[0];
                $personName = $line[1];
                $retVal[$personId] = $personName;
            }
        }
        return $retVal;
    }
}
?>