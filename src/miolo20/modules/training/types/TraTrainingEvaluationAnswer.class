<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 13/04/2011
 */
class TraTrainingEvaluationAnswer extends SType 
{
    /**
     * @AttributeType integer
     */
    protected $trainingEvaluationAnswerId;
    /**
     * @AttributeType integer
     */
    protected $questionId;
    /**
     * @AttributeType integer
     */
    protected $optionId;
    /**
     * @AttributeType integer
     */
    protected $subscriptionId;
    /**
     * @AttributeType text
     */
    protected $answer;

    /**
     * Construtor
     */
    public function __construct($trainingEvaluationAnswerId = null)
    {
        if ( (strlen($trainingEvaluationAnswerId) > 0) )
        {
            $this->trainingEvaluationAnswerId = $trainingEvaluationAnswerId;
            $this->populate();
        }
    }

    /**
     * Função de busca que re
     *
     * @param type $filters
     * @return tra.trainingEvaluationAnswer 
     */
    public static function search($filters)
    {
        $sql = 'SELECT trainingEvaluationAnswerId
                  FROM tra.trainingEvaluationAnswer';

        $where = '';
        foreach ( $filters as $key=>$value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY trainingEvaluationAnswerId ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new TraTrainingEvaluationAnswer($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Função de busca que retorna um array
     *
     * @param type $filters
     */
    public static function searchGrid($filters = null)
    {
        $sql = 'SELECT trainingEvaluationAnswerId,
                       questionid,
                       optionid,
                       subscriptionId,
                       answer
                  FROM tra.trainingEvaluationAnswer';

        $args = array();
        $where = '';
        if ( strlen($filters->trainingEvaluationAnswerId) > 0 )
        {
            $where.=' AND trainingEvaluationAnswerId = ?';
            $args[] = $filters->trainingEvaluationAnswerId;
        }

        if ( strlen($filters->questionId) > 0 )
        {
            $where.=' AND questionid = ?';
            $args[] = $filters->questionId;
        }

        if ( strlen($filters->optionId) > 0 )
        {
            $where.=' AND optionid = ?';
            $args[] = $filters->optionId;
        }

        if ( strlen($filters->subscriptionId) > 0 )
        {
            $where.=' AND subscriptionId = ?';
            $args[] = $filters->subscriptionId;
        }

        if ( strlen($filters->answer) > 0 )
        {
            $where.=' AND UNACCENT(answer) ILIKE UNACCENT(?) ';
            $args[] = $filters->answer.'%';
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                 ORDER BY trainingEvaluationAnswerId';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Função que popula o objeto
     */
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT trainingEvaluationAnswerId,
                       questionid,
                       optionid,
                       subscriptionId,
                       answer,
                       username,
                       datetime,
                       ipaddress
                  FROM tra.trainingEvaluationAnswer
                 WHERE trainingEvaluationAnswerId = ?';

        $result = SDatabase::query($sql, array($this->trainingEvaluationAnswerId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->trainingEvaluationAnswerId,
              $this->questionId,
              $this->optionId,
              $this->subscriptionId,
              $this->answer,
              $this->username,
              $this->datetime,
              $this->ipaddress ) = $result[0];

        // Objeto question
        $busQuestion = new BusinessResearchBusQuestion();
        $this->question = $busQuestion->getQuestion($this->questionId);

        if ( strlen($this->optionId) > 0 )
        {
            // Objeto option
            $busOption = new BusinessResearchBusOption();
            $this->option = $busOption->getOption($this->optionId);
        }
    }

    /**
     * Função que insere ou edita registros
     */
    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->trainingEvaluationAnswerId) == 0 ) 
        {
            $retVal = $this->insert();
        }
        else 
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Função que insere registros
     */
    private function insert()
    {
        // Chave primária
        $primaryKey = "SELECT nextval('tra.trainingEvaluationAnswer_trainingEvaluationAnswerId_seq'::regclass)";
        $result = SDatabase::query($primaryKey);
        $trainingEvaluationAnswerId = $result[0][0];

        $sql = 'INSERT INTO tra.trainingEvaluationAnswer(
                            trainingEvaluationAnswerId,
                            questionid,
                            optionid,
                            subscriptionId,
                            answer)
                     VALUES (?, ?, ?, ?, ?)';

        $args = array();
        $args[] = $trainingEvaluationAnswerId;
        $args[] = $this->questionId;
        $args[] = $this->optionId;
        $args[] = $this->subscriptionId;
        $args[] = $this->answer;

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->trainingEvaluationAnswerId = $trainingEvaluationAnswerId;
        }

        return $result;
    }

    /**
     * Função que atualiza registros
     *
     * @return type boolean
     */
    private function update()
    {
        $sql = 'UPDATE tra.trainingEvaluationAnswer
                   SET questionid = ?,
                       optionid = ?,
                       subscriptionId = ?,
                       answer = ?
                 WHERE trainingEvaluationAnswerId = ?';

        $args = array();
        $args[] = $this->questionId;
        $args[] = $this->optionId;
        $args[] = $this->subscriptionId;
        $args[] = $this->answer;
        $args[] = $this->trainingEvaluationAnswerId;

        return SDatabase::execute($sql, $args);
    }

    /**
     * Função que deleta registros
     *
     * @return type boolean
     */
    public function delete()
    {
        if ( strlen($this->trainingEvaluationAnswerId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM tra.trainingEvaluationAnswer
                      WHERE trainingEvaluationAnswerId = ?';

        $args = array($this->trainingEvaluationAnswerId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->trainingEvaluationAnswerId = null;
        }

        return $result;
    }
}
?>