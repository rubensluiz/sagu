<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 09/09/2011
 */
class TraAddendumCourse extends SType
{
    protected $addendumCourseId;

    protected $courseId;

    protected $addendumId;

    protected $vacanciesPerAreaControl;

    protected $vacancies;

    protected $addendumCourseArea;

    protected $addendumCourseAdmin;

    
    public function __construct($addendumCourseId = null)
    {
        if ( strlen($addendumCourseId)  >  0 )
        {
            $this->addendumCourseId = $addendumCourseId;
            $this->populate();
        }
    }


    public function  __get($name)
    {
        if ( ( $name == 'courseIdDescription' ) && ( strlen($this->courseId) >= 0 ) && $this->needCheckPopulate('courseIdDescription') )
        {
            $obj = new TraCourse($this->courseId);
            $this->courseIdDescription = $obj->description;
        }

        if ( ( $name == 'addendumCourseArea' ) && (strlen($this->addendumCourseId) >= 0) && (count($this->addendumCourseArea) <= 0) )
        {
            $filters = new stdClass();
            $filters->addendumCourseId = $this->addendumCourseId;
            $this->addendumCourseArea = TraAddendumCourseArea::search($filters);
        }

        if ( ( $name == 'addendumCourseAdmin' ) && (strlen($this->addendumCourseId) >= 0) && (count($this->addendumCourseAdmin) <= 0) )
        {
            $filters = new stdClass();
            $filters->addendumCourseId = $this->addendumCourseId;
            $this->addendumCourseArea = TraAddendumCourseAdmin::search($filters);
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT addendumCourseId
                  FROM tra.addendumCourse';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY courseId ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new TraAddendumCourse($result[$i][0]);
        }

        return $retVal;
    }

    
    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT courseid,
                       agreementid
                  FROM tra.addendumCourse';
        $args = array();

        if ( strlen($filters->courseId)  >  0 )
        {
            $where.=' AND courseid = ?';
            $args[] = $filters->courseId;
        }

        if ( strlen($filters->agreementId)  >  0 )
        {
            $where.=' AND UNACCENT(agreementid) ILIKE UNACCENT(?) ';
            $args[] = $filters->agreementId.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY courseid, agreementid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT courseid,
                       addendumId,
                       vacanciesperareacontrol,
                       vacancies,
                       username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress
                  FROM tra.addendumCourse
                 WHERE addendumCourseId = ?';
        $result = SDatabase::query($sql, array($this->addendumCourseId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->courseId,
                $this->addendumId,
                $this->vacanciesPerAreaControl,
                $this->vacancies,
                $this->userName,
                $this->dateTime,
                $this->ipAddress,
                ) = $result[0];

        if ( strlen($this->addendumCourseId) > 0 )
        {
            //Filtro para popular objetos de outras tabelas
            $filters = new stdClass();
            $filters->addendumCourseId = $this->addendumCourseId;

            $this->addendumCourseArea = TraAddendumCourseArea::search($filters);

            $this->addendumCourseAdmin = TraAddendumCourseAdmin::search($filters);
        }
    }

    
    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $retVal = $this->insert();

        foreach ( (array) $this->addendumCourseArea as $row )
        {
            $row->addendumCourseId = $this->addendumCourseId;
            $row->save();
        }

        foreach ( (array) $this->addendumCourseAdmin as $row )
        {
            $row->addendumCourseId = $this->addendumCourseId;
            $row->save();
        }

        return $retVal;
    }


    private function insert()
    {
        $sql = 'SELECT nextval(\'tra.addendumcourse_addendumcourseid_seq\')';
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.addendumCourse
                            (addendumCourseId,
                             courseid,
                             addendumId,
                             vacanciesPerAreaControl,
                             vacancies)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?)';
        $args = array(
            $newId,
            $this->courseId,
            $this->addendumId,
            $this->vacanciesPerAreaControl,
            $this->vacancies);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->addendumCourseId = $newId;
        }

        return $result;
    }
    

    public function delete()
    {
        if ( strlen($this->addendumCourseId)  ==  0  )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo. (@1)', $module, __CLASS__));
        }

        // Remove table registers
        $this->__get('addendumCourseArea');
        foreach ( $this->addendumCourseArea as $row )
        {
            $row->delete();
        }

        // Remove table registers
        $this->__get('addendumCourseAdmin');
        foreach ( $this->addendumCourseAdmin as $row )
        {
            $row->delete();
        }


        $sql = 'DELETE FROM tra.addendumCourse
                      WHERE addendumCourseId = ?';
        $args = array($this->addendumCourseId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->addendumCourseId = null;
        }

        return $result;
    }
}


?>