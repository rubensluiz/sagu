<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Armazena as equivalências de notas numéricas para notas conceituas, por período.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 25/03/2011
 *
 **/
class TraDegreeEquivalence extends SType
{
    /**
     *
     * @var int
     */
     protected $degreeEquivalenceId;

     /**
      * Descrição associada a tabela, tal como "Tabela de notas".
      *
      * @param string
      */
     protected $description;

     /**
      * Data a partir da qual esta tabela de equivalências passou a valer.
      * 
      * @param string
      */
     protected $beginDate;

     /**
      * Data a partir da qual esta tabela deixou de ter validade. Poderá ser nulo, indicando que a tabela está ativa indefinidamente. Somente uma tabela poderá estar ativa em cada momento, ou seja, não poderão haver dois registros com este campo nulo.
      *
      * @param string
      */
     protected $endDate;


     /**
      * Array de conceitos (TraConcept)
      *
      * @var TraConcept
      */
     protected $concept = array();
     

    public function __construct($degreeEquivalenceId = null)
    {
        if ( strlen($degreeEquivalenceId) > 0 )
        {
            $this->degreeEquivalenceId = $degreeEquivalenceId;
            $this->populate();
        }
    }


    /**
     * Insere ou atualiza os registros na base
     *
     * @return boolean
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->degreeEquivalenceId) <= 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        if ( strlen($this->degreeEquivalenceId) > 0 )
        {
            foreach ( (array) $this->concept as $row )
            {
                $row->degreeEquivalenceId = $this->degreeEquivalenceId;
                $row->save();
            }
        }

        return $retVal;
    }


    /**
     * Remove o registro na base, através de sua chave primaria
     *
     * @return boolean
     */
    public function delete()
    {
        if ( strlen($this->degreeEquivalenceId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir uma equivalencia que ainda não foi salva.', $module));
        }

        foreach ( $this->concept as $row )
        {
            $row->delete();
        }

        $sql = 'DELETE FROM tra.degreeEquivalence
                  WHERE degreeEquivalenceId = ?';

        $args = array($this->degreeEquivalenceId);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->degreeEquivalenceId = null;
        }

        return $result;
    }


    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $row = clone($this);
        $row->degreeEquivalenceId = null;

        foreach ( $this->concept as $row )
        {
            $row->degreeEquivalenceId = null;
        }

        return $row;
    }

    /**
     * Retorna uma lista de equivalencia de notas.
     */
    public static function listDegreeEquivalence()
    {
        $sql = 'SELECT A.degreeEquivalenceId,
                       A.description
                  FROM tra.degreeEquivalence A
                 WHERE A.beginDate <= NOW()::date
                   AND (A.endDate > NOW()::date OR endDate IS NULL)';

        $result = SDatabase::query($sql, null);

        if( is_array($result) )
        {
            foreach( $result  as $r )
            {
                $retVal[$r[0]] = $r[1];
            }
        }

        return $retVal;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT degreeEquivalenceId,
                   description,
                   TO_CHAR(beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                   TO_CHAR(endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
              FROM tra.degreeEquivalence';

        $where = '';
        $args = array();
        foreach ( $filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ?';
            $args[] = $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $args);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new TraDegreeEquivalence( $result[$i][0] );
        }

        return $retVal;
    }



    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchGrid($filters)
    {
        $sql = 'SELECT A.degreeEquivalenceId,
                   A.description,
                   TO_CHAR(A.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                   TO_CHAR(A.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
              FROM tra.degreeEquivalence A';

        $where = '';
        if ( strlen($filters->degreeEquivalenceId) > 0 )
        {
            $where .= ' AND A.degreeEquivalenceId = ?';
            $args[] = $filters->degreeEquivalenceId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE UNACCENT(?)';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->beginDate) > 0 )
        {
            $where .= ' AND A.beginDate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->beginDate;
        }
        if ( strlen($filters->endDate) > 0 )
        {
            $where .= ' AND A.endDate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->endDate;
        }

        $result = array();
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY A.description';
            $result = SDatabase::query($sql, $args);
        }

        return $result;
    }


    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT degreeEquivalenceId,
                   description,
                   TO_CHAR(beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                   TO_CHAR(endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
              FROM tra.degreeEquivalence
             WHERE degreeEquivalenceId = ?';

        $result = SDatabase::query($sql, array($this->degreeEquivalenceId));

        if ( strlen($result[0][0]) <= 0 )
        {
            throw new Exception(_M('Código @1 inexistente.', $module, $this->degreeEquivalenceId));
        }

        list (
            $this->degreeEquivalenceId,
            $this->description,
            $this->beginDate,
            $this->endDate) = $result[0];

        $filters = new stdClass();
        $filters->degreeEquivalenceId = $this->degreeEquivalenceId;
        $this->concept = TraConcept::search($filters);
    }


    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'tra.degreeEquivalence_degreeEquivalenceId_seq\')';

        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.degreeEquivalence (
                degreeEquivalenceId,
                description,
                beginDate,
                endDate)
                 VALUES (?, ?,
                    TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                    TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'))';

        $args = array(
            $newId,
            $this->description,
            $this->beginDate,
            $this->endDate
        );

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->degreeEquivalenceId = $newId;
        }

        return $result;
    }


    /*
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE tra.degreeEquivalence
               SET description = ?,
                   beginDate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                   endDate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
             WHERE degreeEquivalenceId = ?';

        $args = array(
            $this->description,
            $this->beginDate,
            $this->endDate,
            $this->degreeEquivalenceId
        );

        return SDatabase::execute($sql, $args);
    }
}
?>