<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Armazena as regras que devem ser utilizadas para validar as solicitações por área.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 28/03/2011
 *
 * */
class TraTrainingTypeArea extends SType
{
    /**
     *
     * @var int
     */
    protected $trainingTypeAreaId;

    /**
     * Atributo extraingeiro
     *
     * @var int
     */
    protected $unitAreaId;

    /**
     * Atributo extrangeiro
     *
     * @var int
     */
    protected $trainingTypeId;
    
    /**
     * Object UnitArea
     */
    protected $unitArea;
    
    /**
     * Semestre mínimo que um solicitante deve estar neste curso
     * para poder se inscrever nesta área. Este campo não é obrigatório.
     * Se for deixado em branco, não há limitação de semestre.
     * Se for preenchido, deverá ser validado no momento da solicitação,
     * quando o candidato informa o semestre em que está.
     * A solicitação só poderá ser efetivada se o semestre atual do
     * candidato for igual ou maior do que o semestre mínimo.
     */
    protected $minimumSemester;
    
    /**
     * Duração mínima do estágio nesta área e neste curso, expressa em dias.
     * Este campo é de preenchimento opcional e, caso não seja deixado em branco,
     * deverá ser validado no momento da solicitação do candidato, verificando se
     * o período de duração informado pelo candidato é igual ou maior do que o
     * informado neste campo. Caso não seja, a solicitação não poderá ser efetivada.
     */
    protected $trainingMinimumDuration;

    /**
     * Duração máxima do estágio para esta área e curso. Dado em dias.
     */
    protected $trainingMaximumDuration;
    
    
    public function __construct($trainingTypeAreaId = null)
    {
        if ( strlen($trainingTypeAreaId) > 0 )
        {
            $this->trainingTypeAreaId = $trainingTypeAreaId;
            $this->populate();
        }
    }

    public function  __get($name)
    {
        /*
         * Obtém a unitArea
         */
        if ( $name == 'unitArea' && !(count($this->unitArea) > 0 ) && (strlen($this->unitAreaId) > 0 ) )
        {
            // Unit area
            $this->unitArea = new TraUnitArea($this->unitAreaId);
        }
        
        return parent::__get($name);
    }
    
    /**
     * Insere ou atualiza os registros na base
     *
     * @return boolean
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->trainingTypeAreaId) <= 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Remove o registro na base, através de sua chave primaria
     *
     * @return boolean
     */
    public function delete()
    {
        if ( strlen($this->trainingTypeAreaId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo. (@1)', $module, __CLASS__));
        }

        $sql = 'DELETE
                  FROM tra.trainingTypeArea
                 WHERE trainingTypeAreaId = ?';

        $args = array( $this->trainingTypeAreaId );

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->trainingTypeAreaId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $row = clone($this);
        $row->trainingTypeAreaId = null;

        return $row;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function search($filters)
    {
        $sql =  'SELECT A.trainingTypeAreaId
                   FROM tra.trainingTypeArea A
              LEFT JOIN tra.unitArea B 
                     ON A.unitAreaId=B.unitAreaId ';

        $where = '';
        $args = array( );
        if ( strlen($filters->trainingTypeAreId) > 0 )
        {
            $where .= ' AND A.trainingTypeAreId = ?';
            $args[] = $filters->trainingTypeAreId;
        }
        if ( strlen($filters->unitAreaId) > 0 )
        {
            $where .= ' AND A.unitAreaId = ?';
            $args[] = $filters->unitAreaId;
        }
        if ( strlen($filters->unitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( strlen($filters->trainingTypeId) > 0 )
        {
            $where .= ' AND A.trainingTypeId = ?';
            $args[] = $filters->trainingTypeId;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }
        
        $result = SDatabase::query($sql, $args);

        $retVal = array( );
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new TraTrainingTypeArea($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchGrid($filters)
    {
        $sql = 'SELECT A.trainingTypeAreId,
                       A.unitAreaId,
                       A.trainingTypeId
                  FROM tra.trainingTypeArea A';

        $where = '';
        if ( strlen($filters->trainingTypeAreId) > 0 )
        {
            $where .= ' AND A.trainingTypeAreId = ?';
            $args[] = $filters->trainingTypeAreId;
        }
        if ( strlen($filters->unitAreaId) > 0 )
        {
            $where .= ' AND A.unitAreaId = ?';
            $args[] = $filters->unitAreaId;
        }
        if ( strlen($filters->trainingTypeId) > 0 )
        {
            $where .= ' AND A.trainingTypeId = ?';
            $args[] = $filters->trainingTypeId;
        }

        $result = array( );
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $result = SDatabase::query($sql, $args);
        }

        return $result;
    }

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.trainingTypeAreaId,
                       A.unitAreaId,
                       A.trainingTypeId,
                       A.minimumSemester,
                       A.trainingMinimumDuration,
                       A.trainingMaximumDuration
                  FROM tra.trainingTypeArea A
                 WHERE A.trainingTypeAreaId = ?';

        $result = SDatabase::query($sql, array( $this->trainingTypeAreaId ));

        if ( strlen($result[0][0]) <= 0 )
        {
            throw new Exception(_M('Código @1 inexistente. (@1)', $module, $this->trainingTypeAreaId, __CLASS__));
        }

        list (  $this->trainingTypeAreaId,
                $this->unitAreaId,
                $this->trainingTypeId,
                $this->minimumSemester,
                $this->trainingMinimumDuration,
                $this->trainingMaximumDuration,
                ) = $result[0];        
    }

    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'tra.trainingTypeArea_trainingTypeAreaId_seq\')';

        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.trainingTypeArea
                            (trainingTypeAreaId,
                             unitAreaId,
                             trainingTypeId,
                             minimumSemester,
                             trainingMinimumDuration,
                             trainingMaximumDuration)
                      VALUES (?, ?, ?, ?, ?, ?)';

        $args = array( $newId,
                       $this->unitAreaId,
                       $this->trainingTypeId,
                       $this->minimumSemester,
                       $this->trainingMinimumDuration,
                       $this->trainingMaximumDuration);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->trainingTypeAreaId = $newId;
        }

        return $result;
    }

    /*
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE tra.trainingTypeArea
                   SET unitAreaId = ?,
                       trainingTypeId = ?,
                       minimumSemester = ?,
                       trainingMinimumDuration = ?,
                       trainingMaximumDuration = ?
                 WHERE trainingTypeAreaId = ?';

        $args = array( $this->unitAreaId,
                       $this->trainingTypeId,  
                       $this->minimumSemester,
                       $this->trainingMinimumDuration,
                       $this->trainingMaximumDuration,
                       $this->trainingTypeAreaId );

        return SDatabase::execute($sql, $args);
    }
}
?>