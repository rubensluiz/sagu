<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 07/04/2011
 *
 */
class TraEvaluationGroup extends SType
{
    /**
     * @AttributeType integer
     *
     */
    protected $evaluationGroupId;
    /**
     * @AttributeType integer
     *
     */
    protected $groupOrder;
    /**
     * @AttributeType character varying
     *
     */
    protected $description;

    /**
     * @AttributeType TraEvaluationItem array
     */
    protected $evaluationItem = array();

    
    public function __construct($evaluationGroupId = null)
    {
        if (strlen($evaluationGroupId) > 0)
        {
            $this->evaluationGroupId = $evaluationGroupId;
            $this->populate();
        }
    }

    public function search($filters)
    {
        $sql = 'SELECT evaluationgroupid
                  FROM evaluationgroup';
        $where = '';

        foreach ($filters as $key=>$value)
        {
            if ((is_scalar($value)) && (strlen($value) > 0))
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY evaluationgroupid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new EvaluationGroup($result[$i][0]);
        }

        return $retVal;
    }

    public function searchGrid($filters = null)
    {
        $sql = 'SELECT A.evaluationgroupid,
                       A.description,
                       A.grouporder
                  FROM tra.evaluationgroup A';
        $args = array();

        if (strlen($filters->evaluationGroupId) > 0)
        {
            $where.=' AND A.evaluationgroupid = ?';
            $args[] = $filters->evaluationGroupId;
        }

        if (strlen($filters->groupOrder) > 0)
        {
            $where.=' AND A.grouporder = ?';
            $args[] = $filters->groupOrder;
        }

        if (strlen($filters->description) > 0)
        {
            $where.=' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description.'%';
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY A.description';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    public static function listRecords($type = 0)
    {
        $query = SDatabase::query("SELECT evaluationGroupId, description FROM tra.evaluationGroup");

        $result = array();

        foreach ( (array) $query as $row )
        {
            $result[ $row[0] ] = $row[1];
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT evaluationgroupid,
                       grouporder,
                       description,
                       username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress
                  FROM tra.evaluationgroup
                 WHERE evaluationgroupid = ?';
        $result = SDatabase::query($sql, array($this->evaluationGroupId));

        if (!strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->evaluationGroupId,
                $this->groupOrder,
                $this->description,
                $this->userName,
                $this->dateTime,
                $this->ipAddress) = $result[0];

        if ( strlen($this->evaluationGroupId) > 0 )
        {
            $filters = new stdClass();
            $filters->evaluationGroupId = $this->evaluationGroupId;
            $this->evaluationItem = TraEvaluationItem::search($filters);
        }
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if (strlen($this->evaluationGroupId) == 0)
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        foreach ( (array) $this->evaluationItem as $item )
        {
            $item->evaluationGroupId = $this->evaluationGroupId;
            $item->save();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = "SELECT nextval('tra.evaluationgroup_evaluationgroupid_seq'::regclass)";
        $result = SDatabase::query($sql);
        $evaluationGroupId = $result[0][0];

        $sql = 'INSERT INTO tra.evaluationgroup
                            (evaluationgroupid,
                             grouporder,
                             description)
                     VALUES (?, ?, ?)';

        $args = array(
            $evaluationGroupId,
            $this->groupOrder,
            $this->description);
        
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->evaluationGroupId = $evaluationGroupId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.evaluationgroup
                   SET grouporder = ?,
                       description = ?
                 WHERE evaluationgroupid = ?';
        
        $args = array(
            $this->groupOrder,
            $this->description,
            $this->evaluationGroupId);

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if (strlen($this->evaluationGroupId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo. (@1)', $module, __CLASS__));
        }

        foreach ( (array) $this->evaluationItem as $item )
        {
            $item->delete();
        }

        $sql = 'DELETE FROM tra.evaluationgroup
                  WHERE evaluationgroupid = ?';
        
        $args = array($this->evaluationGroupId);
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->evaluationGroupId = null;
        }

        return $result;
    }
}
?>