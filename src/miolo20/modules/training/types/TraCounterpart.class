<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 2011/03/30
 *
 */
class TraCounterpart extends SType
{
    /**
     * @AttributeType integer
     *
     */
    protected $counterpartId;


    protected $addendumId;

    /**
     * @AttributeType integer
     *
     */
    protected $counterpartTypeId;
    /**
     * @AttributeType text
     *
     */
    protected $description;
    /**
     * @AttributeType integer
     *
     */
    protected $order;
    /**
     * @AttributeType boolean
     *
     */
    protected $resourceAvailable;


    /**
     * @AttributeType TraCounterpartUse
     *
     * @var <type>
     */
    protected $counterpartUse = array();

    
    protected $addendum;

    protected $counterpartType;

    
    public function __construct($counterpartId = null)
    {
        if (strlen($counterpartId) > 0)
        {
            $this->counterpartId = $counterpartId;
            $this->populate();
        }
    }


    public function  __get($name)
    {
        if ( ( $name == 'addendum' ) && ( strlen($this->addendumId) > 0 ) && $this->needCheckPopulate('addendum') )
        {
            $this->addendum = new TraAddendum($this->addendumId);
        }

        if ( ( $name == 'counterpartType' ) && ( strlen($this->counterpartTypeId) > 0 ) && $this->needCheckPopulate('counterpartType') )
        {
            $this->counterpartType = new TraCounterpartType($this->counterpartTypeId);
        }

        return parent::__get($name);
    }

    
    public static function search($filters)
    {
        $sql = 'SELECT counterpartid
              FROM tra.counterpart';
        $where = '';

        foreach ($filters as $key=>$value)
        {
            if ((is_scalar($value)) && (strlen($value) > 0))
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY counterpartid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new TraCounterpart($result[$i][0]);
        }

        return $retVal;
    }

    public function searchGrid($filters = null)
    {
        $sql = 'SELECT A.counterpartId,
                       B.description As counterpartDescription,
                       A."order",
                       A.description,
                       A.resourceavailable
                  FROM tra.counterpart A
            INNER JOIN tra.counterpartType B
                    ON (A.counterpartTypeId = B.counterpartTypeId)';
        $args = array();

        if (strlen($filters->addendumId) > 0)
        {
            $where.=' AND A.addendumId = ?';
            $args[] = $filters->addendumId;
        }

        if (strlen($filters->counterpartId) > 0)
        {
            $where.=' AND A.counterpartid = ?';
            $args[] = $filters->counterpartId;
        }

        if (strlen($filters->counterpartTypeId) > 0)
        {
            $where.=' AND A.counterparttypeid = ?';
            $args[] = $filters->counterpartTypeId;
        }

        if (strlen($filters->description) > 0)
        {
            $where.=' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description.'%';
        }

        if (strlen($filters->order) > 0)
        {
            $where.=' AND A."order" = ?';
            $args[] = $filters->order;
        }

        if (strlen($filters->resourceAvailable) > 0)
        {
            $where.=' AND A.resourceavailable = ?';
            $args[] = $filters->resourceAvailable;
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY A.counterpartid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT counterpartid,
                       counterparttypeid,
                       description,
                       "order",
                       resourceavailable,
                       addendumId,
                       username,
                       TO_CHAR(datetime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipaddress
                  FROM tra.counterpart
                 WHERE counterpartid = ?';
        $result = SDatabase::query($sql, array($this->counterpartId));

        if (!strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente. (@1)', $module, __CLASS__));
        }

        list( $this->counterpartId,
              $this->counterpartTypeId,
              $this->description,
              $this->order,
              $this->resourceAvailable,
              $this->addendumId,
              $this->userName,
              $this->dateTime,
              $this->ipAddress ) = $result[0];

        if ( strlen($this->counterpartId) > 0 )
        {
            $filters = new stdClass();
            $filters->counterpartId = $this->counterpartId;
            $this->counterpartUse = TraCounterpartUse::search($filters);
        }
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( $this->removeData )
        {
            if ( strlen($this->counterpartId) > 0 )
            {
                $retVal = $this->delete();
            }
        }
        else if (strlen($this->counterpartId) == 0)
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        foreach ( (array) $this->counterpartUse as $row )
        {
            $row->save();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = "SELECT nextval('tra.counterpart_counterpartid_seq'::regclass)";
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.counterpart (
                        counterpartid,
                        counterparttypeid,
                        description,
                        "order",
                        resourceavailable,
                        addendumId)
                    VALUES (
                        ?,
                        ?,
                        ?,
                        ?,
                        ?,
                        ?)';

        $counterpartId = $result[0][0];
        $args = array(
            $newId,
            $this->counterpartTypeId,
            $this->description,
            $this->order,
            $this->resourceAvailable,
            $this->addendumId);
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->counterpartId = $newId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.counterpart
                   SET username = ?,
                       datetime = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress = ?,
                       counterparttypeid = ?,
                       description = ?,
                       "order" = ?,
                       resourceavailable = ?,
                       addendumId = ?
                 WHERE counterpartid = ?';

        $args = array(
            $this->userName,
            $this->dateTime,
            $this->ipAddress,
            $this->counterpartTypeId,
            $this->description,
            $this->order,
            $this->resourceAvailable,
            $this->addendumId,
            $this->counterpartId);

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if (strlen($this->counterpartId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo. (@1)', $module, __CLASS__));
        }

        foreach ( (array) $this->counterpartUse as $row )
        {
            $row->delete();
        }

        $sql = 'DELETE FROM tra.counterpart
                      WHERE counterpartid = ?';
        $args = array($this->counterpartId);
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->counterpartId = null;
        }

        return $result;
    }
}
?>