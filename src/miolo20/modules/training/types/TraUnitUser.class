<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 24/03/2011
 *
 **/
/**
 * Classe responsável por representar os usuários da unidade
 */
class TraUnitUser extends SType
{
    /**
     * @var (integer) Código identificador da unidade.
     */
    protected $unitId;
    /**
     * @var (integer) Código identificador do usuário.
     */
    protected $idUser;
    /**
     * @var (object) Usuário associado a este objeto
     */
    protected $user;
    
    /**
     * Construtor da classe
     *
     * @param (integer) $unitId Chave primária da tabela
     * @param (integer) $idUser Chave primária da tabela
     */
    public function __construct($unitId = null, $idUser = null)
    {
        if ( ! (is_null($unitId) && is_null($idUser)) )
        {
            $this->unitId = $unitId;
            $this->idUser = $idUser;
            $this->populate();
        }
    }

    /*
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        $filters = new stdClass();
        $filters->unitId = $this->unitId;
        $filters->idUser = $this->idUser;
        $retVal = false;

        if ( count($this->search($filters)) == 0 )
        {
            $retVal = $this->insert();
        }
        
        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM tra.unitUser
                      WHERE unitId = ?
                        AND idUser = ?';

        $args = array($this->unitId,
                      $this->idUser);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->unitId = null;
            $this->idUser = null;
        }

        return $result;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT unitId,
                       idUser
                  FROM tra.unitUser';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            if ( $key != 'orderBy' )
            {
                $where .= ' AND ' . $key . ' = ' . $value;
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        if ( strlen($filters->orderBy) > 0 )
        {
            $sql .= " ORDER BY {$filters->orderBy} ";
        }

        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new TraUnitUser($result[$i][0],$result[$i][1]);
        }

        return $retVal;
    }


    public function searchGrid($filters = null)
    {
        $sql = 'SELECT A.unitId,
                       A.idUser
                  FROM tra.unitUser A
            INNER JOIN tra.unit B
                    ON (A.unitId = B.unitId)';

        $where = '';
        if ( strlen($filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId;

        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE UNACCENT(?)';
            $args[] = $filters->description . '%';
        }
 
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $args);

        return $result;
    }

    /*
     * Private methods
     */

    /*
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();

        $sql = 'SELECT unitId,
                       idUser
                  FROM tra.unitUser
                 WHERE unitId = ?
                   AND idUser = ?';

        $args = array( $this->unitId,
                       $this->idUser );

        $result = SDatabase::query($sql, $args);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Registro nã existe', $module));
        }

        list ( $this->unitId,
               $this->idUser ) = $result[0];

        $filters = new stdClass();
        $filters->unitId = $this->unitId;

        // Business user
        $busUser = new BusinessAdminBusUser();
        
        // Objeto usuário
        $this->user = $busUser->getUser($this->idUser);
    }

    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'INSERT INTO tra.unitUser
                            (unitId,
                             idUser)
                     VALUES (?, ?)';

        $args = array( $this->unitId,
                       $this->idUser );

        $result = SDatabase::execute($sql, $args);

        return $result;
    }

    /*
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        // Não implementado
    }
}
?>