<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 24/03/2011
 *
 **/
/**
 * Armazena as pessoas juridicas de uma unidade
 */
class TraUnitLegalPerson extends SType
{
    protected $unitId;

    protected $personId;

    protected $legalPerson;

    /**
     * Atributo virtual, apenas para facilitar o acesso
     * 
     * @var <type>
     */
    protected $personName;

    
    public function __construct($unitId = null, $personId = null)
    {
        if ( (strlen($unitId) > 0) && (strlen($personId) > 0) )
        {
            $this->unitId = $unitId;
            $this->personId = $personId;

            $this->populate();
        }
    }

    
    /**
     * Popula dados
     */
    public function populate()
    {
        $MIOLO = MIOLO::getInstance();

        $busLegalPerson = new BusinessBasicBusLegalPerson();
        $this->legalPerson = $busLegalPerson->getLegalPerson($this->personId);

        $this->personName = $this->legalPerson->name;
    }

    
    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        if ($this->removeData)
        {
            $this->delete();
        }
        else
        {
            $filters = new stdClass();
            $filters->personId = $this->personId;
            $filters->unitId = $this->unitId;
            $find = TraUnitLegalPerson::search($filters);
            if ( (!$find) && ((strlen($this->personId) > 0) && (strlen($this->unitId) > 0)) )
            {
                return $this->insert();
            }
        }
        
        return false;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        if ( (strlen($this->unitId) == 0) && (strlen($this->personId) == 0) )
        {
            throw new Exception(_M('Não é possível excluir uma pessoa jurídica.', $module));
        }

        $sql = 'DELETE FROM tra.unitLegalPerson
                  WHERE unitId = ?
                    AND personId = ?';

        $args = array($this->unitId, $this->personId);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->unitId = null;
            $this->personId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function search($filters)
    {
        $sql = 'SELECT unitId,
                   personId
                  FROM tra.unitLegalPerson';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            if ( is_scalar($value) && strlen($value) > 0)
            {
                $where .= ' AND ' . $key . ' = ' . $value;
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new TraUnitLegalPerson($result[$i][0], $result[$i][1]);;
        }

        return $retVal;
    }

    
    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'INSERT INTO tra.unitLegalPerson
                            (unitId,
                             personId)
                     VALUES (?, ?)';

        $args = array(
            $this->unitId,
            $this->personId);

        $result = SDatabase::execute($sql, $args);
        
        return $result;
    }

    
    /*
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
    }
}
?>