<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 07/04/2011
 *
 */
class TraEvaluationItem extends SType
{
    /**
     * @AttributeType integer
     *
     */
    protected $evaluationItemId;
    /**
     * @AttributeType integer
     *
     */
    protected $evaluationGroupId;
    /**
     * @AttributeType integer
     *
     */
    protected $degreeOrder;
    /**
     * @AttributeType text
     *
     */
    protected $lowestDegreeDescription;
    /**
     * @AttributeType text
     *
     */
    protected $highestDegreeDescription;
    /**
     * @AttributeType character varying
     *
     */
    protected $username;
    /**
     * @AttributeType timestamp with time zone
     *
     */
    protected $datetime;
    /**
     * @AttributeType inet
     *
     */
    protected $ipaddress;

    
    public function __construct($evaluationItemId = null)
    {
        if ((strlen($evaluationItemId) > 0))
        {
            $this->evaluationItemId = $evaluationItemId;
            $this->populate();
        }
    }

    public function search($filters = null)
    {
        $sql = 'SELECT A.evaluationitemid
              FROM tra.evaluationitem A
        INNER JOIN tra.evaluationGroup B
                ON (A.evaluationGroupId = B.evaluationGroupId)';
        $where = '';

        foreach ( (array)$filters as $key=>$value)
        {
            if ((is_scalar($value)) && (strlen($value) > 0))
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY B.groupOrder, A.degreeOrder';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new TraEvaluationItem($result[$i][0]);
        }

        return $retVal;
    }

    public function searchGrid($filters = null)
    {
        $sql = 'SELECT evaluationitemid,
                   evaluationgroupid,
                   degreeorder,
                   lowestdegreedescription,
                   highestdegreedescription,
                   username,
                   TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                   ipaddress
              FROM tra.evaluationitem';
        $args = array();

        if (strlen($filters->evaluationItemId) > 0)
        {
            $where.=' AND evaluationitemid = ?';
            $args[] = $filters->evaluationItemId;
        }

        if (strlen($filters->evaluationGroupId) > 0)
        {
            $where.=' AND evaluationgroupid = ?';
            $args[] = $filters->evaluationGroupId;
        }

        if (strlen($filters->degreeOrder) > 0)
        {
            $where.=' AND degreeorder = ?';
            $args[] = $filters->degreeOrder;
        }

        if (strlen($filters->lowestDegreeDescription) > 0)
        {
            $where.=' AND UNACCENT(lowestdegreedescription) ILIKE UNACCENT(?) ';
            $args[] = $filters->lowestDegreeDescription.'%';
        }

        if (strlen($filters->highestDegreeDescription) > 0)
        {
            $where.=' AND UNACCENT(highestdegreedescription) ILIKE UNACCENT(?) ';
            $args[] = $filters->highestDegreeDescription.'%';
        }

        if (strlen($where) > 0)
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY evaluationitemid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT evaluationitemid,
                       evaluationgroupid,
                       degreeorder,
                       lowestdegreedescription,
                       highestdegreedescription,
                       username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress
                  FROM tra.evaluationitem
                 WHERE evaluationitemid = ?';
        $result = SDatabase::query($sql, array($this->evaluationItemId));

        if (!strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente. (@1)', $module, __CLASS__));
        }

        list($this->evaluationItemId,
                $this->evaluationGroupId,
                $this->degreeOrder,
                $this->lowestDegreeDescription,
                $this->highestDegreeDescription,
                $this->userName,
                $this->dateTime,
                $this->ipAddress) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ($this->removeData)
        {
            $this->delete();
            return true;
        }

        if (strlen($this->evaluationItemId) == 0)
        {
            $retVal = $this->insert();
        } else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = "SELECT nextval('tra.evaluationitem_evaluationitemid_seq'::regclass)";
        $result = SDatabase::query($sql);
        $evaluationItemId = $result[0][0];

        $sql = 'INSERT INTO tra.evaluationitem
                            (evaluationitemid,
                             evaluationgroupid,
                             degreeorder,
                             lowestdegreedescription,
                             highestdegreedescription)
                     VALUES (?,
                        ?,
                        ?,
                        ?,
                        ?)';
        
        $args = array(
            $evaluationItemId,
            $this->evaluationGroupId,
            $this->degreeOrder,
            $this->lowestDegreeDescription,
            $this->highestDegreeDescription
        );
        
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->evaluationItemId = $evaluationItemId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE tra.evaluationitem
                   SET evaluationgroupid = ?,
                       degreeorder = ?,
                       lowestdegreedescription = ?,
                       highestdegreedescription = ?
                 WHERE evaluationitemid = ?';
        
        $args = array(
            $this->evaluationGroupId,
            $this->degreeOrder,
            $this->lowestDegreeDescription,
            $this->highestDegreeDescription,
            $this->evaluationItemId);
        
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if (strlen($this->evaluationItemId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM tra.evaluationitem
                      WHERE evaluationitemid = ?';
        $args = array($this->evaluationItemId);
        $result = SDatabase::execute($sql, $args);

        if ($result)
        {
            $this->evaluationItemId = null;
        }

        return $result;
    }
}
?>