<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela tra.unitArea
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 29/03/2011
 */

class TraUnitArea extends SType
{
    /**
     * Table fields
     */
    /**
     * Identificador único da área da unidade.
     */
    protected $unitAreaId;
    /**
     * Organizadores de equipe
     *
     * @var TraTeamOrganizer
     */
    protected $teamOrganizer = array();
    /**
     * Descrição da área.
     */
    protected $preceptorId;
    
    protected $preceptor;
    /**
     * Descrição da área.
     */
    protected $unitId;
    /**
     * Descrição da área.
     */
    protected $areaId;
    /**
     * Descrição da área.
     */
    protected $beginDate;
    /**
     * Descrição da área.
     */
    protected $endDate;
    /**
     * Descrição da área.
     */
    protected $vacancies;
    /**
     * Unidade
     */
    protected $unit;
    /**
     * Area
     */
    protected $area;
    
    
    protected $courses;
    
    protected $teams;
    
    protected $trainingTypeArea;

    
    /**
     * Este atributo nao existe mais na tabela tra.unitArea
     * Foi mantido para poder filtrar nas buscas
     *
     * @var mixed
     */
    protected $teamOrganizerId;
    
    protected $documents = array();
    
    /**
     * Indica se a informação do posto onde o estágio é realizado deve aparecer ou não.
     * 
     * @var type 
     */
    protected $requireTrainingPlace;
    

    private static $sqlTeamOrganizer = ' ? IN (SELECT personId
                                 FROM tra.teamOrganizer _TO
                                WHERE _TO.unitAreaId = A.unitAreaId) ';


    /**
     * Construtor da classe
     *
     * @param (integer) $unitAreaId Chave primária da tabela
     */
    public function __construct($unitAreaId = null)
    {
        if ( !is_null($unitAreaId) )
        {
            $this->unitAreaId = $unitAreaId;
            $this->populate();
        }
    }

    public function  __get($name)
    {
        //Load on demmand
        if ( ($name == 'area') && ( strlen($this->areaId) > 0 ) && ( !$this->area ) )
        {
            //Objeto area
            $this->area = new TraArea($this->areaId);
        }

        //Load on demmand
        if ( ($name == 'unit') && ( strlen($this->unitId) > 0 ) && ( !$this->unit ) )
        {
            //Objeto unidade
            $this->unit = new TraUnit($this->unitId);
        }
        
        if ( ($name == 'courses') && ( strlen($this->unitAreaId) > 0 ) && ( !$this->courses ) )
        {
            //Objeto unidade
            $this->courses = TraCourseArea::search( (object) array('unitAreaId' => $this->unitAreaId) );
        }
        
        if ( ($name == 'teams') && ( strlen($this->unitAreaId) > 0 ) && ( !$this->teams ) )
        {
            //Objeto unidade
            $this->teams = TraTeam::search( (object) array('unitAreaId' => $this->unitAreaId) );
        }
        
        if ( ($name == 'trainingTypeArea') && ( strlen($this->unitAreaId) > 0 ) && ( $this->needCheckPopulate('trainingTypeArea') ) )
        {
            $this->trainingTypeArea = TraTrainingTypeArea::search( (object) array('unitAreaId' => $this->unitAreaId) );
        }
        
        if ( ($name == 'preceptor') && ( strlen($this->preceptorId) > 0 ) && ( $this->needCheckPopulate('preceptor') ) )
        {
            $MIOLO = MIOLO::getInstance();
            $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
            $this->preceptor = $busPhysicalPerson->getPhysicalPerson( $this->preceptorId );
        }
        
        return parent::__get($name);
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        if ( $this->hasConflict() )
        {
            throw new Exception( _M('Não é possível cadastrar um unidade para a mesma área que esteja no mesmo período de início e fim.', $module) );
        }
        
        if ( ( strlen($this->endDate) > 0 ) && ( strlen($this->beginDate) > 0 ) )
        {
            if ( SAGU::compareTimestamp($this->beginDate, '>', $this->endDate) )
            {
                throw new Exception( _M('A data de início não pode ser maior que a data de fim.', $module) );
            }
        }
        
        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->unitAreaId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        //Remove todos e insere novamente
        $filters = new stdClass();
        $filters->unitAreaId = $this->unitAreaId;
        $rows = (array) TraTeamOrganizer::search($filters);
        foreach ( $rows as $row )
        {
            $row->delete();
        }
        foreach ( (array)$this->teamOrganizer as $to )
        {
            $to->unitAreaId = $this->unitAreaId;
            $to->save();
        }
        foreach ( (array)$this->documents as $document )
        {
            $document->unitAreaId = $this->unitAreaId;
            $document->save();
        }
        foreach ( (array)$this->courses as $course )
        {
            $course->unitAreaId = $this->unitAreaId;
            $course->save();
        }
        foreach ( (array)$this->teams as $team )
        {
            $team->unitAreaId = $this->unitAreaId;
            $team->save();
        }
        foreach ( (array)$this->trainingTypeArea as $tta )
        {
            $tta->unitAreaId = $this->unitAreaId;
            $tta->save();
        }
        
        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $this->__get('teamOrganizer');
        foreach ( $this->teamOrganizer as $to )
        {
            $to->delete();
        }
        
        $this->__get('documents');
        foreach ( (array)$this->documents as $document )
        {
            $document->delete();
        }
        
        $this->__get('courses');
        foreach ( (array)$this->courses as $course )
        {
            $course->delete();
        }
        
        $this->__get('teams');
        foreach ( (array)$this->teams as $team )
        {
            $team->delete();
        }
        
        $this->__get('trainingTypeArea');
        foreach ( (array)$this->trainingTypeArea as $tta )
        {
            $tta->delete();
        }
        
        $sql = 'DELETE FROM tra.unitarea
                      WHERE unitAreaId = ?';

        $params = array();
        $params[] = $this->unitAreaId;
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->unitAreaId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $unitArea = clone($this);
        $unitArea->unitAreaId = null;

        return $unitArea;
    }

    /**
     * Lista as areas vigentes da unidade com o código do unitArea
     * 
     * @param <object> $filters
     * @return <array>
     */
    public static function listCurrentUnitAreaByUnit($filters = null)
    {
        $sql = 'SELECT A.unitAreaId,
                       B.description
                  FROM tra.unitArea A
            INNER JOIN tra.area B
                    ON (A.areaId = B.areaId)
                 WHERE 1=1';

        //
        if ( !MUtil::getBooleanValue($filters->listAll) )
        {
            $sql .= ' AND (now()::date BETWEEN A.beginDate AND (CASE WHEN A.endDate IS NULL THEN now()::date ELSE A.endDate END)) ';
        }
        
        // Filtra apenas por areas que estao incluidas neste curso
        if ( strlen($filters->courseId) > 0 )
        {
            $sql .= ' AND EXISTS(SELECT 1 FROM tra.courseArea CA WHERE CA.courseId = ? AND CA.unitAreaId = A.unitAreaId)';
            $params[] = $filters->courseId;
        }
        
        if ( strlen($filters->trainingTypeId ) > 0 )
        {
            $sql .= ' AND EXISTS(SELECT 1 FROM tra.trainingTypeArea TTA WHERE TTA.unitareaid = A.unitareaId AND TTA.trainingTypeId = ?)';
            $params[] = $filters->trainingTypeId;
        }
        
        
        if ( strlen($filters->unitId)>0 )
        {
            $sql .= ' AND A.unitId = ?';
            $params[] = $filters->unitId;
        }
        
        if ( strlen($filters->preceptorId)>0 )
        {
            $sql .= ' AND A.preceptorId = ?';
            $params[] = $filters->preceptorId;
        }

        // Filtra se personId passado é organizador
        if ( strlen($filters->teamOrganizerId) > 0 )
        {
            $sql .= " AND " . self::getSQLExpressionIsTeamOrganizer($filters->teamOrganizerId);
        }

        $sql .= ' ORDER BY B.description ';

        $result = SDatabase::query($sql, $params);
        
        $retVal = array();
        if( is_array($result) )
        {
            foreach( $result as $line )
            {
                $uniAreaId = $line[0];
                $areaDescription = $line[1];
                $retVal[$uniAreaId] = $areaDescription;
            }
        }
        return $retVal;
    }


    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT A.unitAreaId,
                       A.preceptorId,
                       A.unitId,
                       A.areaId,
                       A.beginDate,
                       A.endDate,
                       A.vacancies
                  FROM tra.unitArea A';

        $params = array();
        foreach ( (array)$filters as $key => $value )
        {
            //Filtra por teamOrganizer's
            if ( $key == 'teamOrganizerId' )
            {
                $_where = array();
                foreach ( (array) $value as $val )
                {
                    $_where[] = self::$sqlTeamOrganizer;
                    $params[] = $val;
                }
                $where .= ' AND (' . implode(' OR ', $_where) . ')';
            }
            else
            {
                $where .= ' AND A.' . $key . ' = ?';
                $params[] = $value;
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new TraUnitArea($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchGrid($filters)
    {
        $sql = 'SELECT A.unitAreaId,
                       A.unitId,
                       B.description,
                       A.areaId,
                       C.description,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as beginDate,
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as endDate,
                       A.vacancies,
                       A.preceptorId,
                       E.name
                  FROM tra.unitArea A
            INNER JOIN tra.unit B
                    ON (A.unitId = B.unitId)
            INNER JOIN tra.area C
                    ON (A.areaId = C.areaId)
       INNER JOIN ONLY basphysicalperson E
                    ON (A.preceptorId = E.personId)';

        $params = array();
        if ( $filters->unitAreaId )
        {
            $where .= ' AND A.unitAreaId = ?';
            $params[] = $filters->unitAreaId;
        }
        if ( $filters->unitId )
        {
            $where .= ' AND A.unitId = ?';
            $params[] = $filters->unitId;
        }
        if ( $filters->areaId )
        {
            $where .= ' AND A.areaId = ?';
            $params[] = $filters->areaId;
        }
        
        if ( ( strlen($filters->beginDate) > 0 ) || ( strlen($filters->endDate) > 0 ) )
        {
            $where .= " AND ( A.beginDate >= COALESCE(?, NOW()-'999 years'::interval)
                              OR ? IS NULL )
                        AND ( A.endDate <= COALESCE(?, NOW()+'999 years'::interval)
                              OR COALESCE(?, A.endDate) IS NULL )";
            $params[] = $filters->beginDate;
            $params[] = $filters->beginDate;
            $params[] = $filters->endDate;
            $params[] = $filters->endDate;
        }
        
        if ( $filters->vacancies )
        {
            $where .= ' AND A.vacancies = ?';
            $params[] = $filters->vacancies;
        }
        if ( $filters->teamOrganizerId )
        {
            //Permite passar um integer para filtrar apenas por um teamOrganizer
            $organizers = (array) $filters->teamOrganizerId;

            $_where = array();
            foreach ( $organizers as $teamOrganizerId )
            {
                $_where[] = self::$sqlTeamOrganizer;
                $params[] = $teamOrganizerId;
            }
            $where .= ' AND (' . implode(' OR ', $_where) . ')';
        }
        if ( $filters->preceptorId )
        {
            $where .= ' AND A.preceptorId = ?';
            $params[] = $filters->preceptorId;
        }
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY  A.unitId, A.areaId';
        }

        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT unitAreaId,
                       preceptorId,
                       unitId,
                       areaId,
                       TO_CHAR(beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as beginDate,
                       TO_CHAR(endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as endDate,
                       vacancies,
                       requireTrainingPlace,
                       userName,
                       dateTime,
                       ipAddress
                  FROM tra.unitArea
                 WHERE unitAreaId = ?';

        $params = array();
        $params[] = $this->unitAreaId;

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Área @1 inexistente.', $module, $this->unitAreaId));
        }

        list ( $this->unitAreaId,
               $this->preceptorId,
               $this->unitId,
               $this->areaId,
               $this->beginDate,
               $this->endDate,
               $this->vacancies,
               $this->requireTrainingPlace,
               $this->userName,
               $this->dateTime,
               $this->ipAddress) = $result[0];

        $filters = new stdClass();
        $filters->unitAreaId = $this->unitAreaId;
        $this->teamOrganizer = TraTeamOrganizer::search($filters);
        
        $filters = new stdClass();
        $filters->unitAreaId = $this->unitAreaId;
        $this->documents = TraDocument::search($filters);
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'tra.unitareacourse_unitareacourseid_seq\')';
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO tra.unitArea
                            (unitAreaId,
                             preceptorId,
                             unitId,
                             areaId,
                             beginDate,
                             endDate,
                             vacancies,
                             requireTrainingPlace)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             ?,
                             ?)';

        $params = array();
        $params[] = $newId;
        $params[] = $this->preceptorId;
        $params[] = $this->unitId;
        $params[] = $this->areaId;
        $params[] = $this->beginDate;
        $params[] = $this->endDate;
        $params[] = $this->vacancies;
        $params[] = $this->requireTrainingPlace;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->unitAreaId = $newId;
        }

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE tra.unitArea
                   SET preceptorId = ?,
                       unitId = ?,
                       areaId = ?,
                       beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       endDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       vacancies = ?,
                       requireTrainingPlace = ?
                 WHERE unitAreaId = ?';

        $params = array();
        $params[] = $this->preceptorId;
        $params[] = $this->unitId;
        $params[] = $this->areaId;
        $params[] = $this->beginDate;
        $params[] = $this->endDate;
        $params[] = $this->vacancies;
        $params[] = $this->requireTrainingPlace;
        $params[] = $this->unitAreaId;

        return SDatabase::execute($sql, $params);
    }


    /**
     * Obtem a matriz com o cross table de vagas por equipe, dia a dia, desde a data inicial até a data final
     */
    public static function getTeamAllocation($unitAreaId, $beginDate, $endDate)
    {
        $module = SAGU::getFileModule(__FILE__);
        $return = new stdClass();

        // Argumentos para o select de total de vagas por unidade area
        $args = array();
        $args[] = $unitAreaId;
        $args[] = $unitAreaId;
        $args[] = TraSubscription::APPROVED;
        
        //Busca equipes ativas e que pertencem ao $unitAreaId
        $filters = new stdClass();
        $filters->unitAreaId = $unitAreaId;
        $filters->betweenDates = array($beginDate, $endDate);
        $teams = $return->teams = (array) TraTeam::search($filters);

        if ( count($teams) <= 0 )
        {
//            throw new Exception( _M('Nenhuma equipe encontrada para este período e área de unidade!', $module) );
        }

        //Gera subselects dinamicos para CADA team
        $teamVacancy = array();
        foreach ( (array) $teams as $row )
        {
            $teamVacancy[] = '
            -- Pega o total de vagas por equipe que se encaixam nos periodos
            COALESCE((
                    SELECT SUM(vacancies)
                      FROM tra.team
                     WHERE teamid = ?
                       AND dia BETWEEN TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AND TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                       AND dia >= beginDate
                       AND (endDate IS NULL OR dia <= endDate)
            ), 0) -

            -- Desconta o total de inscritos nesta equipe neste período
            (SELECT COUNT(*)
               FROM tra.subscriptionTeam
              WHERE teamId = ?
                AND dia BETWEEN TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AND TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                AND dia BETWEEN beginDate AND endDate
            )

                AS "team_' . $row->teamId . '"';
            
            $args[] = $row->teamId;
            $args[] = $beginDate;
            $args[] = $endDate;

            $args[] = $row->teamId;
            $args[] = $beginDate;
            $args[] = $endDate;
        }

        // Gera string sql
        $sqlTeamVacancy = count($teamVacancy) > 0 ? ', ' . implode(',', $teamVacancy) : '';

        //Obtem a lista identica que aparece na grid (GrdTeamAllocation) - dia por dia entre o periodo informado
        //Contatena junto os sqls da variavel $teamVacancy
        $sql = 'SELECT TO_CHAR(A.dia, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),

                    -- Conta (total de vagas para esta unidade area - inscritos aprovados cuja solicitacao esta entre esta data)
                    (SELECT vacancies FROM tra.unitArea UA WHERE UA.unitAreaId = ?) - 
                         (SELECT COUNT(*)
                            FROM tra.subscription S
                      INNER JOIN tra.request R
                              ON S.requestId = R.requestId
                           WHERE R.unitAreaId = ?
                             AND S.status = ?
                             AND (dia BETWEEN R.beginDate AND R.endDate))
                
                   ' . $sqlTeamVacancy . '
              FROM (SELECT generate_series(
                        TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), \'1 days\')::date AS dia) A';
        $args[] = $beginDate;
        $args[] = $endDate;

        $result = $return->result  = (array) SDatabase::query($sql, $args);

        return $return;
    }
    
    
    /**
     * Verifica se ja existe uma area da unidade em conflito
     * OBS: Caso endDate seja NULL, é contado como período de fim indeterminado (infinito)
     *
     * @param int $unitId
     * @param int $areaId
     * @param string $beginDate
     * @param string $endDate
     * 
     * @return boolean
     */
    public function hasConflict()
    {
        //FIXME Terminar logica desta funcao
//        $sql = "SELECT COUNT(*) > 0
//                  FROM tra.unitArea UA
//                 WHERE UA.unitId = ?
//                   AND UA.areaId = ?
//                   AND (CASE WHEN COALESCE(?, UA.endDate) IS NULL
//                        THEN
//                            1=1 -- Nao deve permitir mais de um endDate = NULL
//                        ELSE
//                            (CASE WHEN UA.endDate IS NOT NULL
//                             THEN
//                             END)
//                        END)";
//        $query = SDatabase::query($sql, array($this->unitId, $this->areaId, $this->endDate, $this->beginDate, $this->endDate));
        
        return $query[0][0] == DB_TRUE;
    }
    
    
    /**
     * Obtem expressao SQL que verifica se pessoa passada é organizador de equipe
     *  da unidade/Area da linha atual do SQL.
     * 
     * Foi feito uma funcao devido esta logica estar repetindo em varios lugares.
     * 
     * @param int $personId
     * @param string $tableAlias Alias da tabela SQL que contem o campo "unitAreaId"
     */
    public static function getSQLExpressionIsTeamOrganizer($personId, $tableAlias = 'A')
    {
        $sqlUnit = "
            SELECT COUNT(*)
              FROM tra.unitUser UU
             WHERE UU.unitId = (SELECT UA.unitId FROM tra.unitArea UA WHERE UA.unitAreaId = {$tableAlias}.unitAreaId)
               AND UU.idUser = (SELECT idUser FROM miolo_user WHERE login = (
                    SELECT PP.mioloUsername FROM ONLY basPhysicalPerson PP WHERE PP.personId = '{$personId}' ))";

        $sqlTO = "SELECT COUNT(*) FROM tra.teamOrganizer WHERE unitAreaId = {$tableAlias}.unitAreaId AND personId = '{$personId}'";

        return " ( (({$sqlUnit}) > 0) OR (($sqlTO) > 0) ) ";
    }
}
?>