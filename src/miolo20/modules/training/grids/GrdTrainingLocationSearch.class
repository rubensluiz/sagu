<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 24/03/2011
 *
 **/
class GrdTrainingLocationSearch extends SGrid
{
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $columns[] = new MGridColumn( _M('Código de inscrição',$module), 'right', true, null, false, null, true );
        $columns[] = new MGridColumn( _M('Código de inscrição em equipe',$module), 'right', true, null, false, null, true );
        $columns[] = new MGridColumn( _M('Foto', $module), 'right', true, null, true, null, false );
        $columns[] = new MGridColumn( _M('Nome', $module), 'left', true, null, true, null, true );
        $columns[] = new MGridColumn( _M('Telefone', $module), 'left',  true, null, true, null, true );
        $columns[] = new MGridColumn( _M('E-mail', $module), 'left',  true, null, true, null, true );
        $columns[] = new MGridColumn( _M('Instituição', $module), 'left',  true, null, true, null, true );
        $columns[] = new MGridColumn( _M('Semestre', $module), 'left',  true, null, true, null, true );
        $columns[] = new MGridColumn( _M('Início', $module), 'left',  true, null, true, null, true );
        $columns[] = new MGridColumn( _M('Término', $module), 'left',  true, null, true, null, true );
        $columns[] = new MGridColumn( _M('Equipe', $module), 'left',  true, null, true, null, true );
        $columns[] = new MGridColumn( _M('Nota final', $module), 'right',  true, null, true, null, true );
        $columns[] = new MGridColumn( _M('Status', $module), 'left',  true, null, true, TraSubscription::listStatus(), true );

        $primaryKey = array('subscriptionId' => '%0%', 'subscriptionTeamId' => '%1%');

        parent::__construct($filters, $columns, __CLASS__, $primaryKey);

        $this->actions = array();
        $this->pageLength = 0;

        //Avaliar
        $href = $MIOLO->getActionURL($module, 'main:process:trainingEvaluation', null, array('subscriptionId' => '%0%', 'subscriptionTeamId' => '%1%', 'preceptorTeams'=>$filters->preceptorTeams, 'isFromPreceptor' => 1));
        $this->addActionIcon(_M('Avaliar', $module), 'default-16x16.png', $href);

        //Excluir avaliacao
        $href = $MIOLO->getActionURL($module, 'main:process:trainingEvaluation', null, array('subscriptionId' => '%0%', 'subscriptionTeamId' => '%1%', 'event' => 'tbBtnDelete_click'));
        $this->addActionIcon(_M('Excluir avaliação', $module), 'button_drop.png', $href);
        
        if( !SAGU::userIsFromServices() )
        {
            //Consultas Diversas
            $href = $MIOLO->getActionURL($module, 'main', null, array('personId' => '%2%','action'=>'btnSearch:click'));
            $this->addActionIcon(_M('Consultas diversas', $module), 'search-20x20.png', $href);
        }
        $this->setRowMethod($this, 'myRowMethod');
    }

    public function myRowMethod($i, $row, $actions, $columns)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $personId = $this->data[$i][2];

        //Business file
        $busFile = new BusinessBasicBusFile();
        //Business person
        $busPerson = new BusinessBasicBusPerson();
        //Person
        $person = $busPerson->getPerson($personId);
        //fileId
        $fileId = $person->photoId;

        $path = $busFile->getUrl($fileId, array('permission' => true));

        $file = null;
        if( strlen($fileId)>0 )
        {
            $personFile = new MImage('personFile', NULL, $path, 'width="' . (int) SAGU::getParameter('BASIC', 'PHOTO_WIDTH') . '" height="' . (int)SAGU::getParameter('BASIC', 'PHOTO_HEIGHT') . '"');
            $file = $personFile->generate();
        }
        
        $columns[2]->control[$i]->setValue( $file );
    }
}
?>
