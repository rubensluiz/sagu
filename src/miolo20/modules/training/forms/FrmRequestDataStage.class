<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelo passo 2 da solicitação de estágio.
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 20/12/2010
 */
class FrmRequestDataStage extends SStepByStepForm
{
    public function __construct($steps = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        }
    }

    /**
     * Default method to define fields
     */
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        
        // Load data
        $data = $this->getStepDataByForm(__CLASS__);
        
        $allData = $this->getStepData();
        $this->page->OnLoad("saguDoAjax('changeUnitId', 'divUnitArea', false, ''); return false;"); 
        
        //$this->setFormValue('unitAreaId', $allData->unitAreaId);                        

        // Training type long description
        $trainingTypeId = (strlen(MIOLO::_REQUEST('trainingTypeId')) > 0 ? MIOLO::_REQUEST('trainingTypeId') : $data->trainingTypeId );
        $div = null;
        $listUnit = array();
        if( strlen($trainingTypeId) > 0 )
        {
            $filters = new stdClass();
            $filters->trainingTypeId = $trainingTypeId;
            $listUnit = TraUnit::listUnit($filters);

            $msg = (count($listUnit) <= 0) ? _M('Não há unidades disponíveis para a modalidade selecionada.', $module) : null;

            $trainingType = new TraTrainingType($trainingTypeId);
            $longDescrition = new MTextLabel('longDescription', $msg);

            // Div Long Description
            $div = new MDiv('divLongDescription', $longDescrition);
            $div->addBoxStyle('display', 'inline');
        }

        // Field trainingType
        $trainingTypeLabel = new MText('trainingTypeLabel', _M('Modalidade', $module) . ':');
        $trainingTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $trainingTypeLabel->setClass('m-caption m-caption-required');
        $_trainingTypeId = new MSelection('trainingTypeId', $this->getFormValue('trainingTypeId', $data->trainingTypeId), null, TraTrainingType::listRecords());
        $_trainingTypeId->setJsHint(_M('Informe a modalidade', $module));
        $_trainingTypeId->addBoxStyle('display', 'inline');
        $_trainingTypeId->setAutoPostBack(true);
        $ctnTrainingType = new MHContainer('ctnTrainingType', array($trainingTypeLabel, $_trainingTypeId, $div));
        $fields[] = $ctnTrainingType;

        // Field institution
        $agreementId = null;
        $institution = null;               
        if( $trainingType->requireInstitution == DB_TRUE )
        {
            // Quando for tipo CURRICULAR, lista instituicoes com base nos convenios
            if ( $trainingTypeId == TraTrainingType::TYPE_CURRICULAR )
            {
                $agreementList = array();
                $filtersAgreements = new stdClass();
                $filtersAgreements->active = true; //Filtra somente convênios ativos
                $agreements = TraAgreement::search($filtersAgreements);
                
                foreach ( (array) $agreements as $agreement )
                {
                    $agreementList[ $agreement->agreementId ] = $agreement->legalPerson->name;
                }
                
                $fields[] = $agreementId = new MSelection('agreementId', $this->getRequestValue('agreementId', $data->agreementId), _M('Instituição de origem', $module), $agreementList);
                $agreementId->setJsHint(_M('Informe sua instituição de origem', $module));
                $agreementId->addAttribute('onchange', SForm::getAjaxAction('getCourseField', 'divCourse', false));
                $validators[] = new MRequiredValidator('agreementId', _M('Instituição de origem', $module));
            }
            else
            {
                $institution = new MTextField('institution',  $this->getFormValue('institution', $data->institution), _M('Instituição de origem', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $institution->addAttribute('maxlength', '255');
                $fields[] = $institution;
                
                $institution->setJsHint(_M('Informe sua instituição de origem', $module));
                $validators[] = new MRequiredValidator('institution', _M('Instituição de origem', $module));
            }
        }
        
        // Caso campos nao existam, cria ficticio (estava ocorrendo erro no validator)
        if ( ! $agreementId )
        {
            $fields[] = new SHiddenField('agreementId');
        }
        if ( ! $institution )
        {
            $fields[] = new SHiddenField('institution');
        }

        // Field courseid
        $_args = new stdClass();
        $_args->agreementId = $this->getFormValue('agreementId', $data->agreementId);
        $_args->courseId = $this->getFormValue('courseId', $data->courseId);
        $_args->trainingTypeId = $this->getFormValue('trainingTypeId', $data->trainingTypeId);
        $fields[] = new MDiv('divCourse', $this->getCourseField($_args) );

        // Field semester
        if ( $trainingType->requireSemester == TraTrainingType::REQUIRE_SEMESTRE )
        {
            $fields[] = $semester = new MTextField('semester', $this->getFormValue('semester', $data->semester), _M('Semestre', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $semester->setJsHint(_M('Informe seu semestre atual',$module));
            $validators[] = new MIntegerValidator('semester', _M('Semestre',$module), 'required');
        }
        elseif ( $trainingType->requireSemester == TraTrainingType::REQUIRE_RESIDENCIA )
        {
            $fields[] = $semester = new MSelection('semester', $this->getFormValue('semester', $data->semester), _M('Período de residência'), array(
                TraTrainingType::PERIODO_RESIDENCIA_R1 => 'R1',
                TraTrainingType::PERIODO_RESIDENCIA_R2 => 'R2',
                TraTrainingType::PERIODO_RESIDENCIA_R3 => 'R3'
            ));
            $validators[] = new MIntegerValidator('semester', _M('Período de residência',$module), 'required');
        }

        // Field unit
        $unit = new MSelection('unitId', $this->getFormValue('unitId', $data->unitId), _M('Unidade', $module), $listUnit);
        $unit->setJsHint(_M('Informe a unidade', $module));
        $unit->addAttribute('onChange', $this->getAjaxAction('changeUnitId', 'divUnitArea', false));
        $fields[] = $unit;

        if ( $this->isFirstAccess() )
        {
            $MIOLO->page->AddJsCode("document.getElementById('unitId').onchange()");
        }

        $validators[] = new MRequiredValidator('unitId', _M('Unidade', $module));

        // Field area
        $unitId = MUtil::NVL(MIOLO::_REQUEST('unitId'), $data->unitId);
        $unitField = null;
        $requireField = null;
        if ( strlen($unitId) > 0 )
        {
            $std = new stdClass();
            $std->unitId = $unitId;
            $std->unitAreaId = MUtil::NVL(MIOLO::_REQUEST('unitAreaId'), $data->unitAreaId);
            $std->place = MUtil::NVL(MIOLO::_REQUEST('place'), $data->place);
            $std->courseId = MIOLO::_REQUEST('courseId');            
            $std->trainingTypeId = $trainingTypeId;    
            
            $unitField = $this->changeUnitId($std);
            $requireField = TraCommonFields::changeUnitAreaId($std);
        }
        $fields[] = new MDiv('divUnitArea', $unitField);
        
        // Informacoes sobre o posto
        $fields[] = new MDiv('divRequireTrainingPlace', $requireField);

        // Field beginDate
        $fields[] = $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Início previsto', $module), 10);
        $beginDate->setJsHint(_M('Informe a data de início prevista',$module));

        // Field endDate
        $fields[] = $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Fim previsto', $module), 10);
        $endDate->setJsHint(_M('Informe a data de fim prevista',$module));

        // Field supervisor
        $fields[] = $supervisor = new MTextField('supervisor', $this->getFormValue('supervisor', $data->supervisor), _M('Supervisor do estágio', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $supervisor->setJsHint(_M('Informe o supervisor do estágio',$module));
        $fields[] = new MSeparator();

        // Field observation
        $fields[] = $observation = new MMultiLineField('observation', $this->getFormValue('observation', $data->observation), _M('Informações complementares', $module),20, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $observation->setJsHint(_M('Informe uma observação',$module));
        $fields[] = new MSeparator();

        // Validators
        $validators[] = new MRequiredValidator('unitId', _M('Unidade',$module));
        $validators[] = new MIntegerValidator('trainingTypeId', _M('Modalidade', $module), 'required');
        $validators[] = new MDateDMYValidator('beginDate', _M('Início previsto',$module), 'required');
        $validators[] = new MDateDMYValidator('endDate', _M('Fim previsto',$module), 'required');
        
        $this->setFields($fields);
        $this->SetValidators($validators);
    }
    

    /**
     * Ação do botão próxima etapa
     * @param <type> $args
     * @return <type>
     */
    public function nextStepButton_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $trainingTypeId = $this->getRequestValue('trainingTypeId');
        
        // Dados do passo
        $data = $this->getData();

        $data->unitAreaId = MIOLO::_REQUEST('unitAreaId');
        $this->setFormValue('unitAreaId', $data->unitAreaId);

        $data->place = MIOLO::_REQUEST('place');
        $this->setFormValue('place', $data->place);
        
        try
        {
            // Verifica se a área foi informada
            if ( strlen($data->unitAreaId) == 0 )
            {
                $returnMsg[] = _M('O campo área é de preenchimento obrigatório.', $module);
            }
            
            $unitArea = new TraUnitArea( $data->unitAreaId );
            if ( ( $unitArea->requireTrainingPlace == DB_TRUE ) && ( strlen($data->place) == 0 ) && ( !SAGU::userIsFromServices() ) )
            {
                throw new Exception(_M("O campo 'Informações sobre o posto' deve ser informado", $module) . '.');
            }
            
            // Verificacao semester minimo
            $traTrainingType = new TraTrainingType($trainingTypeId);
            if( $traTrainingType->requireSemester == TraTrainingType::REQUIRE_SEMESTRE )
            {
                $filters = new stdClass();
                $filters->unitAreaId = $data->unitAreaId;
                $filters->trainingTypeId = $trainingTypeId;
                $rows = TraTrainingTypeArea::search($filters);
                
                if ( count($rows) > 0 )
                {
                    $minimumSemester = $rows[0]->minimumSemester;
                    if ( $data->semester < $minimumSemester )
                    {
                        throw new Exception( _M('O semestre deste estágio não pode ser menor que @1.', $module, $minimumSemester) );
                    }
                }
            }

            
            if( count($returnMsg) > 0 )
            {
                $mensagem = implode($returnMsg, "<br>");
                throw new Exception($mensagem);
            }
        }
        catch ( Exception $e )
        {
            $this->AddError($e->getMessage());
            return;
        }

        parent::nextStepButton_click($args);
    }
    
    /**
     * Change unit
     *
     * @param stdClass $args
     * @return array
     */
    public function changeUnitId($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
                       
        try
        {
            if ( strlen($args->courseId) <= 0 )
            {
                throw new Exception(_M('Deve ser selecionado um Curso.', $module) );
            }

            return TraCommonFields::changeUnitId($args);
        }
        catch (Exception $e)
        {
//            $this->AddError($e->getMessage());
        }
        
        return null;
    }
    
    
    /**
     * Obtem campo de curso
     * 
     * @param stdClass $args
     */
    public function getCourseField($args)
    {
        //
        $filters = new stdClass();
        if ( (strlen($args->agreementId) > 0) && ($args->trainingTypeId == TraTrainingType::TYPE_CURRICULAR) )
        {
            $filters->agreementId = $args->agreementId;
        }
        $list = TraCourse::listRecords($filters);
        
        //
        $fields[] = $courseId = new MSelection('courseId', $args->courseId, _M('Curso', $module), $list);
        $courseId->setJsHint(_M('Informe o código do curso', $module));
        $courseId->addAttribute('onChange', $this->getAjaxAction('changeUnitId', 'divUnitArea', false));
        $validators[] = new MIntegerValidator('courseId', _M('Curso',$module), 'required');
        
        $this->SetValidators($validators);
        $this->generateValidators($fields);
        
        return SAGU::alignFields($fields);
    }
    
    /**
     * Botão cancelar do formulário
     * @return <MButton>
     */
    public function cancelButton()
    {
        return SAGU::getCancelButtonSubscription();
    }
}
?>