<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário usuário da unidade
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 24/03/2011
 *
 */
MIOLO::uses('/ui/controls/msubdetail.class');
class FrmUnitUser extends SForm
{
    /**
     * Construtor da classe
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();        
        
        // Limpa os dados da subDetail
        if ( !$MIOLO->page->isPostBack() )
        {
            MSubDetail::clearData('subUnitUser');
        }

        parent::__construct(_M('Usuários da unidade', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        // Campo escondido da unidade
        $unitId = MIOLO::_REQUEST('unitId');

        if ( strlen($unitId)>0 )
        {
            $unit = new TraUnit($unitId);
            $filters = new stdClass();
            $filters->unitId = $unitId;
            $dataUnitUser = TraUnitUser::search($filters);

            if (  is_array($dataUnitUser) )
            {
                foreach ( $dataUnitUser as $unitUser )
                {
                    $objUnit = new stdClass();
                    $objUnit->idUser_ = $unitUser->idUser;
                    $objUnit->login_ = $unitUser->user->login;
                    $objUnit->userName = $unitUser->user->name;

                    $dataSubUnitUser[] = $objUnit;
                }
            }

            $fields[] = new MHiddenField('unitId', $unitId);
        }
        
        // Label da unidade
        $fields[] = new MTextLabel('unitDescriptionLabel', $unitId .' - '.$unit->description, _M('Unidade',$module));

        // Campo usuário
        $userLabel = new MText( 'userLabel', _M('Usuário', $module ) . ':' );
        $userLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $login = new MLookupTextField( 'login_', $this->getFormValue( 'login_', $data->login_ ), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'idUser_, limbo, userName', 'admin', 'UserByLogin', null,null, true);
        $login->setJsHint( _M('Informa o login do usuário', $module ) );
        $idUser = new SHiddenField('idUser_', null);
        $userName = new MTextField( 'userName', $this->getFormValue( 'userName', $data->username ), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE') );
        $userName->setJsHint(_M('Nome do usuário', $module));
        $userName->setReadOnly(true);
        $valids[] = new MRequiredValidator('login_', _M('Usuário', $module));
        $subFields[] = new MHContainer('hctUser', array($userLabel, $login, $idUser, $userName));

        // Colunas da subDetail
        $columns[] = new MGridColumn(_M('idUser', $module), 'left', true, '30%', false, 'idUser_');
        $columns[] = new MGridColumn(_M('Usuário', $module), 'left', true, '30%', true, 'login_');
        $columns[] = new MGridColumn(_M('Nome', $module), 'left', true, '30%', true, 'userName');

        // SubDetail usuários
        $fields[] = $sub = new MSubDetail('subUnitUser', _M('Usuários', $module), $columns, $subFields, $opts = array('remove'));
        $sub->setValidators($valids);
        
        // Set data subDetail
        if ( $dataSubUnitUser && MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click' )
        {
            MSubDetail::setData($dataSubUnitUser, 'subUnitUser');
        }

        $this->SetFields($fields);

        parent::defineFields();
    }

    /*
     * Salva os dados da subdetail
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        try
        {
            //New database transaction
            SDatabase::beginTransaction();

            $data = $this->getData();

            if ( count($data->subUnitUser) > 0 )
            {
                foreach ( $data->subUnitUser as $lineUnitUser )
                {
                    $traUnitUser = new TraUnitUser();
                    $traUnitUser->unitId = $data->unitId;
                    $traUnitUser->idUser = $lineUnitUser->idUser_;

                    if ( $lineUnitUser->removeData )
                    {
                        $traUnitUser->delete();
                    }
                    else
                    {
                        $traUnitUser->save();
                    }
                }
            }

            // Salva os dados na base
            SDatabase::commit();

            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
            SAGU::information($msg, $MIOLO->getActionURL($module, $action, null, array( 'function' => 'search' )));
        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }
    }
}
?>
