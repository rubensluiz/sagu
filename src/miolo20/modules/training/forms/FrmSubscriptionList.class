<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário para impressão de crachás
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 07/04/2011
 **/

class FrmSubscriptionList extends SForm
{
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Lista de inscritos/solicitantes', $module), null, null);

        //Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
        
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        // Field course (lookup)
        $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseId, courseName', $module, 'Course', null, null, true);
        $courseId->setJsHint(_M('Informe o código do curso', $module));
        $courseDescription = new MTextField('courseName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseDescription->setReadOnly(true);
        $courseDescription->setJsHint(_M('Nome do curso', $module));
        $hctCourse = new MHContainer('hctCourse', array( $courseLabel, $courseId, $courseDescription ));
        $hctCourse->setShowLabel(true);
        $validators[] = new MIntegerValidator('courseId', _M('Curso', $module), 'optional');
        $fields[] = $hctCourse;

        // Field area
        $areaLabel = new MText('areaLabel', _M('Área', $module) . ':');
        $areaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $areaId = new MLookupTextField('areaId', $this->getFormValue('areaId', $data->areaId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'areaDescription', $module, 'area', null, null, true);
        $areaId->setJsHint(_M('Informe o código da área', $module));
        $areaDescription = new MTextField('areaDescription', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $areaDescription->setReadOnly(true);
        $areaDescription->setJsHint(_M('Descrição da área', $module));
        $hctArea = new MHContainer('hctArea', array( $areaLabel, $areaId, $areaDescription ));
        $hctArea->setShowLabel(true);
        $validators[] = new MIntegerValidator('areaId', _M('Área', $module), 'optional');
        $fields[] = $hctArea;

        //Field begin date
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $beginDate->setValidator( new MDATEDMYValidator('beginDate', _M('Data inicial', $module), 'optional'));
        $fields[] = $beginDate;

        //Field end date
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data final', $module));
        $endDate->setValidator( new MDATEDMYValidator('endDate', _M('Data final', $module), 'optional'));
        $fields[] = $endDate;

        //Opção de listagem dos estagiários.
        $statusLabel = new MText('subscriptionLabel', _M('Status', $module) . ':');
        $statusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $statusOptions = array(array(_M('Inscrito', $module), 'A'), array(_M('Solicitante', $module), 'P'));
        $status = strlen($this->GetFormValue('status', $data->status)) > 0 ? $this->GetFormValue('status', $data->status) : 'A';
        $status = new MRadioButtonGroup('status', '', $statusOptions, $status, null, 'horizontal');
        $status->setShowLabel(false);
        $hctStatus = new MHContainer('hctStatus', array($statusLabel, $status));
        $fields[] = $hctStatus;

        //Formato
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat', _M('Formato do relatório', $module));

        // Separator
        $fields[] = new MSeparator();
        $fields[] = new MButton('btnGenerate', _M('Localizar', $module));
        $fields[] = new MSeparator('');

        $this->setValidators($validators);
        $this->setFields($fields);
        
        parent::defineFields();
    }

    /*
     * Função chamada na ação do botão localizar
     */
    public function btnGenerate_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();

        try
        {
            if ( ! is_null($data) )
            {
                //Status Solicitante
                if ($data->status == 'P')
                {
                    $dataSearch = TraReports::searchRequestList($data);
                    if ( count($dataSearch) > 0 )
                    {
                        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdSubscriptionList', $dataSearch);
                        $grdResults->setData($dataSearch);
                        $grdResults->setTitle(_M('Listagem dos solicitantes', $module));

                        // Adiciona grid no form
                        $this->addField($grdResults);
                    }
                    else
                    {
                        throw new Exception(_M('Nenhum registro encontrado.', $module));
                    }
                }
                else //Status Inscrito (A)
                {
                    $dataSearch = TraReports::searchSubscriptionList($data);
                    if ( count($dataSearch) > 0 )
                    {
                        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdSubscriptionList', $dataSearch);
                        $grdResults->setData($dataSearch);
                        $grdResults->setTitle(_M('Listagem dos inscritos', $module));

                        // Adiciona grid no form
                        $this->addField($grdResults);
                    }
                    else
                    {
                        throw new Exception(_M('Nenhum registro encontrado.', $module));
                    }
                }
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Método para geração do Relatório
     *
     */
    public function generateReport($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();
        $options['module'] = $module;
        if( $data->status == 'A' )
        {
            $options['reportName'] = 'subscriptionList';
        }
        else
        {
            $options['reportName'] = 'requestList';
        }
        

        if ( strlen($data->courseId)>0 )
        {
            $options['parameters']['courseid'] = $data->courseId;
        }
        if ( strlen($data->areaId)>0 )
        {
            $options['parameters']['areaid'] = $data->areaId;
        }
        if ( strlen($data->beginDate)>0 )
        {
            $options['parameters']['begindate'] = $data->beginDate;
        }
        if ( strlen($data->endDate)>0 )
        {
            $options['parameters']['enddate'] = $data->endDate;
        }
        if ( strlen($data->status)>0 )
        {
            $options['parameters']['status'] = $data->status;
        }
        if ( strlen($data->reportFormat)>0 )
        {
            $options['fileType'] = $data->reportFormat;
        }

        $sreport = new SReport($options);

        if ( !$sreport->generate() )
        {
            $this->addError(_M('Nenhum registro encontrado.', $module ));
        }
    }

   /**
     * Método que obtem os dados do formulário.
     *
     */
    public function getTypesData()
    {
        $data = new stdClass();
        $data->courseId = $this->GetFormValue('courseId');        
        $data->areaId = $this->GetFormValue('areaId');
        $data->status = $this->GetFormValue('status');
        $data->beginDate = $this->GetFormValue('beginDate');
        $data->endDate = $this->GetFormValue('endDate');
        $data->reportFormat = $this->GetFormValue('reportFormat');

        return $data;
    }
}
?>