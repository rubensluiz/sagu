<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelo passo 2 da solicitação de estágio.
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 20/12/2010
 *
 * */
class FrmRequestDocuments extends SStepByStepForm
{

    public function __construct($steps = null)
    {
        if ( !$steps->disableConstruct )
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        }
    }

    /**
     * Default method to define fields
     * */
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        //Load data
        $allData = $this->getStepData();
        $stepData = $this->getStepDataByForm(__CLASS__);

        //Unit area
        $traUnitArea = new TraUnitArea($allData->unitAreaId);

        //Documentos da área
        foreach ( (array) $traUnitArea->documents as $document )
        {
            $fileDelName = 'fileDel_'.$document->documentId;
            $fileIdName = 'fileIds_'.$document->documentId;

            $fields[] = new MHiddenField($fileDelName, $this->getFormValue($fileDelName, $stepData->$fileDelName));
            $fields[] = new MHiddenField($fileIdName, $this->getFormValue($fileIdName, $stepData->$fileIdName));

            if ( $document->hasTextContent == DB_TRUE )
            {
                //Contents
                $contentsLabel = new MText('contentsLabel', _M('Conteúdo', $module) . ':');
                $contentsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
                $varName = "contents{$document->documentId}";
                $contents = new MTextField($varName, $stepData->$varName, null, 30);
                $contents->setJsHint(_M('Informe o documento do tipo @1', $module, $document->description));
                $fileId[] = new MHContainer("hctContent{$document->documentId}", array( $contentsLabel, $contents ));
            }

            if ( strlen($document->numberOfAttachments) > 0 )
            {
                for ( $i = 0; $i < $document->numberOfAttachments; $i++ )
                {
                    //File id
                    $fileId[] = new SFileField("fileId_{$document->documentId}_{$i}", $this, array(
                        'fieldLabel' => _M('Arquivo @1', $module, $i + 1),
                        'multiple' => false,
                        'divDelName' => $fileDelName,
                    ));
                }
            }

            $baseGroups[] = $bgr = new MBaseGroup("bgrDocument{$i}", $document->description, $fileId, 'vertical');
            $bgr->width = '48%';
            unset($fileId);
        }

        if ( count($baseGroups) > 0 ) //Cria os containers alinhados lado a lado
        {
            $hctFields = array( );
            foreach ( $baseGroups as $i => $bgr )
            {
                if ( count($hctFields) == 2 )
                {
                    $fields[] = new MHContainer("hctDocument{$i}", $hctFields);
                    $hctFields = array( ); //zera o array
                }

                $hctFields[] = $bgr;
            }

            if ( count($hctFields) > 0 )
            {
                $fields[] = new MHContainer("hctDocument{$i}", $hctFields);
            }
        }
        else
        {
            $fields[] = new MLabel(_M('Nenhum documento requerido para a inscrição na área selecionada.', $module));
        }

        $this->setFields($fields);
    }

    public function nextStepButton_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getData();
        $busFile = new BusinessBasicBusFile();

        $files = MIOLO::_REQUEST('fileId');
        $fileIds = array();
        foreach ( (array) $_FILES as $field => $file )
        {
            list($null, $documentId, $null) = explode('_', $field);
            
            if ( strlen($file['name']) > 0 )
            {
                $fdata = new stdClass();
                $fdata->uploadFileName = $file['name'];
                $fdata->contentType = $file['type'];
                $fdata->size = $file['size'];

                $fileId = $busFile->insertFile($fdata, $file['tmp_name']);
                
                $fileIds[$documentId] .= $fileId . ',';

                $this->setFormValue($field . 'Id', $fileId);
            }
        }

        foreach ( (array) $fileIds as $documentId => $val )
        {
            $varName = "fileIds_{$documentId}";
            $this->setFormValue($varName, $data->$varName . $val);
        }

        parent::nextStepButton_click($args);
    }
}

?>
