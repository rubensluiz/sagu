<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 2011/04/06
 *
 */
class FrmTeamAllocation extends SForm
{
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Consulta', $module), null, null);
       
        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_PRINT );
        
        $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $unitAreaIdValue = MIOLO::_REQUEST('unitAreaId');
        $beginDateValue = MIOLO::_REQUEST('beginDate');
        $endDateValue = MIOLO::_REQUEST('endDate');

        if ( ( strlen($unitAreaIdValue) <= 0 ) || ( strlen($beginDateValue) <= 0 ) || ( strlen($endDateValue) <= 0) )
        {
            SAGU::error( _M('Parâmetros inconsistentes!', $module) );
            return;
        }

        $objUnitArea = $data = new TraUnitArea($unitAreaIdValue);

        //Código
        $unitAreaId = new MTextField('unitAreaId', $unitAreaIdValue, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitAreaId->setJsHint(_M('Código da unidade da área', $module));
        $unitAreaId->setReadOnly(true);
        $fields[] = $unitAreaId;

        //Unidade
        $fields[] = $unitDescription = new MTextField('unitDescription', $data->unit->description, _M('Unidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $unitDescription->setJsHint(_M('Unidade', $module));
        $unitDescription->setReadOnly(true);

        //Área
        $fields[] = $areaDescription = new MTextField('areaDescription', $data->area->description, _M('Área', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $areaDescription->setJsHint(_M('Área', $module));
        $areaDescription->setReadOnly(true);

        //Periodo
        $periodLabel = new MText('periodLabel', _M('Período', $module) . ':');
        $periodLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
        $beginDate = new MCalendarField('beginDate', $beginDateValue, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Data inicial', $module));
        $validators[] = new MDATEDMYValidator('beginDate', _M('Data inicial', $module), 'required');
        $periodToLabel = new MText('periodToLabel', _M('até', $module));
        $endDate = new MCalendarField('endDate', $endDateValue, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Data final', $module));
        $validators[] = new MDATEDMYValidator('endDate', _M('Data final', $module), 'required');
        $fields[] = new MHContainer('periodCnt', array($periodLabel, $beginDate, $periodToLabel, $endDate));

        //Ajusta botao voltar da toolbar
        $this->toolbar->setButtonURL(MToolBar::BUTTON_BACK, $MIOLO->getActionURL($module, 'main:process:consultRequest', null, array('function' => 'search', 'unitAreaIdS' => MIOLO::_REQUEST('unitAreaId'))));

        $fields[] = new MButton('btnUpdate', _M('Atualizar', $module));

        //Busca os dados
        $filters = new stdClass();
        $filters->agreementId = MIOLO::_REQUEST('agreementId');
        try
        {
            $teamAllocation = TraUnitArea::getTeamAllocation($unitAreaIdValue, $beginDateValue, $endDateValue);
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }

        //Adiciona grid
        $fields[] = $grid = $MIOLO->getUI()->getGrid($module, 'GrdTeamAllocation');
        $grid->setTeamData( $teamAllocation->teams );
        $grid->setData( $teamAllocation->result );

        $fields[] = new MButton('btnBack', _M('Voltar', $module), 'javascript:window.close();');

        $this->setFields($fields);
        $this->SetValidators($validators);
        parent::defineFields();
    }
}
?>