<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 24/03/2011
 *
 **/
MIOLO::uses('/ui/controls/msubdetail.class');
class FrmUnit extends SManagementForm
{
    public function __construct($data)
    {
        parent::__construct(new TraUnit(), array('unitId'));
    }

    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $unitId = MIOLO::_REQUEST('unitId');
            
            $fields[] = new MTextLabel('', $unitId, _M('Código', $module));
            $fields[] = new MHiddenField('unitId', $unitId);

            $data = new TraUnit($unitId);
        }

        //Descricao
        $fields[] = $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição da unidade', $module));
        $validators[] = new MRequiredValidator('description');

        // Antecedência mínima
        $fields[] = $minimumDaysUntilTrainingStart = new MTextField('minimumDaysUntilTrainingStart', $this->getFormValue('minimumDaysUntilTrainingStart', $data->minimumDaysUntilTrainingStart), _M('Antecedência mínima', $module));
        $minimumDaysUntilTrainingStart->setJsHint( _M('Número mínimo de dias antes do início do estágio que o candidato pode fazer uma solicitação.', $module) );
        $validators[] = new MIntegerValidator('minimumDaysUntilTrainingStart', _M('Antecedência mínima', $module), 'required');

        // Antecedência máxima
        $fields[] = $maximumDaysUntilTrainingStart = new MTextField('maximumDaysUntilTrainingStart', $this->getFormValue('maximumDaysUntilTrainingStart', $data->maximumDaysUntilTrainingStart), _M('Antecedência máxima', $module));
        $maximumDaysUntilTrainingStart->setJsHint( _M('Número máximo de dias antes do início do estágio que o candidato pode fazer uma solicitação.', $module) );
        $validators[] = new MIntegerValidator('maximumDaysUntilTrainingStart', _M('Antecedência máxima', $module), 'required');
        

        //Subdetail
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'personName', 'basic', 'LegalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa jurídica', $module));
        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Nome da pessoa jurídica',$module));
        $_fields[] = $personCnt = new MHContainer('personCnt', array($personLabel, $personId, $personName));
        $personCnt->showLabel = true;
        $_validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');

        $_columns[] = new MGridColumn(_M('Código', $module), 'left', true, '', true, 'personId');
        $_columns[] = new MGridColumn(_M('Pessoa', $module), 'left', true, '', true, 'personName');

        $fields[] = $sub = new MSubDetail('unitLegalPerson', _M('Pessoa jurídica', $module), $_columns, $_fields, true);
        $sub->setValidators($_validators);

        parent::defineFields($fields, $validators, $data);

        //Subdetail related
        if (!$MIOLO->page->isPostBack())
        {
            MSubDetail::clearData('unitLegalPerson');
            if ( count($data->unitLegalPerson) > 0 )
            {
                $sub->setData( SAGU::convertSTypeToSubDetail($_columns, $data->unitLegalPerson) );
            }
        }
    }

    public function  getTypesData()
    {
        $data = parent::getTypesData();

        $legalPerson = MSubDetail::getData('unitLegalPerson');
        $rows = array();
        foreach ( (array)$legalPerson as $row )
        {
            $rows[] = $obj = new TraUnitLegalPerson($data->unitId, $row->personId);

            foreach ( (array)$row as $key => $val )
            {
                $obj->$key = $val;
            }
        }

        $data->unitLegalPerson = $rows;

        return $data;
    }
}
?>
