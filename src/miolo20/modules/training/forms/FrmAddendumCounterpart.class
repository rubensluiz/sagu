<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Contrapartidas
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 2011/03/29
 *
 */
MIOLO::uses('/ui/controls/msubdetail.class');
class FrmAddendumCounterpart extends FrmAddendumFather
{
    public function __construct($steps)
    {
        parent::__construct(null, $steps, __CLASS__);
    }
    

    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( $this->isFirstAccess() && (SAGU::getEventName() != 'finalizeButton:click') )
        {
            $addendumId = MIOLO::_REQUEST('addendumId');

            if ( strlen($addendumId) > 0 )
            {
                $data = new TraAddendum( $addendumId );
            }

            MSubDetail::clearData('counterpart');
        }

        //
        //Subdetail contrapartidas
        //
        $_fields[] = new SHiddenField('counterpartId');

        //Tipo
        $counterpartTypeIdLabel = new MText('counterpartTypeIdLabel',  _M('Tipo', $module) .':');
        $counterpartTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $counterpartTypeIdLabel->setClass('m-caption m-caption-required');
        $counterpartTypeId = new MSelection('counterpartTypeId', $this->GetFormValue('counterpartTypeId', $data->counterpartTypeId), null, TraCounterpartType::listRecords());
        $counterpartTypeIdLabel->setJsHint(_M('Informe o tipo de recurso', $module));
        $_fields[] = $counterpartTypeIdCnt = new MHContainer('counterpartTypeIdCnt', array($counterpartTypeIdLabel, $counterpartTypeId));

        //Ordem
        $orderLabel = new MText('orderLabel',  _M('Ordem', $module) .':');
        $orderLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $orderLabel->setClass('m-caption m-caption-required');
        $order = new MTextField('order', $this->GetFormValue('order', $data->order));
        $orderLabel->setJsHint(_M('Informe a ordem', $module));
        $_fields[] = $orderCnt = new MHContainer('orderCnt', array($orderLabel, $order));
        $_validators[] = new MIntegerValidator('order', _M('Ordem', $module), 'required');

        //Descrição
        $descriptionLabel = new MText('descriptionLabel',  _M('Descrição', $module) .':');
        $descriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description = new MMultiLineField('description', $this->GetFormValue('description', $data->description), null, null, 5, 40);
        $descriptionLabel->setJsHint(_M('Informe a descrição', $module));
        $_fields[] = $descriptionCnt = new MHContainer('descriptionCnt', array($descriptionLabel, $description));
        $_validators[] = new MRequiredValidator('description', _M('Descrição', $module));

        $_columns[] = new MGridColumn('counterpartId', null, true, '', false, 'counterpartId');
        $_columns[] = new MGridColumn(_M('Tipo', $module), null, true, '', true, 'counterpartTypeId', null, TraCounterpartType::listRecords(1));
        $_columns[] = new MGridColumn(_M('Ordem', $module), null, true, '', true, 'order');
        $_columns[] = new MGridColumn(_M('Descrição', $module), null, true, '', true, 'description');

        $fields[] = $sub = new MSubDetail('counterpart', _M('Contrapartidas', $module), $_columns, $_fields, true);
        $sub->setValidators($_validators);
        if ( count($data->counterpart) > 0 )
        {
            $sub->setData( SAGU::convertSTypeToSubDetail($_columns, $data->counterpart) );
        }
        
        $this->setFields($fields);
        $this->SetValidators($validators);
        parent::CreateFields();
    }
}
?>
