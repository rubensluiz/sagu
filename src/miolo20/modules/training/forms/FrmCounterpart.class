<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 2011/04/04
 *
 */
class FrmCounterpart extends SForm
{
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Contrapartidas', $module), null, null);
       
        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_PRINT );
        
        $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $addendumId = MIOLO::_REQUEST('addendumId');
        $addendum = new TraAddendum($addendumId);

        // Informacoes
        $options = array(
            _M('Código do convênio', $module) => $addendum->agreementId,
            _M('Período', $module) => $addendum->agreement->beginDate . ' - ' . $addendum->agreement->endDate,
            _M('Conveniada', $module) => $addendum->agreement->legalPerson->name,
            _M('Código do termo aditivo', $module) => $addendum->addendumId,
            _M(' Período', $module) => $addendum->beginDate . ' - ' . $addendum->endDate,
        );
        $fields[] = new SInformationField(array(
            'title' => _M('Dados da contrapartida', $module),
            'value' => $options,
            'columns' => 1,
        ));

        // Código
        $fields[] = new SHiddenField('addendumIdS', $addendumId);

        // Ajusta botao voltar da toolbar
        $this->toolbar->setButtonURL(MToolBar::BUTTON_BACK, $this->getPreviousURL());

        // Busca os dados
        $filters = new stdClass();
        $filters->addendumId = MIOLO::_REQUEST('addendumId');
        $rows = TraCounterpart::searchGrid($filters);

        $fields[] = new MDiv('divPopup');

        // Adiciona grid
        $fields[] = $grid = $MIOLO->getUI()->getGrid($module, 'GrdCounterpartSearch');
        $grid->setData($rows);

        $fields[] = new MButton('btnBack', _M('Voltar', $module), $this->toolbar->getButtonUrl(MToolBar::BUTTON_BACK));

        $this->setFields($fields);
        parent::defineFields();
    }


    /**
     *
     * @param array $args
     * @param int $args->addendumIdS
     * @param int $args->counterpartId
     * @param boolean $args->setTo DB_TRUE para definir o estado como disponivel, DB_FALSE como indisponivel
     * @return null
     */
    public function setResourceAvailable($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $_args['addendumId'] = $args->addendumIdS;
        $_args['counterpartId'] = $args->counterpartId;
        $_args['setTo'] = $args->setTo;

        $gotoYes = $this->getAjaxAction('setResourceAvailableConfirmed', 'divPopup', false, $_args, false);
        $gotoNo = $MIOLO->getActionURL($module, $action, null, $_args);

        $label = $args->setTo == DB_TRUE ? _M('disponível', $module) : _M('indisponível', $module);
        $MIOLO->Question(_M('Deseja realmente tornar este recurso @1?', $module, $label), $gotoYes, $gotoNo);

        return null;
    }

    
    /**
     *
     * @param array $args
     * @return null
     */
    public function setResourceAvailableConfirmed($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        if ( ( strlen($args->counterpartId) <= 0 ) || ( !in_array($args->setTo, array(DB_FALSE, DB_TRUE)) ) )
        {
            SAGU::error(_M('Parâmetros incorretos', $module), null, null, null, true);
        }
        
        $counterpart = new TraCounterpart($args->counterpartId);
        $counterpart->resourceAvailable = $args->setTo;
        $counterpart->save();

        $label = $args->setTo == DB_TRUE ? _M('disponível', $module) : _M('indisponível', $module);
        $MIOLO->information( _M('O recurso foi definido como @1', $module, $label) );

        return null;
    }
}
?>