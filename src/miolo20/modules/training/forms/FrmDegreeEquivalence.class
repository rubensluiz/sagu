<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 24/03/2011
 *
 **/
MIOLO::uses('/ui/controls/msubdetail.class');
class FrmDegreeEquivalence extends SManagementForm
{
    public function __construct($data)
    {
        parent::__construct(new TraDegreeEquivalence(), array('degreeEquivalenceId'));
    }


    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $degreeEquivalenceId = MIOLO::_REQUEST('degreeEquivalenceId');
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) ||
               ( ($function == SForm::FUNCTION_INSERT) && ( strlen($degreeEquivalenceId) > 0 ))) //Logica para poder inserir um novo registro a partir de um registro "template" existente
        {
            //Nao deve permitir editar, apenas inserir novo utilizando como base estes registros
            if ( $function == SForm::FUNCTION_UPDATE )
            {
                $args = array(
                    'event' => 'tbBtnNew:click',
                    'function' => SForm::FUNCTION_INSERT,
                    'degreeEquivalenceId' => $degreeEquivalenceId,
                    'oldDegreeEquivalenceId' => $degreeEquivalenceId,
                    'specialInsert' => 1,
                );
                $MIOLO->page->redirect( $MIOLO->getActionURL($module, $action, null, $args) );
            }

            if ( $function != SForm::FUNCTION_INSERT )
            {
                $fields[] = new MTextLabel('degreeEquivalenceId', $degreeEquivalenceId, _M('Código', $module));
                $fields[] = new MHiddenField('degreeEquivalenceId', $degreeEquivalenceId);
            }

            $data = new TraDegreeEquivalence($degreeEquivalenceId);

            //Quando for insert que utiliza dados de um registro existente, apaga todos conceptId
            if ( strlen(MIOLO::_REQUEST('specialInsert')) > 0 )
            {
                foreach ( (array) $data->concept as $row )
                {
                    $row->conceptId = null;
                }

                $fields[] = new MHiddenField('specialInsert', $this->getFormValue('specialInsert', MIOLO::_REQUEST('specialInsert')));
                $fields[] = new MHiddenField('oldDegreeEquivalenceId', $this->getFormValue('oldDegreeEquivalenceId', MIOLO::_REQUEST('oldDegreeEquivalenceId')));
            }
        }

        //Descricao
        $fields[] = $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição da Equivalência de notas e conceito', $module));
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));

        //Data inicial
        $beginDateLabel = new MText('beginDateLabel', _M('Data inicial', $module) . ':');
        $beginDateLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $beginDateLabel->setClass('m-caption m-caption-required');
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data a partir da qual esta tabela de equivalências passará a valer', $module));
        $beginDate->setClass('m-caption m-caption-required');
        $validators[] = new MDateDMYValidator('beginDate', _M('Data inicial', $module), 'required');
        $fields[] = new MHContainer('beginDateCnt', array($beginDateLabel, $beginDate));

        //Data final
        $endDateLabel = new MText('endDateLabel', _M('Data final', $module) . ':');
        $endDateLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Data a partir da qual esta tabela deixou de ter validade. Poderá ser nulo, indicando que a tabela está ativa indefinidamente', $module));
        $endDate->setClass('m-caption m-caption-required');
        $validators[] = new MDateDMYValidator('endDate', _M('Data final', $module));
        $fields[] = new MHContainer('endDateCnt', array($endDateLabel, $endDate));

        //Subdetail
        $_fields[] = new SHiddenField('conceptId');

        //Nome do conceito
        $conceptLabel = new MText('conceptLabel', _M('Nome do conceito', $module) . ':');
        $conceptLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $conceptLabel->setClass('m-caption m-caption-required');
        $concept = new MTextField('concept', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $concept->setJsHint( _M('Descrição do conceito, tal como: A, B, C, D, E ou ainda Apto, Inapto, etc.', $module) );
        $_validators[] = new MRequiredValidator('concept', _M('Nome do conceito', $module));
        $_fields[] = new MHContainer('conceptCnt', array($conceptLabel, $concept));

        //Limite inferior
        $lowerBoundLabel = new MText('lowerBoundLabel', _M('Limite inferior', $module) . ':');
        $lowerBoundLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $lowerBoundLabel->setClass('m-caption m-caption-required');
        $lowerBound = new MTextField('lowerBound', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $lowerBound->setJsHint( _M('Valor mínimo para se enquadrar neste conceito', $module) );
        $_validators[] = new MFloatValidator('lowerBound', _M('Limite inferior', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $_fields[] = new MHContainer('lowerBoundCnt', array($lowerBoundLabel, $lowerBound));

        //Limite superior
        $upperBoundLabel = new MText('upperBoundLabel', _M('Limite superior', $module) . ':');
        $upperBoundLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $upperBoundLabel->setClass('m-caption m-caption-required');
        $upperBound = new MTextField('upperBound', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $upperBound->setJsHint( _M('Valor máximo para se enquadrar neste conceito', $module) );
        $_validators[] = new MFloatValidator('upperBound', _M('Limite superior', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $_fields[] = new MHContainer('upperBoundCnt', array($upperBoundLabel, $upperBound));

        //Aprova
        $approvesLabel = new MText('approvesLabel', _M('Aprova', $module) . ':');
        $approvesLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $approves = $this->GetFormValue('approves', $data->approves) ? DB_TRUE : DB_FALSE;
        $optYes = new MRadioButton('approves', DB_TRUE, null, true );
        $optYes->text = _M('Sim', $module);
        $optNo = new MRadioButton('approves', DB_FALSE, null );
        $optNo->text = _M('Não', $module);
        $_fields[] = new MHContainer('approvesCnt', array($approvesLabel, $optYes, $optNo));

        $_columns[] = new MGridColumn(_M('Código', $module), null, true, '', false, 'conceptId');
        $_columns[] = new MGridColumn(_M('Nome do conceito', $module), null, true, '', true, 'concept');
        $_columns[] = new MGridColumn(_M('Limite inferior', $module), null, true, '', true, 'lowerBound');
        $_columns[] = new MGridColumn(_M('Limite superior', $module), null, true, '', true, 'upperBound');
        $_columns[] = new MGridColumn(_M('Aprova', $module), null, true, '', true, 'approves', null, SAGU::listYesNo());

        $fields[] = $sub = new MSubDetail('_concept', _M('Conceitos', $module), $_columns, $_fields, true);
        $sub->setValidators($_validators);

        parent::defineFields($fields, $validators, $data);

        //Subdetail related
        if (!$MIOLO->page->isPostBack())
        {
            MSubDetail::clearData('_concept');
            if ( count($data->concept) > 0 )
            {
                $sub->setData( SAGU::convertSTypeToSubDetail($_columns, $data->concept) );
            }
        }
    }


    public function  getTypesData()
    {
        $data = parent::getTypesData();

        $subData = MSubDetail::getData('_concept');
        $rows = array();
        foreach ( (array)$subData as $row )
        {
            $rows[] = $obj = new TraConcept($row->conceptId);

            foreach ( (array)$row as $key => $val )
            {
                $obj->$key = $val;
            }
        }
        $data->concept = $rows;

        return $data;
    }


    public function  tbBtnSave_click($sender = NULL)
    {
        $specialInsert = strlen(MIOLO::_REQUEST('specialInsert')) > 0;

        //Quando funcao é insert que utiliza modelo já existente na base, deve definir a data final do outro registro como a data atual
        if ($specialInsert)
        {
            $oldDegreeEquivalenceId = MIOLO::_REQUEST('oldDegreeEquivalenceId');
            $degreeEquivalence = new TraDegreeEquivalence($oldDegreeEquivalenceId);
            $degreeEquivalence->endDate = SAGU::getDateNow();
            $degreeEquivalence->save();
        }

        parent::tbBtnSave_click($sender);
    }
}
?>
