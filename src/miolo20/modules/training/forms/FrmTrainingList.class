<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de listagem de estágiarios
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 06/04/2011
 */
class FrmTrainingList extends SForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Lista de estagiários', $module), null, null);

        // Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event' => 'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        
        // Obtém os dados
        $data = $this->getTypesData();


        // Field training type
        $fields[] = new MSelection('trainingTypeId', $data->trainingTypeId, _M('Modalidade', $module), TraTrainingType::listRecords());

        // Field unit
        $unitLabel = new MLabel(_M('Unidade', $module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitLabel->setClass('m-caption m-caption-required');
        $unit = new MSelection('unitId', $this->getFormValue('unitId', $data->unitId), null, TraUnit::listUnit());
        $unit->setJsHint(_M('Informe a unidade', $module));
        $unit->addAttribute('onChange', $this->getAjaxAction('changeUnitId', 'divUnitArea', false));
        $fields[] = new MHContainer('unitCnt', array($unitLabel, $unit));
        $validators[] = new MRequiredValidator('unitId', _M('Unidade', $module));

        // Field area
        $fields[] = new MDiv('divUnitArea', $this->changeUnitId($data));
        if ( MIOLO::_REQUEST('__EVENTTARGETVALUE') == 'btnGenerate:click' )
        {
            $MIOLO->page->AddJsCode("document.getElementById('unitId').onchange()");
        }

        // Field course (lookup)
        $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseId, courseName', $module, 'Course', null, null, true);
        $courseId->setJsHint(_M('Informe o código do curso', $module));
        $courseDescription = new MTextField('courseName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseDescription->setReadOnly(true);
        $courseDescription->setJsHint(_M('Nome do curso', $module));
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseDescription));
        $hctCourse->setShowLabel(true);
        $validators[] = new MIntegerValidator('courseId', _M('Curso', $module), 'optional');
        $fields[] = $hctCourse;

        // Field training (lookup)
        $teamLabel = new MText('teamLabel', _M('Equipe', $module) . ':');
        $teamLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $teamId = new MLookupTextField('teamId', $this->getFormValue('teamId', $data->teamId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'teamId, teamDescription', $module, 'team', null, null, true);
        $teamId->setJsHint(_M('Informe o código da equipe', $module));
        $teamDescription = new MTextField('teamDescription', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $teamDescription->setReadOnly(true);
        $teamDescription->setJsHint(_M('Descrição da equipe', $module));
        $hctTeam = new MHContainer('hctTraining', array($teamLabel, $teamId, $teamDescription));
        $hctTeam->setShowLabel(true);
        $fields[] = $hctTeam;

        // Field begin date
        $beginDateLabel = new MLabel(_M('Data inicial', $module) . ':');
        $beginDateLabel->setClass('m-caption m-caption-required');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $fields[] = new MHContainer('hctBeginDate', array($beginDateLabel, $beginDate));
        $validators[] = new MDATEDMYValidator('beginDate', '', 'required');

        // Field end date
        $endDateLabel = new MLabel(_M('Data final', $module) . ':');
        $endDateLabel->setClass('m-caption m-caption-required');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data final', $module));
        $fields[] = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
        $validators[] = new MDATEDMYValidator('endDate', '', 'required');

        // Opção de listagem dos estagiários.
        $printModeLabel = new MText('printModeLabel', _M('Ordenação', $module) . ':');
        $printModeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $printModeOptions = array(array(_M('Por nome da pessoa', $module), 1), array(_M('Por equipe', $module), 2));
        $printMode = strlen($this->GetFormValue('printMode', $data->printMode)) > 0 ? $this->GetFormValue('printMode', $data->printMode) : 1;
        $printMode = new MRadioButtonGroup('printMode', '', $printModeOptions, $printMode, null, 'horizontal');
        $printMode->setShowLabel(false);
        $hctPrintMode = new MHContainer('hctPrintMode', array($printModeLabel, $printMode));
        $fields[] = $hctPrintMode;

        // Formato
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat', _M('Formato do relatório', $module));

        $fields[] = new MSeparator();
        $fields[] = new MButton('btnGenerate', _M('Localizar', $module));
        $fields[] = new MSeparator('');

        $this->setValidators($validators);
        $this->setFields($fields);

        parent::defineFields();
    }

    /**
     * Popula selection da area
     * @param <object> $args
     * @return Fields
     */
    public static function changeUnitId($filters, $readOnly = false)
    {
        $args->unitId = strlen($filters->unitId) > 0 ? $filters->unitId : MIOLO::_REQUEST('unitId');

        if ( strlen($args->unitId) > 0 )
        {
            // Field unit area
            $fields[] = new MSeparator();
            $unitAreaLabel = new MText('areaLabel', _M('Área', $module) . ':');
            if ( !$readOnly )
            {
                $unitAreaLabel->setClass('m-caption m-caption-required');
            }
            $unitAreaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $unitArea = new MSelection('unitAreaId', $filters->unitAreaId, null, TraUnitArea::listCurrentUnitAreaByUnit($args));
            $unitArea->setJsHint(_M('Informe a área', $module));
            $unitArea->setReadOnly($readOnly);
            $fields[] = new MHContainer('hctunitArea', array($unitAreaLabel, $unitArea));
        }

        return $fields ? $fields : new MHiddenField('unitAreaId', null);
    }

    /**
     * Método para geração do Relatório
     */
    public function generateReport($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Obtém os dados
        $data = $this->getTypesData();

        // Module
        $options['module'] = $module;

        // Modelo por nome
        if ( $data->printMode == 1 )
        {
            $options['reportName'] = 'trainingListByName';
        }
        // Modelo por equipe
        else if ( $data->printMode == 2 )
        {
            $options['reportName'] = 'trainingListByTeam';
        }

        if ( strlen($data->courseId) > 0 )
        {
            $options['parameters']['courseId'] = $data->courseId;
        }

        if ( strlen($data->unitAreaId) > 0 )
        {
            $options['parameters']['unitAreaId'] = $data->unitAreaId;
        }

        if ( strlen($data->teamId) > 0 )
        {
            $options['parameters']['teamId'] = $data->teamId;
        }

        if ( strlen($data->beginDate) > 0 )
        {
            $options['parameters']['beginDate'] = $data->beginDate;
        }

        if ( strlen($data->endDate) > 0 )
        {
            $options['parameters']['endDate'] = $data->endDate;
        }

        if ( strlen($data->trainingTypeId) > 0 )
        {
            $options['parameters']['trainingTypeId'] = $data->trainingTypeId;
        }

        if ( strlen($data->printMode) > 0 )
        {
            $options['parameters']['printMode'] = $data->printMode;
        }

        if ( strlen($data->reportFormat) > 0 )
        {
            $options['fileType'] = $data->reportFormat;
        }

        $sreport = new SReport($options);

        if ( !$sreport->generate() )
        {
            $this->addError(_M('Nenhum registro encontrado.', $module));
        }
    }

    /**
     * Função chamada na ação do botão localizar
     */
    public function btnGenerate_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Obtém os dados
        $data = $this->getTypesData();

        try
        {
            //Verifica se a área foi informada
            if ( strlen($data->unitAreaId) == 0 )
            {
                $returnMsg[] = _M('O campo área é de preenchimento obrigatório.', $module);
            }
            
            if( count($returnMsg) > 0 )
            {
                $mensagem = implode($returnMsg, "<br>");
                throw new Exception($mensagem);
            }
            
            // Define a ordenação por nome
            if ( $data->printMode == 1 )
            {
                $data->order = 1;
            }
            // Define a ordenção por equipe
            else if ( $data->printMode == 2 )
            {
                $data->order = 6;
            }

            $dataTraining = TraReports::searchTraining($data);
            if ( count($dataTraining) > 0 )
            {
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdTrainingList', $dataTraining);
                $grdResults->setData($dataTraining);
                $grdResults->setTitle(_M('Relatório de estagiários', $module));
                $grdResults->actions = array();
                $labelCountRegisters = new MLabel(_M('Total de estagiários', $module) . ':');
                $countRegisters = new MTextLabel('countRegisters', count($dataTraining));
                $hctCountRegister = new MHContainer('countRegisters', array($labelCountRegisters, $countRegisters), $formMode);
                $grdResults->setFooter($hctCountRegister);

                // Adiciona grid no form
                $this->addField($grdResults);
            }
            else
            {
                throw new Exception(_M('Nenhum registro encontrado.', $module));
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Método que obtem os dados do formulário.
     *
     */
    public function getTypesData()
    {
        $data = new stdClass();
        $data->courseId = $this->GetFormValue('courseId');
        $data->unitId = $this->GetFormValue('unitId');
        $data->unitAreaId = MIOLO::_REQUEST('unitAreaId');
        $data->teamId = $this->GetFormValue('teamId');
        $data->printMode = $this->GetFormValue('printMode');
        $data->beginDate = $this->GetFormValue('beginDate');
        $data->endDate = $this->GetFormValue('endDate');
        $data->trainingTypeId = $this->GetFormValue('trainingTypeId');
        $data->reportFormat = $this->GetFormValue('reportFormat');

        return $data;
    }
}
?>