<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *  Formulário de detalhes do estágio
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br
 *
 * @since
 * Class created on 06/02/2011
 *
 */
class FrmTrainingDetails extends SForm
{
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Detalhes do estágio', $module), null, null);

        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        
        $this->toolbar->disableButton( MToolBar::BUTTON_PRINT );
    }

    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $subscriptionId = MIOLO::_REQUEST('subscriptionId');
        $subscriptionTeamId = MIOLO::_REQUEST('subscriptionTeamId');

        if ( strlen($subscriptionTeamId) > 0 )
        {
            $subscriptionTeam = $data = new TraSubscriptionTeam($subscriptionTeamId);
            $subscription = $subscriptionTeam->subscription;
            $data->period = _M('@1 a @2', $module, $subscriptionTeam->beginDate, $subscriptionTeam->endDate);
            $data->preceptor = $subscriptionTeam->team->preceptor->personId . ' - ' . $subscriptionTeam->team->preceptor->name;
            $data->preceptorId = $subscriptionTeam->team->preceptor->personId;
        }
        else
        {
            //Periodo solicitado
            $subscription = $data = new TraSubscription($subscriptionId);
            $data->period = _M('@1 a @2', $module, $subscription->request->beginDate, $subscription->request->endDate);
            $data->preceptor = $data->request->unitArea->preceptor->personId . ' - ' . $data->request->unitArea->preceptor->name;
            $data->preceptorId = $data->request->unitArea->preceptor->personId;
            
            //Período autorizado
            $filters->subscriptionId = $subscriptionId;
            $dataPeriod = TraRequest::searchHistory($filters);
            $data->periodAuto = _M('@1 a @2', $module, $dataPeriod[0][4], $dataPeriod[0][5]);
        }

        $adjusted = $subscription->request->getAdjusted();
        $data->unitDescription = $adjusted->unitArea->unit->description;
        $data->areaDescription = $adjusted->unitArea->area->description;
        $data->institution = $adjusted->institution;
        $data->personName = $adjusted->physicalPerson->name;
        $data->personId = $adjusted->personId;
        $data->course = $adjusted->course->courseId . ' - '. $adjusted->course->description;
        $data->semester = $adjusted->semester;
        $data->status = $adjusted->status;
        $data->trainingType = $adjusted->trainingType->description;
        $data->place = $adjusted->place;

        // Sobrescreve botao imprimir
        $this->toolbar->setButtonUrl(MToolBar::BUTTON_PRINT, SAGU::getActionURL($module, $action, array('event' => 'tbBtnPrint_click', 'personId' => $data->personId)));
        
        
        //Prepara dados para verificar qual radiobutton deve selecionar(quando ja existe registros na base)
        //* OBS: $data->subscriptionTeamEvaluation pode ser hora populado via TraSubscription e ora via TraSubscriptionTeam
        $dbConcept = array();
        foreach ( $data->subscriptionTeamEvaluation as $row )
        {
            $dbConcept[ $row->evaluationItemId ] = $row->concept;
        }

        //Cria campos de informacao
        $labels = array(
            'personName' => _M('Nome', $module),
            'unitDescription' => _M('Unidade', $module),
            'areaDescription' => _M('Área', $module),
            'institution' => _M('Instituição', $module),
            'period' => _M('Período solicitado', $module),
            'periodAuto' => _M('Período autorizado', $module),
            'preceptor' => _M('Preceptor', $module),            
            'course' => _M('Curso', $module),            
            'semester' => _M('Semestre', $module),
            'trainingType' => _M('Modalidade', $module)            
        );
        
        // Exibir informacoes sobre o posto
        if ( $adjusted->unitArea->requireTrainingPlace == DB_TRUE )
        {
            $labels += array(
                'place' => _M('Informações sobre o posto', $module),
            );
        }

        foreach ( $labels as $id => $label )
        {
            $fld1 = new MLabel($label . ':');
            $fld1->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
            $fld2 = new MLabel( $data->$id );
            $fld2->setBold(true);
            $fields[] = new MHContainer("{$id}Cnt", array($fld1, $fld2));
        }

        // Foto do estagiário
        $photo = new SPersonPhotoDisplayField(array('fileId' => $subscription->request->physicalPerson->photoId));

        $vCnt = new MVContainer('vctStage', $fields);
        $personalData = new MHContainer('hctNew', array($vCnt, $photo));
        $fields = array(new MBaseGroup('bgrStage', _M('Dados do estágio', $module), array($personalData)));

        $this->setFields($fields);
        $this->SetValidators($validators);
        parent::defineFields();
    }
}
?>
