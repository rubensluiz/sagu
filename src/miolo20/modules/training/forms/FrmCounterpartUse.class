<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 2011/04/04
 *
 */
MIOLO::uses('/ui/controls/msubdetail.class');

class FrmCounterpartUse extends SForm
{
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Uso de contrapartidas', $module), null, null);

        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        $this->toolbar->disableButton( MToolBar::BUTTON_PRINT );
        
        
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $counterpartId = $this->GetFormValue('counterpartId', MIOLO::_REQUEST('counterpartId'));
        $fields[] = new MHiddenField('counterpartId', $counterpartId);

        $counterpart = $data = new TraCounterpart($counterpartId);

        // Informacoes
        $options = array(
            _M('Código do convênio', $module) => $counterpart->addendum->agreementId,
            _M('Período', $module) => $counterpart->addendum->agreement->beginDate . ' - ' . $counterpart->addendum->agreement->endDate,
            _M('Conveniada', $module) => $counterpart->addendum->agreement->legalPerson->name,
            _M('Código do termo aditivo', $module) => $counterpart->addendum->addendumId,
            _M(' Período', $module) => $counterpart->addendum->beginDate . ' - ' . $counterpart->addendum->endDate,
            _M('Tipo de contrapartida', $module) => $counterpart->counterpartType->description,
            _M('Ordem', $module) => $counterpart->order,
            _M('Descrição', $module) => $counterpart->description,
            _M('Disponível', $module) => SAGU::getYesNo($counterpart->resourceAvailable),
        );
        $fields[] = new SInformationField(array(
            'title' => _M('Dados da contrapartida', $module),
            'value' => $options,
            'columns' => 1,
        ));

        //Ajusta botao voltar da toolbar
        $this->toolbar->setButtonURL(MToolBar::BUTTON_BACK, $MIOLO->getActionURL($module, 'main:counterpart', null, array('function' => 'search', 'addendumId' => $data->addendumId)));

        //Código
        $fields[] = $addendumId = new MTextField('addendumId', $data->addendumId, _M('Termo aditivo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $addendumId->setJsHint(_M('Código do termo aditivo', $module));
        $addendumId->setReadOnly(true);

        //Tipo de contrapartida
        $fields[] = $counterpartTypeId = new MSelection('counterpartTypeId', $data->counterpartTypeId, _M('Tipo de contrapartida', $module), TraCounterpartType::listRecords());
        $counterpartTypeId->setJsHint(_M('Tipo de contrapartida', $module));
        $counterpartTypeId->setReadOnly(true);

        //Ordem
        $fields[] = $order = new MTextField('order', $data->order, _M('Ordem', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $order->setJsHint(_M('Ordem da contrapartida', $module));
        $order->setReadOnly(true);

        //Descricao
        $fields[] = $_description = new MMultiLineField('_description', $data->description, _M('Descrição', $module), null, 5, 25);
        $_description->setJsHint(_M('Descrição da contrapartida', $module));
        $_description->setReadOnly(true);

        //Disponivel
        $yesNo = SAGU::listYesNo();
        $fields[] = $resourceAvailable = new MTextField('resourceAvailable', $yesNo[$data->resourceAvailable], _M('Disponível', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $resourceAvailable->setJsHint(_M('Se recurso está disponível', $module));
        $resourceAvailable->setReadOnly(true);

        //
        //Subdetail/MTableRaw
        //
        if ( $data->resourceAvailable == DB_TRUE )
        {
            unset($_fields);
            unset($_validators);
            $_fields[] = $counterpartUseId = new MTextField('counterpartUseId');
            $counterpartUseId->addBoxStyle('display', 'none');

            //Data
            $_fields[] = $dateOfUse = new MCalendarField('dateOfUse', null, _M('Data', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $dateOfUse->setJsHint(_M('Informe a data em que a contrapartida será consumida', $module));
            $_validators[] = new MDateDMYValidator('dateOfUse', _M('Data', $module), 'required');

            //Descricao
            $_fields[] = $description = new MMultiLineField('description', null, _M('Detalhes', $module), null, 5, 25);
            $description->setJsHint(_M('Detalhes de como recurso foi consumido', $module));
            $_validators[] = new MRequiredValidator('description', _M('Detalhes', $module));

            $_columns[] = new MGridColumn('counterpartUseId', null, true, '', false, 'counterpartUseId');
            $_columns[] = new MGridColumn(_M('Data', $module), null, true, '', true, 'dateOfUse');
            $_columns[] = new MGridColumn(_M('Detalhes', $module), null, true, '', true, 'description');

            $fields[] = $sub = new MSubDetail('counterpartUse', _M('Uso de contrapartidas', $module), $_columns, $_fields, $opts);
            $sub->setValidators($_validators);

            if ( strlen(SAGU::getEventName()) <= 0 )
            {
                MSubDetail::clearData('counterpartUse');

                if ( count($data->counterpartUse) > 0 )
                {
                    $sub->setData( SAGU::convertSTypeToSubDetail($_columns, $data->counterpartUse) );
                }
            }
        }
        else
        {
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );

            $rows = array();
            foreach ( (array) $data->counterpartUse as $row )
            {
                $rows[] = array(
                    $row->dateOfUse,
                    $row->description);
            }

            $colTitle = array(
                _M('Data', $module),
                _M('Detalhes', $module));

            $fields[] = $table = new MTableRaw(_M('Uso de contrapartidas', $module), $rows, $colTitle);
        }

        $fields[] = new MButton('btnBack', _M('Voltar', $module), $this->toolbar->getButtonUrl(MToolBar::BUTTON_BACK));

        $this->setFields($fields);
        parent::defineFields();
    }

    public function  tbBtnSave_click($sender = NULL, $success = NULL, $opts = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $subData = MSubDetail::getData('counterpartUse');

        try
        {
            $counterpartId = MIOLO::_REQUEST('counterpartId');
            $counterpart = new TraCounterpart( $counterpartId );

            $rows = array();
            foreach ( (array) $subData as $row )
            {
                $rows[] = $obj = new TraCounterpartUse( $row->counterpartUseId );
                $obj->description = $row->description;
                $obj->dateOfUse = $row->dateOfUse;
                $obj->counterpartId = $counterpartId;
                $obj->removeData = $row->removeData;
            }
            $counterpart->counterpartUse = $rows;

            $success = $counterpart->save();

            $goto = $MIOLO->getActionURL($module, $action, null, array('counterpartId' => $counterpartId));
            SAGU::information(_M('Informações registradas com sucesso.', $module), $goto);
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }
}
?>