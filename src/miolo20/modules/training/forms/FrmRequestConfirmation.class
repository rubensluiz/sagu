<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelo passo 4 da solicitação de estágio.
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 30/03/2011
 *
 **/
class FrmRequestConfirmation extends SStepByStepForm
{
    public function __construct($steps = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Load data
        $stepData = $this->getStepDataByForm('FrmRequestPersonalInformation');

        /**
         * Dados gerais
         */
        //Nome
        $personNameLabel = new MLabel(_M('Nome', $module) . ':');
        $personNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personName = new MTextField('personNameI', $this->getFormValue('personName',$stepData->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $bgrFields[] = new MHContainer('personNameCntI', array( $personNameLabel, $personName ));

        //E-mail
        $emailLabel = new MLabel(_M('E-mail', $module) . ':');
        $emailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $email = new MTextField('emailI', $this->getFormValue('email',$stepData->email), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $email->setReadOnly(true);
        $bgrFields[] = new MHContainer('emailCntI', array( $emailLabel, $email ));

        //RG
        $rgLabel = new MLabel(_M('Identidade (RG)', $module) . ':');
        $rgLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $rg = new MTextField('rgI', $this->getFormValue('rg',$stepData->rg), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $rg->setReadOnly(true);
        $bgrFields[] = new MHContainer('rgCntI', array( $rgLabel, $rg ));

        //Orgao RG
        $rgOrgaoLabel = new MLabel(_M('Órgão expedidor do RG', $module) . ':');
        $rgOrgaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $rgOrgao = new MTextField('rgOrgaoI',  $this->getFormValue('rgOrgao',$stepData->rgOrgao), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $rgOrgao->setReadOnly(true);
        $bgrFields[] = new MHContainer('rgOrgaoCntI', array( $rgOrgaoLabel, $rgOrgao ));

        //CPF
        $cpfLabel = new MLabel(_M('CPF', $module) . ':');
        $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cpf = new MTextField('cpfI',  $this->getFormValue('cpf',$stepData->cpf), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $cpf->setReadOnly(true);
        $bgrFields[] = new MHContainer('cpfCntI', array( $cpfLabel, $cpf ));

        //Pais de nascimento
        $busCountry = new BusinessBasicBusCountry();
        $countryIdBirthLabel = new MText('countryIdBirthLabel', _M('Nacionalidade', $module) . ':');
        $countryIdBirthLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $stepData->countryIdBirth = ( ($function == 'insert') && (!(strlen($stepData->countryIdBirth) > 0)) ) ? SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID') : $stepData->countryIdBirth;
        $countryIdBirth = new MSelection('countryIdBirthI', $this->getFormValue('countryIdBirth',$stepData->countryIdBirth), null, $busCountry->listCountry());
        $countryIdBirth->setReadOnly(true);
        $bgrFields[] = new MHContainer('countryIdBirthHctI', array( $countryIdBirthLabel, $countryIdBirth ));

        //Sexo
        $sexLabel = new MText('sexLabel', _M('Sexo', $module) . ':');
        $sexLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sex = new MSelection('sexI', $this->getFormValue('sex',$stepData->sex), null, SAGU::listSex());
        $sex->setReadOnly(true);
        $bgrFields[] = new MHContainer('sexCntI', array( $sexLabel, $sex ));

        //Data de nascimento
        $dateBirthLabel = new MText('dateBirthLabel', _M('Data de nascimento', $module) . ':');
        $dateBirthLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dateBirth = new MCalendarField('dateBirthI', $this->getFormValue('dateBirth',$stepData->dateBirth), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateBirth->setReadOnly(true);
        $bgrFields[] = new MHContainer('dateBirthCntI', array( $dateBirthLabel, $dateBirth ));

        //Nome da mae
        $motherNameLabel = new MText('motherNameLabel', _M('Nome da mãe', $module) . ':');
        $motherNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $motherName = new MTextField('motherNameI', $this->getFormValue('motherName',$stepData->motherName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $motherName->setReadOnly(true);
        $bgrFields[] = new MHContainer('motherNameCntI', array( $motherNameLabel, $motherName ));

        //Nome do pai
        $fatherNameLabel = new MText('fatherNameLabel', _M('Nome do pai', $module) . ':');
        $fatherNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fatherName = new MTextField('fatherNameI', $this->getFormValue('fatherName',$stepData->fatherName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fatherName->setReadOnly(true);
        $bgrFields[] = new MHContainer('fatherNameCntI', array( $fatherNameLabel, $fatherName ));

        //Telefone residencial
        $residentialPhoneLabel = new MText('residentialPhoneLabel', _M('Telefone', $module) . ':');
        $residentialPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $residentialPhone = new MTextField('residentialPhoneI', $this->getFormValue('residentialPhone',$stepData->residentialPhone), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $residentialPhone->setReadOnly(true);
        $bgrFields[] = new MHContainer('residentialPhoneCntI', array( $residentialPhoneLabel, $residentialPhone ));

        //Telefone comercial
        $workPhoneLabel = new MText('workPhoneLabel', _M('Telefone comercial', $module) . ':');
        $workPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $workPhone = new MTextField('workPhoneI', $this->getFormValue('workPhone',$stepData->workPhone), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $workPhone->setReadOnly(true);
        $bgrFields[] = new MHContainer('workPhoneCntI', array( $workPhoneLabel, $workPhone ));

        //Estado civil
        $busMS = new BusinessBasicBusMaritalStatus();
        $maritalStatusLabel = new MText('maritalStatusLabel', _M('Estado civil', $module) . ': ');
        $maritalStatusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maritalStatusId = new MSelection('maritalStatusIdI', $this->getFormValue('maritalStatusId',$stepData->maritalStatusId), '', $busMS->listMaritalStatus());
        $maritalStatusId->setReadOnly(true);
        $bgrFields[] = new MHContainer('matiralStatusCntI', array( $maritalStatusLabel, $maritalStatusId ));

        //Origem etnica
        $busEO = new BusinessBasicBusEthnicOrigin();
        $ethnicOriginIdLabel = new MText('ethnicOriginIdLabel', _M('Origem étnica', $module) . ': ');
        $ethnicOriginIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $ethnicOriginId = new MSelection('ethnicOriginIdI', $this->getFormValue('ethnicOriginId',$stepData->ethnicOriginId), '', $busEO->listEthnicOrigin());
        $ethnicOriginId->setReadOnly(true);
        $bgrFields[] = new MHContainer('ethnicOriginCntI', array( $ethnicOriginIdLabel, $ethnicOriginId ));

        //Deseja receber e-mail
        $sentEmailLabel = new MText('sentEmailLabel', _M('Deseja receber e-mail', $module) . ': ');
        $sentEmailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $option = strlen( $this->getFormValue('sentEmail',$stepData->sentEmail)) > 0 ? $this->getFormValue('sentEmail',$stepData->sentEmail) : DB_TRUE;
        $sentEmail = new MSelection('sentEmailI',$option, null,SAGU::listYesNo());
        $sentEmail->setReadOnly(true);
        $bgrFields[] = new MHContainer('sentEmailCntI', array( $sentEmailLabel, $sentEmail ));

        //Necessidade especial
        $busSN = new BusinessBasicBusSpecialNecessity();
        $specialNecessityLabel = new MText('specialNecessityLabel', _M('Necessidade especial', $module) . ' : ');
        $specialNecessityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $specialNecessityOption = strlen($this->getFormValue('specialNecessityId',$stepData->specialNecessityId)) > 0 ? $this->getFormValue('specialNecessityId',$stepData->specialNecessityId) : SAGU::getParameter('basic', 'NO_SPECIAL_NECESSITY_ID');
        $specialNecessityId = new MSelection('specialNecessityIdI', $specialNecessityOption, '', $busSN->listSpecialNecessity());
        $specialNecessityId->setReadOnly(true);
        $bgrFields[] = new MHContainer('specialNecessityCntI', array( $specialNecessityLabel, $specialNecessityId ));

        //Descricao da necessidade especial
        $specialNecessityDescriptionLabel = new MText('specialNecessityDescriptionLabel', _M('Descrição da necessidade especial', $module) . ':');
        $specialNecessityDescriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $specialNecessityDescription = new MTextField('specialNecessityDescriptionI', $this->getFormValue('specialNecessityDescription',$stepData->specialNecessityDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $specialNecessityDescription->setReadOnly(true);
        $bgrFields[] = new MHContainer('specialNecessityDescriptionCntI', array( $specialNecessityDescriptionLabel, $specialNecessityDescription ));
        $bgrGeneralData = new MBaseGroup('bgrGeneralDataI', _M('Dados gerais', $module), $bgrFields, 'vertical');

        $busCountry = new BusinessBasicBusCountry();
        $busState = new BusinessBasicBusState();
        $busCity = new BusinessBasicBusCity();

        // carregar países
        $filters = new stdClass();
        $filters->name = '%';
        $countries = $busCountry->searchCountry($filters);

        // carregar estados
        $filters = new stdClass();
        $filters->countryId = $stepData->countryId;
        $states = $busState->searchState($filters);

        $filters->stateId = $stepData->stateId;
        $cities = $busCity->searchCity($filters);

        //País
        $lblCountryId = new MLabel(_M('País', $module) . ': ');
        $lblCountryId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtCountryId = new MSelection('countryId', $stepData->countryId, null, $countries);
        $txtCountryId->setReadOnly(true);
        $hctContry = new MHContainer('hctCountry', array( $lblCountryId, $txtCountryId ));

        //Estado
        $lblStateId = new MLabel(_M('Estado', $module) . ': ');
        $lblStateId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtStateId = new MSelection('stateId', $stepData->stateId, null, $states);
        $txtStateId->setReadOnly(true);
        $hctState = new MHContainer('hctState', array( $lblStateId, $txtStateId ));

        //Cidade
        $lblCityId = new MLabel(_M('Cidade', $module) . ': ');
        $lblCityId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtCityId = new MSelection('cityId', $stepData->cityId, null, $cities);
        $txtCityId->setReadOnly(true);
        $hctCity = new MHContainer('hctCity', array( $lblCityId, $txtCityId ));

        // Bairro
        $neighborhoodLabel = new MLabel(_M('Bairro', $module) . ':');
        $neighborhoodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $neighborhood = new MTextField('neighborhoodI', $this->getFormValue('neighborhood',$stepData->neighborhood), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $neighborhood->setReadOnly(true);
        $neighborhoodCnt = new MHContainer('neighborhoodCntI', array( $neighborhoodLabel, $neighborhood ));

        // Location type
        $busLocationType = new BusinessBasicBusLocationType();
        $locationTypeIdLabel = new MText('locationTypeIdLabel', _M('Tipo de logradouro', $module) . ':');
        $locationTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $locationTypeId = new MSelection('locationTypeIdI', $this->getFormValue('locationTypeId',$stepData->locationTypeId), '', $busLocationType->listLocationType(), false, '');
        $locationTypeId->setReadOnly(true);
        $locationTypeCnt = new MHContainer('locationTypeIdCntI', array( $locationTypeIdLabel, $locationTypeId ));

        // Logradouro
        $locationLabel = new MLabel(_M('Logradouro', $module) . ':');
        $locationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $location = new MTextField('locationI', $this->getFormValue('location',$stepData->location), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $location->setReadOnly(true);
        $locationCnt = new MHContainer('locationCntI', array( $locationLabel, $location ));

        // Número
        $numberLabel = new MLabel(_M('Número', $module) . ':');
        $numberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $number = new MTextField('numberI', $this->getFormValue('number',$stepData->number), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $number->setReadOnly(true);
        $numberCnt = new MHContainer('numberCntI', array( $numberLabel, $number ));

        // Complemento
        $complementLabel = new MLabel(_M('Complemento', $module) . ':');
        $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $complement = new MTextField('complementI', $this->getFormValue('complement',$stepData->complement), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $complement->setReadOnly(true);
        $complementCnt = new MHContainer('complementCntI', array( $complementLabel, $complement ));

        // CEP
        $zipCodeLabel = new MLabel(_M('CEP', $module) . ':');
        $zipCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $zipCode = new MTextField('zipCodeI', $this->getFormValue('zipCode',$stepData->zipCode), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $zipCode->setReadOnly(true);
        $zipCodeCnt = new MHContainer('zipCodeCntI', array( $zipCodeLabel, $zipCode ));

        $bsg = new MBaseGroup('bsgGeographicDataI', _M('Endereço', $module), array( $hctContry, $hctState, $hctCity, $neighborhoodCnt, $locationTypeCnt, $locationCnt, $numberCnt, $complementCnt, $zipCodeCnt ), 'vertical');

        $bsgPersonalInformation = new MBaseGroup('bsgPersonalInformation', _M('Dados pessoais',$module), array($bgrGeneralData, $bsg));
        $fields[] = $bsgPersonalInformation;
        $fields[] = new MSeparator();


        $data = $this->getStepDataByForm('FrmRequestDataStage');
        
        // Se tiver sido marcado convenio, pega nome e atribui para instituicao de origem
        if ( strlen($data->agreementId) > 0 )
        {
            $agreement = new TraAgreement($data->agreementId);
            $data->institution = $agreement->legalPerson->name;
        }
        
        //Field institution
        $institutionLabel = new MLabel(_M('Instituição de origem', $module) . ':');
        $institutionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $institution = new MTextField('institutionI',  $this->getFormValue('institution', $data->institution), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $institution->setReadOnly(true);
        $institution->addAttribute('maxlength', '255');
        $bsgDataStage[] = new MHContainer('hctInstitutionI', array( $institutionLabel, $institution ));

        //Field courseid
        $courseLabel = new MLabel(_M('Curso', $module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseId = new MSelection('courseIdI', $this->getFormValue('courseId', $data->courseId), null, TraCourse::listRecords());
        $courseId->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('courseIdCntI', array( $courseLabel, $courseId ));

        //FieldCourseId
        $semesterLabel = new MLabel(_M('Semestre', $module) . ':');
        $semesterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $semester = new MTextField('semesterI', $this->getFormValue('semester', $data->semester), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $semester->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('semesterCntI', array( $semesterLabel, $semester ));

        //Field trainingType
        $trainingTypeLabel = new MLabel(_M('Modalidade', $module) . ':');
        $trainingTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $trainingTypeId = new MSelection('trainingTypeIdI', $this->getFormValue('trainingTypeId', $data->trainingTypeId), null, TraTrainingType::listRecords());
        $trainingTypeId->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('trainingTypeCntI', array( $trainingTypeLabel, $trainingTypeId ));

        //Field unit
        $unitLabel = new MLabel(_M('Unidade', $module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unit = new MSelection('unitIdI', $this->getFormValue('unitId', $data->unitId), null, TraUnit::listUnit());
        $unit->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('unitCntI', array( $unitLabel, $unit ));

        //Field area
        $unitLabel = new MLabel(_M('Área', $module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unit = new MSelection('unitAreaId', $this->getFormValue('unitAreaId', $data->unitAreaId), null, TraUnitArea::listCurrentUnitAreaByUnit($data));
        $unit->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('unitCntI', array( $unitLabel, $unit ));

        //Field beginDate
        $beginDateLabel = new MLabel(_M('Início previsto', $module) . ':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDate = new MCalendarField('beginDateI', $this->getFormValue('beginDate', $data->beginDate), null, 10);
        $beginDate->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('beginDateCntI', array( $beginDateLabel, $beginDate ));

        //Field endDate
        $endDateLabel = new MLabel(_M('Fim previsto', $module) . ':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDate = new MCalendarField('endDateI', $this->getFormValue('endDate', $data->endDate), null, 10);
        $endDate->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('endDateCntI', array( $endDateLabel, $endDate ));

        //Field supervisor
        $supervisorLabel = new MLabel( _M('Supervisor do estágio', $module).':');
        $supervisorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $supervisor = new MTextField('supervisorI', $this->getFormValue('supervisor', $data->supervisor),null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $supervisor->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('supervisorCntI', array( $supervisorLabel, $supervisor ));

        //Field observation
        $observationLabel = new MLabel(_M('Informações complementares', $module) . ':');
        $observationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $observation = new MMultiLineField('observationI', $this->getFormValue('observation', $data->observation), null,20, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $observation->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('observationCntI', array( $observationLabel, $observation ));
        $bsgDataStage[] = new MSeparator();

        $bsgDataStage = new MBaseGroup('bsgDataStage', _M('Dados do estágio',$module), $bsgDataStage, 'vertical');
        $fields[] = $bsgDataStage;

        $this->setFields($fields);
    }


    /**
     * Ação do botão finalizar
     */
    public function finalizeButton_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        //Dados de todos passos
        $allData = $this->getStepData();

        //Dados da pessoa
        $personalInformation = $this->getStepDataByForm('FrmRequestPersonalInformation');
        
        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $busFile = new BusinessBasicBusFile();
        $busUser = new BusinessAdminUser();

        //Usuário logado
        $loginUser = $MIOLO->GetLogin();
        $physicalPersonAdmin = $busPhysicalPerson->getPhysicalPersonByMioloUserName($loginUser->id);

        //Instancia da solicitação
        $traRequest = new TraRequest();
        $traSubscription = new TraSubscription();        

        try
        {
            SDatabase::beginTransaction();
            
            // Se aluno já foi aprovado em outra solicitação, bloqueia.
            if ( $traSubscription->estagiarioAprovadoNoPeriodo(NULL, $personalInformation->personId, $allData->beginDate, $allData->endDate) )
            {
                throw new Exception(_M('Já existe um estágio aprovado para este período.'));
            }
            
            /**
             * Dados da pessoa
             */
            $physicalPerson = new stdClass();

            foreach ((array)$personalInformation as $key => $val)
            {
                $physicalPerson->$key = $val;
            }

            $physicalPerson->name = $personalInformation->personName;
            $physicalPerson->isAllowPersonalData = DB_TRUE;
            $physicalPerson->mioloUserName = $personalInformation->mioloUserName;
            $physicalPerson->workAtHome = DB_FALSE;

            unset($_doc);
            $_doc->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
            $_doc->content = $personalInformation->cpf;
            $_doc->isDelivered = DB_FALSE; //FIXME
            $documents[] = $_doc;

            unset($_doc);
            $_doc->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG');
            $_doc->organ = $personalInformation->rgOrgao;
            $_doc->content = $personalInformation->rg;
            $_doc->isDelivered = DB_FALSE; //FIXME

            $documents[] = $_doc;
            $traRequest->physicalPerson = $physicalPerson;
            $traRequest->physicalPerson->documents = $documents;

            /**
             * Documentos
             */
            //Unit area
            $traUnitArea = new TraUnitArea($allData->unitAreaId);

            //Documentos da área
            foreach ( (array) $traUnitArea->documents as $document )
            {
                $fileDelName = 'fileDel_'.$document->documentId;
                $fileIdName = 'fileIds_'.$document->documentId;

                //Contents
                $contents = "contents{$document->documentId}";

                $deliveredDocument = new TraDeliveredDocument();
                $deliveredDocument->documentId = $document->documentId;
                $deliveredDocument->contents = $allData->$contents;

                //Files do documento
                if( strlen($allData->$fileIdName)>0 )
                {
                    $fileIds = explode(',', $allData->$fileIdName);
                }

                $fileDels = explode(',', $allData->$fileDelName);

                unset($deliveredDocumentFiles);
                foreach ( (array)$fileIds as $fileId )
                {
                    if ( (strlen($fileId)>0) && (!in_array($fileId, $fileDels)))
                    {
                        $deliveredDocumentFile = new TraDeliveredDocumentFile();
                        $deliveredDocumentFile->fileId = $fileId;
                        $deliveredDocumentFiles[] = $deliveredDocumentFile;
                    }
                }

                unset($fileIds);
                unset($fileDels);
                //Files do documento
                $deliveredDocument->deliveredDocumentFile = $deliveredDocumentFiles;

                $deliveredDocuments[] = $deliveredDocument;
            }

            //Documentos
            $traRequest->deliveredDocument = $deliveredDocuments;

            /**
             * Dados da solicitação de estágio
             */
            $traRequest->unitAreaId = $allData->unitAreaId;
            $traRequest->trainingTypeId = $allData->trainingTypeId;
            $traRequest->personId = $personalInformation->personId;
            $traRequest->beginDate = $allData->beginDate;
            $traRequest->endDate = $allData->endDate;
            $traRequest->institution = $allData->institution;
            $traRequest->agreementId = $allData->agreementId;
            $traRequest->semester = $allData->semester;
            $traRequest->courseId = $allData->courseId;
            $traRequest->observation = $allData->observation;
            $traRequest->supervisor = $allData->supervisor;
            $traRequest->status = TraRequest::PENDING;
            $traRequest->place = $allData->place;
            $traRequest->addendumCourseAdminId = TraAddendumCourseAdmin::getAddendumCourseAdminId($physicalPersonAdmin->personId);

            // Aparentemente a TraRequest exige este atributo para inserir a pessoa...
            if ( SAGU::userIsFromServices() )
            {
                $traRequest->updatePerson = DB_TRUE;
            }
            
            $traRequest->save();

            SDatabase::commit();

            // Mensagem de solicitação realizada com sucesso
            $message = array();
            $message[] = _M('Inscrição efetuada com sucesso.', $module) . '<br />';

            // Exibe senha de usuario quando for SEM AUTENTICACAO e configurado para EXIBIR SENHA
            $requireAuth = SAGU::getParameter('TRAINING', 'REQUIRE_AUTENTICATION_REQUEST_TRAINING') == DB_TRUE;
            $showPassword = SAGU::getParameter('TRAINING', 'SHOW_PASSWORD_AFTER_REQUEST_TRAINING') == DB_TRUE;
            if ( SAGU::userIsFromServices() && ( !$requireAuth ) && $showPassword && !is_null($MIOLO->session->admPasswd) )
            {
                $personId = $traRequest->physicalPerson->personId;
                $userName = $busPhysicalPerson->getPhysicalPerson($personId)->mioloUserName;
                $user = $busUser->getByLogin($userName);

                $message[] .= '<BR />' .
                        _M('Para fazer login use:', $module) . '<BR />' .
                        _M('Usuário: @1', $module, $user->login) . '<BR />' .
                        _M('Senha: @1', $module, $MIOLO->session->admPasswd) . '<BR />';
            }

            /**
             * Envia email
             */
            // Verifica se a a pessoa tem e email e envia a notificação de troca de senha
            if ( strlen($physicalPerson->email) > 0 )
            {
                $tags = array( '$PERSONNAME' => $physicalPerson->name,
                               '$PERSONID' => $physicalPerson->personId);

                // Business email and company
                $busEmail = new BusinessBasicBusEmail();
                $busCompany = new BusinessBasicBusCompany();

                $dataEmail = $busEmail->getEmail(SAGU::getParameter('basic','EMAIL_REQUEST_STAGE'));
                $dataCompany = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

                //Parameters
                $from = strtolower($dataEmail->from);
                $fromName = $dataCompany->acronym;
                $recipient[$physicalPerson->name] = strtolower($physicalPerson->email);
                $subject = $dataEmail->subject;
                $body = strtr($dataEmail->body, $tags);

                $mail = new sendEmail($from, $fromName, $recipient, $subject, $body, array());

                if ( $mail->sendEmail() )
                {
                    $message[] = _M('Um email de confirmação da solicitação de estágio foi enviado para @1', $module, $physicalPerson->email) . '<br /><br />';
                }
                else
                {
                    $message[] = _M('Não foi possível enviar o email de confirmação da solicitação.', $module) . '<br /><br />';
                    $message[] = _M('Caso necessite informações sobre sua solicitação, entre em contato conosco.', $module);
                }
            }

            if ( SAGU::userIsFromServices() )
            {
                $goto = $MIOLO->getActionURL('services', 'main:trainingRequest');
            }
            else
            {
                $goto = $MIOLO->getActionURL('training', 'main:process:request');
            }
            
            parent::finalizeButton_click($args);

            SAGU::information($message, $goto);
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            
            parent::finalizeButton_click($args);
            
            $msg = _M('Sua solicitação de estágio não pode ser efetuada:', $module) . '<br /><br />' . $e->getMessage();
            $this->addAlert($msg);
        }
    }

    public function cancelButton()
    {
        return SAGU::getCancelButtonSubscription();
    }
}
?>
