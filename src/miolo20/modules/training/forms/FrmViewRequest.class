<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Visualização e edição de solicitação de estágio
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 05/04/2011
 */
class FrmViewRequest extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        parent::__construct(new TraRequestAdjustment(), array('requestAdjustmentId'), null);

        // Desabilita alguns botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        
        $this->toolbar->enableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
        
        $adjustmentRequestEnabled = $this->getFormValue('adjustmentRequestEnabled');
                
        if ( $adjustmentRequestEnabled == DB_TRUE )
        {
           $MIOLO->checkAccess('FrmViewRequest', A_INSERT, true, true);
           $MIOLO->checkAccess('FrmViewRequest', A_UPDATE, true, true);                                 
        }
        else
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');

        $adjustmentRequestEnabled = $this->getFormValue('adjustmentRequestEnabled');
        $requestId = $this->getFormValue('requestId');
        $fields[] = new SHiddenField('requestId', $requestId);
        $fields[] = new SHiddenField('adjustmentRequestEnabled', $adjustmentRequestEnabled);
        $fields[] = new SHiddenField('limbo');

        if ( $adjustmentRequestEnabled == DB_TRUE )
        {
            $this->toolbar->enableButton(MToolBar::BUTTON_SAVE);
        }

        // Dados da solicitação
        $data = new TraRequest($requestId);

        // Dados do ajuste
        $filters = new stdClass();
        $filters->requestId = $requestId;
        $traAdjutment = TraRequestAdjustment::search($filters);

        $adjutment = $traAdjutment[0];
        if ( strlen($adjutment->requestAdjustmentId) )
        {
            $adjustmentData = $adjutment;
            $fields[] = new SHiddenField('requestAdjustmentId', $adjutment->requestAdjustmentId);
        }
        
        // Nome
        $personNameLabel = new MLabel(_M('Nome', $module) . ':');
        $personNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personName = new MTextLabel('personNameI', $data->physicalPerson->personId.' - '.$data->physicalPerson->name , '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('personNameCntI', array( $personNameLabel, $personName ));

        // E-mail
        $emailLabel = new MLabel(_M('E-mail', $module) . ':');
        $emailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $email = new MTextField('emailI', $this->getFormValue('email',$data->physicalPerson->email), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $email->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('emailCntI', array( $emailLabel, $email ));

        // Telefone residencial
        $residentialPhoneLabel = new MText('residentialPhoneLabelI', _M('Telefone', $module) . ':');
        $residentialPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $residentialPhone = new MTextField('residentialPhoneI', $this->getFormValue('residentialPhone',$data->physicalPerson->residentialPhone), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $residentialPhone->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('residentialPhoneCntI', array( $residentialPhoneLabel, $residentialPhone ));

        // Instituição
        $institutionLabel = new MLabel(_M('Instituição de origem', $module) . ':');
        $institutionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $institution = new MTextField('institutionI',  $this->getFormValue('institution', $data->institution), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $institution->setReadOnly(true);
        $institution->addAttribute('maxlength', '255');
        $bsgDataStage[] = new MHContainer('hctInstitutionI', array( $institutionLabel, $institution ));

        // Semestre
        $semesterLabel = new MLabel(_M('Semestre', $module) . ':');
        $semesterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $semester = new MTextField('semesterI', $this->getFormValue('semester', $data->semester), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $semester->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('semesterCntI', array( $semesterLabel, $semester ));
        
        // Data da solicitação
        $requestDateLabel = new MLabel(_M('Data da solicitação', $module) . ':');
        $requestDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $requestDate = new MCalendarField('requestDateI', $this->getFormValue('requestDate', $data->requestDate), null, 10);
        $requestDate->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('requestDateCntI', array( $requestDateLabel, $requestDate ));
        
        // Início previsto
        $beginDateLabel = new MLabel(_M('Início previsto', $module) . ':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDate = new MCalendarField('beginDateI', $this->getFormValue('beginDate', $data->beginDate), null, 10);
        $beginDate->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('beginDateCntI', array( $beginDateLabel, $beginDate ));

        // Fim previsto
        $endDateLabel = new MLabel(_M('Fim previsto', $module) . ':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDate = new MCalendarField('endDateI', $this->getFormValue('endDate', $data->endDate), null, 10);
        $endDate->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('endDateCntI', array( $endDateLabel, $endDate ));

        // Supervisor
        $supervisorLabel = new MLabel(_M('Supervisor', $module) . ':');
        $supervisorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $supervisor = new MTextField('supervisorI', $this->getFormValue('supervisor', $data->supervisor), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $supervisor->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('supervisorCntI', array( $supervisorLabel, $supervisor ));

        // Informações complementares
        $observationLabel = new MLabel(_M('Informações complementares', $module) . ':');
        $observationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $observation = new MMultiLineField('observationI', $this->getFormValue('endDate', $data->observation), null,20, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $observation->setReadOnly(true);
        $bsgDataStage[] = new MHContainer('observationCntI', array( $observationLabel, $observation ));

        // Business file
        $busFile = new BusinessBasicBusFile();

        // Busca os documentos da solicitação
        foreach ( (array)$data->deliveredDocument as $document )
        {
            // Busca os files da solicitação
            foreach( (array)$document->deliveredDocumentFiles as $deliveredDocumentFile )
            {
                // Type document
                $traDocument = new TraDocument($document->documentId);
                $fileId = $deliveredDocumentFile->fileId;

                // File
                $file = $busFile->getFile($fileId);

                // Link do anexo
                $url = $MIOLO->getActionUrl($module, $action, null, array('event'=>'openFile', 'fileId' => $fileId));
                $linkLabel = new MLabel($traDocument->description.':');
                $linkLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $link = new MLink($fileId, null, $url, $file->uploadFileName, '_new');
                $documents[] = new MHContainer($name, array($linkLabel,$link));
            }
        }
        $bsgDataStage[] = new MBaseGroup('bsgdocuments', _M('Documentos anexos',$module), $documents, 'vertical');

        $bsgDataStage = new MBaseGroup('bsgDataStageI', _M('Solicitação',$module), $bsgDataStage, 'vertical');
        $fields[] = $bsgDataStage;

        /*
         * Campos de ajuste
         */
        // Quando vier da inscrição só mostra o ajuste quando existir, quando vier da tela de consulta de solicitações sempre mostra editável
        if ( ((strlen($adjustmentData->institution)>0) && ($adjustmentRequestEnabled == DB_FALSE)) || ($adjustmentRequestEnabled ==DB_TRUE) )
        {
            $readOnly = $adjustmentRequestEnabled == DB_TRUE ? false : true;

            // Instituição de origem
            $institutionLabel = new MLabel(_M('Instituição de origem', $module) . ':');
            $institutionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $institution = new MTextField('institution',  (strlen($adjustmentData->institution) > 0 ? $adjustmentData->institution : $data->institution), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $institution->setJsHint(_M('Informe a instituição',$module));
            $institution->setReadOnly($readOnly);
            $institution->addAttribute('maxlength', '255');
            $adjustment[] = new MHContainer('hctInstitution', array( $institutionLabel, $institution ));

            // Semestre
            $semesterLabel = new MLabel(_M('Semestre', $module) . ':');
            $semesterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $semester = new MTextField('semester', (strlen($adjustmentData->semester) > 0 ? $adjustmentData->semester : $data->semester), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $semester->setJsHint(_M('Informe seu semestre atual',$module));
            $semester->setReadOnly($readOnly);
            $adjustment[] = new MHContainer('semesterCnt', array( $semesterLabel, $semester ));

            // Modalidade
            $trainingTypeLabel = new MLabel(_M('Modalidade', $module) . ':');
            $trainingTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $trainingTypeLabel->setClass('m-caption m-caption-required');
            $trainingTypeId = new MSelection('trainingTypeId', (strlen($adjustmentData->trainingTypeId) > 0 ? $adjustmentData->trainingTypeId : $data->trainingTypeId), null, TraTrainingType::listRecords());
            $trainingTypeId->setReadOnly($readOnly);
            $adjustment[] = new MHContainer('hctTrainingType', array($trainingTypeLabel, $trainingTypeId));
            $validators[] = new MRequiredValidator('trainingTypeId', _M('Modalidade', $module));


            /**
             * Unidade / area 
             */
            $unitAreaData = $data;
            $unitAreaData->unitAreaId = SAGU::NVL($adjustmentData->unitAreaId, $data->unitAreaId);
            $unitAreaObj = new TraUnitArea($unitAreaData->unitAreaId);
            $unitAreaData->unitId = $unitAreaObj->unitId;

            $listUnit = TraUnit::listUnit();
            
            $unitLabel = new MLabel(_M('Unidade', $module) . ':');
            $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $unit = new MSelection('unitId', $unitAreaObj->unitId, null, $listUnit);
            $unit->setJsHint(_M('Informe a unidade', $module));
            $unit->addAttribute('onChange', $this->getAjaxAction('changeUnitId', 'divUnitArea', false));
            $adjustment[] = new MHContainer('hct'.rand(), array($unitLabel, $unit));
            
            $adjustment[] = new MDiv('divUnitArea', $this->changeUnitId($unitAreaData));
            
            // Curso
            $value = SAGU::NVL($adjustmentData->courseId, $data->courseId);
            $label = _M('Curso', $module);
            $courseLabel = new MLabel($label . ':');
            $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $course = new MSelection('courseId', $value, null, TraCourse::listRecords());
            $course->setJsHint(_M('Informe o curso', $module));
            $adjustment[] = new MHContainer('hct'.rand(), array($courseLabel, $course));
            
            // Convênio
            $options = array(
                'module'=> 'training',
                'item' => 'Agreement',
                'related' => array('limbo', 'agreementIdDescription'),
                'hint' => _M('Código do convênio (apenas modalidades do tipo CURRICULAR devem possuir convênio)', $module),
                'descriptionHint' => _M('Convênio', $module),
                'readOnly'=>$readOnly
            );
            $agreementIdLabel = new MLabel(_M('Convênio', $module) . ':');
            $agreementIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            
            if(strlen($adjustmentData->agreementId) > 0)
            {
                $agreementValue = $adjustmentData->agreementId;
            }
            elseif (is_null($adjustmentData))
            {
                $agreementValue = $data->agreementId;
            }
            
            $agreementId = new SLookupContainer('agreementId', $agreementValue, $options);
            $adjustment[] = new MHContainer(rand(), array($agreementIdLabel, $agreementId));

            // Início previsto
            $beginDateLabel = new MLabel(_M('Início previsto', $module) . ':');
            $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $beginDate = new MCalendarField('beginDate', (strlen($adjustmentData->beginDate) > 0 ? $adjustmentData->beginDate : $data->beginDate), null, 10);
            $beginDate->setJsHint(_M('Informe a data de início prevista',$module));
            $beginDate->setReadOnly($readOnly);
            $adjustment[] = new MHContainer('beginDateCnt', array( $beginDateLabel, $beginDate ));

            // Fim previsto
            $endDateLabel = new MLabel(_M('Fim previsto', $module) . ':');
            $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $endDate = new MCalendarField('endDate', (strlen($adjustmentData->endDate) > 0 ? $adjustmentData->endDate : $data->endDate), null, 10);
            $endDate->setJsHint(_M('Informe a data de fim prevista',$module));
            $endDate->setReadOnly($readOnly);
            $adjustment[] = new MHContainer('endDateCnt', array( $endDateLabel, $endDate ));

            // Informacoes sobre o posto
            $placeLabel = new MLabel(_M('Informações sobre o posto', $module) . ':');
            $placeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $place = new MTextField('place',  SAGU::NVL($adjustmentData->place, $data->place), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $adjustment[] = new MHContainer(rand(), array( $placeLabel, $place ));
            
            // Informações complementares
            $observationLabel = new MLabel(_M('Informações complementares', $module) . ':');
            $observationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $observation = new MMultiLineField('observation', (strlen($adjustmentData->observation) > 0 ? $adjustmentData->observation : $data->observation), null,20, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
            $observation->setJsHint(_M('Informe uma observação',$module));
            $observation->setReadOnly($readOnly);
            $adjustment[] = new MHContainer('observationCnt', array( $observationLabel, $observation ));

            $bsgAdjustment = new MBaseGroup('bsgAdjustment', _M('Ajuste',$module), $adjustment, 'vertical');
            $fields[] = $bsgAdjustment;
        }
        
        // Back url
        $previousUrl = $this->getRequestValue('viewRequestPreviousUrl', $this->toolbar->getButtonUrl(MToolBar::BUTTON_BACK));

        $fields[] = new SHiddenField('viewRequestPreviousUrl', $previousUrl);
        $fields[] = new MButton('btnBack', _M('Voltar', $module), $previousUrl);

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Abre um arquivo
     *
     * @return NULL
     */
    public function openFile()
    {
        $MIOLO = MIOLO::getInstance();
        $busFile = new BusinessBasicBusFile();

        $args->fileId = MIOLO::_REQUEST('fileId');
        $file = $busFile->getFile($args->fileId);
        $busFile->getFileAsDownload($args->fileId, $file->contentType);

        return null;
    }
    
    public function displayMessageInsert()
    {
        $MIOLO = MIOLO::getInstance();
        $session = $MIOLO->GetSession();
        
        // Limpa historico de url's
        $session->set('mioloStack', null);
        $session->set('mioloStackPost', null);
        
        SAGU::information(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $this->getRequestValue('viewRequestPreviousUrl'));
    }
    

    /**
     * Função salvar
     *
     * @param type $sender
     */
    public function tbBtnSave_click($sender = NULL)
    {
        try
        {
            parent::tbBtnSave_click($sender);
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
    }
    
    
    /**
     * Popula selection da area
     * @param stdClass $args
     * @return Fields
     */
    public function changeUnitId($args, $readOnly = false)
    {
        $args->disableOnChange = true;
        $args->unitId = SAGU::NVL($args->unitId, $this->getFormValue('unitId'));
        
        return TraCommonFields::changeUnitId($args, $readOnly);
    }
        
    public function generateReport($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $data = $this->getTypesData();
        $options['module'] = $module;
        $options['reportName'] = 'encaminhamento_de_estagio';
        $options['parameters']['requestid'] = MIOLO::_REQUEST('requestId');

        $report = new SReport($options);

        if ( !$report->generate() )
        {
            $this->addError(_M('Nenhum registro encontrado.', $module ));
        }
    }
    
    public function tbBtnPrint_click($sender = null)
    {
        try
        {
            $resposta = parent::saveTypeData();
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
                
        if($resposta)
        {
            $this->generateReport();
        }
    }
}
?>