<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Vagas
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 2011/03/29
 *
 */
MIOLO::uses('/ui/controls/msubdetail.class');
class FrmAddendumVacancy extends FrmAddendumFather
{
    protected $traAddendum;

    public function __construct($steps)
    {
        parent::__construct(null, $steps, __CLASS__);
    }

    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $addendumId = MIOLO::_REQUEST('addendumId');

        $traAddendum = null;
        if ( strlen($addendumId) > 0 )
        {
            $this->traAddendum = $traAddendum = new TraAddendum($addendumId);
        }

        $data = $this->getStepData();
        if ( $this->isFirstAccess() && $traAddendum )
        {
            foreach ( $traAddendum->addendumCourse as $course )
            {
                $data->{"vacanciesPerAreaControl_{$course->courseId}"} = $course->vacanciesPerAreaControl;
                $data->{"courseVacancies_{$course->courseId}"} = $course->vacancies;
                $data->{"addendumCourseArea_{$course->courseId}"} = $course->addendumCourseArea;
            }
        }

        foreach ( (array) MSubDetail::getData('courses') as $row )
        {
            $courseId = $row->courseId;
            $idDistribute = "vacanciesPerAreaControl_{$courseId}";
            $idSubDetail = "subdetail{$courseId}";
            $idVacancy = "vacancy_{$courseId}";
            $idTotalVacancies = "courseVacancies_{$courseId}";

            if ( !$row->removeData )
            {
                $_fields = array();

                // Controle de vagas por área
                $vacanciesPerAreaControlValue = $this->GetFormValue($idDistribute, $data->$idDistribute);
                $vacanciesPerAreaControlValue = strlen($vacanciesPerAreaControlValue) <= 0 ? DB_TRUE : $vacanciesPerAreaControlValue;
                $_fields[] = $vacanciesPerAreaControl = new MRadioButtonGroup($idDistribute, _M('Controle de vagas por área', $module), SAGU::listYesNo(1), $vacanciesPerAreaControlValue, null, 'horizontal');
                $vacanciesPerAreaControl->setShowLabel(false);
                $vacanciesPerAreaControl->addAttribute('onclick', "checkDisplay{$courseId}();");

                $MIOLO->page->addJsCode("
                function checkDisplay{$courseId}()
                {
                    var checkd = document.getElementById('{$idDistribute}_0').checked;
                    document.getElementById('{$idVacancy}').style.display = checkd ? 'none' : 'block';
                    document.getElementById('{$idSubDetail}').style.display = checkd ? 'block' : 'none';
                }
                ");

                // Chama onchange ao carregar formulario, para esconder a div de acordo com o selecionado
                $MIOLO->page->onload("checkDisplay{$courseId}()");

                $_fields[] = new MDiv($idSubDetail, $this->getSubDetail($data, $row));

                // Total de vagas
                $totalVacanciesLabel = new MText("totalVacanciesLabel{$courseId}",  _M('Total de vagas', $module) .':');
                $totalVacanciesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
                $totalVacanciesLabel->setClass('m-caption m-caption-required');
                $totalVacancies = new MTextField($idTotalVacancies, $this->GetFormValue($idTotalVacancies, $data->$idTotalVacancies));
                $totalVacancies->setJsHint(_M('Informe o total de vagas', $module));
                $totalVacanciesCnt = new MHContainer("totalVacanciesCnt{$courseId}", array($totalVacanciesLabel, $totalVacancies));
                $_fields[] = new MDiv($idVacancy, $totalVacanciesCnt);

                $fields[] = $bgr = new sBaseGroup($name, _M('Vagas do curso @1 - @2', $module, $row->courseId, $row->courseIdDescription), $_fields);
            }
        }

        $this->setFields($fields);
        $this->SetValidators($validators);
        parent::CreateFields();
    }

    
    public function  nextStepButton_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $data = $this->getData();

        try
        {
            foreach ( (array) MSubDetail::getData('courses') as $row )
            {
                $vacanciesPerAreaControl = $data->{"vacanciesPerAreaControl_{$row->courseId}"};
                $vacancies = $data->{"courseVacancies_{$row->courseId}"};

                if ( $vacanciesPerAreaControl == DB_FALSE )
                {
                    if ( strlen($vacancies) <= 0 )
                    {
                        throw new Exception( _M('O campo Total de vagas é requerido', $module) );
                    }
                    else if ( !is_numeric($vacancies) )
                    {
                        throw new Exception( _M('O campo Total de vagas deve ser inteiro.', $module) );
                    }
                }
            }

            parent::nextStepButton_click($args);
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }

    
    /**
     * @param $data stdClass
     * @param $info stdClass MSubDetail row info
     */
    private function getSubDetail($data, $info)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        //Area
        $idArea = "areaId_{$info->courseId}";
        $idAreaDescription = "areaIdDescription{$info->courseId}";
        $areaIdLabel = new MText('areaIdLabel', _M('Área', $module).':');
        $areaIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $areaIdLabel->setClass('m-caption m-caption-required');
        $areaId = new MLookupTextField($idArea, $this->getFormValue($idArea, $data->$idArea), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), NULL, NULL, $idAreaDescription, 'training', 'Area', NULL, NULL, true);
        $areaId->setJsHint(_M('Informe o código da área', $module));
        $areaIdDescription = new MTextField($idAreaDescription, $this->getFormValue($idAreaDescription, $data->$idAreaDescription), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), NULL, true);
        $areaIdDescription->setJsHint(_M('Descrição da área', $module));
        $areaIdDescription->setReadOnly(true);
        $areaIdCnt = new MHContainer("{$idArea}_", array($areaIdLabel, $areaId, $areaIdDescription));
        $_validators[] = new MIntegerValidator($idArea, _M('Área', $module), 'required');
        $_validators[] = new MSubDetailUniqueValidator($idArea, _M('Área', $module));
        $_fields[] = $areaIdCnt;

        //Vagas
        $idVacancies = "vacancies_{$info->courseId}";
        $vacanciesLabel = new MText('vacanciesLabel',  _M('Vagas', $module) .':');
        $vacanciesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $vacanciesLabel->setClass('m-caption m-caption-required');
        $vacancies = new MTextField($idVacancies, $this->GetFormValue('vacancies', $data->vacancies));
        $vacanciesLabel->setJsHint(_M('Informe o número de vagas', $module));
        $_fields[] = $vacanciesCnt = new MHContainer('vacanciesCnt', array($vacanciesLabel, $vacancies));
        $_validators[] = new MIntegerValidator($idVacancies, _M('Vagas', $module), 'required');

        //Subdetail
        $_columns[] = new MGridColumn($idArea, null, true, '', false, $idArea);
        $_columns[] = new MGridColumn(_M('Área', $module), null, true, '', true, $idAreaDescription);
        $_columns[] = new MGridColumn(_M('Vagas', $module), null, true, '', true, $idVacancies);

        $idSub = "addendumCourseArea_{$info->courseId}";
        $sub = new MSubDetail($idSub, _M('Distribuição por área', $module), $_columns, $_fields, true);
        $sub->setValidators($_validators);
        $subData = $data->$idSub;
        if ( $this->isFirstAccess() && !$MIOLO->page->isPostBack() )
        {
            MSubDetail::clearData($idSub);

            if (count($subData) > 0)
            {
                $_subData = array();
                foreach ( (array) $subData as $row )
                {
                    $obj = new stdClass();
                    $obj->$idArea = $row->areaId;
                    $obj->$idAreaDescription = $row->areaIdDescription;
                    $obj->$idVacancies = $row->vacancies;

                    $_subData[] = $obj;
                }

                $sub->setData( $_subData );
            }
        }

        return $sub;
    }
}
?>