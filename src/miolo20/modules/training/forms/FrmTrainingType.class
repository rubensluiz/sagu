<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * Formulário de cadastro de modalidade
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 25/03/2011
 */

/**
 * Form to search the tra.trainingType table
 */
class FrmTrainingType extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new TraTrainingType(), array('trainingTypeId'), null);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_request('function');

        // Field training type id
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $trainingTypeId = MIOLO::_REQUEST('trainingTypeId');
            $fields[] = new MTextLabel('trainingTypeIdLabel', $trainingTypeId, _M('Código',$module));
            $fields[] = new MHiddenField('trainingTypeId', $trainingTypeId);

            $data = new TraTrainingType($trainingTypeId);
        }

        // Field description
        $fields[] = $description = new MTextField('description', $data->description, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M("Informe a descrição da modalidade", $module));
        $validators[] = new MRequiredValidator('description');

        // Field long description
        $fields[] = $longDescription = new MMultiLineField('longDescription', $data->longDescription, _M('Descrição complementar',$module), null, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $longDescription->setJsHint(_M('Informe a descrição complementar da modalidade',$module));

        // Documentos requeridos
        $fields[] = $requiredDocuments = new MMultiLineField('requiredDocuments', $data->requiredDocuments, _M('Documentos requeridos',$module), null, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $requiredDocuments->setJsHint(_M('Informe os documentos requeridos',$module));
        
        // Forma de avaliacao
        $fields[] = new MSelection('evaluationTypeId', $data->evaluationTypeId, _M('Forma de avaliação', $module), TraEvaluationType::listEvaluationType());
        $validators[] = new MRequiredValidator('evaluationTypeId', _M('Forma de avaliação', $module));
        
        //
        $fields[] = new MSelection('degreeEquivalenceId', $data->degreeEquivalenceId, _M('Equivalência de notas e conceito', $module), TraDegreeEquivalence::listDegreeEquivalence());
        
        // Field minimum interval
        $fields[] = $minimumInterval = new MTextField('minimumInterval', $data->minimumInterval, _M('Intervalo mínimo para nova solicitação',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Dias', $module));
        $minimumInterval->setJsHint(_M('Informe o número mínimo de dias após a conclusão de um estágio que a pessoa deve aguardar para solicitar um novo estágio.',$module));
        $validators[] = new MIntegerValidator('minimumInterval', _M('Intervalo mínimo para nova solicitação', $module), 'required');
        
        //Exigir semestre na solicitação
        $fields[] = $requiredSemester = new MSelection('requiresemester', $data->requireSemester, _M('Exigir na solicitação'), array(
            TraTrainingType::REQUIRE_SEMESTRE => _M('Semestre'),
            TraTrainingType::REQUIRE_RESIDENCIA => _M('Período de residência'),
            TraTrainingType::REQUIRE_NENHUM => _M('Nenhum')
        ));
        $validators[] = new MRequiredValidator('requiresemester', _M('Exigir na solicitação'));
        
        //Exigir instituição na solicitação
        $fields[] = $rrequireInstitution = new MCheckBox('requireInstitution', DB_TRUE, _M('Exigir instituição na solicitação', $module), ( $this->getFormValue('requireInstitution', $data->requireInstitution) == DB_TRUE ? true : false ));
        $rrequireInstitution->setJsHint(_M('Quando marcado, exige que o usuário preencha a instituição de origem na solicitação', $module));
        
        parent::defineFields($fields, $validators, $data);
    }
    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->requireInstitution = ( strlen($this->getFormValue('requireInstitution', MIOLO::_request('requireInstitution') )) > 0 ? DB_TRUE : DB_FALSE );
        return $data;
    }



    public function  tbBtnSave_click($sender = NULL)
    {
        $module = SAGU::getFileModule(__FILE__);
        $data = $this->getTypesData();

        if ( (strlen($data->degreeEquivalenceId)<=0) && ($data->evaluationTypeId != TraEvaluationType::BY_FREQUENCY) && ($data->evaluationTypeId != TraEvaluationType::NO_EVALUATION) )
        {
            $this->addError(_M('A forma de avaliação requer uma equivalência de notas e conceito.',$module));
        }
        else
        {
            parent::tbBtnSave_click();
        }
    }
}
?>