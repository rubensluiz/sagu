<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de inscrições
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 05/04/2011
 */
class FrmSubscription extends SManagementForm
{
    private $divGrid;

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new TraSubscription(), array('subscriptionId'), null, _M('Autorização de estágio'));

        // Dedsabilita alguns botões da MToolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_request('function');
        $action = MIOLO::getCurrentAction();
        $order    = MIOLO::_request('orderby');

        try
        {
            $physicalPerson = $this->getPhysicalPersonLogged();

            // Verifica se não achou a pessoa
            if ( !strlen($physicalPerson->personId) > 0 )
            {
                $msg = _M('O usuário logado não está relacionado a uma pessoa física.', $module);
                throw new Exception($msg);
            }
            
            // Verifica se é organizador de equipe
            if ( ! TraTeamOrganizer::isTeamOrganizer($physicalPerson->personId) )
            {
                throw new Exception(_M('O usuário logado não está associado a nenhuma unidade.', $module));
            }
        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }

        $fields[] = new MHiddenField('preceptorId', $physicalPerson->personId);
        $fields[] = new MTextLabel('userLabel', $physicalPerson->personId . ' - ' . $physicalPerson->name, _M('Usuário', $module));

        // Filtro para buscar somenta as unidades onde o usuário tem permissão
        $filterUnit = new stdClass();        
        $filterUnit->teamOrganizerId = $physicalPerson->personId;
        
        $unit = new MSelection('unitId', $this->getFormValue('unitId', $data->unitId), _M('Unidade', $module), TraUnit::listUnit($filterUnit));
        $unit->setJsHint(_M('Informe a unidade', $module));
        $unit->addAttribute('onChange', $this->getAjaxAction('changeUnitId', 'divUnitArea', false));
        $fields[] = $unit;

        $validators[] = new MRequiredValidator('unitId', _M('Unidade', $module));

        // Field area
        $fields[] = new MDiv('divUnitArea', $this->changeUnitId($data));

        // Status
        $fields[] = new MSelection('statusFilter', $this->getFormValue('statusFilter', $data->statusFilter), _M('Status', $module), TraSubscription::listStatus());
        
        // Conveniada
        $fields[] = new MCheckBox('conveniada', 't', _M('Exibir somente solicitações feitas pela conveniada'), FALSE);

        // Basegroups de periodos
        $bgrPeriods = array();
        
        /**
         * Período de datas de solicitação de estágio
         */
        //Field beginDate
        $beginDateLabel = new MLabel(_M('Início', $module) . ':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDate = new MCalendarField('beginDateRequest', $this->getFormValue('beginDateRequest', $data->beginDateRequest), null, 10);
        $beginDate->setJsHint(_M('Informe a data de início da solicitação de estágio',$module));
        $requestDateStage[] = new MHContainer('beginDateRequestCntI', array( $beginDateLabel, $beginDate ));

        //Field endDate
        $endDateLabel = new MLabel(_M('Fim', $module) . ':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDate = new MCalendarField('endDateRequest', $this->getFormValue('endDateRequest', $data->endDateRequest), null, 10);
        $endDate->setJsHint(_M('Informe a data de fim da solicitação de estágio',$module));
        $requestDateStage[] = new MHContainer('endDateRequestCntI', array( $endDateLabel, $endDate ));

        $bsgRequestDataStage = new MBaseGroup('bsgDataStage', _M('Período de solicitação',$module), $requestDateStage, 'vertical');
        $bgrPeriods[] = $bsgRequestDataStage;
        
        /**
         * Período de datas do estágio
         */
        // Field beginDate
        $beginDateLabel = new MLabel(_M('Início', $module) . ':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), null, 10);
        $beginDate->setJsHint(_M('Informe a data de início do período de estágio', $module));
        $dateStage[] = new MHContainer('beginDateCnt', array($beginDateLabel, $beginDate));

        // Field endDate
        $endDateLabel = new MLabel(_M('Fim', $module) . ':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), null, 10);
        $endDate->setJsHint(_M('Informe a data de fim do período de estágio', $module));
        $dateStage[] = new MHContainer('endDateCnt', array($endDateLabel, $endDate));

        $bsgDateStage = new MBaseGroup('bsgDataStage', _M('Período do estágio', $module), $dateStage, 'vertical');
        $bgrPeriods[] = $bsgDateStage;
        
        // Basegroups de periodo
        foreach ( $bgrPeriods as $bgrPeriod )
        {
            $bgrPeriod->setWidth('auto');
        }
        $fields[] = new MHContainer(rand(), $bgrPeriods);
        
        // Separator
        $fields[] = new MSeparator();
        $fields[] = new MButton('btnGenerate', _M('Localizar', $module));
        $fields[] = new MSeparator();

        $fields[] = $this->divGrid = new MDiv('divGrid');
        if ( $this->isPaginatingData() || in_array(SAGU::getEventName(), array('exportGridAsCSV:click', 'btnGenerate:click')) || ($order != null) )
        {
            $this->divGrid->setInner($this->generateGrid());
        }

        $fields[] = new MDiv('divPopup');

        /**
         * Cria o botão voltar quando chamado pelo módulo de serviços
         */
        $currentModule = $MIOLO->getCurrentModule();
        if( $currentModule == 'services' )
        {
            $fields[] = new MButton('btnBack', _M('Voltar', $module), $MIOLO->getActionURL($currentModule, substr($action, 0, strrpos($action, ':'))));
        }
        
        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Popula selection da area
     * @param <object> $args
     * @return Fields
     */
    public function changeUnitId($args, $readOnly = false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Obtém os dados
        $unitId = strlen($args->unitId) > 0 ? $args->unitId : $this->getFormValue('unitId');
        $preceptorId = strlen($args->preceptorId) > 0 ? $args->preceptorId : $this->getFormValue('preceptorId');
        $unitAreaId = $args->unitAreaId;
        
        $args->preceptorId = $preceptorId;
        $args->disableOnChange = true;
        $args->unitId = $unitId;
        // Caso tenha permissão de admin para esta tela trás todas as áreas
        if ( !$MIOLO->checkAccess('FrmSubscriptionTraining', A_ADMIN, false, true) )
        {
            $args->teamOrganizerId = $this->getPhysicalPersonLogged()->personId;
        }
        
        return TraCommonFields::changeUnitId($args, $readOnly);
    }

    /**
     * Função chamada na ação do botão localizar
     */
    public function generateGrid()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Filters
        $dataForm = $this->getTypesData();

        // Field separator
        $fields[] = new MSeparator();

        try
        {
            $dataForm->notInSubscriptionTeam = DB_TRUE;
            $dataForm->requestStatusAproved = DB_TRUE;
            $dataForm->teamOrganizerId = $this->getPhysicalPersonLogged()->personId;

            $data = TraSubscription::searchGridSubscription($dataForm);

            if ( count($data) > 0 )
            {
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdSubscription', $data);
                $grdResults->setData($data);
                $grdResults->setTitle(_M('Autorização de estágio', $module));
                $fields[] = $grdResults;

                $fields[] = new MSeparator();
                $statusLabel = new MLabel(_M('Definir selecionados como', $module));
                $statusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $status = new MSelection('status', null, null, TraSubscription::listStatus());
                $status->setJsHint(_M('Informe o status das solicitações selecionadas', $module));
                $fields[] = new MHContainer('hctStatus', array($statusLabel, $status));
                $fields[] = new MButton('btnApply', _M('Aplicar', $module));

                return $fields;
            }
            else
            {
                throw new Exception(_M('Nenhum registro encontrado.', $module));
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Função chamada na ação do botão localizar
     */
    public function btnApply_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        set_time_limit(0);

        // Status selecionado
        $status = MIOLO::_REQUEST('status');

        // Solicitações de estágio selecionadas na grid
        $selectedGrid = MIOLO::_REQUEST('selectGrdSubscription');

        try
        {
            if ( !strlen($status) > 0 )
            {
                $msg = _M("O campo 'Definir selecionados como' deve ser informado", $module) . '.';
                throw new Exception($msg);
            }

            // Verifica se foi selecionada pelo menos uma solicitação.
            if ( is_array($selectedGrid) )
            {
                SDatabase::beginTransaction();

                // Muda status das solicitações selecionadas
                foreach ( $selectedGrid as $requestId )
                {
                    $filters = new stdClass();
                    $filters->requestId = $requestId;
                    $traSearchSubscription = TraSubscription::search($filters);

                    $subscriptionId = null;
                    if ( is_array($traSearchSubscription) )
                    {
                        $subscription = $traSearchSubscription[0];
                        $subscriptionId = $subscription->subscriptionId;
                    }

                    $traSubscription = new TraSubscription($subscriptionId);
                    $traSubscription->requestId = $requestId;
                    $traSubscription->status = $status;
                    $traSubscription->desistenceDate = null;

                    if ( $status == TraSubscription::DESISTENCE )
                    {
                        $traSubscription->desistenceDate = SAGU::getDateNow();
                    }
                    $traSubscription->save();
                }

                SDatabase::commit();

                $this->SetFormValue('selectGrdSubscription', null);
            }
            else
            {
                $msg = _M("É necessário selecionar pelo menos uma solicitação", $module) . '.';
                throw new Exception($msg);
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }

        $this->divGrid->setInner($this->generateGrid());
    }

    /**
     * Obtém os dados do form
     */
    public function getTypesData()
    {
        $data = new stdClass();
        $data->preceptorId = MIOLO::_REQUEST('preceptorId');
        $data->unitId = MIOLO::_REQUEST('unitId');
        $data->beginDateRequest = MIOLO::_REQUEST('beginDateRequest');
        $data->endDateRequest = MIOLO::_REQUEST('endDateRequest');
        $data->beginDate = MIOLO::_REQUEST('beginDate');
        $data->endDate = MIOLO::_REQUEST('endDate');
        $data->unitAreaId = MIOLO::_REQUEST('unitAreaId');
        $data->notInSubscription = MIOLO::_REQUEST('notInSubscription');
        $data->statusFilter = MIOLO::_REQUEST('statusFilter');
        $data->conveniada = MIOLO::_REQUEST('conveniada');

        return $data;
    }
}
?>