<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 2011/03/29
 */
class FrmUnitArea extends SManagementForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/ui/controls/msubdetail.class');

        parent::__construct(new TraUnitArea(), array('unitAreaId'));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $unitAreaId = MIOLO::_REQUEST('unitAreaId');
            $fields[] = new MHiddenField('unitAreaId', $unitAreaId);
            $fields[] = new MTextLabel('unitAreaLabel', $unitAreaId, _M('Código', $module));
            $data = new TraUnitArea($unitAreaId);
            $unitId = new MSelection('unitIdLabel', $this->getFormValue('unitId', $data->unitId), _M('Unidade', $module), TraUnit::listUnit());
            $fields[] = new MHiddenField('unitId', $data->unitId);
        }
        else
        {
            $unitId = new MSelection('unitId', $this->getFormValue('unitId', $data->unitId), _M('Unidade', $module), TraUnit::listUnit());
        }

        $fields[] = $tab = new MTabbedBaseGroup('unitArea');
        $tab->createTab('tabAreaData', _M('Dados da área', $module), $this->getAreaDataFields($validators, $data));
        $tab->createTab('tabDocument', _M('Documentos necessários', $module), $this->getDocumentFields($validators, $data));
        $tab->createTab('tabCourse', _M('Cursos', $module), $this->getCourseFields($validators, $data));
        $tab->createTab('tabTrainingType', _M('Modalidade', $module), $this->getTrainingTypeFields($validators, $data));
        $tab->createTab('tabTeam', _M('Equipes', $module), $this->getTeamFields($validators, $data));
        
        parent::defineFields($fields, $validators, $data);
    }
    
    
    /**
     * Aba Dados da área
     *
     * @param type $validators
     * @param type $data
     * @return MBaseGroup 
     */
    public function getAreaDataFields(&$validators, &$data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        
        // Campo unidade
        $unitId = new MSelection('unitId', $this->getFormValue('unitId', $data->unitId), _M('Unidade', $module), TraUnit::listUnit());
        $unitId->setJsHint(_M('Informe o código da unidade', $module));
        $unitId->setReadOnly(in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)));
        $fields[] = $unitId;

        // Campo área
        $areaIdLabel = new MText('areaIdLabel', _M('Área', $module) . ':');
        $areaIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $areaIdLabel->setClass('m-caption m-caption-required');
        $areaId = new MLookupTextField('areaId', $this->getFormValue('areaId', $data->areaId), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'areaIdDescription', 'training', 'Area', null, null, true);
        // Populate field areaIdDescription in update function
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $dataArea = new TraArea($data->areaId);
            $data->areaIdDescription = $dataArea->description;
            $areaId->setReadOnly(true);
        }
        // Campo descrição da área
        $areaId->setJsHint(_M('Informe o código da área', $module));
        $areaIdDescription = new MTextField('areaIdDescription', $this->getFormValue('areaIdDescription', $data->areaIdDescription), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), NULL, true, true);
        $areaIdDescription->setJsHint(_M('Descrição da área', $module));
        $hctAreaId = new MHContainer('areaIdCnt', array($areaIdLabel, $areaId, $areaIdDescription));
        $fields[] = $hctAreaId;
        
        // Campo vagas
        $fields[] = $vacancies = new MTextField('vacancies', $this->getFormValue('vacancies', $data->vacancies), _M('Vagas', $module), 10);
        $vacancies->setJsHint(_M('Informe o número de vagas', $module));

        // Campo data de início
        $fields[] = $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data de início', $module), 10);
        $beginDate->setJsHint(_M('Informe a data de início', $module));

        // Campo data de fim
        $fields[] = $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data de fim', $module), 10);
        $endDate->setJsHint(_M('Informe a data de fim', $module));
        
        // Indique se a informação do posto onde o estágio é realizado deve aparecer ou não.
        $fields[] = $requireTrainingPlace = new MRadioButtonGroup('requireTrainingPlace', _M('Exige informações sobre o posto', $module), SAGU::listYesNo(), $this->getFormValue('requireTrainingPlace', MUtil::NVL($data->requireTrainingPlace, DB_FALSE)), null, 'horizontal');
        $requireTrainingPlace->setJsHint( _M('Exige informações na solicitação de estágio pela conveniada ou solicitação interna  sobre o posto onde o estágio será realizado', $module) );

        // Campo preceptor
        $preceptorIdLabel = new MText('preceptorIdLabel', _M('Preceptor chefe', $module) . ':');
        $preceptorIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $preceptorIdLabel->setClass('m-caption m-caption-required');
        $preceptorId = new MLookupTextField('preceptorId', $this->getFormValue('preceptorId', $data->preceptorId), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), NULL, NULL, 'preceptorIdDescription', 'basic', 'PhysicalPerson', NULL, NULL, true);
        $preceptorId->setJsHint(_M('Informe o código do preceptor chefe', $module));
        $preceptorIdDescription = new MTextField('preceptorIdDescription', $this->getFormValue('preceptorIdDescription', $data->preceptorIdDescription), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), NULL, true, true);
        $preceptorIdDescription->setJsHint(_M('Descrição do preceptor chefe', $module));
        $preceptorId = new MHContainer('preceptorIdCnt', array($preceptorIdLabel, $preceptorId, $preceptorIdDescription));
        $responsible[] = $preceptorId;

        /*
         * Subdetail teamOrganizer
         */
        // Campo organizador
        $personIdLabel = new MLabel(_M('Organizador', $module) . ':');
        $personId = new SLookupContainer('personId', null, array(
            'item' => 'PhysicalPerson',
            'module' => 'basic',
        ));
        $subFields[] = new MHContainer('hctperson', array($personIdLabel, $personId));
        $sValidators[] = new MSubDetailUniqueValidator('personId', _M('Organizador', $module), 'required');

        $columns[] = new sSubDetailColumn('personId', array('visible' => false));
        $columns[] = new sSubDetailColumn('personIdDescription', array('label' => 'Organizador'));

        $responsible[] = $sub = new MSubDetail('teamOrganizer', _M('Organizadores', $module), $columns, $subFields);
        $sub->setValidators($sValidators);

        // Popula a MSubdetail
        $subDetailData = (array)MSubDetail::getData('teamOrganizer');
        if ( !(count($subDetailData) > 0) )
        {
            $subDetailData = (array)SAGU::convertSTypeToSubDetail($columns, $data->teamOrganizer);
        }
        $sub->setData($subDetailData);

        // Basegroup responsáveis
        $fields[] = new MBaseGroup('baseResponsible', _M('Responsáveis', $module), $responsible, 'vertical');

        // Validadores
        $validators[] = new MIntegerValidator('preceptorId', _M('Preceptor chefe', $module), 'required');
        $validators[] = new MRequiredValidator('unitId', _M('Unidade', $module), 'required');
        $validators[] = new MIntegerValidator('areaId', _M('Área', $module), 'required');
        $validators[] = new MDateDMYValidator('beginDate', _M('Data inicial', $module), 'required');
        $validators[] = new MIntegerValidator('vacancies', _M('Vagas', $module), 'required');
        
        $validators[] = new MDateDMYValidator('endDate', _M('Data final', $module));
        
        return $fields;
    }
    
    
    
    public function getDocumentFields(&$validators, &$data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');


        $subFields = array();
        
        $subFields[] = new SHiddenField('documentId');
        
        // Descricao
        $subFields[] = $description = new MTextField('__description', null, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $subValidators[] = new MRequiredValidator('__description', _M('Descrição', $module));
        
        // Obrigatoria entrega
        $subFields[] = $isMandatory = new MSelection('isMandatory', null, _M('É obrigatória a entrega', $module), SAGU::listYesNo());
        $subValidators[] = new MRequiredValidator('isMandatory', _M('É obrigatória a entrega', $module));

        // Obrigatoria entrega
        $subFields[] = $extinct = new MSelection('extinct', null, _M('Extinta a entrega do documento', $module), SAGU::listYesNo());
        $subValidators[] = new MRequiredValidator('extinct', _M('Extinta a entrega do documento', $module));
        
        // Obrigatoria entrega
        $subFields[] = $hasTextContent = new MSelection('hasTextContent', null, _M('Tem conteúdo textual', $module), SAGU::listYesNo());
        $subValidators[] = new MRequiredValidator('hasTextContent', _M('Tem conteúdo textual', $module));
        
        // Anexos permitidos
        $subFields[] = $numberOfAttachments = new MTextField('numberOfAttachments', null, _M('Anexos permitidos', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $subValidators[] = new MIntegerValidator('numberOfAttachments', _M('Anexos permitidos', $module), 'required');
        
        $subCols = array(
            new sSubDetailColumn('documentId', array('visible' => false)),
            new sSubDetailColumn('__description', array('label' => _M('Descrição do documento', $module))),
            new sSubDetailColumn('isMandatory', array('label' => _M('É obrigatória a entrega', $module), 'replace' => SAGU::listYesNo())),
            new sSubDetailColumn('extinct', array('label' => _M('Extinta a entrega do documento', $module), 'replace' => SAGU::listYesNo())),
            new sSubDetailColumn('hasTextContent', array('label' => _M('Tem conteúdo textual', $module), 'replace' => SAGU::listYesNo())),
            new sSubDetailColumn('numberOfAttachments', array('label' => _M('Anexos permitidos', $module))),
        );
        
        $fields[] = $sub = new MSubDetail('documents', _M('Documentos necessários para a área', $module), $subCols, $subFields);
        $sub->setValidators($subValidators);
        
        if ( $this->isSubDetailEditMode() )
        {
            $sub->setData( SAGU::convertSTypeToSubDetail($subCols, $data->documents) );
        }
        
        return $fields;
    }
    
    
    public function getCourseFields(&$validators, &$data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        
        $subFields = array();
        
        $subFields[] = new SHiddenField('courseAreaId');
        
        // Curso
        $subFields[] = $courseId = new SLookupContainer('courseId', null, array(
            'item' => 'Course',
            'module' => 'training',
            'label' => _M('Curso', $module),
            'required' => true,
        ));
        $subValidators[] = new MIntegerValidator('courseId', _M('Curso', $module), 'required');
        $subValidators[] = new MSubdetailUniqueValidator('courseId', _M('Curso', $module));
        
        // Plano de atividades
        $subFields[] = $activitiesPlan = new sMultiLineField('activitiesPlan', array(
            'label' => _M('Plano de atividades', $module),
        ));
        
        $subCols = array(
            new sSubDetailColumn('courseAreaId', array('visible' => false)),
            new sSubDetailColumn('courseId', array('label' => _M('Código do curso', $module))),
            new sSubDetailColumn('courseIdDescription', array('label' => _M('Curso', $module))),
            new sSubDetailColumn('activitiesPlan', array('label' => _M('Plano de atividades', $module))),
        );
        
        $fields[] = $sub = new MSubDetail('courses', _M('Cursos', $module), $subCols, $subFields);
        $sub->setValidators($subValidators);
        
        if ( $this->isSubDetailEditMode() )
        {
            $sub->setData( SAGU::convertSTypeToSubDetail($subCols, $data->courses) );
        }
        
        return $fields;
    }
    
    
    public function getTrainingTypeFields(&$validators, &$data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        
        // Indexa lista por modalidade
        $ttaIndexed = array();
        foreach ( (array) $data->trainingTypeArea as $row )
        {
            $ttaIndexed[$row->trainingTypeId] = $row;
        }
        
        $tbData = array();
        $selecteds = array();
        $trainingMinimumDuration = MIOLO::_REQUEST('trainingMinimumDuration');
        $trainingMaximumDuration = MIOLO::_REQUEST('trainingMaximumDuration');
        $minimumSemester = MIOLO::_REQUEST('minimumSemester');
        foreach ( (array) TraTrainingType::search() as $key => $row )
        {
            $id = "trainingMinimumDuration[$row->trainingTypeId]";
            $value = MUtil::NVL( $trainingMinimumDuration[$row->trainingTypeId], $ttaIndexed[$row->trainingTypeId]->trainingMinimumDuration );
            $fldMinDuration = new MTextField($id, $value);
            $fldMinDuration->setJsHint( _M('Duração mínima do estágio expressa em dias', $module) );
            $validators[] = new MIntegerValidator($id, _M('Duração min (@1)', $module, $row->description));
            
            $id = "trainingMaximumDuration[$row->trainingTypeId]";
            $value = MUtil::NVL( $trainingMaximumDuration[$row->trainingTypeId], $ttaIndexed[$row->trainingTypeId]->trainingMaximumDuration );
            $fldMaxDuration = new MTextField($id, $value);
            $fldMaxDuration->setJsHint( _M('Duração máxima do estágio expressa em dias', $module) );
            $validators[] = new MIntegerValidator($id, _M('Duração max (@1)', $module, $row->description));
            
            $id = "minimumSemester[$row->trainingTypeId]";
            $value = MUtil::NVL( $minimumSemester[$row->trainingTypeId], $ttaIndexed[$row->trainingTypeId]->minimumSemester );
            $fldSemester = new MTextField($id, $value);
            $fldSemester->setJsHint( _M('Semestre mínimo que um solicitante deve estar nesta modalidade para poder se inscrever nesta unidade/área', $module) );
            $validators[] = new MIntegerValidator($id, _M('Semestre min (@1)', $module, $row->description));
            
            $tbData[] = array(
                $row->description,
                $fldMinDuration->generate(),
                $fldMaxDuration->generate(),
                $fldSemester->generate());
            
            // Trazer selecionado na grid
            if ( isset($ttaIndexed[$row->trainingTypeId]) )
            {
                $selecteds[] = $key;
            }
        }
        
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdUnitAreaTrainingType');
        $grid->setData($tbData);
        $grid->selecteds = MUtil::NVL( array_keys( (array) MIOLO::_REQUEST('selectGrdUnitAreaTrainingType') ), $selecteds );
        $fields[] = $grid = new MDiv(rand(), $grid);
        
        return $fields;
    }
    
    
    public function getTeamFields(&$validators, &$data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $subFields[] = new SHiddenField('teamId');
        
        // Field description
        $subFields[] = $description = new MTextField('_description', $this->getFormValue('_description', $data->description), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição da equipe', $module));
        $subValidators[] = new MRequiredValidator('_description', _M('Descrição', $module));

        // Field begin date
        $subFields[] = $beginDate = new MCalendarField('_beginDate', $this->getFormValue('_beginDate', $data->_beginDate), _M('Início', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Data inicial da equipe', $module));
        $subValidators[] = new MDateDMYValidator('_beginDate', _M('Início', $module), 'required');
        $validators[] = new MDateDMYValidator('_beginDate', _M('Início', $module));

        // Field end date
        $subFields[] = $endDate = new MCalendarField('_endDate', $this->getFormValue('_endDate', $data->_endDate), _M('Fim', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Data final da equipe', $module));
        $subValidators[] = new MDateDMYValidator('_endDate', _M('Fim', $module));
        $validators[] = new MDateDMYValidator('_endDate', _M('Fim', $module));

        // Field preceptorId
        $subFields[] = $preceptorId = new SLookupContainer('_preceptorId', null, array(
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'label' => _M('Preceptor', $module),
            'required' => true,
        ));
        $subValidators[] = new MRequiredValidator('_preceptorId', _M('Preceptor', $module));

        // Field vacancies
        $subFields[] = $vacancies = new MTextField('_vacancies', $this->getFormValue('_vacancies', $data->_vacancies), _M('Vagas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $vacancies->setJsHint(_M('Informe o número de vagas da equipe', $module));
        $subValidators[] = new MIntegerValidator('_vacancies', _M('Vagas', $module), 'required');

        // Field place
        $subFields[] = $place = new MTextField('place', $this->getFormValue('place', $data->place), _M('Local', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        
        $subCols = array(
            new sSubDetailColumn('teamId', array('visible' => false)),
            new sSubDetailColumn('_description', array('label' => _M('Nome', $module))),
            new sSubDetailColumn('_beginDate', array('label' => _M('Início', $module))),
            new sSubDetailColumn('_endDate', array('label' => _M('Fim', $module))),
            new sSubDetailColumn('_preceptorId', array('label' => _M('Código do preceptor', $module))),
            new sSubDetailColumn('_preceptorIdDescription', array('label' => _M('Preceptor', $module))),
            new sSubDetailColumn('_vacancies', array('label' => _M('Vagas', $module))),
            new sSubDetailColumn('place', array('label' => _M('Local', $module))),
        );
        
        $fields[] = $sub = new MSubDetail('teams', _M('Equipes', $module), $subCols, $subFields);
        $sub->setValidators($subValidators);
        
        
        if ( $this->isSubDetailEditMode() )
        {
            $sub->setData( SAGU::convertSTypeToSubDetail($subCols, $data->teams) );
        }
        
        return $fields;
    }
    

    /**
     * Botão de novo registro
     */
    public function tbBtnNew_click($sender = NULL)
    {
        MSubDetail::clearData('teamOrganizer');
        MSubDetail::clearData('documents');
        MSubDetail::clearData('courses');
        MSubDetail::clearData('teams');

        return parent::tbBtnNew_click($sender);
    }
    
    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        
        try
        {
            parent::tbBtnSave_click();
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Obtém os dados do formulário
     *
     * @return type
     */
    public function beforeSave($data)
    {
        $module = SAGU::getFileModule(__FILE__);
        $unitAreaId = MIOLO::_REQUEST('unitAreaId');
        
        // Modalidades (TraTrainingTypeArea)
        $selecteds = (array) MIOLO::_REQUEST('selectGrdUnitAreaTrainingType');
        $trainingMinimumDuration = MIOLO::_REQUEST('trainingMinimumDuration');
        $trainingMaximumDuration = MIOLO::_REQUEST('trainingMaximumDuration');
        $minimumSemester = MIOLO::_REQUEST('minimumSemester');
        $keys = array_keys($trainingMinimumDuration);
        $selectedKeys = array();
        $trainingTypeArea = array();
        foreach ( $selecteds as $key => $val )
        {
            $selectedKeys[] = $keys[ $key ];
        }
        
        foreach ( $selectedKeys as $key => $trainingTypeId )
        {
            $obj = new TraTrainingTypeArea();
            $obj->trainingTypeId = $trainingTypeId;
            $obj->trainingMinimumDuration = $trainingMinimumDuration[$trainingTypeId];
            $obj->trainingMaximumDuration = $trainingMaximumDuration[$trainingTypeId];
            $obj->minimumSemester = $minimumSemester[$trainingTypeId];
            
            $arr = array($obj->trainingMinimumDuration, $obj->trainingMaximumDuration, $obj->minimumSemester);
            foreach ( $arr as $val )
            {
                if ( strlen($val) <= 0 )
                {
                    throw new Exception( _M('Todos os campos para as respectivas linhas selecionadas na aba Modalidade devem ser preenchidos.', $module) );
                }
            }
            
            $trainingTypeArea[] = $obj;
        }
        $data->trainingTypeArea = $trainingTypeArea;
        
        // Organizadores da equipe
        $data->teamOrganizer = SAGU::convertSubDetailToSType('teamOrganizer', new TraTeamOrganizer());
        $data->documents = SAGU::convertSubDetailToSType('documents', new TraDocument());
        $data->courses = SAGU::convertSubDetailToSType('courses', new TraCourseArea());
        $data->teams = SAGU::convertSubDetailToSType('teams', new TraTeam());
        
        // unitArea
        $unitArea = null;
        if ( strlen($unitAreaId) > 0 )
        {
            $unitArea = new TraUnitArea($unitAreaId);
        }
        if ( $unitArea )
        {
            foreach ( (array) $unitArea->trainingTypeArea as $row )
            {
                $row->delete();
            }
        }
        
        return $data;
    }
}
?>