<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário para impressão da declaração de aceito
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 07/04/2011
 */

class FrmDeclarationAccept extends SForm
{
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Declaração de aceito', $module), null, null);

        // Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        // Field request (lookup)
        $fields[] = new MLookupTextField('requestId', '', _M('Solicitação', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), '', null, 'requestId, personId, personName, unitId, unitDescription, courseId, courseDescription, areaId, areaDescription', $module, 'Request');
        $validators[] = new MRequiredValidator('requestId', _M('Solicitação', $module));

        // Field subscription (lookup)
        $subscription = new MLookupContainer('personId', 'personName', '', _M('Estagiário',$module), 'personId, personName, unitId, unitDescription, courseId, courseDescription, areaId, areaDescription, requestId', $module, 'Subscription', array('personId' => 'personId'), true, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), !$this->page->isPostBack());
        $subscription->setLookupJsHint(_M('Informe o código do estagiário', $module));
        $subscription->setDescriptionJsHint(_M('Nome do estagiário', $module));
        $fields[] = $subscription;
        
        // Fields of the unit
        $unitLabel = new MText('unitLabel', _M('Unidade',$module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitId = new MTextField('unitId', $this->getFormValue('unitId'), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitId->setJsHint(_M('Código da unidade', $module));
        $unitId->setReadOnly(true);
        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription'), _M('Descrição do turno', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $unitDescription->setJsHint(_M('Descrição da unidade', $module));
        $unitDescription->setReadOnly(true);
        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(false);
        $fields[] = $hctUnit;

        // Fields of the turn
        $courseLabel = new MText('turnLabel', _M('Curso',$module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseId = new MTextField('courseId', $this->getFormValue('courseId'), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseId->setJsHint(_M('Código do curso', $module));
        $courseId->setReadOnly(true);
        $courseDescription = new MTextField('courseDescription', $this->getFormValue('courseDescription'), _M('Descrição do turno', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseDescription->setJsHint(_M('Descrição do curso', $module));
        $courseDescription->setReadOnly(true);
        $hctCourse = new MHContainer('hctTurn', array($courseLabel, $courseId, $courseDescription));
        $hctCourse->setShowLabel(false);
        $fields[] = $hctCourse;

        // Fields of the area
        $areaLabel = new MText('areaLabel', _M('Área',$module) . ':');
        $areaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $areaId = new MTextField('areaId', $this->getFormValue('areaId'), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $areaId->setJsHint(_M('Código da área', $module));
        $areaId->setReadOnly(true);
        $areaDescription = new MTextField('areaDescription', $this->getFormValue('turnDescription'), _M('Descrição do turno', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $areaDescription->setJsHint(_M('Descrição da área', $module));
        $areaDescription->setReadOnly(true);
        $hctArea = new MHContainer('hctArea', array($areaLabel, $areaId, $areaDescription));
        $hctArea->setShowLabel(false);
        $fields[] = $hctArea;

        // Current date
        $fields[] = new MHiddenField('dateNow', SAGU::getDateByExtense(SAGU::getDateNow()));

        // Formato
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat', _M('Formato do relatório', $module));

        // Separator
        $fields[] = new MSeparator('');

        $this->setValidators($validators);
        $this->setFields($fields);
        
        parent::defineFields();
    }

    /**
     * Método para geração do Relatório
     */
    public function generateReport($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();
        $options['module'] = $module;
        $options['reportName'] = 'trainingDeclarationAccept';

        if ( strlen($data->personId)>0 )
        {
            $options['parameters']['personId'] = $data->personId;
        }

        if ( strlen($data->requestId)>0 )
        {
            $options['parameters']['requestId'] = $data->requestId;
        }

        if ( strlen($data->dateNow)>0 )
        {
            $options['parameters']['dateNow'] = $data->dateNow;
        }

        if ( strlen($data->reportFormat)>0 )
        {
            $options['fileType'] = $data->reportFormat;
        }

        $sreport = new SReport($options);

        if ( !$sreport->generate() )
        {
            $this->addError(_M('Nenhum registro encontrado.', $module ));
        }
    }

    /**
     * Método que obtem os dados do formulário.
     */
    public function getTypesData() 
    {
        $data = new stdClass();
        $data->personId = $this->GetFormValue('personId');
        $data->requestId = $this->GetFormValue('requestId');
        $data->dateNow = $this->GetFormValue('dateNow');
        $data->reportFormat = $this->GetFormValue('reportFormat');

        return $data;
    }
}
?>
