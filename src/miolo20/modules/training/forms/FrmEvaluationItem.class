<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 24/03/2011
 *
 **/
MIOLO::uses('/ui/controls/msubdetail.class');
class FrmEvaluationItem extends SManagementForm
{
    public function __construct($data)
    {
        parent::__construct(new TraEvaluationGroup(), array('evaluationGroupId'));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $evaluationGroupId = MIOLO::_REQUEST('evaluationGroupId');
            
            $fields[] = new MTextLabel('evaluationGroupId', $evaluationGroupId, _M('Código', $module));
            $fields[] = new MHiddenField('evaluationGroupId', $evaluationGroupId);

            $data = new TraEvaluationGroup($evaluationGroupId);
        }

        //Descricao do grupo de questões.
        $fields[] = $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição do grupo de questões', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição do gupo de questões.', $module));
        $validators[] = new MRequiredValidator('description');

        //Ordem de exibicao
        $fields[] = $groupOrder = new MTextField('groupOrder', $this->getFormValue('groupOrder', $data->groupOrder), _M('Ordem de exibição', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $groupOrder->setJsHint( _M('Número do grupo, a ser ordenado de forma crescente.', $module) );
        $validators[] = new MIntegerValidator('groupOrder', _M('Ordem de exibição', $module), 'required');

        //
        //Subdetail
        //
        $_fields[] = new SHiddenField('evaluationItemId');

        //Ordem de exibicao
        $_fields[] = $degreeOrder = new MTextField('degreeOrder', null, _M('Ordem de exibição', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $degreeOrder->setJsHint( _M('Número do item, a ser ordenado de forma crescente dentro do grupo.', $module) );
        $_validators[] = new MIntegerValidator('degreeOrder', _M('Ordem de exibição', $module), 'required');

        //Descricao do menor conceito
        $_fields[] = $lowestDegreeDescription = new MMultiLineField('lowestDegreeDescription', null, _M('Descrição do menor conceito', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), 5, 40);
        $lowestDegreeDescription->setJsHint( _M('Descrição do menor conceito', $module) );
        $_validators[] = new MRequiredValidator('lowestDegreeDescription', _M('Descrição do menor conceito', $module), 'required');

        //Descricao do maior conceito
        $_fields[] = $highestDegreeDescription = new MMultiLineField('highestDegreeDescription', null, _M('Descrição do maior conceito', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), 5, 40);
        $highestDegreeDescription->setJsHint( _M('Descrição do maior conceito', $module) );
        $_validators[] = new MRequiredValidator('highestDegreeDescription', _M('Descrição do maior conceito', $module), 'required');

        $_columns[] = new MGridColumn(_M('Código', $module), 'left', true, '', false, 'evaluationItemId');
        $_columns[] = new MGridColumn(_M('Ordem de exibição', $module), 'left', true, '', true, 'degreeOrder');
        $_columns[] = new MGridColumn(_M('Descrição do menor conceito', $module), 'left', true, '', true, 'lowestDegreeDescription');
        $_columns[] = new MGridColumn(_M('Descrição do maior conceito', $module), 'left', true, '', true, 'highestDegreeDescription');

        $fields[] = $sub = new MSubDetail('evaluationItem', _M('Itens de avaliação (questões)', $module), $_columns, $_fields, true);
        $sub->setValidators($_validators);

        parent::defineFields($fields, $validators, $data);

        //Subdetail related
        if (!$MIOLO->page->isPostBack())
        {
            MSubDetail::clearData('evaluationItem');
            if ( count($data->evaluationItem) > 0 )
            {
                $sub->setData( SAGU::convertSTypeToSubDetail($_columns, $data->evaluationItem) );
            }
        }
    }

    public function  getTypesData()
    {
        $data = parent::getTypesData();

        $evaluationItem = MSubDetail::getData('evaluationItem');
        $rows = array();
        foreach ( (array) $evaluationItem as $row )
        {
            $rows[] = $obj = new TraEvaluationItem($row->evaluationItemId);
            foreach ( (array) $row as $key => $val )
            {
                $obj->$key = $val;
            }
        }
        $data->evaluationItem = $rows;

        return $data;
    }
}
?>
