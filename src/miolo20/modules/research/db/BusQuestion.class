<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCourse table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 07/08/2005
 */
/**
 * Class to manipulate the basCountry table
 */
class BusinessResearchBusQuestion extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @return (array): Return an array with the entire table
     */
    public function listQuestion()
    {
        $db = $this->getDatabase();
        $sql = 'SELECT questionId,
                       substr(description, 1, 60),
                       answerTypeId
                  FROM rshQuestion
              ORDER BY questionId ';

        if ( isset($formId) )
        {
            $sql .= ' WHERE formId = ? ';
            $args[] = $formId;
        }

        if ( isset($questionCategoryId) )
        {
            $sql .= ' WHERE questionCategoryId = ? ';
            $args[] = $questionCategoryId;
        }

        $ret = $db->query(SAGU::prepare($sql, $args));

        return $ret;
    }

    /**
     * Retorna um array com as questões de um formulário
     *
     * @param integer $formId
     * @return array
     */
    public function listQuestionToForm($formId)
    {
        $db = $this->getDatabase();
        $sql = 'SELECT questionId,
                       questionId || \' - \' || substr(description, 1, 60)--,
                  FROM rshQuestion
                 WHERE formId = '.$formId.'
              ORDER BY questionId ';

        $ret = $db->query(SAGU::prepare($sql, $args));

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     */
    public function getQuestion($questionId)
    {
        $sql = 'SELECT A.questionId,
                       A.description,
                       A.answerTypeId,
                       B.formId,
                       B.description,
                       B.shortDescription,
                       B.isRestricted,
                       B.isIdentified,
                       C.questionCategoryId,
                       C.description,
                       A.userName,
                       A.dateTime,
                       A.ipAddress,
                       A.isRequired
                 FROM rshQuestion A
            LEFT JOIN rshForm B
                   ON (A.formId = B.formId)
            LEFT JOIN rshQuestionCategory C
                   ON (A.questionCategoryId = C.questionCategoryId)
                WHERE questionId = ? ';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $questionId));

        $question = new rshQuestion();
        list ( $question->questionId,
               $question->description,
               $question->answerTypeId,
               $question->formId,
               $question->formDescription,
               $question->shortDescription,
               $question->isRestricted,
               $question->isIdentified,
               $question->questionCategoryId,
               $question->questionCategoryDescription,
               $question->userName,
               $question->dateTime,
               $question->ipAddress,
               $question->isRequired ) = $result[0];

        return $question;
    }


    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     */
    public function searchQuestion($filters, $returnAsObject = false)
    {
        $sql = 'SELECT A.questionId,
                       A.description,
                       A.answerTypeId,
                       B.formId,
                       B.description,
                       B.shortDescription,
                       B.isRestricted,
                       B.isIdentified,
                       C.questionCategoryId,
                       C.description,
                       D.description,
                       A.userName,
                       A.dateTime,
                       A.isRequired,
                       A.ipAddress
                  FROM rshQuestion A
             LEFT JOIN rshForm B
                    ON (A.formId = B.formId)
             LEFT JOIN rshQuestionCategory C
                    ON (A.questionCategoryId = C.questionCategoryId)
             LEFT JOIN rshAnswerType D
                    ON (A.answerTypeId = D.answerTypeId)';

        $columns  = array(
            'questionId',
            'description',
            'answerTypeId',
            'formId',
            'formDescription',
            'shortDescription',
            'isRestricted',
            'isIdentified',
            'questionCategoryId',
            'categoryDescription',
            'answerTypeDescription',
            'userName',
            'dateTime',
            'isRequired',
            'ipAddress'
        );

        if ( strlen($filters->questionId) > 0 )
        {
            $where .= ' AND A.questionId = ? ';
            $args[] = $filters->questionId;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE ? ';
            $args[] = $filters->description.'%';
        }

        if ( strlen($filters->formId) > 0 )
        {
            $where .= ' AND A.formId = ? ';
            $args[] = $filters->formId;
        }

        if ( strlen($filters->answerTypeId) > 0 )
        {
            $where .= ' AND A.answerTypeId = ? ';
            $args[] = $filters->answerTypeId;
        }

        if ( strlen($filters->questionCategoryId) > 0 )
        {
            $where .= ' AND A.questionCategoryId = ? ';
            $args[] = $filters->questionCategoryId;
        }

        if ( strlen($filters->isRequired) > 0 )
        {
            $where .= ' AND A.isRequired = ? ';
            $args[] = $filters->isRequired;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY A.questionId, A.description ';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        if ($returnAsObject && $result)
        {
            return SAGU::resultToObject($result, $columns);
        }

        return $result;
    }

    /**
     * Receives the questionId and return the type of answer
     *
     * @param $questionId
     * @return (int) $answerTypeId
     */
    public function checkAnswerType($questionId)
    {
        $sql = 'SELECT answerTypeId
                  FROM rshQuestion
                 WHERE questionId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $questionId));

        return $result[0][0];
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     */
    public function insertQuestion($data)
    {
        $sql = 'INSERT INTO rshquestion
                            (description,
                             formId,
                             questionCategoryId,
                             answerTypeId,
                             isRequired)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( $data->description,
                       $data->formId,
                       $data->questionCategoryId,
                       $data->answerTypeId,
                       $data->isRequired );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Se for uma questão do tipo alternativa/multipla virando descritiva,
     * alerta o usuário de que isto não pode ser feito caso haja opções
     * para esta questão, visto que questões descritivas não possuem opções.
     *
     * @param $filters - stdClass com answerTypeId e question id;
     *
     * @return boolean
     */
    public function canChangeAnswerType($filters)
    {
        if ( $filters->answerTypeId == RshAnswerType::DESCRIPTIVE )
        {
            $sql = 'SELECT count(optionId)
                      FROM rshOption
                     WHERE questionId = ? ';

            $args = array( $filters->questionId );

            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));

            return ( $result[0][0] == 0 );
        }
        else
        {
            return true;
        }
    }

   /**
    * Update data from a specific record
    *
    * @param $data (object): Data which will replace the old record data
    * @return (boolean): True if succeed, otherwise False
    */
    public function updateQuestion($data)
    {
        $sql = 'UPDATE rshQuestion
                   SET description = ?,
                       formId = ?,
                       questionCategoryId = ?,
                       answerTypeId = ?,
                       isRequired = ?
                 WHERE questionId = ? ';

        $args = array( $data->description,
                       $data->formId,
                       $data->questionCategoryId,
                       $data->answerTypeId,
                       $data->isRequired,
                       $data->questionId );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

   /**
    * Delete a record
    *
    * @param $courseId (string): Primary key for deletion
    * @return (boolean): True if succeed, otherwise False
    */
    public function deleteQuestion($questionId)
    {
        $sql = 'DELETE FROM rshQuestion
                      WHERE questionId = ? ';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $questionId));

        return $result;
    }
    
    public function obterDadosRelatorioSocioEconomicoAnalitico($filters)
    {
        $sql = "SELECT";
        
        if ( $filters->codePessoa == DB_TRUE )
        {
            $sql .= " A.personId,";
        }
        if ( $filters->namePessoa == DB_TRUE )
        {
            $sql .= " getpersonname(A.personId) AS personName,";
        }
        if ( $filters->phone == DB_TRUE )
        {
            $sql .= " ( SELECT cellphone
                     FROM ONLY basPhysicalPerson
                         WHERE personId = A.personId ) AS phone,";
        }
        if ( $filters->email == DB_TRUE )
        {
            $sql .= " ( SELECT email
                     FROM ONLY basPhysicalPerson
                         WHERE personId = A.personId ) AS email,";
        }
        if ( $filters->endereco == DB_TRUE )
        {
            $sql .= " ( SELECT BPP.location || ', ' || BPP.number || ', ' || 
                               ( SELECT name || ', ' || stateid
                                   FROM basCity
                                  WHERE cityId = BPP.cityId )
                     FROM ONLY basPhysicalPerson BPP
                         WHERE BPP.personId = A.personId ) AS endereco,";
        }
        if ( $filters->sexo == DB_TRUE )
        {
            $sql .= " ( SELECT sex
                     FROM ONLY basPhysicalPerson
                         WHERE personId = A.personId ) AS sexo,";
        }
        if ( $filters->rg == DB_TRUE )
        {
            $sql .= " ( SELECT content
                          FROM basDocument
                         WHERE personId = A.personId 
                           AND documenttypeid = getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG')::INT) as rg,";
        }
        if ( $filters->cpf == DB_TRUE )
        {
            $sql .= " ( SELECT content
                          FROM basDocument
                         WHERE personId = A.personId 
                           AND documenttypeid = getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')::INT) as cpf,";
        }
        if ( $filters->questao == DB_TRUE )
        {
            $sql .= " D.description AS questao,";
        }
        if ( $filters->resposta == DB_TRUE )
        {
            $sql .= " ( SELECT AA.description 
                          FROM rshOption AA 
                         WHERE AA.optionId = E.optionId ) AS resposta,";
        }
        
        $sql .= "      NULL 
                  FROM spr.subscription A 
            INNER JOIN spr.selectiveProcess B 
	            ON ( A.selectiveProcessId = B.selectiveProcessId ) 
            INNER JOIN rshForm C 
	            ON ( B.socialEconomicFormId = C.formId ) 
            INNER JOIN rshQuestion D 
	            ON ( C.formId = D.formId ) 
            INNER JOIN rshAnswer E 
	            ON ( D.questionId = E.questionId AND A.personId = E.personId )";		  
	
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        
        if ( strlen($filters->formId) > 0 )
        {
            $where .= ' AND C.formId = ? ';
            $args[] = $filters->formId;
        }
        
        if ( count($filters->questionIds) > 0 )
        {
            foreach ( $filters->questionIds as $questionId => $show )
            {                
                if ( $show == DB_TRUE )
                {        
                    $questions .= $questionId . ', ';
                }
            }
            
            $questions = substr($questions, 0, -2);
            $questions = (strlen($questions) > 0) ? $questions : '0';
            $where .= " AND D.questionId IN ({$questions})";
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY getpersonname(A.personId), D.questionId';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }
}
?>
