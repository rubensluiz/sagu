<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file manipulate the lookups for the academic module
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/05/2005
 *
 **/

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Class to manipulate the Lookups
 **/
class BusinessResearchLookup
{
    /**
     * Auto complete for external course
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteQuestion(&$context)
    {
        $sql = 'SELECT description
                  FROM rshQuestion
                 WHERE questionId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for external course
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupQuestion(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $questionId   = $lookup->getFilterValue('questionId');
        $questionName = $lookup->getFilterValue('questionName');

        $lookup->addFilterField( new MTextField('questionId',   $questionId,  _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('questionDescription', $name, _M('Questão',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        
        $columns = array(
                           new DataGridColumn('questionId',       _M('Código', $module),   'right', true, null, true),
                           new DataGridColumn('description',      _M('Questão', $module), 'left',  true, null, true),
                           new DataGridColumn('questionCategory', _M('Categoria', $module), 'left',  true, null, true)
                         );

        $sql = 'SELECT A.questionId,
                       A.formId,
                       ( SELECT description 
                           FROM rshQuestionCategory Q 
                          WHERE Q.id = A.questionCategoryId ) as questionCategory,
                       A.description
                  FROM rshQuestion A';

        if ( strlen($questionId) > 0 )
        {
            $where .= ' AND A.questionId = ?';
            $args[] = $questionId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Consulta de questão',$module), 15, 0);
        //$lookup->grid->setIsScrollable();

    }


    /**
     * Auto complete for external course
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteForm(&$context)
    {
        $sql = 'SELECT description
              FROM rshForm
             WHERE formId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for external course
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupForm(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $formId = $lookup->getFilterValue('formId');
        $formDescription = $lookup->getFilterValue('formDescription');

        $lookup->addFilterField( new MTextField('formId', $formId,  _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('formDescription', $formDescription, _M('Formulário', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );

        $columns[] = new DataGridColumn('formId', _M('Código', $module),   'right', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Descrição', $module), 'left',  true, null, true);
        $columns[] = new DataGridColumn('shortDescription', _M('Abreviação', $module), 'left',  true, null, true);
        $columns[] = new DataGridColumn('isRestricted', _M('É restrito', $module), 'center',  true, null, true, SAGU::listYesNo());
        $columns[] = new DataGridColumn('isIdentified', _M('É identificado', $module), 'center',  true, null, true, SAGU::listYesNo());

        $sql = 'SELECT  A.formId,
                    A.description,
                    A.shortDescription,
                    A.isRestricted,
                    A.isIdentified
               FROM rshForm A';

        if ( strlen($formId) > 0 )
        {
            $where .= ' AND A.formId = ?';
            $args[] = $questionId;
        }

        if ( strlen($formDescription) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $formDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Consulta de formulários',$module), 15, 0);
        //$lookup->grid->setIsScrollable();
    }
}

?>
