<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCourse table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 07/08/2005
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessResearchBusQuestionCategory extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     * @returns (array): Return an array with the entire table
     **/
    public function listQuestionCategory()
    {
        $db = $this->getDatabase();
        $sql = 'SELECT questionCategoryId,
                       description
                  FROM rshQuestionCategory
              ORDER BY questionCategoryId ';
        $ret = $db->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     **/
    public function getQuestionCategory($questionCategoryId)
    {
        $sql = 'SELECT questionCategoryId,
                       description,
                       userName,
                       dateTime,
                       ipAddress
                 FROM rshQuestionCategory
                 WHERE questionCategoryId = ? ';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $questionCategoryId));

        $questionCategory = new rshQuestionCategory();

        list ( $questionCategory->questionCategoryId,
               $questionCategory->description,
               $questionCategory->userName,
               $questionCategory->dateTime,
               $questionCategory->ipAddress ) = $result[0];

        return $questionCategory;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     **/
    public function searchQuestionCategory($filters)
    {
        $sql= 'SELECT questionCategoryId,
                      description
                 FROM rshQuestionCategory ';

        if ( strlen($filters->questionCategoryId) > 0 )
        {
            $where .= ' AND questionCategoryId = ? ';
            $args[] = $filters->questionCategoryId;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND description ILIKE ? ';
            $args[] = $filters->description.'%';
        }

        unset($result);

        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY description ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

   /**
    * Insert a new record
    *
    * @param $data (object): An object of the type handled by the class
    * @return True if succed, otherwise False
    **/
   public function insertQuestionCategory($data)
    {
        $sql = 'INSERT INTO rshQuestionCategory
                            (description)
                     VALUES (?)';

        $args = array($data->description);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

   /**
    * Update data from a specific record
    *
    * @param $data (object): Data which will replace the old record data
    * @return (boolean): True if succeed, otherwise False
    **/
   public function updateQuestionCategory($data)
    {
        $sql = 'UPDATE rshQuestionCategory
                   SET description = ?
                 WHERE questionCategoryId = ? ';

        $args = array( $data->description,
                       $data->questionCategoryId );

                      $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

   /**
    * Delete a record
    *
    * @param $courseId (string): Primary key for deletion
    * @return (boolean): True if succeed, otherwise False
    **/
   public function deleteQuestionCategory($questionCategoryId)
    {
        $sql = 'DELETE FROM rshQuestionCategory
                      WHERE questionCategoryId = ? ';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $questionCategoryId));

        return $result;
    }
}
?>
