<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Research process handler.
 * Contains the menus to access process submenus
 *
 * @author Gustavo Bremm [gsbremm@ftec.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Gustavo Scarantti Bremm [gsbremm@ftec.com.br]
 * Detley de Oliveira [ddocolombo@ftec.com.br]
 *
 * @since
 * Class created on 24/01/2006
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessResearchBusForm extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     * @returns (array): Return an array with the entire table
     **/
    public function listForm()
    {
        $db = $this->getDatabase();
        $sql = 'SELECT formId,
                       description
                  FROM rshForm
              ORDER BY description';
        $ret = $db->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $formId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     **/
    public function getForm($formId)
    {
        $sql = 'SELECT formId,
                       description,
                   shortDescription,
                       isRestricted,
                       isIdentified,
                       userName,
                       dateTime,
                       ipAddress
                  FROM rshForm
                 WHERE formId = ? ';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $formId));

        $form = new rshForm();
        list ( $form->formId,
               $form->description,
               $form->shortDescription,
               $form->isRestricted,
               $form->isIdentified,
               $form->userName,
               $form->dateTime,
               $form->ipAdress ) = $result[0];

        return $form;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     **/
    public function searchForm($filters, $returnAsObject = false)
    {

        $sql= 'SELECT formId,
                   description,
                  shortDescription,
                  isRestricted,
                  isIdentified
                 FROM rshForm';

        if ( strlen($filters->formId) > 0 )
        {
            $where .= ' AND formId = ? ';
            $args[] = $filters->formId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND description ILIKE ? ';
            $args[] = $filters->description.'%';
        }
         if ( strlen($filters->shortDescription) > 0 )
        {
            $where .= ' AND shortDescription ILIKE ? ';
            $args[] = $filters->shortDescription.'%';
        }

        if ( strlen($filters->isRestricted) > 0)
        {
            $where .= ' AND isRestricted = ? ';
            $args[] = $filters->isRestricted;
        }
        if ( strlen($filters->isIdentified) > 0)
        {
            $where .= ' AND isIdentified = ? ';
            $args[] = $filters->isIdentified;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY description, shortDescription ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        if ($returnAsObject)
        {
            $vars = array(
                'formId',
                'description',
                'shortDescription',
                'isRestricted',
                'isIdentified',
            );
            
            return SAGU::resultToObject($result, $vars);
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     **/
    public function insertForm($data)
    {

        $sql = 'INSERT INTO rshForm
                            (description,
                             shortDescription,
                             isRestricted,
                             isIdentified)
                     VALUES (?,?,?,?) ';

        $args = array( $data->description,
                       $data->shortDescription,
                       $data->isRestricted,
                       $data->isIdentified );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        //$db->close();
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     **/
    public function updateForm($data)
    {

        $sql = 'UPDATE rshForm
                   SET description = ?,
                       shortDescription = ?,
                       isRestricted = ?,
                       isIdentified = ?
                 WHERE formId = ?';

        $args = array( $data->description,
                       $data->shortDescription,
                       $data->isRestricted,
                       $data->isIdentified,
                       $data->formId );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $formId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     **/
    public function deleteForm($formId)
    {
        $sql = 'DELETE FROM rshForm
                      WHERE formId = ? ';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $formId));

        return $result;
    }
}
?>
