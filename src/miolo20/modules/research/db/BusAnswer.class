<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCourse table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/07/2006
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessResearchBusAnswer extends sBusiness
{
    protected $_modoDePaginacaoPorLimitOffset = true;
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     **/
    public function getAnswer($answerId)
    {
        $sql = 'SELECT A.answerId,
                       A.personId,
                       A.questionId,
                       A.optionId,
                       A.userName,
                       TO_CHAR(A.dateTime, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.answer
                 FROM rshAnswer A
                WHERE answerId = ? ';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $answerId));

        $answer = new rshAnswer();
        list ( $answer->answerId,
               $answer->personId,
               $answer->questionId,
               $answer->optionId,
               $answer->userName,
               $answer->dateTime,
               $answer->answer) = $result[0];

        return $answer;
    }


    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     **/
    public function searchAnswer($filters, $returnAsObject = false)
    {
        if ( $filters->answerTypeId == RshAnswerType::DESCRIPTIVE )
        {
            $sql = 'SELECT A.answer
                      FROM rshAnswer A
           INNER JOIN ONLY basPhysicalPerson B
                        ON (A.personId = B.personId)
                INNER JOIN rshQuestion C
                        ON (C.questionId = A.questionId)';

            $vars = array('answer');
        }
        else
        {
            $sql = 'SELECT A.answerId,
                           A.personId,
                           B.name,
                           A.questionId,
                           substr((SELECT description FROM rshQuestion WHERE questionId = A.questionId),1,50),
                           A.optionId,
                           substr((SELECT description FROM rshOption WHERE optionId = A.optionId),1,50),
                           C.formId,
                           A.answer,
                           C.answerTypeId
                      FROM rshAnswer A
           INNER JOIN ONLY basPhysicalPerson B
                        ON (A.personId = B.personId)
                INNER JOIN rshQuestion C
                        ON (C.questionId = A.questionId) ';

            $vars = array(
                'answerId',
                'personId',
                'personName',
                'questionId',
                'question',
                'optionId',
                'option',
                'formId',
                'answer',
                'answerTypeId',
            );
        }

        if ( strlen($filters->answerId) > 0 )
        {
            $where .= ' AND A.answerId = ? ';
            $args[] = $filters->answerId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND B.name ILIKE ? ';
            $args[] = $filters->personName . '%';
        }

        if ( strlen($filters->questionId) > 0 )
        {
            $where .= ' AND A.questionId = ? ';
            $args[] = $filters->questionId;
        }

        if ( strlen($filters->optionId) > 0 )
        {
            $where .= ' AND A.optionId = ? ';
            $args[] = $filters->optionId;
        }

        if ( strlen($filters->formId) > 0 )
        {
            $where .= ' AND C.formId = ? ';
            $args[] = $filters->formId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE '.substr($where, 4).'';
            $result = SDatabase::query($sql, $args, true, $filters);
        }

        if ( $filters->answerTypeId == RshAnswerType::DESCRIPTIVE )
        {
            return $result[0][0];
        }

        if ($returnAsObject)
        {
            return SAGU::resultToObject($result, $vars);
        }

        return $result;
    }

    public function searchAnswerToForm($filters)
    {
        $sql = 'SELECT DISTINCT A.personId,
                                B.name as personName,
                                C.formId,
                                D.description as formDescription
                           FROM rshAnswer A
                INNER JOIN ONLY basPhysicalPerson B
                             ON (A.personId = B.personId)
                     INNER JOIN rshQuestion C
                             ON (C.questionId = A.questionId)
                     INNER JOIN rshForm D
                             ON (D.formId = C.formId)';

        if ( strlen($filters->answerId) > 0 )
        {
            $where .= ' AND A.answerId = ? ';
            $args[] = $filters->answerId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND B.name ILIKE ? ';
            $args[] = $filters->personName . '%';
        }

        if ( strlen($filters->questionId) > 0 )
        {
            $where .= ' AND A.questionId = ? ';
            $args[] = $filters->questionId;
        }

        if ( strlen($filters->optionId) > 0 )
        {
            $where .= ' AND A.optionId = ? ';
            $args[] = $filters->optionId;
        }

        if ( strlen($filters->formId) > 0 )
        {
            $where .= ' AND C.formId = ? ';
            $args[] = $filters->formId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).'';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     **/
    public function insertAnswer($data)
    {
        $sql = 'INSERT INTO rshAnswer
                            (personId,
                             questionId,
                             optionId,
                             answer)
                     VALUES (?,
                             ?,
                             ?,
                             ?)';

        $args = array( $data->personId,
                       $data->questionId,
                       $data->optionId,
                       $data->answer );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     **/
    public function deleteAnswer($answerId)
    {
        $sql = 'DELETE FROM rshAnswer
                      WHERE answerId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $answerId));

        return $result;
    }

    /**
     * Delete all records of a person
     *
     * @param $personId (int): Primary key of the person
     * @return (boolean): True if succeed, otherwise False
     **/
    public function deleteAnswers($personId)
    {
        $sql = 'DELETE FROM rshAnswer
                      WHERE personId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $personId));

        return $result;
    }

    /**
     * Delete answer of a question
     *
     * @param $personId (int): Primary key of the person
     * @param $questionId (int): Primary key of the question
     * @return (boolean): True if succeed, otherwise False
     **/
    public function deleteQuestionAnswer($personId, $questionId)
    {
        $sql = 'DELETE FROM rshAnswer
                      WHERE personId = ?
                        AND questionId = ?';

        $params[] = $personId;
        $params[] = $questionId;

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $params));

        return $result;
    }
}
?>
