<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for rshOption table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 18/01/2007
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessResearchBusOption extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @return (array): Return an array with the entire table
     **/
    public function listOption()
    {
        $sql = 'SELECT optionId,
                       description
                  FROM rshOption
              ORDER BY description ';

        $db     = $this->getDatabase();
        $return = $db->query(SAGU::prepare($sql, $args));

        return $return;
    }

    /**
     * List all records from the table handled by the class
     *
     * @return (array): Return an array with the entire table
     **/
    public function listOptionToQuestion($questionId)
    {
        $sql = 'SELECT optionId,
                       description,
                       allowAdditionalText
                  FROM rshOption
                 WHERE questionId = '.$questionId.'
              ORDER BY optionId ';

        $db     = $this->getDatabase();
        $return = $db->query(SAGU::prepare($sql, $args));

        return $return;
    }

    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     * 
     * @return (object): Return an object of the type handled by the class
     **/
    public function getOption($optionId)
    {
        $sql = 'SELECT A.optionId,
                       A.questionId,
                       A.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.allowAdditionalText
                 FROM rshOption A
                WHERE optionId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $optionId));

        $option = new rshOption();
        list ( $option->optionId,
               $option->questionId,
               $option->description,
               $option->userName,
               $option->dateTime,
               $option->allowAdditionalText) = $result[0];

        return $option;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * 
     * @return (array): An array containing the search results
     **/
    public function searchOption($filters)
    {
        $sql = 'SELECT A.optionId,
                       B.questionId,
                       B.answerTypeId,
                       B.description,
                       A.description
                  FROM rshOption A
            INNER JOIN rshQuestion B
                    USING(questionId)';

        if ( strlen($filters->optionId) > 0 )
        {
            $where .= ' AND A.optionId = ? ';
            $args[] = $filters->optionId;
        }

        if ( strlen($filters->questionId) > 0 )
        {
            $where .= ' AND A.questionId = ? ';
            $args[] = $filters->questionId;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE ? ';
            $args[] = $filters->description.'%';
        }

        if ( strlen($filters->formId) > 0 )
        {
            $where .= ' AND B.formId = ? ';
            $args[] = $filters->formId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE '.substr($where, 4).' ORDER BY A.optionId, A.description ';
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Get answers
     *
     * @param $personId (int): Primary key of the person
     * 
     * @return (array): Answers in a array
     **/
    public function getAnswers($personId)
    {
        $sql = 'SELECT questionid,
                       optionid
                  FROM rshAnswer
                 WHERE personId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $personId));

        foreach ( $result AS $value )
        {
            $questionid[] = $value[0];
            $optionid[] = $value[1];
        }

        $return = array($questionid, $optionid);

        return $return;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * 
     * @return True if succed, otherwise False
     **/
    public function insertOption($data)
    {
        $sql = 'INSERT INTO rshoption
                            (questionId,
                             description,
                             allowAdditionalText)
                     VALUES (?, ?, ?)';

        $args = array( $data->questionId,
                       $data->description,
                       $data->allowAdditionalText);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * 
     * @return (boolean): True if succeed, otherwise False
     **/
    public function updateOption($data)
    {
        $sql = 'UPDATE rshOption
                   SET questionId  = ?,
                       description = ?,
                       allowAdditionalText = ?
                 WHERE optionId = ?';

        $args = array( $data->questionId,
                       $data->description,
                       $data->allowAdditionalText,
                       $data->optionId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     * 
     * @return (boolean): True if succeed, otherwise False
     **/
    public function deleteOption($optionId)
    {
        $sql = 'DELETE FROM rshOption
                      WHERE optionId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $optionId));

        return $result;
    }
}
?>
