<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Questionary answer form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor SchmIdt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 12/10/2005
 **/

/**
 * Form to manipulate an answer sheet
 **/
class FrmAnswer extends SManagementForm
{
    public $disableConstruct;
    public $_answerId;
    public $_questionId;

    /**
     * Class constructor
     **/
    public function __construct($formData = null)
    {
        $this->disableConstruct = $formData->disableConstruct;

        //Atencao: Os atributos $disableConstruct e $_answerId sao utilizados externamente (FrmSocioeconomicQuestion)
        if (!$formData->disableConstruct)
        {
            parent::__construct(new RshAnswer(), array('answerId'), 'BusAnswer');
        }
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // FIXME: habilitar botão salvar depois de clicar no botão do ajax
        //$this->toolbar->disableButton('tbBtnSave');
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $fields = $this->getUpdateFields();

            // Altera para o botão salvar da toolbar usar a função daqui
            $this->setShowPostButton(false);
            $this->toolbar->setIsPost('tbBtnSave', false);
            $this->toolbar->setButtonURL('tbBtnSave', $this->getAjaxAction('updateAnswer', 'divFields', true, array('questionId' => $this->_questionId), true, false));
        }
        else
        {
            $fields = $this->getInsertFields();

            // Altera para o botão salvar da toolbar usar a função daqui
            $this->setShowPostButton(false);

            $this->toolbar->disableButton('tbBtnDelete');
            $this->toolbar->setIsPost('tbBtnSave', false);
            $this->toolbar->setButtonURL('tbBtnSave', $this->getAjaxAction('tbBtnSave_click', 'divFields', true, array(), true, false));
        }

        parent::defineFields($fields, $validators, $data);
    }

    public function getInsertFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $busForm = new BusinessResearchBusForm();

            // Field person id
            $data->personIdLabel = new MText('personIdLabel', _M('Pessoa', $module) . ':');
            $data->personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $data->personIdLabel->setClass('m-caption m-caption-required');
            $flds[] = $data->personIdLabel;
            $data->personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
            $data->personId->setJsHint(_M('Informe o código da pessoa',$module));
            $flds[] = $data->personId;
            $validators[] = new MRequiredValidator('personId', _M('Código da pessoa', $module), 'required');

            // Field person name
            $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setJsHint(_M('Informe o nome da pessoa',$module));
            $personName->setReadOnly(true);
            $flds[] = $personName;
            $hctPerson = new MHContainer('hctPerson', $flds);
            $hctPerson->setShowLabel(false);
            $fields[] = $hctPerson;
            unset($flds);

            // Field form id
            $formId = new MComboBox('formId', $this->getFormValue('formId', $data->formId), _M('Formulário', $module), $busForm->listForm());
            $formId->setJsHint(_M('Informe o código do formulário',$module));
            $fields[] = $formId;
            $validators[] = new MRequiredValidator('formId', _M('Formulário', $module), 'required');

            // Buttom next
            $btnNext = new MButton('btnNext', _M('Próximo passo',$module) . ' >>', $this->getAjaxAction('insertAnswer', 'divFields', true));
            $fields[] = $btnNext;

            $fields[] = new MSeparator('');
            $fields[] = new MDiv('divFields');

            return $fields;
    }

    public function getUpdateFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $busForm = new BusinessResearchBusForm();

        // Instance the business
        $busAnswer = new BusinessResearchBusAnswer();
        $busOption = new BusinessResearchBusOption();
        $busPerson = new BusinessBasicBusPerson();
        $busQuestion = new BusinessResearchBusQuestion();

        // Get answer data
        $answerId = SAGU::NVL($this->_answerId, MIOLO::_REQUEST('answerId'));
        $dataAnswer = $busAnswer->getAnswer($answerId);

        // Get person data
        $personId = $dataAnswer->personId;
        $dataPerson = $busPerson->getPerson($personId);

        // Get question data
        $questionId = $this->_questionId = $dataAnswer->questionId;
        $dataQuestion = $busQuestion->getQuestion($questionId);

        // Get form data
        $formId = $dataQuestion->formId;
        $dataForm = $busForm->getForm($formId);

        // Field answer
        $fields[] = new MTextLabel('txtAnswer', $dataAnswer->answerId, _M('Código da resposta', $module));
        $fields[] = new MHiddenField('answerId', $dataAnswer->answerId);
        // Field person
        $fields[] = new MTextLabel('txtPerson', $dataPerson->personId . ' - ' . $dataPerson->name, _M('Pessoa', $module));
        $fields[] = new MHiddenField('personId', $dataPerson->personId);
        // Field form
        $fields[] = new MTextLabel('txtForm', $dataForm->formId . ' - ' . $dataForm->description, _M('Formulário', $module));
        $fields[] = new MHiddenField('formId', $dataForm->formId);
        // Field question
        $fields[] = new MTextLabel('txtForm', $dataQuestion->questionId . ' - ' . $dataQuestion->description, _M('Questão', $module));
        $fields[] = new MHiddenField('formId', $dataQuestion->questionId);

        // Field answer
        $questionLabel = new MTextLabel('questionLabel' . $questionId, $dataQuestion->description);

        // Get options
        $options = $busOption->listOptionToQuestion($questionId);

        // Get the answer
        unset($answerFilter);
        $answerFilter->formId = $formId;
        $answerFilter->questionId = $questionId;
        $answerFilter->personId = $personId;
        $answerFilter->answerTypeId = $dataQuestion->answerTypeId;

        $dataAnswer = $busAnswer->searchAnswer($answerFilter);

        if ( $dataQuestion->answerTypeId == RshAnswerType::DESCRIPTIVE )
        {
            // Se for descritiva põe o texto na variável $answer
            $answer = $dataAnswer;
        }
        elseif ( $dataQuestion->answerTypeId == RshAnswerType::MULTIPLE )
        {
            // Se for de multipla escola, monta um array das opções escolhidas
            foreach ( $dataAnswer as $value )
            {
                $answer[] = $value[5];
            }
        }
        elseif ( $dataQuestion->answerTypeId == RshAnswerType::ALTERNATIVE )
        {
            // Se for de multipla escola, põe o código da opção escolhida na variável $answer
            $answer = $dataAnswer[0][5];
        }

        // If answer type is descriptive
        if ( $dataQuestion->answerTypeId == RshAnswerType::DESCRIPTIVE )
        {
            unset($answerFilter);
            $optsField = new MMultiLineField('questionAnswer' . $questionId, $answer);
        }
        else
        {
            // If answer type is multiple chose
            if ( $dataQuestion->answerTypeId == RshAnswerType::MULTIPLE )
            {
                unset($cntH);
                foreach ( $options as $option )
                {
                    unset($cntOpts);
                    $checked = in_array($option[0], $answer);
                    $cntOpts[] = new MCheckBox('questionAnswer' . $questionId . '_' . $option[0], $option[0], '', $checked );
                    $cntOpts[] = new MText('labelOption' . $questionId, $option[1]);
                    $cntH[] = new MHContainer('cntH' . $questionId, $cntOpts);
                }
                $optsField = new MVContainer('cntOpts' . $questionId, $cntH);
            }
            else // If answer type is alternative
            {
                $optsField = new MSelection('questionAnswer' . $questionId, $answer, null, $options);
                $optsField->addAttribute('onchange', $this->getAjaxAction('showAdditionalTextArea', 'divAdditionalTextArea' . $questionId, false, array('questionId' => $questionId)));

                $args = new stdClass();
                $args->questionId = $questionId;
                $args->answerId = $answerId;
                $key = 'questionAnswer'.$questionId;
                $args->$key = $answer;

                $divAdditionalTextArea = new MDiv('divAdditionalTextArea' . $questionId, $this->showAdditionalTextArea($args));
            }
        }

        // If answer is required
        if ( $dataQuestion->isRequired == DB_TRUE )
        {
            $questionLabel->setClass('m-caption m-caption-required');

            // FIX-ME: Validar checkbox(pelo menos uma opção marcada)
//                if ( $dataQuestion->answerTypeId != RshAnswerType::MULTIPLE )
            {
                $validators[] = new MRequiredValidator('questionAnswer' . $questionId, $description);
            }
        }

        $flds[] = new MVContainer('cntQuestion' . $questionId, array($questionLabel, $optsField, $divAdditionalTextArea));
        $bsg = new MBaseGroup('bsg', _M('Questionário', $module), $flds, 'vertical');
        $fields[] = $bsg;

        return $fields;
    }

    public function insertAnswer($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data->personId = $args->personId;
        $data->formId = $args->formId;

        if ( strlen($data->formId) == 0 )
        {
            $MIOLO->error(_M('Um formulário deve ser informado.', $module));
        }

        if ( !($this->hasErrors()) )
        {
            // Instance the business
            $busAnswer = new BusinessResearchBusAnswer();
            $busForm = new BusinessResearchBusForm();
            $busOption = new BusinessResearchBusOption();
            $busQuestion = new BusinessResearchBusQuestion();

            unset($filter);
            $filter->formId = $data->formId;
            $questionData = $busQuestion->searchQuestion($filter);

            unset($flds);
            $separator = new MSeparator('');
            $flds[] = $separator;

            foreach ( $questionData as $question )
            {
                // Get question data
                $questionId = $question[0];
                $dataQuestion = $busQuestion->getQuestion($questionId);
                // Get form data
                $formId = $dataQuestion->formId;
                $dataForm = $busForm->getForm($formId);

                // Field answer
                $questionLabel = new MTextLabel('questionLabel' . $questionId, $dataQuestion->description);
                $questionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') + 80);

                // Get options
                $options = $busOption->listOptionToQuestion($questionId);

                // If answer type is descriptive
                if ( $dataQuestion->answerTypeId == RshAnswerType::DESCRIPTIVE )
                {
                    unset($answerFilter);
                    $optsField = new MMultiLineField('questionAnswer' . $questionId, null, null, SAGU::getParameter('basic', 'FIELD_CONTAINER_SIZE'));
                }
                else
                {
                    // If answer type is multiple chose
                    if ( $dataQuestion->answerTypeId == RshAnswerType::MULTIPLE )
                    {
                        unset($cntH);
                        foreach ( (array)$options as $option )
                        {
                            unset($cntOpts);
                            $cntOpts[] = new MCheckBox('questionAnswer' . $questionId . '_' . $option[0], $option[0], '', false );
                            $cntOpts[] = new MText('labelOption' . $questionId, $option[1]);
                            $cntH[] = new MHContainer('cntH' . $questionId, $cntOpts);
                        }
                        
                        $optsField = new MVContainer('cntOpts' . $questionId, $cntH);
                    }
                    else // If answer type is alternative
                    {
                        $optsField = new MSelection('questionAnswer' . $questionId, $answer, null, $options);
                        $optsField->addAttribute('onchange', SForm::getAjaxAction('showAdditionalTextArea', 'divAdditionalTextArea' . $questionId, false, array('questionId' => $questionId)));

                        $divAdditionalTextArea = new MDiv('divAdditionalTextArea' . $questionId);
                    }
                }

                // If answer is required
                if ( $dataQuestion->isRequired == DB_TRUE && ($dataQuestion->answerTypeId != RshAnswerType::MULTIPLE) )
                {
                    $questionLabel->setClass('m-caption m-caption-required');
                    $validators[] = new MRequiredValidator('questionAnswer' . $questionId, $dataQuestion->description);
                }
                
                $flds[] = new MHContainer('cntQuestion' . $questionId, array($questionLabel, $optsField, $divAdditionalTextArea));
            }

            $bsg = new MBaseGroup('bsg', _M('Questionário', $module), $flds, 'vertical');
            $fields[] = $bsg;

            $this->SetValidators($validators);

            return $fields;
        }
    }

    public function showAdditionalTextArea($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busQuestion = new BusinessResearchBusQuestion();
        $busOption = new BusinessResearchBusOption();
        $busAnswer = new BusinessResearchBusAnswer();

        $questionId = $args->questionId;
        $answerId = $args->answerId;
        $key = 'questionAnswer'.$questionId;
        $optionSelected = $args->$key;

        if ( $optionSelected )
        {
            $allowAdditionalText = $busOption->getOption($optionSelected)->allowAdditionalText;
        }

        // Se tiver habilitado o texto adicional, exibe o text area
        if ( $allowAdditionalText == DB_TRUE )
        {
            if ( $answerId )
            {
                $answer = $busAnswer->getAnswer($answerId)->answer;
            }
            
            $fields = new MMultiLineField('questionAnswerText' . $questionId, $answer);

            if ( $busQuestion->getQuestion($questionId)->isRequired == DB_TRUE )
            {
                $validators[] = new MRequiredValidator('questionAnswerText' . $questionId, _M('Texto resposta', $module), 'required');
                $this->setValidators($validators);
            }
        }
        else
        {
            $fields = ' ';
        }

        return $fields;
    }
    
    public function updateAnswer($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $personId = $args->personId;
        $formId = $args->formId;
        $questionId = $args->questionId;
        $answerId = $args->answerId;

        if ( $personId && $formId && $questionId && $answerId )
        {
            // Instance the business
            $busAnswer = new BusinessResearchBusAnswer();
            $busForm = new BusinessResearchBusForm();
            $busOption = new BusinessResearchBusOption();
            $busQuestion = new BusinessResearchBusQuestion();

            // Get the answer data
            $answerData = $busAnswer->getAnswer($answerId);

            // Get the question data
            $dataQuestion = $busQuestion->getQuestion($questionId);
            $answerTypeId = $dataQuestion->answerTypeId;

            // Get the form data
            $dataForm = $busForm->getForm($formId);

            $data = new stdClass();
            $data->personId = $personId;
            $data->questionId = $questionId;
            $data->answerTypeId = $answerTypeId;

            // Deleta a resposta anterior
            $ok = $busAnswer->deleteQuestionAnswer($personId, $questionId);

            // Se deletar a resposta anterior
            if ( $ok )
            {
                // If answer type is descriptive
                if ( $data->answerTypeId == RshAnswerType::DESCRIPTIVE )
                {
                    // Get the answer
                    $key = 'questionAnswer' . $dataQuestion->questionId;
                    $answer = $args->$key;
                    
                    $data->answer = $answer;
                    if ( strlen($answer) > 0 )
                    {
                        $ok = $busAnswer->insertAnswer($data);
                    }
                }
                elseif ( $data->answerTypeId == RshAnswerType::MULTIPLE )
                {
                    $options = $busOption->listOptionToQuestion($dataQuestion->questionId);
                    for ( $i=0; $i < count($options); $i++ )
                    {
                        // Get the answer
                        $key = 'questionAnswer' . $dataQuestion->questionId . '_' . $options[$i][0];
                        $answer = $args->$key;

                        if ( strlen($answer) > 0 )
                        {
                            $data->optionId = $options[$i][0];
                            $ok = $busAnswer->insertAnswer($data);
                        }
                    }
                }
                elseif ( $data->answerTypeId == RshAnswerType::ALTERNATIVE )
                {
                    // Get the answer
                    $key = 'questionAnswer' . $dataQuestion->questionId;
                    $answer = $args->$key;
                    // Get the answer text
                    $key = 'questionAnswerText' . $dataQuestion->questionId;
                    $answerText = $args->$key;

                    $data->optionId = $answer;
                    $data->answer = $answerText;
                    $ok = $busAnswer->insertAnswer($data);
                }
            }
        }

        if ( $ok )
        {
            $MIOLO->information(_M('Resposta salva.', $module), $MIOLO->getActionUrl($module, $action));
        }
        else
        {
            $MIOLO->error(_M('Ocorreu um erro ao salvar a resposta.', $module), $MIOLO->getActionUrl($module, $action));
        }
    }

    public function tbBtnDelete_confirm($sender = NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $busAnswer = new BusinessResearchBusAnswer();
        $ok        = $busAnswer->deleteAnswer(array($this->_answerId));

        parent::tbBtnDelete_confirm($sender, $ok);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Instance the business
        $busAnswer = new BusinessResearchBusAnswer();
        $busForm = new BusinessResearchBusForm();
        $busOption = new BusinessResearchBusOption();
        $busQuestion = new BusinessResearchBusQuestion();

        $formId = $args->formId;
        $personId = $args->personId;

        if ( $formId && $personId )
        {
            // Get the questions
            $questions = $busQuestion->listQuestionToForm($formId);

            $data = new stdClass();
            $data->personId = $personId;

            // Percorre as questões do questionário
            foreach ( $questions as $question )
            {
                $questionId = $question[0];
                $data->questionId = $questionId;

                // Deleta as respostas anteriores (para este formulário)
                $ok = $busAnswer->deleteQuestionAnswer($personId, $questionId);

                if ( $ok )
                {
                    // Get the question data
                    $dataQuestion = $busQuestion->getQuestion($questionId);
                    $answerTypeId = $dataQuestion->answerTypeId;
                    $data->answerTypeId = $answerTypeId;

                    // If answer type is descriptive
                    if ( $data->answerTypeId == RshAnswerType::DESCRIPTIVE )
                    {
                        // Get the answer
                        $key = 'questionAnswer' . $dataQuestion->questionId;
                        $answer = $args->$key;

                        $data->answer = $answer;
                        if ( strlen($answer) > 0 )
                        {
                            $ok = $busAnswer->insertAnswer($data);
                        }
                    }
                    elseif ( $data->answerTypeId == RshAnswerType::MULTIPLE )
                    {
                        $options = $busOption->listOptionToQuestion($dataQuestion->questionId);
                        for ( $i=0; $i < count($options); $i++ )
                        {
                            // Get the answer
                            $key = 'questionAnswer' . $dataQuestion->questionId . '_' . $options[$i][0];
                            $answer = $args->$key;

                            if ( strlen($answer) > 0 )
                            {
                                $data->optionId = $options[$i][0];
                                $ok = $busAnswer->insertAnswer($data);
                            }
                        }
                    }
                    elseif ( $data->answerTypeId == RshAnswerType::ALTERNATIVE )
                    {
                        // Get the answer
                        $key = 'questionAnswer' . $dataQuestion->questionId;
                        $answer = $args->$key;
                        // Get the answer text
                        $key = 'questionAnswerText' . $dataQuestion->questionId;
                        $answerText = $args->$key;

                        $data->optionId = $answer;
                        $data->answer = $answerText;
                        $ok = $busAnswer->insertAnswer($data);
                    }
                }
                else
                {
                    $MIOLO->error(_M('Ocorreu um erro ao apagar as respostas antigas.', $module), $MIOLO->getActionUrl($module, $action));
                }
            }
        }

        if ( $ok )
        {
            $MIOLO->information(_M('Resposta salva.', $module), $MIOLO->getActionUrl($module, $action));
        }
        else
        {
            $MIOLO->error(_M('Ocorreu um erro ao salvar a resposta.', $module), $MIOLO->getActionUrl($module, $action));
        }
    }
}
?>