<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Option form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor SchmIdt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 18/01/2007
 *
 **/

/**
 * Form to manipulate a course
 **/
class FrmOption extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new RshOption(), array('optionId'), 'BusOption');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $busForm = new BusinessResearchBusForm();
        $busQuestion = new BusinessResearchBusQuestion();
        $busOption = new BusinessResearchBusOption();

        $formIdFormValue = $this->getFormValue('formId',     $data->formId);
        $questionIdFormValue = $this->getFormValue('questionId', $data->questionId);

        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $optionIdValue = MIOLO::_request('optionId');

            $optionId = new MHiddenField('optionId', $optionIdValue);
            $fields[] = $optionId;

            $data = $busOption->getOption($optionIdValue);
            $dataQuestion = $busQuestion->getQuestion($data->questionId);

            $questionIdFormValue = $data->questionId;
            $formIdFormValue = $dataQuestion->formId;
        }

        if ( (strlen($formIdFormValue) > 0) && (strlen($questionIdFormValue) > 0) )
        {
            if ( $function == SForm::FUNCTION_UPDATE )
            {
                //Field form
                $formLabel = new MText('formLabel', _M('Formulário', $module));
                $formLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $formLabel->setClass('m-caption m-caption-required');
                $formId = new MComboBox('formId', strlen($this->getFormValue('formId', $data->formId)) > 0 ? $this->getFormValue('formId', $data->formId) : $formIdFormValue, /*strlen($this->getFormValue('formId', $data->formId)) > 0 ? $this->getFormValue('formId', $data->formId) : $formIdFormValue,*/ '', $busForm->listForm());
                $formId->setAutoPostBack(true);
                $formId->setJsHint(_M('Selecione um formulário', $module));
                $cntForm = new MHContainer('cntForm', array($formLabel, $formId));
                $cntForm->setShowLabel(true);
                $fields[] = $cntForm;

                if ( strlen($formId->value) > 0 )
                {
                    $fields[] = new MSeparator('');

                    //Field question
                    $questionLabel = new MText('questionLabel', _M('Questão', $module));
                    $questionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $questionLabel->setClass('m-caption m-caption-required');
                    $questionId = new MComboBox('questionId', strlen($this->getFormValue('questionId', $data->questionId)) > 0 ? $this->getFormValue('questionId', $data->questionId) : $questionIdFormValue ,'', $busQuestion->listQuestionToForm($formId->value));
                    $questionId->setJsHint(_M('Selecione uma questão', $module));
                    $cntQuestion = new MHContainer('cntQuestion', array($questionLabel, $questionId));
                    $cntQuestion->setShowLabel(true);
                    $fields[] = $cntQuestion;

                    $fields[] = new MSeparator('');
                }
            }
            else
            {
                //Field form
                $formId = new MHiddenField('formId', $formIdFormValue);
                $fields[] = $formId;

                //Field question
                $questionId = new MHiddenField('questionId', $questionIdFormValue);
                $fields[] = $questionId;

                $dataForm = $busForm->getForm($formIdFormValue);
                $dataQuestion = $busQuestion->getQuestion($questionIdFormValue);

                $formIdLabel = new MTextLabel('formIdLabel', $formIdFormValue . ' - ' . $dataForm->description, _M('Formulário', $module));
                $fields[] = $formIdLabel;

                $questionIdLabel = new MTextLabel('questionIdLabel', $questionIdFormValue . ' - ' . $dataQuestion->description, _M('Questão', $module));
                $fields[] = $questionIdLabel;
            }

            // Checks if the question is descriptive
            $valueQuestionId = $this->getFormValue('questionId', $questionIdFormValue);
            $isDescriptive = false;
            if  ( strlen($valueQuestionId) > 0 )
            {
                $question = $busQuestion->getQuestion( $valueQuestionId );

                if ( $question->answerTypeId == RshAnswerType::DESCRIPTIVE )
                {
                    $this->toolbar->disableButton('tbBtnSave');
                    $this->AddAlert(_M('Está questão é do tipo descritiva, portanto não possui alternativas.', $module));
                    $isDescriptive = true;
                }
            }
            
            if ( !$isDescriptive )
            {
                if ( $question->answerTypeId == RshAnswerType::ALTERNATIVE )
                {
                    // Field additional text
                    // Get the value, default false
                    $allowAdditionalTextValue = $this->getFormValue('allowAdditionalText', $data->allowAdditionalText);
                    $allowAdditionalTextValue = ( strlen($allowAdditionalTextValue) > 0) ? $allowAdditionalTextValue : DB_FALSE;
                    $allowAdditionalTextLabel = new MText('allowAdditionalTextLabel', _M('Permitir texto adicional', $module));
                    $allowAdditionalTextLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $allowAdditionalTextLabel->setClass('m-caption m-caption-required');
                    $allowAdditionalText = new MRadioButtonGroup('allowAdditionalText', null, SAGU::listTrueFalse(1), $allowAdditionalTextValue, null, 'horizontal');
                    $allowAdditionalText->setJsHint( _M('Permitir texto adicional', $module) );
                    $cntAllowAdditionalText = new MHContainer('cntAllowAdditionalText', array($allowAdditionalTextLabel, $allowAdditionalText));
                    $cntAllowAdditionalText->setShowLabel(false);
                    $fields[] = $cntAllowAdditionalText;
                }

                // Field option
                $optionLabel = new MText('optionLabel', _M('Descrição', $module));
                $optionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $optionLabel->setClass('m-caption m-caption-required');
                $optionDescription = new MTextField('description', strlen($this->getFormValue('description', $data->description)) > 0 ? $this->getFormValue('description', $data->description) : $data->description, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $optionDescription->setJsHint( _M('Informe a descrição da opção', $module) );
                $cntOption = new MHContainer('cntOption', array($optionLabel, $optionDescription));
                $cntOption->setShowLabel(true);
                $fields[] = $cntOption;

                $btn2 = new MButton('tbBtnSave',   _M('Salvar esta opção somente',             $module));
                $btnSaveClicked = new MHiddenField('btnSaveClicked', $this->getFormValue('btnSaveClicked', $btnSaveClicked));

                $btn3 = new MButton('btnSaveMore', _M('Salvar esta opção e inserir outra', $module));
                $btnSaveMoreClicked = new MHiddenField('btnSaveMoreClicked', $this->getFormValue('btnSaveMoreClicked', $btnSaveMoreClicked));

                $fields[] = new Separator('');

                $divBtn1 = new MDiv('divBtn1', array($btn2, $btn3), null, 'align="center"');
                $fields[] = $divBtn1;

                $fields[] = new Separator('');

                //dados para grid
                //-- begin
                if ( (strlen($formId->value) > 0) && (strlen($questionId->value) > 0) )
                {
                     unset($dataOption);
                     unset($grdResults);

                     $businessOption = new BusinessResearchBusOption();
                     $filters->questionId = $questionId->value;
                     $dataOption = $businessOption->searchOption($filters);

                     $grdResults = $MIOLO->getUI()->getGrid($module,'GrdOptionToFormSearch'/*, $filters*/);
                     $grdResults->setData($dataOption);
                     $fields[] = $grdResults;
                }
                //-- end
                //dados para grid

                if ( $btnSaveMoreClicked->value == 1 )
                {
                    //Opção de inserir mais registros
                    $funciontOld = MIOLO::_request('functionOld');

                    if ( $funciontOld == SForm::FUNCTION_INSERT )
                    {
                        $this->addInfo(_M('Opção inserida', $module));
                    }
                    else if ( $funciontOld == SForm::FUNCTION_UPDATE )
                    {
                        $this->addInfo(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $module);
                    }
                }
            }
        }
        else
        {
            $formLabel = new MText('formLabel', _M('Formulário', $module));
            $formLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $formLabel->setClass('m-caption m-caption-required');

            $formId = new MComboBox('formId', $this->getFormValue('formId', $data->formId), '', $busForm->listForm());
            $validators[] = new MRequiredValidator('formId', _M('Formulário', $module));

            $formId->setAutoPostBack(true);

            $cntForm = new MHContainer('cntForm', array($formLabel, $formId));
            $cntForm->setShowLabel(true);
            $fields[] = $cntForm;

            if ( strlen($formId->value) > 0 )
            {
                $questionLabel = new MText('questionLabel', _M('Questão', $module));
                $questionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $questionLabel->setClass('m-caption m-caption-required');

                $questionId = new MComboBox('questionId', $this->getFormValue('questionId',     $data->questionId),'', $busQuestion->listQuestionToForm($formId->value));
                $validators[] = new MRequiredValidator('questionId', _M('Questão', $module));

                $cntQuestion = new MHContainer('cntQuestion', array($questionLabel, $questionId));
                $cntQuestion->setShowLabel(true);
                $fields[] = $cntQuestion;

                $fields[] = new MSeparator('');

                $btn1 = new MButton('btnAddOption', _M('Adicionar opção', $module));
                $fields[] = $btn1;
            }
        }

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event to save in database
     **/
    public function saveDatas($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');

        $business = new BusinessResearchBusOption();

        $data = $this->getTypesData();

        if ( !(strlen($data->description) > 0) )
        {
            return false;
        }
        else
        {
            if (!strlen($data->allowAdditionalText) > 0)
            {
                $data->allowAdditionalText = DB_FALSE;
            }

            if ( $function == 'insert' )
            {
                //INSERT dos dados
                $ok = $business->insertOption($data);
            }
            else if ( $function == 'update' )
            {
                //UPDATE
                 $ok = $business->updateOption($data);
            }

            return $ok;
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');

        $opts['function'] = 'search';

        $saveDatas = $this->saveDatas();

        if ( $saveDatas == false )
        {
            $this->error(_M('O campo "Descrição" é obrigatório', $module) . '.');
        }
        else if ( $saveDatas == true )
        {
            $goto = $MIOLO->getActionURL($module, $action, null, $opts);

            if ( $function == 'insert' )
            {
                $MIOLO->information(_M('Opção inserida', $module), $goto);
            }
            else if ( $function == 'update' )
            {
                $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $goto);
            }
        }
    }

    public function btnSaveMore_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');

        $opts['formId'] = MIOLO::_request('formId');
        $opts['questionId'] = MIOLO::_request('questionId');

        $saveDatas = $this->saveDatas();

        if ( $saveDatas == false )
        {
            $this->addError(_M('O campo "Descrição" é obrigatório', $module) . '.');
        }
        else if ( $saveDatas == true )
        {
            $opts['btnSaveMoreClicked'] = '1';
            $opts['functionOld'] = $function;

            $opts['function'] = 'insert';
            $this->page->redirect($MIOLO->getActionURL($module, $action, null, $opts));
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();

        $opts = array('event' => 'tbBtnDelete_confirm',
                        'function' => 'delete',
                        'optionId' => MIOLO::_request('optionId')
                       );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto = SAGU::getStackBackUrl();
        $gotoNo = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessResearchBusOption();
        $ok = $business->deleteOption(MIOLO::_request('optionId'));

        if ( $ok )
        {
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg = _M('Erro executando a operação requerida',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
}
?>