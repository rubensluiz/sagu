<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdCenter table
 *
 * @author Augusto A. Silva [augusto@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Augusto A. Silva
 *
 * @since
 * Class created on 02/09/2013
 *
 **/

/**
 * Form to search the basCenter table
 */
class FrmRelatorioSocioEconomicoAnaliticoSearch extends SForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M("Relatório sócio econômico analítico"), null, null);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        // Dados da pessoa.
        $subscriptionIdLabel = new MText('subscriptionIdLabel', _M('Inscrição da pessoa',$module).':');
        $subscriptionIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $subscriptionIdLabel->setClass('m-caption');
        $subscriptionId = new MLookupTextField('subscriptionId', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('personId', 'personName'), 'selectiveProcess', 'Subscription', null, array('subscriptionId' => 'subscriptionId'), array('subscriptionId' => 'subscriptionId'), true);
        $validators[]     = new MIntegerValidator('subscriptionId', _M('Pessoa',$module));
        $subscriptionId->setJsHint(_M('Informe o código da pessoa',$module));
        $personName = new MTextField('personName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personId = new MTextField('personId');
        $personId->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($subscriptionIdLabel, $subscriptionId, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fieldsPerson[] = $hctPerson;
        $fieldsPerson[] = new MSeparator("<br>");
        
        $codeLabel = new MText('codeLabel', _M('Código da pessoa', $module));
        $codeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $codeLabel->setClass('m-caption');
        $code = new MCheckBox('codePessoa', DB_TRUE, null, true);
        $fieldsC1[] = new MHContainer('codeContainer', array($codeLabel, $code));
        
        $nameLabel = new MText('nameLabel', _M('Nome', $module));
        $nameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $nameLabel->setClass('m-caption');
        $name = new MCheckBox('namePessoa', DB_TRUE, null, true);
        $fieldsC1[] = new MHContainer('nameContainer', array($nameLabel, $name));
        
        $phoneLabel = new MText('phoneLabel', _M('Telefone', $module));
        $phoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $phoneLabel->setClass('m-caption');
        $phone = new MCheckBox('phone', DB_TRUE, null, true);
        $fieldsC1[] = new MHContainer('phoneContainer', array($phoneLabel, $phone));
        
        $emailLabel = new MText('emailLabel', _M('E-mail', $module));
        $emailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emailLabel->setClass('m-caption');
        $email = new MCheckBox('email', DB_TRUE, null, true);
        $fieldsC1[] = new MHContainer('emailContainer', array($emailLabel, $email));
        
        $MVContainer1 = new MVContainer('MVContainer1', $fieldsC1);
        
        $enderecoLabel = new MText('enderecoLabel', _M('Endereço', $module));
        $enderecoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $enderecoLabel->setClass('m-caption');
        $endereco = new MCheckBox('endereco', DB_TRUE, null, true);
        $fieldsC2[] = new MHContainer('enderecoContainer', array($enderecoLabel, $endereco));
        
        $sexoLabel = new MText('sexoLabel', _M('Sexo', $module));
        $sexoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sexoLabel->setClass('m-caption');
        $sexo = new MCheckBox('sexo', DB_TRUE, null, true);
        $fieldsC2[] = new MHContainer('sexoContainer', array($sexoLabel, $sexo));
        
        $rgLabel = new MText('rgLabel', _M('RG', $module));
        $rgLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $rgLabel->setClass('m-caption');
        $rg = new MCheckBox('rg', DB_TRUE, null, true);
        $fieldsC2[] = new MHContainer('rgContainer', array($rgLabel, $rg));

        $cpfLabel = new MText('cpfLabel', _M('CPF', $module));
        $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cpfLabel->setClass('m-caption');
        $cpf = new MCheckBox('cpf', DB_TRUE, null, true);
        $fieldsC2[] = new MHContainer('cpfContainer', array($cpfLabel, $cpf));
        
        $MVContainer2 = new MVContainer('MVContainer2', $fieldsC2);
        
        $questaoLabel = new MText('questaoLabel', _M('Questão', $module));
        $questaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $questaoLabel->setClass('m-caption');
        $questao = new MCheckBox('questao', DB_TRUE, null, true);
        $fieldsC3[] = new MHContainer('questaoContainer', array($questaoLabel, $questao));

        $respostaLabel = new MText('respostaLabel', _M('Resposta', $module));
        $respostaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $respostaLabel->setClass('m-caption');
        $resposta = new MCheckBox('resposta', DB_TRUE, null, true);
        $fieldsC3[] = new MHContainer('respostaContainer', array($respostaLabel, $resposta));
        
        $MVContainer3 = new MVContainer('MVContainer3', $fieldsC3);
        
        $fieldsPerson[] = new MHContainer('optsContainer', array($MVContainer1, $MVContainer2, $MVContainer3));
        
        $baseGroupPerson = new MBaseGroup('baseGroupForm', _M('Dados da(s) pessoa(s)'), $fieldsPerson);
        $fields[] = $baseGroupPerson;
        
        // Dados do formulário.
        $busForm = new BusinessResearchBusForm();
        $formLabel = new MText('formLabel', _M('Selecione o formulário:', $module));
        $formLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $formLabel->setClass('m-caption m-caption-required');
        $formId = new MSelection('formId', null, null, $busForm->listForm());
        $formId->addAttribute('onchange', $this->getAjaxAction('obterQuestoesDoFormulario', 'divQuestoesDoFormulario', false));
        $fieldsForm[] = new MHContainer('formContainer', array($formLabel, $formId));
        $validators[] = new MRequiredValidator('formId', _M('Formulário', $module));
        
        $fieldsForm[] = new MSeparator("<br>");
        $fieldsForm[] = $div = new MDiv('divQuestoesDoFormulario', $this->obterQuestoesDoFormulario($args));
        $div->addAttribute('style', 'width:auto;');
        
        $baseGroupForm = new MBaseGroup('baseGroupForm', _M('Dados do formulário'), $fieldsForm);
        $fields[] = $baseGroupForm;
        
        $fields[] = new MButton('btnGenerate', _M('Gerar', $module));
        
        if ( strlen($this->getFormValue('formId')) > 0 )
        {
            $dados       = $this->obterDados();
            $busQuestion = new BusinessResearchBusQuestion();
            $gridData    = $busQuestion->obterDadosRelatorioSocioEconomicoAnalitico($dados);

            if ( count($gridData) > 0 )
            {
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdRelatorioSocioEconomicoAnalitico', $dados);
                $grdResults->setData($gridData);
                $grdResults->setTitle(_M('Questionário sócio econômico.', $module));
                $fields[] = $grdResults;
            }
            else
            {
                $this->addError(_M('Nenhum registro encontrado', $module));
            }
        }
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
    }
    
    /**
     * Retorna os campos de quesionário conforme formulário selecionado.
     * 
     * @param obj $args
     * @return string html
     */
    public function obterQuestoesDoFormulario($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        $MIOLO->session->setValue('questionIds', array());
        
        if ( strlen($args->formId) > 0 || strlen($this->getFormValue('formId')) > 0 )
        {
            $filter = new stdClass();
            $filter->formId = ($args->formId) ? $args->formId : $this->getFormValue('formId');
            
            $busQuestion = new BusinessResearchBusQuestion();
            $questions = $busQuestion->searchQuestion($filter, true);
            $fieldsContainer = array();
            $cont = 1;

            foreach ( $questions as $question )
            {
                $questionIds[] = $question->questionId;
                
                $questionLabel = new MText('questionLabel_' . $question->questionId, _M($question->description, $module));
                $questionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $questionLabel->setClass('m-caption');
                $questionLabel->addAttribute('style', 'text-align:left !important;');
                $questionId = new MCheckBox('questionId_' . $question->questionId, DB_TRUE, null, true);
                $fieldsContainer[] = new MHContainer('questionContainer', array($questionLabel, $questionId));
                
                if ( $cont == 5 )
                {
                    $verticalContainers[] = new MVContainer('mvContainer_' . $question->questionId, $fieldsContainer);
                    unset($fieldsContainer);
                    $cont = 1;
                }
                else
                {
                    $cont++;
                }
            }
            
            // Se ainda sobrou questões.
            if ( count($fieldsContainer) > 0 )
            {
                $verticalContainers[] = new MVContainer('mvContainer_' . $question->questionId, $fieldsContainer);
                unset($fieldsContainer);
            }
            
            $MIOLO->session->setValue('questionIds', $questionIds);
            $fields[] = new MHContainer('horizontalContainer', $verticalContainers);

            return $fields;
        }
        else
        {
            return '';
        }
    }
    
    /**
     * Retorna os dados selecionados.
     */
    public function obterDados()
    {
        $MIOLO  = MIOLO::getInstance();
        
        $dados = new stdClass();
        $dados->subscriptionId = $this->getFormValue('subscriptionId');
        $dados->personId       = $this->getFormValue('personId');
        $dados->personName     = $this->getFormValue('personName');
        
        $dados->codePessoa = $this->getFormValue('codePessoa') ? $this->getFormValue('codePessoa') : DB_FALSE;
        $dados->namePessoa = $this->getFormValue('namePessoa') ? $this->getFormValue('namePessoa') : DB_FALSE;
        $dados->phone      = $this->getFormValue('phone') ? $this->getFormValue('phone') : DB_FALSE;
        $dados->email      = $this->getFormValue('email') ? $this->getFormValue('email') : DB_FALSE;
        $dados->endereco   = $this->getFormValue('endereco') ? $this->getFormValue('endereco') : DB_FALSE;
        $dados->sexo       = $this->getFormValue('sexo') ? $this->getFormValue('sexo') : DB_FALSE;
        $dados->rg         = $this->getFormValue('rg') ? $this->getFormValue('rg') : DB_FALSE;
        $dados->cpf        = $this->getFormValue('cpf') ? $this->getFormValue('cpf') : DB_FALSE;
        $dados->questao    = $this->getFormValue('questao') ? $this->getFormValue('questao') : DB_FALSE;
        $dados->resposta   = $this->getFormValue('resposta') ? $this->getFormValue('resposta') : DB_FALSE;
        
        $dados->formId = $this->getFormValue('formId');
        
        if ( strlen($dados->subscriptionId) > 0 )
        {
            $sprSubscription = new SprSubscription($dados->subscriptionId);
            $dados->selectiveProcessId = $sprSubscription->__get('selectiveProcessId');
        }
        
        $questionIds   = $MIOLO->session->getValue('questionIds');
        $MIOLO->session->setValue('questionIds', array());
        
        foreach ( $questionIds as $questionId )
        {
            $questions[$questionId] = $this->getFormValue('questionId_' . $questionId) ? $this->getFormValue('questionId_' . $questionId) : DB_FALSE;
        }
        
        $dados->questionIds = $questions;
        
        return $dados;
    }
}
?>