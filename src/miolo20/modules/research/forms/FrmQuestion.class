<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Question form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor SchmIdt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 */
/**
 * Form to manipulate a course
 */
class FrmQuestion extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new RshQuestion(), array('questionId'), 'BusQuestion');

        $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $formIdFormValue = $this->getFormValue('formId', $data->formId);

        // Se for uma função de inserção, e estamos abrindo o formulário e não existe um formulário selecionado ainda, que será onde serão inseridas as questões, temos que selecionário
        $busForm = new BusinessResearchBusForm();

        // É edição ou exclusão
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $questionIdValue = strlen(MIOLO::_request('questionId', 'GET')) > 0 ? MIOLO::_request('questionId', 'GET') : MIOLO::_request('questionId');

            $questionId = new MHiddenField('questionId', $questionIdValue);
            $fields[] = $questionId;

            $businessQuestion = new BusinessResearchBusQuestion();
            $data = $businessQuestion->getQuestion($questionIdValue);
            $formIdFormValue = $data->formId;
        }

        if ( strlen($formIdFormValue) > 0 )
        {
            // Já informado um formulário
            $formId = new MHiddenField('formId', $formIdFormValue);
            $fields[] = $formId;

            $dataForm = $busForm->getForm($formIdFormValue);

            if ( $function == SForm::FUNCTION_UPDATE )
            {
                // Mostrar as opções e a chave primária
                $formIdLabel = new MTextLabel('formIdLabel', $formIdFormValue . ' - ' . $dataForm->description, _M('Formulário', $module));
                $fields[] = $formIdLabel;

                $fields[] = new Separator('');

                $questionIdText = new MTextLabel('questionIdText', $questionIdValue . ' - ' . $data->description, _M('Questão', $module));
                $fields[] = $questionIdText;
            }
            else
            {
                $formIdLabel = new MTextLabel('formIdLabel', $formIdFormValue . ' - ' . $dataForm->description, _M('Formulário', $module));
                $fields[] = $formIdLabel;
            }

            $fields[] = new Separator('');

            // Field question category
            $busQuestionCateory = new BusinessResearchBusQuestionCategory();
            $questionCategoryLabel = new MText('questionCategoryLabel', _M('Categoria da questão', $module));
            $questionCategoryLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $questionCategoryLabel->setClass('m-caption m-caption-required');
            $questionCategoryId = new MComboBox('questionCategoryId', strlen($this->getFormValue('questionCategoryId', $data->questionCategoryId)) > 0 ? $this->getFormValue('questionCategoryId', $data->questionCategoryId) : $data->questionCategoryId, '', $busQuestionCateory->listQuestionCategory());
            $cntQuestionCategory = new MHContainer('cntQuestionCategory', array($questionCategoryLabel, $questionCategoryId));
            $cntQuestionCategory->setShowLabel(true);
            $fields[] = $cntQuestionCategory;
            $validators[] = new MRequiredValidator('questionCategoryId', _M('Código da categoria da questão', $module));

            // Field question description
            $descriptionlabel = new MText('questionLabel', _M('Descrição', $module));
            $descriptionlabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $descriptionlabel->setClass('m-caption m-caption-required');
            $description = new MTextField('description', strlen($this->getFormValue('description', $data->description)) > 0 ? $this->getFormValue('description', $data->description) : $data->description, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $description->setJsHint( _M('Informe a descrição da questão', $module) );
            $validators[] = new MRequiredValidator('description', _M('Descrição', $module));
            $cntQuestion = new MHContainer('cntQuestion', array($descriptionlabel, $description));
            $cntQuestion->setShowLabel(true);
            $fields[] = $cntQuestion;

            $busAnswerType = new BusinessResearchBusAnswerType();
            $fields[] = new MSelection('answerTypeId', $this->GetFormValue('answerTypeId', $data->answerTypeId), _M('Tipo de resposta', $module), $busAnswerType->listAnswerType());
            $validators[] = new MRequiredValidator('answerTypeId', _M('Tipo de resposta', $module));

            // Field is required
            $isRequiredLabel = new MText('isRequiredLabel', _M('É obrigatória',$module) . '?');
            $isRequiredLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $isRequiredValue = $data->isRequired;
            if ( !(strlen($isRequiredValue) > 0) )
            {
                $isRequiredValue = MIOLO::_request('isRequired', 'GET');

                if ( !(strlen($isRequiredValue) > 0) )
                {
                    $isRequiredValue = DB_FALSE;
                }
            }
            $isRequired = new MRadioButtonGroup('isRequired', '', SAGU::listYesNo(1), $isRequiredValue, null, 'horizontal');
            $isRequired->setShowLabel(false);
            $hctIsRequired = new MHContainer('hctIsRequired', array($isRequiredLabel, $isRequired));
            $hctIsRequired->setShowLabel(false);
            $fields[] = $hctIsRequired;

            // Buttom save
            $btn2 = new MButton('tbBtnSave', _M('Salvar só esta questão', $module));
            $btnSaveClicked = new MHiddenField('btnSaveClicked', $this->getFormValue('btnSaveClicked', $btnSaveClicked));

            // Buttom save and insert more
            $btn3 = new MButton('btnSaveMore', _M('Salvar esta questão e inserir outra', $module));
            $btnSaveMoreClicked = new MHiddenField('btnSaveMoreClicked', $this->getFormValue('btnSaveMoreClicked', $btnSaveMoreClicked));

            $fields[] = new Separator('');
            $divBtn1 = new MDiv('divBtn1', array($btn2, $btn3), null, 'align="center"');
            $fields[] = $divBtn1;
            $fields[] = new Separator('');

            // Dados para grid
            $filters->formId = $formIdFormValue;

            $businessQuestion = new BusinessResearchBusQuestion();
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdQuestionToFormSearch', $filters);
            $dataSearch = $businessQuestion->searchQuestion($filters);
            $grdResults->setData($dataSearch);
            $fields[] = $grdResults;

            if ( $btnSaveMoreClicked->value == 1 )
            {
                // Opção de inserir mais registros
                $funciontOld = MIOLO::_request('functionOld');

                if ( $funciontOld == SForm::FUNCTION_INSERT )
                {
                    $this->addInfo(_M('Questão inserida', $module));
                }
                elseif ( $funciontOld == SForm::FUNCTION_UPDATE )
                {
                    $this->addInfo(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $module);
                }
            }
        }
        else
        {
            // Não informado um formulário
            $formIdLabel = new MText('formIdLabel', _M('Formulário', $module) . ':');
            $formIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $formId = new MLookupTextField('formId', $this->getFormValue('formId', $data->formId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'formName', 'research', 'form', null, array('formId'=>'formId'), true);
            $formId->setJsHint(_M('Informe o formulário avaliação de estágio', $module));
            $formName = new MTextField('formName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $formName->setJsHint(_M('Formulário', $module));
            $formName->setReadOnly(true);
            $fields[] = new MHContainer('formCnt', array($formIdLabel, $formId, $formName));
            $validators[] = new MRequiredValidator('formId');

            $btn1 = new MButton('btnAddQuestion', _M('Adicionar questão', $module));
            $fields[] = $btn1;
        }

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event to save in database
     */
    public function saveDatas($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        $business = new BusinessResearchBusQuestion();

        $data = $this->getTypesData();

        if ( !(strlen($data->questionCategoryId) > 0) )
        {
            $msg .= _M('O campo "Código da categoria da questão" é obrigatório', $module) . '.';
        }

        if ( !(strlen($data->description) > 0) )
        {
            strlen($msg) > 0 ? $msg .= '<br>' : null;

            $msg .= _M('O campo "Descrição" é obrigatório', $module) . '.';
        }

        if ( strlen($msg) > 0 )
        {
            $this->error($msg);
        }
        else
        {
            if ( $function == SForm::FUNCTION_INSERT )
            {
                // INSERT dos dados
                $ok = $business->insertQuestion($data);
            }
            elseif ( $function == SForm::FUNCTION_UPDATE )
            {
                // UPDATE
                $filters = new stdClass();
                $filters->answerTypeId = $data->answerTypeId;
                $filters->questionId = $data->questionId;
                $canChange = $business->canChangeAnswerType($filters);

                if ( $canChange )
                {
                    $ok = $business->updateQuestion($data);
                }
                else
                {
                    $this->AddAlert(_M('Esta questão possui opções registradas, portanto não pode ser convertida para descritiva.', $module));
                    $ok = false;
                }
            }

            return $ok;
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        $opts['function'] = SForm::FUNCTION_SEARCH;

        $ok = $this->saveDatas();

        $goto = $MIOLO->getActionURL($module, $action, null, $opts);

        if ( $ok )
        {
            if ( $function == SForm::FUNCTION_INSERT )
            {
                $MIOLO->information(_M('Questão inserida', $module), $goto);
            }
            elseif ( $function == SForm::FUNCTION_UPDATE )
            {
                $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $goto);
            }
        }
    }

    /**
     * Salva a questão e continua a cadastrar
     *
     * @param type $sender
     */
    public function btnSaveMore_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        $opts['btnSaveMoreClicked'] = '1';
        $opts['formId'] = strlen(MIOLO::_request('formId', 'GET')) > 0 ? MIOLO::_request('formId', 'GET') : MIOLO::_request('formId');
        $opts['functionOld'] = $function;

        $ok = $this->saveDatas();

        if ( $ok )
        {
            $opts['function'] = SForm::FUNCTION_INSERT;
            $this->page->redirect($MIOLO->getActionURL($module, $action, null, $opts));
        }
    }

    /**
     * Exclui um registro
     *
     * @param type $sender
     */
    public function  tbBtnDelete_confirm($sender = NULL)
    {
        try
        {
            parent::tbBtnDelete_confirm($sender);
        }
        catch ( Exception $e )
        {
            $this->addInfo($e->getMessage());
        }
    }
}
?>