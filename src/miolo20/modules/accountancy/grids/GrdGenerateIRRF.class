<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finBank table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/12/2005
 *
 **/
class GrdGenerateIRRF extends SGrid
{
    public $toPrint;
    public $fileId;
    public $fileName;

    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $columns = array( new MGridColumn( _M('Código do arquivo',    $module), 'right',  true, null, true, null, true ),
                          new MGridColumn( _M('Nome do araquivo',    $module), 'right',  true, null, true, null, true),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn( _M('Está processado', $module),     'right', true, null, true, array( DB_TRUE => _M('Yes',$module), DB_FALSE => _M('Não',$module) ), true )
                        );
       
       parent::__construct( $filters, $columns, 'GrdGenerateIRRF' );
       $this->clearActions();
       $this->setRowMethod('GrdGenerateIRRF', 'myRowMethod');

       $this->addActionSelect();
       $ctlArray = array( new MButton( 'btnGenerateSelected', _M('Geração selecionada') ) );

       // set the controls in the grid
        $this->setControls( $ctlArray );
    }

    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();

    }

   /**
     *
     */
    public function btnGenerateSelected_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        // Pega valores da grid select = invoiceId, $valueField = valor declarado do título. 
        $data->select = $this->page->request( 'select' . $this->name );

        // número das linhas selecionadas
        $data->allSelecteds = $this->allSelecteds;
        if(is_array($data->select) == false)
        {
            $msg  = _M('Erro, selecione um arquivo para gerar!',$module);
            $vars['personId'] = $data->personId;
            $vars['personName'] = $data->personName;
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }

        $businessIRRF = new BusinessAccountancyBusIRRF();
        $dataReturn = $businessIRRF->genereteIRRF($data);
        $this->toPrint = $dataReturn->toPrint;
        // Grava arquivo no servidor.
        $saveReturn = SAGUFile::saveDataToLocal($dataReturn );
        if($saveReturn == true)
        {
            $cont = 0;
            //   seta isProcessed true nos arquivos processados.
            while($data->select[$data->allSelecteds[1][$cont]])
            {
                $businessFile = new BusinessFinanceBusFinFile();
                $dataFile = $businessFile->getFinanceFile($data->select[$data->allSelecteds[1][$cont]]);
                $dataFile->isProcessed = DB_TRUE;
                $ok = $businessFile->updateFinanceFile($dataFile);
                $cont++; 
            }
        }
        // faz commit de dados gravados na base de dados até o devido momento.  
        $commit     = $businessIRRF->commit();


        if( strlen( $dataReturn->file ) > 0 )
        {
            $this->fileId = $dataReturn->fileId;
            $this->fileName = $dataReturn->fileName;
        }
        $vars['event'] = 'btnSave_click';
        $postAction = substr( $action,0,strrpos( $action,':' ) ) . ':generateIRRF';
//        $this->page->redirect($MIOLO->getActionURL($module, $postAction, null, $vars));
    }
}

?>
