<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Class definition for database entities
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/12/2005
 *
 **/

/**
 * Accountancy database classes
 */

$MIOLO->uses('types.class', 'basic');

class AccAccountScheme extends BasLog
{
    public $accountSchemeId;
    public $description;
    public $accountReduced;
    public $incomeOrExpense;
    public $parentAccountSchemeId;
    public $codigoestrutural;
}

class AccAccountBalance extends BasLog
{
    public $accountSchemeId;
    public $source;
    public $balanceDate;
    public $value;
}

class AccCostCenter extends SType
{
    protected $_descriptionColumn = 'AccCostCenter.costCenterId || \' - \' || AccCostCenter.description';
    
    public $costCenterId;
    public $description;
    public $parentCostCenterId;
    public $personIdOwner;
    public $allowPaymentRequest;
    public $active;
    
    public function findForChoiceComponent($argument = null, $id = null)
    {
        return parent::findForChoiceComponent('%' . $argument, $id);
    }
}

class AccCourseAccount extends Baslog
{
    public $courseId;
    public $courseVersion;
    public $unitId;
    public $accountSchemeId;
    public $costCenterId;
}

class AccPersonBalance extends Baslog
{
    public $accountSchemeId;
    public $personId;
    public $source;
    public $balanceDate;
    public $value;
    public $courseId;
    public $courseVersion;
    public $unitId;
}

class AccCourseBalance extends Baslog
{
    public $courseBalanceId;
    public $accountSchemeId;
    public $source;
    public $balanceDate;
    public $courseId;
    public $courseVersion;
    public $unitId;
    public $value;
}

class AccIntegration extends Baslog
{
    public $externalEntryId;
    public $operationTypeId;
    public $operationId;
    public $debitAccount;
    public $creditAccount;
    public $operationDescription;
    public $debitCostCenter;
    public $creditCostCenter;
}

class AccIncomeForecastIntegration extends AccIntegration
{
    public $accountItem;
}

class AccEntryIntegration extends AccIntegration
{
    public $value;
    public $userCode;
    public $debitItem;
    public $creditItem;
    public $reversalOperation;
}

class AccAccountingLimit extends BasLog
{
    public $accountingLimitId;
    public $recordDate;
    public $accountingUser;
}

class AccFechamentoDePeriodoContabil extends SType
{
    protected $_utilizaNovoPadrao = true; 
    
    public $fechamentoDePeriodoContabilId;
    public $dataDeFechamento;
    public $estaFechado = DB_TRUE;
    
    public $_defaultOrder = 'fechamentodeperiodocontabilid';
    
    /**
     * Verifica se existe períodos contábeis com data de fechamento menores ou iguais ao que está sendo informado
     * 
     * @param type $dataDeFechamento
     * @param type $fechamentoDePeriodoContabilId
     * @return type
     */
    public static function verificaDataDeFechamento($dataDeFechamento, $fechamentoDePeriodoContabilId = null)
    {
        $fechamentoDePeriodoContabil = new AccFechamentoDePeriodoContabil();
        $msql = $fechamentoDePeriodoContabil->msql();
        $msql->setColumns('datetouser(dataDeFechamento)');
        $msql->setTables('accfechamentodeperiodocontabil');
        $msql->setWhere('dataDeFechamento >= datetodb(?)', array($dataDeFechamento));
        
        if ( strlen($fechamentoDePeriodoContabilId) > 0 )
        {
            $msql->setWhereAnd('fechamentoDePeriodoContabilId != ?', array($fechamentoDePeriodoContabilId));
        }
                            
        $result = SDatabase::getInstance()->query($msql->select());
        return $result[0][0];
    }
    
    /**
     * // Verifica se existem períodos anteriores abertos, caso esteja fechando e verifica períodos posteriores fechados, caso esteja abrindo.
     * 
     * @param type $fechamentoDePeriodoContabilId
     * @param type $fechamento
     * @return type
     */
    public static function verificaEdicao($fechamentoDePeriodoContabilId, $fechamento)
    {
        $fechamentoDePeriodoContabil = new AccFechamentoDePeriodoContabil();
        $msql = $fechamentoDePeriodoContabil->msql();
        $msql->setColumns('count(*) > 0');
        $msql->setTables('accfechamentodeperiodocontabil');
        
        if ( !$fechamento )
        {
            $msql->setWhere('fechamentoDePeriodoContabilId > ?', array($fechamentoDePeriodoContabilId));
            $msql->setWhereAnd('estaFechado IS TRUE');
        }
        else
        {
            $msql->setWhere('fechamentoDePeriodoContabilId < ?', array($fechamentoDePeriodoContabilId));
            $msql->setWhereAnd('estaFechado IS FALSE');
        }
            
        $result = SDatabase::getInstance()->query($msql->select());
        
        return $result[0][0];
    }
}

class AccFechamentoDePeriodoContabilLog extends SType
{
    public $fechamentoDePeriodoContabilLogId;
    public $fechamentoDePeriodoContabilId;
    public $estaFechado;
    
    /**
     * Obtém registro para a grid de logs do período contábil
     * 
     * @param type $fechamentoDePeriodoContabilId
     * @return type
     */
    public static function obtemRegistrosDeLog($fechamentoDePeriodoContabilId)
    {
        $fechamentoDePeriodoContabilLog = new AccFechamentoDePeriodoContabilLog();
        $msql = $fechamentoDePeriodoContabilLog->msql();
        $msql->setColumns('A.username, B.name, TO_CHAR(A.datetime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'), A.estaFechado');
        $msql->setTables('accfechamentodeperiodocontabillog A');
        $msql->addInnerJoin('miolo_user B', 'A.username = B.login');
        $msql->setWhere('A.fechamentodeperiodocontabilid = ? ', array($fechamentoDePeriodoContabilId));
        $msql->setOrderBy('A.datetime ASC');
        
        return SDatabase::getInstance()->query($msql->select());
    }
}

?>
