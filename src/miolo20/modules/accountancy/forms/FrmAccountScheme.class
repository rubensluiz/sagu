<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for accAccountScheme table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 12/12/2005
 *
 **/

/**
 * Form to search the accAccountScheme table
 */
class FrmAccountScheme extends SmanagementForm
{
    /**
     * Constant type income or expense option
     **/
    const TYPE_INCOME = 'I';
    const TYPE_EXPENSE = 'E';

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AccAccountScheme(), array('accountSchemeId'), 'BusAccountScheme');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $accountSchemeId = $pk->accountSchemeId;
            $data = $this->busObject->getAccountScheme($accountSchemeId);
            $fields[] = new MHiddenField('accountSchemeId', $accountSchemeId);
            $fields[] = new MTextLabel('', $data->accountSchemeId, _M('Código', $module));
        }
        else
        {
            $codigoestrutural = new MTextField('accountSchemeId', $this->getFormValue('accountSchemeId', $data->accountSchemeId), _M('Código estrutural', $module), 12);
            $codigoestrutural->setJsHint(_M('Informe o código estrutural do plano de contas', $module));
            $validators[] = new MRegexpValidator('accountSchemeId', _M('Código estrutural', $module), '^[0-9]+(\.[0-9]+)*$', 'required');
            $fields[] = $codigoestrutural;
        }
        
        $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription', $data->description), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescription->setJsHint(_M('Informe a descrição do plano de contas', $module));
        $validators[] = new MRequiredValidator('accountSchemeDescription', '', 'required');
        $fields[] = $accountSchemeDescription;
        
        //Options of the radio button income or expense
        $opts[] = new MOption('income', self::TYPE_INCOME, _M('Receita', $module), true);
        $opts[] = new MOption('expense', self::TYPE_EXPENSE, _M('Despesa', $module), false);
        
        //Type operation
        $typeOption['label'] = new MText('incomeOrExpenseOptionLabel', _M('Tipo', $module) . ':');
        $typeOption['label']->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $valueTypeOption = $this->GetFormValue('incomeOrExpense', $data->incomeOrExpense) ? $this->GetFormValue('incomeOrExpense', $data->incomeOrExpense) : self::TYPE_INCOME;
        $typeOption['radio'] = new MRadioButtonGroup('incomeOrExpense', '', $opts, $valueTypeOption, null, 'horizontal');
        $typeOption['radio']->setShowLabel(false);
        
        $hctTypeOption = new MHContainer('hctTypeOption', $typeOption);
        $fields[] = $hctTypeOption;
        
        //Field account scheme
        $accountSchemeIdLookup = new MLookupTextField('parentAccountSchemeId', $this->GetFormValue('parentAccountSchemeId', $data->parentAccountSchemeId), _M('Plano de contas superior', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'accountSchemeDescriptionLookup', 'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeIdLookup->setJsHint(_M('Informe o código do plano de contas', $module));
        $validators[] = new MRegexpValidator('parentAccountSchemeId', _M('Plano de contas', $module), '^[0-9]+(\.[0-9]+)*$');
        $accountSchemeDescription = new MTextField('accountSchemeDescriptionLookup', $this->accountSchemeDescriptionLookup->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescription->setReadOnly(true);
        $accountSchemeDescription->setJsHint(_M('Descrição do plano de contas', $module));
        $hctAccountScheme = new MHContainer('hctAccountScheme', array($accountSchemeIdLookup, $accountSchemeDescription), MContainer::FORM_MODE_SHOW_SIDE);
        $fields[] = $hctAccountScheme;
        
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $fields[] = new MTextLabel('accountReduced', $data->accountReduced, _M('Conta reduzida', $module));
        }
        
        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $data = $this->getTypesData();
        $business = new BusinessAccountancyBusAccountScheme();
        
        if ( ($business->checkAccountSchemeIdNotUsedInOperations($data->parentAccountSchemeId)) == DB_TRUE )
        {
        
            if ( $function == 'update' )
            {
                $ok = $business->updateAccountScheme($data);
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
            }
            else
            {
                $dataAccountScheme = $business->getAccountScheme($data->accountSchemeId);
                
                if ( strlen($dataAccountScheme->accountSchemeId) > 0 )
                {
                    $opts = array('accountSchemeId' => $data->accountSchemeId, 'function' => 'update');
                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                    $opts = array('accountSchemeIdS' => $data->accountSchemeId, 'event' => 'btnSearch_click');
                    $gotoNo = $MIOLO->getActionURL($module, $action, null, $opts);
                    $msg = _M('O plano de contas @1 já existe. Você gostaria de editar este plano de contas?', $module, $data->accountSchemeId);
                    $MIOLO->question($msg, $gotoYes, $gotoNo);
                }
                else
                {
                    $ok = $business->insertAccountScheme($data);
                    $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
                }
            }
            
            if ( $ok )
            {
                $opts = array('accountSchemeIdS' => $data->accountSchemeId);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                if ( $function == 'update' )
                {
                    $caption = _M('Informação', $module);
                    $MIOLO->information($msg, $goto);
                }
                else
                {
                    $opts = array('event' => 'tbBtnNew_click', 'function' => 'insert');
                    
                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Questão', $module);
                    $MIOLO->question($msg, $gotoYes, $goto);
                }
            }
            else
            {
                $msg = _M('Erro executando a operação requerida', $module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                $MIOLO->error($msg, $goto, $caption);
            }
        }       
        else
        {
            $busOperation = new BusinessFinanceBusOperation();
            
            $filters = new stdClass();
            $filters->accountSchemeId = $data->parentAccountSchemeId;
            
            $operations = $busOperation->searchOperation($filters);
            
            $msg = _M('O plano de contas superior selecionado possui operações vinculadas:<br>', $module);
            
            foreach ( $operations as $op )
            {
                $msg .= _M('<br>- ' . $op[1] . ' (' . $op[0] . ')', $module);
            }
            
            $msg .= _M("<br><br>Verifique o cadastro desta(s) operação(ões).");
            
            $this->addError($msg);
        }
    }

    public function getTypesData()
    {
        $data = new accAccountScheme();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
            $data->description = $this->accountSchemeDescription->value;
        }
        $data->codigoestrutural = $data->accountSchemeId;
        
        return $data;
    }
}

?>
