<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acCourseAccount table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/12/2005
 *
 **/

/**
 * Form to search the accCourseAccount table
 */
class FrmCourseAccountSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(null, new AccCourseAccount(), array('courseId', 'courseVersion', 'unitId'), 'BusCourseAccount');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[]  = $courseOccurrenceLookup;

        //Field account scheme
        $accountSchemeIdLabelS = new Mtext('accountSchemeIdLabelS', _M('Plano de contas', $module) . ':' );
        $accountSchemeIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountSchemeIdS = new MLookupTextField('accountSchemeIdS', $this->getFormValue('accountSchemeIdS',$data->accountSchemeIdS), '', 12, null, null, 'accountSchemeDescriptionS', $module, 'AccountScheme', null, null, true);
        $accountSchemeIdS ->setJsHint(_M('Informe o código do plano de contas', $module));
        $validators[]    = new MRegexpValidator('accountSchemeIdS',_M('Plano de contas', $module), '^[0-9]+(\.[0-9]+)*$');
        $accountSchemeDescriptionS = new MTextField('accountSchemeDescriptionS', $this->getFormValue('accountSchemeDescriptionS', $data->accountSchemeDescriptionS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescriptionS->setJsHint(_M('Informe a descrição do plano de contas', $module));
        $accountSchemeDescriptionS->setReadOnly(true);
        $hctAccountSchemeS = new MHContainer('hctAccountSchemeS', array($accountSchemeIdLabelS, $accountSchemeIdS, $accountSchemeDescriptionS));
        $hctAccountSchemeS->setShowLabel(true);
        $fields[]  = $hctAccountSchemeS;

        //Field cost center
        $costCenterIdLabelS = new Mtext('costCenterIdLabelS', _M('Centro de custo', $module) . ':');
        $costCenterIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $costCenterIdS = new MLookupTextField('costCenterIdS', $this->getFormValue('costCenterIdS', $data->costCenterIdS), '', 12, null, null, 'costCenterDescriptionS', $module, 'CostCenter', null, null, true);
        $costCenterIdS->setJsHint(_M('Informe o código do centro de custos', $module));
        $validators[]    = new MRegexpValidator('costCenterIdS',_M('Centro de custo', $module), '^[0-9]+(\.[0-9]+)*$');
        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->getFormValue('costCenterDescriptionS', $data->costCenterDescriptionS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescriptionS->setJsHint(_M('informe a descrição do centro de custos', $module));
        $costCenterDescriptionS->setReadOnly(true);
        $hctCostCenterS = new MHContainer('hctCostCenterS', array($costCenterIdLabelS, $costCenterIdS, $costCenterDescriptionS));
        $hctCostCenterS->setShowLabel(true);
        $fields[]  = $hctCostCenterS;

        parent::defineFields($fields, $module, 'GrdCourseAccountSearch', $validators);
    }
}

?>
