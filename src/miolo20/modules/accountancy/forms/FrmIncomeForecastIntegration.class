<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for accIncomeForecastIntegration table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 27/09/2006
 *
 **/

/**
 * Form to search the accIncomeForecastIntegration table
 */
class FrmIncomeForecastIntegration extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        $operationId = MIOLO::_request('operationId');
        
        parent::__construct( _M('Definir contabilização de previsão de lançamento para a operação @1', $module, $operationId), new accIncomeForecastIntegration(), NULL );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');       

        $fields[] = new MHiddenField('operationId', $this->getFormValue('operationId', MIOLO::_request('operationId')));
        
        $business = new BusinessAccountancyBusIncomeForecastIntegration();
        $data = $business->getIncomeForecastIntegration(MIOLO::_request('operationId'));
        $data1 = $data->data1;
        $data2 = $data->data2;

        
        //external entry id 1
        $externalEntryIdLabel1 = new MText('externalEntryIdLabel1', _M('Código do lançamento', $module).':');
        $externalEntryIdLabel1->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds1[]      = $externalEntryIdLabel1;

        $externalEntryId1 = new MTextField('externalEntryId1', $this->getFormValue('externalEntryId1', $data1->externalEntryId), '', 5);
        $validators[]  = new MIntegerValidator('externalEntryId1');
        $flds1[]      = $externalEntryId1;

        $fields1[]  = new MHContainer('hctExternalEntryId1', $flds1);
        unset($flds1);

        //operation type id 1
        $business = new BusinessFinanceBusOperation();
        $messagesType = $business->listOperationTypeId(1);

        $operationTypeIdLabel1 = new MText('operationTypeIdLabel1', _M('Tipo de lançamento',$module).':');
        $operationTypeIdLabel1->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds1[]      = $operationTypeIdLabel1;

        $operationTypeId1 = new MRadioButtonGroup('operationTypeId1', '', $messagesType, $this->getFormValue('operationTypeId1', $data1->operationTypeId) ? $this->getFormValue('operationTypeId1', $data1->operationTypeId) : 'D' , null, 'horizontal');
        $operationTypeId1->SetShowLabel(false);
        $flds1[]      = $operationTypeId1;

        $fields1[]  = new MHContainer('hctOperationTypeId1', $flds1);
        unset($flds1);

        $debitAccountLabel1 = new MText('debitAccountLabel1', _M('Conta débito', $module).':');
        $debitAccountLabel1->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds1[]      = $debitAccountLabel1;

        $debitAccount1 = new MTextField('debitAccount1', $this->getFormValue('debitAccount1', $data1->debitAccount), '', 20);
        $flds1[]      = $debitAccount1;

        $fields1[]  = new MHContainer('hctDebitAccount1', $flds1);
        unset($flds1);

        $creditAccountLabel1 = new MText('creditAccountLabel1', _M('Conta crédito', $module).':');
        $creditAccountLabel1->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds1[]      = $creditAccountLabel1;

        $creditAccount1 = new MTextField('creditAccount1', $this->getFormValue('creditAccount1', $data1->creditAccount), '', 20);
        $flds1[]      = $creditAccount1;

        $fields1[]  = new MHContainer('hctCreditAccount1', $flds1);
        unset($flds1);
        
        //operation description 1
        $operationDescriptionLabel1 = new MText('operationDescriptionLabel1', _M('Descrição da operação', $module).':');
        $operationDescriptionLabel1->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds1[]      = $operationDescriptionLabel1;

        $operationDescription1 = new MTextField('operationDescription1', $this->getFormValue('operationDescription1', $data1->operationDescription), '', 30);
        $flds1[]      = $operationDescription1;

        $fields1[]  = new MHContainer('hctOperationDescription1', $flds1);
        unset($flds1);
        
        //debit cost center 1
        $debitCostCenterLabel1 = new MText('debitCostCenterLabel1', _M('Centro de custo débito', $module).':');
        $debitCostCenterLabel1->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds1[]      = $debitCostCenterLabel1;

        $debitCostCenter1 = new MTextField('debitCostCenter1', $this->getFormValue('debitCostCenter1', $data1->debitCostCenter), '', 15);
        $flds1[]      = $debitCostCenter1;

        $fields1[]  = new MHContainer('hctDebitCostCenter1', $flds1);
        unset($flds1);
        
        //credit cost center 1
        $creditCostCenterLabel1 = new MText('creditCostCenterLabel1', _M('Centro de custo crédito', $module).':');
        $creditCostCenterLabel1->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds1[]      = $creditCostCenterLabel1;

        $creditCostCenter1 = new MTextField('creditCostCenter1', $this->getFormValue('creditCostCenter1', $data1->creditCostCenter), '', 15);
        $flds1[]      = $creditCostCenter1;

        $fields1[]  = new MHContainer('hctCreditCostCenter1', $flds1);
        unset($flds1);
        
        //account item 1
        $accountItemLabel1 = new MText('accountItemLabel1', _M('Item contábil', $module).':');
        $accountItemLabel1->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds1[]      = $accountItemLabel1;

        $accountItem1 = new MTextField('accountItem1', $this->getFormValue('accountItem1', $data1->accountItem), '', 20);
        $flds1[]      = $accountItem1;

        $fields1[]  = new MHContainer('hctAccountItem1', $flds1);
        unset($flds1);

        //grupo 1
        $bsg1 = new BaseGroup('bsg1', '', $fields1, 'vertical');
        $bsg1->showLabel = false;
        $bsg1->width     = '49%';


        //external entry id 2
        $externalEntryIdLabel2 = new MText('externalEntryIdLabel2', _M('Código do lançamento', $module).':');
        $externalEntryIdLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds2[]      = $externalEntryIdLabel2;

        $externalEntryId2 = new MTextField('externalEntryId2', $this->getFormValue('externalEntryId2', $data2->externalEntryId), '', 5);
        $validators[]  = new MIntegerValidator('externalEntryId2');
        $flds2[]      = $externalEntryId2;

        $fields2[]  = new MHContainer('hctExternalEntryId2', $flds2);
        unset($flds2);

        //operation type id 2
        $business = new BusinessFinanceBusOperation();
        $messagesType = $business->listOperationTypeId(1);

        $operationTypeIdLabel2 = new MText('operationTypeIdLabel2', _M('Tipo de lançamento',$module).':');
        $operationTypeIdLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds2[]      = $operationTypeIdLabel2;

        $operationTypeId2 = new MRadioButtonGroup('operationTypeId2', '', $messagesType, $this->getFormValue('operationTypeId2', $data2->operationTypeId) ? $this->getFormValue('operationTypeId2', $data2->operationTypeId) : 'C' , null, 'horizontal');
        $operationTypeId2->SetShowLabel(false);
        $flds2[]      = $operationTypeId2;

        $fields2[]  = new MHContainer('hctOperationTypeId2', $flds2);
        unset($flds2);

        //debit account 2
        $debitAccountLabel2 = new MText('debitAccountLabel2', _M('Conta débito', $module).':');
        $debitAccountLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds2[]      = $debitAccountLabel2;

        $debitAccount2 = new MTextField('debitAccount2', $this->getFormValue('debitAccount2', $data2->debitAccount), '', 20);
        $flds2[]      = $debitAccount2;

        $fields2[]  = new MHContainer('hctDebitAccount1', $flds2);
        unset($flds2);
        
        //credit account 2
        $creditAccountLabel2 = new MText('creditAccountLabel2', _M('Conta crédito', $module).':');
        $creditAccountLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds2[]      = $creditAccountLabel2;

        $creditAccount2 = new MTextField('creditAccount2', $this->getFormValue('creditAccount2', $data2->creditAccount), '', 20);
        $flds2[]      = $creditAccount2;

        $fields2[]  = new MHContainer('hctCreditAccount2', $flds2);
        unset($flds2);
        
        //operation description 1
        $operationDescriptionLabel2 = new MText('operationDescriptionLabel2', _M('Descrição da operação', $module).':');
        $operationDescriptionLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds2[]      = $operationDescriptionLabel2;

        $operationDescription2 = new MTextField('operationDescription2', $this->getFormValue('operationDescription2', $data2->operationDescription), '', 30);
        $flds2[]      = $operationDescription2;

        $fields2[]  = new MHContainer('hctOperationDescription2', $flds2);
        unset($flds2);
        
        //debit cost center 2
        $debitCostCenterLabel2 = new MText('debitCostCenterLabel2', _M('Centro de custo débito', $module).':');
        $debitCostCenterLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds2[]      = $debitCostCenterLabel2;

        $debitCostCenter2 = new MTextField('debitCostCenter2', $this->getFormValue('debitCostCenter2', $data2->debitCostCenter), '', 15);
        $flds2[]      = $debitCostCenter2;

        $fields2[]  = new MHContainer('hctDebitCostCenter2', $flds2);
        unset($flds2);
        
        //credit cost center 2
        $creditCostCenterLabel2 = new MText('creditCostCenterLabel2', _M('Centro de custo crédito', $module).':');
        $creditCostCenterLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds2[]      = $creditCostCenterLabel2;

        $creditCostCenter2 = new MTextField('creditCostCenter2', $this->getFormValue('creditCostCenter2', $data2->creditCostCenter), '', 15);
        $flds2[]      = $creditCostCenter2;

        $fields2[]  = new MHContainer('hctCreditCostCenter2', $flds2);
        unset($flds2);
        
        //account item 1
        $accountItemLabel2 = new MText('accountItemLabel2', _M('Item contábil', $module).':');
        $accountItemLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds2[]      = $accountItemLabel2;

        $accountItem2 = new MTextField('accountItem2', $this->getFormValue('accountItem2', $data2->accountItem), '', 20);
        $flds2[]      = $accountItem2;

        $fields2[]  = new MHContainer('hctAccountItem2', $flds2);
        unset($flds2);

        //grupo 2
        $bsg2 = new BaseGroup('bsg2', '', $fields2, 'vertical');
        $bsg2->showLabel = false;
        $bsg2->width     = '48%';

        $fields[] = new MHContainer('hctResult', array($bsg1, $bsg2));
        
        $fields[] = new MTextLabel('lastModification', '['.$data1->userName.' - '.$data1->dateTime.']', _M('Última modificação', $module));
        
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }
    
    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $operationId = $this->getFormValue('operationId');

        $data1     = $this->getTypesData1();
        $data2     = $this->getTypesData2();

        $business = new BusinessAccountancyBusIncomeForecastIntegration();
        
        $business->beginTransaction();
        $business->deleteIncomeForecastIntegration($operationId);

        $data1->externalEntryId ? $ok1  = $business->insertIncomeForecastIntegration($data1): $ok1 = true;
        $data2->externalEntryId ? $ok2  = $business->insertIncomeForecastIntegration($data2): $ok2 = true;
        $msg = _M('Registros para a operação @1 inseridos com sucesso', $module, $data1->operationId);

        if ( $ok1 && $ok2 )
        {
            $business->commit();
    
            $goto = $MIOLO->getActionURL( $module, 'main:process:accounting:defineAccountingProjects', null, null);
            $caption = _M('Questão',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Erro executando a operação requerida', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    
    
    public function getTypesData1()
    {
        $data1 = parent::getTypesData();
        $vars  = get_object_vars($data1);
        foreach ( $vars as $var => $value )
        {
            eval('$data1->' . $var . ' = $this->' . $var . '1->value;');
        }
        $data1->operationId = MIOLO::_request('operationId');

        return $data1;
    }
    
    public function getTypesData2()
    {
        $data2 = parent::getTypesData();
        $vars  = get_object_vars($data2);
        foreach ( $vars as $var => $value )
        {
            eval('$data2->' . $var . ' = $this->' . $var . '2->value;');
        }
        
        $data2->operationId = MIOLO::_request('operationId');

        return $data2;
    }

}

?>
