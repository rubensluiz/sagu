<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles view of Overdue invoice (quarterly)
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 11/07/2006
 *
 **/

/**
 */
class FrmOverdueInvoiceQuarterly extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Títulos vencidos (trimestral)', $module), NULL, NULL );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // limitDate
        $limitDateLabel = new MText('limitDateLabel', _M('Data limite', $module).':');
        $limitDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $limitDateLabel->setClass('m-caption m-caption-required');
        $limitDate      = new MCalendarField('limitDate', $this->getFormValue('limitDate',$data->limitDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $limitDate->setJsHint(_M('Informe a data limite',$module));
        $validators[] = new MDATEDMYValidator('limitDate', '', 'required');
        $fields[] = new MHContainer('hctLimitDate', array($limitDateLabel, $limitDate));

        // baseDate
        $baseDateLabel = new MText('baseDateLabel', _M('Data base', $module).':');
        $baseDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $baseDateLabel->setClass('m-caption m-caption-required');
        $baseDate      = new MCalendarField('baseDate', $this->getFormValue('baseDate',$data->baseDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $baseDate->setJsHint(_M('Informe a data base',$module));
        $validators[] = new MDATEDMYValidator('baseDate', '', 'required');
        $fields[] = new MHContainer('hctBaseDate', array($baseDateLabel, $baseDate));
        
        $fields[] = new MButton('btnGenerate',_M('Gerar',$module));
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }

    /**
     * Event triggered when user chooses Generate button
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        set_time_limit(0);
        
        $filters->limitDate = $this->getFormValue('limitDate');
        $filters->baseDate  = $this->getFormValue('baseDate');
        
        $business = new BusinessAccountancyBusOverdueInvoiceQuarterly();
        
        $dates = $business->getQuarterlyDates($filters);

        $business->createTempTable();
        
        foreach ( $dates as $key => $value )
        {
            $filters->limitDate   = $value;
            $filters->previousDate = $dates[$key+1];
            
            if ( strlen($filters->previousDate) > 0 )
            {
                $filters->description = _M('Mês', $module) . ' ' . ($key+1) . ' - ' . $filters->previousDate .
                                        ' ' . _M('até', $module) . ' ' . $filters->limitDate;
            }
            else
            {
                $filters->description = _M('Mês', $module) . ' ' . ($key+1) . ' - ' . $filters->limitDate .
                                        ' ' . _M('para trás', $module);
            }

            $business->insertIntoTempTable($filters);
        }
        

        $data = $business->getData();
        
        $header = array(
                        _M('Curso',       $module),
                        _M('Descrição',  $module),
                        _M('Saldo',      $module)
                       );    
                       
        $content[] = array(null, null, null);

        $content[] = array(
                            FINANCE::formatAccountSchemeId($data[0][0]),
                            ' - ' . $data[0][2],
                            null
                            );

        $line->accountSchemeId = $data[0][0];
        
        $fileContent[] = _M('Relatório de títulos vencidos (trimestral)', $module);
        $fileContent[] = null;
        $fileContent[] = _M('Nome da conta', $module) . ';' .
                         _M('Código do curso',    $module) . ';' .
                         _M('Período',       $module) . ';' .
                         _M('Nome do curso',  $module) . ';' .
                         _M('Saldo', $module);

        foreach ( $data as $value )
        {
            if ( $value[0] != $line->accountSchemeId )
            {
                if ( is_array($total) )
                {
                    $total = SAGU::calcNumber(implode(' + ', $total));
                    $totalTotal[] = $total;
                }                         

                $content[] = array(
                                    null,
                                    null,
                                    _M('Total', $module) . ': ' . FINANCE::formatFinanceReportNumber($total)
                                   );

                $content[] = array(null, null, null);
                
                $fileContent[] = _M('Total da conta', $module) . ';' .
                                 ';' .
                                 ';' .
                                 ';' .
                                 FINANCE::formatFinanceReportNumber($total);
                                 
                unset($total);
                
                $content[] = array(
                                    FINANCE::formatAccountSchemeId($value[0]),
                                    ' - ' . $value[2],
                                    null
                                   );
            }
            
            list (
                    $line->accountSchemeId,
                    $line->courseId,
                    $line->courseName,
                    $line->balance,
                    $line->description
                  ) = $value;
                  
            $content[] = array(
                                $line->courseId,
                                $line->description . ': ' . $line->courseName,
                                FINANCE::formatFinanceReportNumber($line->balance)
                               );
                               
            $fileContent[] = FINANCE::formatAccountSchemeId($value[0]) . ' - ' . $value[2] . ';' .
                             $line->courseId . ';' .
                             $line->description . ';' .
                             $line->courseName . ';' .
                             FINANCE::formatFinanceReportNumber($line->balance);
            
            $total[] = $line->balance;
        }


        if ( is_array($total) )
        {
            $total = SAGU::calcNumber(implode(' + ', $total));
            $totalTotal[] = $total;
        }                         
        $content[] = array(
                            null,
                            null,
                            _M('Total', $module) . ': ' . FINANCE::formatFinanceReportNumber($total)
                            );
                            
        $fileContent[] = _M('Total da conta', $module) . ';' .
                            ';' .
                            ';' .
                            ';' .
                            FINANCE::formatFinanceReportNumber($total);
        unset($total);

        if ( is_array($totalTotal) )
        {
            $total = SAGU::calcNumber(implode(' + ', $totalTotal));
        }
        
        $fileContent[] = null;
        $fileContent[] = _M('Total geral', $module) . ';' .
                         ';' . 
                         ';' .
                         ';' .
                         FINANCE::formatFinanceReportNumber($total);
        
        $content[] = array(null, null, null);
        $content[] = array(
                            '<b>' . _M('Saldo', $module) . '</b>',
                            null,
                            '<b>' . FINANCE::formatFinanceReportNumber($total) . '</b>'
                           );

        $table = new MTableRaw('', $content, $header);
        $table->setAlternate(true);
        
        $tables[] = $table;
        $tables[] = new MSeparator();
        $this->addFields($tables);

        
        $hiddenData = new MHiddenField('hiddenData', urlencode(serialize($fileContent)));
        $fields[] = $hiddenData;
        
        $fields[] = new MButton('btnFile',_M('Gerar',$module) . ' balance.txt');
        $fields[] = new Separator('');

        $this->addFields($fields);
    }
    /**
     * Event triggered when user chooses File from the toolbar
     **/
    public function btnFile_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $fileContent = implode(unserialize(urldecode(stripslashes($this->getFormValue('hiddenData')))), chr(hexdec("\X0D\X0A")));
        $fileContent.= chr(hexdec("\X0D\X0A"));        
        
        SAGU::returnAsFile('balance-' . date(dmY) . '.txt', $fileContent, 'text/incentive-file');
        
    }
    
}

?>
