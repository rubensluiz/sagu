<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Accountancy Diverse Consultation form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Samuel Koch [smauel@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 10/08/2006
 *
 **/

/**
 * Form to manipulate a diverse consultation
 **/
class FrmDiverseConsultation extends SForm
{
    private $home;
    public $showForm;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $this->showForm = true;
        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct( _M('Consultas diversas', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $personIdLabel = new MText('personIdLabel', _M('Pessoa', $module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $field1[]      = $personIdLabel;
        $field1[]      = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personName'), 'basic', 'Person', null, null, true);

        $validators[] = new MIntegerValidator('personId');
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);

        // First group
        $field1[]  = $personName;
        $field1[]  = new MSeparator('');
        $fields1[] = new MHContainer('container1', $field1);
        $fields[]  = new MBaseGroup('mbgFilterPerson', _M('Filtrar por uma pessoa', $module), $fields1);

        $courseIdLabel = new MText('courseIdLabel', _M('Curso', $module).':');
        $courseIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $field2[]      = $courseIdLabel;
        $field2[]      = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('courseVersion', 'courseName', 'unitId'), $module, 'CourseAccount', null, null, true);

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', FIELD_ID_DESCRIPTION);
        $field2[]      = $courseVersion;
        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $field2[]      = $courseName;

        $business     = new BusinessBasicBusUnit();
        $unitIdLabel  = new MText('unitIdLabel', _M('Unidade', $module).':');
        $unitIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $field2_[]    = $unitIdLabel;
        $unitId       = new MComboBox('unitId', $this->getFormValue('unitId', $this->unitId->value), '', $business->listUnit());
        $unitId->setJsHint(_M('Informe o código da unidade',$module));
        $field2_[]    = $unitId;


        // Second group
        $fields2[]  = new MHContainer('container2', $field2);
        $fields2[]  = new MHContainer('container2_', $field2_);
        $fields2_[] = new MVContainer('containerv1', $fields2);
        $fields[]   = new MBaseGroup('mbgFilterCourse', _M('Filtrar por um curso', $module), $fields2_);



        $accountSchemeIdLabel = new MText('accountSchemeIdLabel', _M('Plano de contas', $module).':');
        $accountSchemeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $field3[]             = $accountSchemeIdLabel;
        $field3[]             = new MLookupTextField('accountSchemeId', $this->getFormValue('accountSchemeId', $data->accountSchemeId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('accountSchemeDescription'), $module, 'AccountScheme', null, null, true);
        $validators[]         = new MRegexpValidator('accountSchemeId', _M('Plano de contas', $module), '^[0-9]+(\.[0-9]+)*$');

        $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription', $data->accountSchemeDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescription->setReadOnly(true);
        $field3[]                 = $accountSchemeDescription;

        $costCenterIdLabel = new MText('costCenterIdLabel', _M('Centro de custo', $module).':');
        $costCenterIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $field3_[]         = $costCenterIdLabel;
        $field3_[]         = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId', $data->costCenterId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('costCenterDescription'), $module, 'CostCenter', null, null, true);
        $validators[]      = new MRegexpValidator('costCenterId', _M('Centro de custo', $module), '^[0-9]+(\.[0-9]+)*$');

        $costCenterDescription = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription', $data->costCenterDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescription->setReadOnly(true);
        $field3_[]             = $costCenterDescription;

        // Third group
        $fields3[]  = new MHContainer('container2', $field3);
        $fields3[]  = new MHContainer('container3_', $field3_);
        $fields3_[] = new MVContainer('containerv2', $fields3);
        $fields[]   = new MBaseGroup('mbgFilterAccountScheme', _M('Filtro para plano de contas ou centro de custos', $module), $fields3_);

        $fields[] = new MSeparator('');
        $fields[] = new MButton('btnSearch',_M('Localizar', $module));
        $fields[] = new MSeparator('');
        $this->setShowPostButton(false);

        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators, 'toolbar' => false ) );
    }

    /**
     * Event triggered when button search is clicked
     */
    public function btnSearch_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $personId        = $this->getFormValue('personId');
        $courseId        = $this->getFormValue('courseId');
        $courseVersion   = $this->getFormValue('courseVersion');
        $unitId          = $this->getFormValue('unitId');
        $accountSchemeId = $this->getFormValue('accountSchemeId');
        $costCenterId    = $this->getFormValue('costCenterId');

        if ( strlen($personId)>0 )
        {
            $filled['personConsultation'] = $personId;
        }

        if (strlen($courseId)>0)
        {
            if (strlen($courseVersion)>0)
            {
                if (strlen($unitId)>0)
                {
                    $filled['courseConsultation'] = $courseId;
                }
            }
        }

        if (strlen($accountSchemeId)>0)
        {
            $filled['accountSchemeConsultation'] = $accountSchemeId;
        }

        if (strlen($costCenterId)>0)
        {
            $filled['costCenterConsultation'] = $costCenterId;
        }

        if (count($filled)>1)
        {
            $this->addError(_M('Mais de um campo de consulta foram preenchidos. Por favor preencha apenas um campo para fazer a consulta.', $module));
        }
        else
        {
            if ( is_array($filled) )
            {
                $fkeys = array_keys($filled);
                if ($fkeys[0] == 'personConsultation')
                {
                    eval('$this->'.$fkeys[0].'_click();');
                }
                if ($fkeys[0] == 'courseConsultation')
                {
                    eval('$this->'.$fkeys[0].'_click();');
                }
                if ($fkeys[0] == 'accountSchemeConsultation')
                {
                    eval('$this->'.$fkeys[0].'_click();');
                }
                if ($fkeys[0] == 'costCenterConsultation')
                {
                    eval('$this->'.$fkeys[0].'_click();');
                }
            }

        }
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function personConsultation_click($sender = null)
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        $filters = $this->getTypesData();

        $business = new BusinessAccountancyBusDiverseConsultationAcc();

        $businessPerson      = new BusinessBasicBusPerson();
        $filters->personName = $businessPerson->getPersonName($filters->personId);

        $ffield1 = new MLink('lnkNewSearch', '', $MIOLO->getActionURL($module, $action), _M('Nova procura', $module));
        $fields[] = $ffield1;
        $field = new MDiv('divOptions', $fields, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);

        $ffield1 = new MText('titleBalance', '<b>' . _M('Saldos para', $module) . ':</b> ' . $filters->personId . ' - ' . $filters->personName);
        $field = new MDiv('divDescBalance', $ffield1, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);


        list (
        $balanceValue,
        $balanceDate
        ) = $business->getPersonCurrentBalance($filters);

        $ffield1 = new MText('balance', '<b>' . _M('Saldo aberto em', $module) . ' ' . $balanceDate . ':</b> ' . $balanceValue);
        $field = new MDiv('divBalance', $ffield1, null, 'align=center');
        $this->addField($field);


        $sources = array(
        array(SAGU::getParameter('ACCOUNTANCY', 'INCOME_FORECAST_IDENTIFIER'), _M('Origem', $module) . ': ' . _M('Previsão de lançamento', $module)),
        array(SAGU::getParameter('ACCOUNTANCY', 'ENTRY_IDENTIFIER'),           _M('Origem', $module) . ': ' . _M('Lançamento', $module))
        );

        foreach ( $sources as $key => $source )
        {
            $filters->source = $source[0];
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationPerson', $filters);
            $data = $business->getPersonBalances($filters);
            $grdResults->setTitle($source[1]);
            $grdResults->setData($data);
            $this->addField($grdResults);

            if ( $key < (count($sources)-1) )
            {
                $field = new Separator('<hr>');
                $this->addField($field);
            }
        }
         
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function courseConsultation_click($sender = null)
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        $filters = $this->getTypesData();

        $business = new BusinessAccountancyBusDiverseConsultationAcc();

        $ffield1 = new MLink('lnkNewSearch', '', $MIOLO->getActionURL($module, $action), _M('Nova procura', $module));
        $fields[] = $ffield1;
        $field = new MDiv('divOptions', $fields, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);

        $ffield1 = new MText('titleBalance', '<b>' . _M('Saldos para', $module) . ':</b> ' . $filters->courseId . ' - ' . $filters->courseName);
        $field = new MDiv('divDescBalance', $ffield1, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);

        list (
        $balanceValue,
        $balanceDate
        ) = $business->getCourseCurrentBalance($filters);

        $ffield1 = new MText('balance', '<b>' . _M('Saldo aberto em', $module) . ' ' . $balanceDate . ':</b> ' . $balanceValue);
        $field = new MDiv('divBalance', $ffield1, null, 'align=center');
        $this->addField($field);

        $sources = array(
        array(SAGU::getParameter('ACCOUNTANCY', 'INCOME_FORECAST_IDENTIFIER'), _M('Origem', $module) . ': ' . _M('Previsão de lançamento', $module)),
        array(SAGU::getParameter('ACCOUNTANCY', 'ENTRY_IDENTIFIER'),           _M('Origem', $module) . ': ' . _M('Lançamento', $module))
        );

        foreach ( $sources as $key => $source )
        {
            $filters->source = $source[0];
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationCourse', $filters);
            $data = $business->getCourseBalances($filters);
            $grdResults->setTitle($source[1]);
            $grdResults->setData($data);
            $this->addField($grdResults);

            if ( $key < (count($sources)-1) )
            {
                $field = new Separator('<hr>');
                $this->addField($field);
            }
        }

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function accountSchemeConsultation_click($sender = null)
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        $filters = $this->getTypesData();


        $business = new BusinessAccountancyBusDiverseConsultationAcc();

        $businessAccountScheme             = new BusinessAccountancyBusAccountScheme();
        $filters->accountSchemeDescription = $businessAccountScheme->getAccountScheme($filters->accountSchemeId);
        $filters->accountSchemeDescription = $filters->accountSchemeDescription->description;


        $ffield1 = new MLink('lnkNewSearch', '', $MIOLO->getActionURL($module, $action), _M('Nova procura', $module));
        $fields[] = $ffield1;
        $field = new MDiv('divOptions', $fields, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);

        $ffield1 = new MText('titleBalance', '<b>' . _M('Saldos para', $module) . ':</b> ' . $filters->accountSchemeId . ' - ' . $filters->accountSchemeDescription);
        $field = new MDiv('divDescBalance', $ffield1, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);


        list (
        $balanceValue,
        $balanceDate
        ) = $business->getAccountSchemeCurrentBalance($filters);

        $ffield1 = new MText('balance', '<b>' . _M('Saldo aberto em', $module) . ' ' . $balanceDate . ':</b> ' . $balanceValue);
        $field = new MDiv('divBalance', $ffield1, null, 'align=center');
        $this->addField($field);


        $sources = array(
        array(SAGU::getParameter('ACCOUNTANCY', 'INCOME_FORECAST_IDENTIFIER'), _M('Origem', $module) . ': ' . _M('Previsão de lançamento', $module)),
        array(SAGU::getParameter('ACCOUNTANCY', 'ENTRY_IDENTIFIER'),           _M('Origem', $module) . ': ' . _M('Lançamento', $module))
        );

        foreach ( $sources as $key => $source )
        {
            $filters->source = $source[0];
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationAccountScheme', $filters);
            $data = $business->getAccountSchemeBalances($filters);
            $grdResults->setTitle($source[1]);
            $grdResults->setData($data);
            $this->addField($grdResults);

            if ( $key < (count($sources)-1) )
            {
                $field = new Separator('<hr>');
                $this->addField($field);
            }
        }
         

    }


    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function costCenterConsultation_click($sender = null)
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        $filters = $this->getTypesData();

        $business = new BusinessAccountancyBusDiverseConsultationAcc();

        $businessCostCenter             = new BusinessAccountancyBusCostCenter();
        $filters->costCenterDescription = $businessCostCenter->getCostCenter($filters->costCenterId);
        $filters->costCenterDescription = $filters->costCenterDescription->description;

        $ffield1 = new MLink('lnkNewSearch', '', $MIOLO->getActionURL($module, $action), _M('Nova procura', $module));
        $fields[] = $ffield1;
        $field = new MDiv('divOptions', $fields, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);

        $ffield1 = new MText('titleBalance', '<b>' . _M('Saldos para', $module) . ':</b> ' . $filters->costCenterId . ' - ' . $filters->costCenterDescription);
        $field = new MDiv('divDescBalance', $ffield1, null, 'align=center');
        $this->addField($field);


        $sources = array(
        array(SAGU::getParameter('ACCOUNTANCY', 'INCOME_FORECAST_IDENTIFIER'), _M('Origem', $module) . ': ' . _M('Previsão de lançamento', $module)),
        array(SAGU::getParameter('ACCOUNTANCY', 'ENTRY_IDENTIFIER'),           _M('Origem', $module) . ': ' . _M('Lançamento', $module))
        );

        foreach ( $sources as $key => $source )
        {
            $filters->source = $source[0];
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationCostCenter', $filters);
            $data = $business->getCostCenterBalances($filters);
            $grdResults->setTitle($source[1]);
            $grdResults->setData($data);
            $this->addField($grdResults);

            if ( $key < (count($sources)-1) )
            {
                $field = new Separator('<hr>');
                $this->addField($field);
            }
        }


    }


    /**
     * Get the data from form and put on a object
     **/
    public function getTypesData($sender = null)
    {
        $data->personId                 = $this->getFormValue('personId');
        $data->personName               = $this->getFormValue('personName');
        $data->courseId                 = $this->getFormValue('courseId');
        $data->courseName               = $this->getFormValue('courseName');
        $data->courseVersion            = $this->getFormValue('courseVersion');
        $data->unitId                   = $this->getFormValue('unitId');
        $data->accountSchemeId          = $this->getFormValue('accountSchemeId');
        $data->accountSchemeDescription = $this->getFormValue('accountSchemeDescription');
        $data->costCenterId             = $this->getFormValue('costCenterId');
        $data->costCenterDescription    = $this->getFormValue('costCenterDescription');
        return $data;
    }
}
?>
