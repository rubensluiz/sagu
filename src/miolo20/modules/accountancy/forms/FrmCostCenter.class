<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for accCostCenter table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/12/2005
 *
 **/

/**
 * Form to search the accCostCenter table
 */
class FrmCostCenter extends SManagementForm
{
    private $module;

    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        
        parent::__construct( new accCostCenter(), array('costCenterId'), 'BusCostCenter' );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array('update', 'delete')) )
        {
            $costCenterId = MIOLO::_request('costCenterId');

            $business = $this->busObject;
            $data     = $business->getCostCenter($costCenterId);

            $fields[]  = new MHiddenField('costCenterId', $costCenterId);
            $fields[]  = new MTextLabel('costCenterId', $data->costCenterId, _M('Código', $module));
        }
        
        if ( $function == 'insert' )
        {
            $costCenterId = new MTextField('costCenterId', $this->getFormValue('costCenterId', $data->costCenterId), _M('Código', $module), 12);
            $costCenterId->setJsHint(_M('Informe o código do centro de custos', $module));
            $validators[] = new MRegexpValidator('costCenterId', _M('Código', $module), '^[0-9]+(\.[0-9]+)*$', 'required');
            $fields[]     = $costCenterId;

            $this->page->onLoad('document.'.$this->name.'.costCenterId.focus();');
        }
        
        $costCenterDescription = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription', $data->description), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescription->setJsHint(_M('informe a descrição do centro de custos', $module));
        $validators[]          = new MRequiredValidator('costCenterDescription', _M('Descrição do centro de custo', $module), 'required');
        $fields[]              = $costCenterDescription;

//        // Parent cost center lookup
        $parentCCLabel = new MText( 'lblParentCC', _M('Centro de custo pai', $module) . ':' );
        $parentCCLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );

        $parentCC = new MLookupTextField('parentCostCenterId', $this->getFormValue('parentCostCenterId', $data->parentCostCenterId));        
        $ajaxAction = SForm::getAjaxAction('FrmCostCenter::changeParentCostCenter', 'divAtivo', FALSE);
        $parentCC->addAttribute('onBlur', $ajaxAction);
        $parentCC->size = SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE');
        $parentCC->setJsHint(_M('Informe o centro de custo pai', $module));
        $parentCC->related = 'parentCostCenterDescription';
        $parentCC->module = $module;
        $parentCC->item = 'ParentCostCenter';
//        $parentCC->filter = array('courseId' => 'courseId');

        $parentCCDescription = new MTextField('parentCostCenterDescription', $this->getFormValue('parentCostCenterDescription', $data->unitDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $parentCCDescription->setReadOnly(true);        
        $parentCCDescription->setJsHint(_M('Descrição do centro de custo pai', $module));

        $fields[] = new MHContainer('hctParentCC', array($parentCCLabel, $parentCC, $parentCCDescription));
        // End Parent cost center lookup
        
        // Ativo
        if ( strlen($this->getFormValue('parentCostCenterId', $data->parentCostCenterId)) > 0 )
        {
            $label = new MLabel(_M('Ativo:'));
            $selection = new MSelection('active', $this->getFormValue('active', $data->active), NULL, SAGU::listYesNo());
            $fldsAtivo = array($label, $selection);
        }
        else
        {
            $fldsAtivo = array(new MLabel(_M('Ativo:')), new MLabel(_M('<b>Sim.</b>')), new MLabel(_M('Não é possível inativar um centro de custo pai.')));
        }
                
        $divAtivo = new MDiv('divAtivo', $fldsAtivo);
        $this->page->onLoad("document.getElementById('divAtivo').style.marginLeft = '108px';");
        
        $fields[] = new MSeparator();
        $fields[] = $divAtivo;
        $fields[] = new MSeparator();
        //$fields[] = new MSelection('active', $this->getFormValue('active', $data->active), _M('Ativo?', $module), SAGU::listYesNo());
        

        // Aceita solicitacao pgto
        $fields[] = new MSelection('allowPaymentRequest', $this->getFormValue('allowPaymentRequest', $data->allowPaymentRequest), _M('Aceita solicitação de pagamento', $module), SAGU::listYesNo(), null, _M('Só irá salvar como \'Sim\', caso um centro de custo pai seja informado.', $module));
        
        // Chefe
        $personId = new SLookupContainer('personIdOwner', $this->getFormValue('personIdOwner', $data->personIdOwner), array(
            'module' => 'basic',
            'item' => 'PhysicalPersonEmployee',
            'label' => _M('Chefe do centro', $module),
//            'filter' => array('personIdOwner' => 'personIdOwner'),
            'hint' => _M('Informe o código do funcionário', $module),
        ));
        $fields[] = $personId;
        
        $fields[] = new Separator('');
        
        parent::defineFields( $fields, $validators, $data );

        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
        if ( $function == 'insert' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        }
        elseif ( $function == 'delete' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }
    
    public function changeParentCostCenter($args)
    {
        $busCostCenter = new BusinessAccountancyBusCostCenter();
        $parentCostCenter = $busCostCenter->getCostCenter($args->parentCostCenterId);
        
        $fields = array();
        
        if ( strlen($parentCostCenter->costCenterId) > 0 )
        {
            
            $label = new MLabel(_M('Ativo:'));
            $selection = new MSelection('active', DB_TRUE, NULL, SAGU::listYesNo());
            $fields[] = $cont = new MHContainer('fldAtivo', array($label, $selection));
            //$cont->addAttribute('style', 'margin-left:108px;');
        }
        else
        {
            $fields[] = $cont = new MHContainer('fldAtivo', array(new MLabel(_M('Ativo:')), new MLabel(_M('<b>Sim.</b>')), new MLabel(_M('Não é possível inativar um centro de custo pai.'))));
            //$cont->addAttribute('style', 'margin-left:108px;');
        }
        
        return $fields;
    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
        
        $this->description->value = $this->getFormValue('descriptionS') ? $this->getFormValue('costCenterDescriptionS') : '';
    }
    
        /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'         => 'tbBtnDelete_confirm',
                        'function'        => 'delete',
                        'costCenterId'    => MIOLO::_request('costCenterId')
                       );
                       
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão',$module);
        
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAccountancyBusCostCenter();
        try
        {
            $ok = $business->deleteCostCenter(MIOLO::_request('costCenterId'));
            

            if ( $ok )
            {
                $msg  = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Informação',$module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $msg  = _M('Erro executando a operação requerida',$module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
        catch ( Exception $e )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $MIOLO->error($e->getMessage(), $goto);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $data->active = $_REQUEST['active'];
        $business = new BusinessAccountancyBusCostCenter();
        
        if ( strlen($data->parentCostCenterId) == 0 )
        {
            $data->allowPaymentRequest = DB_FALSE;
            $data->active = DB_TRUE;
        }

        if ( $data->allowPaymentRequest == DB_TRUE && strlen($data->personIdOwner) == 0 )
        {
            $this->AddError(_M('Deve ser selecionado um chefe do centro de custo.', $module));
            return;
        }
        
        $ok = false;
        if ( $function == 'update' )
        {
            try
            {
                $ok  = $business->updateCostCenter($data);
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
            }
            catch(Exception $e)
            {
                $this->AddError($e->getMessage());
                return;
            }
        }
        else
        {
            $dataCostCenter = $business->getCostCenter($data->costCenterId);
            if (strlen($dataCostCenter->costCenterId)>0)
            {
                $opts    = array('costCenterId'=>$data->costCenterId, 'function'=>'update');
                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $opts    = array('costCenterIdS'=>$data->costCenterId, 'event'=>'btnSearch_click');
                $gotoNo  = $MIOLO->getActionURL($module, $action, null, $opts);
                $msg     = _M('O centro de custos de código @1 já existe. Você gostaria de editar este centro de custos?', $module, $data->costCenterId);
                $MIOLO->question($msg, $gotoYes, $gotoNo);
            }
            else
            {
                try
                {
                    $ok  = $business->insertCostCenter($data);
                    $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
                }
                catch(Exception $e)
                {
                    $this->AddError($e->getMessage());
                    return;
                }
            }
        }

        if ( $ok )
        {
            $opts = array('costCenterIdS'=>$data->costCenterId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Questão',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Erro executando a operação requerida', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
    
    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
            $data->description = $this->costCenterDescription->value;
        }
        
        return $data;
    }

}

?>
