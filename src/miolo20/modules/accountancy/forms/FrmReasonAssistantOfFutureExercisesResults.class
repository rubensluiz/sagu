<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for accAccountancyBalance table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/12/2005
 *
 **/

/**
 * Form to search the accAccountancyBalance table
 */
class FrmReasonAssistantOfFutureExercisesResults extends SForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct( _M('Gerar razão auxiliar de resultados de exercícios futuros', $module), NULL, NULL );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        // Begin page
        $beginPage = new MTextField('beginPage', is_null($this->getFormValue('beginPage', $data->beginPage)) ? 1 : $this->getFormValue('beginPage', $data->beginPage), _M('Página inicial', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $beginPage->setJsHint(_M('Informe a página inicial do documento', $module));
        $fields[] = $beginPage;
        $validators[] = new MRangeValidator('beginPage', '', '1', '9999999999999', 'i', 'REQUIRED');
        
        // End page
        $endPage   = new MTextField('endPage', $this->getFormValue('endPage', $data->endPage), _M('Página final', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $endPage->setJsHint(_M('Informe a página final do documento', $module));
        $fields[] = $endPage;
        $validators[] = new MRangeValidator('endPage', '', '1', '9999999999999', 'i', 'REQUIRED');
        
        // emission date
        $emissionDateLabel = new MText('emissionDateLabel', _M('Data de emissão', $module).':');
        $emissionDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emissionDateLabel->setClass('m-caption m-caption-required');
        $emissionDate      = new MCalendarField('emissionDate', $this->getFormValue('emissionDate',$data->emissionDate) ? $this->getFormValue('emissionDate',$data->emissionDate) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão',$module));
        $validators[] = new MDATEDMYValidator('emissionDate', _M('Data de emissão', $module), 'required');
        $fields[] = new MHContainer('hctEmissionDate', array($emissionDateLabel, $emissionDate));

        // beginDate
        $beginDateLabel = new MText('beginDateLabel', _M('Data inicial', $module).':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDateLabel->setClass('m-caption m-caption-required');        
        $beginDate      = new MCalendarField('beginDate', $this->getFormValue('beginDate',$data->beginDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial',$module));
        $validators[] = new MDATEDMYValidator('beginDate', _M('Data inicial', $module), 'required');
        $fields[] = new MHContainer('hctBeginDate', array($beginDateLabel, $beginDate));
        
        // EndDate
        $endDateLabel = new MText('endDateLabel', _M('Data final', $module).':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDateLabel->setClass('m-caption m-caption-required');        
        $endDate      = new MCalendarField('endDate', $this->getFormValue('endDate',$data->endDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data final',$module));
        $validators[] = new MDATEDMYValidator('endDate', _M('Data final', $module), 'required');
        $fields[] = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
        
        //begin account scheme
        $beginAccountSchemeLabel = new MText('beginAccountSchemeLabel', _M('Plano de contas inicial', $module) . ':');
        $beginAccountSchemeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $beginAccountSchemeId = new MLookupTextField('beginAccountSchemeId', $this->getFormValue('beginAccountSchemeId', $data->beginAccountSchemeId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null,
            'beginAccountSchemeName',
            'accountancy', 'AccountScheme', null, null, true);
        $beginAccountSchemeId->setJsHint(_M('Infome o código do plano de contas', $module));

        $beginAccountSchemeName = new MTextField('beginAccountSchemeName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $beginAccountSchemeName->setReadOnly(true);
        $beginAccountSchemeName->setJsHint(_M('Nome do plano de contas', $module));

        $hctbeginAccountScheme  = new MHContainer('hctbeginAccountScheme', array($beginAccountSchemeLabel, $beginAccountSchemeId, $beginAccountSchemeName));
        $hctbeginAccountScheme->setShowLabel(true);
        $fields[] = $hctbeginAccountScheme;
        
        //end Course
        $endAccountSchemeLabel = new MText('endAccountSchemeLabel', _M('Plano de contas final', $module) . ':');
        $endAccountSchemeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $endAccountSchemeId = new MLookupTextField('endAccountSchemeId', $this->getFormValue('endAccountSchemeId', $data->endAccountSchemeId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null,
            'endAccountSchemeName',
            'accountancy', 'AccountScheme', null, null, true);
        $endAccountSchemeId->setJsHint(_M('Informe o código do plano de contas final',$module));

        $endAccountSchemeName = new MTextField('endAccountSchemeName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $endAccountSchemeName->setReadOnly(true);
        $endAccountSchemeName->setJsHint(_M('Nome do plano de contas', $module));

        $hctBeginAccountScheme  = new MHContainer('hctEndAccountScheme', array($endAccountSchemeLabel, $endAccountSchemeId, $endAccountSchemeName));
        $hctBeginAccountScheme->setShowLabel(true);
        $fields[] = $hctBeginAccountScheme;

        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data->beginPage            = $this->getFormValue('beginPage');
        $data->endPage              = $this->getFormValue('endPage');
        $data->emissionDate         = $this->getFormValue('emissionDate');
        $data->beginDate            = $this->getFormValue('beginDate');
        $data->endDate              = $this->getFormValue('endDate');
        $data->beginCourse          = $this->getFormValue('beginCourseId');
        $data->endCourse            = $this->getFormValue('endCourseId');
        $data->beginAccountSchemeId = $this->getFormValue('beginAccountSchemeId');
        $data->endAccountSchemeId   = $this->getFormValue('endAccountSchemeId');

        $MIOLO->getClass($module, 'RptReasonAssistantOfFutureExercisesResults');
        $report = new RptReasonAssistantOfFutureExercisesResults($data);
    }
}
?>
