<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for person balances table
 
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 28/09/2006
 *
 **/

/**
 * Form to search the accAccountancyBalance table
 */
class FrmPersonBalance extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;
        parent::__construct( _M('Saldos armazenados das pessoas', $module), null, null );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO           = MIOLO::getInstance();
        $module          = MIOLO::getCurrentModule();
        $action          = MIOLO::getCurrentAction();
        $source          = MIOLO::_request('source');
        $balanceDate     = MIOLO::_request('balanceDate');
        $accountSchemeId = MIOLO::_request('accountSchemeId');
        $dateType        = MIOLO::_request('dateType');
        $type            = MIOLO::_request('type');
        $courseId        = MIOLO::_request('courseId');
        $unitId          = MIOLO::_request('unitId');
        $personBalance   = MIOLO::_request('personBalance');
        $MIOLO->uses('classes/finance.class', 'finance');

        //inclui todas as grids
        $business = new BusinessAccountancyBusPersonBalance();
        $personBalance = $business->getPersonBalance($balanceDate, $accountSchemeId, $source, $courseId, $unitId);

        if ( count($personBalance) > 0 )
        {

            foreach ( $personBalance as $row )
            {
                list (
                        $personId,
                        $personName,
                        $value
                     ) = $row;
                $matrix[] = array($personId, $personName, FINANCE::formatFinanceReportNumber($value));
            }

            $columns[] = "<div style=\"text-align: center;\">" . _M('Código', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Pessoa', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Valor', $module) . "</div>";

            $tableRaw = new MTableRaw(null, $matrix, $columns);
            $tableRaw->setAlternate(true);
            $tableRaw->addStyle('width', '100%');

            $tableRaw->setCellAttribute(0, 0, 'width', '20%');
            $tableRaw->setCellAttribute(0, 1, 'width', '60%');
            $tableRaw->setCellAttribute(0, 2, 'width', '20%');

            $fields[] = $tableRaw;

        }

        $valueTotal = $business->getTotalPersonBalance($balanceDate, $accountSchemeId, $source, $courseId, $unitId);

        $fields[]   = new Separator();
        $title      = new MDiv('div1', '<b>' . _M('Saldo: ', $module) . '<i>' . FINANCE::formatFinanceReportNumber($valueTotal) . '</i></b>', null, 'align=left');
        $title->addStyle('width', '100%');
        $tableRaw   = new MTableRaw($title, null, array(array()));
        $fields[]   = $tableRaw;

        $fields[]   = new Separator();
        $btnBack    = new MButton('btnBack', _M('Voltar', $module));
        $divButtons = new MDiv('divButtons', $btnBack, null, 'align=center');
        $divButtons->addStyle('text-align', 'center');
        $fields[]   = $divButtons;
        $fields[]   = new Separator();

        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators, 'toolbar' => false ) );
    }

    /**
     * Event triggered when user chooses button Back
     **/
    public function btnBack_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $opts['source']          = MIOLO::_request('source');
        $opts['balanceDate']     = MIOLO::_request('balanceDate');
        $opts['accountSchemeId'] = MIOLO::_request('accountSchemeId');
        $opts['dateType']        = MIOLO::_request('dateType');
        $opts['type']            = MIOLO::_request('type');
        $opts['personBalance']   = MIOLO::_request('personBalance');
        $opts['courseId']        = MIOLO::_request('courseId');
        $opts['unitId']          = MIOLO::_request('unitId');

        $this->page->redirect($MIOLO->getActionURL($module, 'main:report:storedBalances', null, $opts));
    }

}

?>
