<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for accAccountScheme table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 26/12/2005
 *
 **/

/**
 * Form to search the accAccountScheme table
 */
class FrmAccountSchemeSearch extends SSearchForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(_M('Localizar', 'basic'), new AccAccountScheme(), array('accountSchemeIdS'), 'BusAccountScheme');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = new BusinessAccountancyBusAccountScheme();
        
        //Field account scheme
        $accountSchemeIdS = new MTextField('accountSchemeIdS', $this->getFormValue('accountSchemeIdS', $this->AccountSchemeSearch->accountSchemeIdS), _M('Código', $module), 12);
        $accountSchemeIdS->setJsHint(_M('Informe o código do plano de contas', $module));
        $fields[] = $accountSchemeIdS;
        $validators[] = new MRegexpValidator('accountSchemeIdS', _M('Código', $module), '^[0-9]+(\.[0-9]+)*$');
        
        //Field account scheme description
        $accountSchemeDescriptionS = new MTextField('descriptionS', $this->getFormValue('descriptionS', $this->AccountSchemeSearch->accountSchemeDescriptionS), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescriptionS->setJsHint(_M('Informe a descrição do plano de contas', $module));
        $fields[] = $accountSchemeDescriptionS;
        
        //Field account reduced
        $accountReducedS = new MTextField('accountReducedS', $this->getFormValue('accountReducedS', $this->AccountSchemeSearch->accountReducedS), _M('Conta reduzida', $module), 12);
        $accountReducedS->setJsHint(_M('Informe a conta reduzida', $module));
        $fields[] = $accountReducedS;
        $validators[] = new MIntegerValidator('accountReducedS', _M('Conta reduzida', $module), 'optional');
        
        //Type operation
        $typeOption['label'] = new MText('incomeOrExpenseOptionLabelS', _M('Tipo', $module) . ':');
        $typeOption['label']->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $typeOption['selection'] = new MSelection('incomeOrExpenseS', $this->GetFormValue('incomeOrExpenseS', $this->AccountSchemeSearch->incomeOrExpenseS),'', $business->listTypeIncomeOrExpense(0));
        
        $hctTypeOption = new MHContainer('hctTypeOptionS', $typeOption);
        $fields[] = $hctTypeOption;
        
        //Field account scheme
        $accountSchemeLabel = new MText('accountSchemeLabelS', _M('Plano de contas', $module) . ':');
        $accountSchemeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountSchemeIdLookup = new MLookupTextField('parentAccountSchemeIdS', $this->GetFormValue('parentAccountSchemeIdS', $this->AccountSchemeSearch->parentAccountSchemeIdS), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'accountSchemeDescriptionLookupS', 'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeIdLookup->setJsHint(_M('Informe o código do plano de contas', $module));
        $validators[] = new MRegexpValidator('parentAccountSchemeIdS', _M('Plano de contas', $module), '^[0-9]+(\.[0-9]+)*$');
        $accountSchemeDescription = new MTextField('accountSchemeDescriptionLookupS', $this->accountSchemeDescriptionLookupS->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescription->setReadOnly(true);
        $accountSchemeDescription->setJsHint(_M('Descrição do plano de contas', $module));
        $hctAccountScheme = new MHContainer('hctAccountSchemeS', array($accountSchemeLabel, $accountSchemeIdLookup, $accountSchemeDescription));
        $hctAccountScheme->setShowLabel(true);
        $fields[] = $hctAccountScheme;
        
        parent::defineFields($fields, $module, 'GrdAccountSchemeSearch', $validators);
    }
}

?>
