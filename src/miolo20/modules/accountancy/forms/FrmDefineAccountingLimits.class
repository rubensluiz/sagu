<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finoperation table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 05/10/2006
 *
 **/

/**
 * Form to search the accDefineAccountingLimits table
 */
class FrmDefineAccountingLimits extends SForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;
        $this->home   = $data->home;

        parent::__construct( _M('Definir limites contábeis', $module), new AccAccountingLimit(), array('accountingLimitId') );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        // Record date
        $recordDateLabel = new MText('recordDateLabel', _M('Data limite', $module).':');
        $recordDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $recordDateLabel->setClass('m-caption m-caption-required');
        $recordDate      = new MCalendarField('recordDate', $this->getFormValue('recordDate',date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'))), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $recordDate->setJsHint(_M('Informe a data limite',$module));
        $validators[] = new MDATEDMYValidator('recordDate', '', 'required');
        $fields[] = new MHContainer('hctRecordDate', array($recordDateLabel, $recordDate));
        
        // Accounting user
        $accountingUserLabel = new MText('accountingUserLabel', _M('Definido por', $module).':');
        $accountingUserLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountingUserLabel->setClass('m-caption m-caption-required');
        $accountingUser = new MTextField('accountingUser', $this->getFormValue('accountingUser',$MIOLO->getLogin()->id), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountingUser->setJsHint(_M('Informe seu nome',$module));
        $validators[] = new MRequiredValidator('accountingUser', '', 'required');
        $fields[] = new MHContainer('hctAccountingUser', array($accountingUserLabel, $accountingUser));
        
        $button   = new MButton('btnInclude', _M('Incluir', $module));
        $fields[] = new MDiv('divButton', $button, null);
        
        $fields[] = new MSeparator('<hr>');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDefineAccountingLimits');
        $business = new BusinessAccountancyBusDefineAccountingLimits();
        $data = $business->getDefineAccountingLimits();
        $grdResults->setData($data);
        $this->addField($grdResults);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function btnInclude_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data     = $this->getTypesData();
        $business = new BusinessAccountancyBusDefineAccountingLimits();
        
        $ok  = $business->insertAccountingLimit($data);
        $msg = _M('Registro inserido com sucesso', $module);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);

            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Erro executando a operação requerida', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $opts   = array('event'                => 'tbBtnDelete_confirm',
                        'function'             => 'delete',
                        'accountingLimitId'    => MIOLO::_request('accountingLimitId')
                       );
                       
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAccountancyBusDefineAccountingLimits();
        $ok = $business->deleteAccountingLimit(MIOLO::_request('accountingLimitId'));

        if ( $ok )
        {
            $msg  = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Erro executando a operação requerida',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }

        return $data;
    }


}

?>
