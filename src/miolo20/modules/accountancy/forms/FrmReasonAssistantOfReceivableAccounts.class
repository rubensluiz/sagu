<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for accAccountancyBalance table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/12/2005
 *
 **/

/**
 * Form to search the accAccountancyBalance table
 */
class FrmReasonAssistantOfReceivableAccounts extends SForm
{
    private $home;
    
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        
        $this->home   = $data->home;
        
        parent::__construct( _M('Gerar razão auxiliar de contas a receber', $module), NULL, NULL );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
  
        // beginDate
        $beginDateLabel = new MText('beginDateLabel', _M('Data inicial', $module).':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDateLabel->setClass('m-caption m-caption-required');        
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate',$data->beginDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial',$module));
        $validators[] = new MDATEDMYValidator('beginDate', _M('Data inicial', $module), 'required');
        $fields[] = new MHContainer('hctBeginDate', array($beginDateLabel, $beginDate));
        
        // EndDate
        $endDateLabel = new MText('endDateLabel', _M('Data final', $module).':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDateLabel->setClass('m-caption m-caption-required');        
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate',$data->endDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data final',$module));
        $validators[] = new MDATEDMYValidator('endDate', _M('Data final', $module), 'required');
        $fields[] = new MHContainer('hctEndDate', array($endDateLabel, $endDate));

        //Pessoa
        $personLabel = new MLabel(_M("Pessoa"));
        $personLabel->setClass('m-caption');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId = new SLookupContainer('personId', $this->getFormValue('personId'), array('item' => 'PhysicalPerson', 'module' => 'basic', 'hint' => _M("Caso queira filtrar uma única pessoa no relatório, selecione uma, senão deixe em branco.")));
        $validators[] = new MIntegerValidator('personId', _M("Pessoa"));
        $fields[] = new MHContainer('hctPerson', array($personLabel, $personId));
        
        //Field report format
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : SReport::FILETYPE_PDF, _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
                
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $beginDate = MIOLO::_REQUEST('beginDate');
        $endDate = MIOLO::_REQUEST('endDate');
        $personId = MIOLO::_REQUEST('personId');
        
        if ( !strlen($beginDate) > 0 || !strlen($endDate) > 0 )
        {
            $this->AddAlert(_M('As datas iniciais e finais devem ser informadas', $module));
            return;
        }
        
        //Parameters of the report
        $parameters['dataInicial'] = $beginDate;
        $parameters['dataFinal'] = $endDate;
        $parameters['personId'] = strlen($personId) > 0 ? $personId : NULL;
        
        $report = new SReport();
        $report->setReportName('razaoAuxiliarContasAReceber');
        $report->setFileType( MIOLO::_REQUEST('reportFormat') );
        $report->setParameters($parameters);
        $result = $report->generate();
        
        if ( !strlen($result) > 0 )
        {
            $this->addError(_M('Não foi possível encontrar dados com os filtros informados.', $module));
        }
    }
}
?>
