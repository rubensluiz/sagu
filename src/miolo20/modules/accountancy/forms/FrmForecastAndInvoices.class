<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for stored balances table
 
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 29/09/2006
 *
 **/

/**
 * Form to search the accountancy and finance table
 */

class FrmForecastAndInvoices extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;
        $initialDate = MIOLO::_request('initialDate');
        $limitDate   = MIOLO::_request('limitDate');
        if ( MIOLO::_request('type') == 'ALL' )
        {
            parent::__construct( _M('Relatório de previsões e lançamentos', $module) . ' - ' . _M('de', $module) . ' ' . $initialDate . ' ' . _M('até', $module) . ' ' . $limitDate, null, null );
        }
        else
        {
            parent::__construct( _M('Relatório de previsões', $module) . ' - ' . _M('de', $module) . ' ' . $initialDate . ' ' . _M('até', $module) . ' ' . $limitDate, null, null );
        }
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();
        $action      = MIOLO::getCurrentAction();
        $initialDate = MIOLO::_request('initialDate');
        $limitDate   = MIOLO::_request('limitDate');
        $type        = MIOLO::_request('type');
        $MIOLO->uses('classes/finance.class', 'finance');
        
        $business = new BusinessAccountancyBusAccountBalance();
        if ( strtoupper($type) == 'ALL' )
        {
            $result = $business->getForecastsAndInvoices($initialDate, $limitDate);
        }
        else
        {
            $result = $business->getForecasts($initialDate, $limitDate);
        }

        if ( count($result) > 0 )
        {
            $accountSchemeIdOld          = $result[0][0];
            $accountSchemeDescriptionOld = $result[0][5];
            foreach ( $result as $row )
            {
                list (
                        $accountSchemeId,
                        $courseId,
                        $courseName,
                        $unitId,
                        $source,
                        $accountSchemeDescription,
                        $value
                     ) = $row;

                if ( $accountSchemeId != $accountSchemeIdOld )
                {
                    if ( strtoupper($type) == 'ALL' )
                    {
                        //$valueTotal = $business->getForecastsAndInvoicesBalance($initialDate, $limitDate, $accountSchemeIdOld);
                    }
                    else
                    {
                        //$valueTotal = $business->getForecastsBalance($initialDate, $limitDate, $accountSchemeIdOld);
                    }
                    $matrix[]   = array('<b>' . _M('Total', $module) . ': </b><i>' . FINANCE::formatFinanceReportNumber(str_replace(',', '.', $valueTotal)) . '</i>');
                    $title = new MDiv('div1', FINANCE::formatAccountSchemeId($accountSchemeIdOld) . ' - ' . $accountSchemeDescriptionOld, null, 'align=left');
                    $title->addStyle('width', '100%');

                    $tableRaw = new MTableRaw($title, $matrix, $columns);
                    $tableRaw->setAlternate(true);
                    $tableRaw->addStyle('width', '100%');

                    $tableRaw->setCellAttribute(0, 0, 'width', '20%');
                    $tableRaw->setCellAttribute(0, 1, 'width', '60%');
                    $tableRaw->setCellAttribute(0, 2, 'width', '20%');

                    $fields[] = $tableRaw;

                    unset($valueTotal, $matrix);
                    $accountSchemeIdOld          = $accountSchemeId;
                    $accountSchemeDescriptionOld = $accountSchemeDescription;
                }

                $valueTotal += $value;
                $matrix[] = array($courseId, $source . ' : ' . $courseName, FINANCE::formatFinanceReportNumber($value));
            }

        }

        if ( strtoupper($type) == 'ALL' )
        {
            $valueTotal = $business->getForecastsAndInvoicesBalance($initialDate, $limitDate, $accountSchemeIdOld);
        }
        else
        {
            $valueTotal = $business->getForecastsBalance($initialDate, $limitDate, $accountSchemeIdOld);
        }
        $matrix[]   = array('<b>' . _M('Total', $module) . ': </b><i>' . FINANCE::formatFinanceReportNumber($valueTotal) . '</i>');
        $title = new MDiv('div1', FINANCE::formatAccountSchemeId($accountSchemeIdOld) . ' - ' . $accountSchemeDescriptionOld, null, 'align=left');
        $title->addStyle('width', '100%');

        $tableRaw = new MTableRaw($title, $matrix, $columns);
        $tableRaw->setAlternate(true);
        $tableRaw->addStyle('width', '100%');

        $tableRaw->setCellAttribute(0, 0, 'width', '20%');
        $tableRaw->setCellAttribute(0, 1, 'width', '60%');
        $tableRaw->setCellAttribute(0, 2, 'width', '20%');

        $fields[] = $tableRaw;

        if ( strtoupper($type) == 'ALL' )
        {
                          $valueTotal = $business->getForecastsAndInvoicesBalance($initialDate, $limitDate);
       }
        else
        {
            $valueTotal = $business->getForecastsBalance($initialDate, $limitDate);
        }
        $fields[]   = new Separator();
        $title      = new MDiv('div1', '<b>' . _M('Saldo: ', $module) . '<i>' . FINANCE::formatFinanceReportNumber($valueTotal) . '</i></b>', null, 'align=left');
        $title->addStyle('width', '100%');
        $tableRaw   = new MTableRaw($title, null, array(array()));
        $fields[]   = $tableRaw;

        $fields[]   = new Separator();
        $btnBack    = new MButton('btnBack', _M('Voltar', $module));
        $divButtons = new MDiv('divButtons', $btnBack, null, 'align=center');
        $divButtons->addStyle('text-align', 'center');
        $fields[]   = $divButtons;
        $fields[]   = new Separator();

        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators, 'toolbar' => false ) );
    }

    /**
     * Event triggered when user chooses button Back
     **/
    public function btnBack_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        if ( MIOLO::_request('type') == 'ALL' )
        {
            $opts['initialDate2'] = MIOLO::_request('initialDate');
            $opts['limitDate2']   = MIOLO::_request('limitDate');
        }
        else
        {
            $opts['initialDate3'] = MIOLO::_request('initialDate');
            $opts['limitDate3']   = MIOLO::_request('limitDate');
        }

        $this->page->redirect($MIOLO->getActionURL($module, 'main:process:accountancyBalance', null, $opts));
    }

}

?>
