<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for accCourseAccount table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/12/2005
 *
 * */

/**
 * Form to search the accCourseAccount table
 */
class FrmCourseAccount extends SManagementForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(new AccCourseAccount(), array( 'courseId', 'courseVersion', 'unitId' ), 'BusCourseAccount');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function, array( 'update', 'delete' )) )
        {
            $data->courseId = MIOLO::_REQUEST('courseId');
            $data->courseVersion = MIOLO::_REQUEST('courseVersion');
            $data->unitId = MIOLO::_REQUEST('unitId');

            $business = new BusinessAccountancyBusCourseAccount();
            $data = $business->getCourseAccount($data);
        }

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );

        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        if ( $function == 'update' )
        {
            $courseOccurrenceLookup->setReadOnly(true);
        }

        //Field account scheme
        $accountSchemeIdLabel = new Mtext('accountSchemeIdLabel', _M('Plano de contas', $module) . ':');
        $accountSchemeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountSchemeId = new MLookupTextField('accountSchemeId', $this->getFormValue('accountSchemeId', $data->accountSchemeId), '', 12, null, null, 'accountSchemeDescription', $module, 'AccountScheme', null, null, true);
        $accountSchemeId->setJsHint(_M('Informe o código do plano de contas', $module));
        $validators[] = new MRegexpValidator('accountSchemeId', _M('Plano de contas', $module), '^[0-9]+(\.[0-9]+)*$', 'optional');
        $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription', $data->accountSchemeDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescription->setJsHint(_M('Descrição do plano de contas', $module));
        $accountSchemeDescription->setReadOnly(true);
        $hctAccountScheme = new MHContainer('hctAccountScheme', array( $accountSchemeIdLabel, $accountSchemeId, $accountSchemeDescription ));
        $hctAccountScheme->setShowLabel(true);
        $fields[] = $hctAccountScheme;

        //Field cost center
        $costCenterIdLabel = new Mtext('costCenterIdLabel', _M('Centro de custo', $module) . ':');
        $costCenterIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $costCenterIdLabel->setClass('m-caption m-caption-required');
        $costCenterId = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId', $data->costCenterId), '', 12, null, null, 'costCenterDescription', $module, 'CostCenter', null, null, true);
        $costCenterId->setJsHint(_M('Informe o código do centro de custos', $module));
        $validators[] = new MRegexpValidator('costCenterId', _M('Centro de custo', $module), '^[0-9]+(\.[0-9]+)*$', 'required');
        $costCenterDescription = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription', $data->costCenterDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescription->setReadOnly(true);
        $hctCostCenter = new MHContainer('hctCostCenter', array( $costCenterIdLabel, $costCenterId, $costCenterDescription ));
        $hctCostCenter->setShowLabel(true);
        $fields[] = $hctCostCenter;

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     * */
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $business = new BusinessAccountancyBusCourseAccount();

        if ( $function == 'update' )
        {
            $ok = $business->updateCourseAccount($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
        }
        else
        {
            $dt->courseId = $data->courseId;
            $dt->courseVersion = $data->courseVersion;
            $dt->unitId = $data->unitId;
            $dataCourseAccount = $business->getCourseAccount($dt);

            if ( (strlen($dataCourseAccount->courseId) > 0) && (strlen($dataCourseAccount->courseVersion) > 0) && (strlen($dataCourseAccount->unitId) > 0) )
            {
                $opts = array( 'courseId' => $dataCourseAccount->courseId, 'courseVersion' => $dataCourseAccount->courseVersion, 'unitId' => $dataCourseAccount->unitId, 'function' => 'update' );
                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $opts = array( 'courseIdS' => $dataCourseAccount->courseId, 'courseVersionS' => $dataCourseAccount->courseVersion, 'unitIdS' => $dataCourseAccount->unitId, 'event' => 'btnSearch_click' );
                $gotoNo = $MIOLO->getActionURL($module, $action, null, $opts);
                $msg = _M('Este plano de contas para o curso já existe. Você gostaria de editar este plano de contas para o curso?', $module);
                $MIOLO->question($msg, $gotoYes, $gotoNo);
            }
            else
            {
                $ok = $business->insertCourseAccount($data);
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
            }
        }

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action, null, null);
            if ( $function == 'update' )
            {
                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $goto_ = $this->getFormValue('goto');
                if ( strlen($goto_) > 0 )
                {
                    $MIOLO->page->addScript(SAGU::ABSOLUTE_URL_JS_FILES . 'sagu.js');
                    $MIOLO->information(_M('Registro inserido', $module), $goto_);
                }
                else
                {
                    $opts = array( 'event' => 'tbBtnNew_click',
                        'function' => 'insert' );

                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Questão', $module);
                    $MIOLO->question($msg, $gotoYes, $goto);
                }
            }
        }
        else
        {
            $msg = _M('Erro executando a operação requerida', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }

    public function getTypesData()
    {
        $data = new accCourseAccount();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }

            $data->description = $this->courseAccountDescription->value;
        }

        $data->courseId = $this->getFormValue('courseId');

        return $data;
    }
}

?>
