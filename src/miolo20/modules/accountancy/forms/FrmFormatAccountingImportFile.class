<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the actions for FormatAccountingImportFile
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 04/10/2006
 *
 **/

/**
 * Form to search the accFormatAccountingImportFile table
 */
class FrmFormatAccountingImportFile extends SForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;
        $this->home   = $data->home;

        parent::__construct( _M('Formatar arquivo de importação para o Siga', $module), NULL, NULL );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        if ( ! $this->page->isPostBack() )
        {
            $flds[]   = new MText('importLabel', _M('Arquivo de origem', $module) . ':');

            $flds[]   = new MFileField('importFile', $this->getFormValue('importFile', $data->importFile), '');

            $btn1[]   = new MButton('btnValidate', _M('Validar', $module));
            $div1     = new MDiv('div1', $btn1, null);
            $flds[]   = $div1;
            
            $fields[] = new MHContainer('hctValidate', $flds);

            $fields[] = new MSeparator('');
        }
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);                
    }

    /**
     * Event triggered when user chooses Validate from the toolbar
     **/
    public function btnValidate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        try
        {
            if ($_FILES["importFile"]["error"] === 0)
            {
                $data->uploadFileName = $_FILES["importFile"]["name"];
                $data->contentType    = $_FILES["importFile"]["type"];
                $data->size           = $_FILES["importFile"]["size"];
                $tempFile             = $_FILES["importFile"]["tmp_name"];

                $businessFile = new BusinessBasicBusFile();
                $businessFile->insertFile($data, $tempFile);

                $args = array('event'=>'process_click',
                              'fileId'=>$dataFile->fileId
                             );

                $goProcessUrl = $MIOLO->getActionURL($module, $action, '', $args);
                $MIOLO->Information(_M('Arquivo importado com sucesso. Por favor, clique no botão "OK" para continuar o processamento', $module), $goProcessUrl);
            }
            else
            {
                throw new Exception(_M('Alguns problemas ocorreram atualizando o arquivo. Por favor, tente novamente', $module));
            }
        }
        catch ( Exception $e )
        {
            $MIOLO->information($e->getMessage());
        }
    }

   /**
     * Event triggered when user set new from the toolbar
     */
    public function process_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data->fileId        = MIOLO::_request('fileId');

        $data = $this->getFileContent($data->fileId);        
        if (strlen($data)>0)
        {
            $data = explode("\n", $data);
            $count = count($data);

            $line     = 0;
            $document = 0;
           
            for ( $i=0; $i<($count-1); $i++ )
            {

                list (
                        $integrationData->externalEntryId,
                        $integrationData->operationTypeId,
                        $integrationData->debitAccount,
                        $integrationData->creditAccount,
                        $integrationData->operationDescription,
                        $integrationData->value,
                        $integrationData->debitCostCenter,
                        $integrationData->creditCostCenter,
                        $integrationData->debitItem,
                        $integrationData->creditItem,
                        $integrationData->other
                       ) = explode(';', $data[$i]);
                       
                $line ++;
                if ( $line == 100 )
                {
                  $line = 1;
                  $documento++;
                }
                
                $content[] = ACCOUNTING::writeToSigaFile(
                                                            $integrationData->externalEntryId,
                                                            $integrationData->operationTypeId,
                                                            $integrationData->debitAccount,
                                                            $integrationData->creditAccount,
                                                            $integrationData->operationDescription,
                                                            $integrationData->value,
                                                            $integrationData->debitCostCenter,
                                                            $integrationData->creditCostCenter,
                                                            $lot,
                                                            $document,
                                                            $line,
                                                            $integrationData->debitItem,
                                                            $integrationData->creditItem
                                                          );
                $tableContent[] = array(
                                            $integrationData->externalEntryId,
                                            $integrationData->operationTypeId,
                                            $integrationData->debitAccount,
                                            $integrationData->creditAccount,
                                            $integrationData->operationDescription,
                                            $integrationData->value,
                                            $integrationData->debitCostCenter,
                                            $integrationData->creditCostCenter,
                                            $integrationData->debitItem,
                                            $integrationData->creditItem,
                                            $integrationData->other
                                        );
            }
            
            $table = new MTableRaw('', $tableContent);
            $table->setAlternate(true);

            $fields[] = $table;
            $fields[] = new MSeparator();


            if (is_array($content))
            {
                $fileContent = implode(chr(13) . chr(10), $content);
                $fileContent.= chr(13) . chr(10);
            }

            $hiddenData = new MHiddenField('hiddenData', urlencode(serialize($fileContent)));
            $fields[] = $hiddenData;
            
            $btn2[]   = new MButton('btnGenerate', _M('Gerar', $module) . ' accounting-' . str_replace('/', '', date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'))) . '.txt');
            $div2     = new MDiv('div2', $btn2, null, 'align=center');
            $div2->width = '98%';
            $fields[]   = $div2; 
            
            $this->setFields($fields);
            
        }
        else
        {
            $goProcessUrl = $MIOLO->getActionURL($module, $action, '', null);
            $MIOLO->Error(_M('O arquivo está vazio', $module), $goProcessUrl);
        }
    }

   /**
     * Event triggered when user set new from the toolbar
     */
    public function btnGenerate_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $fileContent = unserialize(urldecode(stripslashes($this->getFormValue('hiddenData'))));
        
        SAGU::returnAsFile('accounting-' . str_replace('/', '', date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'))) . '.txt', $fileContent, 'text/accounting-file');    
            
    }
    /**
     * get the file content
     *
     * @param: $fileName: string with filename
     *
     * @return (string): String containing the file content
     *
     */
    private function getFileContent($fileName)
    {
        $MIOLO  = MIOLO::getInstance();

        $path = $MIOLO->GetModulePath('basic', SAGU::getParameter('BASIC', 'UPLOAD_PATH'));
        return file_get_contents($path.$fileName);
    }


}

?>
