<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for stored balances table
 
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 25/09/2006
 *
 **/

/**
 * Form to search the accAccountancyBalance table
 */
class FrmStoredBalances extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;
        parent::__construct( _M('Saldos armazenados', $module), null, null );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO         = MIOLO::getInstance();
        $module        = MIOLO::getCurrentModule();
        $action        = MIOLO::getCurrentAction();
        $balanceDate   = MIOLO::_request('balanceDate');
        $type          = MIOLO::_request('type');
        $dateType      = MIOLO::_request('dateType');
        $personBalance = MIOLO::_request('personBalance');

        //inclui todas as grids
        $business = new BusinessAccountancyBusAccountBalance();
        if ( strtoupper($dateType) == 'ALL' )
        {
            $storedBalance = $business->getAllStoredBalance($balanceDate, $type);
        }
        else
        {
            $storedBalance = $business->getStoredBalance($balanceDate, $type);
        }

        if ( count($storedBalance) > 0 )
        {
            $accountSchemeIdOld          = $storedBalance[0][0];
            $accountSchemeDescriptionOld = $storedBalance[0][5];
            foreach ( $storedBalance as $row )
            {
                list (
                        $accountSchemeId,
                        $courseId,
                        $courseName,
                        $unitId,
                        $source,
                        $accountSchemeDescription,
                        $value
                     ) = $row;

                 if ( $accountSchemeId != $accountSchemeIdOld )
                 {
                     if ( strtoupper($dateType) == 'ALL' )
                     {
//                         $valueTotal = $business->getAllAccountStoredBalance($balanceDate, $accountSchemeIdOld, $type);
                     }
                     else
                     {
//                         $valueTotal = $business->getAccountStoredBalance($balanceDate, $accountSchemeIdOld, $type);
                     }
                     $matrix[]   = array('<b>' . _M('Total', $module) . ': </b><i>' . FINANCE::formatFinanceReportNumber(str_replace(',', '.', $valueTotal)) . '</i>');
                     $title = new MDiv('div1', FINANCE::formatAccountSchemeId($accountSchemeIdOld) . ' - ' . $accountSchemeDescriptionOld, null, 'align=left');
                     $title->addStyle('width', '100%');

                     $tableRaw = new MTableRaw($title, $matrix, $columns);
                     $tableRaw->setAlternate(true);
                     $tableRaw->addStyle('width', '100%');

                     $tableRaw->setCellAttribute(0, 0, 'width', '20%');
                     $tableRaw->setCellAttribute(0, 1, 'width', '60%');
                     $tableRaw->setCellAttribute(0, 2, 'width', '20%');

                     $fields[] = $tableRaw;

                     unset($valueTotal, $matrix);
                     $accountSchemeIdOld          = $accountSchemeId;
                     $accountSchemeDescriptionOld = $accountSchemeDescription;
                 }

                 if ( $personBalance == true )
                 {
                     $opts     = array('accountSchemeId' => $accountSchemeId,
                                       'balanceDate'     => $balanceDate,
                                       'source'          => $source,
                                       'dateType'        => $dateType,
                                       'type'            => $type,
                                       'courseId'        => $courseId,
                                       'courseVersion'   => $courseVersion,
                                       'unitId'          => $unitId,
                                       'personBalance'   => $personBalance);

                     $linkPath = $MIOLO->getActionUrl($module, 'main:report:personBalances', null, $opts);
                     $courseId = new MLink(null, $courseId, $linkPath);
                 }
                 $valueTotal += $value;
                 $matrix[] = array($courseId, $source . ' : ' . $courseName, FINANCE::formatFinanceReportNumber($value));
            }

        }

        if ( strtoupper($dateType) == 'ALL' )
        {
            $valueTotal = $business->getAllAccountStoredBalance($balanceDate, $accountSchemeId, $type);
        }
        else
        {
            $valueTotal = $business->getAccountStoredBalance($balanceDate, $accountSchemeId, $type);
        }
        $matrix[]   = array('<b>' . _M('Total', $module) . ': </b><i>' . FINANCE::formatFinanceReportNumber($valueTotal) . '</i>');
        $title = new MDiv('div1', FINANCE::formatAccountSchemeId($accountSchemeIdOld) . ' - ' . $accountSchemeDescriptionOld, null, 'align=left');
        $title->addStyle('width', '100%');

        $tableRaw = new MTableRaw($title, $matrix, $columns);
        $tableRaw->setAlternate(true);
        $tableRaw->addStyle('width', '100%');

        $tableRaw->setCellAttribute(0, 0, 'width', '20%');
        $tableRaw->setCellAttribute(0, 1, 'width', '60%');
        $tableRaw->setCellAttribute(0, 2, 'width', '20%');

        $fields[] = $tableRaw;

        if ( strtoupper($dateType) == 'ALL' )
        {
            $valueTotal = $business->getAllAccountStoredBalance($balanceDate, null, $type);
        }
        else
        {
            $valueTotal = $business->getAccountStoredBalance($balanceDate, null, $type);
        }
        $fields[]   = new Separator();
        $title      = new MDiv('div1', '<b>' . _M('Saldo: ', $module) . '<i>' . FINANCE::formatFinanceReportNumber($valueTotal) . '</i></b>', null, 'align=left');
        $title->addStyle('width', '100%');
        $tableRaw   = new MTableRaw($title, null, array(array()));
        $fields[]   = $tableRaw;

        $fields[]   = new Separator();
        $btnBack    = new MButton('btnBack', _M('Voltar', $module));
        $divButtons = new MDiv('divButtons', $btnBack, null, 'align=center');
        $divButtons->addStyle('text-align', 'center');
        $fields[]   = $divButtons;
        $fields[]   = new Separator();

        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators, 'toolbar' => false ) );
    }

    /**
     * Event triggered when user chooses button Back
     **/
    public function btnBack_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $this->page->redirect($MIOLO->getActionURL($module, 'main:process:accountancyBalance'));
    }

}

?>
