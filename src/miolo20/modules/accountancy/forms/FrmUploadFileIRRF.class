<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Eduardo Beal Miglioransa [eduard@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 **/

/**
 * Form to control import return files for bank
 **/
class FrmUploadFileIRRF extends SForm
{
    private $home;
    
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Atualizar arquivo de DIRF para o servidor', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();

        $fields[] = new MFileField('uploadFile', $this->getFormValue('uploadFile', $data->uploadFile), _M('Atualizar arquivo', $module));
        $validators[]= new MRequiredValidator('uploadFile', $data->uploadFile);

        $fields[] = new MSeparator('');
        $fields[] = new MButton('send', _M('Enviar', $module), 'SUBMIT');
        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Get this action when submit button on this form is clicked
     */
    public function send_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        if ($_FILES["uploadFile"]["error"] === 0)
        {

            $data->fileName  = $_FILES["uploadFile"]["name"];
            $data->fileType  = $_FILES["uploadFile"]["type"];
            $data->localPath = $_FILES["uploadFile"]["tmp_name"];
            $data->size      = $_FILES["uploadFile"]["size"];

        }
        else
        {
            $MIOLO->information(_M('Alguns problemas ocorreram atualizando o arquivo. Por favor, tente novamente', $module));
        }
        $businessFile = new BusinessFinanceBusFinFile();
        $data->inputOrOutput = 'I';
        $data->fileType      = 'T';
        $data->isProcessed   = DB_FALSE;

        $dataFile = $businessFile->insertFinanceFile($data);
        if ($dataFile == false)
        {
            $MIOLO->information(_M('Alguns problemas ocorreram ao atualizar o aquivo. Por favor, tente novamente.', $module));
        }
        else
        {
            if (SAGUFile::saveFileToLocal($data->localPath, $dataFile->fileId))
            {

                $args = array('fileId'=>$dataFile->fileId,
                              'bankAccountId'=>$data->bankAccountId
                             );
                $goProcessURL = $MIOLO->getActionURL($module, $action, null, $args);
                $MIOLO->information(_M('Arquivo atualizado com sucesso. Por favor, clique no botão "OK" para continuar este processo', $module), $goProcessURL);
            }
        }
    }
   
    /**
     * Get this action when submit button on this form is clicked
     */
    public function process_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $MIOLO->getClass($module, 'UploadFileIRRF');
        
        $data->fileId        = MIOLO::_request('fileId');
        $data->bankAccountId = MIOLO::_request('bankAccountId');
        $data->operationId   = MIOLO::_request('operationId');
        
        $automaticDebit = new UploadFileIRRF($data);
        $returnInfo = $automaticDebit->returnInfoData();
        $this->addField(new MSeparator('<hr>'));
        $this->addField(new MDiv('fileDate', '<b>'._M('Data do arquivo', $module).':</b> '.$returnInfo->returnDate), null);
        $this->addField(new MSeparator(''));
        $cols = array(_M('Linha', $module), _M('Data de débito', $module), _M('Valor', $module), _M('Mensagem', $module), _M('Código do título', $module), _M('Estado do processo', $module));
        $tableReturnInfo = new MTableRaw(_M('Informações de retorno', $module), $returnInfo->invoiceData, $cols);
        $tableReturnInfo->setAlternate(true);

        $this->addField($tableReturnInfo);
    }

    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
//        $data->fileId = $this->getFormValue('fileId');
 //       $data->operationId   = $this->getFormValue('operationId');
        
        return $data;
    }
}
?>
