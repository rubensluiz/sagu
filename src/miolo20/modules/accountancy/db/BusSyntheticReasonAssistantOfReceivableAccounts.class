<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for SyntheticReasonAssistantOfReceivableAccounts
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/06/2006
 *
 **/

/**
 * Class to manipulate the accSyntheticReasonAssistantOfReceivableAccounts table
 **/
class BusinessAccountancyBusSyntheticReasonAssistantOfReceivableAccounts extends sBusiness
{
    /**
     * Create a tem table
     *
     * @param $filters (object): null
     *
     * @return (array): null
     **/
    public function createTempTable()
    {
        $sql = 'CREATE TEMP TABLE data7 (accountSchemeSuffix varchar,
                                         accountSchemePrefix varchar,
                                         accountSchemeMiddle varchar,
                                         courseId varchar,
                                         courseName varchar,
                                         personId integer,
                                         personName varchar,
                                         operationId varchar,
                                         description varchar,
                                         operationTypeId char,
                                         recordDate date,
                                         value numeric(14,2),
                                         accountSchemeId varchar,
                                         balance numeric(14,2)) ';

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->execute($sql);
        }

        return $result;
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function setSyntheticReasonAssistantOfReceivableAccounts($data)
    {
        $accountSchemes = explode(',', SAGU::getParameter('ACCOUNTANCY', 'ACCOUNT_SCHEMES_FOR_ACCOUNTANCY'));

        if ( count($accountSchemes) > 0 )
        {
            foreach ( $accountSchemes as $key => $value )
            {
                $accountSchemes[$key] = '\'' . $value . '\'';
            }

            $accountSchemes = implode(',', $accountSchemes);
        }

        $sql = 'SELECT substr(Z.accountSchemeId,6,8),
                       substr(Z.accountSchemeId,1,3),
                       substr(Z.accountSchemeId,4,2),
                       T.courseId,
                       substr((SELECT name FROM acdCourse WHERE courseId = T.courseId),0,30) as courseName,
                       T.personId,
                       (SELECT name FROM ONLY basPerson WHERE personId = T.personId) as personName,
                       T.operationId,
                       T.description,
                       T.operationTypeId,
                       T.recordDate,
                       round(T.value,' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                       Z.accountSchemeId,
                       T.balance
                FROM ( SELECT accountSchemeId 
                       FROM accAccountScheme ) as Z
                RIGHT OUTER JOIN ((SELECT B.courseId,
                                          B.personId,
                                          C.operationId,
                                          C.description,
                                          C.operationTypeId,
                                          A.recordDate,
                                          A.value,
                                          A.accountSchemeId
                                   FROM finIncomeForecast A
                                   INNER JOIN (SELECT contractId,
                                                      personId,
                                                      courseId,
                                                      courseVersion,
                                                      unitId
                                               FROM acdContract) as B
                                       USING(contractId)
                                   INNER JOIN finOperation C
                                       USING (operationId)
                                   WHERE A.recordDate >= TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AND
                                         A.recordDate <= TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AND
                                         A.value <>0
                                   ) AS Y
                                   FULL OUTER JOIN (SELECT accountSchemeId,
                                                           sum(A.value) as balance
                                                           FROM accAccountBalance A
                                                           WHERE balanceDate < TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AND
                                                                 substr(accountSchemeId, 1, 3) IN (' . $accountSchemes . ') AND
                                                                 LENGTH(accountSchemeId) = 13 
                                                           GROUP BY accountSchemeId
                                                           HAVING sum(A.value) <> 0) AS X
                                   USING(accountSchemeId) ) as T
                    USING(accountSchemeId)';


        if ( strlen($data->beginDate) > 0 )
        {
            $args[] = $data->beginDate;
        }

        if ( strlen($data->endDate) > 0 )
        {
            $args[] = $data->endDate;
        }

        if ( strlen($data->beginDate) > 0 )
        {
            $args[] = $data->beginDate;
        }

        if ( strlen($data->beginAccountScheme) > 0 )
        {
            $where .= ' AND T.accountSchemeId >= ? ';
            $args[] = $data->beginAccountScheme;
        }

        if ( strlen($data->endAccountScheme) > 0 )
        {
            $where .= ' AND T.accountSchemeId <= ? ';
            $args[] = $data->endAccountScheme;
        }

        if ( $sql != '' )
        {
            if ( $where != '' )
            {
                $sql .= 'WHERE ' . substr($where,5);
            }

            $sql .= ' ORDER BY 2, 3, 1, personName, T.recordDate';
            $sql  = SAGU::prepare($sql,$args);
            
            $sql  = 'INSERT INTO data7 (accountSchemeSuffix,
                                        accountSchemePrefix,
                                        accountSchemeMiddle,
                                        courseId,
                                        courseName,
                                        personId,
                                        personName,
                                        operationId,
                                        description,
                                        operationTypeId,
                                        recordDate,
                                        value,
                                        accountSchemeId,
                                        balance)' . $sql;

            $db      = $this->getDatabase();
            $result  = $db->execute($sql);
        }
        
        return $result;
    }

    /**
     * Get distint account scheme suffixes
     *
     * @param $filters (object): null
     *
     * @return (array): null
     **/
    public function getAccountSchemeSuffixes()
    {
        $sql = 'SELECT DISTINCT
                       accountSchemeSuffix,
                       accountSchemePrefix,
                       accountSchemeMiddle
                FROM data7
                ORDER BY accountSchemePrefix,
                         accountSchemeMiddle,
                         accountSchemeSuffix';

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query($sql);
        }

        return $result;
    }

    /**
     * Get the data in the temp table
     *
     * @param $filters (object): null
     *
     * @return (array): null
     **/
    public function getData($accountScheme)
    {
        $sql = 'SELECT *
                FROM data7
                WHERE accountSchemeSuffix = ? AND
                      accountSchemePrefix = ? AND
                      accountSchemeMiddle = ?';
                
        if ( strlen($accountScheme->suffix) > 0 )
        {
            $args[] = $accountScheme->suffix;
        }
        if ( strlen($accountScheme->prefix) > 0 )
        {
            $args[] = $accountScheme->prefix;
        }
        if ( strlen($accountScheme->middle) > 0 )
        {
            $args[] = $accountScheme->middle;
        }

        unset($result);
        if ( strlen($sql) > 0 && strlen($accountScheme->middle) > 0 && strlen($accountScheme->prefix) > 0 && strlen($accountScheme->suffix) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

    /**
     * Get account scheme description
     *
     * @param $accountSchemeId (varchar): accountSchemeId
     *
     * @returns (array): Return the description
     *
     **/
    public function getAccountSchemeDescription($accountSchemeId)
    {
        $sql = 'SELECT description
                FROM accAccountScheme';

        if ( strlen($accountSchemeId) > 0 )
        {
            $where .= ' AND accountSchemeId = ?';
            $args[] = $accountSchemeId;
        }

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,5);

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }

        return $result[0][0];
    }

    /**
     * Get the name of the default company
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getDefaultCompanyName()
    {
        $sql   = 'SELECT name
                  FROM basCompanyConf';

        $where = ' WHERE companyId = ' . SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF') ;

        $sql   .= $where;
        $db     = $this->getDatabase();
        $result = $db->query($sql, null);

        return $result[0][0];
    }

    /**
     * Get persons balance
     *
     * @param $accountSchemeId (varchar), $balanceDate (varchar)
     *
     * @returns (array): Return the array whith the results
     *
     **/
    public function getPersonBalance($accountSchemeId, $balanceDate, $personId)
    {
        $sql = 'SELECT CASE WHEN sum(A.value) IS NOT NULL THEN sum(A.value)
                       ELSE 0 END as balance
                FROM accPersonBalance A';

        if ( strlen($accountSchemeId) > 0 )
        {
            $where .= ' AND A.accountSchemeId = ?';
            $args[] = $accountSchemeId;
        }

        if ( strlen($balanceDate) > 0 )
        {
            $where .= ' AND A.balanceDate < TO_DATE(?,?)';
            $args[] = $balanceDate;
            $args[] = SAGU::getParameter('BASIC', 'MASK_DATE');
        }
        
        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }


        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,5) . ' AND source = \'P\'';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }

        return $result[0][0];
    }
}
?>
