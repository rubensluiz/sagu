<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 05/09/2006
 *
 **/

/**
 **/
class BusinessAccountancyBusGenerateIncomeForecastAccountingFile extends sBusiness
{
    function BusinessAccountancyBusGenerateIncomeForecastAccountingFile()
    {
    }

    /**
     * Get the account scheme id from courses
     *
     * @param $filters (object): null
     *
     * @return (array): an array with data
     **/
    public function getAccountSchemeIds()
    {
        $sql = 'SELECT DISTINCT courseId,
                       substr(accountSchemeId,6,8),
                       substr(accountSchemeId,1,3)
                FROM accCourseAccount
                ORDER BY courseId'; 

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, null));
        }

        return $result;
    }

    /**
     * Get the unit accounting code
     *
     * @param $filters (object): null
     *
     * @return (array): an array with data
     **/
    public function getUnitAccountingCode()
    {
        $sql = 'SELECT unitId, accountingCode from basUnit'; 
        
        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, null));
        }

        return $result;
    }

    /**
     * Get the entry data
     *
     * @param $filters (object): null
     *
     * @return (array): an array with data
     **/
    public function getIncomeForecastData($filters)
    {
        $sql = 'SELECT A.incomeForecastId,
                       B.personId,
                       getPersonName(B.personId) as personName,
                       extract(month from maturityDate),
                       B.courseId,
                       B.unitId,
                       A.operationId,
                       A.recordDate,
                       A.value
                  FROM finIncomeForecast A
            INNER JOIN acdContract B
                 USING (contractId)
                 WHERE A.recordDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') 
                   AND A.value <> 0 
                   AND A.operationId <> 0 ';

        if ( strlen($filters->partial) > 0 )
        {
            $sql .= '       AND isAccounted = \''.DB_FALSE.'\'';
        }                      
                      
        $sql .=' ORDER BY B.personId, 
                          A.incomeForecastId '; 

        if ( strlen($filters->date) > 0 )
        {
            $args[] = $filters->date;
        }

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Get the integration data
     *
     * @param $filters (object): null
     *
     * @return (array): an array with data
     **/
    public function getIntegrationData($operationId)
    {
        $sql = 'SELECT externalEntryId,
                       operationTypeId,
                       debitAccount,
                       creditAccount,
                       operationDescription,
                       debitCostCenter,
                       creditCostCenter
                FROM ONLY accIncomeForecastIntegration
                WHERE operationId = ?
                ORDER BY externalEntryId'; 

        if ( strlen($operationId) > 0 )
        {
            $args[] = $operationId;
        }
        
        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
    /**
     * Update income forecasts information
     *
     * @param $filters (object): filters from form
     *
     * @return (array): true or false
     **/
    public function updateIncomeForecasts($filters)
    {
        $sql = 'UPDATE finIncomeForecast
                   SET isAccounted = TRUE
                 WHERE recordDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')'; 

        if ( strlen($filters->partial) > 0 )
        {
            $sql .= '  AND isAccounted = \''.DB_FALSE.'\' ';
        }                      

        $args[] = $filters->date;
        
        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->execute(SAGU::prepare($sql, $args));
        }
        return $result;
    }
}

?>
