<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file manipulate the lookups for the accountancy module of sagu 
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 **/

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Class to manipulate the Lookups
 **/
class BusinessAccountancyLookup
{
    /**
     * Auto complete for top account scheme
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteAccountSchemeNotReferenced($context)
    {
        $sql = 'SELECT A.description
                  FROM accAccountScheme A
                 WHERE A.accountSchemeId = ?
                   AND A.accountSchemeId NOT IN(SELECT parentaccountSchemeId
                                                  FROM accAccountScheme B
                                                  WHERE A.accountSchemeId = B.parentaccountSchemeId)';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for top account scheme top
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupAccountSchemeNotReferenced($lookup)
    {       
        $this->lookupAccountScheme($lookup);
    }

    /**
     * Auto complete for account scheme
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteAccountScheme($context)
    {
        $sql = 'SELECT A.description
                  FROM accAccountScheme A
                 WHERE A.accountSchemeId = ?';
        
        if ( MIOLO::_REQUEST('isChildren') == DB_TRUE )
        {
            $sql .= ' AND parentaccountSchemeId IS NOT NULL ';
        }

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for account scheme
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupAccountScheme($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $accountSchemeId = $lookup->getFilterValue('accountSchemeId');
        $description     = $lookup->getFilterValue('description');        
        $accountSchemeReferenced = $lookup->getFilterValue('accountSchemeReferenced')== DB_FALSE ? DB_FALSE : DB_TRUE;
        $isChildren = MIOLO::_REQUEST('isChildren');
        
        $lookup->addFilterField( new MTextField('accountSchemeId', $accountSchemeId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('description',     $description,     _M('Plano de contas', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField( new MHiddenField('accountSchemeReferenced', $accountSchemeReferenced));
        $lookup->addFilterField( new MHiddenField('isChildren', $isChildren));
        
        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('accountSchemeId', _M('Código', $module),           'right', true, null, true),
           new DataGridColumn('description',     _M('Plano de contas', $module), 'left',  true, null, true),
        );

        $sql = 'SELECT A.accountSchemeId,
                       A.description
                  FROM accAccountScheme A';

        if ( strlen($accountSchemeId) > 0 )
        {
            $where .= ' AND A.accountSchemeId ilike ?';
            $args[] = $accountSchemeId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description . '%';
        }

        if ( $accountSchemeReferenced == DB_FALSE )
        {
            $where .= ' AND A.accountSchemeId NOT IN(SELECT parentaccountSchemeId
                                                       FROM accAccountScheme B
                                                      WHERE A.accountSchemeId = B.parentaccountSchemeId)';
        }    
        
        if ( $isChildren == DB_TRUE )
        {
            $where .= ' AND parentaccountSchemeId IS NOT NULL ';
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.accountSchemeId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar plano de contas', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for cost center
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCostCenter($context)
    {
        $sql = 'SELECT A.description
                  FROM accCostCenter A
                 WHERE A.costCenterId = ? AND A.active';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for account scheme
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCostCenter($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $costCenterId = $lookup->getFilterValue('costCenterId');
        $description  = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('costCenterId', $costCenterId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('description',  $description,  _M('Centro de custo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad( 'document.' . $page->name . '.description.focus()' );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('costCenterId', _M('Código', $module),        'right', true, null, true),
           new DataGridColumn('description',  _M('Centro de custo', $module), 'left',  true, null, true),
        );

        $sql = 'SELECT A.costCenterId,
                       A.description
                  FROM accCostCenter A';
        
        $where .= ' AND A.active ';

        if ( strlen($costCenterId) > 0 )
        {
            $where .= ' AND A.costCenterId ILIKE ?';
            $args[] = $costCenterId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.costCenterId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar centro de custo',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for cost center
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteParentCostCenter($context)
    {
        $sql = 'SELECT description
              FROM accCostCenter
             WHERE costCenterId = ? AND active';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for account scheme
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupParentCostCenter($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $costCenterId = $lookup->getFilterValue('costCenterId');
        $description  = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('costCenterId', $costCenterId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('description',  $description,  _M('Centro de custo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('costCenterId', _M('Código', $module),        'right', true, null, true),
           new DataGridColumn('description',  _M('Centro de custo', $module), 'left',  true, null, true),
        );

        $sql = 'SELECT A.costCenterId,
                   A.description
              FROM accCostCenter A';
        
        $where[] = ' A.active ';

        if ( strlen($costCenterId) > 0 )
        {
            $where[] = 'A.costCenterId ILIKE ?';
            $args[] = $costCenterId;
        }

        if ( strlen($description) > 0 )
        {
            $where[] = 'A.description ILIKE ?';
            $args[] = $description . '%';
        }

        if ( count($where) > 0 )
        {
            $sql .= ' WHERE ' . implode($where, ' AND ');
        }

        $sql .= ' ORDER BY A.costCenterId ';

        $sqlObject = new sql();
        
        if ( isset($where) )
        {
            // ???? WTF???
            //$sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Procura por centro de custo pai', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for couse account
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteCourseAccount($context)
    {
        $sql = 'SELECT A.courseVersion,
                       B.name as courseName,
                       A.unitId
                FROM accCourseAccount A
                INNER JOIN acdCourse B
                    USING(courseId)
                WHERE courseId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for course account
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupCourseAccount($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $courseId      = $lookup->getFilterValue('courseId');
        $courseVersion = $lookup->getFilterValue('courseVersion');
        $courseName    = $lookup->getFilterValue('courseName');
        $unitId        = $lookup->getFilterValue('unitId');

        $lookup->addFilterField( new MTextField('courseId',       $courseId,      _M('Código do curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('courseVersion',  $courseVersion, _M('Versão do curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('courseName',     $courseName,    _M('Curso', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $business     = new BusinessBasicBusUnit();        
        $lookup->addFilterField( new MComboBox('unitId',          $unitId,        _M('Unidade',$module), $business->listUnit()));

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('courseId',        _M('Código do curso', $module),         'left', true, null, true),
           new DataGridColumn('courseVersion',   _M('Versão do curso', $module),      'left', true, null, true),
           new DataGridColumn('courseName',      _M('Curso', $module),              'left', true, null, true),
           new DataGridColumn('unitId',          _M('Código do unidade', $module),           'left', true, null, true),
           new DataGridColumn('unitDescription', _M('Unidade', $module),                'left', true, null, true),
           new DataGridColumn('accountSchemeId', _M('Plano de contas', $module), 'left', true, null, true),
           new DataGridColumn('costCenterId',    _M('Centro de custo', $module),    'left', true, null, true)
        );

        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.name as courseName,
                       A.unitId,
                       C.description as unitDescription,
                       A.accountSchemeId,
                       A.costCenterId
                FROM accCourseAccount A
                INNER JOIN acdCourse B
                    USING(courseId)
                INNER JOIN basUnit C
                    USING(unitId)';

        if ( strlen($courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $courseId;
        }

        if ( strlen($courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }

        if ( strlen($courseName) > 0 )
        {
            $where .= ' AND ( B.name ILIKE ? OR B.shortName ILIKE ?)';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        
        if ( strlen($unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.courseId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Procura por conta do curso', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
}
?>
