<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for IRRF table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/12/2005
 *
 **/

/**
 * Class to manipulate the accIRRF table
 **/
class BusinessAccountancyBusIRRF extends sBusiness
{
   /**
     * create temp table the specified IRRF.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function createTempIRRF()
    {
        $sql    = 'CREATE TEMP TABLE accIRRF (documentPerson text,
                                                retentionCode text,
                                                personType text,
                                                documentBeneficiary text,
                                                nameBeneficiary text,
                                                date date,
                                                income numeric(8,2),
                                                tax numeric(8,2)) 
                                       INHERITS (basLog) ';

        $result = $this->getDatabase()->execute($sql);

        return $result;
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listIRRF()
    {
       $sql = ' SELECT documentPerson,
                        retentionCode,
                        personType,
                        documentBeneficiary,
                        nameBeneficiary,
                        TO_CHAR(date,\''. SAGU::getParameter('BASIC', 'MASK_DATE_MONTH') .'\'),
                        sum(income),
                        sum(tax)
                   FROM accIRRF
                  GROUP BY documentPerson, retentionCode, personType, documentBeneficiary, nameBeneficiary, TO_CHAR(date,\''. SAGU::getParameter('BASIC', 'MASK_DATE_MONTH') . '\') 
                  ORDER BY documentBeneficiary, nameBeneficiary, retentionCode, TO_CHAR(date,\'' . SAGU::getParameter('BASIC', 'MASK_DATE_MONTH') . '\') ';

        $result = $this->getDatabase()->query(SAGU::prepare($sql,null));

        return ($result);
    }

   /**
     * Generate archive IRRF from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function genereteIRRF($data=false)
    {
        $this->beginTransaction();
        $return = $this->createTempIRRF();
        $MIOLO  = MIOLO::getInstance();
        
        if ($return != true )
        {
            $msg  = _M('Erro executando a operação requerida',$module);
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }

        // 50 zeros
        $zeros = str_pad($zeros, 50 , "0");
        // 150 espaços em branco.
        $spaces = str_pad($spaces, 150 , " ");

        for ( $int = 0 ; strlen( $data->allSelecteds[1][$int] ) > 0 ; $int++ )
        {
            $data->file = file(SAGUFile::getFilePath($data->select[$data->allSelecteds[1][$int]]));

            for ( $line = 0 ; count($data->file) > $line ; $line++ )
            {
                $fileLine = explode(';', $data->file[$line]);

                list ($IRRF->documentPerson,
                      $IRRF->retentionCode,
                      $IRRF->personType,
                      $IRRF->documentBeneficiary,
                      $IRRF->nameBeneficiary,
                      $IRRF->date,
                      $IRRF->income,
                      $IRRF->tax) = $fileLine;

                $IRRF->nameBeneficiary = str_replace("'",'', $IRRF->nameBeneficiary);
                $IRRF->nameBeneficiary = str_replace("-",'', $IRRF->nameBeneficiary);
            
                $IRRF->documentPerson = str_replace('.','', $IRRF->documentPerson);
                $IRRF->documentPerson = str_replace('/','', $IRRF->documentPerson);
                $IRRF->documentPerson = str_replace('-','', $IRRF->documentPerson);
                $IRRF->documentPerson = str_replace(' ','', $IRRF->documentPerson);
                $IRRF->documentPerson = trim($IRRF->documentPerson);
            
                $IRRF->documentBeneficiary = str_replace('.','', $IRRF->documentBeneficiary);
                $IRRF->documentBeneficiary = str_replace('/','', $IRRF->documentBeneficiary);
                $IRRF->documentBeneficiary = str_replace('-','', $IRRF->documentBeneficiary);
                $IRRF->documentBeneficiary = str_replace(' ','', $IRRF->documentBeneficiary);
                $IRRF->documentBeneficiary = trim($IRRF->documentBeneficiary);
                    
                $IRRF->income = str_replace(',','.', $IRRF->income);
            
                if ( $IRRF->income == '' )
                {
                    $IRRF->income = 0; 
                }
                
                $IRRF->tax = str_replace(',','.', $IRRF->tax);
                
                if ( $IRRF->tax == '' )
                {
                    $IRRF->tax = 0;
                }

                $okInsert = $this->insertIRRF($IRRF);
            }
        }

        $return = $this->listIRRF();
    
        $sequencial = 1;
        $aux_documentBeneficiary = -1;
        $aux_nameBeneficiary = -1;
        $aux_retentionCode = -1;
        unset($out);
        
        $ok = 0;
        while( $return[$ok] )
        {
            list ($IRRF->documentPerson,
                  $IRRF->retentionCode,
                  $IRRF->personType,
                  $IRRF->documentBeneficiary,
                  $IRRF->nameBeneficiary,
                  $IRRF->month,
                  $IRRF->income,
                  $IRRF->tax) = $return[$ok];

            $IRRF->income = str_replace('.','', $IRRF->income);
            $IRRF->tax    = str_replace('.','', $IRRF->tax);

            if ( ($IRRF->documentBeneficiary != $aux_documentBeneficiary) || ($IRRF->nameBeneficiary != $aux_nameBeneficiary) || ($IRRF->retentionCode != $aux_retentionCode) )
            {
                $aux_documentBeneficiary = $IRRF->documentBeneficiary;
                $aux_nameBeneficiary     = $IRRF->nameBeneficiary;
                $aux_retentionCode       = $IRRF->retentionCode;
                             
                // pega os dados pessoais da pessoa processada.
                $toPrint->toPrint[$sequencial][0] = $IRRF->documentBeneficiary;
                $toPrint->toPrint[$sequencial][1] = $IRRF->nameBeneficiary;

                $sequencial                 = (string) substr($zeros, 0, 8-strlen($sequencial) ) . $sequencial;
                $type                       = '2';
                $IRRF->documentPerson       = (string) substr($zeros, 0, 14-strlen($IRRF->documentPerson) ) . $IRRF->documentPerson;
                $IRRF->retentionCode        = (string) substr($zeros, 0, 4-strlen($IRRF->retentionCode) ) . $IRRF->retentionCode;
                $IRRF->personType           = (string) substr($zeros, 0, 1-strlen($IRRF->personType) ) . $IRRF->personType;
                $IRRF->documentBeneficiary  = (string) substr($zeros, 0, 14-strlen($IRRF->documentBeneficiary) ) . $IRRF->documentBeneficiary;
                $IRRF->nameBeneficiary      = (string) $IRRF->nameBeneficiary . substr($spaces, 0, 60-strlen($IRRF->nameBeneficiary)); 
            }
            
            $IRRF->months = '';
            
            for ( $cont = 1; $cont <= 13; $cont++ )
            {
                $IRRF->month = (int) $IRRF->month;
                
                if ( $IRRF->month == $cont )
                {
                    // seta valores para meses juntando com a taxa do imposto
                    $IRRF->months .= (string) substr($zeros, 0, 15-strlen($IRRF->income)) . $IRRF->income;
                    $IRRF->months .= (string) substr($zeros, 0, 15);
                    $IRRF->months .= (string) substr($zeros, 0, 15-strlen($IRRF->tax)) . $IRRF->tax;

                    // Adquire dados da próxima linha
                    list ($IRRF->documentPerson2,
                          $IRRF->retentionCode2,
                          $IRRF->personType2,
                          $IRRF->documentBeneficiary2,
                          $IRRF->nameBeneficiary2,
                          $IRRF->month2,
                          $IRRF->income,
                          $IRRF->tax) = $return[$ok+1];
                    
                    $IRRF->income = str_replace('.','', $IRRF->income);
                    $IRRF->tax    = str_replace('.','', $IRRF->tax);

                    if ( ($IRRF->documentBeneficiary2 != $aux_documentBeneficiary) || ($IRRF->nameBeneficiary2 != $aux_nameBeneficiary) || ($IRRF->retentionCode2 != $aux_retentionCode) )
                    {
                        for ( $cont=$IRRF->month+1; $cont<=13; $cont++ )
                        {
                            $IRRF->months .= (string) substr($zeros, 0, 45);
                        }
                        // sai do laço 'for ($cont=1; $cont<=13; $cont++)'
                        break;
                    }
                    else
                    {
                        $IRRF->month = $IRRF->month2;
                    }
                }
                else
                {
                    // Adiciona zeros conforme o mês para cada vez que passa no laço.
                    $IRRF->months .= (string) substr($zeros, 0, 45);
                }
            }
            
            $use_srf        = (string) substr($spaces, 0, 9);
            $use_declarant  = (string) substr($spaces, 0, 32);

            // Adiciona linha na variável
            $out .= $sequencial . $type . $IRRF->documentPerson . $IRRF->retentionCode . $IRRF->personType . $IRRF->documentBeneficiary . $IRRF->nameBeneficiary . $IRRF->months . '0' . $use_srf . $use_declarant . '9' . "\r\n";
            
            $sequencial++;
            
            $ok++;
        }
        
        if ( strlen($out) > 0 )
        {
            $businessFile = new BusinessFinanceBusFinFile();
            
            // retira '/ - .' do campo de datas.
            $data->fileName  = 'DIRF'. str_replace('/','', ( SAGU::getDateNow() ) );
            $data->fileName  = str_replace('-','', $data->fileName );
            $data->fileName  = str_replace('.','', $data->fileName ) . '.TXT';
            $data->file      = $out;

            $data->size      = strlen($out);

            $data->inputOrOutput = 'I';
            $data->fileType      = 'T';
            $data->isProcessed   = DB_TRUE;
            $dataFile = $businessFile->insertFinanceFile($data);

            // une array com dados de pessoas processadas com o array do resultado do insert
            $dataFile->toPrint = $toPrint->toPrint;

            return $dataFile;
        }
        else
        {
            // retorna falso caso o processo não tenha gerado nada.
            return false;
        }
    }

    /**
     * Obtain the specified costCenter id data.
     *
     * @return If the specified courseId exists, returns an object (costCenter) containing its data.
     * Otherwise, returns null.
     *
     */
    function getIRRF($costCenterId)
    {
        $sql = 'SELECT A.costCenterId,
                       A.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.ipAddress
                  FROM accIRRF A
                 WHERE A.costCenterId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, trim($costCenterId)));

        $costCenter = new accIRRF();

        list ( $costCenter->costCenterId,
               $costCenter->description,
               $costCenter->userName,
               $costCenter->dateTime,
               $costCenter->ipAddress
              ) = $result[0];

        return $costCenter;
    }
        
    /**
     * Insert a new accIRRF.
     *
     * @param $data (object): Object (costCenter) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertIRRF($data)
    {
        $sql = ' INSERT INTO accIRRF (documentPerson,
                                     retentionCode,
                                     personType,
                                     documentBeneficiary,
                                     nameBeneficiary,
                                     date,
                                     income,
                                     tax)
                             VALUES ( ?, ?, ?, ?, ?, ? , ?, ? ) ';

        $args = array($data->documentPerson,
                      $data->retentionCode,
                      $data->personType,
                      $data->documentBeneficiary,
                      $data->nameBeneficiary,
                      $data->date,
                      $data->income,
                      $data->tax);

        if ( ! $return = $this->getDatabase()->execute(SAGU::prepare($sql, $args)) )
        {
            return $data;
        }

        return false;
    }
}
?>
