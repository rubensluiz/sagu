<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for accCostCenter table
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 26/12/2005
 *
 **/

/**
 * Class to manipulate the accCostCenter table
 **/
class BusinessAccountancyBusCostCenter extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCostCenter()
    {
        $sql = 'SELECT A.costCenterId,
                       A.description
                  FROM accCostCenter A
                  ORDER BY A.description';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,null));

        return ($result);
    }
    
    /**
     * Obtain the specified costCenter id data.
     *
     * @return If the specified courseId exists, returns an object (costCenter) containing its data.
     * Otherwise, returns null.
     *
     */
    function getCostCenter($costCenterId)
    {
        $sql = 'SELECT A.costCenterId,
                       A.description,
                       A.userName,
                       A.parentCostCenterId,
                       A.personIdOwner,
                       A.allowPaymentRequest,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.ipAddress,
                       A.active
                  FROM accCostCenter A
                 WHERE A.costCenterId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, trim($costCenterId)));

        $costCenter = new accCostCenter();

        list ( $costCenter->costCenterId,
               $costCenter->description,
               $costCenter->userName,
               $costCenter->parentCostCenterId,
                $costCenter->personIdOwner,
                $costCenter->allowPaymentRequest,
               $costCenter->dateTime,
               $costCenter->ipAddress,
                $costCenter->active
             ) = $result[0];

        return $costCenter;
    }
    
    /**
     * Search for costCenter.
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchCostCenter($data)
    {
        $sql = 'SELECT A.costCenterId,
                   A.description,
                   A.parentCostCenterId,
                   B.description
              FROM accCostCenter A
         LEFT JOIN accCostCenter B
                ON (A.parentCostCenterId = B.costCenterId)';

        $where  = '';
        unset($args);

        if ( strlen($data->costCenterId) > 0 )
        {
            $where .= '    AND   A.costCenterId = ?';
            $args[] = $data->costCenterId;
        }

        if ( strlen($data->description) > 0 )
        {
            $where .= '    AND   A.description ILIKE ?';
            $args[] = $data->description . '%';
        }

        if (  strlen($data->parentCostCenterId) > 0 )
        {
            $where .= ' AND A.parentCostCenterId = ? ';
            $args[] = $data->parentCostCenterId;
        }

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                       ' ORDER BY A.costCenterId,
                                  A.description';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result;
    }
        
    /**
     * Insert a new accCostCenter.
     *
     * @param $data (object): Object (costCenter) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCostCenter($data)
    {        
        $data->active = MUtil::getBooleanValue($data->active) ? DB_TRUE : DB_FALSE;
        
        $sql = 'INSERT INTO accCostCenter
                            (costCenterId,
                             description,
                             parentCostCenterId,
                             personIdOwner,
                             allowPaymentRequest,
                             active)
                      VALUES (?,?,?,?,?,?)';
         $args = array(
            trim($data->costCenterId),
            trim($data->description),
            trim($data->parentCostCenterId),
            trim($data->personIdOwner),
            trim($data->allowPaymentRequest),
            $data->active
         );

         $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

         if ( $result )
         {
             return $data;
         }
         return false;
    }
    
    /**
     * Update the specified costCenter data.
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateCostCenter($data)
    {
        $data->active = MUtil::getBooleanValue($data->active) ? DB_TRUE : DB_FALSE;
        // Se estiver inativando um centro de custo, verifica se não pertence a nenhum parâmetro.
        if ( $data->active == DB_FALSE )
        {
                if ( trim($data->costCenterId) == SAGU::getParameter('PROTOCOL', 'PROTOCOL_DEFAULT_COST_CENTER') )
                {
                    throw new Exception(_M('Este centro de custo não pode ser desativado pois é utilizado pelo parâmetro \'PROTOCOL_DEFAULT_COST_CENTER\'.'));
                    return false;
                }
                elseif ( trim($data->costCenterId) == SAGU::getParameter('FINANCE', 'COSTCENTER_ID_RETURN_AUTOMATIC_DEBIT') )
                {
                    throw new Exception(_M('Este centro de custo não pode ser desativado pois é utilizado pelo parâmetro \'COSTCENTER_ID_RETURN_AUTOMATIC_DEBIT\'.'));
                    return false;
                }
                elseif ( trim($data->costCenterId) == SAGU::getParameter('FINANCE', 'COSTCENTER_ID_RETURN_REMITTANCE') )
                {
                    throw new Exception(_M('Este centro de custo não pode ser desativado pois é utilizado pelo parâmetro \'COSTCENTER_ID_RETURN_REMITTANCE\'.'));
                    return false;
                }
                elseif ( trim($data->costCenterId) == SAGU::getParameter('FINANCE', 'DIVERSE_TAX_COST_CENTER') )
                {
                    throw new Exception(_M('Este centro de custo não pode ser desativado pois é utilizado pelo parâmetro \'DIVERSE_TAX_COST_CENTER\'.'));
                    return false;
                }
                elseif ( trim($data->costCenterId) == SAGU::getParameter('FINANCE', 'GNUTECA_DEFAULT_COST_CENTER') )
                {
                    throw new Exception(_M('Este centro de custo não pode ser desativado pois é utilizado pelo parâmetro \'GNUTECA_DEFAULT_COST_CENTER\'.'));
                    return false;
                }
                
                // Se não tiver centro de custo pai, quer dizer que não pode ser inativado, pois ele próprio é um cantro de custo pai.
                if ( strlen(trim($data->parentCostCenterId)) == 0)
                {
                    $data->costCenterId = DB_TRUE;
                }
        }        
        
        $sql    = 'UPDATE accCostCenter
                      SET description = ?,
                          parentCostCenterId = ?,
                          personIdOwner = ?,
                          allowPaymentRequest = ?,
                          active = ?
                    WHERE costCenterId = ?';

        $db     = $this->getDatabase();

        $args   = array(
                         trim($data->description),
                         trim($data->parentCostCenterId),
                         trim($data->personIdOwner),
                         trim($data->allowPaymentRequest),
                         $data->active,
                         trim($data->costCenterId)
                       );
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
               
    }
    
    /**
     * Delete the specified costCenter.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteCostCenter($costCenterId)
    {
        if ( $costCenterId == SAGU::getParameter('PROTOCOL', 'PROTOCOL_DEFAULT_COST_CENTER') )
        {
            throw new Exception(_M('Este centro de custo não pode ser excluído pois é utilizado pelo parâmetro \'PROTOCOL_DEFAULT_COST_CENTER\'.'));
            return false;
        }
        
        $sql    = 'DELETE FROM accCostCenter
                    WHERE costCenterId = ?';


        $db     = $this->getDatabase();

        $result = $db->execute(SAGU::prepare($sql,trim($costCenterId)));

        return $result;
    }
    
    /**
     * Import cost center from Siga system
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function importCostCenter()
    {
        $db = $this->getDatabase('siga');
        
        $sql = 'SELECT ctt_custo AS costCenterId, 
                       ctt_desc01 AS description
                  FROM ctt010';

        $db     = $this->getDatabase('siga');
        $result = $db->query(SAGU::prepare($sql,$args));

        if ( count($result) > 0 )
        {
            foreach ( $result as $row )
            {
                list ( $data->costCenterId,
                       $data->description ) = $row;

                $costCenter = $this->getCostCenter(trim($data->costCenterId));
                if ( strlen($costCenter->costCenterId) == 0 )
                {
                    $this->insertCostCenter($data);
                }
                else
                {
                    $this->updateCostCenter($data);
                }
            }
            
            return true;
        }
        
        return false;
    }

}
?>
