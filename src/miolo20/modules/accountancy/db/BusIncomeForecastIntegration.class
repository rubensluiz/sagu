<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for accIncomeForecastIntegration table
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 28/09/2006
 *
 **/

/**
 * Class to manipulate the accIncomeForecastIntegration table
 **/
class BusinessAccountancyBusIncomeForecastIntegration extends sBusiness
{
    /**
     * Obtain the specified incomeForecastIntegration id data.
     *
     * @return If the specified courseId exists, returns an object (incomeForecastIntegration) containing its data.
     * Otherwise, returns null.
     *
     */
    function getIncomeForecastIntegration($operationId)
    {
        $sql = 'SELECT A.externalEntryId,
                       A.operationTypeId,
                       A.operationId,
                       A.debitAccount,
                       A.creditAccount,
                       A.operationDescription,
                       A.debitCostCenter,
                       A.creditCostCenter,
                       A.accountItem,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM accIncomeForecastIntegration A
                 WHERE A.operationId = ?
                 ORDER BY A.externalEntryId';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $operationId));

        $incomeForecastIntegration1 = new accIncomeForecastIntegration();

        list ( $incomeForecastIntegration1->externalEntryId,
               $incomeForecastIntegration1->operationTypeId,
               $incomeForecastIntegration1->operationId,
               $incomeForecastIntegration1->debitAccount,
               $incomeForecastIntegration1->creditAccount,
               $incomeForecastIntegration1->operationDescription,
               $incomeForecastIntegration1->debitCostCenter,
               $incomeForecastIntegration1->creditCostCenter,
               $incomeForecastIntegration1->accountItem,
               $incomeForecastIntegration1->userName,
               $incomeForecastIntegration1->dateTime,
               $incomeForecastIntegration1->ipAddress
             ) = $result[0];
             
        $incomeForecastIntegration2 = new accIncomeForecastIntegration();

        list ( $incomeForecastIntegration2->externalEntryId,
               $incomeForecastIntegration2->operationTypeId,
               $incomeForecastIntegration2->operationId,
               $incomeForecastIntegration2->debitAccount,
               $incomeForecastIntegration2->creditAccount,
               $incomeForecastIntegration2->operationDescription,
               $incomeForecastIntegration2->debitCostCenter,
               $incomeForecastIntegration2->creditCostCenter,
               $incomeForecastIntegration2->accountItem,
               $incomeForecastIntegration2->userName,
               $incomeForecastIntegration2->dateTime,
               $incomeForecastIntegration2->ipAddress
             ) = $result[1];
             
        $return->data1 = $incomeForecastIntegration1;
        $return->data2 = $incomeForecastIntegration2;

        return $return;
    }
    
    /**
     * Insert a new accIncomeForecastIntegration.
     *
     * @param $data (object): Object (incomeForecastIntegration) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertIncomeForecastIntegration($data)
    {
       $sql = 'INSERT INTO accIncomeForecastIntegration
                           (externalEntryId,
                            operationTypeId,
                            operationId,
                            debitAccount,
                            creditAccount,
                            operationDescription,
                            debitCostCenter,
                            creditCostCenter,
                            accountItem)
                     VALUES (?,?,?,?,?,?,?,?,?)';

        $args = array(
                       $data->externalEntryId,
                       $data->operationTypeId,
                       $data->operationId,
                       $data->debitAccount,
                       $data->creditAccount,
                       $data->operationDescription,
                       $data->debitCostCenter,
                       $data->creditCostCenter,
                       $data->accountItem
                      );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            return $data;
        }
        return false;
    }
    
    /**
     * Delete the specified incomeForecastIntegration.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteIncomeForecastIntegration($operationId)
    {
        $sql    = 'DELETE FROM accIncomeForecastIntegration
                    WHERE operationId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$operationId));

        return $result;
    }
}
?>
