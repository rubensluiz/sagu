<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for accAccountScheme table
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 02/12/2005
 *
 **/

/**
 * Class to manipulate the accAccountScheme table
 **/
class BusinessAccountancyBusAccountScheme extends sBusiness
{

    /**
     * Constant type income or expense option
     **/
    const TYPE_INCOME = 'I';
    const TYPE_EXPENSE = 'E';

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listAccountScheme()
    {
        $sql = 'SELECT A.accountSchemeId,
                       A.description,
                       A.accountReduced,
                       A.codigoestrutural
                  FROM accAccountScheme A
                  ORDER BY A.description';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,null));

        return ($result);
    }

    /**
     * Obtain the specified accountScheme id data.
     *
     * @return If the specified courseId exists, returns an object (accountScheme) containing its data.
     * Otherwise, returns null.
     *
     */
    function getAccountScheme($accountSchemeId)
    {
        $sql = 'SELECT A.accountSchemeId,
                       A.description,
                       A.accountReduced,
                       A.incomeorexpense,
                       A.parentaccountschemeid,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       A.codigoestrutural
                  FROM accAccountScheme A
                 WHERE A.accountSchemeId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, trim($accountSchemeId)));

        $accountScheme = new accAccountScheme();

        list ( $accountScheme->accountSchemeId,
               $accountScheme->description,
               $accountScheme->accountReduced,
               $accountScheme->incomeOrExpense,
               $accountScheme->parentAccountSchemeId,
               $accountScheme->userName,
               $accountScheme->dateTime,
               $accountScheme->ipAddress,
               $accountScheme->codigoestrutural
             ) = $result[0];
        return $accountScheme;
    }
    
    /**
     * Search for accountScheme.
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchAccountScheme($data)
    {
        $sql = 'SELECT A.accountSchemeId,
                       A.description,
                       A.accountReduced,
                       A.incomeorexpense,
                       A.parentaccountschemeid,
                       A.codigoestrutural
                     FROM accAccountScheme A';

        $where  = '';
        unset($args);

        if ( strlen($data->accountSchemeId) > 0 )
        {
            $where .= '    AND   A.accountSchemeId = ?';
            $args[] = $data->accountSchemeId;
        }

        if ( strlen($data->description) > 0 )
        {
            $where .= '    AND   A.description ILIKE ?';
            $args[] = $data->description . '%';
        }

        if ( strlen($data->accountReduced) > 0 )
        {
            $where .= '    AND   A.accountReduced = ?';
            $args[] = $data->accountReduced;
        }
        
        if ( strlen($data->incomeOrExpense) > 0 )
        {
            $where .= '    AND   A.incomeOrExpense = ?';
            $args[] = $data->incomeOrExpense;
        }
        
        if ( strlen($data->parentAccountSchemeId) > 0 )
        {
            $where .= '    AND   A.parentAccountSchemeId = ?';
            $args[] = $data->parentAccountSchemeId;
        }
        

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                       ' ORDER BY A.accountSchemeId,
                                  A.description,
                                  A.accountReduced';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result;
    }
        
    /**
     * Insert a new accAccountScheme.
     *
     * @param $data (object): Object (accountScheme) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertAccountScheme($data)
    {
       $sql = 'INSERT INTO accAccountScheme
                           (accountSchemeId,
                            description,
                            incomeOrExpense,
                            parentAccountSchemeId,
                            codigoestrutural)
                     VALUES (?,?,?,?,?)';
        $args = array(
                       trim($data->accountSchemeId),
                       trim($data->description),
                       $data->incomeOrExpense,           
                       $data->parentAccountSchemeId,
                       $data->codigoestrutural
                       );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            return $data;
        }
        return false;
    }
    
    /**
     * Update the specified accountScheme data.
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateAccountScheme($data)
    {
        $sql    = 'UPDATE accAccountScheme
                      SET description = ?,
                          incomeOrExpense = ?,
                          parentAccountSchemeId = ?,
                          codigoestrutural = ?
                    WHERE accountSchemeId = ?';

        $db     = $this->getDatabase();

        $args   = array(
                         trim($data->description),
                         $data->incomeOrExpense,
                         $data->parentAccountSchemeId,
                         $data->codigoestrutural,
                         trim($data->accountSchemeId)
                         );
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
               
    }
    
    /**
     * Delete the specified accountScheme.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteAccountScheme($accountSchemeId)
    {
        $sql    = 'DELETE FROM accAccountScheme
                    WHERE accountSchemeId = ?';

        $db     = $this->getDatabase();

        $result = $db->execute(SAGU::prepare($sql,$accountSchemeId));

        return $result;
    }
    
    /**
     * Import account scheme from Siga system
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function importAccountScheme()
    {

        $this->beginTransaction();

        $sql = 'DECLARE data CURSOR FOR 
                 SELECT ct1_conta AS accountSchemeId, 
                       ct1_desc01 AS description
                  FROM ct1010';

        $result = $this->getDbSiga()->execute($sql);

        while ( true )
        {
            $result = $this->fetchData(1000);
            
            if ( count($result) > 0 )
            {
                foreach ( $result as $row )
                {
                    list ( $data->accountSchemeId,
                           $data->description ) = $row;
                    $accountScheme = $this->getAccountScheme(trim($data->accountSchemeId));
                    if ( strlen($accountScheme->accountSchemeId) == 0 )
                    {
                        $this->insertAccountScheme($data);
                    }
                    else
                    {
                        $this->updateAccountScheme($data);
                    }
                }
            }
            else
            {
                break;
            }
            
            return true;
        }
        
        $this->commitTransaction();

        return false;
    }

    /*
     * Move and get data from cursor
     *
     */
    public function fetchData($number)
    {
        $sql    = 'FETCH ' . $number . ' FROM data';
        $result = $this->getDatabase()->query($sql);

        return $result;
    }
    
    /**
     * List type income or expense
     *
     * @param $type (default 0) (int): Default type for passing parameters
     *
     * @return (array): An array containing all operation types
     *
     **/
    public function listTypeIncomeOrExpense($type = 0)
    {
        $module = MIOLO::GetCurrentModule(); 
        if ($type == 0)
        {
           $data = array(self::TYPE_INCOME => _M('Receita', $module),
                         self::TYPE_EXPENSE => _M('Despesa', $module));
        }
        elseif ($type == 1)
        {
            $data = array(array(_M('Receita', $module), self::TYPE_INCOME),
                          array(_M('Despesa', $module), self::TYPE_EXPENSE));
        }
        return $data;
    }
    
    /**
     * Check account scheme selected has operations linked.
     *
     * @param: $accountSchemeId
     * @return (boolean):
     *
     **/
    public function checkAccountSchemeIdNotUsedInOperations($accountSchemeId)
    {
        $sql = 'SELECT *
                  FROM chk_accountschemeid_not_used_in_operations(?)';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, trim($accountSchemeId)));
        
        return $result[0][0];
    }
    
    /**
     * Verifica se um plano de contas é filho
     * 
     * @param type $accountSchemeId
     * @return boolean DB_TRUE / DB_FALSE
     */
    public static function verificaPlanoDeContasEFilho($accountSchemeId)
    {
        $sql = " SELECT COUNT(*) > 0
                  FROM accAccountScheme A
                 WHERE A.accountSchemeId = ?
                   AND A.parentaccountSchemeId IS NOT NULL ";
        
        $args[] = $accountSchemeId;
        
        $result = SDatabase::query($sql, $args);
        
        return strlen($result[0][0]) > 0 ? $result[0][0] : DB_FALSE;
        
    }
}
?>
