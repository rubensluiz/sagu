<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for accPersonBalance table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 28/09/2006
 *
 **/

/**
 * Class to manipulate the accAccountBalance table
 **/
class BusinessAccountancyBusPersonBalance extends sBusiness
{
    /**
     * List all distinct values from onde person
     *
     * @param: balanceDate(date): filtered top date
     * @param: accountSchemeId(text): account scheme
     * @param: source(text): stored balance type: forecast or entry
     *
     * @returns (array): Return an array with respective data
     *
     **/
    public function getPersonBalance($balanceDate, $accountSchemeId, $source, $courseId=null, $unitId=null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $args[] = $balanceDate;
        $args[] = $source;

        if ( strlen($courseId)>0 )
        {
            $par    .= ' AND A.courseId = ? ';
            $args[]  = $courseId;
        }

        if ( strlen($unitId)>0 )
        {
            $par    .= ' AND A.unitId = ? ';
            $args[]  = $unitId;
        }

        $sql = 'SELECT A.personId,
                       getPersonName(A.personId),
                       round(A.value,' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
                  FROM accPersonBalance A
                 WHERE A.balanceDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                   AND A.source = ? ' . $par . '
                   AND A.accountSchemeId = ?
              ORDER BY A.personId';

        $args[] = $accountSchemeId;
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * List all distinct top dates from accAccountBalance
     *
     * @param: balanceDate(date): filtered top date
     * @param: accountSchemeId(text): account scheme
     * @param: source(text): stored balance type: forecast or entry
     * @param: courseId(text): course to be filtered
     * @param: unitId(text): unit to be filtered
     *
     * @returns (array): Return an array with respective data
     *
     **/
    public function getTotalPersonBalance($balanceDate, $accountSchemeId, $source, $courseId=null, $unitId=null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $args[] = $balanceDate;
        $args[] = $source;

        if ( strlen($courseId)>0 )
        {
            $par    .= ' AND A.courseId = ? ';
            $args[]  = $courseId;
        }

        if ( strlen($unitId)>0 )
        {
            $par    .= ' AND A.unitId = ? ';
            $args[]  = $unitId;
        }

        $sql = 'SELECT round(sum(A.value),' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
                  FROM accPersonBalance A
                 WHERE A.balanceDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                   AND A.source = ? ' . $par . '
                   AND A.accountSchemeId = ?';

        $args[] = $accountSchemeId;

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        $result = $result[0][0];

        return $result;
    }
}
?>
