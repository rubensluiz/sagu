<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for accaccountinglimit table
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/10/2006
 *
 **/

/**
 * Class to manipulate the accDefineAccountingLimits table
 **/
class BusinessAccountancyBusDefineAccountingLimits extends sBusiness
{
    /**
     * Insert a new accDefineAccountingLimits.
     *
     * @param $data (object): Object (defineAccountingLimits) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function getDefineAccountingLimits()
    {
        $sql = 'SELECT accountingLimitId,
                       TO_CHAR(recordDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       accountingUser
                FROM accAccountingLimit
                ORDER BY recordDate DESC';

        if ( strlen($sql) > 0 )
        {
            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,null));
        }

        return $result;
    }

    /**
     * Insert a new accAccountingLimit.
     *
     * @param $data (object): Object (accountScheme) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertAccountingLimit($data)
    {
       $sql = 'INSERT INTO accAccountingLimit
                           (recordDate,
                            accountingUser)
                     VALUES (TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),?)';
        $args = array(
                       $data->recordDate,
                       $data->accountingUser
                       );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            return $data;
        }
        return false;
    }


    /**
     * Delete the specified AccountingLimit.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteAccountingLimit($accountingLimitId)
    {
        $sql    = 'DELETE FROM accAccountingLimit
                    WHERE accountingLimitId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql,$accountingLimitId));

        return $result;
    }
    
    
}
?>
