<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 10/08/2006
 *
 **/

/**
 **/
class BusinessAccountancyBusDiverseConsultationAcc extends sBusiness
{
    /**
     * Get the person balances from accPersonBalance
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getPersonBalances($filters)
    {
        $sql = 'SELECT TO_CHAR(A.balanceDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.accountSchemeId,
                       (SELECT description FROM accAccountScheme WHERE accountSchemeId = A.accountSchemeId),
                       round(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
                FROM accPersonBalance A
                WHERE personid = ? AND
                      source   = ? 
                ORDER BY balanceDate desc' ;
                                 
        if ( strlen($filters->personId) > 0 )
        {
            $args[] = $filters->personId;
        }

        if ( strlen($filters->source) > 0 )
        {
            $args[] = $filters->source;
        }

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Get the person balance from previous month
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getPersonCurrentBalance($filters)
    {
        $sql = 'SELECT round(SUM( CASE WHEN C.operationTypeId = \'D\' THEN ( 1 * B.value )
                                       WHEN C.operationTypeId = \'C\' THEN ( -1 * B.value )
                                  END
                                ), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                       TO_CHAR((extract (year from now()) || \'-\' || extract (month from now()) || \'-01\')::timestamp - \'1 day\'::interval, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                FROM (SELECT invoiceId
                        FROM ONLY finInvoice
                        WHERE personId = ?) AS A
                INNER JOIN (SELECT invoiceId,
                                    operationId,
                                    value
                            FROM finEntry
                            WHERE entryDate <= (extract (year from now()) || \'-\' || extract (month from now()) || \'-01\')::timestamp - \'1 day\'::interval) AS B
                    USING(invoiceId)
                INNER JOIN finOperation C
                    USING(operationId)' ;
                                 
        if ( strlen($filters->personId) > 0 )
        {
            $args[] = $filters->personId;
        }

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result[0];
    }

    /**
     * Get the course balances from accAccountBalance
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCourseBalances($filters)
    {
        $sql = 'SELECT TO_CHAR(A.balanceDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.accountSchemeId,
                       (SELECT description FROM accAccountScheme WHERE accountSchemeId = A.accountSchemeId),
                       round(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
                FROM accAccountBalance A
                INNER JOIN accCourseAccount
                    USING(accountSchemeId)
                WHERE courseId = ? AND
                      source   = ? 
                ORDER BY balanceDate desc' ;
                                 
        if ( strlen($filters->courseId) > 0 )
        {
            $args[] = $filters->courseId;
        }

        if ( strlen($filters->source) > 0 )
        {
            $args[] = $filters->source;
        }

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Get the person balance from previous month
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCourseCurrentBalance($filters)
    {
        $sql = 'SELECT round(SUM( CASE WHEN C.operationTypeId = \'D\' THEN ( 1 * B.value )
                                       WHEN C.operationTypeId = \'C\' THEN ( -1 * B.value )
                                  END
                                ), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                       TO_CHAR((extract (year from now()) || \'-\' || extract (month from now()) || \'-01\')::timestamp - \'1 day\'::interval, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                FROM (SELECT invoiceId
                        FROM ONLY finInvoice
                        WHERE courseId = ? AND
                              courseVersion = ? AND
                              unitId = ?) AS A
                INNER JOIN (SELECT invoiceId,
                                    operationId,
                                    value
                            FROM finEntry
                            WHERE entryDate <= (extract (year from now()) || \'-\' || extract (month from now()) || \'-01\')::timestamp - \'1 day\'::interval) AS B
                    USING(invoiceId)
                INNER JOIN finOperation C
                    USING(operationId)' ;
                                 
        if ( strlen($filters->courseId) > 0 )
        {
            $args[] = $filters->courseId;
        }
        
        if ( strlen($filters->courseVersion) > 0 )
        {
            $args[] = $filters->courseVersion;
        }
        
        if ( strlen($filters->unitId) > 0 )
        {
            $args[] = $filters->unitId;
        }

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result[0];
    }

    /**
     * Get the account scheme balances from accAccountBalance
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getAccountSchemeBalances($filters)
    {
        $sql = 'SELECT TO_CHAR(A.balanceDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       B.courseId,
                       (SELECT name FROM acdCourse WHERE courseId = B.courseId),
                       round(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
                FROM accAccountBalance A
                INNER JOIN accCourseAccount B
                    USING(accountSchemeId)
                WHERE accountSchemeId = ? 
                  AND source   = ? 
                ORDER BY balanceDate desc' ;
                                 
        if ( strlen($filters->accountSchemeId) > 0 )
        {
            $args[] = $filters->accountSchemeId;
        }
        if ( strlen($filters->source) > 0 )
        {
            $args[] = $filters->source;
        }
        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Get the person balance from previous month
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getAccountSchemeCurrentBalance($filters)
    {
        $sql = 'SELECT round(SUM( CASE WHEN C.operationTypeId = \'D\' THEN ( 1 * B.value )
                                       WHEN C.operationTypeId = \'C\' THEN ( -1 * B.value )
                                  END
                                ), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                       TO_CHAR((extract (year from now()) || \'-\' || extract (month from now()) || \'-01\')::timestamp - \'1 day\'::interval, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                FROM (SELECT invoiceId
                        FROM ONLY finInvoice
                        WHERE accountschemeid = ? ) AS A
                INNER JOIN (SELECT invoiceId,
                                    operationId,
                                    value
                            FROM finEntry
                            WHERE entryDate <= (extract (year from now()) || \'-\' || extract (month from now()) || \'-01\')::timestamp - \'1 day\'::interval) AS B
                    USING(invoiceId)
                INNER JOIN finOperation C
                    USING(operationId)' ;
                                 
        if ( strlen($filters->accountSchemeId) > 0 )
        {
            $args[] = $filters->accountSchemeId;
        }

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result[0];
    }

    /**
     * Get the cost center balances from accAccountBalance
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCostCenterBalances($filters)
    {
        $sql = 'SELECT TO_CHAR(A.balanceDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       B.courseId,
                       (SELECT name FROM acdCourse WHERE courseId = B.courseId),
                       round(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
                FROM accAccountBalance A
                INNER JOIN accCourseAccount B
                    USING(accountSchemeId)
                WHERE costCenterId = ? AND
                      source   = ? 
                ORDER BY balanceDate desc' ;
                                 
        if ( strlen($filters->costCenterId) > 0 )
        {
            $args[] = $filters->costCenterId;
        }

        if ( strlen($filters->source) > 0 )
        {
            $args[] = $filters->source;
        }

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
}
?>
