<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This file handles the connection and actions for accCourseAccount table
 *
 * @author Armando Taffarel neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/12/2005
 *
 **/

/**
 * Class to manipulate the accCourseAccount table
 **/
class BusinessAccountancyBusCourseAccount extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCourseAccount()
    {
        $sql = 'SELECT A.courseAccountId,
                       A.description
                  FROM accCourseAccount A
                  ORDER BY A.description';

        $result = $this->getDatabase()->query(SAGU::prepare($sql,null));

        return ($result);
    }


    /**
     * Search for courseAccount.
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    public function searchCourseAccount($data)
    {
        $sql = 'SELECT A.courseId,
                        A.courseVersion,
                        B.name,
                        D.unitId,
                        D.description,
                        E.accountSchemeId,
                        E.description,
                        F.costCenterId,
                        F.description
                 FROM ONLY acdCourseVersion A
                 INNER JOIN acdCourse B
                         ON (A.courseId = B.courseId)
                 INNER JOIN accCourseAccount C
                         ON (A.courseId = C.courseId
                             AND A.courseVersion = C.courseVersion)
                 INNER JOIN basUnit D
                         ON (C.unitId = D.unitId)
                  LEFT JOIN accAccountScheme E
                         ON (C.accountSchemeId = E.accountSchemeId)
                 INNER JOIN accCostCenter F
                         ON (C.costCenterId = F.costCenterId)';

        $where  = '';
        $args = array();

        if ( strlen($data->courseId) > 0 )
        {
            $where .= '    AND   A.courseId = ?';
            $args[] = $data->courseId;
        }
        
        if ( strlen($data->courseVersion) > 0 )
        {
            $where .= '    AND   A.courseVersion = ?';
            $args[] = $data->courseVersion;
        }        

        if ( strlen($data->unitId) > 0 )
        {
            $where .= '    AND   D.unitId = ?';
            $args[] = $data->unitId;
        }

        if ( strlen($data->accountSchemeId) > 0 )
        {
            $where .= '    AND   E.accountSchemeId = ?';
            $args[] = $data->accountSchemeId;
        }
        
        if ( strlen($data->costCenterId) > 0 )
        {
            $where .= '    AND   F.costCenterId = ?';
            $args[] = $data->costCenterId;
        }        

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,8) .
                       ' ORDER BY B.name';

            $result  = $this->getDatabase()->query(SAGU::prepare($sql,$args));
        }
        return $result;
    }
        
    /**
     * Insert a new accCourseAccount.
     *
     * @param $data (object): Object (courseAccount) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    public function insertCourseAccount($data)
    {
       $sql = 'INSERT INTO accCourseAccount
                           (courseId,
                            courseVersion,
                            unitId,
                            accountSchemeId,
                            costCenterId)
                     VALUES (?,?,?,?,?)';

       $args = array(
                       $data->courseId,
                       $data->courseVersion,
                       $data->unitId,
                       $data->accountSchemeId,
                       $data->costCenterId
                       );                 

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            return $data;
        }

        return false;
    }
    
    /**
     * Update the specified courseAccount data.
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    public function updateCourseAccount($data)
    {
        $sql    = 'UPDATE accCourseAccount
                      SET accountSchemeId = ?,
                          costCenterId = ?
                    WHERE courseId = ?
                      AND courseVersion = ?
                      AND unitId = ?';

        $args   = array(
                         $data->accountSchemeId,
                         $data->costCenterId,
                         $data->courseId,
                         $data->courseVersion,
                         $data->unitId
                         );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
               
    }
    
    /**
     * Delete the specified courseAccount.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    public function deleteCourseAccount($data)
    {
        $sql    = 'DELETE FROM accCourseAccount
                    WHERE courseId = ?
                      AND courseVersion = ?
                      AND unitId = ?';
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql,$data));

        return $result;
    }
     
    /**
     * Get a specific course account information
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    public function getCourseAccount($data)
    {
        $sql    = ' SELECT A.userName,
                           TO_CHAR(A.dateTime, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS dateTime,
                           A.ipAddress,
                           A.courseId,
                           A.courseVersion,
                           B.name AS courseName,
                           A.unitId,
                           A.accountSchemeId,
                           C.description AS accountSchemeDescription,
                           A.costCenterId,
                           D.description AS costCenterDescription,
                           (SELECT AA.turnId
                              FROM acdcourseOccurrence AA
                             WHERE A.courseId = AA.courseId
                               AND A.courseVersion = AA.courseVersion
                               AND A.unitId = AA.unitId LIMIT 1) AS turn
                     FROM accCourseAccount A
               INNER JOIN acdCourse B
                       ON B.courseId = A.courseId
                LEFT JOIN accAccountScheme C
                       ON C.accountSchemeId = A.accountSchemeId
               INNER JOIN accCostCenter D
                       ON D.costCenterId = A.costCenterId
                    WHERE A.courseId = ?
                      AND A.courseVersion = ?
                      AND A.unitId = ?';

        $args = array( $data->courseId,
                       $data->courseVersion,
                       $data->unitId );
        
        $res = $this->getDatabase()->query(SAGU::prepare($sql,$args));

        $result = new AccCourseAccount();
        list ( $result->userName,
               $result->dateTime,
               $result->ipAddress,
               $result->courseId,
               $result->courseVersion,
               $result->courseName,
               $result->unitId,
               $result->accountSchemeId,
               $result->accountSchemeDescription,
               $result->costCenterId,
               $result->costCenterDescription,
               $result->turnId ) = $res[0];

        return $result;
    }
}
?>
