<?php

/**
 * 
 * Classe que escreve os dados contábeis em um arquivo, conforme um layout.
 * 
 * @author Bruno Edgar Fuhr [bruno@solis.com.br]
 * @since 21/10/2014
 * 
 */

require_once 'accLayoutDoArquivoDeExportacao.class';
require_once 'exportFileLayouts/sisproLayout.class';
require_once 'exportFileLayouts/glandataLayout.class';

class accArquivoDeExportacao
{
    
    private $layout;
    
    const LAYOUT_SISPRO = 'sisproLayout';
    const LAYOUT_GLANDATA = 'glandataLayout';
    
    public function __construct($data, $layout = NULL)
    {
        if ( class_exists($layout) )
        {
            $this->layout = new $layout($data);
        }
        else
        {
            throw new Exception(_M('O layout definido não existe.'));
        }
    }
    
    /**
     * Retorna lista de layouts.
     * 
     * @param (String) $layout - Layout de filtro.
     * 
     * @return (array) ou (String)
     */
    public static function listarLayouts($layout)
    {
        $result = array(
          self::LAYOUT_SISPRO => _M('Sispro'),
          self::LAYOUT_GLANDATA => _M('Glan Data')
        );
        
        if ( strlen($layout) > 0 )
        {
            if ( array_key_exists($layout, $result) )
            {
                $result = $result[$layout];
            }
        }
        
        return $result;
    }
    
    /**
     * Retorna caminho do layout.
     * 
     * @param (String) $layout - Layout de filtro.
     */
    public static function obterFileName($layout)
    {
        $MIOLO = MIOLO::getInstance();
        $filename = null;
        
        if ( $layout == self::LAYOUT_SISPRO )
        {
            $filename = $MIOLO->GetModulePath('accountancy', 'doc/sisproLayout.ods');
        }
        elseif ( $layout == self::LAYOUT_GLANDATA )
        {
            $filename = $MIOLO->GetModulePath('accountancy', 'doc/glandataLayout.docx');
        }
        
        return $filename;
    }
    
    /**
     * Gera conteúdo a partir dos dados já gerados.
     * 
     * @param (String) $layout - Layout para gerar dados.
     * 
     * @return (String) - Conteúdo que vai gerar no arquivo.
     */
    public function gerarConteudoDoArquivo($layout)
    {   
        if ( $layout == self::LAYOUT_SISPRO )
        {
            $content = $this->gerarConteudoSispro();
        }
        elseif ( $layout == self::LAYOUT_GLANDATA )
        {
            $content = $this->gerarConteudoGlandata();
        }
        else
        {
            throw new Exception(_M("O sistema não está programado para gerar arquivos deste layout."));
        }
        
        return $content;
    }
    
    /**
     * Gera o conteúdo do arquivo do layout glandata.
     * 
     * @return (String) $content - Conteúdo gerado e ajustado.
     */
    public function gerarConteudoGlandata()
    {
        $content = '';
        
        $lotes = $this->layout->getLotes();

        //Chaves que levam um espaço antes
        $espaco = array(
            1 => null,
            2 => null,
            3 => null,
            4 => null,
            5 => null,
            7 => null,
            10 => null);
        
        foreach ( $lotes as $codLote => $lote )
        {
            $corpo = $lote['corpo'];
            
            foreach ( $corpo as $linha )
            {
                foreach ( $linha as $campo )
                {
                    //Em alguns campos, existe um separador (espaço em branco) entre os campos, mais detalhes, verificar layout
                    if ( array_key_exists($campo->id, $espaco) )
                    {
                        $content .= ' ';
                    }
                    
                    $content .= $campo->conteudo;
                }
                
                //Quebra linha
                $content .= "\r\n";
            }
        }
        
        return $content;
    }
    
    /**
     * Ajusta e gera conteúdo para o layout SISPRO.
     * 
     * @return (String) $content - Conteúdo a ser gerado.
     */
    public function gerarConteudoSispro()
    {
        $content = '';
        
        $lotes = $this->layout->getLotes();
        
        foreach ( $lotes as $codLote => $lote )
        {
            // Cabeçalho
            $cabecalhos = $lote['cabecalho'];
            foreach ( $cabecalhos as $cabecalho )
            {
                $cabecalho instanceof campoDoArquivo;
                $content .= str_pad($cabecalho->conteudo, $cabecalho->tamanho, $this->layout->getDelimitador());
            }
            // Quebra de linha
            $content .= "\r\n";
            
            //Corpo
            $corpo = $lote['corpo'];
            foreach ( $corpo as $linhas )
            {
                foreach ( $linhas as $linha )
                {
                    $linha instanceof campoDoArquivo;
                    $content .= str_pad($linha->conteudo, $linha->tamanho, $this->layout->getDelimitador());
                }
                
                // Quebra de linha
                $content .= "\r\n";
            }
            
            // Rodapé
            $rodape = $lote['rodape'];
            foreach ( $rodape as $campoRodape )
            {
                $campoRodape instanceof campoDoArquivo;
                $content .= str_pad($campoRodape->conteudo, $campoRodape->tamanho, $this->layout->getDelimitador());
            }
            
            // Quebra de linha
            $content .= "\r\n";
        }
        
        return $content;
    }
    
}

?>
