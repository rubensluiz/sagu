<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC004'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    public $error;
    /**
     * Defines the footer for this report
     */
    public function Footer()
    {
        $module = MIOLO::getCurrentModule();

    }

    /**
     * Defines the header for this report
     */
    public function Header()
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();

        $business = new BusinessAccountancyBusSyntheticReasonAssistantOfFutureExercisesResults();


        if ( $this->showHeader )
        {
            $this->SetMargins('35', '10');
            
            if ( strlen($this->endPage) > 0 )
            {
                $page = ( ( $this->page - 1 ) % ($this->endPage - $this->beginPage + 1) ) + $this->beginPage;
            }
            else
            {
                $page = $this->page - 1 + $this->beginPage;
            }
            
            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
            $this->setY(10);
            $this->cell(200, 3, _M('Razão auxiliar sintético de resultados de exercícios futuros', $module), 0, 0, 'L');
            $this->ln();

            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 7);
            $companyName = $business->getDefaultCompanyName();
            $this->cell(125, 5, $companyName, 0, 0, 'L');
            $this->cell(100, 5, _M('Emissão', $module) . ': ' . $this->reportEmissionDate, 0, 0, 'L');
            $this->cell(15, 5, _M('Página', $module) . ': ' . $page, 0, 0, 'R');
            $this->ln();
            
            $this->cell(240,0, '', 1, 1, 'L');
            $this->ln(0.5);
            $this->cell(240,0, '', 1, 1, 'L');
            $this->ln();
            
            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
               
            $this->cell(100,5, _M('Conta', $module),          0, 0, 'L');
            $this->cell(40,5,  _M('Saldo anterior', $module), 0, 0, 'R');
            $this->cell(33,5, _M('Débito', $module),       0, 0, 'R');
            $this->cell(33,5, _M('Crédito', $module),  0, 0, 'R');
            $this->cell(34,5, _M('Saldo atual', $module),      0, 0, 'R');
            $this->ln();

            $this->cell(240,0, '', 1, 1, 'L');
            $this->ln(0.5);
            $this->cell(240,0, '', 1, 1, 'L');
            $this->ln();
            
        }
    }
    

    /**
     * Function to select the persons from a account scheme
     *
     */
    public function arrangeAccountSchemePersons($data, $accountSchemeId, $balanceDate, $accountPreviousBalance)
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();
        
        $business = new BusinessAccountancyBusSyntheticReasonAssistantOfFutureExercisesResults();

        //percorre os dados do cursp
        foreach ( $data as $key => $value )
        {
            
            //testa se a pessoa alterou ou é a ultima volta do foreach
            if ( $personId != $value[5] || $key == (count($data)-1))
            {
                //testa se o personid está setado ou se o vetor tem apenas 1 linha de dados
                if ( isset($personId) || ( count($data) == 1) )
                {

                    // se for última volta do foreach computa os dados
                    if ( $key == (count($data)-1) )
                    {
                        $person[] = $value;
                    }

                    if ( strlen($person[0][5]) > 0 )
                    {
                        //imprime nome da pessoa
                        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
                        $this->cell(100, 4, $person[0][5] . ' - ' . $person[0][6], 0, 0, 'L');

                        //imprime saldo anterior da pessoa
                        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), '', 7);                    
                        $previousBalance = $business->getPersonBalance($accountSchemeId, $balanceDate, $person[0][5]);
                        $this->cell(40, 4, FINANCE::formatFinanceReportNumber(ACCOUNTANCY::returnOperationType($previousBalance, null, true)), 0, 0, 'R');  
                        
                        //percorre os dados da pessoa pra computar os lançamentos
                        foreach ( $person as $content )
                        {

                            $entry = ACCOUNTANCY::returnOperationType($content[11], $content[9]);
                            
                            if ( $entry->operationType == 'D' )
                            {
                                $credit[] = $entry->value;
                            }
                            else 
                            {
                                $debit[]  = $entry->value;
                            }
                        }
                        
                        //calcula total de débito e crédito para pessoa
                        if ( isset($debit) )
                        {
                            $totalDebit  = SAGU::calcNumber(implode('+', $debit));
                        }
                        if ( isset($credit) )
                        {
                            $totalCredit  = SAGU::calcNumber(implode('+', $credit));
                        }
                        
                        if ( strlen($totalDebit) > 0 )
                        {
                            $totalDebitPrint = FINANCE::formatFinanceReportNumber($totalDebit);
                        }
                        if ( strlen($totalCredit) > 0 )
                        {
                            $totalCreditPrint = FINANCE::formatFinanceReportNumber($totalCredit);
                        }

                        $totalDebit  ? $totalDebit  : $totalDebit = 0;                    
                        $totalCredit ? $totalCredit : $totalCredit= 0;

                        //imprime total de débito e crédito e saldo da pessoa
                        $currentBalance = FINANCE::formatFinanceReportNumber(ACCOUNTANCY::returnOperationType(SAGU::calcNumber($previousBalance . ' - ' . $totalDebit . ' + ' . $totalCredit), null, true));
                        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), '', 7);
                        $this->cell(33, 4, $totalDebitPrint,  0, 0, 'R');
                        $this->cell(33, 4, $totalCreditPrint, 0, 0, 'R');
                        $this->cell(34, 4, $currentBalance, 0, 0, 'R');
                        
                        $totalTotalDebit[]  = $totalDebit;
                        $totalTotalCredit[] = $totalCredit;
                        
                        unset($person, $debit, $credit, $totalDebit, $totalCredit, $totalDebitPrint, $totalCreditPrint);

                        $this->ln();
                    }
                }
            }


            $person[] = $value;
            
            $personId = $value[5];
        }

        //calcula total de débitos e créditos por curso
        if ( isset($totalTotalDebit) )
        {
            $totalDebit  = SAGU::calcNumber(implode('+', $totalTotalDebit));
        }
        if ( isset($totalTotalCredit) )
        {
            $totalCredit = SAGU::calcNumber(implode('+', $totalTotalCredit));
        }

        // imprime os totais por curso
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 8);
        $this->cell(20,  4, '',                                               0, 0, 'L');
        $this->cell(120, 4, _M('Totais da conta', $module),                    0, 0, 'L');
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), 'B', 8);
        $this->cell(33,  4, FINANCE::formatFinanceReportNumber($totalDebit),  0, 0, 'R');
        $this->cell(33,  4, FINANCE::formatFinanceReportNumber($totalCredit), 0, 0, 'R');
        $this->ln();

        //calcula o movimento do curso
        $totalDebit  ? $totalDebit  : $totalDebit = 0;                    
        $totalCredit ? $totalCredit : $totalCredit= 0;
        $movement = SAGU::calcNumber($totalDebit . ' - ' . $totalCredit);
        $accountSchemeId = ACCOUNTANCY::convertAccountSchemePrefixFromIncomeForecastToInvoice($value[12]);                       

        // calcula e imprime o novo saldo da conta
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 8);        
        $this->cell(20,  4, '', 0, 0, 'L');
        $this->cell(120, 4, _M('Saldo final da conta', $module) . ' ' . FINANCE::formatAccountSchemeId($accountSchemeId), 0, 0, 'L');
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), 'B', 8);
        $balance = SAGU::calcNumber($accountPreviousBalance . ' - ' . $movement);
        $this->cell(33,  4, '',  0, 0, 'R');
        $this->cell(33,  4, '',  0, 0, 'R');
        $this->cell(34,  4, FINANCE::formatFinanceReportNumber(ACCOUNTANCY::returnOperationType($balance, null, true)),  0, 0, 'R');
        $this->ln();

    } 
    
    /**
     * Function to select the persons from a account scheme
     *
     */
    public function printAccountPreviousBalance($balance)
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();
        
        //imprime o saldo anterior do curso
        $balance = FINANCE::formatFinanceReportNumber(ACCOUNTANCY::returnOperationType($balance, null, true));
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), 'B', 7);
        $this->cell(100, 4, '', 0, 0, 'L');
        $this->cell(40, 4, $balance, 1, 0, 'R');
        $this->ln();
    }


}


/**
 * PDF extension to generate report
 */
class RptSyntheticReasonAssistantOfFutureExercisesResults
{


    /**
     * Method to generate the report
     */
    public function RptSyntheticReasonAssistantOfFutureExercisesResults($data = null, $filters = null )
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();

        set_time_limit(0);

        if ( is_array($data) && ( count($data) > 0 ) )
        {
            $business = new BusinessAccountancyBusSyntheticReasonAssistantOfFutureExercisesResults();
    
            // Generating PDF file
            $pdf = new PDF();
    
            $pdf->showHeader = true;
    
            $pdf->reportEmissionDate = $filters->emissionDate;
    
            if ( $filters->beginPage )
            {
                $pdf->beginPage  = $filters->beginPage;
            }
            else
            {
                $pdf->beginPage  = 0;
            }
            
            $pdf->endPage = $filters->endPage;
            
            $pdf->aliasNbPages();
    
            // First page
            $pdf->addPage('L', 'mm', 'A4');
    
            $pdf->SetMargins('35', '10');
    
            foreach ( $data as $key => $value )
            {
    
                // testa se o curso mudou
                // se sim organiza dados do curso
                // se não, vai guardando dados do curso num array
                
                if ( ($course != $value[0]) )
                {
    
                    $accountSchemeId = $person[0][12];
                    
                    // necessário para a primeira volta do foreach
                    if ( isset($course) )
                    {
                        // chama função que organiza os dados de cada curso
                        $pdf->arrangeAccountSchemePersons($person, $accountSchemeId, $filters->beginDate, $previousBalance);
                        unset ($person);                
                    }
    
                    //imprime cabeçalho do curso
                    $accountScheme   = $business->getAccountSchemeDescription($value[12]);
                    $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
                    $accountSchemeId = ACCOUNTANCY::convertAccountSchemePrefixFromIncomeForecastToInvoice($value[12]);                       
                    $pdf->ln();
                    $pdf->cell(240,0, '', 1, 1, 'L');
                    $pdf->cell(240,4, FINANCE::formatAccountSchemeId($accountSchemeId) . ' - ' . $accountScheme, 0, 0, 'L');
                    $pdf->ln();
                    $pdf->cell(240,0, '', 1, 1, 'L');
                    
                    //imprime saldo anterior da conta do curso
                    $pdf->printAccountPreviousBalance($value[13]);
                    $previousBalance = $value[13];
    
                }
    
                // vai guardando dados do curso
                $person[] = $value;
                
                //se for última volta do foreach, imprime dados do curso
                if ( $key == (count($data)-1) )
                {
                        $pdf->arrangeAccountSchemePersons($person, $value[12], $filters->beginDate, $previousBalance);
                }
    
                $course = $value[0];
            }
    
            $pdf->ln();
            $pdf->cell(240,0, ' ',  1, 1, 'L');
    
            $pdf->close();
            $pdf->output();
        }
        else
        {
            $this->error = true;
        }
    }
}

?>
