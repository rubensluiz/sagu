<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC002');
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    /**
     * Defines the footer for this report
     */
    public function Footer()
    {
        $module = MIOLO::getCurrentModule();
    }

    /**
     * Defines the header for this report
     */
    public function Header()
    {
        if ( strlen($this->endPage) > 0 )
        {
            $page = ( ( $this->page - 1 ) % ($this->endPage - $this->beginPage + 1) ) + $this->beginPage;
        }
        else
        {
            $page = $this->page - 1 + $this->beginPage;
        }
       
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();
        
        $business = new BusinessBasicBusCompany();

        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 8);
        $companyConf = $business->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
        $this->cell(180, 3, _M('Razão auxiliar de contas a receber', $module), 0, 0, 'L');
        $this->cell(100, 3, _M('Número da página', $module) . ': ' . $page,           0, 0, 'R');
        $this->ln();
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);
        $this->cell(180, 3, $companyConf->name, 0, 0, 'L');
        $this->cell(50,  3, _M('Emissão', $module) . ': ' . $this->reportEmissionDate, 0, 0, 'L');
        $this->ln();
        $this->cell(280, 0, '', 1, 1, 'L');
        $this->ln(0.5);
        $this->cell(280, 0, '', 1, 1, 'L');
        $this->ln();
        if (strlen($this->reportAccountScheme)>0)
        {
            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 8);
            $this->cell(100, 3, ' ', 'TB', 0);
            $this->cell(180, 3, _M('Conta', $module).': '.$this->reportAccountSchemeToShow, 'TB', 0, 'L');
            $this->ln();
            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), 'B', 8);

            // Show the previous balance
            $this->cell(200, 3, '', '', 0);
            $this->ln();
        }
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), '', 8);
    }
}

/**
 * PDF extension to generate report
 */
class RptReasonAssistantOfReceivableAccounts
{
    /**
     * Method to generate the report
     */
    public function RptReasonAssistantOfReceivableAccounts($data = null)
    {
        set_time_limit(0);
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();
         
        $business = new BusinessAccountancyBusReasonAssistantOfReceivableAccounts();
        
        // Generating PDF file
        $pdf = new PDF();
        $pdf->setMargins(10, 20);
        $pdf->aliasNbPages();
        $pdf->beginPage = strlen($data->beginPage)>0 ? $data->beginPage : 0;
        $pdf->endPage   = strlen($data->endPage)>0 ? $data->endPage : 0;
        $pdf->reportEmissionDate = strlen($data->reportEmissionDate)>0 ? $data->reportEmissionDate : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));

        $business   = new BusinessAccountancyBusReasonAssistantOfReceivableAccounts();

        $business->beginTransaction();
        $business->getReasonAssistantOfReceivableAccountsData($data);
        
        // First page
        $pdf->addPage('L', 'mm', 'A4');
        
        while (true)
        {

            $dataReport = $business->fetchData(5000);

            if ( ! count($dataReport) > 0 )
            {
                break;
            }
            else
            {

                foreach ($dataReport as $key => $dr)
                {
                    // Verify if a different or new account scheme
                    if ($pdf->reportAccountScheme != $dr[1].$dr[2].$dr[0])
                    {
                        // Get the previous balance for the specific account
                        $dataPrevious->accountSuffix  = $dr[0];
                        $dataPrevious->accountPrefix  = $dr[1];
                        $dataPrevious->accountRadical = $dr[2];
                        $dataPrevious->beginDate      = $data->beginDate;
                        $previousBalance = $business->getAccountSchemePreviousBalance($dataPrevious);

                        // Inversion of signal to get inversion of Credit/Debit
                        $previousBalance = ACCOUNTANCY::returnOperationType(SAGU::calcNumber($previousBalance->value.'*-1'), $previousBalance->operationType);
                        if (SAGU::formatNumber($previousBalance->value) != SAGU::formatNumber(0))
                        {
                            // Put account scheme data
                            // Main title for account
                            $pdf->reportAccountScheme = $dr[1].$dr[2].$dr[0];
                            $pdf->reportAccountSchemeToShow = FINANCE::formatAccountSchemeId($dr[1].$dr[2].$dr[0]).' - '. $business->getAccountSchemeDescription($dr[1].$dr[2].$dr[0]);
                            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 8);
                            $pdf->cell(100, 3, ' ', 'TB', 0);
                            $pdf->cell(180, 3, _M('Conta', $module).': '.FINANCE::formatAccountSchemeId($dr[1].$dr[2].$dr[0]).' - '. $business->getAccountSchemeDescription($dr[1].$dr[2].$dr[0]), 'TB', 0, 'L');
                            $pdf->ln();
                            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), 'B', 8);

                            // Show the previous balance
                            $pdf->cell(200, 3, '', '', 0);
                            $pdf->cell(40,  3, _M('Saldo anterior da conta', $module), 'TBL', 0);
                            $pdf->cell(30,  3, FINANCE::formatFinanceReportNumber($previousBalance->value), 'TB', 0, 0, 'R');
                            $pdf->cell(10,  3, $previousBalance->operationType, 'TBR');
                            $pdf->ln();
                        }
                    }
                    if (strlen($dr[6])>0)
                    {
                        // Verify if is a different person
                        if (($personId != $dr[6]) && (strlen($dr[6])>0))
                        {
                            $pdf->ln();
                            // Put person header
                            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), 'B', 8);
                            $personId = $dr[6];
                            $pdf->cell(280, 3, $dr[6].' - '.$dr[7], 0, 0);
                            $pdf->ln();
                            $pdf->cell(280, 0.5, '', 'TB', 0, 0);
                            $pdf->ln();
                            $pdf->cell(25, 3, _M('Data', $module), 0, 0);
                            $pdf->cell(60, 3, _M('Operação', $module), 0, 0);
                            $pdf->cell(35, 3, _M('Título', $module), 0, 0);
                            $pdf->cell(25, 3, _M('Emissão', $module), 0, 0);
                            $pdf->cell(25, 3, _M('Vencimento', $module), 0, 0);
                            $pdf->cell(35, 3, _M('Débito', $module), 0, 0, 0, 'R');
                            $pdf->cell(35, 3, _M('Crédito', $module), 0, 0, 0, 'R');
                            $pdf->cell(35, 3, _M('Saldo', $module), 0, 0, 0, 'R');
                            $pdf->cell(5,  3, '', 0, 0);
                            $pdf->ln();
                            $pdf->cell(280, 0.5, '', 'TB', 0, 0);
                            $pdf->ln();
                            
                            // Accounts data...
                            $dataPrevious->accountSuffix  = $dr[0];
                            $dataPrevious->accountPrefix  = $dr[1];
                            $dataPrevious->accountRadical = $dr[2];
                            $dataPrevious->beginDate      = $data->beginDate;
                            $dataPrevious->personId       = $personId;
                            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), '', 8);
                            $personPreviousBalance = $business->getPersonPreviousBalance($dataPrevious);

                            $personPreviousBalance = ACCOUNTANCY::returnOperationType(SAGU::calcNumber($personPreviousBalance->value.'*-1'), $personPreviousBalance->operationType);
                            $pdf->Cell(200, 3, _M('Saldo anterior', $module), 0, 0, 'R');
                            $pdf->Cell(75,  3, FINANCE::formatFinanceReportNumber($personPreviousBalance->value), 0, 0, 'R');
                            $pdf->Cell(5,   3, $personPreviousBalance->operationType, 0, 0, 'L');
                            $pdf->ln();
                            $accountancyLine = $personPreviousBalance;
                        }
                        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), '', 8);
                        $pdf->cell(25, 2.55, $dr[12], 0, 0);
                        $pdf->cell(60, 2.55, $dr[10], 0, 0);
                        $pdf->cell(35, 2.55, $dr[3],  0, 0);
                        $pdf->cell(25, 2.55, '', 0, 0);
                        $pdf->cell(25, 2.55, '', 0, 0);
                        
                        // Accountancy report - Invert Debit and Credit
                        $formattedValue = ACCOUNTANCY::returnOperationType(SAGU::calcNumber(strlen($dr[13])> 0 ? $dr[13].'*-1' : 0), $dr[11]);
                        $dr[11] = $formattedValue->operationType;
                        $dr[13] = $formattedValue->value;
                        $pdf->cell(35, 2.55, $dr[11] == 'C' ? FINANCE::formatFinanceReportNumber($dr[13]) : '', 0, 0, 0, 'R');
                        $pdf->cell(35, 2.55, $dr[11] == 'D' ? FINANCE::formatFinanceReportNumber($dr[13]) : '', 0, 0, 0, 'R');

                        // Calculate total accountancy
                        $operator               = $dr[11] == 'D' ? '-' : '+';
                        $dataPerson[$dr[11]][]  = $dr[13];
                        $dataAccount[$dr[11]][] = $dr[13];
                        $accountancyLine->value = SAGU::calcNumber($accountancyLine->value.$operator.$dr[13]);

                        // Invert signal to adjust sistem operation type
                        $pdf->cell(35, 2.55, FINANCE::formatFinanceReportNumber($accountancyLine->value), 0, 0, 0, 'R');
                        $pdf->cell(5,  2.55, $accountancyLine->operationType, 0, 0);
                        $pdf->ln();
                    }
                    else
                    {
                        $personId = $dr[6];
                    }

                    // Make the totals of person
                    if (($dataReport[$key+1][6] != $personId) && (strlen($personId)>0))
                    {
                        // This variable contains the final balance
                        $accountSchemeFinalBalance[] = $accountancyLine;
                        $dataPerson['C'] = is_array($dataPerson['C']) ? SAGU::calcNumber(implode('+', $dataPerson['C'])) : SAGU::formatNumber(0);
                        $dataPerson['D'] = is_array($dataPerson['D']) ? SAGU::calcNumber(implode('+', $dataPerson['D'])) : SAGU::formatNumber(0);
                        $pdf->cell(70,  3, '', 0, 0);
                        $pdf->cell(100, 3, _M('Totais', $module), 0, 0);
                        $pdf->cell(35,  3, FINANCE::formatFinanceReportNumber($dataPerson['C']), 0, 0, 'R');
                        $pdf->cell(35,  3, FINANCE::formatFinanceReportNumber($dataPerson['D']), 0, 0, 'R');
                        unset($dataPerson);
                        $pdf->ln();
                    }

                    // Make the totals for account
                    if (($pdf->reportAccountScheme != null) && ($dataReport[$key+1][1].$dataReport[$key+1][2].$dataReport[$key+1][0] != $pdf->reportAccountScheme))
                    {
                        $dataAccountToShow['C'] = is_array($dataAccount['C']) ? SAGU::calcNumber(implode('+', $dataAccount['C'])) : SAGU::formatNumber(0);
                        $dataAccountToShow['D'] = is_array($dataAccount['D']) ? SAGU::calcNumber(implode('+', $dataAccount['D'])) : SAGU::formatNumber(0);
                        unset($accountSchemeFinalBalanceCalc);
                        
                        if (is_array($accountSchemeFinalBalance))
                        {
                            foreach ($accountSchemeFinalBalance as $acfb)
                            {
                               $accountSchemeFinalBalanceCalc[] = '('.ACCOUNTANCY::returnSignal($acfb->value, $acfb->operationType).')';
                            }
                            unset($accountSchemeFinalBalance);

                            $accountSchemeFinalBalanceCalc = ACCOUNTANCY::returnOperationType(SAGU::calcNumber('('.implode('+', $accountSchemeFinalBalanceCalc).')*-1'));
                        }
                        else
                        {
                            $accountSchemeFinalBalanceCalc = $previousBalance;
                        }
                        
                        //
                        if ((($dr[1].$dr[2].$dr[0] != $dataReport[$key+1][1].$dataReport[$key+1][2].$dataReport[$key+1][0]) && (SAGU::formatNumber($previousBalance->value) != SAGU::formatNumber(0))) || ($dataReport[$key+1][1].$dataReport[$key+1][2].$dataReport[$key+1][0] == null))
                        {
                           // Totals of account
                           $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_FINANCE_REPORT_FONT'), 'B', 8);
                           $pdf->cell(70, 3, '', 0, 0);
                           if (($dataAccountToShow['C'] != SAGU::formatNumber(0)) || ($dataAccountToShow['D'] != SAGU::formatNumber(0)))
                           {
                               $pdf->cell(100, 3, _M('Totais da conta', $module), 0, 0);
                               $pdf->cell(35,  3, FINANCE::formatFinanceReportNumber($dataAccountToShow['C']), 0, 0, 'R');
                               $pdf->cell(35,  3, FINANCE::formatFinanceReportNumber($dataAccountToShow['D']), 0, 0, 'R');
                               unset($dataAccountToShow);
                           }

                           $accountSchemeFinalBalanceCalc = ACCOUNTANCY::returnOperationType(SAGU::calcNumber($accountSchemeFinalBalanceCalc->value.'*-1'), $accountSchemeFinalBalanceCalc->operationType);
                           $pdf->ln();
                           $pdf->cell(70,  3, '', 0, 0);
                           $pdf->cell(100, 3, _M('Saldo final da conta', $module).' '.FINANCE::formatAccountSchemeId($pdf->reportAccountScheme));
                           $pdf->cell(35,  3, '', 'TBL', 0);
                           $pdf->cell(35,  3, FINANCE::formatFinanceReportNumber($accountSchemeFinalBalanceCalc->value).'  ', 'TBR', 0, 0);
                           $pdf->cell(35,  3, '');
                           $pdf->cell(5,   3, $accountSchemeFinalBalanceCalc->operationType, 0, 0, 'L');
                           $dataAccount['C'] = $dataAccount['D'] = null;
                           $pdf->ln();
                           $pdf->ln();
                       }
                   }
                }
            }
        }
        $pdf->close();
        $pdf->output();
    }
}
?>
