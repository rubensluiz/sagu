<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class get default operations and variables for accountancy module
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();

/**
 * Class to get default operations and variables for accountancy module
 *
 * @author: William Prigol Lopes [william@solis.coop.br]
 *
 */
class ACCOUNTANCY
{
    /**
     *
     * Function that returns the operation type of normal operations
     *
     * @param: $value: integer or float value
     *
     * @return (object): A object containing the absolute value and the operation type (Debit or credit)
     *
     */
    function returnOperationType($value, $operationType = null, $concatenate = false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'accountancy';
        $db = SDatabase::getInstance();

        if ( $operationType != null )
        {
            $sql = ' SELECT CASE WHEN ? > '.SAGU::formatNumber(0).'
                                 THEN ?
                                 ELSE ?
                            END ';
                            
            $args = array($value,
                          $operationType,
                          $operationType == 'C' ? 'D' : 'C');
        }
        else
        {
            $sql = ' SELECT CASE WHEN ? > '.SAGU::formatNumber(0).'
                                 THEN \'C\'
                                 ELSE \'D\'
                            END ';
                            
            $args = array($value);
        }

        $ret = $db->query(SAGU::prepare($sql, $args));
        $return->value = abs($value);
        $return->operationType = $ret[0][0];

        if ( $concatenate == false )
        {
            return $return;
        }
        else
        {
            return $return->value . ' ' . $return->operationType;
        }
    }
    
    /**
     *
     * Function that returns the operation type of normal operations
     *
     * @param: $value: integer or float value
     *
     * @return (object): A object containing the absolute value and the operation type (Debit or credit)
     *
     */
    function returnSignal($value, $operationType = 'C')
    {
        if ( $operationType == 'C' )
        {
            return $value;
        }
        else
        {
            return $value*(-1.00);
        }
    }

    /**
     *
     * Function that returns the account scheme converted to invoice
     *
     * @param: $accountSchemeId: varchar
     *
     * @return (varchar): a varchar with the account scheme converted
     *
     */
    function convertAccountSchemePrefixFromIncomeForecastToInvoice($accountSchemeId)
    {
        $prefix = substr($accountSchemeId, 0, 3);
        
        if ( $prefix == SAGU::getParameter('ACCOUNTANCY', 'ACCOUNT_SCHEME_INCOME_FORECAST_PREFIX') )
        {
            $accountSchemeId = substr($accountSchemeId, 3, strlen($accountSchemeId)-1);
            
            return SAGU::getParameter('ACCOUNTANCY', 'ACCOUNT_SCHEME_INVOICE_PREFIX') . $accountSchemeId;
        }
        else
        {
            return $accountSchemeId;
        }
    }


     /** 
      * Return a boolean indicating if $date was already accounted (true) or not (false).
      *
      * @param: $date (date): the date to be tested against latest accounting date
      *
      * @returns (boolean): True when $date was already accounted. Otherwise, false.
      */
     public function dateAlreadyAccounted($date)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $db     = SDatabase::getInstance();

        $sql = 'SELECT TO_DATE(? , \''. SAGU::getParameter('BASIC', 'MASK_DATE') .'\' ) <= MAX(recordDate)
                  FROM accAccountingLimit';

        $return = $db->query(SAGU::prepare($sql,$date));
        
        return ($return[0][0] == DB_TRUE);
     }
     
    /** 
     * Return the last accounting limit date
     *
     * @param: null
     *
     * @returns (varchar): Returns the value formatted
     *
     */
     public function getLastAccountingDate()
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $db     = SDatabase::getInstance();

        $sql = ' SELECT  TO_CHAR(MAX(recordDate) , \''. SAGU::getParameter('BASIC', 'MASK_DATE') .'\' ) 
                   FROM accAccountingLimit ';

        $return = $db->query(SAGU::Prepare($sql,$date));

        return $return[0][0];
     }
}
?>
