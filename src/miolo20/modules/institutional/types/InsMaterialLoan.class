<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 02/06/2011
 */
class InsMaterialLoan extends SType
{
    /**
     * @AttributeType integer
     */
    protected $materialLoanId;
    /**
     * @AttributeType integer
     */
    protected $materialRequestId;
    /**
     * @AttributeType integer
     */
    protected $personId;
    /**
     * @AttributeType integer
     */
    protected $materialId;
    /**
     * @AttributeType timestamp
     */
    protected $beginDate;
    /**
     * @AttributeType timestamp
     */
    protected $expectedEndDate;
    /**
     * @AttributeType timestamp
     */
    protected $endDate;
    /**
     * @AttributeType text
     */
    protected $returnObs;
    /**
     * @AttributeType InsMaterialRequest
     */
    protected $materialRequest;
    /**
     * @AttributeType InsMaterial
     */
    protected $material;
    /**
     * @AttributeType BasPhysicalPerson
     */
    protected $physicalPerson;
    
    /*
     * @AttributeType timestamp
     */
    protected $loanDate;
    
    /*
     * @AttributeType timestamp
     */
    protected $cancelDate;

    /**
     * @AttributeType integer Atributo que armazena o status atual do empréstimo
     */
    protected $statusId;

    public function __set($name, $value)
    {
        if ( $name == 'material' )
        {
            $this->materialId = $value->materialId;
        }
        
        return parent::__set($name, $value);
    }
    
    public function __get($name)
    {
        $MIOLO = MIOLO::getInstance();

        /*
         * Obtém o material
         */
        if ( $name == 'material' && !(count($this->material) > 0 ) && (strlen($this->materialId) > 0 ) )
        {
            // Material
            $this->material = new InsMaterial($this->materialId);
        }

        /*
         * Obtém a solicitação de material
         */
        if ( $name == 'materialRequest' && !(count($this->materialRequest) > 0 ) && (strlen($this->materialRequestId) > 0 ) )
        {
            // Solicitação de material
            $this->materialRequest = new InsMaterialRequest($this->materialRequestId);
        }

        /*
         * Obtém o solicitante
         */
        if ( $name == 'physicalPerson' && !(count($this->physicalPerson) > 0 ) && (strlen($this->personId) > 0 ) )
        {
            // MaterialType
            $busPP = new BusinessBasicBusPhysicalPerson();
            $this->physicalPerson = $busPP->getPhysicalPerson($this->personId);
        }

        return parent::__get($name);
    }
    
    /**
     * Construtor
     *
     * @param type $materialLoanId
     */
    public function __construct($materialLoanId = null)
    {
        if ( (strlen($materialLoanId) > 0 ) )
        {
            $this->materialLoanId = $materialLoanId;
            $this->populate();
        }
    }

    /**
     * Search
     *
     * @param stdClass $filters
     * @return materialLoan
     */
    public static function search($filters)
    {
        $sql = 'SELECT materialLoanId
                  FROM ins.materialLoan';

        $where = '';
        $params = array();
        foreach ( $filters as $key=>$value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0 ) )
            {
                $where.=" AND {$key} = ?";
                $params[] = $value;
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY materialLoanId ';
        $result = SDatabase::query($sql, $params);
        $retVal = array();

        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new InsMaterialLoan($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Search para a Grid
     *
     * @param stdClass $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = "SELECT D.materialLoanId,
                       D.materialRequestId,
                       D.personId,
                       D.materialId,
                       TO_CHAR(D.beginDate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME') . "'),
                       TO_CHAR(D.expectedEndDate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME') . "'),
                       TO_CHAR(D.enddate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME') . "'),
                       D.returnObs
                  FROM ins.material A
             LEFT JOIN ins.materialType B
                    ON A.materialTypeId = B.materialTypeId
             LEFT JOIN ins.materialRequest C
                    ON A.materialId = C.materialId
             LEFT JOIN ins.materialLoan D
                    ON A.materialId = D.materialId";

        $where = '';
        $params = array();
        if ( strlen($filters->materialTypeId) > 0 )
        {
            $where .= ' AND A.materialTypeId = ?';
            $params[] = $filters->materialTypeId;
        }

        if ( strlen($filters->isAvailable) > 0 )
        {
            $where .= ' AND A.isAvailable = ?';
            $params[] = $filters->isAvailable;
        }

        if ( strlen($filters->materialLoanId) > 0 )
        {
            $where .= ' AND D.materialLoanId = ?';
            $params[] = $filters->materialLoanId;
        }

        if ( strlen($filters->materialRequestId) > 0 )
        {
            $where .= ' AND D.materialRequestId = ?';
            $params[] = $filters->materialRequestId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND D.personId = ?';
            $params[] = $filters->personId;
        }

        if ( strlen($filters->materialId) > 0 )
        {
            $where .= ' AND D.materialId = ?';
            $params[] = $filters->materialId;
        }

        if ( strlen($filters->beginDate) > 0 )
        {
            $where .= " AND D.beginDate = TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."')";
            $params[] = $filters->beginDate;
        }

        if ( strlen($filters->expectedEndDate) > 0 )
        {
            $where .= " AND D.expectedEndDate = TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."')";
            $params[] = $filters->expectedEndDate;
        }

        if ( strlen($filters->endDate) > 0 )
        {
            $where .= " AND D.endDate = TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."')";
            $params[] = $filters->endDate;
        }

        if ( strlen($filters->returnObs) > 0 )
        {
            $where .= ' AND UNACCENT(D.returnObs) ILIKE UNACCENT(?) ';
            $params[] = $filters->returnObs.'%';
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY D.materialLoanId';

            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    public static function searchGridConsult($filters = null)
    {
        $maskTimestamp = SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME');

        $sql = sprintf("SELECT
                       A.materialLoanId,
                       E.personId,
                       E.name,
                       TO_CHAR(A.beginDate, '%s'),
                       TO_CHAR(A.expectedEndDate, '%s'),
                       C.description AS materialType,
                       B.description AS material,
                       TO_CHAR(A.endDate, '%s'),
                       ins.materialLoanStatusId(A.materialLoanId) AS statusId,
                       ins.getStatusDescription(ins.materialLoanStatusId(A.materialLoanId)) AS status
                  FROM ins.materialLoan A
             LEFT JOIN ins.materialRequest R
                    ON (R.materialRequestId = A.materialRequestId)
            INNER JOIN ins.material B
                    ON (B.materialId = A.materialId)
            INNER JOIN ins.materialType C
                    ON (C.materialTypeId = B.materialTypeId)
       INNER JOIN ONLY basPhysicalPerson E
                    ON (A.personId = E.personId)", $maskTimestamp, $maskTimestamp, $maskTimestamp);

        $params = array();
        if ( strlen($filters->materialRequestId) > 0 )
        {
            $where .= ' AND R.materialRequestId = ?';
            $params[] = $filters->materialRequestId;
        }

        if ( strlen($filters->materialId) > 0 )
        {
            $where .= ' AND A.materialId = ? ';
            $params[] = $filters->materialId;
        }

        if ( strlen($filters->materialTypeId) > 0 )
        {
            $where .= ' AND C.materialTypeid = ?';
            $params[] = $filters->materialTypeId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $params[] = $filters->personId;
        }

        if ( strlen($filters->beginDate) > 0 )
        {
            $where .= ' AND A.beginDate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\')';
            $params[] = $filters->beginDate;
        }

        if ( strlen($filters->endDate) > 0 )
        {
            $where .= ' AND A.endDate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\')';
            $params[] = $filters->endDate;
        }

        if ( strlen($filters->cancelDate) > 0 )
        {
            $where .= ' AND A.cancelDate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\')';
            $params[] = $filters->cancelDate;
        }

        // Filtros avancados de datas (Retirada prevista, Devolucao prevista, Devolucao)
        // Utilizado no formulario Consulta de emprestimos (FrmMaterialLoanSearch)
        if ( (strlen($filters->beginDateMin) > 0 ) && (strlen($filters->beginDateMax) > 0 ) )
        {
            $where .= sprintf(" AND (A.beginDate BETWEEN TO_TIMESTAMP(?, '%s') AND TO_TIMESTAMP(?, '%s') ) ", $maskTimestamp, $maskTimestamp);
            $params[] = $filters->beginDateMin;
            $params[] = $filters->beginDateMax;
        }
        if ( (strlen($filters->expectedEndDateMin) > 0 ) && (strlen($filters->expectedEndDateMax) > 0 ) )
        {
            $where .= sprintf(" AND (A.expectedEndDate BETWEEN TO_TIMESTAMP(?, '%s') AND TO_TIMESTAMP(?, '%s') ) ", $maskTimestamp, $maskTimestamp);
            $params[] = $filters->expectedEndDateMin;
            $params[] = $filters->expectedEndDateMax;
        }
        if ( (strlen($filters->endDateMin) > 0 ) && (strlen($filters->endDateMax) > 0 ) )
        {
            $where .= sprintf(" AND (A.endDate BETWEEN TO_TIMESTAMP(?, '%s') AND TO_TIMESTAMP(?, '%s') ) ", $maskTimestamp, $maskTimestamp);
            $params[] = $filters->endDateMin;
            $params[] = $filters->endDateMax;
        }

        // Filtra somente nao devolvidos
        if ( $filters->onlyNotReturned == DB_TRUE )
        {
            $where .= ' AND A.endDate IS NULL ';
        }

        $result = array();
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY 1';
            $result = SDatabase::query($sql, $params);
        }

        return $result;
    }

    /**
     * Popula o objeto InsmaterialLoan
     */
    private function populate()
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT userName,
                       dateTime,
                       ipAddress,
                       materialLoanId,
                       materialRequestId,
                       personId,
                       materialId,
                       TO_CHAR(beginDate, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                       TO_CHAR(expectedEndDate, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                       TO_CHAR(enddate, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                       returnObs,
                       TO_CHAR(loanDate, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                       TO_CHAR(cancelDate, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                       ins.materialLoanStatusId(materialLoanId) AS status
                  FROM ins.materialLoan
                 WHERE materialLoanId = ?";

        $params = array();
        $params[] = $this->materialLoanId;
        $result = SDatabase::query($sql, $params);

        if ( !strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName,
             $this->dateTime,
             $this->ipAddress,
             $this->materialLoanId,
             $this->materialRequestId,
             $this->personId,
             $this->materialId,
             $this->beginDate,
             $this->expectedEndDate,
             $this->endDate,
             $this->returnObs,
             $this->loanDate,
             $this->cancelDate,
             $this->statusId) = $result[0];
        
        // instanciar material, já que é utilizado largamente pela classe
        self::__get('material');
    }
    
    /**
     * Método chamado quando um empréstimo está sendo gerado.
     * 
     * @return boolean TRUE se conseguiu salvar a classe. Caso contrário, FALSE.
     */
    public function registerLoan()
    {
        //Verifica se empréstimo possui datas conflitantes.
        if ( $this->checkPeriodIsUnavailable() )
        {
             throw new Exception(_M('O material selecionado possui um empréstimo que conflita com período de datas informado: @1 a @2.', $module, $this->beginDate, $this->expectedEndDate));
        }
        
        return $this->internalSave();
    }
    
    /**
     * Método chamado quando um empréstimo é confirmado, isto é, quando o material
     * previsto para ser emprestado é de fato entregue ao solicitante.
     * 
     * @param timestamp $loanDate Data em que o material foi realmente retirado.
     * 
     * @return boolean TRUE se conseguiu salvar a classe. Caso contrário, FALSE.
     */
    public function confirmLoan($loanDate)
    {
        $this->loanDate = $loanDate;
        
        return $this->internalSave();
    }

    /**
     * Método chamado quando um empréstimo é cancelado, isto é, o material que
     * estava previsto para ser retirado não será mais retirado.
     * 
     * @param timestamp $cancelDate Data do cancelamento do empréstimo.
     * 
     * @return boolean TRUE se conseguiu salvar a classe. Caso contrário, FALSE.
     */
    public function cancelLoan($cancelDate)
    {
        // popular o material do item, caso não tenha sido populado ainda
        self::__get('material');
        
        $this->cancelDate = $cancelDate;
        
        return $this->internalSave();
    }
    
    /**
     * Método chamado quando um material efetivamente retirado é devolvido.
     * 
     * @param timestamp $returnDate Data em que o material retornou.
     * @param string $returnObs Observação complementar sobre o retorno do material.
     * 
     * @return boolean TRUE se conseguiu salvar a classe. Caso contrário, FALSE.
     */
    public function returnMaterial($returnDate, $returnObs)
    {
        // popular o material do item, caso não tenha sido populado ainda
        self::__get('material');
        
        $this->endDate = $returnDate;
        $this->returnObs = $returnObs;
        
        return $this->internalSave();
    }

    /**
     * Método que efetua o salvar do registro. Só é utilizada internamente. Para todas
     * as formas de salvar (empréstimo, devolução, cancelamento, etc) existe um método
     * específico, pois as validações são diferentes.
     * 
     * @return boolean TRUE se salvou com sucesso. Senão, FALSE.
     */
    private function internalSave()
    {
        $module = SAGU::getFileModule(__FILE__);
        
        // Validação
        if ( SAGU::compareTimestamp($this->beginDate, '>', $this->expectedEndDate) )
        {
            // Data final deve ser maior que data inicial
            throw new Exception(_M('A devolução não pode ser feita antes da retirada.', $module));
        }
        if ( SAGU::compareTimestamp(SAGU::getDateNow(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP')), '>', $this->expectedEndDate) && !(strlen($this->endDate) > 0 ) )
        {
            // Data atual deve ser menor que data final
            throw new Exception(_M('A devolução não pode ser feita antes de agora.', $module));
        }

        // se não houver material, não há como salvar.
        if ( is_null($this->material) )
        {
            throw new Exception(_M('Não foi definido um material para o empréstimo.', $module));
        }

        if ( strlen($this->materialLoanId) == 0)
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = "INSERT INTO ins.materialLoan
                            (materialLoanId,
                             materialRequestId,
                             personId,
                             materialId,
                             beginDate,
                             expectedEndDate,
                             endDate,
                             returnObs,
                             loanDate,
                             cancelDate)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                             TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                             TO_TIMESTAMP(COALESCE(?, null), '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                             ?,
                             TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                             TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'))";

        $sqlPK = "SELECT nextval('ins.materialLoan_materialLoanId_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $materialLoanId = $result[0][0];

        $params = array();
        $params[] = $materialLoanId;
        $params[] = $this->materialRequestId;
        $params[] = $this->personId;
        $params[] = $this->materialId;
        $params[] = $this->beginDate;
        $params[] = $this->expectedEndDate;
        $params[] = $this->endDate;
        $params[] = $this->returnObs;
        $params[] = $this->loanDate;
        $params[] = $this->cancelDate;

        $result = SDatabase::execute($sql, $params);

        if ( $result)
        {
            $this->materialLoanId = $materialLoanId;
        }

        return $result;
    }

    private function update()
    {
        $sql = "UPDATE ins.materialLoan
                   SET materialRequestId = ?,
                       personId = ?,
                       materialId = ?,
                       beginDate = TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                       expectedEndDate = TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                       endDate = TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                       returnObs = ?,
                       loanDate = TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."'),
                       cancelDate = TO_TIMESTAMP(?, '".SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME')."')
                 WHERE materialLoanId = ?";

        $params = array();
        $params[] = $this->materialRequestId;
        $params[] = $this->personId;
        $params[] = $this->materialId;
        $params[] = $this->beginDate;
        $params[] = $this->expectedEndDate;
        $params[] = $this->endDate;
        $params[] = $this->returnObs;        
        $params[] = $this->loanDate;
        $params[] = $this->cancelDate;
        $params[] = $this->materialLoanId;

        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->materialLoanId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM ins.materialLoan
                      WHERE materialLoanId = ?';

        $params = array();
        $params[] = $this->materialLoanId;
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->materialLoanId = null;
        }

        return $result;
    }


    /**
     * Verifica se existe um empréstimo no mesmo período de datas
     *
     * @return boolean
     * true = indisponível
     * false = período disponível
     */
    private function checkPeriodIsUnavailable()
    {
          $maskTimestamp = SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_DEFAULT');
          
          $sql = " SELECT COUNT(*) > 0
                   FROM ins.materialLoan A
             INNER JOIN ins.material B
                     ON B.materialId = A.materialId
             INNER JOIN ins.materialType C
                     ON C.materialTypeId = B.materialTypeId
                  WHERE A.materialId = ?
                    AND C.availabilityControl
                    AND A.beginDate <= TO_TIMESTAMP(?, '$maskTimestamp')
                    AND A.expectedEndDate >= TO_TIMESTAMP(?, '$maskTimestamp')
                    AND A.cancelDate IS NULL
                    AND A.endDate IS NULL";

        $params = array();
        $params[] = $this->materialId;
        $params[] = $this->expectedEndDate;
        $params[] = $this->beginDate;

        if ( strlen($this->materialLoanId) > 0 )
        {
            $sql .= ' AND A.materialLoanId != ?';
            $params[] = $this->materialLoanId;
        }

        $result = SDatabase::query($sql, $params);

        return ($result[0][0] == DB_TRUE);
    }
}
?>