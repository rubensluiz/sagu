<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 24/05/2011
 */
class InsMaterialType extends SType
{
    /**
     * @AttributeType integer
     */
    protected $materialTypeId;
    /**
     * @AttributeType character varying
     */
    protected $description;
    /**
     * @AttributeType boolean
     */
    protected $allowLoanByType;
    /**
     * @AttributeType boolean
     */
    protected $allowLoanByMaterial;
    /**
     * @AttributeType boolean
     */
    protected $availabilityControl;

    public function __construct($materialTypeId = NULL)
    {
        if ( (strlen($materialTypeId) > 0 ) )
        {
            $this->materialTypeId = $materialTypeId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT materialtypeid
                  FROM ins.materialtype';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 5);
        }

        $sql.=' ORDER BY materialtypeid ';
        $result = SDatabase::query($sql);
        $retVal = array( );

        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new InsMaterialType($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters = null)
    {
        $sql = 'SELECT materialtypeid,
                       description,
                       allowloanbytype,
                       allowloanbymaterial,
                       availabilityControl
                  FROM ins.materialtype';

        $params = array( );
        if ( strlen($filters->materialTypeId) > 0 )
        {
            $where.=' AND materialtypeid = ?';
            $params[] = $filters->materialTypeId;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where.=' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $params[] = $filters->description . '%';
        }

        if ( strlen($filters->allowLoanByType) > 0 )
        {
            $where.=' AND allowloanbytype = ?';
            $params[] = $filters->allowLoanByType;
        }

        if ( strlen($filters->allowLoanByMaterial) > 0 )
        {
            $where.=' AND allowloanbymaterial = ?';
            $params[] = $filters->allowLoanByMaterial;
        }

        if ( strlen($filters->availabilityControl) > 0 )
        {
            $where.=' AND availabilityControl = ?';
            $params[] = $filters->availabilityControl;
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 4) . '
                   ORDER BY materialtypeid';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    /**
     * Lista os tipos de materiais armazenados na base de dados
     */
    public static function listMaterialType()
    {
        $sql = 'SELECT materialtypeid,
                       description
                  FROM ins.materialtype
                  ORDER BY description';

        $result = SDatabase::query($sql);

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT username,
                       TO_CHAR(datetime, \'' . SAGU::getParameter('basic', 'MASK_TIMESTAMP') . '\'),
                       ipaddress,
                       materialtypeid,
                       description,
                       allowloanbytype,
                       allowloanbymaterial,
                       availabilityControl
                  FROM ins.materialtype
                 WHERE materialtypeid = ?';

        $result = SDatabase::query($sql, array( $this->materialTypeId ));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->userName,
              $this->dateTime,
              $this->ipAddress,
              $this->materialTypeId,
              $this->description,
              $this->allowLoanByType,
              $this->allowLoanByMaterial,
              $this->availabilityControl ) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->materialTypeId) == 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO ins.materialtype
                            (materialtypeid,
                             description,
                             allowloanbytype,
                             allowloanbymaterial,
                             availabilityControl)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $sqlPK = "SELECT nextval('ins.materialtype_materialtypeid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $materialTypeId = $result[0][0];

        $params = array();
        $params[] = $materialTypeId;
        $params[] = $this->description;
        $params[] = $this->allowLoanByType;
        $params[] = $this->allowLoanByMaterial;
        $params[] = $this->availabilityControl;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->materialTypeId = $materialTypeId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE ins.materialtype
                   SET description = ?,
                       allowloanbytype = ?,
                       allowloanbymaterial = ?,
                       availabilityControl = ?
                 WHERE materialtypeid = ?';

        $params = array();
        $params[] = $this->description;
        $params[] = $this->allowLoanByType;
        $params[] = $this->allowLoanByMaterial;
        $params[] = $this->availabilityControl;
        $params[] = $this->materialTypeId;

        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->materialTypeId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM ins.materialtype
                      WHERE materialtypeid = ?';

        $params = array();
        $params[] = $this->materialTypeId;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->materialTypeId = null;
        }

        return $result;
    }
}
?>