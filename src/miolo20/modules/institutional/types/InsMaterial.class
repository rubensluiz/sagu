<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 25/05/2011
 */
class InsMaterial extends SType
{
    /**
     * @AttributeType integer
     */
    protected $materialId;
    /**
     * @AttributeType integer
     */
    protected $physicalResourceId;
    /**
     * @AttributeType integer
     */
    protected $physicalResourceVersion;
    /**
     * @AttributeType integer
     */
    protected $materialTypeId;
    /**
     * @AttributeType character varying
     */
    protected $description;
    /**
     * @AttributeType text
     */
    protected $detailedDescription;
    /**
     * @AttributeType boolean
     */
    protected $isAvailable;
    /**
     * @AttributeType text
     */
    protected $unavailabilityReason;
    /**
     * @AttributeType date
     */
    protected $unavailabilityDate;
    /**
     * @AttributeType InsMaterialType
     */
    protected $materialType;
    /**
     * @AttributeType character varying
     */
    protected $internalCode;

    public function __get($name)
    {
        /*
         * Obtém o tipo de material
         */
        if ( $name == 'materialType' && !(count($this->materialType) > 0) && (strlen($this->materialTypeId) > 0) )
        {
            // MaterialType
            $this->materialType = new InsMaterialType($this->materialTypeId);
        }

        return parent::__get($name);
    }

    /**
     * Construct
     *
     * @param type $materialId
     */
    public function __construct($materialId = NULL)
    {
        if ( (strlen($materialId) > 0 ) )
        {
            $this->materialId = $materialId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT materialid
                  FROM ins.material';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 5);
        }

        $sql.=' ORDER BY materialid ';
        $result = SDatabase::query($sql);
        $retVal = array( );

        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new InsMaterial($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters = null)
    {
        $maskTimeStamp = SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME');

        $sql = 'SELECT A.materialId,
                       A.internalCode,
                       A.physicalResourceId,
                       A.physicalResourceVersion,
                       B.description as physicalResourceDescription,
                       A.materialTypeId,
                       C.description as materialTypeDescription,
                       A.description,
                       A.detailedDescription,
                       A.isAvailable,
                       A.unavailabilityReason,
                       TO_CHAR(A.unavailabilityDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       COALESCE(ins.getMaterialStatus(A.materialId,
                                                      TO_TIMESTAMP(?, \'' . $maskTimeStamp . '\')::timestamp,
                                                      TO_TIMESTAMP(?, \'' . $maskTimeStamp . '\')::timestamp,
                                                      ?::integer), \'' . _M('Disponível', $module) . '\') AS materialStatus
                  FROM ins.material A
            INNER JOIN ins.materialType C
                    ON A.materialtypeid=C.materialtypeid
             LEFT JOIN insPhysicalResource B
                    ON A.physicalResourceId = B.physicalResourceId
                   AND A.physicalResourceVersion = B.physicalResourceVersion';

        $params = array($filters->beginDate,
                        $filters->endDate,
                        $filters->materialLoanIdToIgnore);
        $where = '';
        if ( strlen($filters->materialId) > 0 )
        {
            $where.=' AND A.materialId = ?';
            $params[] = $filters->materialId;
        }

        if ( strlen($filters->physicalResourceId) > 0 )
        {
            $where.=' AND A.physicalResourceId = ?';
            $params[] = $filters->physicalResourceId;
        }

        if ( strlen($filters->physicalResourceVersion) > 0 )
        {
            $where.=' AND A.physicalResourceVersion = ?';
            $params[] = $filters->physicalResourceVersion;
        }

        if ( strlen($filters->materialTypeId) > 0 )
        {
            $where.=' AND A.materialTypeId = ?';
            $params[] = $filters->materialTypeId;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where.=' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $params[] = $filters->description . '%';
        }

        if ( strlen($filters->detailedDescription) > 0 )
        {
            $where.=' AND UNACCENT(A.detailedDescription) ILIKE UNACCENT(?) ';
            $params[] = $filters->detailedDescription . '%';
        }

        if ( strlen($filters->isAvailable) > 0 )
        {
            $where.=' AND A.isAvailable = ?';
            $params[] = $filters->isAvailable;
        }

        if ( strlen($filters->unavailabilityReason) > 0 )
        {
            $where.=' AND UNACCENT(A.unavailabilityReason) ILIKE UNACCENT(?) ';
            $params[] = $filters->unavailabilityReason . '%';
        }

        if ( strlen($filters->unavailabilityDate) > 0 )
        {
            $where.=' AND A.unavailabilityDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $params[] = $filters->unavailabilityDate;
        }

        if ( strlen($filters->internalCode) > 0 )
        {
            $where.=' AND UNACCENT(A.internalCode) ILIKE UNACCENT(?) ';
            $params[] = $filters->internalCode;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 4) . '
                   ORDER BY A.materialId';

            $result = SDatabase::query($sql, $params);
        }

        return $result;
    }
    
    private function populate()
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT username,
                       TO_CHAR(datetime, '" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       ipaddress,
                       materialid,
                       physicalresourceid,
                       physicalresourceversion,
                       materialtypeid,
                       description,
                       detaileddescription,
                       isavailable,
                       unavailabilityreason,
                       TO_CHAR(unavailabilitydate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "'),
                       internalCode
                  FROM ins.material
                 WHERE materialid = ?";

        $result = SDatabase::query($sql, array( $this->materialId ));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->userName,
              $this->dateTime,
              $this->ipAddress,
              $this->materialId,
              $this->physicalResourceId,
              $this->physicalResourceVersion,
              $this->materialTypeId,
              $this->description,
              $this->detailedDescription,
              $this->isAvailable,
              $this->unavailabilityReason,
              $this->unavailabilityDate,
              $this->internalCode ) = $result[0];
    }

    public function save()
    {
        $filters = new stdClass();
        $filters->materialId = $this->materialId;

        if ( !(count(InsMaterial::searchGrid($filters))>0) )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO ins.material
                            (physicalresourceid,
                             physicalresourceversion,
                             materialtypeid,
                             description,
                             detaileddescription,
                             isavailable,
                             unavailabilityreason,
                             unavailabilitydate,
                             internalCode)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             ?)';

        $params = array( $this->physicalResourceId,
                         $this->physicalResourceVersion,
                         $this->materialTypeId,
                         $this->description,
                         $this->detailedDescription,
                         $this->isAvailable,
                         $this->unavailabilityReason,
                         $this->unavailabilityDate,
                         $this->internalCode);

        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE ins.material
                   SET physicalresourceid = ?,
                       physicalresourceversion = ?,
                       materialtypeid = ?,
                       description = ?,
                       detaileddescription = ?,
                       isavailable = ?,
                       unavailabilityreason = ?,
                       unavailabilitydate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       internalCode = ?
                 WHERE materialid = ?';

        $params = array( $this->physicalResourceId,
                         $this->physicalResourceVersion,
                         $this->materialTypeId,
                         $this->description,
                         $this->detailedDescription,
                         $this->isAvailable,
                         $this->unavailabilityReason,
                         $this->unavailabilityDate,
                         $this->internalCode,
                         $this->materialId );

        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->materialId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM ins.material
                      WHERE materialid = ?';

        $params = array( $this->materialId );

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->materialId = null;
        }

        return $result;
    }
    
    public function getMaterialStatus($beginDate, $endDate, $materialLoanIdToIgnore)
    {
        $sql = 'SELECT ins.getMaterialStatus(?::integer, ?::timestamp, ?::timestamp, ?::integer)';
        
        $params = array ( $this->materialId, $beginDate, $endDate, $materialLoanIdToIgnore );

        $result = SDatabase::query($sql, $params);
        
        return $result[0][0];        
    }
    
    public static function listMaterial()
    {
        $sql = 'SELECT materialid,
                       description
                  FROM ins.material
                  ORDER BY description';

        $result = SDatabase::query($sql);

        return $result;
    }
    
}
?>
