<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 25/05/2011
 */
class InsMaterialRequest extends SType
{
    /**
     * @AttributeType integer
     */
    protected $materialRequestId;
    /**
     * @AttributeType character varying
     */
    protected $materialId;
    /**
     * @AttributeType integer
     */
    protected $materialTypeId;
    /**
     * @AttributeType integer
     */
    protected $personId;
    /**
     * @AttributeType timestamp
     */
    protected $beginDate;
    /**
     * @AttributeType timestamp
     */
    protected $endDate;
    /**
     * @AttributeType timestamp
     */
    protected $cancelDate;
    /**
     * @AttributeType text
     */
    protected $observation;
    /**
     * @AttributeType InsMaterial
     */
    protected $material;
    /**
     * @AttributeType InsMaterialType
     */
    protected $materialType;
    /**
     * @AttributeType BasPhysicalPerson
     */
    protected $physicalPerson;
    
    /**
     * @AttributeType integer Atributo que armazena o status atual da solicitação instanciada
     */
    protected $statusId;
    
    /**
     * @AttributeType text
     */
    protected $reasonRejected;

    public function __get($name)
    {
        $MIOLO = MIOLO::getInstance();

        /*
         * Obtém o material
         */
        if ( $name == 'material' && !(count($this->material) > 0 ) && (strlen($this->materialId) > 0 ) )
        {
            // Material
            $this->material = new InsMaterial($this->materialId);
        }

        /*
         * Obtém o tipo de material
         */
        if ( $name == 'materialType' && !(count($this->materialType) > 0 ) && (strlen($this->materialTypeId) > 0 ) )
        {
            // MaterialType
            $this->materialType = new InsMaterialType($this->materialTypeId);
        }

        /*
         * Obtém o solicitante
         */
        if ( $name == 'physicalPerson' && !(count($this->physicalPerson) > 0 ) && (strlen($this->personId) > 0 ) )
        {
            // MaterialType
            $busPP = new BusinessBasicBusPhysicalPerson();
            $this->physicalPerson = $busPP->getPhysicalPerson($this->personId);
        }

        return parent::__get($name);
    }

    /**
     * Contrutor da classe
     *
     * @param type $materialRequestId
     */
    public function __construct($materialRequestId = NULL)
    {
        if ( (strlen($materialRequestId) > 0 ) )
        {
            $this->materialRequestId = $materialRequestId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT materialRequestId
                  FROM ins.materialRequest';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0 ) )
            {
                $where .= " AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE '.substr($where, 5);
        }

        $sql .= ' ORDER BY materialRequestId ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new InsMaterialRequest($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters = null)
    {
        $sql = "SELECT A.materialRequestId,
                       C.description AS materialType,
                       B.description AS material,
                       TO_CHAR(A.beginDate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME') . "'),
                       TO_CHAR(A.endDate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME') . "'),
                       TO_CHAR(D.beginDate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME') . "'),
                       TO_CHAR(D.endDate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME') . "'),
                       ins.materialRequestStatus(A.materialRequestId) AS status,
                       observation
                  FROM ins.materialRequest A
             LEFT JOIN ins.material B
                    ON A.materialId = B.materialId
             LEFT JOIN ins.materialType C
                    ON (B.materialTypeId = C.materialTypeId
                    OR  A.materialTypeId = C.materialTypeId)
             LEFT JOIN ins.materialLoan D
                    ON A.materialId = D.materialId
        LEFT JOIN ONLY basPhysicalPerson E
                    ON A.personId = E.personId";

        $params = array();
        $where = ' AND D.endDate IS NULL';
        if ( strlen($filters->materialRequestId) > 0 )
        {
            $where .= ' AND A.materialRequestId = ?';
            $params[] = $filters->materialRequestId;
        }

        if ( strlen($filters->materialId) > 0 )
        {
            $where .= ' AND UNACCENT(B.materialid) ILIKE UNACCENT(?) ';
            $params[] = $filters->materialId.'%';
        }

        if ( strlen($filters->materialTypeId) > 0 )
        {
            $where .= ' AND C.materialTypeid = ?';
            $params[] = $filters->materialTypeId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $params[] = $filters->personId;
        }

        if ( strlen($filters->beginDate) > 0 )
        {
            $where .= ' AND A.beginDate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\')';
            $params[] = $filters->beginDate;
        }

        if ( strlen($filters->endDate) > 0 )
        {
            $where .= ' AND A.endDate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\')';
            $params[] = $filters->endDate;
        }

        if ( strlen($filters->cancelDate) > 0 )
        {
            $where .= ' AND A.cancelDate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\')';
            $params[] = $filters->cancelDate;
        }

        if ( strlen($filters->observation) > 0 )
        {
            $where .= ' AND A.observation ILIKE ?)';
            $params[] = $filters->observation;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE '.substr($where, 4).'
                   ORDER BY A.beginDate, B.description';
        }

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return $result;
    }

    /**
     * Função para obter todas as solicitações e empréstimos de uma pessoa que ainda
     * não tenham sido finalizados.
     *
     * @param integer $personId Person whose requests and loans are to be retrieved.
     * @return array Array of records.
     */
    public static function listPersonActiveRequestsAndLoans($personId)
    {
        $maskTimeStamp = SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME');
        $daysToShowEndedMaterialRequests = SAGU::getParameter('INSTITUTIONAL', 'DAYS_TO_SHOW_ENDED_MATERIAL_REQUESTS');

        $sql = "SELECT A.materialRequestId,
                       ins.getStatusDescription(ins.materialRequestStatusId(A.materialRequestId)) AS status,
                       A.reasonrejected,
                       E.description AS materialTypeDescription,
                       D.description AS materialDescription,
                       TO_CHAR(A.beginDate, '" . $maskTimeStamp . "') AS requestBeginDate,
                       TO_CHAR(A.endDate, '" . $maskTimeStamp . "') AS requestEndDate,
                       TO_CHAR(A.cancelDate, '" . $maskTimeStamp . "') AS requestCancelDate,
                       TO_CHAR(C.beginDate, '" . $maskTimeStamp . "') AS loanBeginDate,
                       TO_CHAR(C.expectedEndDate, '" . $maskTimeStamp . "') AS loanExpectedEndDate,
                       TO_CHAR(C.loanDate, '" . $maskTimeStamp . "') AS loanDate,
                       TO_CHAR(C.cancelDate, '" . $maskTimeStamp . "') AS loanCancelDate,
                       TO_CHAR(C.endDate, '" . $maskTimeStamp . "') AS loanEndDate
                  FROM ins.materialRequest A
             LEFT JOIN ins.materialLoan C
                    ON C.materialRequestId = A.materialRequestId
             LEFT JOIN ins.material D
                    ON D.materialId = COALESCE(C.materialId, A.materialId)
             LEFT JOIN ins.materialType E
                    ON E.materialTypeId = COALESCE(D.materialTypeId, A.materialTypeId)
                 WHERE ( ins.materialRequestStatusId(A.materialRequestId) IN (?, ?, ?, ?)
                     OR (ins.materialRequestStatusId(A.materialRequestId) = ? AND now() BETWEEN A.cancelDate AND A.cancelDate + interval '{$daysToShowEndedMaterialRequests} days')
                     OR (ins.materialRequestStatusId(A.materialRequestId) = ? AND now() BETWEEN C.cancelDate AND C.cancelDate + interval '{$daysToShowEndedMaterialRequests} days')
                     OR (ins.materialRequestStatusId(A.materialRequestId) = ? AND now() BETWEEN C.endDate AND C.endDate + interval '{$daysToShowEndedMaterialRequests} days') )";

        // inicializa array somente com opções que caracterizam pendência
        $params = array(
            InsMaterialStatus::STATUS_REQUEST_MADE,//solicitação efetuada
            InsMaterialStatus::STATUS_LOAN_SCHEDULED,//emprestimo agendado
            InsMaterialStatus::STATUS_LOAN_TAKEN,//retirada efetuada
            InsMaterialStatus::STATUS_LOAN_EXPIRED, //data de devolução expirada
            InsMaterialStatus::STATUS_REQUEST_DENIED, //solicitação indeferida
            InsMaterialStatus::STATUS_LOAN_CANCELED, //emprestimo cancelado
            InsMaterialStatus::STATUS_LOAN_RETURNED //material devolvido
        );

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND COALESCE(C.personId, A.personId) = ?';
            $params[] = $personId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= $where;
        }
        
        $result = SDatabase::query($sql, $params);

        return $result;
    }

    public function searchRequestsForAttendance($filters)
    {
        $maskTimeStamp = SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME');
        
        $sql = "SELECT A.materialRequestId,
                       ins.getStatusDescription(ins.materialRequestStatusId(A.materialRequestId)) AS status,
                       A.personId,
                       E.name as personName,
                       TO_CHAR(A.beginDate,'" . $maskTimeStamp . "'),
                       TO_CHAR(A.endDate,'" . $maskTimeStamp . "'),
                       TO_CHAR(D.beginDate,'" . $maskTimeStamp . "'),
                       TO_CHAR(D.expectedEndDate,'" . $maskTimeStamp . "'),
                       TO_CHAR(D.endDate,'" . $maskTimeStamp . "'),
                       C.materialTypeId,
                       C.description as materialType,
                       A.materialId,
                       B.description as materialDescription,                       
                       A.observation,
                       ins.materialRequestStatusId(A.materialRequestId) AS statusId
                  FROM ins.materialRequest A
             LEFT JOIN ins.material B
                    ON A.materialId = B.materialId
             LEFT JOIN ins.materialType C
                    ON (B.materialTypeId = C.materialTypeId
                    OR  A.materialTypeId = C.materialTypeId)
             LEFT JOIN ins.materialLoan D
                    ON A.materialRequestId = D.materialRequestId
        LEFT JOIN ONLY basPhysicalPerson E
                    ON A.personId = E.personId";

        $where = '';
        $params = array();
        if ( strlen($filters->materialRequestId) > 0 )
        {
            $where .= ' AND A.materialRequestId = ?';
            $params[] = $filters->materialRequestId;
        }

        if ( strlen($filters->materialId) > 0 )
        {
            $where .= ' AND B.materialid = ?';
            $params[] = $filters->materialId;
        }

        if ( strlen($filters->materialTypeId) > 0 )
        {
            $where .= ' AND C.materialTypeid = ?';
            $params[] = $filters->materialTypeId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $params[] = $filters->personId;
        }

        if ( strlen($filters->beginDateMin) > 1)
        {
            $where .= ' AND A.beginDate >= TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\')';
            $params[] = $filters->beginDateMin;
        }
        if ( strlen($filters->beginDateMax) > 1)
        {
            $where .= ' AND A.beginDate <= TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\')';
            $params[] = $filters->beginDateMax;
        }

        if ( strlen($filters->endDateMin) > 1)
        {
            $where .= ' AND A.endDate >= TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\')';
            $params[] = $filters->endDateMin;
        }

        if ( strlen($filters->endDateMax) > 1)
        {
            $where .= ' AND A.endDate <= TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\')';
            $params[] = $filters->endDateMax;
        }

        if ( strlen($filters->physicalResourceId) > 0 )
        {
            $where .= ' AND B.physicalResourceId = ?';
            $params[] = $filters->physicalResourceId;
        }

        if ( strlen($filters->observation) > 0 )
        {
            $where .= ' AND A.observation ILIKE ?';
            $params[] = $filters->observation . '%';
        }

        if ( (is_array($filters->situations)) && (count($filters->situations) > 0 ) )
        {
            $where .= ' AND ins.materialRequestStatusId(A.materialRequestId) IN (' . implode(',', array_fill(0, count($filters->situations), '?')) . ')';
            $params = array_merge($params, array_values($filters->situations));
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE '.substr($where, 4).'
                   ORDER BY A.beginDate, B.description';

            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    /**
     * Popula o objeto InsmaterialRequest
     */
    private function populate()
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT materialRequestId,
                       materialid,
                       materialTypeid,
                       personId,
                       TO_CHAR(beginDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       TO_CHAR(endDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       TO_CHAR(cancelDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       observation,
                       ins.materialRequestStatusId(materialRequestId) AS status
                  FROM ins.materialRequest
                 WHERE materialRequestId = ?';

        $result = SDatabase::query($sql, array($this->materialRequestId));

        if (!strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->materialRequestId,
              $this->materialId,
              $this->materialTypeId,
              $this->personId,
              $this->beginDate,
              $this->endDate,
              $this->cancelDate,
              $this->observation,
              $this->statusId ) = $result[0];
    }

    /**
     * Insere ou atualiza uma solicitação de material
     *
     * @return boolean
     */
    public function save()
    {
        if ( strlen($this->materialRequestId) == 0)
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Insere na base uma solicitação de material
     *
     * @return int - Código da solicitação de material
     */
    private function insert()
    {
        $sql = 'INSERT INTO ins.materialRequest
                            (materialRequestId,
                             materialid,
                             materialTypeid,
                             personId,
                             beginDate,
                             endDate,
                             cancelDate,
                             observation,
                             reasonrejected)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                             TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                             TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                             ?,
                             ?)';

        // Primary key
        $sqlPK = "SELECT nextval('ins.materialRequest_materialRequestId_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $materialRequestId = $result[0][0];

        $params = array();
        $params[] = $materialRequestId;
        $params[] = $this->materialId;
        // Caso tenha materialId, deixa materialTypeId vazio
        $params[] = (strlen($this->materialId) == 0 ) ? $this->materialTypeId : '';
        $params[] = $this->personId;
        $params[] = $this->beginDate;
        $params[] = $this->endDate;
        $params[] = $this->cancelDate;
        $params[] = $this->observation;
        $params[] = $this->reasonRejected;
        
        $result = SDatabase::execute($sql, $params);

        if ($result)
        {
            $this->materialRequestId = $materialRequestId;
        }

        return $result;
    }

    /**
     * Atualiza uma solicitação de material
     *
     * @return boolean
     */
    private function update()
    {
        $sql = 'UPDATE ins.materialRequest
                   SET materialid = ?,
                       materialTypeid = ?,
                       personId = ?,
                       beginDate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       endDate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       cancelDate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . " " . SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       observation = ?,
                       reasonRejected = ?
                 WHERE materialRequestId = ?';

        $params = array();
        $params[] = $this->materialId;
        // Caso tenha materialId, deixa materialTypeId vazio
        $params[] = ( strlen($this->materialId) == 0 ) ? $this->materialTypeId : '';
        $params[] = $this->personId;
        $params[] = $this->beginDate;
        $params[] = $this->endDate;
        $params[] = $this->cancelDate;
        $params[] = $this->observation;
        $params[] = $this->reasonRejected?$this->reasonRejected:$_REQUEST['reasonRejected'];
        $params[] = $this->materialRequestId;

        return SDatabase::execute($sql, $params);
    }

    /**
     * Deleta uma solicitação de material
     *
     * @return boolen
     */
    public function delete()
    {
        if ( strlen($this->materialRequestId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        // Busca e exclui os empréstimos existentes
        $filters = new stdClass();
        $filters->materialRequestId = $this->materialRequestId;
        $searchLoan = InsMaterialLoan::search($filters);
        if ( count($searchLoan) > 0 )
        {
            foreach($searchLoan as $loan)
            {
                $loan->delete();
            }
        }

        $sql = 'DELETE FROM ins.materialRequest
                      WHERE materialRequestId = ?';

        $params = array();
        $params[] = $this->materialRequestId;

        $result = SDatabase::execute($sql, $params);

        if ($result)
        {
            $this->materialRequestId = null;
        }

        return $result;
    }

    /**
     * Função que cancela a solicitação de empréstimo
     * @return boolean
     */
    public function cancelRequest()
    {
        if ( strlen($this->materialRequestId) == 0 )
        {
            throw new Exception(_M('Não é possível cancelar um registro que ainda não foi salvo.', $module));
        }

        // Verifica se solicitação está num status passível de cancelamento
        if( $this->statusId != InsMaterialStatus::STATUS_REQUEST_MADE )
        {
            $msg = _M('Apenas solicitações sem empréstimo podem ser canceladas.', $module) . ' ' .
                   _M('Se já existir um empréstimo, tente cancela-lo ao invés de cancelar a solicitação.', $module);
            
            throw new Exception($msg);
        }
        
        // Define a solicitação como cancelada
        $this->cancelDate = SAGU::getDateNow(SAGU::getParameter('basic', 'MASK_TIMESTAMP_PHP')); // Define data de cancelamento

        return $this->save();
    }
}
?>