<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Relatorio de alocacao de recursos
 * 
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 27/04/2011
 **/

class FrmResourceAllocation extends SForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Alocação de recursos', $module), null, null);

        //Desabilita os botoes da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $fields[] = new MHiddenField('limbo');

        //Recurso fisico
        $fields[] = $physicalResourceId = new SLookupContainer('physicalResourceId', $this->getFormValue('physicalResourceId', MIOLO::_REQUEST('physicalResourceId')), array(
            'label' => _M('Recurso físico', $module),
            'module' => $module,
            'item' => 'PhysicalResource',
            'related' => array('physicalResourceId', 'limbo', 'physicalResourceIdDescription'),
        ));
        $physicalResourceId->showRequiredLabel = true;
        $validators[] = new MRequiredValidator('physicalResourceId', _M('Recurso físico', $module));
        
        //Ano
        $valueYear = MUtil::NVL( $this->getFormValue('year', MIOLO::_REQUEST('year')), date('Y') );
        $fields[] = $year = new MTextField('year', $valueYear, _M('Ano', $module));
        $validators[] = new MIntegerValidator('year', _M('Ano', $module), 'required');

        //Mes
        $valueMonth = MUtil::NVL( $this->GetFormValue('month', MIOLO::_REQUEST('month')), date('m') );
        $fields[] = $month = new MSelection('month', $valueMonth, _M('Mês', $module), SAGU::listMonths());


        //Formato
//        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
//        $validators[] = new MRequiredValidator('reportFormat', _M('Formato do relatório', $module));

        $fields[] = new MButton('btnSearch', _M('Visualizar', $module));

        //Separator
        $fields[] = new MSeparator('');

        $fields[] = new MDiv('divCalendar');

        $this->setValidators($validators);
        $this->setFields($fields);
        
        parent::defineFields();
    }


    public function btnSearch_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $physicalResourceId = MIOLO::_REQUEST('physicalResourceId');
        $year = MIOLO::_REQUEST('year');
        $month = MIOLO::_REQUEST('month');

        $busPhysicalResource = new BusinessInstitutionalBusPhysicalResource();
        $rows = $busPhysicalResource->getCalendarEvent($physicalResourceId, $year, $month);

        $total = array();
        $calendar = new MEventCalendar('calendar', htmlentities(_M('Alocação de recursos')));
        $calendar->setInitialDate( $year . '01' );
        foreach ( $rows as $row )
        {
            if (!isset($total[$row->month]))
            {
                $total[$row->month] = 0;
            }

            if ( strlen($row->events) > 0 )
            {
                foreach ( explode("\n", $row->events) as $event )
                {
                    $total[$row->month] ++;
                    $calendar->defineEvent($row->dateCalendar, htmlentities($event));
                }
            }
        }

        if ( array_sum($total) > 0 )
        {
            //Gera totais
            $array = array();
            $months = SAGU::listMonths();
            foreach ( $months as $month => $name )
            {
                $array[] = $total[$month];
            }
            $label = _M('Total de eventos encontrados: @1', $module, array_sum($total));
            $table = new MTableRaw($label, array($array), array_values($months));
            for ($i=0; $i < count($months); $i++)
            {
                $table->setCellAttribute(0, $i, 'align', 'center');
            }

            $fields[] = new MSeparator();
            $fields[] = $table;
            $fields[] = new MSeparator();
            $fields[] = $calendar;
        }
        else
        {
            $this->AddError( _M('Nenhum evento encontrado para o período e recurso informado.', $module) );
        }

        $this->divCalendar->setInner($fields);
    }
}
?>