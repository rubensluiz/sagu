<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Form to manipulate insMaterial table records
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 23/09/2005
 *
 * */
class FrmMaterial extends SManagementForm
{

    /**
     * Class constructor
     * */
    public function __construct()
    {
        parent::__construct(new InsMaterial(), array( 'materialId' ), null);
    }

    /**
     * Default method to define fields
     * */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $readOnly = false;
        if ( in_array($function, array( SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE )) )
        {
            $pk = $this->getObjectPk();
            $materialId = $pk->materialId;

            $fields[] = new MTextLabel('materialId', $materialId, _M('Código', $module));
            $fields[] = new MHiddenField('materialId', $materialId);

            $data = new InsMaterial($materialId);
            $readOnly = true;
        }
        //Campo código interno
        $internalCode = new MTextField('internalCode', $this->getFormValue('internalCode', $data->internalCode), _M('Código interno', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $internalCode->setJsHint(_M('Informe o código interno do material', $module));
        $fields[] = $internalCode;
        $validators[] = new MRequiredValidator('internalCode', _M('Código interno', $module));

        //Campo Descrição
        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição', $module));
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));

        //Campo detalhes
        $details = new MMultiLineField('detailedDescription', $this->getFormValue('detailedDescription', $data->detailedDescription), _M('Detalhes', $module), 40, 5, 40);
        $details->setJsHint(_M('Informe os detalhes', $module));
        $fields[] = $details;
       
        //Campo tipo de material
        $materialTypeLabel = new MText('materialTypeLabel', _M('Tipo de material', $module) . ':');
        $materialTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $materialTypeLabel->setClass('m-caption m-caption-required');        
        $materialTypeId = new MLookupTextField('materialTypeId', $this->getFormValue('materialTypeId', $data->materialTypeId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'materialTypeDescription', $module, 'MaterialTypeInstitutional', null, null, true);
        $materialTypeId->setJsHint(_M('Código do tipo de material', $module));
        $materialTypeDescription = new MTextField('materialTypeDescription', $this->getFormValue('materialTypeDescription', $data->materialTypeDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $materialTypeDescription->setJsHint(_M('Descrição do tipo de material', $module));
        $materialTypeDescription->setReadOnly(true);
        $hctMaterialType = new MHContainer('hctMaterialType', array( $materialTypeLabel, $materialTypeId, $materialTypeDescription ));
        $fields[] = $hctMaterialType;
        
        //Campo local do material
        $physicalResourceLabel = new MText('physicalResourceLabelS', _M('Local do material', $module) . ':');
        $physicalResourceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        
        //Verifica a obrigatoriedade do campo recurso físico para o material
        if ( SAGU::getParameter($module, 'MATERIAL_REQUIRE_PHYSICAL_RESOURCE') == DB_TRUE )
        {
            $physicalResourceLabel->setClass('m-caption m-caption-required');
            $validators[] = new MRequiredValidator('physicalResourceId', _M('Local do material', $module));
            $validators[] = new MRequiredValidator('physicalResourceVersion', _M('Versão do recurso físico', $module));
        }
                
        $physicalResourceId = new MLookupTextField('physicalResourceId', $this->getFormValue('physicalResourceId', $data->physicalResourceId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'physicalResourceId, physicalResourceVersion, physicalResourceDescription, room, building', $module, 'PhysicalResource', null, null, true);
        $physicalResourceId->setJsHint(_M('Código do recurso físico', $module));
        $physicalResourceVersion = new MTextField('physicalResourceVersion', $this->getFormValue('physicalResourceVersion', $data->physicalResourceVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $physicalResourceVersion->setReadOnly(true);
        $physicalResourceVersion->setJsHint(_M('Versão do recurso físico', $module));
        $physicalResourceDescription = new MTextField('physicalResourceDescription', $this->getFormValue('physicalResourceDescription', $data->physicalResourceDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $physicalResourceDescription->setJsHint(_M('Descrição do recurso físico', $module));
        $physicalResourceDescription->setReadOnly(true);
        $hctMaterial = new MHContainer('hctMaterial', array( $physicalResourceLabel, $physicalResourceId, $physicalResourceVersion, $physicalResourceDescription ));
        $fields[] = $hctMaterial;
        
        //Campo indisponível
        $isUnAviable = new MCheckbox('isAvailable', DB_FALSE, _M('Indisponível', $module), ($data->isAvailable == DB_FALSE ? true : false));
        $isUnAviable->addAttribute('onChange', $this->getAjaxAction('changeUnAvailable', 'divUnAvaible', false));
        $fields[] = $isUnAviable;

        if ( $this->getFormValue('isAvailable', $data->isAvailable) == DB_FALSE )
        {
            $unavailabilityReasonLabel = new MText('unavailabilityReasonLabel', _M('Motivo', $module) . ':');
            $unavailabilityReasonLabel->setClass('m-caption m-caption-required');
            $unavailabilityReasonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $unavailabilityReason = new MMultiLineField('unavailabilityReason', $this->getFormValue('unavailabilityReason', $data->unavailabilityReason), null, 40, 5, 40);
            $unavailabilityReason->setJsHint(_M('Informe os motivos', $module));
            $bsgReason = new MHcontainer('ctnReason', array( $unavailabilityReasonLabel, $unavailabilityReason ));
            $unavailabilityDateFields[] = $bsgReason;
            $unavailabilityDateFields[] = new MHiddenField('unavailabilityDate', $this->getFormValue('unavailabilityDate', $data->unavailabilityDate));
        }

        //Div para multiline do motivo de indisponibilidade
        $fields[] = new MDiv('divUnAvaible', $unavailabilityDateFields, 'm-form-row');

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Método chamado ao marcar ou desmarcar o campo Indisponível
     * @param type $args
     * @return type 
     */
    public function changeUnAvailable($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        if ( $args->isAvailable == DB_FALSE )
        {
            $unavailabilityReasonLabel = new MText('unavailabilityReasonLabel', _M('Motivo', $module) . ':');
            $unavailabilityReasonLabel->setClass('m-caption m-caption-required');
            $unavailabilityReasonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $unavailabilityReason = new MMultiLineField('unavailabilityReason', $this->getFormValue('unavailabilityReason', $args->unavailabilityReason), null, 40, 5, 40);
            $unavailabilityReason->setJsHint(_M('Informe os motivos', $module));
            $fields[] = $unavailabilityReasonLabel;
            $fields[] = $unavailabilityReason;
            $fields[] = new MHiddenField('unavailabilityDate', $this->getFormValue('unavailabilityDate', $args->unavailabilityDate));
        }
        else
        {
            $fields[] = new MHiddenField('limbo');
        }
        return $fields;
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->materialId = $this->getFormValue('materialId', MIOLO::_request('materialId'));
        $data->physicalResourceId = $this->getFormValue('physicalResourceId', MIOLO::_request('physicalResourceId'));
        $data->physicalResourceVersion = $this->getFormValue('physicalResourceVersion', MIOLO::_request('physicalResourceVersion'));
        $data->materialTypeId = $this->getFormValue('materialTypeId', MIOLO::_request('materialTypeId'));
        $data->description = $this->getFormValue('description', MIOLO::_request('description'));
        $data->detailedDescription = $this->getFormValue('detailedDescription', MIOLO::_request('detailedDescription'));
        $data->isAvailable = ($this->getFormValue('isAvailable', MIOLO::_request('isAvailable')) == DB_FALSE ? DB_FALSE : DB_TRUE );
        $data->unavailabilityReason = $this->getFormValue('unavailabilityReason', MIOLO::_request('unavailabilityReason'));
        $data->unavailabilityDate = $this->getFormValue('unavailabilityDate', MIOLO::_request('unavailabilityDate'));
        $data->internalCode = $this->getFormValue('internalCode', MIOLO::_request('internalCode'));
        
        //Caso indisponível verifica e atribui a data que se tornou indisponível
        if ( $data->isAvailable == DB_FALSE )
        {
            if ( !strlen($data->unavailabilityDate) > 0 )
            {
                $data->unavailabilityDate = SAGU::getDateNow();
            }
        }
        else
        {
            unset($data->unavailabilityDate); //Limpa a data da indisponibilidade
            unset($data->unavailabilityReason); //Limpa o motivo
        }
        return $data;
    }

    /**
     * Função que salva os dados
     *
     * @param $sender
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');
        $action = MIOLO::getCurrentAction();
        $msg = ($function == SForm::FUNCTION_UPDATE) ? SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED') : SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');

        try
        {
            $data = $this->getTypesData();

            // Verifica se o Internal code já existe na base
            $filters = new stdClass();
            $filters->internalCode = $data->internalCode;            
            $searchMaterial = InsMaterial::searchGrid($filters);            
            if ( count($searchMaterial) > 0 )
            {
                if( $searchMaterial[0][0] != $data->materialId)
                {
                    throw new Exception(_M('O código interno já esta sendo utilizado em outro material.', $module));
                }
            }
            
            // New database transaction
            $material = new InsMaterial();
            $material->materialId = $data->materialId;
            $material->physicalResourceId = $data->physicalResourceId;
            $material->physicalResourceVersion = $data->physicalResourceVersion;
            $material->materialTypeId = $data->materialTypeId;
            $material->description = $data->description;
            $material->detailedDescription = $data->detailedDescription;
            $material->isAvailable = $data->isAvailable;
            $material->unavailabilityReason = $data->unavailabilityReason;
            $material->unavailabilityDate = $data->unavailabilityDate;
            $material->internalCode = $data->internalCode;

            if ( $material->isAvailable == DB_FALSE )
            {
                if ( !strlen($material->unavailabilityReason) > 0 )
                {
                    throw new Exception(_M('Informe o motivo da indisponibilidade.', $module));
                }
            }
            // Salva os dados na base
            SDatabase::beginTransaction();
            $material->save();
            SDatabase::commit();

            if ( $function == SForm::FUNCTION_UPDATE )
            {
                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL($module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                $opts = array( 'function' => SForm::FUNCTION_INSERT );

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Questão', $module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        catch ( Exception $e )
        {
            $this->AddError($e->getMessage());
        }
    }
}
?>