<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Tela de consulta de emprestimos de materiais
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 06/06/2011
 *
 * */

/**
 * Form to search the acdMaterial table
 */
class FrmMaterialLoanSearch extends SManagementForm
{
    private $dateOpts = array();

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(new InsMaterialLoan(), array( 'materialLoanId' ));

        //Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $limbo = new MHiddenField('limboS', '');
        $fields[] = $limbo;

        // Campo solicitante
        $person = new MLookupContainer('personId', 'personName', $this->GetFormValue('personId', $data->personId), _M('Solicitante', $module), 'personName', 'basic', 'PhysicalPerson', null, true, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $person->setLookupJsHint(_M('Informe o código do solicitante', $module));
        $person->setDescriptionJsHint(_M('Nome do solicitante', $module));
        $fields[] = $person;
        
        // Campo solicitação
        $fields[] = new SLookupContainer('materialRequestId', $this->getFormValue('materialRequestId', MIOLO::_REQUEST('requestId')), array(
            'item' => 'MaterialRequestInstitutional',
            'module' => $module,
            'label' => _M('Solicitação', $module),
        ));

        // Cria campos Retirada, Devolucao prevista, Devolucao
        $this->dateOpts = $dateOpts = array(
            array(
                'label' => _M('Retirada', $module),
                'begin' => array('dateId' => 'beginDateMin', 'timeId' => 'beginTimeMin'),
                'end' => array('dateId' => 'beginDateMax', 'timeId' => 'beginTimeMax'),
            ),
            array(
                'label' => _M('Devolução prevista', $module),
                'begin' => array('dateId' => 'expectedEndDateMin', 'timeId' => 'expectedEndTimeMin'),
                'end' => array('dateId' => 'expectedEndDateMax', 'timeId' => 'expectedEndTimeMax'),
            ),
            array(
                'label' => _M('Devolução', $module),
                'begin' => array('dateId' => 'endDateMin', 'timeId' => 'endTimeMin'),
                'end' => array('dateId' => 'endDateMax', 'timeId' => 'endTimeMax'),
            ),
        );

        foreach ( $dateOpts as $opts )
        {
            $opts = array(
                'label' => $opts['label'],
                'baseGroup' => false,
                'disposition' => 'horizontal',
                'type' => 'timestamp',
                'begin' => array_merge(array('label' => _M('de', $module)), $opts['begin']),
                'end' => array_merge(array('label' => _M('a', $module)), $opts['end']),
                'todayButton' => true
            );
            $fields[] = new SBeginEndPeriod($opts);

            $validators[] = new MDATEDMYValidator($opts['begin']['dateId'], _M('Data inicial @1', $module, $opts['label']), 'optional');
            $validators[] = new MTIMEValidator($opts['begin']['timeId'], _M('Hora inicial @1', $module, $opts['label']), 'optional');
            $validators[] = new MDATEDMYValidator($opts['end']['dateId'], _M('Data final @1', $module, $opts['label']), 'optional');
            $validators[] = new MTIMEValidator($opts['end']['timeId'], _M('Hora final @1', $module, $opts['label']), 'optional');
        }

        //Campo tipo de material
        $materialType = new MLookupContainer('materialTypeId', 'materialTypeDescription', $this->getFormValue('materialTypeId', $data->materialTypeId), _M('Tipo de material', $module), 'materialTypeDescription', $module, 'MaterialTypeInstitutional', null, true, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $materialType->setLookupJsHint(_M('Informe o código do recurso físico', $module));
        $materialType->setDescriptionJsHint(_M('Descrição do recurso físico', $module));
        $fields[] = $materialType;

        // Material
        $material = new MLookupContainer('materialId', 'materialDescription', '', _M('Material', $module), 'materialDescription, materialTypeId, materialTypeDescription', $module, 'Material', array('materialTypeId'=>'materialTypeId'), true, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $material->setLookupJsHint(_M('Informe o código do material', $module));
        $material->setDescriptionJsHint(_M('Descrição do material', $module));
        $fields[] = $material;

        // Somente nao devolvidos
        $lbl1 = new MText(rand(), _M('Somente não devolvidos', $module) . ':');
        $lbl1->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $onlyNotReturnedValue = MIOLO::_REQUEST('onlyNotReturned');
        $onlyNotReturned = new MCheckBox('onlyNotReturned', DB_TRUE, null, strlen($onlyNotReturnedValue) > 0);
        $lbl = new MText(rand(), _M('Marque esta caixa para listar somente materiais que ainda não foram devolvidos', $module));
        $fields[] = new MHContainer(rand(), array($lbl1, $onlyNotReturned, $lbl));
        
        $fields[] = new MButton('btnSearch', _M('Localizar', $module));
        
        $grid = $this->grid = $MIOLO->getUI()->getGrid($module, 'GrdMaterialLoanConsult');
        $fields[] = $grid;

        parent::defineFields($fields, $validators);
    }
    
    /**
     *  Ação do botão Localizar
     */
    public function btnSearch_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        foreach ( $this->dateOpts as $key => $opts )
        {
            foreach ( array('begin', 'end') as $val )
            {
                $positionLabel = $val == 'begin' ? _M('inicial', $module) : _M('final', $module);
                $dateValue = $this->getRequestValue($opts[$val]['dateId']);
                $timeValue = $this->getRequestValue($opts[$val]['timeId']);
                if ( strlen($dateValue) > 0 )
                {
                    $containValue[$key][$val] = true;

                    if ( strlen($timeValue) <= 0 )
                    {
                        $this->addError(_M('Informe a hora @1 da @2', $module, $positionLabel, $opts['label']));
                    }
                }
                else if ( strlen($timeValue) > 0 )
                {
                    $containValue[$key][$val] = true;

                    if ( strlen($dateValue) <= 0 )
                    {
                        $this->addError(_M('Informe a data @1 da @2', $module, $positionLabel, $opts['label']));
                    }
                }
            }

            //Obrigar para que sempre que seja preenchido data inicial, seja tambem preenchido data final
            if ( $containValue[$key]['begin'] && !$containValue[$key]['end'] )
            {
                $this->AddError(_M('Informe a data final da @1', $module, $opts['label']));
            }
            if ( $containValue[$key]['end'] && !$containValue[$key]['begin'] )
            {
                $this->AddError(_M('Informe a data inicial da @1', $module, $opts['label']));
            }
        }

        if ( count($this->errors) == 0 ) //Se validou todos os campos sem erros
        {
            $filters = $this->getData();
            $data = $this->object->searchGridConsult($filters);
            $this->grid->setData($data);
        }
    }

    public function getData()
    {
        $data = parent::getData();

        foreach ( $this->dateOpts as $opts )
        {
            foreach ( array('begin', 'end') as $val )
            {
                $key = $opts[$val]['dateId'];
                $data->$key = $this->getRequestValue($opts[$val]['dateId']) . ' ' . $this->getRequestValue($opts[$val]['timeId']);
                $data->$key = trim($data->$key);
            }
        }

        return $data;
    }
}
?>