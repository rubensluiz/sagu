<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdPhysicalResource table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 23/09/2005
 *
 **/

/**
 * Form to search the acdPhysicalResource table
 */
class FrmPhysicalResourceSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', 'basic'), new InsPhysicalResource(), array('physicalResourceId'), 'BusPhysicalResource');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $limbo = new MHiddenField('limboS', '');
        $fields[] = $limbo;

        //Field physical resources
        $physicalResourceIdS = new MTextField('physicalResourceIdS', $this->physicalResourceIdS->value, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $physicalResourceIdS->setJsHint(_M('Informe o código do recurso físico', $module));
        $fields[] = $physicalResourceIdS;
        $validators[] = new MIntegerValidator('physicalResourceIdS', _M('Código do recurso físico', $module));

        //Field physical resources version
        $physicalResourceVersionS = new MTextField('physicalResourceVersionS', $this->physicalResourceVersionS->value, _M('Versão', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $physicalResourceVersionS->setJsHint(_M('Informe a versão do recurso físico', $module));
        $fields[] = $physicalResourceVersionS;
        $validators[] = new MIntegerValidator('physicalResourceVersionS', _M('Versão', $module));

        //Field date version
        $dateVersionS = new MCalendarField('dateVersionS', $this->dateVersionS->value, _M('Data da versão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateVersionS->setJsHint(_M('Informe a data da versão',$module));
        $validators[] = new MDateDMYValidator('dateVersionS', _M('Data da versão', $module));
        $fields[] = $dateVersionS;

        //Field description
        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descriptionS->setJsHint(_M('Informe a descrição',$module));
        $fields[] = $descriptionS;

        //Field unit
        $business = new BusinessBasicBusUnit();
        $unitIdS = new MComboBox('unitIdS', $this->getFormValue('unitIdS', $this->unitIdS->value), _M('Unidade',$module), $business->listUnit());
        $unitIdS->setJsHint(_M('Informe o código da unidade',$module));
        $fields[] = $unitIdS;
        $validators[] = new MIntegerValidator('unitIdS');

        //Field room
        $roomS = new MTextField('roomS', $this->roomS->value, _M('Sala',$module), 10);
        $roomS->setJsHint(_M('Informe a sala',$module));
        $fields[] = $roomS;

        //Field building
        $buildingS = new MTextField('buildingS', $this->buildingS->value, _M('Prédio',$module), 10);
        $buildingS->setJsHint(_M('Informe o prédio',$module));
        $fields[] = $buildingS;

        //Field coordinator
        $coorLabelS = new MText('coorLabelS', _M('Coordenador', $module) . ':');
        $coorLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $coordIdS = new MLookupTextField('coordIdS', $this->coordIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'coordNameS', 'basic', 'PhysicalPersonEmployeeAndProfessor', null, null, true);
        $coordIdS->setJsHint(_M('Informe o código do coordenador', $module));
        $validators[] = new MIntegerValidator('coordIdS', _M('Coordenador',$module), 'optional');
        $coordNameS = new MTextField('coordNameS', $this->coordNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $coordNameS->setJsHint(_M('Informe o código nome do coordenador',$module));
        $hctCoorS = new MHContainer('hctCoorS', array($coorLabelS, $coordIdS, $coordNameS));
        $fields[] = $hctCoorS;

        //Field area
        $areaM2S = new MTextField('areaM2S', $this->areaM2S->value, _M('Área',$module), 10, 'm<sup>2</sup>');
        $areaM2S->setJsHint(_M('Informe a área',$module));
        $fields[] = $areaM2S;
        $validators[] = new MFloatValidator('areaM2S', _M('Área',$module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'));

        //Field area type
        $business = new BusinessInstitutionalBusAreaType();
        $areaTypeS = new MSelection('areaTypeIdS', $this->areaTypeS->value, _M('Tipo de área',$module), $business->listAreaType());
        $areaTypeS->setJsHint(_M('Informe os tipos de área',$module));
        $fields[] = $areaTypeS;

        if ( SAGU::getParameter('BASIC', 'MODULE_ACCOUNTANCY_INSTALLED') == 'YES' )
        {
            $costCenterLabelS = new MText('costCenterLabelS', _M('Centro de custo', $module) . ':');
            $costCenterLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $costCenterIdS = new MLookupTextField('costCenterIdS', $this->getFormValue('costCenterIdS',$data->costCenterIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'costCenterDescriptionS', 'accountancy', 'CostCenter', null, null, true);
            $costCenterIdS ->setJsHint(_M('Informe o código do centro de custo', $module));
            $validators[] = new MIntegerValidator('costCenterIdS', _M('Centro de custo',$module));
            $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->costCenterDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $costCenterDescriptionS->setJsHint(_M('Descrição do centro de custo', $module));
            $costCenterDescriptionS->setReadOnly(true);
            $hctcostCenter = new MHContainer('hctcostCenter', array($costCenterLabelS, $costCenterIdS, $costCenterDescriptionS));
            $fields[] = $hctcostCenter;
        }

        //Field group area
        $groupTypeLabelS = new MText('groupTypeLabelS', _M('Categoria', $module) . ':');
        $groupTypeLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $groupTypeIdS = new MLookupTextField('groupTypeIdS', $this->groupTypeIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'groupTypeDescriptionS', $module, 'GroupType', null, null, true);
        $groupTypeIdS->setJsHint(_M('Informe o código da categoria',$module));
        $validators[] = new MIntegerValidator('groupTypeIdS', _M('Categoria',$module), 'optional');
        $groupTypeDescriptionS = new MTextField('groupTypeDescriptionS', $this->groupTypeDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $groupTypeDescriptionS->setJsHint(_M('Informe a descrição da categoria',$module));
        $groupTypeDescriptionS->setReadOnly(true);
        $hctGroupType = new MHContainer('hctGroupType', array($groupTypeLabelS, $groupTypeIdS, $groupTypeDescriptionS));
        $fields[] = $hctGroupType;

        parent::defineFields($fields, $module, 'GrdPhysicalResourceSearch', $validators);
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();

        $fieldCoordId = 'coordId';
        $fieldCostCenter = 'costCenterId';

        if ( strlen(MIOLO::_REQUEST($fieldCostCenter)) == 0 )
        {
            $fieldCostCenter .= 'S';
        }

        if ( strlen(MIOLO::_REQUEST($fieldCoordId)) == 0 )
        {
            $fieldCoordId .= 'S';
        }

        $data->coord = MIOLO::_REQUEST($fieldCoordId);
        $data->costCenter = MIOLO::_REQUEST($fieldCostCenter);

        return $data;
    }
}
?>