<?php


/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Physical person lookup form
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Nataniel Ingor da Silva [nataniel@solis.coop.br]
 *
 * @since
 * Class created on 17/09/2013
 *
 **/

/**
 * Form to manipulate a city lookup
 **/
class FrmPhysicalResourceLookup extends SManagementForm
{
    
    
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct( new InsPhysicalResource(), array('physicalResourceId'), 'BusPhysicalResource', _M('Inserir recurso físico', $module) );
        
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        if(MIOLO::_REQUEST('unitId'))
        {
            $unitId2 = MIOLO::_REQUEST('unitId'); 
        }else
        {
            $unitId2 = MIOLO::_REQUEST('unitIdId');
        }        
        
        $businessUnit = new BusinessBasicBusUnit();
        $cbUnit = $businessUnit->listUnit();
        
        //Pega a descrição da unidade, a partir do id da unidade.
        for($i = 0; $i < count($cbUnit); $i++)
        {
            if($cbUnit[$i][0] == $unitId2)
            {
                $nameUnit = $cbUnit[$i][1];
            }
        }        
        
        $unit = new MTextField('unit', $this->getFormValue('unit', $nameUnit), _M('Unidade',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $unit->setJsHint(_M('Informe a unidade',$module));
        $unit->setReadOnly(true);
        $fields[] = $unit;
        
        $unitId = new MHiddenField('unitId', $this->getFormValue('unitId', $unitId2));
        $fields[] = $unitId;
                
        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição',$module));
        $fields[] = $description; 
        $validators[] = new MRequiredValidator('description');       

        $room = new MTextField('room', $this->getFormValue('room', $data->room), _M('Sala', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $room->setJsHint(_M('Informe a sala', $module));
        $fields[] = $room;
        $validators[] = new MRequiredValidator('room');
        
        //Valor padrão 1
        $physicalResourceVersion = new MHiddenField('physicalResourceVersion', $this->getFormValue('physicalResourceVersion', 1));
        $fields[] = $physicalResourceVersion; 
        
        //Busca a data de hoje
        $date = (date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')));        
        $dateVersion = new MHiddenField('dateVersion', $this->getFormValue('dateVersion', $date));
        $fields[] = $dateVersion;
        
        //Valor padrão 1
        $groupTypeId = new MHiddenField('groupTypeId', $this->getFormValue('groupTypeId',$data->groupTypeId));
        $fields[] = $groupTypeId;      
        
        parent::defineFields( $fields, $validators);
    
        $this->disableToolbar();

        $this->addButton( new formButton('tbBtnSave' , _M('Salvar', $module)));
        $this->addButton( new formButton('tbBtnBack' , _M('Voltar', $module), 'history.go(-1)'));
        
        $this->page->onLoad("document.getElementById('description').focus();");
        
    }

    public function tbBtnSave_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $MIOLO->uses('db/BusPhysicalResource.class', 'institutional');

        $data = $this->getTypesData();
        $business = new BusinessInstitutionalBusPhysicalResource();
        
        if(!($data->groupTypeId))
        {
            $data->groupTypeId = SAGU::getParameter( 'ACADEMIC', 'CATEGORIA_PADRAO_DO_RECUSRO_FISICO' );
        }         
                
        $business->insertPhysicalResource($data);        
        
        $id = $business->getLastInsertId();
        
        $this->salvaCamposCustomizaveis( $id );
        
        //Voltar para a tela anterior após inserir um registro
        $url = urldecode(MIOLO::_REQUEST('return_to'));
        $url .= '&id='.$id; 
        
        $MIOLO->page->redirect($url);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data = new InsPhysicalResource();        
        
        $data->unit = $this->getFormValue('unit');
        $data->unitId = $this->getFormValue('unitId');
        $data->description = $this->getFormValue('description');
        $data->room = $this->getFormValue('room');
        $data->physicalResourceVersion = $this->getFormValue('physicalResourceVersion');
        $data->dateVersion = $this->getFormValue('dateVersion');
        $data->groupTypeId = $this->getFormValue('groupTypeId');
        
        return $data;
    }
    
    /*
     * Foi reescrito a função para pegar os campos que foram adicionados e populados
     * no form de recurso físico.
     */
    
    public function getCustomFields($identifier, $customizedId=NULL, $suffix='')
    {
        $identifier = 'FrmPhysicalResource';
        
        $MIOLO = MIOLO::getInstance();
        
        if ( !$identifier )
        {
            return;
        }
        
        $this->mioloCustomizedId = $customizedId;

        // If customized id is set, then it's an edit action
        if ( isset($customizedId) )
        {
            // Load the custom fields values
            $data = MCustomValue::getFieldValues($identifier, $customizedId);            
        }

        $this->mioloCustomFields = MCustomField::listByIdentifier($identifier);

        $fields = array();
        $listNoYes = array(
            'f' => _M('No'),
            't' => _M('Yes'),
        );

        foreach ( $this->mioloCustomFields as $cfield )
        {
            $cfield instanceof MCustomField;
            
            $field = NULL;
            $validator = NULL;

            $cfield->suffix = $suffix;
            $id = $cfield->getInputId();
            $value = isset($data) ? $data->$id : $cfield->defaultValue;
            $label = _M($cfield->label, MIOLO::getCurrentModule());

            if ( $cfield->isRequired() )
            {
                $validator = new MRequiredValidator($id, $label);
            }

            switch ( $cfield->fieldFormat )
            {
                case MCustomField::FORMAT_BOOLEAN:
                    $field = new MSelection($id, $value, $label, $listNoYes);
                    break;

                case MCustomField::FORMAT_DATE:
                    $field = new MCalendarField($id, $value, $label);

                    if ( $cfield->isRequired() && $cfield->isEditable() && $cfield->isVisible() )
                    {
                        $field->validator->type = 'required';
                        $validator = NULL;
                    }

                    break;

                case MCustomField::FORMAT_DECIMAL:
                    $field = new MFloatField($id, $value, $label);
                    break;

                case MCustomField::FORMAT_INTEGER:
                    $field = new MTextField($id, $value, $label);
                    $validator = new MIntegerValidator($id, $label, $cfield->isRequired() ? 'required' : 'optional');
                    break;

                case MCustomField::FORMAT_LIST:
                    $field = new MSelection($id, $value, $label, $cfield->getListValues());
                    break;
                
                case MCustomField::FORMAT_LISTSQL:
                    $field = new MSelection($id, $value, $label, $cfield->getListSQL());
                    break;

                case MCustomField::FORMAT_LONG_TEXT:
                    $field = new MMultilineField($id, $value, $label, 25, 5, 20);
                    break;

                case MCustomField::FORMAT_TEXT:
                    $field = new MTextField($id, $value, $label);
                    break;
            }

            if ( $cfield->maxLength != 0 )
            {
                if ( !$validator )
                {
                    $validator = new MRegExpValidator($id, $label);
                }

                $validator->min = $cfield->minLength;
                $validator->max = $cfield->maxLength;
            }

            if ( $field )
            {
                if ( !$cfield->isEditable() )
                {
                    $field->setReadOnly(true);
                    $validator = NULL;
                }

                if ( !$cfield->isVisible() )
                {
                    $field->addBoxStyle('display', 'none');
                    $validator = NULL;
                }

                $fields[] = $field;
            }

            if ( $validator != NULL )
            {
                $this->addValidator($validator);
            }
        }
        
        return $fields;
    } 
    
    public function addCustomFields($identifier, $customizedId=NULL, $suffix='')
    {
        $identifier = 'FrmPhysicalResource';
        
        $fields = $this->getCustomFields($identifier, $customizedId, $suffix);
        
        if ( count($fields) > 0 )
        {
            $this->addFields( $fields );
        }
    }
}
?>
