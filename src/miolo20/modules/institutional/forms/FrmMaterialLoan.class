<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 02/06/2011
 */
class FrmMaterialLoan extends SForm
{
    private $isMaterialRequest = false;
    private $isMaterialLoan = false;

    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Empréstimo de materiais', $module), null, array('materialLoanId'));

        // Desabilita botão print da MToolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);

        // Deixa botão excluir habilitado somente no update
        if ( MIOLO::_request('function') != SForm::FUNCTION_UPDATE )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        }
        
        // Caso tenha um "return_to" adiciona o botão de voltar
        if ( strlen(MIOLO::_REQUEST('return_to')) > 0 )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
            $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
            
            $this->toolbar->setButtonURL(MToolBar::BUTTON_BACK, MIOLO::_REQUEST('return_to'));
            $this->toolbar->setIsPost(MToolBar::BUTTON_BACK, true);
        }
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Obtém parâmetros
        $materialRequestId = MIOLO::_REQUEST('materialRequestId');
        $materialLoanId = $this->getRequestValue('materialLoanId');
        $returnTo = MIOLO::_REQUEST('return_to');
        $this->isMaterialLoan = ( strlen($materialLoanId) > 0 );
        $this->isMaterialRequest = ( !$this->isMaterialLoan ) || (strlen($materialRequestId) > 0);

        // Hidden fields
        $fields[] = new SHiddenField('returnTo', $returnTo);
        $fields[] = new SHiddenField('materialLoanId', $materialLoanId);
        $fields[] = new SHiddenField('materialRequestId', $materialRequestId);
        
        if ( strlen($materialRequestId) > 0 )
        {
            // Obtem a solicitação de material
            $materialRequest = new InsMaterialRequest($materialRequestId);
            if ( strlen($materialRequest->materialId) > 0 )
            {
                $materialRequestType = $materialRequest->material->materialType->description;
            }
            else
            {
                $materialRequestType = $materialRequest->materialType->description;
            }

            // BaseGroup de informações
            $data = array(
                _M('Nome', $module) => $materialRequest->physicalPerson->name,
                _M('Retirada solicitada', $module) => $materialRequest->beginDate,
                _M('Devolução solicitada', $module) => $materialRequest->endDate,
                _M('Tipo de material', $module) => $materialRequestType,
                _M('Material', $module) => $materialRequest->material->description,
                _M('Observações', $module) => (strlen($materialRequest->observation) > 0) ? $materialRequest->observation : "-"
            );
            $fields[] = new SInformationField(array(
                'columns' => 1,
                'title' => _M('Dados da solicitação de material', $module),
                'value' => $data ));

            // obter tipo de material
            $materialTypeId = $this->GetFormValue('materialTypeId', MIOLO::_REQUEST('materialTypeId'));
            // se nao existir, tentar obter da solicitação
            if ( strlen($materialTypeId) == 0 )
            {
                if ( strlen($materialRequest->materialId) > 0 )
                {
                    $materialTypeId = $materialRequest->material->materialTypeId;
                }
                else
                {
                    $materialTypeId = $materialRequest->materialTypeId;
                }
            }
            list($dataPeriod->beginDate, $dataPeriod->beginTime) = explode(' ', $materialRequest->beginDate);
            list($dataPeriod->expectedEndDate, $dataPeriod->expectedEndTime) = explode(' ', $materialRequest->endDate);

            // Hidden field personId
            $fields[] = new MHiddenField('personId', $materialRequest->personId);

            // Hidden field materialRequestId
            $fields[] = new MHiddenField('materialRequestId', $materialRequest->materialRequestId);

            $fields[] = new MSeparator();
        }
        else
        {
            // Obtém o materialTypeId
            $materialTypeId = $this->GetFormValue('materialTypeId', $materialTypeId);
            
            //Edicao de emprestimo de material
            if ( $this->isMaterialLoan )
            {
                $fields[] = new MTextLabel('limbo', $materialLoanId, _M('Empréstimo', $module));
                
                $materialLoan = new InsMaterialLoan($materialLoanId);
                $materialTypeId = $materialLoan->material->materialTypeId;
                $data = $materialLoan;

                list($dataPeriod->beginDate, $dataPeriod->beginTime) = explode(' ', $materialLoan->beginDate);
                list($dataPeriod->expectedEndDate, $dataPeriod->expectedEndTime) = explode(' ', $materialLoan->expectedEndDate);
            }

            // Field person (Pessoa a quem será emprestado o material)
            $personId = new MLookupContainer('personId', 'personName', $data->personId, _M('Solicitante',$module), 'personName', 'basic', 'PhysicalPerson', array('personId' => 'personId'), true, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), !$this->page->isPostBack());
            $personId->showRequiredLabel = true;
            $personId->setLookupJsHint(_M('Informe o código do solicitante', $module));
            $personId->setDescriptionJsHint(_M('Nome do solicitante', $module));
            $fields[] = $personId;
            $validators[] = new MIntegerValidator('personId', _M('Solicitante', $module), 'required');
        }

        // Obtém as datas
        $beginDate = trim(MIOLO::_REQUEST('beginDate'). ' ' . MIOLO::_REQUEST('beginTime'));
        $expectedEndDate = trim(MIOLO::_REQUEST('expectedEndDate') . ' ' . MIOLO::_REQUEST('expectedEndTime'));
        $beginDate = (strlen($beginDate) > 0) ? $beginDate : $materialRequest->beginDate;
        $expectedEndDate = (strlen($expectedEndDate) > 0) ? $expectedEndDate : $materialRequest->endDate;

        // Field begin/end date/time
        // Caso já estavam preenchidos mantém os dados, se não, pega as datas da solicitação
        $dataPeriod->beginDate = (strlen(MIOLO::_REQUEST('beginDate')) > 0) ? MIOLO::_REQUEST('beginDate') : $dataPeriod->beginDate;
        $dataPeriod->beginTime = (strlen(MIOLO::_REQUEST('beginTime')) > 0) ? MIOLO::_REQUEST('beginTime') : $dataPeriod->beginTime;
        $dataPeriod->expectedEndDate = (strlen(MIOLO::_REQUEST('expectedEndDate')) > 0) ? MIOLO::_REQUEST('expectedEndDate') : $dataPeriod->expectedEndDate;
        $dataPeriod->expectedEndTime = (strlen(MIOLO::_REQUEST('expectedEndTime')) > 0) ? MIOLO::_REQUEST('expectedEndTime') : $dataPeriod->expectedEndTime;
        $fields[] = new SBeginEndPeriod(array(
            'data' => $dataPeriod,
            'required' => true,
            'baseGroup' => false,
            'type' => 'timestamp',
            'begin' => array(
                'label' => _M('Retirada', $module),
                'dateHint' => _M('Informe a data da retirada', $module),
                'timeHint' => _M('Informe a hora da retirada. Formato: hh:mm', $module)
            ),
            'end' => array(
                'dateId' => 'expectedEndDate',
                'timeId' => 'expectedEndTime',
                'label' => _M('Devolução prevista', $module),
                'dateHint' => _M('Informe a data prevista da devolução', $module),
                'timeHint' => _M('Informe a hora prevista da devolução. Formato: hh:mm', $module)
            )
        ));
        $validators[] = new MDATEDMYValidator('beginDate', _M('Data prevista da retirada', $module));
        $validators[] = new MRequiredValidator('beginDate', _M('Data prevista da retirada', $module));
        $validators[] = new MTIMEValidator('beginTime', _M('Hora prevista da retirada', $module), 'required');
        $validators[] = new MDATEDMYValidator('expectedEndDate', _M('Data prevista da devolução', $module), 'required');
        $validators[] = new MRequiredValidator('expectedEndDate', _M('Data prevista da devolução', $module));
        $validators[] = new MTIMEValidator('expectedEndTime', _M('Hora prevista da devolução', $module), 'required');

        // Field material type
        $materialTypeLabel = new MText('materialTypeLabel', _M('Tipo de material', $module) . ':');
        $materialTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $materialTypeLabel->setClass('m-caption m-caption-required');
        $materialTypeField = new MSelection('materialTypeId', $this->GetFormValue('materialTypeId', $materialTypeId), null, InsMaterialType::listMaterialType());
        $materialTypeField->addAttribute('onchange', $this->getAjaxAction('loadDivMaterial', 'divMaterial'));
        $materialTypeField->setJsHint('Tipo de material');
        $fields[] = new MHContainer('hctMaterialType', array($materialTypeLabel, $materialTypeField));

        // Na primeira vez que a tela é carregada, instancia a grid com os dados
        // que já foram obtidos por parâmetro.
        $args = new stdClass();
        $args->materialTypeId = $materialTypeId;
        $args->beginDate = $dataPeriod->beginDate;
        $args->beginTime = $dataPeriod->beginTime;
        $args->expectedEndDate = $dataPeriod->expectedEndDate;
        $args->expectedEndTime = $dataPeriod->expectedEndTime;
        $args->materialLoanId = $materialLoanId;
        $args->materialRequestId = $materialRequestId;
        $fields[] = new MDiv('divMaterial', $this->loadDivMaterial($args));

        // Field observações
        $fields[] = new MMultiLineField('returnObs', $data->returnObs, _M('Observações complementares', $module), null, 5, 80);

        $fields[] = new MSeparator();

        parent::defineFields();
        $this->SetFields($fields);
        $this->SetValidators($validators);
    }
    
    /**
     * Método chamado via ajax para construir a grid com os materiais.
     * 
     * @param object $args Recebe todos os campos do formulário.
     * 
     * @return array Campos a serem adicionados no container de destino
     */
    public function loadDivMaterial($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $fields = array();
        $fields[] = new MSeparator();
        $fields[] = $grid = $MIOLO->getUI()->getGrid($module, 'GrdMaterialLoan');
        
        if ( strlen($args->materialTypeId) > 0 )
        {
            // Dados da Grid
            $gridData = array();
            $filters = new stdClass();
            $filters->isAvailable = DB_TRUE;
            $filters->materialTypeId = $args->materialTypeId;
            $filters->beginDate = $args->beginDate . ' ' . $args->beginTime;
            $filters->endDate = $args->expectedEndDate . ' ' . $args->expectedEndTime;
            $filters->materialLoanIdToIgnore = $args->materialLoanId;
            $gridData = InsMaterial::searchGrid($filters);

            if ( strlen($args->materialLoanId) > 0 )
            {
                $materialLoan = new InsMaterialLoan($args->materialLoanId);
                $materialId = $materialLoan->materialId;
            }
            else
            {
                $materialRequest = new InsMaterialRequest($args->materialRequestId);
                $materialId = $materialRequest->materialId;
            }
            
            foreach( (array) $gridData as $key => $line )
            {
                if ( $line[0] == $materialId )
                {
                    $selecteds[] = $key;
                }
            }
            
            $grid->setData($gridData);
            $grid->setClose(null);
            $grid->clearActions();
            $grid->setTitle(_M('Itens', $module));
            $grid->addActionSelect();

            if( count($selecteds)>0 )
            {
                $grid->selecteds = $selecteds;
            }
        }

        // Separator
        $fields[] = new MSeparator();
        
        return $fields;
    }

    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Obtem os dados
        $args = $this->getData();

        // Volta para a tela de onde ele veio
        $returnTo = $args->returnTo;

        // Obtém o(s) material(is)
        $materials = array();
        foreach ( (array)MIOLO::_REQUEST('selectGrdMaterialLoan') as $materialId )
        {
            $materials[] = $materialId;
        }

        if ( !strlen($args->materialTypeId) > 0 )
        {
            // Deve ser escolhido um tipo de material
            $this->AddAlert(_M('Você deve escolher um tipo de material.', $module));
        }
        if ( count($materials) < 1 )
        {
            // Obriga a escolher um material
            $this->AddAlert(_M('Você deve escolher um material.', $module));
        }

        if ( count($materials) > 1 )
        {
            // Mais de um material escolhido
            $this->AddAlert(_M('Você deve escolher apenas um material.', $module));
        }

        $material = new InsMaterial($materials[0]);
        $materialType = new InsMaterialType($material->materialTypeId);

        // Se tem todos os dados corretamente:
        if ( !$this->HasAlerts() )
        {
            try
            {
                // Organiza os dados para salvar
                $insMaterialLoan = new InsMaterialLoan( $args->materialLoanId );
                $insMaterialLoan->materialRequestId = $args->materialRequestId;
                $insMaterialLoan->personId = $args->personId;
                $insMaterialLoan->beginDate = $args->beginDate . " " . $args->beginTime;
                $insMaterialLoan->expectedEndDate = $args->expectedEndDate . " " . $args->expectedEndTime;
                $insMaterialLoan->materialTypeId = $args->materialTypeId;
                $insMaterialLoan->material = $material;
                $insMaterialLoan->returnObs = $args->returnObs;
                
                // Salva a solicitação de material
                SDatabase::beginTransaction();
                $insMaterialLoan->registerLoan();
                SDatabase::commit();

                // Mensagem de inserido com sucesso
                $mode = strlen($args->materialLoanId) > 0 ? _M('atualizado', $module) : _M('inserido', $module);
                $href = (strlen($returnTo) > 0) ? $returnTo : $MIOLO->getActionURL($module, 'main:process:materialLoanConsult', null, array('function' => 'search'));

                SAGU::information(_M('Empréstimo @1 com sucesso!', $module, $mode), $href);
            }
            catch ( Exception $e )
            {
                // Em caso de erro, rollback e MIOLO->error
                SDatabase::rollback();
                $this->addError($e->getMessage());
            }
        }
    }

    public function tbBtnDelete_confirm($sender = NULL)
    {
        $insMaterialLoan = new InsMaterialLoan( $this->getRequestValue('materialLoanId') );
        $ok = $insMaterialLoan->delete();
        parent::tbBtnDelete_confirm($sender, $ok);
    }

    /**
     * Confirmacao de devolucao de emprestimo de material
     *
     * @param <type> $sender
     */
    public function returnLoanConfirm($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $args = SAGU::getRequestArgs(false);
        $args['event'] = 'returnLoan';
        $args['return_to'] = urlencode($args['return_to']);

        $gotoYes = $MIOLO->getActionURL($module, $action, 'returnLoan', $args);
        $gotoNo = $this->getRequestValue('return_to');
        SAGU::question(_M('Tem certeza que deseja devolver material?', $module), $gotoYes, $gotoNo);
    }


    /**
     * Devolucao de emprestimo de material
     */
    public function returnLoan($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        
        $goto = $this->getRequestValue('return_to');

        try
        {
            $materialLoanId = $this->getRequestValue('materialLoanId');

            //Define a data atual como data de devolucao
            $materialLoan = new InsMaterialLoan($materialLoanId);
            SDatabase::beginTransaction();
            $materialLoan->returnMaterial(SAGU::getDateNow( SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP') ), _M('Devolução sem observações'));
            SDatabase::commit();

            SAGU::information(_M('Material devolvido com sucesso', $module), $goto);
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            SAGU::error($e->getMessage(), $goto);
        }
    }
    
    /**
     * Confirmação para cancelamento do emprestimo do material
     *
     * @param <type> $sender
     */
    public function cancelLoanConfirm($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $args = SAGU::getRequestArgs(false);
        $args['event'] = 'cancelLoan';
        $args['return_to'] = urlencode($args['return_to']);

        $gotoYes = $MIOLO->getActionURL($module, $action, 'returnLoan', $args);
        $gotoNo = $this->getRequestValue('return_to');
        SAGU::question(_M('Tem certeza que deseja CANCELAR o empréstimo?', $module), $gotoYes, $gotoNo);
    }

    /**
     * Cancela o emprestimo de material
     */
    public function cancelLoan($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        
        $goto = $this->getRequestValue('return_to');

        try
        {
            $materialLoanId = $this->getRequestValue('materialLoanId');

            //Define a data atual como data de devolucao
            $materialLoan = new InsMaterialLoan($materialLoanId);
            SDatabase::beginTransaction();
            $materialLoan->cancelLoan(SAGU::getDateNow( SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP') ));
            SDatabase::commit();

            SAGU::information(_M('Empréstimo cancelado com sucesso', $module), $goto);
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            SAGU::error($e->getMessage(), $goto);
        }
    }
    
    /**
     * Confirmação para confimação do empréstimo
     *
     * @param <type> $sender
     */
    public function confirmLoanConfirm($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $args = SAGU::getRequestArgs(false);
        $args['event'] = 'confirmLoan';
        $args['return_to'] = urlencode($args['return_to']);

        $gotoYes = $MIOLO->getActionURL($module, $action, 'returnLoan', $args);
        $gotoNo = $this->getRequestValue('return_to');
        SAGU::question(_M('Tem certeza que deseja CONFIRMAR empréstimo?', $module), $gotoYes, $gotoNo);
    }
    
    /**
     * Confirma o emprestimo do material
     */
    public function confirmLoan($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        
        $goto = $this->getRequestValue('return_to');

        try
        {
            $materialLoanId = $this->getRequestValue('materialLoanId');

            //Define a data atual como data de devolucao
            $materialLoan = new InsMaterialLoan($materialLoanId);
            SDatabase::beginTransaction();
            $materialLoan->confirmLoan(SAGU::getDateNow( SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP') ));
            SDatabase::commit();

            SAGU::information(_M('Empréstimo realizado com sucesso', $module), $goto);
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            SAGU::error($e->getMessage(), $goto);
        }
    }
}
?>