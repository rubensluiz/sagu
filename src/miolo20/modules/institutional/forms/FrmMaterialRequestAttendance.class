<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for insMaterialType table
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 30/05/2011
 */
/**
 * Form to search the acdMaterial table
 */
class FrmMaterialRequestAttendance extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(new InsMaterialRequest(), array( 'materialRequestId' ), null, _M('Solicitações de materiais', $module));

        // Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $limbo = new MHiddenField('limboS', '');
        $fields[] = $limbo;

        // Campo solicitante
        $person = new MLookupContainer('personId', 'personName', $this->GetFormValue('personId', $data->personId), _M('Solicitante', $module), 'personName', 'basic', 'PhysicalPerson', null, true, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $person->setLookupJsHint(_M('Informe o código do solicitante', $module));
        $person->setDescriptionJsHint(_M('Nome do solicitante', $module));
        $fields[] = $person;

        // Retirada prevista
        $label1 = new MText('isFinanceGenerateLabel', _M('Data de retirada conforme solicitação', $module) . ' :');
        $label1->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $flds1[] = $label1;

        $opts2['baseGroup'] = false;
        $opts2['disposition'] = 'horizontal';
        $opts2['type'] = 'timestamp';
        $opts2['begin']['dateId'] = 'beginDateMin';
        $opts2['begin']['timeId'] = 'beginTimeMin';
        $opts2['begin']['label'] = _M('de', $module);
        $opts2['begin']['dateHint'] = _M('Informe a data inicial prevista para a retirada', $module);
        $opts2['begin']['timeHint'] = _M('Informe a hora inicial prevista para a retirada. Formato: hh:mm', $module);
        $opts2['end']['dateId'] = 'beginDateMax';
        $opts2['end']['timeId'] = 'beginTimeMax';
        $opts2['end']['label'] = _M('a', $module);
        $opts2['end']['dateHint'] = _M('Informe a data final prevista para a retirada', $module);
        $opts2['end']['timeHint'] = _M('Informe a hora final prevista para a retirada. Formato: hh:mm', $module);
        $opts2['todayButton'] = true;

        $flds1[] = new SBeginEndPeriod($opts2);
        $fields[] = new MHContainer('ctnFields1', $flds1);

        $validators[] = new MDATEDMYValidator('beginDateMin', _M('Data inicial prevista da retirada', $module), 'optional');
        $validators[] = new MTIMEValidator('beginTimeMin', _M('Hora inicial prevista da retirada', $module), 'optional');
        $validators[] = new MDATEDMYValidator('beginDateMax', _M('Data final prevista da retirada', $module), 'optional');
        $validators[] = new MTIMEValidator('beginTimeMax', _M('Hora final prevista da retirada', $module), 'optional');

        // Devolução prevista
        $label2 = new MText('isFinanceGenerateLabel', _M('Data de devolução conforme solicitação', $module) . ' :');
        $label2->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $flds2[] = $label2;

        $opts2['baseGroup'] = false;
        $opts2['disposition'] = 'horizontal';
        $opts2['type'] = 'timestamp';
        $opts2['begin']['dateId'] = 'endDateMin';
        $opts2['begin']['timeId'] = 'endTimeMin';
        $opts2['begin']['label'] = _M('de', $module);
        $opts2['begin']['dateHint'] = _M('Informe a data inicial prevista para a devolução', $module);
        $opts2['begin']['timeHint'] = _M('Informe a hora inicial prevista para a devolução. Formato: hh:mm', $module);
        $opts2['end']['dateId'] = 'endDateMax';
        $opts2['end']['timeId'] = 'endTimeMax';
        $opts2['end']['label'] = _M('a', $module);
        $opts2['end']['dateHint'] = _M('Informe a data final prevista para a devolução', $module);
        $opts2['end']['timeHint'] = _M('Informe a hora final prevista para a devolução. Formato: hh:mm', $module);
        $opts2['todayButton'] = true;

        $flds2[] = new SBeginEndPeriod($opts2);
        $fields[] = new MHContainer('ctnFields2', $flds2);

        $validators[] = new MDATEDMYValidator('endDateMin', _M('Data inicial prevista da devolução', $module), 'optional');
        $validators[] = new MTIMEValidator('endTimeMin', _M('Hora inicial prevista da devolução', $module), 'optional');
        $validators[] = new MDATEDMYValidator('endDateMax', _M('Data final prevista da devolução', $module), 'optional');
        $validators[] = new MTIMEValidator('endTimeMax', _M('Hora final prevista da devolução', $module), 'optional');

        // Campo tipo de material
        $materialType = new MLookupContainer('materialTypeId', 'materialTypeDescription', $this->GetFormValue('materialTypeId', $data->materialTypeId), _M('Tipo de material', $module), 'materialTypeDescription', $module, 'MaterialTypeInstitutional', null, true, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $materialType->setLookupJsHint(_M('Informe o código do recurso físico', $module));
        $materialType->setDescriptionJsHint(_M('Descrição do recurso físico', $module));
        $fields[] = $materialType;

        // Material
        $material = new MLookupContainer('materialId', 'materialDescription', '', _M('Material', $module), 'materialDescription, materialTypeId, materialTypeDescription', $module, 'Material', array( 'materialTypeId' => 'materialTypeId' ), true, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $material->setLookupJsHint(_M('Informe o código do material', $module));
        $material->setDescriptionJsHint(_M('Descrição do material', $module));
        $fields[] = $material;

        // Listar solicitações
        $options = InsMaterialStatus::listStatus();
        $fields[] = new MMultiSelection('situationsS', $this->GetFormValue('situationsS', array(InsMaterialStatus::STATUS_REQUEST_MADE)), _M('Status a considerar', $module), $options, false, '', 5);

        //Campo local do material
        $physicalResourceLabel = new MText('physicalResourceLabelS', _M('Recurso físico', $module) . ':');
        $physicalResourceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $physicalResourceId = new MLookupTextField('physicalResourceId', $this->getFormValue('physicalResourceId', $data->physicalResourceId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'physicalResourceId, physicalResourceVersion, physicalResourceDescription, room, building', $module, 'PhysicalResource', null, null, true);
        $physicalResourceId->setJsHint(_M('Código do recurso físico', $module));
        $physicalResourceVersion = new MTextField('physicalResourceVersion', $this->getFormValue('physicalResourceVersion', $data->physicalResourceVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $physicalResourceVersion->setReadOnly(true);
        $physicalResourceVersion->setJsHint(_M('Versão do recurso físico', $module));
        $physicalResourceDescription = new MTextField('physicalResourceDescription', $this->getFormValue('physicalResourceDescription', $data->physicalResourceDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $physicalResourceDescription->setJsHint(_M('Descrição do recurso físico', $module));
        $physicalResourceDescription->setReadOnly(true);
        $hctMaterial = new MHContainer('hctMaterial', array( $physicalResourceLabel, $physicalResourceId, $physicalResourceVersion, $physicalResourceDescription ));
        $fields[] = $hctMaterial;

        $fields[] = new MButton('btnSearch', _M('Localizar', $module));

        $grid = $this->grid = $MIOLO->getUI()->getGrid($module, 'GrdMaterialRequestAttendance');
        $fields[] = $grid;
        
        $fields[] = new MDiv('respAjax');

        parent::defineFields($fields, $validators);
    }

    /**
     *  Ação do botão Localizar
     */
    public function btnSearch_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( (strlen($this->GetFormValue('beginTimeMin', MIOLO::_request('beginTimeMin'))) > 0) && (!strlen($this->GetFormValue('beginDateMin', MIOLO::_request('beginDateMin'))) > 0) )
        {
            $this->addError(_M('Informe a data inicial prevista para a retirada', $module));
        }

        if ( (!strlen($this->GetFormValue('beginTimeMin', MIOLO::_request('beginTimeMin'))) > 0) && (strlen($this->GetFormValue('beginDateMin', MIOLO::_request('beginDateMin'))) > 0) )
        {
            $this->addError(_M('Informe o horário inicial previsto para a retirada', $module));
        }

        if ( (strlen($this->GetFormValue('beginTimeMax', MIOLO::_request('beginTimeMax'))) > 0) && (!strlen($this->GetFormValue('beginDateMax', MIOLO::_request('beginDateMax'))) > 0) )
        {
            $this->addError(_M('Informe a data final prevista para a retirada', $module));
        }

        if ( (!strlen($this->GetFormValue('beginTimeMax', MIOLO::_request('beginTimeMax'))) > 0) && (strlen($this->GetFormValue('beginDateMax', MIOLO::_request('beginDateMax'))) > 0) )
        {
            $this->addError(_M('Informe o horário final previsto para a retirada', $module));
        }

        if ( (strlen($this->GetFormValue('endTimeMin', MIOLO::_request('endTimeMin'))) > 0) && (!strlen($this->GetFormValue('endDateMin', MIOLO::_request('endDateMin'))) > 0) )
        {
            $this->addError(_M('Informe a data inicial prevista para a devolução', $module));
        }

        if ( (!strlen($this->GetFormValue('endTimeMin', MIOLO::_request('endTimeMin'))) > 0) && (strlen($this->GetFormValue('endDateMin', MIOLO::_request('endDateMin'))) > 0) )
        {
            $this->addError(_M('Informe o horário inicial previsto para a devolução', $module));
        }

        if ( (strlen($this->GetFormValue('endTimeMax', MIOLO::_request('endTimeMax'))) > 0) && (!strlen($this->GetFormValue('endDateMax', MIOLO::_request('endDateMax'))) > 0) )
        {
            $this->addError(_M('Informe a data final prevista para a devolução', $module));
        }

        if ( (!strlen($this->GetFormValue('endTimeMax', MIOLO::_request('endTimeMax'))) > 0) && (strlen($this->GetFormValue('endDateMax', MIOLO::_request('endDateMax'))) > 0) )
        {
            $this->addError(_M('Informe o horário final previsto para a devolução', $module));
        }

        if ( count($this->errors) == 0 ) // Se validou todos os campos sem erros
        {
            $filters = $this->getTypesData();
            $data = $this->object->searchRequestsForAttendance($filters);
            $this->grid->setData($data);
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->personId = $this->GetFormValue('personId', MIOLO::_request('personId'));
        $data->beginDateMin = $this->GetFormValue('beginDateMin', MIOLO::_request('beginDateMin')) . ' ' . $this->GetFormValue('beginTimeMin', MIOLO::_request('beginTimeMin'));
        $data->beginDateMax = $this->GetFormValue('beginDateMax', MIOLO::_request('beginDateMax')) . ' ' . $this->GetFormValue('beginTimeMax', MIOLO::_request('beginTimeMax'));
        $data->endDateMin = $this->GetFormValue('endDateMin', MIOLO::_request('endDateMin')) . ' ' . $this->GetFormValue('endTimeMin', MIOLO::_request('endTimeMin'));
        $data->endDateMax = $this->GetFormValue('endDateMax', MIOLO::_request('endDateMax')) . ' ' . $this->GetFormValue('endTimeMax', MIOLO::_request('endTimeMax'));
        $data->materialTypeId = $this->GetFormValue('materialTypeId', MIOLO::_request('materialTypeId'));
        $data->materialId = $this->GetFormValue('materialId', MIOLO::_request('materialId'));
        $data->situations = $this->GetFormValue('situationsS', MIOLO::_request('situationsS'));
        $data->physicalResourceId = $this->GetFormValue('physicalResourceId', MIOLO::_request('physicalResourceId'));
        $data->reasonRejected = $this->GetFormValue('reasonRejected', MIOLO::_request('reasonRejected'));

        return $data;
    }
    
    public function tbBtnCancel($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $reasonRejected = new MMultiLineField('reasonRejected', null, _M('Motivo', $module),100,5,40,_M('Tamanho máximo de 160 caracteres',$module));
        $reasonRejected->addAttribute('maxlength', '160');
        $fields[] = $reasonRejected;
        $materialRequestId = new MTextField('materialRequestId',$_REQUEST['materialRequestId']);
        $materialRequestId->addBoxStyle('display', 'none');
        $fields[] = $materialRequestId;
        $fields[] = new MButton('tbBtnCancel', '', SForm::getAjaxAction('tbBtnCancelData','respAjax'));
        $fields2[] = new MFormContainer('',$fields);
        
        MPopup::show('reasonRejectedPopup', $fields2, _M('Indeferir', $module));
    }
    
    public function tbBtnCancelData($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
                
        $goto = $MIOLO->getActionURL($module, $action, null, array('materialRequestId'=>$args->materialRequestId, 'reasonRejected'=>rawurlencode($args->reasonRejected), 'event'=>'tbBtnCancel_click'));
        $goto = str_replace('&amp;', '&', $goto);

        $this->page->addAjaxJsCode("window.location = '$goto'");
        
        return '';
    }
    

    /**
     * Evento que exibe mensagem de confirmação para cancelamento de solicitação de material
     */
    public function tbBtnCancel_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data = $this->getTypesData();
        
        $opts = array( 'event' => 'tbBtnCancel_confirm', 'reasonRejected' => $_REQUEST['reasonRejected'] );

        foreach ( $this->pkey as $field )
        {
            $opts[$field] = MIOLO::_request($field);
        }
        
        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
        $goto = SAGU::getStackBackUrl();
        $gotoNo = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg = _M('Tem certeza que deseja indeferir a solicitação?', $module);
        $caption = _M('Questão', $module);
        SAGU::question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Evento chamado na confirmação do cancelamento de uma solicitação. Cancela a solicitação de material
     */
    public function tbBtnCancel_confirm($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        try
        {
            $ok = $this->getTypeObjectPopulated()->cancelRequest();

            $msg = _M('Solicitação de material indeferida com sucesso!');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação', $module);
            SAGU::information($msg, $goto);
        }
        catch ( Exception $e )
        {
            $this->AddError($e->getMessage());
        }
    }
}
?>