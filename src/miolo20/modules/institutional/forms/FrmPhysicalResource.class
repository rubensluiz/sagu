<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Form to manipulate insPhysicalResource table records
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 23/09/2005
 *
 **/

class FrmPhysicalResource extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new InsPhysicalResource(), array('physicalResourceId'), 'BusPhysicalResource');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $physicalResourceId = $pk->physicalResourceId;

            $fields[] = new MTextLabel('physicalResourceId', $physicalResourceId, _M('Código',$module));
            $fields[] = new MHiddenField('physicalResourceId', $physicalResourceId);

            $physicalResourceVersion = $_GET['physicalResourceVersion'] ? $_GET['physicalResourceVersion'] : $_POST['physicalResourceVersion'];
            $fields[] = new MTextLabel('physicalResourceVersion', $physicalResourceVersion, _M('Versão',$module));
            $fields[] = new MHiddenField('physicalResourceVersion', $physicalResourceVersion);

            $data = $this->busObject->getPhysicalResource($physicalResourceId, $physicalResourceVersion);

            $this->page->onLoad('document.' . $this->name . '.dateVersion.focus();');
        }
        else
        {
            //Field physical resources version
            $physicalResourceVersion = new MTextField('physicalResourceVersion', $this->getFormValue('physicalResourceVersion', $data->physicalResourceVersion), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $physicalResourceVersion->setJsHint(_M('Informe a versão do recurso físico', $module));
            $fields[] = $physicalResourceVersion;
            $validators[] = new MIntegerValidator('physicalResourceVersion', '', 'required');

            $this->page->onLoad('document.' . $this->name . '.physicalResourceVersion.focus();');
        }

        //Field date version
        $dateVersion = new MCalendarField('dateVersion', $this->getFormValue('dateVersion', $data->dateVersion), _M('Data da versão',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateVersion->setJsHint(_M('Informe a data da versão', $module));
        $dateVersion->setValidator( new MDateDMYValidator('dateVersion', '', 'required') );
        $fields[] = $dateVersion;
        $dateVersion->isRequired = true;

        //Field description
        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição', $module));
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description');

        //Field unit
        $business = new BusinessBasicBusUnit();
        $unitId = new MComboBox('unitId', $this->getFormValue('unitId', $data->unitId), _M('Unidade', $module), $business->listUnit());
        $unitId->setJsHint(_M('Informe o código da unidade',$module));
        $validators[] = new MRequiredValidator('unitId');
        $fields[] = $unitId;

        //Field room
        $room = new MTextField('room', $this->getFormValue('room', $data->room), _M('Sala', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $room->setJsHint(_M('Informe a sala', $module));
        $fields[] = $room;

        //Field building
        $building = new MTextField('building', $this->getFormValue('building', $data->building), _M('Prédio',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $building->setJsHint(_M('Informe o prédio', $module));
        $fields[] = $building;

        //Field coordinator
        $coorLabel = new MText('coorLabel', _M('Coordenador',$module) . ':');
        $coorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $coordId = new MLookupTextField('coordId', $this->getFormValue('coordId2', $data->coord), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'coordName', 'basic', 'PhysicalPersonEmployeeAndProfessor', null, null, true);
        $coordId->setJsHint(_M('Informe o código do coordenador',$module));
        $validators[] = new MIntegerValidator('coordId', '', 'optional');
        $coordName = new MTextField('coordName', $this->coordName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $coordName->setJsHint(_M('Informe o nome do coordenador',$module));
        $coordName->setReadOnly(true);
        $hctCoor = new MHContainer('hctCoor', array($coorLabel, $coordId, $coordName));
        $fields[] = $hctCoor;

        //Field area
        $areaM2 = new MTextField('areaM2', $this->getFormValue('areaM2', $data->areaM2), _M('Área',$module), 10, 'm<sup>2</sup>');
        $areaM2->setJsHint(_M('Informe a área', $module));
        $fields[] = $areaM2;
        $validators[] = new MIntegerValidator('areaM2', '', 'optional');

        //Field area type
        $business = new BusinessInstitutionalBusAreaType();
        $areaType = new MSelection('areaTypeId', $this->getFormValue('areaTypeId', $data->areaTypeId), _M('Tipo de área',$module), $business->listAreaType());
        $areaType->setJsHint(_M('Informe o tipo de área', $module));
        $fields[] = $areaType;

        if ( SAGU::getParameter('BASIC', 'MODULE_ACCOUNTANCY_INSTALLED') == 'YES' )
        {
            $costCenterLabel = new MText('costCenterLabel', _M('Centro de custo', $module) . ':');
            $costCenterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $costCenterId = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId',$data->costCenter), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
            $costCenterId ->setJsHint(_M('Informe o código do centro de custo',$module));
            $costCenterDescription = new MTextField('costCenterDescription', $this->costCenterDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $costCenterDescription->setJsHint(_M('Descrição do centro de custo', $module));
            $costCenterDescription->setReadOnly(true);
            $hctcostCenter = new MHContainer('hctcostCenter', array($costCenterLabel, $costCenterId, $costCenterDescription));
            $fields[] = $hctcostCenter;
        }

        //Field group type
        $groupTypeLabel = new MText('groupTypeLabel', _M('Categoria', $module) . ':');
        $groupTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $groupTypeLabel->setClass('m-caption m-caption-required');
        $groupTypeId = new MLookupTextField('groupTypeId', $this->getFormValue('groupTypeId',$data->groupTypeId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'groupTypeDescription', $module, 'GroupType', null, null, true);
        $groupTypeId->setJsHint(_M('Informe o código da categoria', $module));
        $validators[] = new MIntegerValidator('groupTypeId', _M('Código da categoria',$module), 'required');
        $groupTypeDescription = new MTextField('groupTypeDescription', $this->groupTypeDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $groupTypeDescription->setJsHint(_M('Informe a descrição da categoria',$module));
        $groupTypeDescription->setReadOnly(true);
        $hctGroupType = new MHContainer('hctGroupType', array($groupTypeLabel, $groupTypeId, $groupTypeDescription));
        $fields[] = $hctGroupType;

        parent::defineFields($fields, $validators, $data);
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();

        $fieldCoordId = 'coordId';
        $fieldCostCenter = 'costCenterId';

        if ( strlen(MIOLO::_REQUEST($fieldCostCenter)) == 0 )
        {
            $fieldCostCenter .= 'S';
        }

        if ( strlen(MIOLO::_REQUEST($fieldCoordId)) == 0 )
        {
            $fieldCoordId .= 'S';
        }

        $data->coord = MIOLO::_REQUEST($fieldCoordId);
        $data->costCenter = MIOLO::_REQUEST($fieldCostCenter);

        return $data;
    }
    
}
?>