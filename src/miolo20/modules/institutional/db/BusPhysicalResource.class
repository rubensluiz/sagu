<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for insPhysicalResource table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 23/09/2005
 *
 **/

/**
 * Class to manipulate the insPhysicalResource table
 **/
class BusinessInstitutionalBusPhysicalResource extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listPhysicalResource()
    {
        $sql = 'SELECT room || \'/\' || building,
                       description
                  FROM insPhysicalResource
              ORDER BY building, room';

        $db = $this->getDatabase();
        $result = $db->query($sql);

        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $physicalResourceId (integer): Primary key of the record to be retrieved
     * @param $physicalResourceVersion (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPhysicalResource($physicalResourceId, $physicalResourceVersion)
    {
        $sql = 'SELECT A.physicalResourceId,
                       A.physicalResourceVersion,
                       TO_CHAR(A.dateVersion,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.description,
                       A.unitId,
                       A.room,
                       A.building,
                       A.coord,
                       B.name AS coordName,
                       A.areaM2,
                       A.areaTypeId,
                       D.description AS areaTypeDescription,
                       A.costCenter,
                       A.groupTypeId,
                       C.description AS groupTypeDescription,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM insPhysicalResource A
        LEFT JOIN ONLY basPerson B
                    ON (B.personId = A.coord)
             LEFT JOIN insGroupType C
                    ON (C.groupTypeId = A.groupTypeId)
             LEFT JOIN insAreaType D
                    ON (D.areaTypeId = A.areaTypeId)
                 WHERE A.physicalResourceId = ?
                   AND A.physicalResourceVersion = ?';

        $args = array( $physicalResourceId,
                       $physicalResourceVersion );

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        $physicalResource = new InsPhysicalResource();

        list ( $physicalResource->physicalResourceId,
               $physicalResource->physicalResourceVersion,
               $physicalResource->dateVersion,
               $physicalResource->description,
               $physicalResource->unitId,
               $physicalResource->room,
               $physicalResource->building,
               $physicalResource->coord,
               $physicalResource->coordName,
               $physicalResource->areaM2,
               $physicalResource->areaTypeId,
               $physicalResource->areaTypeDescription,
               $physicalResource->costCenter,
               $physicalResource->groupTypeId,
               $physicalResource->groupTypeDescription,
               $physicalResource->userName,
               $physicalResource->dateTime,
               $physicalResource->ipAddress ) = $result[0];

        return $physicalResource;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPhysicalResource($filters)
    {
        $sql = 'SELECT A.physicalResourceId,
                       A.physicalResourceVersion,
                       TO_CHAR(A.dateVersion,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.description,
                       A.unitId,
                       D.description AS unitDescription,
                       A.room,
                       A.building,
                       A.coord,
                       B.name AS coordName,
                       A.areaM2,
                       A.areaTypeId,
                       E.description AS areaTypeDescription,
                       A.costCenter,
                       A.groupTypeId,
                       C.description AS groupTypeDescription,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM insPhysicalResource A
        LEFT JOIN ONLY basPerson B
                    ON (B.personId = A.coord)
             LEFT JOIN insGroupType C
                    ON (C.groupTypeId = A.groupTypeId)
             LEFT JOIN basUnit D
                    ON (D.unitId = A.unitId)
             LEFT JOIN insAreaType E
                    ON (E.areaTypeId = A.areaTypeId)';

        if ( strlen($filters->physicalResourceId) > 0 )
        {
            $where .= ' AND A.physicalResourceId = ?';
            $args[] = $filters->physicalResourceId;
        }
        if ( strlen($filters->physicalResourceVersion) > 0 )
        {
            $where .= ' AND A.physicalResourceVersion = ?';
            $args[] = $filters->physicalResourceVersion;
        }
        if ( strlen($filters->dateVersion) > 0 )
        {
            $where .= ' AND A.dateVersion = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->dateVersion;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( strlen($filters->room) > 0 )
        {
            $where .= ' AND A.room ILIKE ?';
            $args[] = $filters->room . '%';
        }
        if ( strlen($filters->building) > 0 )
        {
            $where .= ' AND A.building ILIKE ?';
            $args[] = $filters->building . '%';
        }
        if ( strlen($filters->coord) > 0 )
        {
            $where .= ' AND A.coord = ?';
            $args[] = $filters->coord;
        }
        if ( strlen($filters->coordName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $filters->coordName . '%';
        }
        if ( strlen($filters->areaM2) > 0 )
        {
            $where .= ' AND A.areaM2 = ?';
            $args[] = $filters->areaM2;
        }
        if ( strlen($filters->areaTypeId) > 0 )
        {
            $where .= ' AND A.areaTypeId = ?';
            $args[] = $filters->areaTypeId;
        }
        if ( strlen($filters->costCenter) > 0 )
        {
            $where .= ' AND A.costCenter = ?';
            $args[] = $filters->costCenter;
        }
        if ( strlen($filters->groupTypeId) > 0 )
        {
            $where .= ' AND A.groupTypeId = ?';
            $args[] = $filters->groupTypeId;
        }
        if ( strlen($filters->groupTypeDescription) > 0 )
        {
            $where .= ' AND UNACCENT(C.description) ILIKE UNACCENT(?)';
            $args[] = $filters->groupTypeDescription . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.description';

            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPhysicalResource($data)
    {
        $sql = 'INSERT INTO insPhysicalResource
                            (physicalResourceVersion,
                             dateVersion,
                             description,
                             unitId,
                             room,
                             building,
                             coord,
                             areaM2,
                             areaTypeId,
                             costCenter,
                             groupTypeId)
                     VALUES (?,
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( $data->physicalResourceVersion,
                       $data->dateVersion,
                       $data->description,
                       $data->unitId,
                       $data->room,
                       $data->building,
                       $data->coord,
                       $data->areaM2,
                       $data->areaTypeId,
                       $data->costCenter,
                       $data->groupTypeId );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePhysicalResource($data)
    {
        $sql = 'UPDATE insPhysicalResource
                   SET dateVersion = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       description = ?,
                       unitId = ?,
                       room = ?,
                       building = ?,
                       coord = ?,
                       areaM2 = ?,
                       areaTypeId = ?,
                       costCenter = ?,
                       groupTypeId = ?
                 WHERE physicalResourceId = ?
                   AND physicalResourceVersion = ?';

        $args = array( $data->dateVersion,
                       $data->description,
                       $data->unitId,
                       $data->room,
                       $data->building,
                       $data->coord,
                       $data->areaM2,
                       $data->areaTypeId,
                       $data->costCenter,
                       $data->groupTypeId,
                       $data->physicalResourceId,
                       $data->physicalResourceVersion );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $physicalResourceId (string): Primary key for deletion
     * @param $physicalResourceVersion (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePhysicalResource($physicalResourceId)
    {
        $sql = 'DELETE FROM insPhysicalResource
                      WHERE physicalResourceId = ?';

        $db = $this->getDatabase();

        $result = $db->execute(SAGU::prepare($sql, $physicalResourceId));

        return $result;
    }


    /**
     * Obtem os horarios de aula de uma sala especifica.
     * Para ser utilizado inicialmente no FrmResourceAllocation (no componente de calendario).
     *
     * @param int $physicalResourceId Id do recurso
     * @param int $year Ano para ser obtido os eventos
     * @param int $month (opcional) Mes que deve ser filtrado no periodo
     *
     * @return array
     */
    public function getCalendarEvent($physicalResourceId, $year, $month = null)
    {
        $sql .= "SELECT
        A.data,
        TO_CHAR(A.data, 'yyyymmdd') AS dateCalendar,
        EXTRACT(month FROM A.data) AS month,
        
        --Obtem as aulas desta data separado por timeId, e quebrado com \n
        (SELECT ARRAY_TO_STRING(ARRAY(
                      SELECT TO_CHAR(_T.beginHour, 'hh24') || 'h-' || TO_CHAR(_T.endHour, 'hh24') ||'h: '|| _CC.name || ' (' || (

                        --Obtem professores separado por virgula
                        ARRAY_TO_STRING(ARRAY(
                             SELECT __PP.name
                              FROM acdScheduleProfessor __SP
                   INNER JOIN ONLY basPhysicalPerson __PP
                                ON (__PP.personId = __SP.professorId)
                             WHERE _S.scheduleId = __SP.scheduleId
                        ), ', ')) || ')'

                        FROM acdTime _T
                  INNER JOIN acdSchedule _S
                          ON ((_T.timeId IN (
                                    SELECT UNNEST(timeIds)
                                      FROM acdSchedule
                                     WHERE _S.scheduleId = scheduleId))
                         AND (A.data IN (
                                    SELECT UNNEST(occurrenceDates)
                                      FROM acdSchedule
                                     WHERE _S.scheduleId = scheduleId)))
                  INNER JOIN acdGroup _G
                          ON (_G.groupId = _S.groupId)
                  INNER JOIN unit_acdcurriculum _C
                          ON (_G.curriculumId = _C.curriculumId)
                  INNER JOIN acdCurricularComponent _CC
                          ON (_CC.curricularComponentId = _C.curricularComponentId
                         AND _CC.curricularComponentVersion = _C.curricularComponentVersion)
                  INNER JOIN insPhysicalResource _PR
                          ON (_S.physicalResourceId = _PR.physicalResourceId)
                       WHERE _PR.physicalResourceId = ?

                    --Pega horarios de etapas de processo seletivo
                    UNION ALL
                          SELECT CASE WHEN CHAR_LENGTH(sprs) > 0 THEN '00h-23:59h - Processo seletivo: ' || sprs ELSE NULL END
                            FROM ARRAY_TO_STRING(ARRAY(
                                  SELECT DISTINCT SPR1.description
                                    FROM spr.stepPlace SP1
                              INNER JOIN spr.step S1
                                      ON (S1.stepId = SP1.stepId)
                              INNER JOIN spr.selectiveProcess SPR1
                                      ON (SPR1.selectiveProcessId = S1.selectiveProcessId)
                              INNER JOIN insPhysicalResource PR1
                                      ON (PR1.physicalResourceId = SP1.physicalResourceId
                                     AND SP1.physicalResourceVersion = SP1.physicalResourceVersion)
                                   WHERE PR1.physicalResourceId = ?
                                     AND A.data BETWEEN S1.startDate AND S1.endDate), ', ') AS sprs

                    ORDER BY 1), '\\n')) AS events

            FROM (SELECT GENERATE_SERIES(
                    ?::date,
                    ?::date + interval '1month -1day', --Pega ultimo dia do mes corretamente
                    '1 days')::date AS data) A";

        //Cria periodo de datas a partir de parametros passados.
        //Caso $month = NULL, pega do primeiro ao ultimo dia do ano.
        $month1 = strlen($month) > 0 ? $month : '01';
        $month2 = strlen($month) > 0 ? $month : '12';
        $dateBegin = "{$year}-{$month1}-01";
        $dateEnd = "{$year}-{$month2}-01";
        
        $args = array();
        $args[] = $physicalResourceId;
        $args[] = $physicalResourceId;
        $args[] = $dateBegin;
        $args[] = $dateEnd;

        $db = $this->getDatabase();
        $result = (array) $db->query(SAGU::prepare($sql, $args));

        return (array) SAGU::resultToObject($result, array(
            'date',
            'dateCalendar',
            'month',
            'events',
        ));
    }
}
?>
