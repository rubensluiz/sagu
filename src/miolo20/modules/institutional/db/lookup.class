<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file manipulate the lookups for the institutional module
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 23/09/2005
 */

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Class to manipulate the Lookups
 */
class BusinessInstitutionalLookup
{
    /**
     * Auto complete for material
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteMaterial(&$context)
    {
        $sql = 'SELECT A.description,
                       A.materialtypeid,
                       B.description
                  FROM ins.material A
             LEFT JOIN ins.materialType B
                    ON A.materialTypeId = B.materialTypeId
                 WHERE materialId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for material
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupMaterial(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $materialId = $lookup->getFilterValue('materialId');
        $description = $lookup->getFilterValue('description');
        $materialTypeId = $lookup->getFilterValue('materialTypeId');

        $lookup->addFilterField( new MTextField('materialId', $materialId, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('materialTypeId', $materialTypeId, _M('Tipo de material',$module) ) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array();
        $columns[] = new DataGridColumn('materialId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Descrição', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('materialTypeId', _M('Código do tipo de material', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('materialTypeDescription', _M('Tipo de material', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('physicalResourceId', _M('Código do recurso físico', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('physicalResourceVersion', _M('Versão do recurso físico', $module), 'left', true, NULL, true);
        
        $columns[] = new MDataGridColumn('detailedDescription', _M('Detalhes', $module), 'left', true, NULL, true);

        $sql = 'SELECT A.materialId,
                       A.description,
                       A.materialtypeid,
                       B.description as materialTypeDescription,
                       A.physicalresourceid,
                       A.physicalresourceversion,                                          
                       A.detaileddescription
                  FROM ins.material A
            INNER JOIN ins.materialType B
                    ON (A.materialTypeId=B.materialTypeId)';

        if ( strlen($materialId) > 0 )
        {
            $where .= ' AND A.materialId = ? ';
            $params[] = $materialId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $params[] = $description . '%';
        }

        if ( strlen($materialTypeId) > 0 )
        {
            $where .= ' AND A.materialTypeId = ? ';
            $params[] = $materialTypeId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Procura por material',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for group type
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteGroupType(&$context)
    {
        $sql = 'SELECT description
                  FROM insGroupType
                 WHERE groupTypeId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for group type
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupGroupType(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $groupTypeId = $lookup->getFilterValue('groupTypeId');
        $description = $lookup->getFilterValue('description');

        $lookup->addFilterField( new MTextField('groupTypeId', $groupTypeId, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Categoria',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array();
        $columns[] = new DataGridColumn('groupTypeId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Categoria', $module), 'left', true, null, true);

        $sql = 'SELECT A.groupTypeId,
                       A.description
                  FROM insGroupType A';

        if ( strlen($groupTypeId) > 0 )
        {
            $where .= ' AND A.groupTypeId = ? ';
            $params[] = $groupTypeId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $params[] = $description . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar categoria',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for physical resource
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePhysicalResource(&$context)
    {
        $sql = 'SELECT A.physicalResourceId,
                       A.physicalResourceVersion,
                       A.description,
                       A.room,
                       A.building,
                       TO_CHAR(A.dateVersion,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as dateVersion,
                       A.coord,
                       B.name AS coordName,
                       A.areaM2,
                       A.areaTypeId,
                       A.costCenter,
                       A.groupTypeId,
                       C.description AS groupTypeDescription
                  FROM insPhysicalResource A
        LEFT JOIN ONLY basPerson B
                    ON ( B.personId = A.coord )
             LEFT JOIN insGroupType C
                    ON ( C.groupTypeId = A.groupTypeId ),
                       (  SELECT physicalResourceId,
                                 MAX(physicalResourceVersion) AS physicalResourceVersion
                            FROM insPhysicalResource
                           WHERE physicalResourceId = ?
                        GROUP BY physicalResourceId ) D
                 WHERE A.physicalResourceId = D.physicalResourceId
                   AND A.physicalResourceVersion = D.physicalResourceVersion';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for physical resource
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPhysicalResource(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');
        $unitId = MIOLO::_REQUEST('unitId');       
        $id = MIOLO::_REQUEST('id');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $physicalResourceId = $lookup->getFilterValue('physicalResourceId');
        $physicalResourceVersion = $lookup->getFilterValue('physicalResourceVersion');
        $dateVersion = $lookup->getFilterValue('dateVersion');
        $description = $lookup->getFilterValue('description');
        $room = $lookup->getFilterValue('room');
        $building = $lookup->getFilterValue('building');
        $groupTypeId = $lookup->getFilterValue('groupTypeId');
        $unitId2 = $lookup->getFilterValue('unitId2');
        $search = $lookup->getFilterValue('search');
        
        //Caso tenha sido inserido um novo recurso físico, ele já preenche o filtro com o seu id.
        if($id)
        {
            $physicalResourceId = $id; 
            $search = $id;
        }

        if(SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'NO')
        {
            $lookup->addFilterField( new MTextField('physicalResourceId', $physicalResourceId, _M('Código do recurso físico', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
            $lookup->addFilterField( new MTextField('physicalResourceVersion', $physicalResourceVersion, _M('Versão do recurso físico', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
            $lookup->addFilterField( new MTextField('dateVersion', $dateVersion, _M('Data da versão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_LOOKUP_SIZE')) );
            $lookup->addFilterField( new MTextField('description', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
            $lookup->addFilterField( new MTextField('room', $room, _M('Sala', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
            $lookup->addFilterField( new MTextField('building', $building, _M('Prédio', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
            $lookup->addFilterField( new MHiddenField('unitId2', $unitId));
            
            $business = new BusinessInstitutionalBusGroupType();
            $lookup->addFilterField( new MComboBox('groupTypeId', $groupTypeId, _M('Categoria', $module), $business->listGroupType() ) );
                        
        }else
        {
            $lookup->addFilterField( new MTextField('search', $search, _M('Busca', $module), '40') );
            $lookup->addFilterField( new MHiddenField('unitId2', $unitId));            
        }        

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array();
        $columns[] = new DataGridColumn('physicalResourceId', _M('Código do recurso físico', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('physicalResourceVersion', _M('Versão do recurso físico', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('description', _M('Descrição', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('room', _M('Sala', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('building', _M('Prédio', $module), 'left', true, null, true);
        new DataGridColumn('groupTypeDescription', _M('Categoria', $module), 'left', true, null, true);

        $sql = 'SELECT A.physicalResourceId,
                       A.physicalResourceVersion,
                       A.description,
                       A.room,
                       A.building
                  FROM insPhysicalResource A
        LEFT JOIN ONLY basPerson B
                    ON ( B.personId = A.coord )
             LEFT JOIN insGroupType C
                    ON ( C.groupTypeId = A.groupTypeId )';
        
        if(SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'NO')
        {
            if ( strlen($physicalResourceId) > 0 )
            {
                $where .= ' AND A.physicalResourceId = ?';
                $params[] = $physicalResourceId;
            }

            if ( strlen($physicalResourceVersion) > 0 )
            {
                $where .= ' AND A.physicalResourceVersion = ?';
                $params[] = $physicalResourceVersion;
            }

            if ( strlen($dateVersion) > 0 )
            {
                $where .= ' AND A.dateVersion = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
                $params[] = $dateVersion;
            }

            if ( strlen($description) > 0 )
            {
                $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
                $params[] = $description . '%';
            }

            if ( strlen($room) > 0 )
            {
                $where .= ' AND A.room ILIKE ?';
                $params[] = $room . '%';
            }

            if ( strlen($building) > 0 )
            {
                $where .= ' AND A.building ILIKE ?';
                $params[] = $building . '%';
            }

            if ( strlen($coord) > 0 )
            {
                $where .= ' AND A.coord = ?';
                $params[] = $coord;
            }

            if ( strlen($coordName) > 0 )
            {
                $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
                $params[] = $coordName . '%';
            }

            if ( strlen($areaM2) > 0 )
            {
                $where .= ' AND A.areaM2 = ?';
                $params[] = $areaM2;
            }

            if ( strlen($areaTypeId) > 0 )
            {
                $where .= ' AND A.areaTypeId = ?';
                $params[] = $areaTypeId;
            }

            if ( strlen($costCenter) > 0 )
            {
                $where .= ' AND A.costCenter = ?';
                $params[] = $costCenter;
            }

            if ( strlen($groupTypeId) > 0 )
            {
                $where .= ' AND A.groupTypeId = ?';
                $params[] = $groupTypeId;
            }

            if ( strlen($groupTypeDescription) > 0 )
            {
                $where .= ' AND UNACCENT(C.description) ILIKE UNACCENT(?)';
                $params[] = $groupTypeDescription . '%';
            }

            if ( strlen($where) > 0 )
            {
                $sql .= ' WHERE ' . substr($where, 5);
            }

            $sql .= ' ORDER BY A.description';

            $sqlObject = new sql();
            if ( strlen($where) == 0 )
            {
                $sql .= ' LIMIT 0';
            }

        }else
        {
             if ( strlen($search) > 0 )
            {
                $where .= ' AND (A.physicalResourceId::TEXT = ?
                             OR A.description ILIKE  ?
                             OR A.room ILIKE ?
                             OR A.building ILIKE ? )';
                
                $params[] = $search;
                $params[] = '%' .$search. '%';
                $params[] = '%' .$search. '%';
                $params[] = '%' .$search. '%';
            }
            if ( strlen($where) > 0 )
            {
                $sql .= ' WHERE ' . substr($where, 5);
            }

            $sql .= ' ORDER BY A.physicalResourceId,
                                A.description';

            $sqlObject = new sql();
            if ( strlen($where) == 0 )
            {
                $sql .= ' LIMIT 0';
            }
            
        }
        
        $sqlObject->createFrom(SAGU::prepare($sql,$params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar recurso físico',$module), 15, 0);
        $lookup->grid->setIsScrollable();
        if ( $disableInsertNew != DB_TRUE )
        {
            $args = $_GET;
            $args['unitIdId'] = $lookup->getFilterValue('unitId2');
            
            //Adicina url da lookup aos parametros para que possa ser acessada novamente
            $args['return_to'] = urlencode(MIOLO::getCurrentURL()); 
            unset($args['module']);
            
            $url = $MIOLO->getActionURL('institutional', 'physicalResourceLookup', '', $args);
            $lookup->grid->header[] = '<b><center><a href="' . $url . '">' . _M('Inserir novo', 'basic') . '</a></center></b><br>';            
        }
    }


    /**
     * Autocomplete da lookup de requisição de material
     *
     * @param type $context
     */
    public function autoCompleteMaterialRequestInstitutional(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT COALESCE(B.description, T.description) ||' - '|| P.name
              FROM ins.materialrequest A
         LEFT JOIN ins.material B
                ON (A.materialId = B.materialId)
   INNER JOIN ONLY basPhysicalPerson P
                ON (P.personId = A.personId)
         LEFT JOIN ins.materialType T
                ON (T.materialTypeId = A.materialTypeId)
             WHERE A.materialRequestId = ?";

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup de requisição de material
     *
     * @global type $MIOLO
     * @param type $lookup
     */
    public function lookupMaterialRequestInstitutional(&$lookup)
    {
        global $MIOLO;

        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.materialId.focus()");

        $data = (object) $_REQUEST;

        $fields[] = new MTextField('materialRequestId', $data->materialRequestId, _M('Código da solicitação de material', $module), 10);

        $fields[] = new SLookupContainer('materialId', $data->materialId, array(
            'item' => 'Material',
            'module' => $module,
            'label' => _M('Material', $module),
            'descriptionSize' => 15,
        ));

        $fields[] = new SLookupContainer('materialTypeId', $data->materialTypeId, array(
            'item' => 'MaterialTypeInstitutional',
            'module' => $module,
            'label' => _M('Tipo de material', $module),
            'descriptionSize' => 15,
        ));

        $fields[] = new SLookupContainer('personId', $data->personId, array(
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'label' => _M('Pessoa', $module),
            'descriptionSize' => 15,
        ));

        $fields[] = new MCalendarField('beginDate', $data->beginDate, _M('Data de retirada', $module), 10);
        $fields[] = new MCalendarField('endDate', $data->endDate, _M('Data de devolução', $module), 10);
        $fields[] = new MCalendarField('cancelDate', $data->cancelDate, _M('Data de cancelamento', $module), 10);

        foreach ( $fields as $field )
        {
            $lookup->addFilterField($field);
        }

        $columns[] = new MDataGridColumn('materialRequestId', _M('Código', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('materialTypeId', _M('Cod. tipo de material', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('materialType', _M('Tipo de material', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('materialId', _M('Código do material', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('material', _M('Material', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('personId', _M('Código da pessoa', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('personName', _M('Pessoa', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('beginDate', _M('Data de retirada', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('endDate', _M('Data de devolução', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('cancelDate', _M('Data de cancelamento', $module), 'left', true, NULL, true);

        $sql = 'SELECT A.materialRequestId,
                       A.materialtypeid,
                       B.description AS materialType,
                       A.personId,
                       P.name AS personName,
                       TO_CHAR(A.begindate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') AS beginDate,
                       TO_CHAR(A.enddate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') AS endDate,
                       TO_CHAR(A.canceldate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') AS cancelDate,
                       A.materialId,
                       M.description AS material
                  FROM ins.materialrequest A
             LEFT JOIN ins.materialType B
                    ON (A.materialTypeId = B.materialTypeId)
       INNER JOIN ONLY basPhysicalPerson P
                    ON (P.personId = A.personId)
             LEFT JOIN ins.material M
                    ON (M.materialId = A.materialId)
                  WHERE 1=1';

        if (strlen($data->materialRequestId) > 0)
        {
            $where.=' AND A.materialRequestId = ?';
            $params[] = $data->materialRequestId;
        }

        if (strlen($data->materialId) > 0)
        {
            $where.=' AND A.materialId = ?';
            $params[] = $data->materialId;
        }

        if (strlen($data->materialTypeId) > 0)
        {
            $where.=' AND A.materialtypeid = ?';
            $params[] = $data->materialTypeId;
        }

        if (strlen($data->personId) > 0)
        {
            $where.=' AND A.personId = ?';
            $params[] = $data->personId;
        }

        if (strlen($data->beginDate) > 0)
        {
            $where.=' AND A.begindate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $data->beginDate;
        }

        if (strlen($data->endDate) > 0)
        {
            $where.=' AND A.enddate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $data->endDate;
        }

        if (strlen($data->cancelDate) > 0)
        {
            $where.=' AND A.canceldate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $data->cancelDate;
        }

        $sql.= $where . ' ORDER BY A.materialRequestId';

        if (strlen($where) == 0)
        {
            $sql.=' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteMaterialTypeInstitutional(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT description,
                       allowloanbytype,
                       allowloanbymaterial,
                       availabilitycontrol
                  FROM ins.materialtype
                 WHERE materialtypeid = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupMaterialTypeInstitutional(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.description.focus()");

        $materialTypeId = $lookup->getFilterValue('materialTypeId');
        $description = $lookup->getFilterValue('description');
        $allowLoanByType = $lookup->getFilterValue('allowLoanByType');
        $allowLoanByMaterial = $lookup->getFilterValue('allowLoanByMaterial');
        $availabilityControl = $lookup->getFilterValue('availabilityControl');

        $lookup->addFilterField(new MTextField('materialTypeId', $materialTypeId, _M('Código', $module), 10));
        $descriptionField = new MTextField('description', $description, _M('Descrição', $module), 20);
        $descriptionField->addAttribute('maxlength', '255');

        $lookup->addFilterField($descriptionField);
        $lookup->addFilterField(new MRadioButtonGroup('allowLoanByType', _M('Por tipo de material', $module), SAGU::listTrueFalseIndifferent(1), $allowLoanByType, NULL, 'horizontal'));
        $lookup->addFilterField(new MRadioButtonGroup('allowLoanByMaterial', _M('Por material', $module), SAGU::listTrueFalseIndifferent(1), $allowLoanByMaterial, NULL, 'horizontal'));
        $lookup->addFilterField(new MRadioButtonGroup('availabilityControl', _M('Controlar disponibilIdade', $module), SAGU::listTrueFalseIndifferent(1), $availabilityControl, NULL, 'horizontal'));

        $columns[] = new MDataGridColumn('materialTypeId', _M('Código', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('description', _M('Descrição', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('allowLoanByType', _M('Por tipo de material', $module), 'left', true, null, true, SAGU::listYesNo(0));
        $columns[] = new MDataGridColumn('allowLoanByMaterial', _M('Por material', $module), 'left', true, null, true, SAGU::listYesNo(0));
        $columns[] = new MDataGridColumn('availabilityControl', _M('Controlar disponibilIdade', $module), 'left', true, null, true, SAGU::listYesNo(0));

        $sql = 'SELECT materialtypeid,
                       description,
                       allowloanbytype,
                       allowloanbymaterial,
                       availabilitycontrol
                  FROM ins.materialtype';

        if (strlen($materialTypeId) > 0)
        {
            $where.=' AND materialtypeid = ?';
            $params[] = $materialTypeId;
        }

        if (strlen($description) > 0)
        {
            $where.=' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $params[] = $description.'%';
        }

        if (strlen($allowLoanByType) > 0)
        {
            $where.=' AND allowloanbytype = ?';
            $params[] = $allowLoanByType;
        }

        if (strlen($allowLoanByMaterial) > 0)
        {
            $where.=' AND allowloanbymaterial = ?';
            $params[] = $allowLoanByMaterial;
        }

        if (strlen($availabilityControl) > 0)
        {
            $where.=' AND availabilitycontrol = ?';
            $params[] = $availabilityControl;
        }

        if (strlen($where) > 0)
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql.=' ORDER BY materialtypeid';

        if (strlen($where) == 0)
        {
            $sql.=' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar tipo de material', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete materialLoan
     * @param type $context
     */
    public function autoCompleteMaterialLoanInstitutional(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT materialRequestId,
                       personId,
                       materialId,
                       TO_CHAR(begindate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(expectedenddate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(enddate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       returnobs
                  FROM materialloan
                 WHERE materialloanId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup materialLoan
     *
     * @global type $MIOLO
     * @param type $lookup
     */
    public function lookupMaterialLoanInstitutional(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.materialRequestId.focus()");

        $lookup->addFilterField(new MTextField('materialLoanId', '', _M('Código', $module), 10));
        $materialRequestLabel = new MText('materialRequestLabel', _M('Código da solicitação de material', $module).':');
        $materialRequestLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $materialRequestId = new MLookupTextField('materialRequestId', $this->getFormValue('materialRequestId', $data->materialRequestId), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), NULL, NULL, 'materialRequestDescription', $module, 'MaterialTypeInstitutional', NULL, NULL, true);
        $materialRequestId->setJsHint(_M('Informe o código da solicitação de material', $module));
        $materialRequestDescription = new MTextField('materialRequestDescription', $this->getFormValue('materialRequestDescription', $data->materialRequestDescription), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), NULL, true);
        $materialRequestDescription->setJsHint(_M('Descrição da solicitação de material', $module));
        $materialRequestId = new MHContainer('materialRequestIdCnt', array($materialRequestLabel, $materialRequestId, $materialRequestDescription));
        $lookup->addFilterField($materialRequestId);

        $personLabel = new MText('personLabel', _M('Pessoa', $module).':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), NULL, NULL, 'personName', 'basic', 'PhysicalPerson', NULL, NULL, true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), NULL, true);
        $personName->setJsHint(_M('Descrição da pessoa', $module));
        $personId = new MHContainer('personIdCnt', array($personLabel, $personId, $personName));
        $lookup->addFilterField($personId);

        $lookup->addFilterField(new MTextField('materialId', '', _M('Código do material', $module), 10));
        $lookup->addFilterField(new MCalendarField('beginDate', '', _M('Data de retirada', $module), 10));
        $lookup->addFilterField(new MCalendarField('expectedEndDate', '', _M('Data prevista do retorno', $module), 10));
        $lookup->addFilterField(new MCalendarField('endDate', '', _M('Data do retorno', $module), 10));
        $lookup->addFilterField(new MTextArea('returnObs', '', _M('Observações da devolução', $module)));

        $columns = array();
        $columns[] = new MDataGridColumn('materialLoanId', _M('Código', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('materialRequestId', _M('Código da solicitação de material', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('personId', _M('Código da pessoa', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('materialId', _M('Código do material', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('beginDate', _M('Data de retirada', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('expectedEndDate', _M('Data prevista do retorno', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('endDate', _M('Data do retorno', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('returnObs', _M('Observações da devolução', $module), 'left', true, NULL, true);

        $sql = 'SELECT materialRequestId,
                       personId,
                       materialId,
                       TO_CHAR(begindate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(expectedenddate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(enddate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       returnobs
                  FROM materialloan';

        if (strlen($userName) > 0)
        {
            $where.=' AND UNACCENT(username) ILIKE UNACCENT(?) ';
            $params[] = $userName.'%';
        }

        if (strlen($dateTime) > 0)
        {
            $where.=' AND datetime = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\')';
            $params[] = $dateTime;
        }

        if (strlen($ipAddress) > 0)
        {
            $where.=' AND ipaddress = ?';
            $params[] = $ipAddress;
        }

        if (strlen($materialLoanId) > 0)
        {
            $where.=' AND materialloanId = ?';
            $params[] = $materialLoanId;
        }

        if (strlen($materialRequestId) > 0)
        {
            $where.=' AND materialRequestId = ?';
            $params[] = $materialRequestId;
        }

        if (strlen($personId) > 0)
        {
            $where.=' AND personId = ?';
            $params[] = $personId;
        }

        if (strlen($materialId) > 0)
        {
            $where.=' AND materialId = ?';
            $params[] = $materialId;
        }

        if (strlen($beginDate) > 0)
        {
            $where.=' AND begindate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $beginDate;
        }

        if (strlen($expectedEndDate) > 0)
        {
            $where.=' AND expectedenddate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $expectedEndDate;
        }

        if (strlen($endDate) > 0)
        {
            $where.=' AND enddate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $endDate;
        }

        if (strlen($returnObs) > 0)
        {
            $where.=' AND UNACCENT(returnobs) ILIKE UNACCENT(?) ';
            $params[] = $returnObs.'%';
        }

        if (strlen($where) > 0)
        {
            $sql.=$where;
        }

        $sql.=' ORDER BY materialloanId';

        if (strlen($where) == 0)
        {
            $sql.=' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
}
