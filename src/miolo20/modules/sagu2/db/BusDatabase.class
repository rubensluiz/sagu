<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for the table descriptions informations
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coopb.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 20/10/2006
 *
 **/

/**
 * Class to manipulate table description informations
 **/
class BusinessSagu2BusDatabase extends sBusiness
{
   /**
     * get all table description
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function getDatabaseDescription()
    {

        $objSubId = 0; //somente a descrição das tabelas
        $relAm    = 0; //somente as tabelas

        $sql = 'SELECT A.oid as tableId,
                       A.relName as tableName, 
                       B.description as tableDescription
                  FROM pg_class A
             LEFT JOIN pg_description B
                    ON (     A.oid    = B.objOid 
                         AND B.objSubId = ? )
                 WHERE (    A.relName ILIKE ?
                         OR A.relName ILIKE ?
                         OR A.relName ILIKE ?
                         OR A.relName ILIKE ?
                         OR A.relName ILIKE ?
                         OR A.relName ILIKE ?
                         OR A.relName ILIKE ?
                         OR A.relName ILIKE ?
                         OR A.relName ILIKE ? )
                   AND A.relAm = ?
              ORDER BY A.relName';

        $args = array(
                        $objSubId,
                        'acc%',
                        'acd%',
                        'bas%',
                        'ccp%',
                        'fin%',
                        'ins%',
                        'ptc%',
                        'rsh%',
                        'spr%',
                        $relAm
                     );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        if ( count($result) > 0 )
        {
            $x = 0;
            foreach ( $result as $row )
            {
                list ( $tableOid,
                       $tableName,
                       $tabledescription ) = $row;

                $sql = 'SELECT A.attName as attributeName,
                               B.description as attributeDescription
                          FROM  pg_attribute A 
                     LEFT JOIN pg_description B
                        ON (A. attrelid  = B.objOid AND A.attNum = B.objSubId)
                         WHERE B.objsubid > ? AND
                               B.objOid IN (SELECT * FROM inheritanceHierarchy(?))
                         GROUP BY 1, 2, objsubid
                         ORDER BY objsubid';

                $args = array(
                                $objSubId,
                                $tableOid
                             );

                $result3[$x]    = $row;
                $result3[$x++][3] = $this->getDatabase()->query(SAGU::prepare($sql, $args));
            }
        }

        return $result3;

    }

   /**
     * get the basConfig parameters and descriptions
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function getParametersTable()
    {

        $sql = 'SELECT A.moduleConfig,
                       A.parameter,
                       A.description,
                       A.type
                  FROM basConfig A
              ORDER BY A.moduleConfig,
                       A.parameter';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;

    }
    

   /**
     * get the installation instructions
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function getInstallationFiles()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = is_null($module) ? 'basic' : $module;

        $files = scandir(SAGU::getParameter('BASIC', 'DOCUMENTATION_PATH') . '/INSTALL');

        if ( $files )
        {
            foreach( $files as $file )
            {
                if ( ereg("^.*\.txt$", $file) )
                {
                    $key = ereg_replace("([^\.]*).txt", "\\1", $file);
                    
                    $ret[$key] = SAGU::getParameter('BASIC', 'DOCUMENTATION_PATH') . '/INSTALL/' . $file;
                }

            }
        }
        
        return $ret;
    }

   /**
     * get the installation instructions
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function getLdap()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = is_null($module) ? 'basic' : $module;

        $file = SAGU::getParameter('BASIC', 'DOCUMENTATION_PATH') . '/LDAP/README';

        if ( file_exists($file) )
        {
            $fp      = fopen($file, 'r');
            $content = fread($fp, filesize($file));
            fclose($fp);
        }

        return $content;
    }

   /**
     * get the step by step instructions
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function getStepByStep()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = is_null($module) ? 'basic' : $module;

        $file = SAGU::getParameter('BASIC', 'DOCUMENTATION_PATH') . '/passo-a-passo.txt';

        if ( file_exists($file) )
        {
            $fp      = fopen($file, 'r');
            $content = fread($fp, filesize($file));
            fclose($fp);
        }

        return $content;
    }
}

?>
