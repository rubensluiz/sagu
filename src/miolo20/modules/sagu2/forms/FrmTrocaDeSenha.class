<?php

/**
 * <--- Copyright 2005-2012 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.coop.br]
 *
 * @since
 * Class created on 08/04/2014
 *
 */

class FrmTrocaDeSenha extends SForm
{
    
    public function __construct() 
    {
        parent::__construct();
        
        $this->disableToolbar();
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule();
        
        $this->setFormValue('senha', null);
        $this->setFormValue('senhaConfirmacao', null);
        $this->setFormValue('concorda', null);

        $senhaADExpirada = $MIOLO->session->getValue("senhaADExpirada");
        
        if ( $senhaADExpirada == DB_TRUE )
        {
            $flds[] = MMessage::getStaticMessage('msgSenhaExpirada', _M('Sua senha está expirada, escolha uma nova senha antes de prosseguir.'), MMessage::TYPE_WARNING);
        }
        
        $busConfiguracaoTrocaDeSenha = new BusinessBasicBusConfiguracaoTrocaDeSenha();
        $configuracaoTrocaDeSenhaId = $busConfiguracaoTrocaDeSenha->verficaConfiguracao(SAGU::getDateNow());
        
        $data = $busConfiguracaoTrocaDeSenha->getConfiguracaoTrocaDeSenha($configuracaoTrocaDeSenhaId->configuracaoTrocaDeSenhaId);
        
        $flds[] = new SHiddenField('configuracaoTrocaDeSenhaId', $configuracaoTrocaDeSenhaId->configuracaoTrocaDeSenhaId);
        
        $flds[] = new MDiv('divTrocarSenha');
        
        $flds[] = new MSeparator();
        
        $mensagem = new MLabel(_M($data->mensagem, $module));
        $mensagem->addBoxStyle('text-align', 'center');
        
        $flds[] = $mensagem;
        
        $flds[] = new MSeparator();
        
        //Exibe o botão caso tenha concordado com os termos
        if( $data->concordarParaProsseguir == DB_TRUE )
        {
            //Termos da mensagem
            $concordaLabel = new MText('concordaLabel', _M('Li e concordo', $module) . ':');
            $concordaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $concordaLabel->setClass('m-caption m-caption');
            $concorda = new MCheckBox('concorda', DB_TRUE, null, $this->getFormValue('concorda', $this->concorda) == DB_TRUE);
            $concorda->addAttribute('onChange', SForm::getAjaxAction('mostraBotao', 'divConcorda', true, $args));
            $flds[] = new MHContainer('hctConcordaComOsTermos', array($concordaLabel,$concorda), 'horizontal');        
        }
        
        $flds[] = new MSeparator();
        
        $max = SAGU::getParameter('BASIC', 'PASSWORD_MAX_SIZE');
        $min = SAGU::getParameter('BASIC', 'PASSWORD_MIN_SIZE');
        
        //Botões troca de senha
        $aviso = new MText('aviso', _M('Sua senha deve ser de no mínimo '. $min . ' caracteres e de no máximo '. $max . '.'));
        $aviso->addBoxStyle('text-align', 'center');
        $flds[] = $aviso;
        
        $senhaAtualLabel = new MText('senhaAtualLabel', _M('Senha atual', $module).':');
        $senhaAtualLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $senhaAtualLabel->setClass('m-caption m-caption-required');
        $senhaAtual = new MPasswordField('senhaAtual', $this->getFormValue('senha'));        
        $hctSenhaAtual = new MHContainer('hctSenhaAtual', array($senhaAtualLabel, $senhaAtual));
        $flds[] = $hctSenhaAtual; 
        
        $senhaLabel = new MText('senhaLabel', _M('Nova senha', $module).':');
        $senhaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $senhaLabel->setClass('m-caption m-caption-required');
        $senha = new MPasswordField('senha', $this->getFormValue('senha'));        
        $hctSenha = new MHContainer('hctSenha', array($senhaLabel, $senha));
        $flds[] = $hctSenha; 
        
        $validaSenha = new MRequiredValidator('senha', _M('Senha'), $max, _M('Sua senha deve ser de no mínimo '. $min . ' caracteres e de no máximo '. $max . '.')); //msgerr
        $validaSenha->min = $min;
        $validaSenha->type = 'optional';
        $validators[] = $validaSenha;
        
        $senhaConfirmacaoLabel = new MText('senhaConfirmacaoLabel', _M('Confirmar nova senha', $module).':');
        $senhaConfirmacaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $senhaConfirmacaoLabel->setClass('m-caption m-caption-required');
        $senhaConfirmacao = new MPasswordField('senhaConfirmacao', $this->getFormValue('senhaConfirmacao'));        
        $hctSenhaConfirmacao = new MHContainer('hctSenhaConfirmacao', array($senhaConfirmacaoLabel, $senhaConfirmacao));
        $flds[] = $hctSenhaConfirmacao;
                
        $flds[] = $div;
        
        //Exibe o botão para salvar e continuar        
        if( $data->concordarParaProsseguir == DB_FALSE || $senhaADExpirada == DB_TRUE )
        {
            $btTrocarSenha = new MButton('trocarSenha', _M('Trocar senha e prosseguir', $module), SForm::getAjaxAction('btnTrocarSenha', 'divTrocarSenha'));
            $btTrocarSenha->addBoxStyle('text-align', 'center');
        }
        
        $flds[] = new MSeparator();
        
        $flds[] = new MDiv('divConcorda', $btTrocarSenha);
                
        // popup
        $fields[] = $popup = new MPopup('popupOpenCounter', $flds, _M('Trocar a senha', $module));
        $popup->setWidth('50%; top:50px!important');
                
        $MIOLO->page->onload(" xGetElementById('mPopupClose').setAttribute('class', ''); ");
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
        
        $MIOLO->page->onload(" mpopup.configureClose = function(){document.onkeydown = function(e){}}; ");
    }
    
    /*
     * Adiciona o botão Trocar senha
     */
    public function mostraBotao($args)
    {
        $btTrocarSenha = new MButton('trocarSenha', _M('Trocar senha e prosseguir', $module), SForm::getAjaxAction('btnTrocarSenha', 'divTrocarSenha'));
        $btTrocarSenha->addBoxStyle('text-align', 'center');
                
        return strlen($args->concorda) > 0 ? $btTrocarSenha : '';
    }
    
    /*
     * Ação do botãoo trocar senha
     */
    public function btnTrocarSenha($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule();
        
        if ( !BusinessAdminBusUser::verificaSenhaDoUsuario($args->senhaAtual) )
        {
            $msg = _M('A senha atual está incorreta. Verifique o valor informado e tente novamente.');
            $prompt = new Prompt(_M('Error'), $msg);
            $prompt->SetType('error');
            
            return array($prompt);
        }   
        elseif ( !strlen($args->senha) > 0 )
        {
            $msg =_M('O conteúdo do campo "Nova senha" não pode ser vazio.', $module);
            
            $prompt = new Prompt(_M('Error'), $msg);
            $prompt->SetType('error');
            
            return array($prompt);
        }
        elseif ( $args->senha != $args->senhaConfirmacao )
        {
            $msg =_M('O conteúdo dos campos "Nova senha" e "Confirmar nova senha" devem ser iguais.', $module);
            
            $prompt = new Prompt(_M('Error'), $msg);
            $prompt->SetType('error');
        }
        else
        {
            try
            {
                $busUser = new BusinessAdminBusUser();
                $loginUser = $MIOLO->getLogin();

                $idUser = $loginUser->idkey;
                $senha = $args->senha;

                $ok = $busUser->trocarSenhaUsuario( $idUser, $senha );
                
                $data->configuracaoTrocaDeSenhaId = $args->configuracaoTrocaDeSenhaId;
                $data->userId = $loginUser->idkey;
                $data->concordo = $args->concorda;

                if( $ok = DB_TRUE )
                {   
                    if ( strlen($data->configuracaoTrocaDeSenhaId) > 0 )
                    {
                        $busConfiguracaoTrocaDeSenha = new BusinessBasicBusConfiguracaoTrocaDeSenha();
                        $busConfiguracaoTrocaDeSenha->salvaAlteracaoDeSenha($data);
                    }
                    
                    $msg = _M('Sua senha foi alterada com sucesso.');
                    $goto = $this->verificaPermissaoUsuario();
                    
                    $prompt = MPrompt::Information($msg, $goto);
                }
                else
                {   
                    $msg = _M('Não foi possível alterar sua senha.');
                    $prompt = new Prompt(_M('Error'), $msg);
                    $prompt->SetType('error');
                }
            }
            catch ( Exception $e )
            {
                $prompt = new Prompt(_M('Error'), $e->getMessage());
                $prompt->SetType('error');
            }
        }
        
        $fields[] = $prompt;
        
        return $fields;
    }
    
    /*
     * Função que verifica os grupos que o usuário que permissão para redirecionar ao lgoar no sistema
     */
    public function verificaPermissaoUsuario()
    {   
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $url = $MIOLO->GetActionURL('sagu2','main');
        
        //redirecionamento caso o usuário só tenha permissão no módulo SERVICES
        $login = $MIOLO->getLogin();
        $busAdminUser = new BusinessAdminUser();

        if( $login->idkey != 0 )
        {
            $groups = $busAdminUser->listGroupsByIdUser($login->idkey);
            $groups = $groups->result;
        }
        else
        {
            $groups = $busAdminUser->listGroupsByLogin($login->id, false);
        }

        $qtdModules = 0;
        $arrayModules = array();
        foreach ($groups as $group)
        {
            $modules = $busAdminUser->getModulesByGroup($group[0]);

            foreach ( $modules as $module )
            { 
                if (!in_array($module[0], $arrayModules) &&  $module[0] != 'gnuteca3')
                {
                    $arrayModules[] = $module[0];
                }
            }
        }
        
        if ( count($arrayModules) == 1 )
        {
            $url = $MIOLO->GetActionURL($modules[0][0],'main');  
            
        }
        
        return $url;
    }
}

