<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel I. da Silva [nataniel@solis.com.br]
 *
 * @since
 * Class created on 03/11/2014
 *
 **/

class FrmTurma extends SManagementForm
{
    
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('ui/controls/msubdetail.class');

        parent::__construct(new ApsTurma(), array('turmaId'), null, _M('Cadastro de turma', MIOLO::getCurrentModule()));
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');
        
        $data = array();

        if ( in_array($function,  array(SForm::FUNCTION_UPDATE,  SForm::FUNCTION_DELETE)) )
        {
            $turmaId = MIOLO::_REQUEST('turmaId');
            $data = new $this->object($turmaId);
            $fields[] = new MHiddenField('turmaId', $turmaId, _M('Código', $module));
        }

        $fields[] = $codigoTurma =  new MTextField('codigoTurma', $this->GetFormValue('codigoTurma'), _M('Código da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Conjunto de caracteres sem acentuação e espaço, com no máximo 50 caracteres.', $module)); 
        $validators[] = $regexp = new MRegExpValidator('codigoTurma', '', "^[^áàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ ]+$", 'required', _M('O campo "Turma" deve ser informado e não pode conter espaços e palavras acentuadas, quantidade máxima de 50 caracteres.', $module));
        $regexp->max = 50;
        
        $fields[] = $descricao =  new MTextField('descricao', $this->GetFormValue('descricao'), _M('Nome da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descricao->setIsRequired(true);
        
        $fields[] = $nucleoProfissionalId =  new MSelection('nucleoProfissionalId', $this->GetFormValue('nucleoProfissionalId'), _M('Núcleo profissional'), ApsNucleoProfissional::listRecords()); 
        
        $fields[] = $enfaseId =  new MSelection('enfaseId', $this->GetFormValue('enfaseId'), _M('Ênfase'), ApsEnfase::listRecords()); 
        
        $fields[] = $quantidadePeriodo =  new MSelection('quantidadePeriodo', $this->GetFormValue('quantidadePeriodo'), _M('Período de duração', $module), ApsTurma::listPeriods()); 
        $quantidadePeriodo->setIsRequired(true); 
        
        $fields[] = new SBeginEndPeriod(array(
            'title' => _M('Período letivo', $module),
            'begin' => array('label' => _M('Data inicial', $module), 'dateId' => 'dataInicio', 'dateValue' => $this->getRequestValue('dataInicio', $data->dataInicio)),
            'end' => array('label' => _M('Data final', $module), 'dateId' => 'dataFim', 'dateValue' => $this->getRequestValue('dataFim', $data->dataFim)),
            'required' => true,
        ));


        /**
         * Responsaveis
         */
        $opts = array(
            'label' => _M('Responsável', $module),
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'filter' => array('responsavelId' => 'responsavelId'),
            'related' => 'responsavelIdDescription',
        );
        $camposSubDetailResponsavel[] = new SLookupContainer('responsavelId', null, $opts);
        $colunasSubDetailResponsavel[] = new sSubDetailColumn('responsavelId', array( 'label' => _M('Código', $module) ));
        $colunasSubDetailResponsavel[] = new sSubDetailColumn('responsavelIdDescription', array( 'label' => _M('Responsavel', $module) ));

        $subDetailResponsavel = new MSubDetail('_responsaveis', _M('Responsáveis pela turma', $module), $colunasSubDetailResponsavel, $camposSubDetailResponsavel);

        $validadoresSubDetailPreceptor[] = new MSubDetailUniqueValidator('responsavelId', _M('Responsável', $module));
        $subDetailResponsavel->setValidators($validadoresSubDetailPreceptor);

        // Popula a subDetail
        if ( !$this->estaEmUmEvento() )
        {
            MSubDetail::clearData('_responsaveis');
            if ( count((array)$data->responsaveis) > 0 )
            {
                $dadosDaSubDetail = SAGU::convertSTypeToSubDetail((array)$colunasSubDetailResponsavel, (array)$data->responsaveis);
                $subDetailResponsavel->setData($dadosDaSubDetail);
            }
        }
        $fields[] = $subDetailResponsavel;



        $fields[] = $vagas =  new MIntegerField('vagas', $this->GetFormValue('vagas'), _M('Vagas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $vagas->setIsRequired(true);

        $fields[] = $tipoAvaliacaoTCR =  new MSelection('tipoAvaliacaoTCR', $this->GetFormValue('tipoAvaliacaoTCR'), _M('Avaliação TCC', $module), ApsTurma::listTipoAvaliacao(), null, _M('Tipo de avaliação do trabalho de conclusão do aluno.', $module));
        $tipoAvaliacaoTCR->setIsRequired(true);


        
        parent::defineFields($fields, $validators, $data);
        
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $this->addField(new MButton('btnVoltar', _M('<< Voltar', $module), $this->getPreviousURL()));
        }
    }
    
    public function tbBtnSave_click($sender = NULL)
    {
        $module = MIOLO::getCurrentModule();
        $data = $this->getTypesData();
        
        $periodo = $data->quantidadePeriodo * 12;
        
        // Intevalo em meses das datas de início e fim
        $intervalo = SAGU::dateDiffInMonth($data->dataInicio, $data->dataFim);

        if ( ($intervalo/12) >= ($data->quantidadePeriodo+1) )
        {
            $inferior = $data->quantidadePeriodo+1;
            $this->AddError(_M("O intervalo de datas do período letivo deve ser superior a {$data->quantidadePeriodo} anos e inferior a {$inferior} anos."));
            return;
        }

        if ( $data->function == SForm::FUNCTION_UPDATE )
        {
            $turma = ApsTurma::obtemTurma($data->codigoTurma);
            
            $filters = new stdClass();
            $filters->turmaId =  $turma->turmaId;

            $alunos = ApsResidente::obtemAlunosDaTurma($filters);

            if ( count($alunos) > 0 )
            {
                $this->AddError(_M("A turma não pode ser alterada pois já existem alunos alocados nela."));
                return;
            }
        }

        $object = $this->getTypeObjectPopulated();

        foreach ( (array) $object->getObjectVars() as $key => $val )
        {
            if ( $key != 'responsaveis')
            {
                $object->$key = $data->$key;
            }
        }


        // responsaveis
        foreach ( (array)$object->responsaveis as $responsavel )
        {
            $ok = $responsavel->delete();
            if ( !$ok )
            {
                $msg = _M('Erro ao excluir responsável', $module);
                throw new Exception($msg);
            }
        }

        $responsaveis = array();
        foreach ( (array)MSubDetail::getData('_responsaveis') as $row )
        {
            if ( !$row->removeData )
            {
                $responsavel = new ApsTurmaResponsavel();
                $responsavel->responsavelId = $row->responsavelId;
                $responsaveis[] = $responsavel;
            }
        }
        $object->responsaveis = $responsaveis;

        $ok = $object->save();

        $this->confirmInsertUpdate( $ok );
    }
        
    public function getRequestValues()
    {
        $data = parent::getRequestValues();
        
        $data['nucleoProfissionalId'] = strlen($data['nucleoProfissionalId']) > 0 ? $data['nucleoProfissionalId'] : SType::NULL_VALUE;
        $data['enfaseId'] = strlen($data['enfaseId']) > 0 ? $data['enfaseId'] : SType::NULL_VALUE;
        
        return $data;
    }
    
}

