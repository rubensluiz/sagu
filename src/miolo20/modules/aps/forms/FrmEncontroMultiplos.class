<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * \b Maintainers \n
 *  Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class FrmEncontroMultiplos extends SManagementForm
{

    /**
     * Constantes do combo de repetição.
     */
    const REPETICAO_SEMANAL = 'S';
    const REPETICA_TODOS_OS_DIAS = 'T';

    /**
     * Constantes do da escolha de terminar.
     */
    const TERMINAR_ATE_OCORRENCIAS = 'O';
    const TERMINAR_FIM_OFERTA = 'F';


    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $MIOLO->uses('ui/controls/msubdetail.class');

        parent::__construct(new ApsEncontro(), array( 'encontroId' ), null, _M('Multiplos encontros', $module));


    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        try
        {
            $ofertaDeUnidadeTematicaId = $this->getFormValue('ofertaDeUnidadeTematicaId');

            //Oferta de unidade tematica
            $ofertaDeUnidadeTematica = new ApsOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
            //Lista de tipos de unidade temática
            $listTipoDeUnidadeTematica = ApsUnidadeTematica::listTipos();
            //Lista de períodos de unidade temática
            $listPeriodoDaUnidadeTematica = ApsUnidadeTematica::listPeriodos();
            //Retorno do botão voltar
            $returnTo = $this->getRequestValue('return_to');
            $fields[] = new SHiddenField('return_to', $returnTo);

            //Não habilita o botão salvar caso a unidade temática esteja fechada
            if( strlen($ofertaDeUnidadeTematica->encerramento) > 0 )
            {
                $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            }

        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }
        //Hidden field oferta de unidade temática
        $fields[] = new SHiddenField('ofertaDeUnidadeTematicaId', $this->getRequestValue('ofertaDeUnidadeTematicaId'));

        //Informações da unidade temática
        $options = array(
            'title' => _M('Dados da oferta do módulo', $module),
            'columns' => 1,
            'value' => array(
                _M('Descrição') => $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId . ' - ' . $ofertaDeUnidadeTematica->unidadeTematica->descricao,
                _M('CH lançada/prevista') => $ofertaDeUnidadeTematica->cargaHorariaCursada,
                _M('Frequência mínima') => $ofertaDeUnidadeTematica->unidadeTematica->frequenciaMinima . '%',
                _M('Tipo') => $listTipoDeUnidadeTematica[$ofertaDeUnidadeTematica->unidadeTematica->tipo],
                _M('Período') => $listPeriodoDaUnidadeTematica[$ofertaDeUnidadeTematica->unidadeTematica->periodo],
                _M('Início') => $ofertaDeUnidadeTematica->inicio,
                _M('Fim') => $ofertaDeUnidadeTematica->fim )
        );
        $fields[] = new SInformationField($options);
        $fields[] = new MSeparator();

        $grdData = new stdClass();
        $grdData->readOnly = true;
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdTemaUnidadeTematica', $grdData);
        $grid->setData($ofertaDeUnidadeTematica->retornaTemasDaOfertaEmArray());
        $divGrid = new MDiv('divGridTemas', $grid);
        $divGrid->addBoxStyle('width', '100%');
        $fields[] = new MBaseGroup('baseGroupTemas', _M('Atividades do módulo',$module), array($divGrid));


        //Mensagem informativa
        $fields[] = MMessage::getStaticMessage('msgInfo', _M("Quaisquer encontros(novos, os já existentes não terão alteração) gerenciados através desta tela estarão salvando os como PRESENTES todos os alunos matriculados na oferta do módulo na data do encontro.", $module), MMessage::TYPE_INFORMATION);


        $fieldsEncontros = $this->obterCamposParaGerarEncontros();

        $fields[] = $divGerarEncontros = new MDiv('divGerarEncontros', $fieldsEncontros);

        $fields[] = $this->obterSubdetailEncontros();

        $btnSalvar = new MButton('btnSalvarEncontros', _M("Salvar encontros", $module), SAGU::getActionURL($module, $action, array('event'=>'tbBtnSave:click', 'return_to'=>$this->getRequestValue('return_to'))));
        $btnSalvar->addBoxStyle('text-align', 'center');
        $fields[] = $btnSalvar;

        $this->setFields($fields);
    }


    public function obterCamposParaGerarEncontros($args = null)
    {
        $module = MIOLO::getCurrentModule();

        $oferta = new ApsOfertaDeUnidadeTematica(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));

        //Ação de calcular as cargas horárias, já cria aqui em cima e vai usando abaixo
        $actionCalcular = array('calcularCargasHorarias', 'divResponse', false);

        //Mensagem informativa
        $fields[] = new MSeparator(null);
        $fields[] = MMessage::getStaticMessage('msgInfoGerar', _M("Os encontros gerados a partir deste recurso sempre começam a contar à partir da data de início da Oferta do módulo.", $module), MMessage::TYPE_INFORMATION);


        $fields[] = new MHiddenField('ofertaDeUnidadeTematicaId', MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));

        $atividadeLbl = new MLabel(_M('Atividade do módulo', $module) . ':');
        $atividadeLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
        $atividadeSlt = new MSelection('tema', $this->getFormValue('tema'), null, ApsTema::listTema($filters));
        $fields[] = new MHContainer('hctTema', array($atividadeLbl, $atividadeSlt));


        $preceptoresLbl = new MLabel(_M('Supervisor', $module) . ':');
        //$preceptoresLbl->setClass('m-caption m-caption-required');
        $preceptoresLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
        $preceptoresLista = ApsOfertaDeUnidadeTematicaPreceptor::listPreceptoresDaOfertaDeRodizio($filters);
        $selectPreceptores = new MultiSelection('preceptores', null, null, $preceptoresLista, false, null, 6);
        //$selectPreceptores->setIsRequired(true);
        $fields[] = new MHContainer('hctPreceptores', array($preceptoresLbl, $selectPreceptores));


        $instituicaoLbl = new MLabel(_M('Instituição executora', $module) . ':');
        //$instituicaoLbl->setClass('m-caption m-caption-required');
        $instituicaoLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
        $instituicoesLista = ApsOfertaDeUnidadeTematicaInstituicaoExecutora::listIntituicoesDaOfertaDeRodizio($filters);
        $selectInstituicao = new MSelection('instituicaoExecutora', $this->getFormValue('instituicaoExecutora', null), null, $instituicoesLista);
        $fields[] = new MHContainer('hctInstituicao', array($instituicaoLbl, $selectInstituicao));



        $conteudoLbl = new MLabel(_M('Conteúdo ministrado', $module) . ':');
        $conteudoLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $conteudoFld = new MMultilineField('conteudoMinistrado', $this->getFormValue('conteudoMinistrado', null), null, SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_COLS'));
        $fields[] = new MHContainer('hctInstituicao', array($conteudoLbl, $conteudoFld));


        //Início da oferta
        $fields[] = new STextFieldAligned('inicio', _M('Início da oferta', $module) . ':', SAGU::NVL(null, $oferta->inicio), false, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);

        //Fim da oferta
        $fields[] = new STextFieldAligned('fim', _M('Fim da oferta', $module) . ':', SAGU::NVL(null, $oferta->fim), false, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);

        //Repetição
        $repeticaoLbl = new MLabel(_M("Repetição", $module));
        $repeticaoLbl->setClass('m-caption m-caption-required');
        $repeticaoLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $repeticao = new MSelection('repeticao', $this->getFormValue('repeticao'), null, $this->obterTiposDeRepeticao());
        $repeticao->addAttribute('onChange', SForm::getMultipleAjaxAction(array($actionCalcular, array('marcarDiasDaSemana', 'divResponse', false))));
        $fields[] = new MHContainer('hctRepeticao', array($repeticaoLbl, $repeticao));

        //Repete
        $repeteLbl = new MLabel(_M("Repete", $module) . ':');
        $repeteLbl->setClass('m-caption m-caption-required');
        $repeteLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $repete = new MCheckBoxGroup('repeteDias', null, SAGU::listarDiasDaSemana());
        $repete->addAttribute('onChange', SForm::getMultipleAjaxAction(array($actionCalcular)));
        $fields[] = new MHContainer('hctRepete', array($repeteLbl, $repete));

        //Termina
        $labelGerar = new MLabel(_M('Termina', $module) . ':');
        $labelGerar->setClass('m-caption m-caption-required');
        $labelGerar->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $gerarAposOcorrenciasLblA = new MLabel(_M('Após', $module));
        $gerarAposOcorrenciasTxt = new MTextField('quantOcorrencias', $this->GetFormValue('quantOcorrencias'));
        $gerarAposOcorrenciasTxt->setReadOnly(true);
        $gerarAposOcorrenciasTxt->addAttribute('onBlur', SForm::getMultipleAjaxAction(array($actionCalcular)));
        $gerarAposOcorrenciasLblB = new MLabel(_M(' ocorrências', $module));
        $gerarAposOcorrencias = new MRadioButton('gerarAteEm', null, null, false);
        $gerarAposOcorrencias->addAttribute('onChange', $this->getAjaxAction('ajustarCampoTermina', 'divResponse', false, array('gerarAte' => self::TERMINAR_ATE_OCORRENCIAS)));
        $hctAposOcorrencias = new MHContainer('hctAposOcorrencias', array($gerarAposOcorrencias, $gerarAposOcorrenciasLblA, $gerarAposOcorrenciasTxt, $gerarAposOcorrenciasLblB));

        $gerarAteOFimLbl = new MLabel(_M('Até a data de fim da oferta', $module));
        $gerarAteOFim = new MRadioButton('gerarAteEm', null, null, true);
        $gerarAteOFim->addAttribute('onChange', SForm::getMultipleAjaxAction(array($actionCalcular)));
        $gerarAteOFim->addAttribute('onChange', $this->getMultipleAjaxAction(array(1 => $actionCalcular, 0 => array('ajustarCampoTermina', 'divResponse', false, array('gerarAte' => self::TERMINAR_FIM_OFERTA)))));
        $hctAteOFim = new MHContainer('hctAteOFim', array($gerarAteOFim, $gerarAteOFimLbl));

        $vctRadios = new MVContainer('vctRadios', array($hctAposOcorrencias, $hctAteOFim));
        $fields[] = new MHContainer('hctTermina', array($labelGerar, $vctRadios));



        //Hora início
        $hrInicialLbl = new MLabel(_M('Hora de início', $module) . ':');
        $hrInicialLbl->setClass('m-caption m-caption-required');
        $hrInicialLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $hrInicial = new MTextField('horaInicial', $this->getFormValue('horaInicial'));
        $hrInicial->addAttribute('onBlur', SForm::getMultipleAjaxAction(array($actionCalcular)));
        $hrInicial->addAttribute('onkeyup', "
                        var validate = new objValidate(this, '99:99');
                        MIOLO_Apply_Mask(validate);
                    ");

        $hrInicial->setValidator(new MTIMEValidator('horaInicial', _M('Hora inicial', $module), 'required'));
        $fields[] = new MHContainer('hctHrInicial', array($hrInicialLbl, $hrInicial));

        //Hora fim
        $hrFimLbl = new MLabel(_M('Hora de fim', $module) . ':');
        $hrFimLbl->setClass('m-caption m-caption-required');
        $hrFimLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $hrFinal = new MTextField('horaFim', $this->getFormValue('horaFim'));
        $hrFinal->addAttribute('onBlur', SForm::getMultipleAjaxAction(array($actionCalcular)));
        $hrFinal->addAttribute('onkeyup', "
                        var validate = new objValidate(this, '99:99');
                        MIOLO_Apply_Mask(validate);
                    ");
        $hrFinal->setValidator(new MTIMEValidator('horaFim', _M('Hora fim', $module), 'required'));
        $fields[] = new MHContainer('hctHrFinal', array($hrFimLbl, $hrFinal));

        //Carga horária de cada encontro
        $chEncontroLbl = new MLabel(_M('Carga horária de cada encontro', $module) . ':');
        $chEncontroLbl->setClass('m-caption');
        $chEncontroLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $chEncontro = new MTextField('chEncontro', null);
        $chEncontro->setReadOnly(true);
        $fields[] = new MHContainer('hctChEncontro', array($chEncontroLbl, $chEncontro));

        //Carga horária total da oferta
        $chTotalLbl = new MLabel(_M('Carga horária total a ser gerada na oferta', $module) . ':');
        $chTotalLbl->setClass('m-caption');
        $chTotalLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $chTotal = new MTextField('chTotal', null);
        $chTotal->setReadOnly(true);
        $fields[] = new MHContainer('hctChTotal', array($chTotalLbl, $chTotal));

        //Gerar encontros
        $btnGerar = new MButton('btnGerarEncontros', _M("Gerar encontros", $module));
        $btnGerar->addBoxStyle('text-align', 'center');
        $fields[] = $btnGerar;

        //Ajusta margens dos campos
        foreach ( $fields as $campo )
        {
            $campo->addAttribute("style", "margin-top:5px");
        }

        //Hidden field para setar o tipo de geração (até o fim ou por ocorrências)
        //É populado ao clicar nos radioButtons
        $fields[] = new SHiddenField('vaiGerarEncontrosAte', self::TERMINAR_FIM_OFERTA);

        //Div para jogar valores nulos (limbo)
        $fields[] = $divResponse = new MDiv('divResponse', null);

        $bsg[] = new MBaseGroup('bsgMultiplosEncontros', _M('Gerar múltiplos encontros', $module), $fields, 'vertical');


        $this->addJsCode("

                // funçao para nao precisar usar ctrl do teclado para selecionar mais de um item
                window.onmousedown = function (e) {
                    var el = e.target;
                    if (el.tagName.toLowerCase() == 'option' && el.parentNode.hasAttribute('multiple')) {
                        e.preventDefault();

                        if (el.hasAttribute('selected')) el.removeAttribute('selected');
                        else el.setAttribute('selected', '');

                        var select = el.parentNode.cloneNode(true);
                        el.parentNode.parentNode.replaceChild(select, el.parentNode);
                    }
                }");

        return $bsg;
    }

    public function obterTiposDeRepeticao()
    {
        $module = MIOLO::getCurrentModule();

        $options = array(
            self::REPETICAO_SEMANAL => _M("Semanal", $module),
            self::REPETICA_TODOS_OS_DIAS => _M("Todos os dias", $module)
        );

        return $options;
    }

    public function marcarDiasDaSemana($args = null)
    {
        $MIOLO = MIOLO::getInstance();

        $jsCode = "";
        for ( $i = 0; $i < 7; $i++ )
        {
            if ( strlen($args->repeticao) > 0 )
            {
                $jsCode .= "document.getElementById('repeteDias_{$i}').checked=true;";
            }
            else
            {
                $jsCode .= "document.getElementById('repeteDias_{$i}').checked=false;";
            }

            //Todos os dias bloqueia o desmarcar
            if ( $args->repeticao == self::REPETICA_TODOS_OS_DIAS )
            {
                $jsCode .= "document.getElementById('repeteDias_{$i}').disabled=true;";
            }
            else
            {
                $jsCode .= "document.getElementById('repeteDias_{$i}').disabled=false;";
            }

            $MIOLO->page->addAJAXJsCode($jsCode);
        }
    }

    public function calcularCargasHorarias($args)
    {
        $MIOLO = MIOLO::getInstance();

        //Obter quantidade de dias
        $quantDias = $this->obterQuantidadeDeDias($args);

        if ( ($args->horaInicial > 0 && $args->horaFim > 0 && $quantDias > 0) )
        {
            //Calcular carga do encontro
            $antes = new DateTime($args->horaInicial);
            $depois = new DateTime($args->horaFim);
            $diff = $antes->diff($depois);
            $chEncontro = round($diff->h + ($diff->i/60), 2);

            //Calcular carga total gerada
            $chTotal = $quantDias * $chEncontro;
        }

        if ( (strlen($chEncontro) && strlen($chTotal)) &&
            ($chEncontro > 0 && $chTotal > 0) )
        {
            $jsCode = "document.getElementById('chEncontro').value='{$chEncontro}';"
                . "document.getElementById('chTotal').value='{$chTotal}';";
        }
        else
        {
            $jsCode = "document.getElementById('chEncontro').value=null;"
                . "document.getElementById('chTotal').value=null;";
        }

        $MIOLO->page->addAJAXJsCode($jsCode);
    }

    public function obterQuantidadeDeDias($args)
    {
        //Obtem os dias da semana selecionados e quantidade de vezes que repete
        $diasSemana = array();
        for ( $i = 0; $i < 7; $i++ )
        {
            $campo = 'repeteDias_' . $i;
            strlen($args->$campo) > 0 ? $diasSemana[$i] = null : null;
        }

        //Se for numérico é por quantidade de ocorrências
        $quantDias = 0;
        if ( $args->vaiGerarEncontrosAte == self::TERMINAR_FIM_OFERTA )
        {
            foreach ( $diasSemana as $dia => $item )
            {
                $quantDias = $quantDias + SAGU::obterDiasDaSemanaEmIntervalo($args->inicio, $args->fim, $dia, true);
            }
        }
        elseif ( strlen($args->quantOcorrencias) > 0 )
        {
            $quantDias = $quantDias + $args->quantOcorrencias;
        }

        return $quantDias;
    }

    public function obterSubdetailEncontros()
    {
        $module = MIOLO::getCurrentModule();

        //Colunas da subdetail
        $cols[] = new MGridColumn(_M("Atividade do módulo", $module), 'left', false, '10%', true, 'tema', ApsTema::listTema());
        $cols[] = new MGridColumn(_M("Supervisor", $module), 'left', false, '30%', true, 'preceptores', null);
        $cols[] = new MGridColumn(_M("Instituição executora", $module), 'left', false, '10%', true, 'instituicaoExecutora', null);
        $cols[] = new MGridColumn(_M("Conteúdo ministrado", $module), 'left', false, '30%', true, 'conteudoMinistrado', null);
        $cols[] = new MGridColumn(_M("Data/hora de início", $module), 'center', false, '5%', true, 'hrInicio');
        $cols[] = new MGridColumn(_M("Data/hora de fim", $module), 'center', false, '5%', true, 'hrFim');
        $cols[] = new MGridColumn(_M("Carga horária", $module), 'center', false, '10%', true, 'chEncontro');
        $cols[] = new MGridColumn(_M("Oferta do módulo", $module), 'center', false, '20%', false, 'ofertaDeUnidadeTematicaId');

        $subDetail = new MSubDetail('_encontros', _M("Novos encontros", $module), $cols, array(), array('remove'));


        //Sobrescrever funções da subdetail
        $subDetail->setHideButtonsOnAdd(true);
        $subDetail->setUpdateButton(true);

        return $subDetail;
    }

    public function btnGerarEncontros_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();

        //Popula argumentos
        $args = new stdClass();
        $args->chTotal = MIOLO::_REQUEST('chTotal');
        $args->chEncontro = MIOLO::_REQUEST('chEncontro');
        $args->inicio = MIOLO::_REQUEST('inicio');
        $args->fim = MIOLO::_REQUEST('fim');
        $args->quantOcorrencias = MIOLO::_REQUEST('quantOcorrencias');
        $args->horaInicial = MIOLO::_REQUEST('horaInicial');
        $args->horaFim = MIOLO::_REQUEST('horaFim');
        $args->repeticao = MIOLO::_REQUEST('repeticao');
        $args->tema = MIOLO::_REQUEST('tema');
        $args->preceptores = MIOLO::_REQUEST('preceptores');
        $args->instituicaoExecutora = MIOLO::_REQUEST('instituicaoExecutora');
        $args->ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        $args->conteudoMinistrado = MIOLO::_REQUEST('conteudoMinistrado');

        for ( $i = 0;  $i < 7; $i++ )
        {
            $campo = 'repeteDias_' . $i;
            $args->$campo = MIOLO::_REQUEST($campo);
        }

        //Validações
        if ( !(strlen($args->chTotal) > 0) ||
            !(strlen($args->chEncontro) > 0) )
        {
            $this->addError(_M("Por favor, para poder gerar os encontros em lote, é necessário informar todos os campos obrigatórios (marcados com <font color=\"red\"><strong>*</strong></font>).", $module));
            return false;
        }
        elseif ( $args->horaInicial > $args->horaFim )
        {
            $this->addError(_M("Por favor, digite horas de início e fim válidas.", $module));
            return false;
        }

        $datasGerar = $this->obterDatasParaGerarOsEncontros($args);

        //Não vai salvar agora, vai jogar para a subDetail e salvar no final
        try
        {
            foreach ( $datasGerar as $data )
            {
                //Valida data (não pode passar do fim da oferta)
                if ( SAGU::compareTimestamp($args->fim, '<' , $data) )
                {
                    throw new Exception(_M("Opa! Você está tentando gerar mais encontros do que o período da Oferta da Atividade do módulo.", $module));
                }

                $tema = new ApsTema($args->tema);

                $instituicaoExecutora =  new BusinessBasicBusLegalPerson();
                $insti = $instituicaoExecutora->getLegalPerson($args->instituicaoExecutora);

                $preceptoresNome = array();
                foreach ($args->preceptores as $preceptorId) {
                    $preceptor = new ApsPreceptoria($preceptorId);
                    $preceptoresNome[] = $preceptor->physicalPerson->name;
                }

                $subDados[] = (object) array(
                    'hrInicio' => ($data . ' ' . $args->horaInicial),
                    'hrFim' => ($data . ' ' . $args->horaFim),
                    'chEncontro' => $args->chEncontro,
                    'tema' => $tema->descricao,
                    'temaId' => $tema->temaId,
                    'instituicaoExecutora' => $insti->name,
                    'instituicaoExecutoraId' => $args->instituicaoExecutora,
                    'preceptoresId' => $args->preceptores,
                    'preceptores'   => implode(', ', $preceptoresNome),
                    'ofertaDeUnidadeTematicaId'   => $args->ofertaDeUnidadeTematicaId,
                    'conteudoMinistrado'   => $args->conteudoMinistrado
                );
            }

            MSubDetail::addData($subDados, '_encontros');

            $this->AddInfo(_M("Os encontros gerados foram adicionados à tabela de 'Encontros' abaixo, disponíveis para gerenciamento. Para salvá-los não se esqueça de <strong>Salvar</strong>.", $module));
        }
        catch (Exception $ex)
        {
            $this->addError($ex->getMessage());
        }
    }

    public function obterDatasParaGerarOsEncontros($args = null)
    {
        //Obtem os dias da semana selecionados
        $diasSemana = array();
        for ( $i = 0; $i < 7; $i++ )
        {
            if ( $args->repeticao == self::REPETICA_TODOS_OS_DIAS )
            {
                $diasSemana[$i] = null;
            }
            else
            {
                $campo = 'repeteDias_' . $i;
                strlen($args->$campo) > 0 ? $diasSemana[$i] = null : null;
            }
        }

        //Obtém as datas dos encontros que serão gerados
        $datasGerar = array();
        if ( strlen($args->quantOcorrencias) > 0 )
        {
            //Se for quant de ocorrências
            $cont = $args->quantOcorrencias;
            $chaveAtual = 0;

            //Faz a lógica pra pegar os dias certos ate fechar a quantidade de ocorrências
            while ( $cont > 0 )
            {
                foreach ( $diasSemana as $dia => $item )
                {
                    if ( $cont > 0 )
                    {
                        $datasDoDia = SAGU::obterDiasDaSemanaEmIntervalo($args->inicio, $args->fim, $dia);

                        $datasGerar[] = $datasDoDia[$chaveAtual];

                        $cont--;
                    }
                }
                $chaveAtual++;
            }
        }
        else
        {
            //Se for gerar até o fim, só vai acumulando as datas disponíveis
            foreach ( $diasSemana as $dia => $item )
            {
                //Obtém dias possíveis ao longo da oferta em que cai o dia da semana
                $datasDoDia = SAGU::obterDiasDaSemanaEmIntervalo($args->inicio, $args->fim, $dia);
                $datasGerar = array_merge($datasDoDia, $datasGerar);
            }
        }

        sort($datasGerar);
        $datasGerar = array_unique($datasGerar);

        return $datasGerar;
    }

    public function ajustarCampoTermina($args = null)
    {
        $MIOLO = MIOLO::getInstance();

        //Se for até o fim tem que ficar readOnly o campo de quantidade de ocorrências
        if ( $args->gerarAte == self::TERMINAR_FIM_OFERTA )
        {
            $jsCode = "document.getElementById('quantOcorrencias').readOnly=true;"
                . "document.getElementById('quantOcorrencias').className='m-text-field m-readonly';"
                . "document.getElementById('quantOcorrencias').value=null;";
        }
        elseif ( $args->gerarAte == self::TERMINAR_ATE_OCORRENCIAS )
        {
            $jsCode = "document.getElementById('quantOcorrencias').readOnly=false;";
        }

        //Seta qual será a geração no hiddenfield
        $jsCode .= "document.getElementById('vaiGerarEncontrosAte').value='{$args->gerarAte}';";

        $MIOLO->page->addAJAXJsCode($jsCode);
    }

    public function  tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();

        $ofertaDeUnidadeTematicaId = null;
        try {
            SDatabase::beginTransaction();


            foreach ( (array)MSubDetail::getData('_encontros') as $row )
            {

                $ofertaDeUnidadeTematicaId = $row->ofertaDeUnidadeTematicaId;
                if ( !$row->removeData )
                {

                    $temaDaUnidadeTematica = new ApsTemaDaUnidadeTematica($row->ofertaDeUnidadeTematicaId, $row->temaId);

                    $quantidadeHorasJaDefinida = ApsEncontro::retornaQuantidadeDeHorasJaDefinidaProTemaNaUnidadeTematica($row->temaId, null, $row->ofertaDeUnidadeTematicaId);
                    $carga = $quantidadeHorasJaDefinida + $row->chEncontro;

                    if ($carga > $temaDaUnidadeTematica->cargahoraria && $row->temaId > 0) {
                        throw new Exception( _M('Você está tentando cadastrar um encontro com carga horária maior que a carga horária definido para o tema (@1 - @2 horas) da oferta do módulo.', $module, $temaDaUnidadeTematica->temaIdDescription, $temaDaUnidadeTematica->cargahoraria) );
                    }


                    $encontro = new ApsEncontro();
                    $encontro->temaId = $row->temaId;
                    $encontro->ofertaDeUnidadeTematicaId = $row->ofertaDeUnidadeTematicaId;
                    $encontro->inicio = $row->hrInicio;
                    $encontro->fim = $row->hrFim;
                    $encontro->cargaHoraria = str_replace(',', '.', $row->chEncontro);
                    $encontro->instituicaoExecutoraId = $row->instituicaoExecutoraId;
                    $encontro->conteudoMinistrado = $row->conteudoMinistrado;

                    $preceptores = array();
                    foreach ((array)$row->preceptoresId as $preceptor) {
                        $preceptorObj = new ApsEncontroPreceptor();
                        $preceptorObj->preceptorId = $preceptor;
                        $preceptores[] = $preceptorObj;
                    }
                    $encontro->preceptores = $preceptores;

                    //Busca os residentes da oferta
                    $filters = new stdClass();
                    $filters->ofertaDeUnidadeTematicaId = $row->ofertaDeUnidadeTematicaId;
                    $filters->filterOnlyActive = DB_TRUE;
                    $dataOfertaDoResidente = ApsOfertaDoResidente::searchGrid($filters); //FIXME Esta consulta está errada, está trazendo os alunos que cancelaram junto


                    foreach ( (array) $dataOfertaDoResidente as $ofertaResidente )
                    {
                        $frequencia = new ApsFrequencia();
                        $frequencia->residenteId = $ofertaResidente[1];
                        $frequencia->presenca = ApsFrequencia::PRESENTE;
                        $frequencia->justificativa = null;

                        $frequencias[] = $frequencia;
                    }
                    //Adiciona as frequências dos residentes
                    $encontro->frequencias = $frequencias;

                    $ok = $encontro->save();
                }
            }

            SDatabase::commit();

            MSubDetail::clearData('_encontros');

            if ( $ok )
            {
                $caption = _M('Informação', $module);
                SAGU::information(_M('Encontro inserido com sucesso', $module) . '.', $MIOLO->getActionURL($module, 'main:register:encontro', null, array( 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId, 'return_to'=>$this->getRequestValue('return_to'))));
            }

        } catch ( Exception $e ) {
            SDatabase::rollback();
            SAGU::error(_M($e->getMessage(), $module) . '.', $MIOLO->getActionURL($module, 'main:register:encontroMultiplos', null, array( 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId, 'return_to'=>$this->getRequestValue('return_to'))));
        }
    }
}
?>