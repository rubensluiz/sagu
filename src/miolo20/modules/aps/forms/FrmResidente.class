<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers \n
 * Equipe SAGU [sagu@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class FrmResidente extends SManagementForm
{
    public function __construct()
    {
        parent::__construct(new ApsResidente(), array('residenteId'));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function,  array(SForm::FUNCTION_UPDATE,  SForm::FUNCTION_DELETE)) )
        {
            $residenteId = MIOLO::_REQUEST('residenteId');
            $fields[] = new SHiddenField('residenteId', $residenteId);
            $data = new ApsResidente($residenteId);
        }

         //Pessoa
        $opts = array(
            'label' => _M('Pessoa', $module),
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'required' => true,
        );
        $fields[] = $personId = new SLookupContainer('personId', $this->getRequestValue('personId', $data->personId), $opts);
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');
        if ( MIOLO::_REQUEST('function') == SForm::FUNCTION_UPDATE )
        {
            $personId->setReadOnly(true);
        }

        // Lookup de turma
        $optsTurma = array(
            'label' => _M('Turma', $module),
            'item' => 'Turma',
            'module' => 'aps',
            'required' => true
        );
        $fields[] = $turmaId = new SLookupContainer('codigoTurma', $this->getRequestValue('codigoTurma', $data->turmaId), $optsTurma);
        $turmaId->addAttribute('onblur', SForm::getAjaxAction('obtemInformacaoTurma', 'divTurma', false));

        //Nucleo profissional
        $fields[] = $nucleoProfissional = new MSelection('nucleoProfissionalId', $this->getRequestValue('nucleoProfissionalId', $data->nucleoProfissionalId), _M('Núcleo profissional'), ApsNucleoProfissional::listRecords());
        $nucleoProfissional->setJsHint(_M('Informe o núcleo profissional'));
        $validators[] = new MRequiredValidator('nucleoProfissionalId', _M('Núcleo profissional'));

        //Enfase
        $fields[] = $enfase = new MSelection('enfaseId', $this->getRequestValue('enfaseId', $data->enfaseId), _M('Ênfase'), ApsEnfase::listRecords());
        $enfase->setJsHint(_M('Informe a ênfase'));
        $enfase->addAttribute('onChange', SForm::getAjaxAction('obtemInformacaoTurma', 'divTurma', false));
        $validators[] = new MRequiredValidator('enfaseId', _M('Ênfase'));

        $fields[] = new MSpacer();
        $fields[] = new MDiv('divTurma', $this->obtemInformacaoTurma($data));

        //Inicio/fim previsto
        $fields[] = new SBeginEndPeriod(array(
//            'baseGroup' => false,
            'title' => _M('Período letivo', $module),
            'begin' => array('label' => _M('Início previsto', $module), 'dateId' => 'inicio', 'dateValue' => $this->getRequestValue('inicio', $data->inicio)),
            'end' => array('label' => _M('Fim previsto', $module), 'dateId' => 'fimPrevisto', 'dateValue' => $this->getRequestValue('fimPrevisto', $data->fimPrevisto)),
            'required' => true,
        ));

        // LegalPerson
        $optsInstituicao = array(
            'label' => _M('Instituição executora', $module),
            'item' => 'LegalPerson',
            'module' => 'basic',
            'required' => true
        );
        $fields[] = $turmaId = new SLookupContainer('instituicaoExecutora', $this->getRequestValue('instituicaoExecutora', $data->instituicaoExecutora), $optsInstituicao);

        $busUnit = new BusinessBasicBusUnit();

        // Unidade de saude 1
        $fields[] = $unidade1 = new MSelection('unidade1', $this->getRequestValue('unidade1', $data->unidade1), _M('Unidade de saúde 1', $module), $busUnit->listUnit());
        $unidade1->setJsHint(_M('Informe a unidade', $module));
        $unidade1->setVisibility(false);

        // Unidade de saude 2
        $fields[] = $unidade2 = new MSelection('unidade2', $this->getRequestValue('unidade2', $data->unidade2), _M('Unidade de saúde 2', $module), $busUnit->listUnit());
        $unidade2->setJsHint(_M('Informe a unidade', $module));
        $unidade2->setVisibility(false);

        //Se formulário estiver em modo de edição e estiver associado a uma inscrição no processo seletivo
        if ( (MIOLO::_REQUEST('function') == SForm::FUNCTION_UPDATE) )
        {
            if ( strlen($data->subscriptionId)>0 )
            {
                $fields[] = new MTextLabel('subscriptionIdLabel', $this->getRequestValue('subscriptionId', $data->subscriptionId), _M('Inscrição no processo seletivo',$module));
            }
            else
            {
                $msg = _M('O aluno não ingressou através de um processo seletivo',$module).'.';
                $fields[] = new MTextLabel('subscriptionIdLabel', $msg, _M('Inscrição no processo seletivo',$module));
            }
        }

        $validators[] = new MRequiredValidator('inicio', _M('Início previsto', $module));
        $validators[] = new MDateDMYValidator('inicio', _M('Início previsto', $module));
        $validators[] = new MRequiredValidator('fimPrevisto', _M('Fim previsto', $module));
        $validators[] = new MDateDMYValidator('fimPrevisto', _M('Fim previsto', $module));

        $fields[] = new SHiddenField('nucleoProfissional');
        $fields[] = new SHiddenField('enfase');
        $fields[] = new SHiddenField('dtInicio');
        $fields[] = new SHiddenField('dtFim');

        parent::defineFields($fields, $validators, $data);

        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $this->addField(new MButton('btnVoltar', _M('Voltar', $module), $this->getPreviousURL()));
        }
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();

        $turma = ApsTurma::obtemTurma(MIOLO::_REQUEST('codigoTurma'));

        $data->turmaId = SAGU::NVL($turma->turmaId, SType::NULL_VALUE);
        $data->nucleoProfissionalId = SAGU::NVL($data->nucleoProfissionalId, $data->nucleoProfissional);
        $data->enfaseId = SAGU::NVL($data->enfaseId, $data->enfase);
        $data->inicio = SAGU::NVL($data->inicio, MIOLO::_REQUEST('dtInicio'));
        $data->fimPrevisto = SAGU::NVL($data->fimPrevisto, MIOLO::_REQUEST('dtFim'));
        $data->registroDeConclusaoDoPreRequisito = SAGU::NVL($data->registroDeConclusaoDoPreRequisito, MIOLO::_REQUEST('registroDeConclusaoDoPreRequisito'));

        return $data;
    }

    public function obtemInformacaoTurma($args)
    {
        $MIOLO = MIOLO::getInstance();

        if ( strlen($args->codigoTurma) > 0 )
        {
            $infoTurma = ApsTurma::obtemTurma($args->codigoTurma);

            $jsCode = " document.getElementById('inicio').value = '{$infoTurma->dataInicio}';
                        document.getElementById('fimPrevisto').value = '{$infoTurma->dataFim}';
                        document.getElementById('inicio').disabled = true;
                        document.getElementById('fimPrevisto').disabled = true;
                        document.getElementById('btninicio').style.display = 'none';
                        document.getElementById('btnfimPrevisto').style.display = 'none'; ";

            $jsCode .= " document.getElementById('dtInicio').value = '{$infoTurma->dataInicio}';
                         document.getElementById('dtFim').value = '{$infoTurma->dataFim}'; ";

            $enfase = !$args->phpFunction ? $args->enfaseId : '';

            if ( strlen($infoTurma->enfaseId) > 0 )
            {
                $jsCode .= " document.getElementById('enfaseId').value = '{$infoTurma->enfaseId}';
                             document.getElementById('enfaseId').disabled = true; ";

                $jsCode .= " document.getElementById('enfase').value = '{$infoTurma->enfaseId}'; ";
            }
            else
            {
                $jsCode .= " document.getElementById('enfaseId').value = '{$args->enfaseId}';
                             document.getElementById('enfaseId').disabled = false; ";
            }

            if ( strlen($infoTurma->nucleoProfissionalId) > 0 )
            {
                $jsCode .= " document.getElementById('nucleoProfissionalId').value = '{$infoTurma->nucleoProfissionalId}';
                             document.getElementById('nucleoProfissionalId').disabled = true; ";

                $jsCode .= " document.getElementById('nucleoProfissional').value = '{$infoTurma->nucleoProfissionalId}'; ";
            }
            else
            {
                $jsCode .= " document.getElementById('nucleoProfissionalId').value = '{$args->nucleoProfissionalId}';
                             document.getElementById('nucleoProfissionalId').disabled = false; ";
            }
        }
        else
        {
            if ( $args->phpFunction  && !$args->enfaseId )
            {
                $jsCode = " document.getElementById('inicio').value = '';
                            document.getElementById('fimPrevisto').value = '';
                            document.getElementById('nucleoProfissionalId').value = '';
                            document.getElementById('enfaseId').value = '';

                            document.getElementById('inicio').disabled = false;
                            document.getElementById('fimPrevisto').disabled = false;
                            document.getElementById('btninicio').style.display = 'inline';
                            document.getElementById('btnfimPrevisto').style.display = 'inline';

                            document.getElementById('nucleoProfissionalId').disabled = false;
                            document.getElementById('enfaseId').disabled = false;";
            }
        }

        if ( $args->phpFunction )
        {
            $MIOLO->page->addAJAXJsCode($jsCode);
        }
        else
        {
            $MIOLO->page->addJsCode($jsCode);
        }

        //Caso a enfase possuir pre-requisito solicita o registro de conclusão do mesmo
       $enfaseId = SAGU::NVL($args->enfaseId, $infoTurma->enfaseId);
       $enfase = new ApsEnfase($enfaseId);
       if( strlen($enfase->enfaseDePreRequisitoId) > 0 )
       {
           $enfaseReq = new ApsEnfase($enfase->enfaseDePreRequisitoId);
           $flds[] = $label = new MLabel(_M('Código de conclusão').':');
           $label->setClass('m-caption m-caption-required');
           $flds[] = new MTextField('registroDeConclusaoDoPreRequisito', $this->getRequestValue('registroDeConclusaoDoPreRequisito', $args->registroDeConclusaoDoPreRequisito), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('A ênfase selecionada possui como pré-requisito a ênfase @1, necessário o registro de conclusão na ênfase de pré-requisito.', $module, $enfaseReq->descricao));
           $this->AddValidator(new MRequiredValidator('registroDeConclusaoDoPreRequisito', _M('Registro de conclusão no pré-requisito')));
           $fields[] = new MBaseGroup('ctnRegistroConclusao', _M('Registro de conclusão no pré-requisito @1',$module, $enfaseReq->descricao), $flds);
       }

       return SAGU::alignFields($fields);
    }

    public function  tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        $data = $this->getTypesData();

        try
        {
            if ( SAGU::compareTimestamp($this->getRequestValue('inicio'), '>', $this->getRequestValue('fimPrevisto')) )
            {
                throw new Exception( _M('O início previsto deve ser menor ou igual que o fim previsto', $module) );
            }

            // valida aluno ja inserido
            $filters = new stdClass();
            $filters->personId = $data->personId;
            $filters->nucleoProfissionalId = $data->nucleoProfissionalId;
            $filters->enfaseId = $data->enfaseId;

            $busca = ApsResidente::search($filters);

            if ( count($busca) > 0 && ( $function != SForm::FUNCTION_UPDATE ) )
            {
                throw new Exception(_M('Este aluno já foi inserido para o Núcleo profissional e Ênfase selecionados'));
            }

            parent::tbBtnSave_click($sender);
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }

    public function  confirmInsertUpdate($ok)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $msg = _M('Registro salvo. Clique no botão da ação que deseja executar');
        $action = MIOLO::getCurrentAction();

        $opts = array();
        $opts['residenteId'] = $this->typeObject->residenteId;

        $prompt = new MPrompt(null, $msg);
        $prompt->setType('question');
        $prompt->AddButton(_M('Voltar para tela de busca', $module), $MIOLO->getActionURL($module, $action, null, null));
        $prompt->AddButton(_M('Efetuar matrícula', $module), $MIOLO->getActionURL($module, 'main:register:ofertaDoResidente', null, $opts));
        $this->SetFields($prompt);
    }
}
?>