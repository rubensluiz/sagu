<?php

class ApsTurmaResponsavel extends SType
{
    /**
     * @AttributeType integer
     */
    protected $turmaResponsavelId;

    /**
     * @AttributeType integer
     */
    protected $turmaId;

    /**
     * @AttributeType integer
     */
    protected $responsavelId;

    /**
     * @var string
     */
    protected $responsavelIdDescription;

    public function __construct($turmaId = NULL, $responsavelId = NULL)
    {
        if ( (strlen($turmaId) > 0) && (strlen($responsavelId) > 0) )
        {
            $this->turmaId = $turmaId;
            $this->responsavelId = $responsavelId;
            $this->populate();
        }
    }

    public function __get($name)
    {
        // Preceptores
        if ( $name == 'responsavelIdDescription' )
        {
            if ( ($this->needCheckPopulate($name)) && (strlen($this->responsavelId) > 0) )
            {
                $MIOLO = MIOLO::getInstance();
                $busPP = new BusinessBasicBusPhysicalPerson();
                $this->responsavelIdDescription = $busPP->getPhysicalPerson($this->responsavelId)->personName;

            }
        }

        return parent::__get($name);
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT turmaresponsavelid,
                       turmaid,
                       responsavel
                  FROM aps.turmaresponsavel
                 WHERE turmaid = ?
                   AND responsavel = ?';

        $params = array();
        $params[] = $this->turmaId;
        $params[] = $this->responsavelId;
        $result = SDatabase::query($sql, $params);

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->turmaResponsavelId,
            $this->turmaId,
            $this->responsavelId ) = $result[0];

        $this->__get('responsavelIdDescription');
    }

    /**
     * Salva os dados
     *
     * @return integer - Código do registro inserido/atualizado
     */
    public function save()
    {
        return $this->insert();
    }

    /**
     * Insere os dados na base
     *
     * @return boolean
     */
    private function insert()
    {
        $sql = 'INSERT INTO aps.turmaresponsavel
                            ( turmaid, responsavel)
                     VALUES ( ?, ?)';

        $params = array();
        $params[] = $this->turmaId;
        $params[] = $this->responsavelId;


        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    /**
     * Função que deleta o registro
     *
     * @return boolean
     */
    public function delete()
    {
        if ((strlen($this->turmaResponsavelId) == 0) )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.'));
        }

        $sql = 'DELETE FROM aps.turmaresponsavel
                      WHERE turmaresponsavelid = ?';

        $params = array();
        $params[] = $this->turmaResponsavelId;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->responsavelId = null;
        }

        return $result;
    }


    public static function search($filters)
    {
        $sql = 'SELECT turmaresponsavelid,
                       turmaid,
                       responsavel
                  FROM aps.turmaresponsavel';

        $where = '';
        foreach ( (array)$filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new ApsTurmaResponsavel($result[$i][1], $result[$i][2]);
        }

        return $retVal;
    }
}
?>