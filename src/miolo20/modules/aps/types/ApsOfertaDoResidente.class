<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 */
class ApsOfertaDoResidente extends SType
{
    /**
     * @AttributeType integer
     */
    protected $ofertaDoResidenteId;
    /**
     * @AttributeType integer
     */
    protected $residenteId;
    /**
     * @AttributeType integer
     */
    protected $ofertaDeUnidadeTematicaId;
    /**
     * @AttributeType integer
     */
    protected $ocorrenciasDeOferta =array();

    /**
     * @var ApsResidente
     */
    protected $residente;

    /**
     * Atributo externo
     */
    protected $cargaHorariaNaUnidadeTematica;

    /**
     * Atributo externo
     */
    protected $atingiuFrequenciaMinima;

    /**
     * Atributo externo
     */
    protected $percentualCargaHorariaRealizada;
    
    /**
     * Atributo externo
     */
    protected $ofertaDeUnidadeTematica;

    public function __construct($ofertaDoResidenteId = NULL)
    {
        if ( (strlen($ofertaDoResidenteId)  >  0) )
        {
            $this->ofertaDoResidenteId = $ofertaDoResidenteId;
            $this->populate();
        }
    }

    public function __get($name)
    {
        $MIOLO = MIOLO::getInstance();

        // Load on demand
        // ocorrencia de oferta
        if ( $name == 'ocorrenciasDeOferta' && !$this->ocorrenciasDeOferta && strlen($this->ofertaDoResidenteId) > 0 )
        {
            // Object ocorrencia de oferta
            $filters = new stdClass();
            $filters->ofertaDoResidenteId = $this->ofertaDoResidenteId;
            $this->ocorrenciasDeOferta = ApsOcorrenciaDeOferta::search($filters);
        }

        if ( $name == 'residente' && (strlen($this->residenteId) > 0) && is_null($this->residente) )
        {
            $this->residente = new ApsResidente($this->residenteId);
        }
        
        if( $name == 'ofertaDeUnidadeTematica' && (strlen($this->ofertaDeUnidadeTematicaId) > 0) && is_null($this->ofertaDeUnidadeTematica) )
        {
            $this->ofertaDeUnidadeTematica = new ApsOfertaDeUnidadeTematica($this->ofertaDeUnidadeTematicaId);
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT A.ofertadoresidenteid
                  FROM aps.ofertadoresidente A
            INNER JOIN aps.ofertadeunidadetematica B
                    ON A.ofertadeunidadetematicaid = B.ofertadeunidadetematicaid
            INNER JOIN aps.unidadetematica C
                    ON B.unidadetematicaid = C.unidadetematicaid
            INNER JOIN aps.residente D
                    ON D.residenteid = A.residenteId';

        $where = '';
        foreach ( $filters  as  $key => $value )
        {
            if ( $key == 'personId' )
            {
                $where.=" AND D.personid = '{$value}'";
            }
            elseif ( $key == 'ofertaDeUnidadeTematicaId' )
            {
                $where.=" AND B.ofertaDeUnidadeTematicaId = '{$value}'";
            }
            elseif ( $key == 'nucleoProfissionalId' && strlen($value) > 0 )
            {
                $where.=" AND D.nucleoProfissionalId = '{$value}'";
            }
            elseif ( $key == 'enfaseId' && strlen($value) > 0 )
            {
                $where.=" AND D.enfaseId = '{$value}'";
            }
            else if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY C.periodo, C.descricao, A.ofertadoresidenteid';
        
       
        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ApsOfertaDoResidente($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT A.ofertadoresidenteid,
                       A.residenteid,
                       A.ofertadeunidadetematicaid
                  FROM aps.ofertadoresidente A';

        
        $args = array();
        if ( strlen($filters->ofertaDoResidenteId)  >  0 )
        {
            $where.=' AND A.ofertadoresidenteid = ?';
            $args[] = $filters->ofertaDoResidenteId;
        }

        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND A.residenteid = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->ofertaDeUnidadeTematicaId)  >  0 )
        {
            $where.=' AND A.ofertadeunidadetematicaid = ?';
            $args[] = $filters->ofertaDeUnidadeTematicaId;
        }
        
        // Filtra apenas por ativos
        $filterActives = '';
        if ( strlen($filters->filterOnlyActive ) > 0 )
        {
            $where.=' AND (' . ApsResidente::getSQLExpressionIsActive('A') . ' IS TRUE)';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY A.ofertadoresidenteid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT JJ.username,
                       JJ.datetime,
                       JJ.ipaddress,
                       JJ.ofertadoresidenteid,
                       JJ.residenteid,
                       JJ.ofertadeunidadetematicaid,
                       JJ.cargaHorariaTotal,
                       ( CASE WHEN ( SELECT ROUND((( JJ.cargaHorariaTotal / JJ.cargaHoraria) * 100)) >= JJ.frequenciaMinima ) IS TRUE THEN TRUE ELSE FALSE END ) AS atingiuFrequenciaMinima,
                       ROUND(( ( JJ.cargaHorariaTotal / JJ.cargaHoraria ) * 100 )) AS percentualCargaHorariaRealizada
                FROM (
                     SELECT A.username,
                            TO_CHAR(A.datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\') as datetime,
                             A.ipaddress,
                             A.ofertadoresidenteid,
                             A.residenteid,
                             A.ofertadeunidadetematicaid,
                             -- Feito para somar a carga horária referente a ofertas feitas anteriormente e interrompidas.
                             aps.obtemcargahorariadoresidentenaoferta(A.residenteId, B.ofertaDeUnidadeTematicaid)::INTEGER AS cargaHorariaTotal,
                             UT.cargaHoraria,
                             UT.frequenciaMinima              , B.unidadeTematicaId  
                        FROM aps.ofertadoresidente A
                  INNER JOIN aps.ofertaDeUnidadeTematica B
                          ON A.ofertaDeUnidadeTematicaId = B.ofertaDeUnidadeTematicaId
                  INNER JOIN aps.unidadeTematica UT
                          ON UT.unidadeTematicaId = B.unidadeTematicaId
                       WHERE A.ofertadoresidenteid = ? ) as JJ';

        $result = SDatabase::query($sql, array($this->ofertaDoResidenteId));
        
        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list(
              $this->userName,
              $this->dateTime,
              $this->ipAddress,
              $this->ofertaDoResidenteId,
              $this->residenteId,
              $this->ofertaDeUnidadeTematicaId,
              $this->cargaHorariaNaUnidadeTematica,
              $this->atingiuFrequenciaMinima,
              $this->percentualCargaHorariaRealizada) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->ofertaDoResidenteId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }


        if ( strlen($this->ofertaDoResidenteId) > 0 )
        {
            // Salva ocorrencias
            if ( count($this->ocorrenciasDeOferta)>0 )
            {
                foreach ( $this->ocorrenciasDeOferta as $ocorrenciaDeOferta )
                {
                    $ocorrenciaDeOferta->ofertaDoResidenteId = $this->ofertaDoResidenteId;
                    $ocorrenciaDeOferta->save();
                }
            }
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO aps.ofertadoresidente 
                            (ofertadoresidenteid, 
                             residenteid,
                             ofertadeunidadetematicaid)
                     VALUES (?, ?, ?)';

        $sqlPK = "SELECT nextval('seq_medofertadoresidente_ofertadoresidenteid'::regclass)";
        $result = SDatabase::query($sqlPK);

        $ofertaDoResidenteId = $result[0][0];
        
        $args = array($ofertaDoResidenteId,
                      $this->residenteId,
                      $this->ofertaDeUnidadeTematicaId);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ofertaDoResidenteId = $ofertaDoResidenteId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE aps.ofertadoresidente
                   SET residenteid = ?,
                       ofertadeunidadetematicaid = ?
                 WHERE ofertadoresidenteid = ?';

        $args = array($this->residenteId,
                      $this->ofertaDeUnidadeTematicaId,
                      $ofertaDoResidenteId);

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        $this->__get('ocorrenciasDeOferta');

        if ( strlen($this->ofertaDoResidenteId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        // excluir ocorrencias de ofertas
        foreach ( $this->ocorrenciasDeOferta as $ocorrenciaDeOferta )
        {
            $ocorrenciaDeOferta->delete();
        }

        $sql = 'DELETE FROM aps.ofertadoresidente
                      WHERE ofertadoresidenteid = ?';

        $args = array($this->ofertaDoResidenteId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ofertaDoResidenteId = null;
        }

        return $result;
    }

    /**
     * Obtem a carga horaria total de um residente em uma oferta de unidade tematica
     *
     *
     * @return real $result
     */
    public static function obterCargaHorariaTotal($residenteId, $ofertaDeUnidadeTematicaId)
    {
        $result = SDatabase::query('SELECT aps.obtemcargahorariadoresidentenaoferta(?, ?)', array($residenteId, $ofertaDeUnidadeTematicaId));
        return $result[0][0];
    }
    
    /**
     * Obtém a nota do residente na oferta de unidade temática
     * 
     * @param type int $residenteId
     * @param type int $ofertaDeUnidadeTematicaId
     * @return type real $result
     */
    public static function obtemNotaDoResidenteNaOfertaDeUnidadeTematica($residenteId, $ofertaDeUnidadeTematicaId)
    {
        $sql = " SELECT nota, notapratica, notateorica
                   FROM aps.notaDoResidenteNaOfertaDeUnidadeTematica 
                  WHERE residenteId = ? 
                    AND ofertaDeUnidadeTematicaId = ? ";
        
        $args[] = $residenteId;
        $args[] = $ofertaDeUnidadeTematicaId;
        
        $result = SDatabase::query($sql, $args);
        
        return $result[0];
        
    }
    
    /**
     * Insere ou atualiza a nota do residente da oferta de unidade temática
     * 
     * @param type $data >> $data->nota, $data->residenteId, $data->ofertaDeUnidadeTematicaId
     * @return type boolean
     */
    public static function salvaNotaDoResidente($data)
    {
        $sqlBusca = " SELECT COUNT(*) > 0
                        FROM aps.notaDoResidenteNaOfertaDeUnidadeTematica
                       WHERE residenteId = ?
                         AND ofertaDeUnidadeTematicaId = ? ";
        
        $argsBusca[] = $data->residenteId;
        $argsBusca[] = $data->ofertaDeUnidadeTematicaId;
        
        $resultBusca = SDatabase::query($sqlBusca, $argsBusca);

        
        if ( $resultBusca[0][0] == DB_TRUE )
        {
            // Atualiza a nota do residente
            $sql = " UPDATE aps.notaDoResidenteNaOfertaDeUnidadeTematica
                        SET nota = ?,
                        notapratica = ?,
                        notateorica = ? 
                      WHERE residenteId = ? 
                        AND ofertaDeUnidadeTematicaId = ? ";
            
            $args[] = $data->nota;
            $args[] = $data->notapratica;
            $args[] = $data->notateorica;
            $args[] = $data->residenteId;
            $args[] = $data->ofertaDeUnidadeTematicaId;

            $result = SDatabase::execute($sql, $args);
        }
        else
        {
            // Insere a nota para o residente
            $sql = " INSERT INTO aps.notaDoResidenteNaOfertaDeUnidadeTematica 
                                 (residenteId,
                                 ofertaDeUnidadeTematicaId,
                                 nota, notapratica, notateorica)
                          VALUES (?, ?, ?, ?, ?) ";
        
            $args[] = $data->residenteId;
            $args[] = $data->ofertaDeUnidadeTematicaId;
            $args[] = $data->nota;
            $args[] = $data->notapratica;
            $args[] = $data->notateorica;

            $result = SDatabase::execute($sql, $args);
        }
        
        return $result;
    }


    public static function obtemFaltaDoResidenteNaOfertaDeUnidadeTematica($residenteId, $ofertaDeUnidadeTematicaId)
    {
        $sql = " SELECT faltadoresidentenaofertadeunidadetematicaid,
                        residenteid,
                        ofertadeunidadetematicaid,
                        falta,
                        observacao
                   FROM aps.faltaDoResidenteNaOfertaDeUnidadeTematica 
                  WHERE residenteId = ? 
                    AND ofertaDeUnidadeTematicaId = ? ";

        $args[] = $residenteId;
        $args[] = $ofertaDeUnidadeTematicaId;

        $result = SDatabase::query($sql, $args);

        $falta = array(
            'faltadoresidentenaofertadeunidadetematicaid' => $result[0][0],
            'residenteid' => $result[0][1],
            'ofertadeunidadetematicaid' => $result[0][2],
            'falta' => $result[0][3],
            'observacao' => $result[0][4],
        );
        return $falta;

    }

    public static function salvaFaltaDoResidente($data)
    {
        $sqlBusca = " SELECT COUNT(*) > 0
                        FROM aps.faltaDoResidenteNaOfertaDeUnidadeTematica
                       WHERE residenteId = ?
                         AND ofertaDeUnidadeTematicaId = ? ";

        $argsBusca[] = $data->residenteId;
        $argsBusca[] = $data->ofertaDeUnidadeTematicaId;

        $resultBusca = SDatabase::query($sqlBusca, $argsBusca);

        if ( $resultBusca[0][0] == DB_TRUE )
        {
            // Atualiza a nota do residente
            $sql = " UPDATE aps.faltaDoResidenteNaOfertaDeUnidadeTematica
                        SET falta = ?, observacao = ? 
                      WHERE residenteId = ? 
                        AND ofertaDeUnidadeTematicaId = ? ";

            $args[] = $data->falta;
            $args[] = $data->observacao;
            $args[] = $data->residenteId;
            $args[] = $data->ofertaDeUnidadeTematicaId;

            $result = SDatabase::execute($sql, $args);
        }
        else
        {
            // Insere a nota para o residente
            $sql = " INSERT INTO aps.faltaDoResidenteNaOfertaDeUnidadeTematica 
                                 (residenteId,
                                 ofertaDeUnidadeTematicaId,
                                 falta,
                                 observacao)
                          VALUES (?, ?, ?, ?) ";

            $args[] = $data->residenteId;
            $args[] = $data->ofertaDeUnidadeTematicaId;
            $args[] = $data->falta;
            $args[] = $data->observacao;

            $result = SDatabase::execute($sql, $args);
        }

        return $result;
    }
    
    /**
     * Obtém as notas trimestrais do residente no período
     * 
     * @param int $residenteId
     * @param string $periodo
     * @return array
     */
    public static function obtemNotasTrimestraisDoResidente($residenteId, $periodo)
    {
        $sql = " SELECT A.ofertadeunidadetematicaid,
                        C.descricao,
                        COALESCE(D.nota::TEXT, '" . _M('Não registrada') ."') as nota,
                        (SELECT (EXTRACT(QUARTER FROM B.inicio::DATE))) as trimestre
                   FROM aps.ofertaDoResidente A 
             INNER JOIN aps.ofertadeunidadetematica B 
                     ON (A.ofertaDeUnidadeTematicaId = B.ofertaDeUnidadeTematicaId)
             INNER JOIN aps.unidadeTematica C 
                     ON (B.unidadeTematicaId = C.unidadeTematicaId)
              LEFT JOIN aps.notaDoResidenteNaOfertaDeUnidadeTematica D
                     ON (A.residenteId = D.residenteId
                    AND A.ofertaDeUnidadeTematicaId = D.ofertaDeUnidadeTematicaId )
                  WHERE A.residenteId = ? 
                    AND C.periodo = ?
               ORDER BY 4,2";
        
        $args[] = $residenteId;
        $args[] = $periodo;
        
        return SDatabase::query($sql, $args);
    }
}
?>