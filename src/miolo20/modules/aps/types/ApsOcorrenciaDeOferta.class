<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class ApsOcorrenciaDeOferta extends SType
{    
    const STATUS_MATRICULADO = 1;
    const STATUS_INTERROMPIDO_CARGA_HORARIA_VALIDA = 2;
    const STATUS_INTERROMPIDO_CARGA_HORARIA_INVALIDA = 3;
    const STATUS_APTO = 4;
    const STATUS_INAPTO = 5;

    /**
     * @AttributeType integer
     * 
     */
    protected $ocorrenciaDeOfertaId;
    /**
     * @AttributeType integer
     * 
     */
    protected $ofertaDoResidenteId;
    /**
     * @AttributeType timestamp without time zone
     * 
     */
    protected $dataHora;
    /**
     * @AttributeType integer
     * 
     */
    protected $status;
    /**
     * @AttributeType text
     * 
     */
    protected $observacoes;
    /**
     * @AttributeType array
     *
     */
    protected $oferta = array();

    public function __construct($ocorrenciaDeOfertaId = NULL)
    {
        if ( (strlen($ocorrenciaDeOfertaId)  >  0) )
        {
            $this->ocorrenciaDeOfertaId = $ocorrenciaDeOfertaId;
            $this->populate();
        }
    }

    public function __get($name)
    {
        $MIOLO = MIOLO::getInstance();

        // Load on demand
        // oferta do residente
        if ( $name == 'oferta' && !$this->oferta && strlen($this->ofertaDoResidenteId) > 0 )
        {
            // Object oferta do residente
            $this->oferta = new ApsOfertaDoResidente($this->ofertaDoResidenteId);
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT ocorrenciadeofertaid
                  FROM aps.ocorrenciadeoferta';

        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY ocorrenciadeofertaid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ApsOcorrenciaDeOferta($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT A.ocorrenciadeofertaid,
                       A.ofertadoresidenteid,
                       TO_CHAR(A.datahora, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       A.status,
                       A.observacoes,
                       D.personId AS personId,
                       D.name AS personName,
                       F.descricao AS ofertaDeUnidadeTematica,
                       F.periodo,
                       F.tipo,
                       A.status
                  FROM aps.ocorrenciadeoferta A
             LEFT JOIN aps.ofertadoresidente B
                 USING (ofertadoresidenteid)
             LEFT JOIN aps.residente C
                 USING (residenteid)
        LEFT JOIN ONLY basphysicalperson D
                 USING (personid)
             LEFT JOIN aps.ofertadeunidadetematica E
                 USING (ofertadeunidadetematicaid)
             LEFT JOIN aps.unidadetematica F
                 USING (unidadetematicaid)
';

        $args = array();
        
        if ( strlen($filters->ocorrenciaDeOfertaId)  >  0 )
        {
            $where.=' AND A.ocorrenciadeofertaid = ?';
            $args[] = $filters->ocorrenciaDeOfertaId;
        }

        if ( strlen($filters->ofertaDoResidenteId)  >  0 )
        {
            $where.=' AND A.ofertadoresidenteid = ?';
            $args[] = $filters->ofertaDoResidenteId;
        }

        if ( strlen($filters->dataHora)  >  0 )
        {
            $where.=' AND A.datahora = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\')';
            $args[] = $filters->dataHora;
        }

        if ( strlen($filters->status)  >  0 )
        {
            $where.=' AND A.status = ?';
            $args[] = $filters->status;
        }

        if ( strlen($filters->observacoes)  >  0 )
        {
            $where.=' AND UNACCENT(A.observacoes) ILIKE UNACCENT(?) ';
            $args[] = $filters->observacoes.'%';
        }
        
        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND B.residenteId = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->ofertaDeUnidadeTematicaId)  >  0 )
        {
            $where.=' AND B.ofertaDeUnidadeTematicaId = ?';
            $args[] = $filters->ofertaDeUnidadeTematicaId;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY A.datahora desc';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       ocorrenciadeofertaid,
                       ofertadoresidenteid,
                       TO_CHAR(datahora, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       status,
                       observacoes
                  FROM aps.ocorrenciadeoferta
                 WHERE ocorrenciadeofertaid = ?';

        $result = SDatabase::query($sql, array($this->ocorrenciaDeOfertaId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->userName,
              $this->dateTime,
              $this->ipAddress,
              $this->ocorrenciaDeOfertaId,
              $this->ofertaDoResidenteId,
              $this->dataHora,
              $this->status,
              $this->observacoes) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->ocorrenciaDeOfertaId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO aps.ocorrenciadeoferta 
                            (ocorrenciadeofertaid,
                             ofertadoresidenteid,
                             datahora,
                             status,
                             observacoes)
                     VALUES (?, ?, TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'), ?, ?)';

        $sqlPK = "SELECT nextval('seq_medocorrenciadeoferta_ocorrenciadeofertaid'::regclass)";
        $result = SDatabase::query($sqlPK);

        $ocorrenciaDeOfertaId = $result[0][0];
        $args = array($ocorrenciaDeOfertaId,
                      $this->ofertaDoResidenteId,
                      $this->dataHora,
                      $this->status,
                      $this->observacoes);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ocorrenciaDeOfertaId = $ocorrenciaDeOfertaId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE aps.ocorrenciadeoferta
                   SET ofertadoresidenteid = ?,
                       datahora = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       status = ?,
                       observacoes = ?
                 WHERE ocorrenciadeofertaid = ?';

        $args = array($this->ofertaDoResidenteId,
                      $this->dataHora,
                      $this->status,
                      $this->observacoes,
                      $this->ocorrenciaDeOfertaId);
        
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->ocorrenciaDeOfertaId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM aps.ocorrenciadeoferta
                      WHERE ocorrenciadeofertaid = ?';

        $args = array($this->ocorrenciaDeOfertaId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ocorrenciaDeOfertaId = null;
        }

        return $result;
    }

    /**
     * Lista status possíveis para a ocorrência
     * @return <array>
     */
    public static function listStatus()
    {
        return array(
            self::STATUS_MATRICULADO => _M('Matriculado', $module),
            self::STATUS_INTERROMPIDO_CARGA_HORARIA_VALIDA => _M('Interrompido, carga horária válida', $module),
            self::STATUS_INTERROMPIDO_CARGA_HORARIA_INVALIDA =>_M('Interrompido, carga horária inválida', $module),
            self::STATUS_APTO =>_M('Apto', $module),
            self::STATUS_INAPTO => _M('Inapto',$module));
    }

    /**
     * Lista status possíveis para a ocorrência
     * @return <array>
     */
    public static function listStatusBylastStatus($lastStatus = null)
    {
        $array = array();
        if ( (strlen($lastStatus)>0) && (in_array($lastStatus, array(self::STATUS_MATRICULADO,self::STATUS_INTERROMPIDO_CARGA_HORARIA_VALIDA,self::STATUS_INTERROMPIDO_CARGA_HORARIA_INVALIDA))) )
        {
            if ( ($lastStatus != self::STATUS_MATRICULADO) )
            {
                $array[self::STATUS_MATRICULADO] = _M('Matriculado', $module);
            }
            if ( $lastStatus != self::STATUS_INTERROMPIDO_CARGA_HORARIA_VALIDA )
            {
                $array[self::STATUS_INTERROMPIDO_CARGA_HORARIA_VALIDA] = _M('Interrompido, carga horária válida', $module);
            }
            if ( $lastStatus != self::STATUS_INTERROMPIDO_CARGA_HORARIA_INVALIDA )
            {
                $array[self::STATUS_INTERROMPIDO_CARGA_HORARIA_INVALIDA] = _M('Interrompido, carga horária inválida', $module);
            }
            if ( $lastStatus != self::STATUS_APTO )
            {
                $array[self::STATUS_APTO] = _M('Apto', $module);
            }
            if ( $lastStatus != self::STATUS_INAPTO )
            {
                $array[self::STATUS_INAPTO] = _M('Inapto',$module);
            }
        }
        if ( strlen($lastStatus)==0 )
        {
            $array[self::STATUS_MATRICULADO] = _M('Matriculado', $module);
        }

        return $array;
    }

    /**
     * Obtem a ultima ocorrência da oferta do residente
     * @param <type> $ofertaDoResidenteId
     * @return <type>
     */
    public static function getLastOccurrence($ofertaDoResidenteId)
    {
        $sql = "SELECT A.ocorrenciadeofertaid
                  FROM aps.ocorrenciadeoferta A
                 WHERE A.ofertaDoResidenteId = ?
              ORDER BY 1 DESC LIMIT 1";


        $params = array();
        $params[] = $ofertaDoResidenteId;

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        if ( is_array($result) )
        {
            $retVal = new ApsOcorrenciaDeOferta($result[0][0]);
        }

        return $retVal ? $retVal : $result;
    }


}
?>