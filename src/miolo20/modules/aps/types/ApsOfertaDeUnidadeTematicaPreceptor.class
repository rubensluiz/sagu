<?php

class ApsOfertaDeUnidadeTematicaPreceptor extends SType
{
    /**
     * @AttributeType integer
     */
    protected $ofertaDeUnidadeTematicaPreceptorId;

    /**
     * @AttributeType integer
     */
    protected $ofertaDeUnidadeTematicaId;

    /**
     * @AttributeType integer
     */
    protected $preceptorId;

    /**
     * @var string
     */
    protected $preceptorIdDescription;

    public function __construct($ofertaDeUnidadeTematicaId = NULL, $preceptorId = NULL)
    {
        if ( (strlen($ofertaDeUnidadeTematicaId) > 0) && (strlen($preceptorId) > 0) )
        {
            $this->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
            $this->preceptorId = $preceptorId;
            $this->populate();
        }
    }

    public function __get($name)
    {
        // Preceptores
        if ( $name == 'preceptorIdDescription' )
        {
            if ( ($this->needCheckPopulate($name)) && (strlen($this->preceptorId) > 0) )
            {
                $filters = new stdClass();
                $filters->preceptorId = $this->preceptorId;
                $preceptor = ApsPreceptoria::searchGrid($filters);

                $this->preceptorIdDescription = $preceptor[0][1];
            }
        }

        return parent::__get($name);
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT ofertadeunidadetematicapreceptorid,
                       ofertadeunidadetematicaid,
                       preceptorid
                  FROM aps.ofertadeunidadetematicapreceptor
                 WHERE ofertadeunidadetematicaid = ?
                   AND preceptorid = ?';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaId;
        $params[] = $this->preceptorId;
        $result = SDatabase::query($sql, $params);

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->ofertaDeUnidadeTematicaPreceptorId,
            $this->ofertaDeUnidadeTematicaId,
            $this->preceptorId ) = $result[0];

        $this->__get('preceptorIdDescription');
    }



    public static function search($filters)
    {
        $sql = 'SELECT ofertadeunidadetematicapreceptorid,
                       ofertadeunidadetematicaid,
                       preceptorid
                  FROM aps.ofertadeunidadetematicapreceptor';

        $where = '';
        foreach ( (array)$filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY ofertaDeUnidadeTematicaId ';
        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new ApsOfertaDeUnidadeTematicaPreceptor($result[$i][1], $result[$i][2]);
        }

        return $retVal;
    }


    /**
     * Salva os dados
     *
     * @return integer - Código do registro inserido/atualizado
     */
    public function save()
    {
        return $this->insert();
    }

    /**
     * Insere os dados na base
     *
     * @return boolean
     */
    private function insert()
    {
        $sql = 'INSERT INTO aps.ofertadeunidadetematicapreceptor
                            ( ofertadeunidadetematicaid, preceptorid)
                     VALUES ( ?, ?)';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaId;
        $params[] = $this->preceptorId;

        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    /**
     * Função que deleta o registro
     *
     * @return boolean
     */
    public function delete()
    {
        if ((strlen($this->ofertaDeUnidadeTematicaPreceptorId) == 0) )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM aps.ofertadeunidadetematicapreceptor
                      WHERE ofertadeunidadetematicapreceptorid = ?';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaPreceptorId;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->ofertaDeUnidadeTematicaPreceptorId = null;
        }

        return $result;
    }

    public static function listPreceptoresDaOfertaDeRodizio($filters = array())
    {
        $args = array();
        $where = ' WHERE 1=1';

        if ( strlen($filters->ofertaDeUnidadeTematicaId) > 0 )
        {
            $where .= ' AND A.preceptorid IN (SELECT preceptorid
                                         FROM aps.ofertadeunidadetematicapreceptor
                                        WHERE ofertadeunidadetematicaid = ?)';
            $args[] = $filters->ofertaDeUnidadeTematicaId;
        }

        $sql = "SELECT DISTINCT A.preceptorid,
                       B.name
                  FROM aps.preceptoria A
                      INNER JOIN basphysicalperson B
                        ON A.personid = B.personid
                       {$where}
              ORDER BY B.name";

        $result = SDatabase::query($sql, $args);

        return $result;
    }

}
?>