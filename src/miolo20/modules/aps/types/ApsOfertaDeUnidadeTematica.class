    <?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 16/07/2011
 *
 */
class ApsOfertaDeUnidadeTematica extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $ofertaDeUnidadeTematicaId;

    /**
     * @AttributeType integer
     * 
     */
    protected $unidadeTematicaId;
    /**
     * @AttributeType date
     * 
     */
    protected $inicio;
    /**
     * @AttributeType date
     * 
     */
    protected $fim;

    /**
     * @AttributeType timestamp
     *
     */
    protected $encerramento;

    /**
     * @AttributeType int
     *
     */
    protected $encerradoPor;

    /**
     * @type ApsUnidadeTematica
     */
    protected $unidadeTematica;

    /**
     * @type ApsOfertaDoResidente
     */
    protected $ofertaDoResidente;
    
    /**
     * @type object
     */
    protected $encontros = null;

    /**
     * @AssociationType ApsTemaDaUnidadeTematica
     */
    protected $temas = null;

    /**
     * @AssociationType ApsOfertaDeUnidadeTematicaPreceptor
     */
    protected $preceptores = null;

    /**
     * @AssociationType ApsOfertaDeUnidadeTematicaInstituicaoExecutora
     */
    protected $instituicoesExecutoras = null;

    /**
     * @var string
     */
    protected $cargaHorariaCursada;
    
    
    protected $notaMaxima;
    
    
    protected $notaMinimaParaAprovacao;

    protected $acompanhamentoEncontro;

    protected $turmaId;

    protected $observacao;

    const ACOMPANHAMENTO_ENCONTRO_SIMPLES = 'S';
    const ACOMPANHAMENTO_ENCONTRO_DETALHADO = 'D';


    public function __construct($ofertaDeUnidadeTematicaId = NULL)
    {
        if ( (strlen($ofertaDeUnidadeTematicaId)  >  0) )
        {
            $this->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
            $this->populate();
        }
    }

    public function  __get($name)
    {
        $MIOLO = MIOLO::getInstance();
        if ( $name == 'unidadeTematica' && is_null($this->unidadeTematica) && strlen($this->unidadeTematicaId) > 0 )
        {
            $this->unidadeTematica = new ApsUnidadeTematica($this->unidadeTematicaId);
        }

        // Temas
        if ( $name == 'temas' )
        {
            if ( is_null($this->temas) && (strlen($this->ofertaDeUnidadeTematicaId) > 0) )
            {
                $filters = new stdClass();
                $filters->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
                $this->temas = ApsTemaDaUnidadeTematica::search($filters);
            }
        }

        if ( $name == 'preceptores' )
        {
            if ( is_null($this->preceptores) && (strlen($this->ofertaDeUnidadeTematicaId) > 0) )
            {
                $filters = new stdClass();
                $filters->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
                $this->preceptores = ApsOfertaDeUnidadeTematicaPreceptor::search($filters);
            }
        }

        if ( $name == 'instituicoesExecutoras' )
        {
            if ( is_null($this->instituicoesExecutoras) && (strlen($this->ofertaDeUnidadeTematicaId) > 0) )
            {
                $filters = new stdClass();
                $filters->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
                $this->instituicoesExecutoras = ApsOfertaDeUnidadeTematicaInstituicaoExecutora::search($filters);
            }
        }

        if ( $name == 'ofertaDoResidente' && is_null($this->ofertaDoResidente) && strlen($this->ofertaDeUnidadeTematicaId) > 0 )
        {
            $filters = new stdClass();
            $filters->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
            $this->ofertaDoResidente = ApsOfertaDoResidente::search($filters);
        }

        if ( $name == 'encontros' && is_null($this->encontros) && strlen($this->ofertaDeUnidadeTematicaId) > 0 )
        {
            $filters = new stdClass();
            $filters->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
            $this->encontros = ApsEncontro::search($filters);
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT A.ofertadeunidadetematicaid
                  FROM aps.ofertadeunidadetematica A';

        $where = '';
        foreach ( $filters  as  $key => $value )
        {
            if ( (($key == 'inicio')||($key == 'fim')) && (strlen($value) > 0) )
            {
                $where.=" AND A.{$key} = TO_DATE('{$value}', '" . SAGU::getParameter('BASIC', 'MASK_DATE')."')";
            }
            else if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY A.ofertadeunidadetematicaid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ApsOfertaDeUnidadeTematica($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * CUIDADO: Esta funcao está sendo utilizada em mais de um lugar:
     * FrmUnidadesTematicasDoPreceptor
     * FrmOfertaDeUnidadeTematicaSearch
     * FrmConsultaDoResidente
     *
     * @param stdClass $filters
     * <br><b>orderByInicioDescricao</b> (boolean) Ordena por inicio e descricao
     */
    public static function getSearchGridSQL($filters  =  null)
    {
        $action = MIOLO::getCurrentAction();
        
        if ( $action == 'main:process:ofertaDeUnidadeTematica' || $action == 'main:process:matriculaEmLote' )
        {
            $columns = ' A.ofertadeunidadetematicaid, A.unidadetematicaid, ';
        }
        else
        {
            $columns = ' A.ofertadeunidadetematicaid, ';
        }
        
        $sql = 'SELECT ' . $columns . '
                   (SELECT AAA.descricao  FROM aps.turma AAA WHERE AAA.turmaid = A.turmaid) AS turma,
                   B.descricao,
                   B.periodo,
                   B.tipo,
                   
                   CASE
                        WHEN A.acompanhamentoencontro = \'' . ApsOfertaDeUnidadeTematica::ACOMPANHAMENTO_ENCONTRO_DETALHADO . '\' THEN
                           COALESCE(ROUND((SELECT SUM(cargaHoraria)
                              FROM aps.encontro
                             WHERE ofertadeunidadetematicaid = A.ofertadeunidadetematicaid)::numeric, 0), 0) || \'h / \' || B.cargaHoraria || \'h\'
                        
                        WHEN A.acompanhamentoencontro = \'' . ApsOfertaDeUnidadeTematica::ACOMPANHAMENTO_ENCONTRO_SIMPLES . '\' THEN
                            B.cargaHoraria || \'h\'
                   END,                     
                   B.frequenciaMinima || \'%\' AS cargaHoraria,
                   --Núcleo profissional
                   (SELECT ARRAY_TO_STRING(ARRAY(
                        SELECT descricao
                          FROM aps.nucleoDaUnidadeTematica NDUT
                    INNER JOIN aps.nucleoProfissional NP
                            ON NDUT.nucleoProfissionalId = NP.nucleoProfissionalId
                         WHERE NDUT.unidadeTematicaId = B.unidadeTematicaId
                      ORDER BY NP.descricao), \', \')),
                   --Ênfase
                   (SELECT ARRAY_TO_STRING(ARRAY(
                        SELECT descricao
                          FROM aps.enfaseDaUnidadeTematica EDUT
                    INNER JOIN aps.enfase E
                            ON EDUT.enfaseId = E.enfaseId
                         WHERE EDUT.unidadeTematicaId = B.unidadeTematicaId
                      ORDER BY E.descricao), \', \')),

                   TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                   TO_CHAR(A.fim, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                   TO_CHAR(A.encerramento, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                   
                   B.notamaxima
              FROM aps.ofertadeunidadetematica A
              INNER JOIN aps.unidadeTematica B
                ON A.unidadeTematicaId = B.unidadeTematicaId
              INNER JOIN aps.enfasedaunidadetematica EU
                ON B.unidadetematicaid = EU.unidadetematicaid
              INNER JOIN aps.enfase E
                ON E.enfaseid = EU.enfaseid';
        $args = array();

        $where = null;
        if ( strlen($filters->turmaId)  >  0 )
        {
            $where.=' AND A.turmaid = ?';
            $args[] = $filters->turmaId;
        }

        if ( strlen($filters->ofertaDeUnidadeTematicaId)  >  0 )
        {
            $where.=' AND A.ofertadeunidadetematicaid = ?';
            $args[] = $filters->ofertaDeUnidadeTematicaId;
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $where.=' AND A.personid = ?';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->unidadeTematicaId)  >  0 )
        {
            $where.=' AND A.unidadetematicaid = ?';
            $args[] = $filters->unidadeTematicaId;
        }
        
        //Filtro para a grid da Oferta do Residente, caso é o primeiro ano a lógica muda, senao segue
        if ( $filters->apenasAno == 1)
        {
            $where.=" AND A.inicio BETWEEN TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE')."') AND (TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE')."')+ interval '1 year') ";
            $where.=" AND A.fim BETWEEN TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE')."') AND (TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE')."')+ interval '1 year') ";
            
            $args[] = $filters->inicio;
            $args[] = $filters->inicio;
            $args[] = $filters->inicio;
            $args[] = $filters->inicio;
        }
        /*elseif ( strlen($filters->apenasAno) > 0 )
        {
            // o ano de inicio da oferta do rodízio tem que ser maior ou igual a periodo final da residencia do residente
            $where.=" AND TO_CHAR(A.inicio, 'yyyy') >= ((SELECT EXTRACT('year' FROM (TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE')."')))) + ?::NUMERIC)::TEXT ";

            $args[] = $filters->inicio;
            $args[] = $filters->apenasAno;
        }*/

        if ( strlen($filters->apenasExtracurricular)  >  0 )
        {
            $where.="AND NOT EXISTS (SELECT 1
                                       FROM aps.nucleoDaUnidadeTematica NU
                                 INNER JOIN aps.enfaseDaUnidadeTematica EU
                                         ON (NU.unidadeTematicaId = EU.unidadeTematicaId)
                                      WHERE NU.unidadeTematicaId = A.unidadeTematicaId
                                        AND nucleoProfissionalId = ?
                                        AND enfaseId = ?)";
            
            $args[] = $filters->nucleoProfissionalId;
            $args[] = $filters->enfaseId;
        }

        if ( strlen($filters->inicio)  >  0 )
        {
            $where.=' AND A.inicio >= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->inicio;
        }

        if ( strlen($filters->fim)  >  0 )
        {
            $where.=' AND A.fim <= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->fim;
        }

        if ( strlen($filters->descricao)  >  0 )
        {
            $where.=' AND UNACCENT(B.descricao) ILIKE UNACCENT(?)';
            $args[] = $filters->descricao . '%';
        }

        if ( strlen($filters->tipo)  >  0 )
        {
            $where.=' AND B.tipo = ?';
            $args[] = $filters->tipo;
        }

        if ( strlen($filters->periodo)  >  0 )
        {
            $where.=' AND B.periodo = ?';
            $args[] = $filters->periodo;
        }

        if ( ( strlen($filters->betweenInicio) > 0 ) && ( strlen($filters->betweenFim) > 0 ) )
        {
            $where .= ' AND (
                        A.fim >= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                    AND A.inicio <= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') ) ';
            $args[] = $filters->betweenInicio;
            $args[] = $filters->betweenFim;
        }
        
        // Caso TRUE, filtra apenas que ja foram encerradas, senao, apenas que nao foram encerradas
        if ( in_array($filters->encerradas, array(DB_TRUE, DB_FALSE)) )
        {
            $condition = $filters->encerradas == DB_TRUE ? 'NOT' : '';
            $where .= " AND A.encerramento IS {$condition} NULL";
        }
        
        // Aplicado validação para aparecer as ofertas encerradas apenas para quem já está matriculado
        if ( $filters->encerradasSemMatricula == DB_TRUE )
        {
            $where .= " AND ( A.encerramento IS NULL 
                         OR (A.encerramento IS NOT NULL AND EXISTS(SELECT 1 
                                                                     FROM aps.ofertadoresidente 
                                                                    WHERE residenteId = ? 
                                                                      AND ofertadeunidadetematicaid = A.ofertaDeUnidadeTematicaId)) ) ";
            

            $args[] = $filters->residenteId;
        }

        if ( count($filters->nucleosProfissionais) > 0 )
        {
            $tmpWhere = '';
            foreach ( $filters->nucleosProfissionais as $nucleoProfissionalId )
            {
                $tmpWhere .= " OR EXISTS (SELECT 1
                                            FROM aps.nucleoDaUnidadeTematica
                                           WHERE unidadeTematicaId = A.unidadeTematicaId
                                             AND nucleoProfissionalId = ?) ";

                $args[] = $nucleoProfissionalId;
            }

            $where .= " AND (1=0 {$tmpWhere})";
        }

        if ( count($filters->enfases) > 0 )
        {
            $tmpWhere = '';
            foreach ( $filters->enfases as $enfaseId )
            {
                $tmpWhere .= " OR EXISTS (SELECT 1
                                             FROM aps.enfaseDaUnidadeTematica
                                            WHERE unidadeTematicaId = A.unidadeTematicaId
                                              AND enfaseId = ?) ";
                $args[] = $enfaseId;
            }

            $where .= " AND (1=0 {$tmpWhere})";
        }
        
        if (strlen ($filters->equipe) > 0 )
        {
            $where .= " AND UNACCENT(equipe) ILIKE UNACCENT(?)";
            $args[] = '%' . $filters->equipe . '%';
        }



        if ( strlen($where)  >  0 )
        {

            $usuario = ApsTurma::retornaAdminDaTurmaResidencia();
            if ( $usuario )
            {
                $where .= " AND A.turmaid in (SELECT AA.turmaid FROM aps.turmaresponsavel AA WHERE AA.responsavel = ?)";
                $args[] = $usuario;
            }

            $sql.=' WHERE '.substr($where, 4);

            // ordering
            $order = 'A.inicio, B.descricao';
            $sql .= ' ORDER BY ' . $order;

            return SAGU::prepare($sql, $args);
        }
        

    }
    
    /**
     * Mantem codigo legado funcionando
     * 
     * @param stdClass $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = self::getSearchGridSQL($filters);
        
        return preg_match('/ WHERE /', $sql) ? SDatabase::query($sql) : array();
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT A.username,
                       TO_CHAR(A.datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       A.ipaddress,
                       A.ofertadeunidadetematicaid,
                       A.unidadetematicaid,
                       TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(A.fim, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(A.encerramento, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') .'\'),
                       A.encerradoPor,
                       ROUND(COALESCE((SELECT SUM(cargahoraria) FROM aps.encontro WHERE ofertadeunidadetematicaid = A.ofertadeunidadetematicaid)::numeric, 0), 0) || \'h / \' || B.cargaHoraria || \'h\' AS cargaHorariaCursada,
                       B.notaMaxima,
                       B.notaMinimaParaAprovacao,
                       A.acompanhamentoencontro,
                       A.turmaid,
                       observacao
                  FROM aps.ofertadeunidadetematica A
            INNER JOIN aps.unidadeTematica B ON A.unidadeTematicaId = B.unidadeTematicaId
                 WHERE A.ofertadeunidadetematicaid = ?';
        $result = SDatabase::query($sql, array($this->ofertaDeUnidadeTematicaId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName,
                $this->dateTime,
                $this->ipAddress,
                $this->ofertaDeUnidadeTematicaId,
                $this->unidadeTematicaId,
                $this->inicio,
                $this->fim,
                $this->encerramento,
                $this->encerradoPor,
                $this->cargaHorariaCursada,
                $this->notaMaxima,
                $this->notaMinimaParaAprovacao,
                $this->acompanhamentoEncontro,
                $this->turmaId,
                $this->observacao) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->ofertaDeUnidadeTematicaId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        // Salva os temas
        foreach ( (array)$this->temas as $tema )
        {
            $tema->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
            $ok = $tema->save();
            if ( !$ok )
            {
                $msg = _M('Erro ao salvar os temas', $module);
                throw new Exception($msg);
            }
        }

        // Salva os preceptores
        foreach ( (array)$this->preceptores as $preceptor )
        {
            $preceptor->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
            $ok = $preceptor->save();
            if ( !$ok )
            {
                $msg = _M('Erro ao salvar os preceptores', $module);
                throw new Exception($msg);
            }
        }

        foreach ( (array)$this->instituicoesExecutoras as $instituicaoExecutora )
        {
            $instituicaoExecutora->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
            $ok = $instituicaoExecutora->save();
            if ( !$ok )
            {
                $msg = _M('Erro ao salvar as instituições executoras', $module);
                throw new Exception($msg);
            }
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO aps.ofertadeunidadetematica 
                            (ofertadeunidadetematicaid,
                             unidadetematicaid,
                             inicio,
                             fim,
                             encerramento,
                             encerradoPor,
                             acompanhamentoencontro,
                             turmaid,
                             observacao)
                     VALUES (?,
                             ?,
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') .'\'),
                             ?,
                             ?,
                             ?,
                             ?)';

        $sqlPK = "SELECT nextval('seq_medofertadeunidadetematica_ofertadeunidadetematicaid'::regclass)";
        $result = SDatabase::query($sqlPK);

        $ofertaDeUnidadeTematicaId = $result[0][0];
        $args = array(
            $ofertaDeUnidadeTematicaId,
            $this->unidadeTematicaId,
            $this->inicio,
            $this->fim,
            $this->encerramento,
            $this->encerradoPor,
            $this->acompanhamentoEncontro,
            $this->turmaId,
            $this->observacao);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE aps.ofertadeunidadetematica
                   SET unidadetematicaid = ?,
                       inicio = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       fim = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       encerramento = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') .'\'),
                       encerradoPor = ?,
                       acompanhamentoencontro = ?,
                       turmaid = ?,
                       observacao = ?
                 WHERE ofertadeunidadetematicaid = ?';
        $args = array(
            $this->unidadeTematicaId,
            $this->inicio,
            $this->fim,
            $this->encerramento,
            $this->encerradoPor,
            $this->acompanhamentoEncontro,
            $this->turmaId,
            $this->observacao,
            $this->ofertaDeUnidadeTematicaId,
        );
        
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        $this->__get('encontros');
        $this->__get('temas');
        $this->__get('preceptores');
        $this->__get('instituicoesExecutoras');

        if ( strlen($this->ofertaDeUnidadeTematicaId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        // excluir os encontros
        foreach ( $this->encontros as $encontro )
        {
            $encontro->delete();
        }

        // Deleta os temas da unidade temática
        foreach ( (array)$this->temas as $tema )
        {
            $ok = $tema->delete();
            if ( !$ok )
            {
                $msg = _M('Erro ao excluir os temas do rodízio', $module);
                throw new Exception($msg);
            }
        }


        // Deleta os preceptores
        foreach ( (array)$this->preceptores as $preceptor )
        {
            $ok = $preceptor->delete();
            if ( !$ok )
            {
                $msg = _M('Erro ao excluir os preceptores do rodízio', $module);
                throw new Exception($msg);
            }
        }

        foreach ( (array)$this->instituicoesExecutoras as $instituicaoExecutora )
        {
            $ok = $instituicaoExecutora->delete();
            if ( !$ok )
            {
                $msg = _M('Erro ao excluir as instituições executoras do rodízio', $module);
                throw new Exception($msg);
            }
        }
        
        $sql = 'DELETE FROM aps.ofertadeunidadetematica
                      WHERE ofertadeunidadetematicaid = ?';

        $args = array($this->ofertaDeUnidadeTematicaId);
        
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ofertaDeUnidadeTematicaId = null;
        }

        return $result;
    }

    /**
     * Verifica se personId é ou ja foi preceptor de unidade tematica
     *
     * @param int $personId
     * @return boolean
     */
    public static function isPreceptor($personId)
    {
        $sql = "SELECT (
                          SELECT COUNT(DISTINCT DD.personid)
                              FROM aps.ofertadeunidadetematica AA
                            INNER JOIN aps.ofertadeunidadetematicapreceptor BB
                                ON AA.ofertadeunidadetematicaid = BB.ofertadeunidadetematicaid
                            INNER JOIN aps.preceptoria CC
                                ON BB.preceptorid = CC.preceptorid
                            INNER JOIN basPerson DD
                                ON CC.personid = DD.personid
                                 WHERE DD.personId = ?
                        )
                     + (SELECT COUNT(*) FROM aps.preceptoria WHERE personId = ? AND NOW()::date BETWEEN inicio AND COALESCE(fim, NOW()::date))";
        
        $args[] = $personId;
        $args[] = $personId;
        $result = SDatabase::query($sql, $args);
        
        return $result[0][0] > 0;
    }


    /**
     * Obtém matriz com o cross table de frequência para cada encontro e residente da oferta.
     *
     * @param integer $ofertaDeUnidadeTematicaId
     * @param integer $encontroId
     * @return object
     * personId
     * name
     * photoId
     * residenteId
     * ofertaDoResidenteId
     *
     * Colunas dinamicas para cada encontro
     * encontroId
     * inicio
     * fim
     * presenca_encontro_$encontroId
     * justificativa_encontro_$encontroId
     */
    public static function obtemTabelaFrequencias($ofertaDeUnidadeTematicaId, $encontroId = null, $filterOnlyActive = false)
    {
        //Busca encontros da unidade temática
        $filters = new stdClass();
        if ( strlen($encontroId) > 0 )
        {
            $filters->encontroId = $encontroId;
        }
        $filters->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
        $encontros = ApsEncontro::search($filters);
        
        //Percorre todos os encontros da oferta de unidade temática
        foreach ( $encontros as $row )
        {
            //FIXME estes SQLs (subselects) estao estranhos, deveria ser uma consulta apenas, esta dificil para manutencao e pode acarretar em problemas de performance no futuro
            
            //Encontro
            $dynamicColumn .= ",'{$row->encontroId}' AS encontroId";
            //Início
            $dynamicColumn .= ",'{$row->inicio}' AS inicio";
            //Fim
            $dynamicColumn .= ",'{$row->fim}' AS fim";

            //Presença
           $dynamicColumn .= ",(SELECT AA.presenca
                                  FROM aps.frequencia AA
                                 WHERE AA.residenteId = C.residenteId
                                   AND AA.encontroId = {$row->encontroId}) presenca_encontro_{$row->encontroId}";
           //Justificativa
           $dynamicColumn .= ",(SELECT AA.justificativa
                                  FROM aps.frequencia AA
                                 WHERE AA.residenteId = C.residenteId
                                   AND AA.encontroId = {$row->encontroId}) justificativa_encontro_{$row->encontroId}";
           //Carga horária do encontro                        
           $dynamicColumn .= ", '{$row->cargaHoraria}' AS cargaHoraria";
           
           //Arquivo [fileId]
           $dynamicColumn .= ",(SELECT AA.fileid
                                  FROM aps.frequencia AA
                                 WHERE AA.residenteId = C.residenteId
                                   AND AA.encontroId = {$row->encontroId}) fileid_encontro_{$row->encontroId}";
        }
        
        // Filtra apenas por ativos
        $filterActives = '';
        if ( $filterOnlyActive )
        {
            $filterActives = ' AND (' . ApsResidente::getSQLExpressionIsActive('C') . ' IS TRUE)';
        }

        $sql = "SELECT D.personId,
                       D.name,
                       D.photoId,
                       C.residenteId,
                       B.ofertaDoResidenteId,
                       (SELECT AA.status
                          FROM aps.ocorrenciadeoferta AA
                         WHERE AA.ofertaDoResidenteId = B.ofertaDoResidenteId
                         ORDER BY AA.datahora DESC LIMIT 1) ocorrenciaStatus
                       {$dynamicColumn}
                   FROM aps.ofertadeunidadetematica A
             INNER JOIN aps.ofertadoresidente B
                     ON (A.ofertadeunidadetematicaid = B.ofertadeunidadetematicaid)
             INNER JOIN aps.residente C
                     ON (B.residenteid = C.residenteid)
        INNER JOIN ONLY basphysicalperson D
                     ON (C.personid = D.personid)
                  WHERE A.ofertaDeUnidadeTematicaId = ?
                        {$filterActives}
               ORDER BY D.name";

        $param[] = $ofertaDeUnidadeTematicaId;
        $result = SDatabase::query($sql, $param);
        //Converte para objeto o resultado do sql
        foreach ( (array)$result as $row )
        {
            $resultObject = new stdClass();
            list($resultObject->personId,
                 $resultObject->name,
                 $resultObject->photoId,
                 $resultObject->residenteId,
                 $resultObject->ofertaDoResidenteId,
                 $resultObject->ocorrenciaStatus) = $row;

            $contArrayLinha = count($row);
            $contPosicoesEncontros = ($contArrayLinha-6)/5;

            $i = 6;
            $frequencias = array();
            $linhaEncontro = 0;
            while( $i < $contArrayLinha )
            {
                if( $linhaEncontro < $contPosicoesEncontros )
                {
                    $frequencia = new stdClass();
                    $frequencia->encontroId = $row[$i++];
                    $frequencia->inicio = $row[$i++];
                    $frequencia->fim = $row[$i++];
                    $frequencia->presenca = $row[$i++];
                    $frequencia->justificativa = $row[$i++];
                    $frequencia->cargaHoraria = $row[$i++];
                    $frequencia->fileId = $row[$i++];
                    
                    $linhaEncontro++;
                    $frequencias[] = $frequencia;
                }
            }
            $resultObject->encontros = $frequencias;
            $return[] = $resultObject;
        }
        return $return;
    }
    
    
    /**
     * Verifica todas as unidades temáticas oferecidas, considerando se a pessoa é responsável
     * 
     * @param stdClass $filters
     * @return array()
     */
    public static function searchGridConsultaPreceptor($filters  =  null)
    {
        $sql = ' SELECT DISTINCT A.ofertadeunidadetematicaid,
                        B.descricao,
                        B.periodo,
                        B.tipo,
                        ROUND(COALESCE((SELECT SUM(cargaHoraria)
                           FROM aps.encontro
                          WHERE ofertadeunidadetematicaid = A.ofertadeunidadetematicaid)::numeric, 0), \'0\') || \'h / \' || B.cargaHoraria || \'h\' AS cargaHoraria,
                        B.frequenciaMinima || \'%\' AS cargaHoraria,
                        --Núcleo profissional
                        (SELECT ARRAY_TO_STRING(ARRAY(
                             SELECT descricao
                               FROM aps.nucleoDaUnidadeTematica NDUT
                         INNER JOIN aps.nucleoProfissional NP
                                 ON NDUT.nucleoProfissionalId = NP.nucleoProfissionalId
                              WHERE NDUT.unidadeTematicaId = B.unidadeTematicaId
                           ORDER BY NP.descricao), \', \')),
                        --Ênfase
                        (SELECT ARRAY_TO_STRING(ARRAY(
                             SELECT descricao
                               FROM aps.enfaseDaUnidadeTematica EDUT
                         INNER JOIN aps.enfase E
                                 ON EDUT.enfaseId = E.enfaseId
                              WHERE EDUT.unidadeTematicaId = B.unidadeTematicaId
                           ORDER BY E.descricao), \', \')),
                        TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                        TO_CHAR(A.fim, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                        TO_CHAR(A.encerramento, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                         (SELECT ARRAY_TO_STRING(ARRAY(

                            SELECT DISTINCT DD.name
                              FROM aps.ofertadeunidadetematica AA
                            INNER JOIN aps.ofertadeunidadetematicapreceptor BB
                                ON AA.ofertadeunidadetematicaid = BB.ofertadeunidadetematicaid
                            INNER JOIN aps.preceptoria CC
                                ON BB.preceptorid = CC.preceptorid
                            INNER JOIN basPerson DD
                                ON CC.personid = DD.personid
                                 WHERE AA.ofertadeunidadetematicaid = A.ofertadeunidadetematicaid
                          ORDER BY DD.name

                        ), \', \')) AS preceptores,
                        (
                            SELECT count(BB.preceptorid) >= 1
                            FROM aps.ofertadeunidadetematica AA
                                INNER JOIN aps.ofertadeunidadetematicapreceptor BB
                                ON AA.ofertadeunidadetematicaid = BB.ofertadeunidadetematicaid
                            WHERE AA.ofertadeunidadetematicaid  = A.ofertadeunidadetematicaid
                                  AND BB.preceptorid = ?
                        ) AS responsavel
                   FROM aps.ofertadeunidadetematica A
                    INNER JOIN aps.unidadeTematica B
                         ON A.unidadeTematicaId = B.unidadeTematicaId
                    INNER JOIN aps.ofertadeunidadetematicapreceptor C
                         ON A.ofertadeunidadetematicaid = C.ofertadeunidadetematicaid
                    INNER JOIN aps.preceptoria D
                         ON D.preceptorid = C.preceptorid
                    INNER JOIN basphysicalperson P
                         ON P.personId = D.personid  ';
        
        $args = array();
        //$args[] = strlen($filters->personId) > 0 ? $filters->personId : $filters->preceptor ;

        if (strlen($filters->preceptorid) > 0) {
            $args[] = $filters->preceptorid;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $sql.=' WHERE P.personid = ?';
            $args[] = $filters->personId;
        }
        // Verifica se a flag referência ênfase está habilitada e obtém as referências
        else
        {
            if ( $filters->referencia == DB_TRUE )
            {
                $sql.=' WHERE ( P.personid = ? OR A.ofertadeunidadetematicaid IN (SELECT M.ofertadeunidadetematicaid
                                                                                    FROM aps.ofertadeunidadetematica M
                                                                              INNER JOIN aps.enfasedaunidadetematica N
                                                                                      ON M.unidadetematicaid = N.unidadetematicaid
                                                                                   WHERE N.enfaseid = ?
                                                                                     AND M.encerramento IS NULL) )';
                $args[] = $filters->preceptor;
                $args[] = $filters->enfase;
            }
            else
            {
                $sql.=' WHERE P.personid = ?';
                $args[] = $filters->preceptor;
            }
        }
        
        // filtro unidade tematica
        if ( strlen($filters->unidadeTematicaId) > 0 )
        {
            $sql.=' AND B.unidadeTematicaId = ?';
            $args[] = $filters->unidadeTematicaId;
        }

        // Caso TRUE, filtra apenas que ja foram encerradas, senao, apenas que nao foram encerradas
        if ( in_array($filters->encerradas, array(DB_TRUE, DB_FALSE)) )
        {
            $condition = $filters->encerradas == DB_TRUE ? 'NOT' : '';
            $sql .= " AND A.encerramento IS {$condition} NULL";
        }

        $result = SDatabase::query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Obtem os alunos de uma determinada oferta de unidade temática
     * 
     * @param type $ofertaDeUnidadeTematicaId
     * @return \stdClass objeto
     */
    public static function obtemAlunosDaOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId)
    {
        $sql = "SELECT D.personId,
                       D.name,
                       D.photoId,
                       C.residenteId,
                       B.ofertaDoResidenteId,
                       (SELECT AA.status
                          FROM aps.ocorrenciadeoferta AA
                         WHERE AA.ofertaDoResidenteId = B.ofertaDoResidenteId
                         ORDER BY AA.datahora DESC LIMIT 1) ocorrenciaStatus
                   FROM aps.ofertadeunidadetematica A
             INNER JOIN aps.ofertadoresidente B
                     ON (A.ofertadeunidadetematicaid = B.ofertadeunidadetematicaid)
             INNER JOIN aps.residente C
                     ON (B.residenteid = C.residenteid)
        INNER JOIN ONLY basphysicalperson D
                     ON (C.personid = D.personid)
                  WHERE A.ofertaDeUnidadeTematicaId = ?
               ORDER BY D.name";

        $param[] = $ofertaDeUnidadeTematicaId;
                
        $result = SDatabase::query($sql, $param);
        
        foreach ( (array)$result as $row )
        {
            $resultObject = new stdClass();
            list($resultObject->personId,
                 $resultObject->name,
                 $resultObject->photoId,
                 $resultObject->residenteId,
                 $resultObject->ofertaDoResidenteId,
                 $resultObject->ocorrenciaStatus) = $row;
            
            $object[] = $resultObject;
        }
        
        return $object;
    }
    
    public function getInicio()
    {
        return $this->inicio;
    }

    public function getFim()
    {
        return $this->fim;
    }

    public function setInicio($inicio)
    {
        $this->inicio = $inicio;
    }

    public function setFim($fim)
    {
        $this->fim = $fim;
    }
    
    /**
     * @param int $personId
     * @return array
     */
    public static function obterOfertasDaPessoa($personId)
    {
        $sql = "SELECT B.ofertadeunidadetematicaid,
                       (D.descricao || ' - ' || datetouser(B.inicio) || ' até ' || datetouser(B.fim)) AS descricao
                  FROM aps.ofertadoresidente A
            INNER JOIN aps.ofertadeunidadetematica B
                 USING(ofertadeunidadetematicaid)
            INNER JOIN aps.residente C
                 USING(residenteid)
            INNER JOIN aps.unidadetematica D
                 USING(unidadetematicaid)
                 WHERE C.personid = ?
              ORDER BY D.descricao
                ";
        $rows = SDatabase::query($sql, array($personId));
        
        return SAGU::convertListToAssociative($rows);
    }

    public function retornaTemasDaOfertaEmArray()
    {
        $this->__get('temas');
        $this->__get('encontros');


        $temas = array();
        foreach ($this->temas as $tema) {

            $cargaHorariaLancadaProTemaNaOferta = 0;
            foreach ($this->encontros as $encontro) {
                if ($encontro->temaId == $tema->temaId) {
                    $cargaHorariaLancadaProTemaNaOferta += $encontro->cargahoraria;
                }
            }

            $temas[] = array(
                $tema->temaId,
                $tema->temaIdDescription,
                $cargaHorariaLancadaProTemaNaOferta.'/'.$tema->cargaHoraria
            );
        }

        return $temas;
    }

    public static function listTipoAcompanhamento()
    {
        $module = MIOLO::getCurrentModule();

        return array(ApsOfertaDeUnidadeTematica::ACOMPANHAMENTO_ENCONTRO_DETALHADO => _M('DETALHADO', $module));
    }
}
?>