<?php

class ApsOfertaDeUnidadeTematicaInstituicaoExecutora extends SType
{
    /**
     * @AttributeType integer
     */
    protected $ofertaDeUnidadeTematicaInstituicaoId;

    /**
     * @AttributeType integer
     */
    protected $ofertaDeUnidadeTematicaId;

    /**
     * @AttributeType integer
     */
    protected $instituicaoExecutoraId;

    /**
     * @var string
     */
    protected $instituicaoExecutoraIdDescription;

    public function __construct($ofertaDeUnidadeTematicaId = NULL, $instituicaoExecutoraId = NULL)
    {
        if ( (strlen($ofertaDeUnidadeTematicaId) > 0) && (strlen($instituicaoExecutoraId) > 0) )
        {
            $this->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
            $this->instituicaoExecutoraId = $instituicaoExecutoraId;
            $this->populate();
        }
    }

    public function __get($name)
    {
        // Preceptores
        if ( $name == 'instituicaoExecutoraIdDescription' )
        {
            if ( $name == 'instituicaoExecutoraIdDescription' )
            {
                if ( ($this->needCheckPopulate($name)) && (strlen($this->instituicaoExecutoraId) > 0) )
                {
                    $instituicaoExecutora =  new BusinessBasicBusLegalPerson();
                    $insti = $instituicaoExecutora->getLegalPerson($this->instituicaoExecutoraId);
                    $this->instituicaoExecutoraIdDescription = $insti->name;
                }
            }
        }

        return parent::__get($name);
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT ofertadeunidadetematicainstituicaoid,
                       ofertadeunidadetematicaid,
                       instituicaoexecutoraid
                  FROM aps.ofertadeunidadetematicainstituicao
                 WHERE ofertadeunidadetematicaid = ?
                   AND instituicaoexecutoraid = ?';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaId;
        $params[] = $this->instituicaoExecutoraId;
        $result = SDatabase::query($sql, $params);

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->ofertaDeUnidadeTematicaInstituicaoId,
            $this->ofertaDeUnidadeTematicaId,
            $this->instituicaoExecutoraId ) = $result[0];

        $this->__get('instituicaoExecutoraIdDescription');
    }



    public static function search($filters)
    {
        $sql = 'SELECT ofertadeunidadetematicainstituicaoid,
                       ofertadeunidadetematicaid,
                       instituicaoexecutoraid
                  FROM aps.ofertadeunidadetematicainstituicao';

        $where = '';
        foreach ( (array)$filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY ofertaDeUnidadeTematicaId ';
        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new ApsOfertaDeUnidadeTematicaInstituicaoExecutora($result[$i][1], $result[$i][2]);
        }

        return $retVal;
    }


    /**
     * Salva os dados
     *
     * @return integer - Código do registro inserido/atualizado
     */
    public function save()
    {
        return $this->insert();
    }

    /**
     * Insere os dados na base
     *
     * @return boolean
     */
    private function insert()
    {
        $sql = 'INSERT INTO aps.ofertadeunidadetematicainstituicao
                            ( ofertadeunidadetematicaid, instituicaoexecutoraid)
                     VALUES ( ?, ?)';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaId;
        $params[] = $this->instituicaoExecutoraId;

        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    /**
     * Função que deleta o registro
     *
     * @return boolean
     */
    public function delete()
    {
        if ((strlen($this->ofertaDeUnidadeTematicaInstituicaoId) == 0) )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM aps.ofertadeunidadetematicainstituicao
                      WHERE ofertadeunidadetematicainstituicaoid = ?';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaInstituicaoId;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->ofertaDeUnidadeTematicaInstituicaoId = null;
        }

        return $result;
    }

    public static function listIntituicoesDaOfertaDeRodizio($filters = array())
    {
        $args = array();
        $where = ' WHERE 1=1';

        if ( strlen($filters->ofertaDeUnidadeTematicaId) > 0 )
        {
            $where .= ' AND A.personId IN (SELECT instituicaoexecutoraid
                                         FROM aps.ofertadeunidadetematicainstituicao
                                        WHERE ofertadeunidadetematicaid = ?)';
            $args[] = $filters->ofertaDeUnidadeTematicaId;
        }

        $sql = "SELECT DISTINCT A.personId,
                       A.name
                  FROM basLegalPerson A
                       {$where}
              ORDER BY A.name";

        $result = SDatabase::query($sql, $args);

        return $result;
    }

}
?>