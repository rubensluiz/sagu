<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 18/07/2011
 *
 */
class ApsOcorrenciaDeContrato extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $ocorrenciaDeContratoId;
    /**
     * @AttributeType integer
     * 
     */
    protected $statusDaOcorrenciaDeContratoId;
    /**
     * @AttributeType integer
     * 
     */
    protected $residenteId;
    /**
     * @AttributeType timestamp without time zone
     * 
     */
    protected $dataHora;
    /**
     * @AttributeType text
     * 
     */
    protected $observacoes;


    protected $fileId;

    public function __construct($ocorrenciaDeContratoId = NULL)
    {
        if ( (strlen($ocorrenciaDeContratoId)  >  0) )
        {
            $this->ocorrenciaDeContratoId = $ocorrenciaDeContratoId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT ocorrenciadecontratoid
                  FROM aps.ocorrenciadecontrato';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY datahora DESC';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ApsOcorrenciaDeContrato($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT ocorrenciadecontratoid,
                       statusdaocorrenciadecontratoid,
                       residenteid,
                       TO_CHAR(datahora, \''.SAGU::getParameter('BASIC', 'MASK_DATE').' '.SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       observacoes
                  FROM aps.ocorrenciadecontrato';
        $args = array();

        if ( strlen($filters->ocorrenciaDeContratoId)  >  0 )
        {
            $where.=' AND ocorrenciadecontratoid = ?';
            $args[] = $filters->ocorrenciaDeContratoId;
        }

        if ( strlen($filters->statusDaOcorrenciaDeContratoId)  >  0 )
        {
            $where.=' AND statusdaocorrenciadecontratoid = ?';
            $args[] = $filters->statusDaOcorrenciaDeContratoId;
        }

        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND residenteid = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->dataHora)  >  0 )
        {
            $where.=' AND datahora = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\')';
            $args[] = $filters->dataHora;
        }

        if ( strlen($filters->observacoes)  >  0 )
        {
            $where.=' AND UNACCENT(observacoes) ILIKE UNACCENT(?) ';
            $args[] = $filters->observacoes.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY ocorrenciadecontratoid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_DATE').' '.SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       ipaddress,
                       ocorrenciadecontratoid,
                       statusdaocorrenciadecontratoid,
                       residenteid,
                       TO_CHAR(datahora, \''.SAGU::getParameter('BASIC', 'MASK_DATE').' '.SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       observacoes,
                       fileid
                  FROM aps.ocorrenciadecontrato
                 WHERE ocorrenciadecontratoid = ?';
        $result = SDatabase::query($sql, array($this->ocorrenciaDeContratoId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName, $this->dateTime, $this->ipAddress, $this->ocorrenciaDeContratoId, $this->statusDaOcorrenciaDeContratoId, $this->residenteId, $this->dataHora, $this->observacoes, $this->fileId) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->ocorrenciaDeContratoId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO aps.ocorrenciadecontrato 
                            (ocorrenciadecontratoid, statusdaocorrenciadecontratoid, residenteid, datahora, observacoes, fileid)
                     VALUES (?, ?, ?, TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_DEFAULT').'\'), ?, ?)';
        $sqlPK = "SELECT nextval('seq_medocorrenciadecontrato_ocorrenciadecontratoid'::regclass)";
        $result = SDatabase::query($sqlPK);
        $ocorrenciaDeContratoId = $result[0][0];
        $args = array($ocorrenciaDeContratoId, $this->statusDaOcorrenciaDeContratoId, $this->residenteId, $this->dataHora, $this->observacoes, $this->fileId);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ocorrenciaDeContratoId = $ocorrenciaDeContratoId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE aps.ocorrenciadecontrato
                   SET statusdaocorrenciadecontratoid = ?,
                       residenteid = ?,
                       datahora = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_DEFAULT').'\'),
                       observacoes = ?,
                       fileid = ?
                 WHERE ocorrenciadecontratoid = ?';
        $args = array($this->statusDaOcorrenciaDeContratoId, $this->residenteId, $this->dataHora, $this->observacoes, $this->fileId, $this->ocorrenciaDeContratoId);
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->ocorrenciaDeContratoId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM aps.ocorrenciadecontrato
                      WHERE ocorrenciadecontratoid = ?';
        $args = array($this->ocorrenciaDeContratoId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ocorrenciaDeContratoId = null;
        }

        return $result;
    }
}


?>