<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 15/07/2011
 *
 */
class ApsTema extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $temaId;
    /**
     * @AttributeType character varying
     * 
     */
    protected $descricao;
    public function __construct($temaId = NULL)
    {
        if ( (strlen($temaId)  >  0) )
        {
            $this->temaId = $temaId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT temaid
                  FROM aps.tema';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY descricao ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ApsTema($result[$i][0]);
        }

        return $retVal;
    }

    public static function getSearchGridSQL($filters  =  null)
    {
        $sql = 'SELECT temaid,
                       descricao
                  FROM aps.tema';
        $args = array();

        if ( strlen($filters->temaId)  >  0 )
        {
            $where.=' AND temaid = ?';
            $args[] = $filters->temaId;
        }

        if ( strlen($filters->ofertaDeUnidadeTematicaId)  >  0 )
        {
            $where.=' AND temaId IN (SELECT temaId
                                       FROM aps.temaDaUnidadeTematica
                                      WHERE ofertaDeUnidadeTematicaId = ?)';
            $args[] = $filters->ofertaDeUnidadeTematicaId;
        }

        if ( strlen($filters->descricao)  >  0 )
        {
            $where.=' AND UNACCENT(descricao) ILIKE UNACCENT(?) ';
            $args[] = $filters->descricao.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
        }
        
        $sql .= ' ORDER BY descricao ';

        return SAGU::prepare($sql, $args);
    }

    /**
     * Mantem codigo legado funcionando
     * 
     * @param stdClass $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = self::getSearchGridSQL($filters);
        
        return preg_match('/ WHERE /', $sql) ? SDatabase::query($sql) : array();
    }
    
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       temaid,
                       descricao
                  FROM aps.tema
                 WHERE temaid = ?';
        $result = SDatabase::query($sql, array($this->temaId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName, $this->dateTime ,$this->ipAddress, $this->temaId, $this->descricao) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->temaId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO aps.tema 
                            (temaid, descricao)
                     VALUES (?, ?)';
        $sqlPK = "SELECT nextval('seq_medtema_temaid'::regclass)";
        $result = SDatabase::query($sqlPK);
        $temaId = $result[0][0];
        $args = array($temaId, $this->descricao);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->temaId = $temaId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE aps.tema
                   SET descricao = ?
                 WHERE temaid = ?';
        $args = array( $this->descricao, $this->temaId );
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->temaId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM aps.tema
                      WHERE temaid = ?';
        $args = array($this->temaId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->temaId = null;
        }

        return $result;
    }

    /**
     * Lista os tipos de materiais armazenados na base de dados
     *
     * @param $filters array
     */
    public static function listTema($filters = array())
    {
        $args = array();
        $where = ' WHERE 1=1';

        if ( strlen($filters->ofertaDeUnidadeTematicaId) > 0 )
        {
            $where .= ' AND temaId IN (SELECT temaId
                                         FROM aps.temaDaUnidadeTematica
                                        WHERE ofertadeunidadetematicaid = ?)';
            $args[] = $filters->ofertaDeUnidadeTematicaId;
        }

        $sql = "SELECT temaid,
                       descricao
                  FROM aps.tema
                       {$where}
              ORDER BY descricao";

        $result = SDatabase::query($sql, $args);

        return $result;
    }

}


?>