<?php

class ApsEncontroPreceptor extends SType
{
    /**
     * @AttributeType integer
     */
    protected $encontroPreceptorId;

    /**
     * @AttributeType integer
     */
    protected $encontroId;

    /**
     * @AttributeType integer
     */
    protected $preceptorId;

    public function __construct($encontroId = NULL, $preceptorId = NULL)
    {
        if ( (strlen($encontroId) > 0) && (strlen($preceptorId) > 0) )
        {
            $this->encontroId = $encontroId;
            $this->preceptorId = $preceptorId;
            $this->populate();
        }
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT encontropreceptorid,
                       encontroid,
                       preceptorid
                  FROM aps.encontropreceptor
                 WHERE encontroid = ?
                   AND preceptorid = ?';

        $params = array();
        $params[] = $this->encontroId;
        $params[] = $this->preceptorId;
        $result = SDatabase::query($sql, $params);

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->encontroPreceptorId,
            $this->encontroId,
            $this->preceptorId ) = $result[0];
    }


    public static function search($filters)
    {
        $sql = 'SELECT encontropreceptorid,
                       encontroid,
                       preceptorid
                  FROM aps.encontropreceptor';

        $where = '';
        foreach ( (array)$filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new ApsEncontroPreceptor($result[$i][1], $result[$i][2]);
        }

        return $retVal;
    }

    public function delete()
    {
        if ((strlen($this->encontroPreceptorId) == 0) )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM aps.encontropreceptor
                      WHERE encontropreceptorid = ?';

        $params = array();
        $params[] = $this->encontroPreceptorId;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->encontroPreceptorId = null;
        }

        return $result;
    }

    public function save()
    {
        return $this->insert();
    }

    /**
     * Insere os dados na base
     *
     * @return boolean
     */
    private function insert()
    {
        $sql = 'INSERT INTO aps.encontropreceptor
                            ( encontroid, preceptorid)
                     VALUES ( ?, ?)';

        $params = array();
        $params[] = $this->encontroId;
        $params[] = $this->preceptorId;

        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    public static function retornaIdsDosPreceptoresDoEncontro($filters)
    {
        $sql = 'SELECT preceptorid
                  FROM aps.encontropreceptor';

        $where = '';
        foreach ( (array)$filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $result = SDatabase::query($sql);
        $ret = array();
        foreach ($result as $re) {
            $ret[] = $re[0];
        }

        return $ret;
    }
}
?>