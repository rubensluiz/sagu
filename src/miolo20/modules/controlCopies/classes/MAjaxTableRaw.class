<?php

 /**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * MSessionTableRaw
 * This stores session functions to easy mantain a MTableRaw
 * VERSION 2; (Done totally done yet).
 *
 * @author Eduardo Bonfandini [eduardo@solis.coop.br]
 *
 * @version 2;
 *
 * \b Maintainers: \n
 * Eduardo Bonfandini [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 18/10/2007
 *
 **/

/**
 * **************************************************
 *                   ATENÇÂO
 * *************************************************
 * Os caracteres # e | não podem ser utilizados em dados enviados para a tabela. (via ajax, javascript)
 **/

session_start();

/**
* It is a table raw with Sessesion suport.
*/
class MAjaxTableRaw extends MTableRaw
{
    public $item         = 'item';
    public $tableItem    = '';
    public $actions      = '';
    public $columns;
    public $htmlElement;

    /**
    * Default constructor, need to pass Session Item.
    */
    public function __construct($item, $title, $columns=null, $htmlElement)
    {
        foreach ($columns as $line => $info)
        {
            if ($info->visible == true)
            {
                $titles[] = $info->title;
            }
        }
        parent::__construct($title, array() , $titles);
        $this->columns      = $columns;
        $this->htmlElement  = $htmlElement;
        $this->item         = $item;
        $this->info         = $info;
        $this->page->addScript('MAjaxTableRaw.js', MIOLO::getCurrentModule());
        $this->setAlternate(true);
        $url            = str_replace('&amp;', '&',$this->manager->getCurrentURL());
        $MIOLO          = MIOLO::getInstance();
        $MIOLO->getRequiredJS4Ajax();
        $this->page->addJsCode("
                function addTable$item(phpFunction)
                {
                    MIOLO_ajaxCall('$url', 'POST', phpFunction, getFieldValues(), AddTableResult$item, 'TEXT');
                }

                // the return of ajax
                function AddTableResult$item(result)
                {
                    xGetElementById('$htmlElement').innerHTML = result;
                    MIOLO_parseAjaxJavascript(result);
                }
                                ");
    }

    /**
    * Add an Ajax Action to Table
    */
    public function AddAction($phpFunction, $img, $imgModule)
    {
        $action->event          = "AddTableResult".$this->item;
        $action->jsFunction     = "AddTableResult".$this->item;
        $action->phpFunction    = $phpFunction;
        $action->img            = $img;
        $action->imgModule      = $imgModule;
        $this->actions[]        = $action;
    }

    /**
    * generate 1 action link
    */
    public function generateActionString($i)
    {
        $MIOLO = MIOLO::getInstance();
        $url   = str_replace('&amp;', '&',$this->manager->getCurrentURL() );
        if ($this->actions)
        {
            foreach ($this->actions as $line => $info)
            {
                unset($link);
                unset($linkImg);
                $link       = ("javascript:cpaint_call('".$url."&event=$info->event', 'POST', '$info->phpFunction', '" . $i . "', $info->jsFunction, 'TEXT');");
                $linkImg    = new MImageLink("link$i", null, $link,    $MIOLO->getUI()->getImage($info->imgModule,$info->img) );
                $result .= $linkImg->generate();
            }
        }
        return $result;
    }


    /**
    * Return a new MTable, in the way you need
    */
    public function getTable()
    {
        $this->array = $this->tableItem;
        return $this;
    }


    /**
    * Return the current used Session Item
    */
    public function getSessionItem()
    {
        return $this->item;
    }


    /**
    *   Set the item where the table will be stored.
    *   Note: If you change this value in the middle of usage you can have bad dreams.
    *   Only Recommend to change in initial state
    */
    public function setSessionItem($item)
    {
        $this->item = $item;
    }


    /**
    * Get all itens of table/session, organized with arrayItem
    * Each time u call this function the session is cleanned and rewrited
    */
    public function getItens()
    {
        $itens = $_SESSION['MSessionTableRaw'][$this->item];
        $this->clear();
        //rewrite the session with correct arrayItem values
        if ($itens)
        {
            $x = 0;
            foreach ($itens as $line)
            {
                $line->arrayItem = $x;
                $x ++;
                $this->add($line);
            }
        }
        return $itens;
    }


    /**
    * Get one item from table
    */
    public function get($arrayItem)
    {
        if ( $itens = $_SESSION['MSessionTableRaw'][$this->item])
        {
            foreach ($itens as $line => $info)
            {
                    if ($info->arrayItem == $arrayItem)
                    {
                        return $info;
                    }
            }
        }
    }


    /**
    * Get one item to table
    */
    public function set($arrayItem, $obj)
    {
        $_SESSION['MSessionTableRaw'][$this->item][$arrayItem]=$obj;
    }


    /**
    * Add some item to session/Table (You can pass an array or one item)
    * It is a recursive function.
    */
    public function add($item)
    {
        if ($item)
        {
            if ( is_array($item) )
            {
                foreach ($item as $line => $info)
                {
                    $this->add($info);
                }
            }
            else
            {
                $_SESSION['MSessionTableRaw'][$this->item][] = $item;
            }
        }
    }


    /**
    * Clear all itens of the table session
    */
    public function clear()
    {
        unset($_SESSION['MSessionTableRaw'][$this->item]);
    }

    /**
    *  Remove some item from Table, you need an Id.
    *  This id can be found is $item->arrayItem
    */
    public function remove($item)
    {
        unset($_SESSION['MSessionTableRaw'][$this->item][$item]);
    }


    /**
    * Custom generate to this class it implements some MGridColumn function:
    * List:
        $   title   = inplemented
        $   align   = inplemented
        $   nowrap  = no
        $   width   = inplemented
        $   visible = inplemented
        $   options = inplemented
        $   order   = no
        $   filter  = no
    */
    public function generate($echo=false)
    {
        $url = str_replace('&amp;', '&',$this->manager->getCurrentURL());
        $itens=$this->getItens();
        if ($itens)
        {
            foreach ($itens as $i => $info)
            {
                if ( !$info->remove )
                {
                    unset($encodedInfo);
                    foreach ($info as $l => $i)
                    {
                        $encodedInfo->$l = urlencode($i);
                    }
                    $actions[$i]   = $this->generateActionString($i);
                    unset($args);
                    $args[]        = $actions[$info->arrayItem];
                    foreach ($this->columns as $line => $column)
                    {
                        if ($column->visible == true)
                        {
                            if ($column->options)
                            {
                                eval('$args[] = $info->'. $column->options.';');
                                if ($column->align)
                                {
                                    $this->setCellAttribute($i, $line-1, 'align', $column->align);
                                }
                                if ($column->width)
                                {
                                    $this->setCellAttribute($i, $line-1, 'width', $column->width);
                                }
                            }
                        }
                    }
                    $item[]        = $args;
                }
            }
        }
        $this->array = $item;
        if ($echo)
        {
            echo parent::generate();
        }
        else
        {
            return parent::generate();
        }
    }

}


/**
* get fields from javascript function
* You cannot use # ou | in your string
*/
function getAjaxFields($args)
{
    $args = explode('#', urldecode($args[0]) ); //converts from the "escape" javascript function
    foreach ($args as $line => $info)
    {
        $temp = explode('|', $info);
        if ( ($temp[1] && $temp[1] != 'undefined') || $temp[1] === 0)
        {
            $data[$temp[0]] = $temp[1];
        }
    }
    $data = (object) $data;
    return $data;
}

?>
