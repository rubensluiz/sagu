<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'SP001'); 
define('FPDF_FONTPATH', $MIOLO->getAbsolutePath() . '/modules/basic/classes/fpdf/font/');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    /**
     * Defines the footer for this report
     */
    public function Footer()
    {
        $module = MIOLO::getCurrentModule();
        $this->setY(-15);
        $pn = $this->PageNo().'/{nb}';
        $this->cell(190, 1, '', 'B', 1);
        $this->ln();
        
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'I', 8);
        $this->cell(50, 4, $text, 0, 0);
        $this->cell(140, 4, _M('Página @1', $module, $pn), 0, 0, 'R');
        $this->ln();
    }

    /**
     * Defines the header for this report
     */
    public function Header()
    {
        $module = MIOLO::getCurrentModule();
        if ($this->type == 1)
        {
            $this->ln();
            $this->ln();
            $this->ln();
            $this->ln();
        }
    }
}


/**
 * PDF extension to generate report
 */
class RptAnalyticalForPeriod 
{
    /**
     * Method to generate the report
     */
    public function RptAnalyticalForPeriod($data = null, $filters = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // Generating PDF file
        $this->pdf = new PDF();
        $this->pdf->aliasNbPages();
        // First page
        $this->pdf->addPage('P', 'mm', 'A4');
        $this->pdf->ln();


        $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 26);
        $this->pdf->cell(190, 8, _M('Relatório analítico', $module), 8, '','C');
        $this->pdf->ln();
        $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);
        $this->pdf->cell(190, 6, '( ' . $filters->beginDate . ' - ' . $filters->endDate . ' )', 8, '','C');
        if ( $filters->personId )
        {
            $this->pdf->ln();
            $this->pdf->cell(190, 6, $filters->personId, 8, '','C');
        }

        $this->pdf->ln();
        $this->pdf->ln();
        $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
        $this->pdf->setX(20);
        $this->pdf->cell(25, 6, _M('Data', $module), 0, 0, 'L');
        $this->pdf->cell(45, 6, _M('Código da pessoa', $module), 0, 0, 'L');
        $this->pdf->cell(70, 6, _M('Nome da pessoa', $module), 0, 0, 'L');
        $this->pdf->cell(25, 6, _M('Número de cópias', $module), 0, 0, 'R');
        $this->pdf->ln();


        $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);
        $this->pdf->setFillColor(242);

        if ( is_array($data) )
        {
            $x = 0;
            foreach ( $data as $key=>$d )
            {
                if ( $data[$key-1][0] != $d[0] )
                {
                    $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
                    $this->pdf->cell(170, 6, $d[0], 0, 0, 'L', 0);
                    $this->pdf->ln();
                    $total = 0;
                    $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);
                }

                if ($x == 1)
                {
                    $x = 0;
                }
                else
                {
                    $x = 1;
                }
                $this->pdf->setX(20);
                $this->pdf->cell(25, 6, $d[2], 0, 0, 'L', $x);
                $this->pdf->cell(45, 6, $d[4], 0, 0, 'R', $x);
                $this->pdf->cell(70, 6, $d[5], 0, 0, 'L', $x);
                $this->pdf->cell(25, 6, $d[6], 0, 0, 'R', $x);
                $this->pdf->ln();
                $total += $d[6];

                if ( $data[$key+1][0] != $d[0] )
                {
                    $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
                    $this->pdf->setX(90);
                    $this->pdf->cell(70, 6, _M('Total', $module), 0, 0, 'L', 0);
                    $this->pdf->cell(25, 6, $total, 0, 0, 'R', 0);
                    $this->pdf->ln();
                    $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);
                }
            }
        }

        $this->pdf->close();
        $this->pdf->output();
    }
}

?>
