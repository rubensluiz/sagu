<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for ccpPayrollDiscount table
 *
 * @author Eduardo Bonfandini [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/05/2008
 *
 **/

/**
 * Class to manipulate the ccpPayrollDiscount table
 **/
class BusinessControlCopiesBusPayrollDiscountPtc extends sBusiness
{
    public $MSQL, $MIOLO, $tables, $columns, $columnsId, $id;

    /**
    * construct
    */
    public function __construct()
    {
        $this->MIOLO        = MIOLO::getInstance();
        $this->MIOLO        ->getClass('basic','sagu');
        $module             = is_null($module) ? 'controlCopies' : $module;
        $this->MSQL         = new MSQL();
        $this->MSQL         ->setDb($this->getDatabase());
        $this->tables       = 'ccpPayrollDiscount';
        $this->id           = 'payrollDiscountId';
        $this->columns      = 'date, branch, sectorId, serviceId, amount, unitaryValue, personId, operator, operatorSectorId';
        $this->fields       = explode(',',$this->columns);
        $this->columnsId    = $this->id.','.$this->columns;
        $this->fieldsId     = explode(',',$this->columnsId);
        
        parent::__construct();
    }


    /**
     * Return a specific record from the database
     *
     * @param $id (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPayrollDiscount($id)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables($this->tables);
        $this->MSQL->setColumns($this->columnsId);
        $this->MSQL->setWhere($this->id.' = ?');
        $sql                = $this->MSQL->select($id);
        $query              = $this->getDatabase()->query($sql);
        foreach ($this->fieldsId as $line => $info)
        {
            eval('$data->'.trim($info).'= $query[0]['.$line.'];');
        }
        return $data;
    }


    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPayrollDiscount($data)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables('ccpPayrollDiscount PRD
                                LEFT JOIN ccpService S ON PRD.serviceId = S.serviceId
                                LEFT JOIN basPhysicalPersonEmployee B on B.personId = PRD.personId
                                LEFT JOIN ccpSector SEC ON SEC.sectorId = PRD.sectorId
                                LEFT JOIN ccpSector SOP ON SOP.sectorId = PRD.operatorSectorId
                                ');
        $this->MSQL->setColumns('PRD.payrollDiscountId,to_char(PRD.date, \'dd/mm/yyyy\'), PRD.branch, PRD.sectorId, SEC.description,  PRD.serviceId, S.description, PRD.amount, PRD.unitaryValue, PRD.personId, B.name, PRD.operator, PRD.operatorSectorId, SOP.description');
        if ($data->payrollDiscountId)
        {
            $this->MSQL->setWhere('PRD.payrollDiscountId = ?');
            $args[] = $data->payrollDiscountId;
        }
        if ($data->serviceId)
        {
            $this->MSQL->setWhere('PRD.serviceId = ?');
            $args[] = $data->serviceId;
        }
        if ($data->serviceDescription)
        {
            $this->MSQL->setWhere('S.description ilike ?');
            $args[] = '%'.$data->serviceDescription.'%';
        }
        if ($data->branch)
        {
            $this->MSQL->setWhere('PRD.branch = ?');
            $args[] = $data->branch;
        }
        if ($data->sectorId)
        {
            $this->MSQL->setWhere('PRD.sectorId = ?');
            $args[] = $data->sectorId;
        }
        if ($data->sectorDescription)
        {
            $this->MSQL->setWhere('SEC.description ilike ?');
            $args[] = '%'.$data->sectorDescription.'%';
        }
        if ($data->amount)
        {
            $this->MSQL->setWhere('PRD.amount = ?');
            $args[] = $data->amount;
        }
        if ($data->unitaryValue)
        {
            $this->MSQL->setWhere('PRD.unitaryValue = ?');
            $args[] = $data->unitaryValue;
        }
        if ($data->personId)
        {
            $this->MSQL->setWhere('PRD.personId = ?');
            $args[] = $data->personId;
        }
        if ($data->personName)
        {
            $this->MSQL->setWhere('B.name ilike ?');
            $args[] = '%'.$data->personName.'%';
        }
        if ($data->operator)
        {
            $this->MSQL->setWhere('PRD.operator ilike ?');
            $args[] = '%'.$data->operator.'%';
        }
        if ($data->operatorSectorId)
        {
            $this->MSQL->setWhere('PRD.operatorSectorId = ?');
            $args[] = $data->operatorSectorId;
        }
        if ($data->beginDate && $data->endDate)
        {
            $this->MSQL->setWhere("PRD.date between to_timestamp(?, 'dd/mm/yyyy') and to_timestamp(?, 'dd/mm/yyyy') ");
            $args[] = $data->beginDate;
            $args[] = $data->endDate;
        }
        $sql    = $this->MSQL->select($args);
        $query  = $this->getDatabase()->query($sql);
        return $query;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPayrollDiscount($data)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables($this->tables);
        $this->MSQL->setColumns($this->columns);
        foreach ($this->fields as $line => $info)
        {
            eval('$args[] = $data->'.trim($info).';');
        }
        $sql  = $this->MSQL->insert($args);
        return $this->getDatabase()->execute($sql);
    }


    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePayrollDiscount($data)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables($this->tables);
        $this->MSQL->setColumns($this->columns);
        foreach ($this->fields as $line => $info)
        {
            eval('$args[] = $data->'.trim($info).';');
        }
        eval('$args[] = $data->'.trim($this->id).';');
        $this->MSQL->setWhere("$this->id = ?");
        $sql  = $this->MSQL->update($args);
        return $this->getDatabase()->execute($sql);
    }


    /**
     * Delete a record
     *
     * @param $id (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePayrollDiscount($id)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables($this->tables);
        $this->MSQL->setWhere($this->id. ' = ? ');
        $sql    = $this->MSQL->delete($id);
        $result = $this->getDatabase()->execute($sql);
        return $result;
    }
    
    public function rptPayRollDiscountForPeriod($data)
    {
        $sql = ' SELECT C.personId              ,
                        A.branch                ,
                        C.name                  ,     
                        D.description           , 
                        B.description           , 
                        A.amount                ,
                        A.unitaryValue                   
                   FROM ccpPayRollDiscount A
             LEFT JOIN basPhysicalPersonEmployee C
                     ON (A.personId  = C.personId)
             LEFT JOIN ccpService D
                     ON (A.serviceId = D.serviceId)
             LEFT JOIN ccpSector B
                    ON (A.sectorId = B.sectorId)';

        if ( count($data->beginDate) > 0 )
        {
            $where .= ' AND DATE(A.datetime) >= TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->beginDate;
        }

        if ( count($data->endDate) > 0 )
        {
            $where .= ' AND DATE(A.datetime) <= TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->endDate;
        }

        if ( strlen($data->personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $data->personId;
        }

        if ( $where )
        {

            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY 2, C.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::Prepare($sql, $args));
        }

        return $result;
    }
}
?>
