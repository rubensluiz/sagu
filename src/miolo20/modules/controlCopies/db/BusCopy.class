<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for ccpCopy table
 *
 * @author Eduardo Bonfandini [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 23/05/2008
 *
 **/

/**
 * Class to manipulate the ccpCopy table
 **/
class BusinessControlCopiesBusCopy extends sBusiness
{
    public $MSQL, $MIOLO, $tables, $columns, $columnsId, $id;

    /**
    * construct
    */
    public function __construct()
    {
        $this->MIOLO        = MIOLO::getInstance();
        $this->MIOLO        ->getClass('basic','sagu');
        $module             = is_null($module) ? 'controlCopies' : $module;
        $this->MSQL         = new MSQL();
        $this->MSQL         ->setDb($this->getDatabase());
        $this->tables       = 'ccpCopy';
        $this->id           = 'copyId';
        $this->columns      = 'periodId, time, copiesNumber, printerId';
        $this->fields       = explode(',',$this->columns);
        $this->columnsId    = $this->id.','.$this->columns;
        $this->fieldsId     = explode(',',$this->columnsId);

        parent::__construct();
    }


    /**
     * Return a specific record from the database
     *
     * @param $id (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCopy($id, $type='person')
    {
        $this               ->MSQL->clear();
        $this               ->MSQL->setTables($type=='person' ? 'ccpPersonCopy' : 'ccpSectorCopy' );
        $fields             = $this->columnsId ;
        $fields            .= $type=='person' ? ', personId' : ', sectorId';
        $fieldsId           = explode(',', $fields);
        $this->MSQL         ->setColumns($fields);
        $this->MSQL         ->setWhere($this->id.' = ?');
        $sql                = $this->MSQL->select($id);
        $query              = $this->getDatabase()->query($sql);
        foreach ($fieldsId as $line => $info)
        {
            eval('$data->'.trim($info).'= $query[0]['.$line.'];');
        }
        return $data;
    }


    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCopy($data)
    {
        $type = $data->type;
        $this->MSQL->clear();
        $tables = $type=='person' ? 'ccpPersonCopy' : 'ccpSectorCopy';
        $tables .= ' C
        LEFT JOIN ccpPeriod  P on C.periodId = P.periodId
        LEFT JOIN ccpPrinter  PT on C.printerId= PT.printerId';
        $tables  .= $type=='person' ? ' LEFT JOIN ccpPerson E on C.personId = E.personId' : ' LEFT JOIN ccpSector E on C.sectorId = E.sectorId';
        $this->MSQL->setTables($tables);
        $fields     = 'C.copyId, C.periodId, P.description, C.time, C.copiesNumber, C.printerId, PT.name';
        $fields    .= $type=='person' ? ', E.personId' : ', E.sectorId';
        $fields    .= $type=='person' ? ', E.name' : ', E.description';
        $this->MSQL->setColumns($fields);
        if ($data->copyId)
        {
            $this->MSQL->setWhere('C.copyId = ?');
            $args[] = $data->copyId;
        }
        if ($data->periodId)
        {
            $this->MSQL->setWhere('C.periodId = ?');
            $args[] = $data->periodId;
        }
        if ($data->time)
        {
            $this->MSQL->setWhere('C.time = ?');
            $args[] = $data->time;
        }
        if ($data->copiesNumber)
        {
            $this->MSQL->setWhere('C.printerId = ?');
            $args[] = $data->printerId;
        }
        if ($type == 'person')
        {
            if ($data->personId)
            {
                $this->MSQL->setWhere('C.personId = ?');
                $args[] = $data->personId;
            }
            if ($data->personName)
            {
                $this->MSQL->setWhere('E.name = ?');
                $args[] = '%'.$data->personName.'%';
            }
        }
        else
        {
            if ($data->sectorId)
            {
                $this->MSQL->setWhere('C.sectorId = ?');
                $args[] = $data->sectorId;
            }
            if ($data->sDescription)
            {
                $this->MSQL->setWhere('E.description = ?');
                $args[] = '%'.$data->sDescription.'%';
            }
        }
        $sql    = $this->MSQL->select($args);
        $query  = $this->getDatabase()->query($sql);
        return $query;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCopy($data)
    {
        $type = $data->type;
        $data->time = date('Y-m-d');
        $this->MSQL->clear();
        $this->MSQL->setTables($type=='person' ? 'ccpPersonCopy' : 'ccpSectorCopy' );
        $fields     = $this->columns;
        $fields    .= $type=='person' ? ', personId' : ', sectorId';
        $this->MSQL->setColumns($fields);
        $fieldsId   = explode(',', $fields);
        foreach ($fieldsId as $line => $info)
        {
            eval('$args[] = $data->'.trim($info).';');
        }
        $sql  = $this->MSQL->insert($args);
        return $this->getDatabase()->execute($sql);
    }


    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCopy($data)
    {
        $type = $data->type;
        $this->MSQL->clear();
        $this->MSQL->setTables($type=='person' ? 'ccpPersonCopy' : 'ccpSectorCopy' );
        $fields     = $this->columns;
        $fields    .= $type=='person' ? ', personId' : ', sectorId';
        $this->MSQL->setColumns($fields);
        $fieldsId   = explode(',', $fields);
        foreach ($fieldsId as $line => $info)
        {
            eval('$args[] = $data->'.trim($info).';');
        }
        $this->MSQL->setWhere("$this->id = $data->copyId");
        $sql  = $this->MSQL->update($args);
        return $this->getDatabase()->execute($sql);
    }


    /**
     * Delete a record
     *
     * @param $id (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCopy($id, $type='person')
    {
        $this->MSQL->clear();
        $this->MSQL->setTables($type=='person' ? 'ccpPersonCopy' : 'ccpSectorCopy' );
        $this->MSQL->setWhere($this->id. ' = ? ');
        $sql    = $this->MSQL->delete($id);
        $result = $this->getDatabase()->execute($sql);
        return $result;
    }
}
?>
