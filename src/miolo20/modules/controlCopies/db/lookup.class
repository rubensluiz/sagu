<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file manipulate the lookups for the control  module of sagu
 *
 * @author Jamiel Spezia [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2005
 *
 **/

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Class to manipulate the Lookups
 **/
class BusinessControlCopiesLookup
{

    /**
     * Auto complete for person
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompletePerson(&$context)
    {
        $sql = 'SELECT A.name AS personName,
                       A.sex,
                       A.email,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
                 WHERE A.personId = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }


    /**
     * Lookup for person
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupPerson(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');
        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);
        $personId       = $lookup->getFilterValue('personId');
        $personName     = $lookup->getFilterValue('personName');
        $personLastName = $lookup->getFilterValue('personLastName');
        $location       = $lookup->getFilterValue('location');
        $complement     = $lookup->getFilterValue('complement');
        $neighborhood   = $lookup->getFilterValue('neighborhood');
        $cityId         = $lookup->getFilterValue('cityId');
        $cityName       = $lookup->getFilterValue('cityName');
        $stateId        = $lookup->getFilterValue('stateId');
        $countryId      = $lookup->getFilterValue('countryId');
        $countryName    = $lookup->getFilterValue('countryName');
        $lookup->addFilterField( new MTextField('personId',       $personId,       _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personName',     $personName,     _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personLastName', $personLastName, _M('Último nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('location',       $location,       _M('Localização', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('cityName',       $cityName,       _M('Cidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( fields::country($countryId) );
        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');
        $columns = array(
           new DataGridColumn('personId',     _M('Código', $module),         'right', true, null, true),
           new DataGridColumn('personName',   _M('Nome', $module),         'left',  true, null, true),
           new DataGridColumn('location',     _M('Localização', $module),     'left',  true, null, true),
           new DataGridColumn('complement',   _M('Complemento', $module),   'left',  true, null, false),
           new DataGridColumn('neighborhood', _M('Vizinhança', $module), 'left',  true, null, false),
           new DataGridColumn('cityId',       _M('Código da cidade', $module),      'left',  true, null, true),
           new DataGridColumn('cityName',     _M('Nome da cidade', $module),    'left',  true, null, true),
           new DataGridColumn('stateId',      _M('Estado', $module),        'left',  true, null, true),
           new DataGridColumn('countryId',    _M('Código do País', $module),   'left',  true, null, false),
           new DataGridColumn('countryName',  _M('País', $module),      'left',  true, null, true)
        );
        $sql = 'SELECT A.personId,
                       A.name AS personName,
                       D.name || \' \' || A.location as location,
                       A.email,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basLocationType D
                    ON ( A.locationTypeId = D.locationTypeId )';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($personLastName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = '%' . $personLastName . '%';
        }

        if ( strlen($location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?)';
            $args[] = $location . '%';
        }

        if ( strlen($complement) > 0 )
        {
            $where .= ' AND A.complement ILIKE ?';
            $args[] = $complement . '%';
        }

        if ( strlen($neighborhood) > 0 )
        {
            $where .= ' AND UNACCENT(A.neighborhood) ILIKE UNACCENT(?)';
            $args[] = $neighborhood . '%';
        }

        if ( strlen($cityId) > 0 )
        {
            $where .= ' AND A.cityId = ?';
            $args[] = $cityId;
        }

        if ( strlen($cityName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $cityName . '%';
        }

        if ( strlen($stateId) > 0 )
        {
            $where .= ' AND B.stateId ILIKE ?';
            $args[] = $stateId;
        }

        if ( strlen($countryId) > 0 )
        {
            $where .= ' AND C.countryId = ?';
            $args[] = $countryId;
        }

        if ( strlen($countryName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $countryName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar pessoa',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }


 /**
     * Auto complete for person
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteccpPerson(&$context)
    {
        $sql = 'SELECT name
                  FROM ccpPerson
                 WHERE personId = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

   /**
     * Lookup for person
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupccpPerson(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');
        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);
        $personId       = $lookup->getFilterValue('personId');
        $personName     = $lookup->getFilterValue('personName');
        $lookup->addFilterField( new MTextField('personId',       $personId,       _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personName',     $personName,     _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');
        $columns = array(
           new DataGridColumn('personId',     _M('Código', $module),         'right', true, null, true),
           new DataGridColumn('personName',   _M('Nome', $module),         'left',  true, null, true),
        );
        $sql = 'SELECT personId,
                       name AS personName
                 FROM  ccpPerson';
        if ( strlen($personId) > 0 )
        {
            $where .= ' AND personId = ?';
            $args[] = $personId;
        }
        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar pessoa',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }


    public function autoCompleteService (&$context)
    {
     $sql = 'SELECT A.description AS serviceName,
                    A.unitaryValue
               FROM ccpService A
              WHERE serviceId = ?';

    $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupService(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);


        $serviceId   = $lookup->getFilterValue('serviceId');
        $serviceName = $lookup->getFilterValue('serviceName');

        $lookup->addFilterField( new MTextField  ('serviceId',   $serviceId,   _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField  ('serviceName', $serviceName, _M('Serviço',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );


    $columns = array(
           new DataGridColumn('serviceId',    _M('Código',   $module),        'left', true, null, true),
           new DataGridColumn('serviceName',  _M('Serviço',  $module),      'left', true, null, true),
           new DataGridColumn('unitaryValue', _M('Valor unitário', $module), 'left', true, null, true),
           new DataGridColumn('unit',         _M('Unidade',         $module),  'left', true, null, true),
                    );

    $sql = 'SELECT serviceId,
                   description AS serviceName,
                   unitaryValue,
                   unit
             FROM ccpservice';

         if (strlen ($serviceId) > 0)
         {
             $where  .= ' AND serviceId ILIKE ?';
             $args[]  = $serviceId;
         }
         if (strlen ($serviceName) > 0)
         {
             $where  .= ' AND description ILIKE ?';
             $args[]  = $serviceName . '%';
         }

         if (strlen ($where) > 0)
         {
             $sql .= ' WHERE ' . substr($where, 5);
         }
         else
         {
             $sql .= ' LIMIT 0';
         }
          $sqlObject = new sql();
          $sqlObject->createFrom(SAGU::prepare($sql,$args));
     $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar serviço',$module), 15, 0);
     $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->grid->setIsScrollable();

    }

    public function autoCompleteccpSector (&$context)
    {
        $sql = 'SELECT description,
                    email,
                    isCoordinatorsSector
               FROM ccpSector
              WHERE sectorId = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupccpSector(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');
        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);
        $sectorId    = $lookup->getFilterValue('sectorId');
        $description = $lookup->getFilterValue('description');
        if (!$description)
        {
            $description = '%';
        }
        $lookup->addFilterField( new MTextField('sectorId',    $sectorId,    _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Setor',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $columns = array(
           new DataGridColumn('sectorId',             _M('Código', $module),                   'left', true, null, true),
           new DataGridColumn('description',          _M('Setor', $module),                 'left', true, null, true),
           new DataGridColumn('email',                _M('E-mail', $module),                 'left', true, null, true),
           new DataGridColumn('isCoordinatorsSector', _M('É setor de coordenação', $module), 'left', true, null, true, array( DB_TRUE => _M('Sim',$module), DB_FALSE => _M('Não',$module) ) ),
        );
        $sql = 'SELECT sectorId,
                       description,
                       email,
                       isCoordinatorsSector
                  FROM ccpSector';
        if ( strlen($sectorId) > 0 )
        {
            $where .= ' AND sectorId = ?';
            $args[] = $sectorId;
        }
        if ( strlen($description) > 0 )
        {
            $where .= ' AND description ILIKE ?';
            $args[] = $description . '%';
        }
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }
        $sql .= ' ORDER BY description';
        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar setor',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }



    public function autoCompleteSector (&$context)
    {
        $sql = 'SELECT description,
                    email,
                    isCoordinatorsSector
               FROM ONLY basSector
              WHERE sectorId = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupSector(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');
        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);
        $sectorId    = $lookup->getFilterValue('sectorId');
        $description = $lookup->getFilterValue('description');
        if (!$description)
        {
            $description = '%';
        }
        $lookup->addFilterField( new MTextField('sectorId',    $sectorId,    _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Setor',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('sectorId',             _M('Código', $module),                   'left', true, null, true),
           new DataGridColumn('description',          _M('Setor', $module),                 'left', true, null, true),
           new DataGridColumn('email',                _M('E-mail', $module),                 'left', true, null, true),
           new DataGridColumn('isCoordinatorsSector', _M('É setor de coordenação', $module), 'left', true, null, true, array( DB_TRUE => _M('Sim',$module), DB_FALSE => _M('Não',$module) ) ),
        );
        $sql = 'SELECT sectorId,
                       description,
                       email,
                       isCoordinatorsSector
                  FROM basSector';
        if ( strlen($sectorId) > 0 )
        {
            $where .= ' AND sectorId = ?';
            $args[] = $sectorId;
        }
        if ( strlen($description) > 0 )
        {
            $where .= ' AND description ILIKE ?';
            $args[] = $description . '%';
        }
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }
        $sql .= ' ORDER BY description';
        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar setor',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteCenter(&$context)
    {
        $sql = 'SELECT name AS centerName
                  FROM acdCenter
                 WHERE centerId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupCenter(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $centerId            = $lookup->getFilterValue('centerId');
        $centerName          = $lookup->getFilterValue('centerName');

        $lookup->addFilterField( new MTextField('centerId',   $centerId,   _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('centerName', $centerName, _M('Centro',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('centerId',   _M('Código', $module),   'right', true, null, true),
           new DataGridColumn('centerName', _M('Centro', $module), 'left',  true, null, true)
        );

        $sql = 'SELECT centerId,
                       name AS centerName
                  FROM acdCenter';

        if ( strlen($centerId) > 0 )
        {
            $where .= ' AND centerId = ?';
            $args[] = $centerId;
        }

        if ( strlen($centerName) > 0 )
        {
            $where .= ' AND name ILIKE ?';
            $args[] = $centerName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY name';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Procurar centro',$module), 15, 0);
        $lookup->grid->setIsScrollable();

    }


    public function autoCompleteProject (&$context)
    {
     $sql = 'SELECT A.description
               FROM acdProject A
              WHERE projectId = ?';

    $context->setContext(SDatabase::getDefaultDb(), $sql);
    }


    public function lookupProject(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');
        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);
        $projectId   = $lookup->getFilterValue('projectId');
        $projectName = $lookup->getFilterValue('projectName');
        $lookup->addFilterField( new MTextField('projectId',   $projectId,   _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('projectName', $projectName, _M('Projeto',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $columns = array(
           new DataGridColumn('projectId',   _M('Código', $module),    'right', true, null, true),
           new DataGridColumn('projectName', _M('Projeto', $module), 'left',  true, null, true)
        );
        $sql = 'SELECT projectId,
                       description AS projectName
                  FROM acdProject';
        if ( strlen($projectId) > 0 )
        {
            $where .= ' AND projectId = ?';
            $args[] = $projectId;
        }
        if ( strlen($projectName) > 0 )
        {
            $where .= ' AND description ILIKE ?';
            $args[] = $projectName . '%';
        }
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }
        $sql .= ' ORDER BY description';
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar projeto',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteCostCenter (&$context)
    {
        $sql = 'SELECT A.description
                  FROM accCostCenter A
                 WHERE costCenterId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupCostCenter(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');
        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);
        $costCenterId = $lookup->getFilterValue('costCenterId');
        $description  = $lookup->getFilterValue('costName');
        $lookup->addFilterField( new MTextField('costCenterId', $costCenterId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MTextField('costName',     $description,  _M('Centro de custo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('costCenterId', _M('Código', $module),        'left', true, null, true),
           new DataGridColumn('costName',     _M('Centro de custo', $module), 'left', true, null, true),
        );
        $sql = 'SELECT A.costCenterId,
                       A.description AS costName
                  FROM accCostCenter A';
        if ( strlen($costCenterId) > 0 )
        {
            $where .= ' AND A.costCenterId ILIKE ?';
            $args[] = $costCenterId;
        }
        if ( strlen($description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description . '%';
        }
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }
        $sql .= ' ORDER BY A.costCenterId';
        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Procurar centro de custo',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompletePhysicalPersonEmployee (&$context)
    {
        $sql = 'SELECT A.name AS personName
                  FROM basPhysicalPersonEmployee A
                 WHERE personId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupPhysicalPersonEmployee(&$lookup)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');
        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $personId   = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $lookup->addFilterField( new MTextField('personId',   $personId,   _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('personName', $personName, _M('Funcionário', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $columns = array(
           new DataGridColumn('personId',   _M('Código', $module),     'right', true, null, true),
           new DataGridColumn('personName', _M('Funcionário', $module), 'left',  true, null, true),
        );
        $sql = 'SELECT A.personId,
                       A.name AS personName
                 FROM basPhysicalPersonEmployee A';
        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen($personName) > 0 )
        {
            $where .= ' AND A.name ILIKE ?';
            $args[] = $personName . '%';
        }
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5) . '
                   ORDER BY A.name';
        }
        else
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar pessoa física',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteOperator (&$context)
    {
        $sql = 'SELECT description
               FROM ccpSector
              WHERE sectorId = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupOperator(&$lookup)
    {

        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $operatorId   = $lookup->getFilterValue('operatorId');
        $operatorName = $lookup->getFilterValue('operatorName');

        $lookup->addFilterField( new MTextField('operatorId',   $operatorId,   _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('operatorName', $operatorName, _M('Operador',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('operatorId',   _M('Código', $module),     'right', true, null, true),
           new DataGridColumn('operatorName', _M('Operador', $module), 'left',  true, null, true),
        );

        $sql = 'SELECT sectorId AS operatorId,
                       description AS operatorName
                  FROM ccpsector ';

        if ( strlen($operatorId) > 0 )
        {
            $where .= ' AND sectorId = ?';
            $args[] = $operatorId;
        }

        if ( strlen($operatorName) > 0 )
        {
            $where .= ' AND description ILIKE ?';
            $args[] = $operatorName . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Procurar operador',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

 /**
     * Auto complete for physical resource
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompletePhysicalResource(&$context)
    {
        $sql = 'SELECT A.physicalResourceVersion,
                       A.description,
                       A.physicalResourceId,
                       A.room,
                       A.building,
                       TO_CHAR(A.dateVersion,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as dateVersion,
                       A.coord,
                       B.name AS coordName,
                       A.areaM2,
                       A.areaTypeId,
                       A.costCenter,
                       A.groupTypeId,
                       C.description AS groupTypeDescription
                  FROM insPhysicalResource A
        LEFT JOIN ONLY basPerson B
                    ON ( B.personId = A.coord )
             LEFT JOIN insGroupType C
                    ON ( C.groupTypeId = A.groupTypeId ),
                       (  SELECT physicalResourceId,
                                 MAX(physicalResourceVersion) AS physicalResourceVersion
                            FROM insPhysicalResource
                           WHERE physicalResourceId = ?
                        GROUP BY physicalResourceId ) D
                 WHERE A.physicalResourceId = D.physicalResourceId
                   AND A.physicalResourceVersion = D.physicalResourceVersion';
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for physical resource
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupPhysicalResource(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $physicalResourceId      = $lookup->getFilterValue('physicalResourceId');
        $physicalResourceVersion = $lookup->getFilterValue('physicalResourceVersion');
        $dateVersion             = $lookup->getFilterValue('dateVersion');
        $description             = $lookup->getFilterValue('description');
        $room                    = $lookup->getFilterValue('room');
        $building                = $lookup->getFilterValue('building');
        $groupTypeId             = $lookup->getFilterValue('groupTypeId');

        $lookup->addFilterField( new MTextField('physicalResourceId',  $physicalResourceId, _M('Código do recurso físico', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('physicalResourceVersion', $physicalResourceVersion, _M('Versão do recurso físico', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('dateVersion', $dateVersion, _M('Data da versao', $module),  SAGU::getParameter('BASIC', 'FIELD_DATE_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('room', $room, _M('Sala', $module),          SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('building', $building, _M('Prédio', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')) );

        $business = new BusinessInstitutionalBusGroupType();
        $lookup->addFilterField( new MComboBox('groupTypeId', $groupTypeId, _M('Tipo do grupo', $module), $business->listGroupType() ) );

        /*
         * Note: the name of the grid columns must match the SQL columns names below
         */
        $columns = array(
           new DataGridColumn('physicalResourceId',      _M('Código do recurso físico', $module),      'right', true, null, true),
           new DataGridColumn('physicalResourceVersion', _M('Versão do recurso físico', $module), 'right', true, null, true),
           new DataGridColumn('description', _M('Descrição', $module),   'left',  true, null, true),
           new DataGridColumn('room',        _M('Sala', $module),          'left',  true, null, true),
           new DataGridColumn('building',    _M('Prédio', $module),      'left',  true, null, true),
           new DataGridColumn('dateVersion', _M('Data da versao', $module),  'left',  true, null, true),
           new DataGridColumn('coord',       _M('Coord', $module),         'right', true, null, false),
           new DataGridColumn('coordName',   _M('Coord', $module),         'left',  true, null, true),
           new DataGridColumn('areaM2',      _M('Área', $module),          'right', true, null, true),
           new DataGridColumn('areaTypeId',  _M('Código tipo área', $module),     'left',  true, null, true),
           new DataGridColumn('costCenter',  _M('Centro de custo', $module),   'right', true, null, true),
           new DataGridColumn('groupTypeId', _M('código do tipo de grupo', $module), 'right', true, null, false),
           new DataGridColumn('groupTypeDescription', _M('Tipo do grupo', $module), 'left', true, null, true)
        );

        $sql = 'SELECT A.physicalResourceId,
                       A.physicalResourceVersion,
                       A.description,
                       A.room,
                       A.building,
                       TO_CHAR(A.dateVersion,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as dateVersion,
                       A.coord,
                       B.name AS coordName,
                       A.areaM2,
                       A.areaTypeId,
                       A.costCenter,
                       A.groupTypeId,
                       C.description AS groupTypeDescription
                  FROM insPhysicalResource A
        LEFT JOIN ONLY basPerson B
                    ON ( B.personId = A.coord )
             LEFT JOIN insGroupType C
                    ON ( C.groupTypeId = A.groupTypeId )';

        if ( strlen($physicalResourceId) > 0 )
        {
            $where .= ' AND A.physicalResourceId = ?';
            $args[] = $physicalResourceId;
        }

        if ( strlen($physicalResourceVersion) > 0 )
        {
            $where .= ' AND A.physicalResourceVersion = ?';
            $args[] = $physicalResourceVersion;
        }

        if ( strlen($dateVersion) > 0 )
        {
            $where .= ' AND A.dateVersion = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $dateVersion;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen($room) > 0 )
        {
            $where .= ' AND A.room ILIKE ?';
            $args[] = $room . '%';
        }

        if ( strlen($building) > 0 )
        {
            $where .= ' AND A.building ILIKE ?';
            $args[] = $building . '%';
        }

        if ( strlen($coord) > 0 )
        {
            $where .= ' AND A.coord = ?';
            $args[] = $coord;
        }

        if ( strlen($coordName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $coordName . '%';
        }

        if ( strlen($areaM2) > 0 )
        {
            $where .= ' AND A.areaM2 = ?';
            $args[] = $areaM2;
        }

        if ( strlen($areaTypeId) > 0 )
        {
            $where .= ' AND A.areaTypeId = ?';
            $args[] = $areaTypeId;
        }

        if ( strlen($costCenter) > 0 )
        {
            $where .= ' AND A.costCenter = ?';
            $args[] = $costCenter;
        }

        if ( strlen($groupTypeId) > 0 )
        {
            $where .= ' AND A.groupTypeId = ?';
            $args[] = $groupTypeId;
        }

        if ( strlen($groupTypeDescription) > 0 )
        {
            $where .= ' AND UNACCENT(C.description) ILIKE UNACCENT(?)';
            $args[] = $groupTypeDescription . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Buscar recurso físico',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
}
?>
