<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for ccpPrinter table
 *
 * @author Eduardo Bonfandini [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/05/2008
 *
 **/

/**
 * Class to manipulate the ccpPrinter table
 **/
class BusinessControlCopiesBusPersonPrinter extends sBusiness
{
    public $MSQL, $MIOLO, $tables, $columns, $columnsId, $id;


    /**
    * construct
    */
    public function __construct()
    {
        $this->MIOLO        = MIOLO::getInstance();
        $this->MIOLO        ->getClass('basic','sagu');
        $module             = is_null($module) ? 'controlCopies' : $module;
        $this->MSQL         = new MSQL();
        $this->MSQL         ->setDb($this->getDatabase());
        $this->tables       = 'ccpPersonPrinter';
        $this->id           = 'personPrinterId';
        $this->columns      = 'printerId, personId';
        $this->columnsId    = $this->id.','.$this->columns;
        
        parent::__construct();
    }


    /**
     * Return a specific record from the database
     *
     * @param $id (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getPersonPrinter($id)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables($this->tables);
        $this->MSQL->setColumns($this->columnsId);
        $this->MSQL->setWhere("$this->id = ?");
        $sql                            = $this->MSQL->select($id);
        $query                          = $this->getDatabase()->query($sql);
        $data->personPrinterId          = $query[0][0];
        $data->printerId                = $query[0][1];
        $data->personId                 = $query[0][2];
        return $data;
    }


    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPersonPrinter($data, $object = false)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables(
                                "ccpPersonPrinter SP
                       LEFT JOIN ccpPerson P
                              ON SP.personId = P.personId
                       LEFT JOIN ccpPrinter PP
                              ON SP.printerId = PP.printerId
                              ");
        $this->MSQL->setColumns("SP.personPrinterId, SP.printerId, SP.personId, P.name, PP.name");
        if ($data->personPrinterId)
        {
            $this->MSQL->setWhere('SP.personPrinterId = ?');
            $args[] = $data->personPrinterId;
        }
        if ($data->printerId)
        {
            $this->MSQL->setWhere('SP.printerId = ?');
            $args[] = $data->printerId;
        }
        if ($data->personId)
        {
            $this->MSQL->setWhere('SP.personId = ?');
            $args[] = $data->personId;
        }
        $sql    = $this->MSQL->select($args);
        $query  = $this->getDatabase()->query($sql);
        if (!$object)
        {
            return $query;
        }
        else
        {
            if ($query)
            {
                foreach ($query as $line => $info)
                {
                    $result[$line]->personPrinterId  = $info[0];
                    $result[$line]->printerId        = $info[1];
                    $result[$line]->printerName      = $info[4];
                    $result[$line]->personId         = $info[2];
                    $result[$line]->personName       = $info[3];
                }
                return $result;
            }
        }
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertPersonPrinter($data, $printerId=null, $personId=NULL )
    {
        if (is_array($data))
        {
            foreach ($data as $line => $info)
            {
                $ok = $this->insertPersonPrinter($info, $printerId);
            }
            return $ok;
        }
        else
        {
            //put printerId if dont has it
            if ($printerId)
            {
                $data->printerId = $printerId;
            }
            if ($personId)
            {
                $data->personId= $personId;
            }
            $this->MSQL->clear();
            $this->MSQL->setTables($this->tables);
            $this->MSQL->setColumns($this->columns);
            $args = array(
                            $data->printerId,
                            $data->personId
                         );
            $sql  = $this->MSQL->insert($args);
            return $this->getDatabase()->execute($sql);
        }
    }


    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updatePersonPrinter($data)
    {
        if (is_array($data) )
        {
            foreach ($data as $line => $info)
            {
                $ok = $this->updatePersonPrinter($info);
            }
            return $ok;
        }
        else
        {
            if ($data->remove)
            {
                return $this->deletePersonPrinter($data->personPrinterId);
            }
            else if (!$data->personPrinterId)
            {
                return $this->insertPersonPrinter($data);
            }
            else
            {
                $this->MSQL->clear();
                $this->MSQL->setTables($this->tables);
                $this->MSQL->setColumns($this->columns);
                $args = array(
                                $data->printerId,
                                $data->personId,
                                $data->personPrinterId
                             );
                $this->MSQL->setWhere("$this->id = ?");
                $sql  = $this->MSQL->update($args);
                return $this->getDatabase()->execute($sql);
            }
        }
    }


    /**
     * Delete a record
     *
     * @param $id (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deletePersonPrinter($id)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables($this->tables);
        $this->MSQL->setWhere( $this->id. ' = ? ');
        return $this->getDatabase()->execute( $this->MSQL->delete($id) );
    }
}
?>
