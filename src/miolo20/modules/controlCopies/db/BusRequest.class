<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for ccpRequest table
 *
 * @author Eduardo Bonfandini [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/05/2008
 *
 **/

/**
 * Class to manipulate the ccpRequest table
 **/
class BusinessControlCopiesBusRequest extends sBusiness
{
    public $MSQL, $MIOLO, $tables, $columns, $columnsId, $id, $busRequesFax;

    /**
    * construct
    */
    public function __construct()
    {
        $this->MIOLO        = MIOLO::getInstance();
        $this->MIOLO        ->getClass('basic','sagu');
        $module             = is_null($module) ? 'controlCopies' : $module;
        $this->MSQL         = new MSQL();
        $this->MSQL         ->setDb($this->getDatabase());
        $this->tables       = 'ccpRequest';
        $this->id           = 'requestId';
        $this->columns      = 'date, serviceId, amount, sectorId, centerId, projectId, costCenterId, referring, personId, operator, operatorSectorId, unitaryValue';
        $this->fields       = explode(',',$this->columns);
        $this->columnsId    = $this->id.','.$this->columns;
        $this->fieldsId     = explode(',',$this->columnsId);
        $this->busRequesFax = new BusinessControlCopiesBusRequestFax();
        
        parent::__construct();
    }


    /**
     * Return a specific record from the database
     *
     * @param $id (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getRequest($id)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables($this->tables);
        $this->MSQL->setColumns($this->columnsId);
        $this->MSQL->setWhere($this->id.' = ?');
        $sql                = $this->MSQL->select($id);
        $query              = $this->getDatabase()->query($sql);
        foreach ($this->fieldsId as $line => $info)
        {
            eval('$data->'.trim($info).'= $query[0]['.$line.'];');
        }
        $faxQuery = $this->busRequesFax->getRequestFax($data->requestId);
        $data->telephone    = $faxQuery->telephone;
        $data->sended       = $faxQuery->sended;
        $data->tariff       = $faxQuery->tariff;
        return $data;
    }


    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchRequest($data)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables("
                                ccpRequest R
                      LEFT JOIN ccpService S
                             ON R.serviceId = S.serviceId
                      LEFT JOIN only basSector  SEC
                             ON R.sectorId = SEC.sectorId
                      LEFT JOIN basPhysicalPersonEmployee BPP
                             ON BPP.personId = R.personId
                      LEFT JOIN only basSector  OP
                             ON R.operatorSectorId = OP.sectorId
                                ");
        $this->MSQL->setColumns("R.requestId , R.date, R.serviceId, S.description, R.amount, R.sectorId, SEC.description, R.centerId, R.projectId, R.costCenterId, R.referring, R.personId, BPP.name, R.operator, R.operatorSectorId, OP.description, R.unitaryValue");
        if ($data->requestId)
        {
            $this->MSQL->setWhere('R.requestId= ?');
            $args[] = $data->requestId;
        }
        if ($data->serviceId)
        {
            $this->MSQL->setWhere('R.serviceId = ?');
            $args[] = $data->serviceId;
        }
        if ($data->amount)
        {
            $this->MSQL->setWhere('R.amount= ?');
            $args[] = $data->amount;
        }
        if ($data->sectorId)
        {
            $this->MSQL->setWhere('R.sectorId= ?');
            $args[] = $data->sectorId;
        }
        if ($data->centerId)
        {
            $this->MSQL->setWhere('R.centerId= ?');
            $args[] = $data->centerId;
        }
        if ( $data->projectId)
        {
            $this->MSQL->setWhere('R.projectId= ?');
            $args[] = $data->projectId;
        }
        if ($data->costCenterId)
        {
            $this->MSQL->setWhere('R.costCenterId= ?');
            $args[] = $data->costCenterId;
        }
        if ($data->referring)
        {
            $this->MSQL->setWhere('R.referring= ?');
            $args[] = $data->referring;
        }
        if ($data->personId)
        {
            $this->MSQL->setWhere('R.personId= ?');
            $args[] = $data->personId;
        }
        if ($data->operator)
        {
            $this->MSQL->setWhere('R.operator= ?');
            $args[] = $data->operator;
        }
        if ($data->operatorSectorId)
        {
            $this->MSQL->setWhere('R.operatorSectorId= ?');
            $args[] = $data->operatorSectorId;
        }
        if ($data->unitaryValue)
        {
            $this->MSQL->setWhere('R.unitaryValue= ?');
            $args[] = $data->unitaryValue;
        }
        $this->MSQL->setOrderBy('R.requestId desc');
        $sql    = $this->MSQL->select($args);
        $query  = $this->getDatabase()->query($sql);
        return $query;
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertRequest($data)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables($this->tables);
        $this->MSQL->setColumns($this->columns);
        foreach ($this->fields as $line => $info)
        {
            eval('$args[] = $data->'.trim($info).';');
        }
        $sql            = $this->MSQL->insert($args);
        $result         = $this->getDatabase()->execute($sql);
        $temp           = $this->searchRequest($data);
        $requestId      = $temp[0][0];
        $data->requestId= $requestId;
        $this->busRequesFax->insertRequestFax($data);
        return  $result;
    }


    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateRequest($data)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables($this->tables);
        $this->MSQL->setColumns($this->columns);
        foreach ($this->fields as $line => $info)
        {
            eval('$args[] = $data->'.trim($info).';');
        }
        eval('$args[] = $data->'.trim($this->id).';');
        $this->MSQL->setWhere("$this->id = ?");
        $sql  = $this->MSQL->update($args);
        $this->busRequesFax->updateRequestFax($data);
        return $this->getDatabase()->execute($sql);
    }


    /**
     * Delete a record
     *
     * @param $id (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteRequest($id)
    {
        $this->MSQL->clear();
        $this->MSQL->setTables($this->tables);
        $this->MSQL->setWhere($this->id. ' = ? ');
        $sql    = $this->MSQL->delete($id);
        $result = $this->getDatabase()->execute($sql);
        if ($result)
        {
            $ok = $this->busRequesFax->deleteRequestFax($id);
        }
        return $result;
    }
}
?>
