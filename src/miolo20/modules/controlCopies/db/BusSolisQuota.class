<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file bus solis quota
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/*
Niumar André Klein escreveu:
> Opa!
> Seguem algumas funções que já estão implantadas no SolisQuota e que
> precisam dos comandos sql para retornar as infos adequadas.
> Todas as funções encontram-se no arquivo dbquota.c.
>
> - int dbCheckUser(char *username)
>     Dever retornar 1 se o usuário existe e 0 se não.
>
> - void dbGetUserFlags(char *username, int *user_flags)
>     Deve colocar em user_flags um vetor das características do usuário,
> sendo:
>     1a posição: 1 se for membro de grupo.
>     2a posição: 1 se for para debitar primeiro do grupo.
>     3a posição: 1 se for admin.
>
> - void dbGetGroupFlags(char *group, int *group_flags)
>     Deve colocar em group_flags um vetor das características do grupo,
> sendo:
>     1a posição: 1 se puder exceder a quota.
>
> - void dbGetGroup(char *username, char *group)
>     Deve colocar em group o grupo ao qual o usuário pertence.
>
> - void dbGetQuota(char *who, int *quota)
>     Deve colocar em quota um vetor com as informações de quota dod grupo ou
> usuário, sendo:
>     1a posição: número de cópias atual.
>     2a posição: quota de impressão.
>
> - int dbCheckPrinter(char *who, char *printeruri)
>     Deve retornar 1 se a impressora está registrada para o usuário ou grupo
> passado.
>
> - void dbGetPrinter(char *who, *char *printeruri, char *db_printer)
>     Deve colocar em db_printer a impressora associada ao usuário/grupo de
> acordo à qual ele mandou imprimir.
>
> - void dbRegisterQuota(char *who, int new_quota)
>     Deve registrar o valor new_quota como sendo o valor atual de cópias já
> efetuadas.
>
> - void dbGetEmail(char *who, char *mail_end)
>     Deve colocar em mail_end o endereço de email do usuário.
>
> - void dbGetLogfilePath(char *path)
>     Deve colocar em path o caminha do arquivo de log do SolisQuota.
>
> - void dbGetSpoolPath(char *path)
>     Deve colocar em path o caminha do arquivo de spool do Cups.
>
>
> Teria mais a função de checagem de hora, mas essa ainda não montei
> direito.
> Por enquanto é isso.
>
> Abraços,
> Niumar.
>
>  */

class BusinessControlCopiesBusSolisQuota extends sBusiness
{
    public $MIOLO;
    public $MSQL;

    public function __construct()
    {
        $this->MIOLO        = MIOLO::getInstance();
        $this->MIOLO        ->getClass('basic','sagu');
        $module             = is_null($module) ? 'controlCopies' : $module;

        parent::__construct();
    }


    /**
    * Dever retornar 1 se o usuário existe e 0 se não.
    */
    public function dbCheckUser($username)
    {
        $username   = strtoupper($username);
        $sql        = "select name from ccpPerson where upper(name) = upper('$username')";
        $query      = $this->getDatabase()->query($sql);
        if ($query)
        {
            return 1;
        }

        /*
        int dbCheckUser(char *username)

        CREATE or REPLACE FUNCTION checkUser(varchar) RETURNS  boolean AS
        'SELECT (SELECT name FROM ccpPerson WHERE UPPER(name) = UPPER($1) ) IS NOT NULL'
        LANGUAGE SQL;

        select checkuser('eduardo bonfandini');
        */

    }


    /**
    * Deve colocar em user_flags um vetor das características do usuário,
    * sendo:
    * 1a posição: 1 se for membro de grupo.
    * 2a posição: 1 se for para debitar primeiro do grupo.
    * 3a posição: 1 se for admin.pode exceder??
    */
    public function dbGetUserFlags($username, $user_flags=NULL)
    {
        $username   = strtoupper($username);
        $sql1       = "select P.name
                  from ccpPerson P
             left join ccpPersonSector PS
                    on P.personId = PS.sectorId
                 where UPPER(P.name) = UPPER('$username')";
        $query1     = $this->getDatabase()->query($sql1);

        if ($query1)
        {
            $user_flags[0] = 1;
        }
        else
        {
            $user_flags[0] = 0;
        }

        $periodId   = $this->getActualPeriodId();
        $sql2       = "select PP.preferSector
                   from ccpPersonPeriod PP
              left join ccpPerson P
                     on PP.personId = P.personId
                  where periodId = $periodId
                    and UPPER(P.name) = UPPER('$username')
                      ";
        $query2     = $this->getDatabase()->query($sql2);

        if ($query[0][0] == 't')
        {
            $user_flags[1] = 1;
        }
        else
        {
            $user_flags[1] = 0;
        }

        //TODO como verifico se é admin???

        return $user_flags;

        /*
        DROP FUNCTION getUserFlags(varchar);

        CREATE or REPLACE FUNCTION getUserFlags(varchar, OUT name boolean , OUT preferSector boolean, out canExceed boolean)  AS
        'SELECT
            (SELECT P.name
            FROM ccpPerson P
        LEFT JOIN ccpPersonSector PS
                ON P.personId = PS.sectorId
            WHERE UPPER(P.name) = UPPER($1) ) IS NOT NULL,
            (SELECT PP.preferSector
            FROM ccpPersonPeriod PP
        LEFT JOIN ccpPerson P
                ON PP.personId = P.personId
            WHERE periodId = getCurrentPeriod()
                AND UPPER(P.name) = UPPER($1)),
            (SELECT canExceed
            FROM ccpPerson
            WHERE UPPER(name) = UPPER($1))'
        LANGUAGE SQL;

        select getUserFlags('eduardo bonfandini');
        */

    }

    public function getActualPeriodId()
    {
        $sql = "SELECT periodId
            FROM ccpPeriod
            where now()::date between beginDate and endDate
            ";
        $query = $this->getDatabase()->query($sql);
        return $query[0][0];

        /*
        CREATE or REPLACE FUNCTION getCurrentPeriod() RETURNS int AS
        'SELECT periodId
        FROM ccpPeriod
        WHERE NOW()::date between beginDate and endDate'
        LANGUAGE SQL;
        */
    }


    /**
    * Deve colocar em group_flags um vetor das características do grupo,
    * sendo:
    * 1a posição: 1 se puder exceder a quota.
    */
    public function dbGetGroupFlags($group , $group_flags=NULL)
    {
        $group = strtoupper($group);
        $sql = "SELECT canExceed
                  FROM ccpSector
                 where UPPER(description) = UPPER('$group')
            ";
        $query = $this->getDatabase()->query($sql);
        if ($query[0][0] == 't')
        {
            $group_flags[0] = 1;
        }
        else
        {
            $group_flags[0] = 0;
        }
        return $group_flags;

        /*
            DROP FUNCTION getGroupFlags(varchar);

            CREATE or REPLACE FUNCTION getGroupFlags(varchar, OUT canExceed boolean) AS
            'select canExceed from ccpSector where UPPER(description) = UPPER($1)'
            LANGUAGE SQL;

            select getGroupFlags('biblioteca');
            select getGroupFlags('atendimento ao aluno');
        */
    }


    /**
    * Deve colocar em group o grupo ao qual o usuário pertence.
    */
    public function dbGetGroup($username, $group=NULL)
    {
        $username = strtoupper($username);
        $sql = "SELECT S.description
                  FROM ccpPersonSector SP
             LEFT JOIN ccpSector S
                    ON SP.sectorId = S.sectorId
             LEFT JOIN ccpPerson P
                    ON P.personId = SP.personId
                 WHERE P.name = '$username'
                   AND now()::time between coalesce(SP.beginTime, now()::time) and coalesce(SP.endTime, now()::time)
            ";
        $query = $this->getDatabase()->query($sql);
        $group = $query[0][0];
        return $group;


        /*
            CREATE or REPLACE FUNCTION getGroup(varchar) RETURNS varchar AS
            '   SELECT S.description
                FROM ccpPersonSector SP
            LEFT JOIN ccpSector S
                    ON SP.sectorId = S.sectorId
            LEFT JOIN ccpPerson P
                    ON P.personId = SP.personId
                WHERE UPPER(P.name) = UPPER($1)
                AND now()::time BETWEEN
                    COALESCE(SP.beginTime, now()::TIME) AND COALESCE(SP.endTime, now()::TIME)'
            LANGUAGE SQL;

        select getGroup('eduardo bonfandini');
        */

    }


    /**
    * Deve colocar em quota um vetor com as informações de quota dod grupo ou usuário, sendo:
    * 1a posição: número de cópias atual.
    * 2a posição: quota de impressão.
    */
    public function dbGetQuota($username, $quota=NULL)
    {
        $periodId = $this->getActualPeriodId();
        $username = strtoupper($username);
        $sql = "SELECT sum(PC.copiesNumber)
                  FROM ccpPersonCopy PC
             LEFT JOIN ccpPerson P
                    ON PC.personId = P.personId
                 WHERE P.name = '$username'
                   AND PC.periodId = $periodId;
            ";
        $query = $this->getDatabase()->query($sql);
        $quota[0] = $query[0][0];
        $sql = "SELECT PP.copiesNumber
                  FROM ccpPersonPeriod PP
             LEFT JOIN ccpPerson P
                    ON PP.personId = P.personId
                 WHERE periodId = $periodId
                   AND P.name = '$username'
            ";
        $query1= $this->getDatabase()->query($sql);
        $quota[1] = $query1[0][0];
        return $quota;

        /*
        drop function getQuota(varchar);


        CREATE or REPLACE FUNCTION getQuota(varchar, OUT copiesNumber bigint, OUT quota integer) AS
        'SELECT
        (SELECT sum(PC.copiesNumber)
            FROM ccpPersonCopy PC
        LEFT JOIN ccpPerson P
                ON PC.personId = P.personId
            WHERE UPPER(P.name) = UPPER($1)
            AND PC.periodId = getCurrentPeriod()),
        (SELECT PP.copiesNumber
            FROM ccpPersonPeriod PP
        LEFT JOIN ccpPerson P
            ON PP.personId = P.personId
            WHERE periodId = getCurrentPeriod()
            AND UPPER(P.name) = UPPER($1))
        '
        LANGUAGE SQL;

        select * from getQuota('eduardo bonfandini');
        */

    }


    /**
    * Deve retornar 1 se a impressora está registrada para o usuário ou grupo passado.
    */
    public function dbCheckPrinter($username, $printeruri)
    {
        $sql = " SELECT *
                   FROM ccpPersonPrinter PP
              LEFT JOIN ccpPrinter P
                     ON PP.printerId = P.printerId
              LEFT JOIN ccpPerson  PE
                     ON PE.personId = PP.personId
                  WHERE PE.name = '$username'
                    AND P.name = '$printeruri'
            ";
        $query = $this->getDatabase()->query($sql);
        if ($query)
        {
            return 1;
        }
        else
        {
            return 0;
        }

        /*
        CREATE or REPLACE FUNCTION checkPrinter(varchar, varchar ) RETURNS boolean AS
        '

        select (SELECT PE.name
                        FROM ccpPersonPrinter PP
                    LEFT JOIN ccpPrinter P
                            ON PP.printerId = P.printerId
                    LEFT JOIN ccpPerson  PE
                            ON PE.personId = PP.personId
                        WHERE UPPER(PE.name) = UPPER($1)
                            AND UPPER(P.name) = UPPER($2)) IS NOT NULL
        '
        LANGUAGE SQL;


        select checkPrinter('eduardo bonfandini', 'impresosa de teste');
        */

    }


    /**
    * Deve colocar em db_printer a impressora associada
    * ao usuário/grupo de  acordo à qual ele mandou imprimir.
    */
    public function dbGetPrinter($username, $printeruri, $db_printer)
    {
        /*Não será mais utilizada*/
    }


    /**
    * Deve registrar o valor new_quota como sendo o valor atual de cópias já efetuadas.
    // todo tem q passar a impressora e
    */
    public function dbRegisterQuota($username, $new_quota)
    {
        /*echo "insert into ccpPersonCopy personid, periodId,time, copiesNumber, printerId values (1. ";

        CREATE or REPLACE FUNCTION registerQuotaUser(varchar, varchar, integer ) RETURNS boolean AS
        'INSERT INTO ccpPersonCopy ( personId, periodId, time, copiesNumber, printerId)
            VALUES (getPersonId($1),getCurrentPeriod(), now(), $3, getPrinterId($2));
            select true;'
        LANGUAGE SQL;

        CREATE or REPLACE FUNCTION registerQuotaSector(varchar, varchar, integer ) RETURNS boolean AS
        'INSERT INTO ccpSectorCopy ( sectorId, periodId, time, copiesNumber, printerId)
            VALUES (getSectorId($1),getCurrentPeriod(), now(), $3, getPrinterId($2));
            select true;'
        LANGUAGE SQL;

        /*CREATE or REPLACE FUNCTION getSectorId(varchar ) RETURNS integer AS
        'select sectorid from ccpSector where UPPER(description) = UPPER($1) limit 1;'
        LANGUAGE SQL;

        CREATE or REPLACE FUNCTION getPersonId(varchar) RETURNS integer AS
        'select personid from ccpPerson where UPPER(name) = UPPER($1);'
        LANGUAGE SQL;


        CREATE or REPLACE FUNCTION getPrinterId(varchar) RETURNS integer AS
        'select printerid from ccpPrinter where UPPER(name) = UPPER($1);  '
        LANGUAGE SQL;


        */


    }


    /**
    * Deve colocar em mail_end o endereço de email do usuário.
    */
    public function dbGetEmail($username, $mail_end=NULL)
    {
        $sql = "select email from ccpPerson where name = '$username';";
        $query = $this->getDatabase()->query($sql);
        $mail_end = $query[0][0];
        return $mail_end;

        /*
        CREATE or REPLACE FUNCTION getEmail(varchar) RETURNS varchar AS
        ' select email from ccpPerson where UPPER(name) = UPPER($1);'
        LANGUAGE SQL;

        select * from getEmail('eduardo bonfandini');
        */
    }


    /**
    *Deve colocar em path o caminha do arquivo de log do SolisQuota.
    */
    public function dbGetLogfilePath($path)
    {
        /*select * from basconfig where parameter ilike '%quota%';*/
        /*
        CREATE or REPLACE FUNCTION getLogfilePath() RETURNS varchar AS
        ' SELECT value
            FROM basConfig
        WHERE moduleconfig = ''CONTROLCOPIES''
            AND parameter    ilike ''%quota%'';'
        LANGUAGE SQL;

        select * from getLogFilePath()
        */
    }


    /**
    * Deve colocar em path o caminha do arquivo de spool do Cups.
    */
    public function dbGetSpoolPath($path=NULL)
    {
        $sql   = "SELECT value
                    FROM basConfig
                   WHERE moduleconfig = 'CONTROLCOPIES'
                     AND parameter    = 'SPOOL_DIR'";
        $query = $this->getDatabase()->query($sql);
        $path  = $query[0][0];
        return $path;
     /*
        CREATE or REPLACE FUNCTION getSpoolPath() RETURNS varchar AS
        ' SELECT value
            FROM basConfig
        WHERE moduleconfig = ''CONTROLCOPIES''
            AND parameter    = ''SPOOL_DIR'';'
        LANGUAGE SQL;

        select * from checkPrinter()
        */
    }

/*
int dbCheckHour(char *who, j_time_t time_job)

retorna 1 se a hora que passo faz parte do periodo que o cara pode imprimir

CREATE OR REPLACE FUNCTION checkHour(varchar) RETURNS boolean AS
'select (select getGroup($1)) is not null;'
LANGUAGE SQL;

select checkHour('eduardo bonfandini');

int dbAddPrinter(char *printer)

adiciona a impressora virtual no banco


CREATE OR REPLACE FUNCTION addPrinter(varchar) RETURNS boolean AS
'INSERT INTO ccpPrinter (name) VALUES ($1);
 SELECT TRUE;'
LANGUAGE SQL;

select addPrinter('temp');


*/

}
?>
