<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Rafael Dutra [rdutra@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Dutra [rdutra@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 27/07/2006
 *
 **/

class FrmRequest extends MForm
{
    public $business;
    public function __construct()
    {
        $MIOLO          = MIOLO::getInstance();
        $action         = MIOLO::getCurrentAction();
        $module         = MIOLO::getCurrentModule();
        $this->business = new BusinessControlCopiesBusRequest();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Inserir', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

            $this->eventHandler();
        }
        else
        {
            parent::__construct(_M('Editar', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

            $this->eventHandler();
            if ( MIOLO::_REQUEST('event') != 'tbBtnSave:click' )
            {
                $this->loadFields();
            }
        }
    }

    public function createFields()
    {
        $MIOLO              = MIOLO::getInstance();
        $module             = MIOLO::getCurrentModule();
        $action             = MIOLO::getCurrentAction();
        $function           = MIOLO::_request('function');
        $toolBar            = new MToolBar('toolBar',$MIOLO->getActionURL($module,'main:register:request'));
        $toolBar            ->disableButton('tbBtnDelete');
        $toolBar            ->disableButton('tbBtnPrint');
        $this               ->defaultButton = false;
        $fields[]           = $toolBar;
        $complete           = 'serviceName, unitaryValue';
        $requestFax     = new MTextField('telephone', $this->getFormValue('telephone', $dataFax->telephone), _M('Telefone', $module) , 14);
        $sendedLabelS   = new MLabel(_M('Enviado',$module) . '?');
        $sendedLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sendedS        = new MRadioButtonGroup('sended', null, SAGU::listYesNo(1), $this->getFormValue('sended', $dataFax->sended), null, 'horizontal');
        $sendedS->setShowLabel(false);
        $tariff         = new MTextField('tariff', $this->getFormValue('tariff',$dataFax->tariff), _M('Tarifa', $module), 14);
        $fields[]       = new MHiddenField('limbo', '');
        $serviceLabel   = new MLabel( _M('Código de serviço',$module).':');
        $serviceLabel   ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $serviceLabel   ->setClass('m-caption m-caption-required');
        $serviceID      = new MLookupTextField('serviceId', $this->getFormValue('serviceId', $data->serviceId),
                     '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, $complete, $module, 'Service', 'filler', null, true);
        $serviceID      ->setJsHint(_M('Informe o código do serviço',$module));
        $serviceName   = new MTextField('serviceName', $this->getFormValue('serviceName',$data->serviceName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $serviceName    ->setReadOnly(true);
        $validators[]   = new MRequiredValidator('serviceName');
        $sectorLabel    = new MLabel( _M('Código do setor',$module).':');
        $sectorID       = new MLookupTextField('sectorId', $this->getFormValue('sectorId',$data->sectorId),
                        '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sectorName', $module,'Sector', null, null, true);
        $sectorID       ->setJsHint(_M('Informe o código do setor',$module));
        $sectorName     = new MTextField('sectorName', $this->getFormValue('sectorName',$data->sectorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sectorName     ->setReadOnly(true);
        $validators[]   = new MRequiredValidator('sectorName');
        $centerLabel    = new MLabel( _M('Código de departamento',$module).':');
        $centerLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $centerID       = new MLookupTextField('centerId', $this->getFormValue('centerId',$data->centerId),
                        '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'centerName', $module, 'Center', null, null, true);
        $centerID->setJsHint(_M('Informe o código do centro de custo',$module));
        $centerName    = new MTextField('centerName', $this->getFormValue('centerName',$data->centerName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $centerName     ->setReadOnly(true);
        $validators[]   = new MRequiredValidator('serviceName');
        $projectLabel   = new MLabel(_M('Código do projeto',$module).':');
        $projectLabel   ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $projectID      = new MLookupTextField('projectId', $this->getFormValue('projectId',$data->projectId),
                        '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'projectName', $module, 'Project', null, null, true);
        $projectID      ->setJsHint(_M('Informe o código do projeto',$module));
        $projectName    = new MTextField('projectName', $this->projectName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $projectName    ->setReadOnly(true);
        //$validators[]   = new MRequiredValidator('projectName');
        $costLabel      = new MLabel( _M('Código do centro de Custo',$module).':');
        $costLabel      ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $costLabel      ->setClass('m-caption m-caption-required');
        $costcenterID   = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId',$data->costCenterId),
                            '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costName', $module,'CostCenter', null, null, true);
        $costcenterID   ->setJsHint(_M('Informe o código do Centro de Custo',$module));
        $costName       = new MTextField('costName', $this->costName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costName       ->setReadOnly(true);
        $validators[]   = new MRequiredValidator('costName');
        $personLabel    = new MLabel(_M('Código da pessoa',$module).':');
        $personLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personLabel    ->setClass('m-caption m-caption-required');
        $personID       = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId),
                        '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', $module,'PhysicalPersonEmployee', null, null, true);
        $personID       ->setJsHint(_M('Informe o código da pessoa',$module));
        $personName     = new MTextField('personName', $this->personName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName     ->setReadOnly(true);
        $operatorSectorLabel    = new MLabel(_M('Código do setor do operador',$module).':');
        $operatorSectorLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operatorSectorLabel    ->setClass('m-caption m-caption-required');
        $operatorSectorID       = new MLookupTextField('operatorSectorId', $this->getFormValue('operatorSectorId',$data->operatorSectorId),
                        '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operatorName', $module,'Operator', null, null, true);
        $operatorSectorID       ->setJsHint(_M('Informe o código do operador',$module));
        $operatorSectorName     = new MTextField('operatorName', $this->operatorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operatorSectorName     ->setReadOnly(true);
        $validators[]           = new MRequiredValidator('operatorName');
        $referringLabel         = new MLabel(_M('Requerimento', $module).':');
        $referringLabel         ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $referringLabel         ->setClass('m-caption m-caption-required');
        $referringDescription   = new MTextField('referring', $this->getFormValue('referring', $data->referring), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $referringDescription   ->setJsHint(_M('Requerimento',$module));
        $validators[]           = new MRequiredValidator('referring');
        $operatorLabel          = new MLabel( _M('Operador', $module).':');
        $operatorLabel          ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operatorLabel          ->setClass('m-caption m-caption-required');
        $operatorDescription    = new MTextField('operator', $this->getFormValue('operator', $data->operator), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operatorDescription    ->setJsHint(_M('Digite o operador',$module));
        $validators[]           = new MRequiredValidator('operator');
        $hctService             = new MHContainer(null,array($serviceLabel, $serviceID,    $serviceName));
        $hctSector              = new MHContainer(null,array($sectorLabel,  $sectorID,     $sectorName));
        $hctCenter              = new MHContainer(null,array($centerLabel,  $centerID,     $centerName));
        $hctProject             = new MHContainer(null,array($projectLabel, $projectID,    $projectName));
        $hctCost                = new MHContainer(null,array($costLabel,    $costcenterID, $costName));
        $hctPerson              = new MHContainer(null,array($personLabel,  $personID,     $personName));
        $hctOperatorSector      = new MHContainer(null,array($operatorSectorLabel,$operatorSectorID,$operatorSectorName));
        $hctReferring           = new MHContainer(null,array($referringLabel, $referringDescription));
        $hctOperator            = new MHContainer(null,array($operatorLabel, $operatorDescription));
        $pnlSectorCenterProject = new BaseGroup('pnlSectorCenterProject',_M('Nome setor/centro/projeto', $module),array($hctSector, $hctCenter, $hctProject),'horizontal','css');
        //Error container
        $divError               = new MDiv('divError', $lblMsg, null, 'align=center');
        $fields[]               = $divError;
        $fields[]               = new Separator();
        $fields[]               = new MHiddenField('requestId', MIOLO::_request('requestId'));
        $fields[]               = $hctService ;
        $fields[]               = new MTextField  ('unitaryValue', $this->getFormValue('unitaryValue', $data->unitaryValue), _M('Valor unitário', $module),'14');
        $fields[]               = new MTextField  ('amount', $this->getFormValue('amount', $data->amount), _M('Quantidade', $module),'14');
        $fields[]               = new separator();
        $fields[]               = $pnlSectorCenterProject;
        $fields[]               = new separator();
        $fields[]               = $hctCost    ;
        $fields[]               = $hctReferring;
        $fields[]               = $hctPerson  ;
        //$fields[]               = $password;
        $fields[]               = $hctOperator;
        $fields[]               = $hctOperatorSector;
        $fields[]               = new separator();
        $fields[]               = $requestFax;
        $fields[]               = $tariff;
        $flds[]                 = $sendedLabelS;
        $flds[]                 = $sendedS;
        $hctSent                = new MHContainer(null,$flds); // fields from requestFax
        $fields[]               = $hctSent;
        $fields[]               = new separator();
        $serviceLabel           ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $sectorLabel            ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $centerLabel            ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $projectLabel           ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $costLabel              ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personLabel            ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operatorSectorLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this                   ->setFields($fields);
        $this                   ->setValidators($validators);
        $this                   ->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE')+3);
    }


    /**
    * Function that send the information to database
    *
    */
    public function tbBtnSave_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $data     = getTypesData('ccpRequest');
        $business = new BusinessControlCopiesBusRequest();

        if ( $function == 'update' )
        {
            $ok         = $business->updateRequest($data);
            $msg        = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
        }
        else
        {
            $data->date = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP') . ' '. SAGU::getParameter('BASIC', 'MASK_TIME_PHP'));
            $ok         = $business->insertRequest($data);
            $msg        = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
        }

        if ( $ok )
        {
            $opts = array('requestIdS' => $data->requestId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Informação',$module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'    => 'tbBtnNew_click',
                                'function' => 'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Questão',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
   }


    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $data       = getTypesData('ccpRequest');
        $opts       = array('event'            => 'tbBtnDelete_confirm',
                        'function'         => 'delete',
                        'requestId'        => MIOLO::_request('requestId') );
        $gotoYes    = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto       = SAGU::getStackBackUrl();
        $gotoNo     = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg        = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption    = _M('Questão',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }


    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $business   = new BusinessControlCopiesBusRequest();
        $requestId  = MIOLO::_request('requestId');
        if ( $ok = $business->deleteRequest($requestId))
        {
            $msg    = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto   = SAGU::getStackBackUrl();
            $goto   = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption= _M('Informação',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg    = _M('Erro executando a operação solicitada.',$module);
            $goto   = SAGU::getStackBackUrl();
            $goto   = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption= _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
    * Method that loads the fields, called when is Update
    **/
    protected function loadFields()
    {
        $data       =$this->business->getRequest( MIOLO::_REQUEST('requestId') );
        $this       ->setData( $data );
    }
}
?>
