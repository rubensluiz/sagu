<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Synthetic report form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 15/09/2005
 *
 **/

/**
 * Form to manipulate a SyntheticReport
 **/
class FrmSyntheticReport extends MForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {

        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Sintético', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSearch');
        $fields[] = $toolBar;

        $date = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $date), _M('Data inicial', $module), 15);
        $validators[] = new MDateDMYValidator('beginDate', '', 'required');
        $fields[] = $beginDate;

        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $date), _M('Data final', $module), 15);
        $validators[] = new MDateDMYValidator('endDate', '', 'required');
        $fields[] = $endDate;

        $fields[] = new Separator('');

        $saveButton = new MButton('tbBtnPrint',_M('Imprimir',$module));
        $fields[] = $saveButton;

        $this->setFields($fields);
        if ( $validators )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(140);
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $this->page->onLoad('document.' . $this->name . '.beginDate.focus();' );
    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
    }

    /**
     * Event triggered when user chooses Print from the toolbar
     **/
    public function tbBtnPrint_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $data = $this->getTypesData();

        $business = new BusinessControlCopiesBusCopy();

        $result = $business->copiesSyntheticForPeriod($data);
        $MIOLO->getClass($module, 'RptSyntheticForPeriod');
        new RptSyntheticForPeriod($result, $data);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->beginDate  = $this->beginDate->value;
        $data->endDate  = $this->endDate->value;

        return $data;
    }
}

?>
