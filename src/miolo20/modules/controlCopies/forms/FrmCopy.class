<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Person form
 *
 * @author Eduardo Bonfandini [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/05/2008
 *
 **/

/**
 * Form to manipulate a Copy
 **/
class FrmCopy extends MForm
{
    public $business;
    public $busPrinter;
    public $busCcpPeriod;
    public $module;

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $this->module       = MIOLO::getCurrentModule();
        $MIOLO              = MIOLO::getInstance();
        $this->business     = new BusinessControlCopiesBusCopy();
        $this->busCcpPeriod    = new BusinessControlCopiesBusCcpPeriod();
        $this->busPrinter   = new BusinessControlCopiesBusPrinter();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Inserir', $this->module));
        }
        else
        {
            parent::__construct(_M('Editar', $this->module));
            if (MIOLO::_request('event') !='tbBtnSave:click' && MIOLO::_request('function') == 'update')
            {
                $this->loadFields();
            }
        }
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }


    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO          = MIOLO::getInstance();
        $action         = MIOLO::getCurrentAction();
        $function       = MIOLO::_request('function');
        $toolBar        = new MToolBar('toolBar',$MIOLO->getActionURL($this->module,$action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $fields[]       = $toolBar;
        $fields[]       = new MHiddenField('copyId');
        if ($function == 'update')
        {
            $value = MIOLO::_REQUEST('searchType');
        }
        if ($function =='insert')
        {
            $type           = new MRadioButtonGroup('type', _M('Por favor selecione o tipo', $this->module) ,array(_M('Pessoa', $this->module), _M('Setor', $this->module)) , _M('Pessoa', $this->module), $value, 'horizontal');
            $type           -> addAttribute('onChange', 'typeOnChange();');
            $type           -> setShowLabel(false);
            $fields[]       = $type;
        }
        if (($function == 'insert') || ($function == 'update' && $value == _M('Pessoa', $this->module) ) )
        {
            $personLabel    = new MLabel( _M('Código da pessoa',$this->module).':');
            $personLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $personLabel    ->setClass('m-caption m-caption-required');
            $personID       = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', $this->module,'ccpPerson', null, null, true);
            $personName     = new MTextField('personName', $this->getFormValue('personName',$data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $hctPerson      = new MHContainer('hctPerson1', array($personLabel, $personID, $personName));
            $personName     ->setReadOnly(true);
            $fields[]       = $hctPerson;
        }
        if (($function == 'insert') || ($function == 'update' && $value == _M('Setor', $this->module) ))
        {
            $sectorLabel        = new MLabel( _M('Código do setor',$this->module).':');
            $sectorLabel        ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $sectorId           = new MLookupTextField('sectorId', $this->getFormValue('sectorId',$data->sectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sDescription, email, isCoordinatorsSector', $this->module,'ccpSector', null, null, true);
            $sectorName         = new MTextField('sDescription', $this->getFormValue('sdescription',$data->sdescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $sectorName     ->setReadOnly(true);
            $hctSector          = new MHContainer('hctSector1', array($sectorLabel, $sectorId, $sectorName));
            $fields[]           =$hctSector;
        }
        $periodOptions  = $this->busCcpPeriod->searchPeriod();
        $fields[]       = new MSelection('periodId', null, _M('Período', $this->module), $periodOptions );
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]       = new MIntegerField('copiesNumber', null, _M('Número de cópias', $this->module));
        $validators[]   = new MRequiredValidator('copiesNumber');
        $fields[]       = new MSelection('printerId', null, _M('Impressora', $this->module), $this->busPrinter->searchPrinter(NULL) );
        $validators[]   = new MRequiredValidator('printerId');
        $fields[]       = new MSeparator('');
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        if ($function == 'insert')
        {
            $this->addJsCode(
            "
            typeOnChange();
            function typeOnChange()
            {
                var person = document.getElementById('type_0').checked;
                if (person == true)
                {
                    document.getElementById('m_hctPerson1').style.display = 'block';
                    document.getElementById('m_hctSector1').style.display = 'none';
                }
                else
                {
                    document.getElementById('m_hctPerson1').style.display = 'none';
                    document.getElementById('m_hctSector1').style.display = 'block';
                }
            }
            ");
        }
    }


    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $opts       = array('event'            => 'tbBtnDelete_confirm',
                        'function'         => 'delete',
                        '_id' => MIOLO::_request('_id'),
                        'searchType' => MIOLO::_REQUEST('searchType'));
        $gotoYes    = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto       = SAGU::getStackBackUrl();
        $gotoNo     = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg        = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption    = _M('Questão',$module);
        $MIOLO      ->question($msg, $gotoYes, $gotoNo);
    }


    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $ok         = $this->business->deleteCopy(MIOLO::_request('_id'), MIOLO::_REQUEST('searchType'));
        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação',$module);
            $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), $goto);
        }
        else
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $MIOLO->error(_M('Erro executando a operação solicitada.',$module), $goto, $caption );
        }
    }


    /**
    * add an error to screen
    */
    public function error()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $msg      = _M('Erro executando a operação solicitada.',$module);
        $goto     = SAGU::getStackBackUrl();
        $goto     = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, opts);
        $caption  = _M('Erro',$module);
        $MIOLO    ->error( $msg, $goto, $caption );
    }


    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        if (MIOLO::_REQUEST('type') == _M('Pessoa', $this->module) )
        {
            $data       = getTypesData('ccpPersonCopy');
            $data       ->type = 'person';
        }
        else
        {
            $data       = getTypesData('ccpSectorCopy');
            $data       ->type = 'sector';
        }
        if ($function == 'insert')
        {
            $goto       = SAGU::getStackBackUrl();
            $goto       = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $opts       = array('event'    => 'tbBtnNew_click',
                            'function' => 'insert');
            $gotoYes    = $MIOLO->getActionURL($module, $action, null, $opts);
            if ($ok = $this->business->insertCopy($data))
            {
                $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED'), $gotoYes, $goto);
            }
            else
            {
                $this->error();
            }
        }
        else
        {
            $goto       = SAGU::getStackBackUrl();
            $goto       = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            if ($ok = $this->business -> updateCopy($data) )
            {
                $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $goto);
            }
            else
            {
                 $this->error();
            }
        }
    }


    /**
    * Method that loads the fields, called when is Update
    **/
    protected function loadFields()
    {
        $data       = $this->business->getCopy( MIOLO::_REQUEST('_id'), MIOLO::_REQUEST('searchType') );
        $this       ->setData( $data );
    }
}
?>
