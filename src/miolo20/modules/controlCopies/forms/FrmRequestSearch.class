<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Rafael Dutra  [rdutra@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 31/07/2006
 *
 **/

class FrmRequestSearch extends MForm
{
    private $home;
    private $module;

    public function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;
        $this->home   = $data->home;
        parent::__construct(_M('Localizar',$module));
        $this->setShowPostButton(false);
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    public function createFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,'main:register:request'));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnPrint');
        //favorites
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        
        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Request', $this->home, 'request-16x16.png', true);
        }
       //end favorites
        $fields[]      = $toolBar;
        /*$requestId     = new MTextField('requestIdS', $this->requestIdS->value, _M('Request id', $module), 7);*/
        $serviceLabel  = new MText('serviceId', _M('Código de serviço',$module).':');
        $serviceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $serviceID     = new MLookupTextField('serviceId', $this->serviceId->value,
                            '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'serviceName', $module, 'Service', 'filler', null, true);
        $serviceID     ->setJsHint(_M('Informe o código do serviço',$module));
        $serviceName   = new MTextField('serviceName', $this->getFormValue('serviceName',$data->serviceName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $serviceName->setReadOnly(true);
        $sectorLabel   = new MText('sectorId', _M('Código do setor',$module).':');
        $sectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $sectorID      = new MLookupTextField('sectorId', $this->sectorId->value,
                            '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sectorName', $module,'Sector', null, null, true);
        $sectorID->setJsHint(_M('Informe o código do setor',$module));
        $sectorName    = new MTextField('sectorName', $this->getFormValue('sectorName',$data->sectorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sectorName->setReadOnly(true);
        $centerLabel   = new MText('centerId', _M('Código do centro',$module).':');
        $centerLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $centerID      = new MLookupTextField('centerId', $this->centerId->value,
                            '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'centerName', $module, 'Center', null, null, true);
        $centerID->setJsHint(_M('Informe o código do centro de custo',$module));
        $centerName    = new MTextField('centerName', $this->getFormValue('centerName',$data->centerName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $centerName->setReadOnly(true);
        $projectLabel  = new MText('projectId', _M('Código do projeto',$module).':');
        $projectLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $projectID     = new MLookupTextField('projectId', $this->projectId->value,
                            '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'projectName', $module, 'Project', null, null, true);
        $projectID->setJsHint(_M('Informe o código do projeto',$module));
        $projectName   = new MTextField('projectName', $this->projectName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $projectName->setReadOnly(true);
        $costLabel     = new MText('costId', _M('Código do centro de Custo',$module).':');
        $costLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $costcenterID  = new MLookupTextField('costCenterId', $this->costCenterId->value,
                            '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costName', $module,'CostCenter', null, null, true);
        $costcenterID->setJsHint(_M('Informe o código do Centro de Custo',$module));
        $costName      = new MTextField('costName', $this->costName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costName->setReadOnly(true);
        $personLabel   = new MText('personId', _M('Código da pessoa',$module).':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personID      = new MLookupTextField('personId', $this->personId->value,
                            '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', $module,'PhysicalPersonEmployee', null, null, true);
        $personID->setJsHint(_M('Informe o código da pessoa',$module));
        $personName    = new MTextField('personName', $this->personName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $operatorLabel = new MText('operatorSectorId', _M('Código do operador',$module).':');
        $operatorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operatorSecID = new MLookupTextField('operatorSectorId', $this->operatorSectorId->value,
                            '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operatorName', $module,'Operator', null, null, true);
        $operatorSecID->setJsHint(_M('Informe o código do operador',$module));
        $operatorName  = new MTextField('operatorName', $this->operatorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operatorName->setReadOnly(true);
        $validators[] = new MDateDMYValidator('endDate', '', 'required');
        $hctService  = new MHContainer(null,array($serviceLabel, $serviceID,    $serviceName));
        $hctSector   = new MHContainer(null,array($sectorLabel,  $sectorID,     $sectorName));
        $hctCenter   = new MHContainer(null,array($centerLabel,  $centerID,     $centerName));
        $hctProject  = new MHContainer(null,array($projectLabel, $projectID,    $projectName));
        $hctCost     = new MHContainer(null,array($costLabel,    $costcenterID, $costName));
        $hctPerson   = new MHContainer(null,array($personLabel,  $personID,     $personName));
        $hctOperator = new MHContainer(null,array($operatorLabel,$operatorSecID,$operatorName));
        /*$fields[]  = $requestId ;*/
        $fields[]  = $hctService ;
        $fields[]  = $hctSector  ;
        $fields[]  = $hctCenter  ;
        $fields[]  = $hctProject ;
        $fields[]  = $hctCost    ;
        $fields[]  = $hctPerson  ;
        $fields[]  = $hctOperator;
        $fields[]  = new MSeparator();
        $fields[]  = new MButton('btnSearch',_M('Localizar',$module));
        $this->setFields($fields);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE')+3);
        //get values of createFields
        /*$filters->requestId         = $this->requestIdS->value;*/
        /*$filters->telephone         = $this->telephoneS->value;
        $filters->sended            = $this->sendedS->value;
        $filters->tariff            = $this->tariffS->value;
        $filters->sectorId          = $this->sectorIdS->value;
        $filters->serviceId         = $this->serviceIdS->value;
        $filters->centerId          = $this->centerIdS->value;
        $filters->projectId         = $this->projectIdS->value;
        $filters->costCenterId      = $this->costCenterIdS->value;
        $filters->personId          = $this->personIdS->value;
        $filters->operatorSectorId  = $this->operatorsectorIdS->value;
        $filters->beginDate         = $this->beginDate->value;
        $filters->endDate           = $this->endDate->value;*/
        $filters    = getTypesData('ccpRequest');
        // create the grid without values,
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdRequestSearch', $values);
        $business   = new BusinessControlCopiesBusRequest();
        $data       = $business->searchRequest($filters);
        $grdResults->setData($data);
        $this->addField($grdResults);
    }
}
?>