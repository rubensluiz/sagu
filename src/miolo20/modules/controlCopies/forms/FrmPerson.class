<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Person form
 *
 * @author Eduardo Bonfandini [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/05/2008
 *
 **/

/**
 * Form to manipulate a Copy
 **/
class FrmPerson extends MForm
{
    public $table;
    public $tablePP;
    public $tablePS;
    public $busPrinter;
    public $busPersonPrinter;
    public $busCcpPeriod;
    public $busPersonPeriod;
    public $busPersonSector;

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();
        $pColumns = array(
         new MGridColumn( _M('Ações'   , $module), 'left' , true, null, true, ''),
         new MGridColumn( _M('Código da impressora', $module), 'right', true, null, false, 'printerId'),
         new MGridColumn( _M('Impressora'   , $module), 'left' , true, null, true , 'printerName')
                        );
        $this->table    = new MAjaxTableRaw('printer', _M('Lista de impressora',$module), $pColumns, 'divReturnPrinter');
        $this->table    ->addAction('removeFromTablePrinter', 'table-delete.png', $module);

        $ppColumns = array(
         new MGridColumn( _M('Ações'          , $module), 'left' , true, null, true, ''),
         new MGridColumn( _M('Período'           , $module), 'left' , true, null, false, 'periodId'),
         new MGridColumn( _M('Período'           , $module), 'left' , true, null, true, 'pDescription'),
         new MGridColumn( _M('Preferir setor'    , $module), 'left' , true, null, true, 'preferSectorF'),
         new MGridColumn( _M('Número de cópias'    , $module), 'right', true, null, true, 'copiesNumber')
                        );
        $this->tablePP =  new MAjaxTableRaw('period', _M('Lista de período',$module), $ppColumns, 'divReturnPeriod');
        $this->tablePP ->addAction('removeFromTablePeriod','table-delete.png', $module);

        $psColumns = array(
         new MGridColumn( _M('Ações'          , $module), 'left' , true, null, true, ''),
         new MGridColumn( _M('Setor'           , $module), 'left' , true, null, false, 'sectorId'),
         new MGridColumn( _M('Setor'           , $module), 'left' , true, null, true, 'sDescription'),
         new MGridColumn( _M('Hora inicial'       , $module), 'left' , true, null, true, 'beginTime'),
         new MGridColumn( _M('Hora final'         , $module), 'right', true, null, true, 'endTime')
                        );
        $this->tablePS =  new MAjaxTableRaw('sector', _M('Lista de Setor',$module), $psColumns, 'divReturnSector');
        $this->tablePS ->addAction('removeFromTableSector','table-delete.png', $module);

        $this->busPrinter       = new BusinessControlCopiesBusPrinter();
        $this->busPersonPrinter = new BusinessControlCopiesBusPersonPrinter();
        $this->busCcpPeriod        = new BusinessControlCopiesBusCcpPeriod();
        $this->busPersonPeriod  = new BusinessControlCopiesBusPersonPeriod();
        $this->busPersonSector  = new BusinessControlCopiesBusPersonSector();
        parent::__construct();
        if (($f = $this->page->request('cpaint_function')) != '')
        {
            $this->manager->getTheme()->clearContent();
            $this->$f($this->page->request('cpaint_argument'));
            $this->page->generateMethod = 'generateAjax';
        }
        else
        if ( MIOLO::_request('function') == 'insert' )
        {
            $this->setTitle(_M('Inserir', $module) );
            $this->defineFields();
        }
        else
        {
            $this->setTitle(_M('Editar', $module));
            $this->defineFields();
            if (MIOLO::_request('event') !='tbBtnSave:click')
            {
                $this->loadFields();
            }
        }
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }


    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $action         = MIOLO::getCurrentAction();
        $function       = MIOLO::_request('function');
        $event          = MIOLO::_request('event');
        if ( MIOLO::_REQUEST('event') != 'tbBtnSave:click' && $function == 'insert' )
        {
            $this->table->clear();
            $this->tablePP->clear();
            $this->tablePS->clear();
        }
        if ( MIOLO::_REQUEST('event') != 'tbBtnSave:click' && $function == 'update' )
        {
            $this->table->clear();
            $this->tablePP->clear();
            $this->tablePS->clear();
            $searchData->personId = MIOLO::_REQUEST('_id');
            $result = $this->busPersonPrinter->searchPersonPrinter($searchData, true);
            $this->table->add($result);
            $result2 = $this->busPersonPeriod->searchPersonPeriod($searchData, true);
            foreach ($result2 as $line => $info)
            {
                $result2[$line]->preferSectorF = getBoolean($info->preferSector);
            }
            $this->tablePP->add($result2);
            $resultPS = $this->busPersonSector->searchPersonSector($searchData, true);
            $this->tablePS->add($resultPS);
        }
        $toolBar        = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $fields[]       = $toolBar;
        $personLabel    = new MLabel( _M('Código da pessoa',$module).':');
        $personLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personLabel    ->setClass('m-caption m-caption-required');
        $personID       = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName, sex,email', $module,'Person', null, null, true);
        $personName     = new MTextField('personName', $this->getFormValue('personName',$data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName ->setReadOnly(true);
        $hctPerson      = new MHContainer('hctPerson1', array($personLabel, $personID, $personName));
        $fields[]       = $hctPerson;
        if ( MIOLO::_REQUEST('event') != 'tbBtnSave:click' && $function == 'update' )
        {
            $personID   ->setReadOnly(true);
        }
        $fields[]       = new MHiddenField('sex');
        $fields[]       = new MHiddenField('email');
        $validators[]   = new MRequiredValidator('personId', _M('Código da pessoa',$module));
        $fields[]       = new MCheckBox('canExceed', $data->canExceed, _M('Pode exceder', $module));
        $fields[]       = new MSeparator('');
        $printerOptions = $this->busPrinter->searchPrinter(null);
        $printerLabel   = new MLabel(_M('Impressora', $module).':');
        $printerLabel   ->setClass('m-caption m-caption-required');
        $printerId      = new MSelection('printerId',null, null, $printerOptions);
        $pControls[]    = new MHiddenField('printerName');
        $pControls[]    = new MHContainer('pControls', array($printerLabel, $printerId));
        $pControls[]    = new MButton('addPrint', _M('Adicionar', $module), 'addPrinter();');
        $pControls[]    = new MDiv('divReturnPrinter', $this->table );
        $fields[]       = new MBaseGroup('pPrinter', _M('Impressora', $module), $pControls,'vertical');
        $periodOptions  = $this->busCcpPeriod->searchPeriod(null);
        $periodLabel    = new MLabel(_M('Período', $module).':');
        $periodLabel   ->setClass('m-caption m-caption-required');
        $periodId       = new MSelection('periodId',null, null, $periodOptions);
        $preferLabel    = new MLabel(_M('Preferir setor', $module).':');
        $preferLabel    ->setClass('m-caption m-caption-required');
        $preferSector   = new MSelection('preferSector', null, null, array(_M('Não', $module), _M('Sim', $module) ) );
        $copiesLabel    = new MLabel(_M('Número de cópias', $module).':');
        $copiesLabel    ->setClass('m-caption m-caption-required');
        $copiesNunber   = new MIntegerField('copiesNumber');
        $ppControls[]   = new MHiddenField('pDescription');
        $ppControls[]   = new MHContainer('ppControls', array($periodLabel, $periodId, $preferLabel, $preferSector, $copiesLabel, $copiesNunber));
        $ppControls[]   = new MButton('addPrint', _M('Adicionar', $module), 'addPeriod();');
        $ppControls[]   = new MDiv('divReturnPeriod', $this->tablePP );
        $fields[]       = new MBaseGroup('pPeriod', _M('Período', $module), $ppControls,'vertical');
        $sectorLabel    = new MLabel( _M('Setor',$module).':');
        $sectorLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $sectorLabel    ->setClass('m-caption m-caption-required');
        $sectorId       = new MLookupTextField('sectorId', $this->getFormValue('sectorId',$data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sDescription', $module,'ccpSector', null, null, true);
        $sDescription   = new MTextField('sDescription', $this->getFormValue('sDescription',$data->sDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $hctSector      = new MHContainer('hctPerson1', array($sectorLabel, $sectorId, $sDescription));
        $sDescription   ->setReadOnly(true);
        $psControls[]   = $hctSector;
        $labelBT        = new MLabel(_M('Hora inicial', $module).':' );
        $labelBT        ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $fieldBT        = new MTextField('beginTime', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[]   = new MTimeValidator('beginTime');
        $labelET        = new MLabel(_M('Hora final', $module) .':');
        $fieldET        = new MTextField('endTime', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[]   = new MTimeValidator('endTime');
        $psControls[]   = new MHContainer('timesContainer', array($labelBT, $fieldBT, $labelET, $fieldET) );
        $psControls[]   = new MButton('add', _M('Adicionar', $module) , 'addSector()');
        $psControls[]   = new MDiv('divReturnSector', $this->tablePS );
        $fields[]       = new MBaseGroup('pSector', _M('Setor', $module), $psControls,'vertical');
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        $printerIdMessage  = _M('Por favor selecione uma impressora!', $module);
        $periodIdMessage   = _M('Por favor informe os dados do período corretamente!', $module);
        $sectorIdMessage   = _M('Por favor selecione um setor!', $module);
        $this->page->addJsCode("
        // Add some item to table using ajax
        function addPrinter()
        {
            var option=document.getElementById('printerId').options;
            for (x=0;x<option.length; x++)
            {
                if (option[x].selected)
                {
                    document.getElementById('printerName').value=(option[x].text);
                }
            }
            var printerId     = document.getElementById('printerId').value;
            if (printerId != '')
            {
                addTableprinter('addTablePrinter');
            }
            else
            {
                alert('$printerIdMessage');
            }
        }

        // Add some item to table using ajax
        function addPeriod()
        {
            var option=document.getElementById('periodId').options;
            for (x=0;x<option.length; x++)
            {
                if (option[x].selected)
                {
                    document.getElementById('pDescription').value=(option[x].text);
                }
            }
            var periodId     = document.getElementById('periodId').value;
            var preferSector = document.getElementById('preferSector').value;
            var copiesNumber = document.getElementById('copiesNumber').value;
            if (periodId != '' && preferSector != '' && copiesNumber != '')
            {
                addTableperiod('addTablePeriod');
            }
            else
            {
                alert('$periodIdMessage');
            }
        }
        //add item to sector table
        function addSector()
        {
            var sectorId     = document.getElementById('sectorId').value;
            if (sectorId != '')
            {
                addTablesector('addTableSector');
            }
            else
            {
                alert('$sectorIdMessage');
            }
        }

                    ");
    }


    /**
    * AJax function called to add a item from table printer
    */
    public function addTablePeriod($args)
    {
        $data = getAjaxFields($args);
        $data->preferSectorF = getBoolean($data->preferSector);
        $this->tablePP->add($data);
        $this->tablePP->generate(true);
    }


    /**
    * AJax function called to add a item from table printer
    */
    public function addTablePrinter($args)
    {
        $args = getAjaxFields($args);
        $this->table->add($args);
        $this->table->generate(true);
    }

    /**
    * AJax function called to add a item from table sector
    */
    public function addTableSector($args)
    {
        $args = getAjaxFields($args);
        $this->tablePS->add($args);
        $this->tablePS->generate(true);
    }


    /**
    * AJax function called to remove a item from table Printer
    */
    public function removeFromTablePrinter($data)
    {
        $info = $this->table->get($data[0]);
        if ($info->personPrinterId)
        {
            $info->remove = true;
            $this->table->set($data[0],$info);
        }
        else
        {
            $this->table->remove($data[0]);
        }
        $this->table->generate(true);
    }


    /**
    * AJax function called to remove a item from table period
    */
    public function removeFromTablePeriod($data)
    {
        $info = $this->tablePP->get($data[0]);
        if ($info->personPeriodId)
        {
            $info->remove = true;
            $this->tablePP->set($data[0],$info);
        }
        else
        {
            $this->tablePP->remove($data[0]);
        }
        $this->tablePP->generate(true);
    }

    /**
    * AJax function called to remove a item from table sector
    */
    public function removeFromTableSector($data)
    {
        $info = $this->tablePS->get($data[0]);
        if ($info->sectorPersonId)
        {
            $info->remove = true;
            $this->tablePS->set($data[0],$info);
        }
        else
        {
            $this->tablePS->remove($data[0]);
        }
        $this->tablePS->generate(true);
    }


    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        $data       = $this->getTypesData();
        $opts       = array('event'            => 'tbBtnDelete_confirm',
                        'function'         => 'delete',
                        '_id' => MIOLO::_request('_id') );
        $gotoYes    = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto       = SAGU::getStackBackUrl();
        $gotoNo     = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg        = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption    = _M('Questão',$module);
        $MIOLO      ->question($msg, $gotoYes, $gotoNo);
    }


    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO      = MIOLO::getInstance();
        $module     = MIOLO::getCurrentModule();
        $action     = MIOLO::getCurrentAction();
        if ( $ok = $this->business->deletePerson(MIOLO::_request('_id')) )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação',$module);
            $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), $goto);
        }
        else
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $MIOLO->error(_M('Erro executando a operação solicitada.',$module), $goto, $caption );
        }
    }

    /**
    * add an error to screen
    */
    public function error()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $msg      = _M('Erro executando a operação solicitada.',$module);
        $goto     = SAGU::getStackBackUrl();
        $goto     = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, opts);
        $caption  = _M('Erro',$module);
        $MIOLO    ->error( $msg, $goto, $caption );
    }


    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $action         = MIOLO::getCurrentAction();
        $function       = MIOLO::_request('function');
        $data           = $this->getTypesData();
        $business       = new BusinessControlCopiesBusCcpPerson();
        $dataPrinter    = $this->table->getItens();
        $dataPeriod     = $this->tablePP->getItens();
        $dataSector     = $this->tablePS->getItens();
        $personId       = MIOLO::_REQUEST('personId');
        if ($function == 'insert')
        {
            $goto       = SAGU::getStackBackUrl();
            $goto       = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null,$opts);
            $opts       = array('event'    => 'tbBtnNew_click', 'function' => 'insert');
            $gotoYes    = $MIOLO->getActionURL($module, $action, null, $opts);
            if ($ok = $business -> insertPerson($data))
            {
                if ( $ok = $this->busPersonPrinter->insertPersonPrinter($dataPrinter,null,  $personId) )
                {
                    if ($ok = $this->busPersonPeriod->insertPersonPeriod($dataPeriod,null,$personId) )
                    {
                        if ($ok = $this->busPersonSector->insertPersonSector($dataSector,null,$personId) )
                        {
                            $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED'), $gotoYes, $goto);
                        }
                    }
                }
            }
            else
            {
                $this->error();
            }
        }
        else
        {
            $goto       = SAGU::getStackBackUrl();
            $goto       = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            if ($ok = $business -> updatePerson($data) )
            {
                if ( $ok = $this->busPersonPrinter->updatePersonPrinter($dataPrinter,null,  $personId) )
                {
                    if ($ok = $this->busPersonPeriod->updatePersonPeriod($dataPeriod, null, $personId) )
                    {
                        if ($ok = $this->busPersonSector->updatePersonSector($dataSector,null,$personId) )
                        {
                            $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $goto);
                        }
                    }
                }
            }
            else
            {
                 $this->error();
            }
        }
    }


    /**
    * Method that loads the fields, called when is Update
    **/
    protected function loadFields()
    {
        $business   = new BusinessControlCopiesBusCcpPerson();
        $data       =$business->getPerson( MIOLO::_REQUEST('_id') );
        $this       ->setData( $data );
        if ($data->canExceed == 't')
        {
            $this->canExceed->checked = true;
        }
    }


    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new ccpPerson();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->personName =MIOLO::_REQUEST('personName');
        $canExceed = MIOLO::_REQUEST('canExceed');
        if (isset($canExceed))
        {
            $data->canExceed = 't';
        }
        else
        {
            $data->canExceed = 'f';
        }
        return $data;
    }
}
?>
