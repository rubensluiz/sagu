<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Period form
 *
 * @author Eduardo Bonfandini [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/05/2008
 *
 **/

/**
 * Form to manipulate a Period
 **/
 class FrmPeriod extends MForm
{
    public $module;
    public $MIOLO;
    public $business;
    public $table;
    public $table2;
    public $function;
    public $busSectorPeriod;
    public $busPersonPeriod;

    /**
     * Class constructor
     **/
    function __construct()
    {
        $this->MIOLO    = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $this->function = MIOLO::_REQUEST('function');

        $tableColumns = array(
         new MGridColumn( _M('Ações',   $module),    'left', true, null, true, ''),
         new MGridColumn( _M('Código do setor', $module), 'left', true, null, false, 'sectorId'),
         new MGridColumn( _M('Setor', $module), 'left', true, null, true, 'sdescription'),
         new MGridColumn( _M('Número de cópias'   , $module), 'right', true, null, true, 'copiesNumber'),
                        );
        $this->table    = new MAjaxTableRaw('sector', _M('Lista de Setor','controlCopies'), $tableColumns, 'divTable'  );
        $this->table   ->addAction('removeFromTable','table-delete.png', $module);

        $table2Columns = array(
         new MGridColumn( _M('Ações',   $module),    'left', true, null, true, ''),
         new MGridColumn( _M('Código da pessoa', $module), 'left', true, null, false, 'personId'),
         new MGridColumn( _M('Pessoa', $module), 'left', true, null, true, 'personName'),
         new MGridColumn( _M('Preferir setor'   , $module), 'left', true, null, true, 'preferSectorF'),
         new MGridColumn( _M('Número de cópias'   , $module), 'right', true, null, true, 'copiesNumber2'),
                        );
        $this->table2   = new MAjaxTableRaw('person', _M('Lista de pessoa','controlCopies'), $table2Columns, 'divTable2'  );
        $this->table2   ->addAction('removeFromTable2','table-delete.png', $module);
        $this->business         = new BusinessControlCopiesBusCcpPeriod();
        $this->busSectorPeriod  = new BusinessControlCopiesBusSectorPeriod();
        $this->busPersonPeriod  = new BusinessControlCopiesBusPersonPeriod();
        parent::__construct( _M('Inserir', 'controlCopies'));
        if (($f = $this->page->request('cpaint_function')) != '')
        {
            $this->manager->getTheme()->clearContent();
            $this->$f($this->page->request('cpaint_argument'));
            $this->page->generateMethod = 'generateAjax';
        }
        else
        {
            if ( $this->function == 'insert' )
            {
                $this->defineFields();
            }
            elseif ( $this->function == 'update' && ( MIOLO::_REQUEST('event') != 'tbBtnSave:click' ) )
            {
                $this->defineFields();
                $this->loadFields();
            }
            $this->setHelp(get_class($this), 'controlCopies', $this->action);
            $this->eventHandler();
            $this->setIcon($this->MIOLO->getUI()->getImage('controlCopies','printer-16x16.png') ) ;
        }
    }


    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $function       = MIOLO::_request('function');
        if ( MIOLO::_REQUEST('event') != 'tbBtnSave:click' && $this->function == 'insert' )
        {
            $this->table->clear();
            $this->table2->clear();
        }
        $toolBar        = new MToolBar('toolBar',$this->MIOLO->getActionURL('controlCopies',$action));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $fields[]       = $toolBar;
        $fields[]       = new MHiddenField('periodId');
        $fields[]       = new MTextField('description', $data->description, _M('Descrição','controlCopies'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $validators[]   = new MRequiredValidator('description', _M('Descrição', 'controlCopies') );
        $fields[]       = new MCalendarField('beginDate', $data->beginDate , _M('Data inicial', 'controlCopies'), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[]   = new MDateDMYValidator('beginDate', _M('Data inicial', 'controlCopies') );
        $validators[]   = new MRequiredValidator('beginDate', _M('Data inicial', 'controlCopies') );
        $fields[]       = new MCalendarField('endDate', $data->endDate , _M('Data final', 'controlCopies'), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[]   = new MDateDMYValidator('endDate', _M('Data final', 'controlCopies') );
        $validators[]   = new MRequiredValidator('endDate', _M('Data final', 'controlCopies') );
        $fields[]       = new MSeparator();
        $fields[]       = new MHiddenField('availableCopies','1');
        $sectorLabel    = new MLabel( _M('Código do setor','controlCopies').':');
        $sectorLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $sectorLabel    ->setClass('m-caption m-caption-required');
        $sectorId       = new MLookupTextField('sectorId', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sdescription', 'controlCopies','ccpSector', null, null, true);
        $sdescription   = new MTextField('sdescription', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $hctSector      = new MHContainer('hctSector', array($sectorLabel, $sectorId, $sdescription));
        $sdescription   ->setReadOnly(true);
        $sControls[]    = $hctSector;
        $copiesLabel    = new MLabel(_M('Número de cópias', 'controlCopies').':' );
        $copiesLabel    ->setClass('m-caption m-caption-required');
        $copiesLabel    -> setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $copiesField    = new MIntegerField('copiesNumber');
        $copiesContainer= new MHContainer('copiesContainer', array($copiesLabel, $copiesField) );
        $sControls[]    = $copiesContainer;
        if ( $this->function == 'update' )
        {
            $this->table->clear();
            $searchData->periodId = MIOLO::_REQUEST('_id');
            if ( $itemData = $this->busSectorPeriod->searchSectorPeriod( $searchData , true) )
            {
                $this->table->add($itemData);
            }
        }
        $sControls[]    = new MButton('add', _M('Adicionar', 'controlCopies') , 'addTable()' );
        $sControls[]    = new MDiv('divTable', $this->table);
        $panel          = new MBaseGroup('panel', _M('Setor', 'controlCopies'), $sControls, 'vertical');
        $fields[]       = $panel;
        //second ajax part
        $personLabel    = new MLabel( _M('Código da pessoa','controlCopies').':');
        $personLabel    ->setClass('m-caption m-caption-required');
        $personLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personID       = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'controlCopies','ccpPerson', null, null, true);
        $personName     = new MTextField('personName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $hctPerson      = new MHContainer('hctPerson', array($personLabel, $personID, $personName));
        $personName     ->setReadOnly(true);
        $pControls[]    = $hctPerson;
        $copiesLabel2   = new MLabel(_M('Número de cópias', 'controlCopies').':' );
        $copiesLabel2    ->setClass('m-caption m-caption-required');
        $copiesLabel2   -> setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $copiesField2   = new MIntegerField('copiesNumber2');
        $copiesContainer2 = new MHContainer('copiesContainer2', array($copiesLabel2, $copiesField2, ) );
        $pControls[]    = $copiesContainer2;
        $preferLabel    = new MLabel(_M('Preferir setor', 'controlCopies').':' );
        $preferLabel    ->setClass('m-caption m-caption-required');
        $preferLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $preferSector   = new MSelection('preferSector',null,null, array(_M('Não', 'controlCopies'), _M('Sim', 'controlCopies')) );
        $preferContainer= new MHContainer('preferContainer', array($preferLabel, $preferSector) );
        $pControls[]    = $preferContainer;
        if ( $this->function == 'update' )
        {
            $this->table2->clear();
            $searchData2 ->periodId = MIOLO::_REQUEST('_id');
            if ( $itemData2 = $this->busPersonPeriod->searchPersonPeriod( $searchData2 , true) )
            {
                foreach ($itemData2 as $line => $info)
                {
                    $itemData2[$line]->preferSectorF = getBoolean($info->preferSector);
                }
                $this->table2->add($itemData2);
            }
        }
        $pControls[]    = new MButton('add', _M('Adicionar', 'controlCopies') , 'addTable2()' );
        $pControls[]    = new MDiv('divTable2',$this->table2);
        $panel2         = new MBaseGroup('panel2', _M('Pessoa', 'controlCopies'), $pControls, 'vertical');
        $fields[]       = $panel2;
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($this->MIOLO->getActionURL('controlCopies',substr($action,0,strrpos($action,':'))));
        $this->MIOLO->getRequiredJS4Ajax();
        $url            = str_replace('&amp;', '&',$this->manager->getCurrentURL());
        $sectorIdMessage= _M('Por favor informe os dados do setor corretamente.', 'controlCopies');
        $printerIdMessage= _M('Por favor informe os dados da pessoa corretamente.', 'controlCopies');
        $this->addJSCode(
        "
        // Add some item to table using ajax
        function addTable()
        {
            var sectorId     = document.getElementById('sectorId').value;
            var sdescription = document.getElementById('sdescription').value;
            var copiesNumber = document.getElementById('copiesNumber').value;
            var canInsert    = isNaN(copiesNumber);
            if (sectorId != '' && sdescription != '' && copiesNumber != '' && canInsert == false)
            {
                MIOLO_ajaxCall('$url', 'POST', 'callAddTable', getFieldValues(), callAddTable, 'TEXT');
                document.getElementById('sectorId').value           = '';
                document.getElementById('sdescription').value       = '';
                document.getElementById('copiesNumber').value       = '';
            }
            else
            {
                alert('$sectorIdMessage');
            }
        }

        // the return of ajax
        function callAddTable(result)
        {
            xGetElementById('divTable').innerHTML = result;
            MIOLO_parseAjaxJavascript(result);
        }

        // Add some item to table using ajax
        function addTable2()
        {
            var personId      = document.getElementById('personId').value;
            var personName    = document.getElementById('personName').value;
            var copiesNumber2 = document.getElementById('copiesNumber2').value;
            var canInsert    = isNaN(copiesNumber2);
            if (personId != '' && personName !='' && copiesNumber2 != '' && canInsert == false)
            {
                MIOLO_ajaxCall('$url', 'POST', 'callAddTable2', getFieldValues(), callAddTable2, 'TEXT');
            }
            else
            {
                alert('$printerIdMessage');
            }
        }

        // the return of ajax
        function callAddTable2(result)
        {
            xGetElementById('divTable2').innerHTML = result;
            MIOLO_parseAjaxJavascript(result);
        }
        "
        );
    }


    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $action     = MIOLO::getCurrentAction();
        $data       = getTypesData('ccpPeriod');
        $opts       = array('event'            => 'tbBtnDelete_confirm',
                        'function'         => 'delete',
                        '_id' => MIOLO::_request('_id') );
        $gotoYes    = $this->MIOLO->getActionURL( 'controlCopies', $action, null, $opts );
        $goto       = SAGU::getStackBackUrl();
        $gotoNo     = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL('controlCopies', $action);
        $msg        = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption    = _M('Questão','controlCopies');
        $this->MIOLO->question($msg, $gotoYes, $gotoNo);
    }


    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $action     = MIOLO::getCurrentAction();
        $ok         = $this->business->deletePeriod(MIOLO::_request('_id'));
        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL('controlCopies', $action);
            $caption = _M('Informação','controlCopies');
            $this->MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), $goto);
        }
        else
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL('controlCopies', $action);
            $caption = _M('Erro','controlCopies');
            $this->MIOLO->error(_M('Erro executando a operação solicitada.','controlCopies'), $goto, $caption );
        }
    }

    /**
    * Function called when user clicks add
    *
    */
    public function callAddTable($args)
    {
        $this->table->add(getAjaxFields($args));
        $this->table->generate(true);
    }


    /**
    * Response to the ajax call updateFromTable
    *
    */
    public function removeFromTable($data)
    {
        $info = $this->table->get($data[0]);
        if ($info->sectorPeriodId)
        {
            $info->remove = true;
            $this->table->set($data[0],$info);
        }
        else
        {
            $this->table->remove($data[0]);
        }
        $this->table->generate(true);
    }


    /**
    * Function called when user clicks add
    *
    */
    public function callAddTable2($args)
    {
        $data = getAjaxFields($args);
        $data->preferSectorF = getBoolean($data->preferSector);
        $this->table2->add($data);
        $this->table2->generate(true);
    }


    /**
    * Response to the ajax call updateFromTable
    *
    */
    public function removeFromTable2($data)
    {
        $info = $this->table2->get($data[0]);
        if ($info->personPeriodId)
        {
            $info->remove = true;
            $this->table2->set($data[0],$info);
        }
        else
        {
            $this->table2->remove($data[0]);
        }
        $this->table2->generate(true);
    }


    /**
    *
    */
    public function error()
    {
        $MIOLO    = MIOLO::getInstance();
        $msg      = _M('Erro executando a operação solicitada.','controlCopies');
        $goto     = SAGU::getStackBackUrl();
        $goto     = strlen($goto)>0 ? $goto : $MIOLO->getActionURL('controlCopies', $action, null, opts);
        $caption  = _M('Erro','controlCopies');
        $MIOLO    ->error( $msg, $goto, $caption );
    }


    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $data     = getTypesData('ccpPeriod');
        $itens    = $this->table->getItens();
        $itens2   = $this->table2->getItens();
        if ($function == 'insert')
        {
            $goto       = SAGU::getStackBackUrl();
            $goto       = strlen($goto)>0 ? $goto : $MIOLO->getActionURL('controlCopies', $action, null, $opts);
            $opts       = array('event'    => 'tbBtnNew_click',
                            'function' => 'insert');
            $gotoYes    = $MIOLO->getActionURL('controlCopies', $action, null, $opts);

            $periodId   = $this->business->getNextVal();
            $data->periodId = $periodId;
            if ($ok = $this->business->insertPeriod($data))
            {
                if ($ok = $this->busSectorPeriod->insertSectorPeriod($itens, $periodId))
                {
                    if ($ok = $this->busPersonPeriod->insertPersonPeriod($itens2, $periodId))
                    {
                        $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED'), $gotoYes, $goto);
                    }
                }
            }
            else
            {
                $this->error();
            }
        }
        else
        {
            $goto       = SAGU::getStackBackUrl();
            $goto       = strlen($goto)>0 ? $goto : $MIOLO->getActionURL('controlCopies', $action, null, $opts);
            if ($ok = $this->business -> updatePeriod($data) )
            {
                if ($ok = $this->busSectorPeriod->updateSectorPeriod($itens) )
                {
                    if ($ok = $this->busPersonPeriod->updatePersonPeriod($itens2) )
                    {
                        $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $goto);
                    }
                }
            }
            else
            {
                 $this->error();
            }
        }
    }


    /**
    * Method that loads the fields, called when is Update
    **/
    protected function loadFields()
    {
        $this->setData( $this->business->getPeriod( MIOLO::_REQUEST('_id') ) );
    }
}
?>
