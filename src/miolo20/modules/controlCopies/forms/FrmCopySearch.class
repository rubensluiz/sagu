<?php
session_start();
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for sprCopy table
 *
 * @author
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/09/2005
 *
 **/

/**
 * Form to search the ccpCopy table
 */
class FrmCopySearch extends MForm
{
    private $home;
    public  $module;
    public  $business;
    public  $busCcpPeriod;
    public  $busPrinter;
    public  $type;


    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $this->module       = MIOLO::getCurrentModule();
        $MIOLO              = MIOLO::getInstance();
        $this->business     = new BusinessControlCopiesBusCopy();
        $this->busCcpPeriod    = new BusinessControlCopiesBusCcpPeriod();
        $this->busPrinter   = new BusinessControlCopiesBusPrinter();
        $this->home         = $data->home;
        parent::__construct(_M('Localizar',$this->module));
        $this->setShowPostButton(false);
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $fields[] = $toolBar;

        $type           = new MRadioButtonGroup('type', _M('Por favor selecione o tipo', $this->module) ,array(_M('Pessoa', $this->module), _M('Setor', $this->module)) , _M('Pessoa', $this->module), MIOLO::_REQUEST('type'), 'horizontal');
        $type           -> addAttribute('onChange', 'typeOnChange();');
        $type           -> setShowLabel(false);
        $fields[]       = $type;
        $personLabel    = new MLabel( _M('Código da pessoa',$this->module).':');
        $personLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personLabel    ->setClass('m-caption');
        $personID       = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', $this->module,'ccpPerson', null, null, true);
        $personName     = new MTextField('personName', $this->getFormValue('personName',$data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $hctPerson      = new MHContainer('hctPerson1', array($personLabel, $personID, $personName));
        $fields[]       = $hctPerson;
        $sectorLabel        = new MLabel( _M('Código do setor',$this->module).':');
        $sectorLabel        ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $sectorId           = new MLookupTextField('sectorId', $this->getFormValue('sectorId',$data->sectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sdescription, email, isCoordinatorsSector', $this->module,'ccpSector', null, null, true);
        $sectorName         = new MTextField('sdescription', $this->getFormValue('sdescription',$data->sdescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $hctSector          = new MHContainer('hctSector1', array($sectorLabel, $sectorId, $sectorName));
        $fields[]           =$hctSector;
        $periodOptions  = $this->busCcpPeriod->searchPeriod();
        $fields[]       = new MSelection('periodId', null, _M('Período', $this->module), $periodOptions );
        $fields[]       = new MTextField('time', null, _M('Horário', $this->module) );
        $validators[]   = new MDateDMYValidator('time');
        $fields[]       = new MIntegerField('copiesNumber', null, _M('Número de cópias', $this->module));
        $fields[]       = new MSelection('printerId', null, _M('Impressora', $this->module), $this->busPrinter->searchPrinter(NULL) );
        $fields[]       = new MSeparator('');
        $fields[]       = new MButton('btnSearch', _M('Localizar', $this->module));
        $this->setFields($fields);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->addJsCode(
        "
        typeOnChange();
        function typeOnChange()
        {
            var person = document.getElementById('type_0').checked;
            if (person == true)
            {
                document.getElementById('m_hctPerson1').style.display = 'block';
                document.getElementById('m_hctSector1').style.display = 'none';
            }
            else
            {
                document.getElementById('m_hctPerson1').style.display = 'none';
                document.getElementById('m_hctSector1').style.display = 'block';
            }
        }
        ");
        if (MIOLO::_REQUEST('type') == _M('Pessoa', $this->module) )
        {
            $filter     = getTypesData('ccpPersonCopy');
            $filter     ->type = 'person';
        }
        else
        {
            $filter     = getTypesData('ccpSectorCopy');
            $filter     ->type = 'sector';
        }
        if (MIOLO::_REQUEST('btnSearch'))
        {
            $_SESSION['searchType'] = $filter->type;
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdCopySearch',$filters);
            $result     = $this->business->searchCopy($filter);
            $grdResults ->setData($result);
            $this->addField($grdResults);
        }
      }
}
?>
