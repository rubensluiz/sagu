<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Rafael Dutra [rdutra@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Dutra [rdutra@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/08/2006
 *
 **/

class FrmPayRollDiscount extends MForm
{
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Inserir', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

            $this->eventHandler();
        }
        else
        {
            parent::__construct(_M('Editar', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
            $this->eventHandler();
        }
    }

    public function createFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,'main:register:payrolldiscount'));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $this->defaultButton = false;
        $fields[]  = $toolBar;
        $complete = 'serviceName, unitaryValue';
        $branchLabel = new MLabel(_M('Ramal', $module).':');
        $branchLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $branchLabel->setClass('m-caption m-caption-required');
        $branchDescription = new MTextField('branch', $this->getFormValue('branch', $data->branch), '');
        $branchDescription->setJsHint(_M('Digite a ramal',$module));
        $validators[] = new MRequiredValidator('branch', _M('Ramal', $module));
        $fields[]  = new MHiddenField('limbo', '');
        $sectorLabel   = new MLabel(_M('Código do setor',$module).':');
        $sectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $sectorLabel->setClass('m-caption m-caption-required');
        $sectorID      = new MLookupTextField('sectorId', $this->getFormValue('sectorId',$data->sectorId),
                        '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sectorName', $module,'Sector', null, null, true);
        $sectorID->setJsHint(_M('Informe o código do setor',$module));
        $sectorName    = new MTextField('sectorName', $this->getFormValue('sectorName',$data->sectorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sectorName->setReadOnly(true);
        $validators[] = new MRequiredValidator('sectorName', _M('Código do setor',$module));
        $serviceLabel  = new MLabel(_M('Código de serviço',$module).':');
        $serviceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $serviceLabel->setClass('m-caption m-caption-required');
        $serviceID     = new MLookupTextField('serviceId', $this->getFormValue('serviceId', $data->serviceId),
                     '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, $complete, $module, 'Service', 'filler', null, true);
        $serviceID->setJsHint(_M('Informe o código do serviço',$module));
        $serviceName   = new MTextField('serviceName', $this->getFormValue('serviceName',$data->serviceName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $serviceName->setReadOnly(true);
        $validators[] = new MRequiredValidator('serviceName', _M('Código de serviço',$module));
        $unitaryLabel = new MLabel(_M('Valor unitário', $module).':');
        $unitaryLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $unitaryLabel->setClass('m-caption m-caption-required');
        $unitaryDescription = new MTextField  ('unitaryValue', $this->getFormValue('unitaryValue', $data->unitaryValue),'');
        $unitaryDescription->setJsHint(_M('Informe o valor unitário',$module));
        $validators[] = new MRequiredValidator('unitaryValue', _M('Valor unitário', $module));
        $amountLabel = new MLabel(_M('Quantidade', $module).':');
        $amountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $amountLabel->setClass('m-caption m-caption-required');
        $amountDescription = new MTextField  ('amount', $this->getFormValue('amount', $data->amount),'');
        $amountDescription->setJsHint(_M('Digite o valor da quantidade',$module));
        $validators[] = new MRequiredValidator('amount', _M('Quantidade', $module));
        $personLabel   = new MLabel(_M('Código da pessoa',$module).':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personLabel->setClass('m-caption m-caption-required');
        $personId      = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId),
                        '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', $module,'PhysicalPersonEmployee', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa',$module));
        $personName    = new MTextField('personName', $this->personName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $validators[] = new MRequiredValidator('personId', _M('Código da pessoa',$module));
        $operatorLabel = new MLabel(_M('Operador', $module).':');
        $operatorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operatorLabel->setClass('m-caption m-caption-required');
        $operatorDescription = new MTextField('operator', $this->getFormValue('operator', $data->operator), '');
        $operatorDescription->setJsHint(_M('Digite o operador',$module));
        $validators[] = new MRequiredValidator('operator', _M('Operador', $module));
        $operatorSectorLabel = new MLabel(_M('Código do setor do operador',$module).':');
        $operatorSectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operatorSectorLabel->setClass('m-caption m-caption-required');
        $operatorSectorId = new MLookupTextField('operatorSectorId', $this->getFormValue('operatorSectorId',$data->operatorSectorId),
                        '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operatorName', $module,'Operator', null, null, true);
        $operatorSectorId->setJsHint(_M('Informe o código do operador',$module));
        $operatorSectorName  = new MTextField('operatorName', $this->operatorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operatorSectorName->setReadOnly(true);
        $validators[] = new MRequiredValidator('operatorSectorId', _M('Código do setor do operador',$module));
        $hctBranch         = new MHContainer(null,array($branchLabel,  $branchDescription));
        $hctSector         = new MHContainer(null,array($sectorLabel,  $sectorID,     $sectorName));
        $hctService        = new MHContainer(null,array($serviceLabel, $serviceID,    $serviceName));
        $hctUnitaryValue   = new MHContainer(null,array($unitaryLabel, $unitaryDescription));
        $hctAmount         = new MHContainer(null,array($amountLabel,  $amountDescription));
        $hctPerson         = new MHContainer(null,array($personLabel,  $personId,     $personName));
        $hctOperator       = new MHContainer(null,array($operatorLabel, $operatorDescription));
        $hctOperatorSector = new MHContainer(null,array($operatorSectorLabel, $operatorSectorId, $operatorSectorName));
        //Error container
        $divError           = new MDiv('divError', $lblMsg, null, 'align=center');
        $fields[]           = $divError;
        $fields[]           = new Separator();
        $fields[]           = new MHiddenField('payrollDiscountId', MIOLO::_request('payRollDiscountId'));
        $fields[]           = $hctBranch ;
        $fields[]           = $hctSector ;
        $fields[]           = $hctService ;
        $fields[]           = $hctUnitaryValue ;
        $fields[]           = $hctAmount ;
        $fields[]           = $hctPerson  ;
        $fields[]           = $hctOperator;
        $fields[]           = $hctOperatorSector;
        $fields[]           = new separator();
        $fields[]           = new separator();
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE')+3);
        $this->setFields($fields);
        $this->setValidators($validators);
        if ( in_array($function,array('update')) && MIOLO::_REQUEST('event') != 'tbBtnSave:click' )
        {
            $business           = new BusinessControlCopiesBusPayrollDiscountPtc();
            $payRollDiscountId  = MIOLO::_request('payRollDiscountId');
            $data               = $business->getPayRollDiscount($payRollDiscountId);
            $this->setData($data);
        }
    }


    public function tbBtnSave_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $data     = getTypesData('ccpPayrollDiscount');
        $business = new BusinessControlCopiesBusPayrollDiscountPtc();
        if ( $function == 'update' )
        {
            $ok  = $business->updatePayRollDiscount($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
        }
        else
        {
            $data->date = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP') . ' '. SAGU::getParameter('BASIC', 'MASK_TIME_PHP'));
            $ok  = $business->insertPayRollDiscount($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
        }

        if ( $ok )
        {
            $opts = array('payRollDiscountId' => $data->payRollDiscountId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Informação',$module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'    => 'tbBtnNew_click',
                                    'function' => 'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Questão',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
   }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data   = getTypesData('ccpPayrollDiscount');
        $opts   = array('event'            => 'tbBtnDelete_confirm',
                        'function'         => 'delete',
                        'payRollDiscountId' => MIOLO::_request('payRollDiscountId') );
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $business  = new BusinessControlCopiesBusPayrollDiscountPtc();
        $payRollDiscountId = MIOLO::_request('payRollDiscountId');
        $ok       = $business->deletePayRollDiscount($payRollDiscountId);
        if ( $ok )
        {
            $msg  = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
}
?>