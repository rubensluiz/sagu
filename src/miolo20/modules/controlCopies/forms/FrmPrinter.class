<?php
session_start();
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Eduardo Bonfandini [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Eduardo Bonfandini [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 04 mar 2008
 *
 **/
    class FrmPrinter extends MForm
    {
       public $MIOLO, $module, $action, $function, $business, $busCampo, $toolbar, $busname, $link, $require, $options, $table, $table2, $busSectorPrinter, $busPersonPrinter;

        /**
         *  Method Constructor
         **/
        function __construct()
        {
            $this->MIOLO     = MIOLO::getInstance();
            $module          = MIOLO::getCurrentModule();
            $this->function  = MIOLO::_REQUEST('function');
            $this->action    = MIOLO::getCurrentAction();
            $this->business  = new BusinessControlCopiesBusPrinter();
            $this->busSectorPrinter = new BusinessControlCopiesBusSectorPrinter();
            $this->busPersonPrinter = new BusinessControlCopiesBusPersonPrinter();
            $this->link      = 'main:printer';
            $this->setClose($this->MIOLO->getActionURL('controlCopies', $this->link));
            $this->require   = '_id';
            $this->MIOLO->getClass('controlCopies', 'MAjaxTableRaw');

            $columns = array(
                 new MGridColumn( _M('Ações', $module),    'left', true, null, true, ''),
                 new MGridColumn( _M('Código do setor', $module), 'left', true, null, false, 'sectorId'),
                 new MGridColumn( _M('Setor'   , $module), 'left', true, null, true, 'sdescription')
                        );
            $this->table     = new MAjaxTableRaw('sector', _M('Lista de Setor','controlCopies'), $columns, 'divTable' );
            $this->table    ->addAction('removeFromTable', 'table-delete.png', $module);

            $columns2 = array(
                 new MGridColumn( _M('Ações', $module),    'left', true, null, true, ''),
                 new MGridColumn( _M('Código da pessoa', $module), 'left', true, null, false, 'personId'),
                 new MGridColumn( _M('Pessoa'   , $module), 'left', true, null, true, 'personName')
                        );
            $this->table2    = new MAjaxTableRaw('person', _M('Lista de pessoa','controlCopies'), $columns2, 'divTable2' );
            $this->table2    ->addAction('removeFromTable2', 'table-delete.png', $module);

            parent::__construct( _M('Inserir', 'controlCopies'));
            $this->table    ->addAction('removeFromTable', 'removeFromTable', 'callAddTable', 'table-delete.png', 'controlCopies');
            if (($f = $this->page->request('cpaint_function')) != '')
            {
                $this->manager->getTheme()->clearContent();
                $this->$f($this->page->request('cpaint_argument'));
                $this->page->generateMethod = 'generateAjax';
            }
            else
            {
                if ( $this->function == 'insert' )
                {
                    $this->defineFields();
                    $this->toolBar->disableButton('tbBtnDelete');
                    $this->toolBar->disableButton('tbBtnPrint');
                }

                elseif ( $this->function == 'update' && ( MIOLO::_REQUEST('event') != 'tbBtnSave:click' ) )
                {
                    $this->defineFields();
                    $this->loadFields();
                    $this->toolBar->disableButton('tbBtnDelete');
                    $this->toolBar->disableButton('tbBtnPrint');
                }
                $this->setHelp(get_class($this), 'controlCopies', $this->action);
                $this->eventHandler();
                $this->setIcon($this->MIOLO->getUI()->getImage('controlCopies','printer-16x16.png') ) ;
            }
        }



        /**
        * Method that creates the fields, auto call by miolo (this occurs is all modes)
        **/
        public function defineFields()
        {
            if ( MIOLO::_REQUEST('event') != 'tbBtnSave:click' && $this->function == 'insert' )
            {
                $this->table->clear();
                $this->table2->clear();
            }
            $this->setShowPostButton(false);
            $this->toolBar      = new MToolBar('toolBar',$this->MIOLO->getActionURL('controlCopies',$this->action));
            $this->toolBar        ->disableButton('tbBtnPrint');
            $this->toolBar        ->disableButton('tbBtnDelete');
            $fields[]           = $this->toolBar;
            $fields[]           = new MHiddenField('printerId');
            $fields[]           = new MTextField('printerName', null, _M('Nome', 'controlCopies'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $validators[]       = new MRequiredValidator('printerName');
            $resourceLabel      = new MLabel( _M('Recurso físico','controlCopies').':');
            $resourceLabel      ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $resourceLabel      ->setClass('m-caption m-caption-required');
            $resourceID         = new MLookupTextField('physicalResourceId', $this->getFormValue('physicalResourceId',$data->physicalResourceId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'physicalResourceVersion, description', 'controlCopies','physicalResource', null, null, true);
            $resourceName       = new MTextField('description', $this->getFormValue('description',$data->description), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $resourceName       ->setReadOnly(true);
            $resourceVersion    = new MHiddenField('physicalResourceVersion');
            $hctResource        = new MHContainer('hctResource', array($resourceLabel, $resourceID, $resourceName, $resourceVersion));
            $fields[]           = $hctResource;
            $fields[]           = new MSeparator('');
            $sectorLabel        = new MLabel( _M('Código do setor','controlCopies').':');
            $sectorLabel        ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $sectorLabel        ->setClass('m-caption m-caption-required');
            $sectorId           = new MLookupTextField('sectorId', $this->getFormValue('sectorId',$data->sectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sdescription, email, isCoordinatorsSector', 'controlCopies','ccpSector', null, null, true);
            $sectorName         = new MTextField('sdescription', $this->getFormValue('sdescription',$data->sdescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $sectorName     ->setReadOnly(true);
            $hctSector          = new MHContainer('hctSector1', array($sectorLabel, $sectorId, $sectorName));
            $controls[]         = $hctSector;
            $controls[]         = new MButton('add', _M('Adicionar', 'controlCopies') , 'addTable()' );
            if ( $this->function == 'update' )
            {
                $searchData ->printerId = MIOLO::_REQUEST($this->require);
                $this->table->clear();
                if ( $itemData = $this->busSectorPrinter->searchSectorPrinter( $searchData , true) )
                {
                    $this->table->add($itemData);
                }
            }
            $controls[]     = new MDiv('divTable', $this->table);
            $panel          = new MBaseGroup('panel', _M('Setor', 'controlCopies'), $controls, 'vertical');
            $personLabel    = new MLabel( _M('Código da pessoa','controlCopies').':');
            $personLabel    ->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $personLabel    ->setClass('m-caption m-caption-required');
            $personID       = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'controlCopies','ccpPerson', null, null, true);
            $personName     = new MTextField('personName', $this->getFormValue('personName',$data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $hctPerson      = new MHContainer('hctPerson1', array($personLabel, $personID, $personName));
            $personName     ->setReadOnly(true);
            $pControls[]    = $hctPerson;
            $fields[]       = $panel;
            $pControls[]    = new MButton('add2', _M('Adicionar', 'controlCopies') , 'addTable2()' );
            if ( $this->function == 'update' )
            {
                $searchData2 ->printerId = MIOLO::_REQUEST($this->require);
                $this->table2->clear();
                if ( $itemData2 = $this->busPersonPrinter->searchPersonPrinter( $searchData2 , true) )
                {
                    $this->table2->add($itemData2);
                }
            }
            $pControls[]    = new MDiv('divTable2', $this->table2);
            $panel2         = new MBaseGroup('panel2', _M('Pessoa', 'controlCopies'), $pControls, 'vertical');
            $fields[]       = $panel2;
            $fields[]       = new MSeparator('');
            $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $this->setFields($fields);
            $this->setValidators($validators);
            $this->MIOLO->getRequiredJS4Ajax();
            $url            = str_replace('&amp;', '&',$this->manager->getCurrentURL());
            $sectorIdMessage= _M('Selecione um setor válido', 'controlCopies');
            $personIdMessage= _M('Selecione uma pessoa válida', 'controlCopies');
            $this->addJSCode(
            "
            // Add some item to table using ajax
            function addTable()
            {
                var sectorId     = document.getElementById('sectorId').value;
                var sdescription = document.getElementById('sdescription').value;
                if (sectorId != '' && sdescription != '')
                {
                    MIOLO_ajaxCall('$url', 'POST', 'callAddTable', getFieldValues(), callAddTable, 'TEXT');
                    document.getElementById('sectorId').value        = '';
                    document.getElementById('sdescription').value    = '';
                }
                else
                {
                    alert('$sectorIdMessage');
                }
            }

            // the return of ajax
            function callAddTable(result)
            {
                xGetElementById('divTable').innerHTML = result;
                MIOLO_parseAjaxJavascript(result);
            }

            // Add some item to table using ajax
            function addTable2()
            {
                var personId     = document.getElementById('personId').value;
                var personName   = document.getElementById('personName').value;
                if (personId != '' && personName != '')
                {
                    MIOLO_ajaxCall('$url', 'POST', 'callAddTable2', getFieldValues(), callAddTable2, 'TEXT');
                    document.getElementById('personId').value        = '';
                    document.getElementById('personName').value      = '';
                }
                else
                {
                    alert('$personIdMessage');
                }
            }

            // the return of ajax
            function callAddTable2(result)
            {
                xGetElementById('divTable2').innerHTML = result;
                MIOLO_parseAjaxJavascript(result);
            }
            "
            );
        }


        /**
        * Function called when user clicks add
        *
        */
        public function callAddTable($args)
        {
            $this->table->add(getAjaxFields($args));
            $this->table->generate(true);
        }


        /**
        * Response to the ajax call updateFromTable
        *
        */
        public function removeFromTable($data)
        {
            $info = $this->table->get($data[0]);
            if ($info->personSectorId)
            {
                $info->remove = true;
                $this->table->set($data[0],$info);
            }
            else
            {
                $this->table->remove($data[0]);
            }
            $this->table->generate(true);
        }


        /**
        * Function called when user clicks add
        *
        */
        public function callAddTable2($args)
        {
            $this->table2->add(getAjaxFields($args));
            $this->table2->generate(true);
        }


        /**
        * Response to the ajax call updateFromTable
        *
        */
        public function removeFromTable2($data)
        {
            $info = $this->table2->get($data[0]);
            if ($info->personPrinterId)
            {
                $info->remove = true;
                $this->table2->set($data[0],$info);
            }
            else
            {
                $this->table2->remove($data[0]);
            }
            $this->table2->generate(true);
        }


        /**
        * Event triggered when user chooses Save from the toolbar
        **/
        public function tbBtnSave_click($sender = null)
        {
            $action   = MIOLO::getCurrentAction();
            $function = MIOLO::_request('function');
            $data       = getTypesData('ccpPrinter');
            $goto       = SAGU::getStackBackUrl();
            $goto       = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL($module, $action, null, $opts);
            $opts       = array('event' => 'tbBtnNew_click', 'function' => 'insert');
            $gotoYes    = $this->MIOLO->getActionURL('controlCopies', $action, null, $opts);
            $temp       = $this->table->getItens();
            $temp2      = $this->table2->getItens();
            try
            {
                if ( $this->function == 'update' )
                {
                    if ($ok   = $this->business->updatePrinter( $data ))
                    {
                        if ($temp)
                        {
                            $ok = $this->busSectorPrinter->updateSectorPrinter($temp);
                        }
                        if ($temp2)
                        {
                            $ok = $this->busPersonPrinter->updatePersonPrinter($temp2);
                        }
                    }
                    if ( $ok )
                    {
                        $this->MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'),$goto);
                    }
                    else
                    {
                        $goto = $this->MIOLO ->getActionURL('controlCopies', $this->action);
                        $caption = _M('Erro','controlCopies');
                        $this->MIOLO ->error( MSG_RECORD_ERROR, $goto, $caption );
                    }
                }
                else
                {
                    $printerId       = $this->business->getNextVal();
                    $data->printerId = $printerId;
                    if( $ok = $this->business->insertPrinter( $data ) )
                    {
                        if ($temp)
                        {
                            $ok = $this->busSectorPrinter->insertSectorPrinter($temp,$printerId);
                        }
                        if ($temp2)
                        {
                            $ok = $this->busPersonPrinter->insertPersonPrinter($temp2,$printerId);
                        }
                    }
                    if ( $ok )
                    {
                        $this->MIOLO->question(SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED'), $gotoYes, $goto);
                    }
                    else
                    {
                        $goto = $this->MIOLO ->getActionURL('controlCopies', $this->action);
                        $caption = _M('Erro','controlCopies');
                        $this->MIOLO ->error( MSG_RECORD_ERROR, $goto, $caption );
                    }
                }
            }
            catch( EDatabaseException $e )
            {
                $this->addError( $e->getMessage() );
            }
        }


        /**
        * Event triggered when user chooses Delete from the toolbar
        **/
        public function tbBtnDelete_click($sender=NULL)
        {
            $action     = MIOLO::getCurrentAction();
            $data       = getTypesData('ccpPeriod');
            $opts       = array('event'            => 'tbBtnDelete_confirm',
                            'function'         => 'delete',
                            '_id' => MIOLO::_request('_id') );
            $gotoYes    = $this->MIOLO->getActionURL( 'controlCopies', $action, null, $opts );
            $goto       = SAGU::getStackBackUrl();
            $gotoNo     = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL('controlCopies', $action);
            $msg        = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
            $caption    = _M('Questão','controlCopies');
            $this->MIOLO->question($msg, $gotoYes, $gotoNo);
        }

        /**
        * Event triggered when user chooses Yes from the Delete prompt dialog
        **/
        public function tbBtnDelete_confirm($sender=NULL)
        {
            $action     = MIOLO::getCurrentAction();
            $ok         = $this->business->deletePrinter(MIOLO::_request('_id'));
            if ( $ok )
            {
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL('controlCopies', $action);
                $caption = _M('Informação','controlCopies');
                $this->MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), $goto);
            }
            else
            {
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $this->MIOLO->getActionURL('controlCopies', $action);
                $caption = _M('Erro','controlCopies');
                $this->MIOLO->error(_M('Erro executando a operação solicitada.','controlCopies'), $goto, $caption );
            }
        }


        /**
        * Method that loads the fields
        **/
        protected function loadFields()
        {
            $data = $this->business->getPrinter( MIOLO::_REQUEST($this->require) );
            $this->setData( $data);
        }
    }
?>
