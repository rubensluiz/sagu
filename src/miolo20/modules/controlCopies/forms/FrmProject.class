<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Rafael Dutra  [rdutra@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 27/07/2006
 *
 **/

class FrmProject extends MForm
{
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            parent::__construct(_M('Inserir', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

            $this->eventHandler();
        }
        else
        {
            parent::__construct(_M('Editar', $module));
            $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

            $this->eventHandler();
        }

    }

    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $function = MIOLO::_request('function');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,'main:register:project'));
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $this->defaultButton = false;

        $fields[]  = $toolBar;

        if ( in_array($function,array('update','delete')) )
        {
            $projectId = MIOLO::_request('projectId');
            $business  = new BusinessControlCopiesBusProject();
            $data      = $business->getProject($projectId);

            $fields[]  = new MTextLabel('projectId', $data->projectId, _M('Código do projeto',$module));
            $fields[]  = new MHiddenField('projectid', MIOLO::_request('projectId')); 
        }

        $fields[]  = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição', $module), '30');

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Última modificação',$module));

        }

        $fields[]  = new Separator();

        $this->setFields($fields);
    }

    public function getTypesData()
    {
        $data->description = $this->description->getValue();
        if ($this->projectId)
        {
            $data->projectId   = $this->projectid->getvalue();
        }

        return $data;
    }

    public function tbBtnSave_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $business = new BusinessControlCopiesBusProject();
        $values   = $this->getTypesData();

        if ( $function == 'update' )
        {
            $ok  = $business->updateProject($values);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
        }
        else
        {
            $data->date = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP') . ' '. SAGU::getParameter('BASIC', 'MASK_TIME_PHP'));
            $ok  = $business->insertProject($values);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
        }

        if ( $ok )
        {
            $opts = array('projectIdS' => $values->projectId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            if ( $function == 'update' )
            {
                $caption = _M('Informação',$module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'   => 'tbBtnNew_click',
                                'function' => 'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Questão',$module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
   } 
    
    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'            => 'tbBtnDelete_confirm',
                        'function'         => 'delete',
                        'projectId'        => MIOLO::_request('projectId') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business   = new BusinessControlCopiesBusProject();
        $projectId  = MIOLO::_request('projectId');
        $ok         = $business->deleteProject($projectId);

        if ( $ok )
        {
            $msg  = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

}
?>
