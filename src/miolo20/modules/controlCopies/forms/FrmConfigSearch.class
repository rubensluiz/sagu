<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basConfig table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Mauricio de Castro [mcastro@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 12/08/2005
 *
 **/

/**
 * Form to search the basConfig table
 */
class FrmConfigSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $this->module = 'basic';
        $module = $this->module;

        $this->home   = $data->home;

        parent::__construct(_M('Localizar',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
//        $toolBar->disableButton('tbBtnSearch');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Configuration', $this->home, 'parameters-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        $business = new BusinessBasicBusConfig();
        $parameterS = new MTextField('parameterS', $this->parameterS->value, _M('Parâmetro',$module), 20);
        $parameterS->setJsHint(_M('Informe o parâmetro',$module));
        $fields[] = $parameterS;

        $configValueS = new MTextField('configValueS', $this->configValueS->value, _M('Valor',$module), 20);
        $configValueS->setJsHint(_M('Informe a valor do parâmetro',$module));
        $fields[] = $configValueS;
        
        $descriptionS = new MTextField('descriptionS', $this->descriptionS->value, _M('Descrição',$module), 40);
        $descriptionS->setJsHint(_M('Informe a descrição do parâmetro',$module));
        $fields[] = $descriptionS;

        $typeS = new MComboBox('typeS', $this->typeS->value, _M('Tipo de campo',$module), $business->listTypes());
        $typeS->setJsHint(_M('Informe o tipo de campo',$module));
        $fields[] = $typeS;

        $fields[] = new MButton('btnSearch',_M('Localizar',$module));

        $this->setFields($fields);

        // get filters values
        $filters = new BasConfig;
        $filters->moduleConfig = $module;
        $filters->parameter    = $this->parameterS->value;
        $filters->content      = $this->configValueS->value;
        $filters->description  = $this->descriptionS->value;
        $filters->type         = $this->typeS->value;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdConfigSearch',$filters);
        $data = $business->searchConfig($filters);
        $grdResults->setData($data);
        $this->addField($grdResults);

        $this->page->onLoad('document.' . $this->name . '.parameterS.focus();');

    }

}

?>
