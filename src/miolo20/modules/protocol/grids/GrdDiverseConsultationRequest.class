<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCity table
 *
 * @author Alessandro Rodrigues Cruz [cpd@facimed.edu.br]
 *
 * $version: $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 23/03/2011
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdDiverseConsultationRequest extends SGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $module = MIOLO::getCurrentModule();
        $MIOLO = MIOLO::getInstance();

        $columns = array( new MGridColumn( _M('Código', $module), 'right', true, null, false, null, true ),
                          new MGridColumn( _M('Número da Solicitação', $module), 'right',  true, null, true, null, true ),
                          new MGridColumn( _M('Solicitante', $module), 'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Assunto', $module), 'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Setor Origem', $module), 'left',  true, null, false, null, true ),
                          new MGridColumn( _M('Setor Atual', $module), 'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Situação', $module),  'left',  true, null, true,null, true ),
                          new MGridColumn( _M('Código da situação', $module),  'left',  true, null, false, null, true ),
                          new MGridColumn( _M('Data da solicitação', $module),  'center',  true, null, true,null, true ),
                        );

        $primaryKey = array('requestId' => '%0%');
		
        parent::__construct($filters, $columns, 'GrdDiverseConsultationRequest', $primaryKey);
        
        $this->clearActions();
        $link = $MIOLO->getActionURL('protocol','main:process:request',NULL,array( 'function'=>'update','requestId'=>'%0%') );
        $this->addActionIcon( _M('Detalhes', $module ), 'find', $link );
        
        //Verifica se o usuário possui permissão de administrador
        if( $MIOLO->checkAccess('ptcFrmRequest', A_ADMIN) )
        {   
            $this->addActionIcon( _M('Cancelar', $module ), 'canceled.png', SForm::getAjaxAction('cancel_request', 'divCancelRequest', false) );
        }
        
        $this->setRowMethod($this, 'myRowMethod');
    }
    
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $module = MIOLO::getCurrentModule();                
        if( $row[7] == PtcRequest::STATUS_CANCELLED )
        {
            $actions[1]->value = 'canceled-disabled.png';
            $actions[1]->enabled = false;
        }
        else
        {
            $actions[1]->href = SForm::getAjaxAction('cancel_request', 'divCancelRequest', false, array('requestId'=>$row[0]), true, false);
            $actions[1]->value = 'canceled.png';
            $actions[1]->enabled = true;
        }
    }

}
?>
