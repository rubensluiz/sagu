<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel I. da Silva [nataniel@solis.com.br]
 *
 * @version $Id$
 *
 * @since
 * Class created on 15/10/2014
 * */

class PtcSubject extends SType
{
    public $userName;
    public $dateTime;
    public $ipAddress;
    public $subjectId;
    public $sectorId;
    public $description;
    public $taxValue;
    public $isActive;
    public $term;
    public $taxaPrimeiraSolicitacao;
    public $flag;
    
    /**
     * Verifica configurações do assunto e solicitações do usuário, retornando se deve ser cobrado a taxa na solicitação
     * 
     * @param type $data: $data->subjectId; $data->contractId; $data->personId;
     * @return type char 't' ou 'f'
     */
    public static function cobrarTaxaPrimeiraSolicitacao($data)
    {
        $result = false;
        
        $busSubject = new BusinessProtocolBusSubject();
        $subject = $busSubject->getSubject($data->subjectId);
        
        if ( $subject->taxaPrimeiraSolicitacao == DB_FALSE && strlen($data->contractId) > 0 )
        {
            // Obtém informações do contrato
            $busContract = new BusinessAcademicBusContract();
            $contrato = $busContract->getContract($data->contractId);
                        
            $filtersLearningPeriod = new stdClass();
            $filtersLearningPeriod->courseId = $contrato->courseId;
            $filtersLearningPeriod->courseVersion = $contrato->courseVersion;
            $filtersLearningPeriod->turnId = $contrato->turnId;
            $filtersLearningPeriod->unitId = $contrato->unitId;
            $filtersLearningPeriod->periodId = SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID');
            
            // Obtém informações do período vigente para o contrato
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $periodoLetivo = $busLearningPeriod->searchLearningPeriod($filtersLearningPeriod);
            
            $filters = new stdClass();
            $filters->subjectId = $data->subjectId;
            $filters->personId = $data->personId;
            $filters->startTime = $periodoLetivo[0][3]; // data inicial
            $filters->endTime = $periodoLetivo[0][4]; // data final
            $filters->courseId = $contrato->courseId;
            $filters->courseVersion = $contrato->courseVersion;
            $filters->turnId = $contrato->turnId;
            $filters->unitId = $contrato->unitId;
            $filters->notStatusId = PtcRequest::STATUS_CANCELLED;
            
            // Obtém solicitações para a ocorrência de curso da pessoa que estejam entre as datas do período letivo vigente para o contrato da pessoa
            $busRequestPtc = new BusinessProtocolBusRequestPtc();
            $requests = $busRequestPtc->searchRequest($filters, false);
                                    
            $result = (count($requests) >= 1) ? DB_TRUE : DB_FALSE; 
        }
                
        return $result;
    }
}