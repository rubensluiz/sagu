<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basEmployee table
 *
 * @author Alessandro Rodrigues da Cruz [cpd@facimed.edu.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 21/03/2011
 *
 **/

/**
 * Class to manipulate the basEmployee table
 **/
class BusinessProtocolBusDispatch extends sBusiness
{
    /**
     * Searches for request dispatches
     *
     * @param $requestId (integer): The request id to be searched
     *
     * @return (array): Array with the data retrieved
     **/
    public function searchDispatch($requestId)
    {
        $sql = ' SELECT TO_CHAR(A.dispatchDateTime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                        A.sectorId,
                        B.description,
                        A.username,
                        C.name,
                        A.description
                   FROM ptcdispatch A
             INNER JOIN basSector B
                     ON (B.sectorId = A.sectorId)
              LEFT JOIN ONLY basPerson C
                     ON (C.miolousername = A.username)
                  WHERE A.requestId = ?
               ORDER BY A.dispatchDateTime';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $requestId));

        return $result;
    }
    
    public function search($filters = null)
    {
        $sql = "SELECT requestid
                  FROM ptcdispatch A
            INNER JOIN basSector B
                    ON (B.sectorId = A.sectorId)
        LEFT JOIN ONLY basPerson C
                    ON (C.miolousername = A.username)";
        
        $where = "";
        if ( strlen( $filters->subjectId ) > 0)
        {
            $where .= ' AND A.subjectId = ? ';
            $args[] = $filters->subjectId;
        }
        
        if ( strlen( $filters->sectorId ) > 0 )
        {
            $where .= ' AND A.sectorId = ? ';
            $args[] = $filters->sectorId;
        }
        
        if ( strlen( $filters->level ) > 0 )
        {
            $where .= ' AND A.level = ? ';
            $args[] = $filters->level;
        }
        
        unset($result);

        if ( strlen( $where ) > 0)
        {
            $sql .= ' WHERE ' . substr($where, 4) . " ORDER By A.subjectId, A.level, A.sectorId";

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertDispatch($data)
    {
        $sql = 'INSERT INTO ptcdispatch
                            (requestId,
                             dispatchDateTime,
                             subjectId,
                             sectorId,
                             level,
                             forwardedSubjectId,
                             forwardedSectorId,
                             forwardedLevel,
                             description)
                     VALUES (?, now(), ?, ?, ?, ?, ?, ?, ?)';

        $args = array( $data->requestId,
                       $data->subjectId,
                       $data->sectorId,
                       $data->level,
                       $data->forwardedSubjectId,
                       $data->forwardedSectorId,
                       $data->forwardedLevel,
                       $data->description );
                       
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Gets the last dispatch registered for a request
     *
     * @param $requestId (integer): The request id to be searched
     *
     * @return (object): The dispatch data retrieved
     *
     **/
    public function getRequestLastDispatch($requestId)
    {
        $sql = 'SELECT requestId,
                       TO_CHAR(dispatchDateTime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       subjectId,
                       sectorId,
                       level,
                       forwardedSubjectId,
                       forwardedSectorId,
                       forwardedLevel,
                       description
                  FROM ptcdispatch
                 WHERE requestId = ?
              ORDER BY dispatchDateTime DESC LIMIT 1';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $requestId));

        $data = new PtcDispatch();

        list ( $data->requestId,
               $data->dispatchDateTime,
               $data->subjectId,
               $data->sectorId,
               $data->level,
               $data->forwardedSubjectId,
               $data->forwardedSectorId,
               $data->forwardedLevel,
               $data->description ) = $result[0];

        return $data;
    }
}
?>
