<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCity table
 *
 * @author Glaubert Francis Dumpierre [desenvolvimento@facimed.edu.br]
 *
 * $version: $Id$
 *
 * \b Maintainers: \n
 * Equipe Sagu [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 18/03/2011
 *
 **/

/**
 * Class to manipulate the ptc.requiredDocument table
 **/
 class BusinessProtocolBusRequiredDocument extends sBusiness
 {
    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return true if succed, otherwise False
     *
     **/
    public function insertRequiredDocument( $data )
    {
        $sql = 'INSERT INTO ptcrequireddocument 
                            ( subjectid, description, uploadrequired, descriptionrequired )
                     VALUES 
                            ( ?, ?, ?, ? )';

        $args = array( $data->subjectId,
                       $data->description,
                       $data->uploadRequired,
                       $data->descriptionRequired );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }
	
    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateRequiredDocument( $data )
    {
        $sql = 'UPDATE ptcrequireddocument 
                   SET subjectid = ?,
                       description = ?,
                       uploadrequired = ?, 
                       descriptionrequired = ?
                 WHERE requireddocumentid = ?';

        $args = array( $data->subjectId,
                       $data->description,
                       $data->uploadRequired,
                       $data->descriptionRequired,
                       $data->requiredDocumentId );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }
 	
    /**
     * Delete a record
     *
     * @param $requiredDocumentId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteRequiredDocument( $requiredDocumentId )
    {
        $sql = 'DELETE FROM ptcrequireddocument 
                      WHERE requireddocumentid = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $requiredDocumentId));

        return $result;
    }
	
    /**
     * Return a specific record from the database
     *
     * @param $ducmentRequiredId, $subjectId, $description (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getRequiredDocument( $data )
    {
        $sql = 'SELECT A.requireddocumentid,
                       A.subjectid,
                       A.description,
                       A.uploadrequired,
                       A.descriptionrequired,
                  FROM ptcrequireddocument AS A 
                 WHERE A.requireddocumentid = ?';

        $args = array($data->requiredDocumentId);

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $requiredDocument = new PtcRequiredDocument();

        list( $requiredDocument->requiredDocumentId,
              $requiredDocument->subjectId,
              $requiredDocument->description,
              $requiredDocument->uploadRequired,
              $requiredDocument->descriptionRequired ) = $result[0];

        return $requiredDocument;
    }
	
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchRequiredDocument( $filters )
    {
        $sql = 'SELECT A.requireddocumentid,
                       A.subjectid,
                       A.description,
                       A.uploadrequired,
                       A.descriptionrequired
                  FROM ptcrequireddocument AS A';

        $args = array();

        $where = '';

        if ( strlen( $filters->requiredDocumentId ) > 0 )
        {
            $where .= ' AND A.requireddocumentid = ?';
            $args[] = $filters->requiredDocumentId;
        }

        if ( strlen( $filters->subjectId ) > 0 )
        {
            $where .= ' AND A.subjectid = ? ';
            $args[] = $filters->subjectId;
        }

        if ( strlen( $filters->description ) > 0 )
        {
            $where .= ' AND A.description iLike ? )';
            $args[] = $filters->desciption.'%';			
        }

        unset($result);

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER By A.subjectid';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Lists the required documents of a subject
     *
     * @param $subjectId (integer): The subject id to get the required documents
     *
     * @return (array): An array containing the results
     **/
    public function listRequiredDocument($subjectId)
    {
        $sql = 'SELECT requiredDocumentId,
                       description,
                       uploadrequired,
                       descriptionrequired
                  FROM ptcrequiredDocument
                 WHERE subjectId = ?
              ORDER BY description';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $subjectId));

        return $result;
    }
 }
