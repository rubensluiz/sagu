<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCity table
 *
 * @author Glaubert Francis Dumpierre [desenvolvimento@facimed.edu.br]
 *
 * $version: $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 18/03/2011
 *
 **/

/**
 * Class to manipulate the ptc.request table
 **/
class BusinessProtocolBusRequestPtc extends sBusiness
{
    /**
     * Ultimo numero de solicitacao
     *
     * @var int
     */
    public $lastRequestNumber;

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return true if succed, otherwise False
     *
     **/
    public function insertRequest( $data )
    {
        //
        // Geracao automatica de numero da solicitacao
        //
        if ( SAGU::getParameter('PROTOCOL', 'REQUEST_AUTOMATIC_NUMBER') == 'YES' )
        {
            $query = SDatabase::query('SELECT ptcgeneraterequestnumber(?)', array($data->subjectId));
            $data->number = $query[0][0];
        }
        //
        $this->lastRequestNumber = $data->number;
        
        //
        $sql = 'SELECT nextval(\'ptcrequest_requestid_seq\')';

        $seq = $this->getDatabase()->query($sql);

        $sql = 'INSERT INTO ptcrequest
                            (requestid,
                             personid,
                             sectorid,
                             subjectid,
                             statusid,
                             currentSubjectId,
                             currentSectorId,
                             currentLevel,
                             number,
                             description,
                             starttime,
                             courseId,
                             courseVersion,
                             turnId,
                             unitId,
                             contractId,
                             inscricaoId,
                             perfil) 
                      VALUES 
                             (?,?,?,?,?,?,?,?,?,?,now(),?,?,?,?, ?, ?, ?)';

        $args = array( $seq[0][0],
                       $data->personId,
                       $data->sectorId,
                       $data->subjectId,
                       $data->statusId,
                       $data->currentSubjectId,
                       $data->currentSectorId,
                       $data->currentLevel,
                       $data->number,
                       $data->description,
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->contractId,
                       $data->inscricaoId,
                       $data->perfil);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        $requestId = NULL;
        if ( $result )
        {
            $requestId = $seq[0][0];
        }
        
        return $requestId;
    }

    
    
    /**
     * Updates a request invoiceId
     *
     * @param $requestId Integer
     * @param $invoiceId Integer
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateRequestInvoice($requestId, $invoiceId)
    {
        $sql = 'UPDATE ptcrequest
                   SET invoiceId = ?
                 WHERE requestId = ?';

        $args = array($invoiceId, $requestId);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }
    
    
    
    /**
     * Updates a request current sector and level
     *
     * @param $requestId (integer): The request id to be updated
     * @param $newSectorId (integer): The new sector id
     * @param $newLevel (integer): The new level
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateRequestSector($requestId, $newSectorId, $newLevel)
    {
        $sql = 'UPDATE ptcrequest
                   SET currentSectorId = ?,
                       currentLevel = ?
                 WHERE requestId = ?';

        $args = array($newSectorId, $newLevel, $requestId);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Updates the request status
     *
     * @param $requestId (integer): The request id to be updated
     * @param $newStatusId (integer): The new status id
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateRequestStatus($requestId, $newStatusId)
    {
        $sql = 'UPDATE ptcrequest
                   SET statusId = ?
                 WHERE requestId = ?';
        
        $args = array($newStatusId, $requestId);
        
        $sqls = SAGU::prepare($sql, $args);
        
        for ($i = 0; $i < count($sqls); $i++)
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }
	
    /**
     * Delete a record
     *
     * @param $requestId (integer): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/

    public function deleteRequest( $requestId )
    {
        $this->beginTransaction();

        $sql = 'DELETE FROM basFile
                      WHERE fileId IN (SELECT fileId
                                         FROM ptcdocument
                                        WHERE requestId = ?)';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $requestId));

        $sql = 'DELETE FROM ptcdocument
                      WHERE requestid = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $requestId));

        $sql = 'DELETE FROM ptcrequest
                      WHERE requestid = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $requestId));

        return $this->commit();
    }

    /**
     * Return a specific record from the database
     *
     * @param $requestId $personId $subjectId $statusId $currentSubjectId $currentSectorId $currentLevel (integer), $number $description (string) $startTime $endTime (time): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function searchRequest( $data, $datasExatas = true )
    {
        $sql = 'SELECT A.requestid,
                       A.description,
                       A.personid,
                       A.sectorId,
                       A.subjectid,
                       A.number,
                       A.statusid,
                       A.currentsubjectid,
                       A.currentsectorid,
                       A.currentlevel,
                       timestamptouser(A.starttime) AS starttime,
                       timestamptouser(A.endtime) AS endtime,
                       A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       A.contractId,
                       A.inscricaoId,
                       A.perfil
                  FROM ptcrequest AS A ';

        $where = '';

        if ( strlen( $data->requestId ) > 0 )
        {
            $where .= ' AND A.requestid = ? ';
            $args[] = $data->requestId;
        }
        
        if ( strlen( $data->invoiceId ) > 0 )
        {
            $where .= ' AND A.invoiceid = ? ';
            $args[] = $data->invoiceId;
        }

        if ( strlen( $data->personId ) > 0 )
        {
            $where .= ' AND A.personid = ? ';
            $args[] = $data->personId;
        }

        if ( strlen( $data->sectorId ) > 0 )
        {
            $where .= ' AND A.sectorid = ? ';
            $args[] = $data->sectorId;
        }

        if ( strlen( $data->subjectId ) > 0 )
        {
            $where .= ' AND A.subjectid = ? ';
            $args[] = $data->subjectId;
        }

        if ( strlen( $data->statusId ) > 0 )
        {
            $where .= ' AND A.statusid = ? ';
            $args[] = $data->statusId;
        }
        
        if ( strlen( $data->notStatusId ) > 0 )
        {
            $where .= ' AND A.statusid <> ? ';
            $args[] = $data->notStatusId;
        }

        if ( strlen( $data->currentSubjectId ) > 0 )
        {
            $where .= ' AND A.currentsubjectid = ? ';
            $args[] = $data->currentSubjectId;
        }

        if ( strlen( $data->currentSectorId ) > 0 )
        {
            $where .= ' AND A.currentsectorid = ? ';
            $args[] = $data->currentSectorId;
        }

        if ( strlen( $data->currentLevel ) > 0 )
        {
            $where .= ' AND A.currentlevel = ? ';
            $args[] = $data->currentLevel;
        }

        if ( strlen( $data->number ) > 0 )
        {
            $where .= ' AND A.number iLike ? ';
            $args[] = $data->number.'%';
        }

        if ( strlen( $data->description ) > 0 )
        {
            $where .= ' AND A.description iLike ? ';
            $args[] = '%' . $data->description . '%';
        }

        if ( strlen( $data->startTime ) > 0 )
        {
            $condicao = !$datasExatas ? ' A.starttime::DATE >= ' : ' A.starttime = ';
            $where .= " AND {$condicao} ? ";
            $args[] = $data->startTime;
        }

        if ( strlen( $data->endTime ) > 0 )
        {
            $condicao = !$datasExatas ? ' CASE WHEN A.endtime IS NOT NULL THEN A.endtime <= ? ELSE TRUE END' : ' A.endtime = ? ';
            $where .= " AND {$condicao} ";
            $args[] = $data->endTime;
        }
        
        if ( strlen( $data->courseId ) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $data->courseId;
        }
        
        if ( strlen( $data->courseVersion ) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $data->courseVersion;
        }
        
        if ( strlen( $data->turnId ) > 0 )
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $data->turnId;
        }
        
        if ( strlen( $data->unitId ) > 0 )
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $data->unitId;
        }
        
        if ( strlen( $data->contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ? ';
            $args[] = $data->contractId;
        }
        
        if ( strlen( $data->inscricaoId ) > 0 )
        {
            $where .= ' AND A.inscricaoId = ? ';
            $args[] = $data->inscricaoId;
        }
        
        if ( strlen( $data->perfil ) > 0 )
        {
            $where .= ' AND A.perfil = ? ';
            $args[] = $data->perfil;
        }

        unset($result);

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER By A.description ';
                                    
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
	
    public function searchDiverseConsultationRequest($data, $isCoordinator = false)
    {
        $sql = 'SELECT A.requestid,
                       A.number,
                       getpersonname(A.personId),
                       C.description,
                       G.description,
                       D.description,
                       B.description,
                       A.statusId,
                       to_char(A.starttime, \'DD/MM/YYYY HH24:MI\') as date
                  FROM ptcrequest A
            INNER JOIN ptcrequestStatus B
                    ON (B.requestStatusId = A.statusId)
            INNER JOIN ptcsubject C
                    ON (C.subjectId = A.subjectId)
             LEFT JOIN basSector D
                    ON (D.sectorId = A.currentSectorId)
             LEFT JOIN basSector G
                    ON (G.sectorId = A.sectorId) ';

        $where = '';

        if ( strlen( $data->numberRequest ) > 0 )
        {
            $where .= ' AND A.number ilike ? ';
            $args[] = $data->numberRequest;
        }

        if ( $isCoordinator )
        {
            if ( strlen( $data->personId ) > 0 )
            {
                $where .= ' AND ( A.courseId, 
                                  A.courseVersion, 
                                  A.turnId, 
                                  A.unitId ) IN ( SELECT courseId,
						         courseVersion,
						         turnId,
						         unitId
                                                    FROM acdcoursecoordinator 
                                                   WHERE coordinatorid = ?
                                                     AND ( CASE WHEN beginDate IS NOT NULL 
                                                                THEN
                                                                     CASE WHEN endDate IS NOT NULL
                                                                          THEN
                                                                               (A.startTime::DATE BETWEEN beginDate AND endDate)
                                                                          ELSE
                                                                               (A.startTime::DATE >= beginDate) 
                                                                     END
                                                                ELSE
                                                                     FALSE
                                                           END ) ) ';
                $args[] = $data->personId;
            }
        }
        else if ( strlen( $data->personId ) > 0 )
        {
            $where .= ' AND A.personid = ? ';
            $args[] = $data->personId;
        }
        
        if ( strlen($data->contractId) > 0 )
        {
            $busContract = new BusinessAcademicBusContract();
            $contract = $busContract->getContract($data->contractId);
            
            $where .= ' AND A.courseId = ?
                        AND A.courseVersion = ?
                        AND A.turnId = ?
                        AND A.unitId = ? ';
            $args[] = $contract->courseId;
            $args[] = $contract->courseVersion;
            $args[] = $contract->turnId;
            $args[] = $contract->unitId;
        }

        if ( strlen( $data->beginSectorId ) > 0 )
        {
            $where .= ' AND G.sectorid = ? ';
            $args[] = $data->beginSectorId;
        }

        if ( strlen( $data->currentSectorId ) > 0 )
        {
            $where .= ' AND A.currentsectorid = ? ';
            $args[] = $data->currentSectorId;
        }
        
        if ( is_array($data->requestStatusId) )
        {
            $where .= ' AND A.statusid IN (\'' . implode("','", $data->requestStatusId) . '\') ';
        }
        elseif ( strlen( $data->requestStatusId ) > 0 )
        {
            $where .= ' AND A.statusid = ? ';
            $args[] = $data->requestStatusId;
        }

        if ( strlen( $data->subjectId ) > 0 )
        {
            $where .= ' AND A.subjectId = ? ';
            $args[] = $data->subjectId;
        }
        
        unset($result);

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $sql .= ' ORDER BY A.statusId IN (' . PtcRequest::STATUS_RUNNING . ', ' . PtcRequest::STATUS_OPEN . ') DESC, A.starttime DESC ';
            
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    public function getRequest($requestId)
    {
        $sql = 'SELECT requestid,
                       personid,
                       sectorId,
                       subjectid,
                       statusid,
                       currentsubjectid,
                       currentsectorid,
                       currentlevel,
                       number,
                       description,
                       starttime,
                       endtime,
                       courseId,
                       courseVersion,
                       turnId,
                       unitId,
                       username,
                       datetime,
                       ipaddress,
                       contractid,
                       inscricaoid,
                       perfil
                  FROM ptcrequest
                 WHERE requestid = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $requestId));

        $request = new PtcRequest();
		
        list( $request->requestId,
              $request->personId,
              $request->sectorId,
              $request->subjectId,
              $request->statusId,
              $request->currentSubjectId,
              $request->currentSectorId,
              $request->currentLevel,
              $request->number,
              $request->description,
              $request->startTime,
              $request->endTime,
              $request->courseId,
              $request->courseVersion,
              $request->turnId,
              $request->unitId,
              $request->userName,
              $request->dateTime,
              $request->ipAddress,
              $request->contractId,
              $request->inscricaoId,
              $request->perifl ) = $result[0];

        return $request;
    }

    /**
     * Gets all data of a request
     *
     * @author Leovan Tavares da Silva [leovan@solis.coop.br]
     *
     * @return (object): Object containing the data
     *
     **/
    public function getRequestComplete($requestId)
    {
        $sql = 'SELECT A.requestId,
                       A.personId,
                       getpersonname(A.personId),
                       A.subjectId,
                       C.description,
                       A.statusId,
                       B.description,
                       A.currentSubjectId,
                       A.currentSectorId,
                       D.description,
                       A.currentLevel,
                       A.number,
                       A.description,
                       TO_CHAR(A.startTime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       TO_CHAR(A.endTime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.userName,
                       E.name,
                       A.sectorId,
                       F.description,
                       ROUND(C.taxValue,' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                       A.dateTime,
                       A.ipAddress,
                       A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       A.contractId,
                       A.inscricaoId,
                       A.perfil,
                       A.invoiceid
                  FROM ptcrequest A
            INNER JOIN ptcrequestStatus B
                    ON (B.requestStatusId = A.statusId)
            INNER JOIN ptcsubject C
                    ON (C.subjectId = A.subjectId)
             LEFT JOIN basSector D
                    ON (D.sectorId = A.currentSectorId)             
             LEFT JOIN ONLY basPhysicalPerson E
                    ON (E.mioloUserName = A.userName)
             LEFT JOIN basSector F
                    ON (F.sectorId = A.sectorId)
                 WHERE A.requestId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $requestId));

        $request = new stdClass();

        list( $request->requestId,
              $request->personId,
              $request->personName,
              $request->subjectId,
              $request->subjectDescription,
              $request->statusId,
              $request->statusDescription,
              $request->currentSubjectId,
              $request->currentSectorId,
              $request->currentSectorName,
              $request->currentLevel,
              $request->number,
              $request->description,
              $request->startTime,
              $request->endTime,
              $request->userName,
              $request->employeeName,
              $request->sectorId,
              $request->sectorName,
              $request->taxValue,
              $request->dateTime,
              $request->ipAddress,
              $request->courseId,
              $request->courseVersion,
              $request->turnId,
              $request->unitId,
              $request->contractId,
              $request->inscricaoId,
              $request->perifl,
              $request->invoiceId  ) = $result[0];

        return $request;
    }

    /**
     * Searches for open requests waiting payment
     *
     * @author Leovan Tavares da Silva [leovan@solis.coop.br]
     *
     * @return (array): Array with the data retrieved
     *
     **/
    public function searchOpenedRequests($personId)
    {
        $sql = ' SELECT A.requestId,
                        A.number,
                        B.description,
                        TO_CHAR(A.startTime, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        ROUND(B.taxvalue, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
                   FROM ptcRequest A
             INNER JOIN ptcSubject B
                     ON (B.subjectId = A.subjectId)
                  WHERE A.personId = ?
                    AND A.statusId = ?
               ORDER BY A.startTime';

        $args = array($personId, PtcRequest::STATUS_OPEN);

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
      /**
     * Searches for open requests waiting payment
     *
     * @author Leovan Tavares da Silva [leovan@solis.coop.br]
     *
     * @return (array): Array with the data retrieved
     *
     **/
    public function searchAllRequests($personId)
    {
        $sql = ' SELECT A.requestId,
                        A.number,
                        B.description,
                        TO_CHAR(A.startTime, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        ROUND(B.taxvalue, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
                   FROM ptcRequest A
             INNER JOIN ptcSubject B
                     ON (B.subjectId = A.subjectId)
                  WHERE A.personId = ?
                    AND A.statusId = ?
               ORDER BY A.startTime';

        $args = array($personId, NULL);

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Closes a request, generating the finance data and starting the request workflow
     *
     * @param (integer): The request's id to be closed
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function closeRequest($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busInvoice = new BusinessFinanceBusReceivableInvoice();
        $busDefaultOperations = new BusinessFinanceBusDefaultOperations();
        $busOperation = new BusinessFinanceBusOperation();
        $busEntry = new BusinessFinanceBusEntry();

        //Obtém a operação padrão para taxas de protocolo
        $defaultOperations = $busDefaultOperations->getDefaultOperations();
        $operation = $busOperation->getOperation($defaultOperations->protocolOperation);

        //Obtém os dados da solicitação
        $requestData = $this->getRequestComplete($data->requestId);

        //Dados para o título referente a taxa
        $invoiceData = new FinReceivableInvoice();
        $invoiceData->personId = $requestData->personId;
        $invoiceData->accountSchemeId = SAGU::getParameter('protocol', 'PROTOCOL_DEFAULT_ACCOUNT_SCHEME_ID');
        $invoiceData->costCenterId = SAGU::getParameter('protocol', 'PROTOCOL_DEFAULT_COST_CENTER');
        $invoiceData->parcelNumber = 1;
        $invoiceData->emissionDate = SAGU::getDateNow();
        $invoiceData->maturityDate = SAGU::getDateNow();
        $invoiceData->emissionTypeId = SAGU::getParameter('basic', 'DEFAULT_EMISSION_TYPE_ID');
        $invoiceData->value = SAGU::formatNumber($requestData->taxValue);
        $invoiceData->policyId = SAGU::getParameter('protocol', 'PROTOCOL_DEFAULT_POLICY_ID');
        $invoiceData->bankAccountId = SAGU::getParameter('basic', 'DEFAULT_BANK_ACCOUNT_ID');
        $invoiceData->comments = $operation->description;
        $invoiceData->incomeSourceId = SAGU::getParameter('protocol', 'PROTOCOL_INCOME_SOURCE_ID');
        $invoiceData->referenceMaturityDate = SAGU::getDateNow();

        $data->invoiceId = $busInvoice->insertReceivableInvoice($invoiceData);
        $invoiceData->invoiceId = $data->invoiceId;

        //Lançamento da taxa
        $entry = new FinEntry();
        $entry->invoiceId = $invoiceData->invoiceId;
        $entry->operationId = $operation->operationId;
        $entry->entryDate = SAGU::getDateNow();
        $entry->value = $requestData->taxValue;
        $entry->costCenterId = SAGU::getParameter('protocol', 'PROTOCOL_DEFAULT_COST_CENTER');
        $entry->comments = _M('Gerado a partir da solicitação @1', $module, $requestData->number);
        
        $this->updateRequestInvoice($requestData->requestId, $data->invoiceId);

        $result = $busInvoice->insertEntry( $entry );

        //Baixa
        if( !$data->notClose )
        {
            if ($busInvoice->closeInvoice($data))
            {
               $this->updateRequestStatus($requestData->requestId, PtcRequest::STATUS_RUNNING);

                return $invoiceData->invoiceId;
            }
            else
            {
                return null;
            }
        }
        else
        {
            return $invoiceData->invoiceId;
        }
    }
}
?>
