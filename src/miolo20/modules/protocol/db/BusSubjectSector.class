<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCity table
 *
 * @author Glaubert Francis Dumpierre [desenvolvimento@facimed.edu.br]
 *
 * $version: $Id$
 *
 * \b Maintainers: \n
 * Equipe Sagu [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 18/03/2011
 *
 **/

/**
 * Class to manipulate the ptc.subjectsector table
 **/
class BusinessProtocolBusSubjectSector extends sBusiness
{
    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return true if succed, otherwise False
     *
     **/
    public function insertSubjectSector( $data )
    {	
        $sql = 'INSERT INTO ptcsubjectsector
                            (subjectid,
                             sectorid,
                             level,
                             maxdays,
                             maxtime,
                             paraCoordenador,
                             permiteFecharProtocolo) 
                     VALUES (?,?,?,?,?,?,?)';

        $args = array( $data->subjectId, 
                       $data->sectorId,
                       $data->level,
                       $data->maxDays,
                       $data->maxTime,
                       $data->paraCoordenador,
                       $data->permiteFecharProtocolo);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }
	
    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateSubjectSector( $data )
    {		
        $sql = 'UPDATE ptcsubjectsector 
                   SET maxdays = ?,
                       maxtime = ?,
                       paraCoordenador = ?,
                       permiteFecharProtocolo = ?
                 WHERE subjectid = ? 
                   AND sectorid = ? 
                   AND level = ?';

        $args = array( $data->maxDays,
                       $data->maxTime,
                       $data->paraCoordenador,
                       $data->permiteFecharProtocolo,
                       $data->subjectId,
                       $data->sectorId,
                       $data->level );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }
	
    /**
     * Delete a record
     *
     * @param $subjectId, $sectorId, $level (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteSubjectSector( $data )
    {
        $sql = 'DELETE FROM ptcsubjectsector 
                      WHERE subjectid = ?
                        AND sectorid = ?
                        AND level = ?';

        $args = array( $data->subjectId, 
                       $data->sectorId, 
                       $data->level );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return result;
    }
	
    /**
     * Return a specific record from the database
     *
     * @param $subjectId, $sectorId, $level (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSubjectSector( $data )
    {
        $sql = 'SELECT A.subjectid,
                       A.sectorid,
                       A.level,
                       A.maxdays,
                       A.maxtime,
                       A.paraCoordenador,
                       A.permiteFecharProtocolo
                  FROM ptcsubjectsector AS A 
                 WHERE 1 = 1';

        $args = array( $data->subjectId, 
                       $data->sectorId,
                       $data->level );

        $result	= $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $sector = new PtcSubjectSector();

        list ( $sector->subjectId,
               $sector->sectorId,
               $sector->level,
               $sector->maxDays,
               $sector->masTime,
               $sector->paraCoordenador,
               $sector->permiteFecharProtocolo) = $result[0];

        return $sector;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSubjectSector( $filters )
    {
        $sql = 'SELECT A.subjectid, 
                       A.sectorid,
                       B.description,
                       A.level,
                       A.maxdays,
                       A.maxtime,
                       A.paraCoordenador,
                       A.permiteFecharProtocolo
                  FROM ptcsubjectsector A
            INNER JOIN basSector B
                    ON (B.sectorId = A.sectorId)';

        $where = "";

        if ( strlen( $filters->subjectId ) > 0)
        {
            $where .= ' AND A.subjectId = ? ';
            $args[] = $filters->subjectId;
        }

        if ( strlen( $filters->sectorId ) > 0)
        {
            $where .= ' AND A.sectorId = ? ';
            $args[] = $filters->sectorId;
        }

        if ( strlen( $filters->level ) > 0)
        {
            $where .= ' AND A.level = ? ';
            $args[] = $filters->level;
        }

        unset($result);

        if ( strlen( $where ) > 0)
        {
            $sql .= ' WHERE ' . substr($where, 4) . " ORDER By A.subjectId, A.level, A.sectorId";

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Searches the sectors available for a subject in a level
     *
     * @param $subjectId (integer): The subject id
     * @param $level (integer): The level to be searched
     *
     * @return (array): An array containing the search results
     **/
    public function getSubjectSectorByLevel($subjectId, $level)
    {
        $sql = 'SELECT A.sectorId,
                       B.description
                  FROM ptcsubjectsector A
            INNER JOIN bassector B
                    ON (B.sectorId = A.sectorId)
                 WHERE A.subjectId = ?
                   AND A.level = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($subjectId, $level)));

        return $result;
    }
    
    /**
     * Verifica se quem está inserindo o parecer do protocolo pode fechar o 
     * protocolo no meio do caminho.
     * 
     * @param int $subjectId
     * @param int $sectorId
     * @param int $level
     * @return boolean
     */
    public function permiteFecharProtocolo($subjectId, $level)
    {
        $sql = "SELECT permiteFecharProtocolo
                  FROM ptcSubjectSector
                 WHERE subjectId = ?
                   AND level = ? ";
        
        $args[] = $subjectId;
        $args[] = $level;
        
        $return = SDatabase::query($sql, $args);
        
        return $return[0][0] == DB_TRUE;
    }
}
?>
