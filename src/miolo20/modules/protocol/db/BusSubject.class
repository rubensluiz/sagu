<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basEmployee table
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 12/03/2011
 *
 **/

/**
 * Class to manipulate the basEmployee table
 **/
class BusinessProtocolBusSubject extends sBusiness
{
    const TIPO_ATIVO_NAO = 'N';
    const TIPO_ATIVO_INTERNO = 'I';
    const TIPO_ATIVO_PORTAL = 'P';
    const TIPO_ATIVO_AMBOS = 'A';
    
    const DISPONIVEL_PROFESSOR = 'P';
    const DISPONIVEL_ALUNO = 'A';
    const DISPONIVEL_COORDENADOR = 'C';
    const DISPONIVEL_RESIDENTE = 'R';
    const DISPONIVEL_PRECEPTOR = 'E';

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listSubject()
    {
        $db = $this->getDatabase();
        $sql = 'SELECT A.subjectid,
                       A.description
                  FROM ptcSubject A
              ORDER BY A.description';

        $ret = $db->query($sql);

        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $employeeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSubject($subjectId)
    {
        $sql = 'SELECT subjectid,
                       description,
                       sectorid,
                       ROUND(taxvalue, GETPARAMETER(\'BASIC\', \'REAL_ROUND_VALUE\')::int),
                       isactive,
                       username,
 	               datetime,
 	               ipaddress,
 	               term,
                       showdescription,
                       descriptionrequired,
                       taxaPrimeiraSolicitacao
                  FROM ptcsubject
                 WHERE subjectid = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $subjectId));

        $subject = new PtcSubject();
        
        list ( $subject->subjectId,
               $subject->description,
               $subject->sectorId,
               $subject->taxValue,
               $subject->isActive,
               $subject->userName,
               $subject->dateTime,
               $subject->ipAddress,
               $subject->term,
               $subject->showDescription,
               $subject->descriptionRequired,
               $subject->taxaPrimeiraSolicitacao ) = $result[0];

        
        $sql = ' SELECT availableto FROM ptcsubjectavailableto WHERE subjectid = ? ';
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $subjectId));
        foreach( $result as $line )
        {
            if ( $line[0] == BusinessProtocolBusSubject::DISPONIVEL_ALUNO )
            {
                $subject->subjectAvailableTo_0 = $line[0];
            }
            
            if ( $line[0] == BusinessProtocolBusSubject::DISPONIVEL_PROFESSOR  )
            {
                $subject->subjectAvailableTo_1 = $line[0];
            }
            
            if ( $line[0] == BusinessProtocolBusSubject::DISPONIVEL_COORDENADOR  )
            {
                $subject->subjectAvailableTo_2 = $line[0];
            }
            if ( $line[0] == BusinessProtocolBusSubject::DISPONIVEL_RESIDENTE  )
            {
                $subject->subjectAvailableTo_3 = $line[0];
            }
            if ( $line[0] == BusinessProtocolBusSubject::DISPONIVEL_PRECEPTOR  )
            {
                $subject->subjectAvailableTo_4 = $line[0];
            }
        }
        
        return $subject;
    }

    public function searchSubject($filters)
    {
        $sql = 'SELECT A.subjectid,
                       A.description,
                       B.description,
                       ROUND(A.taxvalue, GETPARAMETER(\'BASIC\', \'REAL_ROUND_VALUE\')::int),
                       A.term,
                       A.isactive,
                       A.showdescription,
                       A.descriptionrequired
                  FROM ptcsubject A
            INNER JOIN bassector B
                    ON (A.sectorid = B.sectorid)';

        $where = '';
		
    	if ( strlen($filters->subjectId) > 0 )
        {
            $where .= ' AND A.subjectid =' . $filters->subjectId;
        }
        
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND A.description ILIKE \'%' . $filters->description . '%\' ';
        }
        
    	if ( strlen($filters->sectorId) > 0 )
        {
            $where .= ' AND A.sectorid =' . $filters->sectorId;
        }
        
    	if ( strlen($filters->taxValue) > 0 )
        {
            $where .= ' AND A.taxValue =' . $filters->taxValue;
        }
        
        if ( is_array($filters->isActive) )
        {
            $where .= ' AND A.isactive IN (\'' . implode("','", $filters->isActive) . '\') ';
        }
    	elseif ( strlen($filters->isActive) > 0 )
        {
            $where .= ' AND A.isactive =\'' . $filters->isActive. '\' ';
        }
        
    	if ( strlen($filters->term) > 0 )
        {
            $where .= ' AND A.term =\'' . $filters->term. '\' ';
        }
        
        if ( strlen($filters->availableTo) > 0 )
        {
            $where .= " AND A.subjectid IN (SELECT subjectid FROM ptcsubjectavailableto WHERE availableto = '{$filters->availableTo}') ";
        }
		
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.description';
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSubject($data)
    {
        $MIOLO = MIOLO::getInstance();

        $sql = 'SELECT nextVal(\'ptcsubject_subjectid_seq\')';
        $seq = $this->getDatabase()->query($sql);

        $sql = 'INSERT INTO ptcsubject
                            (subjectId,
                             sectorId,
                             description,
                             taxvalue,
                             isactive,
                             term,
                             showdescription,
                             descriptionrequired,
                             taxaPrimeiraSolicitacao)
                     VALUES (?,?,?,?,?,?,?,?,?)';

        $args = array( $seq[0][0],
                       $data->sectorId,
                       $data->description,
                       $data->taxValue,
                       $data->isActive,
                       $data->term,
                       $data->showDescription,
                       $data->descriptionRequired ? $data->descriptionRequired : 'f',
                       $data->taxaPrimeiraSolicitacao);
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        if ( $result )
        {
            foreach( $data->subjectAvailableTo as $subjectAvailableTo )
            {
                if ( strlen($subjectAvailableTo) > 0 )
                {
                    $sql = ' INSERT INTO ptcsubjectavailableto (subjectid, availableto) VALUES (?,?) ';
                    $args = array($seq[0][0], $subjectAvailableTo);
                    $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
                }
            }
        }

        return $seq[0][0];
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateSubject($data)
    {
        $sql = 'UPDATE ptcsubject
                   SET sectorId	= ?,
                       description = ?,
                       taxvalue = ?,
                       isActive	= ?,
                       username	= ?,
                       datetime	= ?,
                       ipaddress = ?,
                       term = ?,
                       showdescription = ?,
                       descriptionrequired = ?,
                       taxaPrimeiraSolicitacao = ?
                 WHERE subjectid = ?';

        $args = array( $data->sectorId,
                       $data->description,
                       $data->taxValue,
                       $data->isActive,
                       $data->userName,
                       $data->dateTime,
                       $data->ipAddress,
                       $data->term,
                       $data->showDescription,
                       $data->descriptionRequired ? $data->descriptionRequired : 'f',
                       $data->taxaPrimeiraSolicitacao,
                       $data->subjectId );
		
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }
        
        $sql = ' DELETE FROM ptcsubjectavailableto WHERE subjectid = ? ';
        $result = $db->execute(SAGU::prepare($sql, $data->subjectId));
        foreach( $data->subjectAvailableTo as $subjectAvailableTo )
        {
            if ( strlen($subjectAvailableTo) > 0 )
            {
                $sql = ' INSERT INTO ptcsubjectavailableto (subjectid, availableto) VALUES (?,?) ';
                $args = array($data->subjectId, $subjectAvailableTo);
                $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
            }
        }

        return $result;
    }
    
    /**
     * Delete a record
     *
     * @param $employeeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteSubject($subjectId)
    {        
        $sql = 'DELETE FROM ptcsubjectSector WHERE subjectId = ?';
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $subjectId));
        
        $sql = 'DELETE FROM ptcrequiredDocument WHERE subjectId = ?';
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $subjectId));
        
        $sql = 'DELETE FROM ptcsubject WHERE subjectid = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $subjectId));
    }
    
    public function obterListaComboAtivo()
    {
        return array(
            self::TIPO_ATIVO_NAO => 'Não',
            self::TIPO_ATIVO_INTERNO => 'Somente interno',
            self::TIPO_ATIVO_PORTAL => 'Somente no portal',
            self::TIPO_ATIVO_AMBOS => 'Interno e no portal'
        );
    }
}
?>
