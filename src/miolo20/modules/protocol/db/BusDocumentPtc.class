<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for ptcDocument table
 *
 * @author Bruno Lazaro dos Santos [brunus.ls@gmail.com]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 18/03/2011
 *
 **/

/**
 * Class to manipulate the basEmployee table
 **/
class BusinessProtocolBusDocumentPtc extends sBusiness
{
    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertDocument($data)
    {
        $MIOLO = MIOLO::getInstance();        

        $sql = 'INSERT INTO ptcdocument
                            (requestId,
                             description,
                             fileId)
                     VALUES (?,?,?)';

        $args = array( $data->requestId,
                       $data->description,
                       $data->fileId );
                       
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateDocument($data)
    {
        $sql = 'UPDATE ptcdocument
                   SET description = ?,
                       filePath = ?,
                 WHERE documentId = ?';

        $args = array( $data->description,
                       $data->filePath );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }
    
    /**
     * Delete a record
     *
     * @param $employeeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteDocument($documentId)
    {
        $sql = 'DELETE FROM ptcdocument
                      WHERE documentid = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $documentId));

        return $result;
    }
    
	//Metódo para busca direta
    public function getDocument($documentId)
    {
        $sql = 'SELECT documentid,
                       requestid,
                       description,
                       fileid,
                  FROM ptcdocument
                 WHERE documentid = ?';

        $db = $this->getDatabase();
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $documentId));

        $document = new PtcDocument();
        
        list ( $document->documentId,
               $document->requestId,
               $document->description,
               $document->filepath ) = $result[0];

        return $document;
    }
    
    public function searchRequestDocument($requestId)
    {
        $sql = 'SELECT A.documentId,
                       A.requestId,
                       A.description,
                       A.fileId,
                       B.uploadFileName,
                       B.filePath
                  FROM ptcdocument A
             LEFT JOIN basFile B
                    ON (B.fileId = A.fileId)
                 WHERE A.requestId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $requestId));

        return $result;
    }
}
?>
