<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Employee form
 *
 * @author Alessandro Rodrigues da Cruz [cpd@facimed.edu.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 23/03/2011
 *
 **/

/**
 * Form to search the basSubject table
 */
class FrmDiverseConsultation extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(_M('Consultas diversas', 'basic'), new PtcRequest(), array('requestId'));
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
		
        //Field numberRequest
        $numberRequest = new MTextField('numberRequest', $this->numberRequest->value, _M('Número da Solicitação',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $numberRequest->setJsHint(_M('Informe o Número da Solicitação',$module));
        $fields[] = $numberRequest;
        
        //Field Person Id
        $personIdLabel = new MText('personIdLabel', _M('Pessoa', $module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
        $personId->addAttribute('onkeyDown', 'if (event.keyCode == 13) { this.onExit(); }');
        $personId->setJsHint(_M('Informe o código da Pessoa',$module));
        $personName = new MTextField('personName', $this->personName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Nome da pessoa',$module));
        $hctPerson = new MHContainer('hctPerson', array($personIdLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        
        
        //Field contract
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato',$module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $this->enrollData->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), 'academic', 'ActiveContract', null, array('personId' => 'personId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$this->enrollData->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso',$module));
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->enrollData->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso',$module));
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->enrollData->contractCourseName), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso',$module));
        $hctContract = new MHContainer('hctContract', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(false);
        $fields[] = $hctContract;
        
        //Field begin sector
        $beginSectorLabel = new MText('beginSectorLabel', _M('Setor de Origem', $module).':');
        $beginSectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginSectorId = new MLookupTextField('beginSectorId', $this->getFormValue('beginSectorId',$data->beginSectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'beginSectorName', 'basic', 'Sector', null, null, true);
        $beginSectorId->setJsHint(_M('Informe o código do Setor',$module));
        $beginSectorName = new MTextField('beginSectorName', $this->beginSectorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $beginSectorName->setReadOnly(true);
        $beginSectorName->setJsHint(_M('Setor de Origem',$module));
        $hctSector = new MHContainer('hctSector', array($beginSectorLabel, $beginSectorId, $beginSectorName));
        $hctSector->setShowLabel(true);
        $fields[]  = $hctSector;

        //Field current sector
        $currentSectorLabel = new MText('currentSectorLabel', _M('Setor Atual', $module).':');
        $currentSectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $currentSectorId = new MLookupTextField('currentSectorId', $this->getFormValue('currentSectorId',$data->currentSectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'currentSectorName', 'basic', 'Sector', null, null, true);
        $currentSectorId->setJsHint(_M('Informe o código do Setor',$module));
        $currentSectorName = new MTextField('currentSectorName', $this->currentSectorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $currentSectorName->setReadOnly(true);
        $currentSectorName->setJsHint(_M('Setor Atual',$module));
        $hctSector = new MHContainer('hctSector', array($currentSectorLabel, $currentSectorId, $currentSectorName));
        $hctSector->setShowLabel(true);
        $fields[]  = $hctSector;
        
        //prepare data for Field status request
        $businessRequestStatus = new BusinessProtocolBusRequestStatus();
        $requestStatus = $businessRequestStatus->listResquestStatus(null);

        $select = array();
        foreach ($requestStatus as $key => $registro)
        {
            foreach ($registro as $valor)
            {
                    $select[$key] = $registro;
            }
        }

        //Field request status
        $fields[] = new MSelection('requestStatusId', $requestStatusId, _M('Situação', $module), $select, null, null, null);
        
        $busSubject = new BusinessProtocolBusSubject();
        $fields[] = new MSelection('subjectId', null, _M('Assunto', $module), $busSubject->listSubject(), null, null, null);
        
        $fields[] = new MSeparator();
        
        $fields[] = new MDiv('divCancelRequest');
        
        $btnBusca = new MButton('busca', _M('Filtrar', $this->module));
        $fields[] = $btnBusca;
        
        parent::defineFields();
        $MIOLO->getTheme()->setElement('toolbar',NULL);
        $this->addFields($fields);
        
    }
    
    public function busca_click()
    {
    	$MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        try
        {
            $business = new BusinessProtocolBusRequestPtc();
                
            $dados = $this->getData();
            
            $dadosGrid = $business->searchDiverseConsultationRequest($dados);
               
            $grid = $MIOLO->getUI()->getGrid($module, 'GrdDiverseConsultationRequest');
            $grid->setData($dadosGrid);
            
            // Setado manualmente para as exportações da grid funcionarem corretamente
            foreach ( $grid->columns as $column )
            {
                $columns[] = $column->title;
            }
            
            $MIOLO->session->set('gridData', $dadosGrid);
            $MIOLO->session->set('gridColumns', $columns);
               
            $this->addField($grid);
        }
        catch (Exception $e)
        {
        	$MIOLO->error($e->getMessage());
        }
    }
    
    
    public function cancel_request($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $code = new MTextField('requestId', $args->requestId);
        $code->addBoxStyle('display', 'none');
        $flds[] = $code;
        $flds[] = new MMultiLineField('justification', null, _M('Justificativa', $module), 100, 10, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        
        $btnConfirm = new MButton('btnConfirm', _M('Confirmar'), SForm::getAjaxAction('btnConfirm_click', 'divCancelRequest', false));
        $btnCancel = new MButton('btnCancel', _M('Cancelar'), 'mpopup.remove();');
        
        $flds[] = new MHContainer('ctnButtons', array($btnConfirm, $btnCancel));
        
        // Pupup Cancelar solicitacao
        $fields[] = $popup = new MPopup('popupCancelRequest', $flds, _M('Cancelar solicitação', $module));
        
        return $fields;
    }
    
    public function btnConfirm_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        
        if( !( strlen($args->justification) > 0 ) )
        {
            $this->addAlert(_M('O campo justificativa deve ser informado', $module));
        }
        else
        {
            $requestId = $args->requestId;
            $busRequest = new BusinessProtocolBusRequestPtc();
            $busDispatch = new BusinessProtocolBusDispatch();

            $requestData = $busRequest->getRequest($requestId);

            //Inserir parecer da justificativa.
            $data = new PtcDispatch();
            $data->description = $args->justification;
            $data->requestId = $requestId;
            $data->subjectId = $requestData->subjectId;
            $data->sectorId = $requestData->currentSectorId;
            $data->level = SAGU::NVL($requestData->currentLevel, 1);
            $busDispatch->insertDispatch($data);

            //Cancela a solicitação
            if( $busRequest->updateRequestStatus($requestId, PtcRequest::STATUS_CANCELLED) )
            {
                SAGU::information( _M('Solicitação cancelada com sucesso'), $MIOLO->getActionURL ( $module, $action, null, array ( 'function'=>'search' ) ) ); 
            }
        }
    }
    
    /**
     * Sobreescrito método do mform
     * 
     * @param type $gridName nome da grid
     * @return array
     */
    public function getGridData($gridName)
    {
        $MIOLO = MIOLO::getInstance();
        
        $colunas = $MIOLO->session->get('gridColumns');
        $colunas = array($colunas);
        
        return array_merge($colunas, $MIOLO->session->get('gridData'));
    }
}
?>
