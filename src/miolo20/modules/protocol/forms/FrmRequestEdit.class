<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Request edit form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 19/03/2011
 *
 **/
class FrmRequestEdit extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct($steps = null)
    {
        $module = 'protocol';

        parent::__construct(new PtcRequest(), array('requestId'), 'BusRequestPtc', _M('Solicitação', $module));
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        parent::defineFields(null, null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        
        $this->toolbar->enableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->setButtonUrl(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('requestId'=>MIOLO::_REQUEST('requestId'),'function'=>'update','event'=>'tbBtnPrintReport_click')));
        
        try
        {
            //Obtendo dados do usuário logado
            //Login
            $loginUser = $MIOLO->GetLogin();
            //PhysicalPersonEmployee
            $businessPhysicalPersonEmployee = new BusinessBasicBusPhysicalPersonEmployee();
            $person = $businessPhysicalPersonEmployee->getPersonByMioloUserName($loginUser->id);

            if ( !(is_object($person)) )
            {
                throw new Exception(_M('Para acessar este formulário, o usuário precisa ser um funcionário. Verifique o cadastro de funcionários em Básico::Pessoa::Pessoa::Funcionário.', $module));
            }
            //Employee
            $busEmployee = new BusinessBasicBusEmployee();

            $employee = $busEmployee->getEmployeeForPersonId($person->personId);

            if ( strlen($employee->sectorId) <= 0 )
            {
                throw new Exception(_M('Para acessar este formulário, o usuário precisa estar vinculado a um setor. Verifique o cadastro de funcionários em Básico::Pessoa::Pessoa::Funcionário.', $module));
            }

            $BusDocumentPtc = new BusinessProtocolBusDocumentPtc();
            
            $dataRequest = $this->busObject->getRequestComplete($this->getObjectPk());
            
            $requestDocuments = $BusDocumentPtc->searchRequestDocument($dataRequest->requestId);

            $fields[] = new SHiddenField('subjectId', $dataRequest->subjectId);
            $fields[] = new MTextLabel('requestId', $dataRequest->requestId, _M('Código', $module));
            $fields[] = new MTextLabel('person', $dataRequest->personId . ' - ' . $dataRequest->personName, _M('Solicitante', $module));
            $fields[] = new MTextLabel('subject', $dataRequest->subjectDescription, _M('Assunto', $module));
            $fields[] = new MTextLabel('number', $dataRequest->number, _M('Número da Solicitação', $module));
            $fields[] = new MTextLabel('status', $dataRequest->statusDescription, _M('Status', $module));
            $fields[] = new MTextLabel('username', strlen($dataRequest->employeeName) > 0 ? $dataRequest->userName . ' - ' . $dataRequest->employeeName : $dataRequest->userName, _M('Registrado por', $module));
            
            if ( strlen($dataRequest->sectorName) > 0 )
            {
                $fields[] = new MTextLabel('sector', $dataRequest->sectorName, _M('Setor de origem', $module));
            }

            if ( strlen($dataRequest->currentSectorName) > 0 )
            {
                $fields[] = new MTextLabel('currentSector', $dataRequest->currentSectorName, _M('Setor atual', $module));
            }

            $fields[] = new MTextLabel('startTime', $dataRequest->startTime, _M('Início', $module));

            if ( strlen($dataRequest->endTime) > 0 )
            {
                $fields[] = new MTextLabel('endTime', $dataRequest->endTime, _M('Encerramento', $module));
            }

            $fields[] = $desc = new MMultiLineField('description', $dataRequest->description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), 5, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $desc->setReadOnly(true);

            if ( count($requestDocuments) > 0 )
            {
                $bgFlds = array();
                $cnt = 0;

                foreach ( $requestDocuments as $document )
                {
                    $flds = array();
                    $cnt++;
                    
                    list ( $documentId,
                           $requestId,
                           $description,
                           $fileId,
                           $fileName,
                           $filePath ) = $document;

                    $flds[] = new MText('text' . $documentId, $cnt . '. ' . ucfirst(strtolower($description)));

                    if ( strlen($fileId) > 0 )
                    {
                        $flds[] = new MLink('link' . $documentId, _M('Download', $module), $MIOLO->getActionURL($module, $action, null, array('function'=>SForm::FUNCTION_UPDATE, 'fileId'=>$fileId, 'requestId'=>$dataRequest->requestId, 'event'=>'downloadFile')));
                    }

                    $bgFlds[] = $hct = new MHContainer('hct' . $documentId, $flds);
                    $hct->setShowLabel(false);
                }

                $fields[] = new MBaseGroup('bsgFiles', _M('Documentos anexados', $module), $bgFlds, 'vertical');
            }

            if ( $MIOLO->checkAccess('FrmDispatch', A_INSERT, false, true) && $employee->sectorId == $dataRequest->currentSectorId && $dataRequest->statusId == PtcRequest::STATUS_RUNNING )
            {
                $fields[] = new MSeparator();
                $fields[] = new MLink('btnDispatch', _M('Inserir parecer', $module), $MIOLO->getActionURL($module, 'main:process:dispatch', null, array('requestId'=>$dataRequest->requestId)));
                $fields[] = new MSeparator();
            }

            $busDispatch = new BusinessProtocolBusDispatch();

            $dispatches = $busDispatch->searchDispatch($dataRequest->requestId);

            if ( count($dispatches) > 0 )
            {
                $fields[] = new MSeparator('<hr>');
                $fields[] = $txtDispatches = new MText('txtDispatches', _M('Pareceres', $module));
                $txtDispatches->setBold();
                $fields[] = new MSeparator();

                foreach ( $dispatches as $dispatch )
                {
                    $dpFlds = array();

                    list ($dispatchDateTime,
                          $dispatchSectorId,
                          $dispatchSectorDesc,
                          $dispatchUsername,
                          $dispatchPersonName,
                          $dispatchDescription) = $dispatch;

                    $fieldsId = trim($dispatchDateTime);

                    $dpFlds[] = $dpSector = new MTextField('sector' . $fieldsId, $dispatchSectorDesc, _M('Setor', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                    $dpSector->setReadOnly(true);
                    $dpFlds[] = $dpUser = new MTextField('username' . $fieldsId, $dispatchUsername . ' - ' . $dispatchPersonName, _M('Registrado por', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                    $dpUser->setReadOnly(true);
                    $dpFlds[] = new MSeparator();                    
                    $dpFlds[] = $dpDesc = new MDiv('description' . $fieldsId, strtoupper(html_entity_decode(strtolower($dispatchDescription))));

                    $bgDispatch = new MBaseGroup('bgDispatch' . $fieldsId, _M('Parecer em', $module) . ' ' . $dispatchDateTime, $dpFlds, 'vertical');

                    $fields[] = $bgDispatch;
                }
            }
            
            // Campos personalizados
            $fldCP = $this->loadCustomFields($dataRequest->subjectId);
            
            if ( count($fldCP) > 0 )
            {
                $fields[] = new MBaseGroup('bsgCP', _M('Campos personalizados', $module), $fldCP, 'vertical');
            }
			
            $fields[] = new MSeparator();
            $this->setFields($fields);
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
    }
    
        public function tbBtnPrintReport_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        
        $dataRequest = $this->busObject->getRequestComplete($this->getObjectPk());

        // Parametros do relatorio
        $info = array();
        $info['requestid'] =            $dataRequest->requestId;//codigo **
        $info['personId'] =             $dataRequest->personId; 

        $format = SReport::FILETYPE_PDF;
        $reportName = 'solicitacaoDeProtocolo';
        
        $report = new SReport();
        $report->setReportName($reportName);
        $report->setFileType( $format );
        $report->setParameters($info);
        $report->generate();

        if ( !$report->generate() )
        {
            $this->addError(_M('Não foi possível obter os dados necessários para gerar o documento.', $module));
        }

    }
    
    public function downloadFile()
    {
        $MIOLO = MIOLO::getInstance();

        $fileId = MIOLO::_REQUEST('fileId');

        try
        {
            $busFile = new BusinessBasicBusFile();

            $busFile->getFileAsDownload($fileId);
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
    }
    
    public function tbBtnPrint_click()
    {
    	$MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Parameters of the report
        if (strlen(MIOLO::_REQUEST('requestId')) > 0)
        {
            $parameters['requestId'] = (int)MIOLO::_REQUEST('requestId');
        }
        
        $report = new SReport();
        $report->setReportName('report');
        $report->setFileType( SReport::FILETYPE_PDF );
        $report->setParameters($parameters);
        $report->generate();
    }

    public function loadCustomFields($subjectId = null)
    {
        $subjectId = SAGU::NVL($subjectId, MIOLO::_REQUEST('subjectId'));
        $customFieldIds = BasCustomField::getCustomFieldIdsBySubject($subjectId);
        $fields = array();
        
        // Carrega e exibe campos personalizados
        if ( count($customFieldIds) > 0 && strlen($subjectId) > 0 )
        {
            $customizedId = MIOLO::_REQUEST('requestId');
            $customFields = $this->mioloCustomFields = BasCustomField::listByCustomFieldIds($customFieldIds);
            $cfData = BasCustomField::getFieldValuesById($customFieldIds, $customizedId);

            $fields = $this->generateCustomFields($customFields, $cfData);
        }

        return $fields;
    }
}
?>