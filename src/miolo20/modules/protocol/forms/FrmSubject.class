<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário para cadastro de sugestões
 *
 * @author Alessandro Rodrigues da Cruz [cpd@facimed.edu.br]
 *
 * @version $Id$
 * 
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 * 
 * @since
 * Class created on 19/03/2011
 *
 **/

class FrmSubject extends SStepByStepForm
{
    /**
     * Class constructor
     **/
    public function __construct($steps = null)
    {
        $module = 'protocol';
        
        parent::__construct(_M('Assunto', $module), $steps, __CLASS__, new PtcSubject(), array('subjectId'));

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'protocol';
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $business = new BusinessProtocolBusSubject();
        $MIOLO->getRequiredJS4Ajax();
        
        if ( !$MIOLO->page->isPostBack() )
        {
            $this->cleanStepData();
        }
        
        if ( !$this->isFirstAccess() )
        {
            //Load data
            $data = $this->getStepDataByForm(__CLASS__);
        }
            
        if ( in_array( $function, array( SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE ) ) )
        {            
            $subjectId = MIOLO::_REQUEST('subjectId');
            $subjectText = new MTextField('subjectId' , $subjectId, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $subjectText->setReadOnly(true);
            $fields[] = $subjectText;
                    
           if ( !$MIOLO->page->isPostBack() )
           {
                try
                {
                    $data = $business->getSubject($subjectId);                    
                    if ( $data->subjectAvailableTo_0 )
                    {
                        $_REQUEST['subjectAvailableTo_0'] = $data->subjectAvailableTo_0;
                    }
                    if ( $data->subjectAvailableTo_1 )
                    {
                        $_REQUEST['subjectAvailableTo_1'] = $data->subjectAvailableTo_1;
                    }
                    if ( $data->subjectAvailableTo_2 )
                    {
                        $_REQUEST['subjectAvailableTo_2'] = $data->subjectAvailableTo_2;
                    }
                     if ( $data->subjectAvailableTo_3 )
                    {
                        $_REQUEST['subjectAvailableTo_3'] = $data->subjectAvailableTo_3;
                    }
                     if ( $data->subjectAvailableTo_4 )
                    {
                        $_REQUEST['subjectAvailableTo_4'] = $data->subjectAvailableTo_4;
                    }                    
                }
                catch (Exception $e)
                {
                    $this->addError($e->getMessage());
                }                
            }
        }

        //Field description 
        $description = new MTextField('description', $this->getFormValue('description',$data->description), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a Descrição',$module));
        $validators[] = new MRequiredValidator('description');
        $fields[] = $description;

        //Field sector
        $sectorLabel = new MText('sectorLabel', _M('Setor', $module).':');
        $sectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sectorLabel->setClass('m-caption m-caption-required');
        $sectorId = new MLookupTextField('sectorId', $this->getFormValue('sectorId',$data->sectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sectorName', 'basic', 'Sector', null, null, true);
        $sectorId->setJsHint(_M('Informe o código do Setor',$module));
        $validators[] = new MIntegerValidator('sectorId', _M('Setor',$module), 'required');
        $sectorName = new MTextField('sectorName', $this->sectorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sectorName->setReadOnly(true);
        $sectorName->setJsHint(_M('Nome do Setor',$module));
        $hctSector = new MHContainer('hctSector', array($sectorLabel, $sectorId, $sectorName));
        $hctSector->setShowLabel(true);
        $fields[]  = $hctSector;
	
        //Field taxvalue
        $taxValue = new MTextField('taxValue', $this->getFormValue('taxValue',$data->taxValue) ? $this->getFormValue('taxValue',$data->taxValue) : '0.00', _M('Taxa',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Ex.: 1.00', $module));
        $taxValue->setJsHint(_M('Informe o valor da taxa', $module));
        $validators[] = new MRequiredValidator('taxValue');
        $validators[] = new MFloatValidator('taxValue', '', SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'));        
        $fields[] = $taxValue;
        
        $taxaPrimeiraSolicitacao = new MCheckBox('taxaPrimeiraSolicitacao', DB_FALSE, _M('Não cobrar taxa na primeira solicitação', $module), ($data->taxaPrimeiraSolicitacao == DB_TRUE || !strlen($data->taxaPrimeiraSolicitacao) > 0) ? false : true,'', _M('A cobrança da taxa será apenas a partir da segunda solicitação dentro do mesmo período letivo vigente. Essa configuração afeta apenas alunos com contrato.', $module));
        $fields[] = $taxaPrimeiraSolicitacao;

        //Field term(prazo) 
        $term = new MTextField('term', $this->getFormValue('term',$data->term), _M('Prazo',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $term->setJsHint(_M('Informe o prazo máximo necessário para concluir a solicitação', $module));
        $validators[] = new MIntegerValidator('term', _M('Prazo',$module), 'optional');
        $fields[] = $term;

        //Field isactive
        $isActive = new MSelection('isActive', $this->getFormValue('isActive',$data->isActive), _M('Ativo', $module), $business->obterListaComboAtivo());
        $validators[] = new MRequiredValidator('isActive');
        $ajaxAction = SForm::getAjaxAction('FrmSubject::isActiveChange', 'divSubjectAvailableTo', false);
        $isActive->addAttribute('onChange', $ajaxAction);
        $fields[] = $isActive;
        
        

        $options = $this->obterOpcoesCheckBoxGroup();
        $chkBox = new MCheckBoxGroup('subjectAvailableTo', _M('Disponível no portal para', $module), $options);
        if ( !($data->isActive == BusinessProtocolBusSubject::TIPO_ATIVO_PORTAL || $data->isActive == BusinessProtocolBusSubject::TIPO_ATIVO_AMBOS) )
        {            
            $fields[] = new MDiv('divSubjectAvailableTo', array($chkBox));
            $chkBox->setVisibility(false);
        }
        else
        {
            $fields[] = new MDiv('divSubjectAvailableTo', array(new MFormContainer('contSubjectAvailableTo', array($chkBox))));
        }        
        
        $showDescription = new MSelection('showDescription', $this->getFormValue('showDescription',$data->showDescription), _M('Exibir campo descrição na solicitação', $module), SAGU::listTrueFalse(0));
        $validators[] = new MRequiredValidator('showDescription');
        $ajaxAction = SForm::getAjaxAction('FrmSubject::showDescriptionChange', 'divDescriptionRequired', false);
        $showDescription->addAttribute('onChange', $ajaxAction);
        $fields[] = $showDescription;
        if( $data->showDescription == null)
        {
            $data->showDescription = DB_TRUE;
        }
        if ( $data->showDescription == DB_TRUE )
        {
            $sel = new MSelection('descriptionRequired', $this->getFormValue('descriptionRequired',$data->descriptionRequired), _M('Campo descrição é obrigatório', $module), SAGU::listTrueFalse(0));
            $fields[] = new MDiv('divDescriptionRequired', array(new MFormContainer('contDescriptionRequired', array($sel))));
        }
        else
        {
            $fields[] = new MDiv('divDescriptionRequired');
        }
        
        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
    }
    
    public function isActiveChange($args)
    {   
         $module = 'protocol';
        if ( $args->isActive == BusinessProtocolBusSubject::TIPO_ATIVO_PORTAL || $args->isActive == BusinessProtocolBusSubject::TIPO_ATIVO_AMBOS )
        {
            $options = $this->obterOpcoesCheckBoxGroup();
            
            $fields[] = new MCheckBoxGroup('subjectAvailableTo', _M('Disponível no portal para', $module), $options);
        }
        else
        {
            $fields[] = new MDiv('divSubjectAvailableTo');
        }
        
        return SAGU::alignFields($fields);
    }
    
    public function showDescriptionChange($args)
    {
        if ( $args->showDescription == DB_TRUE )
        {
            $fields[] = new MSelection('descriptionRequired', $this->getFormValue('descriptionRequired',$data->descriptionRequired), _M('Campo descrição é obrigatório', $module), SAGU::listTrueFalse(0));
        }
        else
        {
            $fields[] = new MDiv('divDescriptionRequired');
        }
        
        return SAGU::alignFields($fields);
    }
    
    private function obterOpcoesCheckBoxGroup()
    {
        $options[0][0] = '&nbsp;Aluno';
        $options[0][1] = 'A';
        $options[1][0] = '&nbsp;Professor';
        $options[1][1] = 'P';
        $options[2][0] = '&nbsp;Coordenador';
        $options[2][1] = 'C';
        $options[3][0] = '&nbsp;Residente';
        $options[3][1] = 'R';
        $options[4][0] = '&nbsp;Preceptor';
        $options[4][1] = 'E';
        
        
        return $options;
    }

    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $subjectId = MIOLO::_REQUEST('subjectId');

        if ( strlen($subjectId) > 0 )
        {
            try
            {
                $business = new BusinessProtocolBusSubject();
                $business->deleteSubject($subjectId);

                parent::tbBtnDelete_confirm($sender, true);
            }
            catch (Exception $e)
            {
                $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
                $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
                $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
                
                $errorMsg = _M('Já foram feitas as solicitações, impossibilitando a exclusão.');
                $goTo     = $MIOLO->getActionURL($module, 'main:register:subject');
                $MIOLO->error($errorMsg, $goTo);
            }
        }
    }
    
    /**
     * Bug #33321 - nao precisamos exibir os campos customizados neste form (segundo bug relatado), apenas no passo de "Informacoes extras".
     * Se um dia quiserem adicionar um campo customizado para este passo, deve ser visto alguma alternativa de nomenclatura.
     * 
     * @return array
     */
    public function getCustomFields($identifier, $customizedId = NULL, $suffix = '')
    {
        return array();
    }
}
?>