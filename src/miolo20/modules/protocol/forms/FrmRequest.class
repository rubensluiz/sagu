<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Employee form
 *
 * @author Miguel Fabricio Zamberlan [miguel.zamberlan@facimed.edu.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 19/03/2011
 *
 **/

class FrmRequest extends SStepByStepForm
{
    /**
     * Class constructor
     **/
    public function __construct($steps = null)
    {
        $module = 'protocol';

        parent::__construct(_M('Solicitação', $module), $steps, __CLASS__);

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);

        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        try
        {
            //Obtendo dados do usuário logado
            //Login
            $loginUser = $MIOLO->GetLogin();
            //PhysicalPersonEmployee
            $businessPhysicalPersonEmployee = new BusinessBasicBusPhysicalPersonEmployee();
            $person = $businessPhysicalPersonEmployee->getPersonByMioloUserName($loginUser->id);

            if ( !(is_object($person)) )
            {
                throw new Exception(_M('Para acessar este formulário, o usuário precisa ser um funcionário. Verifique o cadastro de funcionários em Básico::Pessoa::Pessoa::Funcionário.', $module));
            }

            //Employee
            $busEmployee = new BusinessBasicBusEmployee();
            $employee = $busEmployee->getEmployeeForPersonId($person->personId);
            
            if ( strlen($employee->sectorId) <= 0 )
            {
                throw new Exception(_M('Para acessar este formulário, o usuário precisa ser um funcionário e deve possuir um setor. Verifique o cadastro de funcionários em Básico::Pessoa::Pessoa::Funcionário.', $module));
            }
        }
        catch (Exception $e)
        {
            $MIOLO->error($e->getMessage());
        }

        $fields[] = new SHiddenField('sectorId', $employee->sectorId);
        
        //Field Subject Id
        $subjectIdLabel = new MText('subjectIdLabel', _M('Assunto', $module).':');
        $subjectIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $subjectIdLabel->setClass('m-caption m-caption-required');
        $subjectId = new MLookupTextField('subjectId', $this->getFormValue('subjectId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'subjectDescription', 'protocol', 'Subject', null, null, true);
        $subjectId->setJsHint(_M('Informe o código do assunto.',$module));
        $validators[] = new MIntegerValidator('subjectId', _M('Assunto',$module), 'required');
        $subjectDescription = new MTextField('subjectDescription', $this->description->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $subjectDescription->setReadOnly(true);
        $subjectDescription->setJsHint(_M('Descrição do Assunto',$module));
        $hctSubject = new MHContainer('hctSubject', array($subjectIdLabel, $subjectId, $subjectDescription));
        $hctSubject->setShowLabel(true);
        $fields[]  = $hctSubject;

        //Field Person Id
        $personIdLabel = new MText('personIdLabel', _M('Pessoa', $module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personIdLabel->setClass('m-caption m-caption-required');
        $personId = new MLookupTextField('personId', $this->getFormValue('personId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da Pessoa',$module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa',$module), 'required');
        $personName = new MTextField('personName', $this->personName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Nome da pessoa',$module));
        $hctPerson = new MHContainer('hctPerson', array($personIdLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        //Field contract
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato',$module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $this->enrollData->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), 'academic', 'ActiveContract', null, array('personId' => 'personId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$this->enrollData->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso',$module));
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->enrollData->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso',$module));
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->enrollData->contractCourseName), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso',$module));
        $hctContract = new MHContainer('hctContract', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(false);
        $fields[] = $hctContract;
        
        $labelInfo = new MText('labelInfo');
        $labelInfo->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $labelInfo->setClass('m-caption');
        $info = new MLabel(_M('O contrato é requerido para assuntos que terão encaminhamento por coordenadores.'));
        $info->setClass('m-hint');
        $fields[] = new MHContainer('labelContrainer', array($labelInfo, $info));
        
        //Field description 
        $description = new MMultiLineField('description', $this->getFormValue('description'), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), 5, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a Descrição',$module));
        $fields[] = $description;

        // Field Number
        // Quando nao for geracao automatica, exige numero do usuario
        if ( SAGU::getParameter('PROTOCOL', 'REQUEST_AUTOMATIC_NUMBER') != 'YES' )
        {
            $number = new MTextfield('number', $this->getFormValue('number'), _M('Número', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $number->setJsHint(_M('Informe o número do protocolo.',$module));
            $validators[] = new MRequiredValidator('number');
            $fields[] = $number;
        }

        //Field Status
        $statusId = new MHiddenField('statusId', PtcRequest::STATUS_OPEN);
        $fields[] = $statusId;
        
        // Try exception connect BusRequestStatus
        try
        {
            $busRequestStatus = new BusinessProtocolBusRequestStatus();
            $statusDescription = $busRequestStatus->getStatusDescription(PtcRequest::STATUS_OPEN);
        }
        catch(Exception $e)
        {
        	$this->addError($e->getMessage());
        }
        
        //Field Status Description
        $statusDescription = new MTextField('statusDescription', $statusDescription,  _M('Status', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $statusDescription->setReadOnly(true);
        $fields[] = $statusDescription;
        
        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
    }
    
    public function nextStepButton_click($args = null) 
    {        
        $subjectId  = $this->getFormValue('subjectId');
        $subjectDes = $this->getFormValue('subjectDescription');
        $contractId = $this->getFormValue('contractId');
        $description = $this->getFormValue('description');
        
        $filters = new stdClass();
        $filters->subjectId = $subjectId;

        // Busca todos encaminhamentos do assunto.
        $busSubjectSector = new BusinessProtocolBusSubjectSector();
        $subjectSectors = $busSubjectSector->searchSubjectSector($filters);
        
        foreach ( $subjectSectors as $subjectSector )
        {
            if ( $subjectSector[6] == DB_TRUE )
            {
                // Se a pessoa solicitante possuir contrato.
                if ( !strlen($contractId) > 0 )
                {
                    $this->addError(_M("Para o assunto {$subjectId} - {$subjectDes}, o contrato é requerido, favor informar o contrato."));
                    return;
                }
            }
        }
        
        $busSubject = new BusinessProtocolBusSubject();
        $assunto = $busSubject->getSubject($subjectId);
        
        if ( $assunto->taxaPrimeiraSolicitacao == DB_FALSE && !strlen($contractId) > 0 )
        {
            $this->addError(_M("Para o assunto {$subjectId} - {$subjectDes}, o contrato é requerido, favor informar o contrato."));
            return;
        }
        
        if ( $assunto->descriptionRequired == DB_TRUE && strlen($description) == 0 )
        {
            $this->addError(_M('O campo "Descrição" é obrigatório para este assunto'));
            return;
        }
        
        parent::nextStepButton_click($args);
    }
}
?>