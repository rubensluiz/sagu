<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Employee form
 *
 * @author Bruno Lazaro dos Santos [brunus.ls@gmail.com]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 24/03/2011
 *
 **/

/**
 * Form to search the basSubject table
 */
class frmRequestReport extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
    	$MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        parent::__construct(_M('Relatório de Solicitações', $module), null, null);
        
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
		
        //Field numberRequest
        $numberRequest = new MTextField('numberRequest', $this->numberRequest->value, _M('Número da Solicitação',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $numberRequest->setJsHint(_M('Informe o Número da Solicitação',$module));
        $fields[] = $numberRequest;
                
        //Field Person Id
        $personIdLabel = new MText('personIdLabel', _M('Pessoa', $module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da Pessoa',$module));
        $personName = new MTextField('personName', $this->personName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Nome da pessoa',$module));
        
        $hctPerson = new MHContainer('hctPerson', array($personIdLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
                
        //Field begin sector
        $beginSectorLabel = new MText('beginSectorLabel', _M('Setor de Origem', $module).':');
        $beginSectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginSectorId = new MLookupTextField('beginSectorId', $this->getFormValue('beginSectorId',$data->beginSectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'beginSectorName', 'basic', 'Sector', null, null, true);
        $beginSectorId->setJsHint(_M('Informe o código do Setor',$module));
        $beginSectorName = new MTextField('beginSectorName', $this->beginSectorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $beginSectorName->setReadOnly(true);
        $beginSectorName->setJsHint(_M('Setor de Origem',$module));
        
        $hctSector = new MHContainer('hctSector', array($beginSectorLabel, $beginSectorId, $beginSectorName));
        $hctSector->setShowLabel(true);
        $fields[]  = $hctSector;
                
        //Field current sector
        $currentSectorLabel = new MText('currentSectorLabel', _M('Setor Atual', $module).':');
        $currentSectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $currentSectorId = new MLookupTextField('currentSectorId', $this->getFormValue('currentSectorId',$data->currentSectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'currentSectorName', 'basic', 'Sector', null, null, true);
        $currentSectorId->setJsHint(_M('Informe o código do Setor',$module));
        $currentSectorName = new MTextField('currentSectorName', $this->currentSectorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $currentSectorName->setReadOnly(true);
        $currentSectorName->setJsHint(_M('Setor Atual',$module));
        
        $hctSector = new MHContainer('hctSector', array($currentSectorLabel, $currentSectorId, $currentSectorName));
        $hctSector->setShowLabel(true);
        $fields[]  = $hctSector;
                
        //prepare data for Field status request
        $businessRequestStatus = new BusinessProtocolBusRequestStatus();
        $requestStatus = $businessRequestStatus->listResquestStatus(null);

        $select = array();
        foreach ($requestStatus as $key => $registro)
        {
            //echo "Posição $key.<br/>";
            foreach ($registro as $valor)
            {
                    //echo "Valor $valor.<br/>";
                    $select[$key] = $registro;
            }
        }

        //Field request status
        $fields[] = new MSelection('requestStatusId', $requestStatus, _M('Situação', $module), $select, null, null, null);
        $fields[] = new MSeparator();
        
        $fields[] = new MCalendarField('startDate', null, _M('Data inicial', $module));
 
        //Format report
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : SReport::FILETYPE_PDF, _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        $fields[] = new MSeparator();

        //Validadores
        $validators[] = new MIntegerValidator('numberRequest', _M('Número da solicitação',$module), 'optional');
        $validators[] = new MIntegerValidator('personId', _M('Pessoa',$module), 'optional');
        $validators[] = new MIntegerValidator('beginSectorId', _M('Setor de origem',$module), 'optional');
        $validators[] = new MIntegerValidator('currentSectorId', _M('Setor atual',$module), 'optional'); 
        
        $this->setFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }
    
    public function generateReport()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);        
        
        //Parameters of the report
        if (strlen(MIOLO::_REQUEST('numberRequest')) > 0)
        {
            $parameters['number'] = MIOLO::_REQUEST('numberRequest');
        }
        if (strlen(MIOLO::_REQUEST('personId')) > 0)
        {
            $parameters['personid'] = (int)MIOLO::_REQUEST('personId');
        }
        if (strlen(MIOLO::_REQUEST('beginSectorId')) > 0)
        {
            $parameters['beginsectorid'] = (int)MIOLO::_REQUEST('beginSectorId');
        }
    	if (strlen(MIOLO::_REQUEST('currentSectorId')) > 0)
        {
            $parameters['currentsectorid'] = (int)MIOLO::_REQUEST('currentSectorId');
        }
    	if (MIOLO::_REQUEST('requestStatusId') <> 0)
        {
            $parameters['requeststatusid'] = (int)MIOLO::_REQUEST('requestStatusId');
        }
        if (MIOLO::_REQUEST('startDate') <> 0)
        {
            $parameters['startDate'] = MIOLO::_REQUEST('startDate');
        }
        
        $options['module'] = $module;
        $options['reportName'] = 'requestReport';
        $options['parameters'] = $parameters;
        $options['fileType'] = MIOLO::_REQUEST('reportFormat');
        $report = new SReport($options);        
        if ( !$report->generate() )
        {
            $this->addError(_M('Nenhum dado foi encontrado.', $module ));
        }
    }
}
?>