<?php
/**
 * <--- Copyright 2011-2011 de Facimed - Faculdade de Ciências Biométricas de Cacoal.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Fromulário para cadastrar os encaminhamentos do assunto
 *
 * @author Bruno Lazaro dos Santos [brunus.ls@gmail.com]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 18/03/2011
 *
 **/

class FrmSubjectSector extends SStepByStepForm
{
    /**
     * Class constructor
     **/
    public function __construct($steps = null)
    {
        $module = 'protocol';

        parent::__construct(_M('Encaminhamentos', $module), $steps, __CLASS__, new PtcSubjectSector(), array('subjectId, sectorId, level'));

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        //Subdetail
        $cols[] = new MGridColumn(_M('Nível', $module), 'right', true, null, true, 'level');
        $cols[] = new MGridColumn(_M('Código', $module), 'right', true, null, false, 'sectorId');
        $cols[] = new MGridColumn(_M('Setor', $module), 'left', true, null, true, 'sectorName');
        $cols[] = new MGridColumn(_M('Dias', $module), 'right', true, null, true, 'maxDays');
        $cols[] = new MGridColumn(_M('Horas', $module), 'center', true, null, true, 'maxTime');
        $cols[] = new MGridColumn(_M('Assunto', $module), 'right', true, null, false, 'oldSubjectId');
        $cols[] = new MGridColumn(_M('Para coordenador?', $module), 'left', true, null, true, 'paraCoordenadorLabel');
        $cols[] = new MGridColumn(_M('Permite fechar protocolo?', $module), 'left', true, null, true, 'permiteFecharProtocoloLabel');

        //Field level
        $levelLabel = new MText('levelLabel', _M('Ordem', $module) . ':');
        $levelLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $levelLabel->setClass('m-caption m-caption-required');
        $level = new MTextField('level', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $level->setJsHint(_M('Informir a ordem com que os encaminhamentos irão ocorrer.',$module));
        $validators[] = new MIntegerValidator('level', _M('Ordem', $module), 'required');
        $subFields[] = new MHContainer('hctLevel', array($levelLabel, $level));

        //Field sectorid
        $sectorLabel = new MText('sectorLabel', _M('Setor', $module).':');
        $sectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sectorLabel->setClass('m-caption m-caption-required');
        $sectorId = new MLookupTextField('sectorId', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sectorName', 'basic', 'Sector', null, null, true);
        $sectorId->setJsHint(_M('Informe o código do Setor',$module));
        $validators[] = new MIntegerValidator('sectorId', _M('Setor',$module), 'required');
        
        $sectorName = new MTextField('sectorName', $this->sectorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sectorName->setReadOnly(true);
        $sectorName->setJsHint(_M('Nome do setor',$module));
        
        $hctSector = new MHContainer('hctSector', array($sectorLabel, $sectorId, $sectorName));
        $hctSector->setShowLabel(true);
        $subFields[]  = $hctSector;
        
        //Field maxdays
        $maxDaysLabel = new MText('maxDaysLabel', _M('Dias', $module) . ':');
        $maxDaysLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maxDays = new MTextField('maxDays', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $maxDays->setJsHint(_M('Tempo máximo para trâmite em Dias',$module));
        $validators[] = new MIntegerValidator('maxDays', _M('Dias', $module), 'optional');
        $subFields[] = new MHContainer('hctMaxDays', array($maxDaysLabel, $maxDays));
        
        //Field maxtime
        $maxTimeLabel = new MText('maxTimeLabel', _M('Horas', $module) . ':');
        $maxTimeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $maxTime = new MTextField('maxTime', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), 'hh:mm');
        $maxTime->setJsHint(_M('Tempo máximo para trâmite em Horas (hh:mm)',$module));
        $validators[] = $timeVal = new MTimeValidator('maxTime', _M('Horas', $module), 'optional');
        $subFields[] = new MHContainer('hctTime', array($maxTimeLabel, $maxTime));
        
        // Campo para cordenador.
        $coordLabel = new MText('coordLabel', _M('Para coordenador?', $module) . ':');
        $coordLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $coord = new MCheckBox('paraCoordenador', DB_TRUE);
        $subFields[] = new MHContainer('coordTime', array($coordLabel, $coord));

        // Permitir fechar protocolo
        $permiteFecharLabel = new MText('permiteFecharLabel', _M('Permite fechar protocolo?', $module) . ':');
        $permiteFecharLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $permiteFechar = new MCheckBox('permiteFecharProtocolo', DB_TRUE);
        $subFields[] = new MHContainer('hctPermiteFechar', array($permiteFecharLabel, $permiteFechar));
        
        $fields[] = $sub = new MSubDetail('subjectSectors', null, $cols, $subFields, array('remove'));
        $sub->addActionEvent('add', 'eventoAoAdicionar', __CLASS__);
        
        $sub->setValidators($validators);
         
        if ($this->isFirstAccess())
        {
            MSubDetail::clearData('subjectSectors');

            $stepData = $this->getStepDataByForm('FrmSubject');

            try
            {
                $business = new BusinessProtocolBusSubjectSector();

                $filters = new stdClass();
                $filters->subjectId = $stepData->subjectId;
                $searchData = $business->searchSubjectSector($filters);
            }
            catch (Exception $e)
            {
                $this->addError($e->getMessage());
            }

            $subData = array();
            if (count($searchData) > 0)
            {
                foreach ($searchData as $row)
                {
                    $subRow = new stdClass();
                    $subRow->level = $row[3];
                    $subRow->sectorId = $row[1];
                    $subRow->sectorName = $row[2];
                    $subRow->maxDays = $row[4];
                    $subRow->maxTime = $row[5];
                    $subRow->oldSubjectId = $row[0];                    
                    $subRow->paraCoordenadorLabel = ($row[6] == DB_TRUE) ? 'SIM' : 'NÃO';
                    $subRow->paraCoordenador = $row[6];
                    $subRow->permiteFecharProtocolo = $row[7];
                    $subRow->permiteFecharProtocoloLabel = ($row[7] == DB_TRUE) ? 'SIM' : 'NÃO';
                     
                    $subData[] = clone($subRow);
                }
            }

            if (count($subData) > 0)
            {
                $sub->setData($subData);
            }
        }

        $this->setFields($fields);
    }
    
    /**
     * Evento ao adicionar registro na subdetail.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public function eventoAoAdicionar($args)
    {
        $args->paraCoordenadorLabel = ($args->paraCoordenador == DB_TRUE) ? 'SIM' : 'NÃO';
        $args->paraCoordenador = ($args->paraCoordenador == DB_TRUE) ? DB_TRUE : DB_FALSE;
        ($args->permiteFecharProtocolo == DB_TRUE) ? $args->permiteFecharProtocoloLabel = 'SIM' : $args->permiteFecharProtocoloLabel = 'NÃO';
                
        return $args;
    }

    public function  nextStepButton_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        try
        {
            $sectors = MSubDetail::getData('subjectSectors');
            $hasOption = false;
            $levels = array();
            
            foreach ( (array) $sectors as $sector )
            {
                if ( ! $sector->removeData )
                {
                    $levels[] = (int) $sector->level;
                }
            }
            
            sort($levels, SORT_NUMERIC);

            foreach ( $levels as $key => $level )
            {
                if ( ( $key + 1 ) != $level )
                {
                    throw new Exception( _M('A sequência de ordem/nível não está correta, favor corrigir. <br/>Exemplo: 1, 2, 3...') );
                }
            }

            foreach ( (array) $sectors as $sector )
            {
                if ( ! $sector->removeData )
                {
                    $hasOption = true;
                    break;
                }
            }

            if ( ! $hasOption )
            {
                throw new Exception( _M('Nenhum encaminhamento foi cadastrado.', $module) );
            }
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
            return;
        }

        parent::nextStepButton_click($args);
    }
}
?>