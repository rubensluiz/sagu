<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Passo a passo matrícula web.
 *
 * @author Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 18/02/2015
 */
class FrmEnrollWeb0 extends FrmEnrollWeb
{
    /**
     * Construtor do formulário.
     */
    public function __construct($steps = null)
    {
        parent::__construct(__CLASS__, null, $steps );
    }
    
    /**
     * Criação dos campos do formulário.
     */
    public function defineFields()
    {
        $module = SAGU::getFileModule(__FILE__);

        //Aluno
        $contractPersonLabel = new MText('contractPersonLabel', _M('Aluno',$module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$this->enrollData->contractPersonId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo'), 'academic', 'ActivePersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa',$module));
        $validators[] = new MRequiredValidator('contractPersonId', _M('Aluno',$module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->enrollData->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa',$module));
        $hctPerson = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(false);

        $bsg1 = new BaseGroup('bsg1', _M('Aluno',$module), array($hctPerson), 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width = '100%';
        $fields[] = $bsg1;
        
        $this->setFields($fields);
        $this->setValidators($validators);
    }
    
    /**
     * Botão cancelar.
     */
    public function cancelButton_click($args = null)
    {
        //Veio do portal retorna pro portal
        if ( MIOLO::_REQUEST('returnTo') == 'PORTAL' )
        {
            $MIOLO = MIOLO::getInstance();
            $portalURL = $MIOLO->getActionURL( 'portal', 'main');
            $MIOLO->page->redirect($portalURL);
        }
        else
        {
            parent::cancelButton_click($args);
        }
    }
}
?>
