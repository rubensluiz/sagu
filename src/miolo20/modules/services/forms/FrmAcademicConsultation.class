<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Academic consultation to webservices
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 23/02/2011
 */

/**
 * Form to manipulate an enroll
 */
class FrmAcademicConsultation extends SForm
{
    public $personData;

    /**
     * Class constructor
     */
    public function __construct()
    {
        $action = MIOLO::getCurrentAction();
        $module = SAGU::getFileModule(__FILE__);
        $MIOLO = MIOLO::getInstance();

        parent::__construct(_M('Consulta acadêmica', $module), null, null);

        // Disable toolbar buttons
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Instance the bussines
        $busPerson = new BusinessBasicBusPerson();
        $busDiverseConsultation = new BusinessAcademicBusDiverseConsultation();
        $busAcademicConsultation = new BusinessServicesBusAcademicConsultation();
        $busComplementaryActivities = new BusinessAcademicBusComplementaryActivities();
        $busDiverseConsultation = new BusinessAcademicBusDiverseConsultation();

        // Get data of the person
        $this->personData = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));

        $fields[] = new MHiddenField('personId', $this->personData->personId);
        $fields[] = new MSeparator();

        $filters = $this->getTypesData();

        if ( (strlen($filters->personId) > 0) )
        {
            // FIXME - Com a alteração da função getPersonContracts, para trazer multiplos contratos da pessoa, agora em vez de um objeto(contrato),
            // que antes era forçado, pegando o valor na posição 0, é retornado um array de objetos(contratos). Alteração r7202, replicada, vide #9103.
            //list($contracts) = $busAcademicConsultation->getPersonContracts($filters->personId);
            
            //Função gerPersonContracts trazia mais que um contrato #18414
            $busContrato = new AcdContract();
            $contrato = $busContrato->findActiveContractByPerson($filters->personId);

            // Exibe o histórico escolar
            $filter = new stdClass();
            $filter->contractId = $contrato->contractId;
            $filter->proficiency = false;
            $dataGrid = $busDiverseConsultation->getCurricularComponentCoursed($filter);
            $grdResults = $MIOLO->getUI()->getGrid('academic', 'GrdDiverseConsultationCurricularComponentRegistered');
            $grdResults->setData($dataGrid);
            $grdResults->setClose(null);
            $grdResults->setTitle(_M('Histórico escolar', 'academic') . ' - ' . $this->personData->personId . ' / ' . $this->personData->name);
            unset($grdResults->actions);
            $fields[] = $grdResults;

            $fields[] = new MSeparator();
            $fields[] = new MSeparator();

            // Exibe as atividades complementares
            $filter = new stdClass();
            $filter->contractId = $contrato->contractId;
            $dataGrid = $busComplementaryActivities->searchComplementaryActivities($filter);
            $grdResults = $MIOLO->getUI()->getGrid('academic', 'GrdComplementaryActivitiesSearch', $filter);
            $grdResults->setData($dataGrid);
            $grdResults->setPageLength(0);
            $grdResults->setTitle(_M('Atividades complementares', 'academic'));
            $grdResults->setClose(null);
            unset($grdResults->actions);

            if ( count($grdResults->clumns) > 0 )
            {
                foreach ( $grdResults->columns as $column )
                {
                    $column->order = false;
                }
            }

            $fields[] = $grdResults;

            $fields[] = new MSeparator();
            $fields[] = new MSeparator();

            // Exibe os aprveitamentos
            $filter = new stdClass();
            $filter->contractId = array($contrato->contractId);
            $dataGrid = $busDiverseConsultation->getCurricularComponentExploited($filter);
            $grdResults = $MIOLO->getUI()->getGrid('academic', 'GrdDiverseConsultationCurricularComponentExploited', $filter);
            $grdResults->setData($dataGrid);
            $grdResults->setClose(null);
            $grdResults->setTitle(_M('Aproveitamento', 'academic'));
            unset($grdResults->actions);
            $fields[] = $grdResults;

            $fields[] = new MSeparator();
            $fields[] = new MSeparator();

            // Exibe as proficiências
            $filter = new stdClass();
            $filter->contractId = $contrato->contractId;
            $filter->proficiency = true;
            $dataGrid = $busDiverseConsultation->getCurricularComponentCoursed($filter);
            $grdResults = $MIOLO->getUI()->getGrid('academic', 'GrdDiverseConsultationCurricularComponentRegistered');
            $grdResults->columns[2] = new MGridColumn(_M('Código do período', 'academic'), 'right', true, null, true, null, false);
            $grdResults->columns[5]->visible = false;
            $grdResults->columns[6]->visible = false;
            $grdResults->columns[7]->visible = false;
            $grdResults->columns[8]->visible = false;
            $grdResults->columns[10]->visible = false;
            $grdResults->setTitle(_M('Proficiência', 'academic'));
            $grdResults->setData($dataGrid);
            $grdResults->setClose(null);
            unset($grdResults->actions);
            $fields[] = $grdResults;

            $fields[] = new MSeparator();
            $fields[] = new MSeparator();

            unset($filter->periodId);
        }

        $fields[] = new MSeparator('');

        $url = 'javascript:history.go(-1)';
        $fields[] = new MButton('btnBack', '<< ' . _M('Voltar', $module), $url);

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();

        // get filters values
        $data->personId = $this->personData->personId;

        return $data;
    }
}
?>
