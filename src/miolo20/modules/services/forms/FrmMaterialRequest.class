<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de solicitação de materiais
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 25/05/2011
 */
class FrmMaterialRequest extends SManagementForm
{
    public function __construct()
    {
        parent::__construct(new InsMaterialRequest(), array('materialRequestId'));

        // Desabilita alguns botões da MToolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
        
        
        
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Business
        $busPerson = new BusinessBasicBusPerson();

        // Pega os dados da pessoa logada
        $person = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));

        // Field solicitante
        $fields[] = new MHiddenField('personId', $person->personId);
        $fields[] = $requestor = new MTextLabel('requestor', $person->personId . " - " . $person->name, _M('Solicitante', $module));
        $requestor->setJsHint('Nome do solicitante');

        // Separator
        $fields[] = new MSeparator();

        // Field begin/end date/time
        $fields[] = new SBeginEndPeriod(array(
                    'baseGroup' => false,
                    'required' => true,
                    'type' => 'timestamp',
                    'begin' => array(
                        'label' => _M('Retirada prevista', $module),
                        'dateHint' => _M('Informe a data prevista para a retirada', $module),
                        'timeHint' => _M('Informe a hora prevista para a retirada. Formato: hh:mm', $module)
                    ),
                    'end' => array(
                        'label' => _M('Devolução prevista', $module),
                        'dateHint' => _M('Informe a data prevista para a devolução', $module),
                        'timeHint' => _M('Informe a hora prevista para a devolução. Formato: hh:mm', $module)
                    )
                ));
        $validators[] = new MDATEDMYValidator('beginDate', _M('Data prevista da retirada', $module), 'required');
        $validators[] = new MTIMEValidator('beginTime', _M('Hora prevista da retirada', $module), 'required');
        $validators[] = new MDATEDMYValidator('endDate', _M('Data prevista da devolução', $module), 'required');
        $validators[] = new MTIMEValidator('endTime', _M('Hora prevista da devolução', $module), 'required');

        // Field material type
        $materialTypeLabel = new MText('materialTypeLabel', _M('Tipo de material', $module) . ':');
        $materialTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $materialTypeLabel->setClass('m-caption m-caption-required');
        $materialTypeField = new MSelection('materialTypeId', null, null, InsMaterialType::listMaterialType());
        $materialTypeField->setJsHint('Tipo de material');
        $materialTypeField->addAttribute('onchange', "document.getElementById('btnDisplayGrid').click()");
        $fields[] = new MHContainer('hctMaterialType', array($materialTypeLabel, $materialTypeField));

        // Adiciona botao oculto de submit para o onChange do selection chamar
        $btnSubmit = new MButton('btnDisplayGrid', _M('Carregar', $module));
        $fields[] = new MDiv('divBtnSubmit', $btnSubmit, null, array('style' => 'display:none'));

        // Separator
        $fields[] = new MSeparator();

        /*
         * Grid
         */
        $materialTypeId = MIOLO::_REQUEST('materialTypeId');
        if ( strlen($materialTypeId) > 0 )
        {
            // Obtém o tipo de material
            $materialType = new InsMaterialType($materialTypeId);

            // Dados da Grid
            $gridData = array();
            $filters = new stdClass();
            $filters->materialTypeId = $materialTypeId;
            $filters->isAvailable = DB_TRUE;
            $filters->personId = $person->personId;
            $filters->availabilityBeginDate = MIOLO::_request('beginDate') . ' ' . MIOLO::_request('beginTime');
            $filters->availabilityEndDate = MIOLO::_request('endDate') . ' ' . MIOLO::_request('endTime');
            $gridData = InsMaterial::searchGrid($filters);

            // Grid Material Request
            $fields[] = $gird = $MIOLO->getUI()->getGrid($module, 'GrdMaterialRequest');
            $gird->setData($gridData);
            $gird->setClose(null);
            $gird->clearActions();
            $gird->setTitle(_M('Itens', $module));

            // Verifica se o tipo de material permite empréstimo por material.
            if ( $materialType->allowLoanByMaterial == DB_TRUE )
            {
                $gird->addActionSelect();
            }
        }

        // Separator
        $fields[] = new MSeparator();

        // Field observações
        $fields[] = new MMultiLineField('observation', null, _M('Observações complementares', $module), null, 5, 80);

        // Separator
        $fields[] = new MSeparator();

        // Botão enviar solicitação
        $btnMaterialRequest = new MButton('btnNewMaterialRequest', _M('Enviar solicitação', $module));
        // Botão voltar
        $btnBack = new MButton('btnBackForm', '<< ' . _M('Voltar', $module), $MIOLO->getActionURL($module, $action, null, array('function' => 'search')));
        // Div de botões
        $fields[] = new MDiv('divButtons', array($btnBack, $btnMaterialRequest));

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Salva a nova solicitação de material
     *
     * @param $args
     */
    public function btnNewMaterialRequest_click($params)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Business
        $busPerson = new BusinessBasicBusPerson();

        // Pega os dados da pessoa logada
        $person = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));

        // Obtem os dados
        $args = $this->getData();
        $beginDate = $args->beginDate . " " . $args->beginTime;
        $endDate = $args->endDate . " " . $args->endTime;
        // Obtém o(s) material(is)
        $materials = array();
        foreach ( (array)MIOLO::_REQUEST('selectGrdMaterialRequest') as $material )
        {
            $materials[] = $material;
        }

        // Validação
        if ( SAGU::compareTimestamp($beginDate, '>', $endDate) )
        {
            // Data final deve ser maior que data inicial
            $this->AddAlert(_M('A devolução não pode ser feita antes da retirada.', $module));
        }
        if ( !( SAGU::dateDiff($args->beginDate, SAGU::getDateNow()) >= SAGU::getParameter('INSTITUTIONAL', 'MIN_DAYS_FOR_MATERIAL_REQUEST') ) )
        {
            $this->AddAlert(_M('A solicitação deve ser feita com o número mínimo de @1 dias de antecedência.', $module, SAGU::getParameter('INSTITUTIONAL', 'MIN_DAYS_FOR_MATERIAL_REQUEST')));
        }
        if ( SAGU::dateDiff($args->beginDate, SAGU::getDateNow()) >= SAGU::getParameter('INSTITUTIONAL', 'MAX_DAYS_FOR_MATERIAL_REQUEST') )
        {
            $this->AddAlert(_M('A solicitação deve ser feita com o número máximo de @1 dias de antecedência.', $module, SAGU::getParameter('INSTITUTIONAL', 'MAX_DAYS_FOR_MATERIAL_REQUEST')));
        }
        if ( SAGU::compareTimestamp(SAGU::getDateNow(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP')), '>', $endDate) )
        {
            // Data atual deve ser menor que data final
            $this->AddAlert(_M('A devolução não pode ser feita antes de agora.', $module));
        }
        if ( !strlen($args->materialTypeId) > 0 )
        {
            // Deve ser escolhido um tipo de material
            $this->AddAlert(_M('Você deve escolher um tipo de material.', $module));
        }
        else
        {
            // Tipo de material
            $materialType = new InsMaterialType($args->materialTypeId);

            // Obriga a escolher um material
            if ( (count($materials) < 1) && ($materialType->allowLoanByMaterial == DB_TRUE) )
            {
                $this->AddAlert(_M('Você deve escolher um material.', $module));
            }
        }

        if ( count($materials) > 1 )
        {
            // Mais de um material escolhido
            $this->AddAlert(_M('Você deve escolher apenas um material.', $module));
        }

        // Se tem todos os dados corretamente:
        if ( !$this->HasAlerts() )
        {
            try
            {
                // Organiza os dados para salvar
                $insMaterialRequest = new InsMaterialRequest();
                $insMaterialRequest->personId = $args->personId;
                $insMaterialRequest->beginDate = $beginDate;
                $insMaterialRequest->endDate = $endDate;
                $insMaterialRequest->materialTypeId = $args->materialTypeId;
                $insMaterialRequest->materialId = $materials[0];
                $insMaterialRequest->observation = $args->observation;

                // Salva a solicitação de material
                SDatabase::beginTransaction();
                $insMaterialRequest->save();
                SDatabase::commit();

                // Mensagem de inserido com sucesso
                $message = array();
                $msg = _M('Prezado(a) @1,', $module, $person->name) . '<br />';
                $msg .= _M('Sua solicitação de material está sendo analisada, em breve o status da mesma será alterado.', $module);
                $msg .= _M('Fique atento ao portal.', $module) . '<br /><br />';
                $message[] = $msg;
                $message[] = _M('Caso deseje cancelar seu pedido, entre em contato com a Secretaria Acadêmica.', $module);

                SAGU::information($message, $MIOLO->getActionURL($module, $action, null, array('function' => 'search')));
            }
            catch ( Exception $e )
            {
                // Em caso de erro, rollback e MIOLO->error
                SDatabase::rollback();
                $MIOLO->error($e->getMessage());
            }
        }
    }
}
?>