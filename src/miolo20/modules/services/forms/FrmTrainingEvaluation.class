<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de avaliação de estágio (portal do aluno)
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 08/04/2011
 */

$MIOLO->uses('types/TraTrainingEvaluationAnswer.class', 'training');

class FrmTrainingEvaluation extends SForm
{
    /*
     * Armazena os dados da pessoa (do aluno logado)
     */
    public $personData;
    /*
     * Formulário
     */
    public $FrmAnswer;

    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Instancia o FrmAnswer
        $formData = new stdClass();
        $formData->disableConstruct = true;
        $this->FrmAnswer = $MIOLO->getUI()->getForm('research', 'FrmAnswer', $formData);

        parent::__construct(_M('Ficha de avaliação de estágio', $module), null, null);

        // Desabilita alguns botões da MToolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
        
        
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Instancia o bussines
        $busPerson = new BusinessBasicBusPerson();

        // Pega os dados da pessoa logada
        $this->personData = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));
        $personId = $this->personData->personId;
        $fields[] = new MHiddenField('personId', $personId);

        // Pega o código subscriptionId
        $subscriptionId = MIOLO::_REQUEST('subscriptionId');
        $fields[] = new MHiddenField('subscriptionId', $subscriptionId);

        if ( strlen($subscriptionId) > 0 )
        {
            // Dados do cabeçalho
            $subscription = new TraSubscription($subscriptionId);
            $instituition = $subscription->request->institution;
            $course = $subscription->request->course->description;
            $semester = $subscription->request->semester;
            $semester = strlen($semester) > 0 ? $semester . 'º' : '-';
            $unit = $subscription->request->unitArea->unit->description;
            $beginDate = $subscription->request->beginDate;
            $endDate = $subscription->request->endDate;

            // Cabeçalho
            $fields[] = new MTextLabel('instituition', $instituition, _M('Instituição de Ensino', $module));
            $fields[] = new MTextLabel('course', $course, _M('Curso', $module));
            $fields[] = new MTextLabel('semester', $semester, _M('Semestre', $module));
            $fields[] = new MTextLabel('unit', $unit, _M('Unidade', $module));
            $fields[] = new MTextLabel('period', $beginDate . _M(' à ', $module) . $endDate, _M('Período', $module));

            // Separadors
            $fields[] = new MSeparator();
            $fields[] = new MSeparator();

            // Verifica se há respostas
            $filters = new stdClass();
            $filters->subscriptionId = $subscriptionId;
            $traTrainingEvaluationAnswers = TraTrainingEvaluationAnswer::search($filters);
            if ( count($traTrainingEvaluationAnswers) > 0 )
            {
                // Se já foi respondido retorna somente leitura

                // Desabilita o botão salvar
                $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);

                // Contador
                $count = 0;
                foreach ( $traTrainingEvaluationAnswers as $traTrainingEvaluationAnswer )
                {
                    $answer = $traTrainingEvaluationAnswer->answer;
                    $answer = (strlen($answer) > 0) ? $answer : $traTrainingEvaluationAnswer->option->description;
                    $fields[] = new MTextLabel('field' . $count, $answer, $traTrainingEvaluationAnswer->question->description);

                    // Separador
                    $fields[] = new MSeparator();

                    $count++;
                }
            }
            else
            {
                // Se ainda não foi respondido retorna o questionário
                $args = new stdClass();
                $args->personId = $personId;
                $args->subscriptionId = $subscriptionId;
                $args->formId = SAGU::getParameter('TRAINING', 'TRAINING_EVALUATION_FORM_ID');
                // Monta a ficha de avaliação (questões)
                $fields = array_merge($fields, $this->FrmAnswer->insertAnswer($args));

                // Botão salvar
                $fields[] = new MButton('tbBtnSave', _M('Salvar', $module));
            }
        }
        else
        {
            $MIOLO->error(_M('Nenhum dado foi encontrado.', $module));
        }

        $this->setValidators($validators);
        $this->setFields($fields);
        parent::defineFields();
    }

    /**
     * Função que salva as respostas
     */
    public function tbBtnSave_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = 'main:training:trainingHistory';

        // Pega os dados do formulário
        $data = $this->getData();

        // Instance the business
        $busForm = new BusinessResearchBusForm();
        $busOption = new BusinessResearchBusOption();
        $busQuestion = new BusinessResearchBusQuestion();

        $subscriptionId = $data->subscriptionId;

        if ( $subscriptionId )
        {
            try
            {
                // Get the questions
                $questions = $busQuestion->listQuestionToForm( SAGU::getParameter('TRAINING', 'TRAINING_EVALUATION_FORM_ID') );

                // Percorre as questões do questionário
                foreach ( $questions as $question )
                {
                    $traTrainingEvaluationAnswer = new TraTrainingEvaluationAnswer();
                    $traTrainingEvaluationAnswer->subscriptionId = $subscriptionId;

                    $questionId = $question[0];
                    $traTrainingEvaluationAnswer->questionId = $questionId;

                    // Deleta as respostas anteriores (para este subscriptionId nesse formulário)
                    $filters = new stdClass();
                    $filters->subscriptionId = $subscriptionId;
                    $filters->questionId = $questionId;
                    $oldAnswer = TraTrainingEvaluationAnswer::searchGrid($filters);
                    if ( !is_null($oldAnswer) )
                    {
                        $oldTraTrainingEvaluationAnswer = new TraTrainingEvaluationAnswer($oldAnswer[0][0]);
                        $oldTraTrainingEvaluationAnswer->delete();
                    }

                    // Get the question data
                    $dataQuestion = $busQuestion->getQuestion($questionId);
                    $answerTypeId = $dataQuestion->answerTypeId;

                    // If answer type is descriptive
                    if ( $answerTypeId == RshAnswerType::DESCRIPTIVE )
                    {
                        // Get the answer
                        $key = 'questionAnswer' . $dataQuestion->questionId;
                        $answer = $data->$key;

                        $traTrainingEvaluationAnswer->answer = $answer;
                        if ( strlen($answer) > 0 )
                        {
                            $ok = $traTrainingEvaluationAnswer->save();
                        }
                    }
                    elseif ( $answerTypeId == RshAnswerType::MULTIPLE )
                    {
                        $options = $busOption->listOptionToQuestion($dataQuestion->questionId);
                        for ( $i = 0; $i < count($options); $i++ )
                        {
                            // Get the answer
                            $key = 'questionAnswer' . $dataQuestion->questionId . '_' . $options[$i][0];
                            $answer = $data->$key;

                            if ( strlen($answer) > 0 )
                            {
                                $traTrainingEvaluationAnswer->optionId = $options[$i][0];
                                $ok = $traTrainingEvaluationAnswer->save();
                            }
                        }
                    }
                    elseif ( $answerTypeId == RshAnswerType::ALTERNATIVE )
                    {
                        // Get the answer
                        $key = 'questionAnswer' . $dataQuestion->questionId;
                        $answer = $data->$key;
                        // Get the answer text
                        $key = 'questionAnswerText' . $dataQuestion->questionId;
                        $answerText = $data->$key;

                        $traTrainingEvaluationAnswer->optionId = $answer;
                        $traTrainingEvaluationAnswer->answer = $answerText;
                        $ok = $traTrainingEvaluationAnswer->save();
                    }
                }

                $MIOLO->information(_M('As respostas foram salvas com sucesso.', $module), $MIOLO->getActionUrl($module, $action));
            }
            catch ( Exception $e )
            {
                $MIOLO->error(_M('Ocorreu um erro ao salvar as respostas.', $module), $MIOLO->getActionUrl($module, $action));
            }
        }
        else
        {
            $MIOLO->error(_M('Dados insuficientes, favor informar código do formulário e do inscrito.', $module), $MIOLO->getActionUrl($module, $action));
        }
    }

    /**
     * Caso a questão do tipo Alternativa tenha a possibilidade
     * de um campo descritivo, é esta função que irá exibí-lo.
     */
    public function showAdditionalTextArea($args)
    {
        // Chama a função lá no FrmAnswer do módulo Questionário
        return $this->FrmAnswer->showAdditionalTextArea($args);
    }
}
?>