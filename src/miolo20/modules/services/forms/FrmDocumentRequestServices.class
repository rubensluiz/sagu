<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Document Request form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 06/04/2011
 */

/**
 * Form to manipulate a document request
 */
class FrmDocumentRequestServices extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Solicitação de serviço', $module), null, null);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $login = $MIOLO->getLogin();

        // Campo Documento
        $fields[] = new MSelection('taskConfigId', null, _M('Serviço', $module), BasTaskConfig::listRecords((object)array('filterGroupUser' => $login->idkey)), true);
        $validators[] = new MRequiredValidator('taskConfigId', _M('Documento', $module));

        // Detalhes
        $fields[] = new MMultiLineField('details', null, _M('Detalhes', $module), null, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $validators[] = new MRequiredValidator('details', _M('Detalhes', $module));

        $url = 'javascript:history.go(-1)';
        $btnBack = new MButton('tbBtnBack', _M('Voltar', $module), $url);
        $btnSave = new MButton('tbBtnRequest', _M('Solicitar', $module));

        $fields[] = new MHContainer('htcButons', array($btnBack, $btnSave));

        $this->setFields($fields);
        $this->setValidators($validators);
    }

    /**
     * Ação do Botão Solicitar
     */
    public function tbBtnRequest_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        try
        {
            $data = $this->getTypesData();

            // Informações do usuario
            $login = $MIOLO->getLogin();

            // Verificar as pendencias
            $subscriptionTeam = new TraSubscriptionTeam();
            $pendings = $subscriptionTeam->getTraineePendings();

            if ( count($pendings) > 0 )
            {
                foreach ( $pendings as $msg )
                {
                    $this->addError($msg);
                }
            }
            else
            {
                // Pendência
                $task = new BasTask();
                $task->title = _M('Solicitação', $module);
                $task->details = $data->details;
                $task->creationDate = SAGU::getDateNow();
                $task->creatorIdUser = $login->idkey;
                $task->taskStatusId = BasTaskStatus::STATUS_NEW;
                $task->taskConfigId = $data->taskConfigId;

                if ( $task->save() )
                {
                    $msg = _M('Solicitação efetuada com sucesso', $module);
                    $caption = _M('Informação', $module);
                    SAGU::information($msg, $MIOLO->getActionURL($module, $action, null, $opts));
                }
                else
                {
                    $msg = _M('Erro executando a operação solicitada.', $module);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                    $caption = _M('Erro', $module);
                    SAGU::error($msg, $goto, $caption);
                }
            }
        }
        catch ( Exeption $e )
        {
            $this->addError($e->getMessage());
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->taskConfigId = $this->getFormValue('taskConfigId');
        $data->details = $this->getFormValue('details');

        return $data;
    }
}
?>
