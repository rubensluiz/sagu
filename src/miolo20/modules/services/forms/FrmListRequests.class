<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável por listar solicitações.
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Bruno E. Fuhr [bruno@solis.com.br]
 *
 * @since
 * Class created on 19/03/2014
 */

class FrmListRequests extends SForm
{
    
    private $divGrid;

    public function __construct()
    {
        parent::__construct(_M('Solicitações de estágio', $module), null, null);
    }
    
    public function defineFields()
    {
        // Status
        $fields[] = new MSelection('status', $this->getFormValue('status', $data->status), _M('Status', $module), TraRequest::listStatus());
        
        /**
         * Período de datas de solicitação de estágio
         */
        //Field beginDate
        $beginDateLabel = new MLabel(_M('Início', $module) . ':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDate = new MCalendarField('beginDateRequest', $this->getFormValue('beginDateRequest', $data->beginDateRequest), null, 10);
        $beginDate->setJsHint(_M('Informe a data de início da solicitação de estágio',$module));
        $requestDateStage[] = new MHContainer('beginDateRequestCntI', array( $beginDateLabel, $beginDate ));

        //Field endDate
        $endDateLabel = new MLabel(_M('Fim', $module) . ':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDate = new MCalendarField('endDateRequest', $this->getFormValue('endDateRequest', $data->endDateRequest), null, 10);
        $endDate->setJsHint(_M('Informe a data de fim da solicitação de estágio',$module));
        $requestDateStage[] = new MHContainer('endDateRequestCntI', array( $endDateLabel, $endDate ));

        $bsgRequestDataStage = new MBaseGroup('bsgDataStage', _M('Período de solicitação',$module), $requestDateStage, 'vertical');
        $bgrPeriods[] = $bsgRequestDataStage;

        /**
         * Período de datas do estágio
         */
        //Field beginDate
        $beginDateLabel = new MLabel(_M('Início', $module) . ':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), null, 10);
        $beginDate->setJsHint(_M('Informe a data de início do período de estágio',$module));
        $dateStage[] = new MHContainer('beginDateCnt', array( $beginDateLabel, $beginDate ));

        //Field endDate
        $endDateLabel = new MLabel(_M('Fim', $module) . ':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), null, 10);
        $endDate->setJsHint(_M('Informe a data de fim do período de estágio',$module));
        $dateStage[] = new MHContainer('endDateCnt', array( $endDateLabel, $endDate ));
        
        $bsgDateStage = new MBaseGroup('bsgDataStage', _M('Período do estágio',$module), $dateStage, 'vertical');
        $bgrPeriods[] = $bsgDateStage;
        
        $fields[] = new MHContainer(rand(), $bgrPeriods);
        
        // Separator
        $fields[] = new MSeparator();
        $fields[] = new MButton('btnGenerate', _M('Localizar', $module));
        $fields[] = new MSeparator();

        $fields[] = $this->divGrid = new MDiv('divGrid');
        if ( $this->isPaginatingData() || in_array(SAGU::getEventName(), array('exportGridAsCSV:click', 'btnGenerate:click')) || MIOLO::_REQUEST('orderby') )
        {
            $this->divGrid->setInner($this->generateGrid());
        }

        $fields[] = new MDiv('divPopup');
        
        $this->SetFields($fields);
    }
    
    /**
     * Popula selection da area
     * @param <object> $args
     * @return Fields
     */
    public function changeUnitId($args, $readOnly = false)
    {
        $args->disableOnChange = true;
        $args->unitId = strlen($args->unitId)>0 ? $args->unitId : $this->getFormValue('unitId');
        $args->teamOrganizerId = $this->getPhysicalPersonLogged()->personId;
        
        return TraCommonFields::changeUnitId($args, $readOnly);
    }   

    /**
     * Função chamada na ação do botão localizar
     */
    public function generateGrid()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Filters
        $dataForm = $this->getTypesData();

        $fields[] = new MSeparator();
        try
        {
            //$dataForm->teamOrganizerId = $this->getPhysicalPersonLogged()->personId;
            $data = TraRequest::searchGrid($dataForm);

            if ( count($data) > 0 )
            {
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdConsultRequest',$data);
                $grdResults->setData($data);
                $grdResults->setTitle(_M('Solicitações de estágio', $module));
                $fields[] = $grdResults;

//                $fields[] = new MSeparator();
//                $statusLabel = new MLabel(_M('Definir selecionados como',$module));
//                $statusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
//                $defineToStatus = new MSelection('defineToStatus', null, null, TraRequest::listStatus());
//                $defineToStatus->setJsHint(_M('Informe o status das solicitações selecionadas',$module));
//                $fields[] = new MHContainer('hctStatus', array($statusLabel,$defineToStatus));
//                $fields[] = new MButton('btnApply', _M('Aplicar',$module));

                return  $fields;
            }
            else
            {
                throw new Exception(_M('Nenhum registro encontrado.', $module));
            }
        }
        catch ( Exception $e )
        {
            $this->AddInfo($e->getMessage());
        }
    }

    /**
     * Função chamada na ação do botão localizar
     */
    public function btnApply_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        set_time_limit(0);

        //Status selecionado
        $defineToStatus = MIOLO::_REQUEST('defineToStatus');

        //Solicitações de estágio selecionadas na grid
        $selectedGrid = MIOLO::_REQUEST('selectGrdConsultRequest');

        try
        {
            if ( !strlen($defineToStatus)>0 )
            {
                $msg = _M("O campo 'Definir selecionados como' deve ser informado" ,$module).'.';
                throw new Exception($msg);
            }

            //Verifica se foi selecionada pelo menos uma solicitação.
            if ( is_array($selectedGrid) )
            {
                SDatabase::beginTransaction();

                //Muda status das solicitações selecionadas
                foreach ( $selectedGrid as $requestId )
                {
                    $traRequest = new TraRequest($requestId);
                    $traRequest->status = $defineToStatus;
                    $traRequest->save();
                }

                SDatabase::commit();

                $this->SetFormValue('selectGrdConsultRequest', null);                
            }
            else
            {
                $msg = _M("É necessário selecionar pelo menos uma solicitação" ,$module).'.';
                throw new Exception($msg);
            }
            
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }

        $this->divGrid->setInner( $this->generateGrid() );
    }


    /**
     * Ação do botão deletar da grid
     **/
    public function btnDelete_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $gotoYes = $this->getAjaxAction('btnDelete_confirm', 'divGrid', false, (array)$args, false);
        $gotoNo = "javascript:document.getElementById('btnGenerate').click();";

        $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE'), $gotoYes, $gotoNo);

    }

    /**
     * Ação do botão confirmar da popup
     **/
    public function btnDelete_confirm($args)
    {
        $MIOLO = MIOLO::getInstance();
        $requestId = $args->requestId;

        if (is_numeric($requestId))
        {
            $object = new TraRequest($requestId);
            $ok = $object->delete();
        }
        
        $MIOLO->information(   SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), "javascript:document.getElementById('btnGenerate').click();");

        return null;
    }
    
    /**
     * Obtem os dados do form
     */
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        $login = $MIOLO->GetLogin();

        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $physicalPersonAdmin = $busPhysicalPerson->getPhysicalPersonByMioloUserName($login->id);
        
        $data = new stdClass();
        $data->beginDateRequest = MIOLO::_REQUEST('beginDateRequest');
        $data->endDateRequest = MIOLO::_REQUEST('endDateRequest');
        $data->beginDate = MIOLO::_REQUEST('beginDate');
        $data->endDate = MIOLO::_REQUEST('endDate');
        $data->status = MIOLO::_REQUEST('status');
        $data->addendumCourseAdminId = TraAddendumCourseAdmin::getAddendumCourseAdminId($physicalPersonAdmin->personId);
        
        return $data;
    }
    
}

?>
