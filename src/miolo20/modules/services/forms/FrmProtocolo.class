<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário para consultar as residências feitas pelo aluno
 *
 * @author Felipe Ferreira [felipe_ferreira@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 21/07/2011
 */


$MIOLO->uses('classes/prtReciboProtocolo.class.php', 'portal');

class FrmProtocolo extends SForm
{
    /*
     * Armazena os dados da pessoa (do aluno logado)
     */
    public $personData;

    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);
        
        parent::__construct(_M('Solicitações de protocolo', $module), null, null);

        //Acessado pelo módulo de serviços
        if ( SAGU::userIsFromServices() )
        {
            // Desabilita a Toolbar
            $this->disableToolbar();
        }
        else
        {
            // Desabilita alguns botões da toolbar
            $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
                    
        }
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $busAssunto = new BusinessProtocolBusSubject();
        $filtros = new stdClass();
        $filtros->isActive = array(BusinessProtocolBusSubject::TIPO_ATIVO_PORTAL, BusinessProtocolBusSubject::TIPO_ATIVO_AMBOS);        
                                   
        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson = new BusinessBasicBusPerson();
        $personData = $busPerson->getPersonByMioloUserName($mioloUserName);
        
        if($personData->isResidentMedico)
        {
            $filtros->availableTo = 'R'; 
        }
        else if($personData->isPreceptorUnidadeTematicaMedico)
        {
            $filtros->availableTo = 'E'; 
        }
        else
        {
            $filtros->availableTo = 'X';
        }
        
        
        $assuntos = $busAssunto->searchSubject($filtros);

        
        $fields[] = new MDiv();
        $fields[] = new SHiddenField('personId', $this->personid);
        
        $label = new MLabel(_M('Selecione o assunto:'));
        $label->addStyle('margin-left', '35px');
        $label->addStyle('width', '150px');
        
         // Para nÃ£o mostrar 'Sim' e 'NÃ£o' como opÃ§Ãµes do selection.
        if ( is_null($assuntos) )
        {
            $assuntos = array();
        }
        
        $selAssunto = new MSelection('selAssunto', '', '', $assuntos);
        $selAssunto->addAttribute('onchange', SForm::getAjaxAction('selAssuntoChange', 'divAssunto', false));    

        $divAssunto = new MDiv('divAssunto');
        $fldAssunto[] = new MHContainer('contAssunto', array($label, $selAssunto)); 
        $fldAssunto[] = new MSeparator();
        $fldAssunto[] = new MDiv('divAssunto');
        $fields[] = new MDiv('teste', new MBaseGroup('grpAssunto', _M('Assunto'), $fldAssunto));
        $fields[] = new MDiv('divDocumentos');
        
        foreach($fields as $field)
        {
            $field->addStyle('margin-left', '5%');
            $field->addStyle('margin-right', '5%');
        }
        
        $fields[] = new MDiv();
       
        
	parent::defineFields(array('fields' =>$fields));
    }


    public function selAssuntoChange($args)
    { 
        
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        if($args->selAssunto)
        {
            $busAssunto = new BusinessProtocolBusSubject();
            $assunto = $busAssunto->getSubject($args->selAssunto);
        
            $filters = new stdClass();
            $filters->subjectId = $args->selAssunto;
            $filters->level = 1;
        
            $busSubjectSector = new BusinessProtocolBusSubjectSector();
            $sectorsList = $busSubjectSector->searchSubjectSector($filters);
            $contractFilters = new stdClass();
            $contractFilters->personId = $args->personId;

            $busContract = new BusinessAcademicBusContract();
            $contract = $busContract->searchContract($contractFilters);
        
            $response = array();
       
        if ( count($contract) > 1 )
        {
            $listContracts = $busContract->listContracts($args->personId);
            $contractsLabel = new MLabel('Selecione o contrato:');
            $contractsLabel->addStyle('margin-left', '30px');
            $contractsLabel->addStyle('width', '150px'); 
            $contracts = new MSelection('contractId', '', '', $listContracts);
            $response[] = new MHContainer('contContrato', array($contractsLabel, $contracts));
        }
        else
        {
            if ( !is_null($contract) )
            {
                $response[] = new SHiddenField('contractId', $contract[0][0]);
            }
        }
        
        $busDocumento = new BusinessProtocolBusRequiredDocument();
        $documentos   = $busDocumento->listRequiredDocument($assunto->subjectId);

        if ( $assunto->showDescription == DB_TRUE )
        {
            $label = new MLabel(_M('Descrição:'));
            $label->addStyle('margin-left', '30px');
            $label->addStyle('width', '150px');
            $descricao = new MMultiLineField('description', '', '', 20, 5, 80);
            if( $assunto->descriptionRequired)
            {
                $validators[] = new MRequiredValidator('description',_M('Descrição'));
            }
            $response[] = new MHContainer('divAssunto', array($label, $descricao));
        }
        else
        {
            $response[] = new MDiv('divDescricao');
        }
          if ( count($sectorsList) > 1 )
        {
            $sectorsLabel = new MLabel('Encaminhar para:');
            $sectorsLabel->addStyle('margin-left', '30px');
            $sectorsLabel->addStyle('width', '150px'); 
            $cont=0;
            $arrayList = array();
            foreach ( $sectorsList as $l )
            { 
                $arrayList[$cont][0] = $l[1];
                $arrayList[$cont][1] = $l[2];
                $cont++;
            }
            $sectors = new MSelection('currentSectorId', '', '', $arrayList);
            $response[] = new MHContainer('contSector', array($sectorsLabel, $sectors));
        }
        elseif ( count($sectorsList) == 1 )
        {
            $response[] = new MHiddenField('currentSectorId', $sectorsList[0][1]);
            $label = new MLabel(_M('Encaminhar para:'));
            $label->addStyle('margin-left', '30px');
            $label->addStyle('width', '150px');
            $currentSector = new MTextField('currentSectorName', $sectorsList[0][2], '', 80);
            $response[] = new MHContainer('contAssunto', array($label, $currentSector));
            $currentSector->setReadOnly(true);
        }
        else
        {      
            $response = array();
            $response[] = Prompt::Information(_('O próximo encaminhamento não está cadastrado para o assunto informado.'), $goto, $event);
        }
        
        if ( count($customFields) > 0 )
        {
            $vct = new MVContainer('vctCF', $customFields, MControl::FORM_MODE_SHOW_SIDE);
            $response[] = new MBaseGroup('divCFields', _M('Informações extras'), array($vct));
        }
        
        
        if ( is_array($documentos) )
        {
            unset($docs);
            foreach ( $documentos as $documento )
            {
                $label = new MLabel($documento[1] . ':');
                $label->addStyle('margin-left', '30px');
                $label->addStyle('width', '200px');
                $upload = new MFileField("upload[{$documento[0]}]");
                $validators[] = new MRequiredValidator("upload[{$documento[0]}]",_M('Upload'));
                $uploadDescription = new MTextField("uploadDescription[{$documento[0]}]", '', '', 50);
                $validators[] = new MRequiredValidator("uploadDescription[{$documento[0]}]",_M('Descrição do upload'));
                $uploadDescription->addStyle('margin-top', '-2px');
                $uploadDescription->setJsHint('Descrição do documento');
                
                $docs[] = new MHContainer('contUpload' . $documento[0], array($label, $uploadDescription, $upload));
            }
             $response[] =   new MSeparator();
             $response[] = new MDiv('hct',new MBaseGroup('divDocumentos', _M('Documentos'), $docs));
        }
        else
        {
               $response[] =  new MHContainer('divDocumentos',new MDiv('divDocumentos'));
        }
        }
         $btnVoltar = new MButton('btnVoltar', _M('Voltar'), $MIOLO->getActionURL($module, 'main:resmedica:protocolo', NULL, NULL));        
         $btnFinalizar = new MButton('btnFinalizar', _M('Finalizar'));        
         $response[] = new MDiv('hctX', array($btnVoltar, $btnFinalizar), 'Divbt');
         $this->SetValidators($validators);
        return SAGU::alignFields($response);        
    }
    
    public function btnFinalizar_click($args)
    {
       
        $MIOLO = MIOLO::getInstance();

        if ( !MIOLO::_REQUEST('selAssunto'))
        {
            new MMessageWarning(_M('Voce deve selecionar o assunto.'));
        }
        else
        {
            $busAssunto = new BusinessProtocolBusSubject();
            $busDocumentoRequerido = new BusinessProtocolBusRequiredDocument();
            $busRequest = new BusinessProtocolBusRequestPtc();
            $busDocumento = new BusinessProtocolBusDocumentPtc();
            $busContract = new BusinessAcademicBusContract();
            
            $mioloUserName = trim($MIOLO->getLogin()->id);
            $busPerson = new BusinessBasicBusPerson();
            $personData = $busPerson->getPersonByMioloUserName($mioloUserName);
            
            $contractFilters = new stdClass();
            $contractFilters->personId = $personData->personId;
            $contract = (array) $busContract->searchContract($contractFilters);
            if ( count($contract) <= 0 )
            {
                $inscricoes = AcpInscricao::buscarInscricoes($contractFilters);
            }
            
            // Validar contrato.
            if ( !strlen(MIOLO::_REQUEST('contractId')) > 0 && count($contract) > 0 )
            {
                new MMessageWarning(_M('O campo \'Contrato\' é obrigatório.'));
                return;
            }

            $assunto = $busAssunto->getSubject(MIOLO::_REQUEST('selAssunto'));
            $documentos = $busDocumentoRequerido->listRequiredDocument($assunto->subjectId);
                                   
            $upload = MIOLO::_REQUEST('upload');
            $uploadDescription = MIOLO::_REQUEST('uploadDescription');
                
            $requestData = new stdClass();
            $requestData->personId = $personData->personId;
            $requestData->subjectId = $assunto->subjectId;
            $requestData->description = MIOLO::_REQUEST('description');
            $requestData->contractId = MIOLO::_REQUEST('contractId');

            $cobraTaxa = PtcSubject::cobrarTaxaPrimeiraSolicitacao($requestData);
            
             // Se tem taxa o status da solicita?§??o deve ser 'Aberta', sen??o 'Em andamento'.
            if ( ($assunto->taxValue <= 0) || ($cobraTaxa == DB_FALSE && ($assunto->taxValue > 0)) )
            {
                // HARDCODE
                $requestData->statusId = 2;
            }
            else
            {
                // HARDCODE
                $requestData->statusId = 1;
            } 
            $busSubjectSector = new BusinessProtocolBusSubjectSector();
            $filters = new stdClass();
            $filters->subjectId = $requestData->subjectId;
            $filters->level = 1;
            $subjectSectors = $busSubjectSector->searchSubjectSector($filters);

            $requestData->sectorId = $subjectSectors[0][1];
            $requestData->currentSectorId = $subjectSectors[0][1];
            $args->sectorId = $subjectSectors[0][1];
            $requestData->currentSubjectId = $assunto->subjectId;
            $requestData->currentLevel = 1;



            $requestData = $this->encaminhamentoParaCoordenadores($requestData);
         
            $request = $busRequest->insertRequest($requestData);
            if ( is_array($documentos) )
            {
                $this->page->setEnctype('multipart/form-data'); // precisamos disto para que o upload funcione
                $fieldArquivo = new SFileField("arquivo_", $this, array('fieldLabel' => false));
                $displayDiv = strlen(1) > 0 ? 'display:block' : 'display:none';
                $oldFileId = new SHiddenField("oldFileIds", 1);
                $divArquivo = new MDiv("divArquivo_", array($fieldArquivo, $oldFileId), null, array( 'style' => $displayDiv, 'align' => 'center' ));
               // $upload = MFileField::uploadFiles($MIOLO->getConf('home.html') . "/files/tmp/");
            }
            
            if ( $request )
            {
                $busFile = $MIOLO->getBusiness('basic', 'BusFile');
                foreach ( $documentos as $documento )
                {
                    $fileId = NULL;
                    $filePath = $MIOLO->getConf('home.html') . "/files/tmp/" . $args->upload[$documento[0]];

                    if( is_file($filePath) )
                    {
                        $fdata = new stdClass();            
                        $fdata->uploadFileName = $filePath;
                        $fdata->contentType = mime_content_type($filePath);

                        $fileId = $busFile->insertFile($fdata, $filePath);
                        
                        $documentData = new stdClass();
                        $documentData->requestId = $request;
                        $documentData->description = $args->uploadDescription[$documento[0]];
                        $documentData->fileId = $fileId;

                        $busDocumento->insertDocument($documentData);
                    }
                }
                
                // Verifica se Ã© do tipo 'solicitaÃ§Ã£o de reposiÃ§Ã£o de aula' e se tem coordenador para mandar email.
                if ( $requestData->subjectId == SAGU::getParameter('PROTOCOL', 'TIPO_PROTOCOLO_REPOSICAO_AULA') )
                {
                    $busCourseCoordinator = new BusinessAcademicBusCourseCoordinator();
                    $coordenadores = array();
                    $isContract = false;
                    
                    if ( strlen($contract[0][0]) > 0 )
                    {
                        $coordenadores = $busCourseCoordinator->obterCoordenadoresPeloContrato($contract[0][0]);
                        $isContract = true;
                    }
                    else if ( strlen($inscricoes[0]->inscricaoid) > 0 )
                    {
                        $coordenadores = AcpCoordenadores::obterCoordenadoresPorInscricao($inscricoes[0]->inscricaoid);
                    }
                    
                    foreach ( $coordenadores as $coordenador )
                    {
                        if ( !$isContract || ( $isContract && $busCourseCoordinator->isCourseCoordinator($coordenador[0]) ) )
                        {
                            $preferencias = $busCourseCoordinator->obterPreferenciasDoCoordenador($coordenador[0]);

                            if ( $preferencias[2] == DB_TRUE )
                            {
                                $busPerson = new BusinessBasicBusPhysicalPerson();
                                $person = $busPerson->getPhysicalPerson($coordenador[0]);
                                $personName = $person->name;
                                $personEmail = $person->email;

                                $tags = array( '$DESCRIPTION' => $requestData->description );

                                // Business email and company
                                $busEmail = new BusinessBasicBusEmail();
                                $busCompany = new BusinessBasicBusCompany();
                                $emailId = SAGU::getParameter('PROTOCOL', 'REPOSICAO_AULA_EMAIL_ID');

                                if ( $emailId != 0 )
                                {
                                    $dataEmail = $busEmail->getEmail($emailId);
                                    $dataCompany = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

                                    // Parameters
                                    $from = strtolower($dataEmail->from);
                                    $fromName = $dataCompany->acronym;
                                    $recipient[$personName] = strtolower($personEmail);
                                    $subject = $dataEmail->subject;
                                    $body = strtr($dataEmail->body, $tags);
                                    $mail = new sendEmail($from, $fromName, $recipient, $subject, $body, array());
                                    $mail->sendEmail();
                                }
                            }
                        }
                    }
                }
                
                $response = new MDiv('divBtns',array(new MButton('btnVoltar', _M('Voltar'))));

                $recibo = new prtReciboProtocolo($request, $personData->personId);
                $txtInfo = $recibo->gerarRecibo();
                  // Campos personalizados
                $customFieldIds = BasCustomField::getCustomFieldIdsBySubject($requestData->subjectId);
                $values = BasCustomField::getLabelAndValues($customFieldIds, $request);
                foreach ( $values as $label => $value )
                {
                    $label = strtoupper($label);
                    $txtInfo .= "\n{$label}: {$value}";
                }
                // Popup com as informaÃ§Ãµes da solicitaÃ§Ã£o    
                $dlgFields[] = $txtField =  new MMultiLineField('txtInfo', $txtInfo, '', 50, 12, 60);
                $txtField->setReadOnly(TRUE);
            
                $link = $MIOLO->getConf('home.url') . "/download.php?filename={$recibo->obterArquivo()}";
                $link = str_replace('/miolo20/', '/miolo26/', $link);
                $linkArquivo = new MText('lnkArquivo', '<a href="' . $link . '" target="_blank">' . _M('Imprimir comprovante') . '</a>');
                $linkArquivo->addStyle('font-size', '18px');
            
                $dlgFields[] = new MDiv('divLink',$linkArquivo);
             
                $flds[] = $aplicar = new MButton('fecharVisualizacao', _M('Fechar visualização', 'services'), SForm::getAjaxAction('fecharVisualizacao', 'divPopup', false));
            
                $dlgFields[] = new MDiv('divPopup', $flds);
                
                MPopup::show('popupVizualizarSolicitacao',$dlgFields,'Solicitação efetuada com sucesso');
            }
            else
            {
                new MMessageError(_M('Erro ao realizar a solicitação de protocolo.'));
            }
        }

    }
    
      /**
     * Caso os encaminhamentos do assunto selecionado estejam marcados para coordenadores.
     * 
     * @param stdClass $args
     */
    public function encaminhamentoParaCoordenadores($data)
    {
        $filters = new stdClass();
        $filters->subjectId = $data->subjectId;

        // Busca todos encaminhamentos do assunto.
        $busSubjectSector = new BusinessProtocolBusSubjectSector();
        $subjectSectors = $busSubjectSector->searchSubjectSector($filters);

        foreach ( $subjectSectors as $subjectSector  )
        {
            // Se a flag de encaminhamento para coordenador estiver ativa.
            if ( $subjectSector[6] == DB_TRUE )
            {
                // Se a pessoa solicitante possuir contrato.
                if ( !is_null($data->contractId) )
                {
                    $busContract = new BusinessAcademicBusContract();
                    $contract = $busContract->getContract($data->contractId);
                    
                    $data->courseId = $contract->courseId;
                    $data->courseVersion = $contract->courseVersion;
                    $data->turnId = $contract->turnId;
                    $data->unitId = $contract->unitId;
                    
                    break;
                }
            }
        }
        
        return $data;
    }
    
    public function btnVoltar_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $this->page->redirect($MIOLO->getActionURL($module, 'main:resmedica:protocolo', NULL, NULL));
    }
    
      public function fecharVisualizacao()
    {
        MPopup::remove();
    }
}
?>