<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for fiReceivableInvoice table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 13/12/2005
 */
$MIOLO = MIOLO::getInstance();
$MIOLO->uses('forms/FrmInvoiceView.class', 'services');

/**
 * Form to search the finInvoice table
 */
class FrmReceivableInvoiceView extends FrmInvoiceView
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->module = $module;

        parent::__construct(_M('Consulta', $module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();

        // Desabilita botões de fechar e de favoritos
        
        
    }

    /**
     *  Default method to define fields
     */
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = $this->module;
        $function = MIOLO::_request('function');
        $data = $this->getFormData();

        $this->createInvoiceFields($data);

        $sendDateLabel = new MText('sendDateLabel', _M('Data de envio', $module) . ':');
        $sendDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sendDate = new MTextLabel('sendDate', $this->getFormValue('sendDate', $data->sendDate));
        $hctSendDate = new MHContainer('hctSendDate', array($sendDateLabel, $sendDate));
        $field[] = $hctSendDate;

        $returnDateLabel = new MText('returnDateLabel', _M('Data de retorno', $module) . ':');
        $returnDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $returnDate = new MTextLabel('returnDate', $this->getFormValue('returnDate', $data->returnDate));
        $hctReturnDate = new MHContainer('hctReturnDate', array($returnDateLabel, $returnDate));
        $field[] = $hctReturnDate;

        $returnFileLabel = new MText('returnFileId', _M('Arquivo de retorno', $module) . ':');
        $returnFileLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $returnFileId = new MTextLabel('returnFileId', $this->getFormValue('returnFileId', $data->returnFileId));

        $fileNameLabel = new MText('fileName', _M('Nome do arquivo', $module) . ':');
        $fileName = new MTextLabel('fileName', $this->getFormValue('fileName', $data->fileName));
        $hctFileName = new MHContainer('hctFilename', array($fileNameLabel, $fileName));
        $field[] = $hctFileName;

        $fields[] = new MSeparator('');

        $url = 'javascript:history.go(-1)';
        $fields[] = new MButton('btnBack', '<< ' . _M('Voltar', $module), $url);

        $fields[] = new MSeparator('');

        $this->addFields($fields);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /**
     * Function to get information about invoice and set this on form
     */
    public function getFormData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $invoiceId = MIOLO::_request('invoiceId') ? MIOLO::_request('invoiceId') : MIOLO::_request('invoiceId', 'GET');
        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();

        if ( !$invoiceId )
        {
            $invoiceId = $businessReceivableInvoice->getInvoiceIdByBankInvoiceId(MIOLO::_request('returnBankCode'));
            if ( !$invoiceId )
            {
                $MIOLO->Information(_M('Código de retorno bancário inválido', $module), MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET'));
            }
        }
        if ( !$businessReceivableInvoice->verifyReceivableInvoice($invoiceId) )
        {
            $MIOLO->Information(_M('Código do título a receber inválido', $module), MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET'));
        }

        $data = $businessReceivableInvoice->getReceivableInvoice($invoiceId);
        $data->invoiceId = $invoiceId;
        return $data;
    }
}
?>