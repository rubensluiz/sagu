<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Form to register a user
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 04/04/2011
 */
class FrmUserRegister extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Cadastrar usuário', $module), null, null);

        // Disable toolbar buttons
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
        
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Field person name
        $personLabel = new MText('personLabel', _M('Nome',$module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personLabel->setClass('m-caption m-caption-required');
        $personName = new MTextField('personName', $this->getFormValue('personName',$data->name), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Informe o nome da pessoa',$module));
        $validators[] = new MRequiredValidator('personName', _M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personName));
        $hctPerson->setShowLabel(true);
        $fields[] = $hctPerson;

        // Field sex
        $sexLabel = new MText('sexLabel', _M('Sexo',$module) . ':');
        $sexLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sexLabel->setClass('m-caption m-caption-required');
        $sex = new MSelection('sex', $this->getFormValue('sex', $data->sex), null, SAGU::listSex());
        $sex->setJsHint(_M('Informe o sexo',$module));
        $validators[] = new MRequiredValidator('sex', _M('Sexo',$module));
        $fields[] = new MHContainer('hctSex', array($sexLabel, $sex));

        // Field date birth
        $dateBirthLabel = new MText('dateBirthLabel', _M('Data de nascimento',$module) . ':');
        $dateBirthLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dateBirthLabel->setClass('m-caption m-caption-required');
        $dateBirth = new MCalendarField('dateBirth', $this->getFormValue('dateBirth',$data->dateBirth), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[] = new MDateDMYValidator('dateBirth',_M('Data de nascimento',$module),'required');
        $dateBirth->setJsHint(_M('Informe a data de nascimento',$module));
        $fields[] = new MHContainer('hctDateBirth', array($dateBirthLabel, $dateBirth));

        // Field email
        $emailLabel = new MText('emailLabel', _M('E-mail',$module) . ':');
        $emailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emailLabel->setClass('m-caption m-caption-required');
        $email = new MTextField('email', $this->getFormValue('email',$data->email), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $email->setJsHint(_M('Informe o e-mail da pessoa',$module));
        $validators[] = new MEmailValidator('email',_M('E-mail',$module),'required');
        $hctEmail = new MHContainer('hctEmail', array($emailLabel, $email));
        $hctEmail->setShowLabel(true);
        $fields[] = $hctEmail;

        // Field cpf
        $cpfLabel = new MText('cpfLabel', _M('CPF',$module) . ':');
        $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cpfLabel->setClass('m-caption m-caption-required');
        $cpf = new MTextField('cpf', $this->getFormValue('cpf',$data->cpf), NULL, SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
        $cpf->setJsHint(_M('Informe seu CPF',$module));
        $validators[] = new MCPFValidator('cpf', _M('CPF',$module), 'required');
        $hctCpf = new MHContainer('hctPerson', array($cpfLabel, $cpf));
        $hctCpf->setShowLabel(true);
        $fields[] = $hctCpf;

        $fields[] = new MButton('tbBtnSave', _M('Salvar', $module));

        parent::defineFields();
        $this->addFields($fields);
        $this->setValidators($validators);
    }

    /**
     * Valida as informações e cadastra o usuário
     */
    public function tbBtnSave_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();

        $filters = new stdClass();
        $filters->content = $data->cpf;
        $filters->documentTypeId = SAGU::getParameter('basic', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');

        $busDocument = new BusinessBasicBusDocument();
        $searchDocument = $busDocument->searchDocument($filters, true);

        // Valida se o usuário ja está cadastrado atravéz do cpf
        if( count($searchDocument) > 0 )
        {
            $this->addAlert(_M('Já existe um usuário registrado com o CPF informado. Informe um CPF válido', $module));
        }
        else
        {
            try
            {
                $data->cpf = trim($data->cpf);
                if ( ($data->cpf != SAGU::convertInCPFFormat(SAGU::convertInCPFWithoutDelimiters($data->cpf))) || (SAGU::checkCPF($data->cpf) == DB_FALSE) )
                {
                    throw new Exception( _M('O CPF digitado está inválido, deve ser digitado no formato: 999.999.999-99', $module) );
                }

                $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();

                // Cria a pessoa
                $physicalPerson = new BasPhysicalPerson();
                $physicalPerson->name = $data->name;
                $physicalPerson->sex = $data->sex;
                $physicalPerson->dateBirth = $data->dateBirth;
                $physicalPerson->email = $data->email;

                $personId = $busPhysicalPerson->insertPhysicalPerson($physicalPerson);

                // Salva o cpf
                $document = new BasDocument();
                $document->documentTypeId = SAGU::getParameter('basic', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
                $document->content = $data->cpf;
                $document->personId = $personId;
                $busDocument->insertDocument($document);

                // Cria usuário
                $userData->admLogin = $data->cpf;
                $userData->username = $data->name;
                $userData->admPassword = SAGU::createPassword();

                $busUser = new BusinessAdminUser();
                $okUser = $busUser->insertUser($userData);

                $physicalPerson->personId = $personId;
                $physicalPerson->mioloUserName = $data->cpf;

                // Atualiza o usuário da pessoa
                $ok = $busPhysicalPerson->updatePhysicalPerson($physicalPerson);

                /**
                 * Envia email de confirmação
                 */
                if ( strlen($physicalPerson->email) > 0 )
                {
                    $tags = array( '$PERSONNAME' => $physicalPerson->name,
                                   '$PERSONID' => $physicalPerson->personId,
                                   '$ADMLOGIN' => $physicalPerson->mioloUserName,
                                   '$ADMPASSWORD' => $userData->admPassword );

                    // Business email and company
                    $busEmail = new BusinessBasicBusEmail();
                    $busCompany = new BusinessBasicBusCompany();

                    $dataEmail = $busEmail->getEmail(SAGU::getParameter('basic','EMAIL_ID_USER_REGISTER'));
                    $dataCompany = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

                    // Parameters
                    $from = strtolower($dataEmail->from);
                    $fromName = $dataCompany->acronym;
                    $recipient[$physicalPerson->name] = strtolower($physicalPerson->email);
                    $subject = $dataEmail->subject;
                    $body = strtr($dataEmail->body, $tags);

                    $mail = new sendEmail($from, $fromName, $recipient, $subject, $body, array());

                    if ( $mail->sendEmail() )
                    {
                        /*
                         * Efetua o login se:
                         *
                         * O parâmetro AUTOMATIC_LOGIN for 't';
                         * Tiver processo seletivo em andamento;
                         * Tiver mioloUserName/admPassword;
                         */
                        if ( SAGU::getParameter('BASIC', 'AUTOMATIC_LOGIN') == DB_TRUE &&
                             count(SprSelectiveProcess::_list()) > 0 &&
                             (strlen($physicalPerson->mioloUserName) > 0) &&
                             (strlen($userData->admPassword) > 0) )
                        {
                            // Faz o login
                            $MIOLO->auth->Authenticate($physicalPerson->mioloUserName, $userData->admPassword);

                            // Goto selective process subscription
                            $actionProcess = 'main:selectiveProcessSubscription';
                            $gotoProcess = $MIOLO->getActionURL($module, $actionProcess, null, array());

                            // Mensagem de confirmação
                            $msg = _M('Usuário criado com sucesso!', $module);
                            $msg .= '<br />' .
                            '<ul>' .
                                '<li>' . _M('Clique em PROCESSO SELETIVO para se inscrever no processo seletivo corrente.', $module) . '</li>' .
                            '</ul>';

                            // Cria o MPrompt, e adiciona o botão para o processo seletivo
                            $promptMsg = new MPrompt($caption, $msg);
                            $promptMsg->setType('information');
                            $promptMsg->addButton(_M('PROCESSO SELETIVO', $module), $gotoProcess);

                            // Exibe a mensagem
                            $MIOLO->prompt($promptMsg);
                        }
                        else
                        {
                            /* Se definido retorna para tela de destino, se nao para tela principal do menu
                             * FIXME Verificar
                             * $goto = ( strlen(MIOLO::_Request('return_to')) > 0 ? MIOLO::_Request('return_to') : $MIOLO->getActionURL($module, 'main') );
                             */
                            SAGU::information(_M('Um email de confirmação do cadastro foi enviado para @1',$module, $physicalPerson->email));
                            $this->AddInfo();
                        }
                    }
                    else
                    {
                        $msg = _M('Erro com o servidor de email. Entre em contato com o responsável pelo sistema para resolver o problema', $module).'.';
                        throw new Exception($msg);
                    }
                }
            }
            catch(Exception $e)
            {
                $this->AddAlert($e->getMessage());
            }
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->name = $this->getFormValue('personName');
        $data->sex = $this->getFormValue('sex');
        $data->dateBirth = $this->getFormValue('dateBirth');
        $data->email = $this->getFormValue('email');
        $data->cpf = $this->getFormValue('cpf');

        return $data;
    }
}
?>