<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * Show the professor curricular components by period and allow the professor
 * to register notes, frequency and stuff
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 05/09/2007
 */

/**
 * Report to show pupils ou employees financial situations
 */
class FrmProfessorCurricularComponents extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Disciplinas ministradas pelo professor', $module), null, null);
        $this->addStyleFile('m_grids.css');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Instancia os bussines
        $busPerson = new BusinessBasicBusPerson();
        $busProfessor = new BusinessServicesBusProfessor();
        $busPhysicalPersonProfessor = new BusinessBasicBusPhysicalPersonProfessor();

        // Pega os dados da pessoa logada
        $personData = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));
        $professorData = $busPhysicalPersonProfessor->getPhysicalPersonProfessor($personData->personId);        
        
        $fields[] = new MHiddenField('personId', $personData->personId);

        // Busca os períodos
        $periods = $busProfessor->listProfessorPeriods($personData->personId);

        // Field period Id
        $periodId = $this->getFormValue('periodId', (strlen(MIOLO::_request('periodId')) > 0) ? MIOLO::_request('periodId') : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'));
        $selPeriodId = new MSelection('periodId', $periodId, _M('Período', $module), $periods, true);
        $selPeriodId->addAttribute('onChange', $this->getAjaxAction('curricularComponentPhp', 'divCurricularComponent'));
        $fields[] = $selPeriodId;

        if ( strlen($periodId) > 0 )
        {
            $args = new stdClass();
            $args->personId = $personData->personId;
            $args->periodId = $periodId;
            $args->eTemporario = $professorData->eTemporario;

            // Já chama a grid
            $data = $this->curricularComponentPhp($args);

            $this->addFields($data);
        }

        $fields[] = new MSeparator();
        $fields[] = new MDiv('divCurricularComponent', $data);
        $fields[] = new MSeparator();
        $fields[] = new MButton('tbBtnBack', '<< ' . _M('Voltar', $module), $MIOLO->getActionURL($module, 'main:professor', null, $opts));
        $this->setFields($fields);

        parent::defineFields();
    }

    public function curricularComponentPhp($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $filter = new stdClass();
        $filter->periodId = $args->periodId;
        $filter->personId = $args->personId;
        $filter->eTemporario = $args->eTemporario;

        $busProfessor = new BusinessServicesBusProfessor();
        $data = $busProfessor->listProfessorCurricularComponents($filter);

        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdProfessorCurricularComponents', $filter);
        $grdResults->setData($data);
        $fields[] = $grdResults;

        return $fields;
    }

    /**
     * Método para geração do documento de plano de ensino
     * Tanto no portal do professo e portal do aluno
     */
    public function generateGradeBook()
    {
        $options['module'] = $module = 'academic';
        $options['reportName'] = 'gradebook';
        if ( strlen(MIOLO::_REQUEST('groupId')) > 0 )
        {
            $options['parameters']['groupid'] = (int)MIOLO::_REQUEST('groupId');
        }
        if ( strlen(MIOLO::_REQUEST('generateOption')) > 0 )
        {
            $options['fileType'] = MIOLO::_REQUEST('generateOption');
        }
        $sreport = new SReport($options);

        if ( !$sreport->generate() )
        {
            $this->addError(_M('Não foi possível gerar o documento.', $module));
        }
    }
}
?>