<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finSPC table
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 20/12/2010
 *
 **/

class FrmSignaturePresence extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Assinatura de presença', $module), null, null);

        // Disable buttons which won't be used
        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnSave');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'btnGenerateReport_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);        
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');

        $fields[] = new MHiddenField('professorId', MIOLO::_request('professorId') );
        $fields[] = new MHiddenField('groupId', MIOLO::_request('groupId') );
        
        $busSchedule = new BusinessAcademicBusSchedule();        
        
        //Data (Lista de datas de aula)
        $filters = new stdClass();
        $filters->professorId = MIOLO::_request('professorId');
        $filters->groupId = MIOLO::_request('groupId');        
        $scheduleProfessor = $busSchedule->searchSchedule($filters);
        
        //Percorre os horários do professor
        if( count($scheduleProfessor) > 0 ) 
        {
            $ocurrenceDates = array();
            foreach( $scheduleProfessor as $cod=>$schedule )
            {
                $schedule = $busSchedule->getSchedule($schedule[0]);
                $ocurrenceDates = array_merge($schedule->occurrenceDates, $ocurrenceDates);
            }            
            //Atribui a prórpria data como indice
            foreach( $ocurrenceDates as $c=>$l)
            {
                $l = SAGU::toDefaultDate($l, SAGU::getParameter('BASIC', 'MASK_DATE')); //Formata a data
                $dates[$l] = $l;
            }
        }
        
        $nexClassDate = $busSchedule->getNextClassDate(MIOLO::_request('groupId')); //Data da próxima aula        
        $fields[] = new MSelection('date', $nexClassDate, _M('Data da aula', $module), $dates);
        $validators[] = new MRequiredValidator('date');
                
        //Format report
        $fields[] = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : SReport::FILETYPE_PDF, _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        $fields[] = new MSeparator();
        
        if( SAGU::userIsFromServices() )
        {
            $btnGenerate = new MButton('btnGenerateReport', _M('Gerar', $module));
            $btnBack = new MButton('btnReturn', _M('<< Voltar', $module), $this->getPreviousURL());
            $fields[] = new MHContainer('ctnButtons', array($btnBack, $btnGenerate));
        }
        
        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }


    public function btnGenerateReport_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Parameters of the report
        if (strlen(MIOLO::_REQUEST('groupId')) > 0)
        {
            $parameters['groupid'] = (int)MIOLO::_REQUEST('groupId');
        }
        if (strlen(MIOLO::_REQUEST('date')) > 0)
        {
            $parameters['date'] = MIOLO::_REQUEST('date');
        }
        if (strlen(MIOLO::_REQUEST('professorId')) > 0)
        {
            $parameters['professorid'] = (int)MIOLO::_REQUEST('professorId');
        }
        
        $options['reportName'] = 'signaturePresence';
        $options['module'] = $module;
        
        $report = new SReport($options);
        $report->setModule($module);
        $report->setReportName('signaturePresence');
        $report->setFileType( MIOLO::_REQUEST('reportFormat') );
        $report->setParameters($parameters);
        $report->generate();
    }
}

?>
