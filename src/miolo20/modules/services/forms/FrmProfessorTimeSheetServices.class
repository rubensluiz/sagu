<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Services document professor time sheet.
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 06/07/2011
 */
class FrmProfessorTimeSheetServices extends SForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Planilha de horas do docente', $module), null, null);

        $this->disableToolbar();
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Obtém o usuário da pessoa logada e obtém os dados dela
        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson = new BusinessBasicBusPerson();
        $personData = $busPerson->getPersonByMioloUserName($mioloUserName);

        // Código do professor logado
        $fields[] = new MHiddenField('professorId', $personData->personId);
        $fields[] = new MTextLabel('personName', $personData->name, _M('Nome do docente', $module));

        // Separador
        $fields[] = new MSeparator();

        // Obtém o mês atual
        $month = SAGU::getDatePart(SAGU::getDateNow(), 'MONTH');
        // Obtém o ano atual
        $year = SAGU::getDatePart(SAGU::getDateNow(), 'YEAR');

        // Campo mês (initial)
        $beginDateLabel = new MLabel(_M('Data inicial', $module) . ':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginMonth = new MSelection('beginMonth', $month, _M('Mês', $module) . ':', SAGU::listMonths());
        // Campo ano (initial)
        $beginYear = new MSelection('beginYear', $year, _M('Ano', $module) . ':', SAGU::listYears(2000, $year));
        $cnt = new MHContainer('beginDate', array($beginDateLabel, $beginMonth, $beginYear));
        // Alinha bonitinho os campos:
        $cnt->setFormMode(MForm::FORM_MODE_SHOW_NBSP);
        $validators[] = new MRequiredValidator('beginMonth', _M('Mês inicial', $module));
        $validators[] = new MRequiredValidator('beginYear',  _M('Ano inicial', $module));
        $fields[] = new MDiv('beginDateDiv', $cnt);

        // Campo mês (final)
        $endDateLabel = new MLabel(_M('Data final', $module) . ':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endMonth = new MSelection('endMonth', $month, _M('Mês', $module) . ':', SAGU::listMonths());
        // Campo ano (final)
        $endYear = new MSelection('endYear', $year, _M('Ano', $module) . ':', SAGU::listYears(2000, $year));
        $cnt = new MHContainer('endDateField', array($endDateLabel, $endMonth, $endYear));
        // Alinha bonitinho os campos:
        $cnt->setFormMode(MForm::FORM_MODE_SHOW_NBSP);
        $validators[] = new MRequiredValidator('endMonth', _M('Mês final', $module));
        $validators[] = new MRequiredValidator('endYear', _M('Ano final', $module));
        $fields[] = new MDiv('endDateDiv', $cnt);

        // Separator
        $fields[] = new MSeparator();

        // Formato
        $reportFormatValue = $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF';
        $fields[] = new MSelection('reportFormat', $reportFormatValue, _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat', _M('Formato do relatório', $module), 'required');

        // Separator
        $fields[] = new MSeparator();

        $btnBack = new MButton('tbBtnBack',  '<< ' . _M('Voltar', $module), $MIOLO->getActionURL($module, 'main:professor', null, $opts));
        $btnPrint = new MButton('tbBtnPrint', _M('Imprimir', $module), $url);

        $fields[] = new MHContainer('hctButtons', array($btnBack, $btnPrint));

        $this->SetFields($fields);
        $this->SetValidators($validators);

        parent::defineFields();
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     */
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Get data
        $professorId = $this->GetFormValue('professorId', MIOLO::_request('professorId'));
        $beginMonth = $this->GetFormValue('beginMonth', MIOLO::_request('beginMonth'));
        $beginYear = $this->GetFormValue('beginYear', MIOLO::_request('beginYear'));
        $endMonth = $this->GetFormValue('endMonth', MIOLO::_request('endMonth'));
        $endYear = $this->GetFormValue('endYear', MIOLO::_request('endYear'));
        $reportFormat = $this->GetFormValue('reportFormat', MIOLO::_request('reportFormat'));

        $options = array();

        $options['module'] = 'academic';
        $options['parameters']['generationDate'] = SAGU::getDateNow();
        $options['reportName'] = 'professorTimeSheet';

        if ( strlen($reportFormat) > 0 )
        {
            $options['fileType'] = $reportFormat;
        }

        if ( strlen($professorId) > 0 )
        {
            $options['parameters']['professorId'] = (int)$professorId;
        }

        // Begin month
        if ( strlen($beginMonth) > 0 )
        {
            $options['parameters']['beginMonth'] = (int)$beginMonth;
        }

        // Begin year
        if ( strlen($beginYear) > 0 )
        {
            $options['parameters']['beginYear'] = (int)$beginYear;
        }

        // End month
        if ( strlen($endMonth) > 0 )
        {
            $options['parameters']['endMonth'] = (int)$endMonth;
        }

        // End year
        if ( strlen($endYear) > 0 )
        {
            $options['parameters']['endYear'] = (int)$endYear;
        }

        $sreport = new SReport($options);

        if ( !$sreport->generate() )
        {
            $this->addError(_M('Nenhum dado foi encontrado.', $module ));
        }
    }
}
?>