<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Send Email Webservices form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 15/02/2011
 */
/**
 * Form to send a Email
 */
class FrmProfessorSendEmail extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Email', $module), null, null);

        // Disable toolbar buttons
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
        
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // groupId
        $groupId = MIOLO::_request('groupId');
        $professorId = MIOLO::_request('professorId');
        $periodId = MIOLO::_request('periodId');

        $busGradeTyping = new BusinessAcademicBusGradeTyping();
        $groupData = $busGradeTyping->getGroupData($groupId);

        $busSchedule = new BusinessAcademicBusSchedule();
        $professors = $busSchedule->getGroupProfessors($groupId);

        if ( is_array($professors) )
        {
            $groupData->professor = implode(', ', $professors);
        }
        else
        {
            $groupData->professor = _M('Professor não definido', $module);
        }

        $fields[] = new MTextLabel('curricularComponent', $groupData->curricularComponent, _M('Disciplina', $module));
        $fields[] = new MTextLabel('period', $groupData->periodId, _M('Período', $module));
        $fields[] = new MTextLabel('professor', $groupData->professor, _M('Professor(es)', $module));
        $fields[] = new MTextLabel('unit', $groupData->unit, _M('Unidade', $module));

        // Campo Título
        $titleEmailLabel = new MText('titleLabel', _M('Título', $module) . ':');
        $titleEmailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $titleEmailLabel->setClass('m-caption m-caption-required');
        $titleEmail = new MTextField('titleEmail', $this->getFormValue('titleEmail', $data->titleEmail), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $titleEmail->setJsHint(_M('Informe o título do email', $module));
        $validators[] = new MRequiredValidator('titleEmail', _M('Título', $module));
        $flds[] = new MHContainer('hctTitleEmail', array($titleEmailLabel, $titleEmail));
        
        $flds[] = new MSeparator("<br>");

        // Campo Mensagem
        $messageEmailLabel = new MText('messageEmailLabel', _M('Mensagem', $module) . ':');
        $messageEmailLabel->setClass('m-caption m-caption-required');
        $messageEmailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $messageEmail = new MEditor('messageEmail');
        $messageEmail->disableElementsPath();
        $messageEmail->setWidth( SAGU::getParameter('BASIC', 'FIELD_EDITOR_SIZE') );
        $messageEmail->setJsHint(_M('Informe o conteúdo do e-mail', $module));
        $flds[] = new MHContainer('hctMessageEmail', array($messageEmailLabel, $messageEmail));
        
        $flds[] = new MSeparator("<br>");

        // Anexo 1
        $attachLabel1 = new MText('fileId1Label', _M('Anexo', $module) . ' 1' . ':');
        $attachLabel1->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $attach1 = new MFileField("attach1", null, null, 20);
        $htcAttach1 = new MHContainer("hctAttach1", array($attachLabel1, $attach1));
        $htcAttach1->setWidth('600');

        // Anexo 2
        $attachLabel2 = new MText('fileId2Label', _M('Anexo', $module) . ' 2' . ':');
        $attachLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $attach2 = new MFileField("attach2", null, null, 20);
        $htcAttach2 = new MHContainer("hctAttach2", array($attachLabel2, $attach2));
        $htcAttach2->setWidth('600');

        // Anexo 2
        $attachLabel3 = new MText('fileId3Label', _M('Anexo', $module) . ' 3' . ':');
        $attachLabel3->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $attach3 = new MFileField("attach3", null, null, 20);
        $htcAttach3 = new MHContainer("hctAttach3", array($attachLabel3, $attach3));
        $htcAttach3->setWidth('600');

        $bsgAttach = new MBasegroup('bsgAttach', _M('Anexos', $module), array($htcAttach1, $htcAttach2, $htcAttach3));
        $bsgAttach->addAttribute("style", "margin-left: 145px; width: 655px;");
        $flds[] = $bsgAttach;

        $opts = array('personId' => $this->getFormValue('professorId', $professorId),
            'periodId' => $this->getFormValue('periodId', $periodId));

        $btnBack = new MButton('tbBtnBack',  '<< ' . _M('Voltar', $module), $MIOLO->getActionURL($module, 'main:professor:curricularComponents', null, $opts));
        $btnSend = new MButton('tbBtnSend', _M('Enviar', $module));

        $fields[] = new MBasegroup('bsgEmail', _M('Enviar e-mail', $module), $flds);

        $fields[] = new MHContainer('htcButons', array($btnBack, $btnSend));

        $this->setFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }

    public function tbBtnSend_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();
        
        if ( !strlen($data->messageEmail) > 0 )
        {
            return $this->AddError(_M("Precisa escrever uma mensagem para enviar um e-mail!", $module));            
        }

        $groupId = $data->groupId;
        $professorId = $data->professorId;

        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $professorData = $busPhysicalPerson->getPhysicalPerson($professorId);
        $from = $professorData->email; // E-mail do professor
        $fromName = $professorData->name; // Nome do professor

        $busGroup = new BusinessAcademicBusGroup();
        $emails = $busGroup->getPupilEmailByGroup($groupId);

        foreach ( $emails as $cod => $linha )
        {
            $recipients[] = $linha[2]; // Cria vetor com e-mail dos alunos da turma
        }
        
        //Quebra em no máximo com 50 destinatários
        $newRecipient = array_chunk($recipients, 50);
        
        $subject = $data->titleEmail; // Assunto
        $body = $data->messageEmail; // Corpo da mensagem
        
        foreach ( $newRecipient as $key => $recipient )
        {
            $sendEmail = null;
            $sendEmail = new sendEmail($from, $fromName, $recipient, $subject, $body, $bcc);

            // Adicionar os anexos se existirem
            if ( strlen($data->attach1['tmp_name']) > 0 )
            {
                $sendEmail->AddAttachment($data->attach1['tmp_name'], $data->attach1['name']);
            }
            if ( strlen($data->attach2['tmp_name']) > 0 )
            {
                $sendEmail->AddAttachment($data->attach2['tmp_name'], $data->attach2['name']);
            }
            if ( strlen($data->attach3['tmp_name']) > 0 )
            {
                $sendEmail->AddAttachment($data->attach3['tmp_name'], $data->attach3['name']);
            }

            $return = $sendEmail->sendEmail(); // Envia o email
            sleep(2);
        }
        
        if ( $return == false )
        {
            $msg = _M('Não foi possível enviar o(s) e-mail(s).', $module);
            $opts = array('personId' => $this->getFormValue('professorId', $professorId),
                'periodId' => $this->getFormValue('periodId', $periodId));

            SAGU::error($msg, $MIOLO->getActionURL($module, 'main:professor:curricularComponents', null, $opts));
        }
        else
        {
            $msg = _M('E-mail enviado com sucesso', $module);
            $opts = array('personId' => $this->getFormValue('professorId', $professorId),
                'periodId' => $this->getFormValue('periodId', $periodId));

            SAGU::information($msg, $MIOLO->getActionURL($module, 'main:professor:curricularComponents', null, $opts));
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->groupId = MIOLO::_request('groupId');
        $data->professorId = MIOLO::_request('professorId');
        $data->periodId = MIOLO::_request('periodId');

        $data->titleEmail = $this->getFormValue('titleEmail');
        $data->messageEmail = $this->getFormValue('messageEmail');

        $data->attach1 = $_FILES['attach1'];
        $data->attach2 = $_FILES['attach2'];
        $data->attach3 = $_FILES['attach3'];

        return $data;
    }
}
?>