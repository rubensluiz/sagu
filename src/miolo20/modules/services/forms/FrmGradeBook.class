<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Personal data form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Cristian Edson Göhl [cristian@solis.coop.br]
 *
 * @since
 * Class created on 03/05/2011
 */

/**
 * Form to type the group academic data
 */
class FrmGradeBook extends SForm
{
    private $isReadOnlyMode;
    
    
    /**
     * Class constructor
     */
    public function __construct($data=null)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Plano de curso', $module), null, null);

        // Desabilita botões da toolbar
        
        
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $business = new BusinessAcademicBusGroup();
        $busFormData = new BusinessAcademicBusGradeTyping();

        $groupId = MIOLO::_request('groupId');

        if ( strlen($groupId) <= 0 )
        {
            $MIOLO->error(_M('Disciplina oferecida não informada.', $module));
        }

        try
        {            
            $groupData = $business->getGroup($groupId);            
            $formData = $busFormData->getGroupData($groupId);            
        }
        catch ( Exception $e )
        {
            $MIOLO->error(_M('Erro:', $module) . ' ' . $e->getMessage());
        }
        

        // Get data of the person
        $busPerson = new BusinessBasicBusPerson();
        $personData = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));

        //
        // Define interface como readOnly 
        //
        if(MUtil::getBooleanValue(SAGU::getParameter('ACADEMIC', 'SOMENTE_PROFESSOR_RESPONSAVEL')))
        {
            if( ( strlen($personData->personId) > 0 ) && ( $groupData->professorResponsible == $personData->personId ) )
            {
                $this->isReadOnlyMode = false;
            }
            else
            {
                $this->isReadOnlyMode = true;
            }
        }
        else
        {
            $this->isReadOnlyMode = false;
        }
        
        
        //
        if ( $this->isReadOnlyMode )
        {
            $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        }
        
        $editableFields = array();
        
        // PersonId
        $fields[] = new MHiddenField('professorName', $personData->name);
        // GroupId
        $fields[] = new MHiddenField('groupId', $groupId);

        // Dados do cabeçalho
        $fields[] = new MTextLabel('curricularComponent', $formData->curricularComponent, _M('Disciplina', $module));
        $fields[] = new MTextLabel('classId', $groupData->classId, _M('Turma', $module));
        $fields[] = new MTextLabel('period', $formData->periodId, _M('Período', $module));
        $fields[] = new MTextLabel('group', $formData->groupId, _M('Disciplina oferecida', $module));

        // Dados do plano de curso
        // Objetivos
        $objectivesLabel = new MText('objectivesLabel', _M('Objetivos', $module) . ':');
        $objectivesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $objectivesLabel->setClass('m-caption m-caption-required');
        $objectives = $editableFields[] = new MMultiLineField('objectives', $this->getFormValue('objectives', $groupData->objectives), null, 100, 5, 40);
        $objectives->setJsHint(_M('Informe os objetivos', $module));
        $fields[] = new MHContainer('hctObjectives', array($objectivesLabel, $objectives));
        $validators[] = new MRequiredValidator('objectives', _M('Objetivos', $module));

        //Caso o conteudo programático estiver em branco adiciona sujestão de conteudo para cada aula    
        if( strlen($groupData->content) == 0 )
        {
            $busFrequency = new BusinessAcademicBusFrequency();
            
            $groupAcademicCalendar = $busFrequency->listGroupAcademicCalendar($groupId);
            
            if( count($groupAcademicCalendar) > 0 )
            {
                foreach($groupAcademicCalendar as $cod=>$linha)
                {
                    $content .= 'Aula dia '.$linha->date.': Digite aqui o conteúdo ministrado';
                    $content .= "\n";
                }
            }
        }
        else
        {
            $content = $groupData->content;
        }
        
        // Conteúdo
        $contentLabel = new MText('contentLabel', _M('Conteúdo', $module) . ':');
        $contentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contentLabel->setClass('m-caption m-caption-required');
        $content = $editableFields[] = new MMultiLineField('content_', $this->getFormValue('content_', $content), null, 100, 20, 40);
        $content->setJsHint(_M('Informe o conteúdo', $module));
        $fields[] = new MHContainer('hctContent', array($contentLabel, $content));
        $validators[] = new MRequiredValidator('content_', _M('Conteúdo', $module));

        // Metodologia
        $methodologyLabel = new MText('methodologyLabel', _M('Metodologia', $module) . ':');
        $methodologyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $methodologyLabel->setClass('m-caption m-caption-required');
        $methodology = $editableFields[] = new MMultiLineField('methodology', $this->getFormValue('methodology', $groupData->methodology), null, 100, 5, 40);
        $methodology->setJsHint(_M('Informe a metodologia', $module));
        $fields[] = new MHContainer('hctMethodology', array($methodologyLabel, $methodology));
        $validators[] = new MRequiredValidator('methodology', _M('Metodologia', $module));

        // Avaliação
        $evaluationLabel = new MText('evaluationLabel', _M('Avaliação', $module) . ':');
        $evaluationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $evaluationLabel->setClass('m-caption m-caption-required');
        $evaluation = $editableFields[] = new MMultiLineField('evaluation', $this->getFormValue('evaluation', $groupData->evaluation), null, 100, 5, 40);
        $evaluation->setJsHint(_M('Informe a avaliação', $module));
        $fields[] = new MHContainer('hctEvaluation', array($evaluationLabel, $evaluation));
        $validators[] = new MRequiredValidator('evaluation', _M('Avaliação', $module));

        // Observação
        $observationLabel = new MText('observationLabel', _M('Observação', $module) . ':');
        $observationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $observation = $editableFields[] = new MMultiLineField('observation', $this->getFormValue('observation', $groupData->observation), null, 100, 5, 40);
        $observation->setJsHint(_M('Informe a observação', $module));
        $fields[] = new MHContainer('hctObservation', array($observationLabel, $observation));

        // Complemento
        $complementLabel = new MText('complementLabel', _M('Complemento', $module) . ':');
        $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $complement = $editableFields[] = new MMultiLineField('complement', $this->getFormValue('complement', $groupData->complement), null, 100, 5, 40);
        $complement->setJsHint(_M('Informe o complemento', $module));
        $fields[] = new MHContainer('hctComplement', array($complementLabel, $complement));

        // Bibliografia 
        $label = new MText('complementarybibliographydescriptionLabel', _M('Bibliografia complementar', $module) . ':');
        $label->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $field = $editableFields[] = new MMultiLineField('complementarybibliographydescription', $this->getFormValue('complementarybibliographydescription', $groupData->complementarybibliographydescription), null, 100, 20, 40);
        $field->setJsHint(_M('Informe a Bibliografia básica', $module));
        $fields[] = new MHContainer('hctcomplementarybibliographydescription', array($label, $field));

        $fields[] = new MSeparator();
        $url = 'javascript:history.go(-1)';
        
        $buttons = array();
        $buttons[] = new MButton('btnBack', '<< ' . _M('Voltar', $module), $url);
        if ( !$this->isReadOnlyMode )
        {
            $buttons[] = new MButton('btnSave', _M('Salvar', $module));
        }
        $buttons[] = new MButton('btnPrint', _M('Imprimir', $module));
        $fields[] = new MHContainer('hctButton', $buttons);
        
        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        
        //
        // Define readOnly para campos quando 
        //
        if ( $this->isReadOnlyMode )
        {
            foreach ( $editableFields as $field )
            {
                $field->setReadOnly(true);
            }
        }
        
        parent::defineFields();
        
        if ( strlen(MIOLO::_REQUEST('btnSave')) > 0 )
        {
            $this->btnSave_click();
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function btnSave_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getData();

        $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');

        try
        {
            $business = new BusinessServicesBusProfessor();
            $business->updateGradeBookData($data);
            $opts = array('groupId' => $data->groupId);
            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $MIOLO->getActionURL($module, $action, null, $opts));
        }
        catch ( Exception $e )
        {
            $msg = _M('Erro executando a operação requisitada.', $module) . ' ' . $e->getMessage();
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }

    /**
     * Método para geração do documento de plano de ensino
     * Tanto no portal do professo e portal do aluno
     */
    public function btnPrint_click()
    {
        $MIOLO = MIOLO::getInstance();

        $report = new SReport();
        $report->setReportPath('academic', 'gradebook');
        $report->setParameter('groupid', (int) MIOLO::_REQUEST('groupId'));
        $report->setFileType( MIOLO::_REQUEST('generateOption') );
        
        if ( strlen(MIOLO::_REQUEST('professorId')) > 0 )
        {
            $busGroup = new BusinessAcademicBusGroup();
            
            $names = $busGroup->getProfessorNamesOfGroup( $groupId );
            
            if ( $names )
            {
                $report->setParameter('professorName', (string) implode(', ', $names));
            }
        }

        if ( !$report->generate() )
        {
            $this->addError(_M('Não foi possível gerar o documento.', $module));
        }
    }
}