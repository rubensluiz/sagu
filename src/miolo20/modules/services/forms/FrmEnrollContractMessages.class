<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Enroll contract form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 04/12/2006
 */

/**
 * Form to show the contract renewal messages
 */
class FrmEnrollContractMessages extends SForm
{
    var $enrollData;

    /**
     * Class constructor
     */
    public function __construct()
    {
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $MIOLO = MIOLO::getInstance();
        
        $session = $MIOLO->session;
        $this->enrollData = $session->isRegistered('enrollData') ? $session->getValue('enrollData') : null;

        parent::__construct( _M('Mensagens', $module), null, null );
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusEnroll();
        $busContract = new BusinessAcademicBusContract();

        $businessPeriodEnrollDate = new BusinessAcademicBusPeriodEnrollDate();
        $periodEnrollDate = $businessPeriodEnrollDate->getCurrentPeriodEnrollDate($this->enrollData->learningPeriodId);

        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $periodoLetivo = $busLearningPeriod->getLearningPeriod($this->enrollData->learningPeriodId);
        
        $contractData = $busContract->getContract($this->enrollData->contractId);

        if ( $busContract->isFreshmanByPeriod($this->enrollData->contractId, $periodoLetivo->periodId) )
        {
            $filters->status = 'F';
        }
        else
        {
            $filters->status = 'E';
        }

        $filters->isListener = $contractData->isListener;
        $messages = $business->getEnrollContractMessages($this->enrollData->learningPeriodId, $filters);

        if ( (count($messages) > 0) && (strtoupper($periodEnrollDate->isAdjustment) == strtoupper(DB_FALSE)) )
        {
            foreach ( $messages as $msg )
            {
                if ( stristr($msg[1], '$contrato') )
                {
                    $msg[1] = str_replace('$contrato', $this->enrollData->contractId, $msg[1]);
                }

                if ( (stristr($msg[1], '$preco')) && (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') )
                {
                    $busPrice = new BusinessFinanceBusPrice();
                    $busLearningPeriod = new BusinessAcademicBusLearningPeriod();

                    $learningPeriod = $busLearningPeriod->getLearningPeriod($this->enrollData->learningPeriodId);
                    $lastPrice = $busPrice->getLastPrice($learningPeriod->courseId, $learningPeriod->courseVersion, $learningPeriod->turnId, $learningPeriod->unitId);

                    $msg[1] = str_replace('$preco', number_format($lastPrice, 2, ',', '.'), $msg[1]);
                }

                $fields[] = new MText('msg_' . $msg[0], $msg[1]);
                $fields[] = new MSeparator();
            }
        }
        else
        {
            $vars = array('returnTo' => $action,
                'enrollData' => urlencode(serialize($this->enrollData)));

            $this->enrollData->contractPersonId = $this->enrollData->personId;

            $vars = array('personId' => $this->enrollData->personId,
                'isAdjustment' => $this->enrollData->isAdjustment);

            $this->enrollData->returnTo = $MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':')) . ':pupilContracts', null, $vars);

            $session = $MIOLO->session;

            $session->setValue('enrollData', $this->enrollData);

            $postAction = 'main:pupil:enrollCurricularComponents';// substr($action,0,strrpos($action,':')) . ':enrollCurricularComponents';

            $this->page->redirect($MIOLO->getActionURL($module, $postAction));
        }

        // Buttons
        $btn1[] = new MButton('btnPrev', '<< ' . _M('Anterior', $module));
        $btn1[] = new MButton('btnNext', _M('Aceitar', $module) . ' >>');
        $div1 = new MDiv('div1', $btn1, null, 'align=center');

        $fields[] = $div1;
        $fields[] = new Separator('');

        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators, 'toolbar' => false ) );
    }

    /**
     * Event triggered when user click previous
     */
    public function btnPrev_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $vars = array('personId' => $this->enrollData->personId,
            'isAdjustment' => $this->enrollData->isAdjustment);

        $postAction = substr($action, 0, strrpos($action, ':')) . ':pupilContracts';

        $this->page->redirect($MIOLO->getActionURL($module, $postAction, null, $vars));
    }

    /**
     * Event triggered when user click next
     */
    public function btnNext_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $this->enrollData->contractPersonId = $this->enrollData->personId;
        $this->enrollData->returnTo = $MIOLO->getActionUrl($module, $action);

        $session = $MIOLO->session;

        $session->setValue('enrollData', $this->enrollData);

        $postAction = 'main:pupil:enrollCurricularComponents';

        $this->page->redirect($MIOLO->getActionURL($module, $postAction));
    }
}
?>
