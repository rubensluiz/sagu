<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file is a report to pupils or employes from the respective financial situation
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 15/09/2006
 */

/**
 * Report to show pupils ou employees financial situations
 */
class FrmFinancialSituation extends SForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Situação financeira', $module), null, null);

        // Disable toolbar buttons
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        
//        
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $mioloUserName = trim($MIOLO->getLogin()->id);

        $busPerson = new BusinessBasicBusPerson();
        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();

        // obtem os dados da pessoa.
        $person = $busPerson->getPersonByMioloUserName($mioloUserName);
        
        // Tabela com as informações financeiras
        $filters->personId = $person->personId;        
        $filters->onlyOpen = DB_TRUE; // Comentado para retornar todos os invoices
        $data = $busReceivableInvoice->listInvoicesForPerson($filters, true);
        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdFinancialSituation', $filters);
        $grdResults->setData($data);

        // Remove o botão de imprimir boleto
        $generateInvoice = SAGU::getParameter('SELECTIVEPROCESS', 'GENERATE_BANK_INVOICE');
        if ( $generateInvoice != DB_TRUE )
        {
//            unset($grdResults->actions);
        }

        $fields[] = new MText('txtInstructions1', _M('Abaixo estão listadas as mensalidades que constam abertas em nosso sistema.', $module));
        $fields[] = new MText('txtInstructions2', _M('Clique no link correspondente para gerar o boleto.', $module));
        $fields[] = new MText('txtInstructions3', _M('Caso não concorde com as informações aqui exibidas, entre em contato com o setor financeiro.', $module));

        $fields[] = $grdResults;

        $fields[] = new MSeparator();

        $url = 'javascript:history.go(-1)';
        $fields[] = new MButton('btnBack', '<< ' . _M('Voltar', $module), $url);

        $fields[] = new MSeparator();
        $this->SetFields($fields);

        parent::defineFields();
    }
}
?>