<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Passo a passo matrícula web.
 *
 * @author Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 18/02/2015
 */

class FrmEnrollWeb extends SStepByStepForm
{
    /**
     * Construtor do formulário pai.
     */
    public function __construct($class, $title=null, $steps = null)
    {
        //Desabilita toolbar
        $this->setEnableToolbar(false);

        parent::__construct(null, $steps, $class);
    }
    
    /**
     * Função que monta a mensagem inicial no topo de cada passo.
     * 
     * @param (stdClass) $args - Argumentos do form.
     * 
     * @return (MDiv) $div - Mensagem do passo.
     */
    public function mensagemPasso($args)
    {
        $MIOLO = MIOLO::getInstance();
        $passo = self::getCurrentStep();

        //Certifaca-se de que os dados estão corretos
        $this->setarDados($args);
        
        //Quando estamos na matricula via sistema que possui um passo inicial a mais,
        //deve ser feito o ajuste para aparecer no passo correto.
        if ( !SAGU::userIsFromServices() && is_numeric($passo) )
        {
            $passo --;
        }

        $msgPasso = MatriculaWeb::obterConfiguracaoDeMatricula('configurableMessageStep' . $passo);

        if ( strlen($msgPasso) > 0 )
        {
            $mensagem = MMessage::getStaticMessage('divInformacao', $msgPasso, MMessage::TYPE_INFORMATION);
            $div = new MDiv('',$mensagem);
            $div->addBoxStyle('width', '98%');
        }
        else
        {
            $div = new MDiv();
        }
            
        return $div;
    }

    /**
     * Monta tabela de simulação financeira.
     * 
     * @param (stdClass) $args - Argumentos do form.
     *
     * @return (MDiv) $div - Tabela da simulação financeira.
     */
    public function simularFinanceiro($args)
    {
        $contrato = MatriculaWeb::obterContratoGravado();
        
        //Simula mensalidade
        $enrollData = MatriculaWeb::simularMensalidade($args);
        
        //Convênios
        $invoiceConvenants = $enrollData->invoiceConvenants;
        
        //Não gerou títulos
        if ( count($enrollData->invoices) == 0 )
        {
            $dataTable[] = array(_M('Nenhum título gerado.'));
        }
        else
        {   
            $invoices = $enrollData->invoices;
        
            
            $parcelIndex =1;
            //Títulos
            foreach( $invoices as $invoice )
            {   
                $columns = array();
                $columns[] = _M('Código do título');
                $columns[] = _M('Data de vencimento');
                $columns[] = _M('Valor');
                $columns[] = _M('Valor atualizado');

                unset($dataTable);
                $dataTable[] = array(
                    $invoice->invoiceId,
                    $invoice->maturityDate,
                    'R$ '. $invoice->balance,
                    'R$ '. $invoice->balanceWithPolicies,
                );

                
                //Lançamentos
                foreach( $invoice->entries as $entrie )
                {
                    $dataLancamento = new MText(rand(), _M('Data'));
                    $dataLancamento->setBold(true);
                    $operacao = new MText(rand(), _M('Operação'));
                    $operacao->setBold(true);
                    $valor = new MText(rand(), _M('Valor'));
                    $valor->setBold(true);

                    $dataTable[] = array($dataLancamento, $operacao, $valor);
                    $columnsEntries = array();
                    $columnsEntries[] = _M('Data');
                    $columnsEntries[] = _M('Operação');
                    $columnsEntries[] = _M('Valor');

                    $dataTable[] = array(
                        $entrie->entryDate,
                        $entrie->operationDescription,
                        'R$ '.$entrie->value
                    );
                }

                
                $fields[] = new MTableRaw(_M('Parcela ' . $parcelIndex++, 'academic'), $dataTable, $columns);

                //Convênios
                if(is_array($invoiceConvenants[$invoice->invoiceId]) )
                {
                    $convenants = $invoiceConvenants[$invoice->invoiceId];
                    
                    $fields[] = new MLabel('<b>Convênios</b>');

                    foreach ($convenants as $convenant)
                    {
                        $fields[] = new MLabel($convenant[1], 'blue');
                        $fields[] = new MLabel('R$ '. $convenant[2], 'blue');
                    }
                }                
            }
        }
        
        // Créditos acadêmicos
        $lbl = new MText('txtlbl', _M('Créditos acadêmicos', $this->module) . ':');
        $lbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $lbl->setClass('m-caption');
        $txt = new MTextField('txt', SAGU::NVL(MatriculaWeb::obterQuantidadeDeCreditosDasDisciplinasSelecionadas(), '-'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $txt->setReadOnly(true);
        $hct = new MHContainer('hct', array ($lbl, $txt));
        $hct->setShowLabel(false);
        $fields[] = new MSeparator('<br/>');
        $fields[] = $hct;
        
        $db = new MBaseGroup('bg', _M('Simulação financeira'), $fields);
        $div = new MDiv('divFinanceiro', $db);
        
        return $div;
    }

    /**
     * Seta na sessão os dados referentes ao contrato e configuração de matrícula.
     * 
     * @param (int) $contractId - Código do contrato.
     */
    public function setarDados($contractId)
    {
        $MIOLO = MIOLO::getInstance();
        $busContract = new BusinessAcademicBusContract();

        //O contrato pode vir via AJAX
        is_object($contractId) ? $contrato = $contractId->contractId : $contrato = $contractId;

        if ( strlen($contrato) > 0 )
        {
            //Contrato
            $contratoDados = $busContract->obterContratoParaMatricula($contrato);
            $MIOLO->session->setValue('contrato', $contratoDados);

            //Configuração de matrícula
            $enrollConfig = AcdEnrollConfig::obterVigente($contratoDados->courseId, $contratoDados->courseVersion, $contratoDados->turnId, $contratoDados->unitId, true);
            
            if ( !$enrollConfig )
            {
                $MIOLO = MIOLO::getInstance();
                $MIOLO->error(_M("Não existe nenhuma configuração de matrícula vigente para a ocorrência de curso do contrato."));
            }
            else
            {
                $MIOLO->session->setValue('configuracaoMat', $enrollConfig);
            }
        }
    }
    
    /**
     * Monta campo de informações do aluno.
     * 
     * @return \SInformationField
     */
    public function obterCamposInfoAluno()
    {
        $contrato = MatriculaWeb::obterContratoGravado();
        
        $options = array('columns' => 1,
                         'value' => array('Aluno' => $contrato->personName . ' (' . $contrato->personId . ')',
                                          'Contrato' => $contrato->contractId,
                                          'Ocorrência de curso' => $contrato->courseId . '/' . $contrato->courseVersion . '/' . $contrato->turnId . '/' . $contrato->unitId . ' - ' . $contrato->courseName . ' (' . $contrato->turnDescription . '/' . $contrato->unitDescription . ')',
                                          'Período de matrícula' => $contrato->periodId));
        
        $info = new SInformationField($options, '100%');
        
        return $info;
    }
}
?>
