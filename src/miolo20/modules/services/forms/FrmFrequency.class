<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Enroll contract form
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 07/05/2009
 */

/**
 * Form to manipulate an enroll
 */
class FrmFrequency extends SForm
{
    public $personData;
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);
        parent::__construct(_M('Frequência', $module), null, null);

        //Carrega o javascript da MPopup
        $this->page->AddScript('m_popup_control.js');

        // Carrega os javascripts de lookup
        $this->page->AddScript('m_lookup_ajax.js');
        $this->page->AddScript('m_lookup.js');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busPerson = new BusinessBasicBusPerson();
        $busFrequencyAndNotes = new BusinessServicesBusFrequencyAndNotes();
        
        $this->personData = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));

        $personId = $this->GetFormValue('personId', $this->personData->personId);
        $fields[] = new MHiddenField('personId', $personId);

        $filters = $this->getTypesData();
        $periodId = $this->GetFormValue('periodId', $filters->periodId);
        $periodId = new MComboBox( 'periodId', $periodId, _M('Período', $module), $busFrequencyAndNotes->listPuplisPeriods($this->personData->personId) );
        $periodId->setJsHint( _M('Selecione um período', $module ) );
        $validators[] = new MRequiredValidator('periodId', _M('Período', $module));
        $fields[] = $periodId;
        
        $fields[] = new MSeparator('');
        
        $url = 'javascript:history.go(-1)';
        $btnBack = new MButton('btnBack', '<< ' . _M('Voltar', $module), $url);
        $btnSearch = new MButton('btnSearch', _M('Consultar', $module), $this->getAjaxAction('showFrequencyAndNotes', 'divFrequencyAndNotes'));
        $fields[] = new MHContainer('hctButtons', array($btnBack, $btnSearch));
        
        $fields[] = new MSeparator();
        $fields[] = new MDiv('divPopup', NULL);
        $fields[] = new MDiv('divFrequencyAndNotes', NULL); 
        $fields[] = new MSeparator();
    
        $url = str_replace('&amp;', '&',$this->manager->getCurrentURL());
        $MIOLO->getRequiredJS4Ajax();
        
        $code = '
        function showFrequencyAndNotes()
        {
            args = new Array();
            args[0] = document.getElementById(\'personId\').value;
            args[1] = document.getElementById(\'periodId\').value;

            xGetElementById(\'divFrequencyAndNotes\').innerHTML = \'Loading...<img src = "/images/loading.gif"/>\';
            cpaint_call("' . $url . '", "POST", \'showFrequencyAndNotes\', args, tableResult, "TEXT");
        }
        
        function tableResult(result)
        {
            xGetElementById(\'divFrequencyAndNotes\').innerHTML = result;
            MIOLO_parseAjaxJavascript(result);
        }
        ';
        
        $this->page->addJsCode($code);

        if ( $periodId && $personId )
        {
            $this->AddJsCode("javascript:saguDoAjax('showFrequencyAndNotes', 'divFrequencyAndNotes', true, '')");
        }

        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }

        $this->setFields($fields);
    }
    
    public function showFrequencyAndNotes($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $filter->personId = $args->personId;
        $filter->periodId = $args->periodId;
        
        $busFrequencyAndNotes = new BusinessServicesBusFrequencyAndNotes();
        $busDiverseConsultationAcademic = new BusinessAcademicBusDiverseConsultation();
        $busAcademicConsultation = new BusinessServicesBusAcademicConsultation();
        $busProfessorFrequency = new BusinessServicesBusProfessorFrequency();
        $busDiverseConsultation = new BusinessAcademicBusDiverseConsultation();
        $busGradeTyping = new BusinessAcademicBusGradeTyping();
        $busEvaluation = new BusinessAcademicBusEvaluation();
        $busFrequenceEnroll = new BusinessAcademicBusFrequenceEnroll();
        $busEvaluationEnroll = new BusinessAcademicBusEvaluationEnroll();
        $busGroup = new BusinessAcademicBusGroup();
        $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();

        // Pega os dados do contrato do aluno
        $contracts = $busAcademicConsultation->getPersonContracts($filter->personId);

        $curricularComponents = array();

        for ($i = 0; $i < count($contracts); $i++)
        {
            $filter->contractId = $contracts[$i]->contractId;

            // Pega os dados das disciplinas
            $curricularComponent = $busDiverseConsultation->getCurricularComponentCoursed($filter);

            if ( count($curricularComponent) > 0 )
            {
                if ( count($curricularComponents) > 0 )
                {
                    $curricularComponents = array_merge($curricularComponents, $curricularComponent);
                }
                else
                {
                    $curricularComponents = $curricularComponent;
                }
            }
        }

        if ( count($curricularComponents) > 0 )
        {
            $imgPresence = $MIOLO->getActionUrl($module, 'html:images:presence.png');
            $imgHalfPresence = $MIOLO->getActionUrl($module, 'html:images:halfPresence.png');
            $imgAbsence = $MIOLO->getActionUrl($module, 'html:images:absence.png');
            $imgAddOn = $MIOLO->getActionUrl($module, 'html:images:add-on.png');
            $imgAddOff = $MIOLO->getActionUrl($module, 'html:images:add-off.png');
            $imgEmpty = $MIOLO->getActionUrl($module, 'html:images:empty.png');
            $imgScheduleDescription = $MIOLO->getActionUrl($module, 'html:images:view.png');

            $count = 0;
        
            foreach ( $curricularComponents as $index => $value )
            {
                $enrollId = $value[0];
                $groupId = $value[1];

                //Adicionar as frequencias
                //busca lista de alunos e de calendário academico
                $pupils = $busProfessorFrequency->listGroupPupils($value[0]);
                $academicCalendars = $busProfessorFrequency->listGroupAcademicCalendar($value[1]);
                
                if ( count($academicCalendars) > 0 )
                {
                    foreach ( $academicCalendars as $academicCalendar )
                    {
                        if ( !in_array($academicCalendar[3], (array)$daySchedulesNumber[$academicCalendar[0].$academicCalendar[1]]) )
                        {
                            $daySchedulesNumber[$academicCalendar[0].$academicCalendar[1]][] = $academicCalendar[3];
                            $numberHoursSchedule[$academicCalendar[3]] = number_format(($academicCalendar[7]/60), SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE'), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), '');
                        }
                    }
                }

                $backupDate = null;
                $backupKeys = array();
                $count1 = 0;

                $statusLabel = new MLabel(_M('Status', $module) . ':');
                $statusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $statusV = new MLabel($value[10], 'bold');
                $statusV->setBold(TRUE);
                $hctStatus = new MHContainer('hctStatus', array($statusLabel, $statusV));

                $numberHorsLabel = new MLabel(_M('Horas', $module) . '/' . _M('Créditos', $module) . ':');
                $numberHorsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $numberHorsV = new MLabel($value[6]);
                $numberHorsV->setBold(TRUE);
                $hctNumberHours = new MHContainer('hctNumberHour', array($numberHorsLabel, $numberHorsV));

                $professors = $busDiverseConsultation->getGroupProfessorNames($value[1]);

                if ( count($professors) > 0 )
                {
                    $professorss = implode('<br>', $professors);
                }
                else
                {
                    $professorss = _M('A definir', $module);
                }
                
                $professorLabel = new MLabel(_M('Professor', $module) . ':');
                $professorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $professorV = new MLabel($professorss);
                $professorV->setBold(TRUE);
                $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorV));

                $bsgCurriculumComponent = new BaseGroup('bsgCurriculumComponent'.$index, $value[4], array($hctStatus, $hctNumberHours, $hctProfessor, $bsgTableRaw, $bsgFrequency), 'vertical');
                $bsgCurriculumComponent->showLabel = true;
                $bsgCurriculumComponent->width = '100%';
                $fields[] = $bsgCurriculumComponent;

                unset($table);
                $count = 0;

                $mainTable = new MTableRaw(null, null);

                if ( count($academicCalendars) > 0 )
                {   
                    // Cria componentes da tabela que relaciona aluno a horarios
                    foreach ( $academicCalendars as $keyAC => $academicCalendar )
                    {
                        list ( $scheduleId,
                               $date,
                               $occurrenceDate,
                               $timeId,
                               $turnId,
                               $beginHour,
                               $endHour,
                               $numberMinutes ) = $academicCalendar;

                        if ( $backupDate != $date || (!in_array($scheduleId.$date,$backupKeys)))
                        {
                            $y = count($mainTable->array[0]);
                            $header = $date;
                            $divHeader = new MDiv('divHeader', $header, null, 'align=center');
                            $mainTable->array[0][$y] = $divHeader;
                            $mainTable->setCellClass(0, $y, 'm-tableraw-column-title');
                            $mainTable->setCellAttribute(0, $y, 'colspan', count(array_unique($daySchedulesNumber[$scheduleId.$date])));
                        }

                        $backupDate = $date;
                        $backupKeys[] = $scheduleId.$date;
                        
                        if ( in_array($timeId, $daySchedulesNumber[$scheduleId.$date]) )
                        {
                            $y = count($mainTable->array[1]);
                            $imageScheduleDescription = new MImage('imgFreq_' . $occurrenceDate . '_' . $timeId . '_' . $scheduleId . '_' . $enrollId, '', $imgScheduleDescription);
                            $imageScheduleDescription->addStyle('cursor', 'pointer');
                            $imageScheduleDescription->addAttribute('onclick', $this->getAjaxAction('popupDescription', 'divPopup', false, array('timeId'=>$timeId, 'scheduleId'=>$scheduleId, 'date'=>$occurrenceDate, 'groupId'=>$groupId)));
                            $subHeader = $beginHour . '<br>' . $endHour . '<br>' . $imageScheduleDescription->generate();
                            $divSubHeader = new MDiv('divSubHeader', $subHeader, null, 'align=center');
                            $mainTable->array[1][$y] = $divSubHeader;
                            $mainTable->setCellClass(1, $y, 'm-tableraw-column-title');
                        }

                        $frequency = $busFrequenceEnroll->getEnrollFrequencyOnDate($value[0], $scheduleId, $occurrenceDate, $timeId);

                        if ( strlen($frequency) > 0 )
                        {
                            if ( $frequency == 1 )
                            {
                                $images = new MImage('imgFreq_' . $occurrenceDate . '_' . $timeId . '_' . $scheduleId . '_' . $enrollId, '', $imgPresence);
                            }
                            elseif ( ($frequency == 0.5 ) && (SAGU::getParameter('BASIC', 'HALF_PRESENCE') == DB_TRUE) )
                            {
                                $images = new MImage('imgFreq_' . $occurrenceDate . '_' . $timeId . '_' . $scheduleId . '_' . $enrollId, '', $imgHalfPresence);
                            }
                            elseif ( $frequency == 0 )
                            {
                                $images = new MImage('imgFreq_' . $occurrenceDate . '_' . $timeId . '_' . $scheduleId . '_' . $enrollId, '', $imgAbsence);
                            }
                            else
                            {
                                $images = new MImage('imgFreq_' . $occurrenceDate . '_' . $timeId . '_' . $scheduleId . '_' . $enrollId, '', $imgEmpty);
                            }

                            $mainTable->array[2][$count1] = $images->generate();
                        }
                        else
                        {
                            $images = new MImage('imgFreq_' . $occurrenceDate . '_' . $timeId . '_' . $scheduleId . '_' . $enrollId, '', $imgEmpty);

                            $mainTable->array[2][$count1] = $images->generate();
                        }

                        $count1++;
                    } 
                }
                else
                {
                    $mainTable->array[] = new MText('noData', _M('Nenhum registro de frequência foi adicionado até o momento.', $module));
                }

                $div = new MBasegroup('divTable', '', array($mainTable));
                $div->setScrollHeight('99%');

                $fields[] = $div;
                $fields[] = new MSeparator();
                $fields[] = new MSeparator();
            }

            $fields[] = new MSeparator();

            $presenceLabel = new MLabel(_M('Presença', $module) . ':');
            $presenceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $presence = new MImage('presence', _M('Presença', $module), $MIOLO->getUI()->getImage($module, 'presence.png'));
            $fields[] = new MHContainer('hctPresence', array($presenceLabel, $presence));

            if ( SAGU::getParameter('BASIC', 'HALF_PRESENCE') == DB_TRUE )
            {
                $halfPresenceLabel = new MLabel(_M('Metade da presença', $module) . ':');
                $halfPresenceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $halfPresence = new MImage('halfPresence', _M('Metade da presença', $module), $MIOLO->getUI()->getImage($module, 'halfPresence.png'));
                $fields[] = new MHContainer('hctHalfPresence', array($halfPresenceLabel, $halfPresence));
            }

            $absenceLabel = new MLabel(_M('Ausência', $module) . ':');
            $absenceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $absence = new MImage('absence', _M('Ausência', $module), $MIOLO->getUI()->getImage($module, 'absence.png'));
            $fields[] = new MHContainer('hctAbsence', array($absenceLabel, $absence));
        }
        else
        {
            $this->AddError(_M('Não há dados.', $module));
        }

        return $fields;
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        
        // Get filters values
        $data->personId = $this->personData->personId;
        $data->periodId = $this->GetFormValue('periodId', SAGU::getParameter('basic', 'CURRENT_PERIOD_ID'));
        
        return $data;
    }

    /**
     * Abre o formulário de descrição da aula ministrada
     *
     * @param (array) $args - Array com date, timeId, scheduleId, groupId e professorId
     */
    public function popupDescription($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Instancia os bussines
        $busPerson = new BusinessBasicBusPerson();
        $busScheduleProfessorContent = new BusinessAcademicBusScheduleProfessorContent();

        // Pega os parâmetros que recebeu via AJAX
        $date = $args->date;
        $timeId = $args->timeId;
        $scheduleId = $args->scheduleId;
        $grupId = $args->grupId;

        // Data
        $dateFormating = explode( '/', $date );
        $dateFormated = $dateFormating[2] . '-' . $dateFormating[1] . '-' . $dateFormating[0];

        // Field date
        $popupFields[] = new MHiddenField('date', $date);
        // Field timeId
        $popupFields[] = new MHiddenField('timeId', $timeId);
        // Field scheduleId
        $popupFields[] = new MHiddenField('scheduleId', $scheduleId);
        // Field grupId
        $popupFields[] = new MHiddenField('grupId', $grupId);

        $filters = new stdClass();
        $filters->date = $dateFormated;
        $filters->timeId = $timeId;
        $filters->scheduleId = $scheduleId;

        // Busca os dados
        $data = $busScheduleProfessorContent->searchScheduleProfessorContent($filters);
        $description = (strlen($data[0][4]) > 0 ? $data[0][4] : _M('Nenhuma descrição até o momento.', $module));

        if ( $data[0][5] )
        {
            // Código do professor visitante
            $professorVisitingData = $busPerson->getPerson($data[0][5]);

            // Field visiting professor
            $visitingProfessorLabel = new MText('visitingProfessorLabel', _M('Professor convidado',$module) . ':');
            $visitingProfessorLabel->addStyle('width', '150px');
            $visitingProfessorField = new MText('visitingProfessor', $professorVisitingData->name);
            $hctvisitingProfessor = new MHContainer('hctvisitingProfessor', array($visitingProfessorLabel, $visitingProfessorField));
            $hctvisitingProfessor->setShowLabel(true);
            $hctvisitingProfessor->addBoxStyle('width', '100%');
            $hctvisitingProfessor->addBoxStyle('text-align', 'left');
            $popupFields[] = $hctvisitingProfessor;
        }

        // Field schedule description
        $descriptionLabel = new MText('descriptionLabel', _M('Descrição',$module) . ':');
        $descriptionLabel->addStyle('width', '150px');
        $descriptionField = new MText('description', $description);
        $hctDescription = new MHContainer('hctDescription', array($descriptionLabel, $descriptionField));
        $hctDescription->setShowLabel(true);
        $hctDescription->addBoxStyle('text-align', 'left');
        $popupFields[] = $hctDescription;

        $btns[] = new MButton('btnFormDescriptionCancel', _M('Ok', $module), "mpopup.remove();");
        $controls[] = new MDiv('btns', $btns, $class, 'style="float:right;"');
        $popupFields[] = $cnt = new MHContainer('CButtons', $controls);
        $cnt->addBoxStyle('width', '100%');
        $cnt->addBoxStyle('padding-top', '5%;');

        MPopup::show('popupDescription', $popupFields, _M('Descrição da aula ministrada', $module));
    }
}
?>