<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de solicitação de materiais
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 25/05/2011
 */
class FrmMaterialRequestSearch extends SForm
{
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Solicitação de material'), new InsMaterialRequest(), array('materialRequestId'));

        // Desabilita alguns botões da MToolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
        
        
        
        
        //Carrega o javascript da MPopup
        $this->page->AddScript('m_popup_control.js');       
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Business
        $busPerson = new BusinessBasicBusPerson();

        // Pega os dados da pessoa logada
        $person = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));

        // Field solicitante
        $fields[] = $requestor = new MTextLabel('requestor', $person->personId . " - " . $person->name, _M('Solicitante', $module));
        $requestor->setJsHint('Nome do solicitante');

        // Separator
        $fields[] = new MSeparator();

        // Grid
        $gridData = InsMaterialRequest::listPersonActiveRequestsAndLoans($person->personId);
        $gird = $MIOLO->getUI()->getGrid($module, 'GrdMaterialRequestSearch');
        $gird->setData($gridData);
        $gird->setClose(null);
        $gird->setTitle(_M('Solicitações de materiais em aberto', $module));
        $fields[] = $gird;

        // Separator
        $fields[] = new MSeparator();

        // Botão nova solicitação de material
        $btnBack = new MButton('tbBtnBack', '<< ' . _M('Voltar', $module), $MIOLO->getActionURL($module, 'main:professor', null, $opts));
        $btnNewMaterialRequest = new MButton('btnNewMaterialRequest', _M('Nova solicitação de material', $module), $MIOLO->getActionUrl($module, 'main:materialRequest', null, array('function' => SForm::FUNCTION_INSERT)));

        $fields[] = new MHContainer('hctButtons', array($btnBack, $btnNewMaterialRequest));
        
        
        parent::defineFields(array('fields' => $fields));
    }
    
    /**
     * Ação chamada na grid de solicitações de materiais
     * Exibe um popup com as informações sobre a solicitação selecionada
     */
    public function showMaterialRequestInfo($args)
    {        
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        
        $materialRequestId = MIOLO::_Request('materialRequestId');
        if( !(strlen($materialRequestId) > 0 ) )
        {
            $this->addError(_M('Nenhuma solicitação informada', $module));
        }
        
        $materialRequest = new InsMaterialRequest($materialRequestId);
        if ( strlen($materialRequest->materialId) > 0 )
        {
            $materialRequestType = $materialRequest->material->materialType->description;
        }
        else
        {
            $materialRequestType = $materialRequest->materialType->description;
        }
        
        // BaseGroup da solicitações
        $data = array(
            _M('Retirada solicitada', $module) => $materialRequest->beginDate,
            _M('Devolução solicitada', $module) => $materialRequest->endDate,
            _M('Tipo de material', $module) => $materialRequestType,
            _M('Material', $module) => $materialRequest->material->description,
            _M('Observações', $module) => (strlen($materialRequest->observation) > 0) ? $materialRequest->observation : "-"
        );
        
        //Adicionar as informação do emprestimo se estas existirem
        $filters = new stdClass();
        $filters->materialRequestId = $materialRequest->materialRequestId;
        $materialLoanSearch = InsMaterialLoan::search($filters);
        foreach($materialLoanSearch as $materialLoan)
        {
            $dataLoan = array(_M('Data de retirada (agendada)', $module) => $materialLoan->beginDate,
                              _M('Data de retorno (agendada)', $module) => $materialLoan->expectedEndDate,
                              _M('Data de devolução', $module) => $materialLoan->endDate);
        }
        if( count($dataLoan) > 0 )
        {
            $data = array_merge($data, $dataLoan);       
        }
        
        $fields[] = new SInformationField(array(
            'columns' => 1,
            'title' => _M('Dados da solicitação de material', $module),
            'value' => $data ));
        
        $this->setFields($fields);
        MPopup::show('materialRequestInfoPopup', $fields, _M('Informações da solicitação', $module));
    }
}
?>