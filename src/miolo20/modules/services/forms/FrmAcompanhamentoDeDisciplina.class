<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Augusto A. Silva [augusto@solis.coop.br] *
 *
 * @since
 * Class created on 06/08/2012
 */
$MIOLO->uses('/ui/controls/msubdetailvalidators.class');
$MIOLO->uses('/ui/controls/msubdetail.class');

class FrmAcompanhamentoDeDisciplina extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Histórico de acompanhamento', $module), null, null);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        
        $enrollVersionId    = MIOLO::_REQUEST('enrollVersionId');
        $contractId         = MIOLO::_REQUEST('contractId');
        $curriculumId       = MIOLO::_REQUEST('curriculumId');
        $personId           = MIOLO::_REQUEST('personId'); // para a base
        $curriComponentName = MIOLO::_REQUEST('curriComponentName');
        $pupilName          = MIOLO::_REQUEST('pupil');
        $finalTheme         = MIOLO::_REQUEST('theme');
        
        $filters = new stdClass();
        $filters->contractId   = $contractId;
        $filters->curriculumId = $curriculumId;
        
        $busEnroll = new BusinessAcademicBusEnroll();
        $enroll    = $busEnroll->searchEnroll($filters);                
        
        foreach ( $enroll as $value)
        {
            $enrollId  = $value[0];
        }        
        
        $filters = new stdClass();
        $filters->enrollId = $enrollId;
        
        $busFinalExaminationExaminingBoard = new BusinessAcademicBusFinalExaminationExaminingBoard();
        $examiningBoards = $busFinalExaminationExaminingBoard->searchFinalExaminationExaminingBoard($filters, true);
        
        $examiningNames = '';
        $first          = true;
        
        foreach ( $examiningBoards as $examining )
        {
            if ( $first )
            {
                $examiningNames .= $examining->personName;
                $first = false;
            }
            else
            {
                $examiningNames .= ',<br>' . $examining->personName;
            }
        }
        
        $labelEnrollVersion = new MTextLabel('labelEnrollVersion', _M('Codigo da disciplina:'));
        $labelEnrollVersion->setClass('m-caption');
        $textEnrollVersion  = new MTextLabel('textEnrollVersion', $enrollVersionId);
        $containerEnrollVersion = new MHContainer('enrollVersionContainer', array($labelEnrollVersion, $textEnrollVersion));
        $fields[] = $containerEnrollVersion;
        
        $labelCurriComponentName = new MTextLabel('labelCurriComponentName', _M('Nome da disciplina:'));
        $labelCurriComponentName->setClass('m-caption');
        $textCurriComponentName  = new MTextLabel('textCurriComponentName', $curriComponentName);
        $containerCurriComponentName = new MHContainer('curriComponentNameContainer', array($labelCurriComponentName, $textCurriComponentName));
        $fields[] = $containerCurriComponentName;
        
        $labelPupilName = new MTextLabel('labelPupilName', _M('Aluno:'));
        $labelPupilName->setClass('m-caption');
        $textPupilName  = new MTextLabel('textPupilName', $pupilName);
        $containerPupilName = new MHContainer('curriPupilName', array($labelPupilName, $textPupilName));
        $fields[] = $containerPupilName;
        
        $labelFinalTheme = new MTextLabel('labelFinalTheme', _M('Tema:'));
        $labelFinalTheme->setClass('m-caption');
        $textFinalTheme  = new MTextLabel('textFinalTheme', $finalTheme);
        $containerFinalTheme = new MHContainer('curriFinalTheme', array($labelFinalTheme, $textFinalTheme));
        $fields[] = $containerFinalTheme;
        
        $labelExamining = new MTextLabel('labelExamining', _M('Banca:'));
        $labelExamining->setClass('m-caption');
        $textExamining  = new MTextLabel('textExamining', $examiningNames);
        $containerExamining = new MHContainer('curriExamining', array($labelExamining, $textExamining));
        $fields[] = $containerExamining;
        
        // Subdetail
        
        $filter = new stdClass();
        $filter->personId = $personId;
        $filter->enrollId = $enrollId;
        
        $acompanhamento = new SerAcompanhamentoDeDisciplina();
        
        try
        {
            $dataSub = $acompanhamento->searchGrid($filter, true);            
        }
        catch ( Exception $e )
        {
            $dataSub = null;
        }
        
        $acompanhamentoId = new SHiddenField('acompanhamentoId', null);
        $flds[] = $acompanhamentoId;
        
        $date = new MCalendarField('date', null, _M('Data', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $date->setJshint(_M('Informe a data do histórico de acompanhamento', $module));
        $flds[] = $date;
        $valids[] = new MDATEDMYValidator('date');
        
        $obs = new MMultiLineField('obs', null, _M('Observação', $module), 40, 6, 30);
        $obs->setJsHint(_M('Informe uma observação para o histórico de acompanhamento', $module));
        $flds[] = $obs;
        
        $cols[] = new MGridColumn(_M('Código do acompanhamento', $module), 'left', true, '', false, 'acompanhamentoId');
        $cols[] = new MGridColumn(_M('Data', $module), 'right', true, '', true, 'date');
        $cols[] = new MGridColumn(_M('Observação', $module), 'left', true, '', true, 'obs');        
        
        $fields[] = $sub = new MSubDetail('acompanhamento', _M('Histórico de acompanhamento', $module), $cols, $flds, true);
        $sub->setValidators($valids);
        
        if ( $dataSub )
        {
            $sub->setData($dataSub);
        }
        else
        {
            $sub->clearData();
        }
        
        $fields[] = new MSeparator();
        $fields[] = new MDiv('divCurricularComponent', $data);
        $fields[] = new MSeparator();
        
        $optSave = array(
            'enrollId' => $enrollId,
            'personId' => $personId,
            'event'    => 'tbBtnSave:click'
        );
        $buttonSave = new MButton('tbBtnSave', _M('Salvar', $module), $MIOLO->getActionURL($module, 'main:professor:detalhamentoTcc', null, $optSave));
        $buttonBack = new MButton('tbBtnBack', '<< ' . _M('Voltar', $module), $MIOLO->getActionURL($module, 'main:professor:detalhamentoTcc', null, $opts));
        
        
        $fields[] = new MDiv('divActions', array( $buttonBack, $buttonSave ));
        
        parent::defineFields( array( 'fields' => $fields ) );
    }
}

?>
