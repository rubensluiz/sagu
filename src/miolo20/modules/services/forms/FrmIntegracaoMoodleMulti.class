<?php

/**
 * <--- Copyright 2003-2015 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Personal data form
 *
 * @author Joao Francisco Padilha Souza [joao@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * 
 *
 * @since
 * Class created on 03/02/2015
 */

/**
 * Form to type the group academic data
 */
class FrmIntegracaoMoodleMulti extends SForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {


        parent::__construct(_M('Inscrição no Moodle', $module), null, null);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $idmodule = 'residency';
        $groupId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');

        //Syncroniza o preceptor e os residentes na inicialização da tela (nas grids)
        $busMoodle = new BusinessAcademicBusMoodle();
        $busMoodle->synchronize($groupId, $idmodule);

        //-------------TELA----------------
        //Titulos
        $fields[] = new MTextLabel('lbl', $this->obterUnidadeTematica(), _M('Unidade temática'));
        $fields[] = new MTextLabel('lbl', $this->obterPeriodo(), _M('Período '));

        //Botao Inscrever
        $inscrever = array();
        $inscrever[] = $btn = new MButton('btnInscrever', _M('Criar disciplina no moodle e inscrever residentes'));
        $fields[] = $btn;

        $fields[] = new MBaseGroup('bsgP', _M("Preceptor"), $this->grdPreceptor());
        $fields[] = new MBaseGroup('bsgA', _M("Residentes:"), $this->grdResidente());

        //Botao Voltar
        $voltar = array();
        $voltar[] = new MButton('btnVoltar', _M('<< Voltar'), $MIOLO->getActionURL('services', 'main:residency:unidadesTematicasDoPreceptor'));
        $fields[] = new MHContainer('cont', $voltar);

        parent::defineFields(array( 'fields' => $fields ));
    }

    /**
     * Funcao para criar e retornar a grid do PRECEPTOR (professor)
     * 
     * @return type
     */
    private function grdPreceptor()
    {
        $MIOLO = MIOLO::getInstance();
        $idmodule = 'residency';
        $groupId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');

        $busMoodle = new BusinessAcademicBusMoodle();
        $preceptorData = $busMoodle->listTeacherMoodleSubscription($groupId, $idmodule);

        $gridPreceptor = $MIOLO->getUI()->getGrid('services', 'GrdMoodleSubscriptionProfessor');
        $gridPreceptor->showExport = false;
        $gridPreceptor->showHeaders(false);
        $gridPreceptor->clearActions();
        $gridPreceptor->disablePagination();
        $gridPreceptor->disableColumnSorting();
        $gridPreceptor->setData($preceptorData);

        $divPreceptor = new MDiv('divProf', array( $gridPreceptor ));
        $divPreceptor->setWidth('100%');

        return array( $divPreceptor );
    }

    /**
     * Funcao para criar e retornar uma grid do residente (aluno)
     * 
     * @return String[]
     */
    private function grdResidente()
    {

        $MIOLO = MIOLO::getInstance();
        $idmodule = 'residency';
        $groupid = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        $busMoodle = new BusinessAcademicBusMoodle();
        $resitendData = $busMoodle->listStudentMoodleSubscription($groupid, $idmodule);

        $gridResidente = $MIOLO->getUI()->getGrid('services', 'GrdMoodleSubscriptionPupil');
        $gridResidente->showExport = false;
        $gridResidente->clearActions();
        $gridResidente->disablePagination();
        $gridResidente->disableColumnSorting();
        $gridResidente->setData($resitendData);

        $divResidente = new MDiv('divAluno', array( $gridResidente ));
        $divResidente->setWidth('100%');

        return array( $divResidente );
    }

    /**
     * da classe "MedOfertaDeUnidadeTematica.class" 
     * na function searchGrid, esta "obterUnidadeTematica()"
     * trás o select da coluna "B.descricao" (posicao 1)
     * que é o nome da Unidade temática
     * 
     * @return String  - Array
     */
    private function obterUnidadeTematica()
    {
        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        
        $dados = ResOfertaDeUnidadeTematica::searchGrid($filters);
        
        return $dados[0][1];        
    }

    /**
     * da classe "MedOfertaDeUnidadeTematica.class" 
     * na function searchGrid, esta "obterPeriodo()" trás o 
     * select da coluna "B.periodo" (posicao 2)
     * que e o periodo da oferta
     * 
     * @return String  - Array
     */
    private function obterPeriodo()
    { 
        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        
        $dados = ResOfertaDeUnidadeTematica::searchGrid($filters);

        return $dados[0][2];
    }

    /**
     * 
     */
    public function btnInscrever_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $idmodule = 'residency';
        $groupId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        $busMoodle = new BusinessAcademicBusMoodle();

        // Sincroniza a turma com o moodle
        $busMoodle->synchronize($groupId, $idmodule);
        $resultado = $busMoodle->makeIntegrationWithMoodle($groupId, $idmodule);


        if ( $resultado )
        {
            $MIOLO->information(_M('Integração efetuada com Sucesso.', $module), $MIOLO->getActionURL('services', 'main:residency:unidadesTematicasDoPreceptor'));
        }
        else
        {
            $MIOLO->error(_M('Erro ao Sincronizar com Moodle.', $module), $MIOLO->getActionURL('services', 'main:residency:unidadesTematicasDoPreceptor'));
        }
    }

}
