<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * Shows the documents the pupil should deliver but haven't done so yet.
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 21/02/2008
 */

/**
 * Report to show pupils ou employees financial situations
 */
class FrmMissingDocuments extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        parent::__construct( _M('Documentos pendentes', $module), null, null );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields($msg = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson = new BusinessBasicBusPerson();
        $person = $busPerson->getPersonByMioloUserName($mioloUserName);

        $busContract = new BusinessAcademicBusContract();
        $busDocument = new BusinessBasicBusDocument();

        $contracts = $busContract->getPersonContracts($person->personId);
        if ( count($contracts) <= 0 )
        {
            $this->addInfo(_M('Nenhum contrato encontrado, indicando que não há documentos pendentes.', $module));
        }
        else
        {
            $table = new MTableRaw(null, null, null);
            $line = 0;
            foreach ( $contracts as $contract )
            {
                list ( $contractId,
                       $courseIdVersion,
                       $courseName,
                       $unitId,
                       $unitDescription,
                       $activationDate,
                       $deactivationDate,
                       $actualLearningPeriodId ) = $contract;

                $table->array[$line++][0] = '<b>' . $courseName . '</b>';
                $missingDocs = $busDocument->checkMissingDocuments($person->personId, $contractId);

                if ( count($missingDocs) > 0 )
                {
                    foreach ( $missingDocs as $documentTypeId => $data )
                    {
                        $table->array[$line++][0] = '- ' . $data->documentName;
                    }
                }
            }
            $fields[] = $table;
        }

        $url = 'javascript:history.go(-1)';
        $fields[] = new MButton('btnBack', '<< ' . _M('Voltar', $module), $url);

        parent::defineFields( array( 'fields' => $fields ) );
    }
}
?>