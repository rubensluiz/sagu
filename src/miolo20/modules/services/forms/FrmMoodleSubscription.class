<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Evaluation Webservices form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 04/02/2011
 */
/**
 * Form to manipulate a Moodle subscription
 */

MIOLO::uses('/ui/controls/msubdetail.class');

class FrmMoodleSubscription extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Inscrição no Moodle', $module), null, null);

        // Disable toolbar buttons
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
        
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $groupId = MIOLO::_request('groupId');
        $professorId = MIOLO::_request('professorId');
        $periodId = MIOLO::_request('periodId');

        $busGradeTyping = new BusinessAcademicBusGradeTyping();
        $groupData = $busGradeTyping->getGroupData($groupId);

        $busSchedule = new BusinessAcademicBusSchedule();
        $professors = $busSchedule->getGroupProfessors($groupId);

        if ( is_array($professors) )
        {
            $groupData->professor = implode(', ', $professors);
        }
        else
        {
            $groupData->professor = _M('Professor não definido', $module);
        }

        $fields[] = new MTextLabel('curricularComponent', $groupData->curricularComponent, _M('Disciplina', $module));
        $fields[] = new MTextLabel('period', $groupData->periodId, _M('Período', $module));
        $fields[] = new MTextLabel('professor', $groupData->professor, _M('Professor(es)', $module));
        $fields[] = new MTextLabel('unit', $groupData->unit, _M('Unidade', $module));

        $flds[] = new SHiddenField('groupId', $this->getFormValue('groupId', $groupId));
        $flds[] = new SHiddenField('periodId', $this->getFormValue('periodId', $periodId));
        $flds[] = new SHiddenField('professorId', $this->getFormValue('professorId', $professorId));

        $busMoodle = new BusinessAcademicBusMoodle();
        // Sincroniza a turma com o moodle
        $busMoodle->synchronize($groupId);
        // Lista os professores
        $professorData = $busMoodle->listTeacherMoodleSubscription($groupId);
        // Lista os alunos
        $pupilData = $busMoodle->listStudentMoodleSubscription($groupId);

        // Grid dos professores
        $gridProfessor = $MIOLO->getUI()->getGrid($module, 'GrdMoodleSubscriptionProfessor', null);
        $gridProfessor->clearActions();
        $gridProfessor->showExportAsCSV = false;
        $gridProfessor->setData($professorData);
        $divProfessor = new MDiv('divProfessor', $gridProfessor);
        $divProfessor->setWidth('100%');
        $fields[] = new MBaseGroup('bsgProfessor', _M('Professor(es)', $module), array($divProfessor));

        // Grid dos alunos
        $gridPupil = $MIOLO->getUI()->getGrid($module, 'GrdMoodleSubscriptionPupil', null);
        $gridPupil->clearActions();
        $gridPupil->showExportAsCSV = false;
        $gridPupil->setData($pupilData);
        $divPupil = new MDiv('divPupil', $gridPupil);
        $divPupil->setWidth('100%');
        $fields[] = new MBaseGroup('bsgPupil', _M('Alunos', $module), array($divPupil));

        if ( ! SAGU::userIsFromServices() )
        {
            $opts = array('personId' => $this->getFormValue('professorId', $professorId),
                          'periodId' => $this->getFormValue('periodId', $periodId));
            
            $actionReturn = $MIOLO->getActionURL($module, 'main:professor:curricularComponents', null, $opts);
        }
        else
        {
            $opts = array('periodId' => $this->getFormValue('periodId', $periodId));
            
            $actionReturn = $MIOLO->getActionURL('academic', 'main:process:group', null, $opts);
        }

        $btnBack = new MButton('tbBtnBack', _M('Voltar', $module), $actionReturn);
        $btnSave = new MButton('tbBtnSave', _M('Criar disciplina no moodle e inscrever alunos', $module));

        $fields[] = new MHContainer('htcButons', array($btnBack, $btnSave));

        $this->SetFields($fields);
        $this->SetValidators($validators);

        parent::defineFields();
    }

    public function tbBtnSave_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $groupId = $data->groupId;

        try
        {

            $busMoodle = new BusinessAcademicBusMoodle();
            // Sincroniza a turma com o moodle
            $busMoodle->synchronize($groupId);
            $result = $busMoodle->makeIntegrationWithMoodle($groupId);

            if ( $result )
            {
                $msg = _M('Alterações efetuadas com sucesso', $module);
                $caption = _M('Informação', $module);

                if ( ! SAGU::userIsFromServices() )
                {
                    $opts = array('personId' => $this->getFormValue('professorId', $professorId),
                                  'periodId' => $this->getFormValue('periodId', $periodId));

                    $actionReturn = $MIOLO->getActionURL($module, 'main:professor:curricularComponents', null, $opts);
                }
                else
                {
                    $opts = array('periodId' => $this->getFormValue('periodId', $periodId));

                    $actionReturn = $MIOLO->getActionURL('academic', 'main:process:group', null, $opts);
                }

                SAGU::information($msg, $actionReturn);
            }
            else
            {
                throw new Exception(_M('Não foi possível efetuar a inscrição no Moodle', $module));
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    public function getTypesData()
    {
        $data->groupId = $this->getFormValue('groupId');
        $data->periodId = $this->getFormValue('periodId');
        $data->professorId = $this->getFormValue('professorId');

        return $data;
    }
}
?>
