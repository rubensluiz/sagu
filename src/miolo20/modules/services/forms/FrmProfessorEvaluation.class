<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Evaluation Webservices form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe SOLIS [ solis@solis.coop.br ]
 *
 * @since
 * Class created on 04/02/2011
 */

/**
 * Form to manipulate a evaluation
 */
class FrmProfessorEvaluation extends SForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Include subDetail class
        $MIOLO->uses('/ui/controls/msubdetail.class');

        parent::__construct(_M('Avaliações', $module), null, null);

        // Disable toolbar buttons
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
        
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        // groupId
        $groupId = $this->getFormValue('groupId');
        $professorId = $this->getFormValue('professorId');
        $periodId = $this->getFormValue('periodId');
        $moodleInstalled = SAGU::getParameter('basic', 'MOODLE_INSTALLED') == 'YES' ? true : false;

        $fields[] = new SHiddenField('groupId', $groupId);
        $fields[] = new SHiddenField('periodId', $periodId);
        $fields[] = new SHiddenField('professorId', $professorId);

        if ( strlen($groupId) > 0 && strlen($professorId) > 0 )
        {
            $busEvaluation = new BusinessAcademicBusEvaluation();

            $std = new StdClass();
            $std->groupId = $groupId;
            $std->professorId = $professorId;
            $data = $busEvaluation->searchEvaluation($std);

            if ( count($data) > 0 )
            {
                $object[] = 'evaluationId';
                $object[] = 'periodId';
                $object[] = 'description';
                $object[] = 'degreeId';
                $object[] = 'degreeDescription';
                $object[] = 'weight';
                $object[] = 'groupId';
                $object[] = 'curricularComponentId';
                $object[] = 'curricularComponentVersion';
                $object[] = 'curricularComponentDescription';
                $object[] = 'professorId';
                $object[] = 'professorName';
                $object[] = 'dateForecast';
                $object[] = 'moodleEvaluationId';

                $dataGrid = SAGU::resultToObject($data, $object);
            }
            else
            {
                if ( MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click' )
                {
                    MSubDetail::clearData('subEvaluations');
                }
            }
        }

        $busGradeTyping = new BusinessAcademicBusGradeTyping();
        $groupData = $busGradeTyping->getGroupData($groupId);

        $busSchedule = new BusinessAcademicBusSchedule();
        $professors = $busSchedule->getGroupProfessors($groupId);

        if ( is_array($professors) )
        {
            $groupData->professor = implode(', ', $professors);
        }
        else
        {
            $groupData->professor = _M('Professor não definido', $module);
        }

        $fields[] = new MTextLabel('curricularComponent', $groupData->curricularComponent, _M('Disciplina', $module));
        $fields[] = new MTextLabel('period', $groupData->periodId, _M('Período', $module));
        $fields[] = new MTextLabel('professor', $groupData->professor, _M('Professor(es)', $module));
        $fields[] = new MTextLabel('unit', $groupData->unit, _M('Unidade', $module));

        $flds[] = new SHiddenField('evaluationId', $this->getFormValue('evaluationId'));

        $busGroup = new BusinessAcademicBusGroup();
        $dataGroup = $busGroup->getGroup($groupId);
        $busDegree = new BusinessAcademicBusDegree();

        $std2 = new stdClass();
        $std2->learningPeriodId = $dataGroup->learningPeriodId;
        $searchDegree = $busDegree->searchDegree($std2);

        if ( is_array($searchDegree) )
        {
            foreach ( $searchDegree as $cod => $linha )
            {
                $valDegree[$linha[0]] = $linha[10];
            }
        }

        if ( $moodleInstalled )
        {
            // Business moodle
            $busMoodle = new BusinessAcademicBusMoodle();

            // Get moodle evaluation
            $filters = new stdClass();
            $filters->groupId = $groupId;
            $assignment = $busMoodle->getMoodleAssignment($filters);

            // Se tiver tarefas cadastradas
            if ( count($assignment) > 0 )
            {
                $fields[] = new MSeparator();
                $textInformation = new MTextLabel('textInformation', _M('Esta disciplina está integrada com o ambiente de aprendizagem moodle, para importar uma tarefa com as respecivas notas obtidas pelos alunos, selecione uma ativida no campo tarefa do moodle.', $module), null);
                $baseMoodleInformation = new MBaseGroup('baseMoodleInformation', _M('Moodle', $module), array($textInformation), 'horizontal', false);
                $fields[] = $baseMoodleInformation;
                $fields[] = new MSeparator();
            }
        }
        $degreeLabel = new MText('degreeLabel', _M('Grau acadêmico', $module) . ':');
        $degreeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $degreeLabel->setClass('m-caption m-caption-required');
        $degreeId = new MSelection('degreeId', $this->getFormValue('degreeId', $data->degreeId), null, $valDegree);
        $hctDegree = new MHContainer('hctDegree', array($degreeLabel, $degreeId));
        $hctDegree->setShowLabel(true);
        $validators[] = new MRequiredValidator('degreeId', _M('Grau acadêmico', $module));
        $flds[] = $hctDegree;

        if ( $moodleInstalled )
        {
            // Se tiver tarefas cadastradas
            if ( count($assignment) > 0 )
            {
                // Field moodle evaluation
                $moodleAssignmentLabel = new MText('moodleEvaluationLabel', _M('Tarefa do moodle', $module) . ':');
                $moodleAssignmentLabel->setJsHint(_M('Importa a avalição do ambiente de aprendizagem moodle', $module));
                $moodleAssignmentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $moodleAssignment = new MSelection('moodleEvaluationId', $args->moodleEvaluationId, '', $assignment);
                $hctMoodleAssigment = new MHContainer('hctMoodleAssignment', array($moodleAssignmentLabel, $moodleAssignment));
                $flds[] = $hctMoodleAssigment;
            }
        }

        // Field description
        $descriptionLabel = new MText('descriptionLabel', _M('Descrição', $module) . ':');
        $descriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description = new MTextField('description', $this->getFormValue('description', $args->description), '', 25);
        $description->setJsHint(_M('Informe a descrição da avaliação', $module));
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));
        $flds[] = new MHContainer('hctDescription', array($descriptionLabel, $description));

        // Field date forescast
        $dateForecastLabel = new MText('dateForecastLabel', _M('Data prevista', $module) . ':');
        $dateForecastLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dateForecast = new MCalendarField('dateForecast', $this->getFormValue('dateForecast', $data->dateForecast), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateForecast->setJsHint(_M('Informe a data prevista', $module));
        $validators[] = new MDATEDMYValidator('dateForecast', _M('Data prevista', $module), 'optional');
        $hctForecast = new MHContainer('hctForeseenDate', array($dateForecastLabel, $dateForecast));
        $flds[] = $hctForecast;

        if(SAGU::getParameter('academic', 'CONTROLE_PONTUACAO_MAXIMA_AVALIACAO') == 'TRUE')
        {
            // Campo de máximo de pontos possíveis de se atingir na referida avaliação
            $maxPointsLabel	= new MText("maxPointsLabel", _M('Máximo de pontos', $module) . ':');
            $maxPointsLabel->setClass('m-caption m-caption-required');
            $maxPointsLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
            $maxPoints = new MTextField('maxPoints', $this->getFormValue('maxPoints', strlen($data->maxPoints) > 0 ? $data->maxPoints : SAGU::getParameter('BASIC', 'MAX_EVALUATION_POINTS')), null, 2);
            $maxPoints->setJsHint( _M('Informe o número máximo de pontos possíveis de se atingir na referida avaliação.', $module) );
            $flds[]	= new MHContainer('maxPointsCnt', array($maxPointsLabel, $maxPoints));
            $validators[] = new MRequiredValidator('maxPoints', _M('Máximo de pontos', $module));
        }
        // Field weith
        $weightLabel = new MText('weightLabel', _M('Peso', $module) . ':');
        $weightLabel->setClass('m-caption m-caption-required');
        $weightLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $weight = new MTextField('weight', $this->getFormValue('weight', strlen($data->weight) > 0 ? $data->weight : 1), '', 10);
        $weight->setJsHint(_M('Informe o peso', $module));
        $validators[] = new MIntegerValidator('weight', _M('Peso', $module), 'required');
        $hctWeight = new MHContainer('hctWeight', array($weightLabel, $weight));
        $flds[] = $hctWeight;

        $cols[] = new MGridColumn(_M('Código', $module), 'left', true, '', false, 'evaluationId');
        $cols[] = new MGridColumn(_M('Descrição', $module), 'left', true, '', true, 'description');
        $cols[] = new MGridColumn(_M('Grau acadêmico', $module), 'left', true, '', true, 'degreeId', null, $valDegree);
        $cols[] = new MGridColumn(_M('Data prevista', $module), 'left', true, '', true, 'dateForecast');
        $cols[] = new MGridColumn(_M('Peso', $module), 'right', true, '', true, 'weight');

        if(SAGU::getParameter('academic', 'CONTROLE_PONTUACAO_MAXIMA_AVALIACAO') == 'TRUE')
        {
            $cols[] = new MGridColumn(_M('Máximo de pontos', $module), 'right', true, '', true, 'maxPoints');
        }
        // Se tiver moodle instalado e tiver tarefas cadastradas
        if ( ($moodleInstalled) && (count($assignment) > 0) )
        {
            $assignment = $busMoodle->getMoodleAssignment($filters, true);
            $cols[] = new MGridColumn(_M('Descrição tarefa moodle', $module), 'left', true, '', true, 'moodleEvaluationId', false, $assignment);
        }
        $sub = new MSubDetail('subEvaluations', _M('Avaliações', $module), $cols, $flds, true);
        $sub->setValidators($validators);
        $fields[] = $sub;

        $opts = array( 'personId' => $professorId,
                       'periodId' => $periodId );

        $btnBack = new MButton('tbBtnBack', '<< ' . _M('Voltar', $module), $MIOLO->getActionURL($module, 'main:professor:curricularComponents', null, $opts));
        $btnSave = new MButton('tbBtnSave', _M('Salvar', $module));

        $fields[] = new MHContainer('htcButons', array($btnBack, $btnSave));

        $this->SetFields($fields);

        if ( count($dataGrid) > 0 && MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click' )
        {
            MSubDetail::setData($dataGrid, 'subEvaluations');
        }

        parent::defineFields();
    }

    /**
     * Botão salvar
     */
    public function tbBtnSave_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $groupId = $data->groupId;
        $periodId = $data->periodId;
        $professorId = $data->professorId;

        $busEvaluation = new BusinessAcademicBusEvaluation();
        $transaction = $busEvaluation->getDatabase()->getTransaction();

        try
        {
            if ( count($data->subEvaluations) > 0 )
            {
                $transaction->_beginTransaction();
                $return = true;
                foreach ( $data->subEvaluations as $sub )
                {
                    $sub->groupId = $groupId;
                    $sub->periodId = $periodId;
                    $sub->professorId = $professorId;

                    // Insert
                    if ( !$sub->removeData && (strlen($sub->evaluationId) == 0) )
                    {
                        $ok = $busEvaluation->insertEvaluation($sub);
                    }
                    // Update
                    elseif ( !$sub->removeData && (strlen($sub->evaluationId) > 0) )
                    {
                        $ok = $busEvaluation->updateEvaluation($sub);
                    }
                    // Delete
                    elseif ( $sub->removeData && (strlen($sub->evaluationId) > 0) )
                    {
                        $ok = $busEvaluation->deleteEvaluation($sub->evaluationId);
                    }
                    if ( !$ok )
                    {
                        $return = false;
                        throw new Exception(_M('Erro ao salvar as avaliações.', $module));
                    }
                }
                if ( $return )
                {
                    $transaction->_commit();
                }
                else
                {
                    $transaction->_rollback();
                }
            }

            $msg = _M('Avaliações salvas com sucesso', $module);
            $caption = _M('Informação', $module);

            $opts = array( 'personId' => $professorId,
                           'periodId' => $periodId );

            SAGU::information($msg, $MIOLO->getActionURL($module, 'main:professor:curricularComponents', null, $opts));
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Obtém os dados do formulário
     */
    public function getTypesData()
    {
        $data = new stdClass();
        $data->groupId = $this->getFormValue('groupId');
        $data->periodId = $this->getFormValue('periodId');
        $data->professorId = $this->getFormValue('professorId');
        $data->subEvaluations = MSubDetail::getData('subEvaluations');

        return $data;
    }
}
?>