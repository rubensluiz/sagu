<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Personal data form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 17/03/2008
 */

/**
 * Form to manipulate the pupil personal data
 */
class FrmPersonalData extends SForm
{

    /**
     * Class constructor
     */
    public function __construct($data=null)
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Dados pessoais', $module), null, null);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $busPerson = new BusinessBasicBusPerson();
        $busCity = new BusinessBasicBusCity();

        $busPersonalData = new BusinessServicesBusPersonalData();
        $personData = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));
        $business = new BusinessBasicBusPhysicalPerson();
        $data = $business->getPhysicalPerson($personData->personId);

        $fields[] = new MHiddenField('sex', $data->sex);
        $fields[] = new MHiddenField('cityIdBirth', $data->cityIdBirth);
        $fields[] = new MHiddenField('countryIdBirth', $data->countryIdBirth);
        $fields[] = new MHiddenField('dateBirth', $data->dateBirth);
        $fields[] = new MHiddenField('fatherId', $data->fatherId);
        $fields[] = new MHiddenField('motherId', $data->motherId);
        $fields[] = new MHiddenField('responsableLegalId', $data->responsableLegalId);
        $fields[] = new MHiddenField('specialNecessityId', $data->specialNecessityId);
        $fields[] = new MHiddenField('specialNecessityDescription', $data->specialNecessityDescription);
        $fields[] = new MHiddenField('ethnicOriginId', $data->ethnicOriginId);
        $fields[] = new MHiddenField('dateDeath', $data->dateDeath);
        $fields[] = new MHiddenField('personTitleId', $data->personTitleId);
        $fields[] = new MHiddenField('personName', $data->name);
        $fields[] = new MHiddenField('mioloUserName', $data->mioloUserName);
        $fields[] = new MHiddenField('shortName', $data->shortName);

        $personIdField = new MHiddenField('personId', $data->personId);
        $fields[] = $personIdField;
        $personLabel = new MTextLabel('personLabel', $data->personId . ' - ' . $data->name, _M('Pessoa', $module));
        $fields[] = $personLabel;
        $fields[] = new MSeparator();

        $dataP = $busPersonalData->getUser(trim($MIOLO->getLogin()->id));

        // Field usuário
        $loginLabel = new MTextLabel('loginLabel', _M('Usuário:', $module));
        $loginLabel->setClass('m-caption');
        $login = new MTextField('logins', $this->getFormValue('logins', $dataP->logins), _M('Usuário', $module), 20, '', null, true);
        $loginContainer = $loginContainer = new MHContainer('loginContainer', array($loginLabel, $login));
        $loginContainer->setShowLabel(false);
        $loginContainer->addAttribute('style', 'float:right;');
        $flds[] = $loginContainer;
        $flds[] = new MSeparator('<br>');

        /*
         * Validadores para manter a senha com 6 caracteres, pois senhas grandes estavam causando problema de login no Joomla
         */
        $passWordLabel = new MTextLabel('passWordLabel', _M('Nova senha:', $module));
        $passWordLabel->setClass('m-caption');
        $passWord = new MPasswordField('passwords', $this->getFormValue('passwords'), _M('Nova senha', $module), 20);
        $passWordContainer = new MHContainer('passWordContainer', array($passWordLabel, $passWord));
        $passWordContainer->setShowLabel(false);
        $passWordContainer->addAttribute('style', 'float:right;');
        $flds[] = $passWordContainer;
        $validators[] = SAGU::getPasswordValidator('passwords', _M('Senha', $module));

        $passWord2Label = new MTextLabel('passWord2Label', _M('Confirmar nova senha:', $module));
        $passWord2Label->setClass('m-caption');
        $passWord2 = new MPasswordField('passwords2', $this->getFormValue('passwords2'), _M('Confirmar nova senha', $module), 20);
        $passWord2Container = new MHContainer('passWord2Container', array($passWord2Label, $passWord2));
        $passWord2Container->setShowLabel(false);
        $passWord2Container->addAttribute('style', 'float:right;');
        $flds[] = $passWord2Container;
        $validators[] = SAGU::getPasswordValidator('passwords2', _M('Confirmar senha', $module));

        $flds[] = $text = new MText('txtPass', _M('A senha deve ter entre @1 e @2 caracteres', $module, SAGU::getParameter('BASIC', 'PASSWORD_MIN_SIZE'), SAGU::getParameter('BASIC', 'PASSWORD_MAX_SIZE')));
        $text->addAttribute('style', 'clear:both;color:#4682B4');

        $div[] = $logDiv = new MDiv('logDiv', $flds);
        $logDiv->addBoxStyle('width', '300px');

        $bsg0 = new BaseGroup('bsg0', _M('Alterar senha', $module), $div, 'vertical');
        $bsg0->showLabel = true;
        $bsg0->setWidth('700');
        $fields[] = $bsg0;

        unset($flds);

        $business = new BusinessBasicBusMaritalStatus();

        $maritalStatusLabel = new MTextLabel('maritalStatusLabel', _M('Estado civil:', $module));
        $maritalStatusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $maritalStatusLabel->setClass('m-caption, m-caption-required');
        $maritalStatusLabel->addAttribute('style', 'float:right;');
        $maritalStatus = new MComboBox('maritalStatusId', $this->getFormValue('maritalStatusId', $data->maritalStatusId), null, $business->listMaritalStatus());
        $flds[] = $maritalContainer = new MHContainer('maritalContainer', array($maritalStatusLabel, $maritalStatus), MContainer::FORM_MODE_SHOW_SIDE);
        $validators[] = new MRequiredValidator('maritalStatusId');

        $carPlateLabel = new MTextLabel('carPlateLabel', _M('Placa do carro:', $module));
        $carPlateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $carPlateLabel->setClass('m-caption');
        $carPlate = new MTextField('carPlate', $this->getFormValue('carPlate', $data->carPlate), null, 10);
        $carPlate->setJsHint(_M('Informe a placa do carro', $module));
        $carPlateContainer = new MHContainer('carPlateContainer', array($carPlateLabel, $carPlate));
        $flds[] = $carPlateContainer;

        $bsg2 = new BaseGroup('bsg2', _M('Dados pessoais', $module), $flds, 'vertical');
        $bsg2->showLabel = true;
        $bsg2->width = '100%';

        unset($flds);

        if ( strlen($data->cityId) > 0 )
        {
            $data->changed = 'cityId';
        }
        $flds[] = $divGeographicData = new MDiv('divGeographicData', $this->fillGeographicData($data));

        // Bairro
        $neighborhoodLabel = new MTextLabel('neighborhoodLabel', _M('Bairro:', $module));
        $neighborhoodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $neighborhoodLabel->setClass('m-caption, m-caption-required');
        $neighborhoodLabel->addAttribute('style', 'float:right;');
        $neighborhood = new MTextField('neighborhood', $data->neighborhood, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $neighborhood->setJsHint(_M('Informe o logradouro.', $module));
        $flds[] = $neighborhoodCnt = new MHContainer('neighborhoodCnt', array($neighborhoodLabel, $neighborhood));
        $validators[] = new MRequiredValidator('neighborhood', _M('Bairro', $module));

        // Location type
        $busLocationType = new BusinessBasicBusLocationType();
        $locationTypeIdLabel = new MText('locationTypeIdLabel', _M('Tipo de logradouro', $module) . ':');
        $locationTypeIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $locationTypeIdLabel->setClass('m-caption m-caption-required');
        $locationTypeId = new MSelection('locationTypeId', $data->locationTypeId, '', $busLocationType->listLocationType(), false, '');
        $locationTypeId->setJsHint(_M('Informe o tipo de logradouro da pessoa', $module));
        $flds[] = $locationTypeCnt = new MHContainer('locationTypeIdCnt', array($locationTypeIdLabel, $locationTypeId));
        $validators[] = new MRequiredValidator('locationTypeId', _M('Tipo de logradouro', $module));

        // Logradouro
        $locationLabel = new MTextLabel('locationLabel', _M('Logradouro:', $module));
        $locationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $locationLabel->setClass('m-caption, m-caption-required');
        $locationLabel->addAttribute('style', 'float:right;');
        $location = new MTextField('location', $data->location, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $location->setJsHint(_M('Informe o logradouro.', $module));
        $flds[] = $locationCnt = new MHContainer('locationCnt', array($locationLabel, $location));
        $validators[] = new MRequiredValidator('location', _M('Logradouro', $module));

        // Número
        $numberLabel = new MTextLabel('numberLabel', _M('Número:', $module));
        $numberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $numberLabel->setClass('m-caption, m-caption-required');
        $numberLabel->addAttribute('style', 'float:right;');
        $number = new MTextField('number', $data->number, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $number->setJsHint(_M('Informe o número', $module));
        $flds[] = $numberCnt = new MHContainer('numberCnt', array($numberLabel, $number));
        $validators[] = new MRequiredValidator('number', _M('Número', $module));

        // Complemento
        $complementLabel = new MTextLabel('complementLabel', _M('Complemento:', $module));
        $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $complementLabel->setClass('m-caption');
        $complement = new MTextField('complement', $data->complement, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $complement->setJsHint(_M('Informe o complemento, se houver.', $module));
        $flds[] = $complementCnt = new MHContainer('complementCnt', array($complementLabel, $complement));

        // CEP
        $zipCodeLabel = new MTextLabel('zipCodeLabel', _M('CEP:', $module));
        $zipCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $zipCodeLabel->setClass('m-caption, m-caption-required');
        $zipCodeLabel->addAttribute('style', 'float:right;');
        $zipCode = new MTextField('zipCode', str_replace('-', '', $data->zipCode), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $zipCode->setJsHint(_M('Informe o CEP', $module));
        $flds[] = $zipCodeCnt = new MHContainer('zipCodeCnt', array($zipCodeLabel, $zipCode));
        $validators[] = new MRegExpValidator('zipCode', _M('CEP', $module), '^[0-9]{5,8}$', 'required');

        $bsg4 = new MBaseGroup('bsgGeographicData', _M('Endereço', $module), $flds, 'vertical');

        unset($flds);

        // Contatos
        $residentialPhoneLabel = new MTextLabel('residentialPhoneLabel', _M('Fone residencial:', $module));
        $residentialPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $residentialPhoneLabel->setClass('m-caption');
        $residentialPhone = new MTextField('residentialPhone', $this->getFormValue('residentialPhone', $data->residentialPhone), null, 20);
        $residentialPhone->setJsHint(_M('Informe o fone residencial', $module));
        $residentialPhoneContainer = new MHContainer('residentialPhoneContainer', array($residentialPhoneLabel, $residentialPhone));
        $flds[] = $residentialPhoneContainer;

        $workPhoneLabel = new MTextLabel('workPhoneLabel', _M('Fone comercial:', $module));
        $workPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $workPhoneLabel->setClass('m-caption');
        $workPhone = new MTextField('workPhone', $this->getFormValue('workPhone', $data->workPhone), null, 20);
        $workPhone->setJsHint(_M('Informe o fone comercial', $module));
        $workPhoneContainer = new MHContainer('workPhoneContainer', array($workPhoneLabel, $workPhone));
        $flds[] = $workPhoneContainer;

        $cellPhoneLabel = new MTextLabel('cellPhoneLabel', _M('Celular:', $module));
        $cellPhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $cellPhoneLabel->setClass('m-caption, m-caption-required');
        $cellPhoneLabel->addAttribute('style', 'float:right;');
        $cellPhone = new MTextField('cellPhone', $this->getFormValue('cellPhone', $data->cellPhone), null, 20);
        $cellPhone->setJsHint(_M('Informe o fone celular', $module));
        $cellPhoneContainer = new MHContainer('cellPhoneContainer', array($cellPhoneLabel, $cellPhone));
        $flds[] = $cellPhoneContainer;

        $messagePhoneLabel = new MTextLabel('messagePhoneLabel', _M('Fone de recados:', $module));
        $messagePhoneLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $messagePhoneLabel->setClass('m-caption');
        $messagePhone = new MTextField('messagePhone', $this->getFormValue('messagePhone', $data->messagePhone), null, 20);
        $messagePhone->setJsHint(_M('Informe o fone para recados', $module));
        $messagePhoneContainer = new MHContainer('messagePhoneContainer', array($messagePhoneLabel, $messagePhone));
        $flds[] = $messagePhoneContainer;

        $emailLabel = new MTextLabel('emailLabel', _M('E-mail:', $module));
        $emailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $emailLabel->setClass('m-caption');
        $email = new MTextField('email', strtolower($this->getFormValue('email', $data->email)), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $email->setJsHint(_M('Informe o e-mail da pessoa', $module));
        $emailContainer = new MHContainer('emailContainer', array($emailLabel, $email));
        $validators[] = new MEmailValidator('email', '', 'optional');
        $flds[] = $emailContainer;

        $emailAlternativeLabel = new MTextLabel('emailAlternativeLabel', _M('E-mail alternativo:', $module));
        $emailAlternativeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $emailAlternativeLabel->setClass('m-caption');
        $emailAlternative = new MTextField('emailAlternative', strtolower($this->getFormValue('emailAlternative', $data->emailAlternative)), null, 30);
        $emailAlternative->setJsHint(_M('Informe o e-mail alternativo da pessoa', $module));
        $validators[] = new MEmailValidator('emailAlternative', '', 'optional');
        $emailAlternativeContainer = new MHContainer('emailAlternativeContainer', array($emailAlternativeLabel, $emailAlternative));
        $flds[] = $emailAlternativeContainer;

        $urlLabel = new MTextLabel('urlLabel', _M('URL:', $module));
        $urlLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $urlLabel->setClass('m-caption');
        $url = new MTextField('url', strtolower($this->getFormValue('url', $data->url)), null, 30);
        $url->setJsHint(_M('Informe a URL da pessoa', $module));
        $urlContainer = new MHContainer('urlContainer', array($urlLabel, $url));
        $flds[] = $urlContainer;

        $bsg1 = new BaseGroup('bsg1', _M('Contatos', $module), $flds, 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width = '100%';
        unset($flds);

        if ( strlen($data->cityWork) > 0 )
        {
            $locationWork = $busCity->getCity($data->cityIdWork);
            $data->countryIdWork = $locationWork->countryId;
            $data->stateIdWork = $locationWork->stateId;
        }

        // Trabalho
        if ( strlen($data->cityIdWork) > 0 )
        {
            $data->changed = 'cityIdWork';
        }
        $flds[] = $divGeographicWorkData = new MDiv('divGeographicWorkData', $this->fillGeographicData($data, true));

        $zipCodeWorkLabel = new MTextLabel('zipCodeWorkLabel', _M('CEP:', $module));
        $zipCodeWorkLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $zipCodeWorkLabel->setClass('m-caption');
        $zipCodeWorkLabel->addAttribute('style', 'float:right;');
        $zipCodeWork = new MTextField('zipCodeWork', str_replace('-', '', $data->zipCodeWork), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $zipCodeWork->setJsHint(_M('Informe o CEP', $module));
        $flds[] = $zipCodeCnt = new MHContainer('zipCodeWorkCnt', array($zipCodeWorkLabel, $zipCodeWork));
        $validators[] = new MRegExpValidator('zipCodeWork', _M('CEP', $module), '^[0-9]{5,8}$');

        $readOnly = !$updateLocation && strlen($this->getFormValue('locationWork', $data->locationWork)) > 0;

        $locationWorkLabel = new MTextLabel('locationWorkLabel', _M('Logradouro:', $module));
        $locationWorkLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $locationWorkLabel->setClass('m-caption');
        $locationWork = new MTextField('locationWork', $this->getFormValue('locationWork', $data->locationWork), null, 30);
        $locationWork->setJsHint(_M('Informe o local de trabalho', $module));
        $locationWork->setReadOnly($readOnly);
        $locationWorkContainer = new MHContainer('locationWorkContainer', array($locationWorkLabel, $locationWork));
        $flds[] = $locationWorkContainer;

        $readOnly = !$updateLocation && strlen($this->getFormValue('complementWork', $data->complementWork)) > 0;

        $complementLabel = new MTextLabel('complementLabel', _M('Complemento:', $module));
        $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $complementLabel->setClass('m-caption');
        $complementWork = new MTextField('complementWork', $this->getFormValue('complementWork', $data->complementWork), null, 20);
        $complementWork->setJsHint(_M('Informe o complemento do logradouro', $module));
        $complementWork->setReadOnly($readOnly);
        $complementWorkContainer = new MHContainer('complementWorkContainer', array($complementLabel, $complementWork));
        $flds[] = $complementWorkContainer;

        $readOnly = !$updateLocation && strlen($this->getFormValue('neighborhoodWork', $data->neighborhoodWork)) > 0;

        $neighborhoodLabel = new MTextLabel('neighborhoodLabel', _M('Bairro:', $module));
        $neighborhoodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $neighborhoodLabel->setClass('m-caption');
        $neighborhoodWork = new MTextField('neighborhoodWork', $this->getFormValue('neighborhoodWork', $data->neighborhoodWork), null, 20);
        $neighborhoodWork->setJsHint(_M('Informe o bairro de trabalho', $module));
        $neighborhoodWork->setReadOnly($readOnly);
        $neighborhoodWorkContainer = new MHContainer('neighborhoodWorkContainer', array($neighborhoodLabel, $neighborhoodWork));
        $flds[] = $neighborhoodWorkContainer;


        $bsg3 = new BaseGroup('bsg3', _M('Trabalho', $module), $flds, 'vertical');
        $bsg3->showLabel = true;
        $bsg3->width = '100%';
        unset($flds);

        $vct1 = new MVContainer('vct1', array($bsg1, $bsg3));
        $vct1->setWidth('700');
        $vct1->setShowLabel(true);

        $vct2 = new MVContainer('vct2', array($bsg2, $bsg4));
        $vct2->setWidth('700');
        $vct2->setShowLabel(true);

        $hct1 = new MHContainer('hct1', array($vct2, $vct1));
        $vct1->setWidth('700');
        $hct1->setShowLabel(true);

        $fields[] = $hct1;

        $fields[] = new MSeparator();

        $url = 'javascript:history.go(-1)';
        $btnBack = new MButton('btnBack', '<< ' . _M('Voltar', $module), $url);
        $btnSave = new MButton('btnSave', _M('Salvar', $module));
        $fields[] = new MHContainer('hctButton', array($btnBack, $btnSave));

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function btnSave_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();

        if ( !($data->passwords === $data->passwords2) )
        {
            $MIOLO->error(_M('As senhas não conferem', $module));
        }

        $business = new BusinessBasicBusPhysicalPerson();
        $businessPersonalData = new BusinessServicesBusPersonalData();
        $ok = $business->updatePhysicalPerson($data);
        $ok = $businessPersonalData->updateUser($data);

        $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');

        if ( $ok )
        {
            $opts = array('personIdS' => $data->personId);
            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $MIOLO->getActionURL($module, $action, null, $opts));
        }
        else
        {
            $msg = _M('Erro executando a operação requisitada.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }

    /**
     * Instancia os campos para seleção de país, Estado e cidade. Aceita como parâmetro
     * um país, um Estado e/ou uma cidade. Para que seja renderizado corretamente, deve
     * ser utilizado também o parâmetro changed, que assume o valor de um dos campos (countryId,
     * stateId ou cityId). Este parâmetro é utilizado para definir quais dados o componente
     * carregará no momento de sua carga.
     *
     * @param (stdClass) $inArgs Vide descrição da função para saber como utilizar.
     * @return MHContainer Retorna um objeto MHContainer com os campos de local que serão instanciados.
     */
    public function fillGeographicData($inArgs, $work=false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // utilizar somente campos úteis.
        $args = new stdClass();
        $args->changed = $inArgs->changed;

        $changed = explode('W', $args->changed);

        if ( ( $work ) || ( sizeof($changed) == 2 ) )
        {
            $args->countryId = $inArgs->countryIdWork;
            $args->stateId = $inArgs->stateIdWork;
            $args->cityId = $inArgs->cityIdWork;

            $countryId = 'countryIdWork';
            $stateId = 'stateIdWork';
            $cityId = 'cityIdWork';

            $div = 'divGeographicWorkData';

            $labelCountry = 'contryWorkLabel';
            $labelState = 'stateWorkLabel';
            $labelCity = 'cityWorkLabel';
        }
        else
        {
            $args->countryId = $inArgs->countryId;
            $args->stateId = $inArgs->stateId;
            $args->cityId = $inArgs->cityId;

            $countryId = 'countryId';
            $stateId = 'stateId';
            $cityId = 'cityId';

            $div = 'divGeographicData';

            $labelCountry = 'contryLabel';
            $labelState = 'stateLabel';
            $labelCity = 'cityLabel';
        }

        $busCountry = new BusinessBasicBusCountry();
        $busState = new BusinessBasicBusState();
        $busCity = new BusinessBasicBusCity();

        // se o que mudou foi a cidade
        if ( ($args->changed == $cityId) || ($work) )
        {
            if ( strlen($args->cityId) > 0 )
            {
                $city = $busCity->getCity($args->cityId);

                $args->stateId = $city->stateId;
                $args->countryId = $city->countryId;
            }
        }
        // se o que mudou foi o estado
        else if ( $args->changed == $stateId )
        {
            // limpa todos os campos
            $args->cityId = '';
        }
        // se o que mudou foi o país
        else if ( $args->changed == $countryId )
        {
            // limpa todos os campos
            $args->cityId = '';
            $args->stateId = '';
        }
        else
        {
            // limpa todos os campos
            $args->cityId = '';
            $args->stateId = '';
            $args->countryId = SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID');
        }

        // carregar países
        $filters = new stdClass();
        $filters->name = '%';

        $countries = $busCountry->searchCountry($filters);

        // carregar estados
        $filters = new stdClass();
        $filters->countryId = $args->countryId;

        $states = $busState->searchState($filters);

        // carregar cidades
        if ( strlen($args->stateId) > 0 || count($states) == 0 )
        {
            if ( strlen($args->stateId) > 0 )
            {
                $filters->stateId = $args->stateId;
            }
            $cities = $busCity->searchCity($filters);
        }

        /*
         * Instanciar todos os campos do componente
         */

        $fields = array();

        $lblCountryId = new MTextLabel($labelCountry, _M('País:', $module));
        $lblCountryId->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $lblCountryId->setClass('m-caption');
        $txtCountryId = new MSelection($countryId, $args->countryId, null, $countries);
        $txtCountryId->addAttribute('onchange', SForm::getAjaxAction('fillGeographicData', $div, false, array('changed' => $countryId)));
        $fields[] = new MHContainer('hctCountry', array($lblCountryId, $txtCountryId));

        $lblStateId = new MTextLabel($labelState, _M('Estado', $module));
        $lblStateId->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $lblStateId->setClass('m-caption');
        $txtStateId = new MSelection($stateId, $args->stateId, null, $states);
        $txtStateId->addAttribute('onchange', SForm::getAjaxAction('fillGeographicData', $div, false, array('changed' => $stateId)));
        $fields[] = new MHContainer('hctCountry', array($lblStateId, $txtStateId));

        $lblCityId = new MTextLabel($labelCity, _M('Cidade:', $module));
        $lblCityId->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $lblCityId->setClass('m-caption');
        $txtCityId = new MSelection($cityId, $args->cityId, null, $cities);
        $fields[] = new MHContainer('hctCountry', array($lblCityId, $txtCityId));

        return $fields;
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData($action = NULL)
    {
        $MIOLO = MIOLO::getInstance();

        $data = new BasPhysicalPerson();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $data->$var = MIOLO::_request($var);
            }
        }

        $data->name = $this->personName->value;
        $data->locationTypeIdWork = $this->locationTypeWork->value;
        $data->logins = $this->logins->value;
        $data->passwords = $this->passwords->value;
        $data->passwords2 = $this->passwords2->value;

        return $data;
    }
}
