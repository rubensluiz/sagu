<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection for finance module
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Equipe Solis [sagu2@solis.coop.br]
 * 
 * @since
 * Class created on 15/09/2006
 *
 **/

/**
 * Class to manipulate the basCenter table
 **/
class BusinessServicesBusFinance extends sBusiness
{
    /**
     * Return a specific person financial situation
     *
     * @param $personId (integer): Person code for the search to be retrieved
     *
     * @return (object): Return an array with the financial situation
     *
     **/
    public function getFinancialSituation($personId)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->error('Deprecated: ' . __FILE__ . ' line ' . __LINE__);

        $sql = 'SELECT B.periodId,
                       A.invoiceId,
                       TO_CHAR(A.emissionDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.maturityDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       ROUND(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                       updatedTime(invoiceId),
                       ROUND(balanceWithPoliciesDated(invoiceId, now()::date)::numeric(12,2), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ') as balance
             FROM ONLY finReceivableInvoice A
             LEFT JOIN acdLearningPeriod B
                    ON ( A.maturityDate
               BETWEEN B.beginDate
                   AND B.endDate
                   AND A.courseId      = B.courseId
                   AND A.courseVersion = B.courseVersion
                   AND A.policyId      = B.policyId
                   AND A.unitId        = B.unitId)
                 WHERE A.personId      = ? 
              ORDER BY maturityDate DESC '; 

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $personId));

        return $result;
    }

    /**
     * Return a specific person who have someone incentive
     *
     * @param $personId (integer): Person code for the search to be retrieved
     *
     * @return (object): Return an array with the financial situation
     *
     **/
    public function listSupporterIncentives($supporterId, $maturityDate)
    {
        $sql = 'SELECT A.incentiveId,
                       B.personId,
                       getPersonName(B.personId) as personName,
                       TO_CHAR(A.startDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.cancellationDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       ROUND(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                       valueIsPercent,
                       D.invoiceId,
                       ROUND(COALESCE(sum(E.value)::numeric(12,2), ROUND(0, 2)), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')::numeric(12,2)
             FROM ONLY finIncentive A
       INNER JOIN ONLY acdContract B
                    ON (A.contractId = B.contractId)
       INNER JOIN ONLY finIncentiveType C
                 USING (incentiveTypeId)
        LEFT JOIN ONLY finReceivableInvoice D
                    ON (    D.personId = B.personId
                        AND extract(month FROM maturityDate) = extract(month FROM TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'))
                        AND extract(year FROM maturityDate) = extract(year FROM TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')) 
                        AND D.courseId      = B.courseId 
                        AND D.courseVersion = B.courseVersion
                        AND D.unitId        = B.unitId )
             LEFT JOIN finEntry E
                    ON (    E.invoiceId   = D.invoiceId
                        AND E.operationId = C.operationId )
                 WHERE A.supporterId = ?
                   AND ( A.startDate <= TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') OR A.startDate IS NULL )
                   AND ( A.endDate >= TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') OR A.endDate IS NULL )
                   AND ( A.cancellationDate >= TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') OR A.cancellationDate IS NULL )
              GROUP BY 1,2,3,4,5,6,7,8,9, A.startDate
              ORDER BY personName,
                       A.startDate ';

        $db   = $this->getDatabase();
        $args = array (
                        $maturityDate,
                        $maturityDate,
                        $supporterId,
                        $maturityDate,
                        $maturityDate,
                        $maturityDate
                      );
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
}
?>
