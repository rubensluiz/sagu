<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Augusto [augusto@solis.coop.br]
 *
 * \b Maintainers: \n
 * Augusto [augusto@solis.coop.br]
 *
 * @since
 * Class created on 03/08/2012
 *
 */
class SerAcompanhamentoDeDisciplina extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $acompanhamentoDeDisciplinaId;
    /**
     * @AttributeType text
     * 
     */
    protected $observacao;
    /**
     * @AttributeType date
     * 
     */
    protected $data;
    /**
     * @AttributeType integer
     * 
     */
    protected $personId;
    /**
     * @AttributeType integer
     * 
     */
    protected $enrollId;
    
    public function __construct($acompanhamentoDeDisciplinaId = NULL)
    {
        if ( (strlen($acompanhamentoDeDisciplinaId)  >  0) )
        {
            $this->acompanhamentoDeDisciplinaId = $acompanhamentoDeDisciplinaId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT acompanhamentoDeDisciplinaId
                  FROM acompanhamentoDeDisciplina';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY acompanhamentoDeDisciplinaId ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new PublicSerAcompanhamentoDeDisciplina($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters, $returnAsObject = false)
    {
        $sql = 'SELECT acompanhamentoDeDisciplinaId,                       
                       TO_CHAR(data, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       observacao
                  FROM acompanhamentoDeDisciplina';
        $params = array();
        
        $cols[] = 'acompanhamentoId';
        $cols[] = 'date';
        $cols[] = 'obs';

        if ( strlen($filters->acompanhamentoDeDisciplinaId)  >  0 )
        {
            $where.=' AND acompanhamentodedisciplinaid = ?';
            $params[] = $filters->acompanhamentoDeDisciplinaId;
        }

        if ( strlen($filters->observacao)  >  0 )
        {
            $where.=' AND TO_ASCII(observacao) ILIKE TO_ASCII(?) ';
            $params[] = $filters->observacao.'%';
        }

        if ( strlen($filters->data)  >  0 )
        {
            $where.=' AND data = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->data;
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $where.=' AND personid = ?';
            $params[] = $filters->personId;
        }

        if ( strlen($filters->enrollId)  >  0 )
        {
            $where.=' AND enrollid = ?';
            $params[] = $filters->enrollId;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY acompanhamentodedisciplinaid';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $returnAsObject ? SAGU::resultToObject($result, $cols) : $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       acompanhamentodedisciplinaid,
                       observacao,
                       TO_CHAR(data, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       personid,
                       enrollid
                  FROM acompanhamentodedisciplina
                 WHERE acompanhamentodedisciplinaid = ?';
        $result = SDatabase::query($sql, array($this->acompanhamentoDeDisciplinaId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName, $this->dateTime, $this->ipAddress, $this->acompanhamentoDeDisciplinaId, $this->observacao, $this->data, $this->personId, $this->enrollId) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->acompanhamentoDeDisciplinaId) == 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO acompanhamentodedisciplina 
                            ( observacao, 
                              data, 
                              personid, 
                              enrollid )
                     VALUES ( ?, 
                              TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                              ?,
                              ? )';
        $sqlPK = "SELECT nextval('acompanhamentodedisciplina_acompanhamentodedisciplinaid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $acompanhamentoDeDisciplinaId = $result[0][0];
        
        $params = array(
            $this->observacao, 
            $this->data, 
            $this->personId, 
            $this->enrollId
        );
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->acompanhamentoDeDisciplinaId = $acompanhamentoDeDisciplinaId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE acompanhamentodedisciplina
                   SET observacao = ?,
                       data       = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       personid   = ?,
                       enrollid   = ?
                 WHERE acompanhamentodedisciplinaid = ?';
        $params = array(
            $this->observacao, 
            $this->data, 
            $this->personId, 
            $this->enrollId, 
            $this->acompanhamentoDeDisciplinaId
        );
        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->acompanhamentoDeDisciplinaId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM acompanhamentodedisciplina
                      WHERE acompanhamentodedisciplinaid = ?';
        $params = array($this->acompanhamentoDeDisciplinaId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->acompanhamentoDeDisciplinaId = null;
        }

        return $result;
    }
}

?> 