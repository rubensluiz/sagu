<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file is a report to pupils or employes from the respective financial situation
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 15/09/2006
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdFinancialSituation extends MGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        $home = MIOLO::getCurrentAction();
        $moduleLocale = 'finance';

        $columns = array( new MGridColumn( _M('Código do título',        $module), 'right', true, null, true, null, false ),
                          new MGridColumn( '', 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Código do tipo de cobrança', $module), 'right', true, null, false, null, false ),
                          new MGridColumn( _M('Tipo de cobrança', $module), 'left', true, null, false, null, false ),
                          new MGridColumn( _M('Convênio',         $module), 'left',  true, null, false, null, false ),
                          new MGridColumn( _M('Data de emissão',  $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Data de vencimento', $module), 'right',  true, null, true, null, false ),
                          new MGridColumn( _M('Valor', $module), 'right',  true, null, false, null, false ),
                          new MGridColumn( _M('Valor', $module), 'right',  true, null, true, null, false ),
                          new MGridColumn( _M('Dias', $module), 'right',  true, null, true, null, false ),
                          new MGridColumn( _M('Valor atual', $module), 'right',  true, null, true, null, false ) );

        $url = $MIOLO->getActionURL( $module, $home );
        parent::__construct( null, $columns, $url, 0, 0, 'gridFinancialSituation' );
        $this->setRowMethod('GrdFinancialSituation', 'myRowMethod');

        // Print the invoice
        $_opts = array('event'=>'btnSearch_click', 'personId'=>$filters->personId);
        $opts = array('event'=>'submit_button_click', '_invoiceId'=>'%0%');
        $hrefPrint = $MIOLO->getActionURL('finance', "main:process:printInvoice", null, $opts);

        $this->actions[] = new GrdFinancialSituationActionPrint($this, 'print', $hrefPrint, _M('Imprimir boleto', $module));
        
        $this->eventHandler();
    }
    
    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();
        list($invoiceId, $n,$n,$n,$n,$n,$n,$n,$n,$n, $valorAtual) = $row;

        foreach ( $actions as $action )
        {
            // Trata acao de print
            if ( $action instanceof GrdFinancialSituationActionPrint )
            {
                $limiteMinimoAtingido = $valorAtual < SAGU::formatNumber(SAGU::getParameter('BASIC', 'MINIMAL_VALUE_TO_PRINT_INVOICE'));
                $pagouTitulo = SAGU::calcNumber(" BALANCE({$invoiceId}) = 0 ") == DB_TRUE;

                $condition = $pagouTitulo || $limiteMinimoAtingido;
                
                $action->setEnabled( !$condition );
            }
        }
    }
}

class GrdFinancialSituationActionPrint extends MGridActionIcon
{
}
?>
