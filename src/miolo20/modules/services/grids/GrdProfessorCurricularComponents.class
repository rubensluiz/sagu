<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * Grid with the professor's curricular components
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * 
 * @since
 * Class created on 05/09/2007
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdProfessorCurricularComponents extends SGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        $home = 'main:professor:curricularComponents';

        $columns = array( new MGridColumn( _M('Código da disciplina oferecida', $module), 'left', true, null, false,  null, true),
                          new MGridColumn( _M('Código da disciplina', $module),   'left', true, null, true,  null, true),
                          new MGridColumn( _M('Nome da disciplina', $module), 'left', true, null, true,  null, true),
                          new MGridColumn( _M('Código do curso', $module), 'left', true, null, true,  null, true),
                          new MGridColumn( _M('Nome do curso', $module), 'left', true, null, false,  null, true),
                          new MGridColumn( _M('Código do turno', $module), 'left', true, null, false, null, true),
                          new MGridColumn( _M('Turno', $module), 'left', true, null, true,  null, true),
                          new MGridColumn( _M('Código da unidade', $module), 'left', true, null, false, null, true),
                          new MGridColumn( _M('Unidade', $module), 'left', true, null, true,  null, true),
                          new MGridColumn( _M('Turma', $module), 'left', true, null, true,  null, true),
                          new MGridColumn( _M('Status', $module), 'left', true, null, true,  null, true) );

        $opts = array('periodId' => $filters->periodId,
                      'groupId' => '%0%',
                      'professorId' => $filters->personId );
        
        $frequency = $MIOLO->getActionURL( $module, substr($home, 0, strrpos($home,':')+1) . 'frequency', null, $opts );
        $gradesTyping = $MIOLO->getActionURL( $module, substr($home, 0, strrpos($home,':')+1) . 'gradesTyping', null, $opts );
        $evaluation = $MIOLO->getActionURL( $module, substr($home, 0, strrpos($home,':')+1) . 'evaluation', null, $opts );
        $sendEmail = $MIOLO->getActionURL( $module, substr($home, 0, strrpos($home,':')+1) . 'sendEmail', null, $opts );
        $moodleSubscription = $MIOLO->getActionURL( $module, substr($home, 0, strrpos($home,':')+1) . 'moodleSubscription', null, $opts );
        $attendanceReport = $MIOLO->getActionURL( 'academic', 'main:document:attendanceReport', null, array(
                'groupId' => '#0#',
                'professorId' => $filters->personId,
                'emissionDate' => SAGU::getDateNow(),
                'printMode' => 1,
                'services' => 1,
                'reportModel' => 'attendanceReportWithPhoto',
                'event' => 'attendanceReport',
                'generateOption' => 'pdf'
        ) );
        $attachedLeaf = $MIOLO->getActionURL( 'academic', 'main:document:examinationAct', null, array(
                'groupId' => '#0#',
                'event' => 'generateAttachedLeaf',
                'generateOption' => 'pdf'
        ) );
        $contratoPrestServ = $MIOLO->getActionURL( 'services', 'main:professor:contratoPrestacaoServico', null, array(
                'groupId' => '#0#',
                'professorId' => $filters->personId,
                'event' => 'generateContratoPrestacaoServico'
        ) );
        $gradebook = $MIOLO->getActionURL( 'services', 'main:professor:gradeBook', null, array(
                'groupId' => '#0#',
                'professorId' => $filters->personId
        ) );
        $signaturePresence = $MIOLO->getActionURL( 'services', 'main:professor:signaturePresence', null, array(
                'groupId' => '#0#',
                'professorId' => $filters->personId
        ) );

        $primaryKey = array('groupId'=>'0%');

        parent::__construct($filters, $columns, 'GrdProfessorCurricularComponents', $primaryKey);

        $this->clearActions();
        
        $this->addActionIcon(_M('Digitação de notas', $module), 'gradesTyping-on.png', $gradesTyping);
        $this->addActionIcon(_M('Registro de frequência', $module), 'frequency-on.png', $frequency);
        $this->addActionIcon(_M('Avaliações', $module), 'evaluationDefinition-on.png', $evaluation);
        $this->addActionIcon(_M('Enviar e-mail', $module), 'button_sendemail.png', $sendEmail);
        //Adiciona a opção apenas se o moodle estiver instalado
        if ( SAGU::getParameter('BASIC', 'MOODLE_INSTALLED') == 'YES' )
        {
            $this->addActionIcon(_M('Inscrição no Moodle', $module), 'research-16x16.png', $moodleSubscription);
        }
        $this->addActionIcon(_M('Lista de chamada', $module ), 'attendanceList.png', $attendanceReport);
        $this->addActionIcon(_M('Diário de classe/conteúdos das aulas', $module ), 'attachedLeaf.png', $attachedLeaf);
        $this->addActionIcon(_M('Plano de ensino', $module ), 'report-16x16.png', $gradebook);
        $this->addActionIcon(_M('Assinatura de presença', $module ), 'leaf.gif', $signaturePresence);
        
        if ( SAGU::getParameter('SERVICES', 'CONTRATO_PRESTACAO_SERVICO') == DB_TRUE )
        {
            if ( $filters->eTemporario == DB_TRUE )
            {
                $this->addActionIcon(_M('Contrato de prestação de serviço', $module), 'contrato-16x16.png', $contratoPrestServ);
            }
        }

        $this->setRowMethod($this, 'myRowMethod');
    }

    /*
     * Method to be executed for each new line of the table.
     * In this case, all actions are disabled when a group has its status == cancelled
     * and set the appropriated text ("Cancelled" or "Confirmed", depending on the status).
     */
    public function myRowMethod($i, $row, $actions, $columns)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busGroup = new BusinessAcademicBusGroup();

        $groupData = $busGroup->getGroup($row[0]);
        $busSchedule = new BusinessAcademicBusSchedule();

        //Professores
        $professors = $busSchedule->getGroupProfessors($groupData->groupId);
        if (count($professors) > 0)
        {
            $profText = implode('<br>', $professors);
        }
        else
        {
            $profText = _M('Professor não definido', $module);
        }

        $label = new MLabel($profText);
        $label->addBoxStyle('font-style', 'italic');

        $columns[2]->control[$i]->setValue($columns[2]->control[$i]->getValue() . $label->generate());

        // Habilita ou desabilita as ações dependendo do status da turma
        for ( $iActions=0; $iActions<count($actions); $iActions++ )
        {
            $actions[$iActions]->enabled = ($row[10] != DB_TRUE);
        }

        // Altera o texto do status da turma
        if ( $row[10] == DB_TRUE )
        {
            $txtConfirmed = new MText('txtConfirmed' . $i, _M('Cancelada', $module));
            $txtConfirmed->color = 'red';
        }
        else
        {
            $txtConfirmed = new MText('txtConfirmed' . $i, _M('Confirmada', $module));
            $txtConfirmed->color = 'blue';
        }
        $columns[10]->control[$i]->setValue($txtConfirmed->generate());
    }
}
?>