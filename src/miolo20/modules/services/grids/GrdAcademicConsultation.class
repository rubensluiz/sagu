<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * GrdAcademicConsultation
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 24/11/2005
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdAcademicConsultation extends MGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO    = MIOLO::getInstance();
        $home     = 'main';
        $module   = MIOLO::_request('module');
        $personId = MIOLO::_request('personId');
        $periodId = MIOLO::_request('periodId');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */

        $columns = array(
                          new MGridColumn( _M('Código da matrícula', $module), 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Código da disciplina oferecida', $module), 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Código do período', $module), 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Código', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Disciplina', $module) . ' (' . _M('Professor', $module) . ')', 'left', false, null, true, null, false ),
                          new MGridColumn( _M('Horário', $module) . ' / ' . _M('Sala', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Número de horas', $module) . ' - ' . _M('Créditos', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Nota', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Frequência', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Código do status', $module), 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Status', $module),  'center', true, null, true, null, false ),
                          new MGridColumn( _M('Turma', $module), 'left', true, null, true, null, false )
                        );

        $url = $MIOLO->getActionURL($module,"$home",null,$opts);
        parent::__construct( null, $columns, $url, null, 0, 'gridDiverseConsultationCurricularComponentCoursed' );
        $this->setLinkType('hyperlink');

        $opts = array( 'function' => 'update',
                       'enrollId' => '%0%',
                       'periodId' => $periodId,
                       'personId' => $personId,
                       'returnTo' => $home );

        $this->setRowMethod($this, 'myRowMethod');

        $this->setIsScrollable();
        $this->setTitle(_M('Disciplinas matriculadas', $module) . ': ' . $periodId);

        $this->eventHandler();
    }

    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $columns[2]->control[$i] = new MLabel( $row[2] );
        
        $groupId = $row[1];
        
        $busSchedule = new BusinessAcademicBusSchedule();
        
        $professors = $busSchedule->getGroupProfessors($groupId);
        
        $columns[4]->control[$i]->setBold(true);
        
        if (count($professors) > 0)
        {
            $label = new MLabel(implode('<br>', $professors));
            $label->addBoxStyle('font-style', 'italic');
            
            $columns[4]->control[$i]->setValue($columns[4]->control[$i]->getValue() . $label->generate());
        }
        
        //Horários
        $schedules = $busSchedule->getGroupScheduleDataWithRooms($groupId);
        
        if (count($schedules) > 0)
        {
            unset($scheduleArray);
            unset($roomArray);
            foreach ($schedules as $scheduleInfo)
            {
                unset($scheduleStr);
                if (strlen($scheduleInfo[0]) > 0)
                {
                    $scheduleStr = $scheduleInfo[0];
                }
                
                if (strlen($scheduleStr) > 0)
                {
                    $scheduleStr .= strlen($scheduleInfo[1]) > 0 ? '-' . $scheduleInfo[1] : '';
                }
                else
                {
                    $scheduleStr = $scheduleInfo[1];
                }
                
                if (strlen($scheduleStr) > 0)
                {
                    $scheduleArray[] = $scheduleStr;
                }
                
                unset($roomStr);
                if (strlen($scheduleInfo[2]) > 0)
                {
                    $roomStr = $scheduleInfo[2];
                }
                
                if (strlen($roomStr) > 0)
                {
                    $roomStr .= strlen($scheduleInfo[3]) > 0 ? '-' . $scheduleInfo[3] : '';
                }
                else
                {
                    $roomStr = $scheduleInfo[3];
                }
                
                if (strlen($roomStr) > 0)
                {
                    $roomArray[] = $roomStr;
                }
            }
            
            unset($str);
            if (count($scheduleArray) > 0)
            {
                $str = implode('/', array_unique($scheduleArray));
            }
            
            if (count($roomArray) > 0)
            {
                if (strlen($str) > 0)
                {
                    $str .= "<br>(" . implode('/', array_unique($roomArray)) . ')';
                }
                else
                {
                    $str = implode('/', $roomArray);
                }
            }
            
            $columns[5]->control[$i]->setValue( $str );
        }

        //Estado
        switch ($row[8])
        {
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED'):
                $columns[9]->control[$i]->setColor(SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_FREE'));
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED'):
                $columns[9]->control[$i]->setColor(SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_ENROLLED'));
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED'):
                $columns[9]->control[$i]->setColor(SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_DISABLED'));
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED'):
                $columns[9]->control[$i]->setColor(SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_ENROLLED'));
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DISAPPROVED'):
                $columns[9]->control[$i]->setColor(SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_CANCELLED'));
            break;
            default:
            break;
        }
    }
}

?>