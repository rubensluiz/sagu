<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 14/06/2011
 */
class HurRealizedActivity extends SType
{
    /**
     * @AttributeType integer
     */
    protected $realizedActivityId;
    /**
     * @AttributeType integer
     */
    protected $scheduledActivityId;
    /**
     * @AttributeType timestamp without time zone
     */
    protected $startDate;
    /**
     * @AttributeType timestamp without time zone
     */
    protected $endDate;
    /**
     * @AttributeType integer
     */
    protected $activityTypeId;
    /**
     * @AttributeType text
     */
    protected $description;
    /**
     * @AttributeType boolean
     */
    protected $isInternal;
    /**
     * @AttributeType text
     */
    protected $location;
    /**
     * @AttributeType integer
     */
    protected $fileId;
    /**
     * @AttributeType timestamp without time zone
     */
    protected $cancelDate;
    /**
     * @AttributeType HurRealizedActivityParticipant
     */
    protected $realizedActivityParticipant = array();

    /**
     * Construtor
     * @param type $realizedActivityId
     */
    public function __construct($realizedActivityId = NULL)
    {
        if ((strlen($realizedActivityId) > 0 ))
        {
            $this->realizedActivityId = $realizedActivityId;
            $this->populate();
        }
    }

    /**
     * Busca por atividades realizadas. Retorna um array de objetos HurRealizedActivity
     * @param object $filters
     * @return HurRealizedActivity
     */
    public static function search($filters)
    {
        $sql = 'SELECT realizedactivityid
                  FROM hur.realizedactivity';

        $where = '';
        foreach ($filters as $key=>$value)
        {
            if ((is_scalar($value)) && (strlen($value) > 0 ))
            {
                $where .= " AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY realizedactivityid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new HurRealizedActivity($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Busca por atividades realizadas. Retorna um array de array (para Grid)
     * @param object $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $maskTimestamp = SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME');
        $sql = " SELECT A.realizedactivityId,
                        A.description,
                        TO_CHAR(A.startDate, '{$maskTimestamp}'),
                        TO_CHAR(A.endDate, '{$maskTimestamp}'),
                        A.activityTypeId,
                        B.description AS activityType,
                        A.isInternal,
                        A.location,
                        TO_CHAR(A.cancelDate, '{$maskTimestamp}')
               FROM hur.realizedactivity A
         INNER JOIN hur.activityType B
                 ON (A.activityTypeId = B.activityTypeId) ";

        $params = array();
        if ( strlen($filters->realizedActivityId) > 0 )
        {
            $where .= ' AND A.realizedactivityid = ?';
            $params[] = $filters->realizedActivityId;
        }

        if ( strlen($filters->scheduledActivityId) > 0 )
        {
            $where .= ' AND A.scheduledactivityid = ?';
            $params[] = $filters->scheduledActivityId;
        }

        if ( strlen($filters->startDate) > 0 )
        {
            $type = strpos($filters->startDate, ':') ? 'timestamp' : 'date';
            $where .= " AND TO_TIMESTAMP(?, '{$maskTimestamp}')::{$type} = A.startDate::{$type}";
            $params[] = $filters->startDate;
        }

        if ( strlen($filters->endDate) > 0 )
        {
            $type = strpos($filters->endDate, ':') ? 'timestamp' : 'date';
            $where .= " AND TO_TIMESTAMP(?, '{$maskTimestamp}')::{$type} = A.endDate::{$type}";
            $params[] = $filters->endDate;
        }

        if ( strlen($filters->cancelDate) > 0 )
        {
            $type = strpos($filters->cancelDate, ':') ? 'timestamp' : 'date';
            $where .= " AND TO_TIMESTAMP(?, '{$maskTimestamp}')::{$type} = A.cancelDate::{$type}";
            $params[] = $filters->cancelDate;
        }

        if ( strlen($filters->activityTypeId) > 0 )
        {
            $where .= ' AND A.activitytypeid = ?';
            $params[] = $filters->activityTypeId;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $params[] = $filters->description . '%';
        }

        if ( strlen($filters->isInternal) > 0 )
        {
            $where .= ' AND A.isinternal = ?';
            $params[] = $filters->isInternal;
        }

        if ( strlen($filters->location) > 0 )
        {
            $where .= ' AND UNACCENT(A.location) ILIKE UNACCENT(?) ';
            $params[] = $filters->location . '%';
        }

        if ( strlen($filters->fileId) > 0 )
        {
            $where .= ' AND A.fileid = ?';
            $params[] = $filters->fileId;
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                 ORDER BY A.description';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    /**
     * Popula a classe
     */
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $maskTimestamp = SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME');
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.$maskTimestamp.'\'),
                       ipaddress,
                       realizedactivityid,
                       scheduledactivityid,
                       TO_CHAR(startdate, \''.$maskTimestamp.'\'),
                       TO_CHAR(enddate, \''.$maskTimestamp.'\'),
                       activitytypeid,
                       description,
                       isinternal,
                       location,
                       fileid,
                       TO_CHAR(canceldate, \''.$maskTimestamp.'\')
                  FROM hur.realizedactivity
                 WHERE realizedactivityid = ?';

        $result = SDatabase::query($sql, array($this->realizedActivityId));

        if (!strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->userName,
              $this->dateTime,
              $this->ipAddress,
              $this->realizedActivityId,
              $this->scheduledActivityId,
              $this->startDate,
              $this->endDate,
              $this->activityTypeId,
              $this->description,
              $this->isInternal,
              $this->location,
              $this->fileId,
              $this->cancelDate ) = $result[0];

        // Popula os participantes dessa atividade realizada
        $filters = new stdClass();
        $filters->realizedActivityId = $this->realizedActivityId;
        $this->realizedActivityParticipant = HurRealizedActivityParticipant::search($filters);
    }

    /**
     * Insere ou atualiza uma atividade realizada
     * @return boolean
     */
    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( !count($this->realizedActivityParticipant) > 0 )
        {
            $msg = _M('Você precisa selecionar pelo menos 1 participante.', $module);
            throw new Exception($msg);
        }

        if ( strlen($this->realizedActivityId) == 0)
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        //Salva participantes
        foreach ( (array) $this->realizedActivityParticipant as $rap )
        {
            $rap->realizedActivityId = $this->realizedActivityId;
            $rap->save();
        }

        return $retVal;
    }

    /**
     * Insere uma atividade realizada
     * @return boolean
     */
    private function insert()
    {
        $sql = 'INSERT INTO hur.realizedactivity
                            (realizedactivityid,
                             scheduledactivityid,
                             startdate,
                             enddate,
                             activitytypeid,
                             description,
                             isinternal,
                             location,
                             fileid,
                             canceldate)
                     VALUES (?,
                             ?,
                             TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                             TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'))';

        $sqlPK = "SELECT nextval('hur.realizedactivity_realizedactivityid_seq'::regclass)";

        $result = SDatabase::query($sqlPK);
        $realizedActivityId = $result[0][0];

        $params = array();
        $params[] = $realizedActivityId;
        $params[] = $this->scheduledActivityId;
        $params[] = $this->startDate;
        $params[] = $this->endDate;
        $params[] = $this->activityTypeId;
        $params[] = $this->description;
        $params[] = $this->isInternal;
        $params[] = $this->location;
        $params[] = $this->fileId;
        $params[] = $this->cancelDate;

        $result = SDatabase::execute($sql, $params);

        if ($result)
        {
            $this->realizedActivityId = $realizedActivityId;
        }

        return $result;
    }

    /**
     * Atualiza uma atividade realizada
     * @return boolean
     */
    private function update()
    {
        $sql = 'UPDATE hur.realizedactivity
                   SET scheduledactivityid = ?,
                       startdate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       enddate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       activitytypeid = ?,
                       description = ?,
                       isinternal = ?,
                       location = ?,
                       fileid = ?,
                       canceldate = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\')
                 WHERE realizedactivityid = ?';

        $params = array();
        $params[] = $this->scheduledActivityId;
        $params[] = $this->startDate;
        $params[] = $this->endDate;
        $params[] = $this->activityTypeId;
        $params[] = $this->description;
        $params[] = $this->isInternal;
        $params[] = $this->location;
        $params[] = $this->fileId;
        $params[] = $this->cancelDate;
        $params[] = $this->realizedActivityId;

        return SDatabase::execute($sql, $params);
    }

    /**
     * Exclui um registro
     * @return boolean
     */
    public function delete()
    {
        if ( strlen($this->realizedActivityId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM hur.realizedactivity WHERE realizedactivityid = ?';
        $params = array($this->realizedActivityId);
        $result = SDatabase::execute($sql, $params);

        if ($result)
        {
            $this->realizedActivityId = null;
        }

        return $result;
    }

    /**
     * Listagem para campo isInternal (se é interno ou externo)
     */
    public static function listInternalTypes()
    {
        return array(
            DB_TRUE => _M('Interno', $module),
            DB_FALSE => _M('Externo', $module)
        );
    }
}
?>