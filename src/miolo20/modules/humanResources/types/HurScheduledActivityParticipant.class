<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 16/06/2011
 */
class HurScheduledActivityParticipant extends SType
{
    /**
     * @AttributeType integer
     */
    protected $scheduledActivityId;
    /**
     * @AttributeType integer
     */
    protected $personId;
    /**
     * Atributo virtual, que obtem objeto da pessoa na BusPerson
     * @AttributeType string
     */
    protected $person;
    /**
     * Atributo virtual
     */
    protected $personName;

    public function __construct($scheduledActivityId = NULL, $personId = NULL)
    {
        if ( (strlen($scheduledActivityId) > 0 ) && (strlen($personId) > 0 ) )
        {
            $this->scheduledActivityId = $scheduledActivityId;
            $this->personId = $personId;
            $this->populate();
        }
    }

    public function __get($name)
    {
        if ( ($name == 'person' || $name == 'personName') )
        {
            if ( !$this->person )
            {
                $MIOLO = MIOLO::getInstance();
                $busPerson = new BusinessBasicBusPerson();
                $this->person = $busPerson->getPerson($this->personId);
            }

            $this->personName = $this->person->name;
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT scheduledactivityid,
                       personid
                  FROM hur.scheduledactivityparticipant';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            if ((is_scalar($value )) && (strlen($value ) > 0 ) )
            {
                $where .= " AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE '.substr($where, 5);
        }

        $sql .= ' ORDER BY scheduledactivityid, personid ';
        $result = SDatabase::query($sql);

        $retVal = array();
        for ($i = 0; $i < count($result); $i++)
        {
            $retVal[] = new HurScheduledActivityParticipant($result[$i][0], $result[$i][1]);
        }

        return $retVal;
    }

    public static function searchGrid($filters = null)
    {
        $sql = 'SELECT scheduledactivityid,
                       personid
                  FROM hur.scheduledactivityparticipant';

        $params = array();
        if ( strlen($filters->scheduledActivityId) > 0 )
        {
            $where .= ' AND scheduledactivityid = ?';
            $params[] = $filters->scheduledActivityId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND personid = ?';
            $params[] = $filters->personId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE '.substr($where, 4).'
                   ORDER BY scheduledactivityid, personid';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       scheduledactivityid,
                       personid
                  FROM hur.scheduledactivityparticipant
                 WHERE scheduledactivityid = ? AND personid = ?';

        $result = SDatabase::query($sql, array($this->scheduledActivityId, $this->personId));
        if ( !strlen($result[0][0]))
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->userName,
              $this->dateTime,
              $this->ipAddress,
              $this->scheduledActivityId,
              $this->personId ) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $retVal = $this->insert();

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO hur.scheduledactivityparticipant
                            (scheduledactivityid, personid)
                     VALUES (?, ?)';

        $params = array($this->scheduledActivityId, $this->personId);
        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    private function update()
    {
        //Not Implemented
    }

    public function delete()
    {
        if ( strlen($this->scheduledActivityId) == 0 || strlen($this->personId) == 0)
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM hur.scheduledactivityparticipant
                      WHERE scheduledactivityid = ? AND personid = ?';

        $params = array();
        $params[] = $this->scheduledActivityId;
        $params[] = $this->personId;

        $result = SDatabase::execute($sql, $params);
        if ($result)
        {
            $this->scheduledActivityId = null;
            $this->personId = null;
        }

        return $result;
    }
}
?>