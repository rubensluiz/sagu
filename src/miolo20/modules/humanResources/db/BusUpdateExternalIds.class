<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for siga database
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 27/03/2006
 *
 **/

/**
 * Class to manipulate the basEmployee table
 **/
class BusinessHumanResourcesBusUpdateExternalIds extends sBusiness
{
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getData($data)
    {
        $sql = 'SELECT RA_MAT,
                       RA_RG,
                       RA_CIC,
                       RA_NOME,
                       RA_TELEFON,
                       RA_EMAIL,
                       RA_CODFUNC,
                       RA_SINDICA,
                       RA_SITFOLH
                  FROM sra010';

        if ( strlen($data->professorId) > 0 ||  strlen($data->employeeId) > 0 || strlen($data->traineeId) > 0)
        {
            if ( strlen($data->professorId) > 0 )
            {
                $where1 .= '  or RA_SINDICA = \'02\' or RA_SINDICA = \'03\' ';
            }

            if ( strlen($data->employeeId) > 0 )
            {
                $where1 .= '  or RA_SINDICA = \'01\' ';
            }

            if ( strlen($data->traineeId) > 0 )
            {
                $where1 .= '  or RA_SINDICA = \'\' ';
            }
            
            $where .= ' ( ' . substr($where1, 4) . ' ) AND ';
        }
        
        if ( strlen($data->normalId) > 0 )
        {
            $where2 .= '  or RA_SITFOLH = \'\' ';
        }
        
        if ( strlen($data->vacationId) > 0 )
        {
            $where2 .= '  or RA_SITFOLH = \'F\' ';
        }

        if ( strlen($data->dismissedId) > 0 )
        {
            $where2 .= '  or RA_SITFOLH = \'D\' ';
        }
        
        if ( strlen($data->movedAwayId) > 0 )
        {
            $where2 .= '  or RA_SITFOLH = \'A\' ';
        }
    
        if ( strlen($data->contractId) > 0 )
        {
            $where2 .= '  and RA_VCTOEXP >= TO_DATE(\'' . $data->date . '\', \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') ';
        }
        
        if ( strlen($where2) > 0 )
        {
            $where .= ' ( ' . substr($where2, 5) . ' ) ';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE ' . $where . ' ORDER BY RA_NOME, RA_SINDICA, RA_SITFOLH desc';
            $db     = $this->getDbSiga();
            $result = $db->query($sql);
            //$db->close();
        }
        
        return $result;
    }
    
    
    /**
     * Compare the external id (siga) with sagu
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function compareByExternalId($externalId)
    {
        $sql = 'SELECT B.personId,
                       B.name,
                       B.cellphone,
                       B.email
                  FROM basEmployee A
                RIGHT JOIN ONLY basPhysicalPerson B
                    USING(personId)';
                  
        if ( strlen($externalId) > 0 )
        {
            $where .= '  A.externalId = ?';
            $args[] = $externalId;
        }
        
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE ' . $where;
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }
        
        return $result[0];
    }
    
    /**
     * Compare using RG
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function compareByRg($rg)
    {
        $sql = 'SELECT B.personId,
                       B.name,
                       B.cellphone,
                       B.email
                  FROM basEmployee A
                RIGHT JOIN ONLY basPhysicalPerson B
                    USING(personId)
                INNER JOIN basDocument C
                    USING(personId)';
                  
        if ( strlen($rg) > 0 )
        {
            $where .= '  AND C.content = ?';
            $args[] = $rg;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE C.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG')  . $where;
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result[0];
    }

    /**
     * Compare using CPF
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function compareByCpf($cpf)
    {
        $sql = 'SELECT B.personId,
                       B.name,
                       B.cellphone,
                       B.email
                  FROM basEmployee A
                RIGHT JOIN ONLY basPhysicalPerson B
                    USING(personId)
                INNER JOIN basDocument C
                    USING(personId)';
                  
        if ( strlen($cpf) > 0 )
        {
            $where .= '  AND C.content = ?';
            $args[] = $cpf;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE C.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF')  . $where;
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result[0];
    }


    /**
     * Compare using name
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function compareByName($name)
    {
        $sql = 'SELECT B.personId,
                       B.name,
                       B.cellphone,
                       B.email
                  FROM basEmployee A
                RIGHT JOIN ONLY basPhysicalPerson B
                    USING(personId)';
                  
        if ( strlen($name) > 0 )
        {
            $where .= '  UNACCENT(B.name) = ?';
            $args[] = $name;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE ' . $where;
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result[0];
    }

    /**
     * Compare using name
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getDataByCode($personId)
    {
        $sql = 'SELECT B.personId,
                       B.name,
                       B.cellphone,
                       B.email
                  FROM basEmployee A
                RIGHT JOIN ONLY basPhysicalPerson B
                    USING(personId)';
                  
        if ( strlen($personId) > 0 )
        {
            $where .= '  A.personId = ?';
            $args[] = $personId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE ' . $where;
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            //$db->close();
        }

        return $result[0];
    }

}

?>
