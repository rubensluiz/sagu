<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basEmployee table
 *
 * @author Eduardo Beal Miglioransa
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 04/01/2007
 *
 **/

/**
 * Class to manipulate the basEmployee table
 **/
class BusinessHumanResourcesBusSalaryReturn extends sBusiness
{
    /**
     * Get data about default company
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCompanyData()
    {
              $sql = 'SELECT B.cnpj,
                      B.name,
                      B.location,
                      B.number,
                      B.complement,
                      C.name,
                      B.zipcode,
                      C.stateId
                  FROM basCompanyConf A
                INNER JOIN ONLY basLegalPerson B
                      USING(personId)
                LEFT JOIN basCity C
                      USING(cityId)';

       $sql   .= ' WHERE  A.companyId = ?';

       $args[] = SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF');

       $db     = $this->getDatabase();
       $result = $db->query(SAGU::prepare($sql, $args));

       return $result[0];
    }

    /**
     * Do a search of employess
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getEmployeeSalay($personId)
    {

        $sql = 'SELECT A.personId,
                       B.name,
                       CASE A.valueHour
                            WHEN \''. DB_FALSE . '\' 
                            THEN sum(round(round(A.salary,2)*100,0)) 
                            ELSE round((round( sum ( A.salary * A.weeklyhours * 4 ) ::numeric , 2) * 100 ),0)
                       END as salary
                  FROM basEmployee A
        LEFT JOIN ONLY basPhysicalPersonEmployee B
                 USING (personid) 
                 WHERE A.isActiveAccount = TRUE ';

        if( strlen($personId) > 0 )
        {
            $sql   .= 'AND A.personId = ' . $personId
                     .' GROUP BY A.clearinghouse, A.bankId, A.branchNumber, A.branchNumberDigit, B.name,
                        A.personId, A.valueHour, A.salary, A.weeklyHours, A.accountNumber, A.accountNumberDigit
                        ORDER BY B.name ';
            $db     = $this->getDatabase();
            $result = $db->query($sql);

            $data->personId = $result[0][0];
            $data->name     = $result[0][1];
            $data->salary   = $result[0][2];

            return $data;
        }

        return false; 
    }

}

?>
