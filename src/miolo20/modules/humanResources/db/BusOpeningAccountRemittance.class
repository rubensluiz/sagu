<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 31/03/2006
 *
 **/


class BusinessHumanResourcesBusOpeningAccountRemittance extends sBusiness
{
    /**
     * Get data about bank account
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getBankData($bankAccountId)
    {
           $sql = 'SELECT A.accountnumber,
                          A.accountnumberdigit,
                          A.branchNumber,
                          A.branchNumberDigit
                  FROM finBankAccount A
                INNER JOIN finBank B
                  USING(bankId)
               WHERE A.bankaccountid = ?';

           $args[] = $bankAccountId;

       $db     = $this->getDatabase();
       $result = $db->query(SAGU::prepare($sql, $args));

       return $result[0];
    }
    /**
     * Search employee
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEmployee($employeeTypeId)
    {
        $sql = 'SELECT A.personId,
                       B.name,
                       C.description,
                       D.content,
                       E.content,
                       E.organ,
                       TO_CHAR(B.datebirth, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       F.name,
                       getPersonName(getMotherId(A.personId)) AS motherName,
                       getPersonName(getFatherId(A.personId)) AS fatherName,
                       B.location,
                       B.neighborhood,
                       B.zipCode,
                       B.cellPhone,
                       B.countryidbirth,
                       B.sex
                FROM basEmployee A
                INNER JOIN ONLY basPhysicalPersonEmployee B
                    USING(personId)
                LEFT JOIN basEmployeeType C
                    USING (employeeTypeId)
                LEFT JOIN basDocument D
                    USING (personId)
                LEFT JOIN basDocument E
                    USING (personId)
                LEFT JOIN basCity F
                    ON ( B.cityIdBirth = F.cityId )';


        if ( strlen($employeeTypeId) > 0 )
        {
            $where .= ' AND C.employeeTypeId IN (' . $employeeTypeId . ') ';
        }
        
        $where .= ' AND D.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
        $where .= ' AND E.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG');
        
        $sql .= ' WHERE A.isActiveAccount = false' . $where . ' ORDER BY B.name';
        $db     = $this->getDatabase();
        $result = $db->query($sql);

        return $result;
    }

    /**
     * Get data about default company
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCompanyData()
    {
       $sql = 'SELECT B.cnpj,
                      B.name,
                      B.location,
                      B.neighborhood,
                      B.zipcode,
                      B.phone
                  FROM basCompanyConf A
                INNER JOIN ONLY basLegalPerson B
                      USING(personId)';

       $sql   .= ' WHERE  A.companyId = ?';

       $args[] = SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF');

       $db     = $this->getDatabase();
       $result = $db->query(SAGU::prepare($sql, $args));

       return $result[0];
    }
}

?>
