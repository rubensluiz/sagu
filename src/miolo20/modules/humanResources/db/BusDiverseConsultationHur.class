<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 15/08/2006
 *
 **/

/**
 **/
class BusinessHumanResourcesBusDiverseConsultationHur extends sBusiness
{
    /**
     * Get the employee data
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getEmployeeData($filters)
    {
        $sql = 'SELECT A.employeeId,
                       (SELECT description FROM basEmployeeType WHERE employeeTypeId = A.employeeTypeId),
                       (SELECT description FROM ONLY basSector WHERE sectorId = A.sectorId),
                       TO_CHAR(A.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       (SELECT description FROM finBank WHERE bankId = A.bankId),
                       A.branchNumber || \'-\' || A.branchNumberDigit,
                       A.accountNumber || \'-\' || A.accountNumberDigit,
                       A.accountType,
                       A.weeklyHours,
                       A.valueHour,
                       A.salary
                FROM basEmployee A
                WHERE personId = ?' ;
                                 
        if ( strlen($filters->personId) > 0 )
        {
            $args[] = $filters->personId;
        }

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Get the incentive data
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getIncentiveData($filters)
    {
        $sql = 'SELECT B.contractId,
                       TO_CHAR(C.startdate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(C.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       C.value,
                       C.valueIsPercent,
                       C.agglutinate,
                       C.costCenterId,
                       (SELECT description FROM accCostCenter WHERE costCenterId = C.costCenterId),
                       (SELECT description FROM ONLY finIncentiveType WHERE incentiveTypeId = C.incentiveTypeId)
                FROM basEmployee A
                INNER JOIN acdContract B
                    USING(personId)
                INNER JOIN finIncentive C
                    USING(contractId)
                WHERE C.endDate > now()::date AND
                      personId = ?' ;
                                 
        if ( strlen($filters->personId) > 0 )
        {
            $args[] = $filters->personId;
        }

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }


}

?>
