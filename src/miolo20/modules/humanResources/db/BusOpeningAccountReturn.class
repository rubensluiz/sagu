<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 31/03/2006
 *
 **/


class BusinessHumanResourcesBusOpeningAccountReturn extends sBusiness
{
    /**
     * Process account return file
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function processAccountReturn($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $this->getDatabase()->execute('BEGIN TRANSACTION');
        
        foreach($data as $key => $line )
        {
            $business = new BusinessBasicBusEmployee();
            $dataPerson = $business->getEmployeeForPersonId($line->data->personId);

            if($dataPerson == false)
            {
                $msg  = _M('Erro: a pessoa não é funcionário! Verifique o código da pessoa : @1',$module, $line->data->personId);
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }

            $dataPerson->branchNumber       = $line->data->branch;
            $dataPerson->branchNumberDigit  = $line->data->branchDigit;
            $dataPerson->accountNumber      = $line->data->account;
            $dataPerson->accountNumberDigit = $line->data->accountDigit;
            $dataPerson->isActiveAccount    = DB_TRUE;

            $sql = 'UPDATE basEmployee
                    SET personId           = ?,
                        employeeTypeId     = ?,
                        bankId             = ?,
                        branchNumber       = ?,
                        branchNumberDigit  = ?,
                        accountNumber      = ?,
                        accountNumberDigit = ?,
                        isActiveAccount    = ?,
                        accountType        = ?,
                        clearingHouse      = ?
                    WHERE employeeId       = ? ';
    
            $args = array( $dataPerson->personId,
                           $dataPerson->employeeTypeId,
                           $dataPerson->bankId,
                           $dataPerson->branchNumber,
                           $dataPerson->branchNumberDigit,
                           $dataPerson->accountNumber,
                           $dataPerson->accountNumberDigit,
                           $dataPerson->isActiveAccount,
                           $dataPerson->accountType,
                           $dataPerson->clearingHouse,
                           $dataPerson->employeeId );
    
            $sqls = SAGU::prepare($sql, $args);

            for ( $i=0; $i<count($sqls); $i++ )
            {
                $result = $this->getDatabase()->execute($sqls[$i]);
            }
        }

        $this->closeTransaction($result);

        return $result;
    }


    /**
     * Function to close the transaction, depending the status make a commit or rollback
     *
     * @param $status (boolean): The status of "normally" keepGoing variable indicating to get a commit or rollback
     *
     */
    private function closeTransaction($status)
    {
        if ($status == true)
        {
            $this->getDatabase()->execute('COMMIT');
            return true;
        }
        else
        {
            $this->getDatabase()->execute('ROLLBACK');
            return false;
        }
    }
}

?>
