<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluушes Livres Ltda.
 *
 * Este arquivo ж parte do programa Sagu.
 *
 * O Sagu ж um software livre; vocЖ pode redistribuь-lo e/ou modificр-lo
 * dentro dos termos da Licenуa PЩblica Geral GNU como publicada pela Fundaусo
 * do Software Livre (FSF); na versсo 2 da Licenуa.
 *
 * Este programa ж distribuьdo na esperanуa que possa ser Щtil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implьcita de ADEQUAК├O a qualquer MERCADO
 * ou APLICAК├O EM PARTICULAR. Veja a Licenуa PЩblica Geral GNU/GPL em
 * portuguЖs para maiores detalhes.
 *
 * VocЖ deve ter recebido uma cзpia da Licenуa PЩblica Geral GNU, sob o tьtulo
 * "LICENCA.txt", junto com este programa, se nсo, acesse o Portal do Software
 * PЩblico Brasileiro no endereуo www.softwarepublico.gov.br ou escreva para a
 * Fundaусo do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 13/06/2011
 */
class GrdScheduledActivitySearch extends SGrid
{
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $columns = array();
        $columns[] = new MGridColumn(_M('Cзdigo', $module), 'right', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Data de inьcio', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Data de fim', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Cзdigo do tipo de atividade', $module), 'right', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('Tipo de atividade', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Descriусo', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('╔ Interno', $module), 'center', true, NULL, true, SAGU::listYesNo(0), true);
        $columns[] = new MGridColumn(_M('Local', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn('hasRealized', 'center', true, NULL, false, null, true);
        $columns[] = new MGridColumn('userName', 'center', true, NULL, false, null, true);

        $primaryKeys = array('scheduledActivityId'=>'%0%', );

        parent::__construct($filters, $columns, __CLASS__, $primaryKeys);

        $opts['scheduledActivityId'] = '%0%';
        $opts['function'] = 'insert';

        if ( SAGU::userIsFromServices() )
        {
            $action = 'main:realizedActivity';
        }
        else
        {
            $action = 'main:register:realizedActivity';
        }

        // Aусo Definir como realizada
        $opts['realized'] = DB_TRUE;
        $href = $MIOLO->getActionURL($module, $action, null, $opts);
        $this->addActionIcon(_M('Definir como realizada', $module), 'realized.png', $href);

        // Aусo Definir como realizada
        $opts['realized'] = DB_FALSE;
        $href = $MIOLO->getActionURL($module, $action, null, $opts);
        $this->addActionIcon(_M('Definir como cancelada', $module), 'canceled.png', $href);

        $this->setRowMethod($this, 'myRowMethod');
    }

    /**
     * Trata as aушes da Grid
     *
     * @param type $i
     * @param type $row
     * @param type $actions
     * @param type $columns
     */
    public function myRowMethod($i, $row, $actions, $columns)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Aушes
        list( $aEdit,
              $aDelete,
              $aRealized,
              $aCancel) = $actions;

        // Dados
        list( $null, // Cзdigo
              $null, // Data de inьcio
              $null, // Data de fim
              $null, // Cзdigo do tipo
              $null, // Tipo
              $null, // Descriусo
              $null, // Local
              $null, // ╔ Interno
              $hasRealized, // Se tem atividade realizada
              $userName ) = $this->data[$i];

        // Obtжm o usuрrio da pessoa logada para ver se ele ж
        // dono da atividade programada, e se nсo for desabilita o botсo deletar
        $loginUsername = $MIOLO->getLogin()->id;

        // Se jр possuir registro nas atividades realizadas, desabilita aушes
        if ( $hasRealized == DB_TRUE )
        {
            $aEdit->enabled = false;
            $aEdit->alt = _M('Esta atividade jр foi realizada', $module);

            $aDelete->enabled = false;
            $aDelete->alt = _M('Esta atividade jр foi realizada', $module);

            $aRealized->enabled = false;
            $aRealized->value = 'realized-disabled.png';
            $aRealized->alt = _M('Esta atividade jр foi realizada', $module);

            $aCancel->enabled = false;
            $aCancel->value = 'canceled-disabled.png';
            $aCancel->alt = _M('Esta atividade jр foi realizada', $module);
        }
        else
        {
            $aEdit->enabled = true;
            $aEdit->alt = _M('Editar', $module);

            $aDelete->enabled = true;
            $aDelete->alt = _M('Deletar', $module);

            $aRealized->enabled = true;
            $aRealized->value = 'realized.png';
            $aRealized->alt = _M('Definir como realizada', $module);

            $aCancel->enabled = true;
            $aCancel->value = 'canceled.png';
            $aCancel->alt = _M('Definir como cancelada', $module);
        }

        // Se for admin ou o dono pode editar
        if ( $loginUsername != $userName )
        {
            $isAdmin = (!$MIOLO->checkAccess('FrmScheduledActivity', A_ADMIN, false, true) &&
                        !$MIOLO->checkAccess('FrmRealizedActivity', A_ADMIN, false, true));

            $hasPermission = (!$MIOLO->checkAccess('FrmScheduledActivity', A_EXECUTE, false, true) &&
                          !$MIOLO->checkAccess('FrmRealizedActivity', A_EXECUTE, false, true));

            if ( $isAdmin || $hasPermission )
            {
                $aEdit->enabled = false;
                $aEdit->alt = _M('Somente o dono da atividade pode editр-la', $module);

                $aDelete->enabled = false;
                $aDelete->alt = _M('Somente o dono da atividade pode deletр-la', $module);

                $aRealized->enabled = false;
                $aRealized->value = 'realized-disabled.png';
                $aRealized->alt = _M('Somente o dono da atividade pode realizр-la', $module);

                $aCancel->enabled = false;
                $aCancel->value = 'canceled-disabled.png';
                $aCancel->alt = _M('Somente o dono da atividade pode cancelр-la', $module);
            }
        }
    }
}
?>