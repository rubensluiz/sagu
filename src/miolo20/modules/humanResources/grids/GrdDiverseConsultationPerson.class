<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * Human resources diverse consultation grid
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 15/08/2006
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdDiverseConsultationPerson extends SGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $home   = 'main:register:wageData';
        
        $columns = array( 
                          new MGridColumn( _M('Código do funcionário',    $module), 'right',  true,  null, true, null, true),
                          new MGridColumn( _M('Tipo de funcionário',  $module), 'center', true,  null, true, null, true),
                          new MGridColumn( _M('Setor',         $module), 'left',   false, null, true, null, true),
                          new MGridColumn( _M('Data inicial',     $module), 'center', true,  null, true, null, true),
                          new MGridColumn( _M('Data de cancelamento',       $module), 'center', true,  null, true, null, true),
                          new MGridColumn( _M('Banco',           $module), 'left',   false, null, true, null, true),
                          new MGridColumn( _M('Agência',         $module), 'center', true,  null, true, null, true),
                          new MGridColumn( _M('Número da conta', $module), 'center', true,  null, true, null, true),
                          new MGridColumn( _M('Tipo de conta',   $module), 'center', false, null, true, SAGU::listAccountTypes(), true),
                          new MGridColumn( _M('Horas semanais',   $module), 'center', true,  null, true, null, true),
                          new MGridColumn( _M('Valor hora',     $module), 'center', true,  null, true, array( DB_TRUE => _M('Sim',$module), DB_FALSE => _M('Não',$module) ), true),
                          new MGridColumn( _M('Salário',         $module), 'center', true,  null, true, null, true),
                         );

        $optsUp = array( 'function'   => 'update',
                         'location'   => 'diverseConsultation',
                         'employeeId' => '%0%' );
        
        $optsDel = array( 'function'   => 'delete',
                          'location'   => 'diverseConsultation',
                          'employeeId' => '%0%',
                          'event'=>'tbBtnDelete_click' );        
        
        parent::__construct( $filters, $columns, 'gridDiverseConsultationPerson' );        
        $this->clearActions();
        
        $this->setRowMethod('GrdDiverseConsultationPerson', 'myRowMethod');

        $this->displayActionUpdate($optsUp, $home);
        if ( SAGU::getParameter('BASIC', 'INCREASE_SECURITY_LEVEL') == 'NO' )
        {
            $this->displayActionDelete($optsDel, $home);
        }
    }
   
    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();
    }
}
?>
