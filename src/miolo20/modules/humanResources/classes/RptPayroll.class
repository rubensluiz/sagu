<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'HR001'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    /**
     * Defines the footer for this report
     */
    public function Footer()
    {
        $module = MIOLO::getCurrentModule();

    }

    /**
     * Defines the header for this report
     */
    public function Header()
    {
        $module = MIOLO::getCurrentModule();

    }
}


/**
 * PDF extension to generate report
 */
class RptPayroll
{
    /**
     * Method to generate the report
     */
    public function RptPayroll($data = null)
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();
        // verifica se $data tem algum valor
        if($data == NULL ) 
        {
            return false;
        }       
        $business = new BusinessHumanResourcesBusPayroll();
        
        // Generating PDF file
        $pdf = new PDF();
        $pdf->aliasNbPages();

        // First page
        $pdf->addPage('P', 'mm', 'A4');
        $pdf->ln();
        
        $pdf->line(0, 0, 190, 0);
        
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
        $pdf->setY(10);

        $companyName = $business->getDefaultCompanyName();
        $pdf->cell(190,10, $companyName, 0, 0, 'C');
        $pdf->ln();
        
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'U', 12);
        $pdf->cell(190,10, _M('Programa de integração de estagiários - PIE', $module), 0, 0, 'C');
        $pdf->ln();
        
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'U', 12);
        $pdf->cell(190,10, _M('Folha de pagamento de funcionário', $module) . ' - ' . date('m/Y'), 0, 0, 'C');
        $pdf->ln();
        $pdf->ln();       

        $cpfDescription = $business->getCpfDescription();
        
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
        $pdf->cell(15,7, _M('Número', $module), 1, 0, 'C');
        $pdf->cell(80,7, _M('Nome do funcionário', $module), 1, 0, 'L');
        $pdf->cell(25,7, $cpfDescription, 1, 0, 'C');
        $pdf->cell(25,7, _M('Conta', $module), 1, 0, 'C');
        $pdf->cell(18,7, _M('Agência', $module), 1, 0, 'C');
        $pdf->cell(22,7, _M('Salário', $module), 1, 0, 'C');
        $pdf->ln();
  
        foreach ( $data as $key => $value )
        {
            $total[] = $value[5];
            $pdf->cell(15,7, $key+1, 1, 0, 'C');
            $pdf->cell(80,7, $value[2], 1, 0, 'L');
            $pdf->cell(25,7, $value[6], 1, 0, 'C');
            $pdf->cell(25,7, $value[4], 1, 0, 'C');
            $pdf->cell(18,7, $value[3], 1, 0, 'C');
            $pdf->cell(22,7, $value[5], 1, 0, 'C');
            $pdf->ln();            
        }        

        $data2 = $business->getTotal($total);

        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
        $pdf->cell(15,7, '', 0, 0, 'C');
        $pdf->cell(148,7, _M('Total da bolsa de estágio', $module), 1, 0, 'L');
        $pdf->cell(22,7, $data2, 1, 0, 'C');
        $pdf->ln();
        $pdf->ln();

        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 11);
        $pdf->setX(20);               
        $pdf->cell(90,7, _M('Autorização', $module), 0, 0, 'L');
        $pdf->ln();
        
        $pdf->ln();
        $pdf->setX(20);
        $pdf->cell(70, 0, '', 1, 0, 'C'); 
        
        $pdf->close();
        $pdf->output();
    }
}

?>
