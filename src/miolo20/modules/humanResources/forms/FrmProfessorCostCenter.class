<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Professor cost center form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 04/04/2006
 *
 **/

/**
 * Form to professor cost center
 **/
class FrmProfessorCostCenter extends SForm
{
    private $home;
    private $fileContent;
    
    /**
     * Class constructor
     **/
    public function __construct($data)
    {

        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Centro de custo dos professores', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        if ( ! $this->page->isPostBack() )
        {
            $businessPeriod = new BusinessAcademicBusPeriod();
            $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', 'academic'), $businessPeriod->listPeriod() );
            $periodId->setJsHint(_M('Selecione um período', $module));
            $fields[] = $periodId;
            $validators[] = new MRequiredValidator('periodId');
     
            $btn1     = new MButton('btnNext', _M('Próximo', $module));
            $fields[] = $btn1;
        }
         
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }
    
    public function printTable($data, $total)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        foreach( $data as $value )
        {
               $division = $value[5]*$value[6]/$total;
               $output[] = array(
                              $value[0],
                              $value[1],
                              $value[2],
                              $value[3],
                              $value[4],
                              $value[5],
                              $value[6],
                              $division
                             );

               $this->fileContent[$value[0]][$value[4]] += $division;
        }

        $title = array(
                        _M('Cod. Siga', $module),
                        _M('Professor', $module),
                        _M('Disciplina', $module),
                        _M('Turma', $module),
                        _M('Centro de custo', $module),
                        _M('Alunos', $module),
                        _M('Créditos', $module),
                        _M('Horas', $module)
                       );

        $table = new MTableRaw(null, $output, $title);
        $table->SetAlternate(true);

        $tables[] = $table;
        $tables[] = new MSeparator(_M('Total de alunos', $module) . ': ' . $total);
        $tables[] = new MSeparator();
        $this->addField($tables);
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnNext_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = new BusinessHumanResourcesBusProfessorCostCenter();
        $data = $business->getCostCenters($this->getFormValue('periodId'));
        
        $btn1[]   = new MButton('btnGenerate', _M('Gerar um arquivo de texto', $module));
        $div1     = new MDiv('div1', $btn1, null, 'align=center');
        $div1->width='97%';
        $fields[] = $div1;
        
        $this->addField($fields);

        $professorId_           = $data[0][1];
        $curricularComponentId_ = $data[0][3];
        $lineData = array();

        foreach ( $data as $key => $value )
        {
              $professorId = $value[1];
              $curricularComponentId = $value[3];
              
              if ( !($professorId         == $professorId_           &&
                   $curricularComponentId == $curricularComponentId_ ))
              {
                    $this->printTable($lineData, $total);
                    unset($lineData);
                    unset($total);
                    
                    $professorId_           = $professorId;
                    $curricularComponentId_ = $curricularComponentId;
              }
              $lineData[] = $value;
              $total     += $value[5];

        }
        
        $hiddenData = new MHiddenField('hiddenData', urlencode(serialize($this->fileContent)));
        $fields[] = $hiddenData;
        
        $this->setShowPostButton(false);

        $this->addField($fields);
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $fileContent = unserialize(urldecode(stripslashes($this->getFormValue('hiddenData'))));

        foreach ( $fileContent as $key1 => $externalId )
        {
            foreach ( $externalId as $key2 => $costCenter )
            {
                $file[] = $key1 . ', ' .  $key2 . ', ' . $fileContent[$key1][$key2];
            }
        }

        $fileContent  = implode($file, chr(hexdec("\X0D\X0A")));
        $fileContent .= chr(hexdec("\X0D\X0A"));
        SAGU::returnAsFile('ccenter-' . date(dmY) . '.txt', $fileContent, 'text/txt-file');
    }


}

?>
