<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Salary remittance form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 21/03/2006
 *
 **/

/**
 * Form to employee list
 **/
class FrmSalaryRemittance extends SForm
{
    private $home;
    public $employeeTypes;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Remessa de salário', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $business = new BusinessBasicBusEmployeeType();

        $this->employeeTypes = $business->listEmployeeType();

        foreach ($this->employeeTypes as $key => $employee )
        {
            eval('$employeeType' . $key . '= new MCheckBox(\'employeeType' . $key . '\' , ' . $employee[0] . ', \'\', true, \''. $employee[1] . '\');'); 
            eval('$flds[] = $employeeType' . $key . ';');
        }

        $bsg1            = new BaseGroup('bsg1', _M('Tipo de funcionário', $module), $flds, 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '43%';
              
        $MIOLO->getClass('finance', 'RemittanceSalary');
        $rs = new RemittanceSalary();

        foreach ( $rs->returnBankInformation() as $key => $bank )
        {
            $filters->bankId .= $key . ',';
        }        
        $filters->bankId = substr($filters->bankId, 0, strlen($filters->bankId)-1);
        
        $business = new BusinessFinanceBusBankAccount();
        $banks = $business->listBankAccount($filters);
        
        if ( count($banks) > 0 )
        {
            $bankAccountId = new MSelection('bankAccountId', $this->getFormValue('bankAccountId',$data->bankAccountId), _M('Conta bancária',$module), $banks);
            $bankAccountId->setAutoSubmit(true);
            $flds2[] = $bankAccountId;
            $validators[] = new RequiredValidator('bankAccountId');
        }
        else
        {
            $flds2[] = new Separator(_M('Nenhuma conta bancária registrada para o banco @1. Por favor, registre uma conta bancária e retorne a este processo para continuar', $module, $filters->bankId));
        }
        
        $business = new BusinessHumanResourcesBusSalaryRemittance();
        $data     = $business->getBankData($this->getFormValue('bankAccountId'));
        
        list ( $bankId ) = $data;

        $fields[] = new MHiddenField('bankId', $bankId ? $bankId : $this->getFormValue('bankId', $data->bankId));

        $exists = $rs->remittanceExists($bankId);

        if ( $exists )
        {

            $expirationDateLabel = new MText('expirationDateLabel', _M('Data de vencimento', $module) . ':');
            $expirationDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $expirationDateLabel->setClass('m-caption m-caption-required');
            $expirationDate = new MCalendarField('expirationDate', $this->getFormValue('expirationDate',$data->expirationDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));

            $validators[] = new MDATEDMYValidator('expirationDate', _M('Data de vencimento', $module), 'required');

            $flds2[] = new MHContainer('hctExpirationDate', array($expirationDateLabel, $expirationDate));

            $accepted = SAGU::checkParameter( "BANK_REMITTANCE_SEQUENCE_SALARY_CNAB_" . $bankId);

            if($accepted)
            {
                eval(' $dataSequence = BANK_REMITTANCE_SEQUENCE_SALARY_CNAB_'. $bankId . '; ');
                if ($dataSequence > 0)
                {
                    $dataSequence++;
                }
                else
                {
                    $dataSequence = 1;
                }
            }

            // FIELD - Sequence File
            $sequenceFile = $dataSequence ? $dataSequence : $this->getFormValue('sequenceFile', $data->sequenceFile);
            $sequenceFileLabel = new MText('sequenceFileLabel', _M('Arquivo de seqüência', $module).':');
            $sequenceFileLabel->setClass('m-caption m-caption-required');
            $sequenceFileLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $sequenceFile      = new MTextField('sequenceFile', $sequenceFile, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validators[] = new MIntegerValidator('sequenceFile', _M('Arquivo de seqüência', $module), 'required');
            $flds2[] = new MHContainer('hctSequenceFile', array($sequenceFileLabel, $sequenceFile));

        }
        elseif ( $this->getFormValue('bankAccountId') )
        {
            $flds2[] = new MTextLabel('error', _M('Desculpe. A remessa não está implementada para o banco selecionado', $module), null, 'red');
        }

        $bsg2            = new BaseGroup('bsg2', _M('Informações bancárias', $module), $flds2, 'vertical');
        $bsg2->showLabel = true;
        $bsg2->width     = '54%';

        $hct1           = new MHContainer('hct1', array($bsg1, $bsg2));
        $hct1->setFormMode(MControl::FORM_MODE_SHOW_NBSP);
        $hct1->showLabel = true;
        $fields[] = $hct1;        

        if ( $exists )
        {
            $btn1     = new MButton('btnGenerate', _M('Gerar', $module));
            $fields[] = $btn1;
        }
        
        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $dataForm->sequenceFile = $this->getFormValue('sequenceFile');
        $dataForm->bankId       = $this->getFormValue('bankId');

        $data->sequenceFile = $dataForm->sequenceFile;

        foreach ( $this->employeeTypes as $key => $employee )
        {
            $value = $this->getFormValue('employeeType' . $key);
            if ( strlen($value) > 0 )
            {
                $employeeTypeId = $employeeTypeId . ',' . $value;
            }
        }

        if ( strlen($employeeTypeId) > 0 )
        {
            $MIOLO->getClass('finance', 'RemittanceCNAB001');
            $rs = new RemittanceCNAB001();

            //file header functions
            $business = new BusinessHumanResourcesBusSalaryRemittance();
            $data1 = $business->getCompanyData();

            list ( $headerRemittance->cnpj,
                   $headerRemittance->companyName ) = $data1;

            $data2 = $business->getBankData($this->getFormValue('bankAccountId'));

            list ( $headerRemittance->bankId,
                   $headerRemittance->accountNumber,
                   $headerRemittance->accountNumberDigit,
                   $headerRemittance->branchNumber,
                   $headerRemittance->branchNumberDigit,
                   $headerRemittance->transferorCode,
                   $headerRemittance->bankDescription ) = $data2;

            $headerRemittance->sequence = $dataForm->sequenceFile;

            $fileContent[] = $rs->fileHeader($headerRemittance);

            // lot header functions
            $lotControl = 0;
            foreach ( $business->getAccountTypes() as $accountType)
            {
                $lotControl++;

                list ( $lotHeaderRemittance->cnpj,
                       $lotHeaderRemittance->companyName,
                       $lotHeaderRemittance->location,
                       $lotHeaderRemittance->number,
                       $lotHeaderRemittance->complement,
                       $lotHeaderRemittance->cityName,
                       $lotHeaderRemittance->zipCode,
                       $lotHeaderRemittance->stateId ) = $data1;

                list ( $lotHeaderRemittance->bankId,
                       $lotHeaderRemittance->accountNumber,
                       $lotHeaderRemittance->accountNumberDigit,
                       $lotHeaderRemittance->branchNumber,
                       $lotHeaderRemittance->branchNumberDigit,
                       $lotHeaderRemittance->transferorCode,
                       $lotHeaderRemittance->bankDescription ) = $data2;

                $lotHeaderRemittance->lotControl = $lotControl;
                $lotHeaderRemittance->accountType = $accountType[0];

                $fileContent[] = $rs->lotHeader($lotHeaderRemittance);

                //detail functions            
                $business = new BusinessHumanResourcesBusSalaryRemittance();
                $data     = $business->searchEmployeeRemittance(substr($employeeTypeId,1), $accountType[0]);

                $detailControl = 0;
                $totalSalary   = 0;

                if ( ! empty($data) )
                {
                    $detailRemittanceError = false;

                    foreach ( $data as $value )
                    {
                        $detailControl++;

                        $detailRemittance = new hrsEmployee;
                        list ( $detailRemittance->clearingHouse,
                               $detailRemittance->bankId,
                               $detailRemittance->branchNumber,
                               $detailRemittance->branchNumberDigit,
                               $detailRemittance->accountNumber,
                               $detailRemittance->accountNumberDigit,
                               $detailRemittance->name,
                               $detailRemittance->personId,
                               $detailRemittance->salary ) = $value;

                        $detailRemittance->detailControl = $detailControl;
                        $detailRemittance->date          = $this->getFormValue('expirationDate');
                        $detailRemittance->bankId        = $lotHeaderRemittance->bankId;
                        $detailRemittance->lotControl    = $lotControl;

                        $fileContent[] = $rs->detail($detailRemittance);
                    }
                }
                else
                {
                    $detailRemittanceError = true;

                    $this->addError(_M('Estão faltando remessas para tipos de conta de empregados! Verifique se a conta está ativa.', $module));
                }

                //lot trailer functions
                $lotTrailerRemittance->bankId        = $lotHeaderRemittance->bankId;
                $lotTrailerRemittance->lotControl    = $lotControl;
                $lotTrailerRemittance->detailControl = $detailControl + 2;
                $totalRegisters += $detailControl + 2;
                $lotTrailerRemittance->totalSalary   = $business->getTotalSalary(substr($employeeTypeId,1), $accountType[0]);

                $fileContent[] = $rs->lotTrailer($lotTrailerRemittance);
            }

            if ( ! $detailRemittanceError )
            {
                $dataConfig->value        = $dataForm->sequenceFile;
                $dataConfig->moduleConfig = 'BASIC';
                $dataConfig->parameter    = 'BANK_REMITTANCE_SEQUENCE_SALARY_CNAB_'.$dataForm->bankId;
    
                $businessConfig = new BusinessBasicBusConfig();
                $businessConfig->updateConfigValue($dataConfig);
    
    
                $trailerRemittance->bankId         = $lotHeaderRemittance->bankId;
                $trailerRemittance->lotControl     = $lotControl;
                $trailerRemittance->totalRegisters = $totalRegisters + 2;
    
                $fileContent[] = $rs->fileTrailer($trailerRemittance);
                $fileContentC = implode($fileContent, chr(hexdec("\X0D\X0A")));
                $fileContentC.= chr(hexdec("\X0D\X0A"));        
    
                SAGU::returnAsFile('cnab-' . date(dmY) . '.txt', $fileContentC, 'text/cnab-rem-file');
    
                $this->addField($fields);
            }
        }
        else
        {
            $this->addError(_M('Tipo de vínculo não definido', $module));
        }
    }
}
?>