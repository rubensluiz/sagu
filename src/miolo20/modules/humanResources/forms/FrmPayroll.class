<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Payroll form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 16/03/2006
 *
 **/

/**
 * Form to employee list
 **/
class FrmPayroll extends MForm
{
    private $home;
    public $employeeTypes;
    /**
     * Class constructor
     **/
    public function __construct($data)
    {

        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct(_M('Folha de pagamento', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();


        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));

        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Payroll', $this->home, 'payroll-16x16.png', true);
        }
        //fim favoritos

        $fields[] = $toolBar;
        
        $business = new BusinessBasicBusEmployeeType();        

        $this->employeeTypes = $business->listEmployeeType();
        
        foreach ($this->employeeTypes as $key => $employee )
        {
            eval('$employeeType' . $key . '= new MCheckBox(\'employeeType' . $key . '\' , ' . $employee[0] . ', \'\', true, \'' . $employee[1] . '\');'); 
            eval('$flds[] = $employeeType' . $key . ';');
        }

        $bsg1            = new BaseGroup('bsg1', _M('Tipo de funcionário', $module), $flds, 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '50%';
        unset($flds);

        $hct1           = new MHContainer('hct1', array($bsg1));
        $hct1->setFormMode(MControl::FORM_MODE_SHOW_NBSP);
        $hct1->showLabel = true;
        $fields[] = $hct1;

        $fields[] = new MSeparator(' ');
        
        $btn1     = new MButton('btnGenerate', _M('Gerar', $module));
        $fields[] = $btn1;
        
        $fields[] = new MSeparator(' ');
        
        $this->setFields($fields);
//        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        
        $this->employeeTypeId = $this->employeeTypeId->value;

    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        foreach ($this->employeeTypes as $key => $employee )
        {
            $value = $this->getFormValue('employeeType' . $key);
            if ( strlen($value) > 0 )
            {
                $employeeTypeId = $employeeTypeId . ',' . $value;
            }
        }

        $business = new BusinessHumanResourcesBusEmployeeList();
        $data = $business->searchEmployee(substr($employeeTypeId,1));    

        // caso não tenha gerado documento por causa do $data ser nulo.    
        if($data == NULL)
        {
            $goto = strlen( $goto ) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module );
            $msg     = _M('Nenhum resultado encontrado, tente outra opção !', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
        else
        {        
            $MIOLO->getClass($module, 'RptPayroll'); //get the RptPayroll class

            $report = new RptPayroll($data); //instanciate the class
        }
  
        
    }

}

?>
