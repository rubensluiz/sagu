<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Human Resources Diverse Consultation form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 15/08/2006
 *
 **/

/**
 * Form to manipulate a diverse consultation
 **/
class FrmDiverseConsultation extends SForm
{
    private $home;
    public $showForm;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $this->showForm = true;
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Consultas diversas', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {

        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $personIdLabel = new MText('personIdLabel', _M('Código da pessoa (funcionário)', $module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $field1[]      = $personIdLabel;
        $personId      = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personName'), 'basic', 'PhysicalPersonEmployee', null, null, true);
        $personId->addAttribute('onkeyDown', 'if (event.keyCode == 13) { this.onExit(); }');
        $field1[]      = $personId; 
        
        $validators[] = new MIntegerValidator('personId');
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);

        // First group 
        $field1[]  = $personName;
        $field1[]  = new MSeparator('');
        $fields1[] = new MHContainer('container1', $field1);
        $fields[]  = new MBaseGroup('mbgFilterPerson', _M('Filtrar por uma pessoa', $module), $fields1);

        $fields[] = new MSeparator('');
        $fields[] = new MButton('btnSearch',_M('Localizar', $module));
        $fields[] = new MSeparator('');
        $this->setShowPostButton(false);

        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators, 'toolbar' => false ) );
    }

    /**
     * Event triggered when button search is clicked 
     */
     public function btnSearch_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $personId        = $this->getFormValue('personId');

        if (strlen($personId)>0)
        {
            $filled['personConsultation'] = $personId;
        }
        

        if (count($filled)>1)
        {
            $this->addError(_M('Mais de um campo de consulta foram preenchidos. Por favor preencha apenas um campo para fazer a consulta.', $module));
        }
        else
        {
            if ( is_array($filled) )
            {
                $fkeys = array_keys($filled);
                if ($fkeys[0] == 'personConsultation')
                {
                    eval('$this->'.$fkeys[0].'_click();');
                }
            }

        }
     }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function personConsultation_click($sender = null)
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();
        $filters = $this->getTypesData();
        
        $business = new BusinessHumanResourcesBusDiverseConsultationHur();
        
        $businessPerson   = new BusinessBasicBusPerson();
        $filters->personName = $businessPerson->getPersonName($filters->personId);
        
        $ffield1 = new MLink('lnkNewSearch', '', $MIOLO->getActionURL($module, $action), _M('Nova procura', $module));
        $fields[] = $ffield1;
        $field = new MDiv('divOptions', $fields, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);

        $ffield1 = new MText('titleData', '<b>' . _M('Dados para', $module) . ':</b> ' . $filters->personId . ' - ' . $filters->personName);
        $field = new MDiv('divDescData', $ffield1, null, 'align=center');
        $this->addField($field);
        $field = new Separator('<hr>');
        $this->addField($field);
        
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationPerson', $filters);
        $data = $business->getEmployeeData($filters);
        $grdResults->setTitle(_M('Dados salariais', $module));
        $grdResults->setData($data);
        $this->addField($grdResults);
        
        $field = new Separator('<hr>');
        $this->addField($field);
      
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationIncentive', $filters);
        $data = $business->getIncentiveData($filters);
        $grdResults->setTitle(_M('Incentivos', $module));
        $grdResults->setData($data);
        $this->addField($grdResults);
    }


    /**
     * Get the data from form and put on a object
     **/
    public function getTypesData($sender = null)
    {
        $data->personId                 = $this->getFormValue('personId');
        $data->personName               = $this->getFormValue('personName');
        return $data;
    }
}
?>
