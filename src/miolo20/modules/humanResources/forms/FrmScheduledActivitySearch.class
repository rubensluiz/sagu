<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 13/06/2011
 */
class FrmScheduledActivitySearch extends SSearchForm
{
    public function __construct($data)
    {
        parent::__construct(_M('Localizar, Cancelar, Editar e Confirmar Atividades', 'basic'), new HurScheduledActivity(), array( 'scheduledActivityId' ));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        
        //Habilita a toolbar para o portal
        if ( SAGU::userIsFromServices() )
        {
            //Desabilita botão fechar
            $this->toolbar->disableButton('tbBtnClose');
            $this->toolbar->hideButton('tbBtnClose');
            $this->disableCheckToolbar();
        }
        
        // Field código
        $scheduledActivity = new MTextField('scheduledActivityIdS', $this->materialIdS->value, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $scheduledActivity->setJsHint(_M('Informe o código da atividade programada', $module));
        $fields[] = $scheduledActivity;
        $validators[] = new MIntegerValidator('scheduledActivityIdS', _M('Código'), 'optional');

        // Campo data inicial
        $fields[] = new SBeginEndPeriod(array(
                    'required' => false,
                    'baseGroup' => false,
                    'type' => 'timestamp',
                    'begin' => array( 'enable' => false ),
                    'end' => array(
                        'dateId' => 'startDateS',
                        'timeId' => 'startTimeS',
                        'label' => _M('Data de início', $module),
                        'dateHint' => _M('Informe a data inicial', $module),
                        'timeHint' => _M('Informe a hora inicial. Formato: hh:mm', $module)
                        ) ));
        $validators[] = new MDATEDMYValidator('startDateS', _M('Data de início', $module), 'optional');
        $validators[] = new MTIMEValidator('startTimeS', _M('Hora de início', $module), 'optional');

        // Campo data final
        $fields[] = new SBeginEndPeriod(array(
                    'required' => false,
                    'baseGroup' => false,
                    'type' => 'timestamp',
                    'begin' => array( 'enable' => false ),
                    'end' => array(
                        'dateId' => 'endDateS',
                        'timeId' => 'endTimeS',
                        'label' => _M('Data final', $module),
                        'dateHint' => _M('Informe a data de fim', $module),
                        'timeHint' => _M('Informe a hora de fim. Formato: hh:mm', $module)
                        ) ));
        $validators[] = new MDATEDMYValidator('endDateS', _M('Data de fim', $module), 'optional');
        $validators[] = new MTIMEValidator('endTimeS', _M('Hora de fim', $module), 'optional');

        // Seleciona o tipo de atividade
        $activityType = new MSelection('activityTypeIdS', null, _M('Tipo'), HurActivityType::listActivityType());
        $fields[] = $activityType;

        // Descricao
        $fields[] = new MTextField('descriptionS', $this->getRequestValue('description'), _M('Informe o Curso e/ou Colegiado e/ou Título da Atividade e Pauta', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));// Descricao

        // Local
        $fields[] = new MTextField('locationS', $this->getRequestValue('location'), _M('Local', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));

        // Interno
        $isInternalLabelS = new MText('isInternalLabelS', _M('É interno', $module) . '?');
        $isInternalLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isInternalS = new MRadioButtonGroup('isInternalS', null, SAGU::listTrueFalseIndifferent(1), $data->isInternal, null, 'horizontal');
        $hctIsInternal = new MHContainer('hctIsInternalS', array( $isInternalLabelS, $isInternalS ));
        $hctIsInternal->setShowLabel(false);
        $fields[] = $hctIsInternal;
        
        parent::defineFields($fields, $module, 'GrdScheduledActivitySearch', $validators);
        
        if ( SAGU::userIsFromServices() )
        {
            $this->AddField(new MButton('tbBtnBack', '<< ' . _M('Voltar', $module), $MIOLO->getActionURL('services', 'main:professor', null, $opts)));            
        }
    }
}
?>