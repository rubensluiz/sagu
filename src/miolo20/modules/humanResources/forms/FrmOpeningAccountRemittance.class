<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Opening account remittance form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *         Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 31/03/2006
 *
 **/

/**
 * Form to employee list
 **/
class FrmOpeningAccountRemittance extends SForm
{
    private $home;
    public $employeeTypes;
    
    /**
     * Class constructor
     **/
    public function __construct($data)
    {

        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Remessa de abertura de contas', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;
        
        $business = new BusinessBasicBusEmployeeType();        

        $this->employeeTypes = $business->listEmployeeType();

        foreach ($this->employeeTypes as $key => $employee )
        {
            eval('$employeeType' . $key . '= new MCheckBox(\'employeeType' . $key . '\' , ' . $employee[0] . ', \'\', true, \''. $employee[1] . '\');'); 
            eval('$flds[] = $employeeType' . $key . ';');
        }

        $bsg1            = new BaseGroup('bsg1', _M('Tipo de funcionário', $module), $flds, 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '43%';
              
        $MIOLO->getClass('finance', 'RemittanceOpeningAccount');
        $roa = new RemittanceOpeningAccount();
        
        foreach ( $roa->returnBankInformation() as $key => $bank )
        {
            $filters->bankId .= $key . ',';
        }        
        $filters->bankId = substr($filters->bankId, 0, strlen($filters->bankId)-1);
        
        $business = new BusinessFinanceBusBankAccount();
        $banks = $business->listBankAccount($filters);
        
        if ( count($banks) > 0 )
        {
            $bankAccountId = new MSelection('bankAccountId',
                                    $this->getFormValue('bankAccountId',$data->bankAccountId),
                                    _M('Conta bancária',$module),
                                    $banks);
            $bankAccountId->setAutoSubmit(true);
            $flds2[] = $bankAccountId;
            $validators[] = new RequiredValidator('bankAccountId');
        }
        else
        {
            $flds2[] = new Separator(_M('Nenhuma conta bancária registrada para o banco @1. Por favor, registre uma conta bancária e retorne a este processo para continuar', $module, $filters->bankId));
        }
        
        $business = new BusinessHumanResourcesBusSalaryRemittance();
        $data = $business->getBankData($this->getFormValue('bankAccountId'));
        
        list (
                $bankId
             ) = $data;
        
        $fields[] = new MHiddenField('bankId', $bankId ? $bankId : $this->getFormValue('bankId', $data->bankId));
        $exists = $roa->remittanceExists($bankId);
       

        if ( $exists )
        {

            $accepted = SAGU::checkParameter( "BANK_REMITTANCE_SEQUENCE_MCIF_". $bankId);

            if($accepted)
            {
                eval ('$dataSequence = BANK_REMITTANCE_SEQUENCE_MCIF_'. $bankId. ';');

                if (  $dataSequence > 0 )
                {
                    $dataSequence++;
                }
                else
                {
                    $dataSequence = 1;
                }
            }

            // FIELD - Sequence File
            $sequenceFile = $dataSequence ? $dataSequence : $this->getFormValue('sequenceFile', $data->sequenceFile);
            $sequenceFileLabel = new MText('sequenceFileLabel', _M('Arquivo de seqüência', $module).':');
            $sequenceFileLabel->setClass('m-caption m-caption-required');
            $sequenceFileLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $sequenceFile      = new MTextField('sequenceFile', $sequenceFile, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validators[] = new MIntegerValidator('sequenceFile', _M('Arquivo de seqüência', $module), 'required');
            $flds2[] = new MHContainer('hctSequenceFile', array($sequenceFileLabel, $sequenceFile));



        }
        elseif ( $this->getFormValue('bankAccountId') )
        {
            $flds2[] = new MTextLabel('error', _M('Desculpe. A remessa não está implementada para o banco selecionado', $module), null, 'red');
        }
        
        $bsg2            = new BaseGroup('bsg2', _M('Informações bancárias', $module), $flds2, 'vertical');
        $bsg2->showLabel = true;
        $bsg2->width     = '54%';

        $hct1           = new MHContainer('hct1', array($bsg1, $bsg2));
        $hct1->setFormMode(MControl::FORM_MODE_SHOW_NBSP);
        $hct1->showLabel = true;
        $fields[] = $hct1;        

        if ( $exists )
        {
            $btn1     = new MButton('btnGenerate', _M('Gerar', $module));
            $fields[] = $btn1;
        }        
        
        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $dataForm->sequenceFile = $this->getFormValue('sequenceFile');
        $dataForm->bankId       = $this->getFormValue('bankId');

        $data->sequenceFile = $dataForm->sequenceFile;

        foreach ($this->employeeTypes as $key => $employee )
        {
            $value = $this->getFormValue('employeeType' . $key);
            if ( strlen($value) > 0 )
            {
                $employeeTypeId = $employeeTypeId . ',' . $value;
            }
        }
        if ( strlen($employeeTypeId) > 0 )
        {

            $MIOLO->getClass('finance', 'RemittanceMCIF001');
            $rs = new RemittanceMCIF001();

            //file header functions
            $business = new BusinessHumanResourcesBusOpeningAccountRemittance();
                 
            $data2 = $business->getBankData($this->getFormValue('bankAccountId'));
            
            list (
                    $headerRemittance->accountNumber,
                    $headerRemittance->accountNumberDigit,
                    $headerRemittance->branchNumber,
                    $headerRemittance->branchNumberDigit
                  ) = $data2;
                 
           // $headerRemittance->sequence = $business->updateSequence();
            $headerRemittance->sequence = $dataForm->sequenceFile;

            $lotControl = 1;

            $fileContent[] = $rs->fileHeader($headerRemittance);

            // detail functions
            $data1 = $business->searchEmployee(substr($employeeTypeId,1));
            $data2 = $business->getCompanyData();
            
            $clientControl = 0;
            if ( count($data1) > 0 )
            {
                foreach ( $data1 as $value )
                {
                    $clientControl++;
                    
                    list (
                            $employeeData->personId,
                            $employeeData->name,
                            $employeeData->employeeType,
                            $employeeData->cpf,
                            $employeeData->rg,
                            $employeeData->rgOrgan,
                            $employeeData->dateBirth,
                            $employeeData->city,
                            $employeeData->motherName,
                            $employeeData->fatherName,
                            $employeeData->location,
                            $employeeData->neighborhood,
                            $employeeData->zipCode,
                            $employeeData->phone,
                            $employeeData->country,
                            $employeeData->sex
                         ) = $value;
                        
                        //adaptação necessário para padrão MCIF
                        if  ( $employeeData->country == 0 || $employeeData->country == 10 )
                        {
                            $employeeData->country = 1;
                        }
                        else
                        {
                            $employeeData->country = 3;
                        }
                        
                        $employeeData->branchNumber      = $headerRemittance->branchNumber;
                        $employeeData->branchNumberDigit = $headerRemittance->branchNumberDigit;
                        $employeeData->sequence    = $clientControl;
                        $employeeData->bankId      = $dataForm->bankId;

                        $lotControl++;
                        $fileContent[]             = $rs->detail01($employeeData);
                        $lotControl++;
                        $fileContent[]             = $rs->detail02($employeeData);
                        $lotControl++;
                        $fileContent[]             = $rs->detail03($employeeData);
                        
                        list (
                                $employeeData->cnpj,
                                $employeeData->companyName,
                                $employeeData->companyLocation,
                                $employeeData->companyNeighborhood,
                                $employeeData->companyZipcode,
                                $employeeData->companyPhone
                             ) = $data2;
                             
                        $lotControl++;
                        $fileContent[]             = $rs->detail05($employeeData);
                        $lotControl++;
                        $fileContent[]             = $rs->detail06($employeeData);
                        $lotControl++;
                        $fileContent[]             = $rs->detail07($employeeData);
                        
                        $fields[] = new MTextLabel($employeeData->personId, $clientControl . ' - ' . $employeeData->personId . ' - ' . $employeeData->name . ' - OK');
                        $fields[] = new MSeparator();
                }
            }
            else
            {
            }
            
            
            $dataConfig->value        = $dataForm->sequenceFile;
            $dataConfig->moduleConfig = 'BASIC';
            $dataConfig->parameter    = 'BANK_REMITTANCE_SEQUENCE_MCIF_'.$dataForm->bankId;
        
            $businessConfig = new BusinessBasicBusConfig();
            $businessConfig->updateConfigValue($dataConfig);

            //trailer functions
            $lotControl++;
            $trailerControl->clients = $clientControl;
            $trailerControl->lines   = $lotControl;

            $fileContent[]             = $rs->fileTrailer($trailerControl);
            
            $fileContentC = implode($fileContent, chr(hexdec("\X0D\X0A")));
            $fileContentC.= chr(hexdec("\X0D\X0A"));        

            $this->addField($fields);
            SAGU::returnAsFile('mcif-' . date(dmY) . '.txt', $fileContentC, 'text/bb-rem-file');
        }
        else
        {
            $lblMsg1        = new MText('lblMsg1', _M('Tipo de vínculo não definido', $module));
            $lblMsg1->color = 'red';
            $sep1           = new Separator('');
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1,$sep1));
            $this->divError->addControl($cntErrors);
        }

    }

}

?>
