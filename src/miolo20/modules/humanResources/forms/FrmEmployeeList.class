<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Employee list form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 15/03/2006
 *
 **/

/**
 * Form to employee list
 **/
class FrmEmployeeList extends SForm
{
    private $home;    
    public $employeeTypes;
    /**
     * Class constructor
     **/
    public function __construct($data)
    {

        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Lista de funcionários', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $business = new BusinessBasicBusEmployeeType();

        $this->employeeTypes = $business->listEmployeeType();
        
        foreach ($this->employeeTypes as $key => $employee )
        {
            eval('$employeeType' . $key . '= new MCheckBox(\'employeeType' . $key . '\' , ' . $employee[0] . ', \'\', false, \'' . $employee[1] . '\');'); 
            eval('$flds[] = $employeeType' . $key . ';');
        }
    
        $bsg1            = new BaseGroup('bsg1', _M('Tipo de funcionário', $module), $flds, 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width     = '50%';
        unset($flds);

        $hct1           = new MHContainer('hct1', array($bsg1));
        $hct1->setFormMode(MControl::FORM_MODE_SHOW_NBSP);
        $hct1->showLabel = true;
        $fields[] = $hct1;
    
        $btn1     = new MButton('btnFilter', _M('Filtrar', $module));
        $fields[] = $btn1;
        
        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnFilter_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $fields[] = new MSeparator('<hr>');
        $this->addFields($fields);
        unset($fields);

        foreach ($this->employeeTypes as $key => $employee )
        {
            $value = $this->getFormValue('employeeType' . $key);
            if ( strlen($value) > 0 )
            {
                $employeeTypeId = $employeeTypeId . ',' . $value;
            }
        }

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdEmployeeList');
        $business = new BusinessHumanResourcesBusEmployeeList();
        $data = $business->searchEmployee(substr($employeeTypeId,1));
        $grdResults->setData($data);
        $this->addField($grdResults);
        
        $summary = new MText('summary', _M('Contas desta remessa', $module) . ': ' . count($grdResults->data));
        $this->addField($summary);

        $fields[] = new Separator('');
        
        $this->addField($fields);
    }

}

?>
