<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Update external ids form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 27/03/2006
 *
 **/

/**
 * Form to employee list
 **/
class FrmUpdateExternalIds extends SForm
{
    private $home;
    
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Atualizar códigos do siga', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;
        
        $data = $this->getTypesData();
        
        if ( (! $this->page->isPostBack()) ||
             (strlen($data->professorId) == 0 &&
             strlen($data->employeeId) == 0 &&
             strlen($data->traineeId) == 0)
           )
        {
            $professor = new MCheckBox('professor', 'P', '', true, _M('Professor', $module));
            $flds[]    = $professor;
            
            $employee  = new MCheckBox('employee',  'E', '', true, _M('Funcionário', $module));
            $flds[]    = $employee;

            $trainee   = new MCheckBox('trainee',   'T', '', true, _M('Estagiário', $module));
            $flds[]    = $trainee;
            
            $bsg1            = new BaseGroup('bsg1', _M('Tipo de vínculo', $module), $flds, 'vertical');
            $bsg1->showLabel = true;
            $bsg1->width     = '49%';
            unset($flds);
            
            $normal    = new MCheckBox('normal',     'N', '', true,  _M('Normal', $module));
            $flds[]    = $normal;
            
            $vacation  = new MCheckBox('vacation',   'V', '', true,  _M('Férias', $module));
            $flds[]    = $vacation;

            $dismissed = new MCheckBox('dismissed',  'D', '', false, _M('Demitido', $module));
            $flds[]    = $dismissed;
            
            $movedAway = new MCheckBox('movedAway',  'M', '', false, _M('Afastado', $module));
            $flds[]    = $movedAway;
            
            $contract  = new MCheckBox('contract',   'C', '', false, _M('Com contratos maiores que', $module));
            $flds2[]   = $contract;
            
            $date      = new MCalendarField('date', $this->getFormValue('date',date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'))), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $flds2[]   = $date;

            $hctDate   = new MHContainer('hctDate', $flds2);
            $hctDate->showLabel = true;
            $flds[] = $hctDate;        
            
            $bsg2            = new BaseGroup('bsg2', _M('Quanto à situação', $module), $flds, 'vertical');
            $bsg2->showLabel = true;
            $bsg2->width     = '48%';
            unset($flds);

            $hct1           = new MHContainer('hct1', array($bsg1, $bsg2));
            $hct1->setFormMode(MControl::FORM_MODE_SHOW_NBSP);
            $hct1->showLabel = true;
            $fields[] = $hct1;
            
            $fields[] = new MSeparator('');
          
            $btn1[]   = new MButton('btnNext', _M('Próximo', $module));
            $div1     = new MDiv('div1', $btn1, null, 'align=center');
            $fields[] = $div1;

            $business = new BusinessHumanResourcesBusUpdateExternalIds();
        }
        
        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Event triggered when user chooses Next from the toolbar
     **/
    public function btnNext_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();

        if ( $this->checkValidators($data) )
        {
            $business = new BusinessHumanResourcesBusUpdateExternalIds();
            $data1    = $business->getData($data);
            
            $grdWithoutLinkData = array();
            $grdWithLinkData    = array();

            foreach ( $data1 as $value )
            {
                $value[0] = trim($value[0]);
                
                $compareByExternalId = $business->compareByExternalId($value[0]);

                if ( $compareByExternalId )
                {
                    $grdWithLinkData[] = $compareByExternalId;
                    list ($id, $name) = $compareByExternalId;
                }
                else
                {
                    $value[1] = trim($value[1]);
        
                    $compareByRg = $business->compareByRg($value[1]);
                    
                    if ( $compareByRg )
                    {
                        $grdWithLinkData[] = $compareByRg;
                        list ($id, $name) = $compareByRg;
                    }
                    else
                    {
                        $value[2] = trim($value[2]);
                        
                        $compareByCpf = $business->compareByCpf($value[2]);
                        
                        if ( $compareByCpf )
                        {
                            $grdWithLinkData[] = $compareByCpf;
                            list ($id, $name) = $compareByCpf;
                        }
                        else
                        {
                            $value[3] = trim($value[3]);
                            
                            $compareByName = $business->compareByName($value[3]);
                            
                            if ( $compareByName )
                            {
                                $grdWithLinkData[] = $compareByName;
                                list ($id, $name) = $compareByName;
                            }
                            
                            else
                            {
                                $grdWithoutLinkData[] = array($value[0], $value[3], $value[4], $value[5]);
                            }

                        }

                    }
                }
                if ( isset($id) && isset($name) )
                {
                    $update[] = 'update pessoas set cod_externo = \'' . $value[0] . '\' where id = \'' . $id . '\';';
                }
                unset($id, $name);
           }

            $hiddenData = new MHiddenField('hiddenData', urlencode(serialize($update)));
            $fields[] = $hiddenData;        

            $btn1[]   = new MButton('btnGenerate', _M('Gerar', $module) . ' update.sql');
            $div1     = new MDiv('div1', $btn1, null, 'align=center');
            $div1->width='97%';
            $fields[] = $div1;
            $this->addField($fields);

            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdUpdateExternalIdWithoutLink');
            $grdResults->setData($grdWithoutLinkData);
            $this->addField($grdResults);
            
            $this->addField( new MSeparator('<hr>') );
            
            $grdResults = $MIOLO->getUI()->getGrid($module,'GrdUpdateExternalIdWithLink');
            $grdResults->setData($grdWithLinkData);
            $this->addField($grdResults);
        }
    }

    /**
     * Event triggered when user chooses Next from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $fileContent = implode(unserialize(urldecode(stripslashes($this->getFormValue('hiddenData')))), chr(hexdec("\X0D\X0A")));
        $fileContent.= chr(hexdec("\X0D\X0A"));        
        
        SAGU::returnAsFile('update-' . date(dmY) . '.sql', $fileContent, 'text/sql-file');

    }

    /**
     * Event triggered when user click save or next button
     **/
    public function checkValidators($data)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');


        if ( strlen($data->professorId) == 0 &&
             strlen($data->employeeId) == 0 &&
             strlen($data->traineeId) == 0
           )
        {
            $lblMsg1        = new MText('lblMsg1', _M('Tipo de vínculo não definido', $module));
            $lblMsg1->color = 'red';
            $sep1           = new Separator('');
            $cntErrors      = new MVContainer('cntErrors', array($lblMsg1,$sep1));
            $this->divError->addControl($cntErrors);
            return false;
        }
        return true;
    }
    
    public function getTypesData()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data->professorId = $this->getFormValue('professor');
        $data->employeeId  = $this->getFormValue('employee');
        $data->traineeId   = $this->getFormValue('trainee');
        $data->normalId    = $this->getFormValue('normal');
        $data->vacationId  = $this->getFormValue('vacation');
        $data->dismissedId = $this->getFormValue('dismissed');
        $data->movedAwayId = $this->getFormValue('movedAway');
        $data->contractId  = $this->getFormValue('contract');
        $data->date        = $this->getFormValue('date');
        
        return $data;
    }


}

?>
