<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basEmployee table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 14/03/2006
 *
 **/

/**
 * Form to search the basEthnic Origin table
 */
class FrmWageData extends SManagementForm
{
    private $location;
    /**
     * Class constructor
     */
    public function __construct()
    {    
        $module = MIOLO::getCurrentModule();
        
        parent::__construct( new hrsEmployee(), array('employeeId', 'personId'), 'BusWageData' );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( strlen(MIOLO::_request('location')) > 0 )
        {
            $this->location = MIOLO::_request('location');
        }
        
        $location_ = new MHiddenField('location_', $this->getFormValue('location_', $this->location));
        $fields[] = $location_;

        if ( in_array($function, array('update', 'delete')) )
        {
            $employeeId = MIOLO::_request('employeeId');

            $fields[]  = new MTextLabel('employeeId', $employeeId, _M('Código do funcionário',$module));
            $fields[]  = new MHiddenField('employeeId', $this->getFormValue('employeeId', $employeeId));

            $business = $this->busObject;
            $data     = $business->getWageData($employeeId);
        }
        
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personLabel->setClass('m-caption m-caption-required');
        $flds[] = $personLabel;

        $personId = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), _M('Pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'personName', 'basic', 'PhysicalPersonEmployee', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa',$module));
        $validators[] = new MIntegerValidator('personId', '', 'required');
        $flds[]         = $personId;

        $personName = new MTextField('personName', $this->getFormValue('personName',$data->personName), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $flds[]         = $personName;

        $hctPerson = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);
        
        $clearingHouse   = new MTextField('clearingHouse', $this->getFormValue('clearingHouse', $data->clearingHouse), _M('Câmara de compensação',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $fields[]       = $clearingHouse;

        $bankLabel = new MText('bankLabel', _M('Banco', $module) . ':');
        $bankLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $bankLabel;
                
        $bankId     = new MLookupTextField('bankId', $this->getFormValue('bankId', $data->bankId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'bankDescription', 'finance', 'Bank', null, null, true);
        $bankId->setJsHint(_M('Informe o código do banco',$module));
        $validators[] = new MRangeValidator('bankId', _M('Código do banco', $module), '001', '999', 'i', 'optional');
        $flds[]     = $bankId;
        
        $bankDescription = new MTextField('bankDescription', $this->getFormValue('bankDescription',$data->bankDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $bankDescription->setReadOnly(true);
        $flds[]         = $bankDescription;

        $hctBank = new MHContainer('hctBank', $flds);
        $hctBank->setShowLabel(false);
        $fields[]  = $hctBank;
        unset($flds);
        
        $branchNumberLabel = new MText('branchNumberLabel', _M('Agência', $module) . ':');
        $branchNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $branchNumberLabel;
        
        $branchNumber = new MTextField('branchNumber', $this->getFormValue('branchNumber',$data->branchNumber), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MRangeValidator('branchNumber', _M('Número da agência', $module), '1', '9999', 'i', 'optional');
        $flds[]  = $branchNumber;
        
        $branchNumberDigitLabel = new MText('branchNumberDigitLabel', ' - ');
        $flds[] = $branchNumberDigitLabel;
        
        $branchNumberDigit = new MTextField('branchNumberDigit', $this->getFormValue('branchNumberDigit',$data->branchNumberDigit), '', 1);
        $validators[] = new MRangeValidator('branchNumberDigit', _M('Número da agência', $module), '0', '99', 'i', 'optional');
        $flds[]  = $branchNumberDigit;
        
        $hctBranch = new MHContainer('hctBranch', $flds);
        $fields[]  = $hctBranch;
        unset($flds);
        
        $accountLabel = new MText('accountLabel', _M('Conta', $module) . ':');
        $accountLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $accountLabel;
        
        $accountNumber = new MTextField('accountNumber', $this->getFormValue('accountNumber',$data->accountNumber), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MRangeValidator('accountNumber', _M('Número da conta', $module), '1', '9999999999999', 'i', 'optional');
        $flds[]  = $accountNumber;
        
        $accountDigitLabel = new MText('accountDigitLabel', ' - ');
        $flds[] = $accountDigitLabel;
        
        $accountNumberDigit = new MTextField('accountNumberDigit', $this->getFormValue('accountNumberDigit',$data->accountNumberDigit), '', 1);
        $validators[] = new MRangeValidator('accountNumberDigit', _M('Número da conta', $module), 0, 'zz', 's', 'optional');
        $flds[]  = $accountNumberDigit;
        
        $hctAccount = new MHContainer('hctAccount', $flds);
        $fields[]  = $hctAccount;
        unset($flds);

        $accountType =  new MSelection('accountType', $this->getFormValue('accountType', $data->accountType), _M('Tipo de conta',$module), SAGU::listAccountTypes());
        $fields[]       = $accountType;
        
        $salary   = new MTextField('salary', $this->getFormValue('salary', $data->salary), _M('Salário',$module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
        $validators[] =   new MFloatValidator('salary', '', SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'));
        $fields[]       = $salary;
        
        if ( $function == 'insert' )
        {
            $data->beginDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
        }

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate',$data->beginDate), _M('Data inicial',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fields[]       = $beginDate;
        
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate',$data->endDate), _M('Data de cancelamento',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fields[]       = $endDate;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Última modificação',$module));

        }

        $fields[] = new MSeparator(' ');
        
        parent::defineFields( $fields, $validators, $data );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        if ( $function == 'insert' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        }
        elseif ( $function == 'delete' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        $business = $this->busObject;

        if ( $function == 'update' )
        {
            $ok  = $business->updateWageData($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
        }
        else
        {
            $ok  = $business->insertWageData($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
        }

        if ( $ok )
        {
            $opts = array('employeeIdS'=>$data->employeeId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);


            if ( $this->getFormValue('location_') == 'employeeList' )
            {
                $goto = $MIOLO->getActionURL( $module, 'main:report:employeeList', null, array('event'=>'btnFilter_click'));
            }             

            if ( $this->getFormValue('location_') == 'diverseConsultation' )
            {
                $goto = $MIOLO->getActionURL( $module, 'main', null, null);
            }             


            if ( $function == 'update' )
            {
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg  = _M('Erro executanto a operação requisitada',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new hrsEmployee();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        return $data;
    }
}
?>
