<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * Grid do formulário de classificação manual
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 11/03/2011
 *
 **/
class GrdManualClassification extends Mgrid
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = SAGU::getFileModule(__FILE__);

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        //Columns
        $cols[] = new MGridColumn(_M('Código da inscrição', $module), 'left', true, null, true);
        $cols[] = new MGridColumn(_M('Código da pessoa', $module), 'left', true, null, true);
        $cols[] = new MGridColumn(_M('Nome da pessoa', $module), 'left', true, null, true);
        $cols[] = new MGridColumn(_M('Estado da inscrição na etapa', $module), 'left', true, null, true);
        $cols[] = new MGridColumn(_M('Total de pontos', $module), 'left', true, null, false);
        $cols[] = new MGridColumn(_M('Posição', $module), 'left', true, null, true);

        parent::__construct( null, $cols, $url, SAGU::getParameter('BASIC', 'LISTING_NREGS'), 0, 'GrdManualClassification', true,true,true );

        $this->setLinkType('hyperlink');
        $this->setDefaultGridActions($primaryKey);
        $this->setIsScrollable();
        $this->eventHandler();
    }

    /*
     * Paginação cabeçalho
     */
    public function generateNavigationHeader()
    {
        if ( ! $this->pn )
        {
            return null;
        }

        $links = $this->getPageLinks();

        foreach ( $links as $link )
        {
            $link->float = 'left';
        }

        $d['pages'] = new MDiv('', $links);
        $d['pages']->addStyle('float', 'left');
        $array[0] = $this->getPageFirst();
        $array[1] = $this->getPagePrev();
        $array[2] = $this->pn->getPageRange();
        $array[3] = $this->getPageNext();
        $array[4] = $this->getPageLast();

        if ( $this->showExportAsCSV )
        {
            $MIOLO = MIOLO::getInstance();
            $url = "{$this->pn->action}&gridName=". urlencode($this->name);
            $img = $MIOLO->getUI()->getImage(NULL, 'csv.png');

            $export = new MLinkButton('exportGridAsCSV', _M('Exportar'), $url);
            $export->generateLink();
            $export = new MImageLink('exportGridAsCSV', _M('Exportar'), $export->href, $img);
            $d['export'] = new MDiv('exportButtonDiv', array($export), 'm-grid-export-div');
        }

        $d['nav'] = new MDiv('', $array);
        $d['nav']->addStyle('float', 'right');

        $d = new MDiv('', $d, 'm-grid-navigation');

        return $d;
    }

    /*
     * Paginação rodapé
     */
    public function generateNavigationFooter()
    {
        if ( ! $this->pn )
        {
            return null;
        }

        $links = $this->getPageLinks();

        foreach ($links as $link)
        {
            $link->float = 'left';
        }

        $d1 = new MDiv('', $links);
        $d1->addStyle('float', 'left');
        $array[0] = $this->getPageFirst();
        $array[1] = $this->getPagePrev();
        $array[2] = $this->pn->getPageRange();
        $array[3] = $this->getPageNext();
        $array[4] = $this->getPageLast();

        $d2 = new MDiv('', $array);
        $d2->addStyle('float', 'right');

        $d = new MDiv('', array($d1, $d2), 'm-grid-navigation');

        return $d;
    }

    /*
     * Link das páginas
     */
    public function GetPageLinks($showPage = true, $limit = 10)
    {
        $pageCount = $this->pn->GetPageCount();
        $pageNumber = $this->pn->GetPageNumber();
        $pageLinks = array();

        $p = 0;

        if (!$this->pn->GetRowCount())
        {
            $pageLinks[$p] = new MLabel('&nbsp;&nbsp;&nbsp;');
            $pageLinks[$p++]->SetClass('m-pagenavigator-text');
        }
        else
        {
            if ($showPage)
            {
                $pageLinks[$p] = new MText('', '&nbsp;' . _M('Página') . ':&nbsp;');
                $pageLinks[$p++]->SetClass('m-pagenavigator-text');
            }

            if ($pageNumber <= $limit)
            {
                $o = 1;
            }
            else
            {
                $o = ((int)(($pageNumber - 1) / $limit)) * $limit;
                $pageLinks[$p] = new ImageLink('', '...', SForm::getAjaxAction('generateGridManualClassification', 'divGridManualClassification', false, array('pageNext'=>$o++)));
                $pageLinks[$p++]->SetClass('m-pagenavigator-link');
            }

            for ($i = 0; ($i < $limit) && ($o <= $pageCount); $i++, $o++)
            {
                $pg = $o;
                if ($o != $pageNumber)
                {
                    $pageLinks[$p] = new ImageLink('', $pg, SForm::getAjaxAction('generateGridManualClassification', 'divGridManualClassification', false, array('pageNext'=>$o)));
                    $pageLinks[$p]->SetClass('m-pagenavigator-link');
                    $pageLinks[$p++]->SetAttribute('onMouseOver', "top.status='" . _M('Página') . " $pg'");
                }
                else
                {
                    $pageLinks[$p] = new ImageLink('pagenavigator', "$pg", SForm::getAjaxAction('generateGridManualClassification', 'divGridManualClassification', false, array('pageNext'=>$o)));
                    $pageLinks[$p++]->SetClass('m-pagenavigator-selected');
                }
            }

            if ($o < $pageCount)
            {
                $pageLinks[$p++] = new Label('');
                $pageLinks[$p] = new ImageLink('', "...", SForm::getAjaxAction('generateGridManualClassification', 'divGridManualClassification', false, array('pageNext'=>$o)));
                $pageLinks[$p++]->SetClass('m-pagenavigator-link');
            }
        }

        return $pageLinks;
    }

    /*
     * Obtem link primeira página
     */
    public function getPageFirst()
    {
        $pageNumber = $this->pn->GetPageNumber();
        $attrs = array('border' => '0');
        $btn_first0 = new ImageForm('_gnFirst', 'Primeira', "/images/but_pg_primeira.gif", $attrs);
        $btn_first1 = new ImageLink('_gnFirst', 'Primeira', SForm::getAjaxAction('generateGridManualClassification', 'divGridManualClassification', false, array('pageNext'=>1)),"/images/but_pg_primeira_x.gif");
        $btn = ($pageNumber > 1 ? $btn_first1 : $btn_first0);
        return new Span('', $btn, 'm-pagenavigator-image');
    }

    /*
     * Obtem link página anterior
     */
    public function getPagePrev()
    {
        $pageNumber = $this->pn->GetPageNumber();
        $pagePrev = $pageNumber - 1;
        $attrs = array('border' => '0');
        $btn_prev0 = new ImageForm('_gnPrev', _M('Anterior'), "/images/but_pg_anterior.gif", $attrs);
        $btn_prev1 = new ImageLink('_gnPrev', _M('Anterior'), SForm::getAjaxAction('generateGridManualClassification', 'divGridManualClassification', false, array('pageNext'=>$pagePrev)),"/images/but_pg_anterior_x.gif");
        $btn = ($pageNumber > 1 ? $btn_prev1 : $btn_prev0);
        return new Span('', $btn, 'm-pagenavigator-image');
    }

    /*
     * Obtem link próxima página
     */
    public function getPageNext()
    {
        $pageNumber = $this->pn->GetPageNumber();
        $pageNext = $pageNumber + 1;
        $pageCount = $this->pn->GetPageCount();
        $attrs = array('border' => '0');
        $btn_next0 = new ImageForm('_gnNext', _M('Próxima'), "/images/but_pg_proxima.gif", $attrs);
        $btn_next1 = new ImageLink('_gnNext', _M('Próxima'), SForm::getAjaxAction('generateGridManualClassification', 'divGridManualClassification', false, array('pageNext'=>$pageNext)), "/images/but_pg_proxima_x.gif");
        $btn = ($pageNumber < $pageCount ? $btn_next1 : $btn_next0);
        return new Span('', $btn, 'm-pagenavigator-image');
    }

    /*
     * Obtem link ultima página
     */
    public function getPageLast()
    {
        $pageNumber = $this->pn->GetPageNumber();
        $pageCount = $this->pn->GetPageCount();
        $attrs = array('border' => '0');
        $btn_last0 = new ImageForm('_gnLast', _M('Última'), "/images/but_pg_ultima.gif", $attrs);
        $btn_last1 = new ImageLink('_gnLast', _M('Última'), SForm::getAjaxAction('generateGridManualClassification', 'divGridManualClassification', false, array('pageNext'=>$pageCount)),"/images/but_pg_ultima_x.gif");
        $btn = ($pageNumber < $pageCount ? $btn_last1 : $btn_last0);
        return new Span('', $btn, 'm-pagenavigator-image');
    }

    /*
     * Set default grid actions
     */
    public function setDefaultGridActions()
    {
        //Not implemented
    }
}
?>
