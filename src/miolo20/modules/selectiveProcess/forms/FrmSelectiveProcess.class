<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulario responsavel pelo passo 1 do Processo Seletivo.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 20/12/2010
 *
 * */
class FrmSelectiveProcess extends SStepByStepForm {

    public function __construct($steps = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    /**
     * Default method to define fields
     * */
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Load data
        $allData = $this->getStepData();
        $stepData = $this->getStepDataByForm(__CLASS__);
        $selectiveProcessId = MIOLO::_REQUEST('selectiveProcessId');

        $_SESSION['selectiveProcessId'] = $selectiveProcessId;

        if (!is_numeric($selectiveProcessId))
        {
            $selectiveProcessId = $allData->selectiveProcessId ? $allData->selectiveProcessId : $allData->selectiveProcessIdChose;
        }

        if (is_numeric($selectiveProcessId) && $this->isFirstAccess())
        {
            $sprSP = new SprSelectiveProcess($selectiveProcessId);

            $sprSP->subscriptionStartHour = SAGU::splitTimestamp($sprSP->subscriptionStartDate, 'TIME');
            $sprSP->subscriptionEndHour = SAGU::splitTimestamp($sprSP->subscriptionEndDate, 'TIME');
            $sprSP->subscriptionStartDate = SAGU::splitTimestamp($sprSP->subscriptionStartDate, 'DATE');
            $sprSP->subscriptionEndDate = SAGU::splitTimestamp($sprSP->subscriptionEndDate, 'DATE');
            $sprSP->endOfProcessHour = SAGU::splitTimestamp($sprSP->endOfProcessDate, 'TIME');
            $sprSP->endOfProcessDate = SAGU::splitTimestamp($sprSP->endOfProcessDate, 'DATE');
        }
        else
        {
            $sprSP = new SprSelectiveProcess();
            $sprSP->socialEconomicFormId = $this->GetFormValue('socialEconomicFormId', $stepData->socialEconomicFormId);
            $sprSP->subscriptionEmailId = $this->GetFormValue('subscriptionEmailId', $stepData->subscriptionEmailId);
            $sprSP->description = $this->GetFormValue('description', $stepData->description);
            $sprSP->numberOfOptions = $this->GetFormValue('numberOfOptions', $stepData->numberOfOptions);
            $sprSP->minimumNumberOfOptions = $this->GetFormValue('minimumNumberOfOptions', $stepData->minimumNumberOfOptions);
            $sprSP->subscriptionStartDate = $this->GetFormValue('subscriptionStartDate', $stepData->subscriptionStartDate);
            $sprSP->subscriptionEndDate = $this->GetFormValue('subscriptionEndDate', $stepData->subscriptionEndDate);
            $sprSP->endOfProcessDate = $this->GetFormValue('endOfProcessDate', $stepData->endOfProcessDate);
            $sprSP->notifySubscribers = $this->GetFormValue('notifySubscribers', $stepData->notifySubscribers);
            $sprSP->createUserForSubscribers = $this->GetFormValue('createUserForSubscribers', $stepData->createUserForSubscribers);
            $sprSP->allowOtherSubscriptions = $this->GetFormValue('allowothersubscriptions', $stepData->allowOtherSubscriptions);
            $sprSP->initialMessage = $this->GetFormValue('initialMessage', $stepData->initialMessage);
            $sprSP->finalMessage = $this->GetFormValue('finalMessage', $stepData->finalMessage);
            $sprSP->generateFinance = $this->GetFormValue('generateFinance', $stepData->generateFinance);
            $sprSP->hasFormationLevelInfo = $this->GetFormValue('hasFormationLevelInfo', $stepData->hasFormationLevelInfo);
            $sprSP->hasEmploymentInfo = $this->GetFormValue('hasEmploymentInfo', $stepData->hasEmploymentInfo);
            $sprSP->exigirVinculoEmpregaticio = $this->GetFormValue('exigirVinculoEmpregaticio', $stepData->exigirVinculoEmpregaticio);
            $sprSP->requireAuthentication = $this->GetFormValue('requireAuthentication', $stepData->requireAuthentication);
            $sprSP->showPasswordAfterSubscription = $this->GetFormValue('showPasswordAfterSubscription', $stepData->showPasswordAfterSubscription);
            $sprSP->subscriptionStartHour = $this->GetFormValue('subscriptionStartHour', $stepData->subscriptionStartHour);
            $sprSP->subscriptionEndHour = $this->GetFormValue('subscriptionEndHour', $stepData->subscriptionEndHour);
            $sprSP->destinationModule = $this->GetFormValue('destinationModule', $stepData->destinationModule);
            $sprSP->periodId = $this->GetFormValue('periodId', $stepData->periodId);
            $sprSP->permiteDadosBancarios = $this->GetFormValue('permiteDadosBancarios', $stepData->permiteDadosBancarios);
            $sprSP->permiteClassificarEnem = $this->GetFormValue('permiteClassificarEnem', $stepData->permiteClassificarEnem);
            $sprSP->anosEnemValidos = $this->GetFormValue('anosEnemValidos', $stepData->anosEnemValidos);
            $sprSP->periodoInicial = $this->GetFormValue('periodoInicial', $stepData->periodoInicial);
            $sprSP->periodoFinal = $this->GetFormValue('periodoFinal', $stepData->periodoFinal);
            $sprSP->endOfProcessHour = $this->GetFormValue('endOfProcessHour', $stepData->endOfProcessHour);
        }

        $fields[] = new MHiddenField('selectiveProcessId', $selectiveProcessId);

        //Descricao do processo seletivo
        $fields[] = $description = new MTextField('description', $sprSP->description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição do processo seletivo', $module));
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));

        //Numero de opcoes do processo seletivo
        $fields[] = $numberOfOptions = new MTextField('numberOfOptions', $sprSP->numberOfOptions, _M('Número de opções'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $numberOfOptions->setJsHint(_M('Informe o número de opções de cursos que será disponibilizado para os alunos se inscreverem'));
        $validators[] = new MIntegerValidator('numberOfOptions', $numberOfOptions->label, 'required');

        //Numero minimo de opcoes obrigatorias
        $fields[] = $minimumNumberOfOptions = new MTextField('minimumNumberOfOptions', $sprSP->minimumNumberOfOptions, _M('Número de opções obrigatórias'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $minimumNumberOfOptions->setJsHint(_M('Informe o número de opções de cursos que serão obrigatórias na inscrição'));
        $validators[] = new MIntegerValidator('minimumNumberOfOptions', $minimumNumberOfOptions->label, 'required');

        //Data inicial do processo seletivo
        $subscriptionStartDateLabel = new MText('subscriptionStartDateLabel', _M('Data e hora inicial', $module) . ':');
        $subscriptionStartDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $subscriptionStartDateLabel->setClass('m-caption m-caption-required');
        $subscriptionStartDate = new MCalendarField('subscriptionStartDate', $sprSP->subscriptionStartDate, _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $subscriptionStartDate->validator->type = 'required';
        $subscriptionStartDate->setJsHint(_M('Informe a data inicial do processo seletivo', $module));


        $subscriptionStartHour = new MTextField('subscriptionStartHour', $sprSP->subscriptionStartHour, null, SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), 'hh:mm');
        $subscriptionStartHour->setJsHint(_M('Informe a hora inicial do processo seletivo', $module));
        $validators[] = new MTimeValidator('subscriptionStartHour', $subscriptionStartDateLabel->label . ' (' . _M('Hora inicial', $module) . ')', 'required');

        $fields[] = $hct = new MHContainer('subscriptionStartDateCnt', array($subscriptionStartDateLabel, $subscriptionStartDate, $subscriptionStartHour));
        $hct->setShowLabel(false);

        //Data final do processo seletivio
        $subscriptionEndDateLabel = new MText('subscriptionEndDateLabel', _M('Data e hora final', $module) . ':');
        $subscriptionEndDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $subscriptionEndDateLabel->setClass('m-caption m-caption-required');
        $subscriptionEndDate = new MCalendarField('subscriptionEndDate', $sprSP->subscriptionEndDate, _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $subscriptionEndDate->validator->type = 'required';
        $subscriptionEndDate->setJsHint(_M('Informe a data final do processo seletivo', $module));

        $subscriptionEndHour = new MTextField('subscriptionEndHour', $sprSP->subscriptionEndHour, null, SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), 'hh:mm');
        $subscriptionEndHour->setJsHint(_M('Informe a hora final do processo seletivo', $module));
        $validators[] = new MTimeValidator('subscriptionEndHour', $subscriptionEndDateLabel->label . ' (' . _M('Hora final', $module) . ')', 'required');

        $fields[] = $hct2 = new MHContainer('subscriptionEndDateCnt', array($subscriptionEndDateLabel, $subscriptionEndDate, $subscriptionEndHour));
        $hct2->setShowLabel(false);

        //Data final do processo seletivo
        $endOfProcessDateLabel = new MText('endOfProcessDateLabel', _M('Data final do processo', $module));
        $endOfProcessDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endOfProcessDateLabel->setClass('m-caption m-caption-required');
        $endOfProcessDate = new MCalendarField('endOfProcessDate', $sprSP->endOfProcessDate, _M('Data final do processo', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endOfProcessDate->validator->type = 'required';
        $endOfProcessDate->setJsHint(_M('Informe a data final do processo', $module));
        $endOfProcessDate->setClass('m-caption m-caption-required');
        
        $endOfProcessHour = new MTextField('endOfProcessHour', $sprSP->endOfProcessHour, null, SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), 'hh:mm');
        $endOfProcessHour->setJsHint(_M('Informe a hora do fim do processo seletivo', $module));
        $validators[] = new MTimeValidator('endOfProcessHour', _M("Hora da Data final do processo", $module), 'required');
        
        $fields[] = $hct3 = new MHContainer('endOfProcessDateCnt', array($endOfProcessDateLabel, $endOfProcessDate, $endOfProcessHour));
        $hct3->setShowLabel(false);

        //Módulo de destino        
        $destinationOptions = SprSelectiveProcess::destinationModuleOptions();
        $destinationModuleLabel = new MText('destinationModuleLabel', _M('Módulo de destino do processo seletivo', $module) . ':');
        $destinationModuleLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationModuleLabel->setClass('m-caption m-caption-required');
        $destinationModule = new MSelection('destinationModule', $sprSP->destinationModule, null, $destinationOptions);
        $destinationModule->setJsHint(_M('Indica o módulo de destino dos candidatos do processo seletivo', $module));
        $destinationModule->addAttribute('onclick', SForm::getAjaxAction('ajaxCampoPeriodo', 'divPeriodo', false));
        $validators[] = new MRequiredValidator('destinationModule', _M('Módulo de destino do processo seletivo', $module));
        $fields[] = new MHContainer('destinationModuleCtn', array($destinationModuleLabel, $destinationModule));

        //AJAX Campo periodo
//        $_SESSION['selectiveProcessId'] = $selectiveProcessId;
        $args = new stdClass();
        $args->destinationModule = $sprSP->destinationModule;
        $args->periodId = $sprSP->periodId;
        $args->periodoInicial = $sprSP->periodoInicial;
        $args->periodoFinal = $sprSP->periodoFinal;
        $args->selectiveProcessId = $selectiveProcessId;
        $fields[] = new MDiv('divPeriodo', $this->ajaxCampoPeriodo($args));

        //Formulario socio economico
        $socialEconomicFormIdLabel = new MText('socialEconomicFormIdLabel', _M('Formulário sócio econômico', $module) . ':');
        $socialEconomicFormIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $socialEconomicFormId = new MLookupTextField('socialEconomicFormId', $sprSP->socialEconomicFormId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'socialEconomicFormIdName', 'research', 'form', null, array('formId' => 'socialEconomicFormId'), true);
        $socialEconomicFormId->setJsHint(_M('Informe o formulário sócio econômico que o aluno terá que responder na inscrição', $module));
        $socialEconomicFormIdName = new MTextField('socialEconomicFormIdName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $socialEconomicFormIdName->setJsHint(_M('Formulário sócio econômico', $module));
        $socialEconomicFormIdName->setReadOnly(true);
        $fields[] = new MHContainer('socialEconomicFormIdCnt', array($socialEconomicFormIdLabel, $socialEconomicFormId, $socialEconomicFormIdName));

        //Email
        $subscriptionEmailIdLabel = new MText('subscriptionEmailIdLabel', _M('E-mail de inscrição', $module) . ':');
        $subscriptionEmailIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $subscriptionEmailId = new MLookupTextField('subscriptionEmailId', $sprSP->subscriptionEmailId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'subscriptionEmailIdName', 'basic', 'email', null, array('emailId' => 'subscriptionEmailId'), true);
        $subscriptionEmailId->setJsHint(_M('Informe o código do e-mail que será enviado ao aluno após finalizar a inscrição', $module));
        $subscriptionEmailIdName = new MTextField('subscriptionEmailIdName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $subscriptionEmailIdName->setJsHint(_M('Descrição do e-mail que será enviado ao aluno após finalizar a inscrição', $module));
        $subscriptionEmailIdName->setReadOnly(true);
        $fields[] = new MHContainer('subscriptionEmailIdCnt', array($subscriptionEmailIdLabel, $subscriptionEmailId, $subscriptionEmailIdName));

        //Enviar e-mail de notificacao
        $notifySubscribersLabel = new MText('notifySubscribersLabel', _M('Enviar e-mail de notificação') . ':');
        $notifySubscribersLabel->setClass('m-caption m-caption-required');
        $notifySubscribersLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $notifySubscribers = new MRadioButtonGroup('notifySubscribers', null, SAGU::listYesNo(1), ($sprSP->notifySubscribers == DB_TRUE ? DB_TRUE : DB_FALSE), null, 'horizontal');
        $notifySubscribers->setShowLabel(false);
        $fields[] = new MHContainer('notifySubscribersCnt', array($notifySubscribersLabel, $notifySubscribers));

        //Permite outras inscrições
        $allowotherSubscriptionsLabel = new MText('allowothersubscriptionsLabel', _M('Permite outras inscrições', $module) . ':');
        $allowotherSubscriptionsLabel->setClass('m-caption m-caption-required');
        $allowotherSubscriptionsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $allowothersubscriptions = new MRadioButtonGroup('allowOtherSubscriptions', null, SAGU::listYesNo(1), ($sprSP->allowOtherSubscriptions == DB_TRUE ? DB_TRUE : DB_FALSE), null, 'horizontal');
        $allowothersubscriptions->setShowLabel(false);
        $fields[] = new MHContainer('allowothersubscriptionsCnt', array($allowotherSubscriptionsLabel, $allowothersubscriptions));

        //Gerar financeiro
        $generateFinanceLabel = new MText('generateFinanceLabel', _M('Gerar financeiro', $module) . ':');
        $generateFinanceLabel->setClass('m-caption m-caption-required');
        $generateFinanceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generateFinance = new MRadioButtonGroup('generateFinance', null, SAGU::listYesNo(1), ($sprSP->generateFinance == DB_TRUE ? DB_TRUE : DB_FALSE), null, 'horizontal');
        $generateFinance->setShowLabel(false);
        $fields[] = new MHContainer('generateFinanceCnt', array($generateFinanceLabel, $generateFinance));

        //Exibir informacoes de formacao
        $hasFormationLevelInfoLabel = new MText('hasFormationLevelInfoLabel', _M('Exibir informações de formação', $module) . ':');
        $hasFormationLevelInfoLabel->setClass('m-caption m-caption-required');
        $hasFormationLevelInfoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $hasFormationLevelInfo = new MRadioButtonGroup('hasFormationLevelInfo', null, SAGU::listYesNo(1), ($sprSP->hasFormationLevelInfo == DB_TRUE ? DB_TRUE : DB_FALSE), null, 'horizontal');
        $hasFormationLevelInfo->setShowLabel(false);
        $fields[] = new MHContainer('hasFormationLevelInfoCnt', array($hasFormationLevelInfoLabel, $hasFormationLevelInfo));

        //Solicitar dados do vínculo empregatício na inscrição
        $hasEmploymentInfoLabel = new MText('hasEmploymentInfoLabel', _M('Solicitar dados do vínculo empregatício na inscrição', $module) . ':');
        $hasEmploymentInfoLabel->setClass('m-caption m-caption-required');
        $hasEmploymentInfoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $hasEmploymentInfo = new MRadioButtonGroup('hasEmploymentInfo', null, SAGU::listYesNo(1), SAGU::NVL($this->GetFormValue('hasEmploymentInfo', ($sprSP->hasEmploymentInfo == DB_TRUE ? DB_TRUE : DB_FALSE))), null, 'horizontal');
        $hasEmploymentInfo->setShowLabel(false);
        $hasEmploymentInfo->setAutoPostBack(true); // faz mostrar nova opção
        $fields[] = new MHContainer('hasEmploymentInfoCnt', array($hasEmploymentInfoLabel, $hasEmploymentInfo));
        
        if( $this->GetFormValue('hasEmploymentInfo', $sprSP->hasEmploymentInfo) == DB_TRUE)
        {
            //Solicitar dados do vínculo empregatício na inscrição
            $exigirVinculoEmpregaticioLabel = new MText('exigirVinculoEmpregaticioLabel', _M('Exigir preenchimento', $module) . ':');
            $exigirVinculoEmpregaticioLabel->setClass('m-caption m-caption-required');
            $exigirVinculoEmpregaticioLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $exigirVinculoEmpregaticio = new MRadioButtonGroup('exigirVinculoEmpregaticio', null, SAGU::listYesNo(1), $this->GetFormValue('exigirVinculoEmpregaticio', SAGU::NVL($sprSP->exigirVinculoEmpregaticio)), null, 'horizontal');
            $exigirVinculoEmpregaticio->setShowLabel(false);
            
            //Adicionando um hint manual por que o hint do radioButtonGroup nao suprir a necessidade
            $msg = _M("Exigir preenchimento dos dados do vínculo empregatício.");
            $hint = new MText('hint', $msg);
            $hint->addAttribute('style', 'padding: 2px 3px; border-radius: 0.5em; background-color: #F2F5F7; font-size: 11px; border: 1px solid #93BCD9; color: #287EB0; display: inline-block; text-align: left'); 
            $fields[] = new MHContainer('exigirVinculoEmpregaticioCnt', array($exigirVinculoEmpregaticioLabel, $exigirVinculoEmpregaticio, $hint));
        }
        else
        {
            $sprSP->exigirVinculoEmpregaticio = DB_FALSE;
        }
        //Exigir autenticação para inscrição
        $requireAuthenticationLabel = new MText('requireAuthenticationLabel', _M('Exigir autenticação para inscrição', $module) . ':');
        $requireAuthenticationLabel->setClass('m-caption m-caption-required');
        $requireAuthenticationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $requireAuthentication = new MRadioButtonGroup('requireAuthentication', null, SAGU::listYesNo(1), ($sprSP->requireAuthentication == DB_TRUE ? DB_TRUE : DB_FALSE), null, 'horizontal');
        $requireAuthentication->setShowLabel(false);
        $fields[] = new MHContainer('requireAuthenticationCnt', array($requireAuthenticationLabel, $requireAuthentication));

        //Exibir senha do usuário ao final da inscrição
        $showPasswordAfterSubscriptionLabel = new MText('showPasswordAfterSubscriptionLabel', _M('Exibir senha do usuário ao final da inscrição', $module) . ':');
        $showPasswordAfterSubscriptionLabel->setClass('m-caption m-caption-required');
        $showPasswordAfterSubscriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $showPasswordAfterSubscription = new MRadioButtonGroup('showPasswordAfterSubscription', null, SAGU::listYesNo(1), ($sprSP->showPasswordAfterSubscription == DB_TRUE ? DB_TRUE : DB_FALSE), null, 'horizontal');
        $showPasswordAfterSubscription->setShowLabel(false);
        $fields[] = new MHContainer('showPasswordAfterSubscriptionCnt', array($showPasswordAfterSubscriptionLabel, $showPasswordAfterSubscription));

        //Exibir campos dados bancários
        $permiteDadosBancariosLabel = new MText('permiteDadosBancariosLabel', _M('Permite informar dados bancários', $module) . ':');
        $permiteDadosBancariosLabel->setClass('m-caption m-caption-required');
        $permiteDadosBancariosLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $permiteDadosBancarios = new MRadioButtonGroup('permiteDadosBancarios', null, SAGU::listYesNo(1), ($sprSP->permiteDadosBancarios == DB_TRUE ? DB_TRUE : DB_FALSE), null, 'horizontal');
        $permiteDadosBancarios->setShowLabel(false);
        $fields[] = new MHContainer('hcPermiteDadosBancarios', array($permiteDadosBancariosLabel, $permiteDadosBancarios));

        //Permite classificar pelo ENEM
        $permiteClassificarEnemLabel = new MText('permiteClassificarEnemLabel', _M('Permite classificar pelo ENEM', $module) . ':');
        $permiteClassificarEnemLabel->setClass('m-caption m-caption-required');
        $permiteClassificarEnemLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $permiteClassificarEnem = new MRadioButtonGroup('permiteClassificarEnem', null, SAGU::listYesNo(1), SAGU::NVL($this->GetFormValue('permiteClassificarEnem', $sprSP->permiteClassificarEnem), DB_FALSE), null, 'horizontal');
        $permiteClassificarEnem->setShowLabel(false);
        $permiteClassificarEnem->setAutoPostBack(true);
        $fields[] = new MHContainer('hcPermiteClassificarEnem', array($permiteClassificarEnemLabel, $permiteClassificarEnem));

        if (SAGU::NVL($this->GetFormValue('permiteClassificarEnem', $sprSP->permiteClassificarEnem), DB_FALSE) == DB_TRUE)
        {
            //Obtém os 5 anos anteriores
            $ano = SAGU::getDatePart(SAGU::getDateNow(), 'year');
            for ($i = 0; $i <= 4; $i++)
            {
                $checked = false;
                if (in_array(($ano - $i), $sprSP->anosEnemValidos))
                {
                    $checked = true;
                }
                $anos[] = new MCheckBox('anosEnemValidos_' . $i, ($ano - $i), ($ano - $i), $checked, ($ano - $i));
            }
            $fldAnos[] = new MCheckBoxGroup('anosEnemValidos', '', $anos);
            $fields[] = new MBaseGroup('bsgEnem', _M('Anos válidos para o ENEM'), $fldAnos);
        }

        //Mensagem inicial
        $initialMessageLabel = new MText('initialMessageLabel', _M('Mensagem inicial', $module) . ':');
        $initialMessageLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $initialMessage = new MEditor('initialMessage', $sprSP->initialMessage);
        $initialMessage->disableElementsPath();
        $initialMessage->setWidth(SAGU::getParameter('BASIC', 'FIELD_EDITOR_SIZE'));
        $initialMessage->setJsHint(_M('Informe a mensagem que será exibida no início da inscrição', $module));
        $fields[] = new MHContainer('hctInitialMessage', array($initialMessageLabel, $initialMessage));

        //Mensagem final
        $finalMessageLabel = new MText('finalMessageLabel', _M('Mensagem final', $module) . ':');
        $finalMessageLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $finalMessageLabel->setClass('m-caption m-caption-required');
        $finalMessage = new MEditor('finalMessage', $sprSP->finalMessage);
        $finalMessage->disableElementsPath();
        $finalMessage->setWidth(SAGU::getParameter('BASIC', 'FIELD_EDITOR_SIZE'));
        $finalMessage->setJsHint(_M('Informe a mensagem que será exibida no final da inscrição', $module));
        $validators[] = new MRequiredValidator('finalMessage', _M('Mensagem Final', $module));
        $fields[] = new MHContainer('finalMessageCnt', array($finalMessageLabel, $finalMessage));

        $this->setFields($fields);
        $this->setValidators($validators);
    }
    
    public function ajaxCampoPeriodo($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        if ($args->destinationModule == SprSelectiveProcess::DEST_MODULE_ACADEMIC)
        {
            $busPeriod = new BusinessAcademicBusPeriod();
            $period = new MSelection('periodId', $args->periodId, _M('Período'), $busPeriod->listPeriod());
            $period->setJsHint(_M('Período de estudos para o qual o processo seletivo irá acontecer'));
            $fields[] = $period;

            $this->addValidator(new MRequiredValidator('periodId', _M('Período')));

            $this->corrigeProblemasEmCampos($fields);

            $fields = SAGU::alignFields($fields);
        }
        else
        {
            if ($args->destinationModule == SprSelectiveProcess::DEST_MODULE_PEDAGOGICO)
            {
                //Verificar periodos cadastrados
                if (strlen($args->selectiveProcessId) > 0)
                {
                    $periodos = $this->obterPeriodosRegistrados();
                    if (strlen($periodos[0][0]) > 0 || strlen($periodos[0][1]) > 0)
                    {
                        $args->periodoInicial = SAGU::dateToUser($periodos[0][0]);
                        $args->periodoFinal = SAGU::dateToUser($periodos[0][1]);
                    }
                }

                $periodoInicial = new MCalendarField('periodoInicial', $args->periodoInicial, 'Data de oferta inicial', 20, 'Selecione a data de oferta inicial');
                $periodoFinal = new MCalendarField('periodoFinal', $args->periodoFinal, 'Data de oferta final', 20, 'Selecione a data de oferta final');

                $fields[] = $periodoInicial;
                $fields[] = $periodoFinal;

                // precisamos disto para que o segundo calendario funcione. nao estava abrindo o calendario ao clicar no icone
                $MIOLO->page->addAJAXJsCode('setTimeout(function(){ Calendar.setup({inputField:"periodoFinal", ifFormat:"%d/%m/%Y", button:"btnperiodoFinal"}); }, 1000);');
                $MIOLO->page->addAJAXJsCode('setTimeout(function(){ Calendar.setup({inputField:"periodoFinal", ifFormat:"%d/%m/%Y", button:"btnperiodoFinal"}); }, 2000);');
                $MIOLO->page->addAJAXJsCode('setTimeout(function(){ Calendar.setup({inputField:"periodoFinal", ifFormat:"%d/%m/%Y", button:"btnperiodoFinal"}); }, 3000);');
                
                $this->corrigeProblemasEmCampos($fields);
                $fields = SAGU::alignFields($fields);
            }
            else
            {
                $fields = null;
            }
        }

        return $fields;
    }

    public function getData()
    {
        $data = parent::getData();

        for ($i = 0; $i <= 4; $i++)
        {
            if (strlen(MIOLO::_REQUEST('anosEnemValidos_' . $i)) > 0)
            {
                $anosEnemValidos[] = MIOLO::_REQUEST('anosEnemValidos_' . $i);
            }
        }

        $data->anosEnemValidos = $anosEnemValidos;

        return $data;
    }

    public function nextStepButton_click($args = null)
    {
        $allData = $this->getData();

        //Verificar campos periodo final e inicial para quando modulo for pedagogico
        if ((strlen($allData->periodoFinal)) <= 0 &&
                (strlen($allData->periodoInicial)) <= 0 &&
                $allData->destinationModule == SprSelectiveProcess::DEST_MODULE_PEDAGOGICO)
        {
            $this->addAlert(_M('Por favor, selecione pelo menos uma data de oferta incial ou final.', $module));
        }
        else if ($allData->numberOfOptions < $allData->minimumNumberOfOptions)
        {
            $this->addAlert(_M('Por favor, a quantidade de opções obrigatórias não pode ser maior que a quantidade de opções.'));
        }
        else if ($allData->numberOfOptions == 0 || $allData->minimumNumberOfOptions == 0)
        {
            $this->addAlert(_M('Por favor, a quantidade de opções, obrigatórias e comuns, não pode ser 0.'));
        }
        elseif ( $allData->destinationModule == SprSelectiveProcess::DEST_MODULE_ACADEMIC && !(strlen($allData->periodId) > 0) )
        {
            $this->AddAlert(_M('Por favor, selecione um período para o processo seletivo.'));
        }
        else
        {
            parent::nextStepButton_click($args);
        }
    }

    public function obterPeriodosRegistrados()
    {
        $selectiveProcessId = MIOLO::_REQUEST('selectiveProcessId');
        $srpSP = new SprSelectiveProcess();
        $periodos = $srpSP->encontrarPeriodos($selectiveProcessId);
        return $periodos;
    }

}

?>
