<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 04/01/2011
 *
 **/

/**
 * Form to manipulate a uploadCsvFileNote
 **/
MIOLO::uses('/ui/controls/msubdetail.class');

class FrmExaminingBoard extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        parent::__construct(new SprExaminingBoard(), array('examiningBoardId'), null);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');
        
        // If is the first access to form, clear subdetail session data
        if ( !$MIOLO->page->isPostBack() )
        {
            MSubDetail::clearData('examiningBoardMembers');
        }

        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $examiningBoardId = $pk->examiningBoardId;
            $data = new SprExaminingBoard($examiningBoardId);
            
            $fields['examiningBoardId'] = new MTextField('examiningBoardId', $examiningBoardId, _M('Código da banca examinadora',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);
            $fields['examiningBoardId']->setJsHint(_M('Código da banca examinadora',$module));

            if ( $function == SForm::FUNCTION_DELETE )
            {
                $this->toolbar->disableButton('tbBtnSave');
                $this->toolbar->disableButton('tbBtnDelete');
            }
        }
        else
        {
            $this->toolbar->disableButton('tbBtnDelete');
        }

        // Field selective process (lookup selective process)
        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Processo seletivo', $module) . ':');
        $selectiveProcessLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $selectiveProcessId = new MLookupTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId',$data->selectiveProcessId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'selectiveProcessDescription', $module, 'selectiveProcess', null, null, true);
        $selectiveProcessId->setJsHint(_M('Informe o código do processo seletivo',$module));
        $selectiveProcessDescription = new MTextField('selectiveProcessDescription', $this->getFormValue('selectiveProcessDescription', $data->selectiveProcessDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $selectiveProcessDescription->setReadOnly(true);
        $selectiveProcessDescription->setJsHint(_M('Descrição do processo seletivo',$module));
        $fields[] = $selectiveProcess = new MHContainer('selectiveProcessCnt',array($selectiveProcessLabel, $selectiveProcessId, $selectiveProcessDescription));
        $selectiveProcess->showLabel = true;
        $validators[] = new MIntegerValidator('selectiveProcessId', _M('Processo seletivo', $module));

        // Field step (lookup step)
        $stepLabel = new MText('stepLabel', _M('Etapa', $module) . ':');
        $stepLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $stepLabel->setClass('m-caption m-caption-required');
        $stepId = new MLookupTextField('stepId', $this->getFormValue('stepId',$data->stepId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'stepDescription, selectiveProcessId, selectiveProcessDescription', $module, 'step', null, array('selectiveProcessId'=>'selectiveProcessId'), true);
        $stepId->setJsHint(_M('Informe o código da etapa',$module));
        $stepDescription = new MTextField('stepDescription', $this->getFormValue('stepDescription', $data->stepDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stepDescription->setReadOnly(true);
        $stepDescription->setJsHint(_M('Descrição da etapa',$module));
        $fields[] = $step = new MHContainer('stepCnt',array($stepLabel, $stepId, $stepDescription));
        $step->showLabel = true;
        $validators[] = new MIntegerValidator('stepId', _M('Etapa', $module), 'required');

        // Field description
        $fields[] = $description = new MTextField('description', $data->description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint( _M('Informe a descrição da banca examinadora', $module) );
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));

        // Examining board id
        $subFields[] = new SHiddenField('examiningBoardId');

        // Field person (lookup physical person)
        $personLabel = new MText('personLabel', _M('Pessoa', $module).':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personLabel->setClass('m-caption m-caption-required');
        $personId = new MLookupTextField('personId', $this->getFormValue('personId', null), _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa física',$module));
        $personName = new MTextField('personName', $this->getFormValue('personName', null), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa',$module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $subFields[] = $hctPerson;
        $subValidators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');

        $cols[] = new MGridColumn(_M('Código da pessoa', $module), 'left', true, '', true, 'personId');
        $cols[] = new MGridColumn(_M('Nome da pessoa', $module), 'left', true, '', true, 'personName');

        $fields[] = $sub = new MSubDetail('examiningBoardMembers', _M('Membros da banca', $module), $cols, $subFields, array('remove'));
        $sub->setValidators($subValidators);

        if ( count($data->examiningBoardMembers) > 0 && MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click' )
        {
            $sub->setData( SAGU::convertSTypeToSubDetail($cols, $data->examiningBoardMembers) );
        }

        parent::defineFields($fields, $validators, $data);
    }

    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');
        
        try
        {
            //New database transaction
            $data = $this->getData();
            $data->examiningBoardMembers = $subDetail = MSubDetail::getData('examiningBoardMembers');

            $examiningBoard = new SprExaminingBoard();
            $examiningBoard->stepId = $data->stepId;
            $examiningBoard->description = $data->description;
            $examiningBoard->examiningBoardId = $data->examiningBoardId;

            if ( count($data->examiningBoardMembers) > 0 )
            {
                foreach ( $data->examiningBoardMembers as $examiningBoardMember )
                {
                    // SprExaminingBoardMember
                    $sprExaminingBoardMember = new SprExaminingBoardMember();
                    $sprExaminingBoardMember->examiningBoardId = $examiningBoard->examiningBoardId;
                    $sprExaminingBoardMember->personId = $examiningBoardMember->personId;
                    
                    if ( $examiningBoardMember->removeData )
                    {
                        $sprExaminingBoardMember->delete();
                    }
                    else
                    {
                        $examiningBoardMembers[] = $sprExaminingBoardMember;
                    }
                }

                $examiningBoard->examiningBoardMembers = $examiningBoardMembers;
            }

            // Salva os dados na base
            SDatabase::beginTransaction();
            $examiningBoard->save();
            SDatabase::commit();

            $msg = (strlen($data->examiningBoardId) > 0) ? SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED') : SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED_INFO');
            SAGU::information($msg, $MIOLO->getActionURL($module, $action, null, array('function'=>'search')));

            // Limpa os dados da subdetail
            MSubDetail::clearData('examiningBoardMembers');
        }
        catch (Exception $e)
        {
            $MIOLO->error( $e->getMessage() );
        }
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $examiningBoard = new SprExaminingBoard(MIOLO::_REQUEST('examiningBoardId'));

        // Deleta os membros da banca
        $ok = true;
        if ( count($examiningBoard->examiningBoardMembers) > 0 )
        {
            foreach ( $examiningBoard->examiningBoardMembers as $examiningBoardMember )
            {
                $examiningBoardMembers = new SprExaminingBoardMember();
                $examiningBoardMembers->examiningBoardId = MIOLO::_REQUEST('examiningBoardId');
                $examiningBoardMembers->personId = $examiningBoardMember->personId;
                $ok = $examiningBoardMembers->delete();
            }
        }

        // Depois de deletado os membros da banca deleta a banca
        if ( $ok )
        {
            $ok = $examiningBoard->delete();
        }

        // Mensagem de sucesso ou falha
        if ( $ok )
        {
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg = _M('Erro executando a operação solicitada. Não foi possível fazer a exclusão do registro.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }
}
?>
