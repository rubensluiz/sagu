<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelo passo 3 do detalhamento de etapas.
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 20/12/2010
 *
 **/
class FrmStepTiebreak extends SStepByStepForm
{
    
    public $subDetail;
    public function __construct($steps = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
            $this->toolbar->enableButton( MToolBar::BUTTON_BACK );
            $this->toolbar->setButtonURL( MToolBar::BUTTON_BACK, $MIOLO->getActionURL($module, $action, null, array('function' => 'insert', 'event' => 'tbBtnNew:click', 'step' => '2')) );
            $this->toolbar->setIsPost( MToolBar::BUTTON_BACK );
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Load data
        $stepData = $this->getStepDataByForm('FrmSelectionStep');
        $stepId = $stepData->stepId;

        if ( $this->isFirstAccess() )
        {
            MSubDetail::clearData('stepTiebreaks');
        }
        
        if ( strlen($stepId) > 0 )
        {
            $sprStep = new SprStep($stepId);
        }

        //StepTieBreakId
        $subFields[] = new SHiddenField('stepTiebreakId', $this->getFormValue('stepTiebreakId', $data->stepTiebreakId));
        //TiebreakId
        $subFields[] = new SHiddenField('tiebreakId');
        //Type sprTiebreak
        $tiebreakData = new SprTiebreak();

        //TiebreakId
        $tiebreakLabel = new MText('tiebreakLabel', _M('Critério', $module) . ':');
        $tiebreakLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $tiebreakLabel->setClass('m-caption m-caption-required');
        $tiebreak = new MSelection('tiebreakId', $this->getFormValue('tiebreakId', $data->tiebreakId),null, $tiebreakData->search(null, true));
        $args['currentStep'] = $stepId;
        $tiebreak->addAttribute('onChange', $this->getAjaxAction('changeTiebreakId', 'divStepSelect', false, $args));

        $tiebreak->setJsHint( _M('Informe o critério de desempate', $module) );
        $validators[] = new MRequiredValidator('tiebreakId',  _M('Critério', $module));
        $subFields[] = new MHContainer('tiebreakCnt', array($tiebreakLabel, $tiebreak));

        //Step tiebreak
        $subFields[] = new MDiv('divStepSelect', null);

        //Priority
        $priorityLabel = new MText('priorityLabel', _M('Prioridade', $module) . ':');
        $priorityLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $priorityLabel->setClass('m-caption m-caption-required');
        $priority = new MTextField('priority', $this->getFormValue('priority', $data->priority), '',SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $priority->setJsHint( _M('Informe a prioridade', $module) );
        $validators[] = new MRequiredValidator('priority',  _M('Prioridade', $module));
        $validators[] = new MIntegerValidator('priority',  _M('Prioridade', $module));
        $subFields[] = new MHContainer('priorityCnt', array($priorityLabel, $priority));

        // Get list
        $filters = new stdClass();
        $filters->selectiveProcessId = $sprStep->selectiveProcessId;
        $steps = SprStep::listRecords($filters, true);
        
        $cols[] = new MGridColumn(_M('Código identificador ', $module), 'left', true, '', false, 'stepTiebreakId');
        $cols[] = new MGridColumn(_M('Critério', $module), 'left', true, '', true, 'tiebreakId', null, $tiebreakData->search(null, true));
        $cols[] = new MGridColumn(_M('Prioridade', $module), 'right', true, '', true, 'priority');
        $cols[] = new MGridColumn(_M('Etapa',$module), 'left', true, '', true, 'tiebreakStepId', null, $steps);

        $fields[] = $sub = new MSubDetail('stepTiebreaks', _M('Critério de desempate', $module), $cols, $subFields, array('remove'));
        $sub->setValidators($validators);
        $sub->addActionEvent(MSubDetail::EVENT_ADD, 'validateFieldsSub', __CLASS__);

        if ( ( count($sprStep->stepTiebreaks) > 0 ) && $this->isFirstAccess() )
        {
            $sub->setData( SAGU::convertSTypeToSubDetail($cols, $sprStep->stepTiebreaks) );
        }
        $this->subDetail = $sub->getData();
        $this->setFields($fields);
    }
    
    //validar para que adicione pelo menos um criterio de desempate #37319
     public function nextStepButton_click($args)
    {
         $linhas = $this->subDetail;
        foreach ($linhas as $linha)
        {
            if(!$linha->removeData)
            {
                $vetor[] = $linha;
            }
        }
        if($vetor)
        {
            parent::nextStepButton_click($args);
        }
        else 
        {
            $this->addError('Adicione pelo menos um critério de desempate para prosseguir.');
        }
    }

    /*
     * Set validators in subDetail stepPlaces
     */
    public static function validateFieldsSub($args)
    {
        $MIOLO = MIOLO::getInstance();

        //Validate field isInternal
        $validators[] = new MRequiredValidator('tiebreakId',  _M('Critério', $module));
        $validators[] = new MIntegerValidator('priority',  _M('Prioridade', $module),'required');

        if( $args->tiebreakId == SprTiebreak::BY_BEST_PUNCTUATION_IN_STEP )
        {
            $validators[] = new MRequiredValidator('tiebreakStepId', _M('Etapa', $module));
        }
        //Instance of the MSubDetailValidators
        $instanceSubDetailValidators = new MSubDetailValidators();
        //Set validators in MSubDetailValidators
        $instanceSubDetailValidators->setValidators($validators);
        //Get validators of the instance MSubDetailValidators
        $validators = $instanceSubDetailValidators->transformToStdClasses();
        //Set validators in subDetail
        MSubDetail::setSessionValue('validators', $validators, 'stepTiebreaks');

        //Return values
        return $args;
    }

    /**
     * Popula selection de etapas do processo seletivo
     * @param <object> $args
     * @return Fields
     */
    public function changeTiebreakId($args = null)
    {
        if ( (strlen($args->currentStep) > 0) && ($args->tiebreakId == SprTiebreak::BY_BEST_PUNCTUATION_IN_STEP) )
        {
            // Field unit area
            $fields[] = new MSeparator();
            $stepLabel = new MText('stepLabel', _M('Etapa', $module) . ':');
            $stepLabel->setClass('m-caption m-caption-required');
            $stepLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
            $filters = new stdClass();
            $filters->stepId = $args->currentStep;
            $steps = SprStepTiebreak::listStepsByTiebreakBestPunctuationInStep($filters);
            if( count ($steps) > 0 )
            {
                $step = new MSelection('tiebreakStepId', '', null, $steps);            
                $step->setJsHint(_M('Informe a etapa onde deseja aplicar este critério de desempate', $module));
                $fields[] = new MHContainer('hctStep', array($stepLabel, $step));
            }
            else
            {
                $msg = "Não existe outra etapa para este processo seletivo! Selecione outro critério.";
                $this->AddError($msg);
            }

        }
        return $fields ? $fields : new SHiddenField('stepId',null);
    }

}
?>
