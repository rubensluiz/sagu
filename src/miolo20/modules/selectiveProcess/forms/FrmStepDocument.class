<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelo passo 4 do detalhamento de etapas.
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 20/12/2010
 *
 **/

class FrmStepDocument extends SStepByStepForm
{
    public function __construct($steps = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
            $this->toolbar->enableButton( MToolBar::BUTTON_BACK );
            $this->toolbar->setButtonURL( MToolBar::BUTTON_BACK, $MIOLO->getActionURL($module, $action, null, array('function' => 'insert', 'event' => 'tbBtnNew:click', 'step' => '3')) );
            $this->toolbar->setIsPost( MToolBar::BUTTON_BACK );
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Load data
        $stepData = $this->getStepDataByForm('FrmSelectionStep');
        $stepId = $stepData->stepId;

        if ( $this->isFirstAccess() )
        {
            MSubDetail::clearData('stepDocuments');

            if ( strlen($stepId) > 0 )
            {
                $sprStep = new SprStep($stepId);
            }
        }

        //StepDocumentId
        $subFields[] = new SHiddenField('stepDocumentId');

        //Description
        $descriptionLabel = new MText('descriptionLabel', _M('Descrição', $module) . ':');
        $descriptionLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description = new MTextField('description', $this->getFormValue('description', $data->description), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint( _M('Informe a descrição', $module) );
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));
        $subFields[] = new MHContainer('descriptionCnt', array($descriptionLabel, $description));
        
        //Obrigatório
        $eobrigatorioLabel = new MText('eobrigatorioLabel', _M('Conteúdo é obrigatório', $module) . ':');
        $eobrigatorioLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $eobrigatorioLabel->setClass('m-caption m-caption-required');
        $eobrigatorio = new MSelection('eObrigatorio', strlen($this->getFormValue('eObrigatorio', $data->eobrigatorio)) > 0 ? $this->getFormValue('eObrigatorio', $data->eobrigatorio) : DB_FALSE, null, SAGU::listTrueFalse(0, TRUE));
        $eobrigatorio->setAllowNullValue(FALSE);
        $validators[] = new MRequiredValidator('eObrigatorio', _M('É obrigatório', $module));
        $subFields[] = new MHContainer('eobrigatorioCnt', array($eobrigatorioLabel, $eobrigatorio));

        //AllowFileAttach
        $allowFileAttachLabel = new MText('allowFileAttachLabel', _M('Permite anexar arquivos',$module) . ':');
        $allowFileAttachLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $allowFileAttachLabel->setClass('m-caption m-caption-required');
        $allowFileAttach = new MSelection('allowFileAttach', strlen($data->allowFileAttach) > 0 ? $data->allowFileAttach : DB_FALSE, null, SAGU::listTrueFalse(0, true));
        $allowFileAttach->setAllowNullValue(FALSE);
        $allowFileAttach->setJsHint( _M('Informe se é permitido anexar arquivos', $module) );
        
        $allowFileAttach->addAttribute('onchange', $this->getAjaxAction('obterCampo', 'divCampo', true));//ajava que processa o campo de baixo
        
        $validators[] = new MRequiredValidator('allowFileAttach', _M('Permite anexar arquivos', $module));
        $subFields[] = new MHContainer('allowFileAttachCnt', array($allowFileAttachLabel, $allowFileAttach));
        
        $subFields[] = new MSeparator();
        $subFields[] = new MDiv('divCampo', $this->obterCampo($args));

        $cols[] = new MGridColumn(_M('Código do documento da etapa', $module), 'left', true, '', false, 'stepDocumentId');
        $cols[] = new MGridColumn(_M('Descrição', $module), 'left', true, '', true, 'description');
        $cols[] = new MGridColumn(_M('Permite anexar arquivos', $module), 'left', true, '', true, 'allowFileAttach',false,SAGU::listTrueFalse(0, true));
        $cols[] = new MGridColumn(_M('Conteúdo é obrigatório', $module), 'left', true, '', true, 'eObrigatorio', false, SAGU::listTrueFalse(0, true));
        $cols[] = new MGridColumn(_M('Arquivo é obrigatório', $module), 'left', true, '', true, 'arquivoEobrigatorio', false, SAGU::listTrueFalse(0, true));       
        

        $fields[] = $sub = new MSubDetail('stepDocuments', _M('Documentos', $module), $cols, $subFields, true);
        $sub->setValidators($validators);

        if (count($sprStep->stepDocuments) > 0)
        {
            $sub->setData( SAGU::convertSTypeToSubDetail($cols, $sprStep->stepDocuments) );
        }

        $sub->addActionEvent(MSubDetail::EVENT_EDIT, 'subDetailEventEdit', __CLASS__);
        $sub->addActionEvent(MSubDetail::EVENT_ADD, 'subDetailSave', __CLASS__);
        
        $this->setFields($fields);
    }
    
     public static function subDetailSave($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        return $args;
    }
    
    
    
    public function subDetailEventEdit($args)
    {
        $js = "
            (function verificaCampoAllowFileAttach()
            {
                var campo = document.getElementById('allowFileAttach');

                if( campo.value === '{$args->allowFileAttach}' )
                {
                    campo.dispatchEvent(new Event('change'));
                }
                else
                {
                    setTimeout(verificaCampoAllowFileAttach, 100); 
                }
             })();    
        ";
        
        MIOLO::getInstance()->page->addAJAXJsCode($js);
    }
    
    public function obterCampo($args)
    {
        $result = FALSE;
        if( $args->allowFileAttach == DB_TRUE )
        {
            $result = TRUE;
        }
        if ( $result )
        {
            //Arquivo e Obrigatorio
             $arquivoEobrigatorioLabel = new MText('arquivoEobrigatorioLabel', _M('Arquivo é obrigatório',$module) . ':');
             $arquivoEobrigatorioLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
             $arquivoEobrigatorioLabel->setClass('m-caption m-caption-required');
             $arquivoEobrigatorio = new MSelection('arquivoEobrigatorio', $args->arquivoEobrigatorio, null, SAGU::listTrueFalse(0, true));
             $arquivoEobrigatorio->setAllowNullValue(FALSE);
             $arquivoEobrigatorio->setJsHint( _M('Informe se é obrigatório anexar arquivo', $module) );
             //$validators[] = new MRequiredValidator('arquivoEobrigatorio', _M('Arquivo é obrigatório', $module));
             return new MHContainer('arquivoEobrigatorioCnt', array($arquivoEobrigatorioLabel, $arquivoEobrigatorio));
        }
        else
        {
            $data->arquivoEobrigatorio = DB_FALSE;
            $arquivoEobrigatorio = new SHiddenField('arquivoEobrigatorio', DB_FALSE);
            return new MHContainer('arquivoEobrigatorioCnt', array($arquivoEobrigatorio));
        }
        
    }
    
    /**
     * Sobreescreve nextStepButton para validações.
     * 
     * @param stdClass $args
     */
    public function nextStepButton_click($args = null)
    {
        $sprSubscriptionDocument = new SprSubscriptionDocument();
        
        $subDetailData = MSubDetail::getData('stepDocuments');
        
        // Não pode remover documentos que já tenham documentos cadastrados
        $docs = array();
        foreach ( $subDetailData as $keySub => $data )
        {
            if ( $data->removeData == true && strlen($data->stepDocumentId) > 0 )
            {
                $filters = new stdClass();
                $filters->stepDocumentId = $data->stepDocumentId;
                
                $inscritosComDocumento = count($sprSubscriptionDocument->search($filters));
                
                if ( $inscritosComDocumento > 0 )
                {
                    $docs[] = '* ' . $data->description . ' não pode ser excluído. ' . $inscritosComDocumento . ' inscritos já cadastraram este documento. ';
                    unset($subDetailData[$keySub]->removeData);
                }
            }
        }

        if ( count($docs) > 0 )
        {
            MSubDetail::setData($subDetailData, 'stepDocuments');
            $this->addError(implode('<br>', $docs));
        }
        else
        {
            parent::nextStepButton_click($args);
        }
    }
}
?>