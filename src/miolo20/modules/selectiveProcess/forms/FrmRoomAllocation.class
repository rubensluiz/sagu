<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de alocação por sala
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 15/02/2011
 */
class FrmRoomAllocation extends SForm
{
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Alocação por sala', $module), null, null);

        // Desabilita alguns botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Field selective process (lookup selective process)
        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Processo seletivo', $module) . ':');
        $selectiveProcessLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $selectiveProcessId = new MLookupTextField('selectiveProcessId', null, null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'selectiveProcessDescription', $module, 'SelectiveProcess', null, null, true);
        $selectiveProcessId->setJsHint(_M('Informe o código do processo seletivo',$module));
        $selectiveProcessDescription = new MTextField('selectiveProcessDescription', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $selectiveProcessDescription->setReadOnly(true);
        $selectiveProcessDescription->setJsHint(_M('Descrição do processo seletivo',$module));
        $fields[] = $selectiveProcess = new MHContainer('selectiveProcessCnt',array($selectiveProcessLabel, $selectiveProcessId, $selectiveProcessDescription));
        $selectiveProcess->showLabel = true;
        $validators[] = new MIntegerValidator('selectiveProcessId', _M('Processo seletivo', $module));

        // Field step (lookup step)
        $stepLabel = new MText('stepLabel', _M('Etapa', $module) . ':');
        $stepLabel->setClass('m-caption m-caption-required');
        $stepLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $stepId = new MLookupTextField('stepId', null, null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'stepDescription, selectiveProcessId, selectiveProcessDescription', $module, 'Step', null, array('selectiveProcessId'=>'selectiveProcessId'), true);
        $stepId->setJsHint(_M('Informe o código da etapa',$module));
        $stepDescription = new MTextField('stepDescription', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stepDescription->setReadOnly(true);
        $stepDescription->setJsHint(_M('Descrição da etapa',$module));
        $fields[] = $step = new MHContainer('stepCnt',array($stepLabel, $stepId, $stepDescription));
        $step->showLabel = true;
        $validators[] = new MIntegerValidator('stepId', _M('Etapa', $module), 'required');

        // Campo Email
        $roomAllocationEmailIdLabel = new MText('roomAllocationEmailIdLabel', _M('E-mail', $module) . ':');
        $roomAllocationEmailIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $roomAllocationEmailId = new MLookupTextField('roomAllocationEmailId', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'roomAllocationEmailIdName', 'basic', 'email', null, array('emailId'=>'roomAllocationEmailId'), true);
        $roomAllocationEmailId->setJsHint(_M('Informe o código do e-mail que será enviado ao aluno após finalizar a alocação por sala.', $module));
        $roomAllocationEmailIdName = new MTextField('roomAllocationEmailIdName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $roomAllocationEmailIdName->setJsHint(_M('Descrição do e-mail que será enviado ao aluno após finalizar a alocação por sala.', $module));
        $roomAllocationEmailIdName->setReadOnly(true);
        $fields[] = new MHContainer('roomAllocationEmailIdCnt', array($roomAllocationEmailIdLabel, $roomAllocationEmailId, $roomAllocationEmailIdName));

        // Carrega botões de opcoes da alocação para esta etapa
        $fields[] = new MButton('loadFields', _M('Carregar',$module));

        // Separator
        $fields[] = new Separator();

        // Carregar
        if ( in_array(SAGU::getEventName(), array('loadFields:click', 'generateAllocation:click')) )
        {
            $sprSelectiveProcess = new SprSelectiveProcess( MIOLO::_REQUEST('selectiveProcessId') );

            // Separador
            $fields[] = new MSeparator();

            // Priorizar por necessidade especial
            $prioritySpecialNecessityLabel = new MText('prioritySpecialNecessityLabel', _M('Necessidades especiais', $module) . ':');
            $prioritySpecialNecessityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $_prioritySpecialNecessity = MIOLO::_REQUEST('prioritySpecialNecessity');
            $prioritySpecialNecessity = new MCheckBox('prioritySpecialNecessity', DB_TRUE, null, null, _M('Priorizar alocação por sala para portadores de necessidades especiais.', $module));
            $fields[] = new MHContainer('prioritySpecialNecessityCnt', array($prioritySpecialNecessityLabel, $prioritySpecialNecessity));

            // Separador
            $fields[] = new MSeparator();

            $groupByCourseOptionLabel = new MText('groupByCourseOptionLabel', _M('Opção de curso', $module, ($i + 1)) . ':');
            $groupByCourseOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $groupByCourseOption = new MCheckBox('groupByCourseOption', DB_TRUE, null, null, _M('Priorizar alocação por sala por opção de curso.', $module));
            $fields[] = new MHContainer('groupByCourseOptionCnt', array($groupByCourseOptionLabel, $groupByCourseOption));

            // Separador
            $fields[] = new MSeparator();

            $priorities = SprEvaluation::listEvaluationWithOptions( MIOLO::_REQUEST('stepId') );
            foreach ( $priorities as $i => $_pri )
            {
                $priorityLabel = new MText('priorityLabel', _M('Prioridade @1', $module, ($i + 1)) . ':');
                $priorityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
                $priority = new MSelection("priority{$i}", null, null, $priorities);
                $fields[] = new MHContainer('priorityCnt', array($priorityLabel, $priority));
            }

            // Somente pagas
            if ( $sprSelectiveProcess->generateFinance == DB_TRUE )
            {
                $fields[] = new MSeparator();

                $onlyPayedLabel = new MText('onlyPayedLabel', _M('Somente pagas', $module) . ':');
                $onlyPayedLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
                $_onlyPayed = MIOLO::_REQUEST('onlyPayed');
                $onlyPayed = new MCheckBox('onlyPayed', DB_TRUE, null, null, _M('Alocar somente inscrições cujo pagamento já tiver sido efetuado.', $module));
                $fields[] = new MHContainer('onlyPayedCnt', array($onlyPayedLabel, $onlyPayed));
            }

            $fields[] = new MButton('generateAllocation', _M('Gerar alocação',$module));
        }

        $this->SetFields($fields);
        $this->SetValidators($validators);

        parent::defineFields();
    }

    /**
     * Faz a alocação e retorna sucesso/falha
     */
    public function generateAllocation_click()
    {
        set_time_limit(0);

        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Obtém os dados
        $data = $this->getData();

        // Email a ser enviado
        $emailId = $data->roomAllocationEmailId;

        try
        {
            $countPriorities = count( SprEvaluation::listEvaluationWithOptions( $data->stepId ) );
            $priorities = array();

            for ($i = 0; $i < $countPriorities; $i++)
            {
                $_pri = $data->{"priority{$i}"};

                if ( strlen($_pri) > 0)
                {
                    if ( in_array($_pri, $priorities) )
                    {
                        throw new Exception( _M('Não pode haver uma prioridade repetida.', $module) );
                    }

                    $priorities[] = $_pri;
                }
            }

            // Parâmetros
            $opts = array(
                'selectiveProcessId' => $data->selectiveProcessId,
                'priorities' => $priorities,
                'onlyPayed' => $data->onlyPayed,
                'prioritySpecialNecessity' => $data->prioritySpecialNecessity,
                'groupByCourseOption' => $data->groupByCourseOption
            );
            SDatabase::beginTransaction();
            $count1 = SprStep::allocateByRoom($data->stepId, $opts);
            SDatabase::commit();

            if ( $emailId )
            {
                $emailSent = false;

                if ( (SAGU::getParameter('SELECTIVEPROCESS', 'SPR_SEND_MAIL') == DB_TRUE) )
                {
                    // Envia um email informando aos alunos suas salas
                    $busEmail = new BusinessBasicBusEmail();
                    $busCompany = new BusinessBasicBusCompany();

                    $dataEmail = $busEmail->getEmail($emailId);
                    $dataCompany = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
                    $emailData = SprSubscription::personStepPlace($data->stepId, $data->onlyPayed);

                    // Contador dos emails enviados com sucesso
                    $count = 0;
                    foreach ( (array)$emailData as $row )
                    {
                        $tags = array( '$PERSONNAME' => $row->personName,
                                       '$PERSONID' => $row->personId,
                                       '$SELECTIVEPROCESSDESCRIPTION' => $row->selectiveProcessDescription,
                                       '$STEPDESCRIPTION' => $row->stepDescription,
                                       '$LOCATIONDESCRIPTION' => $row->locationDescription,
                                       '$CITYDESCRIPTION' => $row->cityDescription,
                                       '$NEIGHBORHOODDESCRIPTION' => $row->neighborhoodDescription,
                                       '$NUMBER' => $row->number,
                                       '$COMPLEMENT' => $row->complement,
                                       '$ROOM' => $row->room,
                                       '$BUILDING' => $row->building,
                                       '$INSTITUTIONDESCRIPTION' => $dataCompany->name );

                        // Parameters
                        $from = strtolower($dataEmail->from);
                        $fromName = $dataCompany->acronym;
                        $recipient[$row->personName] = strtolower($row->personEmail);
                        $subject = str_replace('$SELECTIVEPROCESSDESCRIPTION', $row->selectiveProcessDescription, $dataEmail->subject);
                        $body = strtr($dataEmail->body, $tags);

                        $mail = new sendEmail($from, $fromName, $recipient, $subject, $body, array());
                        $emailSent = $mail->sendEmail();

                        //Limpa a variável.
                        unset($recipient);

                        if ( $emailSent )
                        {
                            $count++;
                            if ( ($count % 15) == 0 )
                            {
                                sleep(10);
                            }
                        }
                    }
                }
            }

            $this->AddInfo( array( _M('Alocação realizada com sucesso.', $module),
                                   _M('Total de inscrições alocadas: @1', $module, $count1) ) );
            if ( $emailSent )
            {
                $this->AddInfo(_M('@1 emails enviados com sucesso.', $module, $count));
            }
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }
}
?>