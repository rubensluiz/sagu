<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Cristian Edson Göhl [cristian@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 28/06/2011
 */
class FrmApprovedListByCourse extends SForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Lista de candidatos por curso', $module), null, null);

        // Desabilita botões da MToolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_RESET);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Processo seletivo
        $sprSP = new SprSelectiveProcess();
        $selectiveProcess = new MSelection('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Processo seletivo', $module), SprSelectiveProcess::listNormal());
        $selectiveProcess->addAttribute('onchange', $this->getAjaxAction('changeSelectiveProcessId', 'divMoreFields', false));
        $selectiveProcess->setJsHint(_M('Informe o processo seletivo', $module));
        $selectiveProcess->showRequiredLabel = true;
        $fields[] = $selectiveProcess;
        $validators[] = new MIntegerValidator('selectiveProcessId', _M('Processo seletivo', $module), 'required');
        
        // Campo para adição de componente(s) por ajax
        $fields[] = new MDiv('divMoreFields', $this->changeSelectiveProcessId($data));
        
        // Separador
        $fields[] = new MSeparator();

        $this->SetFields($fields);
        $this->SetValidators($validators);
        parent::defineFields();
    }
    
    public function changeSelectiveProcessId($args)
    {
        $args->selectiveProcessId = strlen($args->selectiveProcessId)> 0 ? $args->selectiveProcessId : $this->getFormValue('selectiveProcessId');
        if ( strlen($args->selectiveProcessId) > 0 )
        {
            $fields[] = new MSeparator();
            
            // Opção de curso
            $optionCourseLabel = new MText('optionCourseLabel', _M('Opção de curso', $module) . ':');
            $optionCourseLabel->setClass('m-caption m-caption-required');
            $optionCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
            
            $filters = new stdClass();
            $filters->selectiveProcessId = $args->selectiveProcessId;
            $options = SprOption::search($filters);
            if (count($options) > 0)
            {
                // Monta opções de curso.
                $listOptions = array();
                foreach ($options as $opt)
                {
                    $listOptions[] = array($opt->optionId, $opt->description);
                }
                
                $optionCourse = new MSelection('optionId', $this->getFormValue('optionId',$args->optionId), null, $listOptions);
                $optionCourse->setJsHint(_M('Informe a opção de curso', $module));
                $fields[] = new MHContainer('hctOptionId', array($optionCourseLabel, $optionCourse));
                $validators[] = new MIntegerValidator('optionId', _M('Opção de curso', $module), 'required');
                
                // Seta o novo validador.
                $this->SetValidators($validators);
            }
            
            $sprSP = new SprSelectiveProcess( $args->selectiveProcessId );
            if (!($sprSP->numberOfOptions > 0))
            {
                $fields[] = new MLabel( _M('Não foi encontrada a configuração de número de opções.', $module) );
            }
            else
            {
                // Número da opção
                $optionNumberLabel = new MText('optionNumberLabel', _M('Número da opção', $module) . ':');
                $optionNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
                
                // Monta os números de opção.
                $listOptions = array();
                for ($i=0; $i < $sprSP->numberOfOptions; $i++)
                {
                    $listOptions[] = array($i+1, $i+1);
                }
                
                $optionNumber = new MSelection('optionNumber', $this->getFormValue('optionNumber',$args->optionNumber), null, $listOptions);
                $optionNumber->setJsHint(_M('Caso queira, informe o número da opção', $module));
                $fields[] = new MHContainer('hctOptionNumber', array($optionNumberLabel, $optionNumber));
            }
               
        }
        return $fields ? $fields : new MHiddenField('optionId',null);
    }

    /**
     * Método para geração do Relatório
     */
    public function generateReport($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();

        if ( strlen($data->selectiveProcessId) > 0 )
        {
            $options['parameters']['selectiveProcessId'] = (integer)$data->selectiveProcessId;
        }
        else
        {
            $this->AddError(_M("Processo seletivo é obrigatório"));
        }

        if ( strlen($data->optionId) > 0 )
        {
            $options['parameters']['optionId'] = (integer)$data->optionId;
        }
        else
        {
            $this->AddError(_M("Opção de curso obrigatória"));
        }
        
        if ( strlen($data->optionNumber) > 0 )
        {
            $options['parameters']['optionNumber'] = (integer)$data->optionNumber;
        }
        
        $sreport = new SReport($options);
        $sreport->setReportName('approvedListByCourse');

        // Se não gerar o relatório.
        if ( !$sreport->generate() )
        {
            $this->addError(_M('Nenhum registro encontrado.', $module ));
        }
    }

    /**
     * Método que obtém os dados do formulário.
     */
    public function getTypesData() 
    {
        $data = new stdClass();
        $data->selectiveProcessId = $this->GetFormValue('selectiveProcessId');
        $data->optionId = $this->GetFormValue('optionId');
        $data->optionNumber = $this->GetFormValue('optionNumber');

        return $data;
    }
}
?>