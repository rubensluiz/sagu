<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of FrmInscritosNecessidadesEspeciais
 *
 * @author augusto
 */
class FrmInscritosNecessidadesEspeciais extends SForm
{
    /**
     * Método contrutor da classe FrmInscritosNecessidadesEspeciais.
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        parent::__construct(_M('Inscritos com necessidades especiais', $module), null, null);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array( 'event' => 'tbBtnPrint_click' )));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }
    
    /**
     * Cria os campos que ser?o gerados na tela.
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $fields[] = $hidden = new SHiddenField('limbo');
        //Field selective process
        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Processo seletivo', $module) . ':');
        $selectiveProcessLabel->setClass('m-caption m-caption-required');
        $selectiveProcessLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $selectiveProcessId = new MLookupTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId'), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'selectiveProcessDescription, limbo, stepId, stepDescription', $module, 'selectiveProcess', null,  array('selectiveProcessId'=>'selectiveProcessId', 'description' => 'selectiveProcessDescription'), true);        
        $selectiveProcessId->setJsHint(_M('Informe o código do processo seletivo',$module));
        $selectiveProcessDescription = new MTextField('selectiveProcessDescription', $this->getFormValue('selectiveProcessDescription'), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $selectiveProcessDescription->setReadOnly(true);
        $selectiveProcessDescription->setJsHint(_M('Descrição do processo seletivo',$module));
        $fields[] = $selectiveProcess = new MHContainer('selectiveProcessCnt',array($selectiveProcessLabel, $selectiveProcessId, $selectiveProcessDescription));
        $selectiveProcess->showLabel = true;
        $validators[] = new MIntegerValidator('selectiveProcessId', _M('Processo seletivo', $module), 'required');

        //Field step
        $stepLabel = new MText('stepLabel', _M('Etapa', $module) . ':');
        $stepLabel->setClass('m-caption');
        $stepLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $stepId = new MLookupTextField('stepId', $this->getFormValue('stepId'), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'stepDescription, selectiveProcessId, selectiveProcessDescription', $module, 'step', null, array('selectiveProcessId'=>'selectiveProcessId', 'selectiveProcessDescription' => 'selectiveProcessDescription'), true);
        $stepId->setJsHint(_M('Informe o código da etapa',$module));
        $stepDescription = new MTextField('stepDescription', $this->getFormValue('stepDescription'), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stepDescription->setReadOnly(true);
        $stepDescription->setJsHint(_M('Descrição da etapa',$module));
        $fields[] = $step = new MHContainer('stepCnt',array($stepLabel, $stepId, $stepDescription));
        $step->showLabel = true;
        $validators[] = new MIntegerValidator('stepId', _M('Etapa', $module));
        
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : SReport::FILETYPE_PDF, _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        
        $fields[] = new Separator('');
        $fields[] = new MButton('btnList', _M('Listar', $module));
        
        $fields[] = new MSeparator();
        $fields[] = $this->getGrid();
        
        parent::defineFields( array( "fields" => $fields, "validators" => $validators ) );
    }
    
    /**
     * Gera as informaç?es conforme filtro.
     * 
     * @param type $sender
     */
    public function getGrid()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $sprId  = MIOLO::_REQUEST('selectiveProcessId');
        $stepId = MIOLO::_REQUEST('stepId');
        
        $subscription = new SprSubscription();
        $dataGrid     = $subscription->getSpecialNecessitySubscriptions($sprId, $stepId);
        
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdInscritosNecessidadesEspeciais');
        $grid->setData($dataGrid);
        
        return $grid;
    }
    
    /**
     * Pega aç?o de imprimir da toolbar.
     */
    public function tbBtnPrint_click($sender = null)
    {
        try
        {
            if ( strlen(MIOLO::_REQUEST('selectiveProcessId')) > 0 )
            {
                //Parameters of the report
                $parameters = array();
                $parameters['selectiveprocessid'] = (int) MIOLO::_REQUEST('selectiveProcessId');
                
                if ( strlen(MIOLO::_REQUEST('stepId')) > 0 )
                {
                    $parameters['stepid'] = (int) MIOLO::_REQUEST('stepId');
                }

                $report = new SReport();
                $report->setReportName('inscritos_necessidades_especiais');
                $report->setFileType(MIOLO::_REQUEST('reportFormat'));
                $report->setParameters($parameters);
                $report->generate();
            }
            else
            {
                throw new Exception(_M("Deve ser informado um processo seletivo."));
            }
        }
        catch( Exception $e )
        {
            $this->Error($e->getMessage());
        }
    }
}

?>
