<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * DiverseConsultation form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/08/2005
 *
 **/

/**
 * Form to manipulate a classification
 **/
class FrmDiverseConsultation extends SForm
{
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Consultas diversas', $module), null, null);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        //Field cpf
        $cpfLabel = new MText('cpfLabel', _M('CPF', $module) . ':');
        $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $lkpFields = array (
            'personId',
            'personName'
        );
        $txtCpf = new MLookupTextField('txtCpf', $this->getFormValue('txtCpf', $this->txtCpf->value), _M('CPF',$module), 16, null, null, $lkpFields, 'basic', 'PhysicalPersonCPF', null, array('cpf' => 'txtCpf'), true);
        $txtCpf->setJsHint(_M('Informe o CPF', $module));
        $validators[] = new MCPFValidator('txtCpf', _M('CPF',$module), 'optional');
        $cntCPF = new MHContainer('cntCPF', array($cpfLabel, $txtCpf));
        $cntCPF->setShowLabel(false);
        $fields[] = $cntCPF;
        
        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setClass('m-caption m-caption-required');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $lkpFields = array (
            'personName', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'limbo', 
            'txtCpf'
        );        
        $fields[] = new SHiddenField('filterOnlySubscription', DB_TRUE);
        $fields[] = new SHiddenField('disableInsertNew', DB_TRUE);
        $personId = $personLookup = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId), _M('Código da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, $lkpFields, 'basic', 'PhysicalPerson', null, array('cpf' => 'txtCpf', 'filterOnlySubscription' => 'filterOnlySubscription', 'disableInsertNew' => 'disableInsertNew'), true);     
        $personId->addAttribute('onkeyDown', 'if (event.keyCode == 13) { this.onExit(); }');
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');
        $personName  = new MTextField('personName', $this->getFormValue('personName', $this->inscriptionData->personName), _M('Nome da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $cntPerson = new MHContainer('cntPerson', array($personLabel, $personId, $personName));
        $cntPerson->setShowLabel(false);
        $fields[] = $cntPerson;
        
        $fields[] = new MButton('btnSearch',_M('Localizar',$module));

        parent::defineFields(array('fields' => $fields, 'validators' => $validators, 'toolbar' => false));
    }

    public function btnSearch_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $fields = array();
        $tab = new MTabbedBaseGroup('tb' . rand());
        $personId = $this->getFormValue('personId');
        
        $filters = new stdClass();
        $filters->personId = $personId;
        $filters->orderByLastSubscription = DB_TRUE;

        if ( strlen($personId) > 0 )
        {
            $subscriptions = (array) SprSubscription::search($filters);

            foreach ( $subscriptions as $subscription )
            {
                $subscriptionId = $subscription->subscriptionId;
                $selectiveProcName = $subscription->selectiveProcess->description;
                
                $flds = array();
                $flds[] = $this->getInformations($subscription);
                $flds[] = $this->getCourseOptions($subscription);
                $flds[] = new MSeparator();
                $flds[] = $this->getStepInfo($subscription);
                $flds[] = new MSeparator();
                $flds[] = $this->getEvaluations($subscription);                
                
                $tab->createTab("tabSubscription{$subscriptionId}", $selectiveProcName, $flds);
            }
            
            if ( count($subscriptions) > 0 )
            {
                $fields[] = $tab;
            }
            else
            {
                $this->AddError(_M('Nenhuma inscrição encontrada para a pessoa selecionada.', $module));
            }
        }

        $this->addFields($fields);
    }
    
    /**
     * Obtem dados da inscricao
     * 
     * @param SprSubscription $sub
     * @return SInformationField 
     */
    private function getInformations(SprSubscription $sub)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $city = $sub->selectiveProcess->steps[0]->stepPlaces[0]->location;
        $lastStatus = end($sub->subscriptionStepInfo);
        
        $updateLink = $MIOLO->getActionURL($module, 'main:process:subscription', null, array('function' => 'update', 'subscriptionId' => $sub->subscriptionId));
        $updateLink = new MLink('lnk'.rand(), _M('(editar)', $module), $updateLink);
        
        if( $sub->invoiceId != null )
        {        
            $invoiceLink = $MIOLO->getActionURL('finance', 'main:report:receivableInvoiceConsult', null, array('invoiceId' => $sub->invoiceId, 'otherSide' => 'true'));
            $invoiceLink = new MLink('lnk'.rand(), '(visualizar)', $invoiceLink, null, '_new');
        }
        else
        {
            $invoiceLink = new MLabel('(visualizar)', '#999;');
        }

        $performanceLink = $MIOLO->getActionURL('selectiveProcess', 'main:document:performanceBulletin', null, array('event' => 'generateReport', 'subscriptionId' => $sub->subscriptionId));
        $performanceLink = new MLink('lnk'.rand(), _M('Imprimir', $module), $performanceLink);
        
        $div = new SInformationField(array(
            'title' => _M('Dados da inscrição', $module),
            'value' => array(
                _M('Código', $module) => $sub->subscriptionId . ' ' . $updateLink->generate(),
                _M('Processo seletivo', $module) => $sub->selectiveProcessId . ' - ' . $sub->selectiveProcess->description,
                _M('Cidade da prova', $module) => $city->cityId . ' - ' . $city->name,
                _M('Ensino médio completo', $module) => SAGU::getYesNo($sub->finishedHighSchool),
                _M('Grau de formação', $module) => $sub->formationLevel->description,
                _M('Data da inscrição', $module) => $sub->subscriptionDate,
                _M('Código do título', $module) => $sub->invoiceId . ' ' . $invoiceLink->generate(),
                _M('Língua estrangeira', $module) => $sub->subscriptionEvaluationOption[0]->evaluationOption->description,
                _M('Estado atual', $module) => $lastStatus->subscriptionStatus->description,
                _M('Boletim de desempenho', $module) => $performanceLink->generate(),
            ),
        ));
        
        return $div;
    }
    
    /**
     * Obtem opcoes da inscricao
     * 
     * @param SprSubscription $sub
     * @return MTableRaw 
     */
    private function getCourseOptions(SprSubscription $sub)
    {
        $rows = array();
        foreach ( (array) $sub->subscriptionOption as $opt )
        {
            $divOption = new MDiv('divOption', $opt->optionId);
            $divOption->addBoxStyle('float', 'right');
            
            $divPosition = new MDiv('divPosition', SAGU::NVL( $opt->position, '-' ));
            $divPosition->addBoxStyle('float', 'right');
            
            $rows[] = array(
                $divOption,
                $opt->option->optionCourses[0]->courseId,
                $opt->option->optionCourses[0]->courseName,
                $opt->option->optionCourses[0]->turnDescription,
                $opt->option->optionCourses[0]->unitDescription,
                $divPosition,
                ($opt->classificadopeloenem == DB_TRUE? 'Enem' : 'Vestibular' ),
            );
        }
        
        $table = new MTableRaw(_M('Opções', $module), $rows, array(
            _M('Opção', $module),
            _M('Curso', $module),
            _M('Nome do curso', $module),
            _M('Turno', $module),
            _M('Unidade', $module),
            _M('Posição', $module),
            _M('Forma de classificação', $module),
        ));
        
        return $table;
    }
    
    
    /**
     * Obtem tabela de desempenho por etapa
     *
     * @param SprSubscription $sub
     * @return MDiv 
     */
    private function getStepInfo(SprSubscription $sub)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $rows   = array();

        $steps = array();
        $first = true;
        foreach ( $sub->subscriptionStepInfo as $ssi )
        {
            $steps[] = $ssi->step->description;
            $makeRow = false;
            if( !$first )
            {
                for( $x=0; $x<sizeof($steps); $x++  )
                {
                    if( !($steps[$x] == $ssi->step->description) )
                    {  
                        $makeRow = true;
                    }
                }
            }
            else
            {
                $makeRow = true;                
                $first   = false;
            }
            
            if( $makeRow )
            {
                $divPosition = new MDiv('divPosition', SAGU::NVL( $ssi->position, '-' ));
                $divPosition->addBoxStyle('float', 'right');
                
                $divTotalPointsStep = new MDiv('divTotalPointsStep', SAGU::NVL( max(array($ssi->totalPointsStep, $ssi->totalPointsStepEnem)), '-' ));
                $divTotalPointsStep->addBoxStyle('float', 'right');
                
                $rows[] = array(
                    $ssi->step->description,
                    $ssi->subscriptionStatus->description,
                    $divPosition,
                    $divTotalPointsStep,                
                );
            }
        }
        
        $table = new MTableRaw(_M('Desempenho por etapa', $module), $rows, array(
            _M('Etapa', $module),
            _M('Estado', $module),
            _M('Posição', $module),
            _M('Total de pontos', $module),
        ));

        $ptsTotal = SAGU::NVL( $sub->getCurrentTotalPointsStep(), '-' );
        $totalPoints = new MTextLabel('lbl'.rand(), _M('Total de pontos geral: @1', $module, $ptsTotal));
        $totalPoints->addAttribute('style', 'float:right;');

        $div = new MDiv('div'.rand(), array($table, $totalPoints));
        
        return $div;
    }
    
    /**
     * Obtem tabela de avaliacoes
     * 
     * @param SprSubscription $sub
     * @return MTableRaw 
     */
    private function getEvaluations(SprSubscription $sub)
    {   
        $rows = array();
        
        foreach ( $sub->subscriptionEvaluationOption as $opt )
        {
            try
            {
                $evaluationId   = $opt->evaluationOption->evaluation->evaluationId;
                $subscriptionId = $sub->subscriptionId;

                $sprEvaluationPoints = new SprEvaluationPoints($evaluationId, $subscriptionId);
            }
            catch( Exception $e )
            {   
                /**
                 * Caso não existam avaliações para esta pessoa,
                 * não será necessário buscar pela mesma.
                 */
            }
            
            $divTotalPoints = new MDiv('divTotalPoints', SAGU::NVL( $sprEvaluationPoints->totalPoints, '-' ));
            $divTotalPoints->addBoxStyle('float', 'right');
                
            $rows[] = array(
                $opt->evaluationOption->evaluation->description,
                $divTotalPoints
            );
        }
        
        $table = new MTableRaw(_M('Avaliações', $module), $rows, array(
            _M('Avaliação', $module),
            _M('Nota', $module),
        ));
        
        return $table;
    }
}

?>