<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelo passo 5 do detalhamento de etapas.
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 20/12/2010
 *
 **/
class FrmStepPlace extends SStepByStepForm
{
    public $sub;

    public function __construct($steps = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
            $this->toolbar->enableButton( MToolBar::BUTTON_BACK );
            $this->toolbar->setButtonURL( MToolBar::BUTTON_BACK, $MIOLO->getActionURL($module, $action, null, array('function' => 'insert', 'event' => 'tbBtnNew:click', 'step' => '4')) );
            $this->toolbar->setIsPost( MToolBar::BUTTON_BACK );
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Load data
        $stepData = $this->getStepDataByForm('FrmSelectionStep');
        $stepId = $stepData->stepId;

        if ( $this->isFirstAccess() )
        {
            MSubDetail::clearData('stepPlaces');

            if ( strlen($stepId) > 0 )
            {
                $sprStep = new SprStep($stepId);
            }
        }

        //PlaceId
        $subFields[] = new SHiddenField('stepPlaceId');

        //IsInternal
        $isInternalLabel = new MText('isInternalLabel', _M('É interno',$module) . ':');
        $isInternalLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $isInternalLabel->setClass('m-caption m-caption-required');
        $isInternal = new MSelection('isInternal', null, $data->isInternal, SAGU::listTrueFalse(0));
        $isInternal->setJsHint( _M('Informe se o local é interno', $module) );
        $subFields[] = new MHContainer('isInternalCnt', array($isInternalLabel, $isInternal));
        $subFields[] = new MTextLabel('labelInformation', _M('Se selecionado sim deve ser preeenchido apenas o campo recurso físico e se selecionado não devem  ser preenchidos os campos local, número, complemento, sala e prédio.',$module));
        $subFields[] = new MSeparator();

        //PhysicalResource
        $physicalResourceLabel = new MText('physicalResourceLabel', _M('Recurso físico', $module) . ':');
        $physicalResourceLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $physicalResourceLabel->setClass('m-caption m-caption-required');
        $physicalResource = new MLookupTextField('physicalResourceId', $this->getFormValue('physicalResourceId',$data->physicalResourceId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'physicalResourceId, physicalResourceVersion, physicalResourceDescription, room, building', 'institutional', 'PhysicalResource', null, null, true);
        $physicalResource->setJsHint( _M('Informe o código do recurso físico', $module) );
        $physicalResourceVersion = new MTextField('physicalResourceVersion',$this->getFormValue('physicalResourceVersion',$data->physicalResourceVersion) , '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $physicalResourceVersion->setReadOnly(true);
        $pysicalResourseName = new MTextField('physicalResourceDescription',$this->getFormValue('physicalResourseDescription',$data->physicalResourseDescription) , '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $pysicalResourseName->setReadOnly(true);

        //Hct internal
        $hctIsIternal[] = new MHContainer('physicalResourceCnt', array($physicalResourceLabel, $physicalResource, $physicalResourceVersion, $pysicalResourseName));
        $subFields[] = new MBaseGroup('baseIsInternal', 'Interno', $hctIsIternal);

        $fieldRelatedId['countryId'] = 'countryId';
        $fieldRelatedId['stateId'] = 'stateId';
        $fieldRelatedId['cityId'] = 'cityId';
        $fieldRelatedId['neighborhoodId'] = 'neighborhoodId';
        
        //Location
        $hctLocation = new SLocationField('locationId', null, _M('Local',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),'', null, '', true, true, $fieldRelatedId);
        $hctLocation->setJsHint(_M('Informe o local da prova',$module));

        //Number
        $numberLabel = new MText('numberLabel', _M('Número', $module) . ':');
        $numberLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $numberLabel->setClass('m-caption m-caption-required');
        $number = new MTextField('number', $this->getFormValue('number', $data->number), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $number->setJsHint( _M('Informe o número', $module) );
        $hctDescription = new MHContainer('descriptionCnt', array($numberLabel, $number));

        //Complement
        $complementLabel = new MText('complementLabel', _M('Complemento', $module) . ':');
        $complementLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $complementLabel->setClass('m-caption m-caption-required');
        $complement = new MTextField('complement', $this->getFormValue('complement', $data->complement), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $complement->setJsHint( _M('Informe o complemento', $module) );
        $hctComplement = new MHContainer('complementCnt', array($complementLabel, $complement));

        //Room
        $roomLabel = new MText('roomLabel', _M('Sala', $module) . ':');
        $roomLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $roomLabel->setClass('m-caption m-caption-required');
        $room = new MTextField('room', $this->getFormValue('room', $data->room), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $room->setJsHint( _M('Informe a sala', $module) );
        $hctRoom = new MHContainer('roomCnt', array($roomLabel, $room));

        //Building
        $buildingLabel = new MText('buildingLabel', _M('Prédio', $module) . ':');
        $buildingLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $buildingLabel->setClass('m-caption m-caption-required');
        $building = new MTextField('building', $this->getFormValue('building', $data->building), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $building->setJsHint( _M('Informe o prédio', $module) );
        $hctBuilding = new MHContainer('buildingCnt', array($buildingLabel, $building));

        //HctExternal
        $hctExternal = new MBaseGroup('hctExternal', _M('Externo', $module), array($hctLocation, $hctDescription,$hctComplement,$hctRoom,$hctBuilding), 'vertical');
        $subFields[] = $hctExternal;

        //Vacancies
        $vacanciesLabel = new MText('vacanciesLabel', _M('Vagas', $module) . ':');
        $vacanciesLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $vacanciesLabel->setClass('m-caption m-caption-required');
        $vacancies = new MTextField('vacancies', $this->getFormValue('vacancies', $data->vacancies), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $vacancies->setJsHint( _M('Informe a quantidade de alunos que o local comporta', $module) );
        $hctVacancies = new MHContainer('vacanciesCnt', array($vacanciesLabel, $vacancies));
        $subFields[] = $hctVacancies;

        //AllocationOrder
        $allocationOrderLabel = new MText('allocationOrderLabel', _M('Ordem', $module) . ':');
        $allocationOrderLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $allocationOrderLabel->setClass('m-caption m-caption-required');
        $allocationOrder = new MTextField('allocationOrder', $this->getFormValue('allocationOrder', $data->allocationOrder), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $allocationOrder->setJsHint( _M('Informe a ordem da alocação da sala', $module) );
        $hctAllocationOrder = new MHContainer('allocationOrderCnt', array($allocationOrderLabel, $allocationOrder));
        $subFields[] = $hctAllocationOrder;

        //AllowDisabledPeople
        $allowDisabledPeopleLabel = new MText('allowDisabledPeopleLabel', _M('Necessidades especiais', $module) . ':');
        $allowDisabledPeopleLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $allowDisabledPeopleLabel->setClass('m-caption m-caption-required');
        $allowDisabledPeople = new MSelection('allowDisabledPeople', $this->getFormValue('allowDisabledPeople', $data->allowDisabledPeople), null,SAGU::listYesNo(0));
        $allowDisabledPeople->setJsHint( _M('Informe se o local está preparado para receber portadores de necessidades especiais', $module) );
        $hctAllowDisabledPeople = new MHContainer('allowDisabledPeopleCnt', array($allowDisabledPeopleLabel, $allowDisabledPeople));
        $subFields[] = $hctAllowDisabledPeople;


        //Columns
        $cols[] = new MGridColumn(_M('Código do local da etapa',$module), 'left', true, '', false, 'stepPlaceId');
        $cols[] = new MGridColumn(_M('É interno',$module), 'left', true, '', true, 'isInternal',false,SAGU::listTrueFalse(0, true));
        $cols[] = new MGridColumn(_M('Recurso físico', $module), 'left', true, '', false, 'physicalResourceId');
        $cols[] = new MGridColumn(_M('Recurso físico', $module), 'left', true, '', false, 'physicalResourceVersion');
        $cols[] = new MGridColumn(_M('Recurso físico', $module), 'left', true, '', true, 'physicalResourceDescription');
        $cols[] = new MGridColumn(_M('Local', $module), 'left', true, '', false, 'locationId');
        $cols[] = new MGridColumn(_M('Local', $module), 'left', true, '', true, 'locationName');
        $cols[] = new MGridColumn(_M('País', $module), 'left', true, '', false, 'countryId');
        $cols[] = new MGridColumn(_M('País', $module), 'left', true, '', true, 'countryName');
        $cols[] = new MGridColumn(_M('Estado', $module), 'left', true, '', false, 'stateId');
        $cols[] = new MGridColumn(_M('Estado', $module), 'left', true, '', true, 'stateName');
        $cols[] = new MGridColumn(_M('Cidade', $module), 'left', true, '', false, 'cityId');
        $cols[] = new MGridColumn(_M('Cidade', $module), 'left', true, '', true, 'cityName');
        $cols[] = new MGridColumn(_M('Bairro', $module), 'left', true, '', false, 'neighborhoodId');
        $cols[] = new MGridColumn(_M('Bairro', $module), 'left', true, '', true, 'neighborhoodName');
        $cols[] = new MGridColumn(_M('Número', $module), 'right', true, '', true, 'number');
        $cols[] = new MGridColumn(_M('Complemento', $module), 'left', true, '', true, 'complement');
        $cols[] = new MGridColumn(_M('Sala', $module), 'left', true, '', true, 'room');
        $cols[] = new MGridColumn(_M('Prédio', $module), 'left', true, '', true, 'building');
        $cols[] = new MGridColumn(_M('Vagas', $module), 'right', true, '', true, 'vacancies');
        $cols[] = new MGridColumn(_M('Ordem', $module), 'right', true, '', true, 'allocationOrder');
        $cols[] = new MGridColumn(_M('Necessidades especiais', $module), 'left', true, '', true, 'allowDisabledPeople',false,SAGU::listYesNo(0, true));

        $fields[] = $this->sub = new MSubDetail('stepPlaces', _M('Local da prova', $module), $cols, $subFields, true);

        if ( count($sprStep->stepPlaces) > 0 && $this->isFirstAccess() )
        {
           $this->sub->setData(SAGU::convertSTypeToSubDetail($cols, $sprStep->stepPlaces));
        }

        $this->sub->addActionEvent(MSubDetail::EVENT_ADD, 'validateFieldsSub', __CLASS__);

        $this->setFields($fields);
    }


    /*
     * Set validators in subDetail stepPlaces
     */
    public static function validateFieldsSub($args)
    {
        $MIOLO = MIOLO::getInstance();

        //Validate field isInternal
        $validators[] = new MRequiredValidator('isInternal', _M('É interno', $module));

        //If isInternal is true validate physicalResoursesId and set null in fields of the base group externo
        if( $args->isInternal == DB_TRUE )
        {
            $validators[] = new MRequiredValidator('physicalResourceId', _M('Recurso físico', $module));
            $args->locationId = null;
            $args->locationName = null;
            $args->countryId = null;
            $args->countryName = null;
            $args->stateId = null;
            $args->stateName = null;
            $args->cityId = null;
            $args->cityName = null;
            $args->neighborhoodId = null;
            $args->neighborhoodName = null;
            $args->number = null;
            $args->complement = null;
            $args->room = null;
            $args->building = null;
        }
        //If isInternal is false validate locationId and set null in fields of the base group interno
        elseif ( $args->isInternal == DB_FALSE )
        {
            $validators[] = new MRequiredValidator('locationId', _M('Local', $module));
            $validators[] = new MRequiredValidator('number', _M('Número', $module));
            $validators[] = new MRequiredValidator('complement', _M('Complemento', $module));
            $validators[] = new MRequiredValidator('room', _M('Sala', $module));
            $validators[] = new MRequiredValidator('building', _M('Prédio', $module));
            $args->physicalResourceId = null;
            $args->physicalResourceVersion = null;
            $args->physicalResourceDescription = null;
        }

        $validators[] = new MIntegerValidator('vacancies', _M('Vagas', $module),'required');
        $validators[] = new MIntegerValidator('allocationOrder', _M('Ordem', $module),'required');
        $validators[] = new MRequiredValidator('allowDisabledPeople', _M('Necessidades especiais', $module));

        //Instance of the MSubDetailValidators
        $instanceSubDetailValidators = new MSubDetailValidators();
        //Set validators in MSubDetailValidators
        $instanceSubDetailValidators->setValidators($validators);
        //Get validators of the instance MSubDetailValidators
        $validators = $instanceSubDetailValidators->transformToStdClasses();
        //Set validators in subDetail
        MSubDetail::setSessionValue('validators', $validators, 'stepPlaces');

        //Return values
        return $args;
    }
 
    public function finalizeButton_click()
    {

        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $stepData = $this->getStepDataByForm('FrmSelectionStep');
        $selectionStep = $this->getStepDataByForm('FrmSelectionStep');
        $evaluationData = $this->getStepDataByForm('FrmEvaluation');
        $stepTiebreakData = $this->getStepDataByForm('FrmStepTiebreak');
        $stepDocumentData = $this->getStepDataByForm('FrmStepDocument');
        $stepPlaceData = $this->getData();

        try
        {
            //New database transaction
            SDatabase::beginTransaction();

            //Step selective process
            $sprStep = new SprStep( $stepData->stepId );

            //SprEvaluation
            if ( count($evaluationData->evaluations) > 0 )
            {
                foreach ( $evaluationData->evaluations as $evaluation )
                {
                    //SprEvaluation
                    $sprEvaluation = new SprEvaluation();

                    $sprEvaluation->evaluationId = $evaluation->evaluationId;
                    $sprEvaluation->stepId = $selectionStep->stepId;
                    $sprEvaluation->description = $evaluation->description;
                    $sprEvaluation->maxPoints = $evaluation->maxPoints;
                    $sprEvaluation->minPoints = $evaluation->minPoints;
                    $sprEvaluation->weight = $evaluation->weight;
                    $sprEvaluation->informedAtSubscription = $evaluation->informedAtSubscription;
                    $sprEvaluation->maxSelectableOptions = $evaluation->maxSelectableOptions;
                    $sprEvaluation->allowAttachment = $evaluation->allowAttachment;
                    $sprEvaluation->enableDescriptionField = $evaluation->enableDescriptionField;
                    $sprEvaluation->enableDesiredScoreField = $evaluation->enableDesiredScoreField;
                    $sprEvaluation->isInternal =  $evaluation->isInternal;
                    $sprEvaluation->priority = $evaluation->priority;

                    if ( $evaluation->removeData )
                    {
                        $sprEvaluation->delete();
                    }
                    else
                    {
                        $sprEvaluations[] = $sprEvaluation;
                    }
                }

                $sprStep->evaluations = $sprEvaluations;
            }

            //SprStepTiebreak
            if ( count($stepTiebreakData->stepTiebreaks) > 0 )
            {
                foreach ( $stepTiebreakData->stepTiebreaks as $stepTiebreak )
                {
                    //SprStepTiebreak
                    $sprStepTiebreak = new SprStepTiebreak();
                    $sprStepTiebreak->stepTiebreakId = $stepTiebreak->stepTiebreakId;
                    $sprStepTiebreak->stepId = $selectionStep->stepId;
                    $sprStepTiebreak->tiebreakId = $stepTiebreak->tiebreakId;
                    $sprStepTiebreak->priority = $stepTiebreak->priority;
                    $sprStepTiebreak->tiebreakStepId = $stepTiebreak->tiebreakStepId;

                    if ( $stepTiebreak->removeData )
                    {
                        $sprStepTiebreak->delete();
                    }
                    else
                    {
                        $sprStepTiebreaks[] = $sprStepTiebreak;
                    }
                }
                
                $sprStep->stepTiebreaks = $sprStepTiebreaks;
            }

            //SprStepDocument
            if ( count($stepDocumentData->stepDocuments) > 0 )
            {
                foreach ( $stepDocumentData->stepDocuments as $stepDocument )
                {
                    //SprStepTiebreak
                    $sprStepDocument = new SprStepDocument();

                    $sprStepDocument->stepId = $selectionStep->stepId;
                    $sprStepDocument->stepDocumentId = $stepDocument->stepDocumentId;
                    $sprStepDocument->description = $stepDocument->description;
                    $sprStepDocument->allowFileAttach = $stepDocument->allowFileAttach;
                    $sprStepDocument->eObrigatorio = $stepDocument->eObrigatorio;
                    $sprStepDocument->arquivoEobrigatorio = $stepDocument->arquivoEobrigatorio;

                    if ( $stepDocument->removeData )
                    {
                        $sprStepDocument->delete();
                    }
                    else
                    {
                        $sprStepDocuments[] = $sprStepDocument;
                    }
                }

                $sprStep->stepDocuments = $sprStepDocuments;
            }

            //stepPlaceData
            
            // Se no cadastro da etapa, no processo seletivo, estiver a flag
            // "Permite escolher local na inscrição" estiver marcada como Sim,
            // precisa haver cadastro de locais de prova - ticket #38283
            if ( $sprStep->subscriberChoosesPlace == DB_TRUE && 
                 !(count($stepPlaceData->stepPlaces) > 0) )
            {
                throw new Exception(_M("No cadastro da Etapa, no Processo Seletivo, a opção 'Permite escolher local na inscrição' está marcada como SIM, por tanto é necessário o cadastro de, pelo menos, um local de prova.", $module));
            }
            
            if ( count($stepPlaceData->stepPlaces) > 0 )
            {
                foreach ( $stepPlaceData->stepPlaces as $stepPlace )
                {
                    //SprStepPlace
                    $sprStepPlace = new SprStepPlace();

                    $sprStepPlace->stepId = $selectionStep->stepId;
                    $sprStepPlace->stepPlaceId = $stepPlace->stepPlaceId;
                    $sprStepPlace->isInternal = $stepPlace->isInternal;
                    $sprStepPlace->number = $stepPlace->number;
                    $sprStepPlace->complement = $stepPlace->complement;
                    $sprStepPlace->room = $stepPlace->room;
                    $sprStepPlace->building = $stepPlace->building;
                    $sprStepPlace->physicalResourceId = $stepPlace->physicalResourceId;
                    $sprStepPlace->physicalResourceVersion = $stepPlace->physicalResourceVersion;
                    $sprStepPlace->locationId = $stepPlace->locationId;
                    $sprStepPlace->vacancies = $stepPlace->vacancies;
                    $sprStepPlace->allocationOrder = $stepPlace->allocationOrder;
                    $sprStepPlace->allowDisabledPeople = $stepPlace->allowDisabledPeople;

                    if ( $stepPlace->removeData )
                    {
                        if ( strlen($stepPlace->stepPlaceId) > 0 )
                        {
                            $filters = new stdClass();
                            $filters->stepPlaceId = $stepPlace->stepPlaceId;
                            
                            $sprSSP = new SprSubscriptionStepPlace();
                            $rows = $sprSSP->search($filters);
                            
                            if ( count($rows) > 0 )
                            {
                                throw new Exception(_M('Desculpe o transtorno... Não é possível excluir o Local da prova pois já existem inscrições associadas ao mesmo.', $module));
                            }
                        }
                        
                        $sprStepPlace->delete();
                    }
                    else
                    {
                        $sprStepPlaces[] = $sprStepPlace;
                    }
                }
            }

            $sprStep->stepPlaces = $sprStepPlaces;
            $sprStep->calculationMethod = $evaluationData->calculationMethod;
            $sprStep->digitacaoNotasSomenteAprovados = isset($evaluationData->digitacaoNotasSomenteAprovados) ? DB_TRUE : DB_FALSE;
            
            //Save the step details
            $sprStep->save();
            SDatabase::commit();

            parent::finalizeButton_click($args);

            $msg = (strlen($sprStep->stepId) > 0) ? SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED') : SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED_INFO');
            SAGU::information($msg, $MIOLO->getActionURL($module, $action, null, array('function'=>'search')));
        }
        catch (Exception $e)
        {
            parent::finalizeButton_click($args);
            
            $this->AddError( $e->getMessage() );
        }
    }
}
?>
