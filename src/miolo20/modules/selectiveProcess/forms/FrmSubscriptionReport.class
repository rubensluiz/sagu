<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Inscription reports form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2010
 *
 */
class FrmSubscriptionReport extends SForm
{

    /**
     * Construtor da classe
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Inscrição', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array( 'event' => 'tbBtnPrint_click' )));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     * */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');

        $data->reportOption = MIOLO::_REQUEST('reportOption');

        //Field selective process
        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Processo seletivo', $module) . ':');
        $selectiveProcessLabel->setClass('m-caption m-caption-required');
        $selectiveProcessLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $selectiveProcessId = new MLookupTextField('selectiveProcessId', null, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'selectiveProcessDescription', $module, 'selectiveProcess', null, array( 'selectiveProcessId' => 'selectiveProcessId' ));
        $selectiveProcessId->setJsHint(_M('Informe o código do processo seletivo', $module));
        $validators[] = new MRequiredValidator('selectiveProcessId', _M('Processo seletivo', $module), 'required');
        $selectiveProcessDescription = new MTextField('selectiveProcessDescription', $this->getFormValue('selectiveProcessDescription', $data->selectiveProcessDescription), _M('Descrição do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $selectiveProcessDescription->setJsHint(_M('Descrição do processo seletivo', $module));
        $selectiveProcessDescription->setReadOnly(true);
        $hctSelectiveProcess = new MHContainer('hctSelectiveProcess', array( $selectiveProcessLabel, $selectiveProcessId, $selectiveProcessDescription ));
        $hctSelectiveProcess->setShowLabel(false);
        $fields[] = $hctSelectiveProcess;

        //Option course
        $optionLabel = new MText( 'optionLabel', _M('Opção de curso', $module ) . ':' );
        $optionLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $optionId = new MLookupTextField( 'optionId', $this->getFormValue( 'optionId', $data->optionId ), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'optionDescription', 'selectiveProcess', 'optionCourseSelectiveProcess', null, array('selectiveProcessId' => 'selectiveProcessId'));
        $optionId->setJsHint( _M('Informe o código da opção', $module ) );
        $optionDescription = new MTextField( 'optionDescription', $this->getFormValue( 'optionDescription', $data->optionDescription ), _M('Descrição da opção', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE') );
        $optionDescription->setJsHint(_M('Descrição da opção', $module));
        $optionDescription->setReadOnly(true);
        $hctOption = new MHContainer( 'hctSelectiveProcess', array($optionLabel, $optionId, $optionDescription) );
        $hctOption->setShowLabel( false );
        $fields[] = $hctOption;
        
        // Report options
        $reportOptions = array( array( _M('Inscrições por curso normal', $module), 1 ),
                                array( _M('Inscrições por sexo', $module), 2 ),
                                array( _M('Inscrições por instituição', $module), 3 ));

        $reportOptionLabel = new MLabel(_M('Opções de relatório', $module) . ':');
        $reportOptionLabel->setClass('m-caption m-caption-required');
        $reportOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $reportOption = new MRadioButtonGroup('reportOption', '', $reportOptions, $this->getFormValue( 'reportOption', $data->reportOption));

        $reportOption->setShowLabel(false);
        $fields[] = new MHContainer('hctReportOption', array( $reportOptionLabel, $reportOption ));

        //Field report format
        //$fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : SReport::FILETYPE_PDF, _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        $fields[] = new MSeparator();

        // Separator
        $fields[] = new MSeparator();
        $fields[] = new MButton('btnGenerate', _M('Localizar Relatorio', $module));
        $fields[] = new MSeparator('');

        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }

    /**
     * Método geração e impressão do relatório com dados da grid
     */
    public function tbBtnPrint_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Parameters of the report
        if (strlen(MIOLO::_REQUEST('selectiveProcessId')) > 0)
        {
            $parameters['selectiveprocessid'] = (int)MIOLO::_REQUEST('selectiveProcessId');
        }
        if (strlen(MIOLO::_REQUEST('optionId')) > 0)
        {
            $parameters['optionid'] = (int)MIOLO::_REQUEST('optionId');
        }

        $report = new SReport();
        $report->setModule($module);
        $report->setReportName('subscription');
        $report->setFileType( MIOLO::_REQUEST('reportFormat') );
        $report->setParameters($parameters);
        $report->generate();

        if ( !$report->generate() )
        {
            $this->addError(_M('Não foi possível gerar o documento.', $module ));
        }
    }

    /**
     * Ação do botão exportar para CSV 
     */
    public function exportGridAsCSV_click()
    {
        //Obtem os dados do form
        $dataForm = $this->getData();

         if ( $dataForm->reportOption == 1 )
        {
             $data = $this->filtroRelatorioSearchGrid($dataForm);
        }
        elseif ( $dataForm->reportOption == 2 )
        {
            $data = SprReports::searchSubscriptionBySex($dataForm);
        }
        elseif ( $dataForm->reportOption == 3 )
        {
            $data = $this->filtroRelatorioSearchGrid($dataForm);
            $cont = 1;
            $data[0][14]='Instituição';
             foreach($data as $f)
             {
                $dataInst = SprSubscription::searchGrid($dataForm);
                $f[14]= $dataInst[$cont][19];
                $data[$cont][14]=$f[14];
                $cont = $cont+1;
             }
        }

        $data = MUtil::getArrayAsCSV($data);
        SAGU::returnAsFile('dados.csv', $data, 'text/csv');
    }
    
     public function exportGridAsHTML_click()
    {
        //Obtem os dados do form
        $dataForm = $this->getData();

        if ( $dataForm->reportOption == 1 )
        {
             $data = $this->filtroRelatorioSearchGrid($dataForm);
        }
        elseif ( $dataForm->reportOption == 2 )
        {
            $data = SprReports::searchSubscriptionBySex($dataForm);
        }
        elseif ( $dataForm->reportOption == 3 )
        {
            $data = $this->filtroRelatorioSearchGrid($dataForm);
            $cont = 1;
            $data[0][14]='Instituição';
             foreach($data as $f)
             {
                $dataInst = SprSubscription::searchGrid($dataForm);
                $f[14]= $dataInst[$cont][19];
                $data[$cont][14]=$f[14];
                $cont = $cont+1;
             }
        }

        $data = MUtil::getArrayAsHTML($data);
        SAGU::returnAsFile('dados.html', $data, 'text');
    }
    
    public function exportGridAsPDF_click()
    {
        //Obtem os dados do form
        $dataForm = $this->getData();

         if ( $dataForm->reportOption == 1 )
        {
             $data = $this->filtroRelatorioSearchGrid($dataForm);
        }
        elseif ( $dataForm->reportOption == 2 )
        {
            $data = SprReports::searchSubscriptionBySex($dataForm);
        }
        elseif ( $dataForm->reportOption == 3 )
        {
            $data = $this->filtroRelatorioSearchGrid($dataForm);
            $cont = 1;
            $data[0][14]='Instituição';
             foreach($data as $f)
             {
                $dataInst = SprSubscription::searchGrid($dataForm);
                $f[14]= $dataInst[$cont][19];
                $data[$cont][14]=$f[14];
                $cont = $cont+1;
             }
        }
  
        //$report = new sRelatorioPDF();
        //$report->setGridData($this->obterArrayComoPDF($data));
        //$report->setSql($data );
        
        $data = $this->obterArrayComoPDF($data);
        SAGU::returnAsFile('dados.pdf', $data, 'text');
    }

    /*
     * Função chamada na ação do botão localizar
     */
    public function btnGenerate_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Filters
        $dataForm = $this->getData();

        try
        {
            // Inscrição por curso normal
            if ($dataForm->reportOption == 1 )
            {
                $data = SprSubscription::searchGrid($dataForm);

                if ( count($data) > 0 )
                {
                    $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdSubscriptionReport',$data);
                    $grdResults->setData($data);
                    $grdResults->setTitle(_M('Relatório de inscrições por curso', $module));
                    unset($grdResults->actions);
                    // Adiciona grid no form
                    $this->addField($grdResults);
                }
                else
                {
                    throw new Exception(_M('Nenhum registro encontrado.', $module));
                }
            }
            
            // Inscrição por sexo
            if ($dataForm->reportOption == 2 )
            {
                $data = SprReports::searchSubscriptionBySex($dataForm);

                if ( count($data) > 0 )
                {
                    $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdSubscriptionReportBySex',$data);
                    $grdResults->setData($data);
                    $grdResults->setTitle(_M('Relatório de inscrições por sexo', $module));
                    unset($grdResults->actions);
                    // Adiciona grid no form
                    $this->addField($grdResults);
                }
                else
                {
                    throw new Exception(_M('Nenhum registro encontrado.', $module));
                }
            }
            // Inscritos por instituição
            if ($dataForm->reportOption == 3 )
            {
                $data = SprSubscription::searchGrid($dataForm);
                
                if ( count($data) > 0 )
                {
                    $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdSubscriptionByInstitution',$data);                    
                    $grdResults->setData($data);
                    $grdResults->setTitle(_M('Relatório de inscrições por Instituição', $module));
                    unset($grdResults->actions);
                    // Adiciona grid no form
                    $this->addField($grdResults);
                }
                else
                {
                    throw new Exception(_M('Nenhum registro encontrado.', $module));
                }
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
    
    public function filtroRelatorioSearchGrid($dataForm)
    {
         $data = SprSubscription::searchGrid($dataForm);
            $cont = 1;
        
            $filtro[0][0]='Inscricao';
            $filtro[0][1]='Cod.Pessoa';
            $filtro[0][2]='Pessoa';
            $filtro[0][3]='Data.Nasc';
            $filtro[0][4]='Sexo';
            $filtro[0][5]='Cidade';
            $filtro[0][6]='Logradouro';
            $filtro[0][7]='Bairro';
            $filtro[0][8]='Email';
            $filtro[0][9]='CPF';
            $filtro[0][10]='Tel.Residencial';
            $filtro[0][11]='Tel.Comercial';
            $filtro[0][12]='Identidade';
            $filtro[0][13]='Orgao';
        
        foreach($data as $f)
        {
            if (strlen($f[5]) > 27)
            {
            $f[5] = substr($f[5], 0, 24) . '...';
            $data[$cont][2]=$f[5];
            }
            $filtro[$cont][0]=$f[0];
            $filtro[$cont][1]=$f[4];
            $filtro[$cont][2]=$f[5];
            $filtro[$cont][3]=$f[7];
            $filtro[$cont][4]=$f[8];
            $filtro[$cont][5]=$f[9];
            $filtro[$cont][6]=$f[10];
            $filtro[$cont][7]=$f[11];
            $filtro[$cont][8]=$f[12];
            $filtro[$cont][9]=$f[13];
            $filtro[$cont][10]=$f[14];
            $filtro[$cont][11]=$f[15];
            $filtro[$cont][12]=$f[17];
            $filtro[$cont][13]=$f[18];
           
            $cont = $cont +1;
        }
        return $filtro;
    }
    
}
?>