<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Upload csv file note form
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 03/01/2011
 *
 **/

/**
 * Form to manipulate a uploadCsvFileNote
 **/
class FrmUploadCsvFileNote extends SForm
{
    const IDENTIFY_CPF = 1;
    const IDENTIFY_SUBSCRIPTION_CODE = 2;
    
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Importação de Notas', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Pega os dados
        $data = $this->getTypesData();

        // Field selective process (lookup selective process)
        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Processo seletivo', $module) . ':');
        $selectiveProcessLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $selectiveProcessId = new MLookupTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId',$data->selectiveProcessId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'selectiveProcessDescription', $module, 'SelectiveProcess', null, null, true);
        $selectiveProcessId->setJsHint(_M('Informe o código do processo seletivo',$module));
        $selectiveProcessDescription = new MTextField('selectiveProcessDescription', $this->getFormValue('selectiveProcessDescription', $data->selectiveProcessDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $selectiveProcessDescription->setReadOnly(true);
        $selectiveProcessDescription->setJsHint(_M('Descrição do processo seletivo',$module));
        $fields[] = $selectiveProcess = new MHContainer('selectiveProcessCnt',array($selectiveProcessLabel, $selectiveProcessId, $selectiveProcessDescription));
        $selectiveProcess->showLabel = true;
        $validators[] = new MIntegerValidator('selectiveProcessId', _M('Processo seletivo', $module));

        // Field step (lookup step)
        $stepLabel = new MText('stepLabel', _M('Etapa', $module) . ':');
        $stepLabel->setClass('m-caption m-caption-required');
        $stepLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $stepId = new MLookupTextField('stepId', $this->getFormValue('stepId',$data->stepId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'stepDescription, selectiveProcessId, selectiveProcessDescription', $module, 'Step', null, array('selectiveProcessId'=>'selectiveProcessId'), true);
        $stepId->setJsHint(_M('Informe o código da etapa',$module));
        $stepDescription = new MTextField('stepDescription', $this->getFormValue('stepDescription', $data->stepDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stepDescription->setReadOnly(true);
        $stepDescription->setJsHint(_M('Descrição da etapa',$module));
        $fields[] = $step = new MHContainer('stepCnt',array($stepLabel, $stepId, $stepDescription));
        $step->showLabel = true;
        $validators[] = new MIntegerValidator('stepId', _M('Etapa', $module), 'required');

        $fields[] = new Separator('');

        // Botão que libera o formulário de upload do arquivo CSV com as notas
        $fields[] = new MButton('showUploadFormButton', _M('Localizar',$module));

        // Quando botao Localizar for pressionado
        if ( strlen($data->stepId) > 0 )
        {
            $stepId = $data->stepId;
            $step = new SprStep($stepId);

            if ( !is_null($step->evaluations) && is_array($step->evaluations) && count($step->evaluations) > 0 )
            {
                // Opções do select de avaliações (com 1 a mais para o campo inscrição)
                
                if($step->classificationMethod==SprStep::CLASSIFICATION_METHOD_MANUAL)
                {
                    $nr = 6;
                }
                else
                {
                    $nr = 1;
                }
                
                for ( $count = 1; $count <= count($step->evaluations)+$nr; $count++ )
                {
                    $optionsSelect[] = array($count, _M('Coluna', $module) . ' ' . ($count));
                }
                
                // Forma de identificacao
                $identificacaoLabel = new MText('identificacaoLabel', _M('Identificação do candidato', $module) . ':');
                $identificacaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $identificacaoOptions = array(
                    self::IDENTIFY_CPF => _M('CPF', $module),
                    self::IDENTIFY_SUBSCRIPTION_CODE => _M('Código da inscrição', $module),
                );
                $identificacaoValue = MUtil::NVL($data->identificacao, self::IDENTIFY_CPF);
                $identificacao = new MSelection('identificacao', $identificacaoValue, null, $identificacaoOptions);
                $identificacao->addAttribute('onchange', 'alteraIdentificacao(this)');
                $cnt[] = new MContainer(rand(), array($identificacaoLabel, $identificacao));
                $this->page->addJsCode("
                    function alteraIdentificacao(obj)
                    {
                        // Muda o label de acordo com tipo selecionado
                        xGetElementById('subscriptionOrderLabel').innerHTML = obj.value == " . self::IDENTIFY_CPF . " ? '" . _M('CPF', $module) . "' : '" . _M('Código da inscrição', $module) . "';
                    }
                    
                    // Init
                    alteraIdentificacao( xGetElementById('identificacao') );
                ");

                // Campo incrição
                $subscriptionOrderLabel = new MText('subscriptionOrderLabel', '');
                $subscriptionOrderLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $subscriptionOrderLabel->setClass('m-caption m-caption-required');
                $subscriptionOrder = new MSelection('subscriptionOrder', $this->getFormValue('subscriptionOrder'), '', $optionsSelect);
                $subscriptionOrder->setJsHint(_M('Informe a ordem da coluna do código de inscrição',$module));
                $separator = new MText('separator', '');
                $separator->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

                $cnt[] = new MContainer('cnt', array($subscriptionOrderLabel, $subscriptionOrder, $separator));

                foreach ( $step->evaluations as $evaluation )
                {
                    // Campos das avaliações
                    $evaluationLabel = new MText('evaluation', $evaluation->description);
                    $evaluationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $evaluationField = new MSelection('evaluation'.$evaluation->evaluationId, $this->getFormValue('evaluation'.$evaluation->evaluationId), '', $optionsSelect);
                    $evaluationField->setJsHint(_M('Informe a ordem das colunas de avaliação',$module));

                    $cnt[] = new MContainer('cnt'.$evaluation->evaluationId, array($evaluationLabel, $evaluationField));

                }
                
                
                //$step = new SprStep($data->stepId);
                if($step->classificationMethod==SprStep::CLASSIFICATION_METHOD_MANUAL)
                {
                
                    // Campos da opção de curso
                    $optionIdLabel = new MText('optionIdLabel', _M('Opção de curso',$module));
                    $optionIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $optionIdField = new MSelection('optionDescriptionExtraParameter', $this->getFormValue('optionDescriptionExtraParameter'), '', $optionsSelect);
                    $optionIdField->setJsHint(_M('Informe a ordem das colunas da opção de curso',$module));
                    $cnt[] = new MContainer('cntOptionId', array($optionIdLabel, $optionIdField));


                    // Campos da pontuação geral
                    $pointsLabel = new MText('points', _M('Pontuação geral',$module));
                    $pointsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $pointsField = new MSelection('pointsExtraParameter', $this->getFormValue('pointsExtraParameter'), '', $optionsSelect);
                    $pointsField->setJsHint(_M('Informe a ordem das colunas da pontuação geral',$module));
                    $cnt[] = new MContainer('cntPoints', array($pointsLabel, $pointsField));


                    // Campos da posição na opção
                    $subscriptionoptionorderLabel = new MText('subscriptionoptionorder', _M('Posição na opção',$module));
                    $subscriptionoptionorderLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $subscriptionoptionorderField = new MSelection('subscriptionOptionOrderExtraParameter', $this->getFormValue('subscriptionOptionOrderExtraParameter'), '', $optionsSelect);
                    $subscriptionoptionorderField->setJsHint(_M('Informe a ordem das colunas da posição na opção',$module));
                    $cnt[] = new MContainer('cntsubscriptionoptionorder', array($subscriptionoptionorderLabel, $subscriptionoptionorderField));


                    // Campos da posição na posição geral
                    $positionLabel = new MText('positionLabel', _M('Posição geral',$module));
                    $positionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $positionField = new MSelection('positionExtraParameter', $this->getFormValue('positionExtraParameter'), '', $optionsSelect);
                    $positionField->setJsHint(_M('Informe a ordem das colunas da posição na opção',$module));
                    $cnt[] = new MContainer('cntPosition', array($positionLabel, $positionField));


                    //status
                    $statusLabel = new MText('statusLabel', _M('Status',$module));
                    $statusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $statusField = new MSelection('statusExtraParameter', $this->getFormValue('statusExtraParameter'), '', $optionsSelect);
                    $statusField->setJsHint(_M('Informe a ordem das colunas do status',$module));
                    $cnt[] = new MContainer('cntstatus', array($statusLabel, $statusField));
                    
                }
                
                
                // Campo de upload do arquivo CSV
                $uploadCsvFileNote = new MFileField('uploadCsvFileNote', null, _M('Importar arquivo csv - registro de inscrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $bsg = new MBaseGroup('bsg', ' ' . _M('Ordem de avaliações para importação do arquivo csv', $module) . ' ', $cnt, 'vertical');
                $textMessage = new MTextLabel(rand(), _M('Abaixo, selecione a ordem de importação das colunas para o arquivo CSV. Para selecionar a ordem, utilize números entre 1 e @1', $module, count($step->evaluations)). '. ' . _M('Utilize "@1" como separador.', $module, SAGU::getParameter('BASIC', 'CSV_SEPARATOR')));

                $fields[] = new Separator();
                $fields[] = $textMessage;
                $fields[] = new Separator();
                $fields[] = $bsg;
                $fields[] = new Separator();
                $fields[] = $uploadCsvFileNote;
                $fields[] = new MButton('submit_button', _M('Enviar', $module));
            }
            else
            {
                $this->AddError(_M('Nenhuma avaliação foi encontrada para essa etapa.', $module));
            }
        }
        
        $this->SetFields($fields);
        $this->SetValidators($validators);

        parent::defineFields();
    }
    

    /**
     * Event triggered when user chooses Submit from form
     */
    public function submit_button_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = SAGU::getFileModule(__FILE__);

        // Instancia o business file
        $busFile = new BusinessBasicBusFile();
        $busDocument = new BusinessBasicBusDocument();

        // Pega os dados
        $stepId = MIOLO::_REQUEST('stepId');
        $subscriptionOrder = MIOLO::_REQUEST('subscriptionOrder');
        $identificacao = MIOLO::_REQUEST('identificacao');

        // Pega a etapa
        $step = new SprStep($stepId);

        try
        {
            SDatabase::beginTransaction();
            
            // Se não tem etapa
            if ( is_null($step) )
            {
                throw new Exception(_M('Essa etapa não existe ou faltam dados.', $module));
            }

            // Tenta pegar o arquivo que foi enviado
            if ( $_FILES["uploadCsvFileNote"]["error"] === 0 )
            {
                $data->uploadFileName = $_FILES["uploadCsvFileNote"]["name"];
                $data->contentType = $_FILES["uploadCsvFileNote"]["type"];
                $data->size = $_FILES["uploadCsvFileNote"]["size"];

                $tempFile = $_FILES["uploadCsvFileNote"]["tmp_name"];

                // Grava o arquivo
                $fileId = $busFile->insertFile($data, $tempFile);
            }

            // Se não existe o arquivo
            if ( !$fileId )
            {
                throw new Exception(_M('Falha no envio do arquivo. Por favor, verifique se você selecionou o arquivo a ser importado e tente novamente.', $module));
            }

            // Abre o arquivo e importa os dados
            $content = $busFile->getFileAsString($fileId, true);

            if ( !$content )
            {
                // Se não encontrou arquivo, ou não foi possível ler
                throw new Exception(_M('Erro no nome do arquivo, localização do arquivo ou tipo do arquivo. Não foi possível importar as notas.', $module));
            }

            // Verifica se a etapa possui avaliações
            if ( is_null($step->evaluations) || !is_array($step->evaluations) || (is_array($step->evaluations) && count($step->evaluations) == 0) )
            {
                throw new Exception(_M('Não há avaliações para esta etapa.', $module));
            }

            // Percorre todas as avaliações da etapa
            foreach ( $step->evaluations as $evaluation )
            {
                // Armazena no array a ordem das colunas de importação informada para cada avaliação.
                // Sendo que a chave do array será o evaluationId
                if ( strlen(MIOLO::_REQUEST('evaluation'.$evaluation->evaluationId)) > 0 )
                {
                    $arraySequence[$evaluation->evaluationId] = MIOLO::_REQUEST('evaluation'.$evaluation->evaluationId);
                }
            }

            // Verifica se montou mesmo o array de avaliações e suas ordens
            if ( is_null($arraySequence) || (is_array($arraySequence) && (count($arraySequence) == 0)) )
            {
                throw new Exception(_M('Problema no preenchimento dos campos "ordem".', $module));
            }

            // Adiciona a ordem da inscrição nesse array
            $arraySequence['subscription'] = $subscriptionOrder;

            // Chaves do array $arraySequence
            $keysExamId = array_keys($arraySequence);

            // Verifica se existem números iguais digitados nos campos ordem
            for ( $i = 0 ; $i < count($keysExamId); $i++ )
            {
                for ( $j = 0 ; $j < count($keysExamId); $j++ )
                {
                    if ( $j != $i ) // Verifica se a chave não é a mesma
                    {
                        if ( ($arraySequence[$keysExamId[$i]] == $arraySequence[$keysExamId[$j]]) && (strlen($arraySequence[$keysExamId[$i]]) > 0) )
                        {
                            // Existem números iguais, tem que mostrar erro
                            throw new Exception(_M('Os valores dos campos coluna não podem repetir.', $module));
                        }
                    }
                }
            }

            // Reordena o array
            asort($arraySequence);

            // Se o arquivo foi enviado com sucesso, lê linha a linha
            $tableColumns[] = ""; // Cria primeira linha/coluna da tabela de inscrições existentes
            foreach ( $content as $linha => $line )
            {
                unset($data);

                // Quebra no separador cadastrado na tabela de parametros
                $lineArray = explode(SAGU::getParameter('BASIC', 'CSV_SEPARATOR'), $line);

                if ( is_null($lineArray) || (is_array($lineArray) && (count($lineArray) == 0)) )
                {
                    // Não há dados na linha
                    throw new Exception(_M('Arquivo incorreto ou problemas nas linhas de importação. Não foi possível ler o arquivo.', $module));
                }

                // Tem dados na linha, foi informada ao menos uma avaliação para importar
                
                $x = 0; // Contador
                foreach ( $arraySequence as $key1 => $value1 )
                {
                    // Popula o $data com os códigos de inscrição
                    if ( strlen($lineArray[$value1-1]) > 0 )
                    {
                        // Tem dados na linha e coluna referidas;
                        if ( $key1 == 'subscription' )
                        {
                            // Obtem id (que pode ser hora codigo da inscricao e hora CPF)
                            $identify = $lineArray[$value1-1];
                            
                            $subscriptionId = null;
                            if ( $identificacao == self::IDENTIFY_CPF )
                            {
                                $cpf = $identify;
                                
                                $filters = new stdClass();
                                $filters->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
                                $filters->content = $cpf;
                                $rows = $busDocument->searchDocument($filters);
                                
                                if ( count($rows) > 0 )
                                {
                                    $document = $busDocument->getDocument($rows[0][0], $rows[0][2]);

                                    // Busca inscricao
                                    $filters = new stdClass();
                                    $filters->selectiveProcessId = $step->selectiveProcessId;
                                    $filters->personId = $document->personId;
                                    $rows = SprSubscription::search($filters);
                                    
                                    $subscriptionId = $rows[0]->subscriptionId;
                                }
                                
                                if ( !$subscriptionId )
                                {
                                    throw new Exception( _M('Não foi encontrado uma inscrição no processo seletivo selecionado para o CPF: @1 (linha @2 do arquivo)', $module, $cpf, $value1) );
                                }
                            }
                            else
                            {
                                $subscriptionId = $identify;
                            }
                            
                            $data->subscriptionId = $subscriptionId;
                        }
                        elseif ( strlen($value1) > 0 )
                        { 
                            $note = $lineArray[$value1-1];
                            
                            if ( $this->isValidNote($note) )
                            {
                                $data->notes[$x]->note = $note;
                                $data->notes[$x]->evaluationId = $key1;

                                $x++;
                            }
                        }
                    }
                    else
                    {
                        // Não existem dados nesta columa citada para importação para esta inscrição
                        foreach ( $step->evaluations as $evaluation )
                        {
                            if ( $evaluation->evaluationId == $key1 )
                            {
                                throw new Exception(_M('Falha no arquivo CSV enviado. Faltam uma ou mais notas para uma ou mais avaliações.', $module, $evaluation->description));
                            }
                        }
                    }
                }
                
                foreach ( $step->evaluations as $ev )
                {
                    $note = $lineArray[ MIOLO::_REQUEST('evaluation' . $ev->evaluationId) - 1 ];
                    if ( $this->isValidNote($note) )
                    {
                        $data->notes[$ev->evaluationId] = $note;
                    }
                }
                
                //'optionIdExtraParameter', 'pointsExtraParameter', 'subscriptionoptionorderExtraParameter', 'positionExtraParameter', 'statusExtraParameter'
                //adiciona os parametros extras a importacao
                $extraParameters = array('optionDescription', 'points', 'subscriptionOptionOrder', 'position', 'status');
                foreach($extraParameters as $extra)
                {
                    $data->$extra = $lineArray[MIOLO::_REQUEST($extra.'ExtraParameter')-1];
                }
                                
                $data->linha = $linha+1;

                // Se tem código de inscrição
                if ( strlen($data->subscriptionId) > 0 )
                {
                    $filters = new stdClass();
                    $filters->subscriptionId = $data->subscriptionId;

                    $subscription = new SprSubscription();
                    $subscriptionData = $subscription->search($filters);

                    if ( !is_null($subscriptionData[0]->physicalPerson->personId) )
                    {
                        // Inscrição informada no arquivo EXISTE no processo seletivo
                        $thereAreInscription[] = $data;
                    }
                    else
                    {
                        // Esta inscrição informada no arquivo NÃO EXISTE no sistema
                        // Exibe mensagem ou MTableRaw
                        $noThereAreInscription[] = $data;
                    }
                }
            }

            // Colunas da MTableRaw
            $tableColumns[] = _M('Código da inscrição', $module);

            foreach ( $step->evaluations as $evaluation )
            {
                $tableColumns[] = $evaluation->description;
            }

            // Tabela das notas importadas, subscrições que já existiam no sistema
            if ( $thereAreInscription )
            {
                $iteratorLine = 0; // Controla a linha corrente da tabela
                foreach ( $thereAreInscription as $inscriptionData )
                {
                    // Percorrea as notas do arquivo
                    $thereAreInscriptionValues[$iteratorLine][0] = '<font color="blue"><b>' . _M('Nova nota', $module) . '</b></font>'; // Primeira célula em branco
                    $thereAreInscriptionValues[$iteratorLine][1] = '<center><b>'.$inscriptionData->subscriptionId . '</b></center>';

                    foreach ( $inscriptionData->notes as $notes )
                    {
                        $x = 2;
                        foreach ( $step->evaluations as  $evaluation )
                        {
                            if ( $evaluation->evaluationId == $notes->evaluationId )
                            {
                                // Adiciona em azul a nova nota
                                $notes->note = trim($notes->note);
                                $notes->note = str_replace(',', '.', $notes->note);
                                $notes->note = SAGU::formatNumber($notes->note, SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE'));
                                $thereAreInscriptionValues[$iteratorLine][$x] = '<center><font color="blue"><b>' . $notes->note . '</b></font></center>';
                            }
                            else
                            {
                                if ( !(strlen($thereAreInscriptionValues[$iteratorLine][$x]) > 0) )
                                {
                                    // Se uma nota tiver em branco, substituir por "-"
                                    $thereAreInscriptionValues[$iteratorLine][$x] = '-';
                                }
                            }

                            $x++;
                        }
                    }

                    $iteratorLine++;

                    $filters3->subscriptionId = $inscriptionData->subscriptionId;

                    // Notas antigas no sistema
                    $thereAreInscriptionValues[$iteratorLine][0] = '<font color="red">' . _M('Nota atual', $module) . '</font>';
                    $thereAreInscriptionValues[$iteratorLine][1] = '<center><b>'.$inscriptionData->subscriptionId . '</b></center>';

                    $x = 2;
                    foreach ( $step->evaluations as  $evaluation )
                    {
                        $filters = new stdClass();
                        $filters->evaluationId = $evaluation->evaluationId;
                        $filters->subscriptionId = $inscriptionData->subscriptionId;

                        $sprEvaluationPoints = new SprEvaluationPoints();
                        $totalPoints = $sprEvaluationPoints->search($filters);

                        if ( count($totalPoints) > 0 )
                        {
                            // Nota antiga
                            $thereAreInscriptionValues[$iteratorLine][$x] = '<center><font color="red"><b>' . $totalPoints[0]->totalPoints . '</b></font></center>';
                        }
                        else
                        {
                            // Se uma nota tiver em branco, substituir por "-"
                            $thereAreInscriptionValues[$iteratorLine][$x] = '<center><font color="red"><b>-</b></font></center>';
                        }

                        $x++;
                    }

                    $iteratorLine++;
                }
            }

            $thereAreInscriptionTR = new MTableRaw(_M('Inscrições (existentes no sistema) e suas notas importadas', $module), $thereAreInscriptionValues, $tableColumns);

            $this->addField(new MSeparator(''));
            $this->addField($thereAreInscriptionTR);
            $this->addField(new MSeparator(''));
            $this->addField(new MSeparator(''));
            $this->addField(new MSeparator(''));

            // Tabela das notas de inscrições inexistentes no sistema
            if ( is_array($noThereAreInscription) && (count($noThereAreInscription) > 0) )
            {
                $textMessage1 = new MTextLabel('textMessage1', _M('Abaixo, a lista de assinaturas incorrectas ou assinaturas que não estão no sistema', $module));
                $textMessage1->setColor('red');

                $this->addField($textMessage1);
                
                if ( $noThereAreInscription )
                {
                    foreach ( $noThereAreInscription as $key2 => $value2 )
                    {
                        // Subscrição
                        $noTherAreInscriptionValues[$key2][] = '<center>'.$value2->subscriptionId.'</center>';

                        foreach ( $value2->notes as $key3 => $notes )
                        {
                            for ( $x = 0; $x < count($step->evaluations); $x++ )
                            {
                                if ( $step->evaluations[$x]->evaluationId == $notes->evaluationId )
                                {
                                    // Nota
                                    $noTherAreInscriptionValues[$key2][$x+1] = '<center>' . $notes->note . '</center>';
                                }
                                else
                                {
                                    if ( !(strlen($noTherAreInscriptionValues[$key2][$x+1]) > 0) )
                                    {
                                        // Caso não tenha nota, um traço
                                        $noTherAreInscriptionValues[$key2][$x+1] = '-';
                                    }
                                }
                            }
                        }
                    }
                }

                // Remove a primeira coluna (a tabela de notas de subscrições que
                // não existem tem uma coluna a menos)
                for ( $k=1; $k < count($tableColumns); $k++ )
                {
                    $tableColumns2[] = $tableColumns[$k];
                }

                $noareInscriptionTR = new MTableRaw(_M('Subscrição incorreta ou não cadastrada, sem dados no sistema', $module) . ' - ' . _M('Esta lista não foi importada', $module), $noTherAreInscriptionValues, $tableColumns2 );

                $this->addField(new MSeparator(''));
                $this->addField($noareInscriptionTR);
                $this->addField(new MSeparator(''));
            }

            // Se não tiver nenhuma das inscrições no sistema
            if ( is_null($thereAreInscription) || (is_array($thereAreInscription) && count($thereAreInscription) == 0) )
            {
                // Se entrar aqui, não foi informado nenhum número para todas as avaliações
                throw new Exception(_M('Inscrições importadas inexistentes no sistema. Nenhuma nota foi importada.', $module));
            }

            $ok = true;
            foreach ( $thereAreInscription as $inscriptionData )
            {                
                if ( $step->classificationMethod == SprStep::CLASSIFICATION_METHOD_MANUAL )
                {
                    $filters = new stdClass();
                    $filters->selectiveProcessId = $step->selectiveProcessId;
                    $filters->description = $inscriptionData->optionDescription;
                    $rows = SprOption::search($filters);
                    $optionId = $rows[0]->optionId;

                    if(  count($rows)<=0 )
                    {
                        throw new Exception(_M('Não foi encontrada a opção de curso @1 da linha @2 do arquivo csv', $module, $inscriptionData->optionDescription, $inscriptionData->linha));
                    }

                    $rows = SprSubscriptionStatus::search(array('description'=>trim($inscriptionData->status)));
                    $subscriptionStatusId = $rows[0]->subscriptionStatusId;

                    if(  count($rows)<=0 )
                    {
                        throw new Exception(_M('Não foi encontrada o estado @1 da linha @2 do arquivo csv', $module, $inscriptionData->status, $inscriptionData->linha));
                    }

                    //salva na subscriptionoption se estiver na ultima estapa


                    if(SprStep::getLastStep($step->selectiveProcessId)==$step->stepId)
                    {
                        $filters = new stdClass();
                        $filters->subscriptionId = $inscriptionData->subscriptionId;
                        $filters->optionId = $optionId;
                        $rows = SprSubscriptionOption::search($filters);
                        $subscriptionOption = is_object($rows[0]) ? $rows[0] : new SprSubscriptionOption();
                        $subscriptionOption->subscriptionId = $inscriptionData->subscriptionId;
                        $subscriptionOption->optionId = $optionId;
                        $subscriptionOption->subscriptionStatusId = $subscriptionStatusId;
                        $subscriptionOption->subscriptionOptionOrder = $inscriptionData->position;

                        //posicao no curso
                        $subscriptionOption->position = $inscriptionData->subscriptionOptionOrder;

                        //Aptidao para matricula e ocupaçao de vagas de cotas
                        if( $subscriptionStatusId==SprSubscriptionStatus::CLASSIFIED || $subscriptionStatusId==SprSubscriptionStatus::CLASSIFIED_IN_QUOTE )
                        {
                            $subscriptionOption->canEnroll = 't';
                        }
                        else
                        {
                            $subscriptionOption->canEnroll = 'f';
                        }

                        if($subscriptionStatusId==SprSubscriptionStatus::CLASSIFIED_IN_QUOTE)
                        {
                            $subscriptionOption->useQuota = 't';
                        }
                        else
                        {
                            $subscriptionOption->useQuota = 'f';
                        }

                        $subscriptionOption->updateJustification = 'CLASSIFICADO EM '.date('d/m/Y H:i:s').' POR '.SAGU::getUsuarioLogado();

                        $subscriptionOption->optionNumber = 1; #FIXME: verificar qual valor passar por padrao;

                        $ok = $ok && $subscriptionOption->save();
                    }
                    
                    $filters = new stdClass();
                    $filters->subscriptionId = $inscriptionData->subscriptionId;
                    $filters->stepId = $step->stepId;
                    $rows = SprSubscriptionStepInfo::search($filters);
                    $subscriptionstepinfo = is_object($rows[0]) ? $rows[0] : new SprSubscriptionStepInfo();
                    $subscriptionstepinfo->subscriptionId = $inscriptionData->subscriptionId;
                    $subscriptionstepinfo->stepId = $step->stepId;
                    $subscriptionstepinfo->useInternalEvaluations = DB_TRUE; // FIXME: Verificar se deve ser true ou false
                    $subscriptionstepinfo->subscriptionStatusId = $subscriptionStatusId;

                    //salva pontuacao na etapa final
                    $subscriptionstepinfo->totalPointsStep = $inscriptionData->points; //moises

                    //salava posicao na classificao geral
                    $subscriptionstepinfo->position = $inscriptionData->position;

                    $ok = $ok && $subscriptionstepinfo->save();
                }
                
                foreach ( $inscriptionData->notes as $note )
                {
                    if($note->evaluationId && $note->note)
                    {
                        $evaluationPoints = new SprEvaluationPoints();
                        $evaluationPoints->evaluationId = $note->evaluationId;
                        $evaluationPoints->subscriptionId = $inscriptionData->subscriptionId;
                        $evaluationPoints->totalPoints = $note->note;

                        // Salva as novas notas
                        $ok = $ok && $evaluationPoints->save();
                    }
                }
            }

            SprSubscriptionStepInfo::updateTotalPointsStep($step->stepId);
            
            SDatabase::commit();

            // Mensagem de sucesso ou falha
            if ( $ok )
            {
                $this->AddInfo(_M('Notas importadas com sucesso.', $module));
            }
            else
            {
                $this->AddError(_M('Falha ao importar as notas.', $module));
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    public function getTypesData()
    {
        $data->stepId = MIOLO::_REQUEST('stepId');

        return $data;
    }
    
    
    /**
     * Retorna se conteudo de campo nota é valido
     *
     * @param string $value
     * @return boolean
     */
    public function isValidNote($value)
    {
        return ( $value != '-' ) && is_real( (real) $value );
    }
}
?>