<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 26/01/2012
 *
 */
class FrmSprSubstitutesCall extends SForm
{
    public function __construct()
    {
        parent::__construct(null, null, null);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function,  array(SForm::FUNCTION_UPDATE,  SForm::FUNCTION_DELETE)) )
        {
            $substitutesCallId = MIOLO::_REQUEST('substitutesCallId');
            $fields[] = new MHiddenField('substitutesCallId', $substitutesCallId);
            $data = new SprSubstitutesCall($substitutesCallId);
        }
        
        $fields[] = new MDiv('limbo', null);
        
        // Processo seletivo
        $opts = array(
            'label'=>_M('Processo seletivo', $module),
            'item'=>'SelectiveProcess',
            'module'=>'selectiveProcess',
            'hint' => _M('Informe o Processo seletivo', $module),
            'required' => true,
        );
        $fields[] = $lkpSelectiveProcess = new SLookupContainer('selectiveProcessId', $data->selectiveProcessId, $opts);
        $lkpSelectiveProcess->addAttribute('onblur', SForm::getAjaxAction('obtemSugestaoNumeroChamada', 'limbo', false));
        $validators[] = new MIntegerValidator('selectiveProcessId', _M('Processo seletivo', $module), 'required');

        // Número da chamada
        $fields[] = $substitutesCallNumber = new MTextField('substitutesCallNumber', $this->getFormValue('substitutesCallNumber', $data->substitutesCallNumber), _M('Número da chamada', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $substitutesCallNumber->setJsHint(_M('Informe o Número da chamada', $module));
        $validators[] = new MIntegerValidator('substitutesCallNumber', _M('Número da chamada', $module), 'required');

        //
        $fields[] = new MButton('btnExecute', _M('Executar', $module));
        
        //
        $fields[] = new MSeparator();
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
    }
    
    
    /**
     * Executa chamada
     */
    public function btnExecute_click()
    {
        SDatabase::beginTransaction();
        SprSubstitutesCall::chamadaAptosMatricular($this->getRequestValue('selectiveProcessId'), $this->getRequestValue('substitutesCallNumber'));
        SDatabase::commit();
        $this->AddInfo(_M('Chamada executada com sucesso.', $module));
    }
    
    
    /**
     *
     * @param stdClass $args
     * @return string
     */
    public function obtemSugestaoNumeroChamada($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        if ( strlen($args->selectiveProcessId) <= 0 )
        {
            return;
        }
        
        $lastCall = SprSubstitutesCall::obterSugestaoDaProximaChamada($args->selectiveProcessId);
        
        $MIOLO->page->addAJAXJsCode(" document.getElementById('substitutesCallNumber').value = '{$lastCall}' ");
        
        return '';
    }
}
?>
