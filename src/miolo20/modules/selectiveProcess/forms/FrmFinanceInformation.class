<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 20/12/2010
 */
class FrmFinanceInformation extends SStepByStepForm {

    public function __construct($steps = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);

            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        // Load data
        $allData = $this->getStepData();

        // Junta a data com o horário (timestamp)
        foreach ($allData->_steps as $step)
        {
            $step->startDate = trim($step->startDate . " " . $step->startTime);
            $step->endDate = trim($step->endDate . " " . $step->endTime);
        }

        $stepData = $this->getStepDataByForm(__CLASS__);

        if (is_numeric($allData->selectiveProcessId) && $this->isFirstAccess())
        {
            $sprSP = new SprSelectiveProcess($allData->selectiveProcessId);
            $sprFinInfo = $sprSP->financeInformation;
        }
        else
        {
            $sprSP = new SprSelectiveProcess();
            $sprFinInfo = $sprSP->financeInformation;
            if ($this->isFirstAccess())
            {
                $this->SetFormValue('description', null);
            }
            $sprFinInfo->description = $this->GetFormValue('description', $stepData->description);
            $sprFinInfo->inscriptionFee = $this->GetFormValue('inscriptionFee', $stepData->inscriptionFee);
            $sprFinInfo->parcelsNumber = $this->GetFormValue('parcelsNumber', $stepData->parcelsNumber);
            $sprFinInfo->bankAccountId = $this->GetFormValue('bankAccountId', $stepData->bankAccountId);
            $sprFinInfo->operationId = $this->GetFormValue('operationId', $stepData->operationId);
            $sprFinInfo->costCenterId = $this->GetFormValue('costCenterId', $stepData->costCenterId);
            $sprFinInfo->policyId = $this->GetFormValue('policyId', $stepData->policyId);
            $sprFinInfo->daysToMaturity = $this->GetFormValue('daysToMaturity', $stepData->daysToMaturity);
        }

        if ($allData->generateFinance == DB_TRUE)
        {
            // Descrição da taxa de inscrição
            $descriptionLabel = new MText('descriptionLabel', _M('Descrição', $module) . ':');
            $descriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $descriptionLabel->setClass('m-caption m-caption-required');
            $description = new MTextField('description', $sprFinInfo->description, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $description->setJsHint(_M('Informe a descrição da taxa de vestibular', $module));
            $flds[] = new MHContainer('descriptionCnt', array($descriptionLabel, $description));
            $validators[] = new MRequiredValidator('description', _M('Descrição', $module));

            // Valor da taxa de inscrição
            $inscriptionFeeLabel = new MText('inscriptionFeeLabel', _M('Taxa de inscrição', $module) . ':');
            $inscriptionFeeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $inscriptionFeeLabel->setClass('m-caption m-caption-required');
            $inscriptionFee = new MTextField('inscriptionFee', $sprFinInfo->inscriptionFee, _M('Taxa de inscrição', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), 'Ex.: 0.00');
            $inscriptionFee->setJsHint(_M('Informe o valor da taxa de inscrição', $module));
            $validators[] = new MFloatValidator('inscriptionFee', '', SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
            $flds[] = $mhc = new MHContainer('inscriptionFeeCnt', array($inscriptionFeeLabel, $inscriptionFee));
            $mhc->setShowLabel(false);

            // Numero de parcelas
            $parcelsNumberLabel = new MText('parcelsNumberLabel', _M('Número de parcelas', $module) . ':');
            $parcelsNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $parcelsNumberLabel->setClass('m-caption m-caption-required');
            $parcelsNumber = new MTextField('parcelsNumber', $sprFinInfo->parcelsNumber, _M('Número de parcelas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $parcelsNumber->setJsHint(_M('Informe o número de parcelas da taxa de matrícula', $module));
            $validators[] = new MIntegerValidator('parcelsNumber', $parcelsNumberLabel->label, 'required');
            $flds[] = $mhc2 = new MHContainer('parcelsNumberCnt', array($parcelsNumberLabel, $parcelsNumber));
            $mhc2->setShowLabel(false);

            //Distribuir por area
            $fixedDateForMaturityLabel = new MText('fixedDateForMeturityLabel', _M('Data de vencimento fixa ?') . ':');
            $fixedDateForMaturityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $fixedDateForMaturityValue = strlen($sprFinInfo->dateToMaturity) > 0 ? DB_TRUE : DB_FALSE;
            $fixedDateForMaturity = new MRadioButtonGroup('fixedDateForMaturity', null, SAGU::listYesNo(1), $fixedDateForMaturityValue, null, 'horizontal');
            $fixedDateForMaturity->setShowLabel(false);
            $fixedDateForMaturity->addAttribute('onclick', "checkDisplay()");

            $flds[] = new MHContainer('fixedDateForMaturityCnt', array($fixedDateForMaturityLabel, $fixedDateForMaturity));

            $MIOLO->page->addJsCode("function checkDisplay()
            {
                var checkd = document.getElementById('fixedDateForMaturity_0').checked;
                document.getElementById('divByDays').style.display = checkd ? 'none' : 'block';
                document.getElementById('divByDate').style.display = checkd ? 'block' : 'none';
            } ");

            //Chama onchange ao carregar formulario, para esconder a div de acordo com o selecionado
            $MIOLO->page->onload("checkDisplay( document.getElementById('fixedDateForMaturity') )");

            //Data inicial
            $dateToMaturityLabel = new MText('dateToMaturityLabel', _M('Data de vencimento', $module) . ':');
            $dateToMaturityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $dateToMaturityLabel->setClass('m-caption m-caption-required');
            $dateToMaturity = new MCalendarField('dateToMaturity', $sprFinInfo->dateToMaturity, _M('Data de vencimento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'), _M('Irá gerar os boletos com esta data de vencimento', $module));
            $dateToMaturity->validator->type = 'optional';
            $dateToMaturity->setJsHint(_M('Informe a data inicial desta etapa', $module));
            $dateToMaturityCnt = $mhcd = new MHContainer('dateToMaturityCnt', array($dateToMaturityLabel, $dateToMaturity));
            $mhcd->setShowLabel(false);

            $flds[] = new MSeparator();

            $flds[] = new MDiv('divByDate', $dateToMaturityCnt);

            //Dias para vencimento
            $daysToMaturityLabel = new MText('daysToMaturityLabel', _M('Dias para vencimento', $module) . ':');
            $daysToMaturityLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $daysToMaturityLabel->setClass('m-caption m-caption-required');
            $daysToMaturity = new MTextField('daysToMaturity', $sprFinInfo->daysToMaturity, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $daysToMaturity->setJsHint(_M('Informe o número de dias para vencimento do boleto', $module));
            $daysToMaturityCnt = new MHContainer('daysToMaturityCnt', array($daysToMaturityLabel, $daysToMaturity));

            $flds[] = new MDiv('divByDays', $daysToMaturityCnt);

            $bankAccountIdLabel = new MText('bankAccountIdLabel', _M('Conta bancária', $module) . ':');
            $bankAccountIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $bankAccountIdLabel->setClass('m-caption m-caption-required');
            $bankAccountId = new MLookupTextField('bankAccountId', $sprFinInfo->bankAccountId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'bankAccountIdName', 'finance', 'bankAccount', null, array('bankAccountId' => 'bankAccountId'), true);
            $bankAccountId->setJsHint(_M('Informe o código da conta bancária', $module));
            $validators[] = new MIntegerValidator('bankAccountId', _M('Conta bancária', $module), 'required');
            $bankAccountIdName = new MTextField('bankAccountIdName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $bankAccountIdName->setJsHint(_M('Descrição da conta bancária', $module));
            $bankAccountIdName->setReadOnly(true);
            $flds[] = new MHContainer('bankAccountIdCnt', array($bankAccountIdLabel, $bankAccountId, $bankAccountIdName));

            $flds[] = new SHiddenField('abc', '%');
            $operationIdLabel = new MText('operationIdLabel', _M('Operação', $module) . ':');
            $operationIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $operationIdLabel->setClass('m-caption m-caption-required');
            $operationId = new MLookupTextField('operationId', $sprFinInfo->operationId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationIdName', 'finance', 'operation', null, array('operationId' => 'operationId', 'description' => 'abc'), true);
            $operationId->setJsHint(_M('Informe o código da operação de cobrança', $module));
            $validators[] = new MIntegerValidator('operationId', _M('Operação', $module), 'required');
            $operationIdName = new MTextField('operationIdName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $operationIdName->setJsHint(_M('Descrição da operação de cobrança', $module));
            $operationIdName->setReadOnly(true);
            $flds[] = new MHContainer('operationIdCnt', array($operationIdLabel, $operationId, $operationIdName));

            $costCenterIdLabel = new MText('costCenterIdLabel', _M('Centro de custo', $module) . ':');
            $costCenterIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $costCenterIdLabel->setClass('m-caption m-caption-required');
            $costCenterId = new MLookupTextField('costCenterId', $sprFinInfo->costCenterId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costCenterIdName', 'accountancy', 'costCenter', null, array('costCenterIdId' => 'costCenterId'), true);
            $costCenterId->setJsHint(_M('Informe o código do centro de custo', $module));
            $validators[] = new MRequiredValidator('costCenterId', _M('Centro de custo', $module));
            $costCenterIdName = new MTextField('costCenterIdName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $costCenterIdName->setJsHint(_M('Centro de custo', $module));
            $costCenterIdName->setReadOnly(true);
            $flds[] = new MHContainer('costCenterIdCnt', array($costCenterIdLabel, $costCenterId, $costCenterIdName));

            $policyIdLabel = new MText('policyIdLabel', _M('Política', $module) . ':');
            $policyIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $policyIdLabel->setClass('m-caption m-caption-required');
            $policyId = new MLookupTextField('policyId', $sprFinInfo->policyId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'policyIdName', 'finance', 'policy', null, array('policyIdId' => 'policyId', 'description' => 'abc'), true);
            $policyId->setJsHint(_M('Informe o código da política', $module));
            $validators[] = new MRequiredValidator('policyId', _M('Política', $module));
            $policyIdName = new MTextField('policyIdName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $policyIdName->setJsHint(_M('Política', $module));
            $policyIdName->setReadOnly(true);
            $flds[] = new MHContainer('policyIdCnt', array($policyIdLabel, $policyId, $policyIdName));
        }
        else
        {
            $controls[] = new MSeparator();
            $controls[] = new MTextLabel('information', _M("No passo 'Processo Seletivo' foi determinado que não será gerado financeiro para este processo seletivo.", $module));
            $controls[] = new MSeparator();
            $flds[] = new MBaseGroup('baseFinance', _M('Taxa de vestibular', $module), $controls);
        }

        $this->setFields($flds);
        $this->SetValidators($validators);
    }

    public function finalizeButton_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $allData = $this->getStepData();
        $sprData = $this->getStepDataByForm('FrmSelectiveProcess');

        $finData = $this->getData();
        $finData->daysToMaturity = $this->getRequestValue('daysToMaturity'); // FIXME Verificar motivo de nao estar vindo no getData()
        $finData->fixedDateForMaturity = $this->getRequestValue('fixedDateForMaturity');

        // Caso foi escolhido um processo seletivo de modelo no primeiro passo, deve duplicar o registro na base.
        $allData->duplicate = is_numeric($allData->selectiveProcessIdChose);

        try
        {
            SDatabase::beginTransaction();

            if ($allData->generateFinance == DB_TRUE)
            {
                if ($finData->fixedDateForMaturity == DB_TRUE)
                {
                    if (strlen($finData->dateToMaturity) == 0)
                    {
                        throw new Exception(_M('Deve ser cadastrado uma data de vencimento', $module));
                    }

                    $finData->daysToMaturity = null;
                }
                else
                {
                    if (strlen($finData->daysToMaturity) == 0)
                    {
                        throw new Exception(_M('Deve ser cadastrado o número de dias para o vencimento', $module));
                    }

                    $finData->dateToMaturity = null;
                }
            }

            //SprSelectiveProcess
            $sprSP = new SprSelectiveProcess($allData->selectiveProcessId);
            $sprData->subscriptionStartDate = $sprData->subscriptionStartDate . ' ' . $sprData->subscriptionStartHour;
            $sprData->subscriptionEndDate = $sprData->subscriptionEndDate . ' ' . $sprData->subscriptionEndHour;
            $sprData->endOfProcessDate = $sprData->endOfProcessDate . ' ' . $sprData->endOfProcessHour;
            $sprData->allowOtherSubscriptions = $sprData->allowOtherSubscriptions == DB_TRUE ? DB_TRUE : DB_FALSE; // Default false
            $sprData->notifySubscribers = $sprData->notifySubscribers == DB_TRUE ? DB_TRUE : DB_FALSE;
            $sprData->generateFinance = $sprData->generateFinance;
            
            foreach ($sprData as $key => $value)
            {
                $sprSP->$key = $value;
            }

            /*
             * SprOption
             */
            // Prepara dados para quando for destinationModule = ACADEMIC ou PEDAGOGICO       
            if ($allData->destinationModule == sprSelectiveProcess::DEST_MODULE_ACADEMIC)
            {
                $this->saveOptionsAcademic(&$allData, &$sprSP);
            }
            else
            {
                if ($allData->destinationModule == SprSelectiveProcess::DEST_MODULE_PEDAGOGICO)
                {
                    $this->saveOptionsPedagogico(&$allData, &$sprSP);
                }
                else if (count($allData->options) > 0)
                {
                    $this->saveOptions(&$allData, &$sprSP);
                }
            }

            /*
             * SprStep
             */
            $step = new SprStep();
            if (count($allData->_steps) > 0)
            {
                $this->saveSteps(&$allData, &$sprSP);
            }

            // Finance information
            $this->saveFinanceInformation(&$allData, &$sprSP, $finData);

            if ($allData->duplicate)
            {
                $newSP = $sprSP->duplicate();
                $newSP->save();
            }
            else
            {
                $stepData = $this->getStepData();
                if ($stepData->destinationModule == SprSelectiveProcess::DEST_MODULE_PEDAGOGICO)
                {
                    $sprSP->save($stepData->destinationModule);
                }
                else
                {
                    $sprSP->save();
                }
            }

            if ((strlen($sprFinInfo->financeInformationId) > 0) && $allData->generateFinance == DB_FALSE)
            {
                $sprFinInfo->delete();
            }

            SDatabase::commit();

            parent::finalizeButton_click($args);

            $msg = (strlen($allData->selectiveProcessId) > 0 && !$allData->duplicate) ? SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED') : SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED_INFO');
            SAGU::information($msg, $MIOLO->getActionURL($module, $action, null, array('function' => 'search')));
        }
        catch (Exception $e)
        {
            SDatabase::rollback();

            parent::finalizeButton_click($args);

            $this->AddError($e->getMessage());
        }
    }

    private function saveOptions($allData, $sprSP)
    {
        foreach ($allData->options as $opt)
        {
            $sprOpt = new SprOption($opt->optionId);
            $sprOpt->selectiveProcessId = $allData->selectiveProcessId;
            $sprOpt->description = $opt->description;
            $sprOpt->vacancies = $opt->vacancies;
            $sprOpt->quotes = $opt->quotes;
            $sprOpt->maximumSubstitutes = $opt->maximumSubstitutes;

            if ($allData->duplicate) // Quando for duplicar
            {
                $opt->removeData = false;
            }

            if ($opt->removeData)
            {
                $sprOpt->delete();
            }
            else
            {
                // Quando for DEST_MODULE_NONE, nao tem relacao com ocorrencia de curso (ticket #9641)
                if ($allData->destinationModule == sprSelectiveProcess::DEST_MODULE_RESIDENCY)
                {
                    $sprONE = new SprOptionNucleoEnfase();
                    $sprONE->enfaseId = $opt->enfaseId;
                    $sprONE->optionId = $opt->optionId;
                    $sprONE->nucleoProfissionalId = $opt->nucleoProfissionalId;
                    $sprOpt->optionNucleoEnfase = array($sprONE);
                }

                $options[] = $sprOpt;
            }
        }

        $sprSP->options = $options;
    }

    /*
     * Salva opcoes quando destinationModule for PEDAGOGICO
     * 
     * @param stdClass $allData
     * @param SprSelectiveProcess $sprSP
     */

    private function saveOptionsPedagogico($allData, SprSelectiveProcess $sprSP)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        // Quando há etapa vigente ou inscricoes, nao fazer nada (modo readOnly passo Opcoes de curso)
        if (($sprSP->hasActiveStep() || $sprSP->hasSubscriptions()) && $function != 'insert')
        {
            return;
        }

        $formData = new stdClass();
        $formData->disableConstruct = true;
        $frmOptionCourse = $MIOLO->getUI()->getForm($module, 'FrmOptionCourse', $formData);


        $dataNew = $this->getAllStepData();
        $filters = new stdClass();
        $filters->periodoInicial = $dataNew[2]['periodoInicial'];
        $filters->periodoFinal = $dataNew[2]['periodoFinal'];

        $courseOccurrence = $frmOptionCourse->getProcurarOfertasTurma($filters);
        $tableData = $frmOptionCourse->getTableData();

        // Monta array com opcoes
        $options = array();

        for ($i = 0; $i < count($tableData->_description); $i++)
        {
            $vacancies = $tableData->_vacancies[$i];
            $quotes = $tableData->_quotes[$i];
            $maximumSubstitutes = $tableData->_maximumSubstitutes[$i];
            $optionId = $tableData->_optionId[$i];

            $_opt = new SprOption();

            // Se vagas ou maximo de suplentes maior que 0 monta objeto para a inserção
            if ((($vacancies > 0) || ($maximumSubstitutes > 0)) || $optionId > 0 )
            {
                $_opt->description = $tableData->_description[$i];
                $_opt->vacancies = $vacancies;
                $_opt->quotes = $quotes;
                $_opt->maximumSubstitutes = $maximumSubstitutes;
                $_opt->optionId = $optionId;

                $id = $frmOptionCourse->getOfertaTurmaId($courseOccurrence[$i]);
                $options[$id] = $_opt;
            }
            // Apaga e limpa optionOferaTurma
            foreach ($_opt->optionOfertaTurma as $optTurma)
            {
                $optTurma->delete();
            }
            $_opt->optionOfertaTurma = array();
        }

        // Monta array com turma, associada a opcoes
        for ($i = 0; $i < count($tableData->_description); $i++)
        {
            $_oc = new SprOptionOfertaTurma();

            $_oc->ofertaturmaid = $courseOccurrence[$i]->ofertaturmaid;
            $_oc->unitid = $courseOccurrence[$i]->unitid;
            $_oc->centerid = $courseOccurrence[$i]->centerid;
            $_oc->codigo = $courseOccurrence[$i]->codigo;
            //            $groupBy = $tableData->_groupBy[$i];
            $id = $frmOptionCourse->getOfertaTurmaId($courseOccurrence[$i]);

            if ($options[$id])
            {
                $_optTurma = array_merge((array) $options[$id]->optionOfertaTurma, array($_oc));
                $options[$id]->optionOfertaTurma = $_optTurma;
            }
        }
        $options->selectiveProcessId = $_SESSION['selectiveProcessId'];

        $sprSP->options = $options;
    }

    /**
     * Salva opcoes quando destinationModule for ACADEMIC
     *
     * @param stdClass $allData
     * @param SprSelectiveProcess $sprSP 
     */
    private function saveOptionsAcademic($allData, SprSelectiveProcess $sprSP)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        // Quando há etapa vigente ou inscricoes, nao fazer nada (modo readOnly passo Opcoes de curso)
        if (($sprSP->hasActiveStep() || $sprSP->hasSubscriptions()) && $function != 'insert')
        {
            return;
        }

        $formData = new stdClass();
        $formData->disableConstruct = true;
        $frmOptionCourse = $MIOLO->getUI()->getForm($module, 'FrmOptionCourse', $formData);

        $courseOccurrence = $frmOptionCourse->getSearchCourseOccurrence();
        $tableData = $frmOptionCourse->getTableData();


        // Monta array com opcoes
        $options = array();
        for ($i = 0; $i < count($tableData->_groupBy); $i++)
        {
            $vacancies = $tableData->_vacancies[$i];
            $quotes = $tableData->_quotes[$i];
            $maximumSubstitutes = $tableData->_maximumSubstitutes[$i];
            $optionId = $tableData->_optionId[$i];

            if ($tableData->_groupBy[$i] == $i)
            {
                $_opt = new SprOption();

                // Se vagas ou maximo de suplentes maior que 0 monta objeto para a inserção
                if ((($vacancies > 0) || ($maximumSubstitutes > 0)) || $optionId > 0 )
                {
                    $_opt->description = $tableData->_description[$i];
                    $_opt->vacancies = $vacancies;
                    $_opt->optionId = $optionId;
                    $_opt->quotes = $quotes;

                    $_opt->maximumSubstitutes = $maximumSubstitutes;

                    $id = $frmOptionCourse->getCourseOccurrenceId($courseOccurrence[$i]);
                    $options[$id] = $_opt;
                }
                // Apaga e limpa optionCourses

                foreach ($_opt->optionCourses as $optCourse)
                {
                    $optCourse->delete();
                }
                $_opt->optionCourses = array();
            }
        }

        // Monta array com opcoes de curso, associada a opcoes
        for ($i = 0; $i < count($tableData->_groupBy); $i++)
        {
            $_oc = new SprOptionCourse();
            $_oc->courseId = $courseOccurrence[$i]->courseId;
            $_oc->courseVersion = $courseOccurrence[$i]->courseVersion;
            $_oc->unitId = $courseOccurrence[$i]->unitId;
            $_oc->turnId = $courseOccurrence[$i]->turnId;
            $groupBy = $tableData->_groupBy[$i];
            $id = $frmOptionCourse->getCourseOccurrenceId($courseOccurrence[$groupBy]);

            if ($options[$id])
            {
                $_optCourses = array_merge((array) $options[$id]->optionCourses, array($_oc));
                $options[$id]->optionCourses = $_optCourses;
            }
        }

        $options->selectiveProcessId = $_SESSION['selectiveProcessId'];
        $sprSP->options = $options;
    }

    public function saveSteps($allData, $sprSP)
    {
        foreach ($allData->_steps as $step)
        {
            $step->classificationMethod = $step->classificationMethod;
            $step->subscriberChoosesPlace = $step->subscriberChoosesPlace == DB_TRUE ? DB_TRUE : DB_FALSE;
            $step->accumulatePreviousSteps = $step->accumulatePreviousSteps == DB_TRUE ? DB_TRUE : DB_FALSE;
            $step->hasUserInteraction = $step->hasUserInteraction == DB_TRUE ? DB_TRUE : DB_FALSE;
            $step->selectiveProcessId = $allData->selectiveProcessId;

            $sprStep = new SprStep($step->stepId);
            foreach ($step as $key => $value)
            {
                $sprStep->$key = $value;
            }

            if ($allData->duplicate) // Quando for duplicar
            {
                $step->removeData = false;
            }

            if ($step->removeData)
            {
                $sprStep->delete();
            }
            else
            {
                $steps[] = $sprStep;
            }
        }

        $sprSP->steps = $steps;
    }

    public function saveFinanceInformation($allData, $sprSP, $finData)
    {
        $sprFinInfo = new SprFinanceInformation();
        if ($allData->generateFinance == DB_TRUE)
        {
            // SprFinanceInformation
            $sprFinInfo->financeInformationId = $sprSP->financeInformationId;
            foreach ($finData as $key => $value)
            {
                $sprFinInfo->$key = $value;
            }
            $sprSP->financeInformation = $sprFinInfo;
        }
        else
        {
            if (strlen($sprSP->financeInformationId) > 0)
            {
                $sprFinInfo = new SprFinanceInformation();
                $sprFinInfo->financeInformationId = $sprSP->financeInformationId;
                $sprSP->financeInformationId = null;
            }
        }
    }

}

?>