<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Generate enroll
 *
 * @author Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * @since
 * Class created on 17/01/2011
 *
 */
$MIOLO->uses('types.class', 'academic');

class FrmEnrollConfirm extends SManagementForm {

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new AcdContract(), array('contractId'), null);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Disable buttons
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);

        //Field selective process
        //$fields[] = new SHiddenField('destinationModule', SprSelectiveProcess::DEST_MODULE_ACADEMIC);
        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Processo seletivo', $module) . ':');
        //$selectiveProcessLabel->setClass('m-caption m-caption-required');
        $isNotDestinationModule = new SHiddenField('isNotDestinationModule', SprSelectiveProcess::DEST_MODULE_PEDAGOGICO);
        $fields[] = $isNotDestinationModule;
        $selectiveProcessLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $selectiveProcessId = new MLookupTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'selectiveProcessDescription', 'selectiveProcess', 'selectiveProcess', null, array('selectiveProcessId' => 'selectiveProcessId', 'isNotDestinationModule' => 'isNotDestinationModule'));
        $selectiveProcessId->setJsHint(_M('Informe o código do processo seletivo', $module));
        $validators[] = new MRequiredValidator('selectiveProcessId', _M('Processo seletivo', $module), 'required');
        $selectiveProcessDescription = new MTextField('selectiveProcessDescription', $this->getFormValue('selectiveProcessDescription', $data->selectiveProcessDescription), _M('Descrição do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $selectiveProcessDescription->setJsHint(_M('Descrição do processo seletivo', $module));
        $selectiveProcessDescription->setReadOnly(true);
        $hctSelectiveProcess = new MHContainer('hctSelectiveProcess', array($selectiveProcessLabel, $selectiveProcessId, $selectiveProcessDescription));
        $hctSelectiveProcess->setShowLabel(false);
        $fields[] = $hctSelectiveProcess;

        //Option course
        $optionLabel = new MText('optionLabel', _M('Opção de curso', $module) . ':');
        //$optionLabel->setClass('m-caption m-caption-required');
        $optionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $optionId = new MLookupTextField('optionId', $this->getFormValue('optionId', $data->optionId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'optionDescription', 'selectiveProcess', 'optionCourseSelectiveProcess', null, array('selectiveProcessId' => 'selectiveProcessId'));
        $optionId->setJsHint(_M('Informe o código da opção', $module));
        $validators[] = new MRequiredValidator('optionId', _M('Opção de curso', $module), 'required');
        $optionDescription = new MTextField('optionDescription', $this->getFormValue('optionDescription', $data->optionDescription), _M('Descrição do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $optionDescription->setJsHint(_M('Descrição do processo seletivo', $module));
        $optionDescription->setReadOnly(true);
        $hctOption = new MHContainer('hctSelectiveProcess', array($optionLabel, $optionId, $optionDescription));
        $hctOption->setShowLabel(false);
        $fields[] = $hctOption;

        // Field person (lookup physical person)
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId', null), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa física', $module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module));
        $personName = new MTextField('personName', $this->getFormValue('personName', null), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[] = $hctPerson;

        //field de ordenacao
        $orderLabel = new MText('orderLabel', _M('Ordenar lista por', $module) . ':');
        $orderLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $opt = array(_M('Posição'), _M('Nome'));
        $orderRadio = new MRadioButtonGroup('order', null, $opt, 'nome', null, 'horizontal');
        $orderRadio->SetShowLabel(false);
        $fields[] = new MHContainer('hcTtypeTyping', array($orderLabel, $orderRadio));

        //Query button
        $fields[] = new MButton('btnSearch', _M('Pesquisar', $module));

        //Grid data, obtem todos os classificados conforme os filtros.
        $gridData = array();

        if (MIOLO::_REQUEST('__EVENTTARGETVALUE') == 'btnSearch:click')
        {
            //Filters
            $gridFilters = $this->getTypesData();
            $gridFilters->subscriptionStatusId = $gridFilters->subscriptionStatusId ? implode(',', $gridFilters->subscriptionStatusId) : null;
            $gridFilters->notContract = true;
            $gridData = SprSelectiveProcess::getClassifiedEnrollConfirm($gridFilters);
        }

        //Percorre todos os classificados
        for ($i = 0; $i < count($gridData); $i++)
        {
            list( $subscriptionId,
                    $position,
                    $personId,
                    $personName,
                    $subscriptionStatusId,
                    $subscriptionStatusDescription,
                    $optionId,
                    $descriptionOption,
                    $courseOccurrence ) = $gridData[$i];

            //Data grid
            $gridData[$i][0] = $subscriptionId;
            $gridData[$i][1] = $position;
            $gridData[$i][2] = $subscriptionId;
            $gridData[$i][3] = $personId;
            $gridData[$i][4] = $personName;
            $gridData[$i][5] = $subscriptionStatusId;
            $gridData[$i][6] = $subscriptionStatusDescription;
            $gridData[$i][7] = $optionId;
            $gridData[$i][8] = $descriptionOption;
            $gridData[$i][9] = $courseOccurrence;

            //Option Course
            $sprOptionCourse = new SprOptionCourse();
            //filters
            $filters = new stdClass();
            $filters->optionId = $optionId;
            //Obtem as opções de curso
            $optionsCourse = $sprOptionCourse->search($filters);

            //Se a coluna da opção de curso estiver vazia quer dizer que existe mais de uma opção de curso,
            //caso isso acontecer será instanciado um selection na grid para poder selecionar a opção desejada.
            if (!strlen($courseOccurrence) > 0)
            {
                $optionList = array();
                foreach ((array) $optionsCourse as $row)
                {
                    $key = 'personId=' . urlencode($personId) . '&courseId=' . urlencode($row->courseId) . '&courseVersion=' . urlencode($row->courseVersion) . '&turnId=' . urlencode($row->turnId) . '&unitId=' . urlencode($row->unitId) . '&subscriptionId=' . urlencode($subscriptionId);
                    $description = $row->courseName . ' / ' . $row->courseVersion . ' - ' . $row->turnDescription . ' - ' . $row->unitDescription;
                    $optionList[] = array($key, $description);
                }


                $selection = new MSelection('courseOccurrence' . $i, null, null, $optionList);
                $selection->addAttribute('onchange', "defineValue($i)");
                $gridData[$i][7] = $selection->generate();
            }
            else
            {
                $row = $optionsCourse[0];
                $key = 'personId=' . urlencode($personId) . '&courseId=' . urlencode($row->courseId) . '&courseVersion=' . urlencode($row->courseVersion) . '&turnId=' . urlencode(&$row->turnId) . '&unitId=' . urlencode($row->unitId) . '&subscriptionId=' . urlencode($subscriptionId);
                $gridData[$i][0] = $key;
            }
        }
        // Instantiate the results grid
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdEnrollConfirm', $gridFilters);
        $grid->setData($gridData);

        $fields[] = $grid;
        $fields[] = new MSeparator();
        $fields[] = new MButton('submit_button', _M('Registrar matrícula', $module));
        $fields[] = new MSeparator();

        //Javascript que define o valor da MComboBox que define o id da linha
        $js = "
        function defineValue(index)
        {
            var combo = document.getElementById('courseOccurrence' + index);
            var selection = document.getElementById('selectGrdEnrollConfirm[' + index + ']');
            document.getElementById('selectGrdEnrollConfirm[' + index + ']').value = combo.value;
        }";

        $this->AddJsCode($js);

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses Submit from form
     */
    public function submit_button_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        try
        {
            SDatabase::beginTransaction();
            //Obtem as inscrições selecionadas na lista
            $dataGrid = MIOLO::_request('selectGrdEnrollConfirm');

            //Verifica se foi selecionada pelo menos uma inscrição.
            if (is_array($dataGrid))
            {
                //Percorre as inscrições
                foreach ((array) $dataGrid as $row)
                {
                    //Se o id da linha for apenas o código da inscrição exibe um erro, pois não foi selecionado um curso para alguma inscrição.
                    if (is_numeric($row))
                    {
                        $msg = _M('Não foi selecionado uma inscrição.', $module);
                        throw new Exception($msg);
                    }
                    //Se o id for seguido do código, versão turno e unidade do curso
                    else
                    {
                        //Obtem os atributos da linha
                        $atributes = explode('&', $row);

                        //Pega o valor dos atributos
                        foreach ($atributes as $atribute)
                        {
                            $values = explode('=', $atribute);
                            $result[] = $values[1];
                        }

                        //Decodifica atributos
                        $personId = urldecode($result[0]);
                        $courseId = urldecode($result[1]);
                        $courseVersion = urldecode($result[2]);
                        $turnId = urldecode($result[3]);
                        $unitId = urldecode($result[4]);
                        $subscriptionId = urldecode($result[5]);

                        //Limpa variavel result
                        unset($result);
                    }

                    $data = $this->getTypesData();
                    $sprSubscriptionOption = new SprSubscriptionOption($subscriptionId, $data->optionId);
                    $sprSubscriptionOption->enrollConfirmed = DB_TRUE;
                    $ok = $sprSubscriptionOption->save();
                }

                SDatabase::commit();

                if ($ok)
                {
                    $goto = $MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':')));

                    $opts = array(
                        'event' => 'tbBtnNew_click',
                        'function' => 'insert'
                    );

                    $caption = _M('Questão', $module);
                    $msg = _M('Inscrições salvas com sucesso.', $module);

                    $this->AddInfo($msg, $goto);
                }
            }
            else
            {
                $msg = _M('Não foi selecionada nenhuma inscrição.', $module);
                throw new Exception($msg);
            }
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data->selectiveProcessId = $this->getFormValue('selectiveProcessId');
        $data->optionId = $this->getFormValue('optionId');
        $data->personId = $this->getFormValue('personId');
        $data->subscriptionStatusId = $this->getFormValue('subscriptionStatusId');
        $data->order = $this->getFormValue('order');

        return $data;
    }

}

?>