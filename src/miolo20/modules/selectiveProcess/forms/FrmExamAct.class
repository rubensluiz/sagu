<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Sagu [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 31/05/2011
 */
class FrmExamAct extends SForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Ata de exame', $module), null, null);

        // Desabilita botões da MToolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $selectiveProcessId = new MLookupTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId',$data->selectiveProcessId), _M('Processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'selectiveProcessDescription', $module, 'SelectiveProcess', null, array('selectiveProcessId' => 'selectiveProcessId'), true);
        $selectiveProcessId->setJsHint(_M('Informe o código do processo seletivo',$module));
        $selectiveProcessDescription = new MTextField('selectiveProcessDescription', $this->getFormValue('selectiveProcessDescription', $data->selectiveProcessDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $selectiveProcessDescription->setReadOnly(true);
        $selectiveProcessDescription->setJsHint(_M('Descrição do processo seletivo',$module));
        $fields[] = $selectiveProcess = new MHContainer('selectiveProcessCnt',array($selectiveProcessId, $selectiveProcessDescription), MHContainer::FORM_MODE_SHOW_SIDE);
        $selectiveProcess->showRequiredLabel = true;
        $validators[] = new MIntegerValidator('selectiveProcessId', _M('Processo seletivo', $module), 'optional');

        // Field step (lookup step)
        $stepId = new MLookupTextField('stepId', $this->getFormValue('stepId',$data->stepId), _M('Etapa', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'stepDescription, selectiveProcessId, selectiveProcessDescription', $module, 'Step', null, array('selectiveProcessId'=>'selectiveProcessId'), true);
        $stepId->setJsHint(_M('Informe o código da etapa',$module));
        $stepDescription = new MTextField('stepDescription', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stepDescription->setReadOnly(true);
        $stepDescription->setJsHint(_M('Descrição da etapa',$module));
        $fields[] = $step = new MHContainer('stepCnt',array($stepId, $stepDescription), MHContainer::FORM_MODE_SHOW_SIDE);
        $step->showRequiredLabel = true;
        $validators[] = new MIntegerValidator('stepId', _M('Etapa', $module), 'required');

        $fields[] = new MSeparator();
        $fields[] = new MButton('btnList', _M('Listar locais de prova', $module));

        if ( strlen(MIOLO::_REQUEST('stepId')) > 0 )
        {
            $stepId = MIOLO::_REQUEST('stepId');
            $step = new SprStep($stepId);

            $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdStepPlaces',$data);
            $grdResults->setData($step->getStepPlacesDetail());

            $fields[] = $grdResults;
        }

        // Separator
        $fields[] = new MSeparator();

        $this->SetFields($fields);
        $this->SetValidators($validators);
        parent::defineFields();
    }

    /**
     * Método para geração do Relatório
     */
    public function generateReport($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $report = MIOLO::_REQUEST('report');
        // Verifica se foi informado um relatório.
        if ( !isset ($report) )
        {
            throw new Exception(_M("Informe um relatório"));
        }
        // Verifica se o relatório é valido, para este form.
        else if ( $report != 'examAct' && $report != 'studentsOfRoom' && $report != 'label' && $report != 'redacoes' )
        {
            throw new Exception(_M("Informe um relatório válido"));
        }
        
        $stepId = MIOLO::_REQUEST('stepId');
        $physicalResourceId = MIOLO::_REQUEST('physicalResourceId');
        $physicalResourceVersion = MIOLO::_REQUEST('physicalResourceVersion');
        $locationId = MIOLO::_REQUEST('locationId');
        $cityId = MIOLO::_REQUEST('cityId');
        $building = MIOLO::_REQUEST('building');
        $room = MIOLO::_REQUEST('room');

        if ( strlen($stepId) > 0 )
        {
            $step = new SprStep($stepId);

            $selectiveProcess = new SprSelectiveProcess($step->selectiveProcessId);

            $busCity = new BusinessBasicBusCity();

            $city = $busCity->getCity($cityId);

            $evaluations = '';

            for ( $i = 0; $i < count($step->evaluations); $i++ )
            {
                if ( strlen($evaluations) > 0 )
                {
                    $evaluations .= ', ' . $step->evaluations[$i]->description;
                }
                else
                {
                    $evaluations = $step->evaluations[$i]->description;
                }
            }
        }

        if ( strlen($step->selectiveProcessId) > 0 )
        {
            $options['parameters']['selectiveprocessid'] = (integer)$step->selectiveProcessId;
            $options['parameters']['reporttitle'] = $selectiveProcess->description;
        }

        if ( strlen($stepId) > 0 )
        {
            $options['parameters']['stepid'] = (integer)$stepId;
            $options['parameters']['stepdate'] = $step->startDate;
            $options['parameters']['evaluations'] = $evaluations;
        }

        if ( strlen($cityId) > 0 )
        {
            $options['parameters']['cityid'] = (integer)$cityId;
            $options['parameters']['city'] = $city->name;
        }

        if ( strlen($locationId) > 0 )
        {
            $options['parameters']['locationid'] = (integer)$locationId;
        }

        if ( strlen($physicalResourceId) > 0 && strlen($physicalResourceVersion) > 0 )
        {
            $options['parameters']['physicalresourceid'] = (integer)$physicalResourceId;
            $options['parameters']['physicalresourceversion'] = (integer)$physicalResourceVersion;
        }

        if ( strlen($building) > 0 )
        {
            $options['parameters']['building'] = $building;
        }

        if ( strlen($room) > 0 )
        {
            $options['parameters']['room'] = $room;
        }

        $sreport = new SReport($options);
        $sreport->setReportName($report);

        if ( !$sreport->generate() )
        {
            $this->addError(_M('Nenhum registro encontrado. Verifique se o processo de alocação por sala foi executado.', $module ));
        }
    }
}
?>