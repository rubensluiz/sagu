<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelo passo 2 da classificação de candidatos.
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 20/12/2010
 *
 **/

set_time_limit(0);

class FrmClassification extends SStepByStepForm
{
    public function __construct($steps = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        }
    }

    /**
     * Default method to define fields
     */
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Load data
        $stepData = $this->getStepDataByForm('FrmSelectionStepClassification');
        $stepId = $stepData->stepId;

        if ( strlen($stepId) > 0 )
        {
            $sprStep = new SprStep($stepId);
        }
        else
        {
            $MIOLO->error(_M('Não foi definida uma etapa.', $module));
        }

        /*
         * Checagem que verifica se todas as pontuações solicitadas por
         * candidatos do processo seletivo foram ajustadas. O campo
         * subscriptionEvaluationOption.finalScore NÃO pode ser NULO.
         */
        // Verifica se pode ou não rodar a classificação
        if ( !$sprStep->canRunClassification() )
        {
            $fields[] = new MTextLabel('information', _M('Existem inscrições com pontuações desejadas não confirmadas.',$module));
            $fields[] = new MTextLabel('information', _M('Verifique estas incrições e execute o processo de classificação novamente.', $module));
        }
        // Classification manual
        elseif ( $sprStep->classificationMethod == SprStep::CLASSIFICATION_METHOD_MANUAL )
        {
            $fields[] = new MHiddenField('stepId', $stepId);
            // Base group informando o tipo de classificação
            $information[] = new MSeparator();
            $information[] = new MTextLabel('information', _M('O processo de classificacão para esta etapa é manual',$module). '.');
            $information[] = new MSeparator();
            $information[] = new MTextLabel('informationLabel', _M('Após definir o estado e posição dos candidatos da página clique no botão salvar dados da página',$module). '.');
            $information[] = new MSeparator();

            $fields[] = new MBaseGroup('baseInformation', _M('Atenção!',$module), $information);

            // Field person (lookup physical person)
            $personLabel = new MText('personLabel', _M('Pessoa', $module).':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $personIdS = new MLookupTextField('personId', null, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'PhysicalPersonStudent', null, null, true);
            $personIdS->setJsHint(_M('Informe o código da pessoa física',$module));
            $personName = new MTextField('personName', $this->getFormValue('personName', null), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setJsHint(_M('Nome da pessoa',$module));
            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personIdS, $personName));
            $hctPerson->setShowLabel(false);
            $fieldsFilters[] = $hctPerson;
            $fieldsFilters[] = new MSeparator();

            //$buttonFilter = new MButton('buttonfilter', _M('Pesquisar',$module), $this->getAjaxAction('generateGridManualClassification', 'divGridManualClassification'));
            $buttonFilter = new MButton('buttonfilter', _M('Pesquisar',$module));
            $fieldsFilters[] = new MHContainer('hctButtonFilter', array($buttonFilter));
            $fieldsFilters[] = new MSeparator();

            $fields[] = new MBaseGroup('baseFilters', _M('Filtros',$module), $fieldsFilters);

            $grid = null;
            if ( $this->isFirstAccess() )
            {
                $MIOLO->getSession()->setValue('pn_page','');

                // Instanciar grid com os dados do form
                $args = new stdClass();
                $args->pageNext = MIOLO::_REQUEST('pageNext');
                $args->subscriptionStatusDefault = MIOLO::_REQUEST('subscriptionStatusDefault');
                $args->personId = MIOLO::_REQUEST('personId');
                $args->personName = MIOLO::_REQUEST('personName');
                $grid = $this->generateGridManualClassification($args);
            }

            // Div que contém a grid
            $fields[] = new MDiv('divGridManualClassification', $grid);

            $fields[] = new MDiv('divReturn');
            
            // Botão que salva os dados da página
            $buttonSavePageData = new MButton('savePageData', _M('Salvar dados da página',$module), $this->getAjaxAction('savePageData', 'divReturn'));
            $button = new MDiv('divButtonSabePageData', array($buttonSavePageData));
            $button->addBoxStyle('text-align', 'center');
            $fields[] = new MSeparator();
            $fields[] = $button;
            $fields[] = new MSeparator();
        }
        
        // Caso existirem alunos já classificados, avisa o usuário - ticket #39004
        $sprSubscription = new SprSubscription();
        $quantClassificados = $sprSubscription->obterQuantidadeDeInscritosJaClassificados($sprStep->selectiveProcessId);
        
        if ( $quantClassificados > 0 )
        {
            $fields[] = MMessage::getStaticMessage('msgInfo', _M('Já existem @1 inscritos classificados neste processo seletivo, se você clicar em "Finalizar" os resultados de classificação poderão mudar.', $module, $quantClassificados), MMessage::TYPE_WARNING);
        }
        
        $this->setFields($fields);
        $this->SetValidators($validators);
    }

    public function generateGridManualClassification_click($args)
    {
        // FIXME: fazer não realizar duas requisições
        $this->page->onload($this->getAjaxAction('generateGridManualClassification', 'divGridManualClassification'));
    }

    /*
     * Gera a grid
     */
    public function generateGridManualClassification($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Status default gerado pelo selection
        $defaultStatus = $args->subscriptionStatusDefault;

        if ( strlen($args->pageNext)>0 )
        {
            $this->page->setViewState('pn_page', $args->pageNext, 'GrdManualClassification');
            $MIOLO->getSession()->setValue('pn_page',$args->pageNext);
        }
        else
        {
            $pnPage = $MIOLO->getSession()->getValue('pn_page');
            $this->page->setViewState('pn_page', $pnPage, 'GrdManualClassification');
        }

        // Spr subscription status
        $sprSubscriptionStatus = new SprSubscriptionStatus();

        // Dados do primeiro passo
        $stepData = $this->getStepDataByForm('FrmSelectionStepClassification');
        $stepId = $stepData->stepId;

        // Cadidatos inscritos
        $filters = new stdClass();
        $filters->stepId = $stepId;
        $filters->personId = $args->personId;
        $filters->personName = $args->personName;
        $sprSubscriptionStepInfo = new SprSubscriptionStepInfo();
        $gridData = $sprSubscriptionStepInfo->searchGrid($filters);

        // Percorre todos os candidatos
        for ( $i=0; $i<count($gridData); $i++ )
        {
            list( $subscriptionId,
                  $stepId,
                  $subscriptionStatusId,
                  $totalPoints,
                  $useInternalEvaluations,
                  $personId,
                  $personName,
                  $position ) = $gridData[$i];

            // Campo que determina o estado na etapa
            $fieldSubscriptionStatusId = new MSelection("subscriptionStatusId[$subscriptionId]",strlen($defaultStatus)>0 ? $defaultStatus : $subscriptionStatusId, null, $sprSubscriptionStatus->search($filters,true,true));
            // Campo que determina o total de pontos na etapa
            //$fieldTotalPoints = new MTextField("totalPoints[$subscriptionId]", $totalPoints, null,  SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            //Campo que determina a posição na etapa
            $fieldPosition = new MTextField("position[$subscriptionId]", $position, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));

            // Data grid
            $gridData[$i][0] = $subscriptionId;
            $gridData[$i][1] = $personId;
            $gridData[$i][2] = $personName;
            $gridData[$i][3] = $fieldSubscriptionStatusId->generate();
            $gridData[$i][4] = null;
            $gridData[$i][5] = $fieldPosition->generate();
            $gridData[$i][6] = $stepId;
            $gridData[$i][7] = $useInternalEvaluations;
        }
        // Grid
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdManualClassification',$gridData);
        $grid->setData($gridData);

        return $grid;
    }

    /*
     * Ação do botão salvar dados da pagina
     */
    public function savePageData($args)
    {
        $stepData = $this->getStepDataByForm('FrmSelectionStepClassification');
        $stepId = $stepData->stepId;
        $sprStep = new SprStep($stepId);

        try
        {
            if ( $sprStep->classificationMethod == SprStep::CLASSIFICATION_METHOD_MANUAL )
            {
                // New database transaction
                SDatabase::beginTransaction();

                // Obtem as inscrições selecionadas na lista
                $dataGrid = $args->selectGrdManualClassification;
                // Obtem status dos candidatos
                $subscriptionStatus = $args->subscriptionStatusId;
                // Obtem o total de pontos do candidato
                $totalPoints = $args->totalPoints;
                // Obtem posição dos candidatos
                $position = $args->position;

                $usedPositions = array();

                // Obtem todos os canditatos da etapa
                $filters = new stdClass();
                $filters->stepId = $stepId;
                $sprSubscriptionStepInfo = new SprSubscriptionStepInfo();
                $subscriptionStepInfo = $sprSubscriptionStepInfo->searchGrid($filters);

                // Type subscription
                $sprSubscriptionStatus = new SprSubscriptionStatus();

                // Percorre todos os candidatos e verifica sua posição
                for ( $i=0; $i<count($subscriptionStepInfo); $i++ )
                {
                    $subscriptionId = $subscriptionStepInfo[$i][0];

                    // Verifica se a posição ja não foi usada
                    if ( in_array($position[$subscriptionId], $usedPositions) )
                    {
                        $msg = _M('A posição @1 está sendo ocupada por mais de um candidato', $module, $position[$subscriptionId]).'.';
                        throw new Exception($msg);
                    }
                    else
                    {
                        if ( strlen($position[$subscriptionId])>0 )
                        {
                            $usedPositions[] = $position[$subscriptionId];
                        }
                    }

                    // Verifica se foram digitados apenas números no total de pontos e posição
                    if ( (!is_numeric($position[$subscriptionId]) && (strlen($position[$subscriptionId])>0)) || (!is_numeric($totalPoints[$subscriptionId]) && (strlen($totalPoints[$subscriptionId])>0)))
                    {
                        $msg = _M('A posição ou o total de pontos da inscrição @1 está inválida', $module, $subscriptionId).'.';
                        throw new Exception($msg);
                    }
                }

                // Percorre os candidatos selecionados na grid e insere na base
                foreach ( (array)$subscriptionStatus as $subscriptionId => $subscriptionStatusId )
                {
                    // Verifica se foi digitado um status para o candidato
                    if( strlen($subscriptionStatus[$subscriptionId])==0 )
                    {
                        $msg = _M('O estado selecionado na inscrição @1 está inválido', $module, $subscriptionId).'.';
                        throw new Exception($msg);
                    }

                    $sprSubscriptionStepInfo = new SprSubscriptionStepInfo($subscriptionId, $stepData->stepId);
                    $sprSubscriptionStepInfo->subscriptionStatusId = $subscriptionStatusId;
                    $sprSubscriptionStepInfo->position = $position[$subscriptionId];
                    //Salva dados da página
                    $sprSubscriptionStepInfo->save();
                }
            }

            SDatabase::commit();

            $msg = _M('A classificação para os candidatos dessa página foi gerada com sucesso',$module). '.';
            $this->addInfo($msg);
        }
        catch (Exception $e)
        {
            $this->AddError( $e->getMessage() );
        }
    }
    
    /*
     * Ação do botão finalizar
     */
    public function finalizeButton_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        set_time_limit(0);

        $stepData = $this->getStepDataByForm('FrmSelectionStepClassification');
        $stepId = $stepData->stepId;
        $sprStep = new SprStep($stepId);
        $sprSelectiveProcess = new SprSelectiveProcess($sprStep->selectiveProcessId);

        try
        {
            SDatabase::beginTransaction();
            
            // Verifica se pode ou não rodar a classificação
            if ( !$sprStep->canRunClassification() )
            {
                throw new Exception(_M('Não é possível realizar a operação.', $module));
            }
             
            if ( $sprStep->classificationMethod == SprStep::CLASSIFICATION_METHOD_AUTOMATIC )
            {
                $sprStep->generateClassificationStep($stepId);
            }
            elseif ( $sprStep->classificationMethod == SprStep::CLASSIFICATION_METHOD_MANUAL )
            {
                SprSubscriptionStepInfo::setDisqualifiedStatus($stepData);
            }

            //Seta status final na inscrição se for a ultima etapa
            $finalResult = SprSubscription::setSubscriptionFinalStatus($stepId);

            //
            //
            // Busca pela proxima etapa, caso houver
            $nextStep = new SprStep();
            foreach ( (array) $sprSelectiveProcess->steps as $key => $step )
            {
                // Se esta for atual, define proxima
                if ( $step->stepId == $stepId )
                {
                    $nextStep = $sprSelectiveProcess->steps[$key + 1];
                    break;
                }
            }
            // Caso esta proxima etapa NAO conter interação com usuario, inscreve automaticamente todos candidatos APROVADOS
            if ( $nextStep->hasUserInteraction == DB_FALSE )
            {
                $ssi = new SprSubscriptionStepInfo();
                
                // Filtra pela etapa atual e aprovados
                $filters = new stdClass();
                $filters->stepId = $stepId;
                $filters->subscriptionStatusId = SprSubscriptionStatus::CLASSIFIED;
                $searchCurrent = SprSubscriptionStepInfo::search($filters);

                // Busca todos proximos
                $filters->stepId = $nextStep->stepId;
                $searchNextSSI = SprSubscriptionStepInfo::search($filters);
                // indexa os subscriptionId
                $searchNextSSISubscriptions = array();
                foreach ( (array) $searchNextSSI as $row )
                {
                    $searchNextSSISubscriptions[] = $row->subscriptionId;
                }
                
                foreach ( (array) $searchCurrent as $ssi )
                {
                    // Insere novo registro na subscriptionStepInfo, com a proxima etapa, caso ainda nao exista registro
                    if ( ! in_array($ssi->subscriptionId, $searchNextSSISubscriptions) )
                    {
                        $ssiNew = new SprSubscriptionStepInfo();
                        $ssiNew->subscriptionId = $ssi->subscriptionId;
                        $ssiNew->stepId = $nextStep->stepId;
                        $ssiNew->subscriptionStatusId = SprSubscriptionStatus::INSCRIBED;
                        $ssiNew->useInternalEvaluations = $ssi->useInternalEvaluations;
                        $ssiNew->save();
                    }
                }
            }
            
            SDatabase::commit();

            parent::finalizeButton_click($args);
            
            $href = $MIOLO->GetActionURL($module, 'main:document:resultadoEmEtapa', null, array('event' => 'btnSearch:click', 'selectiveProcessId' => $sprStep->selectiveProcessId, 'stepId' => $stepId));
            $link = new MLink('_link', '', $href, 'Clique aqui', '_new');
            
            $filtersSubs = new stdClass();
            $filtersSubs->selectiveProcessId = $sprStep->selectiveProcessId;
            $quantSubs = count(SprSubscription::searchGrid($filtersSubs));

            if ( $quantSubs == 0 )
            {
                $MIOLO->information(_M('Não foram encontrados inscritos neste processo seletivo, portanto não será gerada a classificação.', $module));
            }
            else
            {
                $msg = 'A classificação para esta etapa foi gerada com sucesso.<br>';
                $msg .= 'Alunos sem nota foram DESCLASSIFICADOS.<br>';
                $msg .= $link->generate() . ' para verificar a classificação.';
                SAGU::information($msg, $MIOLO->getActionURL($module, $action, null, array('function'=>'search')));
            }
            
        }
        catch (Exception $e)
        {
            parent::finalizeButton_click($args);
            
            SDatabase::rollback();
            $this->AddError( $e->getMessage() );
        }
    }
}
?>