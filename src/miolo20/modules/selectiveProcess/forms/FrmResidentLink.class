<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Sagu [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 04/08/2011
 */
class FrmResidentLink extends SForm
{
    private $grid;

    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Integração com o módulo de residência', $module), null, null);

        // Desabilita botões da MToolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Processo seletivo
        $fields[] = new SHiddenField('destinationModule', SprSelectiveProcess::DEST_MODULE_RESIDENCY);
        $options = array(
            'module' => 'selectiveProcess',
            'item' => 'SelectiveProcess',
            'label' => _M('Processo seletivo', $module),
            'hint' => _M('Informe o processo seletivo', $module),
            'required' => true,
            'filter' => array('selectiveProcessId' => 'selectiveProcessId', 'destinationModule' => 'destinationModule'),
        );
        $fields[] = new SLookupContainer('selectiveProcessId', $this->getRequestValue('selectiveProcessId'), $options);
        $validators[] = new MRequiredValidator('selectiveProcessId', _M('Processo seletivo', $module));

        // Núcleo profissional
        $fields[] = $nucleosProfissionais = new MSelection('nucleoProfissionalId', $this->getFormValue('nucleosProfissionaisS', $data->nucleosProfissionais), _M('Núcleo profissional'), ResNucleoProfissional::listRecords());
        $nucleosProfissionais->setJsHint(_M('Informe o núcleo profissional'));

        // Ênfase
        $fields[] = $enfases = new MSelection('enfaseId', $this->getFormValue('enfasesS', $data->enfases), _M('Ênfases'), ResEnfase::listRecords());
        $enfases->setJsHint(_M('Informe a ênfase'));

        // Pessoa
        $options = array( 'module' => 'basic', 'item' => 'PhysicalPerson', 'label' => _M('Pessoa', $module), 'hint' => _M('Informe a pessoa', $module) );
        $fields[] = new SLookupContainer('personId', $this->getRequestValue('personId'), $options);

        // Estado de classificacao
        $fields[] = $estadoClassificacao = new MMultiSelection('subscriptionStatus', $this->getRequestValue('subscriptionStatus', array()), _M('Estado de classificação', $module), SprSubscriptionStatus::search(null, true), null, null, 5);
        $estadoClassificacao->setJsHint(_M('Estado de classificação', $module));

        // Exibir foto
        $onlyWithoutLink = $this->getRequestValue('onlyWithoutLink') == DB_TRUE;
        $fields[] = new MCheckBox('onlyWithoutLink', DB_TRUE, _M('Vínculo', $module), $onlyWithoutLink, _M('Exibir somente os que não possuem vínculo', $module));

        $fields[] = new MButton('btnSearch', _M('Localizar', $module));

        $fields[] = $this->grid = $grid = $MIOLO->getUI()->getGrid($module, 'GrdResidentLink');

        $fields[] = new MSeparator();

        // Lookup de turma
        $optsTurma = array(
            'label' => _M('Turma', $module),
            'item' => 'Turma',
            'module' => 'residency',
        );
        $fields[] = $turmaId = new SLookupContainer('codigoTurma', $this->getRequestValue('codigoTurma', $codigoTurma->codigoTurma), $optsTurma);
        $turmaId->addAttribute('onblur', SForm::getAjaxAction('obtemInformacaoTurma', 'divTurma', false));
        $fields[] = new MDiv('divTurma');
        
        
        //Inicio e fim previsto - ficam read only caso seja escolhida uma turma via AJAX
        $inicioLabel = new MLabel(_M("Início previsto:", $module));
        $inicioLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $inicioLabel->setClass('m-caption m-caption-required');
        $inicio = new MCalendarField('inicio', $this->getRequestValue('inicio'), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fimPrevistoLabel = new MLabel(_M("Fim previsto:", $module));
        $fimPrevistoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fimPrevistoLabel->setClass('m-caption m-caption-required');
        $fimPrevisto = new MCalendarField('fimPrevisto', $this->getRequestValue('fimPrevisto'), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $fields[] = new MHContainer('hctInicio', array($inicioLabel, $inicio));
        $fields[] = new MHContainer('hctFimPrevisto', array($fimPrevistoLabel, $fimPrevisto));
        
        //Hidden fields que servem para quando for escolhida turma, AJAX nao busca valores em campos disabled
        $fields[] = new SHiddenField('dtInicio');
        $fields[] = new SHiddenField('dtFim');
        
        $fields[] = new MButton('btnGenerate', _M('Gerar', $module));

        $validators[] = new MDATEDMYValidator('inicio', _M('Início previsto', $module));
        $validators[] = new MDATEDMYValidator('fimPrevisto', _M('Fim previsto', $module));

        $fields[] = new MSeparator();

        parent::defineFields(array( 'fields' => $fields, 'validators' => $validators ));
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->selectiveProcessId = $this->GetRequestValue('selectiveProcessId');
        $data->onlyWithoutLink = $this->GetRequestValue('onlyWithoutLink');
        $data->nucleoProfissionalId = $this->GetRequestValue('nucleoProfissionalId');
        $data->enfaseId = $this->GetRequestValue('enfaseId');
        $data->personId = $this->GetRequestValue('personId');
        $data->subscriptionStatus = $this->GetRequestValue('subscriptionStatus');
        $data->inicio = SAGU::NVL($this->GetRequestValue('inicio'), $this->getRequestValue('dtInicio'));
        $data->fimPrevisto = SAGU::NVL($this->GetRequestValue('fimPrevisto'), $this->getRequestValue('dtFim'));
        $data->turmaId = $this->GetRequestValue('codigoTurma');

        if( strlen ($data->turmaId) > 0 )
        {
            $turma = ResTurma::obtemTurma($data->turmaId);
            $data->turmaId = $turma->turmaId;
        }
        
        return $data;
    }


    /**
     * Evento acionado ao clicar no botao de busca
     */
    public function btnSearch_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $filters = $this->getTypesData();
        $gridData = SprSubscription::searchResidentLink($filters);
        $this->grid->setData($gridData);
    }


    /**
     * Evento ativado ao clicar no botao gerar
     */
    public function btnGenerate_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $data = $this->getTypesData();

        $selecteds = (array) $this->getRequestValue('selectGrdResidentLink');
        $nucleoEnfase = (array) $this->getRequestValue('nucleoEnfase');
        $personIdList = (array) $this->getRequestValue('personIdList');
        $subscriptionIdList = (array) $this->getRequestValue('subscriptionIdList');
        
        try
        {
            if ( ( strlen($data->inicio) <= 0 ) || ( strlen($data->fimPrevisto) <= 0 ) )
            {
                throw new Exception(_M('Os campos "Início previsto" e "Fim previsto" devem ser preenchidos.', $module));
            }

            if ( count($selecteds) <= 0 )
            {
                throw new Exception(_M('Nenhum item foi selecionado.', $module));
            }

            SDatabase::beginTransaction();

            foreach ( $selecteds as $key => $sel )
            {
                $personId = $personIdList[$key];
                $subscriptionId = $subscriptionIdList[$key];

                if ( strlen($subscriptionId) > 0 )
                {
                    list($optionId, $enfaseId, $nucleoProfissionalId) = explode('_', $nucleoEnfase[$key]);

                    $filters = new stdClass();
                    $filters->subscriptionId = $subscriptionId;
                    $rows = ResResidente::search($filters);
                    if ( count($rows) > 0 )
                    {
                        throw new Exception(_M('A inscrição @1 já possui vínculo. O processo foi abortado.', $module, $subscriptionId));
                    }

                    $residente = new ResResidente();
                    $residente->personId = $personId;
                    $residente->inicio = $data->inicio;
                    $residente->fimPrevisto = $data->fimPrevisto;
                    $residente->enfaseId = $enfaseId;
                    $residente->nucleoProfissionalId = $nucleoProfissionalId;
                    $residente->subscriptionId = $subscriptionId;
                    $residente->turmaId = $data->turmaId;
                    $residente->save();
                }
            }

            SDatabase::commit();

            $this->AddInfo(_M('Inscrições vinculadas com sucesso.', $module));
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }

        //Forca chamada de botao search
        $this->btnSearch_click($args);
    }
    
    public function obtemInformacaoTurma($args)
    {
        $MIOLO = MIOLO::getInstance();

        if (strlen($args->codigoTurma) > 0)
        {
            $infoTurma = ResTurma::obtemTurma($args->codigoTurma);

            $jsCode = " document.getElementById('inicio').value = '{$infoTurma->dataInicio}'; 
                        document.getElementById('fimPrevisto').value = '{$infoTurma->dataFim}'; 
                        document.getElementById('inicio').disabled = true; 
                        document.getElementById('fimPrevisto').disabled = true; 
                        document.getElementById('btninicio').style.display = 'none'; 
                        document.getElementById('btnfimPrevisto').style.display = 'none'; ";

            $jsCode .= " document.getElementById('dtInicio').value = '{$infoTurma->dataInicio}'; 
                         document.getElementById('dtFim').value = '{$infoTurma->dataFim}'; ";
        }
        else
        {
            $jsCode = " document.getElementById('inicio').value = ''; 
                            document.getElementById('fimPrevisto').value = ''; 

                            document.getElementById('inicio').disabled = false; 
                            document.getElementById('fimPrevisto').disabled = false; 
                            document.getElementById('btninicio').style.display = 'inline'; 
                            document.getElementById('btnfimPrevisto').style.display = 'inline'; ";
        }

        $MIOLO->page->addAJAXJsCode($jsCode);
    }

}
?>