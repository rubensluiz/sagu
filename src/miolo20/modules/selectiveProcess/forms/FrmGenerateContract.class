<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Generate contract table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 17/01/2011
 *
 */
$MIOLO->uses('types.class', 'academic');

class FrmGenerateContract extends SManagementForm {
    /*
     * @var Dados da grid
     */

    public $myData;

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new AcdContract(), array('contractId'), null);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Disable buttons
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        
        $fields[] = MMessage::getStaticMessage('aviso', _M('Os contratos/inscrições serão gerados apenas para pessoas que ainda não possuem.'), MMessage::TYPE_INFORMATION);

        //Field selective process
        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Processo seletivo', $module) . ':');
        $selectiveProcessLabel->setClass('m-caption m-caption-required');
        $selectiveProcessLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $selectiveProcessId = new MLookupTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('selectiveProcessDescription', 'periodId'), 'selectiveProcess', 'selectiveProcess', null, array('selectiveProcessId' => 'selectiveProcessId'));
        $selectiveProcessId->setJsHint(_M('Informe o código do processo seletivo', $module));
        $validators[] = new MRequiredValidator('selectiveProcessId', _M('Processo seletivo', $module), 'required');
        $selectiveProcessDescription = new MTextField('selectiveProcessDescription', $this->getFormValue('selectiveProcessDescription', $data->selectiveProcessDescription), _M('Descrição do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $selectiveProcessDescription->setJsHint(_M('Descrição do processo seletivo', $module));
        $selectiveProcessDescription->setReadOnly(true);
        $hctSelectiveProcess = new MHContainer('hctSelectiveProcess', array($selectiveProcessLabel, $selectiveProcessId, $selectiveProcessDescription));
        $hctSelectiveProcess->setShowLabel(false);
        $fields[] = $hctSelectiveProcess;

        // Período, para filtrar na lookup de turma, quando acadêmico
        $fields[] = new SHiddenField('periodId', null);
        
        //Option course
        $optionLabel = new MText('optionLabel', _M('Opção de curso', $module) . ':');
        //$optionLabel->setClass('m-caption m-caption-required');
        $optionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $optionId = new MLookupTextField('optionId', $this->getFormValue('optionId', $data->optionId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'optionDescription', 'selectiveProcess', 'optionCourseSelectiveProcess', null, array('selectiveProcessId' => 'selectiveProcessId'));
        $optionId->setJsHint(_M('Informe o código da opção', $module));
        //$validators[] = new MRequiredValidator('optionId', _M('Opção de curso', $module), 'required');
        $optionDescription = new MTextField('optionDescription', $this->getFormValue('optionDescription', $data->optionDescription), _M('Descrição do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $optionDescription->setJsHint(_M('Descrição do processo seletivo', $module));
        $optionDescription->setReadOnly(true);
        $hctOption = new MHContainer('hctSelectiveProcess', array($optionLabel, $optionId, $optionDescription));
        $hctOption->setShowLabel(false);
        $fields[] = $hctOption;

        // Field person (lookup physical person)
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId', null), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'personName', 'basic', 'PhysicalPerson', null, array('selectiveProcessId' => 'selectiveProcessId','optionId' => 'optionId'), true);
        $personId->setJsHint(_M('Informe o código da pessoa física', $module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module));
        $personName = new MTextField('personName', $this->getFormValue('personName', null), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $personName->hint = _M('Filtra apenas inscritos no processo seletivo e opção de curso, se especificados.');
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[] = $hctPerson;

        //Field subscription status
        $subscriptionStatusLabel = new MText('subscriptionStatusLabel', _M('Estado de classificação', $module) . ':');
        $subscriptionStatusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $options = SprSubscriptionStatus::search(null, true);

        $subscriptionStatusId = new MMultiSelection('subscriptionStatusId', $options, null, $options, false, '', 5);
        $subscriptionStatusId->setJsHint(_M('Informe um ou mais estado de classificação', $module));
        $hctSubscriptionStatus = new MHContainer('hctPerson', array($subscriptionStatusLabel, $subscriptionStatusId));
        $hctSubscriptionStatus->setShowLabel(false);
        $fields[] = $hctSubscriptionStatus;

        //Ordenação
        $orderTypeLabel = new MText('orderTypeLabel', _M('Tipo de ordenação', $module) . ':');
        $orderTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));

        $listOrder['inscricao'] = _M('Curso / Código da inscrição', $module);
        $listOrder['nome'] = _M('Curso / Nome', $module);
        $listOrder['pontos'] = _M('Curso / Total de pontos', $module);

        $orderType = new MSelection('orderType', $this->getFormValue('orderType'), null, $listOrder);
        $orderType->setJsHint(_M('Informe a situação', $module));
        $fields[] = new MHContainer('hctOrderType', array($orderTypeLabel, $orderType));

        //Query button
        $fields[] = new MButton('btnSearch', _M('Pesquisar', $module));

        //Grid data, obtem todos os classificados conforme os filtros.
        $gridData = array();

        //Filters
        $gridFilters = $this->getTypesData();
        $gridFilters->subscriptionStatusId = $gridFilters->subscriptionStatusId ? implode(',', $gridFilters->subscriptionStatusId) : null;
        
        if (strlen($MIOLO->_REQUEST('pn_page')) > 0 || $MIOLO->_REQUEST("btnSearch") == "Pesquisar")
        {
            //Verificar destino do processo seletivo
            $selectiveProcessID = MIOLO::_REQUEST('selectiveProcessId');
            $destinationModule = SprSelectiveProcess::obterDestinationModule($selectiveProcessID);
            $destinationModule == SprSelectiveProcess::DEST_MODULE_PEDAGOGICO ? $gridData = SprSelectiveProcess::getClassifiedPedagogico($gridFilters) : $gridData = SprSelectiveProcess::getClassified($gridFilters);
        }

        //Percorre todos os classificados
        for ($i = 0; $i < count($gridData); $i++)
        {
            list( $subscriptionId,
                    $position,
                    $personId,
                    $personName,
                    $subscriptionStatusId,
                    $subscriptionStatusDescription,
                    $optionId,
                    $descriptionOption,
                    $courseOccurrence,
                    $totalpointsstep,
                    $possuiVinculo ) = $gridData[$i];

            //Data grid
            $gridData[$i][0] = $subscriptionId;
            $gridData[$i][1] = $position;
            $gridData[$i][2] = $subscriptionId;
            $gridData[$i][3] = $personId;
            $gridData[$i][4] = $personName;
            $gridData[$i][5] = $subscriptionStatusId;
            $gridData[$i][6] = $subscriptionStatusDescription;
            $gridData[$i][7] = $optionId;
            $gridData[$i][8] = $descriptionOption;
            $gridData[$i][9] = $courseOccurrence;
            $gridData[$i][10] = $totalpointsstep;
            $gridData[$i][11] = $possuiVinculo;

            //Opçao de pedagógico
            $sprOptionTurma = new SprOptionOfertaTurma;

            if ($destinationModule == SprSelectiveProcess::DEST_MODULE_PEDAGOGICO)
            {
                $codigo_id = $sprOptionTurma->obterCodigoIdOfertaTurma($optionId);
                $courseOccurrence = $codigo_id[0] . ' - ' . $codigo_id[1];
            }

            //Option Course
            $sprOptionCourse = new SprOptionCourse();

            //filters
            $filters = new stdClass();
            $filters->optionId = $optionId;

            //Obtem as opções de curso
            $optionsCourse = $sprOptionCourse->search($filters);

            //Obtem as opç?es de turma
            $sql = $sprOptionTurma->msql();
            $sql->addEqualCondition('optionId', $filters->optionId);
            $optionsTurma = $sprOptionTurma->findMany($sql);

            //Se a coluna da opção de curso estiver vazia quer dizer que existe mais de uma opção de curso,
            //caso isso acontecer será instanciado um selection na grid para poder selecionar a opção desejada.
            if (!strlen($courseOccurrence) > 0)
            {
                $optionList = array();

                //Verificar modulo
                if ($destinationModule == SprSelectiveProcess::DEST_MODULE_PEDAGOGICO)
                {
                    foreach ((array) $optionsTurma as $row)
                    {
                        $optionDescricao = SprOptionOfertaTurma::obterDescricaoOpcao($optionId);
                        $key = 'personId=' . urlencode($personId) . '&ofertaturmaid=' . urlencode($row->ofertaturmaid) . '&unitid=' . urlencode($row->unitId) . '&subscriptionId=' . urlencode($subscriptionId) . '&possuiVinculo=' . $possuiVinculo;
                        $description = $optionDescricao;
                        $optionList[] = array($key, $description);
                    }
                }
                else
                {
                    foreach ((array) $optionsCourse as $row)
                    {
                        $key = 'personId=' . urlencode($personId) . '&courseId=' . urlencode($row->courseId) . '&courseVersion=' . urlencode($row->courseVersion) . '&turnId=' . urlencode($row->turnId) . '&unitId=' . urlencode($row->unitId) . '&subscriptionId=' . urlencode($subscriptionId) . '&possuiVinculo=' . $possuiVinculo;
                        $description = $row->courseName . ' / ' . $row->courseVersion . ' - ' . $row->turnDescription . ' - ' . $row->unitDescription;
                        $optionList[] = array($key, $description);
                    }
                }
                $selection = new MSelection('courseOccurrence' . $i, null, null, $optionList);
                $selection->addAttribute('onchange', "defineValue($i)");
                $gridData[$i][7] = $selection->generate();
            }
            else
            {
                if ($destinationModule == SprSelectiveProcess::DEST_MODULE_PEDAGOGICO)
                {
                    $row = $optionsTurma[0];
                    $key = 'personId=' . urlencode($personId) . '&ofertaturmaid=' . urlencode($row->ofertaturmaid) . '&unitid=' . urlencode($row->unitid) . '&subscriptionid=' . urlencode($subscriptionId) . '&possuiVinculo=' . $possuiVinculo;
                    $gridData[$i][0] = $key;
                }
                else
                {
                    $row = $optionsCourse[0];
                    $key = 'personId=' . urlencode($personId) . '&courseId=' . urlencode($row->courseId) . '&courseVersion=' . urlencode($row->courseVersion) . '&turnId=' . urlencode($row->turnId) . '&unitId=' . urlencode($row->unitId) . '&subscriptionId=' . urlencode($subscriptionId). '&possuiVinculo=' . $possuiVinculo;
                    $gridData[$i][0] = $key;
                }
            }
        }
        // Instantiate the results grid
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdGenerateContract', $gridFilters);
        $grid->setData($gridData);

        $fields[] = $grid;

        $mostrar = ($destinationModule != SprSelectiveProcess::DEST_MODULE_PEDAGOGICO);

        //Caso Academico mostra lookup de turma
        if ($mostrar)
        {
            $required = SAGU::getParameter('ACADEMIC', 'TURMA_REQUERIDA_NO_CONTRATO') == 't' ? '-required' : '';

            // Field class
            $classLabel = new MText('classLabel', _M('Turma', $module) . ':');
            $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $classLabel->setClass("m-caption m-caption{$required}");
            $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), _M('Código da turma', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('className_'), 'academic', 'Class', null, array('periodId' => 'periodId','optionId' => 'optionId'), true);
            $classId->setJsHint(_M('Informe o código da turma', $module));
            $className = new MTextField('className_', $this->getFormValue('className_', $data->className), _M('Nome da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $className->setJsHint(_M('Nome da turma', $module));
            $className->setReadOnly(true);
            $className->hint = _M('Filtra apenas turmas vinculadas ao período letivo do processo seletivo e a opção de curso.');
            $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $className));
            $hctClass->setShowLabel(false);
            $fields[] = $hctClass;
            
            if ($required == '-required')
            {
                $validators[] = new MRequiredValidator('classId', _M('Turma', $module));
            }

            if (!$this->getFormValue('classId', $data->classId))
            {
                $this->setFormValue('className_', null);
            }
        }
        //Caso pedagogico monta as condicoes de pagamentos, dias de vencimento e preco do curso
        else
        {
            //Verifica as opçoes do processo
            foreach ($gridData as $i => $row)
            {
                $arrayOption[$i] = $row[7];
            }
            $arrayOption = array_unique($arrayOption);

            //Obtem as ofertas de cursos e seus atributos
            foreach ($arrayOption as $x => $option)
            {
                //Obter ofertacurso, ocorrenciacurso e a oferta turma
                $optionOferta = SprOptionOfertaTurma::obterCodigoIdOfertaTurma($option);
                $ofertaTurma = $optionOferta[0];
                $nomeBase = 'condicoes' . $option;
                $condicoesTabela = array();

                //Condicoes de pagamento da opçao
                $preco = PrcPrecoCurso::obterPrecoDaOfertaDaTurma($ofertaTurma, PrcPrecoCurso::TIPO_MATRICULA);
                $condicoesdepagamento = PrcPrecoCondicao::listarCondicoesDePagamentoDoPreco($preco->precocursoid);

                foreach ($condicoesdepagamento as $condicaodepagamentoid => $descricao)
                {
                    $valorparcela = '0';
                    $valortotal = '0';

                    $precocondicao = PrcPrecoCondicao::obterValoresDaCondicao($preco->precocursoid, $condicaodepagamentoid);

                    foreach ($precocondicao as $c => $precocondicao)
                    {
                        $valorparcela = SAGU::calcNumber(SAGU::NVL($valorparcela, '0') . '+' . SAGU::NVL($precocondicao->valorparcela, '0'));
                        $valortotal = SAGU::calcNumber(SAGU::NVL($valortotal, '0') . '+' . SAGU::NVL($precocondicao->valortotal, '0'));
                    }

                    $condicoesTabela[$count]['condicaodepagamentoid'] = $condicaodepagamentoid;
                    $condicoesTabela[$count]['descricao'] = $descricao;
                    $condicoesTabela[$count]['valorparcela'] = $valorparcela;
                    $condicoesTabela[$count]['valortotal'] = $valortotal;
                    $count ++;
                }

                //Criar tabela com as condiçoes
                if (count($condicoesTabela) > 0)
                {
                    foreach ($condicoesTabela as $cod => $condicao)
                    {
                        $nomeOpt = 'condicaodepagamentoid&' . $ofertaTurma;
                        $opt[$condicao['condicaodepagamentoid']] = new MRadioButton($nomeOpt, $condicao['condicaodepagamentoid'], $checked, true);
                        $data[] = array($opt[$condicao['condicaodepagamentoid']], $condicao['descricao'], $condicao['valorparcela'], $condicao['valortotal']);
                    }

                    $columns = array('', _M('Condição'), _M('Valor da parcelas'), _M('Valor total'));
                    $table = new MTableRaw(null, $data, $columns);
                    $flds[] = $table;

                    $data = array();
                }

                //Criar data de vencimento
                unset($dias);
                unset($rdgDias);
                foreach (PrcDiaDeVencimento::listarDiasDeVencimento($preco->precocursoid) as $cod => $dia)
                {
                    $dias[] = new MRadioButton('dia_' . $cod, $cod, $dia, true, $dia);
                }
                $rdgDias = new MRadioButtonGroup('diadevencimentoid&' . $ofertaTurma, _M('Dia de vencimento (Código: ' . $optionOferta[1] . ")", $module), $dias, 'dia_' . $cod, '', 'horizontal');
                $bsgDias[] = new MBaseGroup('bsgDiaDeVencimento', _M('Dia de vencimento (Código: ' . $optionOferta[1] . ")", $module), array($rdgDias));
                
                //Criar basegroup da opçao
                $condicoes[] = new MBaseGroup($nomeBase, _M("Condições (Código: " . $optionOferta[1] . ")", $module), $flds);
                unset($flds);
            }

            if ( count($condicoes) > 0 )
            {
                //Criar basegroup geral (que conterá todas as outras)
                $todasCondicoes[] = $vct = new MVContainer('containerCondicoes', $condicoes);
                $vct->addBoxStyle('width', '100%');
                $baseGeralCondicoes = new MBaseGroup('condicoesFinal', _M("Condições de pagamento ", $module), $todasCondicoes);
                $fields[] = $baseGeralCondicoes;
            }

            if ( count($bsgDias) > 0 )
            {
                //Criar basegroup geral
                $todosDias[] = $vctDias = new MVContainer('vctDias', $bsgDias);
                $vctDias->addBoxStyle('width', '100%');
                $baseGeralDias = new MBaseGroup('diasFinal', _M("Dias de vencimento ", $module), $todosDias);
                $fields[] = $baseGeralDias;
            }
        }

        //Botao gerar
        $fields[] = new MSeparator();
        $fields[] = new MButton('submit_button', _M('Gerar', $module));
        $fields[] = new MSeparator();

        //Javascript que define o valor da MComboBox que define o id da linha
        $js = "
        function defineValue(index)
        {
            var combo = document.getElementById('courseOccurrence' + index);
            var selection = document.getElementById('selectGrdGenerateContract[' + index + ']');
            document.getElementById('selectGrdGenerateContract[' + index + ']').value = combo.value;

        }";

        $this->AddJsCode($js);

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses Submit from form
     */
    public function submit_button_click($sender = NULL)
    {
        $destinationModule = SprSelectiveProcess::obterDestinationModule(MIOLO::_REQUEST('selectiveProcessId'));

        //chama funcoes diferentes, dependendo do modulo
        if ($destinationModule == SprSelectiveProcess::DEST_MODULE_PEDAGOGICO)
        {
            $this->gerarInscricoesPedagogico();
        }
        else
        {
            $this->gerarContratosAcademico();
        }
    }

    private function gerarInscricoesPedagogico()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
    
        SDatabase::beginTransaction();
        try
        {
            //Obtem as inscrições selecionadas na lista
            $dataGrid = MIOLO::_request('selectGrdGenerateContract');

            //Verifica se foi selecionada pelo menos uma inscrição.
            if (is_array($dataGrid))
            {
                $countInscricoes = 0;
                //Percorre as inscrições
                foreach ((array) $dataGrid as $row)
                {
                    //Se o id da linha for apenas o código da inscrição exibe um erro, pois não foi selecionado um curso para alguma inscrição.
                    if (is_numeric($row))
                    {
                        $msg = _M('Não foi selecionada uma turma da inscrição para uma ou mais inscrições.', $module);
                        throw new Exception($msg);
                    }
                    //Se o id for seguido da ofertaturmaid, unitid
                    else
                    {
                        //Obtem os atributos da linha
                        $atributes = explode('&', $row);

                        //Pega o valor dos atributos
                        foreach ($atributes as $atribute)
                        {
                            $values = explode('=', $atribute);
                            $result[] = $values[1];
                        }

                        //Decodifica atributos
                        $personId = urldecode($result[0]);
                        $ofertaTurmaId = urldecode($result[1]);
                        $unitId = urldecode($result[2]);
                        $subscriptionId = urldecode($result[3]);
                        $possuiVinculo = urldecode($result[4]);

                        //Limpa variavel result
                        unset($result);
                    }
                    
                    if ( $possuiVinculo == DB_FALSE )
                    {
                        $data = new AcpInscricao();

                        //Dados para a geração da inscriçao
                        $data->personId = $personId;
                        $data->ofertaTurmaId = $ofertaTurmaId;
                        $data->unitId = $unitId;
                        $data->situacao = AcpInscricao::SITUACAO_PENDENTE;
                        $data->dataSituacao = SAGU::getDateNow();
                        $data->origem = AcpInscricao::ORIGEM_PROCESSO_SELETIVO;
                        $data->diaDeVencimentoId = MIOLO::_REQUEST('diadevencimentoid&' . $ofertaTurmaId);
                        $data->precoCondicaoInscricaoId = NULL;
                        $data->ofertaCursoId = SprOptionOfertaTurma::obterOfertaCursoId($ofertaTurmaId);
                        $data->notaFinal = NULL;
                        $data->conceitoFinal = NULL;
                        $data->parecerFinal = NULL;
                        $data->convenantId = NULL;
                        $data->centerId = NULL;
                        $data->precoCursoId = PrcPrecoCurso::obterPrecoDaOfertaDaTurma($ofertaTurmaId, PrcPrecoCurso::TIPO_MATRICULA)->precocursoid;
                        $data->subscriptionId = $subscriptionId;

                        // Obtém a pessoa física do inscrito.
                        $businessPerson = new BusinessBasicBusPerson();
                        $busPhysicalPersonStudent = new BusinessBasicBusPhysicalPersonStudent();
                        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                        $physicalPerson = $busPhysicalPerson->getPhysicalPerson($data->personId);

                        // Insere a pessoa física como aluno, caso ainda não seja.
                        if ($businessPerson->isPersonStudent($data->personId))
                        {
                            $busPhysicalPersonStudent->updatePhysicalPersonStudent($physicalPerson);
                        }
                        else
                        {
                            $busPhysicalPersonStudent->insertPhysicalPersonStudent($physicalPerson);
                        }

                        //inserir a inscriçao
                        $data->save();

                        //inserir a inscriçao na turma/grupo
                        $turmaGrupo = new AcpInscricaoTurmaGrupo();
                        $turmaGrupo->ofertaturmaid = $data->ofertaturmaid;
                        $turmaGrupo->inscricaoid = $data->inscricaoid;
                        $turmaGrupo->unitid = $data->unitid;
                        $condicaoPagamento = 'condicaodepagamentoid&' . $ofertaTurmaId;
                        $condicaoDePagamentoId = PrcPrecoCondicao::obterPrecoCondicao(MIOLO::_REQUEST($condicaoPagamento), $data->precocursoid);
                        $turmaGrupo->precocondicaomatriculaid = $condicaoDePagamentoId->precocondicaoid;
                        $turmaGrupo->salvarTurmaGrupo();

                        $countInscricoes++;
                    }
                }
                
                SDatabase::commit();

                if ($countInscricoes > 0)
                {
                    $goto = $MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':')));

                    $msg = _M($countInscricoes . " inscrições geradas com sucesso.", $module);
                    $this->AddInfo($msg, $goto);
                }
            }
            else
            {
                $msg = _M('Não foi selecionada nenhuma inscrição para gerar contrato.', $module);
                throw new Exception($msg);
            }
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            $this->addError($e->getMessage());
        }
    }

    private function gerarContratosAcademico()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // Salvando log da inserção do contato - ticket #39140
        // Apenas temporário, não conseguimos reproduzir erro de não inserir a
        // primeira movimentação contratual, por isso estamos salvando log 
        
        $pathLog = $MIOLO->getConf('home.miolo') . '/var/log/problemaMovimentacaoContratualProcessoSeletivo.txt';
        $logProblema = file_get_contents($pathLog);
        
        $logProblema .= PHP_EOL . PHP_EOL . PHP_EOL;
        $logProblema .= date(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_WITH_SECONDS_PHP'));
        $logProblema .= PHP_EOL .  "GERANDO CONTRATOS PELO PROCESSO SELETIVO " . MIOLO::_REQUEST('selectiveProcessId');
        
        try
        {
            SDatabase::beginTransaction();
            //Obtem as inscrições selecionadas na lista
            $dataGrid = MIOLO::_request('selectGrdGenerateContract');

            //Verifica se foi selecionada pelo menos uma inscrição.
            if (is_array($dataGrid))
            {
                $logProblema .= PHP_EOL . "OBTEVE DADOS DA GRID";
                
                //Percorre as inscrições
                foreach ((array) $dataGrid as $row)
                {
                    //Se o id da linha for apenas o código da inscrição exibe um erro, pois não foi selecionado um curso para alguma inscrição.
                    if (is_numeric($row))
                    {
                        $logProblema .= PHP_EOL . "THROW DO CÓDIGO, NÃO FOI SELECIONADO CURSO NA GRID";
                        
                        $msg = _M('Não foi selecionado um curso do contrato para uma ou mais inscrições.', $module);
                        throw new Exception($msg);
                    }
                    //Se o id for seguido do código, versão turno e unidade do curso
                    else
                    {
                        //Obtem os atributos da linha
                        $atributes = explode('&', $row);

                        //Pega o valor dos atributos
                        foreach ($atributes as $atribute)
                        {
                            $values = explode('=', $atribute);
                            $result[] = $values[1];
                        }

                        //Decodifica atributos
                        $personId = urldecode($result[0]);
                        $courseId = urldecode($result[1]);
                        $courseVersion = urldecode($result[2]);
                        $turnId = urldecode($result[3]);
                        $unitId = urldecode($result[4]);
                        $subscriptionId = urldecode($result[5]);
                        $possuiVinculo = urldecode($result[6]);

                        //Limpa variavel result
                        unset($result);
                        $logProblema .= PHP_EOL . "OBTEVE ATRIBUTOS DA LINHA DA GRID";
                    }

                    if ( $possuiVinculo == DB_FALSE )
                    {
                        $logProblema .= PHP_EOL . "NÃO ENCONTROU CONTRATO CRIADO, VAI GERAR UM NOVO";
                        
                        $selectiveProcess = new SprSelectiveProcess(MIOLO::_REQUEST('selectiveProcessId'));
                        
                        if ( !strlen($selectiveProcess->periodId) > 0 )
                        {
                            throw new Exception(_M('Para executar o processo de geração de contrato/inscrição deve ser cadastrado o período junto ao processo seletivo.'));
                        }
                        
                        //Dados para a geração de contrato
                        $data = new stdClass();
                        $data->personId = $personId;
                        $data->courseId = $courseId;
                        $data->courseVersion = $courseVersion;
                        $data->turnId = $turnId;
                        $data->unitId = $unitId;
                        $data->periodId = $selectiveProcess->periodId;
                        $data->maturityDay = SAGU::getParameter('BASIC', 'MATURITY_DAY');
                        $data->isListener = DB_FALSE;
                        $data->isRequestAcademicDegree = DB_FALSE;
                        $data->formationDate = NULL;
                        $data->formationPeriodId = NULL;
                        $data->conclusionDate = NULL;
                        $data->emendsDate = NULL;
                        $data->diplomaDate = NULL;
                        $data->globalAverage = NULL;
                        $data->obs = NULL;
                        $data->parcelsNumber = SAGU::getParameter('BASIC', 'DEFAULT_PARCELS_NUMBER');
                        $data->exploitEnrollsInTransfer = DB_FALSE;
                        $data->subscriptionId = $subscriptionId;
                        $data->classId = $this->getFormValue('classId');
                        $data->clssName = $this->getFormValue('className_');

                        // Obtém a pessoa física do inscrito.
                        $businessPerson = new BusinessBasicBusPerson();
                        $busPhysicalPersonStudent = new BusinessBasicBusPhysicalPersonStudent();
                        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                        $physicalPerson = $busPhysicalPerson->getPhysicalPerson($data->personId);

                        // Insere a pessoa física como aluno, caso ainda não seja.
                        if ($businessPerson->isPersonStudent($data->personId))
                        {
                            $logProblema .= PHP_EOL . "ENCONTROU PESSOA " . $data->personId . " COMO ALUNO";
                            
                            $busPhysicalPersonStudent->updatePhysicalPersonStudent($physicalPerson);
                        }
                        else
                        {
                            $logProblema .= PHP_EOL . "INSERIU NOVA PESSOA ALUNO";
                            $busPhysicalPersonStudent->insertPhysicalPersonStudent($physicalPerson);
                        }

                        //Filtros do contrato
                        $filter->personId = $data->personId;
                        $filter->courseId = $data->courseId;
                        $filter->courseVersion = $data->courseVersion;
                        $filter->turnId = $data->turnId;
                        $filter->unitId = $data->unitId;

                        //Busca por contratos com os mesmos atributos
                        $businessContract = new BusinessAcademicBusContract();
                        $contract = $businessContract->searchContract($filter);

                        if ($contract)
                        {
                            list( $contractId,
                                    $limbo,
                                    $limbo,
                                    $limbo,
                                    $limbo,
                                    $limbo,
                                    $limbo,
                                    $limbo,
                                    $limbo,
                                    $limbo,
                                    $limbo,
                                    $limbo ) = $contract[0];

                            //Atualiza o código da inscrição caso o contrato ja exista
                            $dataContract = $businessContract->getContract($contract[0][0]);
                            $dataContract->subscriptionId = $subscriptionId;
                            $businessContract->updateContract($dataContract);

                            $contractLastMovement = new stdClass();
                            $contractLastMovement = $businessContract->getContractLastMovementStatus($contractId);
                            
                            $logProblema .= PHP_EOL . "ENCONTROU O CONTRATO {$contractId} JÁ CADASTRADO PARA A PESSOA";
                        }
                        else //nao possui contrato criado
                        {
                            //inserir o contrato
                            $data->contractId = $contractId = $businessContract->insertContract($data);
                            $logProblema .= PHP_EOL . "INSERIU NOVO CONTRATO " . $data->contractId; 
                        }

                        $busClassPupil = new BusinessAcademicBusClassPupil();

                        //Turma
                        if (strlen($data->classId) > 0)
                        {
                            $classData = new stdClass();
                            $classData->contractId = $contractId;
                            $classData->classId = $data->classId;
                            $classData->beginDate = strlen($data->classBeginDate) > 0 ? $data->classBeginDate : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));

                            if (strtoupper($busClassPupil->checkCourse($classData)) == strtoupper(DB_TRUE))
                            {
                                try
                                {
                                    $logProblema .= PHP_EOL . "INSERIU CONTRATO {$data->contractId} NA TURMA {$classData->classId}";
                                    $busClassPupil->insertOrUpdateClassPupil($classData);
                                }
                                catch (Exception $e)
                                {
                                    $logProblema .= PHP_EOL . "TRHOW DO CÓDIGO, ERRO AO INSERIR ALUNO NA TURMA";
                                    $this->addError(_M('Erro ao inserir dados da turma do aluno. ', $module) . $e->getMessage());
                                }
                            }
                            else
                            {
                                $logProblema .= PHP_EOL . "TRHOW DO CÓDIGO, TURMA E CONTRATO SÃO IMCOMPATÍVEIS";
                                throw new Exception(_M('A turma e o contrato selecionados são incompatíveis. Selecione uma turma que pertença ao mesmo curso do contrato.', $module));
                            }
                        }

                        //Insere movimentação contratual para o aluno
                        if ($contractId)
                        {
                            $logProblema .= PHP_EOL . "INÍCIO DA LÓGICA PARA INSERÇÃO DA MOVIMENTAÇÃO CONTRATUAL PARA O CONTRATO {$contractId}";
                            $data->orderByDesc = DB_TRUE;
                            $businessLearningPeriod = new BusinessAcademicBusLearningPeriod();
                            $learningPeriod = $businessLearningPeriod->searchLearningPeriod($data);
                            
                            $argsURL['periodIdS'] = $data->periodId;
                            $argsURL['courseVersion'] = $data->courseVersion;
                            $argsURL['turnId'] = $data->turnId;
                            $argsURL['unitId'] = $data->unitId;
                            $argsURL['courseId'] = $data->courseId;
                            $argsURL['event'] = 'btnSearch:click';
                            $href = $MIOLO->GetActionURL('academic', 'main:register:learningPeriod', null, $argsURL);
                            $link = new MLink('_link', null, $href, 'clique aqui', '_new');
                            
                            if ( !strlen($learningPeriod[0][0]) > 0 )
                            {
                                $logProblema .= PHP_EOL . "THROW DO CÓDIGO, NÃO ENCONTROU PERÍODO LETIVO CADASTRADO";
                                throw new Exception(_M('Não foi encontrado um período letivo para a geração do contrato/inscrição. Para consultar os períodos letivos ' . $link->generate() . '.'));
                            }

                            $dataMovement->contractId = $contractId;
                            $dataMovement->stateContractId = SAGU::getParameter('BASIC', 'WRITING_STATE_CONTRACT');
                            $dataMovement->reasonId = SAGU::getParameter('SELECTIVEPROCESS', 'REASON_ID_WRITING_STATE_CONTRACT');
                            $dataMovement->learningPeriodId = $learningPeriod[0][0];
                            $dataMovement->stateTime = null;

                            $businessMovementContract = new BusinessAcademicBusMovementContract();

                            // Insere a movimentação apenas se não existe a movimentação para o período
                            $movimentacao = $businessMovementContract->searchMovementContract($dataMovement);

                            if ( !count($movimentacao) > 0 )
                            {
                                $logProblema .= PHP_EOL . "NÃO ENCONTROU NENHUMA MOVIMENTAÇÃO CONTRATUAL PARA O PERÍODO, ESTÁ INSERINDO UM NOVO, CONTRATO {$contractId}";
                                //Insert movement contract
                                $dataMovement->stateTime = date('d-m-Y G:i:s');
                                $businessMovementContract->insertMovementContract($dataMovement);
                            }

                            $countInsertContract++;
                        }
                    }
                }

                file_put_contents($pathLog, $logProblema);
                
                SDatabase::commit();

                if ($countInsertContract > 0)
                {
                    $businessContract->commit();

                    $goto = $MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':')));

                    $opts = array(
                        'event' => 'tbBtnNew_click',
                        'function' => 'insert'
                    );

                    $caption = _M('Questão', $module);
                    $msg = $countInsertContract . ' ' . _M('contratos gerados', $module) . '.';

                    $this->AddInfo($msg, $goto);
                }
            }
            else
            {
                $msg = _M('Não foi selecionada nenhuma inscrição para gerar contrato.', $module);
                throw new Exception($msg);
            }
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            
            $this->addError($e->getMessage());
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data->selectiveProcessId = $this->getFormValue('selectiveProcessId');
        $data->optionId = $this->getFormValue('optionId');
        $data->personId = $this->getFormValue('personId');
        $data->subscriptionStatusId = $this->getFormValue('subscriptionStatusId');
        $data->orderType = $this->getFormValue('orderType');

        $data->orderType = $data->orderType ? $data->orderType : 'nome';

        return $data;
    }

}

?>
