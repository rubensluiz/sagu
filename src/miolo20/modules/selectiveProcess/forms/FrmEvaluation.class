<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelo passo 2 do detalhamento de etapas.
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 20/12/2010
 *
 **/

class FrmEvaluation extends SStepByStepForm
{
    public function __construct($steps = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
            $this->toolbar->enableButton( MToolBar::BUTTON_BACK );
            $this->toolbar->setButtonURL( MToolBar::BUTTON_BACK, $MIOLO->getActionURL($module, $action, null, array('function' => 'insert', 'event' => 'tbBtnNew:click', 'step' => '1')) );
            $this->toolbar->setIsPost( MToolBar::BUTTON_BACK );
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Load data
        $stepData = $this->getStepDataByForm('FrmSelectionStep');
        $stepId = $stepData->stepId;

        if ( $this->isFirstAccess() )
        {
            MSubDetail::clearData('evaluations');

            if ( strlen($stepId) > 0 )
            {
                $sprStep = new SprStep($stepId);
            }
        }

        //EvaluationId
        $subFields[] = new SHiddenField('evaluationId');

        //Description
        $descriptionLabel = new MText('descriptionLabel', _M('Descrição',$module) . ':');
        $descriptionLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description = new MTextField('description', $this->getFormValue('description', $data->description), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint( _M('Informe a descrição', $module) );
        $validators[] = new MRequiredValidator('description', _M('Descrição',$module));
        $subFields[] = new MHContainer('descriptionCnt', array($descriptionLabel, $description));

        //Maxpoints
        $maxPointsLabel = new MText('maxpointsLabel', _M('Máximo de pontos', $module) . ':');
        $maxPointsLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $maxPoints = new MTextField('maxPoints', $this->getFormValue('maxpoints', $data->maxpoints), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $maxPoints->setJsHint( _M('Informe o número máximo de pontos', $module) );
        $validators[] = new MFloatValidator('maxPoints', _M('Máximo de pontos', $module));
        $subFields[] = new MHContainer('maxPointsCnt', array($maxPointsLabel, $maxPoints));

        //MinPoints
        $minPointsLabel = new MText('minPointsLabel', _M('Mínimo de pontos',$module) . ':');
        $minPointsLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $minPoints = new MTextField('minPoints', $this->getFormValue('minpoints', $data->minpoints), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $minPoints->setJsHint( _M('Informe o número mínimo de pontos', $module) );
        $validators[] = new MFloatValidator('minPoints', _M('Mínimo de pontos', $module));
        $subFields[] = new MHContainer('minPointsCnt', array($minPointsLabel, $minPoints));

        //Weight
        $weightLabel = new MText('weightLabel', _M('Peso', $module) . ':');
        $weightLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $weight = new MTextField('weight', $this->getFormValue('weight', $data->weight), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $weight->setJsHint( _M('Informe o peso da avaliação', $module) );
        $validators[] = new MFloatValidator('weight', _M('Peso', $module));
        $subFields[] = new MHContainer('weightCnt', array($weightLabel, $weight));

        //MaxSelectableOptions
        $maxSelectableOptionsLabel = new MText('maxSelectableOptionsLabel', _M('Máximo de opções selecionáveis',$module) . ':');
        $maxSelectableOptionsLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $maxSelectableOptions = new MTextField('maxSelectableOptions', $this->getFormValue('maxSelectableOptions', $data->maxSelectableOptions), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $maxSelectableOptions->setJsHint( _M('Informe o máximo de opções selecionáveis da avaliação', $module) );
        $validators[] = new MIntegerValidator('maxSelectableOptions', _M('Máximo de opções selecionáveis', $module), 'optional');
        $subFields[] = new MHContainer('maxSelectableOptionsCnt', array($maxSelectableOptionsLabel, $maxSelectableOptions));
        
        //Weight
        $priorityLabel = new MText('priorityLabel', _M('Prioridade', $module) . ':');
        $priorityLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $priority = new MTextField('priority', $this->getFormValue('priority', $data->priority), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $priority->setJsHint( _M('Informe o peso da avaliação', $module) );
        $validators[] = new MIntegerValidator('priority', _M('Prioridade', $module), 'optional');
        $subFields[] = new MHContainer('priorityCnt', array($priorityLabel, $priority));

        //InformedAtSubscription
        $informedAtSubscriptionLabel = new MText('informedAtSubscriptionLabel', _M('Permite informar titulações na inscrição', $module) . ':');
        $informedAtSubscriptionLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $informedAtSubscriptionLabel->setClass('m-caption m-caption-required');
        $informedAtSubscription = new MSelection('informedAtSubscription', null, $data->informedAtSubscription, SAGU::listTrueFalse(0));
        $validators[] = new MRequiredValidator('informedAtSubscription', _M('Permite informar titulações na inscrição', $module));
        $informedAtSubscription->setJsHint( _M('Quando habilitado, permite que o candidato informe as pontuações com as quais deseja concorrer no momento da sua inscrição.', $module) );
        $subFields[] = new MHContainer('informedAtSubscriptionHct', array($informedAtSubscriptionLabel, $informedAtSubscription));

        //IsInternal
        $isInternalLabel = new MText('isInternalLabel', _M('É interna', $module) . ':');
        $isInternalLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $isInternalLabel->setClass('m-caption m-caption-required');
        $isInternal = new MSelection('isInternal', null, $data->isInternal, SAGU::listTrueFalse(0));
        $validators[] = new MRequiredValidator('isInternal', _M('É interna', $module));
        $isInternal->setJsHint( _M('Informa se esta avaliação é interna (trata-se de uma avaliação do próprio processo seletivo) ou externa (trata-se de uma avaliação cuja pontuação vem de fora do processo seletivo, como ENEM, por exemplo).', $module) );
        $subFields[] = new MHContainer('isInternalCnt', array($isInternalLabel, $isInternal));

        //
        // Basegroup fields
        //
        $bgrFields = array();

        $bgrFields[] = new MLabel('* Ao habilitar algum dos campos abaixo, o candidato, no momento da inscrição, terá que fornecer informações sobre o respectivo campo para cada uma das opções de avalição existentes. Caso nenhum campo seja habilitado, o candidato escolherá, no momento da inscrição, apenas uma das opções existentes.');

        //AllowFileAttach
        $allowAttachmentLabel = new MText('allowAttachmentLabel', _M('Permite anexar arquivos', $module) . ':');
        $allowAttachmentLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $allowAttachmentLabel->setClass('m-caption m-caption-required');
        $allowAttachment = new MTextField('allowAttachment', $data->allowAttachment, '',SAGU::getParameter('BASIC', 'FIELD_ID_SIZE') );
        $validators[] = new MIntegerValidator('allowAttachment', _M('Permite anexar arquivos', $module), 'required');
        $allowAttachment->setJsHint( _M('Informe quantos arquivos podem ser anexados. O valor 0 (zero) desabilita a anexação de arquivos no momento da inscrição do candidato.', $module) );
        $bgrFields[] = new MHContainer('enableDesiredScoreFieldCnt', array($allowAttachmentLabel, $allowAttachment));

        //EnableDescriptionField
        $enableDescriptionFieldLabel = new MText('enableDescriptionFieldLabel', _M('Permite informações complementares sobre a opção de avaliação escolhida',$module) . ':');
        $enableDescriptionFieldLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $enableDescriptionFieldLabel->setClass('m-caption m-caption-required');
        $enableDescriptionField = new MSelection('enableDescriptionField', null, $data->enableDescriptionField, SAGU::listTrueFalse(0));
        $validators[] = new MRequiredValidator('enableDescriptionField', _M('Permite informações complementares sobre a opção de avaliação escolhida',$module));
        $enableDescriptionField->setJsHint( _M('Se habilitado, disponibiliza um local para que o candidato forneça informações complementares sobre a opção de avaliação escolhida.', $module) );
        $bgrFields[] = new MHContainer('enableDescriptionFieldCnt', array($enableDescriptionFieldLabel, $enableDescriptionField));

        //EnableDesiredScoreField
        $enableDesiredScoreFieldLabel = new MText('enableDesiredScoreFieldLabel', _M('Permite informar pontuação do critério de avaliação', $module) . ':');
        $enableDesiredScoreFieldLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $enableDesiredScoreFieldLabel->setClass('m-caption m-caption-required');
        $enableDesiredScoreField = new MSelection('enableDesiredScoreField', null, $data->enableDesiredScoreField, SAGU::listTrueFalse(0));
        $validators[] = new MRequiredValidator('enableDesiredScoreField', _M('Permite informar pontuação do critério de avaliação',$module));
        $enableDesiredScoreField->setJsHint( _M('Permite ao candidato informar a pontuação com a qual deseja concorrer no critério de avaliação selecionado.', $module) );
        $bgrFields[] = new MHContainer('enableDesiredScoreFieldCnt', array($enableDesiredScoreFieldLabel, $enableDesiredScoreField));

        $subFields[] = new sBaseGroup('bgr' . rand(), _M('', $module), $bgrFields);

        //Columns
        $cols[] = new MGridColumn(_M('Código da avaliação', $module), 'left', true, '', false, 'evaluationId');
        $cols[] = new MGridColumn(_M('Descrição', $module), 'left', true, '', true, 'description');
        $cols[] = new MGridColumn(_M('Máximo de pontos', $module), 'right', true, '', true, 'maxPoints');
        $cols[] = new MGridColumn(_M('Mínimo de pontos', $module), 'right', true, '', true, 'minPoints');
        $cols[] = new MGridColumn(_M('Peso', $module), 'right', true, '', true, 'weight');
        $cols[] = new MGridColumn(_M('Máximo de opções selecionáveis', $module), 'right', true, '', true, 'maxSelectableOptions');
        $cols[] = new MGridColumn(_M('Prioridade', $module), 'right', true, '', true, 'priority');
        $cols[] = new MGridColumn(_M('Informar títulos a avaliar na inscrição', $module), 'left', true, '', true, 'informedAtSubscription',null,SAGU::listTrueFalse(0, true));
        $cols[] = new MGridColumn(_M('É interno', $module), 'left', true, '', true, 'isInternal',null,SAGU::listTrueFalse(0, true));
        $cols[] = new MGridColumn(_M('Permite anexar arquivos', $module), 'right', true, '', true, 'allowAttachment');
        $cols[] = new MGridColumn(_M('Permite informar descrição do critério de avaliação', $module), 'left', true, '', true, 'enableDescriptionField',null, SAGU::listTrueFalse(0, true));
        $cols[] = new MGridColumn(_M('Permite informar pontuação do critério de avaliação', $module), 'left', true, '', true, 'enableDesiredScoreField',null,SAGU::listTrueFalse(0, true));

        $fields[] = $sub = new MSubDetail('evaluations', _M('Avaliação', $module), $cols, $subFields, true);
        $sub->setValidators($validators);
        
        $fields[] = new MSelection('calculationMethod', $this->getFormValue('calculationMethod', $sprStep->calculationMethod), _M('Método de cálculo', $module), SprStep::listCalculationMethod(0), false, _M('Método de cálculo das avaliações na etapa, podendo ser por média ou soma.'));
        $valids[] = new MRequiredValidator('calculationMethod', _M('Método de cálculo', $module));
        
        $checked = ( !$MIOLO->page->isPostBack() && $sprStep->digitacaoNotasSomenteAprovados == DB_TRUE ) || isset($_REQUEST['digitacaoNotasSomenteAprovados']);
        
        //digitacaoNotasSomenteAprovados aparecer a partir da etapa 2 #37319
        $stepData = $this->getStepDataByForm('FrmSelectionStep');
        $sprStep = new SprStep($stepData->stepId);
        if($sprStep->steporder > 1 )
        {
            $fields[] = new MCheckBox('digitacaoNotasSomenteAprovados', DB_TRUE, _M('Digitar notas para somente aprovados nas etapas anteriores', $module), $checked);
        }
        
        if (count($sprStep->evaluations) > 0 && $this->isFirstAccess() )
        {
            $sub->setData( SAGU::convertSTypeToSubDetail($cols, $sprStep->evaluations) );
        }
        
        $this->setFields($fields);
        $this->setValidators($valids);        
    }


    public function nextStepButton_click( $args = null )
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $data = $this->getData();

        //Validates that an evaluation was inserted
        try
        {
            $msg = _M('É necessário inserir pelo menos uma avaliação para a etapa', $module).'.';
            $valid = false;
            if ( count($data->evaluations) > 0 )
            {
                foreach ( $data->evaluations as $evaluation )
                {
                    if( !$evaluation->removeData == DB_TRUE )
                    {
                        $valid = true;
                    }
                }
                if ( $valid )
                {
                    parent::nextStepButton_click($args);
                }
                else
                {
                    throw new Exception( $msg );
                }
            }
            else
            {
                throw new Exception( $msg );
            }
        }
        catch (Exception $e)
        {
            $this->AddInfo($e->getMessage());
        }
    }
}
?>
