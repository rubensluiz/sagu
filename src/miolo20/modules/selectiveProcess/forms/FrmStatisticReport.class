<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Statistic report form
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch  [samuel@solis.copp.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 18/01/2011
 * */

/**
 * Formulário para manipular os relatórios estatísticos
 * */
class FrmStatisticReport extends SForm
{

    /**
     * Método contrutor
     * */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Relatório de estatística', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Método padrão para definição dos campos
     * */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Field selective process (lookup selective process)
        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Processo seletivo', $module) . ':');
        $selectiveProcessLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $selectiveProcessLabel->setClass('m-caption m-caption-required');
        $selectiveProcessId = new MLookupTextField('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'selectiveProcessDescription', $module, 'selectiveProcess', null, null, true);
        $selectiveProcessId->setJsHint(_M('Informe o código do processo seletivo', $module));
        $selectiveProcessDescription = new MTextField('selectiveProcessDescription', $this->getFormValue('selectiveProcessDescription', $data->selectiveProcessDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $selectiveProcessDescription->setReadOnly(true);
        $selectiveProcessDescription->setJsHint(_M('Descrição do processo seletivo', $module));
        $fields[] = $selectiveProcess = new MHContainer('selectiveProcessCnt', array( $selectiveProcessLabel, $selectiveProcessId, $selectiveProcessDescription ));
        $selectiveProcess->showLabel = true;
        $validators[] = new MIntegerValidator('selectiveProcessId', _M('Processo seletivo', $module), 'required');

        // Field step (lookup step)
        $stepLabel = new MText('stepLabel', _M('Etapa', $module) . ':');
        $stepLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $stepId = new MLookupTextField('stepId', $this->getFormValue('stepId', $data->stepId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'stepDescription, selectiveProcessId, selectiveProcessDescription', $module, 'step', null, array( 'selectiveProcessId' => 'selectiveProcessId' ), true);
        $stepId->setJsHint(_M('Informe o código da etapa', $module));
        $stepDescription = new MTextField('stepDescription', $this->getFormValue('stepDescription', $data->stepDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stepDescription->setReadOnly(true);
        $stepDescription->setJsHint(_M('Descrição da etapa', $module));
        $fields[] = $step = new MHContainer('stepCnt', array( $stepLabel, $stepId, $stepDescription ));
        $step->showLabel = true;
        $validators[] = new MIntegerValidator('stepId', _M('Etapa', $module));

        // Report option
        $reportOptions = array( array( _M('Estatística por conclusão de ensino médio', $module), 1 ),
                                array( _M('Estatística por comparação de idade', $module), 2 ),
                                array( _M('Estatística por sexo', $module), 3 ),
                                array( _M('Estatística por necessidade especial', $module), 4 ),
                                array( _M('Estatística de inscritos por cidade', $module), 5 ),
                                array( _M('Estatística de inscritos por instituição', $module), 6 ) );

        $reportOptionLabel = new MLabel(_M('Opções de relatório', $module) . ':');
        $reportOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $data->reportOption = strlen($data->reportOption) > 0 ? $data->reportOption : 1;
        $reportOption = new MRadioButtonGroup('reportOption', '', $reportOptions, $this->getFormValue('reportOption', $data->reportOption));
        $reportOption->setShowLabel(false);

        $fields[] = new MHContainer('hctReportOption', array( $reportOptionLabel, $reportOption ));
        $fields[] = new MSeparator('');
        $fields[] = new MButton('btnGenerate', _M('Localizar', $module));
        $fields[] = new MSeparator('');

        $this->setFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }
    /*
     * Busca pelos inscritos e lista monta a grid com os dados conforme os filtros
     */

    public function btnGenerate_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $filter = $this->getTypesData();

        try
        {
            if ( (strlen($filter->reportOpt) > 0) && (strlen($filter->selectiveProcessId) > 0) )
            {
                if ( $filter->reportOpt == 1 )
                {
                    $data = SprReports::searchStatisticForHighSchool($filter->selectiveProcessId);

                    if ( count($data) > 0 )
                    {
                        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdStatisticForHighSchool', $filters);
                        $grdResults->setData($data);
                        $grdResults->setClose(null);
                        unset($grdResults->actions);
                        $grdResults->setTitle(_M('Relatório por conclusão de ensino médio', $module));
                    }
                    else
                    {
                        throw new Exception(_M('Nenhum registro encontrado.', $module));
                    }
                }
                elseif ( $filter->reportOpt == 2 )
                {
                    $data = SprReports::searchStatisticForAge($filter->selectiveProcessId);

                    if ( count($data) > 0 )
                    {
                        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdStatisticForAge', $filters);
                        $grdResults->setData($data);
                        $grdResults->setClose(null);
                        unset($grdResults->actions);
                        $grdResults->setTitle(_M('Relatório por idade', $module));
                    }
                    else
                    {
                        throw new Exception(_M('Nenhum registro encontrado.', $module));
                    }
                }
                elseif ( $filter->reportOpt == 3 )
                {
                    $data = SprReports::searchStatisticForSex($filter->selectiveProcessId);

                    if ( count($data) > 0 )
                    {
                        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdStatisticForSex', $filters);
                        $grdResults->setData($data);
                        $grdResults->setClose(null);
                        unset($grdResults->actions);
                        $grdResults->setTitle(_M('Relatório por sexo', $module));
                    }
                    else
                    {
                        throw new Exception(_M('Nenhum registro encontrado.', $module));
                    }
                }
                elseif ( $filter->reportOpt == 4 )
                {
                    $data = SprReports::searchStatisticForSpecialNecessity($filter->selectiveProcessId);

                    if ( count($data) > 0 )
                    {
                        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdStatisticForSpecialNecessity', $filters);
                        $grdResults->setData($data);
                        $grdResults->setClose(null);
                        unset($grdResults->actions);
                        $grdResults->setTitle(_M('Relatório por necessidade especial', $module));
                    }
                    else
                    {
                        throw new Exception(_M('Nenhum registro encontrado.', $module));
                    }
                }
                elseif ( $filter->reportOpt == 5 )
                {
                    $data = SprReports::searchStatisticForSubscriptionCity($filter->selectiveProcessId);

                    if ( count($data) > 0 )
                    {
                        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdStatisticForSubscriptionCity', $filters);
                        $grdResults->setData($data);
                        $grdResults->setClose(null);
                        unset($grdResults->actions);
                        $grdResults->setTitle(_M('Relatório de inscritos por cidade', $module));
                    }
                    else
                    {
                        throw new Exception(_M('Nenhum registro encontrado.', $module));
                    }
                }
                else if ( $filter->reportOpt == 6 )
                {
                    $data = SprReports::searchStatisticForSubscriptionInstitution($filter->selectiveProcessId);

                    if ( count($data) > 0 )
                    {
                        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdStatisticForSubscriptionInstitution', $filters);
                        $grdResults->setData($data);
                        $grdResults->setClose(null);
                        unset($grdResults->actions);
                        $grdResults->setTitle(_M('Relatório de inscritos por instituição', $module));
                    }
                    else
                    {
                        throw new Exception(_M('Nenhum registro encontrado.', $module));
                    }
                }
                else
                {
                    throw new Exception(_M('Por favor, escolha um tipo de relatório.', $module));
                }
            }

            $this->addField($grdResults);
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data->reportOpt = $this->getFormValue('reportOption');
        $data->selectiveProcessId = $this->getFormValue('selectiveProcessId');

        return $data;
    }
}

?>