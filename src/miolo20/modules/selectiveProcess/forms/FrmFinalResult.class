<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Sagu [sagu2@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 09/11/2011
 */
class FrmFinalResult extends SForm
{
    const ORDER_TYPE_POSITION = 'P';
    const ORDER_TYPE_ALPHABETICAL = 'A';
    const ORDER_TYPE_GERAL_POSITION = 'G';
    
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Resultado final', $module), null, null);

        // Desabilita botões da MToolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Processo seletivo
        $sprSP = new SprSelectiveProcess();
        $selectiveProcess = new MSelection('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), _M('Processo seletivo', $module), $sprSP->listNormal());
        $selectiveProcess->addAttribute('onchange', $this->getAjaxAction('changeSelectiveProcessId', 'divMoreFields', false));
        $selectiveProcess->setJsHint(_M('Informe o processo seletivo', $module));
        $selectiveProcess->showRequiredLabel = true;
        $fields[] = $selectiveProcess;
        $validators[] = new MIntegerValidator('selectiveProcessId', _M('Processo seletivo', $module), 'required');

        // Campo para adição de componente(s) por ajax
        $fields[] = new MDiv('divMoreFields', $this->changeSelectiveProcessId($data));
        
        $fields[] = new MSeparator();
        $fields[] = new MButton('btnShowSubscriptionList', _M('Buscar', $module));
        $fields[] = new MSeparator();

        // Filtros
        $filters = $this->getTypesData();

        // Dados para a grid
        if ( strlen($filters->selectiveProcessId) > 0 )
        {
            $dataGrid = SprReports::searchFinalResult($filters);

            // Grid subscription list
            if ( count($dataGrid) > 0 )
            {
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdFinalResult',$filters);
                $grdResults->setData($dataGrid);
                $grdResults->setTitle(_M('Lista de inscritos', $module));
                $fields[] = $grdResults;
            }
            else
            {
                $this->addError(_M('Nenhum registro encontrado', $module));
            }
        }

        $this->SetFields($fields);
        $this->SetValidators($validators);
        parent::defineFields();
    }
    
    public function changeSelectiveProcessId($args)
    {
        $args->selectiveProcessId = strlen($args->selectiveProcessId)> 0 ? $args->selectiveProcessId : $this->getFormValue('selectiveProcessId');
        if ( strlen($args->selectiveProcessId) > 0 )
        {
            $fields[] = new MSeparator();
            
            // Etapas
            $filters = new stdClass();
            $filters->selectiveProcessId = $args->selectiveProcessId;
            
            $steps = SprStep::search($filters);
            
            if ( count($steps) > 0 )
            {
                $stepsLabel = new MText('stepsLabel', _M('Etapa', $module) . ':');
                $stepsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
                
                $listSteps = array();
                
                foreach ( $steps as $step )
                {
                    $listSteps[] = array($step->stepId, $step->description);
                }
                
                $stepsField = new MSelection('stepId', $this->getFormValue('stepId', $args->stepId), null, $listSteps);
                $stepsField->setJsHint(_M('Informe a etapa', $module));
                $fields[] = new MHContainer('hctSteps', array($stepsLabel, $stepsField));
            }
            
            // Opção de curso
            $optionCourseLabel = new MText('optionCourseLabel', _M('Opção de curso', $module) . ':');
            $optionCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
            
            $options = SprOption::search($filters);
            if (count($options) > 0)
            {
                // Monta opções de curso.
                $listOptions = array();
                foreach ($options as $opt)
                {
                    $listOptions[] = array($opt->optionId, $opt->description);
                }
                
                $optionCourse = new MSelection('optionId', $this->getFormValue('optionId',$args->optionId), null, $listOptions);
                $optionCourse->setJsHint(_M('Informe a opção de curso', $module));
                $fields[] = new MHContainer('hctOptionId', array($optionCourseLabel, $optionCourse));
                
                // Seta o novo validador.
                $this->SetValidators($validators);
            }
            
            $sprSP = new SprSelectiveProcess( $args->selectiveProcessId );
            if (!($sprSP->numberOfOptions > 0))
            {
                $fields[] = new MLabel( _M('Não foi encontrada a configuração de número de opções.', $module) );
            }
            else
            {
                // Número da opção
                $optionNumberLabel = new MText('optionNumberLabel', _M('Número da opção', $module) . ':');
                $optionNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
                
                // Monta os números de opção.
                $listOptions = array();
                for ($i=0; $i < $sprSP->numberOfOptions; $i++)
                {
                    $listOptions[] = array($i+1, $i+1);
                }
                
                $optionNumber = new MSelection('optionNumber', $this->getFormValue('optionNumber',$args->optionNumber), null, $listOptions);
                $optionNumber->setJsHint(_M('Caso queira, informe o número da opção', $module));
                $fields[] = new MHContainer('hctOptionNumber', array($optionNumberLabel, $optionNumber));
            }
            
            $statusLabel = new MText('statusLabel', _M('Situação', $module) . ':');
            $statusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
            
            $listStatus = SprSubscriptionStatus::search(null, true);
            
            $status = new MSelection('statusId', $this->getFormValue('statusId', $args->statusId), null, $listStatus);
            $status->setJsHint(_M('Informe a situação', $module));
            $fields[] = new MHContainer('hctStatus', array($statusLabel, $status));


            $checked = strlen($this->getFormValue('exibeResultadoAvaliacoes', $args->exibeResultadoAvaliacoes))>0 ? DB_TRUE: DB_FALSE;
            $exibeResultadoAvaliacoesLabel = new MText('exibeResultadoAvaliacoesLabel', _M('Exibir resultados das avaliações', $module) . ':');
            $exibeResultadoAvaliacoesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
            $exibeResultadoAvaliacoes = new MCheckBox('exibeResultadoAvaliacoes', DB_TRUE, null, $checked);
            $fields[] = new MHContainer('hctStatus', array($exibeResultadoAvaliacoesLabel, $exibeResultadoAvaliacoes));

            //Ordenação
            $orderTypeLabel = new MText('orderTypeLabel', _M('Tipo de ordenação', $module) . ':');
            $orderTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );

            $listOrder[] = array(self::ORDER_TYPE_POSITION, _M('Posição', $module));
            $listOrder[] = array(self::ORDER_TYPE_GERAL_POSITION, _M('Posição geral', $module));
            $listOrder[] = array(self::ORDER_TYPE_ALPHABETICAL, _M('Ordem alfabética', $module));

            $orderType = new MSelection('orderType', $this->getFormValue('orderType',  $this->getFormValue('orderType',$args->orderType)), null, $listOrder);
            $orderType->setJsHint(_M('Informe a situação', $module));
            $fields[] = new MHContainer('hctOrderType', array($orderTypeLabel, $orderType));

            //Formato
            $reportFormatLabel = new MText('exibeResultadoAvaliacoesLabel', _M('Formato', $module) . ':');
            $reportFormatLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
            $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', null, SReport::listReportFormat());
            $fields[] = new MHContainer('hctReportFormat', array($reportFormatLabel, $reportFormat));
            $validators[] = new MRequiredValidator('reportFormat', _M('Formato do relatório', $module));

        }
        return $fields ? $fields : new MHiddenField('optionId',null);
    }

    /**
     * Método para geração do Relatório
     */
    public function generateReport($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();
        
        if ( strlen($data->selectiveProcessId) > 0 )
        {
            $options['parameters']['selectiveprocessid'] = (integer)$data->selectiveProcessId;
            
            $sprSP = new SprSelectiveProcess($data->selectiveProcessId);
            
            $options['parameters']['selectiveprocessdescription'] = $sprSP->description;
        }
        else
        {
            $this->AddError(_M("Processo seletivo é obrigatório"));
        }

        if ( strlen($data->stepId) > 0 )
        {
            $options['parameters']['stepid'] = (integer)$data->stepId;
        }
        
        if ( strlen($data->optionId) > 0 )
        {
            $options['parameters']['optionid'] = (integer)$data->optionId;
        }
        
        if ( strlen($data->optionNumber) > 0 )
        {
            $options['parameters']['optionnumber'] = (integer)$data->optionNumber;
        }
        
        if ( strlen($data->statusId) > 0 )
        {
            $options['parameters']['statusid'] = (integer)$data->statusId;
        }
        
        if ( strlen($data->reportFormat)>0 )
        {
            $options['fileType'] = $data->reportFormat;
        }

        if ( strlen($data->orderType) > 0 )
        {
            $options['parameters']['ORDER_TYPE'] = $data->orderType;
        }

        $sreport = new SReport($options);
        $sreport->setReportName('finalResult');

        // Se não gerar o relatório.
        if ( !$sreport->generate() )
        {
            $this->addError(_M('Nenhum registro encontrado.', $module ));
        }
    }

    /**
     * Método que obtém os dados do formulário.
     */
    public function getTypesData() 
    {
        $data = new stdClass();
        $data->selectiveProcessId = $this->getFormValue('selectiveProcessId');
        $data->stepId = $this->getFormValue('stepId');
        $data->optionId = $this->getFormValue('optionId');
        $data->optionNumber = $this->getFormValue('optionNumber');
        $data->statusId = $this->getFormValue('statusId');
        $data->exibeResultadoAvaliacoes = $this->getFormValue('exibeResultadoAvaliacoes');
        $data->reportFormat = $this->GetFormValue('reportFormat');
        $data->orderType = $this->getFormValue('orderType');
        
        return $data;
    }
}
?>
