<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file manipulate the lookups for the basic module of sagu
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [Fabiano Tomasini]
 *
 * @since
 * Class created on 21/12/2010
 *
 **/

/**
 * Class to manipulate the Lookups
 **/
class BusinessSelectiveProcessLookup
{
    /**
     * Auto complete for course occurrence
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteSelectiveProcess(&$context)
    {
        $module = 'basic';
        $destinationModule = MIOLO::_REQUEST('destinationModule');

        $sql = 'SELECT A.description
              FROM spr.selectiveProcess A
             WHERE A.selectiveProcessId = ?';

        if ( strlen($destinationModule) > 0 )
        {
            $sql .= " AND A.destinationModule = '{$destinationModule}'";
        }

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Auto complete for course occurrence
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupSelectiveProcess(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $selectiveProcessId = $lookup->getFilterValue('selectiveProcessId');
        $description = $lookup->getFilterValue('description');
        $destinationModule = $lookup->getFilterValue('destinationModule');
        $isNotDestinationModule = $lookup->getFilterValue('isNotDestinationModule');

        $lookup->addFilterField( new MTextField('selectiveProcessId', $selectiveProcessId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new SHiddenField('destinationModule', $destinationModule) );
        $lookup->addFilterField( new SHiddenField('isNotDestinationModule', $isNotDestinationModule) );

        $MIOLO->page->onLoad( "document.{$MIOLO->page->name}.description.focus()" );

        $columns = array(
           new DataGridColumn('selectiveProcessId', _M('Código do processo seletivo', $module), 'right', true, null, true),
           new DataGridColumn('description', _M('Descrição', $module), 'left', true, null, true),
        );

        $sql = 'SELECT A.selectiveProcessId,
                       A.description,
                       A.periodId
                  FROM spr.selectiveProcess A ';

        if ( strlen($selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ?';
            $args[] = $selectiveProcessId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description;
        }

        if ( strlen($destinationModule) > 0 )
        {
            $where .= ' AND A.destinationModule = ?';
            $args[] = $destinationModule;
        }
        
        if ( strlen($isNotDestinationModule) > 0 )
        {
            $where .= ' AND A.destinationModule != ?';
            $args[] = $isNotDestinationModule;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.selectiveProcessId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar o processo seletivo', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for step and selective process
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteStep(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.description,
                       B.selectiveProcessId,
                       B.description
                  FROM spr.step A
            INNER JOIN spr.selectiveProcess B
                    ON (A.selectiveProcessid = B.selectiveProcessid)
                 WHERE A.stepId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for step
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupStep(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $MIOLO->page->onLoad( "document.{$MIOLO->page->name}.description.focus()" );

        //Step id
        $stepId = $lookup->getFilterValue('stepId');
        $description = $lookup->getFilterValue('description');
        //Selective process
        $selectiveProcessId = $lookup->getFilterValue('selectiveProcessId');
        $selectiveProcessDescription = $lookup->getFilterValue('selectiveProcessDescription');

        $lookup->addFilterField( new MTextField('stepId', $stepId, _M('Código da etapa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('selectiveProcessId', $selectiveProcessId, _M('Código do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('selectiveProcessDescription', $selectiveProcessDescription, _M('Descrição do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );

        $columns = array( new DataGridColumn('stepId', _M('Código da etapa', $module), 'right', true, null, true),
                          new DataGridColumn('stepDescription', _M('Descrição', $module), 'left', true, null, true),
                          new DataGridColumn('selectiveProcessId', _M('Código do processo seletivo', $module), 'right', true, null, true),
                          new DataGridColumn('selectiveProcessDescription', _M('Descrição do processo seletivo', $module), 'left', true, null, true),
                        );

        $sql = 'SELECT stepId,
                       A.description as stepDescription,
                       B.selectiveProcessId,
                       B.description as selectiveProcessDescription
                  FROM spr.step A
            INNER JOIN spr.selectiveProcess B
                    ON (A.selectiveProcessId = B.selectiveProcessId)';

        if ( strlen($stepId) > 0 )
        {
            $where .= ' AND A.stepId = ?';
            $args[] = $stepId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description;
        }

        if ( strlen($selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ?';
            $args[] = $selectiveProcessId;
        }

        if ( strlen($selectiveProcessDescription) > 0 )
        {
            $where .= ' AND B.description ILIKE ?';
            $args[] = $selectiveProcessDescription;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.stepId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar a etapa', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for subscription
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteSubscription(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.personId,
                       B.name personName,
                       A.selectiveProcessId,
                       C.description selectiveProcessDescription
                  FROM spr.subscription A
       INNER JOIN ONLY basPerson B
                    ON (A.personId = B.personId)
            INNER JOIN spr.selectiveProcess C
                    ON (A.selectiveProcessId = C.selectiveProcessId)
                 WHERE A.subscriptionId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for Subscription
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupSubscription(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        //Subscription Id
        $subscriptionId = $lookup->getFilterValue('subscriptionId');
        $personId = $lookup->getFilterValue('personId');
        $name = $lookup->getFilterValue('personName');
        //Selective process
        $selectiveProcessId = $lookup->getFilterValue('selectiveProcessId');
        $selectiveProcessDescription = $lookup->getFilterValue('selectiveProcessDescription');

        $lookup->addFilterField(new MTextField('subscriptionId', $stepId, _M('Inscrição', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personId', $personId, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $name, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('selectiveProcessId', $selectiveProcessId, _M('Código do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('selectiveProcessDescription', $selectiveProcessDescription, _M('Descrição do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array();
        $columns[] = new DataGridColumn('subscriptionId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personId', _M('Código da pessoa', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome da pessoa', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('selectiveProcessId', _M('Código do processo seletivo', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('selectiveProcessDescription', _M('Descrição do processo seletivo', $module), 'left', true, null, true);

        $sql = 'SELECT A.subscriptionId,
                       A.personId,
                       B.name personName,
                       A.selectiveProcessId,
                       C.description selectiveProcessDescription
                  FROM spr.subscription A
       INNER JOIN ONLY basPerson B
                    ON (A.personId = B.personId)
            INNER JOIN spr.selectiveProcess C
                    ON (A.selectiveProcessId = C.selectiveProcessId)';

        if ( strlen($subscriptionId) > 0 )
        {
            $where .= ' AND A.subscriptionId = ?';
            $args[] = $subscriptionId;
        }

        if ( strlen($name) > 0 )
        {
            $where .= ' AND B.name ILIKE ?';
            $args[] = $name . '%';
        }
        
        if ( strlen($personId) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ?';
            $args[] = $selectiveProcessId;
        }

        if ( strlen($selectiveProcessDescription) > 0 )
        {
            $where .= ' AND C.description ILIKE ?';
            $args[] = $selectiveProcessDescription;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.subscriptionId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar inscrição', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
    

    /**
     * Auto complete for subscription
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteSubscriptionReport(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.subscriptionId,
                       B.name personName,
                       A.selectiveProcessId,
                       C.description selectiveProcessDescription
                  FROM spr.subscription A
       INNER JOIN ONLY basPerson B
                    ON (A.personId = B.personId)
            INNER JOIN spr.selectiveProcess C
                    ON (A.selectiveProcessId = C.selectiveProcessId)
                 WHERE A.subscriptionId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for Subscription
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupSubscriptionReport(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        //Subscription Id
        $subscriptionId = $lookup->getFilterValue('subscriptionId');
        $personId = $lookup->getFilterValue('personId');
        $name = $lookup->getFilterValue('personName');
        //Selective process
        $selectiveProcessId = $lookup->getFilterValue('selectiveProcessId');
        $selectiveProcessDescription = $lookup->getFilterValue('selectiveProcessDescription');

        $lookup->addFilterField(new MTextField('subscriptionId', $stepId, _M('Inscrição', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personId', $personId, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $name, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('selectiveProcessId', $selectiveProcessId, _M('Código do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('selectiveProcessDescription', $selectiveProcessDescription, _M('Descrição do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array();
        $columns[] = new DataGridColumn('subscriptionId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personId', _M('Código da pessoa', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Nome da pessoa', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('selectiveProcessId', _M('Código do processo seletivo', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('selectiveProcessDescription', _M('Descrição do processo seletivo', $module), 'left', true, null, true);

        $sql = 'SELECT A.subscriptionId,
                       B.name personName,
                       A.personId,                       
                       A.selectiveProcessId,
                       C.description selectiveProcessDescription
                  FROM spr.subscription A
       INNER JOIN ONLY basPerson B
                    ON (A.personId = B.personId)
            INNER JOIN spr.selectiveProcess C
                    ON (A.selectiveProcessId = C.selectiveProcessId)';

        if ( strlen($subscriptionId) > 0 )
        {
            $where .= ' AND A.subscriptionId = ?';
            $args[] = $subscriptionId;
        }

        if ( strlen($name) > 0 )
        {
            $where .= ' AND B.name ILIKE ?';
            $args[] = $name . '%';
        }
        
        if ( strlen($personId) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ?';
            $args[] = $selectiveProcessId;
        }

        if ( strlen($selectiveProcessDescription) > 0 )
        {
            $where .= ' AND C.description ILIKE ?';
            $args[] = $selectiveProcessDescription;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.subscriptionId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar inscrição', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for evaluation and selective process
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteEvaluation(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.description,
                       B.stepId,
                       B.description AS stepDescription,
                       C.selectiveProcessId,
                       C.description AS selectiveProcessDescription
                  FROM spr.evaluation A
            INNER JOIN spr.step B
                    ON (A.stepId = B.stepId)
            INNER JOIN spr.selectiveProcess C
                    ON (B.selectiveProcessId = C.selectiveProcessId)
                 WHERE A.evaluationId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for evaluation
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupEvaluation(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $MIOLO->page->onLoad( "document.{$MIOLO->page->name}.description.focus()" );

        // Evaluation id
        $evaluationId = $lookup->getFilterValue('evaluationId');
        $description = $lookup->getFilterValue('description');
        // Step
        $stepId = $lookup->getFilterValue('stepId');
        $stepDescription = $lookup->getFilterValue('stepDescription');
        // Selective process
        $selectiveProcessId = $lookup->getFilterValue('selectiveProcessId');
        $selectiveProcessDescription = $lookup->getFilterValue('selectiveProcessDescription');

        $lookup->addFilterField( new MTextField('evaluationId', $evaluationId, _M('Código da avaliação', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('description', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('stepId', $stepId, _M('Código da etapa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('stepDescription', $stepDescription, _M('Descrição da etapa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('selectiveProcessId', $selectiveProcessId, _M('Código do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );
        $lookup->addFilterField( new MTextField('selectiveProcessDescription', $selectiveProcessDescription, _M('Descrição do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')) );

        $columns = array( new DataGridColumn('evaluationId', _M('Código da avaliação', $module), 'right', true, null, true),
                          new DataGridColumn('evaluationDescription', _M('Descrição', $module), 'left', true, null, true),
                          new DataGridColumn('stepId', _M('Código da etapa', $module), 'right', true, null, true),
                          new DataGridColumn('stepDescription', _M('Descrição da etapa', $module), 'left', true, null, true),
                          new DataGridColumn('selectiveProcessId', _M('Código do processo seletivo', $module), 'right', true, null, true),
                          new DataGridColumn('selectiveProcessDescription', _M('Descrição do processo seletivo', $module), 'left', true, null, true) );

        $sql = 'SELECT A.evaluationId,
                       A.description AS evaluationDescription,
                       B.stepId,
                       B.description AS stepDescription,
                       C.selectiveProcessId,
                       C.description AS selectiveProcessDescription
                  FROM spr.evaluation A
            INNER JOIN spr.step B
                    ON (A.stepId = B.stepId)
            INNER JOIN spr.selectiveProcess C
                    ON (B.selectiveProcessId = C.selectiveProcessId)';

        if ( strlen($evaluationId) > 0 )
        {
            $where .= ' AND A.evaluationId = ?';
            $args[] = $evaluationId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description;
        }

        if ( strlen($stepId) > 0 )
        {
            $where .= ' AND B.stepId = ?';
            $args[] = $sstepId;
        }

        if ( strlen($stepDescription) > 0 )
        {
            $where .= ' AND B.description ILIKE ?';
            $args[] = $stepDescription;
        }

        if ( strlen($selectiveProcessId) > 0 )
        {
            $where .= ' AND C.selectiveProcessId = ?';
            $args[] = $selectiveProcessId;
        }

        if ( strlen($selectiveProcessDescription) > 0 )
        {
            $where .= ' AND C.description ILIKE ?';
            $args[] = $selectiveProcessDescription;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.evaluationId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar a avaliação', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }


    /**
     * Option course selective process
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteOptionCourseSelectiveProcess(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.description as optionDescription,
                       B.selectiveProcessId,
                       B.description as selectiveProcessDescription
                  FROM spr.option A
            INNER JOIN spr.selectiveProcess B
                    ON A.selectiveProcessId = B.selectiveProcessId
                 WHERE A.optionId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for step
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupOptionCourseSelectiveProcess(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad( "document.{$MIOLO->page->name}.description.focus()" );

        //Option id
        $optionId = $lookup->getFilterValue('optionId');
        $description = $lookup->getFilterValue('description');
        //Selective process
        $selectiveProcessId = $lookup->getFilterValue('selectiveProcessId');
        $selectiveProcessDescription = $lookup->getFilterValue('selectiveProcessDescription');

        $lookup->addFilterField(new MTextField('optionId', $optionId, _M('Código da opção', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('description', $description, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('selectiveProcessId', $selectiveProcessId, _M('Código do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('selectiveProcessDescription', $selectiveProcessDescription, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array();
        $columns[] = new DataGridColumn('optionId', _M('Código da opção', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('optionDescription', _M('Descrição', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('selectiveProcessId', _M('Código do processo seletivo', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('selectiveProcessDescription', _M('Descrição do processo seletivo', $module), 'left', true, null, true);

        $sql = 'SELECT optionId,
                       A.description as optionDescription,
                       B.selectiveProcessId,
                       B.description as selectiveProcessDescription
                  FROM spr.option A
            INNER JOIN spr.selectiveProcess B
                    ON (A.selectiveProcessId = B.selectiveProcessId)';

        if ( strlen($optionId) > 0 )
        {
            $where .= ' AND A.optionId = ?';
            $args[] = $optionId;
        }

        if ( strlen($description) > 0 )
        {
            $where .= ' AND A.description ILIKE ?';
            $args[] = $description;
        }

        if ( strlen($selectiveProcessId) > 0 )
        {
            $where .= ' AND B.selectiveProcessId = ?';
            $args[] = $selectiveProcessId;
        }

        if ( strlen($selectiveProcessDescription) > 0 )
        {
            $where .= ' AND B.description ILIKE ?';
            $args[] = $selectiveProcessDescription;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.optionId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar a etapa', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
    
    
    /**
     * Auto complete for subscription
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteSubscriptionSimple(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT A.subscriptionId, 
                       A.personId || ' - ' || B.name
                  FROM spr.subscription A
       INNER JOIN ONLY basPerson B
                    ON (A.personId = B.personId)
                 WHERE A.subscriptionId = ?";

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }
    
    /**
     * Lookup for Subscription
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function lookupSubscriptionSimple(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        //Subscription Id
        $subscriptionId = $lookup->getFilterValue('subscriptionId');
        $personId = $lookup->getFilterValue('personId');
        $name = $lookup->getFilterValue('personName');
        //Selective process
        $selectiveProcessId = $lookup->getFilterValue('selectiveProcessId');
        $selectiveProcessDescription = $lookup->getFilterValue('selectiveProcessDescription');

        $lookup->addFilterField(new MTextField('subscriptionId', $stepId, _M('Inscrição', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personId', $personId, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $name, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('selectiveProcessId', $selectiveProcessId, _M('Código do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('selectiveProcessDescription', $selectiveProcessDescription, _M('Descrição do processo seletivo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $columns = array();
        $columns[] = new DataGridColumn('subscriptionId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('personName', _M('Pessoa', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('selectiveProcessId', _M('Código do processo seletivo', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('selectiveProcessDescription', _M('Descrição do processo seletivo', $module), 'left', true, null, true);

        $sql = "SELECT A.subscriptionId,
                       A.personId || ' - ' || B.name personName,
                       A.selectiveProcessId,
                       C.description selectiveProcessDescription
                  FROM spr.subscription A
       INNER JOIN ONLY basPerson B
                    ON (A.personId = B.personId)
            INNER JOIN spr.selectiveProcess C
                    ON (A.selectiveProcessId = C.selectiveProcessId)";

        if ( strlen($subscriptionId) > 0 )
        {
            $where .= ' AND A.subscriptionId = ?';
            $args[] = $subscriptionId;
        }

        if ( strlen($name) > 0 )
        {
            $where .= ' AND B.name ILIKE ?';
            $args[] = $name . '%';
        }
        
        if ( strlen($personId) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($selectiveProcessId) > 0 )
        {
            $where .= ' AND A.selectiveProcessId = ?';
            $args[] = $selectiveProcessId;
        }

        if ( strlen($selectiveProcessDescription) > 0 )
        {
            $where .= ' AND C.description ILIKE ?';
            $args[] = $selectiveProcessDescription;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.subscriptionId';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar inscrição', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
 
}
?>