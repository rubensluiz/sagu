<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @since
 * Class created on 15/12/2010
 *
 **/
/**
 * Valores possíveis:
 * 
 * inscriptionstatusid | description
 * ---------------------+-----------------
 * 1 | Inscrito
 * 2 | Classificado
 * 3 | Suplente
 * 4 | Desclassificado
 * 5 | Desistente
 * 6 | Classificado em outra opção
 *
 * @access public
 * @package Processo_seletivo
 */
class SprSubscriptionStatus extends SType
{

    /**
     * Constantes para o código do status
     */
    const INSCRIBED = 1;
    const CLASSIFIED = 2;
    const ALTERNATE = 3;
    const DISQUALIFIED = 4;
    const REFUSERS = 5;
    const CLASSIFIED_IN_OTHER_OPTION = 6;
    const CLASSIFIED_IN_QUOTE = 7;

    /*
     * Table fields
     */
    private $subscriptionStatusId;
    private $description;

    /**
     * Construtor da classe
     *
     * @param (integer) $subscriptionStatusId Chave primária da tabela
     */
    public function __construct($subscriptionStatusId = null)
    {
        if ( ! is_null($subscriptionStatusId) )
        {
            $this->subscriptionStatusId = $subscriptionStatusId;
            $this->populate();
        }
    }

    
    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    
    public function __set($name, $value)
    {
        $this->$name = $value;
    }


    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->subscriptionStatusId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM spr.subscriptionStatus
                      WHERE subscriptionStatusId = ?';

        $args = array($this->subscriptionStatusId);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->subscriptionStatusId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters, $returnList=false, $looseArgs=false)
    {
        $sql = 'SELECT subscriptionStatusId,
                       description
                  FROM spr.subscriptionStatus';

        $where = '';

        if ( is_array($filters) )
        {
            foreach ( $filters as $key => $value )
            {
                if ( $key == 'description' )
                {
                    $where .= " AND UNACCENT({$key}) ILIKE UNACCENT('{$value}')";
                }
                else
                {
                    $where .= ' AND ' . $key . ' = ' . $value;
                }
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql);

        $retVal = array();

        if ( !$returnList )
        {
            for ( $i=0; $i<count($result); $i++ )
            {
                $retVal[] = new SprSubscriptionStatus($result[$i][0]);
            }
        }
        else
        {
            if( is_array($result) )
            {
                foreach( $result  as $r )
                {
                    if ( $looseArgs ) // Remove as opções de 'Classificado em outra opção' e 'Aprovado por cota'.
                    {
                        if ( ( $r[0] == 6 ) || ( $r[0] == 7 ) )
                        {
                            break;
                        }
                    }
                    
                    $retVal[$r[0]] = $r[1];
                }
            }
        }

        return $retVal;
    }

    /*
     * Private methods
     */

    /*
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT subscriptionStatusId,
                       description
                  FROM spr.subscriptionStatus
                 WHERE subscriptionStatusId = ?';

        $result = SDatabase::query($sql, $this->subscriptionStatusId);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Status de inscrição @1 inexistente.', $module, $this->subscriptionStatusId));
        }

        list ( $this->subscriptionStatusId,
               $this->description ) = $result[0];
    }

    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'spr.subscriptionStatus_subscriptionStatusId_seq\')';

        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO spr.subscriptionStatus
                            (subscriptionStatusId,
                             description)
                     VALUES (?, ?)';

        $args = array($newId, $this->description);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->subscriptionStatusId = $newId;
        }

        return $result;
    }

    /*
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE spr.subscriptionStatus
                   SET description = ?
                 WHERE subscriptionStatusId = ?';

        $args = array($this->description, $this->subscriptionStatusId);

        return SDatabase::execute($sql, $args);
    }
}

?>
