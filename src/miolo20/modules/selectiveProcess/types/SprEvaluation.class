<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 15/12/2010
 **/
/**
 * Avaliações que serão aplicadas na etapa. No caso de vestibular, por exemplo, cada uma das provas aplicadas. No caso de outros tipos de seleção, poderia ser uma avaliação psicológica, por exemplo.
 */
class SprEvaluation extends SType
{
    /**
     * @var (integer) Identificador único da avaliação
     */
    private $evaluationId;
    /**
     * @var (integer) Etapa a qual esta avaliação pertence
     */
    private $stepId;
    /**
     * @var (string) Exemplos: Língua estrangeira, Titulações
     */
    private $description;
    /**
     * @var (integer) Quantidade máxima de pontos que um candidato pode ter nesta avaliação.
     */
    private $maxPoints;
    /**
     * @var (integer) Quantidade mínima de pontos que um candidato pode ter nesta avaliação.
     */
    private $minPoints;
    /**
     * @var (integer) Peso deste critério, frente a todos os critérios cadastrados nesta etapa.
     */
    private $weight;
    /**
     * @var (boolean) Quando esta flag for definida como Sim, no momento da inscrição o candidato terá de preencher a lista de informações que "concorrerão" para a pontuação do critério. Utilizado quando o candidato descreve, no momento da inscrição, cada título que deseja que seja utilizado para concorrer no critério.
     */
    private $informedAtSubscription;
    /**
     * @var (integer) Indica quantas das opções do critério de avaliação podem ser selecionadas pelo candidato. No caso de língua estrangeira, geralmente terá valor 1.
     */
    private $maxSelectableOptions;
    /**
     * @var (integer) Indica se o usuário pode ou não anexar arquivos a cada uma das opções do critério de avaliação que escolher e quantos arquivos. Zero significa que não poderá anexar arquivos.
     */
    private $allowAttachment;
    /**
     * @var (boolean) Indica se o candidato poderá informar uma descrição sobre a opção do critério de avaliação (basicamente informa se o campo descrição : string estará habilitado).
     */
    private $enableDescriptionField;
    /**
     * @var (boolean) Indica se o candidato poderá informar a pontuação com a qual pretende concorrer nesta opção do critério de avaliação (basicamente informa se o campo pontuaçãoPretendida : integer estará habilitado).
     */
    private $enableDesiredScoreField;
    /**
     * @var (array) Opções desta avaliação. Utilizado quando uma avaliação é, por exemplo, Língua estrangeira. Neste caso, as opções seriam as línguas.
     */
    private $evaluationOptions = array();
    /**
     * @var (boolean) Indica se a avaliação é interna.
     */
    private $isInternal;
    /**
     * @var (integer) Indica a prioridade da avaliação para o desempate por nota das avaliações.
     */
    private $priority;

    /**
     * Construtor da classe
     *
     * @param (integer) $evaluationId Chave primária da tabela
     */
    public function __construct($evaluationId = null)
    {
        $this->evaluationOptions = array();

        if ( ! is_null($evaluationId) )
        {
            $this->evaluationId = $evaluationId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }

    /**
     * Common methods
     */
    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->evaluationId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        if ( strlen($this->evaluationId) > 0 )
        {
            // salvar opções da avaliação
            foreach ( $this->evaluationOptions as $evaluationOption )
            {
                $evaluationOption->evaluationId = $this->evaluationId;
                $evaluationOption->save();
            }
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        // excluir opções da avaliação
        foreach ( $this->evaluationOptions as $evaluationOption )
        {
            $evaluationOption instanceof SprEvaluationOption;
            $evaluationOption->delete();
        }

        $sql = 'DELETE FROM spr.evaluation
                      WHERE evaluationId = ?';

        $args = array($this->evaluationId);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->evaluationId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $evaluation = clone($this);
        $evaluation->evaluationId = null;

        $evaluationOptions = array();
        foreach ( $this->evaluationOptions as $o )
        {
            $evaluationOptions[] = $o->duplicate();
        }
        $evaluation->evaluationOptions = $evaluationOptions;

        return $evaluation;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT evaluationId
                  FROM spr.evaluation';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ' . $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new SprEvaluation($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Private methods
     */
    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT evaluationId,
                       stepId,
                       description,
                       maxPoints,
                       minPoints,
                       weight,
                       informedAtSubscription,
                       maxSelectableOptions,
                       allowAttachment,
                       enableDescriptionField,
                       enableDesiredScoreField,
                       isInternal,
                       priority
                  FROM spr.evaluation
                 WHERE evaluationId = ?';

        $result = SDatabase::query($sql, $this->evaluationId);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Avaliação @1 inexistente.', $module, $this->evaluationId));
        }

        list ( $this->evaluationId,
               $this->stepId,
               $this->description,
               $this->maxPoints,
               $this->minPoints,
               $this->weight,
               $this->informedAtSubscription,
               $this->maxSelectableOptions,
               $this->allowAttachment,
               $this->enableDescriptionField,
               $this->enableDesiredScoreField,
               $this->isInternal,
               $this->priority ) = $result[0];

        $filters = new stdClass();
        $filters->evaluationId = $this->evaluationId;

        $this->evaluationOptions = SprEvaluationOption::search($filters);
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'spr.evaluation_evaluationid_seq\')';

        $result = SDatabase::query($sql);
        $newId  = $result[0][0];

        $sql = 'INSERT INTO spr.evaluation
                            (evaluationId,
                             stepId,
                             description,
                             maxPoints,
                             minPoints,
                             weight,
                             informedAtSubscription,
                             maxSelectableOptions,
                             allowAttachment,
                             enableDescriptionField,
                             enableDesiredScoreField,
                             isInternal,
                             priority)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';

        $args = array( $newId,
                       $this->stepId,
                       $this->description,
                       $this->maxPoints,
                       $this->minPoints,
                       $this->weight,
                       $this->informedAtSubscription,
                       $this->maxSelectableOptions,
                       $this->allowAttachment,
                       $this->enableDescriptionField,
                       $this->enableDesiredScoreField,
                       $this->isInternal,
                       $this->priority );

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->evaluationId = $newId;
        }

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE spr.evaluation
                   SET stepId = ?,
                       description = ?,
                       maxPoints = ?,
                       minPoints = ?,
                       weight = ?,
                       informedAtSubscription = ?,
                       maxSelectableOptions = ?,
                       allowAttachment = ?,
                       enableDescriptionField = ?,
                       enableDesiredScoreField = ?,
                       isInternal = ?,
                       priority = ?
                 WHERE evaluationId = ?';

        $args = array($this->stepId,
                      $this->description,
                      $this->maxPoints,
                      $this->minPoints,
                      $this->weight,
                      $this->informedAtSubscription,
                      $this->maxSelectableOptions,
                      $this->allowAttachment,
                      $this->enableDescriptionField,
                      $this->enableDesiredScoreField,
                      $this->isInternal,
                      $this->priority,
                      $this->evaluationId );

        return SDatabase::execute($sql, $args);
    }

    /**
     * Lista as avaliacoes que possuem opcoes (buscando pelo stepId)
     *
     * @param integer $stepId
     * @return Array Valores contendo evaluationId ou constantes SprSubscription::PRIORITY_*
     */
    public static function listEvaluationWithOptions($stepId)
    {
        $module = MIOLO::getCurrentModule();

        $list = array(
            array(SprStep::PRIORITY_SUBSCRIPTION_ORDER, _M('Ordem de inscrição', $module)),
            array(SprStep::PRIORITY_ALPHABETIC_ORDER, _M('Ordem alfabética', $module)),
            array(SprStep::PRIORITY_HIGH_SCHOOL_ORDER, _M('Ensino médio completo', $module)),
        );

        $filters = new stdClass();
        $filters->stepId = $stepId;

        foreach ( (array) SprEvaluation::search($filters) as $evaluation )
        {
            if ( count($evaluation->evaluationOptions) > 0 )
            {
                $list[] = array( $evaluation->evaluationId, $evaluation->description );
            }
        }

        return $list;
    }
}
?>