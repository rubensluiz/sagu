<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @since
 * Class created on 15/12/2010
 */
/**
 * Utilizado nos casos de língua estrangeira, por exemplo. Neste caso, o critério de avaliação será "Língua estrangeira" e cada opção será uma língua diferente (Português, Inglês, etc). Estas opções ficarão disponíveis para o usuário no momento da inscrição.
 *
 * Existe ainda a possibilidade de uma opção ser de avaliação de documentos, tais como artigos, publicações, etc.
 * @access public
 * @package Processo_seletivo
 */
class SprEvaluationOption extends SType
{
    /**
     * @var (integer) Identificador único da opção de avaliação
     */
    private $evaluationOptionId;

    /**
     * @var (integer) Identificador da avaliação à qual esta opção pertence
     */
    private $evaluationId;

    /**
     * @var (string) Descrição da opção da avaliação
     */
    private $description;

    /**
     * @var (string) Forma de pontuação
     */
    private $scoringInfo;
    
    /**
     *
     * @var float
     */
    private $maximumScore;
    
    private $evaluation;
    

    /**
     * Construtor da classe
     *
     * @param (integer) $evaluationOptionId Chave primária da tabela
     */
    public function __construct($evaluationOptionId = null)
    {
        if ( ! is_null($evaluationOptionId) )
        {
            $this->evaluationOptionId = $evaluationOptionId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        if ( $name == 'evaluation' && !$this->evaluation && ( strlen($this->evaluationId) > 0 ) )
        {
            $this->evaluation = new SprEvaluation($this->evaluationId);
        }
        
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }

    /*
     * Common methods
     */
    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->evaluationOptionId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM spr.evaluationOption
                      WHERE evaluationOptionId = ?';

        $args = array($this->evaluationOptionId);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->evaluationOptionId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $evaluationOption = clone($this);
        $evaluationOption->evaluationOptionId = null;

        return $evaluationOption;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT evaluationOptionId
                  FROM spr.evaluationOption';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ' . $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new SprEvaluationOption($result[$i][0]);
        }

        return $retVal;
    }

    /*
     * Private methods
     */
    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT evaluationOptionId,
                       evaluationId,
                       description,
                       scoringInfo,
                       maximumScore
                  FROM spr.evaluationOption
                 WHERE evaluationOptionId = ?';

        $result = SDatabase::query($sql, $this->evaluationOptionId);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Opção de avaliação @1 inexistente.', $module, $this->evaluationOptionId));
        }

        list ( $this->evaluationOptionId,
               $this->evaluationId,
               $this->description,
               $this->scoringInfo,
               $this->maximumScore) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'spr.evaluationoption_evaluationoptionid_seq\')';

        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO spr.evaluationOption
                            (evaluationOptionId,
                             evaluationId,
                             description,
                             scoringInfo,
                             maximumScore)
                     VALUES (?, ?, ?, ?, ?)';

        $args = array( $newId,
                       $this->evaluationId,
                       $this->description,
                       $this->scoringInfo,
                       $this->maximumScore);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->evaluationOptionId = $newId;
        }

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE spr.evaluationOption
                   SET evaluationId = ?,
                       description = ?,
                       scoringInfo = ?,
                       maximumScore = ?
                 WHERE evaluationOptionId = ?';

        $args = array($this->evaluationId,
                      $this->description,
                      $this->scoringInfo,
                      $this->maximumScore,
                      $this->evaluationOptionId);

        return SDatabase::execute($sql, $args);
    }
}
?>