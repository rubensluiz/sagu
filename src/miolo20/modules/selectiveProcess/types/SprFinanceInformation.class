<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @since
 * Class created on 15/12/2010
 *
 **/
/**
 * Informações financeiras do processo seletivo. Basicamente informa como será gerada a taxa de inscrição.
 */
class SprFinanceInformation extends SType
{
    /**
     * @var (integer) Identificador único da informaçã financeira
     */
    private $financeInformationId;
    /**
     * @var (string) Texto que vai no campo comments da finReceivableInvoice.
     */
    private $description;
    /**
     * @var (float) Valor da taxa de inscrição para este processo seletivo.
     */
    private $inscriptionFee;
    /**
     * @var (boolean) Indica se poderá ser gerado boleto bancário no final da inscrição.
     */
    private $allowInvoiceGeneration;
    /**
     * @var (integer) Número de parcelas em que será dividida a taxa
     */
    private $parcelsNumber;
    /**
     * @var (integer) Identificador da conta bancária
     */
    private $bankAccountId;
    /**
     * @var (integer) Código da operação vinculada a esta taxa
     */
    private $operationId;
    /**
     * @var (string) Código do centro de custo para o qual esta taxa deve ir
     */
    private $costCenterId;
    /**
     * @var (integer) Política a ser utilizada para esta taxa
     */
    private $policyId;

    /**
     *
     * @var (integer) Dias para vencimento do boleto
     */
    private $daysToMaturity;

    /**
     *
     * @var (integer) Dias para vencimento do boleto
     */
    private $dateToMaturity;
    /**
     * Construtor da classe
     *
     * @param (integer) $financeInformationId Chave primária da tabela
     */
    public function __construct($financeInformationId = null)
    {
        if ( ! is_null($financeInformationId) )
        {
            $this->financeInformationId = $financeInformationId;
            $this->populate();
        }
    }


    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }


    /*
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->financeInformationId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM spr.financeInformation
                      WHERE financeInformationId = ?';

        $args = array($this->financeInformationId);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->financeInformationId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $financeInformation = clone($this);
        $financeInformation->financeInformationId = null;

        return $financeInformation;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT financeInformationId
                  FROM spr.financeInformation';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ' . $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new SprFinanceInformation($result[$i][0]);
        }

        return $retVal;
    }

    /*
     * Private methods
     */

    /*
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $sql = "SELECT financeInformationId,
                       description,
                       inscriptionFee,
                       allowInvoiceGeneration,
                       parcelsNumber,
                       bankAccountId,
                       operationId,
                       costCenterId,
                       policyId,
                       daysToMaturity,
                       TO_CHAR(dateToMaturity, '{$maskDate}')
                  FROM spr.financeInformation
                 WHERE financeInformationId = ?";

        $result = SDatabase::query($sql, $this->financeInformationId);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Informações financeiras de código @1 inexistentes.', $module, $this->financeInformationId));
        }

        list ( $this->financeInformationId,
               $this->description,
               $this->inscriptionFee,
               $this->allowInvoiceGeneration,
               $this->parcelsNumber,
               $this->bankAccountId,
               $this->operationId,
               $this->costCenterId,
               $this->policyId,
               $this->daysToMaturity,
               $this->dateToMaturity ) = $result[0];
    }

    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'spr.financeInformation_financeInformationid_seq\')';

        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO spr.financeInformation
                            (financeInformationId,
                             description,
                             inscriptionFee,
                             allowInvoiceGeneration,
                             parcelsNumber,
                             bankAccountId,
                             operationId,
                             costCenterId,
                             policyId,
                             daysToMaturity,
                             dateToMaturity )
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'))';

        $args = array($newId,
                      $this->description,
                      $this->inscriptionFee,
                      $this->allowInvoiceGeneration,
                      $this->parcelsNumber,
                      $this->bankAccountId,
                      $this->operationId,
                      $this->costCenterId,
                      $this->policyId,
                      $this->daysToMaturity,
                      $this->dateToMaturity );

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->financeInformationId = $newId;
        }

        return $result;
    }

    /*
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE spr.financeInformation
                   SET financeInformationId = ?,
                       description = ?,
                       inscriptionFee = ?,
                       allowInvoiceGeneration = ?,
                       parcelsNumber = ?,
                       bankAccountId = ?,
                       operationId = ?,
                       costCenterId = ?,
                       policyId = ?,
                       daysToMaturity = ?,
                       dateToMaturity = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                 WHERE financeInformationId = ?';

        $args = array( $this->financeInformationId,
                       $this->description,
                       $this->inscriptionFee,
                       $this->allowInvoiceGeneration,
                       $this->parcelsNumber,
                       $this->bankAccountId,
                       $this->operationId,
                       $this->costCenterId,
                       $this->policyId,
                       $this->daysToMaturity,
                       $this->dateToMaturity,
                       $this->financeInformationId );

        return SDatabase::execute($sql, $args);
    }
}

?>