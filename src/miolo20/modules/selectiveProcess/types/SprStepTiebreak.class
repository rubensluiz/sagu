<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 15/12/2010
 *
 **/
/**
 * Critério de desempate da etapa
 */
class SprStepTiebreak extends SType
{
    /**
     * @var (integer) Código identificador
     */
    private $stepTiebreakId;
    /**
     * @var (integer) Etapa a qual este critério de desempate pertence
     */
    private $stepId;
    /**
     * @var (object) Identificador do critério de desempate relacionado a este
     */
    private $tiebreakId;
    /**
     * @var (object) Critério de desempate associado a este objeto
     */
    private $tiebreak;
    /**
     * @var (integer) Define a ordem em que os tipos de critérios de desempate serão aplicados. Números menores são executados antes.
     */
    private $priority;
    /**
     * @var (integer) Define a etapa onde o critério de desempate por etapa será aplicado.
     */
    private $tiebreakStepId;
    
    /**
     * Define valor do registro anterior, utilizado para preencher o tiebreakstepid
     *  equivalente ao chamar o duplicar (duplicate()).
     * 
     * @var int
     */
    private $oldTiebreakStepId;
    
    /**
     * Construtor da classe
     *
     * @param (integer) $stepId Chave primária da tabela
     */
    public function __construct($stepTiebreakId = null)
    {
        if ( !is_null($stepTiebreakId) )
        {
            $this->stepTiebreakId = $stepTiebreakId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }

    /*
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        /*
         * Logica complexa que deve ser feita ao duplicar registro, pois o steptiebreakId 
         *  antigo deve ser "transferido" para seu novo equivalente (etapa duplicada equivalente).
         */
        if ( strlen($this->oldTiebreakStepId) > 0 )
        {
            $oldStep = new SprStep($this->oldTiebreakStepId);
            $step = new SprStep($this->stepId);
            
            // Busca pela etapa "equivalente" a antiga, mas com id da nova duplicada
            $filters = new stdClass();
            $filters->selectiveProcessId = $step->selectiveProcessId;
            $filters->stepOrder = $oldStep->stepOrder;
            $rows = SprStep::search($filters);
            
            $this->tiebreakStepId = $rows[0]->stepId;
        }
        
        if ( strlen($this->stepTiebreakId) <= 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM spr.stepTiebreak
                      WHERE stepTiebreakId = ?';

        $args = array($this->stepTiebreakId);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->stepTiebreakId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $stepTiebreak = clone($this);
        
        $stepTiebreak->oldTiebreakStepId = $this->tiebreakStepId;
        $stepTiebreak->stepTiebreakId = null;
        
        return $stepTiebreak;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT stepTiebreakId
                  FROM spr.stepTiebreak';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ' . $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new SprStepTiebreak($result[$i][0]);
        }

        return $retVal;
    }

    /*
     * Private methods
     */

    /*
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT stepTiebreakId,
                       stepId,
                       tiebreakId,
                       priority,
                       tiebreakStepId
                  FROM spr.stepTiebreak
                 WHERE stepTiebreakId = ?';

        $result = SDatabase::query($sql, array($this->stepTiebreakId));

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Critério de desempate @1 da etapa @2 inexistente.', $module, $this->tiebreakId, $this->stepId));
        }

        list ( $this->stepTiebreakId,
               $this->stepId,
               $this->tiebreakId,
               $this->priority,
               $this->tiebreakStepId) = $result[0];

        $this->tiebreak = new SprTiebreak($this->tiebreakId);
    }

    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'spr.steptiebreak_steptiebreakid_seq\')';

        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO spr.stepTiebreak
                            (stepTiebreakId,
                             stepId,
                             tiebreakId,
                             priority,
                             tiebreakStepId)
                     VALUES (?, ?, ?, ?, ?)';

        $args = array($newId,
                      $this->stepId,
                      $this->tiebreakId,
                      $this->priority,
                      $this->tiebreakStepId);

        $result = SDatabase::execute($sql, $args);

        return $result;
    }

    /*
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE spr.stepTiebreak
                   SET priority = ?,
                       tiebreakStepId = ?
                 WHERE stepTiebreakId = ?';

        $args = array($this->priority,
                      $this->tiebreakStepId,
                      $this->stepTiebreakId);

        return SDatabase::execute($sql, $args);
    }

    /**
     * Lista todas as etapas que podem ser selecionadas para critério de
     * desempate para a etapa passada por parametro
     * @param <type> $filters
     * @return <type>
     */
    public static function listStepsByTiebreakBestPunctuationInStep($filters)
    {
        $sql = "SELECT A.stepId,
                       A.description
                  FROM spr.step A
            INNER JOIN (SELECT *
	                  FROM spr.Step AA
	                 WHERE AA.stepId = ?) B
	            ON (A.selectiveprocessid = B.selectiveprocessId)
                 WHERE A.steporder < B.steporder";

        $param[] = $filters->stepId;
        $result = SDatabase::query($sql, $param);

        $retVal = array();
        if( is_array($result) )
        {
            foreach( $result  as $r )
            {
                $retVal[$r[0]] = $r[1];
            }
        }
        return $retVal;
    }
}
?>
