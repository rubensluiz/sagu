<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types dos membros de banca examinadora
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 04/01/2011
 */
class SprExaminingBoardMember extends SType
{
    /**
     * Table fields
     */
    /**
     * @var (integer) Identificador da banca examinadora.
     */
    private $examiningBoardId;
    /**
     * @var (integer) Identificador do código da pessoa.
     */
    private $personId;
    /**
     * @var (string) Nome da pessoa.
     */
    private $personName;

    /**
     * Construtor da classe
     *
     * @param (integer) $tiebreakId Chave primária da tabela
     */
    public function __construct($examiningBoardId = null, $personId = null)
    {
        // Se tiver examiningBoardId e personId
        if ( (!is_null($examiningBoardId)) && (!is_null($personId)) )
        {
            $this->examiningBoardId = $examiningBoardId;
            $this->personId = $personId;

            // Popula
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        // se chave primária não está definida, assume que deva ser feito insert
        $filters = new stdClass();
        $filters->examiningBoardId = $this->examiningBoardId;
        $filters->personId = $this->personId;

        if ( count($this->search($filters)) == 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            // Neste caso não tem update.
            return true;
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM spr.examiningBoardMember
                      WHERE examiningBoardId = ?
                        AND personId = ?';

        $args = array($this->examiningBoardId,
                      $this->personId);

        $result = SDatabase::execute($sql, $args);
        
        if ( $result )
        {
            $this->examiningBoardId = null;
            $this->personId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $examiningBoardMember = clone($this);
        $examiningBoardMember->examiningBoardId = null;
        $examiningBoardMember->personId = null;
        
        return $examiningBoardMember;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        if ( !is_null($filters) )
        {
            $sql = 'SELECT A.examiningBoardId,
                       A.personId,
                       B.name AS personName
                  FROM spr.examiningBoardMember A
       INNER JOIN ONLY basPerson B
                    ON (A.personId = B.personId)';

            $where = '';
            if ( $filters->examiningBoardId )
            {
                $where .= ' AND A.examiningBoardId = ?';
                $params[] = $filters->examiningBoardId;
            }

            if ( $filters->personId )
            {
                $where .= ' AND B.personId = ?';
                $params[] = $filters->personId;
            }

            if ( $filters->personName )
            {
                $where .= ' AND B.name ILIKE UNACCENT(?)';
                $params[] = $filters->personName . '%';
            }

            if ( strlen($where) > 0 )
            {
                $sql .= ' WHERE ' . substr($where, 5);
            }

            $result = SDatabase::query(SAGU::prepare($sql, $params));
            $retVal = array();

            for ( $i=0; $i<count($result); $i++ )
            {
                $retVal[] = new SprExaminingBoardMember($result[$i][0], $result[$i][1]);
            }
        }

        return $retVal;
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT A.examiningBoardId,
                       A.personId,
                       B.name
                  FROM spr.examiningBoardMember A
       INNER JOIN ONLY basphysicalperson B
                    ON (B.personId = A.personId)
                 WHERE A.examiningBoardId = ?
                   AND A.personId = ?';

        $params[] = $this->examiningBoardId;
        $params[] = $this->personId;

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Membro da banca de avaliação @1 inexistente.', $module, $this->personId));
        }

        list ( $this->examiningBoardId,
               $this->personId,
               $this->personName) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'INSERT INTO spr.examiningBoardMember
                            (examiningBoardId,
                             personId)
                     VALUES (?, ?)';

        $args[] = $this->examiningBoardId;
        $args[] = $this->personId;

        $result = SDatabase::execute($sql, $args);

        return $result;
    }
}
?>