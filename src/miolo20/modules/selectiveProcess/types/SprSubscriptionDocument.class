<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @since
 * Class created on 15/12/2010
 *
 **/
/**
 * @access public
 * @package Processo_seletivo
 */
class SprSubscriptionDocument extends SType
{
    private $subscriptionId;
    private $stepDocumentId;
    private $fileId;
    private $file;
    private $contents;
    private $isDelivered;

    /**
     * @AssociationType Processo seletivo.basFile
     * @AssociationMultiplicity 0..1
     */
    private $attachment;

    /**
     * @AssociationType stdClass
     */
    private $stepDocument;


    /**
     * Identifica quando a classe esta populada da base, para saber se deve chamar o insert() ou update()
     */
    private $_isPopulated;


    public function __construct($subscriptionId = null, $stepDocumentId = null)
    {
        $this->stepDocument = new SprStepDocument();

        if ((strlen($subscriptionId) > 0) && (strlen($stepDocumentId) > 0))
        {
            $this->subscriptionId = $subscriptionId;
            $this->stepDocumentId = $stepDocumentId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }

    public function populate()
    {
        $MIOLO = MIOLO::getInstance();

        $sql = " SELECT subscriptionId,
                    stepDocumentId,
                    fileId,
                    contents,
                    isDelivered
                 FROM spr.subscriptionDocument
                WHERE subscriptionId = ?
                  AND stepDocumentId = ?";

        $result = SDatabase::query($sql, array($this->subscriptionId, $this->stepDocumentId));

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Documento de inscrição @1 inexistente.', $module, $this->subscriptionId));
        }

        list( $this->subscriptionId,
                 $this->stepDocumentId,
                 $this->fileId,
                 $this->contents,
                 $this->isDelivered) = $result[0];

        if ( strlen($this->stepDocumentId) > 0 )
        {
            $this->_isPopulated = true;
//            $this->stepDocument = new SprStepDocument($this->stepDocumentId);
        }

        if (strlen($this->fileId) > 0)
        {
            $busFile = new BusinessBasicBusFile();
            $this->file = $busFile->getFile($this->fileId);
        }
    }

    public function delete()
    {
        $sql = 'DELETE FROM spr.subscriptionDocument
                  WHERE subscriptionId = ?
                    AND stepDocumentId = ?';

        $args = array($this->subscriptionId,
                             $this->stepDocumentId);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->subscriptionId = null;
            $this->stepDocumentId = null;
        }

        return $result;
    }

    /*
     * Insere um novo registro com base nas informações da classe
     */
    public function insert()
    {
        $sql = 'INSERT INTO spr.subscriptionDocument
                            (subscriptionId,
                             stepDocumentId,
                             fileId,
                             contents,
                             isDelivered)
                     VALUES (?, ?, ?, ?, ?)';

        $args = array($this->subscriptionId,
                             $this->stepDocumentId,
                             $this->fileId,
                             $this->contents,
                             $this->isDelivered);

        return SDatabase::execute($sql, $args);
    }

    public function update()
    {
        $sql = "UPDATE spr.subscriptionDocument
               SET fileId = ?,
                   contents = ?,
                   isDelivered = ?
             WHERE subscriptionId = ?
               AND stepDocumentId = ?";

        $args = array(
            $this->fileId,
            $this->contents,
            $this->isDelivered,
            $this->subscriptionId,
            $this->stepDocumentId,
        );

        return SDatabase::execute($sql, $args);
    }

    public function save()
    {
        if ($this->_isPopulated)
        {
            $retVal = $this->update();
        }
        else
        {
            $retVal = $this->insert();
        }

        return $retVal;
    }

    public function search($filters)
    {
        $sql = "SELECT subscriptionId,
                   stepDocumentId
              FROM spr.subscriptionDocument";

        $where = '';
        foreach ( $filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ' . $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $results = (array) SDatabase::query($sql);

        $retVal = array();
        foreach ($results as $result)
        {
            $retVal[] = new SprSubscriptionDocument($result[0], $result[1]);
        }

        return $retVal;
    }

    public function duplicate() {}
}

?>
