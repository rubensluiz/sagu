<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @since
 * Class created on 15/12/2010
 *
 **/
/**
 * @access public
 * @package Processo_seletivo
 */
class SprSubscriptionStepPlace extends SType
{

    /**
     * @AssociationType int
     */
    private $subscriptionId;

    /**
     * @AssociationType int
     */
    private $stepPlaceId;


    /**
     * Informacoes da tabela spr.stepPlace
     *
     * @AssociationType stdClass
     */
    private $stepPlace;


    public function __construct($subscriptionId = null, $stepPlaceId = null)
    {
        $this->stepPlace = new SprStepPlace();

        if ((strlen($subscriptionId) > 0) && (strlen($stepPlaceId) > 0))
        {
            $this->subscriptionId = $subscriptionId;
            $this->stepPlaceId = $stepPlaceId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }

    public function populate()
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = " SELECT subscriptionId,
                    stepPlaceId
                 FROM spr.subscriptionStepPlace
                WHERE subscriptionId = ?
                  AND stepPlaceId = ?";

        $result = SDatabase::query($sql, array($this->subscriptionId, $this->stepPlaceId));

        if ( strlen($result[0][0]) <= 0 )
        {
            throw new Exception(_M('Local da etapa @1 inexistente.', $module, $this->selectiveProcessId));
        }

        $this->stepPlace = new SprStepPlace($this->stepPlaceId);
    }

    public function delete()
    {
        $sql = 'DELETE FROM spr.subscriptionStepPlace
                  WHERE subscriptionId = ?
                    AND stepPlaceId = ?';

        $args = array($this->subscriptionId,
                             $this->stepPlaceId);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->subscriptionId = null;
            $this->stepPlaceId = null;
        }

        return $result;
    }

    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'INSERT INTO spr.subscriptionStepPlace
                            (subscriptionId,
                             stepPlaceId)
                     VALUES (?, ?)';

        $args = array($this->subscriptionId,
                             $this->stepPlaceId);

        $result = SDatabase::execute($sql, $args);

        return $result;
    }

    public function save()
    {
        $filters = (object) array(
            'subscriptionId' => $this->subscriptionId,
            'stepPlaceId' => $this->stepPlaceId
        );
        if (!(count(SprSubscriptionStepPlace::search( $filters )) > 0))
        {
            $this->insert();
        }
    }

    public function search($filters)
    {
        $sql = "SELECT subscriptionId,
                   stepPlaceId
              FROM spr.subscriptionStepPlace";

        $where = '';
        foreach ( $filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ' . $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $results = (array) SDatabase::query($sql);

        $retVal = array();
        foreach ($results as $result)
        {
            $retVal[] = new SprSubscriptionStepPlace($result[0], $result[1]);
        }

        return $retVal;
    }

    public function duplicate() {}
}

?>
