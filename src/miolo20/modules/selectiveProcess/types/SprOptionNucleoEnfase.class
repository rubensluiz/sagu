<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers: \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 21/07/2011
 */
class SprOptionNucleoEnfase extends SType
{
    /**
     * @AttributeType integer
     */
    protected $enfaseId;
    /**
     * @AttributeType integer
     */
    protected $optionId;

    /**
     *
     * @var int 
     */
    protected $nucleoProfissionalId;

    /**
     * Contrutor
     *
     * @param integer $enfaseId
     * @param integer $optionId
     * @param integer $nucleoProfissionalId
     */
    public function __construct($enfaseId = NULL, $optionId = NULL, $nucleoProfissionalId = NULL)
{
        if ( (strlen($enfaseId) > 0) && (strlen($optionId) > 0) && (strlen($nucleoProfissionalId) > 0) )
        {
            $this->enfaseId = $enfaseId;
            $this->optionId = $optionId;
            $this->nucleoProfissionalId = $nucleoProfissionalId;
            $this->populate();
        }
    }

    /**
     * Função de busca
     *
     * @param object $filters
     * @return UnidadeTematica
     */
    public static function search($filters)
    {
        $sql = 'SELECT enfaseId,
                       optionId,
                       nucleoProfissionalId
              FROM spr.optionNucleoEnfase
        INNER JOIN spr.Option
             USING (optionId)';

        $where = '';
        foreach ( (array) $filters as $key => $value )
        {
            if ( $key == 'selectiveProcessId' )
            {
                $where .= " AND {$key} = '{$value}'";
            }
            elseif ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new SprOptionNucleoEnfase($result[$i][0], $result[$i][1], $result[$i][2]);
        }

        return $retVal;
    }


    /**
     * Popula essa classe
     */
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT enfaseId,
                   optionId,
                   nucleoProfissionalId
              FROM spr.optionNucleoEnfase
             WHERE enfaseId = ?
               AND optionId = ?
               AND nucleoProfissionalid = ?';

        $params = array();
        $params[] = $this->enfaseId;
        $params[] = $this->optionId;
        $params[] = $this->nucleoProfissionalId;
        $result = SDatabase::query($sql, $params);

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->enfaseId,
                $this->optionId,
                $this->nucleoProfissionalId) = $result[0];
    }

    /**
     * Salva os dados
     *
     * @return integer - Código do registro inserido/atualizado
     */
    public function save()
    {
        return $this->insert();
    }

    /**
     * Insere os dados na base
     *
     * @return boolean
     */
    private function insert()
    {
        $sql = 'INSERT INTO spr.optionNucleoEnfase
                            ( enfaseId,
                              optionId,
                              nucleoProfissionalId)
                     VALUES ( ?, ?, ? )';

        $params = array();
        $params[] = $this->enfaseId;
        $params[] = $this->optionId;
        $params[] = $this->nucleoProfissionalId;

        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    /**
     * Função que deleta o registro
     *
     * @return boolean
     */
    public function delete()
    {
        if ( (strlen($this->enfaseId) == 0) || (strlen($this->optionId) == 0) || (strlen($this->nucleoProfissionalId) == 0) )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM spr.optionNucleoEnfase
                      WHERE enfaseId = ?
                        AND optionId = ?
                        AND nucleoProfissionalId = ?';

        $result = SDatabase::execute($sql, array($this->enfaseId, $this->optionId, $this->nucleoProfissionalId));

        if ( $result )
        {
            $this->enfaseId = null;
            $this->optionId = null;
            $this->nucleoProfissionalId = null;
        }

        return $result;
    }

    
    public function duplicate()
    {
        $one = clone($this);
        $one->optionId = null;

        return $one;
    }
    

    /**
     * Lista registros
     *
     * @param stdClass $filters
     */
    public static function listForResidentLink($selectiveProcessId)
    {
        //Filtra optionNucleoEnfase que estejam no processo seletivo passado
        $sql = "SELECT ONE.optionid::varchar || '_' || ONE.enfaseId::varchar || '_' || ONE.nucleoProfissionalId::varchar,
                   NP.descricao || '/' || E.descricao
              FROM spr.optionNucleoEnfase ONE
        INNER JOIN res.enfase E
                ON E.enfaseId = ONE.enfaseId
        INNER JOIN res.nucleoProfissional NP
                ON NP.nucleoProfissionalId = ONE.nucleoProfissionalId
             WHERE optionId IN (
                    SELECT optionId
                      FROM spr.option O
                     WHERE O.optionId = ONE.optionId
                       AND O.selectiveProcessId = ?) ORDER BY ONE.optionId";
        $args[] = $selectiveProcessId;

        $result = SDatabase::query($sql, $args);
        $return = array();

        if ( count($result) > 0 )
        {
            foreach ( $result as $r )
            {
                $return[ $r[0] ] = $r[1];
            }
        }

        return $return;
    }
}
?>