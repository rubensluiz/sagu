<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @since
 * Class created on 15/12/2010
 *
 **/
/**
 * Armazena as cursos associados a cada opção de curso de um processo seletivo.
 */
class SprOptionCourse extends SType
{
    /**
     * @var (integer) Código identificador da opção de curso.
     */
    private $optionId;
    /**
     * @var (string) Código da ocorrência de curso
     */
    private $courseId;
    /**
     * @var (integer) Versão da ocorrência de curso
     */
    private $courseVersion;
    /**
     * @var (integer) Turno da ocorrência de curso
     */
    private $turnId;
    /**
     * @var (integer) Unidade da ocorrência de curso
     */
    private $unitId;

    /**
     *
     * @var (String)
     */
    private $courseName;

    /**
     *
     * @var (String)
     */
    private $unitDescription;

    /**
     *
     * @var (String)
     */
    private $turnDescription;

    /**
     * @param (integer) $optionId Código da opção de curso
     * @param (string) $courseId Código do curso
     * @param (integer) $courseVersion Código da versão de curso
     * @param (integer) $turnId Código do turno do curso
     * @param (integer) $unitId Código da unidade do curso
     */
    public function __construct($optionId = null, $courseId = null, $courseVersion = null, $turnId = null, $unitId = null)
    {
        if ( ! (is_null($optionId) || is_null($courseId) || is_null($courseVersion) || is_null($turnId) || is_null($unitId)) )
        {
            $this->optionId = $optionId;
            $this->courseId = $courseId;
            $this->courseVersion = $courseVersion;
            $this->turnId = $turnId;
            $this->unitId = $unitId;

            $this->populate();
        }
    }

    
    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }


    /*
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        $retVal = $this->insert();

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        if ( strlen($this->optionId) == 0
             || strlen($this->courseId) == 0
             || strlen($this->courseVersion) == 0
             || strlen($this->turnId) == 0
             || strlen($this->unitId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um curso de uma opção que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM spr.optionCourse
                      WHERE optionId = ?
                        AND courseId = ?
                        AND courseVersion = ?
                        AND turnId = ?
                        AND unitId =?';

        $args = array($this->optionId,
                      $this->courseId,
                      $this->courseVersion,
                      $this->turnId,
                      $this->unitId);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->optionId = null;
            $this->courseId = null;
            $this->couresVersion = null;
            $this->turnId = null;
            $this->unitId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $optionCourse = clone($this);
        $optionCourse->optionId = null;

        return $optionCourse;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT optionId,
                       courseId,
                       courseVersion,
                       turnId,
                       unitId
                  FROM spr.optionCourse';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = \'' . $value . '\'';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY courseId, courseVersion, turnId, unitId ';

        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new SprOptionCourse($result[$i][0], $result[$i][1], $result[$i][2], $result[$i][3], $result[$i][4]);
        }

        return $retVal;
    }

    /*
     * Private methods
     */

    /*
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT OC.optionId,
                       OC.courseId,
                       OC.courseVersion,
                       OC.turnId,
                       OC.unitId,
                       C.name AS courseName,
                       T.description AS turnDescription,
                       U.description AS unitDescription
                  FROM spr.OptionCourse OC
            INNER JOIN acdCourse C
                 USING (courseId)
            INNER JOIN basTurn T
                 USING (turnId)
            INNER JOIN basUnit U
                 USING (unitId)
                 WHERE optionId = ?
                   AND courseId = ?
                   AND courseVersion = ?
                   AND turnId = ?
                   AND unitId = ?';

        $args = array($this->optionId,
                      $this->courseId,
                      $this->courseVersion,
                      $this->turnId,
                      $this->unitId);

        $result = SDatabase::query($sql, $args);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Curso da opção de processo seletivo @1 inexistente.', $module, $this->optionId));
        }

        list ( $this->optionId,
               $this->courseId,
               $this->courseVersion,
               $this->turnId,
               $this->unitId,
               $this->courseName,
               $this->turnDescription,
               $this->unitDescription) = $result[0];
    }

    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $filters = new stdClass();
        $filters->optionId = $this->optionId;
        $filters->courseId = $this->courseId;
        $filters->courseVersion = $this->courseVersion;
        $filters->turnId = $this->turnId;
        $filters->unitId = $this->unitId;
        if ( count($this->search($filters)) > 0 )
        {
            $result = true;
        }
        else
        {
            $sql = 'INSERT INTO spr.optionCourse
                                (optionId,
                                 courseId,
                                 courseVersion,
                                 turnId,
                                 unitId)
                         VALUES (?, ?, ?, ?, ?)';

            $args = array($this->optionId,
                          $this->courseId,
                          $this->courseVersion,
                          $this->turnId,
                          $this->unitId);

            $result = SDatabase::execute($sql, $args);
        }

        return $result;
    }

    /*
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $module = SAGU::getFileModule(__FILE__);
        throw new Exception(_M('Update não faz sentido para classe @1.', $module, __CLASS__));
    }


    /**
     * External data
     */
    public function getCourseName()
    {
        return $this->courseName;
    }


    /**
     * External data
     */
    public function getUnitDescription()
    {
        return $this->unitDescription;
    }

    
    /**
     * External data
     */
    public function getTurnDescription()
    {
        return $this->turnDescription;
    }
}

?>