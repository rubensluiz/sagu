<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 15/12/2010
 */
/**
 * @access public
 * @package Processo_seletivo
 */
class SprSubscriptionOption extends SType
{
    private $subscriptionId;
    /**
     * @AttributeType integer
     * Posição em que o candidato ficou nesta opção de curso.
     */
    private $position;
    /**
     * @AssociationType Processo seletivo.Option
     * @AssociationMultiplicity 1
     */
    private $optionId;

    private $subscriptionStatusId;

    private $optionNumber;

    /**
     * @var (SprOption) Opção do usuário.
     */
    private $option;
    
    private $subscriptionOptionOrder;
    
    private $canEnroll;
    
    private $useQuota;
    
    private $updateJustification;
    
    private $enrollConfirmed;
    
    private $classificadopeloenem;
    
    public function __construct($subscriptionId = null, $optionId = null)
    {
        if ((strlen($subscriptionId) > 0) && (strlen($optionId) > 0))
        {
            $this->subscriptionId = $subscriptionId;
            $this->optionId = $optionId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }

    public function populate()
    {
        $cols = array( 'subscriptionId',
                       'optionId',
                       'position',
                       'subscriptionStatusId',
                       'optionNumber',
                        'canenroll',
                        'usequota',
                        'updatejustification',
                        'enrollconfirmed',
                        'subscriptionOptionOrder',
                        'classificadopeloenem');

        $sql = new MSQL( implode(',', $cols), 'spr.subscriptionOption');
        $sql->SetWhere('subscriptionId = ? AND optionId = ?');
        $sql->addParameter($this->subscriptionId);
        $sql->addParameter($this->optionId);
        
        $result = SDatabase::query($sql->Select());

        if ( count($result) == 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Opção @2 não existe na inscrição @1.', $module, $this->subscriptionId, $this->optionId));
        }

        list( $this->subscriptionId,
              $this->optionId,
              $this->position,
              $this->subscriptionStatusId,
              $this->optionNumber,
              $this->canEnroll,
              $this->useQuota,
              $this->updateJustification,
              $this->enrollConfirmed,
              $this->subscriptionOptionOrder,
              $this->classificadopeloenem) = $result[0];

        $this->option = new SprOption($this->optionId);
    }

    public function delete()
    {
        $sql = 'DELETE FROM spr.subscriptionOption
                      WHERE subscriptionId = ?
                        AND optionId = ?';

        $result = SDatabase::execute($sql, array($this->subscriptionId, $this->optionId));

        if ( $result)
        {
            $this->subscriptionId = null;
            $this->optionId = null;
        }

        return $result;
    }

    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        // verificar se o registro já existe na base
        $filters = array('subscriptionId' => $this->subscriptionId,
                         'optionId' => $this->optionId);
        $recordExists = (count(self::search($filters)) > 0);

        $data = array( 'subscriptionId' => $this->subscriptionId,
                       'optionId' => $this->optionId,
                       'position' => $this->position,
                       'subscriptionStatusId' => $this->subscriptionStatusId,
                       'optionNumber' => $this->optionNumber,
                       'canenroll' => $this->canEnroll,
                       'usequota' => $this->useQuota,
                       'updateJustification' => $this->updateJustification,
                       'enrollconfirmed' => $this->enrollConfirmed,
                       'subscriptionOptionOrder' => $this->subscriptionOptionOrder,
                       'classificadopeloenem' => $this->classificadopeloenem);

        // se o registro não existe, definir ordem de inscrição na opção
        if ( ! $recordExists )
        {
            $data['subscriptionOptionOrder'] = ':(SELECT COALESCE(MAX(subscriptionOptionOrder), 0)+1 FROM spr.subscriptionOption WHERE optionId = '.$this->optionId.')';
        }
        
        $sql = new MSQL( implode(',', array_keys($data)), 'spr.subscriptionOption' );
        $sql->SetParameters( array_values($data) );

        if ( ! $recordExists )
        {
            $sqlCmd = $sql->insert();
        }
        else
        {
            $sql->setWhere('subscriptionId = ?');
            $sql->addParameter($this->subscriptionId);
            $sql->setWhereAnd('optionId = ?');
            $sql->addParameter($this->optionId);

            $sqlCmd = $sql->update();
        }

        $retVal = SDatabase::execute($sqlCmd);

        return $retVal;
    }

    public function search($filters)
    {
        $sql = 'SELECT subscriptionId,
                       optionId
                  FROM spr.subscriptionOption';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ' . $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

	$sql .= ' ORDER BY optionNumber ASC';

        $results = SDatabase::query($sql);

        $retVal = array();
        foreach ((array)$results as $result)
        {
            $retVal[] = new SprSubscriptionOption( $result[0], $result[1] );
        }

        return $retVal;
    }

    public function duplicate()
    {
        // Not implemented
    }
}
?>
