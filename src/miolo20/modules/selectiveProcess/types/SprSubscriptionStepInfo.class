<?php
/**
 * <--- Copyright 2005-2014 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 15/12/2010
 *
 **/
/**
 * @access public
 * @package Processo_seletivo
 */
class SprSubscriptionStepInfo extends SType
{

    /**
     * @var (integer) Chave primária, código da inscrição
     */
    private $subscriptionId;

    /**
     * @var (integer) Chave primária, código da etapa
     */
    private $stepId;

    /**
     *
     * @var (SprStep) Objeto do tipo SprStep
     */
    private $step;

    /**
     * @var (integer) Código do status na etapa
     */
    private $subscriptionStatusId;

    /**
     *
     * @var (SprSubscriptionStatus) Objeto do tipo SprSubscriptionStatus
     */
    private $subscriptionStatus;

    /**
     * @var (integer) Total de pontos na etapa
     */
    private $totalPoints;

    /**
     * @var (boolean) Campo que detarmina se sera usada avaliações internas
     */
    private $useInternalEvaluations;

    /**
     * @var (integer) Código da pessoa
     */
    private $personId;

    /**
     * @var (string) Nome da pessoa
     */
    private $personName;

    /**
     * @var (string) Posição da pessoa na etapa
     */
    private $position;


    private $totalPointsStep;
    
    
    private $locationId;
    
    /**
     * @var int
     */
    private $totalPointsStepEnem;
    
    /**
     * Construtor da classe
     *
     * @param (integer) $subscriptionId Chave primária da tabela
     * @param (integer) $stepId Chave primária da tabela
     */
    public function __construct($subscriptionId = null, $stepId = null)
    {
        if ( ! (is_null($subscriptionId) || is_null($stepId)) )
        {
            $this->subscriptionId = $subscriptionId;
            $this->stepId = $stepId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        if ( ($name == 'step') && (strlen($this->stepId) > 0) && ($this->needCheckPopulate($name)) )
        {
            $this->step = new SprStep($this->stepId);
        }

        if ( ($name == 'subscriptionStatus') && (strlen($this->subscriptionStatusId) > 0) && ($this->needCheckPopulate($name)) )
        {
            $this->subscriptionStatus = new SprSubscriptionStatus($this->subscriptionStatusId);
        }
        
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }


    /*
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        $filters = new stdClass();
        $filters->stepId = $this->stepId;
        $filters->subscriptionId = $this->subscriptionId;
        
        if ( count($this->search($filters)) == 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }



    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrá¡rio, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM spr.subscriptionstepinfo
                      WHERE stepId = ?
                        AND subscriptionId = ?';

        $args = array($this->stepId,
                      $this->subscriptionId);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->stepId = null;
            $this->subscriptionId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $subscriptionStepInfo = clone($this);
        $this->stepId = null;
        $this->subscriptionId = null;

        return $subscriptionStepInfo;
    }

    /**
     * Método para ober o número de registro do método search()
     * Útil para poder navegar entre registros no passo a passo
     *
     * @param (stdClass) $filters Objeto contendo os seguintes filtros para o objeto atual:
     *                   $filters->stepId Código da etapa
     *                   $filters->optionId Código da opção de curso
     *                   $filters->subscriptionId Código da inscrição
     *                   $filters->offset Indice da consulta a ser retornado
     *                   $filters->limit Limite de registros a retornar
     */

    public function getTotalSubscriptions($filters)
    {
       $sql =  'SELECT COUNT(*)
               FROM spr.subscriptionstepinfo A';

        $where = '';
        if ( strlen($filters->stepId) > 0 )
        {
            if ( $filters->digitacaoDeNotas )
            {
                $where .= ' AND ( CASE
                                  WHEN (SELECT digitacaonotassomenteaprovados FROM spr.step WHERE stepId = ?) IS TRUE
                                  THEN
                                      inscritoEstaClassificadoNaEtapaAnterior(A.subscriptionId, (SELECT selectiveProcessId FROM spr.step WHERE stepId = ?), ?) IS TRUE
                                  ELSE TRUE
                                  END )';
                $args[] = $filters->stepId;
                $args[] = $filters->stepId;
                $args[] = $filters->stepId;
            }
            
            $where.=' AND A.stepId = ?';
            $args[] = $filters->stepId;
        }

        if ( strlen($filters->optionId) > 0 )
        {
            $where.=' AND EXISTS(SELECT 1
                                   FROM spr.subscriptionOption SO
                                  WHERE SO.subscriptionId = A.subscriptionId
                                    AND SO.optionId = ?)';
            $args[] = $filters->optionId;
        }

        if ( strlen($filters->subscriptionId) > 0 )
        {
            $where.=' AND A.subscriptionId = ?';
            $args[] = $filters->subscriptionId;
        }

        if ( strlen($filters->limit) > 0 )
        {
            $where.=' LIMIT ?';
            $args[] = $filters->limit;
        }
        if ( strlen($filters->offset) > 0 )
        {
            $where.=' OFFSET ?';
            $args[] = $filters->offset;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $args);

        return $result[0][0];
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo os seguintes filtros para o objeto atual:
     *                   $filters->stepId Código da etapa
     *                   $filters->subscriptionId Código da inscrição
     *                   $filters->offset Indice da consulta a ser retornado
     *                   $filters->limit Limite de registros a retornar
     */
    public function search($filters, $enteringNotes=false)
    {   
        $sql =  'SELECT DISTINCT A.subscriptionId,
                        A.stepId,
                        C.name 
                   FROM spr.subscriptionStepInfo A
             INNER JOIN spr.subscription D
                     ON (D.subscriptionId = A.subscriptionId)
        INNER JOIN ONLY basphysicalPerson C
                     ON (D.personId = C.personId)';        
        
        $where = '';
        if( !$enteringNotes )
        {
            $sql .= ' LEFT JOIN spr.subscriptionOption B
                             ON A.subscriptionId = B.subscriptionId';
            
            if ( strlen($filters->optionId) > 0 )
            {
                $where.=' AND B.optionId = ?';
                $args[] = $filters->optionId;
            }
            
        }
                
        if ( strlen($filters->stepId) > 0 )
        {
            if ( $filters->digitacaoDeNotas )
            {
                $where .= ' AND ( CASE
                                  WHEN (SELECT digitacaonotassomenteaprovados FROM spr.step WHERE stepId = ?) IS TRUE
                                  THEN
                                      inscritoEstaClassificadoNaEtapaAnterior(D.subscriptionId, (SELECT selectiveProcessId FROM spr.step WHERE stepId = ?), ?) IS TRUE
                                  ELSE TRUE
                                  END )';
                $args[] = $filters->stepId;
                $args[] = $filters->stepId;
                $args[] = $filters->stepId;
            }
            
            $where.=' AND A.stepId = ?';
            $args[] = $filters->stepId;
        }

        if ( strlen($filters->subscriptionStatusId) > 0 )
        {
            $where.=' AND A.subscriptionStatusId = ?';
            $args[] = $filters->subscriptionStatusId;
        }

        if ( strlen($filters->subscriptionId) > 0 )
        {
            $where.=' AND A.subscriptionId = ?';
            $args[] = $filters->subscriptionId;
        }
                
        if ( $filters->order == 'PES' )
        {
            $where .= ' ORDER BY C.name';
        }
        
        if ( strlen($filters->limit) > 0 )
        {
            $where.=' LIMIT ?';
            $args[] = $filters->limit;
        }       
            
        if ( strlen($filters->offset) > 0 )
        {
            $where.=' OFFSET ?';
            $args[] = $filters->offset;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);                    
        }
          
        $result = SDatabase::query(SAGU::prepare($sql, $args));

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new SprSubscriptionStepInfo($result[$i][0], $result[$i][1]);
        }
        
        return $retVal;
    }

    /**
     * Retorna um array de array de informações das inscrições
     *
     * @param (stdClass) $filters Objeto contendo os seguintes filtros para o objeto atual:
     *                   $filters->stepId Código da etapa
     *                   $filters->subscriptionId Código da inscrição
     *                   $filters->offset Indice da consulta a ser retornado
     *                   $filters->limit Limite de registros a retornar
     */
    public function searchGrid($filters = null)
    {
        
        $sql = 'SELECT A.subscriptionId,
                       A.stepId,
                       A.subscriptionstatusid,
                       A.totalpoints,
                       A.useinternalevaluations,
                       C.personId,
                       C.name as personName,
                       A.position
                  FROM spr.subscriptionstepinfo A
            INNER JOIN spr.subscription B
                    ON (B.subscriptionId = A.subscriptionId)
       INNER JOIN ONLY basphysicalPerson C
                    ON (B.personId = C.personId)';

        $where = '';
        if ( strlen($filters->stepId) > 0 )
        {
            $where.=' AND A.stepId = ?';
            $args[] = $filters->stepId;
        }
        if ( strlen($filters->subscriptionId) > 0 )
        {
            $where.=' AND A.subscriptionId = ?';
            $args[] = $filters->subscriptionId;
        }
        if ( strlen($filters->personId) > 0 )
        {
            $where.=' AND C.personId = ?';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->personName) > 0 )
        {
            $where.=' AND C.name ILIKE ?';
            $args[] = $filters->personName . '%';
        }
        if ( strlen($filters->limit) > 0 )
        {
            $where.=' LIMIT ?';
            $args[] = $filters->limit;
        }
        if ( strlen($filters->offset) > 0 )
        {
            $where.=' offset ?';
            $args[] = $filters->offset;
        }
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5).
            ' ORDER BY personName';

            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /*
     * Private methods
     */

    /*
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT A.subscriptionId,
                       A.stepId,
                       A.subscriptionstatusid,
                       A.totalpoints,
                       A.useinternalevaluations,
                       C.personId,
                       C.name as personName,
                       A.position,
                       A.totalPointsStep,
                       A.locationId,
                       A.totalPointsStepEnem
                  FROM spr.subscriptionstepinfo A
            INNER JOIN spr.subscription B
                    ON (B.subscriptionId = A.subscriptionId)
       INNER JOIN ONLY basphysicalPerson C
                    ON (B.personId = C.personId)
                 WHERE A.stepId = ?
                   AND A.subscriptionId = ?'; 
        
        $result = SDatabase::query($sql, array($this->stepId, $this->subscriptionId));

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Informações da inscrição @1 da etapa @2 inexistente.', $module, $this->subscriptionId, $this->stepId));
        }

        list ( $this->subscriptionId,
               $this->stepId,
               $this->subscriptionStatusId,
               $this->totalPoints,
               $this->useInternalEvaluations,
               $this->personId,
               $this->personName,
               $this->position,
               $this->totalPointsStep,
               $this->locationId,
               $this->totalPointsStepEnem) = $result[0];
    }

    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'INSERT INTO spr.subscriptionstepinfo
                            (subscriptionId,
                             stepId,
                             subscriptionStatusId,
                             totalpoints,
                             useinternalevaluations,
                             position,
                             totalPointsStep,
                             locationId)
                     VALUES (?,?,?,?,?,?,?,?)';

        $args = array( $this->subscriptionId,
                       $this->stepId,
                       $this->subscriptionStatusId,
                       $this->totalPoints,
                       $this->useInternalEvaluations,
                       $this->position,
                       $this->totalPointsStep,
                       $this->locationId );

        $result = SDatabase::execute($sql, $args);

        return $result;
    }

    /*
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE spr.subscriptionstepinfo
                   SET subscriptionStatusId = ?,
                       totalpoints = ?,
                       useinternalevaluations = ?,
                       position = ?,
                       totalPointsStep = ?,
                       locationId = ?
                 WHERE subscriptionId = ?
                   AND stepId = ?';

        $args = array($this->subscriptionStatusId,
                      $this->totalPoints,
                      $this->useInternalEvaluations,
                      $this->position,
                      $this->totalPointsStep,
                      $this->locationId,
                      $this->subscriptionId,
                      $this->stepId);

        return SDatabase::execute($sql, $args);
    }

    /**
     * Seta um status determinado para todos os inscritos na etapa
     *
     * @param (stdClass) $data Objeto contendo os seguintes dados:
     *                   $data->stepId Código da etapa
     *                   $data->subscriptionStatusId status da inscrição
     */
    public static function setDisqualifiedStatus($data)
    {
        $sql = 'UPDATE spr.subscriptionstepinfo
                   SET subscriptionStatusId = ?
                 WHERE stepId = ?
                   AND subscriptionstatusid = ?';

        $args = array(SprSubscriptionStatus::DISQUALIFIED,
                      $data->stepId,
                      SprSubscriptionStatus::INSCRIBED);

        return SDatabase::execute($sql, $args);
    }
    
    /**
     * Atualiza o total de pontos (totalPoints) utilizando a funcao plpgsql spr.generate_total_points_step(int)
     * 
     * Como esta funcao atualiza tambem a coluna totalPointsStep, foi feito um workaround para voltar o valor anterior. (para nao ter que duplicar logica)
     * @TODO Fazer forma de poder escolher nao atualizar coluna totalPointsStep
     * @TODO Tentar utilizar mais SQLs via PHP , pois facilita manutencao e dinamizacao para estes casos.
     *
     * @param int $stepId
     */
    public static function updateTotalPointsStep($stepId)
    {
        // Obtem valores atuais
        $steps = SDatabase::query("SELECT subscriptionId, stepId, totalPointsStep FROM spr.subscriptionStepInfo WHERE stepId = ?", array($stepId));
        $steps = (array) SAGU::resultToObject($steps, array('subscriptionId', 'stepId', 'totalPointsStep'));
        
        // Executa funcao com calculos complexos
        SDatabase::query("SELECT spr.generate_total_points_step(?)", array($stepId));
       
        // Volta valores anteriores
        $sqlUpdate = array();
        $sqlParams = array();
        foreach ( $steps as $step )
        {
            $sqlUpdate[] = "UPDATE spr.subscriptionStepInfo SET totalPointsStep = ? WHERE subscriptionId = ? AND stepId = ?;";
            $sqlParams = array_merge($sqlParams, array($step->totalPointsStep, $step->subscriptionId, $step->stepId));
        }
        SDatabase::execute(implode(';', $sqlUpdate), $sqlParams);
    }
    
    public function updateLocation($args)
    {
        $sql = "UPDATE spr.subscriptionStepInfo
                   SET locationId = ?
                 WHERE subscriptionId = ?
                   AND stepId = ?";
        
        $params = array(
            $args->locationId,
            $args->subscriptionId,
            $args->stepId
        );
        
        SDatabase::execute($sql, $params);
    }
}
?>