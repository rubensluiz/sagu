<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 26/01/2012
 *
 */
class SprSubscriptionSubstitutesCall extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $subscriptionSubstitutesCallId;
    /**
     * @AttributeType integer
     * 
     */
    protected $substitutesCallId;
    /**
     * @AttributeType integer
     * 
     */
    protected $subscriptionId;
    /**
     * @AttributeType integer
     * 
     */
    protected $optionId;
    /**
     * @AttributeType boolean
     * 
     */
    protected $useQuote;
    public function __construct($subscriptionSubstitutesCallId = NULL)
    {
        if ( (strlen($subscriptionSubstitutesCallId)  >  0) )
        {
            $this->subscriptionSubstitutesCallId = $subscriptionSubstitutesCallId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT subscriptionsubstitutescallid
                  FROM spr.subscriptionsubstitutescall';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY subscriptionsubstitutescallid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new SprSubscriptionSubstitutesCall($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT subscriptionsubstitutescallid,
                       substitutescallid,
                       subscriptionid,
                       optionid,
                       usequote
                  FROM spr.subscriptionsubstitutescall';
        $params = array();

        if ( strlen($filters->subscriptionSubstitutesCallId)  >  0 )
        {
            $where.=' AND subscriptionsubstitutescallid = ?';
            $params[] = $filters->subscriptionSubstitutesCallId;
        }

        if ( strlen($filters->substitutesCallId)  >  0 )
        {
            $where.=' AND substitutescallid = ?';
            $params[] = $filters->substitutesCallId;
        }

        if ( strlen($filters->subscriptionId)  >  0 )
        {
            $where.=' AND subscriptionid = ?';
            $params[] = $filters->subscriptionId;
        }

        if ( strlen($filters->optionId)  >  0 )
        {
            $where.=' AND optionid = ?';
            $params[] = $filters->optionId;
        }

        if ( strlen($filters->useQuote)  >  0 )
        {
            $where.=' AND usequote = ?';
            $params[] = $filters->useQuote;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY subscriptionsubstitutescallid';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       subscriptionsubstitutescallid,
                       substitutescallid,
                       subscriptionid,
                       optionid,
                       usequote
                  FROM spr.subscriptionsubstitutescall
                 WHERE subscriptionsubstitutescallid = ?';
        $result = SDatabase::query($sql, array($this->subscriptionSubstitutesCallId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName, $this->dateTime, $this->ipAddress, $this->subscriptionSubstitutesCallId, $this->substitutesCallId, $this->subscriptionId, $this->optionId, $this->useQuote) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->subscriptionSubstitutesCallId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO spr.subscriptionsubstitutescall 
                            (subscriptionsubstitutescallid, substitutescallid, subscriptionid, optionid, usequote)
                     VALUES (?, ?, ?, ?, ?)';
        $sqlPK = "SELECT nextval('spr.subscriptionsubstitutescall_subscriptionsubstitutescallid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $subscriptionSubstitutesCallId = $result[0][0];
	//MIOLO::vd('subscriptionSubstitutesCallId: '.$subscriptionSubstitutesCallId);
        $params = array($subscriptionSubstitutesCallId, $this->substitutesCallId, $this->subscriptionId, $this->optionId, $this->useQuote);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->subscriptionSubstitutesCallId = $subscriptionSubstitutesCallId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE spr.subscriptionsubstitutescall
                   SET substitutescallid = ?,
                       subscriptionid = ?,
                       optionid = ?,
                       usequote = ?
                 WHERE subscriptionsubstitutescallid = ?';
        $params = array($this->userName, $this->dateTime, $this->ipAddress, $this->substitutesCallId, $this->subscriptionId, $this->optionId, $this->useQuote, $this->subscriptionSubstitutesCallId);
        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->subscriptionSubstitutesCallId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM spr.subscriptionsubstitutescall
                      WHERE subscriptionsubstitutescallid = ?';
        $params = array($this->subscriptionSubstitutesCallId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->subscriptionSubstitutesCallId = null;
        }

        return $result;
    }
}


?>
