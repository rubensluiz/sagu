<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @since
 * Class created on 15/12/2010
 *
 **/
/**
 * Notas das avaliações de cada etapa.
 */

class SprEvaluationPoints extends SType
{
    /**
     * Table fields
     */
    private $evaluationId;
    private $subscriptionId;

    private $evaluation;
    private $subscription;

    private $totalPoints;
    
    private $totalPointsEnem;

    /**
     * Construtor da classe
     *
     * @param (integer) $evaluationId Códgio da avaliação chave primária da tabela
     * @param (integer) $subscriptionId Código da inscrição chave primária da tabela
     */
    public function __construct($evaluationId = null, $subscriptionId = null)
    {
        if ( !is_null($evaluationId) && !is_null($subscriptionId) )
        {
            $this->evaluationId = $evaluationId;
            $this->subscriptionId = $subscriptionId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        if ( strlen($this->evaluationId) > 0 && strlen($this->subscriptionId) > 0)
        {
            $sql = 'SELECT * FROM spr.evaluationPoints WHERE evaluationId = ? AND subscriptionId = ?';
            $args = array($this->evaluationId, $this->subscriptionId);
            $search = SDatabase::query( $sql, $args );

            $points = $this->totalPoints;
            $pointsEnem = $this->totalPointsEnem;
            
            if ( !strlen($points) > 0 )
            {
                $points = 0;
            }

            if ( count($search)>0 ) //update
            {
                $sql = 'UPDATE spr.evaluationPoints SET totalPoints = ?, totalPointsEnem = ? WHERE evaluationId = ? AND subscriptionId = ?';
                $args = array($points, $pointsEnem, $this->evaluationId, $this->subscriptionId);
                $result = SDatabase::execute($sql, $args);
            }
            else //insert
            {
                $sql = 'INSERT INTO spr.evaluationPoints (evaluationId, subscriptionId, totalPoints, totalPointsEnem) VALUES (?,?,?,?)';
                $args = array($this->evaluationId, $this->subscriptionId, $points, $pointsEnem);
                $result = SDatabase::execute($sql, $args);
            }
        }

        return $result;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM spr.evaluationPoints
                      WHERE evaluationId = ?
                        AND subscriptionId = ?';

        $args = array($this->evaluationId, $this->subscriptionId);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->evaluationId = null;
            $this->subscriptionId = null;
        }

        return $result;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT A.evaluationId,
                       A.subscriptionId
                  FROM spr.evaluationPoints A
            INNER JOIN spr.subscription B
                    ON B.subscriptionId = A.subscriptionId
            INNER JOIN spr.evaluation C
                    ON C.evaluationId = A.evaluationId
            INNER JOIN spr.step D
                    ON D.stepId = C.stepId';

        $where = '';
        $args = array();

        if ( strlen($filters->evaluationId) > 0 )
        {
            $where .= ' AND A.evaluationId = ?';
            $args[] = $filters->evaluationId;
        }

        if ( strlen($filters->subscriptionId) > 0 )
        {
            $where .= ' AND A.subscriptionId = ?';
            $args[] = $filters->subscriptionId;
        }

        if ( strlen($filters->selectiveProcessId) > 0 )
        {
            $where .= ' AND D.selectiveProcessId = ?';
            $args[] = $filters->selectiveProcessId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->stepId) > 0 )
        {
            $where .= ' AND D.stepId = ?';
            $args[] = $filters->stepId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY B.personId, C.evaluationId';

        $result = SDatabase::query($sql, $args);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new SprEvaluationPoints($result[$i][0], $result[$i][1]);
        }

        return $retVal;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $evaluationPoints = clone($this);
        $evaluationPoints->evaluationId = null;
        $evaluationPoints->subscriptionId = null;

        return $evaluationPoints;
    }

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT evaluationId,
                       subscriptionId,
                       totalPoints,
                       totalPointsEnem
                  FROM spr.evaluationPoints
                 WHERE evaluationId = ? AND subscriptionId = ?';

        $result = SDatabase::query($sql, array($this->evaluationId, $this->subscriptionId) );

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Nota da avaliação @1 e inscrição @2 inexistente.', $module, $this->evaluationId, $this->subscriptionId));
        }

        list ( $this->evaluationId,
               $this->subscriptionId,
               $this->totalPoints,
               $this->totalPointsEnem ) = $result[0];

        $this->subscription = new SprSubscription($this->subscriptionId);
        $this->evaluation = new SprEvaluation($this->evaluationId);
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'INSERT INTO spr.evaluationPoints
                            (evaluationId,
                             subscriptionId,
                             totalPoints,
                             totalPointsEnem)
                     VALUES (?, ?, ?, ?)';

        $args = array($this->evaluationId, $this->subscriptionId, $this->totalPoints, $this->totalPointsEnem);

        $result = SDatabase::execute($sql, $args);

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE spr.evaluationPoints
                   SET totalPoints = ?,
                       totalPointsEnem = ?
                 WHERE evaluationId = ?
                   AND subscriptionId = ?';

        $args = array($this->totalPoints, $this->totalPointsEnem, $this->evaluationId, $this->subscriptionId);

        return SDatabase::execute($sql, $args);
    }
}
?>