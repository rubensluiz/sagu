<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @since
 * Class created on 15/12/2010
 *
 **/
/**
 * Locais onde a etapa irá ocorrer. Pode ser um local interno (na própria instituição, como recurso físico desta) ou como externo (uma sala alugada, por exemplo).
 */
class SprStepPlace extends SType
{
    /**
     * @var (integer) Identificador único deste local da etapa.
     */
    protected $stepPlaceId;
    /**
     * @var (integer) Etapa a qual este local pertence.
     */
    protected $stepId;
    /**
     * @var (boolean) Indica se a ligação será com a insPhysicalResource (TRUE) (trata-se de um local da própria instituição) ou se será com a basLocation (FALSE) (trata-se de um local externo à instituição).
     */
    protected $isInternal;
    /**
     * @var (string) Número do prédio/casa/local. Preenchimento permitido quando isInternal : boolean = FALSE.
     */
    protected $number;
    /**
     * @var (string) Preenchimento permitido quando éInterno : boolean = FALSE.
     */
    protected $complement;
    /**
     * @var (string) Preenchimento permitido quando éInterno : boolean = FALSE.
     */
    protected $room;
    /**
     * @var (string) Preenchimento permitido quando éInterno : boolean = FALSE.
     */
    protected $building;

    /**
     *
     * @var (integer) Ordem dos locais, para ser utilizado na alocacao por sala
     */
    protected $allocationOrder;

    /**
     *
     * @var (boolean) Se sala/local permite ou nao deficiences físicos
     */
    protected $allowDisabledPeople;

    /**
     *
     * @var (integer) Número de vagas que esta sala/local suporta
     */
    protected $vacancies;

    /**
     * @var (integer) Identificador do recurso físico, se houver
     */
    protected $physicalResourceId;
    /**
     * @var (integer) Identificador da versão do recurso físico, se houver
     */
    protected $physicalResourceVersion;
    /**
     * @var (integer) Identificador do local, se houver
     */
    protected $locationId;
    /**
     * @var (string) Nome do local, se houver
     */
    protected $locationName;
    /**
     * @var (integer) Identificador do país, se houver
     */
    protected $countryId;
    /**
     * @var (string) Nome do país, se houver
     */
    protected $countryName;
    /**
     * @var (integer) Identificador do estado, se houver
     */
    protected $stateId;
    /**
     * @var (string) Nome do estado, se houver
     */
    protected $stateName;
    /**
     * @var (integer) Identificador do cidade, se houver
     */
    protected $cityId;
    /**
     * @var (string) Nome da cidade, se houver
     */
    protected $cityName;
    /**
     * @var (integer) Identificador do bairro, se houver
     */
    protected $neighborhoodId;
    /**
     * @var (string) Nome do bairro, se houver
     */
    protected $neighborhoodName;
    /**
     * @var (integer) Identificador da versão do recurso físico, se houver
     */
    protected $physicalResourceDescription;
    
    /**
     * Objeto BusLocation->getLocation()
     *
     * @var stdClass
     */
    protected $location;

    /**
     * Construtor da classe
     *
     * @param (integer) $stepId Chave primária da tabela
     */
    public function __construct($stepPlaceId = null)
    {
        if ( ! is_null($stepPlaceId) )
        {
            $this->stepPlaceId = $stepPlaceId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        if ( ( $name == 'location' ) && ( strlen($this->locationId) > 0 ) && $this->needCheckPopulate('location') )
        {
            $MIOLO = MIOLO::getInstance();
            $busLocation = new BusinessBasicBusLocation();
            $this->location = $busLocation->getLocation($this->locationId);
        }
        
        return parent::__get($name);
    }

    /*
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        $module = SAGU::getFileModule(__FILE__);

        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->stepPlaceId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM spr.stepPlace
                      WHERE stepPlaceId = ?';

        $args = array($this->stepPlaceId);

        $result = SDatabase::execute($sql, $args);

        if ( $result)
        {
            $this->stepPlaceId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $stepPlace = clone($this);
        $stepPlace->stepPlaceId = null;

        return $stepPlace;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT A.stepPlaceId
                  FROM spr.stepPlace A
            INNER JOIN spr.step B
                    ON A.stepId = B.stepId';

        $where = '';
        foreach ( $filters as $key => $value )
        {
            if ( $key == 'selectiveProcessId' )
            {
                $where .= " AND B.{$key} = '{$value}'";
            }
            else if ( $key == 'locationId' )
            {
                if ( strlen($value) > 0 )
                {
                    $where .= " AND A.{$key} = '{$value}'";
                }
                else
                {
                    $where .= " AND A.{$key} IS NULL";
                }
            }
            else if ( $key != 'orderBy' )
            {
                $where .= ' AND A.' . $key . ' = ' . $value;
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        if ( strlen($filters->orderBy) > 0 )
        {
            $sql .= " ORDER BY A.{$filters->orderBy} ";
        }

        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new SprStepPlace($result[$i][0]);
        }

        return $retVal;
    }

    /*
     * Private methods
     */

    /*
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {

        $sql = 'SELECT stepPlaceId,
                       stepId,
                       isInternal,
                       number,
                       complement,
                       F.room,
                       F.building,
                       F.physicalResourceId,
                       F.physicalResourceVersion,
                       F.locationId,
                       A.name as locationName,
                       C.countryId,
                       D.name as countryName,
                       B.stateId,
                       C.name as stateName,
                       A.cityId,
                       B.name as cityName,
                       A.neighborhoodId,
                       E.name as neighborhoodName,
                       G.description AS physicalResourceDescription,
                       F.allocationOrder,
                       F.allowDisabledPeople,
                       F.vacancies
                  FROM spr.stepPlace F
             LEFT JOIN basLocation A
                    ON (A.locationId = F.locationId)
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basState C
                    ON ( C.stateId = B.stateId AND C.countryId = B.countryId )
             LEFT JOIN basCountry D
                    ON ( D.countryId = C.countryId )
             LEFT JOIN basNeighborhood E
                    ON ( E.neighborhoodId = A.neighborhoodId )
             LEFT JOIN insPhysicalResource G
                    ON ( G.physicalResourceId = F.physicalResourceId
                         AND G.physicalResourceVersion = F.physicalResourceVersion)
                 WHERE stepPlaceId = ?';

        $result = SDatabase::query($sql, $this->stepPlaceId);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Etapa @1 inexistente.', $module, $this->stepPlaceId));
        }

        list ( $this->stepPlaceId,
               $this->stepId,
               $this->isInternal,
               $this->number,
               $this->complement,
               $this->room,
               $this->building,
               $this->physicalResourceId,
               $this->physicalResourceVersion,
               $this->locationId,
               $this->locationName,
               $this->countryId,
               $this->countryName,
               $this->stateId,
               $this->stateName,
               $this->cityId,
               $this->cityName,
               $this->neighborhoodId,
               $this->neighborhoodName,
               $this->physicalResourceDescription,
               $this->allocationOrder,
               $this->allowDisabledPeople,
               $this->vacancies) = $result[0];
    }

    /*
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'spr.stepPlace_stepPlaceid_seq\')';

        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO spr.stepPlace
                                (stepPlaceId,
                                 stepId,
                                 isInternal,
                                 number,
                                 complement,
                                 room,
                                 building,
                                 physicalResourceId,
                                 physicalResourceVersion,
                                 locationId,
                                 allocationOrder,
                                 allowDisabledPeople,
                                 vacancies)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';

        $args = array($newId,
                      $this->stepId,
                      $this->isInternal,
                      $this->number,
                      $this->complement,
                      $this->room,
                      $this->building,
                      $this->physicalResourceId,
                      $this->physicalResourceVersion,
                      $this->locationId,
                      $this->allocationOrder,
                      $this->allowDisabledPeople,
                      $this->vacancies);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->stepPlaceId = $newId;
        }

        return $result;
    }

    /*
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE spr.stepPlace
                   SET stepId = ?,
                       isInternal = ?,
                       number = ?,
                       complement = ?,
                       room = ?,
                       building = ?,
                       physicalResourceId = ?,
                       physicalResourceVersion = ?,
                       locationId = ?,
                       allocationOrder = ?,
                       allowDisabledPeople = ?,
                       vacancies = ?
                 WHERE stepPlaceId = ?';

        $args = array($this->stepId,
                      $this->isInternal,
                      $this->number,
                      $this->complement,
                      $this->room,
                      $this->building,
                      $this->physicalResourceId,
                      $this->physicalResourceVersion,
                      $this->locationId,
                      $this->allocationOrder,
                      $this->allowDisabledPeople,
                      $this->vacancies,
                      $this->stepPlaceId);

        return SDatabase::execute($sql, $args);
    }
}

?>
