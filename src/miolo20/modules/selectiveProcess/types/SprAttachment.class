<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 17/01/2011
 *
 **/
class SprAttachment extends SType
{
    private $fileId;

    private $file;

    private $evaluationOptionId;

    private $subscriptionId;


    public function __construct($fileId = null, $evaluationOptionId = null, $subscriptionId = null)
    {
        if ((strlen($fileId) > 0) && (strlen($evaluationOptionId) > 0) && (strlen($subscriptionId) > 0))
        {
            $this->fileId = $fileId;
            $this->evaluationOptionId = $evaluationOptionId;
            $this->subscriptionId = $subscriptionId;
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }

    public function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = " SELECT fileId,
                    evaluationOptionId,
                    subscriptionId
               FROM spr.attachment
              WHERE fileId = ?
                AND evaluationOptionId = ?
                AND subscriptionId = ?";

        $result = SDatabase::query($sql, array($this->fileId, $this->evaluationOptionId, $this->subscriptionId));

        if ( strlen($result[0][0]) <= 0 )
        {
            throw new Exception(_M('Anexo inexistente.', $module) . ' fileId: ' . $this->fileId . ' evaluationOptionId: ' . $this->evaluationOptionId . ' subscriptionId: ' . $this->subscriptionId);
        }

        list($this->fileId,
                $this->evaluationOptionId,
                $this->subscriptionId) = $result[0];

        if (strlen($this->fileId) > 0)
        {
            $busFile = new BusinessBasicBusFile();
            $this->file = $busFile->getFile($this->fileId);
        }
    }


    public function search($filters)
    {
        $sql = "SELECT fileId,
                   evaluationOptionId,
                   subscriptionId
              FROM spr.attachment";

        $where = '';
        foreach ( $filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ' . $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $results = SDatabase::query($sql);

        $retVal = array();
        foreach ((array)$results as $result)
        {
            $retVal[] = new SprAttachment($result[0], $result[1], $result[2]);
        }

        return $retVal;
    }

    public function delete()
    {
        $sql = new MSQL(null, 'spr.attachment');
        $sql->SetWhere('fileId = ? AND evaluationOptionId = ? AND subscriptionId = ?');
        $sql->SetParameters(array($this->fileId, $this->evaluationOptionId, $this->subscriptionId));

        $result = SDatabase::execute($sql->Delete());

        if ($result)
        {
            $this->fileId = null;
            $this->evaluationOptionId = null;
            $this->subscriptionId = null;
        }

        return $result;
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();

        if (count($this->file) > 0)
        {
            $busFile = new BusinessBasicBusFile();

            if (strlen($this->fileId) > 0)
            {
                $this->file->fileId = $this->fileId;
                $busFile->updateFile($this->file, $this->file->tempName);
            }
            else
            {
                $this->fileId = $busFile->insertFile($this->file, $this->file->tempName);
            }
        }

        $data = array(
            'fileId' => $this->fileId,
            'evaluationOptionId' => $this->evaluationOptionId,
            'subscriptionId' => $this->subscriptionId,
        );

        if (strlen($this->fileId) > 0)
        {
            $sql = new MSQL( implode(',', array_keys($data)), 'spr.attachment' );
            $sql->setParameters(array_values($data));

            $ok = SDatabase::execute($sql->Insert());
        }
        else
        {
            $ok = true;
        }

        return $ok;
    }

    public function duplicate() {}
}

?>
