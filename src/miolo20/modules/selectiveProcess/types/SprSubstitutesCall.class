<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 26/01/2012
 *
 */
class SprSubstitutesCall extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $substitutesCallId;
    /**
     * @AttributeType integer
     * 
     */
    protected $selectiveProcessId;
    /**
     * @AttributeType integer
     * 
     */
    protected $substitutesCallNumber;
    
    public function __construct($substitutesCallId = NULL)
    {
        if ( (strlen($substitutesCallId)  >  0) )
        {
            $this->substitutesCallId = $substitutesCallId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT substitutescallid
                  FROM spr.substitutescall';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY substitutescallid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new SprSubstitutesCall($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT substitutescallid,
                       selectiveProcessId,
                       substitutescallnumber
                  FROM spr.substitutescall';
        $params = array();

        if ( strlen($filters->substitutesCallId)  >  0 )
        {
            $where.=' AND substitutescallid = ?';
            $params[] = $filters->substitutesCallId;
        }

        if ( strlen($filters->selectiveProcessId)  >  0 )
        {
            $where.=' AND selectiveProcessId = ?';
            $params[] = $filters->selectiveProcessId;
        }

        if ( strlen($filters->substitutesCallNumber)  >  0 )
        {
            $where.=' AND substitutescallnumber = ?';
            $params[] = $filters->substitutesCallNumber;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY substitutescallid';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       substitutescallid,
                       selectiveProcessId,
                       substitutescallnumber
                  FROM spr.substitutescall
                 WHERE substitutescallid = ?';
        $result = SDatabase::query($sql, array($this->substitutesCallId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName, $this->dateTime, $this->ipAddress, $this->substitutesCallId, $this->selectiveProcessId, $this->substitutesCallNumber) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->substitutesCallId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO spr.substitutescall 
                            (substitutescallid, selectiveProcessId, substitutescallnumber)
                     VALUES (?, ?, ?)';
        $sqlPK = "SELECT nextval('spr.substitutescall_substitutescallid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $substitutesCallId = $result[0][0];
        $params = array($substitutesCallId, $this->selectiveProcessId, $this->substitutesCallNumber);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->substitutesCallId = $substitutesCallId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE spr.substitutescall
                   SET selectiveProcessId = ?,
                       substitutescallnumber = ?
                 WHERE substitutescallid = ?';
        $params = array($this->userName, $this->dateTime, $this->ipAddress, $this->selectiveProcessId, $this->substitutesCallNumber, $this->substitutesCallId);
        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->substitutesCallId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM spr.substitutescall
                      WHERE substitutescallid = ?';
        $params = array($this->substitutesCallId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->substitutesCallId = null;
        }

        return $result;
    }
    
    
    /**
     * Obtem numero da ultima chamada, atravez de um selectiveProcessId
     *
     * @param int $selectiveProcessId
     * @return int
     */
    public static function obterSugestaoDaProximaChamada($selectiveProcessId)
    {
        $sql = "SELECT COALESCE(MAX(substitutescallnumber) + 1, 1) FROM spr.substitutescall WHERE selectiveProcessId = ?";
        $query = SDatabase::query($sql, array($selectiveProcessId));

        return $query[0][0];
    }
    
    public static function chamadaAptosMatricularSemCota($selectiveProcessId, $substitutesCallId, $optionId, $vagas)
    {
        //pega os alunos ja matriculados
        $sql = "SELECT subscriptionid FROM spr.subscriptionoption WHERE optionId = ? AND spr.subscriptionoption.usequota = false AND spr.subscriptionoption.enrollConfirmed = true";
        $query = SDatabase::query($sql, array($optionId));
        $rows = SAGU::resultToObject($query, array('subscriptionId'));
        $totalMatriculadosNaOpcao = count($rows);
        
        $usuarioLogado = SAGU::getUsuarioLogado()->personId;

        //monta um array com os alunos ja matriculado para usar no not in abaixo
        foreach($rows as $r)
        {
            $jaMatriculados[] = $r->subscriptionId;
        }

        $jaMatriculados = implode(',',$jaMatriculados);
        
        //desabilita matricula para quem nao se matriculou na convocacao e grava no log
        //poderia ser trocado por update em caso de performance
        $sql = "SELECT subscriptionid FROM spr.subscriptionoption WHERE enrollConfirmed is null and optionId = ? and canenroll = true and usequota = false";
        $query = SDatabase::query($sql, array($optionId));
        $rows = SAGU::resultToObject($query, array('subscriptionId'));

        $substitutesCall = new SprSubstitutesCall($substitutesCallId);
        
        foreach($rows as $row)
        {
            //bloqueia matricula e adiciona comentario ao log
            $sprSubscriptionOption = new SprSubscriptionOption($row->subscriptionId, $optionId);
            $sprSubscriptionOption->canEnroll = DB_FALSE;
            $sprSubscriptionOption->enrollConfirmed = DB_FALSE;            
            $sprSubscriptionOption->updateJustification = 'MATRÍCULA NÃO CONFIRMADA ATÉ '.$substitutesCall->substitutesCallNumber.' CHAMADA EM '.date('d/m/Y H:i:s').' POR '.SAGU::getUsuarioLogado();
            $sprSubscriptionOption->save();
        }
        
        //se ainda houver vagas

        if ( $vagas > $totalMatriculadosNaOpcao )
        {
            //busca as vagas livres
            $vagasLivres = $vagas - $totalMatriculadosNaOpcao;
            $sql = "SELECT subscriptionid from spr.subscriptionoption where optionId = ? and enrollconfirmed is null order by position limit {$vagasLivres}";
            $query = SDatabase::query($sql,array($optionId));
            $rows = SAGU::resultToObject($query,array('subscriptionId'));
            
            foreach($rows as $row)
            {
                //insere os suplentes para poder efetuar a matricula
                $sprSubscriptionSubstitutesCall = new SprSubscriptionSubstitutesCall();
                $sprSubscriptionSubstitutesCall->substitutesCallId = $substitutesCallId;
                $sprSubscriptionSubstitutesCall->subscriptionId = $row->subscriptionId;
                $sprSubscriptionSubstitutesCall->optionId = $optionId;
                $sprSubscriptionSubstitutesCall->useQuote = DB_FALSE;
                $sprSubscriptionSubstitutesCall->save();
                
                //libera para poder efetuar a matricula e adiciona comentario ao log
                $sprSubscriptionOption = new SprSubscriptionOption($row->subscriptionId, $optionId);
                $sprSubscriptionOption->canEnroll = DB_TRUE;
                $sprSubscriptionOption->usequota = DB_FALSE;
                $sprSubscriptionOption->updateJustification = 'TORNADO APTO EM '.date('d/m/Y H:i:s').' POR '.$usuarioLogado.' NA '.$substitutesCall->substitutesCallNumber.' CHAMADA';
                $sprSubscriptionOption->save();
            }
        }   
    }
    
    public static function chamadaAptosMatricularComCota($selectiveProcessId, $substitutesCallId, $optionId, $vagas)
    {
        //pega os alunos ja matriculados
        $sql = "SELECT subscriptionid FROM spr.subscriptionoption WHERE optionId = ? AND spr.subscriptionoption.usequota = true AND spr.subscriptionoption.enrollConfirmed = true";
        $query = SDatabase::query($sql, array($optionId));
        $rows = SAGU::resultToObject($query, array('subscriptionId'));
        $totalMatriculadosNaOpcao = count($rows);

        //monta um array com os alunos ja matriculado para usar no not in abaixo
        foreach($rows as $r)
        {
            $jaMatriculados[] = $r->subscriptionId;
        }

        $jaMatriculados = implode(',',$jaMatriculados);
        
        //desabilita matricula para quem nao se matriculou na convocacao e grava no log
        //poderia ser trocado por update em caso de performance
        $sql = "SELECT subscriptionid FROM spr.subscriptionoption WHERE enrollConfirmed is null and optionId = ? AND usequota = true and canenroll = true";
        $query = SDatabase::query($sql, array($optionId));
        $rows = SAGU::resultToObject($query, array('subscriptionId'));

        $substitutesCall = new SprSubstitutesCall($substitutesCallId);
        
        foreach($rows as $row)
        {
            //bloqueia matricula e adiciona comentario ao log
            $sprSubscriptionOption = new SprSubscriptionOption($row->subscriptionId, $optionId);
            $sprSubscriptionOption->canEnroll = DB_FALSE;
            $sprSubscriptionOption->enrollConfirmed = DB_FALSE;            
            $sprSubscriptionOption->updateJustification = 'MATRÍCULA NÃO CONFIRMADA ATÉ '.$substitutesCall->substitutesCallNumber.' CHAMADA EM '.date('d/m/Y H:i:s').' POR '.SAGU::getUsuarioLogado();
            $sprSubscriptionOption->save();
        }
        
        //se ainda houver vagas para cotistas
        if ( $vagas > $totalMatriculadosNaOpcao )
        {
            //busca as vagas livres para cotistas
            $vagasLivres = $vagas - $totalMatriculadosNaOpcao;
            $sql = "SELECT A.subscriptionid from spr.subscriptionoption A inner join spr.subscription B on (A.subscriptionid=B.subscriptionid) where A.optionId = ? and A.enrollconfirmed is null AND B.isquotaholder = true order by A.position limit {$vagasLivres}";
            $query = SDatabase::query($sql,array($optionId));
            $rows = SAGU::resultToObject($query,array('subscriptionId'));
		
            foreach($rows as $row)
            {
                //insere os suplentes para poder efetuar a matricula
                $sprSubscriptionSubstitutesCall = new SprSubscriptionSubstitutesCall();
                $sprSubscriptionSubstitutesCall->substitutesCallId = $substitutesCallId;
                $sprSubscriptionSubstitutesCall->subscriptionId = $row->subscriptionId;
                $sprSubscriptionSubstitutesCall->optionId = $optionId;
                $sprSubscriptionSubstitutesCall->useQuote = DB_TRUE;
                $sprSubscriptionSubstitutesCall->save();
                
                //libera para poder efetuar a matricula e adiciona comentario ao log
                $sprSubscriptionOption = new SprSubscriptionOption($row->subscriptionId, $optionId);
                $sprSubscriptionOption->canEnroll = DB_TRUE;
                $sprSubscriptionOption->updateJustification = 'COTISTA MATRICULADO OCUPANDO VAGA LIVRE. ALTERADO EM '.date('d/m/Y H:i:s').' POR '.SAGU::getUsuarioLogado().' NA '.$substitutesCall->substitutesCallNumber.' CHAMADA';
                $sprSubscriptionOption->save();
            }
        }   
    }
    
    public static function chamadaAptosMatricular($selectiveProcessId, $substitutesCallNumber)
    {
        //insere uma chamada
        $sprSubstitutesCall = new SprSubstitutesCall();
        $sprSubstitutesCall->selectiveProcessId = $selectiveProcessId;
        $sprSubstitutesCall->substitutesCallNumber = $substitutesCallNumber;
        $sprSubstitutesCall->save();
        
        
        $filters = new stdClass();
        $filters->selectiveProcessId = $selectiveProcessId;
        $cursos = sprOption::search($filters);
        
        //percorre todos os cursos deste processo seletivo
        foreach($cursos as $curso)
        {
            //adiciona sempre os matriculados sem cota
            self::chamadaAptosMatricularSemCota($selectiveProcessId, $sprSubstitutesCall->substitutesCallId, $curso->optionId, $curso->vacancies);
            if( $curso->quotes > 0 )
            {
                //faz uma repescagem para completar as vagas de cotistas
                self::chamadaAptosMatricularComCota($selectiveProcessId, $sprSubstitutesCall->substitutesCallId, $curso->optionId, $curso->quotes);
            }
        }
        
    }
}


?>
