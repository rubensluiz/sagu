<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da banca examinadora
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 04/01/2011
 */
class SprExaminingBoard extends SType
{
    /**
     * Table fields
     */
    /**
     * @var (integer) Identificador único da banca examinadora.
     */
    private $examiningBoardId;
    /**
     * @var (string) Descrição da banca examinadora.
     */
    private $description;
    /**
     * @var (integer) Etapa da banca examinadora.
     */
    private $stepId;
    /**
     * @var (string) Descrição da etapa.
     */
    private $stepDescription;
    /**
     * @var (string) Descrição do processo seletivo.
     */
    private $selectiveProcessDescription;
    /**
     * @var (string) Nome do membro da banca examinadora.
     */
    private $personName;
    /**
     * @var (array) Membros da banca examinadora.
     */
    private $examiningBoardMembers = array();
    
    /**
     * Construtor da classe
     *
     * @param (integer) $tiebreakId Chave primária da tabela
     */
    public function __construct($examiningBoardId = null)
    {
        if ( !is_null($examiningBoardId) )
        {
            $this->examiningBoardId = $examiningBoardId;
            $this->examiningBoardMembers = array();
            $this->populate();
        }
    }

    /**
     * Data logic
     */
    public function __get($name)
    {
        return $this->$name;
    }

    public function __set($name, $value)
    {
        $this->$name = $value;
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        // se chave primária não está definida, assume que deva ser feito insert
        if ( strlen($this->examiningBoardId) <= 0 )
        {
            $retVal = $this->insert();
        }
        // se chave primária definida, assume que deva ser feito update
        else
        {
            $retVal = $this->update();
        }

        if ( strlen($this->examiningBoardId) > 0 )
        {
            // salvar avaliações
           foreach ( (array)$this->examiningBoardMembers as $examiningBoardMember )
           {
               $examiningBoardMember->examiningBoardId = $this->examiningBoardId;
               $retVal = $examiningBoardMember->save();
           }
        }
        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM spr.examiningBoard
                      WHERE examiningBoardId = ?';

        $args = array($this->examiningBoardId);
        $result = SDatabase::execute($sql, $args);
        
        if ( $result )
        {
            $this->examiningBoardId = null;
        }

        return $result;
    }

    /**
     * Duplica o registro atual.
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function duplicate()
    {
        $examiningBoard = clone($this);
        $examiningBoard->examiningBoardId = null;

        return $examiningBoard;
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        if ( !is_null($filters) )
        {
            $sql = 'SELECT A.examiningBoardId,
                           A.description
                      FROM spr.examiningBoard A
                INNER JOIN spr.step B
                        ON (A.stepId = B.stepId)
                INNER JOIN spr.selectiveProcess C
                        ON (B.selectiveProcessId = C.selectiveProcessId)
                 LEFT JOIN spr.examiningBoardMember D
                        ON (A.examiningBoardId = D.examiningBoardId)
            LEFT JOIN ONLY basPerson E
                        ON (D.personId = E.personId)';

            $where = '';
            if ( $filters->examiningBoardId )
            {
                $where .= ' AND A.examiningBoardId = ?';
                $params[] = $filters->examiningBoardId;
            }
            elseif ( $filters->description )
            {
                $where .= ' AND A.description ILIKE UNACCENT(?)';
                $params[] = $filters->description . '%';
            }

            if ( $filters->selectiveProcessId )
            {
                $where .= ' AND C.selectiveProcessId = ?';
                $params[] = $filters->selectiveProcessId;
            }
            elseif ( $filters->selectiveProcessDescription )
            {
                $where .= ' AND C.description ILIKE UNACCENT(?)';
                $params[] = $filters->selectiveProcessDescription . '%';
            }

            if ( $filters->stepId )
            {
                $where .= ' AND B.stepId = ?';
                $params[] = $filters->stepId;
            }
            elseif ( $filters->stepDescription )
            {
                $where .= ' AND B.description ILIKE UNACCENT(?)';
                $params[] = $filters->stepDescription . '%';
            }

            if ( $filters->personId )
            {
                $where .= ' AND E.personId = ?';
                $params[] = $filters->personId;
            }
            elseif ( $filters->personName )
            {
                $where .= ' AND E.name ILIKE UNACCENT(?)';
                $params[] = $filters->personName . '%';
            }

            if ( strlen($where) > 0 )
            {
                $sql .= ' WHERE ' . substr($where, 5).' GROUP BY 1, 2 ORDER BY 2';
            }

            $result = SDatabase::query(SAGU::prepare($sql, $params));
            $retVal = array();

            for ( $i=0; $i<count($result); $i++ )
            {
                $retVal[] = new SprExaminingBoard($result[$i][0]);
            }
        }

        return $retVal;
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT examiningBoardId,
                       description,
                       stepId
                  FROM spr.examiningBoard
                 WHERE examiningBoardId = ?';

        $result = SDatabase::query($sql, $this->examiningBoardId);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Banca de avaliação @1 inexistente.', $module, $this->examiningBoardId));
        }

        list ( $this->examiningBoardId,
               $this->description,
               $this->stepId ) = $result[0];

        // Get the step data
        $this->step = new SprStep($this->stepId);

        // Get the selectiveProcess data
        $this->selectiveProcess = new SprSelectiveProcess($this->step->selectiveProcessId);

        // Get the members of the examining board
        $filters = new stdClass();
        $filters->examiningBoardId = $this->examiningBoardId;
        $this->examiningBoardMembers = SprExaminingBoardMember::search($filters);
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'SELECT nextval(\'spr.examiningBoard_examiningBoardid_seq\')';
        $result = SDatabase::query($sql);
        $newId = $result[0][0];

        $sql = 'INSERT INTO spr.examiningBoard
                            (examiningBoardId,
                             description,
                             stepId)
                     VALUES (?, ?, ?)';

        $args = array($newId, $this->description, $this->stepId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->examiningBoardId = $newId;
        }

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE spr.examiningBoard
                   SET description = ?,
                       stepId = ?
                 WHERE examiningBoardId = ?';

        $args = array($this->description, $this->stepId, $this->examiningBoardId);

        return SDatabase::execute($sql, $args);
    }
}
?>