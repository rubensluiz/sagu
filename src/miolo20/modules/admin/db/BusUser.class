<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This class Business Admin User
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/06/2006
 */
class BusinessAdminBusUser extends sBusiness
{
    const ERRO_LDAP_AD = 'Ocorreu um erro ao sincronizar dados do usuário no LDAP.';
    
    /**
     * Return a specific record from the database
     *
     * @param $iduser (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     */
    public function getUser($iduser)
    {
        $MIOLO = MIOLO::getInstance();
        $db = $this->getDatabase();

        $sql = 'SELECT iduser,
                       login,
                       name,
                       nickname,
                       m_password
                  FROM miolo_user
                 WHERE iduser = ? ';

        $params = array($iduser);
        $result = $db->query(SAGU::prepare($sql, $params));

        list ( $data->idUser,
               $data->login,
               $data->name,
               $data->nickName,
               $data->password ) = $result[0];
        
        return $data;
    }

    /**
     * Return a specific record from the database
     *
     * @param $iduser (integer): Primary key of the record to be retrieved
     * @return AdmUser
     */
    public function getUserByLogin($login)
    {
        $MIOLO = MIOLO::getInstance();
        $db = $this->getDatabase();

        $sql = 'SELECT iduser,
                       login,
                       name,
                       nickname,
                       m_password
                  FROM miolo_user
                 WHERE login = ? ';

        $params = array($login);
        $result = $db->query(SAGU::prepare($sql, $params, false));

        list ( $data->idUser,
               $data->login,
               $data->name,
               $data->nickName,
               $data->password ) = $result[0];

        return $data;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     */
    public function searchUser($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $db = $this->getDatabase();

        $sql = 'SELECT iduser,
                       login,
                       name,
                       nickname,
                       m_password
                  FROM miolo_user';

        $where = '';
        $params = array();
        if ( strlen($filters->idUser) > 0 )
        {
            $where .= ' AND iduser = ? ';
            $params[] = $filters->idUser;
        }

        if ( strlen($filters->login) > 0 )
        {
            $where .= ' AND UNACCENT(login) ILIKE UNACCENT(?) ';
            $params[] = $filters->login;
        }

        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(name) ILIKE UNACCENT(?) ';
            $params[] = $filters->name.'%';
        }

        if ( strlen($filters->nickName) > 0 )
        {
            $where .= ' AND UNACCENT(nickname) ILIKE UNACCENT(?) ';
            $params[] = $filters->nickName.'%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                  ORDER BY name,
                           login,
                           nickname';

            $result = $db->query(SAGU::prepare($sql, $params));
        }
        
        return $result;
    }
    
    /**
     * Converte senha recebida para md5 para comparações na base.
     * 
     * @param String $password
     * @return type
     */
    public function convertPasswordToMD5($password)
    {
        $sql = "SELECT MD5(?)";
        
        $result = SDatabase::query($sql, array($password), false);
        return $result[0][0];
    }

    /**
     * Obtém o próximo ID
     */
    public function getNewId()
    {
        $MIOLO = MIOLO::getInstance();
        $db = $this->getDatabase();

        $sql = "SELECT value
                  FROM miolo_sequence
                 WHERE sequence = 'seq_miolo_user'";

        $return = $db->query($sql);
        $iduser = $return[0][0] + 1;

        return $iduser;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     */
    public function insertUser($data)
    {
        $MIOLO = MIOLO::getInstance();
        $action = $MIOLO->getCurrentAction();
        $db = $this->getDatabase();
        $sql = 'SELECT NEXTVAL(\'miolo_user_iduser_seq\')';
        $ret = $db->query($sql);
        $iduser = $ret[0][0];
        
        $resultLdap = true;
            
        $login = SAGU::NVL($data->login, $data->admLogin);
        $name = SAGU::NVL($data->name, $data->username);
        $nickName = SAGU::NVL($data->nickName, $data->nickname);
        $m_password = SAGU::NVL($data->password, $data->admPassword);
        $confirm_hash = $m_password;
        
        //FrmPersonSteps, seguindo do contrato, possui seu próprio controle de transacao
        $transaction = true;
        if ( $action == 'main:register:contract:contract' || $action == 'main:person:person:physicalPerson' )
        {
            $transaction = false;
        }
        
        $transaction ? SDatabase::beginTransaction() : null;
        
        try
        {
            
            
            $sql = "INSERT INTO miolo_user( iduser,
                                            login,
                                            name,
                                            nickname,
                                            m_password,
                                            confirm_hash )
                         VALUES ( '{$iduser}',
                                  '{$login}',
                                  '{$name}',
                                  '{$nickName}',
                                  MD5('{$m_password}'),
                                  MD5('{$confirm_hash}') )";

            $result = $db->execute($sql);

            $return = null;
            if ( $result )
            {
                if ( $MIOLO->getConf('login.class') == 'mauthLdap' )
                {
                    // Sincroniza LDAP
                    $ldif = SAGU::getParameter('BASIC', 'LDIF_INSERE_USUARIO');

                    if ( strlen($ldif) > 0 )
                    {
                        $authLdap = new sAuthLdap();
                        $resultLdap = $authLdap->sincronizarUsuario($iduser, $ldif);

                        if ( !$resultLdap )
                        {
                            throw new Exception(_M(self::ERRO_LDAP_AD));
                        }
                    }

                    // Sincroniza LDAP (senha)
                    if ( strlen($m_password) > 0 )
                    {
                        $ldifAtualiza = SAGU::getParameter('BASIC', 'LDIF_ATUALIZA_SENHA_DO_USUARIO');

                        if ( strlen($ldifAtualiza) > 0 && strlen($ldif) > 0 )
                        {
                            $authLdap = new sAuthLdap();
                            $resultLdap = $authLdap->sincronizarUsuario($iduser, $ldifAtualiza, $m_password);

                            if ( !$resultLdap )
                            {
                                throw new Exception(_M(self::ERRO_LDAP_AD));
                            }
                        }
                    }
                }

                $adminUser = new BusinessAdminUser();
                $adminUser->createPostgresUser($login);

                $return = $iduser;
            }

            $transaction ? SDatabase::commit() : null;
            
            return $return;
        }
        catch ( Exception $ex )
        {
            $transaction ? SDatabase::rollback() : null;
            $MIOLO->error($ex->getMessage());
        }
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateUser($data)
    {        
        $MIOLO = MIOLO::getInstance();
        $action = $MIOLO->getCurrentAction();
        $db = $this->getDatabase();
        $resultLdap = true;
                
        $idUser = SAGU::NVL($data->idUser, $data->iduser);
        $password = SAGU::NVL($data->password, $data->admPassword);
        $login = SAGU::NVL($data->login, $data->admLogin);
        $name = SAGU::NVL($data->name, $data->username);
        $nickName = SAGU::NVL($data->nickName, $data->nickname);

        //FrmPersonSteps tem transacao própria, nao precisa fazer aqui tbm
        $transaction = true;
        if ( $action == 'main:register:contract:contract' || $action == 'main:person:person:physicalPerson' )
        {
            $transaction = false;
        }
        
        $transaction ? SDatabase::beginTransaction() : null;    
        
        try
        {
            if ( sMultiUnidade::estaHabilitada() )
            {
                $sql = " DELETE FROM bassessao  WHERE iduser = '{$idUser}' ";

                $rest = $db->execute($sql);
            }

            $extra = '';

            if ( !in_array(strlen($password), array(0, 32)) )
            {
                $extra = ",
                         m_password = MD5('{$password}'),
                         confirm_hash = MD5('{$password}')";
            }

            $sql = "UPDATE miolo_user
                       SET login = '{$login}',
                           name = '{$name}',
                           nickname = '{$nickName}'
                           {$extra}
                     WHERE iduser = '{$idUser}'";

            $result = $db->execute($sql);

            if ( $result )
            {
                if ( $MIOLO->getConf('login.class') == 'mauthLdap' )
                {
                    // Sincroniza LDAP
                    $ldif = SAGU::getParameter('BASIC', 'LDIF_ATUALIZA_USUARIO');

                    if ( strlen($ldif) > 0 )
                    {
                        $authLdap = new sAuthLdap();
                        $resultLdap = $authLdap->sincronizarUsuario($idUser, $ldif);

                        if ( !$resultLdap )
                        {
                            throw new Exception(_M(self::ERRO_LDAP_AD));
                        }
                    }

                    // Sincroniza LDAP (senha)
                    if ( !in_array(strlen($password), array(0, 32)) )
                    {
                        $ldif = SAGU::getParameter('BASIC', 'LDIF_ATUALIZA_SENHA_DO_USUARIO');

                        if ( strlen($ldif) > 0 )
                        {
                            $authLdap = new sAuthLdap();
                            $resultLdap = $authLdap->sincronizarUsuario($idUser, $ldif, $password);

                            if ( !$resultLdap )
                            {
                                throw new Exception(_M(self::ERRO_LDAP_AD));
                            }
                        }
                    }
                }

                $adminUser = new BusinessAdminUser();
                $adminUser->createPostgresUser($login);
            }

            $transaction ? SDatabase::commit() : null;
            
            if ( strlen($data->admLogin) > 0 )
            {
                if ( $result )
                {
                    return (strlen($idUser) > 0) ? $idUser : null;
                }

                return null;
            }
            else
            {
                return $result;
            }
        }
        catch ( Exception $ex )
        {
            $transaction ? SDatabase::rollback() : null;
            $MIOLO->error($ex->getMessage());
        }
    }

    /**
     * Delete a record
     *
     * @param $args (array): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteUser($iduser)
    {
        $MIOLO = MIOLO::getInstance();
        $db = $this->getDatabase();
        
        $resultLdap = true;
        
        try
        {
            SDatabase::beginTransaction();
            
            // Remove a ligação entre basPerson e miolo_user
            $busPerson = new BusinessBasicBusPerson();
            $user = $this->getUser($iduser);
            $personData = $busPerson->getPersonByMioloUserName($user->admLogin);
            $personData->mioloUserName = "";
            $ok = $busPerson->updatePerson($personData);

            // Remove os dados da basResetPassword
            $busResetPassword = new BusinessBasicBusResetPassword();
            $ok = $busResetPassword->deleteResetPasswordData($iduser);

            // Remove na basSessao
            $sessao = new BasSessao();
            $sessao->idUser = $iduser;
            foreach ( $sessao->findManyRecursive() as $row )
            {
                $row instanceof BasSessao;

                if ( $row->idUser == $iduser ) // Seguranca, ja que nao estao definidas as associacoes
                {
                    $row->delete();
                }
            }

            // Remove o usuário dos grupos de usuários
            $ok = $db->execute(SAGU::prepare('DELETE FROM miolo_groupuser WHERE iduser = ?', $iduser));

            // Remove dependentes basTask
            $filtersC = new stdClass();
            $filtersC->creatorIdUser = $iduser;
            $filtersA = new stdClass();
            $filtersA->assignedTo = $iduser;
            foreach ( array_merge( BasTask::search($filtersC), BasTask::search($filtersA) ) as $row )
            {
                $row->delete();
            }

            // Remove dependentes basTaskConfig
            $filters = new stdClass();
            $filters->idUser = $iduser;
            foreach ( BasTaskConfig::search($filters) as $row )
            {
                $row->delete();
            }

            // Remove dependentes ofertaDeUnidadeTematica
            $filters = new stdClass();
            $filters->encerradoPor = $iduser;
            foreach ( ResOfertaDeUnidadeTematica::search($filters) as $row )
            {
                $row->delete();
            }

            // Remove dependentes TraUnitUser
            $filters = new stdClass();
            $filters->idUser = $iduser;
            foreach ( TraUnitUser::search($filters) as $row )
            {
                $row->delete();
            }

            if ( $MIOLO->getConf('login.class') == 'mauthLdap' )
            {
                // Sincroniza LDAP
                $ldif = SAGU::getParameter('BASIC', 'LDIF_EXCLUI_USUARIO');

                if ( strlen($ldif) > 0 )
                {
                    $authLdap = new sAuthLdap();
                    $authLdap->setIsDelete(true);
                    $resultLdap = $authLdap->sincronizarUsuario($iduser, $ldif);

                    if ( !$resultLdap )
                    {
                        throw new Exception(_M(self::ERRO_LDAP_AD));
                    }
                }
            }

            // Remove o usuário da miolo_user
            $sql = 'DELETE FROM miolo_user
                          WHERE iduser = ?';

            $result = $db->execute(SAGU::prepare($sql, $iduser));

            SDatabase::commit();
            
            return $result;
        }
        catch ( Exception $ex )
        {
            SDatabase::rollback();
            $MIOLO->error($ex->getMessage());
        }
    }
    
    /*
     * Função criada para atualizar a senha do usuário
     */
    public function trocarSenhaUsuario($idUser, $senha, $returnException = false)
    {
        $MIOLO = MIOLO::getInstance();
        $resultLdap = true;
        
        try
        {
            SDatabase::beginTransaction();
            
            $sql = ' UPDATE miolo_user
                        SET m_password = \'' . md5($senha) . '\',
                            confirm_hash = \'' . md5($senha) . '\'
                      WHERE iduser = \'' . $idUser . '\' ';

            $return = $this->getDatabase()->execute($sql);

            // Sincroniza LDAP (senha)
            if ( strlen($senha) > 0 )
            {
                $ldif = SAGU::getParameter('BASIC', 'LDIF_ATUALIZA_SENHA_DO_USUARIO');

                if ( strlen($ldif) > 0 )
                {
                    $authLdap = new sAuthLdap();
                    $resultLdap = $authLdap->sincronizarUsuario($idUser, $ldif, $senha);

                    if ( !$resultLdap )
                    {
                        throw new Exception(_M(self::ERRO_LDAP_AD));
                    }
                }
            }

            SDatabase::commit();
            
            return $return;
        } 
        catch (Exception $ex) 
        {            
            SDatabase::rollback();
            
            if ( $returnException )
            {
                throw new Exception($ex->getMessage());
            }
            
            $MIOLO->error($ex->getMessage());
        }
    }
    
    /**
     * Verifica se a senha informada corresponde com a armazenada no sistema
     * 
     * @param type $senha
     */
    public static function verificaSenhaDoUsuario($senhaUsuario)
    {
        $MIOLO = MIOLO::getInstance();
        
        $sql = " SELECT m_password
                   FROM miolo_user 
                  WHERE iduser = ? ";
        
        $result = SDatabase::query($sql, array($MIOLO->GetLogin()->idkey), false);
        $senha = $result[0][0];
        
        return $senha == $senhaUsuario || $senha == md5($senhaUsuario);
    }
}
?>
