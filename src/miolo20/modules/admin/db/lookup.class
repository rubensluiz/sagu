<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This class Business Admin Lookup
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/06/2006
 *
 **/

class BusinessAdminLookup
{
    public function LookupUser($lookup)
    {
        global $MIOLO;

        $clause = $lookup->GetFilterValue('clause');
        $lookup->AddFilterField( new MTextField('filterLogin', $filterLogin,'Login', 20));
        $lookup->AddFilterField( new MTextField('filterName', $filterName,'Name', 40));

        $filterLogin = $lookup->GetFilterValue('filterLogin');
        $filterName = $lookup->GetFilterValue('filterName');

        $columns = array( new DataGridColumn('login','Login','left',true, '20%',true),
                          new DataGridColumn('name','Name','left',true, '50%',true),
                          new DataGridColumn('nickname','Nick','left',true, '30%',true) );

        $sql = new sql("u.iduser, u.login, u.nickname, u.name",'miolo_user u','','u.login');

        if ( $filterLogin || $filterName )
        {
            $sql->where .= "(";
            if ( $filterLogin )
            {
               $sql->where .= " u.login ilike '%{$filterLogin}%' ";
            }
            if ( $filterName )
            {
                if ( $filterLogin )
                {
                    $sql->where .= $clause;
                }

                   $sql->where .= " u.name ilike '%{$filterName}%' ";
            }

            $sql->where .= " )";
        }

        $lookup->SetGrid('admin', $sql, $columns, 'Lookup Users',10,0);
    }

    /**
     * Auto complete for user
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteUser($context)
    {
        $sql = 'SELECT login,
                       nickname,
                       name AS userName
                  FROM miolo_user
                 WHERE iduser = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }


    /**
     * Lookup de usuário por login
     *
     * @global <type> $MIOLO
     * @param <type> $lookup
     */
    public function LookupUserByLogin($lookup)
    {
        global $MIOLO;

        $clause = $lookup->GetFilterValue('clause');
        $lookup->AddFilterField( new MTextField('filterLogin', $filterLogin,'Login', 20));
        $lookup->AddFilterField( new MTextField('filterName', $filterName,'Name', 40));

        $filterLogin = $lookup->GetFilterValue('filterLogin');
        $filterName = $lookup->GetFilterValue('filterName');

        $columns = array( new DataGridColumn('login','Login','left',true, '20%',true),
                          new DataGridColumn('name','Name','left',true, '50%',true),
                          new DataGridColumn('nickname','Nick','left',true, '30%',true) );

        $sql = new sql("u.login, u.iduser, u.nickname, u.name",'miolo_user u','','u.login');

        if ( $filterLogin || $filterName )
        {
            $sql->where .= "(";
            if ( $filterLogin )
            {
               $sql->where .= " u.login ilike '%{$filterLogin}%' ";
            }
            if ( $filterName )
            {
                if ( $filterLogin )
                {
                    $sql->where .= $clause;
                }

                   $sql->where .= " u.name ilike '%{$filterName}%' ";
            }

            $sql->where .= " )";
        }

        $lookup->SetGrid('admin', $sql, $columns, 'Lookup Users',10,0);
    }

    /**
     * Auto complete da lookup de usuário por login
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteUserByLogin($context)
    {
        $sql = 'SELECT iduser,
                       nickname,
                       name AS userName
                  FROM miolo_user
                 WHERE login = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }


    public function LookupTransaction($lookup)
    {
        $filter = $lookup->GetFilterValue('filter');

        if ( ! $filter )
        {
            $filter = $lookup->GetFilterValue();
        }

        $lookup->AddFilterField( new MTextField('filter', $filter,'Transação', 20));
        $columns = array( new DataGridColumn('idtransaction','Id','right', true,'5%',true),
                          new DataGridColumn('m_transaction','Transaction','left', true,'95%',true) );

        $sql = new sql('idtransaction, m_transaction','miolo_transaction','','m_transaction');

        if ( $filter )
        {
            $sql->where .= " ( upper(m_transaction) like upper('{$filter}%') )";
        }

        $lookup->SetGrid('admin',$sql,$columns, 'Lookup Transactions',15,0);
    }

    public function LookupTransactionGroup($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('module');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $transactionId   = $lookup->getFilterValue('transactionId');
        $transactionDescription = $lookup->getFilterValue('transactionDescription');

        $lookup->addFilterField( new MTextField('transactionId',   $transactionId, _M('Código da transação',$module), 7) );
        $lookup->addFilterField( new MTextField('transactionDescription', $transactionDescription, _M('Transação',$module), 30) );

        $columns = array( new DataGridColumn('transactionId',   _M('Código da transação', $module), 'right', true, null, true),
                          new DataGridColumn('transactionDescription', _M('Transação', $module), 'left',  true, null, true) );

        if ( strlen(MIOLO::_request('groupId')) > 0 )
        {
            $groupId = $lookup->getFilterValue('groupId');

            $lookup->addFilterField( new MTextField('groupId',   $groupId, _M('Código do grupo',$module), 7) );

            $columns[] = new DataGridColumn('groupId', _M('Código do grupo', $module), 'left',  true, null, true);
        }

        $sql = new sql('A.idTransaction as transactionId, B.m_transaction as transactionDescription, C.m_group as groupId','miolo_access A INNER JOIN miolo_transaction B ON( A.idTransaction = B.idTransaction ) INNER JOIN miolo_group C ON( A.idGroup = C.idGroup )','','transactionId');

        if ( strlen($transactionId) > 0 )
        {
            $where .= ' AND B.idtransaction = ?';
            $args[] = $transactionId;
        }

        if ( strlen($transactionDescription) > 0 )
        {
            $where .= ' AND UNACCENT(B.m_transaction) ILIKE UNACCENT(?)';
            $args[] = '%'.$transactionDescription.'%';
        }

        if ( strlen($groupId) > 0 )
        {
            $where .= ' AND C.idgroup = ?';
            $args[] = $groupId;
        }

        if ( strlen($where) > 0 )
        {
            $sql->where = SAGU::prepare(substr($where, 5), $args);
        }

        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sql, $columns, _M('Lookup Transaction/Groups',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for transaction/group
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteTransactionGroup($context)
    {
        $sql = 'SELECT m_transaction
                  FROM miolo_transaction
                 WHERE idTransaction = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function LookupGroup($lookup)
    {
        $filter = $lookup->getFilterValue('filter');

        $lookup->addFilterField( new MTextField('filter',$filter,'Grupo', 20));

        $columns = array( new DataGridColumn('idgroup','Id','right', true, '10%',true),
                          new DataGridColumn('m_group','Grupo','left', true, '90%',true) );

        $sql = new sql('idgroup, m_group', 'miolo_group', '', 'idgroup');

        if ( $filter )
        {
            $sql->where .= " m_group ilike '%{$filter}%' ";
        }

        $lookup->SetGrid('admin', $sql, $columns, 'Pesquisa Grupos', 15, 0);
    }

    public function AutoCompleteGroup($context)
    {
        $sql = 'SELECT idgroup,
                       m_group
                  FROM miolo_group
                 WHERE idgroup = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }
}
?>
