<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file users
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.coop.br]
 *
 * $version: $Id$
 * 
 * @since
 * Class created on 09/09/2014
 */

class FrmUsuariosAutenticadosBusca extends SForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();  
        
        parent::__construct(_M('Usuários autenticados no portal', $module));
        
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $fields[] = new MTextField('usuario', $this->usuario, _M('Usuário', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        
        $button = new MButton('btnFiltrar', _M('Filtrar', $module));
        $fields[] = $div = new MDiv('divFiltrar', $button);
        
        $fields[] = new MSeparator();
        
        $filters = new stdClass();
        $filters->usuario = $MIOLO->_REQUEST('usuario');
        
        $basFilaDeEspera = new BasFilaDeEspera();
        
        $dataGrid = $basFilaDeEspera->searchFilaDeEspera($filters);
        
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdUsuarioAutenticadoBusca');
        $grid->setData($dataGrid);
                                
        $fields[] = $grid;
        
        $fields[] = new MSeparator();
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
    }
    
    public function excluirUsuario($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $filaDeEsperaId = $MIOLO->_REQUEST('filaDeEsperaId');
        
        $opts = array('event' => 'tbBtnDelete_confirm', 'function' => 'delete', 'filaDeEsperaId' => $filaDeEsperaId);
        
        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
        $goto = SAGU::getStackBackUrl();
        $gotoNo = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão', $module);
        SAGU::question($msg, $gotoYes, $gotoNo);
    }
    
    public function tbBtnDelete_confirm($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        try
        {
            SDatabase::beginTransaction();
            $filaDeEsperaId = $MIOLO->_REQUEST('filaDeEsperaId');

            $basFilaDeEspera = new BasFilaDeEspera();
            $ok = $basFilaDeEspera->excluiUsuarioInativo($filaDeEsperaId);
            
            if ( $ok )
            {
                SDatabase::commit();
                
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
                
                if ( SForm::getReturnTo() )
                {
                    $goto = SForm::getReturnTo();
                }
                else
                {
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                }
                
               $this->messageSuccess($msg, $goto);
            }
            else
            {
                SDatabase::rollback();
                
                $msg = _M('Erro executando a operação solicitada.', $module);
                                
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);

                $this->messageError($msg, $goto);
            }
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            throw new Exception( $e->getMessage() );
        }
    }
}

