<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class frmLogin
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
class frmLogin extends MForm
{
    public $auth;

    function frmLogin()
    {
        parent::__construct( _M('Autenticação do Sagu', 'admin') );
        $this->setWidth('60%');
        $this->SetIcon($this->manager->GetUI()->GetImage(NULL, 'login-16x16.png'));
        $this->EventHandler();
        $this->page->addScript('m_validate.js');
        $this->page->addScript(SAGU::ABSOLUTE_URL_JS_FILES . 'sagu.js');
    }

    function CreateFields()
    {
        global $MIOLO, $action, $module;

        $ui = $MIOLO->getUI();
        
        //Realizado checagem se existe os parâmetros, para poder acessar o sistema e rodar o syndb após a atualização
        if( SAGU::checkValidParameter('BASIC', 'VALIDACAO_NAVEGADORES_HOMOLOGADOS') && SAGU::checkValidParameter('BASIC', 'MENSAGEM_NAVEGADORES_NAO_HOMOLOGADOS') && !SAGU::isConsoleMode() )
        {
            //Verifica se está habilitada preferência para verificar e bloqueiar o acesso caso navegador não seja homologado
            $validaNavegador = SAGU::getParameter('BASIC', 'VALIDACAO_NAVEGADORES_HOMOLOGADOS');
            $alerta = SAGU::getParameter('BASIC', 'MENSAGEM_NAVEGADORES_NAO_HOMOLOGADOS');

            $browser = SAGU::getBrowser();   

            if ( $browser != 'Firefox' && $browser != 'Google Chrome' && $browser != 'Android' && $validaNavegador == 2 )
            {
                $MIOLO->error(_M($alerta));            
            }
            else if ( $browser != 'Firefox' && $browser != 'Google Chrome' && $browser != 'Android' && $validaNavegador == 1 )
            {
                $fields[] = MMessage::getStaticMessage('infoAlerta', _M($alerta), MMessage::TYPE_ERROR);
                $fields[] = new MDiv();
            }
        }
        
        $this->auth = $this->manager->auth;
        $return_to = $this->getFormValue('return_to',MIOLO::_Request('return_to'));

        if(!$return_to)
        {
            $return_to = $MIOLO->history->Top();
        }

        $uid = new MTextField('uid',$this->auth->login->iduser, _M('Login'), 20);
        $uid->setClass('m-text-user-field');
        if ( SAGU::getParameter('basic', 'AUTOMATIC_LOGIN_GENERATION_SOURCE') == 'CPF' )
        {
            $uid->addAttribute("onBlur", "validateOnBlurCPF(this);");
        }
        $fields[] = $uid;

        $pwd = new PasswordField('pwd','',_M('Senha','admin'),20);
        $pwd->setClass('m-text-passwd-field');
        $fields[] = $pwd;

        if ( sMultiUnidade::estaHabilitada() )
        {
            $unit = sMultiUnidade::obterCombo();
            $unit->setIsRequired(true);
            $fields[] = $unit;
            $validators[] = new MRequiredValidator('unitId', _M("Unidade"));
        }

        $fields[] = new HiddenField('username',$this->auth->login->user, _M('Nome'), 40);
        if ( strpos($this->manager->GetConf('theme.email'),'@') != false )
        {
            $link = 'mailto:';
        }

        //$link .= $this->manager->GetConf('theme.email');
        //$fields[] = $link = new MLink('mail',_M('Email para contato:'), $link, $this->manager->GetConf('theme.email'));
        //$link->addAttribute('target','_blank');

        $fields[] = new HiddenField('tries', '');
        $fields[] = new MLink('forgottenPassword', NULL, $MIOLO->GetActionURL($module,'forgottenPassword'), _M('Esqueci minha senha',$module));
        $fields[] = new HiddenField('return_to', $return_to);

        $this->AddButton(new FormButton('btnLogout', _M('Sair', $module) ) );
        $helpMsg = _M('Informe um usuário e senha válidos para efetuar o login.', 'admin');
        $this->AddButton(new FormButton('btnLogin', _M('Efetuar login', $module) ) );
        $this->AddButton(new FormButton('btnHelp', _M('Ajuda', $module), "alert('$helpMsg')"));

        if ( SAGU::getParameter('basic', 'ALLOW_PUBLIC_REGISTRATION') == 'NO' )
        {
            $this->setFields($fields);
            $this->setValidators($validators);
        }
        else
        {
            $bsg1 = new MBaseGroup('bsgLogin', _M('Usuário existente', $module), $fields, 'vertical' );
            $bsg1->setShowLabel(true);
            $bsg1->setWidth('48%');

            $btnRegister = new MLinkButton('btnRegister', _M('Cadastre-se', $module));
            $bsg2 = new MBaseGroup('bsgRegister', _M('Novo usuário', $module), array($btnRegister), 'vertical' );
            $bsg2->setShowLabel(false);
            $bsg2->setAttribute('align', 'center');
            $bsg2->setWidth('48%');

            $ctnH = new MHContainer('cntFields', array($bsg1,$bsg2));
            $fields[] = $ctnH;

            $this->setFields($fields);
            $this->setValidators($validators);
        }

        $this->SetButtonAttr('btnLogin' , 'visible' , ! $this->isAuthenticated() );
        $this->SetButtonAttr('btnLogout', 'visible' ,   $this->isAuthenticated() );
        $this->SetFieldAttr('uid'       , 'readonly',   $this->isAuthenticated() );
        $this->SetFieldAttr('pwd'       , 'visible' , ! $this->isAuthenticated() );
        $this->SetFieldAttr('username'  ,'visible'  ,$this->isAuthenticated());

        $this->page->onLoad("document.getElementById('uid').focus();");
        
        // Validar hash de autenticação do webServicesBasic, função wsLogin
        if ( SAGU::validarHashDeAutenticacao() ) 
        {
            $this->btnLogin_click();
        }
    }

    function btnLogin_click()
    {   
        $MIOLO = MIOLO::getInstance();

        $this->GetData();

        // Max login tryes
        $max_tries = 3;

        // autenticar usuário e obter dados do login
        $uid = $this->GetFormValue('uid');
        $pwd = $this->GetFormValue('pwd');
        $unitId = $this->GetFormValue('unitId');
        
        // Seta dados quando há um hash válido
        if ( SAGU::validarHashDeAutenticacao() )
        {
            $userInformation = SAGU::obterDadosDeLoginAPartirDoHash();
            
            $uid = $userInformation->login;
            $pwd = $userInformation->password;
            $unitId = $userInformation->unitId;
        }
        
        $MIOLO->LogMessage('[LOGIN] Validating login information: ' . $uid);
        
        try
        {
            if ( !$this->LoginPermitted($uid) )
            {
                throw new Exception( _M('Acesso não permitido.', $module) );
            }
            
            if ( sMultiUnidade::estaHabilitada() )
            {    
                $msg = _M('Erro na identificação do usuário! <br> Verifique se o usuário, senha e unidade informados estão corretos.', $module);
            }
            else
            {
                $msg = _M('Erro na identificação do usuário!<br> Verifique se o usuário e senha informados estão corretos.', $module);
            }   
            
            // Para autenticações em ldap/ad, não existe case senesitive.
            if ( $this->auth instanceof MAuthLdap )
            {
                $busUser = new BusinessAdminUser();
                $busUser->getByLogin($uid, 'ILIKE');
                
                $uid = $busUser->login;
            }
                
            // Multiunidade
            if ( sMultiUnidade::estaHabilitada() && !sMultiUnidade::loginTemPermissao($uid, $unitId) && SAGU::allIsFilled($uid) )
            {
                $busUnit = new BusinessBasicBusUnit();
                $desc = $busUnit->getUnit($unitId)->description;
                
                throw new Exception($msg);
            }
            
            if ( $this->auth->Authenticate($uid, $pwd) )
            {
                $MIOLO->session->set("senhaADExpirada", DB_FALSE);
                $ldif = SAGU::getParameter('BASIC', 'LDIF_ATUALIZA_SENHA_DO_USUARIO');
                
                if ( strlen($ldif) > 0 )
                {
                    $sAuthLdap = new sAuthLdap();

                    if ( $sAuthLdap->verificaSeSenhaDoUsuarioExpirou($uid, $pwd) )
                    {
                        $MIOLO->session->set("senhaADExpirada", DB_TRUE);
                    }
                }
                
//                if ( sMultiUnidade::estaHabilitada() )
                {
                    sMultiUnidade::definirUnidadeLogada( $unitId );
                }
               
                $return_to = $this->GetFormValue('return_to');

                // ToDo: voltar para onde estava...
                if ( $return_to )
                {
                    $url = $return_to;
                }
                else
                {
                    $url = $MIOLO->GetActionURL('admin','login');
                }
                
                //redirecionamento caso o usuário só tenha permissão no módulo SERVICES
                $login = $MIOLO->getLogin();
                $busAdminUser = new BusinessAdminUser();
                
                // Quando em modo autenticacao LDAP, o idkey fica == 0, entao, tenta buscar o iduser associado
                if ( $login->idkey === 0 )
                {
                    $login->idkey = $busAdminUser->getIdUserByLogin($login->id);
                }
                
                if( $login->idkey != 0 )
                {
                    $groups = $busAdminUser->listGroupsByIdUser($login->idkey);
                    $groups = $groups->result;
                }
                else
                {
                    $groups = $busAdminUser->listGroupsByLogin($login->id, false);
                }

                // Estávamos com problema em verificar se o usuário é admin com o LDAP
                // realizando checagem forçada no login pra setar o usuário como admin
                if ( $login instanceof MLogin )
                {
                    $login->IsAdmin(count(array_filter($groups, function($var)
                                    {
                                        return in_array('ADMIN', $var);
                                    })) > 0 );
                }

                $qtdModules = 0;
                $arrayModules = array();
                foreach ($groups as $group)
                {
                    $modules = $busAdminUser->getModulesByGroup($group[0]);
                    
                    foreach ( $modules as $module )
                    { 
                        if (!in_array($module[0], $arrayModules) &&  $module[0] != 'gnuteca3')
                        {
                            $arrayModules[] = $module[0];
                        }
                    }
                }
                
                if ( count($arrayModules) == 1 )
                {
                    $tempModule = strlen($modules[0][0]) > 0 ? $modules[0][0] : $arrayModules[0];
                    
                    $url = $MIOLO->GetActionURL($tempModule, 'main');                
                }
                   
                //Verifica se existe uma configuração para troca de senha e redireciona para tela de troca
                if( BusinessBasicBusConfiguracaoTrocaDeSenha::verificaTrocaDeSenha() == DB_TRUE )
                {
                    $this->page->redirect($MIOLO->getActionURL('sagu2', 'main'));
                }
                else
                {
                    $this->page->Redirect($url);
                }
            }
            else
            {   
                $tries = $this->GetFormValue('tries');

                if ( $tries >= $max_tries )
                {
                    $MIOLO->Error($msg);
                }
                else
                {
                    throw new Exception( $msg . ' - Restam ' . ( $max_tries - $tries ) . ' ' . 'tentativa(s).', $module );

                    $tries++;
                    $this->SetFormValue('tries',$tries);
                    $pwd = null;
                }
            }
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
    }

    function btnLogout_click()
    {
        global $MIOLO;
        
        $this->page->Redirect($MIOLO->GetActionURL($module,'logout'));
    }

    function LoginPermitted($uid)
    {  
        global $MIOLO;

       $ok = true;
       return $ok;
    }

    function isAuthenticated()
    {
        return $this->auth->isLogged();
    }

    public function btnRegister_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Field person name
        $personLabel = new MText('personLabel', _M('Nome',$module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personLabel->setClass('m-caption m-caption-required');
        $personName = new MTextField('personName', $this->getFormValue('personName',$data->name), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Informe o nome da pessoa',$module));
        $validators[] = new MRequiredValidator('personName', _M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personName));
        $hctPerson->setShowLabel(true);
        $fields[] = $hctPerson;

        // Field sex
        $sexLabel = new MText('sexLabel', _M('Sexo',$module) . ':');
        $sexLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sexLabel->setClass('m-caption m-caption-required');
        $sex = new MSelection('sex', $this->getFormValue('sex', $data->sex), null, SAGU::listSex());
        $sex->setJsHint(_M('Informe o sexo',$module));
        $validators[] = new MRequiredValidator('sex', _M('Sexo',$module));
        $fields[] = new MHContainer('hctSex', array($sexLabel, $sex));

        // Field date birth
        $dateBirthLabel = new MText('dateBirthLabel', _M('Data de nascimento',$module) . ':');
        $dateBirthLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dateBirthLabel->setClass('m-caption m-caption-required');
        $dateBirth = new MCalendarField('dateBirth', $this->getFormValue('dateBirth',$data->dateBirth), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[] = new MDateDMYValidator('dateBirth',_M('Data de nascimento',$module),'required');
        $dateBirth->setJsHint(_M('Informe a data de nascimento',$module));
        $fields[] = new MHContainer('hctDateBirth', array($dateBirthLabel, $dateBirth));

        // Field email
        $emailLabel = new MText('emailLabel', _M('E-mail',$module) . ':');
        $emailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emailLabel->setClass('m-caption m-caption-required');
        $email = new MTextField('email', $this->getFormValue('email',$data->email), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $email->setJsHint(_M('Informe o e-mail da pessoa',$module));
        $validators[] = new MEmailValidator('email',_M('E-mail',$module),'required');
        $hctEmail = new MHContainer('hctEmail', array($emailLabel, $email));
        $hctEmail->setShowLabel(true);
        $fields[] = $hctEmail;

        // Field cpf
        $cpfLabel = new MText('cpfLabel', _M('CPF',$module) . ':');
        $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cpfLabel->setClass('m-caption m-caption-required');
        $cpf = new MTextField('cpf', $this->getFormValue('cpf',$data->cpf), NULL, SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
        $cpf->setJsHint(_M('Informe seu CPF',$module));
        $validators[]  = new MCPFValidator('cpf', _M('CPF',$module), 'required');
        $hctCpf = new MHContainer('hctPerson', array($cpfLabel, $cpf));
        $hctCpf->setShowLabel(true);
        $fields[] = $hctCpf;

        $fields[] = new Separator('');

        $return_to = $this->getFormValue('return_to',MIOLO::_Request('return_to'));

        $fields[] = new MHiddenField('return_to', $return_to);

        $goto = ( strlen($return_to) > 0 ? $return_to : $MIOLO->getActionURL($module, 'main') );

        $flds[] = new MBaseGroup('bgsFields', _M('Cadastro de usuário', $module), $fields, 'vertical');

        $this->ClearButtons();
        $this->AddButton(new FormButton('btnBack', _M('Voltar', $module), $goto));
        $this->AddButton(new FormButton('btnAddUser', _M('Salvar', $module)));
        $this->setFields($flds);
        $this->setValidators($validators);
    }

    public function btnAddUser_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();

        $filters = new stdClass();
        $filters->content = $data->cpf;
        $filters->documentTypeId = SAGU::getParameter('basic', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');

        $busDocument = new BusinessBasicBusDocument();
        $searchDocument = $busDocument->searchDocument($filters, true);

        //Valida se o usuário ja está cadastrado atravéz do cpf
        if( count($searchDocument) > 0 )
        {
            $MIOLO->error(_M('Já existe um usuário registrado com o CPF informado. Informe um CPF válido', $module));
        }
        else
        {
            try
            {
                $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();

                //Cria a pessoa
                $physicalPerson = new BasPhysicalPerson();
                $physicalPerson->name = $data->name;
                $physicalPerson->sex = $data->sex;
                $physicalPerson->dateBirth = $data->dateBirth;
                $physicalPerson->email = $data->email;

                $personId = $busPhysicalPerson->insertPhysicalPerson($physicalPerson);

                //Salva o cpf
                $document = new BasDocument();
                $document->documentTypeId = SAGU::getParameter('basic', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
                $document->content = $data->cpf;
                $document->personId = $personId;
                $busDocument->insertDocument($document);

                //Cria usuário
                $userData->admLogin = $data->cpf;
                $userData->username = $data->name;
                $userData->admPassword = SAGU::createPassword();

                $busUser = new BusinessAdminUser();
                $okUser = $busUser->insertUser($userData);

                $physicalPerson->personId = $personId;
                $physicalPerson->mioloUserName = $data->cpf;

                //Atualiza o usuário da pessoa
                $ok = $busPhysicalPerson->updatePhysicalPerson($physicalPerson);

                /**
                * Envia email de confirmação
                */
                if ( strlen($physicalPerson->email) > 0 )
                {
                    $tags = array( '$PERSONNAME' => $physicalPerson->name,
                                   '$PERSONID' => $physicalPerson->personId,
                                   '$ADMLOGIN' => $physicalPerson->mioloUserName,
                                   '$ADMPASSWORD' => $userData->admPassword );

                    // Business email and company
                    $busEmail = new BusinessBasicBusEmail();
                    $busCompany = new BusinessBasicBusCompany();

                    $dataEmail = $busEmail->getEmail(SAGU::getParameter('basic','EMAIL_ID_USER_REGISTER'));
                    $dataCompany = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

                    //Parameters
                    $from = strtolower($dataEmail->from);
                    $fromName = $dataCompany->acronym;
                    $recipient[$physicalPerson->name] = strtolower($physicalPerson->email);
                    $subject = $dataEmail->subject;
                    $body = strtr($dataEmail->body, $tags);

                    $mail = new sendEmail($from, $fromName, $recipient, $subject, $body, array());

                    if ( $mail->sendEmail() )
                    {
                        $return_to = $this->getFormValue('return_to',MIOLO::_Request('return_to'));
                        $goto = ( strlen($return_to) > 0 ? $return_to : $MIOLO->getActionURL($module, 'main') );
                        
                        SAGU::information(_M('Um email de confirmação do cadastro foi enviado para @1',$module, $physicalPerson->email), $goto);
                        $this->AddInfo();
                    }
                    else
                    {
                        $msg = _M('Erro com o servidor de email. Entre em contato com o responsável pelo sistema para resolver o problema', $module).'.';
                        throw new Exception($msg);
                    }
                }
            }
            catch(Exception $e)
            {
                $this->addError($e->getMessage());
            }
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->name = $this->getFormValue('personName');
        $data->sex = $this->getFormValue('sex');
        $data->dateBirth = $this->getFormValue('dateBirth');
        $data->email = $this->getFormValue('email');
        $data->cpf = $this->getFormValue('cpf');

        return $data;
    }
}
?>
