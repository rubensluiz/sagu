<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class frm Conf Db
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
class frmConfDb extends MForm
{
    var $conf;

    /**
     * form constructor
     */
    function __construct($conf)
    {   
        header("Content-Type: text/html;  charset=ISO-8859-1",true);
        global $MIOLO, $module, $action;
//        $this->conf = $MIOLO->getConf('home.etc').'/miolo.conf';
        $this->conf = $conf;
        parent::__construct( _M('DB', $module) );
 
        $this->eventHandler();
        $this->loadData();
    }

    /**
     * method to create form fields
     */
    function createFields()
    {  
        global $MIOLO, $action, $module;
        
        $options01 = array('1'=>_M('Sim', 'admin'),'0'=>_M('Não', 'admin'));
        $optionsTF = array('true'=>_M('Sim', 'admin'),'false'=>_M('Não', 'admin'));
 
        $suportedDbs = $MIOLO->getConf('home.classes').'/database';
        foreach( scandir($suportedDbs) as $dir )
        {
            if( (substr($dir,0,1) != '.') and is_dir($suportedDbs.'/'.$dir) )
            {
                $systems[$dir] = $dir;
            }
        }

        $cont[]   = $lbls[] = new MLabel(_M('System', 'admin').':');
        $cont[]   = new MSelection('dbSystem', $this->getFormValue('dbSystem'), null, $systems);
        $fields[] = new MHContainer('cont1', $cont);
        unset($cont);
        $cont[]   = $lbls[] = new MLabel(_M('Host', 'admin').':');
        $cont[]   = new MTextField('dbHost', $this->getFormValue('dbHost'), null, '20px');
        $fields[] = new MHContainer('cont2', $cont);
        unset($cont);
        $cont[]   = $lbls[] = new MLabel(_M('Name(path)', 'admin').':');
        $cont[]   = new MTextField('dbName', $this->getFormValue('dbName'), null, '20px');
        $fields[] = new MHContainer('cont3', $cont);
        unset($cont);
        $cont[]   = $lbls[] = new MLabel(_M('Usuário', 'admin').':');
        $cont[]   = new MTextField('dbUser', $this->getFormValue('dbUser'), null, '20px');
        $fields[] = new MHContainer('cont4', $cont);
        unset($cont);
        $cont[]   = $lbls[] = new MLabel(_M('Senha', 'admin').':');
        $cont[]   = new MTextField('dbPassword', $this->getFormValue('dbPassword'), null, '20px');
        $fields[] = new MHContainer('cont5', $cont);
        unset($cont);
        foreach( $lbls as $lbl )
        {
            $lbl->width = '85px';
        }

        $fields   = new MVContainer('tab5', $fields);
        $this->setFields($fields);
 
        $version = new MTextField('version', MIOLO_VERSION, null, 15);
        $version->setReadOnly(true);
        $this->addField($version);

       
        $this->defaultButton = false;

    }

    /**
     * load form data from configuration file
     */
    function loadData()
    {
        global $MIOLO;
        $dom = new DOMDocument();
        $dom->load($this->conf);
        $conf = $dom->getElementsByTagName('conf')->item(0);
        
        if( $db = $conf->getElementsByTagName('db')->item(1) )
        {
            $dbMiolo = $db->getElementsByTagName('miolo')->item(0);
        }
        elseif( $db = $conf->getElementsByTagName('db')->item(0) )
        {
            $dbMiolo = $db->getElementsByTagName('miolo')->item(0);
        }
        
        $confModule = 'miolo';
        if( MIOLO::_REQUEST('confModule') )
        {
            $confModule = MIOLO::_REQUEST('confModule');
        }
        if( $dbMiolo = $db->getElementsByTagName($confModule)->item(0) )
        {
            $this->dbSystem   ->setValue($dbMiolo->getElementsByTagName('system'     )->item(0)->nodeValue);
            $this->dbHost     ->setValue($dbMiolo->getElementsByTagName('host'       )->item(0)->nodeValue);
            $this->dbName     ->setValue($dbMiolo->getElementsByTagName('name'       )->item(0)->nodeValue);
            $this->dbUser     ->setValue($dbMiolo->getElementsByTagName('user'       )->item(0)->nodeValue);
            $this->dbPassword ->setValue($dbMiolo->getElementsByTagName('password'   )->item(0)->nodeValue);
        }
        
    }

    /**
     * Update conf array by form data
     * @param (array) conf values
     * @return (array) updated conf values
     */
    function setConfArray($confArray)
    {
        /* REVISAR */
        $confModule = MIOLO::_REQUEST('confModule');
        !$confModule ? $confModule = 'miolo' : null;
        $confArray['db.'.$confModule.'.system'  ] = $this->dbSystem  ->getvalue();
        $confArray['db.'.$confModule.'.host'    ] = $this->dbHost    ->getvalue();
        $confArray['db.'.$confModule.'.name'    ] = $this->dbName    ->getvalue();
        $confArray['db.'.$confModule.'.user'    ] = $this->dbUser    ->getvalue();
        $confArray['db.'.$confModule.'.password'] = $this->dbPassword->getvalue();
        
        return $confArray;
    }
}
?>
