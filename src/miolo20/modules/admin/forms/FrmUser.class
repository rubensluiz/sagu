<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This class frm User
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/06/2006
 */

MIOLO::uses('/ui/controls/msubdetail.class');

class FrmUser extends SManagementForm
{
    function __construct()
    {
        parent::__construct(null, array('idUser'), null);
    }

    function defineFields()
    {
        /*
         * FIXME: Os IDs dos campos foram renomeados de tal forma por estarem
         * conflitando com o MIOLO.
         * Ex.: Não foi possível utilizar: password, m_password, login, loginName...
         */

        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $busGroupUser = new BusinessAdminGroupUser();
        $busGroup = new BusinessAdminGroup();

        if ( in_array( $function, array( SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE )) )
        {
            $iduser = MIOLO::_REQUEST('idUser');
            $fields[] = new MTextLabel('idUser', $iduser, _M('Código', $module));
            $fields[] = new MHiddenField('idUser', $iduser);
            $busUser = new BusinessAdminBusUser();
            $data = $busUser->getUser($iduser);
        }

        // Array de grupos
        $data->groups = $busGroupUser->getByUserId($iduser);;

        // Field login
        $loginName = new MTextField('miolo_user_login_name', $this->getFormValue('miolo_user_login_name', $data->login), _M('Efetuar login', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $loginName->setJsHint(_M('Informe o usuário', $module));
        $fields[] = $loginName;
        $validators[] = new MRequiredValidator('miolo_user_login_name', _M('Efetuar login', $module));

        // Field password
        $admpassword = new MpasswordField('miolo_user_password', $this->getFormValue('miolo_user_password'), _M('Senha', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $admpassword->setJsHint(_M('Informe a senha (caso deixado em branco, não será atualizada)', $module));
        $fields[] = $admpassword;
        $validators[] = SAGU::getPasswordValidator('miolo_user_password', _M('Senha', $module));

        // Field user name
        $username = new MTextField('person_name', $this->getFormValue('person_name', $data->name), _M('Nome do usuário', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $username->setJsHint(_M('Informe o nome do usuário', $module));
        $fields[] = $username;
        $validators[] = new MRequiredValidator('person_name', _M('Nome do usuário', $module));

        // Field nick name
        $nickname = new MTextField('person_nickname', $this->getFormValue('person_nickname', $data->nickName), _M('Apelido', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $nickname->setJsHint(_M('Informe o apelido', $module));
        $fields[] = $nickname;

        if ( SAGU::getParameter('BASIC', 'AUTH_METHOD') == 'LDAP' && SAGU::getParameter('BASIC', 'AUTH_LDAP_SYNCHRONIZE_USERS') != DB_TRUE && !( strlen(SAGU::getParameter('BASIC', 'LDIF_ATUALIZA_SENHA_DO_USUARIO')) > 0 || strlen(SAGU::getParameter('BASIC', 'LDIF_ATUALIZA_USUARIO')) > 0 ) )
        {
            $loginName->setReadOnly(TRUE);
            $admpassword->setReadOnly(TRUE);
            $username->setReadOnly(TRUE);
            $nickname->setReadOnly(TRUE);
        }

        // Separator
        $fields[] = new MSeparator();

        /*
         * Subdetail dos grupos
         */
        // Field person id
//        $subFields[] = new SHiddenField('idGroup');

        // Field group
        $groupLabel = new MText('groupLabel', _M('Grupo', $module) . ':');
        $groupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $groupLabel->setClass('m-caption m-caption-required');
        $grp = new MLookupTextField('idGroup', $this->getFormValue('idGroup', $data->idGroup), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'idGroup, groupName', $module, 'group', null, null, true);
        $grp->setJsHint(_M('Informe o codigo do grupo', $module));
        $groupDescription = new MTextField('groupName', $this->getFormValue('groupName', $data->groupName), _M('Nome do grupo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $groupDescription->setJsHint(_M('Nome do grupo', $module));
        $groupDescription->setReadOnly(true);
        $hctGroup = new MHContainer('hctCourse', array($groupLabel, $grp, $groupDescription));
        $hctGroup->setShowLabel(false);
        $sFields[] = $hctGroup;
        $sValidators[] = new MIntegerValidator('idGroup', _M('Código do grupo', $module), 'required');
        
        

        // Subdetail collumns
        $busUnit = new BusinessBasicBusUnit();

        $columns = array();
        $columns[] = new MGridColumn(_M('Código do grupo', $module), 'left', true, '', true, 'idGroup');
        $columns[] = new MGridColumn(_M('Nome do grupo', $module), 'left', true, '', true, 'groupName');


        if (sMultiUnidade::estaHabilitada())
        {
            $sFields[] = sMultiUnidade::obterCombo();
            $sValidators[] = new MRequiredValidator('unitId', _M("Unidade"));
            $columns[] = new MGridColumn(_M('Unidade', $module), 'left', true, '', true, 'unitId', null,  $busUnit->listUnitAssoc());
        }
        // Impede grupos iguais
//        $sValidators[] = new MSubDetailUniqueValidator('idGroup', _M('Código do grupo', $module));

        // Subdetail groups
        $fields[] = $sub = new MSubDetail('groups', _M('Grupos', $module), $columns, $sFields);
        $sub->setValidators($sValidators);

        // Subdetail related
        if ( !$MIOLO->page->isPostBack() )
        {
            MSubDetail::clearData('groups');
            
            if ( count($data->groups) > 0 )
            {
                $sub->setData(SAGU::convertSTypeToSubDetail($columns, $data->groups));
            }
        }

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Função de salvar os dados
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        // Instancia um objeto usuário
        $user = new BusinessAdminUser();

        try
        {
            // Pega os dados
            $data = $this->getTypesData();

            //Verifica se o usuário já está cadastrado.

            $logins = $user->searchLogin($data->admLogin);

            // Atualiza ou insere os dados na base
            if ( strlen($data->idUser) > 0 )
            {
                $iduser = $user->updateUser($data);
            }
            else
            {
                if ( strlen($logins) > 0 )
                {
                    $MIOLO->Error(_M('O login @1 já está cadastrado no sistema, Favor tente outro.', $modules, $data->admLogin));
                }

                $iduser = $user->insertUser($data);
            }

            if ( strlen($iduser) > 0 )
            {
                // Remove o usuário de todos os grupos que ele pertence
                $groupUser = new BusinessAdminGroupUser();
                $groupUser->deleteUserGroup($iduser);

                // Insere o usuário nos grupos da subdetail
                foreach ( (array) $data->groups as $group )
                {
                    $dataUser = new BusinessAdminGroupUser();
                    $dataUser->setIdUser($iduser);
                    $dataUser->setIdGroup($group->idGroup);

                    if (sMultiUnidade::estaHabilitada())
                    {
                        $dataUser->setUnitId($group->unitId);
                    }
                    
                    $groupUser->insertUserInGroups($dataUser);
                }
            }
            else
            {
                throw new Exception(_M('Ocorreu um erro ao inserir/alterar os dados na base.', $module));
            }

            $msg = ($function == SForm::FUNCTION_UPDATE) ? SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED') : SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED_INFO');
            SAGU::information($msg, $MIOLO->getActionURL($module, $action, null, array('function'=>'search')));

            // Limpa os dados da subdetail
            MSubDetail::clearData('groups');
        }
        catch (Exception $e)
        {
            $MIOLO->error( $e->getMessage() );
        }
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     */
    public function tbBtnDelete_confirm($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Obtém o código do registro a ser excluído
        $idUser = MIOLO::_REQUEST('idUser');
        $busUser = new BusinessAdminUser();

        try
        {
            if ( strlen($idUser) > 0 )
            {
                // Deleta o usuário
                $ok = $busUser->deleteUser($idUser);
            }
            else
            {
                throw new Exception(_M('Não foi possível remover o registro. Código inexistente.', $module));
            }

            // Mensagem de sucesso ou falha
            if ( $ok )
            {
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $msg = _M('Erro executando a operação solicitada. Não foi possível fazer a exclusão do registro.', $module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                $MIOLO->error($msg, $goto, $caption);
            }
        }
        catch ( Exception $e )
        {
            $caption = _M('Erro', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $MIOLO->error($e->getMessage(), $goto, $caption);
        }
    }

    /**
     * Pega os dados do form
     */
    public function getTypesData()
    {
        $data = new stdClass();
        $data->idUser = MIOLO::_REQUEST('idUser');
        $data->admLogin = MIOLO::_REQUEST('miolo_user_login_name');
        $data->username = MIOLO::_REQUEST('person_name');
        $data->nickname = MIOLO::_REQUEST('person_nickname');
        $data->admPassword = MIOLO::_REQUEST('miolo_user_password');

        $groups = MSubDetail::getData('groups');

        $tempGroups = array();
        foreach ( (array)$groups as $row )
        {
            if ( !$row->removeData )
            {
                $tempGroups[] = $row;
            }
        }

        $data->groups = $tempGroups;

        return $data;
    }
}
?>
