<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class frm Log Info
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
class frmLogInfo extends MForm
{
    function __construct()
    {   global $MIOLO, $module, $action;

        parent::__construct( _M('Log Info', $module) );
        $this->eventHandler();
    }

    function createFields()
    {  global $MIOLO, $action, $module;

        $MIOLO->uses('classes/logReader.class', $module);
        $log = new logReader(MIOLO::_REQUEST('mod'));
        $data = $log->getLog(MIOLO::_REQUEST('pointer'));
        $cont1[]  = new MTextLabel('tlIP', null, _M('IP', $module).':');
        $cont1[]  = new MTextField('IP', $data[1], null);
        $cont1[]  = new MTextLabel('tlModule', null, _M('Modulo', $module).':');
        $cont1[]  = new MTextField('logModule', $data[4]);
        $cont1[]  = new MTextLabel('tlUser', null, _M('Usuário', $module).':');
        $cont1[]  = new MTextField('user', $data[5]);
        $fields[] = new MHContainer('cont1', $cont1);
        $cont2[]  = new MTextLabel('tlDate', null, _M('Data', $module).':');
        $cont2[]  = new MTextField('date', $data[2]);
        $cont2[]  = new MTextLabel('tlTime', null, _M('Horário', $module).':');
        $cont2[]  = new MTextField('time', $data[3]);
        $fields[] = new MHContainer('cont2', $cont2);
        $cont6[]  = new MMultiLineField('SQL', $data[6], null, 40, 5, 60); 
        $fields[] = new MHContainer('cont6', $cont6);
        $this->defaultButton = false;
        
        $this->setFields($fields);
        $this->tlIP     ->width = '35px';
        $this->tlDate   ->width = '35px';
        $this->tlTime   ->width = '40px';
        $this->tlModule ->width = '40px';
        $this->tlUser   ->width = '70px';
        $this->date     ->width = '90px';
        $this->IP       ->width = '90px';
        $this->date     ->setReadOnly(true);
        $this->IP       ->setReadOnly(true);
        $this->logModule->setReadOnly(true);
        $this->time     ->setReadOnly(true);
        $this->user     ->setReadOnly(true);
        $this->SQL      ->setReadOnly(true);
//        $this->tlSQL   ->width = '100px';
//        $this->SQL     ->width = '80%';
        $this->setLabelWidth('100');
        
    }

}
?>
