<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de troca de senha do módulo de serviços
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 23/02/2011
 */
class FrmChangePassword extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);
        parent::__construct(_M('Troca de senha', $module), null, null);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Valida código identificador da troca de senha
        try
        {
            // Obtem o código identificador da requisição de troca de senha
            $hashCode = urldecode(MIOLO::_REQUEST('id'));

            // Business reset password
            $businessResetPassword = new BusinessBasicBusResetPassword();
            $resetPassword = $businessResetPassword->getResetPasswordByConfirmHash($hashCode);

            if ( strlen($resetPassword->resetPasswordId)==0 )
            {
                $msg = _M('Código identificador da requisição de troca de senha não existe ou expirou', $module).'!';
                throw new Exception($msg);
            }
        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }

        $fields[] = new MHiddenField('hashCode', $hashCode);
        // Campo nova senha
        $fields[] = $password = new MPasswordField('password', null, _M('Senha'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $password->setJsHint(_M('Informe a nova senha', $module));
        $validators[] = new MRequiredValidator('password', _M('Senha',$module));

        // Campo confirmar senha
        $fields[] = $confirmPassword = new MPasswordField('confirmPassword', null, _M('Confirmar senha'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $confirmPassword->setJsHint(_M('Informe a nova senha', $module));
        $validators[] = new MRequiredValidator('confirmPassword', _M('Confirmar senha',$module));

        // Enviar
        $fields[] = new MButton('submit_button',  _M('Enviar', $module));

        $this->setFields($fields);
        $this->setValidators($validators);
    }

    /**
     * Ação do botão enviar
     */
    public function submit_button_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Dados do form
        $data = $this->getData();

        try
        {
            // Verifica se a senha e a confirmação de senha são iguais
            if ( $data->password != $data->confirmPassword )
            {
                $msg = _M('Senha informada não confere com a confirmação de senha',$module).'.';
                throw new Exception($msg);
            }
            // Senha de no mínimo 6 digitos
            if ( strlen($data->password)<6 )
            {
                $msg = _M('A senha deve conter no mínimo 6 caracteres',$module).'.';
            }
            // Caracteres alfa numéricos
            if ( !ctype_alnum($data->password) )
            {
                $msg .= '<br />'._M('A senha deve conter apenas caracteres alfanuméricos',$module).'.';
            }
            // Mostra mensagem caso tenha
            if ( strlen($msg)>0 )
            {
                throw new Exception($msg);
            }

            // Business reset password
            $businessResetPassword = new BusinessBasicBusResetPassword();
            $resetPassword = $businessResetPassword->getResetPasswordByConfirmHash($data->hashCode);

            // Business user
            $busUser = new BusinessAdminBusUser();
            $mioloUser = $busUser->getUser($resetPassword->idUser);

            // Atualiza senha do usuário
            $mioloUser->password = $data->password;
            $ok = $busUser->updateUser($mioloUser);

            //Invalida hash
            $businessResetPassword->addExpirationDateResetPassword($resetPassword->resetPasswordId);

            if ( $ok )
            {
                $this->AddInfo(_M('A senha foi alterada com sucesso',$module));
            }
        }
        catch (Exception $e)
        {
            $this->AddError( $e->getMessage() );
        }
    }
}
?>
