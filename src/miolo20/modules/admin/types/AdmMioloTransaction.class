<?php

/**
 * <--- Copyright 2005-2012 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * Maintainers:
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 27/03/2012
 *
 */
class AdmMioloTransaction extends SType
{
    protected $_tableName = 'miolo_transaction';
    
    protected $_descriptionColumn = 'm_transaction || \' - \' || nameTransaction';
    
    protected $_defaultOrder = 'm_transaction';
    
    protected $_fromOnly = true;
    
    /**
     * @AttributeType integer
     *
     */
    protected $idTransaction;
    /**
     * @AttributeType text
     *
     */
    protected $mTransaction;
    /**
     * @AttributeType character varying
     * Descricao da transacao
     */
    protected $nameTransaction;
    /**
     * @AttributeType character varying
     * Modulo da transacao
     */
    protected $idModule;
    /**
     * @AttributeType text
     * Transacao pai
     */
    protected $parentTransaction;
    /**
     * @AttributeType character varying
     *
     */
    protected $action;
    
    /**
     * @var boolean
     */
    protected $isDynamicReport;
    
    /**
     * Tipo de relatorio
     *
     * @var int
     */
    protected $dynamicReportType;
    
    public function __construct($idTransaction = NULL)
    {
        if ( (strlen($idTransaction)  >  0) )
        {
            $this->idTransaction = $idTransaction;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT idtransaction
                  FROM miolo_transaction';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY idtransaction ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new AdmMioloTransaction($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null, $useIlike = true)
    {
        $sql = 'SELECT idtransaction,
                       m_transaction,
                       nametransaction,
                       idmodule,
                       parentm_transaction,
                       action,
                       m_transaction || \' - \' || nameTransaction
                  FROM miolo_transaction';
        $params = array();

        if ( strlen($filters->idTransaction)  >  0 )
        {
            $where.=' AND idtransaction = ?';
            $params[] = $filters->idTransaction;
        }

        if ( strlen($filters->mTransaction)  >  0 )
        {
            $where.=' AND UNACCENT(m_transaction) ILIKE UNACCENT(?) ';
            $params[] = $filters->mTransaction . ($useIlike ?  '%' : '');
        }

        if ( strlen($filters->nameTransaction)  >  0 )
        {
            $where.=' AND UNACCENT(nametransaction) ILIKE UNACCENT(?) ';
            $params[] = $filters->nameTransaction . ($useIlike ?  '%' : '');
        }

        if ( strlen($filters->idModule)  >  0 )
        {
            $where.=' AND UNACCENT(idmodule) ILIKE UNACCENT(?) ';
            $params[] = $filters->idModule . ($useIlike ?  '%' : '');
        }

        if ( strlen($filters->parentTransaction)  >  0 )
        {
            $where.=' AND UNACCENT(parentm_transaction) ILIKE UNACCENT(?) ';
            $params[] = $filters->parentTransaction . ($useIlike ?  '%' : '');
        }

        if ( strlen($filters->action)  >  0 )
        {
            $where.=' AND UNACCENT(action) ILIKE UNACCENT(?) ';
            $params[] = $filters->action . ($useIlike ?  '%' : '');
        }
        
        // Caso não usar ilike, troca por '=', pode estar procurando
        // pela m_transaction FrmCourse, por exemplo, que tem várias parecidas
        // tipo FrmCourseAbility
        if ( !$useIlike )
        {
            $where = str_replace(' ILIKE ', ' = ', $where);
        }
        
        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY idtransaction';
            
            $result = SDatabase::query(SAGU::prepare($sql, $params, $useIlike));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT idtransaction,
                       m_transaction,
                       nametransaction,
                       idmodule,
                       parentm_transaction,
                       action,
                       isDynamicReport,
                       dynamicReportType
                  FROM miolo_transaction
                 WHERE idtransaction = ?';
        $result = SDatabase::query($sql, array($this->idTransaction));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->idTransaction,
                $this->mTransaction,
                $this->nameTransaction,
                $this->idModule,
                $this->parentTransaction,
                $this->action,
                $this->isDynamicReport,
                $this->dynamicReportType) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->idTransaction)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sqlPK = "SELECT nextval('miolo_transaction_idtransaction_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
   
        $sql = 'INSERT INTO miolo_transaction
                            (idtransaction,
                             m_transaction,
                             nametransaction,
                             idmodule,
                             parentm_transaction,
                             action,
                             isDynamicReport,
                             dynamicReportType)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?)';
        
        $idTransaction = $result[0][0];
        $params = array(
            $idTransaction,
            $this->mTransaction,
            $this->nameTransaction,
            $this->idModule,
            $this->parentTransaction,
            $this->action,
            $this->isDynamicReport,
            $this->dynamicReportType);
        
        $result = SDatabase::execute($sql, $params, false);

        if ( $result )
        {
            $this->idTransaction = $idTransaction;
            
            // Insere por padrao esta permissao no grupo ADMIN
            SDatabase::execute("INSERT INTO miolo_access (idgroup, idtransaction, rights) VALUES (?, ?, ?)", array(
                SAGU::getParameter('BASIC', 'DEFAULT_GROUP_ADMIN_ID'),
                $this->idTransaction,
                A_ADMIN
            ));
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE miolo_transaction
                   SET m_transaction = ?,
                       nametransaction = ?,
                       idmodule = ?,
                       parentm_transaction = ?,
                       action = ?,
                       isDynamicReport = ?,
                       dynamicReportType = ?
                 WHERE idtransaction = ?';
        $params = array(
            $this->mTransaction,
            $this->nameTransaction,
            $this->idModule,
            $this->parentTransaction,
            $this->action,
            $this->isDynamicReport,
            $this->dynamicReportType,
            $this->idTransaction);
        return SDatabase::execute($sql, $params, false);
    }

    public function delete()
    {
        if ( strlen($this->idTransaction)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM miolo_transaction
                      WHERE idtransaction = ?';
        $params = array($this->idTransaction);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->idTransaction = null;
        }

        return $result;
    }
    
        /**
     * Obtem listagem de registros, ja ordenada e preparada para ser utilizado
     *  pelo SMainMenu.
     * 
     * Cuidado ao mudar a ordenacao, pois pode afetar o funcionamento
     *  da estrutura de menu do SAGU.
     * 
     * @param stdClass $filters
     * ->onlyWithPerms Filtra apenas transacoes que possuem permissao para o usuario atualmente logado.
     * 
     * @return array 
     */
    public static function listRecords($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $idUser = SAGU::NVL($MIOLO->getLogin()->id, 999999999);
        $where = '';
        $reportTypeContract = SReport::TYPE_CONTRACT;
        $msql = new MSQL();
        $ignoreForms = $msql->convertArrayToIn(array('FrmDiverseConsultationProtocol','FrmResidente','FrmOfertaDeUnidadeTematica','FrmDiverseConsultation', 'FrmPreceptoria', 'FrmTurmaResidencia', 'FrmPreceptoriaMed', 'FrmTurmaResidenciaMed', 'FrmResidenteMed', 'FrmOfertaDeUnidadeTematicaMed', 'FrmNfePaulistanaCancelamento, FrmAvaliacaoAluno, FrmAvaliacaoProfessor, FrmAvaliacaoCoordenador', 'FrmEditarRetroativa', 'FrmConsultarLogsDeRetProcessadosDetalhes'));
        $utilizaMultiUnidade = sMultiUnidade::estaHabilitada() ? 'true' : 'false';
        $unitIdLogged = sMultiUnidade::obterUnidadeLogada() ? sMultiUnidade::obterUnidadeLogada() : 0;
        
        // modulos
        $moduleList = array_merge(SModules::getInstalledModulesList(), array('basic', 'admin'));
        $moduleList = array_unique($moduleList);
        $installedModules = $msql->convertArrayToIn( $moduleList );
        
        // Segue com rotina do SQL de permissoes
        $childsSQL = "(SELECT COUNT(*)
                         FROM miolo_transaction MT
                        WHERE MT.parentm_transaction = A.m_transaction
                          AND A.m_transaction not in {$ignoreForms}
                          AND lower(MT.idmodule) <> 'services' )";

        if ( $filters->onlyWithPerms )
        {
            $permsSQL = "   SELECT 1
                              FROM miolo_access MA
                        INNER JOIN miolo_groupUser GU
                                ON GU.idgroup = MA.idgroup
                        INNER JOIN miolo_user MU
                                ON MU.iduser = GU.iduser
                             WHERE A.idtransaction = MA.idtransaction
                               AND MU.login = '{$idUser}'
                               AND ( CASE WHEN {$utilizaMultiUnidade} THEN GU.unitid = {$unitIdLogged} ELSE true END )
                        ";

            $where .= " AND EXISTS({$permsSQL})";
        }
        
        if ( $filters->onlyForms )
        {
            $where .= " AND A.m_transaction ILIKE 'frm%' ";
        }

        $sql = "SELECT A.idTransaction,
                       A.idmodule || '|' || A.action AS moduleAction,
                       A.nametransaction,
                       A.idmodule,
                       A.parentm_transaction,
                       A.action,
                       B.idTransaction AS fatherTransaction,
                       {$childsSQL} > 0 AS hasChilds,                
                       array_length( regexp_split_to_array(A.action, E'(:)'), 1) || (CASE WHEN {$childsSQL} > 0 THEN '0' ELSE '1' END) || A.nametransaction AS ordenador,
                       A.m_transaction AS transaction,
                       A.urlpath
                  FROM miolo_transaction A
             LEFT JOIN miolo_transaction B
                    ON A.parentm_transaction = B.m_transaction
                 WHERE a.idmodule IS NOT NULL AND a.idmodule != ''
                   AND a.action IS NOT NULL AND a.action !=''
                   AND ( A.idmodule IN {$installedModules} )
                   AND A.parentm_transaction NOT IN {$ignoreForms}
                   AND NOT ( lower(A.idmodule) = 'services' AND A.parentm_transaction <> '' ) ";
                   
                   if( $filters->showHideOptions != true )
                   {
                        //Opcoes que nao devem ser exibidas no menu
                        $sql .= " AND A.m_transaction NOT IN ( 'FrmTrainingDetails', 'FrmInscricaoExterna', 'FrmFrequencias', 'FrmCalendarioDeAulas', 'FrmTCC', 'FrmReverseInvoice', 'FrmEncontro', 'FrmCloseMultipleInvoice',  'FrmPayProtocolFee', 'FrmEncontroMed', 'FrmRegistroAlunoResmedica', 'FrmRegistroAlunoPedagogico') ";
                   }
                   
                   $sql .= " AND (
                       CASE 
                            WHEN ( A.m_transaction IN ('FrmContractGeneration') )
                                 AND ( GETPARAMETER('ACADEMIC', 'CONTRACT_FORMATION_LEVEL') = 'f' )
                            THEN
                                 1=0
                            WHEN ( ( A.m_transaction IN ('acdDocumentContract') )
                                 OR ( A.parentm_transaction = 'acdDocumentContract' ))
                                 AND ( GETPARAMETER('ACADEMIC', 'CONTRACT_FORMATION_LEVEL') = 'f' )
                                 OR ( A.dynamicReportType = {$reportTypeContract}
                                      AND GETPARAMETER('ACADEMIC', 'CONTRACT_FORMATION_LEVEL') = 't' )
                            THEN
                                 1=0
                            ELSE
                                 1=1
                       END
                   )
                       
                       
                       {$where}";

        // Obtem relatorios genericos do sagu (tabela basReport)        
        $sql .= " UNION ALL " . self::getSQLGenericReports($where, $installedModules);

        $sql .= " ORDER BY ordenador";
        
        $result = (array) SDatabase::query($sql);
        $return = array();

        foreach ( $result as $line )
        {            
            list($content['codigo'],
                 $moduleAction,
                 $content['descricao'],
                 $content['modulo'],
                 $parentTransaction,
                 $action,
                 $content['pai'],
                 $content['temFilho'],
                 $ordenador,
                 $content['transaction'],
                 $content['subpath']) = $line;            

            $moduleAction = self::adjustModuleAction($moduleAction);

            $content['temFilho'] = $content['temFilho'] == DB_TRUE || $content['transaction'] == 'acpReport' || $content['transaction'] == 'capReport';
            $content['descricao'] = _M($content['descricao'], $content['modulo']);
            
            // ignora certos casos, para nao adicionar no menu
            if ( !$content['temFilho'] && in_array($content['transaction'], array('hreReport', 'hreProcess')) )
            {
                continue;
            }
            
            $return[$moduleAction] = $content;
        }

        return $return;
    }
    
    public static function getSQLGenericReports($where, $installedModules)
    {
        $sql = "SELECT     X.reportId AS idTransaction,
                           module || '|' || a.action || ':genericReports' || '&reportid=' || X.reportid AS moduleAction,
                           '+ ' || X.name AS nametransaction,
                           module AS idmodule,
                           
                           ( SELECT m_transaction
                               FROM miolo_transaction
                              WHERE idtransaction = a.idtransaction )
                           AS parentm_transaction,
                           
                           NULL,
                           ( SELECT COALESCE( 
                                     ( SELECT idtransaction 
                                         FROM miolo_transaction 
                                        WHERE parentm_transaction = module 
                                          AND action = 'main:report' ),

                                     ( SELECT idtransaction
                                         FROM miolo_transaction
                                        WHERE parentm_transaction = module
                                          AND action = 'main:document' ) 
                           ) )
                           AS fatherTransaction,
                           NULL,
                           (array_length( regexp_split_to_array(a.action, E'(:)'), 1) + 1) || '1' || name AS ordenador,
                           'FrmGenericReports' AS transaction,
                           A.urlpath
                      FROM ( SELECT UNNEST(R.modules) AS module,
                                    R.name,
                                    R.reportId,
                                    R.enabled
                               FROM basReport R
                           ) X
                INNER JOIN miolo_transaction a
                        ON a.idtransaction = ( SELECT COALESCE( 
						       ( SELECT idtransaction 
                                                           FROM miolo_transaction 
                                                          WHERE parentm_transaction = module 
                                                            AND action = 'main:report' ),

						       ( SELECT idtransaction
							   FROM miolo_transaction
							  WHERE parentm_transaction = module
							    AND action = 'main:document' ) 
					      ) )
                     WHERE a.idmodule IS NOT NULL 
                       AND a.idmodule != ''
                       AND X.enabled = TRUE
                       AND (SELECT count(*) FROM miolo_transaction WHERE m_transaction LIKE ('%_genericReport' || X.reportid)) = 0
                       AND ( A.idmodule IN {$installedModules} )
                  {$where}";

        return $sql;
    }
    
    /**
     * Utilizado para os relatórios genéricos,
     * ajusta o módulo para se caso venha todo em maiúsculo
     * ou módulos concatenados sem separação por letras
     * maiúsculas. ex.: selectiveprocess = selectiveProcess
     * 
     * @param string $moduleAction
     * @return string 
     */
    public function adjustModuleAction( $moduleAction )
    {
        $moduleEx = explode( '|', $moduleAction );            
            
        if ( ctype_upper( $moduleEx[0] ) )
        {
            $moduleEx[0]  = strtolower( $moduleEx[0] );

            if ( $moduleEx[0] == 'selectiveprocess' )
            {
                $moduleEx[0] = 'selectiveProcess';
            }
            else if ( $moduleEx[0] == 'humanresources' )
            {
                $moduleEx[0] = 'humanResources';
            }
            
            $moduleAction = $moduleEx[0] . '|' . $moduleEx[1];
        }
        
        return $moduleAction;
    }
    
    /**
     * Lista relatorios dinamicos com id => chave unica
     * 
     * @return array
     */
    public static function listDynamicReports()
    {
        $dynamicReports = SDatabase::query("SELECT idtransaction, m_transaction FROM miolo_transaction WHERE isdynamicreport IS TRUE");
        $dynamicReportsList = array();
        
        foreach ( $dynamicReports as $row )
        {
            $dynamicReportsList[ $row[1] ] = $row[0];
        }
        
        return $dynamicReportsList;
    }
    
     public function getChoiceComponentSQL($argument = null, $id = null)
    {        
        $sql = parent::getChoiceComponentSQL($argument, $id);
                
        $args = $this->getAjaxArgs();
        
        if ( strlen($args->transactionS) > 0 )
        {
            $msql = new MSQL();
            // modulos
            $moduleList = array_merge(SModules::getInstalledModulesList(), array('basic', 'admin'));
            $moduleList = array_unique($moduleList);
            $installedModules = $msql->convertArrayToIn( $moduleList );
            
            $reportTypeContract = SReport::TYPE_CONTRACT;
            $ignoreForms = $msql->convertArrayToIn(array('FrmDiverseConsultationProtocol','FrmResidente','FrmOfertaDeUnidadeTematica','FrmDiverseConsultation', 'FrmPreceptoria', 'FrmTurmaResidencia', 'FrmPreceptoriaMed', 'FrmTurmaResidenciaMed', 'FrmResidenteMed', 'FrmOfertaDeUnidadeTematicaMed', 'FrmNfePaulistanaCancelamento, FrmAvaliacaoAluno, FrmAvaliacaoProfessor, FrmAvaliacaoCoordenador', 'FrmConsultarLogsDeRetProcessadosDetalhes'));
            $sql->setWhere("
                idmodule IS NOT NULL AND idmodule != ''
               AND action IS NOT NULL AND action !=''
               AND ( idmodule IN {$installedModules} )
               AND parentm_transaction NOT IN {$ignoreForms}
               AND NOT ( lower(idmodule) = 'services' AND parentm_transaction <> '' )
               AND m_transaction ILIKE 'frm%'
               
               AND (
                       CASE 
                            WHEN ( m_transaction IN ('FrmContractGeneration') )
                                 AND ( GETPARAMETER('ACADEMIC', 'CONTRACT_FORMATION_LEVEL') = 'f' )
                            THEN
                                 1=0
                            WHEN ( ( m_transaction IN ('acdDocumentContract') )
                                 OR ( parentm_transaction = 'acdDocumentContract' ))
                                 AND ( GETPARAMETER('ACADEMIC', 'CONTRACT_FORMATION_LEVEL') = 'f' )
                                 OR ( dynamicReportType = {$reportTypeContract}
                                      AND GETPARAMETER('ACADEMIC', 'CONTRACT_FORMATION_LEVEL') = 't' )
                            THEN
                                 1=0
                            ELSE
                                 1=1
                       END
                   )
                    ");
        }
        
        return $sql;
    }
    
    /**
     * Obtém o nome de um dada transação
     * 
     * @param String $m_transaction Transação
     * @return String Nome da transação
     */
    public static function obterNomeDaTransacao($m_transaction)
    {
        $filters = new stdClass();
        $filters->m_transaction = $m_transaction;
        
        $tipo = new AdmMioloTransaction();
        $resultadoPesquisa = $tipo->search($filters);
        
        return $resultadoPesquisa[0]->nameTransaction ? _M($resultadoPesquisa[0]->nameTransaction) : "";
        
    }
}
?>
