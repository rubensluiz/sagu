<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of AcdSemesterContractPeriod
 *
 * @author augusto
 */
class AcdSemesterContractPeriod extends SType
{
    /**
     *
     * @var int
     */
    public $semesterContractPeriodId;
    
    /**
     *
     * @var int
     */
    public $contractId;
    
    /**
     *
     * @var String
     */
    public $periodId;
    
    /**
     *
     * @var integer
     */
    public $semester;
    
    /**
     *
     * @var AcdContract
     */
    public $contrato;
    
    /**
     *
     * @var AcdPeriod
     */
    public $periodo;
    
    /**
     * Associações.
     */
    protected $_associations = array(
        'contrato' => array(
            'mode' => 'one',
            'typeClass' => 'AcdContract',
            'joinColumn' => 'contractId'
        ),
        'periodo' => array(
            'mode' => 'one',
            'typeClass' => 'AcdPeriod',
            'joinColumn' => 'periodId'
        )
    );
    
    /**
     * Método construtor da classe AcdSemesterContractPeriod.
     * 
     * @param integer $semesterContractPeriodId
     * @param integer $contractId
     * @param String $periodId
     */
    public function __construct($semesterContractPeriodId = null, $contractId = null, $periodId = null) 
    {
        $this->semesterContractPeriodId = $semesterContractPeriodId;
        $this->contractId               = $contractId;
        $this->periodId                 = $periodId;
        
        parent::__construct($semesterContractPeriodId);
    }
    
    /**
     * Retorna o semestre do contrato do aluno.
     * 
     * @return int
     */
    public function obterSemestreDoContrato()
    {
        return SAGU::NVL($this->obterSemestrePeloContratoEPeriodo(), $this->obterSemestrePeloContrato());
    }
    
    /**
     * Retorna o semestre em que o aluno se encontra no período.
     * 
     * @param integer $contractId
     * @param String $periodId
     * @return integer
     */
    public function obterSemestrePeloContratoEPeriodo()
    {
        $msql = new MSQL();
        $sql = $msql->setTables('acdSemesterContractPeriod')
                    ->setColumns('semester')
                    ->setWhereAnd('contractid = ?')
                    ->setWhereAnd('periodId = ?')
                    ->select();
        
        $result = SDatabase::query($sql, array($this->contractId, $this->periodId));
        
        return $result[0][0];
    }
    
    /**
     * Retorna o semestre em que se encontra o contrato.
     * 
     * @param int $contractId
     * @return int
     */
    public function obterSemestrePeloContrato()
    {
        $msql = new MSQL();
        $sql = $msql->setColumns('get_semester_contract(?)')
                    ->select();
        
        $result = SDatabase::query($sql, array($this->contractId));
        
        return $result[0][0];
    }
    
    /**
     * Busca por dados referentes ao semestre do contrato no período.
     * 
     * @param stdClass $filters
     * @return array
     */
    public function search()
    {
        $msql = new MSQL();
        $msql->setColumns('semesterContractPeriodId, contractId, periodId, semester')
             ->setTables('acdSemesterContractPeriod');
        
        $params = array();
        
        if ( strlen($this->semesterContractPeriodId) > 0 )
        {
            $msql->setWhereAnd('semesterContractPeriodId = ?');
            $params[] = $this->semesterContractPeriodId;
        }
        
        if ( strlen($this->contractId) > 0 )
        {
            $msql->setWhereAnd('contractId = ?');
            $params[] = $this->contractId;
        }
        
        if ( strlen($this->periodId) > 0 )
        {
            $msql->setWhereAnd('periodId = ?');
            $params[] = $this->periodId;
        }
        
        if ( strlen($this->semester) > 0 )
        {
            $msql->setWhereAnd('semester = ?');
            $params[] = $this->semester;
        }
        
        return SDatabase::query($msql->select(), $params);
    }
    
    /**
     * Atualiza o semestre do contrato no período.
     */
    public function atualizaSemestreDoContrato()
    {
        $args = new stdClass();
        $args->contractId = $this->contractId;
        $args->periodId   = $this->periodId;
        $args->semester   = $this->obterSemestrePeloContrato();

        $this->editaSemestreDoContrato($args);
    }
    
    /**
     * Edita o semestre do contrato, caso não exista semestre no período autal, insere um novo.
     * 
     * @param stdClass $data
     * @return boolean
     */
    public function editaSemestreDoContrato($data)
    {
        $this->periodId   = $this->obterPeriodoDoContrato($data);        
        $this->contractId = $data->contractId;
        
        $semesterContractPeriod = $this->search();
        
        if ( count($semesterContractPeriod) > 0 )
        {
            $this->semesterContractPeriodId = $semesterContractPeriod[0][0];
            $this->semester = $data->semester;
            $this->save();
        }
        else
        {
            $this->insereSemestreDoContrato($data);
        }
    }
    
    /**
     * Insere o semestre em que o contrato se encontra no período.
     * 
     * @param stdClass $data
     * @return boolean
     */
    public function insereSemestreDoContrato($data)
    {
        $this->contractId = $data->contractId;
        $this->periodId   = $this->obterPeriodoDoContrato($data);
        $this->semester   = $data->semester;
        
        return $this->save();
    }
    
    /**
     * Valida e obtém o período do contrato. 
     * Se não vier um período por parâmetro retorna o período corrente.
     * 
     * @param stdClass $data{periodId}
     * @return String
     */
    public function obterPeriodoDoContrato($data, $maxSemester = false)
    {
        $periodId = (strlen($data->periodId) > 0) ? $data->periodId : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID');
        
        if ( $maxSemester )
        {
            $msql = new MSQL();
            $sql = $msql->setColumns('periodid')
                        ->setTables('acdSemesterContractPeriod')
                        ->setWhere('contractId = ?')
                        ->setOrderBy('semester DESC')
                        ->setLimit(1)
                        ->select();
            
            $result = SDatabase::query($sql, array($data->contractId));
            $periodId = $result[0][0];
        }
        
        return $periodId;
    }
}

?>
