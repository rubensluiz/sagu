<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Name [name@solis.coop.br]
 *
 * \b Maintainers: \n
 * Name [name@solis.coop.br]
 *
 * @since
 * Class created on 16/01/2012
 *
 */
class AcdEnrollConfig extends SType
{
    // Pre matricula
    const PREMATRICULA_CALOURO = 'C';
    const PREMATRICULA_VETERANO = 'V';
    const PREMATRICULA_AMBOS = 'A';
    const PREMATRICULA_NENHUM = 'N';
    
    const INADIMPLENTES_CANCELADOS = DB_TRUE;
    const INADIMPLENTES_CLASSIFICADOS = DB_FALSE;
    
    const CALCULO_COEFICIENTE_1 = 0;
    
    // Pendências gnuteca
    const SEM_BLOQUEIO = 'S';
    const SOMENTE_AVISO = 'A';
    const BLOQUEIO = 'B';
    
    /**
     * @AttributeType integer
     * 
     */
    public $enrollConfigId;
    /**
     * @AttributeType character varying
     * 
     */
    public $courseId;
    /**
     * @AttributeType integer
     * 
     */
    public $courseVersion;
    /**
     * @AttributeType integer
     * 
     */
    public $turnId;
    /**
     * @AttributeType integer
     * 
     */
    public $unitId;
    /**
     * @AttributeType boolean
     * 
     */
    public $freeInCourseConditions;
    /**
     * @AttributeType integer
     * 
     */
    public $timeToCourseDisapproved;
    /**
     * @AttributeType boolean
     * 
     */
    public $showElectives;
    /**
     * @AttributeType boolean
     * 
     */
    public $showOptionals;
    /**
     * @AttributeType boolean
     * 
     */
    public $blockDebt;
    /**
     * @AttributeType boolean
     * 
     */
    public $sendConfirmationEmail;
    /**
     * @AttributeType integer
     * 
     */
    public $confirmationEmailId;
    /**
     * @AttributeType boolean
     * 
     */
    public $showOtherCoursesGroups;
    /**
     * @AttributeType boolean
     * 
     */
    public $showOtherUnitsGroups;
    /**
     * @AttributeType boolean
     * 
     */
    public $showOtherTurnsGroups;
    /**
     * @AttributeType boolean
     * 
     */
    public $showSpecialRegimenGroups;
    /**
     * @AttributeType boolean
     * 
     */
    public $showOtherClassesGroups;
    /**
     * @AttributeType boolean
     * 
     */
    public $freeOtherPeriodGroups;
    /**
     * @AttributeType integer
     * 
     */
    public $disapprovementsToBlock;
    /**
     * @AttributeType boolean
     * 
     */
    public $mayChooseGroups;
    /**
     * @AttributeType boolean
     * 
     */
    public $checkScheduleShock;
    /**
     * @AttributeType boolean
     * 
     */
    public $blockDocsMissing;
    /**
     * @AttributeType boolean
     * 
     */
    public $blockRequirementMissing;
    /**
     * @AttributeType boolean
     * 
     */
    public $showOtherGroupsField;
    /**
     * @AttributeType boolean
     * 
     */
    public $scheduleDisplayMode;
    /**
     * @AttributeType integer
     * 
     */
    public $disapprovementsToBlockTimeToCourseDisapproved;
    /**
     * @AttributeType boolean
     * 
     */
    public $showElectivesExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $showOptionalsExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $showoOtherCoursesGroupsExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $showoOtherUnitsGroupsExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $showOtherTurnsGroupsExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $showOtherClassesGroupsExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $freeOtherPeriodGroupsExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $checkScheduleShockExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $blockDocsMissingExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $blockDebtExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $checkDebitsExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $scheduleDisplayModeExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $sendConfirmationEmailExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $minimumAndMaxLimitCreditsBlockEnroll;
    /**
     * @AttributeType integer
     * 
     */
    public $minimumCreditsTurnCourse;
    /**
     * @AttributeType integer
     * 
     */
    public $maxCreditsTurnCourse;
    /**
     * @AttributeType integer
     * 
     */
    public $minimumCreditsOtherTurn;
    /**
     * @AttributeType integer
     * 
     */
    public $maxCreditsOtherTurn;
    /**
     * @AttributeType boolean
     * 
     */
    public $enableSelectCurricularComponentPending;
    /**
     * @AttributeType boolean
     * 
     */
    public $enableSelectCurricularComponentOfFuturePeriods;
    /**
     * @AttributeType boolean
     * 
     */
    public $enableEnrollWeb;
    /**
     * @AttributeType boolean
     * 
     */
    public $minimumAndMaxLimitCreditsBlockEnrollExternal;
    /**
     * @AttributeType integer
     * 
     */
    public $minimumCreditsTurnCourseExternal;
    /**
     * @AttributeType integer
     * 
     */
    public $maxCreditsTurnCourseExternal;
    /**
     * @AttributeType integer
     * 
     */
    public $minimumCreditsOtherTurnCourseExternal;
    /**
     * @AttributeType integer
     * 
     */
    public $maxCreditsOtherTurnCourseExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $enableSelectCurricularComponentOfFuturePeriodsExternal;
    /**
     * @AttributeType boolean
     * 
     */
    public $enableSelectCurricularComponentPendingExternal;
    /**
     * @AttributeType text
     * 
     */
    public $configurableMessageStep1;
    /**
     * @AttributeType text
     * 
     */
    public $configurableMessageStep2;
    /**
     * @AttributeType text
     * 
     */
    public $configurableMessageStep3;
    /**
     * @AttributeType boolean
     * 
     */
    public $avaliableContract;
    /**
     * @AttributeType boolean
     * 
     */
    public $avaliableAddendum;
    /**
     * @AttributeType boolean
     * 
     */
    public $avaliableEnrollConfirmation;
    /**
     * @AttributeType boolean
     * 
     */
    public $checkDebits;
     /**
     * @AttributeType date
     * 
     */
    public $beginDate;
    /**
     * @AttributeType date
     * 
     */
    public $endDate;
    
    /**
     * Atributo de filtro no searchGrid()
     *
     * @var string
     */
    public $vigente;
    
    /**
     * Boolean (t/f)
     * 
     * @var string
     */
    public $enablePreEnroll;
    
    /**
     * Boolean (t/f)
     * 
     * @var string
     */
    public $preEnrollConsumeVacant;
    
    /**
     * Ver constantes PREMATRICULA_*
     * 
     * @var string
     */
    public $preEnrollCheckSignature;
    
    /**
     * Ver constantes PREMATRICULA_*
     * 
     * @var string
     */
    public $preEnrollCheckFirstPayment;
    
    /**
     * Ver constantes PREMATRICULA_*
     * 
     * @var string
     */
    public $preEnrollWebConfirmation;
    
    /**
     * @var Char
     */
    public $ativaPreMatriculaPara;
    
    /**
     *
     * @var Char 
     */
    public $pendenciasGnuteca;
    
    /**
     *
     * @var boolean 
     */
    public $bloqueioEmprestimos;
    
    /**
     *
     * @var boolean
     */
    public $bloqueioMultas;
    
    /**
     *
     * @var boolean
     */
    public $bloqueioPenalidades;
    
    /**
     *
     * @var String
     */
    public $bloqueioMensagem;
    
    /**
     *
     * @var Int
     */
    public $diasPrazoConfirmacao;
    
    /**
     *
     * @var Int
     */
    public $cancelamentoStateContractId;
    
    /**
     *
     * @var Int
     */
    public $cancelamentoReasonId;
    
    /**
     *
     * @var type Boolean
     */
    public $preMatriculaCancelamentoDeInadimplentesNaClassificacao = DB_FALSE;

    /**
     *
     * @var type Char
     */
    public $preMatriculaChecaClassificacao;
    
    /**
     *
     * @var type Int
     */
    public $preMatriculaTipoDeCalculoDoCoeficiente;
    
    /**
     * 
     * @param type INT REFERENCES basemail(emailid)
     */
    public $emailDeConfirmacaoId;
    
    /**
     * 
     * @param type BOOLEAN
     */
    public $habilitaEmailDeConfirmacao = DB_FALSE; 
    
    /**
     * Atributos de máscaras.
     * 
     * @param string
     */
    public $mascDisciplina;
    public $mascOferta;
    public $mascOutrasOfertas;
    
    /**
     * Bloquear matrícula para alunos que não selecionarem todas as matrículas de um semestre do currículo.
     * @var type 
     */
    public $bloqueiaMatriculaWebSemestreCheio;
    
    const BLOQUEAR_SEMESTRE_CHEIO_CALOURO = 'C';
    const BLOQUEAR_SEMESTRE_CHEIO_VETERANO = 'V';
    const BLOQUEAR_SEMESTRE_CHEIO_AMBOS = 'A';
    const BLOQUEAR_SEMESTRE_CHEIO_NENHUM = 'N';
    
    
    public function __construct($enrollConfigId = NULL)
    {
        if ( (strlen($enrollConfigId)  >  0) )
        {
            $this->enrollConfigId = $enrollConfigId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT enrollconfigid
                  FROM acdEnrollConfig';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY enrollconfigid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new AcdEnrollConfig($result[$i][0]);
        }

        return $retVal;
    }
    
    /**
     * Obtem a configuracao de matricula vigente.
     * Certifique-se de que o retorno seja instancia de AcdEnrollConfig, pois pode nao existir.
     * 
     * @return AcdEnrollConfig
     */
    public static function obterVigente($courseId = null, $courseVersion = null, $turnId = null, $unitId = null, $resultToObject = false)
    {
        $row = null;
        $rows = array();
        
        if ( SAGU::allIsFilled($courseId, $courseVersion, $turnId, $unitId) )
        {
            $filters = new stdClass();
            $filters->courseId = $courseId;
            $filters->courseVersion = $courseVersion;
            $filters->turnId = $turnId;
            $filters->unitId = $unitId;
            $filters->vigente = true;

            $rows = AcdEnrollConfig::searchGrid($filters);
        }
        
        if ( count($rows) > 0 )
        {
            $row = new AcdEnrollConfig($rows[0][0]);
        }
        else
        {
            $filters = new stdClass();
            $filters->vigente = true;

            $rows = AcdEnrollConfig::searchGrid($filters);
            
            if ( count($rows) > 0 )
            {
                $row = new AcdEnrollConfig($rows[0][0]);
            }
        }
        
        //Transformar em objeto (para poder salvar na sessão sem problemas)
        if ( $resultToObject )
        {
            $rowAux = new stdClass();
            
            //Obter colunas da tabela e transformar
            foreach ( $row->getTableColumns() as $coluna => $descarte )
            {
                $rowAux->$coluna = $row->$coluna;
            }
            
            $row = $rowAux;
        }
                
        return $row;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = "SELECT A.enrollconfigid,
                       to_char(A.beginDate,getParameter('BASIC','MASK_DATE')),
                       to_char(A.endDate,getParameter('BASIC','MASK_DATE')),
                       coalesce(A.courseid,'Configuração padrão para todas ocorrências de curso'),
                       B.name,
                       A.courseversion,
                       C.description,
                       D.description
                  FROM acdEnrollConfig A 
                    left join acdcourse B on (A.courseid=B.courseid)
                    left join basturn C on (A.turnid=C.turnid)
                    left join basunit D on (A.unitid=D.unitid)";
        
        $params = array();
        
        if ( strlen($filters->enrollConfigId)  >  0 )
        {
            $where.=' AND A.enrollconfigid = ?';
            $params[] = $filters->enrollConfigId;
        }

        if ( strlen($filters->courseId)  >  0 )
        {
            $sqlCourse = " SELECT count(*) FROM acdEnrollConfig WHERE courseid = '{$filters->courseId}' ";
            $resultCourse = SDatabase::query($sqlCourse);
            
            if ( $resultCourse[0][0] == 0 )
            {
                unset($filters->courseId, $filters->courseVersion, $filters->turnId, $filters->unitId);
                
                // Forçando verificação de NULO
                $where .= " AND A.courseId IS NULL
                            AND A.courseVersion IS NULL
                            AND A.turnId IS NULL
                            AND A.unitId IS NULL ";
            }
            else
            {
                $where.=' AND UNACCENT(A.courseid) ILIKE UNACCENT(?) ';
                $params[] = $filters->courseId.'%';
            }
        }

        if ( strlen($filters->courseVersion)  >  0 )
        {
            $where.=' AND A.courseversion = ?';
            $params[] = $filters->courseVersion;
        }

        if ( strlen($filters->turnId)  >  0 )
        {
            $where.=' AND A.turnid = ?';
            $params[] = $filters->turnId;
        }

        if ( strlen($filters->unitId)  >  0 )
        {
            $where.=' AND A.unitid = ?';
            $params[] = $filters->unitId;
        }
        
        $between = false;
        if ( ( strlen($filters->beginDate)  >  0 ) && ( !isset($filters->endDate) ) )
        {
            $where.=' AND datetodb(?) BETWEEN A.beginDate AND A.endDate';
            $params[] = $filters->beginDate;
            
            if ( $filters->vigente == 'geral' )
            {
                $where.=' AND A.courseId IS NULL';
            }
            else if ( $filters->vigente == 'ambos' )
            {
                $where.= ' OR ( A.endDate IS NULL AND datetodb(?) >= A.beginDate )';
                $params[] = $filters->beginDate;
            }
            
            $between = true;
        }
        
        if ( ( strlen($filters->beginDate)  >  0 ) && ( !$between ) )
        {
            $where.=' AND A.begindate > TO_DATE(?, \'yyyy-mm-dd\')';
            $params[] = $filters->beginDate;
        }
        
        if ( strlen($filters->endDate) > 0 )
        {
            $where.=' AND A.enddate < TO_DATE(?, \'yyyy-mm-dd\')';
            $params[] = $filters->enddate;
        }
        
        if ( strlen($filters->vigente) > 0 )
        {
            if ( $filters->vigente == 'ambos' )
            {
                if ( $filters->formularioDeBusca == true )
                {
                    $where .= ' AND 1=1 ';    
                }
                else
                {
                    $where .= ' AND ( ( NOW()::DATE >= A.begindate and NOW()::DATE <= ( CASE WHEN A.enddate is not null 
                                                                                        THEN A.enddate 
                                                                                        ELSE NOW()::DATE 
                                                                                    END ) ) OR 
                                    ( A.beginDate IS NULL AND A.endDate IS NULL ) )';
                }
            }
            else if ( ( $filters->vigente == 'geral' ) && ( !$between ) )
            {
                $where.=' AND A.courseId IS NULL';
            }
            else
            {
                $where.=' AND A.courseId IS NOT NULL';
            }
            
            if ( !SAGU::allIsFilled($filters->courseId, $filters->courseVersion, $filters->turnId, $filters->unitId) )
            {
                // Forçando verificação de NULO
                $where .= " AND A.courseId IS NULL
                            AND A.courseVersion IS NULL
                            AND A.turnId IS NULL
                            AND A.unitId IS NULL ";
            }
        }
        
        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY enrollconfigid';

            if ( count($params) > 0 )
            {
                $result = SDatabase::query(SAGU::prepare($sql, $params));
            }
            else
            {
                $result = SDatabase::query($sql);
            }
        }
        
        return $result;
    }

    public function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       enrollconfigid,
                       courseid,
                       courseversion,
                       turnid,
                       unitid,
                       freeincourseconditions,
                       timetocoursedisapproved,
                       showelectives,
                       showoptionals,
                       blockdebt,
                       sendconfirmationemail,
                       confirmationemailid,
                       showothercoursesgroups,
                       showotherunitsgroups,
                       showotherturnsgroups,
                       showspecialregimengroups,
                       showotherclassesgroups,
                       freeotherperiodgroups,
                       disapprovementstoblock,
                       maychoosegroups,
                       checkscheduleshock,
                       blockdocsmissing,
                       blockrequirementmissing,
                       showothergroupsfield,
                       scheduledisplaymode,
                       disapprovementstoblocktimetocoursedisapproved,
                       showelectivesexternal,
                       showoptionalsexternal,
                       showoothercoursesgroupsexternal,
                       showootherunitsgroupsexternal,
                       showotherturnsgroupsexternal,
                       showotherclassesgroupsexternal,
                       freeotherperiodgroupsexternal,
                       checkscheduleshockexternal,
                       blockdocsmissingexternal,
                       blockdebtexternal,
                       checkdebitsexternal,
                       scheduledisplaymodeexternal,
                       sendconfirmationemailexternal,
                       minimumandmaxlimitcreditsblockenroll,
                       minimumcreditsturncourse,
                       maxcreditsturncourse,
                       minimumcreditsotherturn,
                       maxcreditsotherturn,
                       enableselectcurricularcomponentpending,
                       enableselectcurricularcomponentoffutureperiods,
                       enableenrollweb,
                       minimumandmaxlimitcreditsblockenrollexternal,
                       minimumcreditsturncourseexternal,
                       maxcreditsturncourseexternal,
                       minimumcreditsotherturncourseexternal,
                       maxcreditsotherturncourseexternal,
                       enableselectcurricularcomponentoffutureperiodsexternal,
                       enableselectcurricularcomponentpendingexternal,
                       configurablemessagestep1,
                       configurablemessagestep2,
                       configurablemessagestep3,
                       avaliablecontract,
                       avaliableaddendum,
                       avaliableenrollconfirmation,
                       checkdebits,
                       to_char(beginDate,getParameter(\'BASIC\',\'MASK_DATE\')),
                       to_char(endDate,getParameter(\'BASIC\',\'MASK_DATE\')),
                       enablePreEnroll,
                       preEnrollConsumeVacant,
                       preEnrollCheckSignature,
                       preEnrollCheckFirstPayment,
                       preEnrollWebConfirmation,
                       ativaPreMatriculaPara,
                       pendenciasGnuteca,
                       bloqueioEmprestimos,
                       bloqueioMultas,
                       bloqueioPenalidades,
                       bloqueioMensagem,
                       diasPrazoConfirmacao,
                       cancelamentoStateContractId,
                       cancelamentoReasonId,
                       preMatriculaChecaClassificacao,
                       preMatriculaCancelamentoDeInadimplentesNaClassificacao,
                       preMatriculaTipoDeCalculoDoCoeficiente,
                       habilitaEmailDeConfirmacao,
                       emailDeConfirmacaoId,
                       bloqueiaMatriculaWebSemestreCheio,
                       mascDisciplina,
                       mascOferta,
                       mascOutrasOfertas
                  FROM acdEnrollConfig
                 WHERE enrollconfigid = ?';
        
        $result = SDatabase::query($sql, array($this->enrollConfigId));
                
        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list(
            $this->userName,
            $this->dateTime,
            $this->ipAddress,
            $this->enrollConfigId,
            $this->courseId,
            $this->courseVersion,
            $this->turnId,
            $this->unitId,
            $this->freeInCourseConditions,
            $this->timeToCourseDisapproved,
            $this->showElectives,
            $this->showOptionals,
            $this->blockDebt,
            $this->sendConfirmationEmail,
            $this->confirmationEmailId,
            $this->showOtherCoursesGroups,
            $this->showOtherUnitsGroups,
            $this->showOtherTurnsGroups,
            $this->showSpecialRegimenGroups,
            $this->showOtherClassesGroups,
            $this->freeOtherPeriodGroups,
            $this->disapprovementsToBlock,
            $this->mayChooseGroups,
            $this->checkScheduleShock,
            $this->blockDocsMissing,
            $this->blockRequirementMissing,
            $this->showOtherGroupsField,
            $this->scheduleDisplayMode,
            $this->disapprovementsToBlockTimeToCourseDisapproved,
            $this->showElectivesExternal,
            $this->showOptionalsExternal,
            $this->showoOtherCoursesGroupsExternal,
            $this->showoOtherUnitsGroupsExternal,
            $this->showOtherTurnsGroupsExternal,
            $this->showOtherClassesGroupsExternal,
            $this->freeOtherPeriodGroupsExternal,
            $this->checkScheduleShockExternal,
            $this->blockDocsMissingExternal,
            $this->blockDebtExternal,
            $this->checkDebitsExternal,
            $this->scheduleDisplayModeExternal,
            $this->sendConfirmationEmailExternal,
            $this->minimumAndMaxLimitCreditsBlockEnroll,
            $this->minimumCreditsTurnCourse,
            $this->maxCreditsTurnCourse,
            $this->minimumCreditsOtherTurn,
            $this->maxCreditsOtherTurn,
            $this->enableSelectCurricularComponentPending,
            $this->enableSelectCurricularComponentOfFuturePeriods,
            $this->enableEnrollWeb,
            $this->minimumAndMaxLimitCreditsBlockEnrollExternal,
            $this->minimumCreditsTurnCourseExternal,
            $this->maxCreditsTurnCourseExternal,
            $this->minimumCreditsOtherTurnCourseExternal,
            $this->maxCreditsOtherTurnCourseExternal,
            $this->enableSelectCurricularComponentOfFuturePeriodsExternal,
            $this->enableSelectCurricularComponentPendingExternal,
            $this->configurableMessageStep1,
            $this->configurableMessageStep2,
            $this->configurableMessageStep3,
            $this->avaliableContract,
            $this->avaliableAddendum,
            $this->avaliableEnrollConfirmation,
            $this->checkDebits,
            $this->beginDate,
            $this->endDate,
            $this->enablePreEnroll,
            $this->preEnrollConsumeVacant,
            $this->preEnrollCheckSignature,
            $this->preEnrollCheckFirstPayment,
            $this->preEnrollWebConfirmation,
            $this->ativaPreMatriculaPara,
            $this->pendenciasGnuteca,
            $this->bloqueioEmprestimos,
            $this->bloqueioMultas,    
            $this->bloqueioPenalidades,
            $this->bloqueioMensagem,
            $this->diasPrazoConfirmacao,
            $this->cancelamentoStateContractId,
            $this->cancelamentoReasonId,
            $this->preMatriculaChecaClassificacao,
            $this->preMatriculaCancelamentoDeInadimplentesNaClassificacao,
            $this->preMatriculaTipoDeCalculoDoCoeficiente,
            $this->habilitaEmailDeConfirmacao,
            $this->emailDeConfirmacaoId,
            $this->bloqueiaMatriculaWebSemestreCheio,
            $this->mascDisciplina,
            $this->mascOferta,
            $this->mascOutrasOfertas
        ) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->enrollConfigId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    public function insert()
    {
        $sql = 'INSERT INTO acdenrollconfig 
                            ( enrollconfigid, 
                              courseid, 
                              courseversion, 
                              turnid, 
                              unitid, 
                              freeincourseconditions, 
                              timetocoursedisapproved, 
                              showelectives, 
                              showoptionals, 
                              blockdebt, 
                              sendconfirmationemail, 
                              confirmationemailid, 
                              showothercoursesgroups, 
                              showotherunitsgroups, 
                              showotherturnsgroups, 
                              showspecialregimengroups, 
                              showotherclassesgroups, 
                              freeotherperiodgroups, 
                              disapprovementstoblock, 
                              maychoosegroups, 
                              checkscheduleshock, 
                              blockdocsmissing, 
                              blockrequirementmissing, 
                              showothergroupsfield, 
                              scheduledisplaymode, 
                              disapprovementstoblocktimetocoursedisapproved, 
                              showelectivesexternal, 
                              showoptionalsexternal, 
                              showoothercoursesgroupsexternal, 
                              showootherunitsgroupsexternal, 
                              showotherturnsgroupsexternal, 
                              showotherclassesgroupsexternal, 
                              freeotherperiodgroupsexternal, 
                              checkscheduleshockexternal, 
                              blockdocsmissingexternal, 
                              blockdebtexternal, 
                              checkdebitsexternal, 
                              scheduledisplaymodeexternal, 
                              sendconfirmationemailexternal, 
                              minimumandmaxlimitcreditsblockenroll, 
                              minimumcreditsturncourse, 
                              maxcreditsturncourse, 
                              minimumcreditsotherturn, 
                              maxcreditsotherturn,
                              enableselectcurricularcomponentpending,
                              enableselectcurricularcomponentoffutureperiods, 
                              enableenrollweb, 
                              minimumandmaxlimitcreditsblockenrollexternal, 
                              minimumcreditsturncourseexternal, 
                              maxcreditsturncourseexternal, 
                              minimumcreditsotherturncourseexternal, 
                              maxcreditsotherturncourseexternal, 
                              enableselectcurricularcomponentoffutureperiodsexternal, 
                              enableselectcurricularcomponentpendingexternal, 
                              configurablemessagestep1, 
                              configurablemessagestep2,
                              configurablemessagestep3, 
                              avaliablecontract, avaliableaddendum,
                              avaliableenrollconfirmation, 
                              checkdebits, 
                              beginDate, 
                              endDate,
                              enablePreEnroll,
                              preEnrollConsumeVacant,
                              preEnrollCheckSignature,
                              preEnrollCheckFirstPayment,
                              preEnrollWebConfirmation,
                              ativaPreMatriculaPara,
                              pendenciasGnuteca,
                              bloqueioEmprestimos,
                              bloqueioMultas,
                              bloqueioPenalidades,
                              bloqueioMensagem,
                              diasPrazoConfirmacao,
                              cancelamentoStateContractId,
                              cancelamentoReasonId,
                              preMatriculaChecaClassificacao,
                              preMatriculaCancelamentoDeInadimplentesNaClassificacao,
                              preMatriculaTipoDeCalculoDoCoeficiente,
                              habilitaEmailDeConfirmacao,
                              emailDeConfirmacaoId,
                              bloqueiaMatriculaWebSemestreCheio,
                              mascDisciplina,
                              mascOferta,
                              mascOutrasOfertas
                              )
                     VALUES ( ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?,
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?,
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?, 
                              ?,
                              ?,
                              to_date(?,getParameter(\'BASIC\',\'MASK_DATE\')), 
                              to_date(?,getParameter(\'BASIC\',\'MASK_DATE\')),
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?)';
        $sqlPK = "SELECT nextval('seq_enrollconfigid'::regclass)";
        $result = SDatabase::query($sqlPK);
        $enrollConfigId = $result[0][0];
        
        $params = array( 
            $enrollConfigId, 
            $this->courseId, 
            $this->courseVersion, 
            $this->turnId, 
            $this->unitId, 
            $this->freeInCourseConditions, 
            $this->timeToCourseDisapproved, 
            $this->showElectives, 
            $this->showOptionals, 
            $this->blockDebt, 
            $this->sendConfirmationEmail, 
            $this->confirmationEmailId, 
            $this->showOtherCoursesGroups, 
            $this->showOtherUnitsGroups, 
            $this->showOtherTurnsGroups, 
            $this->showSpecialRegimenGroups, 
            $this->showOtherClassesGroups, 
            $this->freeOtherPeriodGroups, 
            $this->disapprovementsToBlock, 
            $this->mayChooseGroups, 
            $this->checkScheduleShock, 
            $this->blockDocsMissing, 
            $this->blockRequirementMissing, 
            $this->showOtherGroupsField, 
            $this->scheduleDisplayMode, 
            $this->disapprovementsToBlockTimeToCourseDisapproved, 
            $this->showElectivesExternal, 
            $this->showOptionalsExternal, 
            $this->showoOtherCoursesGroupsExternal, 
            $this->showoOtherUnitsGroupsExternal, 
            $this->showOtherTurnsGroupsExternal, 
            $this->showOtherClassesGroupsExternal, 
            $this->freeOtherPeriodGroupsExternal, 
            $this->checkScheduleShockExternal, 
            $this->blockDocsMissingExternal, 
            $this->blockDebtExternal, 
            $this->checkDebitsExternal, 
            $this->scheduleDisplayModeExternal, 
            $this->sendConfirmationEmailExternal, 
            $this->minimumAndMaxLimitCreditsBlockEnroll, 
            $this->minimumCreditsTurnCourse, 
            $this->maxCreditsTurnCourse, 
            $this->minimumCreditsOtherTurn, 
            $this->maxCreditsOtherTurn, 
            $this->enableSelectCurricularComponentPending, 
            $this->enableSelectCurricularComponentOfFuturePeriods, 
            $this->enableEnrollWeb, 
            $this->minimumAndMaxLimitCreditsBlockEnrollExternal, 
            $this->minimumCreditsTurnCourseExternal, 
            $this->maxCreditsTurnCourseExternal, 
            $this->minimumCreditsOtherTurnCourseExternal, 
            $this->maxCreditsOtherTurnCourseExternal, 
            $this->enableSelectCurricularComponentOfFuturePeriodsExternal, 
            $this->enableSelectCurricularComponentPendingExternal, 
            $this->configurableMessageStep1, 
            $this->configurableMessageStep2, 
            $this->configurableMessageStep3, 
            $this->avaliableContract, 
            $this->avaliableAddendum, 
            $this->avaliableEnrollConfirmation, 
            $this->checkDebits, 
            $this->beginDate, 
            $this->endDate,
            $this->enablePreEnroll,
            $this->preEnrollConsumeVacant,
            $this->preEnrollCheckSignature,
            $this->preEnrollCheckFirstPayment,
            $this->preEnrollWebConfirmation,
            $this->ativaPreMatriculaPara,
            $this->pendenciasGnuteca,
            $this->bloqueioEmprestimos,
            $this->bloqueioMultas,    
            $this->bloqueioPenalidades,
            $this->bloqueioMensagem,
            $this->diasPrazoConfirmacao,
            $this->cancelamentoStateContractId,
            $this->cancelamentoReasonId,
            $this->preMatriculaChecaClassificacao,
            $this->preMatriculaCancelamentoDeInadimplentesNaClassificacao,
            $this->preMatriculaTipoDeCalculoDoCoeficiente,
            $this->habilitaEmailDeConfirmacao,
            $this->emailDeConfirmacaoId,
            $this->bloqueiaMatriculaWebSemestreCheio,
            $this->mascDisciplina,
            $this->mascOferta,
            $this->mascOutrasOfertas
        );
                
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->enrollConfigId = $enrollConfigId;
        }

        return $result;
    }

    public function update()
    {
        $sql = 'UPDATE acdenrollconfig
                   SET 
                       courseid = ?,
                       courseversion = ?,
                       turnid = ?,
                       unitid = ?,
                       freeincourseconditions = ?,
                       timetocoursedisapproved = ?,
                       showelectives = ?,
                       showoptionals = ?,
                       blockdebt = ?,
                       sendconfirmationemail = ?,
                       confirmationemailid = ?,
                       showothercoursesgroups = ?,
                       showotherunitsgroups = ?,
                       showotherturnsgroups = ?,
                       showspecialregimengroups = ?,
                       showotherclassesgroups = ?,
                       freeotherperiodgroups = ?,
                       disapprovementstoblock = ?,
                       maychoosegroups = ?,
                       checkscheduleshock = ?,
                       blockdocsmissing = ?,
                       blockrequirementmissing = ?,
                       showothergroupsfield = ?,
                       scheduledisplaymode = ?,
                       disapprovementstoblocktimetocoursedisapproved = ?,
                       showelectivesexternal = ?,
                       showoptionalsexternal = ?,
                       showoothercoursesgroupsexternal = ?,
                       showootherunitsgroupsexternal = ?,
                       showotherturnsgroupsexternal = ?,
                       showotherclassesgroupsexternal = ?,
                       freeotherperiodgroupsexternal = ?,
                       checkscheduleshockexternal = ?,
                       blockdocsmissingexternal = ?,
                       blockdebtexternal = ?,
                       checkdebitsexternal = ?,
                       scheduledisplaymodeexternal = ?,
                       sendconfirmationemailexternal = ?,
                       minimumandmaxlimitcreditsblockenroll = ?,
                       minimumcreditsturncourse = ?,
                       maxcreditsturncourse = ?,
                       minimumcreditsotherturn = ?,
                       maxcreditsotherturn = ?,
                       enableselectcurricularcomponentpending = ?,
                       enableselectcurricularcomponentoffutureperiods = ?,
                       enableenrollweb = ?,
                       minimumandmaxlimitcreditsblockenrollexternal = ?,
                       minimumcreditsturncourseexternal = ?,
                       maxcreditsturncourseexternal = ?,
                       minimumcreditsotherturncourseexternal = ?,
                       maxcreditsotherturncourseexternal = ?,
                       enableselectcurricularcomponentoffutureperiodsexternal = ?,
                       enableselectcurricularcomponentpendingexternal = ?,
                       configurablemessagestep1 = ?,
                       configurablemessagestep2 = ?,
                       configurablemessagestep3 = ?,
                       avaliablecontract = ?,
                       avaliableaddendum = ?,
                       avaliableenrollconfirmation = ?,
                       checkdebits = ?,
                       begindate = to_date(?,getParameter(\'BASIC\',\'MASK_DATE\')),
                       enddate = to_date(?,getParameter(\'BASIC\',\'MASK_DATE\')),
                       enablePreEnroll = ?,
                       preEnrollConsumeVacant = ?,
                       preEnrollCheckSignature = ?,
                       preEnrollCheckFirstPayment = ?,
                       preEnrollWebConfirmation = ?,
                       ativaPreMatriculaPara = ?,
                       pendenciasGnuteca = ?,
                       bloqueioEmprestimos = ?,
                       bloqueioMultas = ?,
                       bloqueioPenalidades = ?,
                       bloqueioMensagem = ?,
                       diasPrazoConfirmacao = ?,
                       cancelamentoStateContractId = ?,
                       cancelamentoReasonId = ?,
                       preMatriculaChecaClassificacao = ?,
                       preMatriculaCancelamentoDeInadimplentesNaClassificacao = ?,
                       preMatriculaTipoDeCalculoDoCoeficiente = ?,
                       habilitaEmailDeConfirmacao = ?,
                       emailDeConfirmacaoId = ?,
                       bloqueiaMatriculaWebSemestreCheio = ?,
                       mascDisciplina = ?,
                       mascOferta = ?,
                       mascOutrasOfertas = ?
                 WHERE enrollconfigid = ?';
        
        $params = array(
            $this->courseId,
            $this->courseVersion,
            $this->turnId,
            $this->unitId,
            $this->freeInCourseConditions,
            $this->timeToCourseDisapproved,
            $this->showElectives,
            $this->showOptionals,
            $this->blockDebt,
            $this->sendConfirmationEmail,
            $this->confirmationEmailId,
            $this->showOtherCoursesGroups,
            $this->showOtherUnitsGroups,
            $this->showOtherTurnsGroups,
            $this->showSpecialRegimenGroups,
            $this->showOtherClassesGroups,
            $this->freeOtherPeriodGroups,
            $this->disapprovementsToBlock,
            $this->mayChooseGroups,
            $this->checkScheduleShock,
            $this->blockDocsMissing,
            $this->blockRequirementMissing,
            $this->showOtherGroupsField,
            $this->scheduleDisplayMode,
            $this->disapprovementsToBlockTimeToCourseDisapproved,
            $this->showElectivesExternal,
            $this->showOptionalsExternal,
            $this->showoOtherCoursesGroupsExternal,
            $this->showoOtherUnitsGroupsExternal,
            $this->showOtherTurnsGroupsExternal,
            $this->showOtherClassesGroupsExternal,
            $this->freeOtherPeriodGroupsExternal,
            $this->checkScheduleShockExternal,
            $this->blockDocsMissingExternal,
            $this->blockDebtExternal,
            $this->checkDebitsExternal,
            $this->scheduleDisplayModeExternal,
            $this->sendConfirmationEmailExternal,
            $this->minimumAndMaxLimitCreditsBlockEnroll,
            $this->minimumCreditsTurnCourse,
            $this->maxCreditsTurnCourse,
            $this->minimumCreditsOtherTurn,
            $this->maxCreditsOtherTurn,
            $this->enableSelectCurricularComponentPending,
            $this->enableSelectCurricularComponentOfFuturePeriods,
            $this->enableEnrollWeb,
            $this->minimumAndMaxLimitCreditsBlockEnrollExternal,
            $this->minimumCreditsTurnCourseExternal,
            $this->maxCreditsTurnCourseExternal,
            $this->minimumCreditsOtherTurnCourseExternal,
            $this->maxCreditsOtherTurnCourseExternal,
            $this->enableSelectCurricularComponentOfFuturePeriodsExternal,
            $this->enableSelectCurricularComponentPendingExternal,
            $this->configurableMessageStep1,
            $this->configurableMessageStep2,
            $this->configurableMessageStep3,
            $this->avaliableContract,
            $this->avaliableAddendum,
            $this->avaliableEnrollConfirmation,
            $this->checkDebits,
            $this->beginDate,
            $this->endDate,
            $this->enablePreEnroll,
            $this->preEnrollConsumeVacant,
            $this->preEnrollCheckSignature,
            $this->preEnrollCheckFirstPayment,
            $this->preEnrollWebConfirmation,
            $this->ativaPreMatriculaPara,
            $this->pendenciasGnuteca,
            $this->bloqueioEmprestimos,
            $this->bloqueioMultas,    
            $this->bloqueioPenalidades,
            $this->bloqueioMensagem,
            $this->diasPrazoConfirmacao,
            $this->cancelamentoStateContractId,
            $this->cancelamentoReasonId,  
            $this->preMatriculaChecaClassificacao,
            $this->preMatriculaCancelamentoDeInadimplentesNaClassificacao,
            $this->preMatriculaTipoDeCalculoDoCoeficiente,
            $this->habilitaEmailDeConfirmacao,
            $this->emailDeConfirmacaoId,
            $this->bloqueiaMatriculaWebSemestreCheio,
            $this->mascDisciplina,
            $this->mascOferta,
            $this->mascOutrasOfertas,
            
            $this->enrollConfigId, // table pkey
        );
            
        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->enrollConfigId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM acdenrollconfig
                      WHERE enrollconfigid = ?';
        $params = array($this->enrollConfigId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->enrollConfigId = null;
        }

        return $result;
    }
    
    /**
     * @return array
     */
    public static function getPreEnrollOptions($optsTo=null)
    {
        $module = SAGU::getFileModule(__FILE__);
        
        if ( is_null($optsTo) || $optsTo == self::PREMATRICULA_AMBOS )
        {
            $options = array(
                self::PREMATRICULA_CALOURO => _M('Calouro', $module),
                self::PREMATRICULA_VETERANO => _M('Veterano', $module),
                self::PREMATRICULA_AMBOS => _M('Ambos', $module),
                self::PREMATRICULA_NENHUM => _M('Nenhum', $module),
            );
        }
        else
        {
            if ( $optsTo == self::PREMATRICULA_VETERANO )
            {
                $options = array(
                    self::PREMATRICULA_VETERANO => _M('Veterano', $module),
                    self::PREMATRICULA_NENHUM => _M('Nenhum', $module),
                );
            }
            else if ( $optsTo == self::PREMATRICULA_CALOURO )
            {
                $options = array(
                    self::PREMATRICULA_CALOURO => _M('Calouro', $module),
                    self::PREMATRICULA_NENHUM => _M('Nenhum', $module),
                );
            }
        }        
        
        return $options;
    }
    
    /**
     * @return boolean
     */
    public function preMatriculaAtivada()
    {
        return $this->enablePreEnroll == DB_TRUE;
    }
    
    /**
     * @return boolean
     */
    public function preMatriculaConsomeVaga()
    {
        return $this->preEnrollConsumeVacant == DB_TRUE;
    }
    
    /**
     * Retorna o codigo inicial do estado contratual da matricula.
     * 
     * @return int 
     */
    public function obterCodInicialEstadoContratual()
    {
        $cod = null;

        if ( $this->preMatriculaAtivada() )
        {
            $cod = SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_PRE_ENROLL');
        }
        else
        {
            $cod = SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED');
        }
        
        return $cod;
    }
    
    /**
     * Quando configuracao de pre matricula estiver como "consumir vaga", o codigo inicial do aluno na disciplina deve ser MATRICULADO (modo normal).
     * Quando estiver como "nao consumir vaga", deve definir um estado anterior, de "pré matriculado".
     * 
     * @return int
     */
    public function obterCodInicialEstadoMatricula($contractId, $learningPeriodId, $getStateContractId = false)
    {
        $cod = null;
        
        if ( $this->preMatriculaAtivada() && !sPreMatricula::verificaConfirmacaoDeMatricula($contractId, $learningPeriodId) )
        {
            if ( $this->preMatriculaConsomeVaga() )
            {
                $cod = ($getStateContractId) ? SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_PRE_ENROLL') : SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED');
            }
            else if ( sPreMatricula::verificaIncentivo($contractId, null, $learningPeriodId) )
            {                
                $cod = ($getStateContractId) ? SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED') : SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED');
            }
            else
            {
                $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
                $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);
                
                $busContract = new BusinessAcademicBusContract();
                $isFreshMan = $busContract->isFreshmanByPeriod($contractId, $learningPeriodData->periodId);
                    
                if ( $this->ativaPreMatriculaPara == self::PREMATRICULA_AMBOS )
                {
                    $cod = ($getStateContractId) ? SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_PRE_ENROLL') : SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED');
                }
                else if ( $this->ativaPreMatriculaPara == self::PREMATRICULA_CALOURO )
                {
                    if ( $isFreshMan )
                    {
                        $cod = ($getStateContractId) ? SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_PRE_ENROLL') : SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED');
                    }
                    else
                    {
                        $cod = ($getStateContractId) ? SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED') : SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED');
                    }                    
                }
                else 
                {
                    if ( $isFreshMan )
                    {
                        $cod = ($getStateContractId) ? SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED') : SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED');
                    }
                    else
                    {
                        $cod = ($getStateContractId) ? SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_PRE_ENROLL') : SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED');
                    }
                }
            }
        }
        else
        {
            $cod = ($getStateContractId) ? SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED') : SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED');
        }
        
        return $cod;
    }
    
    /**
     * Verifica se matricula deve contar como vaga preenchida na disciplina (acdgroup.totalenrolled).
     * 
     * OBS: Cuidar com a logica que é feita, retorna TRUE quando:
     *  - A pre-matricula estiver desativada.
     *  - A pre-matricula estiver ativada E parametro de consumir vaga estiver habilitado.
     * 
     * Utilizado na trigger settotalenrolled().
     * 
     * @return boolean
     */
    public function matriculaDeveConsumirVaga()
    {
        return !$this->preMatriculaAtivada() || ( $this->preMatriculaAtivada() && $this->preMatriculaConsomeVaga() );
    }
    
    public function getCourseName()
    {
        $busCourse = new BusinessAcademicBusCourse();
        return $busCourse->getCourse($this->courseId)->name;
    }
    
    public function getTurnDescription()
    {
        $business = new BusinessBasicBusTurn();
        return $business->getTurn($this->turnId)->description;
    }
    
    public function getUnitDescription()
    {
        $business = new BusinessBasicBusUnit();
        return $business->getUnit($this->unitId)->description;
    }
}
?>