<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Augusto [augusto@solis.coop.br]
 *
 * \b Maintainers: \n
 * Augusto [augusto@solis.coop.br]
 *
 * @since
 * Class created on 01/08/2012
 *
 */
class AcdReconhecimentoDeCurso extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $reconhecimentoDeCursoId;
    /**
     * @AttributeType character varying
     * 
     */
    protected $courseId;
    /**
     *
     * @var int
     */
    protected $courseVersion;
    /**
     *
     * @var int 
     */
    protected $turnId;
    /**
     *
     * @var int
     */
    protected $unitId;
    /**
     * @AttributeType text
     * NÃºmero do documento de reconhecimento
     */
    protected $documentoReconhecimento;
    /**
     * @AttributeType date
     * Data do reconhecimento
     */
    protected $dataReconhecimento;
    /*
     * @AttributeType date
     *  Data de início da vigência do documento
     */
    protected $dataInicialdeVigencia;
    /*
     * @AttributeType date
     * Data final da vigência do documento
     */
    protected $dataFinaldeVigencia;
    
    public function __construct($reconhecimentoDeCursoId = NULL)
    {
        if ( (strlen($reconhecimentoDeCursoId)  >  0) )
        {
            $this->reconhecimentoDeCursoId = $reconhecimentoDeCursoId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT reconhecimentodecursoid
                  FROM acdreconhecimentodecurso';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY reconhecimentodecursoid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new AcdReconhecimentoDeCurso($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters, $returnAsObject = false)
    {
        $sql = 'SELECT courseId,
                       reconhecimentoDeCursoId,
                       TO_CHAR(datareconhecimento, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       documentoreconhecimento,
                       TO_CHAR(datainicial, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(datafinal, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                  FROM acdreconhecimentodecurso';
        $params = array();
        
        $cols[] = 'courseId';
        $cols[] = 'reconhecimentoDeCursoId';
        $cols[] = 'recognitionDate';
        $cols[] = 'recognitionDocumentNumber';
        $cols[] = 'recognitionDateInitial';
        $cols[] = 'recognitionDateFinal';

        if ( strlen($filters->reconhecimentoDeCursoId)  >  0 )
        {
            $where.=' AND reconhecimentodecursoid = ?';
            $params[] = $filters->reconhecimentoDeCursoId;
        }

        if ( strlen($filters->courseId)  >  0 )
        {
            $where.=' AND UNACCENT(courseid) ILIKE UNACCENT(?) ';
            $params[] = $filters->courseId.'%';
        }

        if ( strlen($filters->documentoReconhecimento)  >  0 )
        {
            $where.=' AND UNACCENT(documentoreconhecimento) ILIKE UNACCENT(?) ';
            $params[] = $filters->documentoReconhecimento.'%';
        }

        if ( strlen($filters->dataReconhecimento)  >  0 )
        {
            $where.=' AND datareconhecimento = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->dataReconhecimento;
        }
        
        if ( strlen($filters->dataInicialdeVigencia)  >  0 )
        {
            $where.=' AND datainicial = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->dataInicialdeVigencia;
        }
        
        if ( strlen($filters->dataFinaldeVigencia)  >  0 )
        {
            $where.=' AND datafinal = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->dataFinaldeVigencia;
        }
        
        if ( strlen($filters->courseVersion)  >  0 )
        {
            $where.=' AND courseVersion = ?';
            $params[] = $filters->courseVersion;
        }
        
        if ( strlen($filters->turnId)  >  0 )
        {
            $where.=' AND turnId = ?';
            $params[] = $filters->turnId;
        }
        
        if ( strlen($filters->unitId)  >  0 )
        {
            $where.=' AND unitId = ?';
            $params[] = $filters->unitId;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY reconhecimentodecursoid';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $returnAsObject ? SAGU::resultToObject($result, $cols) : $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       reconhecimentodecursoid,
                       courseid,
                       documentoreconhecimento,
                       TO_CHAR(datareconhecimento, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(datainicial, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(datafinal, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       courseVersion,
                       turnId,
                       unitId
                  FROM acdreconhecimentodecurso
                 WHERE reconhecimentodecursoid = ?';
        $result = SDatabase::query($sql, array($this->reconhecimentoDeCursoId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->userName, 
              $this->datetTime, 
              $this->ipAddress, 
              $this->reconhecimentoDeCursoId, 
              $this->courseId, 
              $this->documentoReconhecimento, 
              $this->dataReconhecimento, 
              $this->dataInicialdeVigencia, 
              $this->dataFinaldeVigencia,
              $this->courseVersion,
              $this->turnId,
              $this->unitId ) = $result[0];
    }

    public function save()
    {        
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->reconhecimentoDeCursoId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO acdreconhecimentodecurso( courseid, 
                                                      documentoreconhecimento, 
                                                      datareconhecimento,
                                                      datainicial,
                                                      datafinal,
                                                      courseVersion,
                                                      turnId,
                                                      unitId )
                                              VALUES( ?, 
                                                      ?, 
                                                      TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                                                      TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                                                      TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                                                      ?,
                                                      ?,
                                                      ? )';
        
        $sqlPK = "SELECT nextval( 'acdreconhecimentodecurso_reconhecimentodecursoid_seq'::regclass )";
        $result = SDatabase::query($sqlPK);
        
        $reconhecimentoDeCursoId = $result[0][0];
        
        $params = array(  
            $this->courseId, 
            $this->documentoReconhecimento, 
            $this->dataReconhecimento,
            $this->dataInicialdeVigencia,
            $this->dataFinaldeVigencia,
            $this->courseVersion,
            $this->turnId,
            $this->unitId
        );
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->reconhecimentoDeCursoId = $reconhecimentoDeCursoId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE acdreconhecimentodecurso
                   SET courseid = ?,
                       documentoreconhecimento = ?,
                       datareconhecimento = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       datainicial = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       datafinal = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       courseVersion = ?,
                       turnId = ?,
                       unitId = ?
                 WHERE reconhecimentodecursoid = ?';
        
        $params = array(
            $this->courseId, 
            $this->documentoReconhecimento, 
            $this->dataReconhecimento,
            $this->dataInicialdeVigencia,
            $this->dataFinaldeVigencia,
            $this->courseVersion,
            $this->turnId,
            $this->unitId,
            $this->reconhecimentoDeCursoId
        );
        
        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->reconhecimentoDeCursoId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM acdreconhecimentodecurso
                      WHERE reconhecimentodecursoid = ?';
        $params = array($this->reconhecimentoDeCursoId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->reconhecimentoDeCursoId = null;
        }

        return $result;
    }
}


?> 