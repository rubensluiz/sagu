<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Detalhe de status de matrícula
 *
 * @author Equipe SOLIS [sagu@solis.coop.br]
 *
 * \b Maintainers: \n
 * Equipe SOLIS [sagu@solis.coop.br]
 *
 * @since
 * Class created on 02/04/2012
 *
 */
class AcdDetailedEnrollStatus extends SType
{
    /**
     * @var integer
     */
    protected $detailEnrollStatusId;
    
    /**
     * @var string
     */
    protected $shortDescription;
    
    /**
     * @var string
     */
    protected $description;
    
    /**
     * @var string
     */
    protected $parentStatus;
    
    public function __construct($detailEnrollStatusId = NULL)
    {
        if ( (strlen($detailEnrollStatusId)  >  0) )
        {
            $this->detailEnrollStatusId = $detailEnrollStatusId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT detailEnrollStatusId
                  FROM acdDetailEnrollStatus';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY description ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new AcdDetailedEnrollStatus($result[$i][0]);
        }

        return $retVal;
    }


    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql =  'SELECT username,
                        TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                        ipaddress,
                        detailEnrollStatusId,
                        shortDescription,  
                        description,
                        parentStatus,
                        defaultstatus,
                        isexam
                  FROM acdDetailEnrollStatus
                 WHERE detailEnrollStatusId = ?';
        $result = SDatabase::query($sql, array($this->detailEnrollStatusId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente. (@1)', $module, __CLASS__));
        }

        list(   $this->userName,
                $this->dateTime,
                $this->ipAddress,
                $this->detailEnrollStatusId,
                $this->shortDescription,  
                $this->description,
                $this->parentStatus,
                $this->defaultstatus,
                $this->isexam) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->detailEnrollStatusId) == 0 )
        {
            $retVal = $this->insert();
        }
        else if ( $this->removeData )
        {
            $retVal = $this->delete();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sqlPK = "SELECT nextval('acddetailenrollstatus_detailenrollstatusid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $pkey = $result[0][0];
        
        $sql = 'INSERT INTO acdDetailEnrollStatus 
                            (detailEnrollStatusId,
                             shortDescription,  
                             description,
                             parentStatus,
                             defaultstatus,
                             isexam)
                     VALUES (?, ?, ?, ?, ?, ?)';

        $args = array($pkey,
                      $this->shortDescription,
                      $this->description,
                      $this->parentStatus,
                      $this->defaultstatus,
                      $this->isexam);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->detailEnrollStatusId = $pkey;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE acdDetailEnrollStatus
                   SET shortDescription = ?,
                       description = ?,
                       parentStatus = ?,
                       defaultstatus = ?,
                       isexam = ?
                 WHERE detailEnrollStatusId = ?';
        
        $args = array($this->shortDescription,
                      $this->description,
                      $this->parentStatus,
                      $this->defaultstatus,                      
                      $this->isexam,
                      $this->detailEnrollStatusId);
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->detailEnrollStatusId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM acdDetailEnrollStatus
                      WHERE detailEnrollStatusId = ?';
        $args = array($this->detailEnrollStatusId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->detailEnrollStatusId = null;
        }

        return $result;
    }
    
    /**
     * Obtem listagem de registros
     *
     * @return array
     */
    public static function listRecords($filters = null)
    {
        $list = array();
        $args = array();
        
        $sql = "SELECT detailenrollstatusid,
                       shortdescription || ' - ' || description
                  FROM acddetailenrollstatus
                 WHERE 1=1";

        if ( strlen($filters->parentStatus) > 0 )
        {
            $sql .= ' AND parentStatus = ? ';
            $args[] = $filters->parentStatus;
        }
        
        $query = SDatabase::query($sql, $args);
        
        if ( isset($query) )
        {
            foreach ( $query as $row )
            {
                $list[ $row[0] ] = $row[1];
            }
        }
        
        return $list;
    }
    
    /**
     *
     * @return array
     */
    public static function list4ComboBox()
    {
        $sql = "SELECT shortdescription,
                       description
                  FROM acddetailenrollstatus
                 WHERE 1=1";
        
        $query = SDatabase::query($sql);
        
        return SAGU::convertListToAssociative($query);
    }
    
    /**
     *
     * @return array
     */
    public static function listRecordsIndexed()
    {
        $sql = "SELECT shortdescription,
                       parentstatus
                  FROM acddetailenrollstatus
                 WHERE 1=1";
        
        $query = SDatabase::query($sql);
        
        return SAGU::convertListToAssociative($query);
    }
    
    /**
     *
     * @return array
     */
    public static function listDetailedEnrollStatus()
    {
        $sql = "SELECT shortdescription,
                       detailenrollstatusid
                  FROM acddetailenrollstatus
                 WHERE 1=1";
        
        $query = SDatabase::query($sql);
        
        return SAGU::convertListToAssociative($query);
    }
}
?>