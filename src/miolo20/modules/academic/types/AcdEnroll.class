<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * \b Maintainers: \n
 * Jonas Guilherme Dahmer [jonas@solis.coop.br]
 * Luís Felipe Wermann[luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 13/04/2012
 *
 */
class AcdEnroll extends SType
{
    /**
     * @AttributeType integer
     * Codigo da matricula
     */
    protected $enrollId;
    /**
     * @AttributeType integer
     * Codigo do contrato
     */
    protected $contractId;
    /**
     * @AttributeType integer
     * Codigo da turma
     */
    protected $groupId;
    /**
     * @AttributeType integer
     * Codigo da disciplina do curriculo
     */
    protected $curriculumId;
    /**
     * @AttributeType date
     * Data da matricula
     */
    protected $dateEnroll;
    /**
     * @AttributeType time without time zone
     * Hora da matricula
     */
    protected $hourEnroll;
    /**
     * @AttributeType date
     * Data de cancelamento
     */
    protected $dateCancellation;
    /**
     * @AttributeType time without time zone
     * Hora de cancelamento
     */
    protected $hourCancellation;
    /**
     * @AttributeType integer
     * Motivo do cancelamento da matricula
     */
    protected $reasonCancellationId;
    /**
     * @AttributeType double precision
     * Nota - media dos graus
     */
    protected $note;
    /**
     * @AttributeType double precision
     * Nota do exame
     */
    protected $examNote;
    /**
     * @AttributeType double precision
     * Nota final
     */
    protected $finalNote;
    /**
     * @AttributeType text
     * Conceito
     */
    protected $concept;
    /**
     * @AttributeType text
     * Parecer - Texto de AvaliaÃ§Ã£o
     */
    protected $textEvaluation;
    /**
     * @AttributeType double precision
     * Total de frequÃªncia do aluno nesta disciplina atÃ© o momento (em horas).
     */
    protected $frequency;
    /**
     * @AttributeType text
     * Aproveitamento
     */
    protected $obsExploitation;
    /**
     * @AttributeType integer
     * Instituicao da disciplina aproveitada
     */
    protected $exploitationInstitutionId;
    /**
     * @AttributeType double precision
     * Carga horaria aproveitada
     */
    protected $numberHourExploitation;
    /**
     * @AttributeType double precision
     * Creditos aproveitados
     */
    protected $creditsExploitation;
    /**
     * @AttributeType boolean
     * Aparece no documento final do curso
     */
    protected $isShowDocumentEndCourse;
    /**
     * @AttributeType integer
     * Estado atual nesta disciplina: Matriculado, dispensado, reprovado, aprovado ou desistente
     */
    protected $statusId;
    /**
     * @AttributeType character
     * Email de alerta de frequencia: 0 - NÃ£o teve aviso; 1 - Teve um aviso (alerta) que estÃ¡ chegando no limite de faltas; 2 - Aviso de limite de faltas
     */
    protected $frequencyAlertEmail;
    /**
     * @AttributeType boolean
     * Matricula feita pela internet (true)
     */
    protected $isInternet;
    /**
     * @AttributeType inet
     * Ip da maquina que o aluno fez a matricula - pode ser diferente do ip da baslog pois aquele Ã© sempre o ultimo.
     */
    protected $ip;
    /**
     * @AttributeType boolean
     * ConfirmaÃ§Ã£o de Matricula
     */
    protected $isConfirm;
    /**
     * @AttributeType boolean
     * Marcar as disciplinas que foram desbloqueadas como true
     */
    protected $isSetFree;
    /**
     * @AttributeType text
     * Complemento da disciplina oferecida. Ã‰ o foco da disciplina no semestre.
     */
    protected $complement;
    /**
     * @AttributeType character
     * Flag de aproveitamos I (In) = Interno ou E (external) = Externo
     */
    protected $exploitationType;
    /**
     * @AttributeType text
     * campo para futuramente ser substituido pelo protocolId. receberÃ¡ as observaÃ§Ãµes de provas especiais etc
     */
    protected $process;
    /**
     * @AttributeType boolean
     * Indica se o registro atual eh (TRUE) ou nao (FALSE) um aproveitamento, isto eh, possui registros na acdExploitation.
     */
    protected $isExploitation;
    /**
     * @AttributeType integer
     * Informa o periodo letivo ao qual o aproveitamento pertence. Nos registros que nao forem aproveitamento, este campo eh nulo.
     */
    protected $learningPeriodId;
    /**
     * @AttributeType character varying
     * 
     */
    protected $subClassId;
    /**
     * @AttributeType text
     * Tema do exame final (TCC), utilizado no Detalhamento do TCC
     */
    protected $finalExaminationTheme;
    
    /**
     * Atributo que indica de onde foi originado a matrícula
     * @var char (1)  
     */
    protected $originEnroll;
    
    public $detailEnrollStatusDescription;
    
    public $detailEnrollStatusShortDescription;
    
    /**
     *
     * @var int
     */
    public $detailEnrollStatusId;
    
    /**
     * Flag interna utilizada no sistema.
     * 
     * @var string
     */
    public $preEnrollConsumeVacant;
    
    /**
     * Data de apresentação para a banca examinadora TCC
     * 
     * @param date
     */
    public $examiningBoard;
    
    
    const MATRICULA_SISTEMA = 'S';
    const MATRICULA_WEB = 'W';
    const MATRICULA_EM_LOTE = 'L';
    
    public function __construct($enrollId = NULL)
    {
        $this->isShowDocumentEndCourse = DB_FALSE;
        $this->isInternet = DB_FALSE;
        $this->isConfirm = DB_FALSE;
        $this->isSetFree = DB_FALSE;
        $this->isExploitation = DB_FALSE;
        
        if ( (strlen($enrollId)  >  0) )
        {
            $this->enrollId = $enrollId;
            $this->populate();
        }
        
        /*
        public $isShowDocumentEndCourse = DB_FALSE;
        public $isInternet = DB_FALSE;
        public $isConfirm = DB_FALSE;
        public $isSetFree = DB_FALSE;
        public $isExploitation = DB_FALSE;
         * 
         */
        
    }

    public static function search($filters)
    {
        $sql = 'SELECT enrollId
                  FROM unit_acdEnroll';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY enrollId ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new Acdenroll($result[$i][0]);
        }

        return $retVal;
    }
    
    public static function searchPreEnrollCurricularComponents($filters = null, $moreContent = false)
    {
        
        if ( $moreContent )
        {
            $sql = "SELECT E.enrollId,
                    D.learningPeriodId,
                    D.disciplinacod,
                    D.disciplina,
                    D.profresponsavel,
                    (SELECT horario FROM rpthorariodias WHERE groupId = E.groupId LIMIT 1) AS horario,
                    '-' AS sala,
                    D.cargahoraria || ' - ' || D.creditos,
                    obternotaouconceitofinal(E.enrollID) AS nota,
                    E.frequency || '%',
                    ES.description AS estado,
                    (SELECT name FROM getcontractcurrentclass(E.contractId) LIMIT 1) AS turma
               FROM acdEnroll E
         INNER JOIN acdEnrollStatus ES ON ES.statusId = E.statusId
         INNER JOIN rptDisciplina D ON ( D.groupId = E.groupId AND D.curriculumid = E.curriculumid )";
            
        }
        else
        {
            $sql = "SELECT E.enrollId,
                        (SELECT horario FROM rpthorariodias WHERE groupId = E.groupId LIMIT 1) AS horario,
                        '-' AS sala,
                        obternotaouconceitofinal(E.enrollID) AS nota,
                        E.frequency || '%',
                        ES.description AS estado,
                        (SELECT name FROM getcontractcurrentclass(E.contractId) LIMIT 1) AS turma
                   FROM acdEnroll E
                INNER JOIN acdEnrollStatus ES 
                        ON ES.statusId = E.statusId
                INNER JOIN acdGroup D 
                        ON D.groupId = E.groupId";
        }
        
        $params = array();
        $where .= " AND E.statusId = GETPARAMETER('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED')::int ";

        if ( strlen($filters->learningPeriodId) > 0 )
        {
            // Necessário que compare somente o código do período e não do período letivo, pois as disciplinas podem estar sendo aproveitadas e não serão retornadas.
            $where.=' AND ( ( SELECT periodId
                                FROM acdLearningPeriod
                               WHERE learningPeriodId = ? ) = ( SELECT periodid
                                                                  FROM acdLearningPeriod
                                                                 WHERE learningPeriodId = D.learningPeriodId ) ) ';
            $params[] = $filters->learningPeriodId;
        }
        
        if ( strlen($filters->contractId)  >  0 )
        {
            $where.=' AND E.contractId = ?';
            $params[] = $filters->contractId;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY E.enrollId';
            
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT enrollId,
                       contractId,
                       groupId,
                       curriculumId,
                       TO_CHAR(dateEnroll, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       hourEnroll,
                       TO_CHAR(dateCancellation, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       hourCancellation,
                       reasonCancellationId,
                       note,
                       examNote,
                       finalNote,
                       concept,
                       textEvaluation,
                       frequency,
                       obsExploitation,
                       exploitationInstitutionId,
                       numberHourExploitation,
                       creditsExploitation,
                       isShowDocumentEndCourse,
                       statusId,
                       frequencyAlertEmail,
                       isInternet,
                       ip,
                       isConfirm,
                       isSetFree,
                       complement,
                       exploitationType,
                       process,
                       isExploitation,
                       learningPeriodId,
                       subClassId,
                       finalExaminationTheme
                  FROM unit_acdEnroll';
        $params = array();

        if ( strlen($filters->enrollId)  >  0 )
        {
            $where.=' AND enrollId = ?';
            $params[] = $filters->enrollId;
        }

        if ( strlen($filters->contractId)  >  0 )
        {
            $where.=' AND contractId = ?';
            $params[] = $filters->contractId;
        }

        if ( strlen($filters->groupId)  >  0 )
        {
            $where.=' AND groupId = ?';
            $params[] = $filters->groupId;
        }

        if ( strlen($filters->curriculumId)  >  0 )
        {
            $where.=' AND curriculumId = ?';
            $params[] = $filters->curriculumId;
        }

        if ( strlen($filters->dateEnroll)  >  0 )
        {
            $where.=' AND dateEnroll = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->dateEnroll;
        }

        if ( strlen($filters->hourEnroll)  >  0 )
        {
            $where.=' AND hourEnroll = ?';
            $params[] = $filters->hourEnroll;
        }

        if ( strlen($filters->dateCancellation)  >  0 )
        {
            $where.=' AND dateCancellation = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->dateCancellation;
        }

        if ( strlen($filters->hourCancellation)  >  0 )
        {
            $where.=' AND hourCancellation = ?';
            $params[] = $filters->hourCancellation;
        }

        if ( strlen($filters->reasonCancellationId)  >  0 )
        {
            $where.=' AND reasonCancellationId = ?';
            $params[] = $filters->reasonCancellationId;
        }

        if ( strlen($filters->note)  >  0 )
        {
            $where.=' AND note = ?';
            $params[] = $filters->note;
        }

        if ( strlen($filters->examNote)  >  0 )
        {
            $where.=' AND examNote = ?';
            $params[] = $filters->examNote;
        }

        if ( strlen($filters->finalNote)  >  0 )
        {
            $where.=' AND finalNote = ?';
            $params[] = $filters->finalNote;
        }

        if ( strlen($filters->concept)  >  0 )
        {
            $where.=' AND UNACCENT(concept) ILIKE UNACCENT(?) ';
            $params[] = $filters->concept.'%';
        }

        if ( strlen($filters->textEvaluation)  >  0 )
        {
            $where.=' AND UNACCENT(textEvaluation) ILIKE UNACCENT(?) ';
            $params[] = $filters->textEvaluation.'%';
        }

        if ( strlen($filters->frequency)  >  0 )
        {
            $where.=' AND frequency = ?';
            $params[] = $filters->frequency;
        }

        if ( strlen($filters->obsExploitation)  >  0 )
        {
            $where.=' AND UNACCENT(obsExploitation) ILIKE UNACCENT(?) ';
            $params[] = $filters->obsExploitation.'%';
        }

        if ( strlen($filters->exploitationInstitutionId)  >  0 )
        {
            $where.=' AND exploitationInstitutionId = ?';
            $params[] = $filters->exploitationInstitutionId;
        }

        if ( strlen($filters->numberHourExploitation)  >  0 )
        {
            $where.=' AND numberHourExploitation = ?';
            $params[] = $filters->numberHourExploitation;
        }

        if ( strlen($filters->creditsExploitation)  >  0 )
        {
            $where.=' AND creditsExploitation = ?';
            $params[] = $filters->creditsExploitation;
        }

        if ( strlen($filters->isShowDocumentEndCourse)  >  0 )
        {
            $where.=' AND isShowDocumentEndCourse = ?';
            $params[] = $filters->isShowDocumentEndCourse;
        }

        if ( strlen($filters->statusId)  >  0 )
        {
            $where.=' AND statusId = ?';
            $params[] = $filters->statusId;
        }

        if ( strlen($filters->frequencyAlertEmail)  >  0 )
        {
            $where.=' AND frequencyAlertEmail = ?';
            $params[] = $filters->frequencyAlertEmail;
        }

        if ( strlen($filters->isInternet)  >  0 )
        {
            $where.=' AND isInternet = ?';
            $params[] = $filters->isInternet;
        }

        if ( strlen($filters->ip)  >  0 )
        {
            $where.=' AND ip = ?';
            $params[] = $filters->ip;
        }

        if ( strlen($filters->isConfirm)  >  0 )
        {
            $where.=' AND isConfirm = ?';
            $params[] = $filters->isConfirm;
        }

        if ( strlen($filters->isSetFree)  >  0 )
        {
            $where.=' AND isSetFree = ?';
            $params[] = $filters->isSetFree;
        }

        if ( strlen($filters->complement)  >  0 )
        {
            $where.=' AND UNACCENT(complement) ILIKE UNACCENT(?) ';
            $params[] = $filters->complement.'%';
        }

        if ( strlen($filters->exploitationType)  >  0 )
        {
            $where.=' AND exploitationType = ?';
            $params[] = $filters->exploitationType;
        }

        if ( strlen($filters->process)  >  0 )
        {
            $where.=' AND UNACCENT(process) ILIKE UNACCENT(?) ';
            $params[] = $filters->process.'%';
        }

        if ( strlen($filters->isExploitation)  >  0 )
        {
            $where.=' AND isExploitation = ?';
            $params[] = $filters->isExploitation;
        }

        if ( strlen($filters->learningPeriodId)  >  0 )
        {
            $where.=' AND learningPeriodId = ?';
            $params[] = $filters->learningPeriodId;
        }

        if ( strlen($filters->subClassId)  >  0 )
        {
            $where.=' AND UNACCENT(subClassId) ILIKE UNACCENT(?) ';
            $params[] = $filters->subClassId.'%';
        }

        if ( strlen($filters->finalExaminationTheme)  >  0 )
        {
            $where.=' AND UNACCENT(finalExaminationTheme) ILIKE UNACCENT(?) ';
            $params[] = $filters->finalExaminationTheme.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY enrollId';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       enrollId,
                       contractId,
                       groupId,
                       curriculumId,
                       TO_CHAR(dateEnroll, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       hourEnroll,
                       TO_CHAR(dateCancellation, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       hourCancellation,
                       reasonCancellationId,
                       note,
                       examNote,
                       finalNote,
                       concept,
                       textEvaluation,
                       frequency,
                       obsExploitation,
                       exploitationInstitutionId,
                       numberHourExploitation,
                       creditsExploitation,
                       isShowDocumentEndCourse,
                       statusId,
                       frequencyAlertEmail,
                       isInternet,
                       ip,
                       isConfirm,
                       isSetFree,
                       complement,
                       exploitationType,
                       process,
                       isExploitation,
                       learningPeriodId,
                       subClassId,
                       finalExaminationTheme
                  FROM unit_acdEnroll
                 WHERE enrollId = ?';
        $result = SDatabase::query($sql, array($this->enrollId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->username, $this->datetime, $this->ipaddress, $this->enrollId, $this->contractId, $this->groupId, $this->curriculumId, $this->dateEnroll, $this->hourEnroll, $this->dateCancellation, $this->hourCancellation, $this->reasonCancellationId, $this->note, $this->examNote, $this->finalNote, $this->concept, $this->textEvaluation, $this->frequency, $this->obsExploitation, $this->exploitationInstitutionId, $this->numberHourExploitation, $this->creditsExploitation, $this->isShowDocumentEndCourse, $this->statusId, $this->frequencyAlertEmail, $this->isInternet, $this->ip, $this->isConfirm, $this->isSetFree, $this->complement, $this->exploitationType, $this->process, $this->isExploitation, $this->learningPeriodId, $this->subClassId, $this->finalExaminationTheme) = $result[0];
    }

    /**
     * Salva matrícula.
     * 
     * @param array $groups
     * @param char $tipoDeMatricula
     * @param boolean $disableEnrollCheck - Desabilita checagens ao matricular.
     * @return type
     * @throws Exception
     */
    public function save($groups, $tipoDeMatricula = null, $disableEnrollCheck = false)
    {
        $busEnroll = new BusinessAcademicBusEnroll();
        $busEnroll->setTipoDeMatriculaAtual($tipoDeMatricula);
        
        try
        {
            $data = $busEnroll->enroll($this->contractId, $this->learningPeriodId, $groups, $disableEnrollCheck, false, false, false, false, false, $this->originEnroll);
        }
        catch ( Exception $e )
        {
            throw $e;
        }
        
        return $data;
    }

    private function insert()
    {
        $sql = 'INSERT INTO acdenroll 
                            (enrollId, contractId, groupId, curriculumId, dateEnroll, hourEnroll, dateCancellation, hourCancellation, reasonCancellationId, note, examNote, finalNote, concept, textEvaluation, frequency, obsExploitation, exploitationInstitutionId, numberHourExploitation, creditsExploitation, isShowDocumentEndCourse, statusId, frequencyAlertEmail, isInternet, ip, isConfirm, isSetFree, complement, exploitationType, process, isExploitation, learningPeriodId, subClassId, finalExaminationTheme)
                     VALUES (?, ?, ?, ?, TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), ?, TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
        $sqlPK = "SELECT nextval('seq_enrollId'::regclass)";
        $result = SDatabase::query($sqlPK);
        $enrollId = $result[0][0];
        $params = array($enrollId, $this->contractId, $this->groupId, $this->curriculumId, $this->dateEnroll, $this->hourEnroll, $this->dateCancellation, $this->hourCancellation, $this->reasonCancellationId, $this->note, $this->examNote, $this->finalNote, $this->concept, $this->textEvaluation, $this->frequency, $this->obsExploitation, $this->exploitationInstitutionId, $this->numberHourExploitation, $this->creditsExploitation, $this->isShowDocumentEndCourse, $this->statusId, $this->frequencyAlertEmail, $this->isInternet, $this->ip, $this->isConfirm, $this->isSetFree, $this->complement, $this->exploitationType, $this->process, $this->isExploitation, $this->learningPeriodId, $this->subClassId, $this->finalExaminationTheme);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->enrollId = $enrollId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE acdenroll
                   SET contractId = ?,
                       groupId = ?,
                       curriculumId = ?,
                       dateEnroll = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       hourEnroll = ?,
                       dateCancellation = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       hourCancellation = ?,
                       reasonCancellationId = ?,
                       note = ?,
                       examNote = ?,
                       finalNote = ?,
                       concept = ?,
                       textEvaluation = ?,
                       frequency = ?,
                       obsExploitation = ?,
                       exploitationInstitutionId = ?,
                       numberHourExploitation = ?,
                       creditsExploitation = ?,
                       isShowDocumentEndCourse = ?,
                       statusId = ?,
                       frequencyAlertEmail = ?,
                       isInternet = ?,
                       ip = ?,
                       isConfirm = ?,
                       isSetFree = ?,
                       complement = ?,
                       exploitationType = ?,
                       process = ?,
                       isExploitation = ?,
                       learningPeriodId = ?,
                       subClassId = ?,
                       finalExaminationTheme = ?
                 WHERE enrollId = ?';
        $params = array($this->contractId, $this->groupId, $this->curriculumId, $this->dateEnroll, $this->hourEnroll, $this->dateCancellation, $this->hourCancellation, $this->reasonCancellationId, $this->note, $this->examNote, $this->finalNote, $this->concept, $this->textEvaluation, $this->frequency, $this->obsExploitation, $this->exploitationInstitutionId, $this->numberHourExploitation, $this->creditsExploitation, $this->isShowDocumentEndCourse, $this->statusId, $this->frequencyAlertEmail, $this->isInternet, $this->ip, $this->isConfirm, $this->isSetFree, $this->complement, $this->exploitationType, $this->process, $this->isExploitation, $this->learningPeriodId, $this->subClassId, $this->finalExaminationTheme, $this->enrollId);
        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->enrollId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM acdenroll
                      WHERE enrollId = ?';
        $params = array($this->enrollId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->enrollId = null;
        }

        return $result;
    }
    
    
    /**
     * 
     * Obtém disciplinas disponíveis no semestre.
     * 
     * 
     * @param int $contractId
     * @param text $classId
     * @param text $learningPeriodId
     * @param boolean $showOtherUnitsGroups
     * @param boolean $showOtherTurnsGroups
     * @param boolean $showOtherClassesGroups
     * @param boolean $showOtherCoursesGroups
     * @param boolean $freeOtherPeriodGroups
     * @param text $curricularComponentId
     * @param int $eletivas
     * @param int $groupId
     * @param int $semester
     * @param text $classPeriod
     * @param boolean $liberarSubstitutas
     * @param int $curriculumId
     * 
     * @return stdClass - Informacoes sobre a(s) disciplina(s) disponível(is).
     */
    public function getGroupsAvailableForEnroll($contractId, $classId, $learningPeriodId, $showOtherUnitsGroups, $showOtherTurnsGroups, $showOtherClassesGroups, $showOtherCoursesGroups, $freeOtherPeriodGroups, $curricularComponentId=null, $eletivas=true, $groupId=null, $semester=null, $classPeriod=null, $liberarSubstitutas=true, $curriculumId = null)
    {
        $MIOLO = MIOLO::getInstance();

        //Concatenar todos parametros da funcao numa string
        $string = 'contractId=' . $contractId;
        $string .= 'classId=' . $classId;
        $string .= 'learningPeriodId=' . $learningPeriodId;
        $string .= 'showOtherUnitsGroups=' . $showOtherUnitsGroups;
        $string .= 'showOtherTurnsGroups=' . $showOtherTurnsGroups;
        $string .= 'showOtherClassesGroups=' . $showOtherClassesGroups;
        $string .= 'showOtherCoursesGroups=' . $showOtherCoursesGroups;
        $string .= 'freeOtherPeriodGroups=' . $freeOtherPeriodGroups;
        $string .= 'curricularComponentId=' . $curricularComponentId;
        $string .= 'eletivas=' . $eletivas;
        $string .= 'groupId=' . $groupId;
        $string .= 'semester=' . $semester;
        $string .= 'classPeriod=' . $classPeriod;
        $string .= 'liberarSubstituas=' . $liberarSubstitutas;
        $string .= 'curriculumId=' . $curriculumId;

        //Busca o vetor que já está na sessao
        $arrayParams = $MIOLO->session->get('arrayParams');
        
        //Verifica se os params já foram buscados, senao continua funcao
        if ( array_key_exists($string, $arrayParams) )
        {
            return $arrayParams[$string];
        }
        
        $busContract = new BusinessAcademicBusContract();
        $busEnroll = new BusinessAcademicBusEnroll();
        
        $contrato = $busContract->getContract($contractId);
        $courseCurriculum = $busEnroll->getCourseCompleteCurriculum($contrato->courseId, $contrato->courseVersion, $contrato->turnId, $contrato->unitId, $learningPeriodId);        
        
        $params[] = $learningPeriodId;
        $params[] = $contractId;
                        
        $otherCourses = !$showOtherCoursesGroups ? 0 : 1;
        
        $sql = '    SELECT (CASE WHEN ' . $otherCourses . ' = 1 
                                THEN ( SELECT AC.curriculumId 
                                         FROM acdCurriculum AC
                                        WHERE AC.courseId = B.courseId
                                          AND AC.courseVersion = B.courseVersion 
                                          AND AC.turnId = B.turnId
                                          AND AC.unitId = B.unitId
                                          AND AC.curricularComponentId = A.curricularComponentId 
                                          AND AC.curricularComponentVersion = A.curricularComponentVersion )
                                ELSE A.curriculumId
                           END) AS curriculumId,
                           A.semester,
                           A.curricularComponentId,
                           A.curricularComponentVersion,
                           C.name || \' - \'|| (select GA.description from basUnit GA where GA.unitId = A.unitId) || \' - \'|| (select FA.description from basTurn FA where FA.turnId = A.turnId) AS curricularComponentName,
                           A.turnId,
                           (select FA.description from basTurn FA where FA.turnId = A.turnId) AS turnDescription,
                           A.unitId,
                           (select GA.description from basUnit GA where GA.unitId = A.unitId) AS unitName,
                           D.groupId,
                           D.classId,
                           E.periodId,
                           E.learningPeriodId,
                           COALESCE(D.totalEnrolled, 0) AS totalEnrolled,
                           D.vacant,
                           D.regimenId,
                           H.description AS regimenDescription,
                           (SELECT TO_CHAR(MIN(X.occurrenceDate), \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS startDate
                              FROM (SELECT UNNEST(Z.occurrenceDates) AS occurrenceDate
                                      FROM acdSchedule Z
                                     WHERE Z.groupId = D.groupId) X) AS startDate,
                           (SELECT TO_CHAR(MAX(X.occurrenceDate), \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS endDate
                              FROM (SELECT UNNEST(Z.occurrenceDates) AS occurrenceDate
                                      FROM acdSchedule Z
                                     WHERE Z.groupId = D.groupId) X) AS endDate,
                           K.classId,
                           K.name AS className,
                           (SELECT X.enrollId
                              FROM acdEnroll X
                             WHERE X.contractId = B.contractId
                               AND (CASE WHEN ' . $otherCourses . ' = 1 
                                        THEN EXISTS ( SELECT AC.curriculumId
                                                 FROM acdCurriculum AC
                                                WHERE AC.courseId = B.courseId
                                                  AND AC.courseVersion = B.courseVersion 
                                                  AND AC.turnId = B.turnId
                                                  AND AC.unitId = B.unitId
                                                  AND AC.curricularComponentId = A.curricularComponentId 
                                                  AND AC.curricularComponentVersion = A.curricularComponentVersion
                                                  AND AC.curriculumId = X.curriculumId)
                                        ELSE  A.curriculumId = X.curriculumId
                                   END)
                          ORDER BY X.dateEnroll DESC,
                                   X.hourEnroll DESC
                             LIMIT 1) AS enrollId,
                           (SELECT X.statusId
                              FROM acdEnroll X
                             WHERE X.contractId = B.contractId
                               AND (CASE WHEN ' . $otherCourses . ' = 1 
                                        THEN EXISTS ( SELECT AC.curriculumId
                                                 FROM acdCurriculum AC
                                                WHERE AC.courseId = B.courseId
                                                  AND AC.courseVersion = B.courseVersion 
                                                  AND AC.turnId = B.turnId
                                                  AND AC.unitId = B.unitId
                                                  AND AC.curricularComponentId = A.curricularComponentId 
                                                  AND AC.curricularComponentVersion = A.curricularComponentVersion
                                                  AND AC.curriculumId = X.curriculumId)
                                        ELSE  A.curriculumId = X.curriculumId
                                   END)
                               AND X.groupId = D.groupId
                          ORDER BY X.dateEnroll DESC,
                                   X.hourEnroll DESC
                             LIMIT 1) AS enrollstatusId,
                           (SELECT Y.description
                              FROM acdEnroll X
                        INNER JOIN acdEnrollStatus Y
                                ON Y.statusId = X.statusId
                             WHERE X.contractId = B.contractId
                               AND (CASE WHEN ' . $otherCourses . ' = 1 
                                        THEN EXISTS ( SELECT AC.curriculumId
                                                 FROM acdCurriculum AC
                                                WHERE AC.courseId = B.courseId
                                                  AND AC.courseVersion = B.courseVersion 
                                                  AND AC.turnId = B.turnId
                                                  AND AC.unitId = B.unitId
                                                  AND AC.curricularComponentId = A.curricularComponentId 
                                                  AND AC.curricularComponentVersion = A.curricularComponentVersion
                                                  AND AC.curriculumId = X.curriculumId)
                                        ELSE  A.curriculumId = X.curriculumId
                                   END)
                               AND X.groupId = D.groupId
                          ORDER BY X.dateEnroll DESC,
                                   X.hourEnroll DESC
                             LIMIT 1) AS enrollStatusDescription,
                             C.academiccredits,
                             C.lessonnumberhours,
                             A.curricularcomponenttypeid,
                             C.academicNumberHours,
                             (SELECT COUNT(CL.curriculumId) > 0
                                FROM acdCurriculumLink CL
                          INNER JOIN acdGroup GR
                                  ON GR.curriculumId = CL.curriculumLinkId
                          INNER JOIN acdLearningPeriod LP
                                  ON LP.learningPeriodId = GR.learningPeriodId
                               WHERE CL.curriculumId = A.curriculumId
                                 AND CL.utilizaVinculoParaMatricula
                                 AND LP.periodId = (SELECT periodId
                                                      FROM acdLearningPeriod
                                                     WHERE learningPeriodId = ? ) ) AS possuiVinculo
                      FROM acdcurriculum A 
                        INNER JOIN acdContract B
                        ON (B.contractId = ?) ';
            $params[] = $contractId;
        
        $sql .= ' INNER JOIN acdCurricularComponent C
                        ON (C.curricularComponentId = A.curricularComponentId
                            AND C.curricularComponentVersion = A.curricularComponentVersion)
                LEFT JOIN acdCurriculumLink CL ON (CL.curriculumlinkid = A.curriculumid)                
                INNER JOIN acdGroup D
                        ON (D.curriculumId = A.curriculumId)
                INNER JOIN acdlearningperiod E
                        ON E.learningPeriodId = D.learningPeriodId ';

        if ( !$eletivas )
        {
            if(!$showOtherTurnsGroups)
            {
                $sql .= ' INNER JOIN basTurn F
                            ON (F.turnId = A.turnId AND B.turnId = A.turnId) ';
            }

            if(!$showOtherUnitsGroups)
            {
                $sql .= ' INNER JOIN basUnit G
                            ON (G.unitId = A.unitId AND G.unitId = B.unitId) ';
            }
        }
        
                $sql .= ' INNER JOIN acdRegimen H
                        ON H.regimenId = D.regimenId
                INNER JOIN acdclass K
                        ON K.classId = D.classId
                     WHERE B.contractId = ? 
                       AND D.iscancellation IS FALSE ';
        
        if(!$freeOtherPeriodGroups)
        {
               $sql .= ' AND E.periodId IN (SELECT periodId FROM acdlearningperiod WHERE learningPeriodId = ?) ';
               $params[] = $learningPeriodId;
        }
        
               $sql .= ' AND NOT E.isClosed ';
               $sql .= ' AND NOT EXISTS (SELECT \'x\'
                                         FROM acdEnroll X
                                   INNER JOIN acdgroup XA
                                           ON XA.groupid = X.groupid
                                   INNER JOIN acdlearningperiod XB
                                           ON XB.learningperiodid = XA.learningperiodid
                                        WHERE X.contractId = '.$contractId.'
                                          AND X.curriculumId = A.curriculumId
                                          AND X.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') . ', ' .SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED').' )
                                          AND XB.periodid != E.periodId)';

            #TODO: transformar este parametro em uma opcao na configuracao de matricula
            $bloquearPreRequisito = true;
            if($bloquearPreRequisito)
            {
                /*
                $sql .= 'AND NOT EXISTS ( SELECT \'y\'
                                            FROM acdCondition Y
                                      INNER JOIN acdcurriculum YD
                                              ON YD.curriculumid = Y.curriculumid
                                       LEFT JOIN acdEnroll YA
                                              ON (Y.conditioncurriculumid = YA.curriculumid)
                                      INNER JOIN acdgroup YB
                                              ON YA.groupid = YB.groupid
                                      INNER JOIN acdlearningperiod YC
                                              ON YC.learningperiodid = YA.learningperiodid
                                           WHERE YA.contractId = ' . $contractId . '
                                             AND YA.statusId != ' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED') . '
                                             AND YD.curriculumid = A.curriculumId )';
                 * 
                 */
                
             /*   $sql .= 'AND (
    CASE WHEN ((SELECT COUNT(*) FROM acdCondition Y WHERE Y.curriculumId = A.curriculumid)) = 0
    THEN
        TRUE
    ELSE
        EXISTS (SELECT 1 FROM acdCondition Y
		LEFT JOIN acdEnroll E
		      ON (Y.conditioncurriculumid = E.curriculumid)
		    WHERE E.contractId = '.$contractId.'
		        AND Y.curriculumId = A.curriculumid
			AND E.statusId = '.SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED').'
        )
    END
)
'; */
                
        }

                                         
            if(!$showOtherClassesGroups)
            {
                $sql .= ' AND D.classId = ? ';
                $params[] = $classId;
            }
            
            if ( !$eletivas )
            {
                if(!$showOtherCoursesGroups)
                {
                    $sql .= ' AND B.courseId = A.courseId
                                AND B.courseVersion = A.courseVersion ';
                }
                else
                {
                    /**
                     * Se configurado para exibir disciplinas de outros cursos, 
                     * somente devem ser exibidas disciplinas de outros cursos cujo código e versão sejam
                     * os mesmos existentes na matriz do curso do aluno.
                     */
                    $sql .= ' AND EXISTS ( SELECT curriculumId
                                             FROM acdCurriculum
                                            WHERE ( courseId,
                                                    courseVersion,
                                                    turnId,
                                                    unitid ) = ( B.courseId,
                                                                 B.courseVersion,
                                                                 B.turnId,
                                                                 B.unitId )
                                              AND curricularComponentId = A.curricularComponentId
                                              AND curricularComponentVersion = A.curricularComponentVersion
                                              AND semester > 0 )';
                }
            }
            
            if ( strlen($classPeriod) > 0 )
            {
                $sql .= ' AND get_semester_contract(B.contractId) = ? ';
                $params[] = $classPeriod;
            }
            
            // Não listar as disciplinas já cursadas e aprovadas.
            $filter = new stdClass();
            $filter->contractId    = $contractId;
 
            // Não listar as disciplinas já cursadas e dispensadas.            
            $sql .= " AND A.curricularComponentId NOT IN ( SELECT BB.curricularcomponentid 
                                                                 FROM acdEnroll AA
                                                           INNER JOIN acdCurriculum BB
                                                                   ON (BB.curriculumId = AA.curriculumId)
                                                           INNER JOIN acdContract CC
                                                                   ON (CC.contractId = AA.contractId)
                                                                WHERE CC.contractId = {$contractId}
                                                                  AND CC.courseId = BB.courseId
                                                                  AND CC.courseVersion = BB.courseVersion
                                                                  AND CC.unitId = BB.unitId
                                                                  AND CC.turnId = BB.turnId
                                                                  AND BB.curricularcomponentid = A.curricularComponentId
                                                                  AND BB.curricularcomponentversion = A.curricularComponentversion
                                                                  AND AA.statusId IN ((SELECT getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED')::int), (SELECT getParameter('ACADEMIC','ENROLL_STATUS_EXCUSED')::int))) ";
           
            if(!$eletivas)
            {
                $matricula = new Matricula($contractId);
                $matricula->definirlearningPeriodId($learningPeriodId);
                $matricula->listaDisciplinasEletivas();
                foreach($matricula->listaDisciplinasEletivas() as $eletivas)
                {
                    foreach($eletivas as $eletiva)
                    {
                        $sql .= " AND A.curricularComponentId != ? ";
                        $params[] = $eletiva->curricularComponentId;
                    }
                }
                $sql .= " AND semester > 0 ";
            }
            
        
            if($curricularComponentId)
            {
                $sql .= ' AND A.curricularComponentId = ? ';
                $params[] = $curricularComponentId;
            }
            
            if($groupId)
            {
                $sql .= ' AND D.groupId = ? ';
                $params[] = $groupId;
            }
            
            if($semester)
            {
                $sql .= ' AND A.semester = ? ';
                $params[] = $semester;
            }

            #TODO: transformar este parametro em uma opcao na configuracao de matriculado, podem ser adicionado mais opcoes como o tipo de substituicao
            //$liberarSubstitutas = true;
            if($liberarSubstitutas)
            {
                
				$sql .= "UNION ALL

                   SELECT distinct FT.curriculumId,
                           Z.semester,
                           FT.curricularComponentId,
                           A.curricularComponentVersion,
                           C.name || ' - ' || G.description || ' - ' || F.description || ' ( ' || W.curricularComponentId || '/' || W.curricularComponentVersion || ' ' || W.name  || ' ) ' AS curricularComponentName,
                           A.turnId,
                           (select FA.description from basTurn FA where FA.turnId = A.turnId) AS turnDescription,
                           A.unitId,
                           (select GA.description from basUnit GA where GA.unitId = A.unitId) AS unitName,
                           D.groupId,
                           D.classId,
                           (SELECT periodId FROM acdLearningPeriod WHERE D.learningPeriodId = acdLearningPeriod.learningPeriodId),
                           D.learningPeriodId,
                           COALESCE(D.totalEnrolled, 0) AS totalEnrolled,
                           D.vacant,
                           D.regimenId,
                           H.description AS regimenDescription,
                           (SELECT TO_CHAR(MIN(X.occurrenceDate), 'dd/mm/yyyy') AS startDate
                              FROM (SELECT UNNEST(Z.occurrenceDates) AS occurrenceDate
                                      FROM acdSchedule Z
                                     WHERE Z.groupId = D.groupId) X) AS startDate,
                           (SELECT TO_CHAR(MAX(X.occurrenceDate), 'dd/mm/yyyy') AS endDate
                              FROM (SELECT UNNEST(Z.occurrenceDates) AS occurrenceDate
                                      FROM acdSchedule Z
                                     WHERE Z.groupId = D.groupId) X) AS endDate,
                           K.classId,
                           K.name AS className,
                           (SELECT X.enrollId
                              FROM acdEnroll X
                             WHERE X.contractId = FT.contractId
                               AND X.curriculumId = A.curriculumId
                          ORDER BY X.dateEnroll DESC,
                                   X.hourEnroll DESC
                             LIMIT 1) AS enrollId,
                           (SELECT X.statusId
                              FROM acdEnroll X
                             WHERE X.contractId = FT.contractId
                               AND X.curriculumId = A.curriculumId
                               AND X.groupId = D.groupId
                          ORDER BY X.dateEnroll DESC,
                                   X.hourEnroll DESC
                             LIMIT 1) AS enrollstatusId,
                           (SELECT Y.description
                              FROM acdEnroll X
                        INNER JOIN acdEnrollStatus Y
                                ON Y.statusId = X.statusId
                             WHERE X.contractId = FT.contractId
                               AND X.curriculumId = A.curriculumId
                               AND X.groupId = D.groupId
                          ORDER BY X.dateEnroll DESC,
                                   X.hourEnroll DESC
                             LIMIT 1) AS enrollStatusDescription,
                             C.academiccredits,
                             C.lessonnumberhours,
                             A.curricularcomponenttypeid,
                             C.academicNumberHours,
                             FALSE as possuiVinculo
                      FROM acdCurricularComponentUnblock FT
                INNER JOIN acdCurricularComponent C
                        ON (C.curricularComponentId = FT.curricularComponentId
                         AND C.curricularComponentVersion = FT.curricularComponentVersion )
		INNER JOIN acdCurriculum A
                        ON (C.curricularComponentId = A.curricularComponentId
                          AND C.curricularComponentVersion = A.curricularComponentVersion )
		INNER JOIN acdCurriculum Z
                        ON ( Z.curriculumId = FT.curriculumId )
		INNER JOIN acdCurricularComponent W
			ON (W.curricularComponentId = Z.curricularComponentId
				AND W.curricularComponentVersion = Z.curricularComponentVersion )

                INNER JOIN acdGroup D
                       ON (A.curriculumId = D.curriculumId)
                INNER JOIN basTurn F
                        ON F.turnId = A.turnId 
                INNER JOIN basUnit G
                        ON G.unitId = A.unitId  
                INNER JOIN acdRegimen H
                        ON H.regimenId = D.regimenId
                INNER JOIN acdClass K
                        ON K.classId = D.classId
                     WHERE FT.contractid = '$contractId' 
                       AND D.isCancellation IS FALSE
                       AND D.learningPeriodId IN (SELECT X.learningPeriodId 
                                                   FROM acdLearningPeriod X
                                                  WHERE periodId IN (SELECT periodId 
                                                                       FROM acdLearningPeriod 
                                                                      WHERE learningPeriodId = '$learningPeriodId')                                                   
									 AND NOT X.isClosed) 
			AND FT.learningPeriodId IN (SELECT X.learningPeriodId 
                                                   FROM acdLearningPeriod X
                                                  WHERE periodId IN (SELECT periodId 
                                                                       FROM acdLearningPeriod 
                                                                      WHERE learningPeriodId = '$learningPeriodId')
                                                    AND NOT X.isClosed)";
                             
                if ( $groupId )
                {
                    $sql .= ' AND D.groupId = ? ';
                    $params[] = $groupId;
                }
            }            

            $sql .= ' ORDER BY  semester, 
                                curricularComponentName,
                                unitName,
                                turnDescription';

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        //Caso seja vinculada tem que buscar por fora
        if ( is_null($result) &&
             strlen ($groupId) > 0 &&
             strlen($curriculumId) > 0 )
        {
            $args = new stdClass();
            $args->groupId = $groupId;
            $args->curriculumId = $curriculumId;
            
            $newReturn[] = $this->getGroupAvailableForEnrollOutCurriculum($args);
            
            //Seta retorno na sessao
            $arrayParams[$string] = $newReturn;
            $MIOLO->session->setValue('arrayParams', $arrayParams);
            
            return $newReturn;
        }
        
        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $row = new stdClass();
            list ( $row->curriculumId,
                   $row->semester,
                   $row->curriculumCurricularComponentId,
                   $row->curriculumCurricularComponentVersion,
                   $row->curriculumCurricularComponentName,
                   $row->turnId,
                   $row->turnDescription,
                   $row->unitId,
                   $row->unitName,
                   $row->groupId,
                   $row->classId,
                   $row->periodId,
                   $row->learningPeriodId,
                   $row->totalEnrolled,
                   $row->vacant,
                   $row->regimenId,
                   $row->regimenDescription,
                   $row->startDate,
                   $row->endDate,
                   $row->classId,
                   $row->className,
                   $row->enrollId,
                   $row->enrollStatus,
                   $row->enrollStatusDescription,
                   $row->academicCredits,
                   $row->lessonNumberHours,
                   $row->curricularComponentTypeId,
                   $row->academicNumberHours,
                   $row->possuiVinculo ) = $result[$i];

            $retVal[] = $row;
        }

        $newReturn = array();
        
        //Ao buscar as eletivas, é utilizada a posicao zero, como nunca vai existir
        //um groupId com esse valor, vamos manter assim
        $newReturn[0] = $row;

        // Controle para não duplicar as mesmas oferecidas
        $groups = array();
        
        if (count($retVal) > 0)
        {
            foreach ($retVal as $disciplina)
            {                
                if ( !in_array($disciplina->groupId, $groups) )
                {
                    $newReturn[$disciplina->groupId] = $disciplina;
                    $groups[$disciplina->groupId] = $disciplina->groupId;
                }
                else
                {
                    continue;
                }
                
                if ($disciplina->possuiVinculo == DB_TRUE)
                {
                    //Obter vínculos
                    $sql = "SELECT curriculumLinkId
                              FROM acdCurriculumLink
                             WHERE curriculumId = ?
                               AND utilizaVinculoParaMatricula";
                    $vinculos = SDatabase::query($sql, array($disciplina->curriculumId));

                    foreach ($vinculos as $vinculo)
                    {
                        $oferecidas = $this->obterOferecidasVinculadas($vinculo, $disciplina);
                        foreach ($oferecidas[0] as $oferecida)
                        {
                            $busGroup = new BusinessAcademicBusGroup();
                            $disciplinaVinculada = $busGroup->getGroup($oferecida, true);
                            
                            // Se configuração for de não mostrar disciplinas de outros turnos e os turnos não forem iguais, retira a disciplina da lista;
                            if( !$showOtherTurnsGroups && $disciplina->turnId != $disciplinaVinculada->turnId )
                            {
                                unset($newReturn[$disciplina->groupId]);
                                continue;
                            }
                                
                            $row = new stdClass();
                            $row->possuiVinculo = $disciplina->possuiVinculo;
                            $row->curriculumId = $disciplina->curriculumId;
                            $row->semester = $disciplina->semester;
                            $row->curriculumCurricularComponentId = $disciplinaVinculada->curriculumCurricularComponentId;
                            $row->curriculumCurricularComponentVersion = $disciplinaVinculada->curriculumCurricularComponentVersion;
                            $row->curriculumCurricularComponentName = $disciplinaVinculada->curriculumCurricularComponentName . _M(' (') . $disciplina->curriculumCurricularComponentName . _M(')');
                            $row->turnId = $disciplinaVinculada->turnId;
                            $row->turnDescription = $disciplinaVinculada->turnDescription;
                            $row->unitId = $disciplinaVinculada->unitId;
                            $row->unitName = $disciplinaVinculada->unitDescription;
                            $row->groupId = $disciplinaVinculada->groupId;
                            $row->classId = $disciplinaVinculada->classId;
                            $row->periodId = $disciplina->periodId;
                            $row->learningPeriodId = $disciplinaVinculada->learningPeriodId;
                            $row->totalEnrolled = $disciplinaVinculada->totalEnrolled;
                            $row->vacant = $disciplinaVinculada->vacant;
                            $row->regimenId = $disciplinaVinculada->regimenId;
                            $row->regimenDescription = $disciplinaVinculada->regimenDescription;
                            $row->startDate = $disciplinaVinculada->startDate;
                            $row->endDate = $disciplinaVinculada->endDate;
                            $row->classId  = $disciplinaVinculada->classId;
                            $row->className = $disciplinaVinculada->className;
                            $row->enrollId = $disciplina->enrollId;
                            $row->enrollStatus = $disciplina->enrollStatus;
                            $row->enrollStatusDescription = $disciplina->enrollStatusDescription;
                            $row->academicCredits = $disciplinaVinculada->academicCredits;
                            $row->lessonNumberHours = $disciplinaVinculada->lessonNumberHours;
                            $row->curricularComponentTypeId = $disciplinaVinculada->curricularComponentTypeId;
                            $row->academicNumberHours = $disciplinaVinculada->academicNumberHours;
                            
                            $groups[$row->groupId] = $row->groupId;
                            $newReturn[$row->groupId] = $row;
                        }
                    }
                }
            }
        }
        
        if ( strlen($groupId) > 0 )
        {
            $arrayParams[$string] = $newReturn;
            $MIOLO->session->setValue('arrayParams', $arrayParams);
            return $newReturn;
        }
        
        //Nem tenta fazer a verificacao a seguir senao tem vinculos para matricula cadastrados
        $sqlVerificacao = "SELECT *
                             FROM acdCurriculumLink
                            WHERE utilizaVinculoParaMatricula";
         
        $ver = SDatabase::query($sqlVerificacao);
        
        if ( strlen($ver[0][0]) > 0 )
        {
            // Verifica se não ficou alguma disciplina vinculada para trás.
            foreach ( $courseCurriculum as $curriculum )
            {
                $curriculumData = new stdClass();
                $curriculumData->curriculumId = $curriculum[4];
                $curriculumData->curricularComponentId = $curriculum[1];
                $curriculumData->curricularComponentVersion = $curriculum[2];

                if ( !($busEnroll->isCoursed($curriculumData, $contractId)) && !($busEnroll->isCoursing($curriculumData, $contractId, $learningPeriodId) ) )
                {
                    $sql = "SELECT curriculumLinkId
                                  FROM acdCurriculumLink
                                 WHERE curriculumId = ?
                                   AND utilizaVinculoParaMatricula";

                    $vinculos = SDatabase::query($sql, array($curriculumData->curriculumId));
                    foreach ( $vinculos as $vinculo )
                    {
                        if ( strlen($vinculo[0]) > 0 )
                        {
                            $sql = "SELECT groupid
                                      FROM acdgroup 
                                     WHERE curriculumid = ? 
                                        AND learningPeriodId IN (SELECT X.learningPeriodId 
                                                                   FROM acdLearningPeriod X
                                                                  WHERE periodId IN (SELECT periodId 
                                                                                       FROM acdLearningPeriod 
                                                                                       WHERE learningPeriodId = '$learningPeriodId')                                                   
									                 AND NOT X.isClosed)";
                            
                            $disciplinasOferecidas = SDatabase::query($sql, array($vinculo[0]));
                            foreach ( $disciplinasOferecidas as $disciplinaOferecida )
                            {
                                if ( strlen($disciplinaOferecida[0]) > 0 )
                                {
                                    if ( !in_array($disciplinaOferecida[0], $groups) )
                                    {
                                        $groups[$disciplinaOferecida[0]] = $disciplinaOferecida[0];

                                        $args = new stdClass();
                                        $args->groupId = $disciplinaOferecida[0];
                                        $args->curriculumId = $curriculumData->curriculumId;

                                        $newReturn[$disciplinaOferecida[0]] = $this->getGroupAvailableForEnrollOutCurriculum($args);
                                    }
                                }
                            }
                        }
                    }
                }
            }
     
        }
        
        /**
         * Como dito antes, na posicao zero [0] do $newReturn é salvo a primeira disciplina
         * que é utilizada pra buscar eletivas, vamos tirar entao fora do $newReturn essa
         * oferecida e deixar ela somente na posicao zero, para nao existerem duplicacoes.
         */ 
        if ( array_key_exists($newReturn[0]->groupId, $newReturn) )
        {
            unset($newReturn[$newReturn[0]->groupId]);
        }
        
        //Salva busca na sessao
        $arrayParams[$string] = $newReturn;
        $MIOLO->session->setValue('arrayParams', $arrayParams);

        return $newReturn;
    }

    /**
     * Obtem as diciplinas disponiveis para a matricula para uma turma em um semestre
     * 
     * @param type $contractId
     * @param type $classId
     * @param type $learningPeriodId
     * @return Array of stdClass 
     */
    public function getGroupAvailableForEnroll($curricularComponentId=null, $contractId, $learningPeriodId, $classId)
    {
        $sql = '    SELECT A.curriculumId,
                           A.semester,
                           A.curricularComponentId,
                           A.curricularComponentVersion,
                           C.name AS curricularComponentName,
                           A.turnId,
                           (select FA.description from basTurn FA where FA.turnId = A.turnId) AS turnDescription,
                           A.unitId,
                           (select GA.description from basUnit GA where GA.unitId = A.unitId) AS unitName,
                           D.groupId,
                           D.classId,
                           E.periodId,
                           E.learningPeriodId,
                           COALESCE(D.totalEnrolled, 0) AS totalEnrolled,
                           D.vacant,
                           D.regimenId,
                           H.description AS regimenDescription,
                           (SELECT TO_CHAR(MIN(X.occurrenceDate), \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS startDate
                              FROM (SELECT UNNEST(Z.occurrenceDates) AS occurrenceDate
                                      FROM acdSchedule Z
                                     WHERE Z.groupId = D.groupId) X) AS startDate,
                           (SELECT TO_CHAR(MAX(X.occurrenceDate), \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS endDate
                              FROM (SELECT UNNEST(Z.occurrenceDates) AS occurrenceDate
                                      FROM acdSchedule Z
                                     WHERE Z.groupId = D.groupId) X) AS endDate,
                           K.classId,
                           K.name AS className,
                           (SELECT X.enrollId
                              FROM unit_acdEnroll X
                             WHERE X.contractId = B.contractId
                               AND X.curriculumId = A.curriculumId
                          ORDER BY X.dateEnroll DESC,
                                   X.hourEnroll DESC
                             LIMIT 1) AS enrollId,
                           (SELECT X.statusId
                              FROM unit_acdEnroll X
                             WHERE X.contractId = B.contractId
                               AND X.curriculumId = A.curriculumId
                          ORDER BY X.dateEnroll DESC,
                                   X.hourEnroll DESC
                             LIMIT 1) AS enrollstatusId,
                           (SELECT Y.description
                              FROM unit_acdEnroll X
                        INNER JOIN acdEnrollStatus Y
                                ON Y.statusId = X.statusId
                             WHERE X.contractId = B.contractId
                               AND X.curriculumId = A.curriculumId
                          ORDER BY X.dateEnroll DESC,
                                   X.hourEnroll DESC
                             LIMIT 1) AS enrollStatusDescription,
                             C.academiccredits,
                             C.lessonnumberhours,
                             A.curricularcomponenttypeid
                      FROM unit_acdcurriculum A 
                        INNER JOIN unit_acdContract B
                        ON (B.contractId = ?) ';
            $params[] = $contractId;
        
        $sql .= ' INNER JOIN acdCurricularComponent C
                        ON (C.curricularComponentId = A.curricularComponentId
                            AND C.curricularComponentVersion = A.curricularComponentVersion)
                INNER JOIN unit_acdGroup D
                        ON (D.curriculumId = A.curriculumId)
                INNER JOIN unit_acdlearningperiod E
                        ON E.learningPeriodId = D.learningPeriodId ';
        
        if(!$showOtherTurnsGroups)
        {
            $sql .= ' INNER JOIN basTurn F
                        ON F.turnId = A.turnId ';
        }
        
        if(!$showOtherUnitsGroups)
        {
            $sql .= ' INNER JOIN basUnit G
                        ON G.unitId = A.unitId ';
        }
        
        $sql .= ' INNER JOIN acdRegimen H
                        ON H.regimenId = D.regimenId
                INNER JOIN unit_acdclass K
                        ON K.classId = D.classId
                     WHERE B.contractId = ? 
                       AND D.isCancellation IS FALSE';
                $params[] = $contractId;

        if(!$freeOtherPeriodGroups)
        {
               $sql .= ' AND E.periodId IN (SELECT periodId FROM unit_acdlearningperiod WHERE learningPeriodId = ?) ';
               $params[] = $learningPeriodId;
        }

            if(!$showOtherCoursesGroups)
            {
                $sql .= ' AND B.courseId = A.courseId ';
            }
            
            if(!$eletivas)
            {
                $matricula = new Matricula($contractId);
                $matricula->definirlearningPeriodId($learningPeriodId);
                $matricula->listaDisciplinasEletivas();
                foreach($matricula->listaDisciplinasEletivas() as $eletivas)
                {
                    foreach($eletivas as $eletiva)
                    {
                        $sql .= " AND A.curricularComponentId != ? ";
                        $params[] = $eletiva->curricularComponentId;
                    }
                }
            }
            
        
            if($curricularComponentId)
            {
                $sql .= ' AND A.curricularComponentId = ? ';
                $params[] = $curricularComponentId;
            }

            $sql .= 'ORDER BY curricularComponentName,
                           unitName,
                           turnDescription,
                           E.beginDate';

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        $retVal = array();       
        for ( $i=0; $i<count($result); $i++ )
        {
            $row = new stdClass();
            list ( $row->curriculumId,
                   $row->semester,
                   $row->curriculumCurricularComponentId,
                   $row->curriculumCurricularComponentVersion,
                   $row->curriculumCurricularComponentName,
                   $row->turnId,
                   $row->turnDescription,
                   $row->unitId,
                   $row->unitName,
                   $row->groupId,
                   $row->classId,
                   $row->periodId,
                   $row->learningPeriodId,
                   $row->totalEnrolled,
                   $row->vacant,
                   $row->regimenId,
                   $row->regimenDescription,
                   $row->startDate,
                   $row->endDate,
                   $row->classId,
                   $row->className,
                   $row->enrollId,
                   $row->enrollStatus,
                   $row->enrollStatusDescription,
                   $row->academicCredits,
                   $row->lessonNumberHours,
                   $row->curricularComponentTypeId) = $result[$i];

            $retVal[] = $row;
        }

        return $retVal;
    }
    
    /**
     * Obtem as disciplinas que estejam fora do curriculum
     * 
     * @param args (stdClass)
     * 
     * @return row (stdClass)
     * 
     */
    public function getGroupAvailableForEnrollOutCurriculum($args)
    {
        $busGroup = new BusinessAcademicBusGroup();
        $disciplinaVinculada = $busGroup->getGroup($args->groupId, true);
        
        $sql = "SELECT CU.semester,
                      (SELECT CC.name
                         FROM acdCurricularComponent CC
                        WHERE CU.curricularComponentVersion = CC.curricularComponentVersion
                          AND CU.curricularComponentId = CC.curricularComponentId) as name
                  FROM acdCurriculum CU
                 WHERE CU.curriculumId = ?
            
                "; 
        $params[] = $args->curriculumId;
        $result = SDatabase::query($sql, $params);
        
        $row = new stdClass();
        $row->curriculumId = $args->curriculumId;
        $row->semester = $result[0][0];
        $row->curriculumCurricularComponentId = $disciplinaVinculada->curriculumCurricularComponentId;
        $row->curriculumCurricularComponentVersion = $disciplinaVinculada->curriculumCurricularComponentVersion;
        $row->curriculumCurricularComponentName = $disciplinaVinculada->curriculumCurricularComponentName . _M(' (') . $result[0][1] . _M(')');
        $row->turnId = $disciplinaVinculada->turnId;
        $row->turnDescription = $disciplinaVinculada->turnDescription;
        $row->unitId = $disciplinaVinculada->unitId;
        $row->unitName = $disciplinaVinculada->unitDescription;
        $row->groupId = $disciplinaVinculada->groupId;
        $row->classId = $disciplinaVinculada->classId;
        $row->periodId = $disciplinaVinculada->periodId;
        $row->learningPeriodId = $disciplinaVinculada->learningPeriodId;
        $row->totalEnrolled = $disciplinaVinculada->totalEnrolled;
        $row->vacant = $disciplinaVinculada->vacant;
        $row->regimenId = $disciplinaVinculada->regimenId;
        $row->regimenDescription = $disciplinaVinculada->regimenDescription;
        $row->startDate = $disciplinaVinculada->startDate;
        $row->endDate = $disciplinaVinculada->endDate;
        $row->classId = $disciplinaVinculada->classId;
        $row->className = $disciplinaVinculada->className;
        $row->enrollId = $disciplina->enrollId;
        $row->enrollStatus = $disciplina->enrollStatus;
        $row->enrollStatusDescription = $disciplina->enrollStatusDescription;
        $row->academicCredits = $disciplinaVinculada->academicCredits;
        $row->lessonNumberHours = $disciplinaVinculada->lessonNumberHours;
        $row->curricularComponentTypeId = $disciplinaVinculada->curricularComponentTypeId;
        $row->academicNumberHours = $disciplinaVinculada->academicNumberHours;
        
        return $row;
    }

    public function getDisaprovedCurriculumIds($contractId)
    {
        $sql = "SELECT getdisaprovedcurriculumids(?)";
        $result = SDatabase::query(SAGU::prepare($sql, array($contractId)));

        return $result;
        
    }
    
    /**
     * Obtem as disciplinas pendentes, que nao foram cursadas no semestre
     * 
     * @param type $contractId
     * @param type $semester
     * @return Array 
     */
    public function getPendingcurriculumIds($contractId, $semester)
    {
        $sql =     "SELECT A.curriculumId,
                           A.curricularComponentId || '/' || A.curricularComponentVersion || ' - ' || C.name AS curricularComponentName
                      FROM unit_acdcurriculum A
                INNER JOIN unit_acdContract B
                        ON (B.courseId = A.courseId
                            AND B.courseVersion = A.courseVersion
                            AND B.turnId = A.turnId
                            AND B.unitId = A.unitId)
                INNER JOIN acdCurricularComponent C
                        ON (C.curricularComponentId = A.curricularComponentId
                            AND C.curricularComponentVersion = A.curricularComponentVersion)
                     WHERE B.contractId = ?
                       AND A.semester < ?
                       AND c.name NOT IN (SELECT xa.name
                                            FROM unit_acdEnroll X
                                      INNER JOIN unit_acdcurriculum xx 
                                              ON x.curriculumid = xx.curriculumid
                                      INNER JOIN acdCurricularComponent xa
                                              ON xa.curricularcomponentid = xx.curricularcomponentid
                                           WHERE X.contractId = B.contractId
                                             AND X.statusId::varchar = ANY(STRING_TO_ARRAY(GETPARAMETER('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC'), ','))
                                        GROUP BY xa.name
                  )
                  ORDER BY curricularComponentName";
        
        $params = array($contractId, $semester);
        
        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return $result;
    }
    
    
    public function verificaPreRequisitoLiberado($contractId=null, $curriculumid = null)
    {
        $sql = "SELECT conditioncurriculumid 
                        FROM acdcondition 
                        WHERE curriculumid = ?";
        
        $res = SDatabase::query(SAGU::prepare($sql, $curriculumid));
        
        if(!$res)
        {
            return true;
        }
        else
        {
	    $statusid1 = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED');
            $statusid2 = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED');

	    foreach($res as $r)
	    {
            	$sql = "SELECT enrollid 
                	FROM acdenroll 
	                WHERE curriculumid = ? and contractid = ? and (statusId = ? or statusId = ?)";

        	    $result = SDatabase::query(SAGU::prepare($sql, array($r[0], $contractId, $statusid1, $statusid2)));
	            if(!$result)
	            {
		

			$sql = "SELECT curriculumid 
				  FROM acdcurricularcomponentunblock 
				 WHERE contractid = ? 
                                   AND curriculumid = ?
                                   AND isConditionBreak = TRUE";
        	    
			$result = SDatabase::query(SAGU::prepare($sql, array($contractId, $curriculumid)));

			if($result)
			{
				return true;
			}

        	        return false;
        	    }
	   }
	   return true;

        }

        return false;
    }


	public function verificaDesbloqueioDeChoqueDeHorario($contractId=null, $curriculumid = null)
    {
			$sql = "SELECT curriculumid 
				FROM acdcurricularcomponentunblock 
				WHERE contractid = ? and  curriculumid = ? and isscheduleshock = 't'";
        	    
			$result = SDatabase::query(SAGU::prepare($sql, array($contractId, $curriculumid)));

			if($result)
			{
				return true;
			}
	
        return false;
    }

	public function verificaDesbloqueioDeDisciplinaForaDoCurriculo($contractId=null, $curriculumid = null)
    {
			$sql = "SELECT curriculumid 
				FROM acdcurricularcomponentunblock 
				WHERE contractid = ? and  curriculumid = ? and isoutofcurriculum = 't'";
        	    
			$result = SDatabase::query(SAGU::prepare($sql, array($contractId, $curriculumid)));

			if($result)
			{
				return true;
			}
	
        return false;
    }

    
    /**
     * Obtém o código de matrícula de uma disciplina em que o contrato está matriculado no período letivo
     * informado
     *
     * @param $curriculumId (int): código da disciplina na matriz curricular
     * @param $contractId (int): código do contrato
     * @param $learningPeriodId (int): código do período letivo
     */
    public function getEnrolledenrollId($curriculumId, $contractId, $learningPeriodId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $acdContract = new AcdContract($contractId);

        $busCurriculum = new BusinessAcademicBusCurriculum();
        $curriculumData = $busCurriculum->getCurriculum($curriculumId);

        $sql = 'SELECT A.enrollId
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN unit_acdlearningperiod C
                    ON (C.learningPeriodId = B.learningPeriodId)
                 WHERE (A.curriculumId = ? OR A.curriculumId IN (SELECT curriculumId FROM unit_acdcurriculum WHERE curricularComponentId = ? AND curricularComponentVersion = ?))
                   AND A.contractId IN (' . implode(',', $acdContract->getRelatedContracts()) . ')
                   AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . ',' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED') . ')
                   AND C.periodId IN (SELECT periodId
                                        FROM unit_acdlearningperiod
                                       WHERE learningPeriodId = ?)';

        $params = array( $curriculumId,
                       $curriculumData->curricularComponentId,
                       $curriculumData->curricularComponentVersion,
                       $learningPeriodId );

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return $result[0][0];
    }
    
    /*
     * Obtém alunos com movimentação contratual atual de pré-matrícula e faz exclusão
     * dessas disciplinas caso a data de movimentação contratual seja maior que a configurada
     * na configuração de matrícula.
     * 
     */
    public static function cancelamentoDePreMatriculasForaDoPrazoDeConfirmacao()
    {   
        $MIOLO = MIOLO::getInstance();
        
        try
        {   
            $arrayDeContratosPreMatriculados = self::obtemContratosComMovimentacaoPreMatricula();
            
            foreach( $arrayDeContratosPreMatriculados as $contractId )
            {    
                SDatabase::beginTransaction();
                
                $matricula = new Matricula($contractId[0], 1);
                $enrollConfig = $matricula->obterConfiguracoes(false);
                
                $dataMovimentacao = AcdEnroll::obtemDataMovimentacaoContratual($contractId[0]);
                
                $dataContato = $dataMovimentacao[0][0];
                $dataHoje = SAGU::getDateNow();            
                $diasPreMatricula = SAGU::dateDiff($dataHoje, $dataContato);
                                
                if ( $diasPreMatricula > $enrollConfig->diasPrazoConfirmacao )
                {   
                    self::executaCancelamento($contractId[0], $enrollConfig, $contractId[1], SAGU::getParameter('ACADEMIC', 'MOTIVO_CANCELAMENTO_PRE_MATRICULAS_FORA_DO_PRAZO_DE_CONFIRMACAO'));
                } 
                
                SDatabase::commit();
            }
                        
            return true;
        }
        catch(Exception $e)
        {   
            SDatabase::rollback();
            //$MIOLO->error($e->getMessage());
        }
    }
    
    /*
     * Exclui disciplinas 
     */
    public static function excluirDisciplinas($enrollId, $reasonCancelationId, $learningPeriodId)
    {
        try
        {
            $busEnrollCancelation = new BusinessAcademicBusEnrollCancelation();
            // start a new transaction
            $busEnrollCancelation->beginTransaction();

            // cancel the specified enroll id
            $busEnrollCancelation->cancellEnroll($enrollId, $reasonCancelationId, $learningPeriodId);

            // commit changes
            $busEnrollCancelation->endTransaction();

        }
        catch ( Exception $e )
        {
            // rollback changes
            $busEnrollCancelation->undoTransaction();

            //$this->addError(_M('Não foi possível cancelar a inscrição') . ': ' . $e->getMessage());
        }
    }
    
    /*
     * Obtém período letivo recebendo o grupoId
     */
    public static function obtemPeriodoLetivo($groupId)
    {
        $sql = '  SELECT learningPeriodId
                    FROM acdGroup 
                   WHERE groupId = ? ';
        
        $result = SDatabase::query(SAGU::prepare($sql, $groupId));
        
        return $result;
    }
    
    /*
     * Obtém o as disciplinas de um contrato que estão com status de pré-matrícula.
     */
    public static function obtemDisciplinas($contractId, $learningPeriodId = NULL, $consomeVaga = DB_FALSE)
    {        
        $sql = 'SELECT A.enrollId,
                       A.groupId
                  FROM acdenroll A
            INNER JOIN acdGroup B
                    ON (A.groupId= B.groupId)
            INNER JOIN acdLearningPeriod C
                    ON (B.learningPeriodId = C.learningPeriodId)
                 WHERE A.contractId = ? 
                   AND CASE WHEN \'' . $consomeVaga . '\' = \'' . DB_TRUE . '\' 
                            THEN A.statusId IN (getParameter(\'ACADEMIC\', \'ENROLL_STATUS_PRE_ENROLLED\')::INT, getParameter(\'ACADEMIC\', \'ENROLL_STATUS_ENROLLED\')::INT)
                            ELSE
                                 A.statusId = getParameter(\'ACADEMIC\', \'ENROLL_STATUS_PRE_ENROLLED\')::INT
                       END
                   AND getContractState(A.contractId) = getParameter(\'ACADEMIC\', \'STATE_CONTRACT_ID_PRE_ENROLL\')::INT
                   AND (C.periodId IN (SELECT periodId FROM acdLearningPeriod WHERE learningPeriodId = ?) 
                    OR ? IS NULL) ';
        
        $args[] = $contractId;
        $args[] = $learningPeriodId;
        $args[] = $learningPeriodId;
       
        $result = SDatabase::query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
    /*
     * Obtém contratos que estão com movimentação atual de pré-matrícula
     */
    public static function obtemContratosComMovimentacaoPreMatricula()
    {
        $sql = 'SELECT DISTINCT A.contractid,
                       B.learningPeriodId
                  FROM acdContract A
            INNER JOIN acdMovementContract B
                 USING (contractId)
                 WHERE stateContractId = getContractState(A.contractId)
                   AND stateContractId = getParameter(\'ACADEMIC\', \'STATE_CONTRACT_ID_PRE_ENROLL\')::INT
                 ORDER BY A.contractId';
        
        $result = SDatabase::query(SAGU::prepare($sql));
        
        return $result;
    }
    
    public static function obtemDataMovimentacaoContratual($contractId)
    {
        
        $sql = 'SELECT TO_CHAR(stateTime,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') 
                   FROM acdMovementContract 
                  WHERE contractId = ?
               ORDER BY stateTime DESC
                  LIMIT 1';
        
        $result = SDatabase::query(SAGU::prepare($sql, array($contractId)));
        
        return $result;
    }
    
    /**
     * Obtém as disciplinas para o processo de classificação de matrícula
     * 
     * @param type $filters
     * @return type
     */
    public function obtemDisciplinasClassificacaoDeMatricula($filters)
    {
        $sql = "SELECT C.curricularcomponentid || ' / ' || C.curricularcomponentversion,
                       A.groupId,
                       D.name,
                       B.courseId || ' - ' || B.courseVersion || ' / ' || getturndescription(B.turnId) || ' / ' || getunitdescription(B.unitId),
		       A.vacant,
		       (SELECT count(*)
		          FROM acdEnroll AA
		         WHERE AA.groupId = A.groupId
		           AND ( AA.statusId = '" . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . "'::INTEGER 
		            OR AA.statusId = '" . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED') . "'::INTEGER )) as alunos
		  FROM acdGroup A
	    INNER JOIN acdLearningPeriod B
	            ON (A.learningPeriodId = B.learningPeriodId)
	    INNER JOIN acdCurriculum C
	            ON (A.curriculumId = C.curriculumId)
	    INNER JOIN acdCurricularComponent D
	            ON (C.curricularComponentId, C.curricularComponentVersion) = (D.curricularComponentId, D.curricularComponentVersion)
	         WHERE B.periodId = ?
	           AND B.courseId = ?
                   AND (SELECT COALESCE(count(*),0)
		          FROM acdEnroll AA
		         WHERE AA.groupId = A.groupId
		           AND ( AA.statusId = '" . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . "'::INTEGER 
		            OR AA.statusId = '" . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED') . "'::INTEGER )) > 0
              ORDER BY 3,4,2";
        
        $params[] = $filters->periodId;
        $params[] = $filters->courseId;
        
        $result = SDatabase::query(SAGU::prepare($sql, $params));
        
        return $result;
    }
    
    /**
     * Obtém alunos para o processo de classificação de matrícula
     * 
     * @param type $filters
     * @return type
     */
    public function obtemAlunosClassificacaoDeMatricula($filters)
    {
        $sql = "SELECT posicao,
                       codigo_aluno || ' - ' || nome_aluno AS aluno,
		       codigo_curso_contrato || '-' || versao_curso_contrato || '/' || turno_contrato || '/' || unidade_contrato AS ocorrencia_curso,
                       status_atual_na_disciplina_oferecida,
                       e_disciplina_do_curso,
                       coeficiente_de_classificacao,
                       data_da_matricula_na_disciplina_oferecida,
                       horario_da_matricula_na_disciplina_oferecida,
                       status_previsto,
                       codigo_contrato,
                       classificado_na_disciplina_oferecida
                  FROM cr_acd_classificacao_de_matricula(?)";
        
        $params[] = $filters->groupId;
        $result = SDatabase::query(SAGU::prepare($sql, $params));
        
        return $result;
    }
    
    /**
     * Cancela títulos, disciplinas e insere movimentação contratual para todos os alunos que estão e inadimplêntes
     * 
     */
    public static function cancelamentoDeAlunosInadimplentes()
    {
        SDatabase::beginTransaction();
        try
        {               
            SDatabase::execute("SELECT * FROM cancelamentoDeAlunosInadimplentes();");
            
            SDatabase::commit();
            
            return true;
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
        }
    }
    
    /**
     * Cancela disciplinas, títulos e insere movimentação contratual
     * 
     * @param type $contractId
     * @param type $enrollConfig
     * @param int $reasonCancellationId - Código da razão de cancelamento.
     */
    public static function executaCancelamento($contractId, AcdEnrollConfig $enrollConfig, $learningPeriod = NULL, $reasonCancellationId = NULL)
    {
        $busEnroll = new BusinessAcademicBusEnroll();
        $enrolls = array();
        
        // Obtém disciplinas pré-matriculadas ou matriculadas, dependendo se a pré-matrícula consome vaga
        $enrolls = self::obtemDisciplinas($contractId, $learningPeriod, $enrollConfig->preEnrollConsumeVacant);
        
        // Se existe disciplinas com o status de pre matricula, segue o precesso
        if ( $enrolls ) 
        {        
            foreach ( $enrolls as $enroll )
            {
                $learningPeriodId = self::obtemPeriodoLetivo($enroll[1]);

                //Exclui títulos
                $busInvoice = new BusinessFinanceBusInvoice();
                $titulos = $busInvoice->obterTitulosDaMatricula($contractId,  $learningPeriodId[0][0]);

                foreach( $titulos as $key => $invoiceId )
                {         
                    $busInvoice->deleteInvoice($invoiceId);
                }

                // Cancela as disciplinas que estão como pré-matriculadas ou matriculados
                $busEnroll->cancelEnroll($enroll[0], $reasonCancellationId);
            }
        }

        if ( $learningPeriodId[0][0] )
        {
            $data = new stdClass();
            $data->contractId = $contractId;
            $data->stateContractId = $enrollConfig->cancelamentoStateContractId;
            $data->reasonId = $enrollConfig->cancelamentoReasonId;
            $data->stateTime = SAGU::getDateNow();
            $data->learningPeriodId = $learningPeriodId[0][0];

            //Insere nova movimentação contratual    
            $busMovementContract = new BusinessAcademicBusMovementContract();
            $busMovementContract->insertMovementContract($data);
        }
    }
    
    /**
     * Obtém alunos pré-matriculados e inadimplêntes
     * 
     * @return type
     */
    public static function obtemContratosPreMatriculadosInadimplentes()
    {
        $sql = " SELECT DISTINCT B.contractId
		   FROM acdContract B 
                  WHERE isDefaulter(B.personId) ";
        
        $result = SDatabase::query(SAGU::prepare($sql, array()));
        
        return $result;
    }
    
    /**
     * Obtém as disciplinas oferecidas vinculadas ao curriculum
     * 
     * @param vinculos (array)
     * @param disciplina (stdClass)
     * 
     * @return array
     */
    public function obterOferecidasVinculadas($vinculo, $disciplina)
    {
        //Obter ocorrencia
        $sql = "SELECT courseId,
                                       courseVersion,
                                       turnId,
                                       unitId,
                                       curricularComponentId,
                                       curricularComponentVersion
                                  FROM acdCurriculum
                                 WHERE curriculumId = ?";
        $chavesCurso = SDatabase::query($sql, array($vinculo[0]));

        //Obter periodo letivo
        $sql = "SELECT learningPeriodId
                                  FROM acdLearningPeriod
                                 WHERE courseId = ?
                                   AND courseVersion = ?
                                   AND turnId = ?
                                   AND unitId = ?
                                   AND periodId = ?";
        $periodoLetivo = SDatabase::query($sql, array($chavesCurso[0][0], $chavesCurso[0][1], $chavesCurso[0][2], $chavesCurso[0][3], $disciplina->periodId));

        //Obtem disciplinas oferecidas
        $sql = "SELECT groupId
                                  FROM acdGroup
                                 WHERE learningPeriodId = ?
                                   AND curriculumId = ?";
        $oferecidas = SDatabase::query($sql, array($periodoLetivo[0][0], $vinculo[0]));

        return $oferecidas;
    }

}

?>
