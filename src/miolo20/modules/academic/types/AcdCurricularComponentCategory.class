<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Categoria de disciplina
 *
 * @author Equipe SOLIS [sagu@solis.coop.br]
 *
 * \b Maintainers: \n
 * Equipe SOLIS [sagu@solis.coop.br]
 *
 * @since
 * Class created on 27/03/2012
 *
 */
class AcdCurricularComponentCategory extends SType
{
    /**
     * @var integer
     * 
     */
    protected $curricularComponentCategoryId;
    
    /**
     * @var string
     * 
     */
    protected $description;
    
    
    public function __construct($curricularComponentCategoryId = NULL)
    {
        if ( (strlen($curricularComponentCategoryId)  >  0) )
        {
            $this->curricularComponentCategoryId = $curricularComponentCategoryId;
            $this->populate();
        }
    }

    /**
     *
     * @param stdClass $filters
     * ->groupid Filtra apenas pelas categorias que estao em uma disciplina e possuem credito configurado
     * 
     * @return AcdCurricularComponentCategory 
     */
    public static function search($filters = null)
    {
        $sql = 'SELECT A.curricularComponentCategoryId
                  FROM acdcurricularcomponentcategory A';
        $where = '';
        $args = array();

        if ( isset($filters) )
        {
            foreach ( $filters  as  $key => $value )
            {
                if ( $key == 'groupId' )
                {
                    $where .= ' AND EXISTS(
                        SELECT 1
                          FROM unit_acdGroup G
                    INNER JOIN unit_acdcurriculum C
                            ON G.curriculumId = C.curriculumId
                    INNER JOIN acdcurricularcomponentcategorycredit CC
                            ON CC.curricularcomponentcategoryid = A.curricularcomponentcategoryid
                         WHERE G.groupId = ?) ';
                    $args[] = $value;
                }
                else if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
                {
                    $where.=" AND A.{$key} = '{$value}'";
                }
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY A.description ';
        $result = SDatabase::query($sql, $args);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new AcdCurricularComponentCategory($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT curricularComponentCategoryId,
                       description
                  FROM acdcurricularcomponentcategory';
        $args = array();

        if ( strlen($filters->curricularComponentCategoryId)  >  0 )
        {
            $where.=' AND curricularComponentCategoryId ILIKE UNACCENT(?)';
            $args[] = $filters->curricularComponentCategoryId . '%';
        }

        if ( strlen($filters->description)  >  0 )
        {
            $where.=' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY description ';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       curricularComponentCategoryId,
                       description
                  FROM acdcurricularcomponentcategory
                 WHERE curricularComponentCategoryId = ?';
        $result = SDatabase::query($sql, array($this->curricularComponentCategoryId));

        if ( !strlen($result[0][0]) )
        {
//            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName,
             $this->dateTime,
             $this->ipAddress,
             $this->curricularComponentCategoryId,
             $this->description) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $filters = new stdClass();
        $filters->curricularComponentCategoryId = $this->curricularComponentCategoryId;
        $rows = AcdCurricularComponentCategory::search($filters);

        if ( count($rows) ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO acdcurricularcomponentcategory 
                            (curricularComponentCategoryId, description)
                     VALUES (?, ?)';

        $args = array($this->curricularComponentCategoryId, $this->description);
        $result = SDatabase::execute($sql, $args);

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE acdcurricularcomponentcategory
                   SET description = ?
                 WHERE curricularComponentCategoryId = ?';
        
        $args = array( $this->description, $this->curricularComponentCategoryId );
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->curricularComponentCategoryId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM acdcurricularcomponentcategory
                      WHERE curricularComponentCategoryId = ?';
        $args = array($this->curricularComponentCategoryId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->curricularComponentCategoryId = null;
        }

        return $result;
    }
    
    
    public static function listRecords($filters)
    {
        $ret = array();
        
        foreach ( self::search($filters) as $row )
        {
            $ret[$row->curricularComponentCategoryId] = $row->description;
        }
        
        return $ret;
    }
}
?>