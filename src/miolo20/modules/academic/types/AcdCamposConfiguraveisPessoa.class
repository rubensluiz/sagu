<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * \b Maintainers: \n
 * Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * @since
 * Class created on 17/01/2012
 *
 */
class AcdCamposConfiguraveisPessoa extends SType
{
    
    const MATRICULA = 'M';
    const PROCESSO_SELETIVO = 'P';
    
    const VALIDADOR_NENHUM = 'NENHUM';
    const VALIDADOR_REQUERIDO = 'REQUERIDO';
    
    /**
     * @AttributeType text
     * 
     */
    public $campo;
    /**
     * @AttributeType boolean
     * 
     */
    public $editavel;
    /**
     * @AttributeType text
     * 
     */
    public $validador;
    /**
     * @AttributeType integer
     * 
     */
    public $ordem;
    /**
     * @AttributeType character
     * 
     */
    public $submodulo;
    public $todos;
    public function __construct($campo = NULL)
    {   
        if ( (strlen($campo)  >  0) )
        {
            $this->campo = $campo;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT campo
                  FROM acdcamposconfiguraveispessoa';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY campo ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new AcdCamposConfiguraveisPessoa($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT 
                       campo,
                       campo,
                       editavel,
                       validador,
                       ordem,
                       submodulo
                  FROM acdcamposconfiguraveispessoa';
        $params = array();

        if ( MUtil::getBooleanValue($filters->todos) )
        {
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }
        else
        {
            if ( strlen($filters->campo)  >  0 )
            {
                $where.=' AND UNACCENT(campo) ILIKE UNACCENT(?) ';
                $params[] = $filters->campo.'%';
            }

            if ( strlen($filters->editavel)  >  0 )
            {
                $where.=' AND editavel = ?';
                $params[] = $filters->editavel;
            }

            if ( strlen($filters->validador)  >  0 )
            {
                $where.=' AND validador = ?';
                $params[] = $filters->validador;
            }

            if ( strlen($filters->ordem)  >  0 )
            {
                $where.=' AND ordem = ?';
                $params[] = $filters->ordem;
            }

            if ( strlen($filters->submodulo)  >  0 )
            {
                $where.=' AND submodulo = ?';
                $params[] = $filters->submodulo;
            }

            if ( strlen($where)  >  0 )
            {
                $sql.=' WHERE '.substr($where, 4).'
                       ORDER BY campo';

                $result = SDatabase::query(SAGU::prepare($sql, $params));
            }
            else
            {
                $result = SDatabase::query(SAGU::prepare($sql, $params));
            }
        }

        return $result;
    }

    private function populate()
    {
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT campo,
                       editavel,
                       validador,
                       ordem,
                       submodulo,
                       userName,
                       ipAddress,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM acdcamposconfiguraveispessoa
                 WHERE campo = ?';
        $result = SDatabase::query($sql, array($this->campo));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list(   $this->campo, 
                $this->editavel, 
                $this->validador, 
                $this->ordem,
                $this->submodulo,
                $this->userName,
                $this->ipAddress,
                $this->dateTime) = $result[0];
    }
    
    private function exist()
    {
        $sql = 'SELECT campo
                  FROM acdcamposconfiguraveispessoa
                 WHERE upper(campo) = ?';
        $result = SDatabase::query($sql, array($this->campo));

        if ( !strlen($result[0][0]) )
        {
            return false;
        }

        return true;
    }

    public function save()
    {
        if($this->exist())
        {
            $ok = $this->update();
        }
        else
        {
            $ok = $this->insert();
        }
        
        return $ok;
    }

    private function insert()
    {
        $sql = 'INSERT INTO acdcamposconfiguraveispessoa 
                            (campo, editavel, validador, ordem, submodulo)
                     VALUES (?, ?, ?, ?, ?)';
        $params = array($this->campo, $this->editavel, $this->validador, $this->ordem, $this->submodulo);
        $result = SDatabase::execute($sql, $params);
        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE acdcamposconfiguraveispessoa
                   SET editavel = ?,
                       validador = ?,
                       ordem = ?,
                       submodulo = ?
                 WHERE campo = ?';
        $params = array($this->editavel, $this->validador, $this->ordem, $this->submodulo, $this->campo);
        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->campo)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM acdcamposconfiguraveispessoa
                      WHERE campo = ?';
        $params = array($this->campo);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->campo = null;
        }

        return $result;
    }
    
    /**
     * Salva ou atualiza os dados da pessoa
     * 
     * @param Object $data
     * @return
     */
    public static function salvarCampos($data, $mensagens=false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $busPerson = new BusinessBasicBusPerson();
        $busPhysicalPersonStudent = new BusinessBasicBusPhysicalPersonStudent();
        $busDocument = new BusinessBasicBusDocument();
        $dataDocument = new stdClass();
        $dataPerson = $busPerson->getPerson($data->personId);
        $data->name = $data->personName;
        
        //troca a senha
        if($data->passwordAtual)
        {
            if(md5($data->passwordAtual) != $dataPerson->password)
            {
                if($mensagens)
                {
                    new MMessageError(_M('Sua senha atual n&atilde;o esta correta. Tente novamente.'));
                }
                if( ($data->password != $data->password2) && $data->password && $data->password2 )
                {
                    if($mensagens)
                    {
                        new MMessageError(_M('A senha repetida n&atilde;o esta correta. Tente novamente'));
                    }
                    $data->password = null;
                }
            }
        }
        
        if ( strlen($data->personId) > 0 )
        {
            $busPhysicalPerson->updatePhysicalPerson($data, false);
            if ( $busPerson->isPersonStudent($data->personId) )
            {
                $busPhysicalPersonStudent->updatePhysicalPersonStudent($data);
            }
        }
        
        //atualiza documentos
        if($data->CPF)
        {
            if($busDocument->hasDocument( $data->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') ))
            {
                $dataDocument->content = $data->CPF;
                $dataDocument->personId = $data->personId;
                $dataDocument->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
                $dataDocument->isDelivered = DB_TRUE;
                $ok = $busDocument->updateDocument($dataDocument);
            }
            else
            {
                $dataDocument->personId = $data->personId;
                $dataDocument->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');
                $dataDocument->content = $data->CPF;
                $dataDocument->isDelivered = DB_TRUE;
               
                $ok = $busDocument->insertDocument($dataDocument);
            }
        }
        
        if($data->rg)
        {
            if($busDocument->hasDocument( $data->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG') ))
            {
                $dataDocument->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG');
                $dataDocument->personId = $data->personId;
                $dataDocument->content = $data->rg;
                $dataDocument->organ = $data->rgOrgao;
                $dataDocument->isDelivered = DB_TRUE;
                
                $busDocument->updateDocument($dataDocument);
            }
            else
            {
                $dataDocument->personId = $data->personId;
                $dataDocument->documentTypeId = SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG');
                $dataDocument->content = $data->rg;
                $dataDocument->organ = $data->rgOrgao;
                $dataDocument->isDelivered = DB_TRUE;
                
                $busDocument->insertDocument($dataDocument);
            }
        }
        
        if($mensagens)
        {
            new MMessageSuccess(_M('Dados salvos com sucesso.'));
        }
    }

    public static function campos($campo=null)
    {
        $MIOLO = MIOLO::getInstance();
        
        $campos['NOME'] = array(
            'label' => _M('Nome'),
            'key' => 'personName',
            'hint' => 'Informe o nome',
            'grupo' => 'geral'
          );
        
        $campos['EMAIL'] = array(
            'label' => _M('E-mail'),
            'key' => 'email',
            'hint' => 'Informe o e-mail',
            'validador' => 'MEmailValidator',
            'grupo' => 'geral'
        );
        
        $campos['EMAILALTERNATIVO'] = array(
            'label' => _M('E-mail alternativo'),
            'key' => 'emailAlternative',
            'hint' => 'Informe o e-mail alternativo',
            'validador' => 'MEmailValidator',
            'grupo' => 'geral'
        );
        
        $campos['RG'] = array(
            'label' => _M('Identidade (RG)'),
            'key' => 'rg',
            'hint' => 'Informe a identidade (RG)',
            'validador' => 'MRequiredValidator',
            'grupo' => 'geral'
        );
        
        $campos['ORG'] = array( 
            'label' => _M('Org&atilde;o expedidor do RG'),
            'key' => 'rgOrgao',
            'hint' => 'Informe o &oacute;rg&atilde;o expedidor do RG',
            'validador' => 'MRequiredValidator',
            'grupo' => 'geral'
        );
        
        $campos['CPF'] = array(
            'label' => _M('CPF'),
            'key' => 'CPF',
            'hint' => 'Informe o CPF',
            'validador' => 'MCPFValidator',
            'grupo' => 'geral'
        );
        
        $campos['NACIONALIDADE'] = array(
            'label'=>_M('Nacionalidade'),
            'key' => 'countryIdBirth',
            'hint' => 'Informe sua nacionalidade',
            'validador' => 'MRequiredValidator',
            'grupo' => 'geral'
        );

        $campos['SEXO'] = array(
            'label' => _M('Sexo'),
            'key' => 'sex',
            'hint' => 'Informe o sexo',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MSelection',
            'data' => SAGU::listSex(),
            'grupo' => 'geral'
        );
        
        $campos['DATADENASCIMENTO'] = array(
            'label' => _M('Data de nascimento'),
            'key' => 'dateBirth',
            'hint' => 'Informe a data de nascimento',
            'validador' => 'MDateDMYValidator',
            'tipo' => 'MCalendarField',
            'grupo' => 'geral'
        );
        
        $campos['NOMEDAMAE'] = array(
            'label' => _M('Nome da m&atilde;e'),
            'key' => 'motherName',
            'hint' => 'Informe o nome da mãe',
            'validador' => 'MRequiredValidator',
            'grupo' => 'geral'
        );
        
        $campos['NOMEDOPAI'] = array(
            'label'=>_M('Nome do pai'),
            'key' => 'fatherName',
            'hint' => 'Informe o nome do pai',
            'validador' => 'MRequiredValidator',
            'grupo' => 'geral'

        );        
        
        $campos['TELEFONERESIDENCIAL'] = array( 
            'label' => _M('Telefone residencial'),
            'key' => 'residentialPhone',
            'hint' => 'Informe o telefone celular ou residencial',
            'validador' => 'MPHONEValidator',
            'grupo' => 'geral'
        );
        
        $campos['TELEFONECOMERCIAL'] = array(
            'label' => _M('Telefone comercial'),
            'key' => 'workPhone',
            'hint' => 'Informe o telefone comercial',
            'validador' => 'MPHONEValidator',
            'grupo' => 'geral'
        );
        
        $campos['TELEFONECELULAR'] = array(
            'label' => _M('Telefone celular'),
            'key' => 'cellPhone',
            'hint' => 'Informe o telefone celular',
            'validador' => 'MPHONEValidator',
            'grupo' => 'geral'
        );
        
        $busMS = new BusinessBasicBusMaritalStatus();
        
        $campos['ESTADOCIVIL'] = array(
            'label' => _M('Estado civil'),
            'key' => 'maritalStatusId',
            'hint' => 'Selecione o estado civil',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MSelection',
            'data' => $busMS->listMaritalStatus(),
            'grupo' => 'geral'
        );
        
        $busEO = new BusinessBasicBusEthnicOrigin();
        
        $campos['ORIGEMETNICA'] = array( 
            'label' => _M('Origem &eacute;tnica'),
            'key' => 'ethnicOriginId',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MSelection',
            'data' => $busEO->listEthnicOrigin(),
            'grupo' => 'geral'
        );

        $campos['DESEJARECEBEREMAIL'] = array(
            'label'=>_M('Deseja receber e-mail'),
            'key' => 'sentEmail',
            'tipo' => 'MRadioButtonGroup',
            'data' => SAGU::listYesNo(1),
            'grupo' => 'geral'
        );
        
        $busSN = new BusinessBasicBusSpecialNecessity();
        
        $campos['NECESIDADEESPECIAL'] = array(
            'label' => _M('Necessidade especial'),
            'key' => 'specialNecessityId',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MSelection',
            'data' => $busSN->listSpecialNecessity(),
            'grupo' => 'geral'
        );
        
        $campos['DESCRICAODANECESSIDADEESPECIAL'] = array(
            'label' => _M('Descri&ccedil;&atilde;o da necessidade especial'),
            'key' => 'specialNecessityDescription',
            'hint' => 'Informe a descrição da(s) necessidade(s) especial(is)',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MTextField',
            'grupo' => 'geral'
       );


        $businessCountry = new BusinessBasicBusCountry();
        $campos['PAIS'] = array(
            'label'=>_M('Pa&iacute;s'),
            'key' => 'countryId',
            'hint' => 'Informe o País',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MSelection',
            'data' => $businessCountry->listCountry(),
            'grupo' => 'endereco'
        );

        $busState = new BusinessBasicBusState();
        $campos['UF'] = array(
            'label'=>_M('Estado'),
            'key' => 'stateId',
            'hint' => 'Informe o estado',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MSelection',
            'data' => $busState->listState(),
            'grupo' => 'endereco'
        );

        $cidade = new BusinessBasicBusCity();
        $campos['CIDADE'] = array(
            'label' => _M('Cidade'),
            'key' => 'cityId',
            'hint' => 'Informe a cidade',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MSelection',
            'data' => $cidade->listCity(),
            'grupo' => 'endereco'
        );

        $campos['BAIRRO'] = array(
            'label'=>_M('Bairro'),
            'key' => 'neighborhood',
            'hint' => 'Informe o bairro',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MTextField',
            'grupo' => 'endereco'
        );
        
        $busLocationType = new BusinessBasicBusLocationType();
        $campos['LOCATIONTYPE'] = array(
            'label' => _M('Tipo de logradouro'),
            'key' => 'locationTypeId',
            'hint' => 'Informe o tipo de logradouro da pessoa',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MSelection',
            'data' => $busLocationType->listLocationType(),
            'grupo' => 'endereco'
        );

        $campos['LOCATION'] = array(
            'label' => _M('Logradouro'),
            'key' => 'location',
            'hint' => 'Informe o logradouro.',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MTextField',
            'grupo' => 'endereco'
        );

        $campos['NUMERO'] = array(
            'label'=>_M('N&uacute;mero'),
            'key' => 'number',
            'hint' => 'Informe o número',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MTextField',
            'grupo' => 'endereco'
        );
        
        $campos['COMPLEMENTO'] = array(
            'label' => _M('Complemento'),
            'key' => 'complement',
            'hint' => 'Informe o complemento, se houver.',
            'tipo' => 'MTextField',
            'grupo' => 'endereco'
        );
        
        $campos['CEP'] = array(
            'label'=>_M('CEP'),
            'key' => 'zipCode',
            'hint' => 'Informe o CEP',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MTextField',
            'grupo' => 'endereco'
        );
        
        $campos['INSTITUICAO'] = array(
            'label' => _M('Institui&ccedil;&atilde;o'),
            'key' => 'institutionName',
            'hint' => 'Informe o nome da instituição',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MTextField',
            'grupo' => 'formacao'
        );
        
        $campos['CURSO'] = array(
            'label' => _M('Curso'),
            'key' => 'courseName',
            'hint' => 'Informe o nome do curso',
            'validador' => 'MRequiredValidator',
            'tipo' => 'MTextField',
            'grupo' => 'formacao'
        );
        
        $campos['ANO'] = array(
            'label' => _M('Ano'),
            'key' => 'conclusionYear',
            'hint' => 'Informe o ano de conclusão',
            'validador' => 'MIntegerValidator',
            'tipo' => 'MTextField',
            'grupo' => 'formacao'
        );
        
        $campos['TITULACAO'] = array(
            'label'=>_M('Titula&ccedil;&atilde;o'),
            'key' => 'degreeName',
            'hint' => 'Informe a titulação',
            'tipo' => 'MTextField',
            'grupo' => 'formacao'
        );
        
        $busFL = new BusinessAcademicBusFormationLevel();
        
        $campos['NIVELDEFORMACAO'] = array(
            'label'=>_M('Nivel de forma&ccedil;&atilde;o'),
            'key' => 'formationLevelId',
            'hint' => 'Informe o nível de formação',
            'tipo' => 'MSelection',
            'data' => $busFL->listFormationLevel(),
            'grupo' => 'formacao'
        );
        
        $campos['INSTITUICAOTRABALHO'] = array(
            'label' => _M('Institui&ccedil;&atilde;o em que trabalha'),
            'key' => 'workEmployerName',
            'hint' => 'Informe o nome da instituição em que trabalha',
            'tipo' => 'MTextField',
            'validador' => 'MRequiredValidator',
            'grupo' => 'emprego'
        );
        
        $campos['CARGO'] = array(
            'label' => _M('Cargo'),
            'key' => 'workFunction',
            'hint' => 'Informe o cargo exercido no trabalho',
            'tipo' => 'MTextField',
            'validador' => 'MRequiredValidator',
            'grupo' => 'emprego'
        );
        
        
        $campos['INICIO'] = array(
            'label' => _M('In&iacute;cio'),
            'key' => 'workStartDate',
            'hint' => 'Informe a data de início',
            'tipo' => 'MCalendarField',
            'validador' => 'MDateDMYValidator',
            'grupo' => 'emprego'
        );
        
        $campos['TERMINO'] = array(
            'label' => _M('T&eacute;rmino'),
            'key' => 'workEndDate',
            'hint' => 'Informe a data de término',
            'tipo' => 'MCalendarField',
            'validador' => 'MDateDMYValidator',
            'grupo' => 'emprego'
        );
        
        $campos['SENHA'] = array(
            'label' => _M('Senha'),
            'key' => 'password',
            'hint' => 'Digite uma nova senha',
            'tipo' => 'MTextField',
            'validador' => 'MRequiredValidator',
            'grupo' => 'senha'
        );
        
        if($campo)
        {
            return $campos[$campo];
        }
        
        return $campos;
    }


    public static function listarCamposDisponiveis($removerExistentes=false)
    {
        $campos = array('NOME'=>_M('Nome'),
                        'EMAIL'=>_M('E-mail'),
                        'EMAILALTERNATIVO'=>_M('E-mail alternativo'),
                        'RG'=>_M('RG'),
                        'ORG'=>_M('Orgão RG'),
                        'CPF'=>_M('CPF'),
                        'NACIONALIDADE'=>_M('Nacionalidade'),
                        'SEXO'=>_M('Sexo'),
                        'DATADENASCIMENTO'=>_M('Data de nascimento'),
                        'NOMEDAMAE'=>_M('Nome da mãe'),
                        'NOMEDOPAI'=>_M('Nome do pai'),
                        'TELEFONERESIDENCIAL'=>_M('Telefone residencial'),
                        'TELEFONECOMERCIAL'=>_M('Telefone comercial'),
                        'TELEFONECELULAR'=>_M('Telefone celular'),
                        'ESTADOCIVIL'=>_M('Estado civil'),
                        'ORIGEMETNICA'=>_M('Origem etnica'),
                        'DESEJARECEBEREMAIL'=>_M('Deseja receber e-mail'),
                        'ESTADOCIVIL'=>_M('Estado civil'),
                        'NECESIDADEESPECIAL'=>_M('Necessidade especial'),
                        'DESCRICAODANECESSIDADEESPECIAL'=>_M('Descrição da necessidade especial'),
                        'CIDADE'=>_M('Cidade'),
                        'UF'=>_M('UF'),
                        'PAIS'=>_M('País'),
                        'BAIRRO'=>_M('Bairro'),
                        'LOCATIONTYPE'=>_M('Tipo de logradouro'),
                        'LOCATION'=>_M('Logradouro'),
                        'NUMERO'=>_M('Numero'),
                        'COMPLEMENTO'=>_M('Complemento'),
                        'CEP'=>_M('CEP'),
                        'INSTITUICAO'=>_M('Instituição'),
                        'CURSO'=>_M('Curso'),
                        'ANO'=>_M('Ano'),
                        'TITULACAO'=>_M('Logradouro'),
                        'NIVELDEFORMACAO'=>_M('Nivel de formação'),            
                        'INSTITUICAOTRABALHO'=>_M('Instituição em que trabalha'),
                        'CARGO'=>_M('Cargo'),
                        'INICIO'=>_M('Início'),
                        'TERMINO'=>_M('Término'),
                        'SENHA'=>_M('Senha')
            );
        
        if($removerExistentes)
        {
            foreach(self::search() as $o)
            {
                unset($campos[$o->campo]);
            }
        }
       
        return $campos;
    }
    
    public static function listValidators()
    {
        $validators = array( self::VALIDADOR_NENHUM => _M('Nenhum',$module),
                            self::VALIDADOR_REQUERIDO => _M('Campo requerido',$module),
                            );
        
        return $validators;
    }
    
    public static function listSubmodulos()
    {
        $submodulo = array( self::PROCESSO_SELETIVO => _M('Processo seletivo',$module),
                            self::MATRICULA => _M('Matrícula',$module)
                            );
        
        return $submodulo;
    }
    
    public static function getFieldsValidators()
    {
        $campos = self::listarCamposDisponiveis();
        foreach(self::search() as $r)
        {
            if($r->validador==DB_TRUE)
            {
                $fields[] = self::getFieldValidator($r);
            }
        }
        
        return $fields;
    }
    
    public static function getFieldValidator($field)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $campo = self::campos($field->campo);
        $label = $campo['label'];
        $key = $campo['key'];
        $validador = $campo['validador'];
        
        $label = htmlentities($label);
        
        if($validador=='MEmailValidator')
        {
            $validator = new MEmailValidator($key, _M($label, $module), 'required');
        }
        elseif($validador=='MCPFValidator')
        {
            $validator = new MCPFValidator($key, _M($label, $module), 'required');
        }
        elseif($validador=='MDateDMYValidator')
        {
            $validator = new MDateDMYValidator($key, _M($label, $module), 'required');
        }
        elseif($validador=='MPHONEValidator')
        {
            $validator = new MPHONEValidator($key, _M($label, $module), 'required');
        }
        elseif($validador=='MCEPValidator')
        {
            $validator = new MCEPValidator($key, _M($label,$module), 'required');
        }
        else
        {
            $validator = new MRequiredValidator($key, _M($label, $module));
        }
        
        return $validator;
    }

    public static function getFields($personId=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);   

        //pega os dados dos campos
        if($personId)
        {
            //Instancia da pessoa física
            $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
            $data = $busPhysicalPerson->getPhysicalPerson($personId);

            //Instancia dos documentos da pessoa
            $filters = new stdClass();
            $filters->personId = $personId;
            $busDocument = new BusinessBasicBusDocument();
            $dataDocument = $busDocument->searchDocument($filters, true);
            
            $data->personName = $data->name;

            foreach ((array)$dataDocument as $document)
            {
                if($document->documentTypeId == SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'))
                {
                    $data->CPF = $document->content;
                }
                elseif($document->documentTypeId == SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'))
                {
                    $data->rg = $document->content;
                    $data->rgOrgao = $document->organ;
                }
            }
        }
        
        $campos = self::campos();
        
        $grupo = 'geral';
        
        foreach($campos as $k=>$campo)
        {
            $filters = new stdClass();
            $filters->campo = $k;
            if($r = self::searchGrid($filters))
            { 
                if($campo['grupo']!=$grupo)
                {
                    $grupo = $campo['grupo'];
                    $fields[] = self::fieldTitutlo($grupo);
                }
                
                if($c = $campo['key'])
                {
                    $value = $data->$c;
                }
                
                if($c == 'countryId' || $c == 'stateId')
                {
                    continue;
                }

                $fields[] = self::getField($campo,$r[0][2],$r[0][3],$value, $data);
            }
        }
        
        return $fields;
    }
    
    public static function getField($campo,$editavel,$validar,$value, $dataaux=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $label = $campo['label'];
        $key = $campo['key'];
        $hint = $campo['hint'];
        $data = $campo['data'];
        $tipo = $campo['tipo'];
        $validador = $campo['validador'];
        $item = $campo['item'];
        $modulo = $campo['modulo'];
        
        $labelField = new MLabel(_M($label, $module) . ':');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $labelField->setClass('m-caption m-caption');
        
        if($key == 'password')
        {
            return self::fieldPassword();
        }
        
        if($key == 'cityId')
        {
            if ( strlen($dataaux->cityId) > 0 )
            {
                $data->countryId = $dataaux->countryId;
                $data->stateId = $dataaux->stateId;
                $data->cityId = $dataaux->cityId;
                $data->changed = 'cityId';
            }
            return new MDiv('divGeographicData', self::fieldCidade($data));
        }
        
        if($tipo=='MSelection')
        {
            $tipoField = new MSelection($key, $value, null, $data);
        }
        elseif($tipo=='MCalendarField')
        {
            $tipoField = new MCalendarField($key, $value, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        }
        elseif($tipo=='MRadioButtonGroup')
        {
            $tipoField = new MRadioButtonGroup($key, '', $data, $value, null, 'horizontal');
            $tipoField->setShowLabel(false);
        }
        elseif($tipo=='SLookup')
        {
            $options = array(
                'module' => $modulo,
                'item' => $item,
                'label' => $label
            );
            $tipoField = new SLookupContainer($key, $value, $options);
        }
        else
        {
            $tipoField = new MTextField($key, $value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        }
        
        if($editavel==DB_FALSE)
        {
            $tipoField->setReadOnly(true);
        }
        
        $tipoField->setJsHint(_M($hint, $module));
        
        if($validar==DB_TRUE)
        {
            $labelField->setClass('mLabel m-caption m-caption-required');
        }
        
        //Abaixo os campos que ficaram desalinhados s?o ajustados
        //Caso necessite mais um, passar nome do campo como parametro de ajuste
        //Nao esquecer de verificar se o campo já nao tem um cssClass
        if ($tipoField->name == 'cellPhone' 
         || $tipoField->name == 'complement')
        {
            strlen($labelField->cssClass) > 0 ? null : $labelField->setClass('mLabel m-caption');
        }

        return new MHContainer('Cnt'.rand(), array($labelField, $tipoField));
    }
    
    public static function fieldPassword()
    {
        $labelPassword = new MLabel(_M('Senha atual') . ':');
        $labelPassword->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $labelPassword->setClass('m-caption');
        $passwordField = new MPasswordField('passwordAtual', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        
        $fields[] = new MHContainer('Cnt'.rand(), array($labelPassword, $passwordField));
        
        $labelPassword = new MLabel(_M('Nova senha') . ':');
        $labelPassword->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $labelPassword->setClass('m-caption');
        $passwordField = new MPasswordField('password', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        
        $fields[] = new MHContainer('Cnt'.rand(), array($labelPassword, $passwordField));
        
        $labelPassword = new MLabel(_M('Repita a senha') . ':');
        $labelPassword->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $labelPassword->setClass('m-caption');
        $passwordField = new MPasswordField('password2', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        
        $fields[] = new MHContainer('Cnt'.rand(), array($labelPassword, $passwordField));
        
        return new Mdiv('',$fields);
    }
    
    public static function fieldCidade($inArgs, $work=false)
    {   
        $MIOLO = MIOLO::getInstance();
        $module = 'services';

        // utilizar somente campos úteis.
        $args = new stdClass();
        $args->changed = $inArgs->changed;

        $changed = explode('W', $args->changed);

        if ( ( $work ) || ( sizeof($changed) == 2 ) )
        {
            $args->countryId = $inArgs->countryIdWork;
            $args->stateId = $inArgs->stateIdWork;
            $args->cityId = $inArgs->cityIdWork;

            $countryId = 'countryIdWork';
            $stateId = 'stateIdWork';
            $cityId = 'cityIdWork';

            $div = 'divGeographicWorkData';

            $labelCountry = 'contryWorkLabel';
            $labelState = 'stateWorkLabel';
            $labelCity = 'cityWorkLabel';
        }
        else
        {
            $args->countryId = $inArgs->countryId;
            $args->stateId = $inArgs->stateId;
            $args->cityId = $inArgs->cityId;

            $countryId = 'countryId';
            $stateId = 'stateId';
            $cityId = 'cityId';

            $div = 'divGeographicData';

            $labelCountry = 'contryLabel';
            $labelState = 'stateLabel';
            $labelCity = 'cityLabel';
        }

        $busCountry = new BusinessBasicBusCountry();
        $busState = new BusinessBasicBusState();
        $busCity = new BusinessBasicBusCity();

        // se o que mudou foi a cidade
        if ( ($args->changed == $cityId) || ($work) )
        {
            if ( strlen($args->cityId) > 0 )
            {
                $city = $busCity->getCity($args->cityId);
                
                $args->stateId = $city->stateId;
                $args->countryId = $city->countryId;
            }
        }
        // se o que mudou foi o estado
        else if ( $args->changed == $stateId )
        {
            // limpa todos os campos
            $args->cityId = '';
        }
        // se o que mudou foi o país
        else if ( $args->changed == $countryId )
        {
            // limpa todos os campos
            $args->cityId = '';
            $args->stateId = '';
        }
        else
        {
            // limpa todos os campos
            $args->cityId = '';
            $args->stateId = '';
            $args->countryId = SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID');
        }

        // carregar países
        $filters = new stdClass();
        $filters->name = '%';

        $countries = $busCountry->searchCountry($filters);

        // carregar estados
        $filters = new stdClass();
        $filters->countryId = $args->countryId;

        $states = $busState->searchState($filters);

        // carregar cidades
        if ( strlen($args->stateId) > 0 || count($states) == 0 )
        {
            if ( strlen($args->stateId) > 0 )
            {
                $filters->stateId = $args->stateId;
            }
            $cities = $busCity->searchCity($filters);
        }

        /*
         * Instanciar todos os campos do componente
         */
        
        $fields = array();

        $width = SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE');
        
        $lblCountryId = new MTextLabel($labelCountry, _M('Pa&iacute;s:'));
        $lblCountryId->setClass('mLabel m-caption m-caption-required');
        $lblCountryId->addAttribute('style', "font-weight: normal; width: {$width}px;");
        $lblCountryId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtCountryId = new MSelection($countryId, $args->countryId, null, $countries);
        $txtCountryId->addAttribute('onchange', SForm::getAjaxAction('fillGeographicData', $div, false, array('changed' => $countryId)));
        $fields[] = new MHContainer('hctCountry', array($lblCountryId, $txtCountryId));

        $lblStateId = new MTextLabel($labelState, _M('Estado'));
        $lblStateId->setClass('mLabel m-caption m-caption-required');
        $lblStateId->addAttribute('style', "font-weight: normal; width: {$width}px;");
        $lblStateId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtStateId = new MSelection($stateId, $args->stateId, null, $states);
        $txtStateId->addAttribute('onchange', SForm::getAjaxAction('fillGeographicData', $div, false, array('changed' => $stateId)));
        $fields[] = new MHContainer('hctCountry', array($lblStateId, $txtStateId));

        $lblCityId = new MTextLabel($labelCity, _M('Cidade:'));
        $lblCityId->setClass('mLabel m-caption m-caption-required');
        $lblCityId->addAttribute('style', "font-weight: normal; width: {$width}px;");
        $lblCityId->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $txtCityId = new MSelection($cityId, $args->cityId, null, $cities);
        $fields[] = new MHContainer('hctCountry', array($lblCityId, $txtCityId));
        
        return $fields;
    }
    
    public static function fieldTitutlo($grupo)
    {        
        if($grupo=='endereco')
        {
            $titulo = _M('Endere&ccedil;o');
        }
        elseif($grupo=='formacao')
        {
            $titulo = _M('Forma&ccedil;&atilde;o escolar');
        }
        elseif($grupo=='emprego')
        {
            $titulo = _M('Dados do v&iacute;nculo empregat&iacute;cio');
        }
        elseif($grupo=='senha')
        {
            $titulo = _M('Nova senha');
        }
        
        return new MDiv('titulo'.$grupo,'<div style="border-bottom: 1px dashed #1C89BF; color: #1C89BF; display: block; float: left; font-family: arial; font-size: 15pt; font-weight: 700; margin: 0 50px 10px 0; padding: 20px 0 10px; text-align: left; width: 100%;">'.$titulo.'</div>');
    }
}


?>