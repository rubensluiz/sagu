<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário pai do passo a passo TurnTransfer (transferencia de turno)
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 02/09/2011
 *
 **/

class AcdTransferencia extends SType
{
    protected $_utilizaNovoPadrao = true;
    
    // Atributos da tabela AcdTransferencia
    
    protected $transferenciaId;
    
    protected $contratoDeOrigemId;
    
    protected $contratoDeDestinoId;
    
    protected $turmaDeOrigemId;
    
    protected $periodId;
    
    protected $turmaDeDestinoId;
    
    protected $motivoId;
    
    protected $aproveitouDisciplinasEncerradas;
    
    protected $aproveitouDisciplinasMatriculadas;
    
    protected $aproveitouNotasDeMatriculas;
    
    protected $aproveitouFrequenciasDeMatriculas;
    
    protected $aproveitouComunsEntreCursos;
    
    protected $aproveitouVinculosEntreCursos;
    
    protected $aproveitouMatriculadasDoDestino;
    
    protected $aproveitouMatriculadasDoOriginal;
    
    protected $logsProcessoDeTransferencia;
    
    const CONFIG_MATRICULDAS_ORIGINAL = 'original';
    const CONFIG_MATRICULDAS_DESTINO = 'destino';
    
    public function __construct($id = null)
    {
        parent::__construct($id);
    }
    
    public function beforeFind(MSQL $sql)
    {
        $sql->setColumns( 'pp.name AS personname, pp.personid as personid' );
        $sql->addInnerJoin('acdcontract c', 'c.contractid = acdtransferencia.contratoDeOrigemId');
        $sql->addInnerJoin('ONLY basphysicalpersonstudent pp', 'pp.personid = c.personid');
        $sql->setOrderBy('personname, personid');
        
        $busca = $this->getAttribute('busca');
        
        if ( strlen($busca) > 0 )
        {
            $sql->setWhereOr('pp.name ILIKE UNACCENT(?)', array('%'.$busca.'%'));
            
            if ( is_numeric($busca) )
            {
                $sql->setWhereOr('pp.personid = ?', array($busca));
            }
        }
    }
    
    public function findManyAsArray(\MSQL $sql = null)
    {
        $rows = parent::findManyAsArray($sql);
        
        return $rows;
    }
    
    /**
     * Insere dados de uma nova transferência de ocorrência de curso
     * 
     * @param type $filters
     * @return type
     */
    public function insert($filters)
    {
        $sql = "INSERT INTO acdTransferencia
                           (contratoDeOrigemId,
                            contratoDeDestinoId,
                            turmaDeOrigemId,
                            periodoId,
                            turmaDeDestinoId,
                            motivoId,
                            aproveitouDisciplinasEncerradas,
                            aproveitouDisciplinasMatriculadas,
                            aproveitouNotasDeMatriculas,
                            aproveitouFrequenciasDeMatriculas,
                            aproveitouComunsEntreCursos,
                            aproveitouVinculosEntreCursos,
                            logsProcessoDeTransferencia,
                            aproveitouMatriculadasDoDestino,
                            aproveitouMatriculadasDoOriginal)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        
        $args[] = $filters->contratoDeOrigemId;
        $args[] = $filters->contratoDeDestinoId;
        $args[] = $filters->turmaDeOrigemId;
        $args[] = $filters->periodoId;
        $args[] = $filters->turmaDeDestinoId;
        $args[] = $filters->motivoId;
        $args[] = $filters->aproveitouDisciplinasEncerradas;
        $args[] = $filters->aproveitouDisciplinasMatriculadas;
        $args[] = $filters->aproveitouNotasDeMatriculas;
        $args[] = $filters->aproveitouFrequenciasDeMatriculas;
        $args[] = $filters->aproveitouComunsEntreCursos;
        $args[] = $filters->aproveitouVinculosEntreCursos;
        $args[] = $filters->logsProcessoDeTransferencia;
        $args[] = $filters->aproveitouMatriculadasDoDestino;
        $args[] = $filters->aproveitouMatriculadasDoOriginal;
        
        $result = SDatabase::execute($sql, $args);
        
        return $result;
    }
    
}