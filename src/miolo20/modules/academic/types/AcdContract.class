<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Name [name@solis.coop.br]
 *
 * \b Maintainers: \n
 * Name [name@solis.coop.br]
 *
 * @since
 * Class created on 13/04/2012
 *
 */
class AcdContract extends SType
{
    protected $_associations = array(
        'movimentacoesContratuais' => array(
            'mode' => 'many',
            'typeClass' => 'AcdMovementContract',
            'joinColumn' => 'contractId',
            'orderBy' => 'stateTime',
            'saveRelateds' => true,
        ),
    );
    
    public $movimentacoescontratuais = array();
    
    /**
     * @AttributeType integer
     * Codigo do contrato
     */
    public $contractId;
    /**
     * @AttributeType integer
     * Codigo da pessoa
     */
    public $personId;
    /**
     * @AttributeType character varying
     * Codigo do curso
     */
    public $courseId;
    /**
     * @AttributeType integer
     * Versao do curso
     */
    public $courseVersion;
    /**
     * @AttributeType integer
     * Codigo do turno
     */
    public $turnId;
    /**
     * @AttributeType integer
     * Codigo do campus
     */
    public $unitId;
    /**
     * @AttributeType date
     * Data de formatura
     */
    public $formationDate;
    /**
     * @AttributeType character varying
     * PerÃ­odo de formatura
     */
    public $formationPeriodId;
    /**
     * @AttributeType date
     * Data de conclusao
     */
    public $conclusionDate;
    /**
     * @AttributeType date
     * Data da apostila
     */
    public $emendsDate;
    /**
     * @AttributeType date
     * Data de diploma
     */
    public $diplomaDate;
    /**
     * @AttributeType integer
     * Dia do vencimento
     */
    public $maturityDay;
    /**
     * @AttributeType boolean
     * Aluno Ouvinte
     */
    public $isListener = DB_FALSE;
    /**
     * @AttributeType boolean
     * Pedido de Grau AcadÃªmico (Formatura)
     */
    public $isRequestAcademicDegree = DB_FALSE;
    /**
     * @AttributeType double precision
     * MÃ©dia Global - Ingresso cursos sequenciais
     */
    public $globalAverage;
    /**
     * @AttributeType character varying
     * Numero do contrato
     */
    public $contractNumber;
    /**
     * @AttributeType text
     * Observacao
     */
    public $obs;
    /**
     * @AttributeType integer
     * Numero de parcelas a serem geredas nas matrÃ­culas do aluno
     */
    public $parcelsNumber;
    /**
     * @AttributeType integer
     * 
     */
    public $enadeStatusId;
    /**
     * @AttributeType integer
     * 
     */
    public $bankAccountId;
    /**
     * @AttributeType boolean
     * 
     */
    public $exploitEnrollsInTransfer;
    /**
     * @AttributeType integer
     * Codigo do contrato interno
     */
    public $internalContractId;
    /**
     * @AttributeType character varying
     * Codigo interno da ocorrência do curso
     */
    public $internalCourseOccurrenceId;
    /**
     * @AttributeType integer
     * Codigo interno da ocorrência da versão de curso
     */
    public $internalcourseoccurrenceversion;
    /**
     * @AttributeType integer
     * Codigo do curso externo
     */
    public $externalCourseId;
    /**
     * @AttributeType integer
     * Codigo da unidade
     */
    public $internalUnitId;
    /**
     * @AttributeType integer
     * Codigo do turno
     */
    public $internalTurnId;
    /**
     * @AttributeType character varying
     * Período de conclusão do curso externo
     */
    public $externalConclusionPeriod;
    /**
     * @AttributeType integer
     * 
     */
    public $cityId;
    /**
     * @AttributeType integer
     * Código da instituição de conclusão externa
     */
    public $externalConclusionInstitutionId;
    /**
     * @AttributeType date
     * Data de conclusão
     */
    public $externalConclusionDate;
    /**
     * @AttributeType integer
     * 
     */
    public $year;
    /**
     * @AttributeType integer
     * 
     */
    public $institutionId;
    /**
     * @AttributeType integer
     * Código da inscrição no processo seletivo.
     */
    public $subscriptionId;
    /**
     * @AttributeType text
     * nome do curso
     */
    public $courseName;
    
    /**
     * @var string
     */
    public $personName;
    
    public function __construct($contractId = NULL)
    {
        if ( (strlen($contractId)  >  0) )
        {
            $this->contractId = $contractId;
            $this->populate();
        }
    }
    
    public function __get($name)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if($name=='curso')
        {
            $busCourse = new BusinessAcademicBusCourse();
            $this->curso = $busCourse->getCourse($this->courseId);
        }
        
        return parent::__get($name);
    }
    
    public static function search($filters)
    {
        $sql = 'SELECT contractid
                  FROM unit_acdContract';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY contractid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new Acdcontract($result[$i][0]);
        }

        return $retVal;
    }
    
    /**
     * Busca os contratos ativo para da pessoa para o periodo letivo vigente
     *
     * @param stdClass $filters - Filtros
     * @param boolean $viaSecretaria - Diz se é via secretaria, então desconsidera algumas validações.
     * 
     * @return (array): Return an array with all the matching records
     */
    public static function listAvailableContractsForEnroll($filters, $viaSecretaria = false)
    {
        $sql = 'SELECT DISTINCT
                       A.contractId,
                       A.courseId,
                       A.courseVersion,
                       B.shortName AS courseShortName,
                       A.turnId,
                       A.unitId,
                       B.name,
                       D.learningPeriodId,
                       D.periodId,
                       D.description
                  FROM unit_acdContract A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
            INNER JOIN acdStateContract C
                    ON (C.stateContractId = getContractState(A.contractId))
            INNER JOIN unit_acdlearningperiod D
                    ON (A.courseId = D.courseId AND A.courseVersion = D.courseVersion AND A.turnId = D.turnId AND A.unitId = D.unitId)
            INNER JOIN unit_acdPeriodEnrollDate G
                    ON G.learningperiodid = D.learningperiodid
                 WHERE C.isCloseContract = false
                   AND NOW()::DATE BETWEEN g.beginDate AND g.endDate';
        
        if ( !$viaSecretaria )
        {
            $sql .= " AND A.isListener = false ";
        }

        if ( strlen($filters->contractId)  >  0 )
        {
            $sql .=' AND A.contractid = ?';
            $params[] = $filters->contractId;
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $sql .=' AND A.personid = ?';
            $params[] = $filters->personId;
        }
 
        if ( $filters )
        {
            $sql.= ' ORDER BY B.name';
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }
                
        return $result;
    }

    public static function searchGrid($filters  =  null)
    {
        $acdContract = "unit_acdContract";
        $acdcourseoccurrence = "unit_acdcourseoccurrence";
        
        // Para webservices.
        if ( $isWebServices )
        {
            $acdContract = "acdContract";
            $acdcourseoccurrence = "acdcourseoccurrence";    
        }     
        
        $coulumnsCourse = ($returnCourseOccurrence) ? ', A.courseId, A.courseVersion, A.turnId, A.unitId' : '';
        
        $sql = "SELECT A.contractId,
                       A.personId,
                       B.name,
                       A.courseId || ' / ' || A.courseVersion,
                       C.name,
                       A.courseVersion,
                       D.description,
                       E.description,
                       null,
                       G.employeeId,
                       G.isPayrollDiscount
                       {$coulumnsCourse}
                  FROM {$acdContract} A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN {$acdcourseoccurrence} F
                    ON (       A.courseId      = F.courseId
                         AND   A.courseVersion = F.courseVersion
                         AND   A.turnId        = F.turnId
                         AND   A.unitId        = F.unitId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
             LEFT JOIN finPayrollDiscountTarget G
                    ON ( A.contractId = G.contractId )";        
        
        $params = array();

        if ( strlen($filters->contractId)  >  0 )
        {
            $where.=' AND A.contractid = ?';
            $params[] = $filters->contractId;
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $where.=' AND A.personid = ?';
            $params[] = $filters->personId;
        }
        
        if ( strlen($filters->personName)  >  0 )
        {
            $where.= ' AND UNACCENT(B.name) ILIKE UNACCENT(UPPER(?)) ';
            $params[] = $filters->personName . '%';
        }

        if ( strlen($filters->courseId)  >  0 )
        {
            $where.=' AND UNACCENT(A.courseid) ILIKE UNACCENT(?) ';
            $params[] = $filters->courseId.'%';
        }

        if ( strlen($filters->courseVersion)  >  0 )
        {
            $where.=' AND A.courseversion = ?';
            $params[] = $filters->courseVersion;
        }

        if ( strlen($filters->turnId)  >  0 )
        {
            $where.=' AND A.turnid = ?';
            $params[] = $filters->turnId;
        }

        if ( strlen($filters->unitId)  >  0 )
        {
            $where.=' AND A.unitid = ?';
            $params[] = $filters->unitId;
        }

        if ( strlen($filters->formationDate)  >  0 )
        {
            $where.=' AND A.formationdate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->formationDate;
        }

        if ( strlen($filters->formationPeriodId)  >  0 )
        {
            $where.=' AND UNACCENT(A.formationperiodid) ILIKE UNACCENT(?) ';
            $params[] = $filters->formationPeriodId.'%';
        }

        if ( strlen($filters->conclusionDate)  >  0 )
        {
            $where.=' AND A.conclusiondate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->conclusionDate;
        }

        if ( strlen($filters->emendsDate)  >  0 )
        {
            $where.=' AND A.emendsdate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->emendsDate;
        }

        if ( strlen($filters->diplomaDate)  >  0 )
        {
            $where.=' AND A.diplomadate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->diplomaDate;
        }

        if ( strlen($filters->maturityDay)  >  0 )
        {
            $where.=' AND A.maturityday = ?';
            $params[] = $filters->maturityDay;
        }

        if ( strlen($filters->isListener)  >  0 )
        {
            $where.=' AND A.islistener = ?';
            $params[] = $filters->isListener;
        }

        if ( strlen($filters->isRequestAcademicDegree)  >  0 )
        {
            $where.=' AND A.isrequestacademicdegree = ?';
            $params[] = $filters->isRequestAcademicDegree;
        }

        if ( strlen($filters->globalAverage)  >  0 )
        {
            $where.=' AND A.globalaverage = ?';
            $params[] = $filters->globalAverage;
        }

        if ( strlen($filters->contractNumber)  >  0 )
        {
            $where.=' AND UNACCENT(A.contractnumber) ILIKE UNACCENT(?) ';
            $params[] = $filters->contractNumber.'%';
        }

        if ( strlen($filters->obs)  >  0 )
        {
            $where.=' AND UNACCENT(A.obs) ILIKE UNACCENT(?) ';
            $params[] = $filters->obs.'%';
        }

        if ( strlen($filters->parcelsNumber)  >  0 )
        {
            $where.=' AND A.parcelsnumber = ?';
            $params[] = $filters->parcelsNumber;
        }

        if ( strlen($filters->enadeStatusId)  >  0 )
        {
            $where.=' AND A.enadestatusid = ?';
            $params[] = $filters->enadeStatusId;
        }

        if ( strlen($filters->bankAccountId)  >  0 )
        {
            $where.=' AND A.bankaccountid = ?';
            $params[] = $filters->bankAccountId;
        }

        if ( strlen($filters->exploitEnrollsInTransfer)  >  0 )
        {
            $where.=' AND A.exploitenrollsintransfer = ?';
            $params[] = $filters->exploitEnrollsInTransfer;
        }

        if ( strlen($filters->internalContractId)  >  0 )
        {
            $where.=' AND A.internalcontractid = ?';
            $params[] = $filters->internalContractId;
        }

        if ( strlen($filters->internalCourseOccurrenceId)  >  0 )
        {
            $where.=' AND UNACCENT(A.internalcourseoccurrenceid) ILIKE UNACCENT(?) ';
            $params[] = $filters->internalCourseOccurrenceId.'%';
        }

        if ( strlen($filters->internalCourseOccurrenceVersion)  >  0 )
        {
            $where.=' AND A.internalcourseoccurrenceversion = ?';
            $params[] = $filters->internalCourseOccurrenceVersion;
        }

        if ( strlen($filters->externalCourseId)  >  0 )
        {
            $where.=' AND A.externalcourseid = ?';
            $params[] = $filters->externalCourseId;
        }

        if ( strlen($filters->internalUnitId)  >  0 )
        {
            $where.=' AND A.internalunitid = ?';
            $params[] = $filters->internalUnitId;
        }

        if ( strlen($filters->internalTurnId)  >  0 )
        {
            $where.=' AND A.internalturnid = ?';
            $params[] = $filters->internalTurnId;
        }

        if ( strlen($filters->externalConclusionPeriod)  >  0 )
        {
            $where.=' AND UNACCENT(A.externalconclusionperiod) ILIKE UNACCENT(?) ';
            $params[] = $filters->externalConclusionPeriod.'%';
        }

        if ( strlen($filters->cityId)  >  0 )
        {
            $where.=' AND A.cityid = ?';
            $params[] = $filters->cityId;
        }

        if ( strlen($filters->externalConclusionInstitutionId)  >  0 )
        {
            $where.=' AND A.externalconclusioninstitutionid = ?';
            $params[] = $filters->externalConclusionInstitutionId;
        }

        if ( strlen($filters->externalConclusionDate)  >  0 )
        {
            $where.=' AND A.externalconclusiondate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->externalConclusionDate;
        }

        if ( strlen($filters->year)  >  0 )
        {
            $where.=' AND A.year = ?';
            $params[] = $filters->year;
        }

        if ( strlen($filters->institutionId)  >  0 )
        {
            $where.=' AND A.institutionid = ?';
            $params[] = $filters->institutionId;
        }

        if ( strlen($filters->subscriptionId)  >  0 )
        {
            $where.=' AND A.subscriptionid = ?';
            $params[] = $filters->subscriptionId;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY A.contractid';
            
            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       contractid,
                       personid,
                       courseid,
                       courseversion,
                       turnid,
                       unitid,
                       TO_CHAR(formationdate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       formationperiodid,
                       TO_CHAR(conclusiondate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(emendsdate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(diplomadate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       maturityday,
                       islistener,
                       isrequestacademicdegree,
                       globalaverage,
                       contractnumber,
                       obs,
                       parcelsnumber,
                       enadestatusid,
                       bankaccountid,
                       exploitenrollsintransfer,
                       internalcontractid,
                       internalcourseoccurrenceid,
                       internalcourseoccurrenceversion,
                       externalcourseid,
                       internalunitid,
                       internalturnid,
                       externalconclusionperiod,
                       cityid,
                       externalconclusioninstitutionid,
                       TO_CHAR(externalconclusiondate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       year,
                       institutionid,
                       subscriptionid,
                       getCourseName(courseId)
                  FROM acdContract
                 WHERE contractid = ?';
        $result = SDatabase::query($sql, array($this->contractId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->username, $this->datetime, $this->ipaddress, $this->contractId, $this->personId, $this->courseId, $this->courseVersion, $this->turnId, $this->unitId, $this->formationDate, $this->formationPeriodId, $this->conclusionDate, $this->emendsDate, $this->diplomaDate, $this->maturityDay, $this->isListener, $this->isRequestAcademicDegree, $this->globalAverage, $this->contractNumber, $this->obs, $this->parcelsNumber, $this->enadeStatusId, $this->bankAccountId, $this->exploitEnrollsInTransfer, $this->internalContractId, $this->internalCourseOccurrenceId, $this->internalCourseOccurrenceVersion, $this->externalCourseId, $this->internalUnitId, $this->internalTurnId, $this->externalConclusionPeriod, $this->cityId, $this->externalConclusionInstitutionId, $this->externalConclusionDate, $this->year, $this->institutionId, $this->subscriptionId, $this->courseName) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->contractId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO acdcontract 
                            (contractid,
                             personid,
                             courseid,
                             courseversion,
                             turnid,
                             unitid,
                             formationdate,
                             formationperiodid,
                             conclusiondate,
                             emendsdate,
                             diplomadate,
                             maturityday,
                             islistener,
                             isrequestacademicdegree,
                             globalaverage,
                             contractnumber,
                             obs,
                             parcelsnumber,
                             enadestatusid,
                             bankaccountid,
                             exploitenrollsintransfer,
                             internalcontractid,
                             internalcourseoccurrenceid,
                             internalcourseoccurrenceversion,
                             externalcourseid,
                             internalunitid,
                             internalturnid,
                             externalconclusionperiod,
                             cityid,
                             externalconclusioninstitutionid,
                             externalconclusiondate,
                             year,
                             institutionid,
                             subscriptionid)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             ?,
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             COALESCE(?, FALSE),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             ?,
                             ?,
                             ?)';
        $sqlPK = "SELECT nextval('seq_contractid'::regclass)";
        $result = SDatabase::query($sqlPK);
        $contractid = $result[0][0];
        $params = array($contractid, $this->personId, $this->courseId, $this->courseVersion, $this->turnId, $this->unitId, $this->formationDate, $this->formationPeriodId, $this->conclusionDate, $this->emendsDate, $this->diplomaDate, $this->maturityDay, $this->isListener, $this->isRequestAcademicDegree, $this->globalAverage, $this->contractNumber, $this->obs, $this->parcelsNumber, $this->enadeStatusId, $this->bankAccountId, $this->exploitEnrollsInTransfer, $this->internalContractId, $this->internalCourseOccurrenceId, $this->internalCourseOccurrenceVersion, $this->externalCourseId, $this->internalUnitId, $this->internalTurnId, $this->externalConclusionPeriod, $this->cityId, $this->externalConclusionInstitutionId, $this->externalConclusionDate, $this->year, $this->institutionId, $this->subscriptionId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->contractId = $contractid;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE acdcontract
                   SET personid = ?,
                       courseid = ?,
                       courseversion = ?,
                       turnid = ?,
                       unitid = ?,
                       formationdate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       formationperiodid = ?,
                       conclusiondate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       emendsdate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       diplomadate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       maturityday = ?,
                       islistener = ?,
                       isrequestacademicdegree = ?,
                       globalaverage = ?,
                       contractnumber = ?,
                       obs = ?,
                       parcelsnumber = ?,
                       enadestatusid = ?,
                       bankaccountid = ?,
                       exploitenrollsintransfer = ?,
                       internalcontractid = ?,
                       internalcourseoccurrenceid = ?,
                       internalcourseoccurrenceversion = ?,
                       externalcourseid = ?,
                       internalunitid = ?,
                       internalturnid = ?,
                       externalconclusionperiod = ?,
                       cityid = ?,
                       externalconclusioninstitutionid = ?,
                       externalconclusiondate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       year = ?,
                       institutionid = ?,
                       subscriptionid = ?
                 WHERE contractid = ?';
        
        $params = array(
            $this->personId,
            $this->courseId,
            $this->courseVersion,
            $this->turnId,
            $this->unitId,
            $this->formationDate,
            $this->formationPeriodId,
            $this->conclusionDate,
            $this->emendsDate,
            $this->diplomaDate,
            $this->maturityDay,
            $this->isListener,
            $this->isRequestAcademicDegree,
            $this->globalAverage,
            $this->contractNumber,
            $this->obs,
            $this->parcelsNumber,
            $this->enadeStatusId,
            $this->bankAccountId,
            SAGU::NVL($this->exploitEnrollsInTransfer, DB_FALSE),
            $this->internalContractId,
            $this->internalCourseOccurrenceId,
            $this->internalCourseOccurrenceVersion,
            $this->externalCourseId,
            $this->internalUnitId,
            $this->internalTurnId,
            $this->externalConclusionPeriod,
            $this->cityId,
            $this->externalConclusionInstitutionId,
            $this->externalConclusionDate,
            $this->year,
            $this->institutionId,
            $this->subscriptionId,
            $this->contractId);
        
        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->contractId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM acdcontract
                      WHERE contractid = ?';
        $params = array($this->contractId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->contractId = null;
        }

        return $result;
    }
    
    
    /**
     * Obtém a lista de contratos relacionados entre si (caso de transferências)
     *
     * @param $contractId (int): código do contrato
     * @return (array) Vetor com os códigos dos contratos relacionados entre si
     */
    public function getRelatedContracts($contractId=null)
    {
        if(!$contractId)
        {
            $contractId = $this->contractId;
        }

        $result = array();
        $result[] = $contractId;

        // Se o contrato deve considerar disciplinas de cursos transferidos, obtém o contrato do qual se transferiu
        if ( $this->exploitEnrollsInTransfer == DB_TRUE )
        {
            $sql = 'SELECT B.value
                      FROM acdMovementContract A
                INNER JOIN acdMovementContractComplement B
                        ON (B.stateContractId = A.stateContractId AND
                            B.contractId = A.contractId AND
                            B.stateTime = A.stateTime)
                     WHERE A.contractId = ?
                       AND A.stateContractId IN (' . SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_INTERNAL_TRANSFER_FROM') . ')
                       AND B.stateContractFieldId IN (' . SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_INTERNAL_TRANSFER_FROM_FIELD') . ')
                  ORDER BY A.stateTime DESC LIMIT 1';

            $res = SDatabase::query(SAGU::prepare($sql, $this->contractId));

            if ( strlen($res[0][0]) > 0 )
            {
                $result = array_merge($result, $this->getRelatedContracts($res[0][0]));
            }
        }

        return $result;
    }
    
    /**
     * @return boolean 
     */
    public static function alunoCalouro($contractId, $periodId = null)
    {
        $busContract = new BusinessAcademicBusContract();
        
        if ( strlen($periodId) > 0 )
        {
            $contract = $busContract->isFreshmanByPeriod($contractId, $periodId);
        }
        else
        {
            $contract = $busContract->isFreshman($contractId);
        }
        
        return $contract;
    }
    
    /**
     *
     * @return boolean
     */
    public function alunoCalouroAtual($periodId = null)
    {
        $busContract = new BusinessAcademicBusContract();
        
        if ( strlen($periodId) > 0 )
        {
            $isFreshman = $busContract->isFreshmanByPeriod($this->contractId, $periodId);
        }
        else
        {
            $isFreshman = $busContract->isFreshman($this->contractId);
        }
        
        return $isFreshman;
    }
    
    /**
     * @return boolean
     */
    public function alunoVerificaPrimeiraParcela(AcdEnrollConfig $conf, $learningPeriodId = null )
    {
        if ( strlen($learningPeriodId) > 0 )
        {
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $learningPeriod = $busLearningPeriod->getLearningPeriod($learningPeriodId);
        }
        
        if ( !$conf->preMatriculaAtivada() )
        {
            return false;
        }
        
        return ( $conf->preEnrollCheckFirstPayment == AcdEnrollConfig::PREMATRICULA_AMBOS ) ||
               ( $this->alunoCalouroAtual($learningPeriod->periodId) && $conf->preEnrollCheckFirstPayment == AcdEnrollConfig::PREMATRICULA_CALOURO ) ||
               ( !$this->alunoCalouroAtual($learningPeriod->periodId) && $conf->preEnrollCheckFirstPayment == AcdEnrollConfig::PREMATRICULA_VETERANO )
        ;
    }
    
    /**
     * @return boolean
     */
    public function alunoVerificaConfirmacaoPortal(AcdEnrollConfig $conf, $learningPeriodId = null)
    {
        if ( strlen($learningPeriodId) > 0 )
        {
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $learningPeriod = $busLearningPeriod->getLearningPeriod($learningPeriodId);
        }
        
        if ( !$conf->preMatriculaAtivada() )
        {
            return false;
        }
        
        return ( $conf->preEnrollWebConfirmation == AcdEnrollConfig::PREMATRICULA_AMBOS ) ||
               ( $this->alunoCalouroAtual($learningPeriod->periodId) && $conf->preEnrollWebConfirmation == AcdEnrollConfig::PREMATRICULA_CALOURO ) ||
               ( !$this->alunoCalouroAtual($learningPeriod->periodId) && $conf->preEnrollWebConfirmation == AcdEnrollConfig::PREMATRICULA_VETERANO )
        ;
    }
    
    /**
     * @return AcdMovementContract
     */
    public function obterUltimaMovimentacaoContratual()
    {
        return end($this->movimentacoescontratuais);
    }
    
    /**
     * @return AcdContract
     */
    public function findActiveContractByPerson($personId)
    {
        $msql = new MSQL();
        $msql->setDb(SDatabase::getInstance());
        
        $subSelect = $msql->setColumns("A.contractId")
                          ->setTables("acdContract A INNER JOIN acdMovementContract B USING (contractId)")
                          ->setWhereAnd("A.personId = C.personId")
                          ->setOrderBy("isContractClosed(A.contractId) ASC, B.stateTime DESC")
                          ->setLimit(1)
                          ->select();
        
        return $this->findOne($this->msql()
                                   ->setColumns("C.contractId")
                                   ->setTables("acdContract C")
                                   ->addEqualCondition("C.personId", $personId)
                                   ->setWhereAnd("C.contractId = ({$subSelect})"));
    }
    
    /**
     * Obtém o porque de a listagem de contratos disponíveis ter retornado false.
     * 
     * @param int $personId - Código da pessoa
     * 
     * @return String $msg - Mensagem do porque da falta de contrato
     */
    public static function obterRazaoDeInexistenciaDeContrato($personId)
    {
        //Inicia SQL
        $sql = "SELECT DISTINCT
                      A.contractId,
                      A.courseId,
                      A.courseVersion,
                      A.turnId,
                      A.unitId,
                      C.isCloseContract,
                      NOW()::DATE BETWEEN G.beginDate AND G.endDate AS periodoVigente
                 FROM unit_acdContract A
           INNER JOIN acdCourse B
                   ON (B.courseId = A.courseId)
           INNER JOIN acdStateContract C
                   ON (C.stateContractId = getContractState(A.contractId))
           INNER JOIN unit_acdlearningperiod D
                   ON (A.courseId = D.courseId 
                   AND A.courseVersion = D.courseVersion 
                   AND A.turnId = D.turnId 
                   AND A.unitId = D.unitId)
           INNER JOIN unit_acdPeriodEnrollDate G
                   ON G.learningperiodid = D.learningperiodid
                WHERE A.personId = ? ";
        $args[] = $personId;
        $contratos = SDatabase::query($sql, $args);

        
        // Monta mensagem de erro
        $msgErro = '';
        foreach ( $contratos as $contrato )
        {
            $msgErro .= "<strong>Contrato {$contrato[0]} ({$contrato[1]}/{$contrato[2]}/{$contrato[3]}/{$contrato[4]}) não está disponível para matrícula pelos seguintes motivos:</strong>";
            if ( $contrato[5] == DB_TRUE )
            {
                $msgErro .= "<br>* O estado do contrato está atualmente fechado.";
            }
            
            if ( $contrato[6] == DB_FALSE )
            {
                $msgErro .= "<br>* Não existe um período de matrícula vigente para a ocorrência de curso do contrato.";
            }
            
            $msgErro .= "<br><br>";
        }
        return _M($msgErro);
    }
    
    /**
     * Identifica se contrato está ou não ativo.
     * 
     * @param int $contractId
     * @return boolean
     */
    public static function contratoEstaAtivo($contractId)
    {
        $sql = "SELECT * FROM isContractClosed(?)";
        
        $return = SDatabase::query($sql, array($contractId));
        
        return $return[0][0] == DB_FALSE;
    }
    
    /**
     * Retorna o semestre do aluno atual. Caso passado um código de período pega
     * o semestre do contrato no período.
     * 
     * @param int $contractId
     * @param string $periodId
     * @return int
     */
    public static function obterSemestreDoContrato( $contractId, $periodId = NULL )
    {
        $sql = " SELECT * FROM get_semester_contract(?)";
        $args[] = $contractId;
        
        if ( strlen($periodId) > 0 )
        {
            $sql = " SELECT * FROM get_semester_contract_period(?, ?)";
            $args[] = $periodId;
        }
        
        $return = SDatabase::query($sql, $args);
        
        return $return[0][0];
    }
}


?>
