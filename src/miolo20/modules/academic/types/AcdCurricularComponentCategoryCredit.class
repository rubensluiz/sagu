<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Categoria de disciplina
 *
 * @author Equipe SOLIS [sagu@solis.coop.br]
 *
 * \b Maintainers: \n
 * Equipe SOLIS [sagu@solis.coop.br]
 *
 * @since
 * Class created on 27/03/2012
 *
 */
class AcdCurricularComponentCategoryCredit extends SType
{
    /**
     * @var integer
     */
    protected $curricularComponentCategoryCreditId;
    
    /**
     * @var string
     */
    protected $curricularComponentId;
    
    /**
     * @var int
     */
    protected $curricularComponentVersion;
    
    /**
     * @var string
     */
    protected $curricularComponentCategoryId;
    
    /**
     * @var int
     */
    protected $credits;
    
    
    public function __construct($curricularComponentCategoryCreditId = NULL)
    {
        if ( (strlen($curricularComponentCategoryCreditId)  >  0) )
        {
            $this->curricularComponentCategoryCreditId = $curricularComponentCategoryCreditId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT curricularComponentCategoryCreditId
                  FROM acdcurricularcomponentcategorycredit';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY curricularcomponentcategoryid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new AcdCurricularComponentCategoryCredit($result[$i][0]);
        }

        return $retVal;
    }
    
    public static function searchCredits()
    {
        $sql = 'SELECT credits 
                  FROM acdCurricularComponentCategoryCredit;';
        
        $result = SDatabase::query($sql);
        
        return $result;
    }


    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql =  'SELECT username,
                        TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                        ipaddress,
                        curricularComponentCategoryCreditId,
                        curricularcomponentid,  
                        curricularcomponentversion,
                        curricularcomponentcategoryid,
                        credits
                  FROM acdcurricularcomponentcategorycredit
                 WHERE curricularComponentCategoryCreditId = ?';
        $result = SDatabase::query($sql, array($this->curricularComponentCategoryCreditId));

        if ( !strlen($result[0][0]) )
        {
//            throw new Exception(_M('Registro inexistente.', $module));
        }

        list(   $this->userName,
                $this->dateTime,
                $this->ipAddress,
                $this->curricularComponentCategoryCreditId,
                $this->curricularComponentId,  
                $this->curricularComponentVersion,
                $this->curricularComponentCategoryId,
                $this->credits) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->curricularComponentCategoryCreditId) == 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sqlPK = "SELECT nextval('acdcurricularcomponentcategor_curricularcomponentcategorycr_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $pkey = $result[0][0];
        
        $sql = 'INSERT INTO acdcurricularcomponentcategorycredit 
                            (curricularComponentCategoryCreditId,
                             curricularcomponentid,  
                             curricularcomponentversion,
                             curricularcomponentcategoryid,
                             credits)
                     VALUES (?, ?, ?, ?, ?)';

        $args = array($pkey,
                      $this->curricularComponentId,
                      $this->curricularComponentVersion,
                      $this->curricularComponentCategoryId,
                      $this->credits);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->curricularComponentCategoryCreditId = $pkey;
        }
        
        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE acdcurricularcomponentcategorycredit
                   SET curricularcomponentid = ?,
                       curricularcomponentversion = ?,
                       curricularcomponentcategoryid = ?,
                       credits = ?
                 WHERE curricularComponentCategoryCreditId = ?';
        
        $args = array($this->curricularComponentId,
                      $this->curricularComponentVersion,
                      $this->curricularComponentCategoryId,
                      $this->credits,
                      $this->curricularComponentCategoryCreditId );
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->curricularComponentCategoryCreditId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM acdcurricularcomponentcategorycredit
                      WHERE curricularComponentCategoryCreditId = ?';
        $args = array($this->curricularComponentCategoryCreditId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->curricularComponentCategoryCreditId = null;
        }

        return $result;
    }
    
    
    /**
     * Obtem array no formato curricularcomponentcategoryid => credits
     *
     * @param stdClass $filters 
     * 
     * @return array
     */
    public static function listCredits($filters)
    {
        $ret = array();

        foreach ( (array) self::search($filters) as $row )
        {
            $ret[$row->curricularComponentCategoryId] = $row->credits;
        }
        
        return $ret;
    }
}
?>