<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCurricularComponent table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdCurricularComponentSimpleList extends MGrid
{
   /**
    * Class constructor
    */
    public function __construct($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $home   = MIOLO::getCurrentAction();
        
        $columns = array(
                          new MGridColumn( _M('Código da matrícula', $module), 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Código da disciplina oferecida', $module), 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Código do período', $module), 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Código', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Disciplina', $module), 'left', false, null, true, null, false ),
                          new MGridColumn( _M('Horário', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Carga horária', $module) . ' - ' . _M('Créditos', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Nota', $module), 'right', true, null, false, null, false ),
                          new MGridColumn( _M('Frequência', $module), 'right', true, null, false, null, false ),
                          new MGridColumn( _M('Código do estado', $module), 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Estado', $module),  'center', true, null, true, null, false ),
                          new MGridColumn( _M('Turma', $module), 'left', true, null, false, null, false )
                        );

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        if (is_array($filters))
        {
            foreach ( $filters as $k => $v )
            {
                $opts[$k] = $v;
            }
        }
        $url = $MIOLO->getActionURL( $module, "$home:search", null, $opts );
        parent::__construct( null, $columns, $url, SAGU::getParameter('BASIC', 'LISTING_NREGS'), 0, 'gridCurricularComponent' );
        
        $this->setRowMethod($this, 'myRowMethod');
        
        $this->setIsScrollable();
        $this->eventHandler();
    }
    
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $groupId = $row[1];
        
        $columns[4]->control[$i]->setBold(true);
        $columns[3]->control[$i]->setValue('[' . $row[3] . ']');
        $columns[3]->control[$i]->setBold(true);
        
        //Horários
        $busSchedule = new BusinessAcademicBusSchedule();
        
        $schedules = $busSchedule->getGroupScheduleDataWithRooms($groupId);
            
        if (count($schedules) > 0)
        {
            unset($scheduleArray);
            
            foreach ($schedules as $scheduleInfo)
            {
                unset($scheduleStr);
                if (strlen($scheduleInfo[0]) > 0)
                {
                    $scheduleStr = $scheduleInfo[0];
                }
                
                if (strlen($scheduleStr) > 0)
                {
                    $scheduleStr .= strlen($scheduleInfo[1]) > 0 ? '-' . $scheduleInfo[1] : '';
                }
                else
                {
                    $scheduleStr = $scheduleInfo[1];
                }
                
                if (strlen($scheduleStr) > 0)
                {
                    $scheduleArray[] = $scheduleStr;
                }
            }
            
            unset($str);
            if (count($scheduleArray) > 0)
            {
                $str = implode('/', array_unique($scheduleArray));
            }
            
            $columns[5]->control[$i]->setValue( $str );
        }
        
        //Estado
        switch ($row[8])
        {
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED'):
                $columns[9]->control[$i]->setColor(SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_FREE'));
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED'):
                $columns[9]->control[$i]->setColor(SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_ENROLLED'));
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED'):
                $columns[9]->control[$i]->setColor(SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_DISABLED'));
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED'):
                $columns[9]->control[$i]->setColor(SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_ENROLLED'));
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DISAPPROVED'):
                $columns[9]->control[$i]->setColor(SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_CANCELLED'));
            break;
            default:
            break;
        }
    }
}

?>
