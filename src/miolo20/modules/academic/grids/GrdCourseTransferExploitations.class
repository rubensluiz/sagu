<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCondition table
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/09/2005
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdCourseTransferExploitations extends MGrid
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        
        $module = MIOLO::_request('module');
        
        $busCurriculum = new BusinessAcademicBusCurriculum();
        $busCourseVersion = new BusinessAcademicBusCourseVersion();
        
        $filters = new stdClass();
        $filters->courseId = $data->destinationCourseId;
        $filters->courseVersion = $data->destinationCourseVersion;
        $filters->turnId = $data->destinationTurnId;
        $filters->unitId = $data->destinationUnitId;
        $dataSearch = $busCurriculum->searchCurriculum($filters);
        
        $courseVersion = $busCourseVersion->getCourseVersion($data->destinationCourseId, $data->destinationCourseVersion);        
        for( $i=0; $i<count($dataSearch); $i++ )
        {
            $periodDescription = str_replace('%n', $dataSearch[$i][11], $courseVersion->periodDescription);            
            $options[$dataSearch[$i][0]] = $periodDescription.': '.$dataSearch[$i][8] . '/' .$dataSearch[$i][9] . ' ' .$dataSearch[$i][10] . ' (' .$dataSearch[$i][25] . ' H)' ;
        }
        
        $grdSelectionField = new MSelection('makeToGroup', null, '', $options);
        $grdSelectionField->addAttribute('onChange', SForm::getAjaxAction('loadExploitations', 'divExploitations'));

        $grdTextField = new MTextField('enrollId'); //Armazena o código da inscrição
        $grdNumberHoursField = new MTextField('numberHours'); //Armazena o total de horas
        $grdNotesField = new MTextField('notes'); //Armazena a nota
        
        $columns = array( 
                          $ctrEnroll = new MGridControl($grdTextField, _M('EnrollId', $module), 'center', true, 0, true),
                          new MGridColumn(_M('GroupId', $module), 'left', false, 0, false),
                          new MGridColumn(_M('Período', $module), 'left', false, 0, false),
                          new MGridColumn(_M('Disciplina', $module), 'left', false, 0, true),
                          new MGridColumn(_M('C.H.', $module), 'right', false, 0, true),
                          new MGridColumn(_M('Nota', $module), 'right', false, 0, true),                                      
                          $ctrNumberHours = new MGridControl($grdNumberHoursField, _M('C.H', $module), 'center', true),
                          $ctrNotes = new MGridControl($grdNotesField, _M('Nota', $module), 'center', true),
                          new MGridControl($grdSelectionField, _M('Aproveitar para', $module), 'center', true)
                        );                
        $ctrEnroll->setHidden(true);
        $ctrNumberHours->setHidden(true);
        $ctrNotes->setHidden(true);
 
        parent::__construct($data, $columns, __CLASS__, 0);
        $this->setRowMethod($this, 'myRowMethod');

        $this->setIsScrollable();
        $this->eventHandler();
    }
    
    
    public function myRowMethod($i, $row, $actions, $columns)
    {
        $MIOLO = MIOLO::getInstance();
        $session = $MIOLO->getSession();
        
        //Busca o valor da combo na sessão e seta no campo caso esteja definido
        $makeToGroup = $session->getValue('makeToGroup');                
        if( count($makeToGroup) > 0 )
        {
            $columns[8]->control[$i]->setValue($makeToGroup[$i]);
        }
        
        $columns[0]->control[$i]->setValue($row[0]);
        $columns[6]->control[$i]->setValue($row[6]);
        $columns[7]->control[$i]->setValue($row[7]);
    }
}

?>
