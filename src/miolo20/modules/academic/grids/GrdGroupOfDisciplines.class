<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * GrdGroupOfDisciplines
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 26/08/2010
 *
 **/

class GrdGroupOfDisciplines extends SGrid
{
    private $urlParameters;

    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //Decode filters
        $decodeFilters = urldecode($filters);
        //Unserialize filters
        unset($filters);
        $filters = new stdClass();
        $filters = unserialize($decodeFilters);

        $this->urlParameters = array('curricularComponentGroupId'=>'#0#',
                                     'periodId'=> $filters['periodId'],
                                     'courseId'=> $filters['courseId'],
                                     'courseVersion'=> $filters['courseVersion'],
                                     'turnId'=> $filters['turnId'],
                                     'unitId'=> $filters['unitId']);
        
        $columns[] = new MGridColumn(_M('Código do grupo de disciplinas', $module), 'right', true, null, true, null, true);
        $columns[] = new MGridColumn(_M('Nome', $module), 'left', true, null, true, null, true);
        $columns[] = new MGridColumn(_M('Nome curto', $module), 'left', true, null, true, null, true);
        
        $primaryKey = array('curricularComponentGroupId' => '%0%');

        $this->addActionIcon(_M('Notas para grupo', $module),null,null,null);//, 'register-16x16.png', $url
        parent::__construct($unserializeFilters, $columns, 'GrdSpcSearch', $primaryKey);
        $this->setLinkType('hyperlink');
        $this->setRowMethod($this,'myRowMethod');

    }

    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //Se o método de avaliação definido no período letivo for diferente de 2 (Por grupo de disciplinas)
        if ($row[3] == 2)
        {
            $url = $MIOLO->getActionURL($module, 'main:process:listgroupenrolledpupils', null, $this->urlParameters);
            $actions[0]->alt = _M('Digitar notas para grupo de disciplinas', $module);
            $actions[0]->value = $MIOLO->getUI()->getImage($module, 'register-16x16.png');
            $actions[0]->href = $url;
        }
        else
        {
            $actions[0]->alt = _M("Não é possível digitar notas para o grupo de disciplinas pois o método de avaliação definido no período letivo foi 'Por disciplina'", $module);
            $actions[0]->value = $MIOLO->getUI()->getImage($module, 'registerDisabled-16x16.png');
            $actions[0]->enabled = false;
        }
    }

    /*
     * Set default grid actions
     */
    public function setDefaultGridActions($primaryKey = array())
    {
        //Not implemented
    }
}

?>
