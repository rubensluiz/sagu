<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basCountry table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdPupilListingOp1 extends SGrid
{
    var $totalFooter;

    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        $home   = 'main:report:pupilListing';
        
        $considerPre = $MIOLO->_REQUEST('considerPreEnrolled');
        $considerPreEnrolled = (!is_null($considerPre)) ? DB_TRUE : DB_FALSE;        

        $returnPath = urlencode($home);

        $returnData = urlencode(serialize(array('filter' => MIOLO::_request('filter'), 'reportOption' => MIOLO::_request('reportOption'))));

        $url_age    = $MIOLO->getActionURL($module, 'main:report:listenrolledbyage', null, array('periodId'=>'#0#', 'courseId'=>'#1#', 'unitId'=>'#6#', 'courseVersion'=>'#2#', 'turnId'=>'#4#', 'returnPath' => $returnPath, 'returnData' => $returnData, 'considerPreEnrolled' => $considerPreEnrolled));

        $url_pupil  = $MIOLO->getActionURL($module, 'main:report:listcourseenrolledpupils', null, array('periodId'=>'#0#', 'courseId'=>'#1#', 'unitId'=>'#6#', 'courseVersion'=>'#2#', 'turnId'=>'#4#', 'returnPath' => $returnPath, 'returnData' => $returnData, 'considerPreEnrolled' => $considerPreEnrolled));

        $url_enrollFromCurricularComponent = $MIOLO->getActionURL($module, 'main:report:listEnrollFromCurricularComponent', null, array('periodId'=>'#0#', 'courseId'=>'#1#', 'courseUnitId'=>'#6#', 'courseVersion'=>'#2#', 'courseTurnId'=>'#4#', 'considerPreEnrolled' => $considerPreEnrolled));


        $columns = array( new MGridColumn('', 'left', false, 0, false),
                          new MGridHyperlink( _M('Código', $module), $url_enrollFromCurricularComponent, null, true, null, false),
                          //new MGridColumn( _M('Código', $module),   'right', true, null, true, null, false ),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridHyperlink( _M('Curso', $module), $url_pupil, null, true, null, false ),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn( _M('Unidade', $module),   'left',  true, null, true, null, false ),
                          new MGridHyperlink( _M('Idade', $module), $url_age, null, true, null, false),
                          new MGridColumn( _M('Quantidade', $module), 'center',  true, null, true, null, false )
                        );
        
        parent::__construct($filters, $columns, 'GrdPupilListingOp1');
        unset($this->actions);
        $this->setRowMethod($this, 'myRowMethod');        
    }

    public function myRowMethod($i, $row, $actions, $columns )
    {
        $this->totalFooter += $row[9];
    }

    public function generateFooter( )
    {
        $MIOLO  = MIOLO::getInstance( );
        $module = $MIOLO->getCurrentModule( );

        $controls = array( new MLabel( '<b>'._M('Total de alunos: ', $module).'</b>'. $this->totalFooter));
        $controls = array_merge( parent::generateFooter(), $controls);
        return $controls;
    }

}

?>
