<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * GrdDiverseConsultationCurricularComponentRegistered
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 24/11/2005
 */
/**
 * Grid used by form to display search results
 */
class GrdDiverseConsultationCurricularComponentRegistered extends MGrid
{
    private $colDetailedStatus;
    
    /**
     * Class constructor
     */
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $home = 'main';
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $personId = MIOLO::_REQUEST('personId');
        
        $exibeCodOferecida = SAGU::getParameter('ACADEMIC','EXIBE_CODIGO_OFERECIDA_CONSULTAS_DIVERSAS');
        
        $visible = $exibeCodOferecida == DB_TRUE ? true : false;
        
        $columns = array();
        $columns[] = new MGridColumn(_M('Código da matrícula', $module), 'center', true, null, false, null, false);
        $columns[] = new MGridColumn(_M('Código da disciplina oferecida', $module), 'left', true, null, $visible, null, false);
        $columns[] = new MGridColumn(_M('Código do período', $module), 'center', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Código', $module), 'left', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Disciplina', $module) . ' (' . _M('Professor', $module) . ')', 'left', false, null, true, null, false);
        $columns[] = new MGridColumn(_M('Horário', $module) . ' / ' . _M('Sala', $module), 'left', true, null, true, null, false);        
        $columns[] = new MGridColumn(_M('Carga horária', $module) . ' - ' . _M('Créditos', $module), 'left', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Nota', $module), 'right', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Frequência', $module), 'right', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Código do estado', $module), 'center', true, null, false, null, false);
        $columns[] = new MGridColumn(_M('Estado', $module),  'center', true, null, true, null, false);
        $columns[] = $this->colDetailedStatus = new MGridColumn(_M('Estado detalhado', $module),  'center', true, null, false, null, false);
        $columns[] = new MGridColumn(_M('Turma', $module), 'left', false, null, true, null, false);

        $url = $MIOLO->getActionURL($module,"$home",null,$opts);
        parent::__construct( null, $columns, $url, null, 0, 'gridDiverseConsultationCurricularComponentCoursed' );
        $this->setLinkType('hyperlink');

        if( SAGU::userIsFromServices() )
        {
            // Ação de consultar frequência
            $frequency = $MIOLO->getActionURL( $module, "main:pupil:frequency", null, array('groupId' => '%1%') );
            $this->addActionIcon(_M('Consultar frequências', $module), 'frequency-on.png', $frequency);
            
        }
        else
        {            
            $opts = array('function' => 'update',
                          'enrollId' => '%0%',
                          'periodId' => $periodId,
                          'ignorarUnidade' => DB_TRUE,
                          'returnTo' => $home);
            $href_edit = $MIOLO->getActionURL( $module, 'main:register:enroll', null, $opts );
            $this->addActionUpdate( $href_edit );
        }

        $this->setRowMethod($this, 'myRowMethod');

        $this->setIsScrollable();
        $this->setTitle(_M('Disciplinas matriculadas', $module) . ': ' . $periodId);

        $this->eventHandler();
    }

    public function myRowMethod($i, $row, $actions, $columns )
    {
        $module = MIOLO::getCurrentModule();

        // Coluna disciplina e professores
        
        $actions[0]->alt = _M('Editar/Visualizar', $module);

        $lblCurricularComponent = new MText(null, $row[4]);
        $lblCurricularComponent->addAttribute('style', 'text-align: left !important; font-weight: bold');

        $profs = implode(',<br />', SAGU::postgresToPhpArray($row[13]));
        if ( strlen($profs) <= 0 )
        {
            $profs = _M('n/d', $module);
        }
        $lblProfessors = new MText(null, '(' . $profs . ')');        
        $lblProfessors->addAttribute('style', 'text-align: left !important;font-style: italic');
        $columns[4]->control[$i] = array($lblCurricularComponent, '<br />', $lblProfessors);

        // Coluna dos horários e salas

        $schedules = implode(',<br />', SAGU::postgresToPhpArray($row[12]));
        if ( strlen($schedules) <= 0 )
        {
            $schedules = _M('n/d', $module);
        }
        $lblSchedules = new MText(null, $schedules);

        $rooms = implode(',<br />', SAGU::postgresToPhpArray($row[14]));
        if ( strlen($rooms) <= 0 )
        {
            $rooms = _M('n/d', $module);
        }
        $lblRooms = new MText(null, $rooms);

        $columns[5]->control[$i] = array($lblSchedules, '<br />', $lblRooms);

        // Coluna do status de matrícula

        $color = '';
        switch ($row[9])
        {
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED'):
                $color = SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_FREE');
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED'):
                $color = SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_ENROLLED');
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED'):
                $color = SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_DISABLED');
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED'):
                $color = SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_ENROLLED');
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DISAPPROVED'):
                $color = SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_CANCELLED');
            break;
        }

        $columns[10]->control[$i]->setColor($color);
    }

    public function showDetailedStatus()
    {
        $module = MIOLO::getCurrentModule();
        $visible = count(AcdDetailedEnrollStatus::listRecords()) > 0;
        
        $this->colDetailedStatus->visible = $visible;
    }


}
?>