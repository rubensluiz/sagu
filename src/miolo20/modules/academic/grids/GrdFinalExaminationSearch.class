<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * Grid utilizada para exibir os resultados da tela de busca do detalhamento do TCC
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version: $Id$
 * 
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 04/03/2011
 *
 **/

/**
 * Grid utilizada para exibir os resultados da tela de busca do detalhamento do TCC
 **/
class GrdFinalExaminationSearch extends MGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO    = MIOLO::getInstance();
        $home     = 'main';
        $module   = MIOLO::_request('module');
        $contractId = MIOLO::_request('contractId');

        $columns = array(
                          new MGridColumn( _M('Código da matrícula', $module), 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Código do contrato', $module), 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Código da disciplina oferecida', $module), 'left', true, null, false, null, false ),
                          new MGridColumn( _M('Código do período', $module), 'center', true, null, true, null, false ),
                          new MGridColumn( _M('Código', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Disciplina', $module) . ' (' . _M('Professor', $module) . ')', 'left', false, null, true, null, false ),
                          new MGridColumn( _M('Horário', $module) . ' / ' . _M('Sala', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Carga horária', $module) . ' - ' . _M('Créditos', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Nota', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Frequência', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Código do estado', $module), 'center', true, null, false, null, false ),
                          new MGridColumn( _M('Estado', $module),  'center', true, null, true, null, false ),
                          new MGridColumn( _M('Turma', $module), 'left', false, null, true, null, false )
                        );

        $url = $MIOLO->getActionURL($module,"$home",null,$opts);
        parent::__construct( null, $columns, $url, null, 0, 'GrdFinalExaminationSearch' );
        $this->setLinkType('hyperlink');

        $opts = array('function' => 'update',
                      'enrollId' => '%0%',
                      'contractId' => '%1%');

        $href_edit = $MIOLO->getActionURL( $module, 'main:process:finalExamination', null, $opts );
        $this->addActionUpdate( $href_edit );

        $this->setRowMethod($this, 'myRowMethod');

        $this->setIsScrollable();

        $this->eventHandler();
    }

    public function myRowMethod($i, $row, $actions, $columns )
    {
        $module = MIOLO::getCurrentModule();

        // Coluna disciplina e professores

        $lblCurricularComponent = new MLabel($row[5]);
        $lblCurricularComponent->setBold(true);

        $profs = implode(',<br />', SAGU::postgresToPhpArray($row[14]));
        if ( strlen($profs) <= 0 )
        {
            $profs = _M('n/d', $module);
        }
        $lblProfessors = new MLabel('(' . $profs . ')');
        $lblProfessors->addBoxStyle('font-style', 'italic');
        $columns[5]->control[$i] = array($lblCurricularComponent, '<br />', $lblProfessors);

        // Coluna dos horários e salas

        $schedules = implode(',<br />', SAGU::postgresToPhpArray($row[13]));
        if ( strlen($schedules) <= 0 )
        {
            $schedules = _M('n/d', $module);
        }
        $lblSchedules = new MLabel($schedules);

        $rooms = implode(',<br />', SAGU::postgresToPhpArray($row[15]));
        if ( strlen($rooms) <= 0 )
        {
            $rooms = _M('n/d', $module);
        }
        $lblRooms = new MLabel($rooms);

        $columns[6]->control[$i] = array($lblSchedules, '<br />', $lblRooms);

        // Coluna do status de matrícula
        $color = '';
        switch ($row[10])
        {
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED'):
                $color = SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_FREE');
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED'):
                $color = SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_ENROLLED');
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED'):
                $color = SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_DISABLED');
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED'):
                $color = SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_ENROLLED');
            break;
            case SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DISAPPROVED'):
                $color = SAGU::getParameter('ACADEMIC', 'CURRICULUM_STATUS_COLOR_CANCELLED');
            break;
        }
        $columns[11]->control[$i]->setColor($color);
    }
}

?>
