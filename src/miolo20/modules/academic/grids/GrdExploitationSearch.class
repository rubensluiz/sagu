<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This grid is used to show exploitation data
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Helio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 15/08/2007
 *
 **/

/**
 * Grid used by enroll form to display exploitation results
 **/
class GrdExploitationSearch extends MGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home   = strlen($filters->home) > 0 ? $filters->home : MIOLO::getCurrentAction();
        $module = MIOLO::_REQUEST('module');
        
        $greenPath = $MIOLO->getActionUrl($module, 'html:images:green.png');
        $redPath   = $MIOLO->getActionUrl($module, 'html:images:red.png');
        
        $internalText = _M('Aproveitamento interno', $module);
        $externalText = _M('Aproveitamento externo', $module);
        
        $internalImage = new MImage('imgInternal', $internalText, $greenPath);
        $externalImage = new MImage('imgExternal', $externalText, $redPath);
        
        $explType = array( 'I' => $internalImage->generate(), 'E' => $externalImage->generate() );
        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array( 
                          new MGridColumn( _M('Código do aproveitamento', $module), 'right', true, null, false ),
                          new MGridColumn( ' ' , 'center', false, null, true, null, false ),
                          new MGridColumn( _M('Disciplina', $module) , 'left',   true, null, true, null, true ),
                          new MGridColumn( _M('Curso', $module), 'left', true, null, true, null, true ),
                          new MGridColumn( _M('Período', $module), 'right',   true, null, true, null, true ),
                          new MGridColumn( _M('Carga horária aproveitada', $module), 'right', true, null, true, null, true ),
                          //new MGridColumn( _M('Curso', $module), 'left', true, null, true, null, true )
                        );

        $opts = array('function'       =>'insert',
                      'exploitationId' =>'%0%');

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        $url = $MIOLO->getActionURL($module, $home);
        parent::__construct( null, $columns, $url, 0, 0, 'gridExploitation' );
        $this->setLinkType('hyperlink');
        $this->setRowMethod($this, 'myRowMethod');

        //$this->setIsScrollable();

        if ($filters->readOnly == false)
        {
            $opts = array('function'       => 'update',
                          'exploitationId' =>'%0%');
            
            $href_update = $MIOLO->getActionURL( $module, $home, null, $opts );
            $this->addActionUpdate(null);
            $this->addActionDelete(null);
        }

        $this->eventHandler();

    }
    
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $opts['exploitationId'] = $row[0];
        
        if ( $row[1] == 'I' )
        {
            $internalAction   = 'main:process:exploitation:internalExploitation';
            $opts['function'] = 'update';
            
            $actions[0]->href = $MIOLO->getActionURL($module, $internalAction, null, $opts);
            
            $opts['function'] = 'delete';
            $opts['event']    = 'tbBtnDelete_click';
            
            $actions[1]->href = $MIOLO->getActionURL($module, $internalAction, null, $opts);
            
            $greenPath     = $MIOLO->getActionUrl($module, 'html:images:green.png');
            $internalText  = _M('Aproveitamento interno', $module);
            $internalImage = new MImage('imgInternal' . $row[0], $internalText, $greenPath);
            
            $columns[1]->control[$i] = $internalImage->generate();
        }
        else
        {
            $externalAction   = 'main:process:exploitation:externalExploitation';
            $opts['function'] = 'update';
            
            $actions[0]->href = $MIOLO->getActionURL($module, $externalAction, null, $opts);
            
            $opts['function'] = 'delete';
            $opts['event']    = 'tbBtnDelete_click';
            
            $actions[1]->href = $MIOLO->getActionURL($module, $externalAction, null, $opts);
            
            $redPath       = $MIOLO->getActionUrl($module, 'html:images:red.png');
            $externalText  = _M('Aproveitamento externo', $module);
            $externalImage = new MImage('imgExternal' . $row[0], $externalText, $redPath);
            
            $columns[1]->control[$i] = $externalImage->generate();
        }
        
        
    }
}

?>
