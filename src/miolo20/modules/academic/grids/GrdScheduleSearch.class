<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdSchedule table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 23/09/2005
 *
 **/

$MIOLO->Uses( 'classes/auditoria.class', 'basic' );

/**
 * Grid used by form to display search results
 **/
class GrdScheduleSearch extends SGrid
{
    public $learningPeriodId;
    public $unitId;
    public $goto;
    
    /**
     *
     * @var boolean
     */
    private $readOnlyMode = false;

    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::_request('module');
        $home = "main:process:scheduleCurricularComponent";
        $this->goto = $filters->goto;
        $this->unitId = $filters->unitId;
        $this->learningPeriodId = $filters->learningPeriodId;
        
        $this->setTableName('acdSchedule');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array(
            new MGridColumn( _M('Código do horário da disciplina oferecida', $module ), 'right', true, '25%', true, null, true ),
            new MGridColumn( _M('Código da disciplina oferecida', $module ), 'right', true, null, false, null, true ),
            new MGridColumn( _M('Código da unidade', $module ), 'right', true, null, false, null, true ),
            new MGridColumn( _M('Unidade', $module ), 'left', true, '15%', true, null, true ),
            new MGridColumn( _M('Sala-Prédio', $module ), 'left', true, null, false, null, true ),
            new MGridColumn( _M('Desconto', $module ), 'right', true, null, false, null, true ),
            new MGridColumn( _M('Código da operação', $module ), 'right', true, null, false, null, true ),
            new MGridColumn( _M('Código do período', $module ), 'left', true, '10%', true, null, true ),
            new MGridColumn( _M('Horários', $module ), 'left', true, '10%', true, null, true ),
            new MGridColumn( _M('Dias da semana', $module ), 'left', true, '10%', true, null, true ),
            new MGridColumn( _M('Professor', $module ), 'left', false, '25%', true, null, false ),
        );
        
        if(SAGU::getParameter('ACADEMIC', 'EXIBIR_DATAS_DE_OCORRENCIA_NA_OFERECIDA') == DB_FALSE)
        {   
            $columns[] = new MGridColumn( _M('Data inicial', $module ), 'left', false, '25%', true, null, false );
            $columns[] = new MGridColumn( _M('Data final', $module ), 'left', false, '25%', true, null, false );            
        }
        else
        {
            $columns[] = new MGridColumn( _M('Datas de ocorrência', $module ), 'left', false, '25%', true, null, false );
        }

        $opts = array( 'function' => 'update',
                       'scheduleId' => '%0%',
                       'groupId' => '%1%',
                       'unitId' => $this->unitId,
                       'learningPeriodId' => $this->learningPeriodId,
                       'isEditFromGrid' => 1,
                       'randomId' => '%14%' );

        $href_edit = $MIOLO->getActionURL($module, $home, null, $opts);

        unset($opts);
        $opts = array( 'event' => 'tbBtnDeleteSchedule_click',
                       'scheduleId' => '%0%',
                       'groupId' => '%1%',
                       'unitId' => $this->unitId,
                       'learningPeriodId' => $this->learningPeriodId,
                       'goto' => $this->goto );

        $href_delete = $MIOLO->getActionURL($module, $home, null, $opts);

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        if ( (isset($filters)) && (is_array($filters)) )
        {
            foreach ( $filters as $k => $v )
            {
                if ( ! strpos(trim($v), ' ') )
                {
                    $opts[$k] = $v;
                }
            }
        }

        $url = $MIOLO->getActionURL($module, $home, null, $opts);

        $primaryKey = array( 'scheduleId' => '%0%' );
        
        parent::__construct($filters, $columns, 'GrdScheduleSearch', $primaryKey, $url);

        $this->clearActions();
        
        $this->setLinkType('hyperlink');
        $this->setIsScrollable();
        $this->setClose(false);
        $this->setRowMethod($this, 'myRowMethod');
        $this->addActionUpdate($href_edit);
        $this->addActionIcon(_M('Delete'), $MIOLO->getUI()->getImageTheme($MIOLO->getConf("theme.main"), 'button_drop.png'), $href_delete);
        $this->eventHandler();
    }

    public function myRowMethod($i, $row, $actions, $columns)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $home = "main:process:scheduleCurricularComponent";

        $imageEditURL = $MIOLO->getUI()->getImageTheme($MIOLO->getConf("theme.main"), 'button_edit.png');
        $imageDeleteURL = $MIOLO->getUI()->getImageTheme($MIOLO->getConf("theme.main"), 'button_drop.png');

        if ( strlen($row[10]) > 0 )
        {
            $rowArray = explode( '<1>', $row[10] );

            if ( count($rowArray) > 0 )
            {
                unset($rowData);
                foreach ( $rowArray as $profRow )
                {
                    $profArray = explode('<2>', $profRow);

                    // Gera botao de remover professor
                    $deleteButton = '-';
                    if ( !$this->readOnlyMode )
                    {
                        $opts = array( 'event' => 'tbBtnDeleteProfessor_click',
                                    'scheduleProfessorId' => $profArray[0],
                                    'groupId' => $row[1],
                                    'unitId' => $this->unitId,
                                    'learningPeriodId' => $this->learningPeriodId,
                                    'goto' => $this->goto );

                        $deleteURL = $MIOLO->getActionURL($module, $home, null, $opts);
                        $imageDelete = new MImageLink('delete_' . $profArray[0], _M('Excluir professor do horário', $module ), $deleteURL, $imageDeleteURL);
                        $deleteButton = $imageDelete->generate();
                    }
                    
                    $rowData[] = array( $deleteButton,
                                        $profArray[1] );
                }

                $tableRaw = new MTableRaw(null, $rowData);
                $tableRaw->SetAlternate(TRUE);
                $columns[10]->control[$i] = $tableRaw;

                for ( $x = 0; $x < count($rowData); $x ++ )
                {
                    $tableRaw->setCellAttribute($x, 0, 'width', '20');
                    $tableRaw->setCellAttribute($x, 1, 'width', '20');
                }
            }
            else
            {
                $row[10] = null;
            }
        }
    }
    
    public function getReadOnlyMode()
    {
        return $this->readOnlyMode;
    }

    public function setReadOnlyMode($readOnlyMode)
    {
        if ( $readOnlyMode )
        {
            $this->actions = array();
            $this->pageLength = 9999999;
            
            foreach ( $this->columns as $key => $col )
            {
                // Desabilita visibilidade de primeiras colunas
                if ( $key <= 7 )
                {
                    $col->visible = false;
                }
                
                $col->order = false;
            }
        }
        
        $this->readOnlyMode = $readOnlyMode;
    }
}
?>