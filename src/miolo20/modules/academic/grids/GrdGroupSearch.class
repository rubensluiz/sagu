<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdGroup table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/09/2005
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdGroupSearch extends MGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();

        $home   = 'main:process:group';
        $module = MIOLO::_request('module');

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array( 
                          new MGridColumn( _M('Código da oferecida', $module), 'right', true, null, false, null, false ),
                          new MGridColumn( _M('Disciplina', $module) . ' / ' . _M('Professor', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Estado', $module) . ' / ' . _M('Horário', $module), 'left', true, null, true, null, false ),
                          new MGridColumn( _M('Vagas', $module) . ' / ' . _M('Sala', $module) . '/' . _M('Prédio', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Regime', $module) . ' / ' . _M('Unidade', $module), 'left', true, null, true, null, false )
                        );

        $opts = array('function' => 'update',
                      'groupId'  => '%0%');
        $href_edit = $MIOLO->getActionURL( $module, $home, null, $opts );

        $opts = array('function' => 'delete',
                      'groupId'  => '%0%',
                      'event'    => 'tbBtnDelete_click');
        $href_delete = $MIOLO->getActionURL( $module, $home, null, $opts );

        $opts = array('function' => 'printContent',
                      'groupId'  => '%0%',
                      'event'    => 'tbBtnPrint_click');
        $href_print = $MIOLO->getActionURL( $module, $home, null, $opts);

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);
        if ( isset($filters) )
        {
            foreach ( $filters as $k => $v )
            {
                $opts[$k] = $v;
            }
        }
        $url = $MIOLO->getActionURL($module,"$home:search",null,$opts);
        parent::__construct( null, $columns, $url, 0, 0, 'gridGroup' );
        $this->setLinkType('hyperlink');
        $this->setRowMethod($this, 'myRowMethod');

        //$this->setIsScrollable();

        $this->addActionUpdate( $href_edit );
        $this->addActionDelete( $href_delete );
        $this->addActionIcon(_M('Imprimir conteúdo programático', $module), 'print', $href_print);
        $this->addActionIcon(_M('Horários', $module), 'add', null);
        $this->addActionIcon(_M('Enviar email', $module), 'print', null);

        $this->eventHandler();

    }
    
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        if ( $row[0] == '&nbsp;' )
        {
            $actions[0]->enabled = false;
            $actions[1]->enabled = false;
            $actions[2]->enabled = false;
        }
        else
        {
            $actions[0]->enabled = true;
            $actions[1]->enabled = true;
            $actions[2]->enabled = true;
        }
        
        $actions[3]->href = 'javascript:showGroupSchedules(' . $row[0] . ')';
        
        $business = new BusinessAcademicBusSchedule();
        $filters->groupId = $row[0];
        
        if (count($business->searchSchedule($filters)) > 0)
        {
            $actions[3]->enabled = true;
            $actions[3]->alt     = _M('Exibir horários', $module);
        }
        else
        {
            $actions[3]->enabled = false;
            $actions[3]->alt     = _M('Sem horários cadastrados', $module);
        }
        
        if ( SAGU::getParameter('BASIC', 'INCREASE_SECURITY_LEVEL') == 'YES' )
        {
            $actions[1]->enabled = false;
        }
    }
}

?>
