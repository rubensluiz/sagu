<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * Groups list for the grades typing process
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 20/01/2006
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdGradesTyping extends MGrid
{   
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        $home = 'main:process:gradesTyping';
        
        if ( SAGU::getParameter('PORTAL', 'INTERFACE_DE_DIGITACAO_DE_NOTAS_SOMENTE_PORTAL') == DB_TRUE )
        {
            $url_group = $MIOLO->getActionURL('portal', 'main:notasProfessor', null, array('isAdmin' => 't', 'groupid'=>'#0#'));;
        }
        else
        {
            $url_group = $MIOLO->getActionURL($module, 'main:process:listenrolledpupils', null, array('groupId'=>'#0#'));
        }
        
        $url_close = $MIOLO->getActionURL($module, 'main:process:listenrolledpupils', null, array('groupId'=>'#0#', 'event' => 'closeGroup_click'));
        $url_frequence = $MIOLO->getActionURL($module, 'main:process:frequency', null, array('groupId'=>'#0#'));
        $url_unblock = SForm::getAjaxAction('btnUnblock', 'divUnblock', false, array('groupId' => '%0%'), false, false);
        
        $columns = array( new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn( _M('Disciplina', $module), 'left', true, null, true, null, true ),
                          new MGridColumn( _M('Horário', $module), 'center',  true, null, true, null, true ),
                          new MGridColumn( _M('Turma', $module), 'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Fechada', $module), 'left',  true, null, false, null, true ));
       
        $url = $MIOLO->getActionURL($module, $home, null, array('event' => 'btnList_click'));
        parent::__construct( null, $columns, $url, 0, 0, 'gridCourse' );
        $this->setLinkType('hyperlink');
        $this->setRowMethod($this,'myRowMethod');

        $this->addActionIcon(_M('Consultar/Cadastrar notas', $module), 'register-16x16.png', $url_group);
        $this->addActionIcon(_M('Registrar frequência', $module), 'frequency-on.png', $url_frequence);
        $this->addActionIcon(_M('Fechar oferecida', $module), 'lock.png', $url_close);
        $this->addActionIcon(_M('Desbloquear disciplina', $module), 'block-16x16.png', $url_unblock);

        $this->eventHandler();
    }
    
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        if ($row[4] == DB_TRUE)
        {
            $actions[2]->alt = _M('Reabrir disciplina', $module);
            $actions[2]->value = 'lock.png';
            $actions[2]->href = $MIOLO->getActionURL($module, 'main:process:listenrolledpupils', null, array('groupId'=>'#0#', 'event' => 'openGroup_click'));
        }
        else
        {
            //Se o método de avaliação for diferente de 'Por grupo de disciplina' (2) abilita botão fechar, senão desabilita.
            if( $row[5] != 2 )
            {
                $actions[2]->alt = _M('Fechar disciplina', $module);
                $actions[2]->value = 'unlock.png';
                $actions[2]->href = $MIOLO->getActionURL($module, 'main:process:listenrolledpupils', null, array('groupId'=>'#0#', 'event' => 'closeGroup_click'));
            }
            else
            {
                $actions[2]->alt = _M("Não é possível fechar a disciplina pois o método de avaliação definido no período letivo foi 'Por grupo de disciplina', essa disciplina será fechada no fechamento do período letivo.", $module);
                $actions[2]->value = $MIOLO->getUI()->getImage($module, 'unlock_disabled.png');
                $actions[2]->enabled = false;
            }
        }
        
        // Desbloqueio
        if ( $row[6] == DB_TRUE )
        {
            $actions[3]->enabled = true;
            $actions[3]->alt = _M('Desbloquear disciplina', $module);
        }
        else
        {
            $actions[3]->enabled = false;
            $actions[3]->alt = _M('Desbloquear disciplina (desabilitado)', $module);
        }
        
        $busGroup = new BusinessAcademicBusGroup();
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        
        $groupData = $busGroup->getGroup($row[0]);
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($groupData->learningPeriodId);

        if ($learningPeriodData->isClosed == DB_TRUE)
        {
            $actions[2]->enabled = false;
            $actions[2]->alt = _M('Período letivo fechado.', $module) . ' ' . _M('Reabra para poder reabrir a disciplina.', $module);
            $actions[2]->value = 'lock_disabled.png';
        }
        
        $busSchedule = new BusinessAcademicBusSchedule();

        //Professores
        $professors = $busSchedule->getGroupProfessors($groupData->groupId);

        if (count($professors) > 0)
        {
            $profText = implode('<br>', $professors);
        }
        else
        {
            $profText = _M('Professor não definido', $module);
        }
        
        $label = new MLabel($profText);
        $label->addBoxStyle('font-style', 'italic');
            
        $columns[1]->control[$i]->setValue($columns[1]->control[$i]->getValue() . $label->generate());
        
        // Popup Horarios
        $lnkOpenSchedules = SForm::getAjaxAction('getScheduleForm', 'divSchedulesForm', false, array('groupId' => $row[0]));
        $imgFind = $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'find.png');
        $button = new MImageLink('subsButton'.$i, null, $lnkOpenSchedules, $imgFind );
        $contV = new MVcontainer('contV', array($button));
        $columns[2]->control[$i]->setValue($contV->generate());
    }    
}
?>