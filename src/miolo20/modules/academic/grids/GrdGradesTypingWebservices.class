<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * Groups list for the grades typing process
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * 
 * @since
 * Class created on 31/01/2011
 */
/**
 * Grid used by form to display search results
 */
class GrdGradesTypingWebservices extends MGrid
{   
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        $home   = 'main:process:gradesTypingWebservices';

        $professorId = MIOLO::_REQUEST('professorId');
        $periodId = MIOLO::_REQUEST('periodId');

        $url_group = $MIOLO->getActionURL($module, 'main:process:listenrolledpupils', null, array('groupId'=>'#0#'));
        $url_close = $MIOLO->getActionURL($module, 'main:process:listenrolledpupils', null, array('groupId'=>'#0#', 'event' => 'closeGroup_click'));
        $url_frequence = $MIOLO->getActionURL($module, 'main:process:frequency', null, array('groupId'=>'#0#', 'webservices'=>'1'));
        $url_evaluation = $MIOLO->getActionURL($module, 'main:register:evaluationWebservices', null, array('groupId'=>'#0#', 'professorId'=>$professorId, 'periodId'=>$periodId));
        $url_attendanceReportWithPhoto = $MIOLO->getActionURL( $module, 'main:document:examinationAct', null, array(
                'groupId' => '#0#',
                'professorId' => $professorId,
                'emissionDate' => SAGU::getDateNow(),
                'printMode' => 1,
                'reportModel' => 'attendanceReportWithPhoto',
                'event' => 'attendanceReport',
                'generateOption' => 'pdf'
        ) );
        
        $columns = array( new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn( _M('Disciplina', $module), 'left', true, null, true, null, true ),
                          new MGridColumn( _M('Horário', $module), 'center',  true, null, true, null, true ),
                          new MGridColumn( _M('Turma', $module), 'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Fechada', $module), 'left',  true, null, false, null, true ) );
       
        $url = $MIOLO->getActionURL($module, $home, null, array('event' => 'btnList_click'));
        parent::__construct( null, $columns, $url, 0, 0, 'gridCourse' );
        $this->setLinkType('hyperlink');
        $this->setRowMethod($this,'myRowMethod');

        $this->addActionIcon(_M('Consultar/Cadastrar notas', $module), 'register-16x16.png', $url_group);
        $this->addActionIcon(_M('Registrar frequência', $module), 'frequency-on.png', $url_frequence);
        $this->addActionIcon(_M('Definir avaliações', $module), 'evaluationDefinition-on.png', $url_evaluation);
        $this->addActionIcon( _M('Lista de chamada com foto', $module ), 'attendanceList.png', $url_attendanceReportWithPhoto );

        $this->eventHandler();
    }
    
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busGroup          = new BusinessAcademicBusGroup();
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();

        $groupData             = $busGroup->getGroup($row[0]);
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($groupData->learningPeriodId);

        if ($learningPeriodData->isClosed == DB_TRUE)
        {
            $actions[2]->enabled = false;
            $actions[2]->alt     = _M('Período letivo fechado.', $module) . ' ' . _M('Reabra para poder reabrir a disciplina.', $module);
            $actions[2]->value   = 'lock_disabled.png';
        }
        
        $busSchedule = new BusinessAcademicBusSchedule();

        //Professores
        $professors = $busSchedule->getGroupProfessors($groupData->groupId);

        if (count($professors) > 0)
        {
            $profText = implode('<br>', $professors);
        }
        else
        {
            $profText = _M('Professor não definido', $module);
        }
        
        $label = new MLabel($profText);
        $label->addBoxStyle('font-style', 'italic');
            
        $columns[1]->control[$i]->setValue($columns[1]->control[$i]->getValue() . $label->generate());

        $url = str_replace('&amp;', '&', $this->manager->getCurrentURL());
        $button = new MImageLink('subsButton'.$i, null, "javascript:void(0);", $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'find.png') );
        $button->addAttribute('onclick', "getScheduleForm('{$row[0]}', event, '{$url}')");
        $contV = new MVcontainer('contV', array($button));
        $columns[2]->control[$i]->setValue($contV->generate());
    }
}
?>
