<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC001'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO  = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    var $personName;

    /**
     * Defines the footer for this report
     */
    public function Footer()
    {
        $module = MIOLO::getCurrentModule();
        $this->setY(-15);
        $pn = $this->PageNo().'/{nb}';
        $this->cell(190, 1, '', 'B', 1);
        $this->ln();
        
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);
        if ( $pn == 1 )
        {
            $text = $this->personName;
        }
        else
        {
            $text = _M('Continuação de', $module).' '.$this->personName;
        }
        
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'I', 8);
        $this->cell(50, 4, $text, 0, 0);
        $this->cell(140, 4, _M('RELATÓRIO @1', $module, REPORT_ID).' '._M('Página @1', $module, $pn), 0, 0, 'R');
        $this->SetAutoPageBreak(true);
        $this->ln();
    }


    /**
     * Defines the header for this report
     */
    public function Header()
    {
        /*$module = MIOLO::getCurrentModule();
        $y = $this->getY();
        $this->setY($y - 10);
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);
        $this->cell(190, 4, $this->pageNo(), 0, 0, 'R');
        $this->setY($y);*/
    }
}


/**
 * PDF extension to generate report
 */
class RptScholarshipDescription
{
    /**
     * Method to generate the report
     */
    public function RptScholarshipDescription($data = null)
    {
        //$rdata = $this->getReportData($data);
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $file = $MIOLO->getModulePath('basic', SAGU::getParameter('BASIC', 'FINAL_SCHOLARSHIP_DESCRIPTION_PATH') . '/' . $data->contractId . '.pdf');
        
        if ( (file_exists($file)) && ($data->print8) )
        {
            SAGU::returnAsFile($data->contractId . '.pdf', SAGUFile::getFileBody($file, true), 'application/pdf');
        }
        else
        {
            //tipo de exibição das atividades complementares
            $complementaryActivitiesShowType         = $data->print0;
            //exibir disciplinas substitutas
            $printSubstituteCurricularComponents     = $data->print1;
            //exibir detalhes de aproveitamentos
            $printExploitationsDetails               = $data->print15;
            //informar dispensa de educação física
            $printPhysicalExcused                    = $data->print4;
            //texto de dispensa de ed. física        
            $physicalExcusedText                     = $data->print4T;
            //informar que disciplina não foi cursada
            $printNotCoursedLabel                    = $data->print5;
            //exibir outras disciplinas cursadas
            $printOtherCoursedCurricularComponents   = $data->print6;
            //exibir coluna de créditos
            $printCreditsColumn                      = $data->print7;
            //é histórico final (para exibir alguns dados adicionais)
            $isFinalDescription                      = $data->print8;
            //informar que aluno não está sub-júdice
            $printNotSubJudicial                     = $data->print9;
            //texto para informar que o aluno não está sub-júdice
            $notSubJudicialText                      = $data->print9T;
            //não exibir disciplinas de curso concluído
            $dontPrintConcludedCourseCurricularComps = $data->print10;
            //curso cujas disciplinas não devem ser exibidas
            $courseToIgnore                          = $data->print10T;
            //exibir data de entrega da apostila
            $printEmendsDate                         = $data->print11;
            //Observações
            $observation                             = $data->print13;
            //Setor
            $sector                                  = $data->print14;
            //Somar horas relativas a atividades complementares
            $sumComplementaryActivitiesHours         = (strlen($data->print16) > 0);
            //Codigo do primeiro carimbo
            $stamp1Id                                = $data->stamp1;
            //Codigo do segundo carimbo
            $stamp2Id                                = $data->stamp2;
            
            //total de horas cursadas
            $curriculumTotalCoursedHours  = 0;
            //total de horas em que o aluno está matriculado
            $curriculumTotalEnrolledHours = 0;
            //carga horária do curso
            $curriculumCourseTotalHours   = 0;
            //total de créditos cursados
            $curriculumTotalCoursedCredits  = 0;
            //total de créditos em que o aluno está matriculado
            $curriculumTotalEnrolledCredits = 0;
            //número total de créditos do curso
            $curriculumCourseTotalCredits   = 0;
            
            //total de horas cursadas em outras disciplinas (fora do currículo)
            $outOfCurriculumTotalCoursedHours   = 0;
            //total de créditos cursados em outras disciplinas (fora do currículo)
            $outOfCurriculumTotalCoursedCredits = 0;
            
            //variavel utilizada para paragrafos
            $paragraph = 0.1;
            
            $business    = new BusinessAcademicBusScholarshipDescription();
            $busContract = new BusinessAcademicBusContract();
            
            //dados do contrato
            $contractData = $busContract->getContract($data->contractId);
            
            //dados da versão de curso
            $busCourseVersion  = new BusinessAcademicBusCourseVersion();
            $courseVersionData = $busCourseVersion->getCourseVersion($contractData->courseId, $contractData->courseVersion);
            
            strlen($courseVersionData->hourTotal) > 0 ? $curriculumCourseTotalHours = $courseVersionData->hourTotal : null;
            strlen($courseVersionData->credits) > 0 ? $curriculumCourseTotalCredits = $courseVersionData->credits : null;
            
            //Geração de arquivo PDF
            $pdf = new PDF();
            $pdf->aliasNbPages();
            $pdf->personName = $rdata->name;
            $pdf->setTopMargin(15);
            $pdf->addPage('P', 'mm', 'A4');
            $pdf->ln();

            //Get info of company
            $businessCompany = new BusinessBasicBusCompany();
            $company         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
            $busLegalPerson = new BusinessBasicBusLegalPerson();
            $legalPerson    = $busLegalPerson->getLegalPerson($company->personId);
            
            $pdf->ln();
            $pdf->cell(190, 3, '', 'T', 0);
            $pdf->ln();
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
            $pdf->cell(190, 5, $company->name, 0, 0, 'C');
            $pdf->ln();
            $pdf->ln();
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
            $pdf->cell(110, 5, strtoupper(_M('Logradouro', $module).': '.$legalPerson->locationType . ' ' . $legalPerson->location), 0, 0);
            $pdf->cell(70, 5, strtoupper(_M('Número', $module).': '.$legalPerson->number), 0, 0);
            $pdf->ln();
            $pdf->cell(110, 5, strtoupper(_M('Bairro', $module).': '.$legalPerson->neighborhood), 0, 0);
            $pdf->cell(70, 5, strtoupper(_M('Complemento', $module).': '.$legalPerson->complement), 0, 0);
            $pdf->ln();
            $pdf->cell(110, 5, strtoupper(_M('Cidade', $module).': '.$legalPerson->cityName . ' - ' . $legalPerson->stateId), 0, 0);
            $pdf->cell(70, 5, strtoupper(_M('CEP', $module).': '.$legalPerson->zipCode), 0, 0);
            $pdf->ln();
            $pdf->cell(190, 3, '', 'T', 0);
            $pdf->ln();
            
            // Get logo from actual company's legal person
            $logo = null;
            if ( strlen($legalPerson->photoId) > 0 )
            {
                $busFile = new BusinessBasicBusFile();
                $logo = $busFile->getFilePath($legalPerson->photoId);
            }
            
            if ( strlen($logo) > 0 || false)
            {
                if ( file_exists($logo) )
                {
                    $pdf->Image($logo, 177, 4, 25, SAGU::getParameter('BASIC', 'PHOTO_FORMAT'));
                }
            }
            // Logo stuff ends
                        
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
            $pdf->cell(190, 5, _M('HISTÓRICO ESCOLAR', $module), 0, 0, 'C');
            $pdf->ln();
            $pdf->ln();

            //Dados do curso
            $scholarCourseData = $business->getCourseData($contractData->courseId, $contractData->courseVersion, $contractData->turnId, $contractData->unitId);
            $scholarCourseLine = $scholarCourseData->courseId . ' - '/*'(' . $contractData->courseVersion . ') - '*/ . $scholarCourseData->courseName;
            
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
            $pdf->multiCell(190, 5, strtoupper(_M('Curso', $module).': '. $scholarCourseLine));
            $pdf->multiCell(190, 5, strtoupper(_M('Reconhecimento', $module). ': ' . $scholarCourseData->recognitionDocumentNumber));
            //$pdf->ln();
            $pdf->ln(3);
            
            //Dados da pessoa
            $scholarPersonData = $business->getPhysicalPersonData($contractData->personId);
            
            $pdf->personName = $scholarPersonData->personName;
            
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
            $pdf->cell(130, 5, strtoupper(_M('Nome', $module).': '.$scholarPersonData->personName), 0, 0);
            $pdf->cell(60, 5, strtoupper(_M('Matrícula', $module).': '.$scholarPersonData->personId), 0, 0);
            $pdf->ln();
            $pdf->cell(70, 5, strtoupper(_M('Data de nascimento', $module).': '.$scholarPersonData->dateBirth), 0, 0);
            $pdf->cell(60, 5, strtoupper(_M('Estado', $module).': '.$scholarPersonData->stateIdBirth), 0, 0);
            $pdf->cell(65, 5, strtoupper(_M('Nacionalidade', $module).': '.$scholarPersonData->nationality), 0, 0);
            $pdf->ln();
            $pdf->ln(3);
            
            //Dados do documento
            $scholarDocumentData = $business->getDocumentData($contractData->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
            $pdf->cell(190, 5, strtoupper(_M('Cédula de identidade', $module).': '), 0, 0);
            $pdf->ln();
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
            $pdf->cell(70, 5, strtoupper(_M('Número', $module).': '.$scholarDocumentData->content), 0, 0);
            $pdf->cell(60, 5, strtoupper(_M('Data de expedição', $module).': '.$scholarDocumentData->dateExpedition), 0, 0);
            $pdf->cell(65, 5, strtoupper(_M('Cidade', $module).': '. $scholarDocumentData->cityName . ' - ' . $scholarDocumentData->stateId), 0, 0);
            $pdf->ln();
            $pdf->ln(3);
            
            //Dados do documento eleitoral
            $scholarDocumentData = $business->getDocumentData($contractData->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_ELECTION_TITLE'));
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
            $pdf->cell(190, 5, strtoupper(_M('Título eleitoral', $module).': '), 0, 0);
            $pdf->ln();
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
            $pdf->cell(70, 5, strtoupper(_M('Número', $module).': '.$scholarDocumentData->content), 0, 0);
            $pdf->cell(60, 5, strtoupper(_M('Data de expedição', $module).': '.$scholarDocumentData->dateExpedition), 0, 0);
            $pdf->cell(65, 5, strtoupper(_M('Cidade', $module).': '. $scholarDocumentData->cityName . ' - ' . $scholarDocumentData->stateId), 0, 0);
            $pdf->ln();
            $pdf->ln(3);
                
            $busphysicalPersonStudent = new BusinessBasicBusPhysicalPersonStudent();
            $physicalPersonStudent = $busphysicalPersonStudent->getPhysicalPersonStudent($contractData->personId);
            
            
            if ($physicalPersonStudent->sex == "M" )
            {
                //Dados do documento militar
                $scholarDocumentData = $business->getDocumentData($contractData->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_MILITARY'));
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
                $pdf->cell(190, 5, strtoupper(_M('Documentação militar', $module).': '), 0, 0);
                $pdf->ln();
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                $pdf->cell(70, 5, strtoupper(_M('Número', $module).': '.$scholarDocumentData->content), 0, 0);
                $pdf->cell(60, 5, strtoupper(_M('Data de expedição', $module).': '.$scholarDocumentData->dateExpedition), 0, 0);
                $pdf->cell(65, 5, strtoupper(_M('Cidade', $module).': '. $scholarDocumentData->cityName . ' - ' . $scholarDocumentData->stateId), 0, 0);
                $pdf->ln();
                $pdf->ln(3);
            }
            
            if ($isFinalDescription == true)
            {
                //Dados de estudante
                $scholarStudentData = $business->getStudentData($contractData->personId);
                
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
                $pdf->cell(190, 5, strtoupper(_M('Curso secundário/superior', $module).':'));
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                $pdf->ln();
                $pdf->cell(190, 5, strtoupper(_M('Instituição', $module).': '.$scholarStudentData->institutionName), 0, 0);
                $pdf->ln();
                $pdf->cell(190, 5, strtoupper(_M('Curso', $module).': '.$scholarStudentData->courseName), 0, 0);
                $pdf->ln();
                $pdf->cell(70, 5, strtoupper(_M('Ano de conclusão', $module).': '.$scholarStudentData->year), 0, 0);
                $pdf->cell(125, 5, strtoupper(_M('Cidade', $module).': '. $scholarStudentData->cityName . ' - ' . $scholarStudentData->stateId), 0, 0);
                $pdf->ln();
                $pdf->ln(3);
            }
            
            //Dados da forma de ingresso
            $scholarIngressionData = $business->getIngressionFormData($data->contractId);
            
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
            $pdf->cell(190, 5, strtoupper(_M('Forma de ingresso', $module) . ': '), 0, 0);
            $pdf->ln();
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
            
            if ( strlen($scholarIngressionData->selectiveProcessId) > 0 )
            {
                $pdf->multicell(190, 5, strtoupper(_M('Processo seletivo', $module) . ' ' . $scholarIngressionData->selectiveProcessId . ': ' . _M('Classificado por', $module) . ' ' . $scholarIngressionData->selectiveProcessTypeDescription . ' ' . _M('com média', $module) . ' ' . number_format($scholarIngressionData->selectiveProcessTotalPoints, 3, '.', '') . ' - ' . $scholarIngressionData->ingressionDate), 0, 'L');
                
                if ( ($isFinalDescription == true) && ($scholarIngressionData->selectiveProcessTypeId != SAGU::getParameter('SELECTIVEPROCESS', 'ENEM_TYPE_ID')) )
                {
                    if ( count($scholarIngressionData->selectiveProcessNotes) > 0 )
                    {
                        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
                        $pdf->cell(30, 5, strtoupper(_M('Data', $module)), 'B', 0, 'L');
                        $pdf->cell(115, 5, strtoupper(_M('Descrição da prova', $module)), 'B', 0, 'L');
                        $pdf->cell(45, 5, strtoupper(_M('Pontos', $module)), 'B', 0, 'L');
                        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                        
                        $pdf->ln();
                        
                        foreach ( $scholarIngressionData->selectiveProcessNotes as $selProcNote )
                        {
                            $pdf->cell(30, 5, $selProcNote->examDate, 0, 0, 'L');
                            $pdf->cell(115, 5, strtoupper($selProcNote->examDescription), 0, 0, 'L');
                            $pdf->cell(45, 5, $selProcNote->examNote, 0, 0, 'L');
                            $pdf->ln();
                        }
                    }
                }
            }
            else
            {
                $scholarIngressionForm = $scholarIngressionData->ingressionForm;
                
                if ( strlen($scholarIngressionData->ingressionComplement) > 0 )
                {
                    $scholarIngressionForm .= ': ' . $scholarIngressionData->ingressionComplement;
                }
                
                $scholarIngressionForm .= ' - ' . $scholarIngressionData->ingressionDate;
                
                $pdf->multicell(190, 5, strtoupper($scholarIngressionForm), 0, 'L');
            }

            $pdf->ln(3);

            //Dados das disciplinas
            $pdf->cell(190, 3, '', 'T', 0);
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
            
            if ( $printCreditsColumn == true )
            {
                $fline = 135;
                $pdf->showCreditsColumn = true;
            }
            else
            {
                $fline = 150;
            }
            
            $pdf->ln(3);
            $pdf->cell(96, 5, strtoupper(_M('Demonstrativo da integralização curricular', $module)), 1, 'LB', 'L');
            
            //Cabeçalho
            if ( $printCreditsColumn == true )
            {
                $pdf->cell(11, 5, _M('Créd.', $module), 1, 'LB', 'R');
            }
            else
            {
                $pdf->cell(11, 5, ' ', 1, 'LB', 'R');
            }
            
            $pdf->cell(9, 5, _M('H', $module), 1, 'LB', 'C');
            $pdf->cell(21, 5, _M('Frequência', $module), 1, 'LB', 'C');
            $pdf->cell(12, 5, _M('Grau', $module), 1, 'LB', 'C');
            $pdf->cell(16, 5, _M('Período', $module), 1, 'LB', 'C');
            $pdf->cell(27, 5, _M('Estado', $module), 1, 'LB', 'C');
            $pdf->ln();
            
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
            
            if ( $isFinalDescription == true )
            {
                $curricularComponentGroups = $business->getCurricularComponentGroups($data->contractId);
            }
            else
            {
                $ret->curricularComponentGroupId   = null;
                $ret->curricularComponentGroupName = null;
                
                $curricularComponentGroups = array($ret);
            }
    
            //Lista de disciplinas do curriculo
            foreach ( $curricularComponentGroups as $currCompGroup )
            {
                if ( strlen($currCompGroup->curricularComponentGroupId) > 0 )
                {
                    $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
                    $pdf->cell(190, 5, $currCompGroup->curricularComponentGroupId . ' ' . $currCompGroup->curricularComponentGroupName, 0, 0, 'L');
                    $pdf->ln();
                    $paragraph = 10;
                    $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                }

                $scholarCurriculumData = $business->getCurriculumData($data->contractId, $currCompGroup->curricularComponentGroupId, $data->orderBy);

                if ( count($scholarCurriculumData) > 0 )
                {
                    foreach ( $scholarCurriculumData as $scholarCurriculum )
                    {
                        //Conjunto de variaveis úteis para a exibição das disciplinas do curriculo
                        //Descrição da disciplina 
                        unset($printCurricularComponentDesc);
                        $printCurricularComponentDesc = $scholarCurriculum->curricularComponentId . ' - ' . $scholarCurriculum->curricularComponentName;
                        
                        $printCurricularComponentDesc .= strlen($scholarCurriculum->complement) > 0 ? ' [' . $scholarCurriculum->complement . ']' : '';
                        
                        //Carga horária a ser exibida
                        unset($printNumberHours);
                        $printNumberHours = $scholarCurriculum->exploitedNumberHours > 0 ? $scholarCurriculum->exploitedNumberHours : $scholarCurriculum->numberHours;
                        
                        //Número de créditos a ser exibido
                        unset($printCredits);
                        if ( $scholarCurriculum->isExploitation == DB_TRUE )
                        {
                            $creditsRate = ((float) $scholarCurriculum->credits) / ((float) $scholarCurriculum->numberHours);
                            
                            $printCredits = $printNumberHours * $creditsRate;
                        }
                        else
                        {
                            $printCredits = $scholarCurriculum->credits;
                        }
                        
                        //Estado a ser exibido
                        unset($printStatus);
                        if ( $scholarCurriculum->status == 'COURSED' )
                        {
                            $printStatus = _M('Aprovado', $module);
                        }
                        elseif ( $scholarCurriculum->status == 'EXCUSED' )
                        {
                            $printStatus = _M('Dispensado', $module);
                        }
                        elseif ( $scholarCurriculum->status == 'EXPLOITED' )
                        {
                            $printStatus = _M('Aprov.', $module);
                        }
                        elseif ( $scholarCurriculum->status == 'ENROLLED' )
                        {
                            $printStatus = _M('Matriculado', $module);
                        }
                        elseif ( ($scholarCurriculum->status == 'NOT COURSED') &&
                                 ($printNotCoursedLabel == true) )
                        {
                            $printStatus = _M('NÃO CURSADA', $module);
                        }
                        
                        //Grau a ser exibido (para disciplinas cursadas)
                        unset($printGrade);
                        if ( (strlen($scholarCurriculum->concept) > 0) && (((strlen($scholarCurriculum->grade)) > 0) && ($scholarCurriculum->grade <= 0)) )
                        {
                            $printGrade = $scholarCurriculum->concept;
                        }
                        else
                        {
                            $printGrade = number_format($scholarCurriculum->grade, 2, '.', '');
                        }
                        
                        //Detalhes da disciplina
                        unset($printDetails);
                        //Verifica se existe observação cadastrada
                        if ( strlen($scholarCurriculum->obs) > 0 )
                        {
                            $printDetails = $scholarCurriculum->obs;
                        }
                        //Senão, verifica se existe aproveitamentos
                        elseif ( (count($scholarCurriculum->exploitations) > 0) &&
                                 ($printExploitationsDetails == true) )
                        {
                            $strExploitations = '';
                            
                            //Monta os dados para exibição
                            foreach ( $scholarCurriculum->exploitations as $curriculumExploitation )
                            {
                                if ( strlen($strExploitations) > 0 )
                                {
                                    $strExploitations .= ', ';
                                }
                                
                                $strExploitations .= $curriculumExploitation->curricularComponentName;
                                $strExploitations .= '[' . $curriculumExploitation->exploitationNumberHours . _M('H', $module);
                                
                                if ( strlen($curriculumExploitation->finalGrade) > 0 )
                                {
                                    $strExploitations .= ', ' . number_format($curriculumExploitation->finalGrade, 2, '.', '');
                                }
                                
                                if ( strlen($curriculumExploitation->periodId) > 0 )
                                {
                                    $strExploitations .= ', ' . $curriculumExploitation->periodId;
                                }
                                
                                $strExploitations .= ']';
                                
                                if ( strlen($curriculumExploitation->institution) > 0 )
                                {
                                    $strExploitations .= ' ' . _M('em', $module) . ' ' . $curriculumExploitation->institution;
                                }
                            }
                            
                            $printDetails = $strExploitations;
                        }
                        //Senão, verifica se existe substituição
                        elseif ( (strlen($scholarCurriculum->substituteCurricularComponent) > 0 ) && ($printSubstituteCurricularComponents == true) )
                        {
                            $printDetails = $scholarCurriculum->substituteCurricularComponent;
                        }                        
                        
                        //Atualização de variáveis
                        if ( $scholarCurriculum->status == 'EXCUSED'   || 
                             $scholarCurriculum->status == 'EXPLOITED' ||
                             $scholarCurriculum->status == 'COURSED' )
                        {
                            $curriculumTotalCoursedHours   += $printNumberHours;
                            $curriculumTotalCoursedCredits += $printCredits;
                        }
                        elseif ( $scholarCurriculum->status == 'ENROLLED' )
                        {
                            $curriculumTotalEnrolledHours   += $printNumberHours;
                            $curriculumTotalEnrolledCredits += $printCredits;
                        }
                       
                        if ( $pdf->getY()>=265 )
                        {
                            $pdf->AddPage();
                        }
                        
                        //Impressão no documento
                        //Coluna do código/nome da disciplina
                        $fMessagePos[0]->x = $pdf->getX();
                        $fMessagePos[0]->y = $pdf->getY();                        
                        
                        $pdf->multiCell(96, 5, strtoupper($printCurricularComponentDesc), 'LB', 'L');

                        $h = $pdf->getY() - $fMessagePos[0]->y;

                        $pdf->sety($fMessagePos[0]->y);
                        $pdf->setx($fMessagePos[0]->x+96);
                        
                        //Coluna de créditos
                        if ( $printCreditsColumn == true )
                        {
                            $pdf->cell(11, $h, number_format($printCredits, 2, '.', ''), 1, 'LB', 'R');
                        }
                        else 
                        {
                            $pdf->cell(11, $h, ' ', 1, 'LB', 'R');
                        }

                        //Coluna da carga horária
                        $pdf->cell(9, $h, $printNumberHours, 1, 'L', 'R');
                        $pdf->cell(21, $h, $scholarCurriculum->frequency, 1, 'L', 'R');
                        
                        
                        //Coluna do estado ou nota
                        if ( $scholarCurriculum->status == 'COURSED' )
                        {
                            $pdf->cell(12, $h, $printGrade, 1, 'L', 'R');
                        }
                        else 
                        {
                            $pdf->cell(12, $h, '', 1, 'L', 'R');
                        }
                        
                        //Coluna do periodo
                        if ( $scholarCurriculum->status != 'NOT COURSED' )
                        {
                            $pdf->cell(16, $h, $scholarCurriculum->periodId, 1, 'L', 'R');
                        }
                        else
                        {
                            $pdf->cell(16, $h, '', 1, 'L', 'R');
                        }
                        
                        $statusDescription = strlen($scholarCurriculum->statusDescription) > 0 ? $scholarCurriculum->statusDescription : $printStatus;
                        $pdf->cell(27, $h, $statusDescription, 1, 'L', 'L');
                        
                        $pdf->ln();
                    }
                }
                else
                {
                    $pdf->cell(190, 10, strtoupper(_M('Sem dados cadastrados', $module)), 0, 0, 'C');
                }
            }          
            
            //Dados referentes a atividades complementares
            $scholarComplActivitiesData = $business->getComplementaryActivitiesData($data->contractId);
            
            if ( count($scholarComplActivitiesData) > 0 )
            {
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
                $pdf->ln();
                $pdf->cell($fline, 5, strtoupper(_M('Atividades complementares', $module)), 0, 0, 'C');
                
                if ( $printCreditsColumn == true )
                {
                    $pdf->cell(15, 5, _M('Créd.', $module), 0, 0, 'R');
                }
                
                $pdf->cell(8, 5, _M('H', $module), 0, 0, 'R');
                $pdf->cell(15, 5, _M('Grau', $module), 0, 0, 'R');
                $pdf->cell(16, 5, _M('Período', $module), 0, 0, 'L');
                $pdf->ln();
                
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                
                foreach ( $scholarComplActivitiesData as $scholarComplActivity )
                {
                    if ( $pdf->getY()>=270 )
                    {
                        $pdf->AddPage();
                    }
                    
                    $complActivityDesc = $scholarComplActivity->curricularComponentId . ' - ' . /*'(' . $scholarComplActivity->curricularComponentVersion . ') - ' .*/ $scholarComplActivity->curricularComponentName; 
                    $pdf->cell($fline, 5, strtoupper($complActivityDesc), 0, 0, 'L');
                    
                    if ( $printCreditsColumn == true )
                    {
                        $pdf->cell(15, 5, number_format($scholarComplActivity->creditsConcluded, 2, '.', ''), 0, 0, 'R');
                    }
                    
                    $pdf->cell(8, 5, $scholarComplActivity->hoursConcluded, 0, 0, 'R');
                    $pdf->cell(31, 5, strtoupper(_M('Cursada', $module)), 0, 0, 'L');
                    
                    $pdf->ln();
                    
                    if ( count($scholarComplActivity->details) > 0 )
                    {
                        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);
                        unset($complActivitiesAnnex);
                        foreach ( $scholarComplActivity->details as $complActivityDetails )
                        {
                            if ( $pdf->getY()>=265 )
                            {
                                $pdf->AddPage();
                            }
                            
                            if ( $complementaryActivitiesShowType == 2 )
                            {
                                $x1 = $pdf->getX();
                                $y1 = $pdf->getY();
                                $pdf->cell(10, 5, '', 0);
                                $pdf->multicell($fline - 10, 5, strtoupper($complActivityDetails->description), 0, 'L');
                                $x2 = $pdf->getX();
                                $y2 = $pdf->getY();
                                
                                $pdf->setXY($x1, $y2 - 5);
                                
                                if ( $printCreditsColumn == true )
                                {
                                    $pdf->cell(15, 5, number_format($complActivityDetails->totalCredits, 2, '.', ''), 0, 0, 'R');
                                }
                                
                                $pdf->cell(8, 5, $complActivityDetails->totalHours, 0, 0, 'R');
                                
                                if ( (strlen($complActivityDetails->concept) > 0) && (((strlen($complActivityDetails->degree)) > 0) && ($complActivityDetails->degree <= 0)) )
                                {
                                    $pdf->cell(15, 5, $complActivityDetails->concept, 0, 0, 'R');
                                }
                                else
                                {
                                    $pdf->cell(15, 5, number_format($complActivityDetails->degree, 2, '.', ''), 0, 0, 'R');
                                }
                                
                                $pdf->cell(16, 5, $complActivityDetails->periodId, 0, 0, 'L');
                                
                                $pdf->setXY($x2, $y2);
                                
                                if ( strlen($complActivityDetails->obs) > 0 )
                                {
                                    $pdf->cell(15, 5, '', 0);
                                    $pdf->multicell($fline - 15, 5, strtoupper($complActivityDetails->obs), 0, 'L');
                                }
                            }
                            else
                            {
                                $complActivitiesAnnex[] = $complActivityDetails;
                            }
                            
                            if ( $sumComplementaryActivitiesHours )
                            {
                                $curriculumTotalCoursedHours   += $complActivityDetails->totalHours;
                                $curriculumTotalCoursedCredits += $complActivityDetails->totalCredits;
                            }
                            
                        }
                        
                        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                    }
                    
                    if ( $scholarComplActivity->hoursNotConcluded > 0 )
                    {
                        $pdf->cell($fline, 5, strtoupper($complActivityDesc), 0, 0, 'L');
                        
                        if ( $printCreditsColumn == true )
                        {
                            $pdf->cell(15, 5, number_format($scholarComplActivity->creditsNotConcluded, 2, '.', ''), 0, 0, 'R');
                        }
                        
                        $pdf->cell(8, 5, $scholarComplActivity->hoursNotConcluded, 0, 0, 'R');
                        $pdf->cell(31, 5, strtoupper(_M('Não cursada', $module)), 0, 0, 'L');
                        $pdf->ln();
                    }
                }
            }
            
            if ( $printOtherCoursedCurricularComponents == true )
            {
                if ( ($dontPrintConcludedCourseCurricularComps == true) && 
                     (strlen($courseToIgnore) > 0) )
                {
                    $filters->concludedCourses = $courseToIgnore;
                    
                    $scholarOutOfCurriculumData = $business->getOutOfCurriculumData($data->contractId, $filters);
                }
                else
                {
                    $scholarOutOfCurriculumData = $business->getOutOfCurriculumData($data->contractId);
                }
            }
            
            if ( count($scholarOutOfCurriculumData) > 0 )
            {
                if ( $pdf->getY()>=265 )
                {
                    $pdf->AddPage();
                }
                
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
                $pdf->ln();
                $pdf->cell($fline, 5, strtoupper(_M('Outras disciplinas cursadas', $module)), 0, 0, 'C');
                
                if ( $printCreditsColumn == true )
                {
                    $pdf->cell(15, 5, _M('Créd.', $module), 0, 0, 'R');
                }
                
                $pdf->cell(8, 5, _M('H', $module), 0, 0, 'R');
                $pdf->cell(15, 5, _M('Grau', $module), 0, 0, 'R');
                $pdf->cell(16, 5, _M('Período', $module), 0, 0, 'L');
                $pdf->ln();
                
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                
                foreach ( $scholarOutOfCurriculumData as $scholarOutOfCurriculum )
                {
                    if ( $pdf->getY()>=270 )
                    {
                        $pdf->AddPage();
                    }
                    
                    if ( (strlen($scholarOutOfCurriculum->exploitedHours) == 0) || ($scholarOutOfCurriculum->exploitedHours < $scholarOutOfCurriculum->academicNumberHours) )
                    {
                        $scholarOutOfCurriculumDesc = $scholarOutOfCurriculum->curricularComponentId . /*'/' . $scholarOutOfCurriculum->curricularComponentVersion .*/ ' - ' . $scholarOutOfCurriculum->curricularComponentName;
                        
                        $pdf->cell($fline, 5, strtoupper($scholarOutOfCurriculumDesc), 0, 0, 'L');
                        
                        if ( $printCreditsColumn == true )
                        {
                            if ( $scholarOutOfCurriculum->notExploitedCredits > 0 )
                            {
                                $printCredits = number_format($scholarOutOfCurriculum->notExploitedCredits, 2, '.', '');
                            }
                            else
                            {
                                $printCredits = number_format($scholarOutOfCurriculum->academicCredits, 2, '.', '');
                            }
                            
                            $pdf->cell(15, 5, $printCredits, 0, 0, 'R');
                            
                            $outOfCurriculumTotalCoursedCredits += $printCredits;
                            unset($printCredits);
                        }
                        
                        if ( $scholarOutOfCurriculum->notExploitedHours > 0 )
                        {
                            $printNumberHours = $scholarOutOfCurriculum->notExploitedHours;
                        }
                        else
                        {
                            $printNumberHours = $scholarOutOfCurriculum->academicNumberHours;
                        }
                        
                        $pdf->cell(8, 5, $printNumberHours, 0, 0, 'R');
                        
                        $outOfCurriculumTotalCoursedHours += $printNumberHours;
                        unset($printNumberHours);
                        
                        if ( (strlen($scholarOutOfCurriculum->concept) > 0) && (((strlen($scholarOutOfCurriculum->finalNote)) > 0) && ($scholarOutOfCurriculum->finalNote <= 0)) )
                        {
                            $pdf->cell(15, 5, $scholarOutOfCurriculum->concept, 0, 0, 'R');
                        }
                        else
                        {
                            $pdf->cell(15, 5, number_format($scholarOutOfCurriculum->finalNote, 2, '.', ''), 0, 0, 'R');
                        }
                        
                        $pdf->cell(16, 5, $scholarOutOfCurriculum->periodId, 0, 0, 'L');
                        $pdf->ln();
                        
                        if ( strlen($scholarOutOfCurriculum->obs) > 0 )
                        {
                            if ( $pdf->getY()>=265 )
                            {
                                $pdf->AddPage();
                            }
                            
                            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);
                            $pdf->cell(10, 5 ,'', 0, 0);
                            $pdf->multicell($fline - 10, 5, strtoupper($scholarOutOfCurriculum->obs), 0, 'L');
                            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                        }
                    }
                }
            }
            
            $busTestEndCourseContract = new BusinessAcademicBusTestEndCourseContract();
            $testEndCourseContract    = $busTestEndCourseContract->getTestEndCourse($data->contractId);
            
            $pdf->ln();
            if ( strlen($testEndCourseContract->contractId) > 0 )
            {
                //Dados do documento
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                $pdf->cell(190, 5, strtoupper(_M('Exame nacional de cursos', $module).': '), 0, 0);
                $pdf->ln();
                $pdf->cell(70, 5, strtoupper(_M('Tipo de prova', $module).': '.$testEndCourseContract->description), 0, 0);
                
                if ( $testEndCourseContract->excused == DB_TRUE )
                {
                    $status = _M('Dispensado', $module);
                }
                if ( ( $testEndCourseContract->isPresent == DB_FALSE ) && ( $testEndCourseContract->excused == DB_FALSE ) )
                {
                    $status = _M('Desistente', $module);
                }
                elseif ( ( $testEndCourseContract->isPresent == DB_TRUE ) && ( $testEndCourseContract->excused == DB_FALSE ) )
                {
                    $status = _M('OK', $module);
                }
                
                $pdf->cell(60, 5, strtoupper(_M('Estado', $module).': '.$status), 0, 0);
                $pdf->cell(65, 5, strtoupper(_M('Data de exame', $module).': '. $testEndCourseContract->examDate), 0, 0);
                $pdf->ln();
                $pdf->ln(3);
            }
                
            $pdf->cell(95, 5, strtoupper(_M('Data de conclusão', $module) . ': ' . $contractData->conclusionDate), 0, 0, 'L');
            
            if ( $printEmendsDate == true )
            {
                $pdf->cell(95, 5, strtoupper(_M('Data da apostila', $module) . ': ' . $contractData->emendsDate), 0, 0, 'L');
            }
            else
            {
                $pdf->cell(95, 5, strtoupper(_M('Data do diploma', $module) . ': ' . $contractData->diplomaDate), 0, 0, 'L');
            }
            
            $pdf->ln();
            
            $pdf->cell(95, 5, strtoupper(_M('Data de formatura', $module) . ': ' . $contractData->formationDate), 0, 0, 'L');
            
            $pdf->ln();
            $pdf->ln();
            
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
            
            if ( strlen($observation) > 0 )
            {
                $pdf->cell(10, 5, strtoupper(_M('Obs', $module) . ':'), 0, 0, 'L');
                $pdf->multicell(180, 5, strtoupper($observation), 0, 'J');
            }
            
            if ( $printPhysicalExcused == true )
            {
                if ( strlen($observation) == 0 )
                {
                    $pdf->cell(10, 5, strtoupper(_M('Obs', $module) . '.:'), 0, 0, 'L');
                }
                else
                {
                    $pdf->cell(10, 5, '', 0, 0, 'L');
                }
                
                if ( strlen($physicalExcusedText) > 0 )
                {
                    $pdf->multicell(180, 5, strtoupper($physicalExcusedText), 0, 'J');
                }
                else
                {
                    $pdf->multicell(180, 5, strtoupper(_M('Educação física: dispensado.', $module)), 0, 'J');
                }
            }
            
            $pdf->ln();

            if ( $pdf->getY()>=265 )
            {
                $pdf->AddPage();
            }
            
            $pdf->cell(190, 5, strtoupper(_M('Disciplinas do currículo', $module)), 0, 0, 'C');
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
            $pdf->ln();
            
            $y = $pdf->getY();
            $pdf->cell(70, 5, strtoupper(_M('Número de horas cursadas', $module)) . ':', 0, 0, 'L');
            $pdf->cell(50, 5, $curriculumTotalCoursedHours . ' ' . strtoupper(_M('horas/aula', $module)), 0, 0, 'L');
            $pdf->ln();
            $pdf->cell(70, 5, strtoupper(_M('Número de horas matriculadas', $module)) . ':', 0, 0, 'L');
            $pdf->cell(50, 5, $curriculumTotalEnrolledHours . ' ' . strtoupper(_M('horas/aula', $module)), 0, 0, 'L');
            $pdf->ln();
            $pdf->cell(70, 5, strtoupper(_M('Carga horária total do curso', $module)) . ':', 0, 0, 'L');
            $pdf->cell(50, 5, $curriculumCourseTotalHours . ' ' . strtoupper(_M('horas/aula', $module)), 0, 0, 'L');
            
            
            if ( $printCreditsColumn == true )
            {
                $x = $pdf->getX();
                $pdf->setXY($x, $y);
                
                $pdf->cell(50, 5, number_format($curriculumTotalCoursedCredits, 2, '.', '') . ' ' . strtoupper(_M('créditos', $module)), 0, 0, 'L');
                $pdf->ln();
                $pdf->setX($x);
                
                $pdf->cell(50, 5, number_format($curriculumTotalEnrolledCredits, 2, '.', '') . ' ' . strtoupper(_M('créditos', $module)), 0, 0, 'L');
                $pdf->ln();
                $pdf->setX($x);
                
                $pdf->cell(50, 5, number_format($curriculumCourseTotalCredits, 2, '.', '') . ' ' . strtoupper(_M('créditos', $module)), 0, 0, 'L');
            }
            
            $pdf->ln();
            $pdf->ln();
            
            if ( $outOfCurriculumTotalCoursedHours > 0 )
            {
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
                $pdf->cell(190, 5, strtoupper(_M('Outras disciplinas cursadas', $module)), 0, 0, 'C');
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                $pdf->ln();
                
                $y = $pdf->getY();
                $pdf->cell(70, 5, strtoupper(_M('Número de horas cursadas', $module)) . ':', 0, 0, 'L');
                $pdf->cell(50, 5, $outOfCurriculumTotalCoursedHours . ' ' . strtoupper(_M('horas/aula', $module)), 0, 0, 'L');
                
                if ( $printCreditsColumn == true )
                {
                    $x = $pdf->getX();
                    $pdf->setXY($x, $y);
                
                    $pdf->cell(50, 5, $outOfCurriculumTotalCoursedCredits . ' ' . strtoupper(_M('créditos', $module)), 0, 0, 'L');
                }
                
                $pdf->ln();
                $pdf->ln();
            }
            
            if ( $printNotSubJudicial == true )
            {
                if ( $pdf->getY()>=265 )
                {
                    $pdf->AddPage();
                }
                
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
                
                
                if ( strlen($notSubJudicialText) > 0 )
                {
                    $pdf->multicell(190, 5, strtoupper($notSubJudicialText), 0, 'J');
                }
                else
                {
                    $pdf->multicell(190, 5, strtoupper(_M('Aluno não está sub-júdice', $module)), 0, 'J');
                }
                
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                $pdf->ln();
            }
            
            if ( strlen($sector) > 0 )
            {
                $pdf->cell(190, 5, strtoupper($sector), 0, 0, 'L');
                $pdf->ln();
            }
            
            $scholarCompanyData = $business->getCompanyData(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
            
            $pdf->cell(190, 5, strtoupper($scholarCompanyData->cityName . '/' . $scholarCompanyData->stateId . ', ' . SAGU::getDateByExtense($data->emissionDate)), 0, 0, 'L');
            
            if ( (strlen($stamp1Id) > 0) || (strlen($stamp2Id) > 0) )
            {
                if ( ($pdf->getX() + 40) > 245 )
                {
                    $pdf->addPage('P', 'mm', 'A4');
                }
                
                $pdf->ln();
                $pdf->ln();
                $pdf->ln();
                $pdf->ln();
                $pdf->ln();
                $pdf->ln();
                
                if ( (strlen($stamp1Id) > 0) && (strlen($stamp2Id) > 0) )
                {
                    $stamp1Data = $business->getStampData($stamp1Id);
                    $stamp2Data = $business->getStampData($stamp2Id);
                    
                    $pdf->cell(90, 5, strtoupper($stamp1Data->personName), 'T', 0, 'C');
                    $pdf->cell(10, 5, '', 0, 0, 'L');
                    $pdf->cell(90, 5, strtoupper($stamp2Data->personName), 'T', 0, 'C');
                    $pdf->ln();
                    $pdf->cell(90, 5, strtoupper($stamp1Data->functionDescription), 0, 0, 'C');
                    $pdf->cell(10, 5, '', 0, 0, 'L');
                    $pdf->cell(90, 5, strtoupper($stamp2Data->functionDescription), 0, 0, 'C');
                }
                else
                {
                    strlen($stamp1Id) > 0 ? $stampId = $stamp1Id : $stampId = $stamp2Id;
                    
                    $stampData = $business->getStampData($stampId);
                    
                    $pdf->cell(50, 5, '', 0);
                    $pdf->cell(90, 5, strtoupper($stampData->personName), 'T', 0, 'C');
                    $pdf->ln();
                    $pdf->cell(190, 5, strtoupper($stampData->functionDescription), 0, 0, 'C');
                }
            }
            
            if ( count($complActivitiesAnnex) > 0 )
            {
                $pdf->addPage('P', 'mm', 'A4');
                
                $pdf->cell(150, 5, strtoupper(_M('Nome', $module).': '.$scholarPersonData->personName), 0, 0);
                $pdf->cell(40, 5, strtoupper(_M('Matrícula', $module).': '.$scholarPersonData->personId), 0, 0);
                
                $pdf->ln();
                $pdf->ln();
                $pdf->ln();
                
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
                $pdf->cell($fline, 5, strtoupper(_M('Descrição das atividades complementares', $module)), 0, 0, 'C');
                
                if ( $printCreditsColumn == true )
                {
                    $pdf->cell(15, 5, _M('Créd.', $module), 0, 0, 'R');
                }
                
                $pdf->cell(8, 5, _M('H', $module), 0, 0, 'R');
                $pdf->cell(15, 5, _M('Grau', $module), 0, 0, 'R');
                $pdf->cell(16, 5, _M('Período', $module), 0, 0, 'L');
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
                $pdf->ln();
                
                foreach ( $complActivitiesAnnex as $complActivityDetails )
                {
                    if ( $pdf->getY()>=265 )
                    {
                        $pdf->AddPage();
                    }
                            
                    $x1 = $pdf->getX();
                    $y1 = $pdf->getY();
                    $pdf->multicell($fline, 5, strtoupper($complActivityDetails->description), 0, 'L');
                    $x2 = $pdf->getX();
                    $y2 = $pdf->getY();
                    
                    $pdf->setXY($x1 + $fline, $y2 - 5);
                    
                    if ( $printCreditsColumn == true )
                    {
                        $pdf->cell(15, 5, number_format($complActivityDetails->totalCredits, 2, '.', ''), 0, 0, 'R');
                    }
                    
                    $pdf->cell(8, 5, $complActivityDetails->totalHours, 0, 0, 'R');
                    
                    if ( (strlen($complActivityDetails->concept) > 0) && (((strlen($complActivityDetails->degree)) > 0) && ($complActivityDetails->degree <= 0)) )
                    {
                        $pdf->cell(15, 5, $complActivityDetails->concept, 0, 0, 'R');
                    }
                    else
                    {
                        $pdf->cell(15, 5, number_format($complActivityDetails->degree, 2, '.', ''), 0, 0, 'R');
                    }
                    
                    $pdf->cell(16, 5, $complActivityDetails->periodId, 0, 0, 'L');
                    
                    $pdf->setXY($x2, $y2);
                    
                    if ( strlen($complActivityDetails->obs) > 0 )
                    {
                        $pdf->cell(15, 5, '', 0);
                        $pdf->multicell($fline - 15, 5, strtoupper($complActivityDetails->obs), 0, 'L');
                    }
                }
                $pdf->ln();
                $pdf->ln();
                
                if ( strlen($sector) > 0 )
                {
                    $pdf->cell(190, 5, strtoupper($sector), 0, 0, 'L');
                    $pdf->ln();
                }
                
                $pdf->cell(190, 5, strtoupper($scholarCompanyData->cityName . '/' . $scholarCompanyData->stateId . ', ' . SAGU::getDateByExtense($data->emissionDate)), 0, 0, 'L');
            
                if ( (strlen($stamp1Id) > 0) || (strlen($stamp2Id) > 0) )
                {
                    if (($pdf->getX() + 40) > 245)
                    {
                        $pdf->addPage('P', 'mm', 'A4');
                    }
                    
                    $pdf->ln();
                    $pdf->ln();
                    $pdf->ln();
                    $pdf->ln();
                    $pdf->ln();
                    $pdf->ln();
                    
                    if ( (strlen($stamp1Id) > 0) && (strlen($stamp2Id) > 0) )
                    {
                        $stamp1Data = $business->getStampData($stamp1Id);
                        $stamp2Data = $business->getStampData($stamp2Id);
                        
                        $pdf->cell(90, 5, strtoupper($stamp1Data->personName), 'T', 0, 'C');
                        $pdf->cell(10, 5, '', 0, 0, 'L');
                        $pdf->cell(90, 5, strtoupper($stamp2Data->personName), 'T', 0, 'C');
                        $pdf->ln();
                        $pdf->cell(90, 5, strtoupper($stamp1Data->functionDescription), 0, 0, 'C');
                        $pdf->cell(10, 5, '', 0, 0, 'L');
                        $pdf->cell(90, 5, strtoupper($stamp2Data->functionDescription), 0, 0, 'C');
                    }
                    else
                    {
                        strlen($stamp1Id) > 0 ? $stampId = $stamp1Id : $stampId = $stamp2Id;
                        
                        $stampData = $business->getStampData($stampId);
                        
                        $pdf->cell(50, 5, '', 0);
                        $pdf->cell(90, 5, strtoupper($stampData->personName), 'T', 0, 'C');
                        $pdf->ln();
                        $pdf->cell(190, 5, strtoupper($stampData->functionDescription), 0, 0, 'C');
                    }
                }
            }
            
            $pdf->close();

            if ( $rdata->isFinalHistoric == true )
            {
                $pdf->output($file, 'F');
                SAGU::returnAsFile($rdata->contractId . '.pdf', SAGUFile::getFileBody($file, true), 'application/pdf');
            }
            else
            {
                // Se estiver imprimindo do portal
                if ( $data->portal )
                {                    
                    $pdf->output($data->fileName, 'F');
                }
                else
                {
                    $pdf->output();
                }
            }

        }
    }
}

?>
