<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 * */
/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC003');
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;

    public function academicRegisterLayerHeader($reportData, $auxToMargin)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $this->SetY(5);
        $this->SetAutoPageBreak(10);

        if ( $auxToMargin == 1 )
        {
            $this->SetLeftMargin(10);
        }
        elseif ( $auxToMargin == 2 )
        {
            $this->SetLeftMargin(10 + 145);
        }

        $this->setLineWidth(0);
        $this->cell(120, 5, '', '', 0);
        $this->ln(1);

        if ( strlen(SAGUFile::getPhotoPath($reportData->companyPersonId)) > 0 )
        {
            $this->Image(SAGUFile::getPhotoPath($reportData->companyPersonId), ($auxToMargin == 2 ? (120 * $auxToMargin + 25) : 120), 13, '', 17, SAGU::getParameter('BASIC', 'PHOTO_FORMAT'));
        }

        $this->cell(20, 15, '', '', 0);
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 16);
        $this->cell(70, 15, _M('Registro acadêmico', $module), 0, 0, 'C');
        $this->ln();

        for ( $x = 0; $x < strlen($reportData->personId); $x++ )
        {
            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 14);
            $this->cell(8, 8, $reportData->personId[$x], 'TLRB', 0);
        }

        $this->cell(strlen($reportData->personId), 8, '  ' . _M('Cadastro', $module) . ' ' . $reportData->fakeName, 0);
        $this->ln(10);

        for ( $x = 0; $x < 4; $x++ )
        {
            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 14);
            $this->cell(8, 8, '', 'TLRB', 0);
        }

        $this->cell(15, 8, '  ' . _M('Código do arquivo de passivo', $module), 0);
        $this->ln(8);
    }

    public function academicRegisterLayerMiddle($reportData, $auxToMargin)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
        $this->cell(8, 10, _M('Nome', $module), 0);
        $this->ln(7);
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);

        $this->cell(140, 7, substr($reportData->personName, 0, 38), 'LRTB', 0);

        $this->ln();
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
        $this->cell(8, 10, _M('Filiação', $module), 0);
        $this->ln(7);

        if ( count($reportData->nameFather) == 0 )
        {
            $reportDara->nameFather = _M('Não informado', $module);
        }
        if ( count($reportData->nameMother) == 0 )
        {
            $reportDara->nameMother = _M('Não informado', $module);
        }
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);
        $this->cell(140, 7, substr($reportData->fatherName . ' - ' . $reportData->motherName, 0, 38), 'LRTB', 0);
        $this->ln();


        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
        $this->cell(8, 10, _M('Data de nascimento', $module) . ' - ' . _M('Naturalidade', $module), 0);
        $this->ln(7);
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);
        $this->cell(140, 7, $reportData->dateBirth . ' - ' . $reportData->cityIdBirth . ' - ' . $reportData->stateIdBirth, 'LRTB', 0);
        $this->ln();

        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
        $this->cell(8, 10, _M('Ensino médio', $module) . ' / ' . _M('Contém certificado', $module), 0);
        $this->ln(7);
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);
        $this->cell(140, 7, substr($reportData->institutionIdHs, 0, 50), 'LRTB', 0);
        $this->ln();

        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
        $this->cell(8, 10, _M('Logradouro', $module) . ' ' . _M('e', $module) . ' ' . _M('ano de conclusão', $module), 0);
        $this->ln(7);
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);
        $this->cell(140, 7, $reportData->cityInstitutionId . ' - ' . $reportData->stateIdInstitution . ' - ' . $reportData->yearHs, 'LRTB', 0);
        $this->ln();

        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
        $this->cell(8, 10, _M('Forma de ingresso', $module), 0);
        $this->ln(7);

        if ( $reportData->stateContractId == SAGU::getParameter('BASIC', 'WRITING_STATE_CONTRACT') )
        {
            $businessAcademicRegisterLayer1 = new BusinessAcademicBusAcademicRegisterLayer();

            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
            $this->cell(140, 7, $reportData->stateContractBegin . ' - ' . $reportData->stateContractBeginDescription, 'LRTB', 0, 'L');
        }
        else
        {
            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);

            if ( strlen($reportData->stateContractDescription . ' ' . $reportData->institutionContractDescrition) > 50 )
            {
                $this->MultiCell(140, 5, $reportData->stateContractDescription . ' ' . $reportData->institutionContractDescrition, 'LRTB', 'L');
            }
            else
            {
                $this->cell(140, 8, $reportData->stateContractDescription . ' ' . $reportData->institutionContractDescrition, 'LRTB', 0);
            }

            $this->ln();
        }
    }
}

/**
 * PDF extension to generate report
 */
class RptAcademicRegisterLayer
{

    public function RptAcademicRegisterLayer($pupilsAcademicRegister = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //pega dados da instituição
        $businessCompany = new BusinessBasicBusCompany();
        $company = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $legalPerson = $businessLegalPerson->getLegalPerson($company->personId);

        $reportData->companyPersonId = $company->personId;

        $pupilsTotal = count($pupilsAcademicRegister);

        //Generating PDF file
        $pdf = new PDF();
        $pdf->addPage('L', 'mm', 'A4');
        $pdf->aliasNbPages();

        //Relat
        $auxToMargin = 1;

        if ( is_array($pupilsAcademicRegister) )
        {
            if ( is_array($pupilsAcademicRegister) && (count($pupilsAcademicRegister) > 0) )
            {
                foreach ( $pupilsAcademicRegister as $pupil )
                {
                    $reportData->personId = $pupil[0];
                    $reportData->fakeName = $legalPerson->fakeName;
                    $reportData->personName = $pupil[1];
                    $reportData->fatherName = $pupil[2];
                    $reportData->motherName = $pupil[3];
                    $reportData->dateBirth = $pupil[4];
                    $reportData->cityIdBirth = $pupil[5];
                    $reportData->stateIdBirth = $pupil[6];
                    $reportData->institutionIdHs = $pupil[7];
                    $reportData->cityInstitutionId = $pupil[8];
                    $reportData->stateIdInstitution = $pupil[9];
                    $reportData->yearhs = $pupil[10];
                    $reportData->courseId = $pupil[11];
                    $reportData->courseName = $pupil[12];
                    $reportData->stateContractDescription = $pupil[13];
                    $reportData->institutionContractDescrition = $pupil[14];
                    $reportData->stateContractId = $pupil[15];
                    $reportData->periodId = $pupil[16];
                    $reportData->stateContractBegin = $pupil[15];
                    $reportData->stateContractBeginDescription = $pupil[13];

                    $pdf->academicRegisterLayerHeader($reportData, $auxToMargin);

                    $pdf->academicRegisterLayerMiddle($reportData, $auxToMargin);

                    if ( $auxToMargin == 1 )
                    {
                        $auxToMargin = 2;
                    }
                    else
                    {
                        $auxToMargin = 1;
                        $pdf->addPage('L', 'mm', 'A4');
                    }
                }
            }

            $pdf->close();
            $pdf->output();
        }
    }
}
?>