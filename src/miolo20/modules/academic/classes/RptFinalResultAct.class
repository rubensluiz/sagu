<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This generates a file reports with the end result of a discipline, those who have been approved or not.
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Cristian Edson Göhl [cristian@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
/**
 * Default defines 
 * To report identification
 */

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();

define( 'MODEL_NAME', $MIOLO->getModulePath( 'basic', '/documents/attendanceFinalResult.sxw' ) );

/**
 * PDF extension to generate report
 */
class RptFinalResultAct
{

    public function RptFinalResultAct($data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $this->krono = new MKrono( );
        
        // include and instance agata api
        $MIOLO->uses( '/core/AgataAPI.class' );
        $api = new AgataAPI( );
        
        //Receive the model.sxw the parameters MAX_PUPIL_BY_PAGE = maximum of persons per page
        //and MAX_LEN_NAME maximum size of the name.
        $agataParameter = AgataOO::getConfig( MODEL_NAME );
        $business = new BusinessAcademicBusAttendance();
        $busGroup = new BusinessAcademicBusGroup();
        $businessFinalNote = new BusinessAcademicBusEnroll();
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();

        //Variable that controls the page break.
        $pg = 1;
        if ( count( $data->groupId ) > 0 )
        {
            // Datas , meses, dias para exibicao
            $listMonths = SAGU::listMonths();
            $finalVerification = SAGU::NVL($data->finalVerification, SAGU::getDateNow());
            $day = SAGU::getDatePart($finalVerification, 'DAY');
            $month = SAGU::getDatePart($finalVerification, 'MONTH');
            $monthName = $listMonths[$month];
            $year = SAGU::getDatePart($finalVerification, 'YEAR');
  
            foreach ( $data->groupId as $group )
            {
                if ( count( $group ) > 1 )
                {
                    list( $groupId, $professorId ) = $group;
                }
                else
                {
                    $groupId = $group[0];
                }
                
                $reportData = $business->getGroupData( $groupId );
                
                // Verifica se existe retorno.
                if ( !isset($reportData->groupId))
                {
                    throw new Exception(_M('Disciplina @1 sem professor ou horário definido.', $module, $groupId));
                }
                
                $group = $busGroup->getGroup( $reportData->groupId );
                $learningPeriod = $busLearningPeriod->getLearningPeriod( $group->learningPeriodId );

                $reportData->periodId = $learningPeriod->periodId;
                $reportData->emissionDate = SAGU::getDateNow();
                $reportData->learningDays = $learningPeriod->learningDays;
                $reportData->finalVerification = $data->finalVerification;
                $reportData->courseId = $data->courseId;
                $reportData->groupId = $data->groupId;
                $reportData->courseVersion = $data->courseVersion;
                $reportData->finalAverage = $learningPeriod->finalAverage;
                
                $reportData->pupils = $business->listGroupEnrolledPupils($groupId, false);
                
                //Pupils listing
                if ( count( $reportData->pupils ) > 0 )
                {
                    $count = 1;
                    foreach ( $reportData->pupils as $key1 => $pupil )
                    {
                        list( $enrollId,
                              $personId,
                              $personName,
                              $courseId,
                              $statusId,
                              $statusDescription,
                              $dateCancellation,
                              $finalAverage,
                              $courseVersionTypeId,
                              $courseVersion,
                              $currentNote ) = $pupil;
                        
                        if ( $oldPg != $pg )
                        {
                            $linePg = 1;
                            $oldPg = $pg;
                            
                            $curricularData[$oldPg][0] = $reportData->curricularComponent;
                            $curricularData[$oldPg][1] = $reportData->center;
                            $curricularData[$oldPg][2] = $reportData->professor;
                            $curricularData[$oldPg][3] = $reportData->emissionDate;
                            $curricularData[$oldPg][4] = $reportData->unit;
                            $curricularData[$oldPg][5] = $reportData->periodId;
                            $curricularData[$oldPg][6] = $reportData->numberHours;
                            $curricularData[$oldPg][7] = $day;
                            $curricularData[$oldPg][8] = $monthName;
                            $curricularData[$oldPg][9] = $year;
                            $curricularData[$oldPg][10] = $reportData->learningDays;
                            $curricularData[$oldPg][11] = $reportData->finalAverage;
                        }

                        $arraySubfield[0][$oldPg][$key1] = array( 
                                $count, 
                                $personName, 
                                $currentNote,
                                $statusDescription, 
                                $dateCancellation 
                        );
                        $count ++;

                        
                        //Checks if the number of character of the name of the staff is greater
                        //than or equal to the number that was set on the properties of the
                        // model.sxw
                        if ( strlen( $personName ) >= $agataParameter['max_len_name'] )
                        {
                            $linePg = $linePg + 2;
                        }
                        else
                        {
                            $linePg ++;
                        }
                        //Checks if the number of lines is greater or equal to the parameter
                        // that is in the properties of the model.Sxw
                        if ( $linePg >= $agataParameter['max_pupil_by_page'] )
                        {
                            $pg ++;
                        }
                        
                        $oldCourseId = $courseId;
                    }
                    
                    $fileName = '/attendanceFinalResult_' . $groupId . '.sxw';
                    
                    $api->setParameter( '$secretaryName', SAGU::getParameter('ACADEMIC', 'SECRETARY_REGISTER_NUMBER_NAME') );
                    $api->setParameter( '$directorName', SAGU::getParameter('ACADEMIC', 'DIRECTOR_REGISTER_NUMBER_NAME') );
                    $api->setParameter( '$secretaryNumber', SAGU::getParameter('ACADEMIC', 'SECRETARY_REGISTER_NUMBER') );
                    $api->setParameter( '$directorNumber', SAGU::getParameter('ACADEMIC', 'DIRECTOR_REGISTER_NUMBER') );
                    $api->setParameter( '$secretaryDate', SAGU::getParameter('ACADEMIC', 'SECRETARY_REGISTER_NUMBER_DATE') );
                    $api->setParameter( '$directorDate', SAGU::getParameter('ACADEMIC', 'DIRECTOR_REGISTER_NUMBER_DATE') );
                    
                    // SET AGATA PARAMETERS
                    //Set information of the header 
                    $api->setLanguage( $MIOLO->getConf( 'i18n.language' ) );
                    $api->setOutputPath( SAGU::getParameter('BASIC', 'TEMP_DIR') . $fileName );
                    $api->setDataArray( $curricularData );
                    $api->setSubDataArray( $arraySubfield );
                    
                    $ok = $api->parseOpenOffice( MODEL_NAME );
                    
                    if ( $ok && ($data->generateOption == 'pdf') )
                    {
                        $api->setOutputPath( SAGU::getParameter('BASIC', 'TEMP_DIR') . '/attendanceFinalResult_' . $groupId . '.pdf' );
                        $api->openOffice2pdf( SAGU::getParameter('BASIC', 'TEMP_DIR') . '/attendanceFinalResult_' . $groupId . '.sxw' );
                    }
                    
                    $api->fileDialog();
                }
            }
        }
    }
}

?>
