<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC003'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    var $B;
    var $I;
    var $U;
    var $HREF;
    var $periodId;
    /**
     * Defines the footer for this report
     */
    public function Footer()
    {

    }

    /**
     * Defines the header for this report
     */
    public function Header()
    {
        $module = MIOLO::getCurrentModule();
        
        if ($this->type == 1)
        {
            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 14);
            $this->cell(0, 6, _M('Resumo do livro matrícula', $module), 0, 0, 'L');
            $this->ln();
            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
            $this->cell(0, 6, _M('Período', $module) . ' ' . $this->periodId, 0, 0, 'L');
            $this->ln();
            $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
            $this->cell(10, 7, _M('Cód', $module), 0, 0, 'L');
            $this->cell(150, 7, _M('Estado', $module), 0, 0, 'L');
            $this->cell(10, 7, _M('Número', $module), 0, 0, 'L');
            $this->ln();
        }
    }

    function WriteHTML($html)
    {
        //HTML parser
        $html=str_replace("\n",' ',$html);
        $a=preg_split('/<(.*)>/U',$html,-1,PREG_SPLIT_DELIM_CAPTURE);
        foreach($a as $i=>$e)
        {
            if($i%2==0)
            {
                //Text
                if($this->HREF)
                    $this->PutLink($this->HREF,$e);
                else
                    $this->Write(5,$e);
            }
            else
            {
                //Tag
                if($e{0}=='/')
                    $this->CloseTag(strtoupper(substr($e,1)));
                else
                {
                    //Extract attributes
                    $a2=explode(' ',$e);
                    $tag=strtoupper(array_shift($a2));
                    $attr=array();
                    foreach($a2 as $v)
                        if(ereg('^([^=]*)=["\']?([^"\']*)["\']?$',$v,$a3))
                            $attr[strtoupper($a3[1])]=$a3[2];
                    $this->OpenTag($tag,$attr);
                }
            }
        }
    }

    function OpenTag($tag,$attr)
    {
        //Opening tag
        if($tag=='B' or $tag=='I' or $tag=='U')
            $this->SetStyle($tag,true);
        if($tag=='A')
            $this->HREF=$attr['HREF'];
        if($tag=='BR')
            $this->Ln(5);
    }
    
    function CloseTag($tag)
    {
        //Closing tag
        if($tag=='B' or $tag=='I' or $tag=='U')
            $this->SetStyle($tag,false);
        if($tag=='A')
            $this->HREF='';
    }
    
    function SetStyle($tag,$enable)
    {
        //Modify style and select corresponding font
        $this->$tag+=($enable ? 1 : -1);
        $style='';
        foreach(array('B','I','U') as $s)
            if($this->$s>0)
                $style.=$s;
        $this->SetFont('',$style);
    }
    
    function PutLink($URL,$txt)
    {
        //Put a hyperlink
        $this->SetTextColor(0,0,255);
        $this->SetStyle('U',true);
        $this->Write(5,$txt,$URL);
        $this->SetStyle('U',false);
        $this->SetTextColor(0);
    }
}


/**
 * PDF extension to generate report
 */
class RptEnrollBookData 
{
    /**
     * Method to generate the report
     */
    public function RptEnrollBookData($data = null)
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();

        $business       = new BusinessAcademicBusEnrollBook();
        $enrollBookData = $business->getEnrollBookSummary($data->periodId, 2);

        // Generating PDF file
        $pdf = new PDF();
        
        $pdf->periodId = $data->periodId;
        $pdf->type     = 0;
        
        $pdf->aliasNbPages();
        $pdf->setMargins(20, 30, 20);
        //$pdf->personName = $rdata->name;
        // First page
        $pdf->addPage('P', 'mm', 'A4');
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 72);
        $pdf->ln(50);
        $pdf->cell(0, 20, strtoupper(_M('Livro', $module)), 0, 0, 'C');
        $pdf->ln(30);
        $pdf->cell(0, 20, strtoupper(_M('De', $module)), 0, 0, 'C');
        $pdf->ln(30);
        $pdf->cell(0, 20, strtoupper(_M('Matrícula', $module)), 0, 0, 'C');
        $pdf->ln(30);
        $pdf->cell(0, 20, $pdf->periodId, 0, 0, 'C');
        $pdf->type     = 1;
        $pdf->addPage('P', 'mm', 'A4');
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
        $pdf->setFillColor(200);
        $pdf->setLineWidth(0.4);
        $pdf->setDrawColor(100);
        
        $generalTotal = 0;
        //Gera o resumo do livro matricula
        if (count($enrollBookData) > 0)
        {
            foreach ($enrollBookData as $ebData)
            {
                $lineX = $pdf->getX();
                $lineY = $pdf->getY();
                $pdf->line($lineX, $lineY, $lineX + 170, $lineY);
                $pdf->ln(1);
                $pdf->multicell(0, 5, $ebData->title, 0, 'L', 0);
                //$pdf->ln();
                
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);
                foreach ($ebData->statesData as $stateData)
                {
                    $pdf->cell(10, 5, $stateData[0], 0, 0, 'L');
                    $pdf->cell(150, 5, $stateData[1], 0, 0, 'L');
                    $pdf->cell(10, 5, $stateData[5], 0, 0, 'L');
                    $pdf->ln();
                }
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
                $pdf->ln(1);
                $pdf->cell(10, 5, '', 0, 0);
                $pdf->cell(150, 5, _M('Total do curso', $module), 0, 0, 'L');
                
                if (strlen($ebData->totalA) == 0)
                {
                    $ebData->totalA = '0';
                }
                
                $pdf->cell(10, 5, $ebData->totalA, 0, 0, 'L');
                $pdf->ln(8);
                
                $generalTotal += $ebData->totalA;
            }
        }
        
        $lineX = $pdf->getX();
        $lineY = $pdf->getY();
        $pdf->line($lineX, $lineY, $lineX + 170, $lineY);
        $pdf->ln(1);
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
        $pdf->cell(10, 5, '', 0, 0);
        $pdf->cell(150, 5, _M('Total geral', $module), 0, 0, 'L');
        $pdf->cell(10, 5, $generalTotal, 0, 0, 'L');
        
        $pdf->type = 0;
        
        $courseStatePupils = $business->getEnrollBookStatePupils($data->periodId);
        $pdf->addPage('P', 'mm', 'A4');
        
        if (count($courseStatePupils) > 0)
        {
            unset($courseStates);
            foreach ($courseStatePupils as $courseStates)
            {
                $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);
                $pdf->multicell(0, 5, $courseStates->title, 0, 'L', 0);
                
                unset($stateData);
                foreach ($courseStates->states as $stateData)
                {
                    $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 12);
                    
                    $lineX = $pdf->getX();
                    $lineY = $pdf->getY();
                    $pdf->line($lineX, $lineY, $lineX + 170, $lineY);
                    $pdf->ln(1);
                    $pdf->multicell(0, 5, $stateData->title, 0, 'L', 0);
                    $lineY = $pdf->getY();
                    $pdf->line($lineX, $lineY, $lineX + 170, $lineY);
                    $pdf->ln(1);
                    
                    $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 12);
                    
                    unset($pupil);
                    foreach ($stateData->pupils as $pupil)
                    {
                        $pdf->cell(20, 5, $pupil[0], 0, 0, 'L');
                        $pdf->cell(115, 5, $pupil[1], 0, 0, 'L');
                        $pdf->cell(15, 5, $pupil[2], 0, 0, 'L');
                        $pdf->cell(10, 5, $pupil[3], 0, 0, 'L');
                        $pdf->cell(10, 5, $pupil[4], 0, 0, 'L');
                        $pdf->ln();
                    }
                    
                    $pdf->addPage('P', 'mm', 'A4');
                }
            }
        }
        

        $pdf->close();
        $pdf->output();
    }
}

?>
