<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class implements functions to work with lookup.
 * 
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 10/12/2010
 *
 *
 **/
class SLearnigPeriodField extends MFormControl
{
    public $size;
    public $hint;
    public $validator;
    public $filter;
    public $autocomplete;
    public $readonly;
    public $captionrequired;

    /**
     * Constructor of SLearnigPeriodField
     *
     * @param <string> $name
     * @param <integer> $value
     * @param <string> $label
     * @param <integer> $size
     * @param <string> $hint
     * @param <type> $validator
     * @param <array> $filter
     * @param <boolean> $autocomplete
     * @param <boolean> $captionrequired
     */
    public function __construct($name='',$value='',$label='',$size=10, $hint='', $validator=null, $filter='', $autocomplete=true, $captionrequired =false)
    {
        //Parent construct
        parent::__construct($name, $value, $label);

        $this->size = $size;
        $this->hint = $hint;
        $this->validator = $validator;
        $this->filter = $filter;
        $this->autocomplete = $autocomplete;
        $this->readonly = $readonly;
        $this->captionrequired = $captionrequired;
    }

   /**
    * Generate the component
    */
   public function GenerateInner()
   {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //Names of the fields of the component
        $id = $this->name;
        $learningPeriodDescription = $id . '_learningPeriodDescription';
        $periodId   = $id . '_periodId';
        $periodDescription = $id . '_periodDescription';
        $courseId = $id . '_courseId';
        $courseVersion = $id . '_courseVersion';
        $courseName = $id .'_courseName';
        $unitId = $id . '_unitId';
        $unitDescription = $id . '_unitDescription';
        $turnId = $id . '_turnId';
        $turnDescription = $id . '_turnDescription';


        //Learning period
        $learningPeriodLabel = new MText($this->name . '_label', $this->label.':');
        if ( $this->captionrequired )
        {
            $learningPeriodLabel->setClass('m-caption m-caption-required');
        }
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        if ( $this->readonly )
        {
            //Force set data in fields
            $business = new BusinessAcademicBusLearningPeriod();
            
            if ( strlen($this->value)>0 )
            {
                $dataLearningPeriod = $business->getLearningPeriod($this->value);
            }
            $learningPeriod = new MTextField($this->name, $this->value, '', $this->size, $this->hint, null, true);
        }
        else
        {
            $learningPeriod = new MLookupTextField($this->name, $this->value, '', $this->size, $this->hint, null, array($periodId, $courseId, $courseVersion, $turnId, $unitId, $learningPeriodDescription, null, null, null, null, null, null, null, null, null, $courseName,$turnDescription, $unitDescription, $periodDescription), 'academic', 'LearningPeriod', null, $this->filter, $this->autocomplete);
        }

        $learningPeriodDescription = new MTextField($learningPeriodDescription, $dataLearningPeriod->description ? $dataLearningPeriod->description:null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer($this->name.'_hct', array($learningPeriodLabel, $learningPeriod, $learningPeriodDescription));

        //Period
        $periodLabel = new MText($periodId . '_label',  _M('Período', $module).':');
        $periodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $period = new MTextField($periodId, $dataLearningPeriod->periodId ? $dataLearningPeriod->periodId :null,'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);
        $periodDescription = new MTextField($periodDescription, $dataLearningPeriod->periodDescription ? $dataLearningPeriod->periodDescription : null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);
        $hctPeriod = new MHContainer($periodId.'_hct', array($periodLabel, $period, $periodDescription));

        //Course
        $courseLabel = new MText($courseId.'_label', _M('Curso', $module).':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $course = new MTextField($courseId, $dataLearningPeriod->courseId ? $dataLearningPeriod->courseId : null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),null,null, true);
        $version = new MTextField($courseVersion, $dataLearningPeriod->courseVersion ? $dataLearningPeriod->courseVersion : null,null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);
        $name = new MTextField($courseName, $dataLearningPeriod->courseName ? $dataLearningPeriod->courseName : null,null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);
        $hctCourse = new MHContainer($courseId.'_hct', array($courseLabel,$course, $version, $name));

        //Unit
        $unitLabel = new MText($unitId.'_label', _M('Unidade', $module).':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unit = new MTextField($unitId, $dataLearningPeriod->unitId ? $dataLearningPeriod->unitId : null , null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),null,null, true);
        $unitDescription = new MTextField($unitDescription, $dataLearningPeriod->unitDescription ? $dataLearningPeriod->unitDescription : null,null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);
        $hctUnit = new MHContainer($unitId.'_hct', array($unitLabel,$unit, $unitDescription));

        //Turn
        $turnLabel = new MText($turnId.'_label', _M('Turno', $module).':');
        $turnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $turn = new MTextField($turnId, $dataLearningPeriod->turnId ? $dataLearningPeriod->turnId : null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),null,null, true);
        $turnDescription = new MTextField($turnDescription, $dataLearningPeriod->turnDescription ? $dataLearningPeriod->turnDescription : null,null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);
        $hctTurn = new MHContainer($turnId.'_hct', array($turnLabel,$turn, $turnDescription));

        //Group
        $vctGroup = new MVContainer($id.'_groupLearningPeriodFields', array($hctLearningPeriod, $hctPeriod, $hctCourse, $hctUnit, $hctTurn));

        $this->inner = $vctGroup;
    }
}
?>
