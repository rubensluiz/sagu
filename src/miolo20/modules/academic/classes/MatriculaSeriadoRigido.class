<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Matricula Web
 *
 * @author Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * \b Maintainers: \n
 * Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * @since
 * Class created on 10/04/2012
 *
 */
class MatriculaSeriadoRigido extends Matricula
{
    
    /**
     * Gera a estrutura das disciplinas oferecidas para a matricula de credito
     *
     * @param type $args
     * @return type 
     */
    public function listaDisciplinasOferecidas($args=null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $contractId       = $this->obterContrato();
        $learningPeriodId = $this->obterLearningPeriodId();
        
        $busEnroll   = new BusinessAcademicBusEnroll();
        $busPeriod   = new BusinessAcademicBusPeriod();
        $busContract = new BusinessAcademicBusContract();
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        
        $semestre = $busPeriod->getCurrentSemesterNumber($contractId);
        $somentePendentes = false;
        $periodoLetivo = $busLearningPeriod->getLearningPeriod($learningPeriodId);
        
        $isFreshman = $busContract->isFreshmanByPeriod($contractId, $periodoLetivo->periodId);

        if ( SAGU::getParameter('ACADEMIC', 'DEFINE_SEMESTRE_POR_CARGA_HORARIA') == DB_TRUE )
        {
            $enrolls = $busEnroll->getEnrollByLearningPeriod($contractId, $learningPeriodId);
            
            // Se for uma alteração de matrícula.
            if ( count($enrolls) > 0 )
            {
                $semestre--;
            }
        }
        
        $semestreFuturo = ($isFreshman) ? $semestre : $semestre + 1; // Para listar as disciplinas que estão disponíveis para o próximo semestre do contrato.

        $enrollData = $this->listaDisciplinasOferecidasParaEsteSemestre($semestreFuturo);
        $pendentes  = $this->listaDisciplinasOferecidasPendentes($semestre);
        
        //caso possui tempo maximo para cursar pendencias
        if($this->obterConfiguracoes()->timeToCourseDisapproved)
        {
            foreach($pendentes as $pendente)
            {
                //verifica o prazo para cursar disciplinas pendentes                
                if($this->obterConfiguracoes()->timeToCourseDisapproved <= SAGU::calcNumber($semestre.' - '.$pendente->semester))
                {
                    $divmsg = new MDiv('', MMessage::getStaticMessage('divErro', _M('Já passou o prazo para matricular-se na disciplina pendente. Somente será liberado as disiplinas pendentes.'), MMessage::TYPE_WARNING));
                    $divmsg->addBoxStyle('width', '98%');
                    $fields[] = $divmsg;
                    
                    $somentePendentes = true;
                }
            }
        }

        //faz a verficação do número máximo de disciplinas pendentes para bloquear a matricula
        if($this->obterConfiguracoes()->disapprovementsToBlock)
        {
            if($this->obterConfiguracoes()->disapprovementsToBlock <= count($pendentes))
            {
                $divmsg = new MDiv('', MMessage::getStaticMessage('divErro', _M('Número máximo de reprovações necessárias atingido para bloquear a matrícula em outras disciplinas.'), MMessage::TYPE_WARNING));
                $divmsg->addBoxStyle('width', '98%');
                $fields[] = $divmsg;
                
                $somentePendentes = true;
            }
        }
        
        //disciplinas oferecidas
        if(!$somentePendentes)
        {
            $fields[] = $this->generateTable($enrollData, _M('Disciplinas oferecidas para o curso de @1 no período @2', $module, $this->obterCurso(), $this->obterTurmaPeriodo()), 'group', false, false, null, $args, false, true);
        }
        
        //disciplinas pendentes
        $fields[] = $this->generateTable($pendentes, _M('Disciplinas pendentes para o curso de @1 no período @2', $module, $this->obterCurso(), $this->obterTurmaPeriodo()), 'group', true, false, null, $args);

        //exibir disciplinas eletivas
        if($this->obterConfiguracoes()->showElectivesExternal==DB_TRUE)
        {
            $fields[] = new MSeparator();
            $fields[] = $this->disciplinasEletivas($args);
        }

        return $fields;
    }
}


?>