<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC003'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;

    public function pupilFolderTop($reportData, $col, $lin)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $marginX = 10;
        $marginY = 10;

        $this->setXY($col+$marginX, $lin+$marginY);

        $this->cell(65, 30, '', 'LTBR', 0);

        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);

        $this->setXY($col+$marginX, $lin+$marginY);
        $this->multiCell(65, 5, $reportData->name);    

        $this->setXY($col+$marginX, $lin+$marginY+10);
        $this->cell(65, 5, _M('Curso', $module) . ': ' . $reportData->courseId . '   ' . _M('Código', $module) . ': ' . $reportData->personId, 0, 0);

        //$this->text($col+$marginX+12, $lin+$marginY+12, _M('Curso', $module) . ': ' . $reportData->courseId . '   ' . _M('Código', $module) . ': ' . $reportData->personId);
    }
}


/**
 * PDF extension to generate report
 */
class RptPupilFolder
{
    var $listSpace;

    public function RptPupilFolder($data = null)
    {
        $MIOLO       = MIOLO::getInstance();
        $module      = MIOLO::getCurrentModule();

        // Generating PDF file
        $pdf = new PDF();
        $pdf->aliasNbPages();
        $pdf->SetAutoPageBreak(true, 5);

        // First page
        $pdf->setTopMargin(1);

        $reportData->radFileType = $data->radFileType;

        //All pupils from course and Enrolled pupil
        if ( $reportData->radFileType == 'opt1' || $reportData->radFileType == 'opt3' )
        {
            $pdf->addPage('P', 'mm', 'A4'); 

            $reportData->pupilFolder = $data->pupilFolder;
            $count                   = 1;
            $col                     = 1;
            $lin                     = 1;

            $oldPageNo = $pdf->pageNo();

            for ( $x = 0; $x < count($reportData->pupilFolder); $x++ )
            {
                $reportData->name     = $reportData->pupilFolder[$x][1];
                $reportData->courseId = $reportData->pupilFolder[$x][2];
                $reportData->personId = $reportData->pupilFolder[$x][0];    

                if ($count == 3) // Se é o terceiro retângulo
                {
                    $pdf->pupilFolderTop($reportData, $col, $lin);
                    $count = 1;
                    $lin  += 30;
                    $col   = 1;

                    if ($lin > 270) //Verifica se terminara as linhas possíveis, sendo que a folha
                                    //A4 tem 290 de altura. Como temos 10 de margem superior e 5 de
                                    //inferior consulto por 270, pois nesta posição iria escrever uma 
                                    //célula de altura igual a 30 ultrapasando o possível de 290
                    {
                        $pdf->addPage('P', 'mm', 'A4'); 
                    }
                }
                else //1o e 2a retângulo
                {
                    $pdf->pupilFolderTop($reportData, $col, $lin);

                    $count++;
                    $col += 65;
                }

                $numPage = $pdf->pageNo();

                if ( $numPage != $oldPageNo ) // Se a página atual é diferente da anterior
                {
                    $col   = 1;
                    $lin   = 1;
                    $count = 1;

                    $oldPageNo = $numPage;
                }
                else //Continua na mesma página
                {
                    $oldPageNo = $numPage;
                }
            }
        }

        if ( $reportData->radFileType == 'opt2' ) 
        {
            $pdf->addPage('P', 'mm', 'A4'); 

            $reportData->courseId             = $data->courseId;
            $reportData->periodId             = $data->periodId;
            $reportData->selectiveProcessId   = $data->selectiveProcess;
            $reportData->unitId               = $data->unitId;

            $businessPupilFolderSelectiveProcess = new BusinessAcademicBusGroup();
            $pupilFolderSelectiveProcess         = $businessPupilFolderSelectiveProcess->getPupilFolderBySelectiveProcess($reportData->periodId, $reportData->selectiveProcessId, $reportData->courseId, $reportData->unitId);

            $count                   = 1;
            $col                     = 1;
            $lin                     = 1;

            $oldPageNo = $pdf->pageNo();

            for ( $x = 0; $x < count($pupilFolderSelectiveProcess); $x++ )
            {
                $reportData->name     = $pupilFolderSelectiveProcess[$x][2];
                $reportData->courseId = $pupilFolderSelectiveProcess[$x][1];
                $reportData->personId = $pupilFolderSelectiveProcess[$x][0];    

                if ($count == 3) // Se é o terceiro retângulo
                {
                    $pdf->pupilFolderTop($reportData, $col, $lin);
                    $count = 1;
                    $lin  += 30;
                    $col   = 1;

                    if ($lin > 270) //Verifica se terminara as linhas possíveis, sendo que a folha
                                    //A4 tem 290 de altura. Como temos 10 de margem superior e 5 de
                                    //inferior consulto por 270, pois nesta posição iria escrever uma 
                                    //célula de altura igual a 30 ultrapasando o possível de 290
                    {
                        $pdf->addPage('P', 'mm', 'A4'); 
                    }
                }
                else //1o e 2a retângulo
                {
                    $pdf->pupilFolderTop($reportData, $col, $lin);

                    $count++;
                    $col += 65;
                }

                $numPage = $pdf->pageNo();

                if ( $numPage != $oldPageNo ) // Se a página atual é diferente da anterior
                {
                    $col   = 1;
                    $lin   = 1;
                    $count = 1;

                    $oldPageNo = $numPage;
                }
                else //Continua na mesma página
                {
                    $oldPageNo = $numPage;
                }
            }
        }

        if ( $reportData->radFileType == 'opt4' )
        {
            $pdf->addPage('P', 'mm', 'A4');

            $reportData->explodeChoicePupil = $data->explodeChoicePupil; 
            $reportData->courseId           = $data->courseId;
            $reportData->periodId           = $data->periodId;
            $reportData->stateContractId    = $data->stateContractId;
            $reportData->unitId             = $data->unitId;

            $count                   = 1;
            $col                     = 1;
            $lin                     = 1;

            $oldPageNo = $pdf->pageNo();

            for ( $x = 0; $x < count($reportData->explodeChoicePupil); $x++ )
            {
                $personId            = $reportData->explodeChoicePupil[$x];
                $businessChoicePupil = new BusinessAcademicBusGroup();
                $busChoicePupil      = $businessChoicePupil->getPupilFolderByChoicePupil($reportData->courseId, $reportData->unitId, $reportData->stateContractId, $reportData->periodId, $personId);

                $reportData->name     = $busChoicePupil[0][1];        
                $reportData->personId = $busChoicePupil[0][0];

                if ($count == 3) // Se é o terceiro retângulo
                {
                    $pdf->pupilFolderTop($reportData, $col, $lin);
                    $count = 1;
                    $lin  += 30;
                    $col   = 1;

                    if ($lin > 270) //Verifica se terminara as linhas possíveis, sendo que a folha
                                    //A4 tem 290 de altura. Como temos 10 de margem superior e 5 de
                                    //inferior consulto por 270, pois nesta posição iria escrever uma 
                                    //célula de altura igual a 30 ultrapasando o possível de 290
                    {
                        $pdf->addPage('P', 'mm', 'A4'); 
                    }
                }
                else //1o e 2a retângulo
                {
                    $pdf->pupilFolderTop($reportData, $col, $lin);

                    $count++;
                    $col += 65;
                }

                $numPage = $pdf->pageNo();

                if ( $numPage != $oldPageNo ) // Se a página atual é diferente da anterior
                {
                    $col   = 1;
                    $lin   = 1;
                    $count = 1;

                    $oldPageNo = $numPage;
                }
                else //Continua na mesma página
                {
                    $oldPageNo = $numPage;
                }
            }
        }

        $pdf->close();
        $pdf->output();
    }
}

?>
