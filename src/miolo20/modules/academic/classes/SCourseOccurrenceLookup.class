<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Lookup de Ocorrência de Curso
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 08/09/2011
 */
class SCourseOccurrenceLookup extends MBaseGroup
{
    /**
     * module name
     */
    const MODULE = 'academic';

    /**
     * @var string $suffix Ids suffix
     */
    private $suffix;

    /**
     * @var object MLookupTextField instance
     */
    private $courseIdField;

    /**
     * @var object MTextField instance
     */
    private $courseVersionField;

    /**
     * @var object MTextField instance
     */
    private $courseNameField;

    /**
     * @var object MTextField instance
     */
    private $turnIdField;

    /**
     * @var object MTextField instance
     */
    private $turnDescriptionField;

    /**
     * @var object MTextField instance
     */
    private $unitIdField;

    /**
     * @var object MTextField instance
     */
    private $unitDescriptionField;

    /**
     * @var object MHContainer instance
     */
    private $turnField;

    /**
     * @var object MHContainer instance
     */
    private $unitField;

    /**
     * @var object MLookupContainer instance
     */
    private $courseOccurrenceLookup;

    /**
     * SCourseOccurrenceLookup constructor
     *
     * @param string $values Lookup field value
     * @param boolean $showRequiredLabel Show the required label
     * @param boolean $isSearchForm Adds 'S' suffix in ids
     * @param array $related Lookup related
     * @param array $filter Lookup filters
     * @param boolean $autoComplete Whether lookup has autocomplete
     * @param string $caption Caption of MBaseGroup
     * @param string $border Default 'none', use 'css' to show border
     */
    public function __construct($values = null, $showRequiredLabel = false, $suffix = '', $related = null, $filter = null, $autoComplete = true, $caption = null, $border = 'css', $appears=true)
    {
        
        if(!$caption)
        {
            $caption = _M('Ocorrência de curso');
        }
        
        $this->suffix = $suffix;

        // default related
        $related = !is_null($related) ? $related : array(
            'courseId'.$this->suffix,
            'courseVersion'.$this->suffix,
            'courseName'.$this->suffix,
            'turnId'.$this->suffix,
            'turnDescription'.$this->suffix,
            'unitId'.$this->suffix,
            'unitDescription'.$this->suffix
        );

        // default filters
        $filter = !is_null($filter) ? $filter : array(
            'courseId' => 'courseId'.$this->suffix,
            'courseVersion' => 'courseVersion'.$this->suffix,
            'turnId' => 'turnId'.$this->suffix,
            'unitId' => 'unitId'.$this->suffix
        );

        // Caso o values esteja "errado"
        $values = $this->getValues($values);
        
        $values = $values['isArray'] === DB_FALSE ? $values[0] : $values;
        
        // MLookupContainer da ocorrência de curso
        $this->courseOccurrenceLookup = new MLookupContainer('courseId'.$this->suffix, 'courseVersion'.$this->suffix, $values, _M('Curso', self::MODULE), $related, self::MODULE, 'CourseOccurrence', $filter, true, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), $autoComplete, $showRequiredLabel);

        // Campo código do curso
        $this->courseIdField = $this->courseOccurrenceLookup->getLookupField();

        // Campo versão do curso
        $this->courseVersionField = $this->courseOccurrenceLookup->getDescriptionField();

        // Campo nome do curso
        $this->courseNameField = new MTextField('courseName'.$this->suffix, NULL, NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), NULL, NULL, true);
        $this->courseOccurrenceLookup->addControl($this->courseNameField);
        
        $this->turnUnitFields($appears);       

        parent::__construct(
            'lookupCourseOccurrence'.$this->suffix,
            $caption,
            array(
                $this->courseOccurrenceLookup,
                $this->turnField,
                $this->unitField
            ),
            'vertical',
            $border
        );
        $this->setFormMode(MBaseGroup::FORM_MODE_SHOW_SIDE);
    }
    
    public function turnUnitFields($appears)
    {
            // Campo turno do curso
        $this->turnIdField = new MTextField('turnId'.$this->suffix, NULL, NULL, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), NULL, NULL, true);
        $this->turnDescriptionField = new MTextField('turnDescription'.$this->suffix, NULL, NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), NULL, NULL, true);
        $this->turnField = new MContainer('turnFields'.$this->suffix, array($this->turnIdField, $this->turnDescriptionField), 'horizontal', MFormControl::FORM_MODE_SHOW_SIDE);
        $this->turnField->label = _M('Turno', self::MODULE);

            // Campo unidade do curso
        $this->unitIdField = new MTextField('unitId'.$this->suffix, NULL, NULL, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), NULL, NULL, true);
        $this->unitDescriptionField = new MTextField('unitDescription'.$this->suffix, NULL, NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), NULL, NULL, true);
        $this->unitField = new MHContainer('unitFields'.$this->suffix, array($this->unitIdField, $this->unitDescriptionField));
        $this->unitField->label = _M('Unidade', self::MODULE);
        
        if (!$appears)
        {
            $this->turnField->addBoxStyle('display', 'none');
            $this->unitField->addBoxStyle('display', 'none');
        }
    }

    /**
     * Responsável por tratar os valores recebidos
     */
    public function getValues($values = array())
    {
        // Se vier o array com os dados dentro a posição "courseId", corrige
        if ( is_array($values) )
        {
            if ( is_array($values[0]) )
            {
                $values = $values[0];
            }

            // Se não veio os filtros
            if ( is_array($values) )
            {
                foreach ( $values as $value )
                {
                    if ( !(strlen($value) > 0) )
                    {
                        $values = NULL;
                        break;
                    }
                }
            }
        }

        return $values;
    }

    /**
     * @param boolean $showRequiredLabel Informa se exibe ou não o * de campo requerido
     */
    public function showRequiredLabel($showRequiredLabel = true)
    {
        $this->courseField->showRequiredLabel = $showRequiredLabel;
        $this->turnField->showRequiredLabel = $showRequiredLabel;
        $this->unitField->showRequiredLabel = $showRequiredLabel;
    }
    
    /**
     *
     * @param type $validators Concatena validadores passados
     */
    public function setRequiredValidators(&$validators = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $this->showRequiredLabel(true);

        $validators[] = new MRequiredValidator($this->courseIdField->id, _M('Curso', $module));
        $validators[] = new MRequiredValidator($this->courseVersionField->id, _M('Versão', $module));
        $validators[] = new MRequiredValidator($this->turnIdField->id, _M('Turno', $module));
        $validators[] = new MRequiredValidator($this->unitIdField->id, _M('Unidade', $module));
    }

    /**
     * @param boolean $readOnly Informa se exibe ou não em modo "somente leitura"
     */
    public function setReadOnly($readOnly = true)
    {
        $this->courseOccurrenceLookup->setReadOnly($readOnly);
    }

    /*
     * Getters and Setters:
     */

    /**
     * @return object MLookupTextField instance
     */
    public function getCourseIdField()
    {
        return $this->courseIdField;
    }

    /**
     * @param object $field MLookupTextField instance
     */
    public function setCourseIdField($field)
    {
        $this->courseIdField = $field;
    }

    /**
     * @return object MLookupTextField instance
     */
    public function getCourseVersionField()
    {
        return $this->courseVersionField;
    }

    /**
     * @param object $field MLookupTextField instance
     */
    public function setCourseVersionField($field)
    {
        $this->courseVersionField = $field;
    }

    /**
     * @return object MLookupTextField instance
     */
    public function getCourseNameField()
    {
        return $this->courseNameField;
    }

    /**
     * @param object $field MLookupTextField instance
     */
    public function setCourseNameField($field)
    {
        $this->courseNameField = $field;
    }

    /**
     * @return object MLookupTextField instance
     */
    public function getTurnIdField()
    {
        return $this->turnIdField;
    }

    /**
     * @param object $field MLookupTextField instance
     */
    public function setTurnIdField($field)
    {
        $this->turnIdField = $field;
    }

    /**
     * @return object MLookupTextField instance
     */
    public function getTurnDescriptionField()
    {
        return $this->turnDescriptionField;
    }

    /**
     * @param object $field MTextField instance
     */
    public function setTurnDescriptionField($field)
    {
        $this->turnDescriptionField = $field;
    }

    /**
     * @return object MTextField instance
     */
    public function getUnitIdField()
    {
        return $this->unitIdField;
    }

    /**
     * @param object $field MTextField instance
     */
    public function setUnitIdField($field)
    {
        $this->unitIdField = $field;
    }

    /**
     * @return object MTextField instance
     */
    public function getUnitDescriptionField()
    {
        return $this->unitDescriptionField;
    }

    /**
     * @param object $field MTextField instance
     */
    public function setUnitDescriptionField($field)
    {
        $this->unitDescriptionField = $field;
    }

    /**
     * @return object MContainer instance
     */
    public function getCourseField()
    {
        return $this->courseField;
    }

    /**
     * @param object $container MContainer instance
     */
    public function setCourseField($container)
    {
        $controls = $this->getControls();
        foreach ( $controls as $index => $control )
        {
            if ( $control->id == 'courseFields'.$this->suffix )
            {
                $controls[$index] = $container;
                break;
            }
        }
        $this->setControls($controls);
    }

    /**
     * @return object MContainer instance
     */
    public function getTurnField()
    {
        return $this->turnField;
    }

    /**
     * @param object $container MContainer instance
     */
    public function setTurnField($container)
    {
        $controls = $this->getControls();
        foreach ( $controls as $index => $control )
        {
            if ( $control->id == 'turnFields'.$this->suffix )
            {
                $controls[$index] = $container;
                break;
            }
        }
        $this->setControls($controls);
    }

    /**
     * @return object MContainer instance
     */
    public function getUnitField()
    {
        return $this->unitField;
    }

    /**
     * @param object $container MContainer instance
     */
    public function setUnitField($container)
    {
        $controls = $this->getControls();
        foreach ( $controls as $index => $control )
        {
            if ( $control->id == 'unitFields'.$this->suffix )
            {
                $controls[$index] = $container;
                break;
            }
        }
        $this->setControls($controls);
    }
    
    /**
     * Define valores que devem ser preenchidos ao carregar form.
     * 
     * Estava ocorrendo problema ao carregar em certos casos onde o autocomplete nao consegue
     *  obter os dados devido a chave pesquisada possuir mais de uma ocorrencia na base de dados (#26476).
     */
    public function setOnLoadValues($values = array())
    {
        $MIOLO = MIOLO::getInstance();
        
        $fields = array(
            'courseId',
            'courseVersion',
            'courseName',
            'turnId',
            'turnDescription',
            'unitId',
            'unitDescription');
        
        foreach ( $fields as $field )
        {
            $value = $values[$field];
            
            if ( strlen($value) > 0 )
            {
                $name = $field . $this->suffix;
                
                $MIOLO->page->onLoad("document.getElementById('{$name}').value = '{$value}';");
            }
        }
    }
}
?>