<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 *Definition of a set that stores the file path will be used as model
 **/
define('MODEL_NAME' ,$MIOLO->getModulePath('basic', '/documents/examinationAct.sxw'));

/**
 * SXW extension to generate report
 */
class RptExaminationAct
{
    var $listSpace;

    public function RptExaminationAct($data = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $business = new BusinessAcademicBusAttendance();

        // include and instance agata api
        $MIOLO->uses('/core/AgataAPI.class');
        $api = new AgataAPI;

        //Receive the model.sxw the parameters MAX_PUPIL_BY_PAGE = maximum of persons per page
        //and MAX_LEN_NAME maximum size of the name.
        $agataParameter = AgataOO::getConfig(MODEL_NAME);

        //Variable that controls the page break.
        $pg = 1;

        if ( count($data->groupId) > 0 )
        {
            foreach ( $data->groupId as $key => $group )
            {
                list ( $groupId,
                       $professorId ) = $group;

                $reportData = $business->getGroupDataBySchedule($groupId, $professorId);

                $reportData->emissionDate = $data->emissionDate;
                $reportData->pupils       = $business->listGroupEnrolledPupils($groupId);

                //Pupils listing
                if ( count($reportData->pupils) > 0 )
                {
                    $count = 1;
                    
                    foreach ( $reportData->pupils as $key1 => $pupil )
                    {
                        list ( $enrollId,
                               $personId,
                               $personName,
                               $courseId,
                               $statusId,
                               $statusDescription,
                               $dateCancellation ) = $pupil;

                        if ( ($courseId != $oldCourseId) || ($oldGroupId != $reportData->groupId) ||
                             ($oldPg != $pg)             || ($professorId != $oldProfessorId) )
                        {
                            $oldProfessorId = $professorId;
                            $oldGroupId    = $reportData->groupId;
                            $linePg        = 1;
                            $oldPg         = $pg;
                            
                            $curricularData[$oldPg.$oldGroupId.$oldProfessorId.$courseId][0]  = $reportData->curricularComponent;
                            $curricularData[$oldPg.$oldGroupId.$oldProfessorId.$courseId][1]  = $reportData->center;
                            $curricularData[$oldPg.$oldGroupId.$oldProfessorId.$courseId][2]  = $reportData->unit;
                            $curricularData[$oldPg.$oldGroupId.$oldProfessorId.$courseId][3]  = $reportData->professor;
                            $curricularData[$oldPg.$oldGroupId.$oldProfessorId.$courseId][4]  = $reportData->minimumNumberHours;
                            $curricularData[$oldPg.$oldGroupId.$oldProfessorId.$courseId][5]  = $reportData->emissionDate;
                            $curricularData[$oldPg.$oldGroupId.$oldProfessorId.$courseId][6]  = $reportData->periodId;
                            $curricularData[$oldPg.$oldGroupId.$oldProfessorId.$courseId][7]  = $reportData->numberHours;
                            $curricularData[$oldPg.$oldGroupId.$oldProfessorId.$courseId][8]  = $reportData->classId;
                            $curricularData[$oldPg.$oldGroupId.$oldProfessorId.$courseId][9]  = $reportData->room;
                            $curricularData[$oldPg.$oldGroupId.$oldProfessorId.$courseId][10] = $reportData->groupId;
                        }

                        if ( ($statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED')) || ($statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DESISTING')) )
                        {
                            if( SAGU::getParameter('BASIC', 'SHOW_CANCELLED_PUPILS_IN_EXAM_ACT') == DB_TRUE )
                            {
                                 $arraySubfield[0][$oldPg.$oldGroupId.$oldProfessorId.$courseId][$key1] = array('*', $personId, $personName, $courseId, $dateCancellation);
                            }
                        }
                        else
                        {
                            $arraySubfield[0][$oldPg.$oldGroupId.$oldProfessorId.$courseId][$key1] = array($count, $personId, $personName, $courseId, null);
                         
                            $count++;
                        }

                        //Checks if the number of lines is greater or equal to the parameter
                        // that is in the properties of the model.Sxw
                        if( $linePg >= $agataParameter['max_pupil_by_page'] )
                        {
                            $pg++;
                        }

                        //Checks if the number of character of the name of the staff is greater
                        //than or equal to the number that was set on the properties of the
                        // model.sxw
                        if( strlen($personName) >= $agataParameter['max_len_name'] )
                        {
                            $linePg = $linePg + 2;
                        }
                        else
                        {
                            $linePg++;
                        }

                        $oldCourseId = $courseId;
                    }
                }
            }

            $fileName = '/examinationAct_'.$groupId.'_'.$professorId.'.sxw';

            // SET AGATA PARAMETERS
            //Set information of the header 
            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . $fileName);
            $api->setDataArray($curricularData);
            $api->setSubDataArray($arraySubfield);

            $ok = $api->parseOpenOffice(MODEL_NAME);

            if ( $ok && $data->generateOption == 'pdf' )
            {
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/examinationAct_'.$groupId.'_'.$professorId.'.pdf');
                $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/examinationAct_'.$groupId.'_'.$professorId.'.sxw');
            }

            $api->fileDialog();
        }
    }
}
?>
