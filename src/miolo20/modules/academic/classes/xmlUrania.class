<?php

/**
 * Classe que manipula as informações do arquivo XML do Urânia, para importação no SAGU.
 * 
 * @author Bruno Edgar Fuhr <bruno@solis.com.br>
 * @since 25/09/2013
 */

class xmlUrania
{
    
    // DOMDocument
    private $dom;
    
    // Turno
    private $turno;
    
    // Disciplinas
    private $disciplinas = array();
    
    // Disciplinas nao encontradas
    private $disciplinasNaoEncontradas = array();
    
    // Turmas
    private $turmas = array();
    
    // Turmas nao encontradas
    private $turmasNaoEncontradas = array();
    
    // Professores
    private $professores = array();
    
    public function __construct($xml)
    {
        if ( strlen($xml) > 0 )
        {
            $this->dom = new DOMDocument('1.0', 'UTF-8');
            $this->dom->loadXML($xml);
            
            $this->loadData();
        }
    }
    
    public function loadData()
    {
        if ( $this->dom instanceof DOMDocument )
        {
            $busCurricularComponent = new BusinessAcademicBusCurricularComponent();
            $busClass = new BusinessAcademicBusClass();
            
            // Obter turno do arquivo
            $instituicaoNodes = $this->dom->getElementsByTagName('INSTITUICAO');
            foreach( $instituicaoNodes as $instituicao )
            {
                $this->turno = $instituicao->getAttribute('TURNO');
            }
            
            // Obter disciplinas do arquivo
            $disciplinaNodes = $this->dom->getElementsByTagName('DISCIPLINA');                
            foreach($disciplinaNodes as $disciplina)
            {
                $codigoUrania = ltrim($disciplina->getAttribute('COD_DISC'), '0');

                // Obtem o atributo COD_EXT_DISC do arquivo e procura a disciplina no SAGU.
                // Se não tiver separado por '/', assume que a versão do curso é 1.
                $codExt = $disciplina->getAttribute('COD_EXT_DISC');
                if ( substr_count($codExt, '/') > 0 )
                {
                    $curricularComponent = explode('/', $codExt);
                }                
                else
                {
                    $curricularComponent[0] = $codExt;
                    $curricularComponent[1] = 1;
                }

                $curricularComponent[1] = is_numeric($curricularComponent[1]) ? $curricularComponent[1] : 1;
                $this->disciplinas[$codigoUrania] = $busCurricularComponent->getCurricularComponent($curricularComponent[0], $curricularComponent[1]);
                if ( !$this->disciplinas[$codigoUrania]->curricularComponentId )
                {
                    $this->disciplinasNaoEncontradas[] = $codigoUrania . ' - ' . utf8_decode($disciplina->getAttribute('NOME_DISC'));
                }
            }

            // Obter turmas do arquivo
            $turmaNodes = $this->dom->getElementsByTagName('TURMA');
            foreach($turmaNodes as $turma)
            {
                $codigoUrania = ltrim($turma->getAttribute('COD_TURMA'), '0');
                
                $this->turmas[$codigoUrania] = $busClass->getClass($turma->getAttribute('COD_EXT_TURMA'));
                if ( !$this->turmas[$codigoUrania]->classId )
                {
                    $this->turmasNaoEncontradas[] = $codigoUrania . ' - ' . utf8_decode($turma->getAttribute('NOME_TURMA'));
                }
            }
            
            // Obter professores do arquivo
            $professorNodes = $this->dom->getElementsByTagName('PROFESSOR');
            foreach($professorNodes as $key => $professor)
            {
                $professorObj = new stdClass();
                $professorObj->nome = $professor->getAttribute('NOME');
                $professorObj->codProf = $professor->getAttribute('COD_PROF');
                $professorObj->cargaProf = $professor->getAttribute('CARGA_PROF');
                $professorObj->professorId = $professor->getAttribute('COD_EXT_PROF');
                
                $diaNodes = $professor->getElementsByTagName('DIA');
                foreach ($diaNodes as $dia)
                {
                    $diaObj = new stdClass();
                    $diaObj->id = $dia->getAttribute('ID');
                    
                    $aulaNodes = $dia->getElementsByTagName('AULA');
                    foreach($aulaNodes as $aula)
                    {
                        $aulaObj = new stdClass();
                        $aulaObj->horario = $aula->getAttribute('HORARIO');
                        $aulaObj->turma = $this->turmas[ltrim($aula->getAttribute('TURMA'), '0')];
                        $aulaObj->disciplina = $this->disciplinas[ltrim($aula->getAttribute('DISCIPLINA'), '0')];

                        $diaObj->aulas[] = $aulaObj;
                    }
                    
                    $professorObj->dias[] = $diaObj;
                }
                
                $this->professores[$key] = $professorObj;
            }
        }
    }
    
    public function getDom()
    {
        return $this->dom;
    }

    public function setDom($dom)
    {
        if ( $dom instanceof DOMDocument )
        {
            $this->dom = $dom;
        }
    }
    
    public function getTurno() {
        return $this->turno;
    }

    public function setTurno($turno) {
        $this->turno = $turno;
    }
        
    public function getDisciplinas()
    {
        return $this->disciplinas;
    }

    public function getTurmas()
    {
        return $this->turmas;
    }

    public function getProfessores()
    {
        return $this->professores;
    }

    public function getDisciplinasNaoEncontradas() {
        return $this->disciplinasNaoEncontradas;
    }

    public function getTurmasNaoEncontradas() {
        return $this->turmasNaoEncontradas;
    }

}

?>
