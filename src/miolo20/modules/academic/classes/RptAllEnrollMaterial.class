<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
set_time_limit(0);

$MIOLO  = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

define('REPORT_ID', 'SP001');
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    var $col  = 0;

    /**
     * Defines the footer for this report
     */
    public function Footer()
    {
        $module = MIOLO::getCurrentModule();
        $pn     = $this->PageNo().'/{nb}';
        $this->setY(15);
    }

    /**
     * Defines the header for this report
     */
    public function Header()
    {
        $module = MIOLO::getCurrentModule();
        $this->setY(2);
    }
}

/**
 * PDF extension to generate report
 */
class RptAllEnrollMaterial
{
    /**
     * Method to generate the report
     */
    public function RptAllEnrollMaterial($data = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $this->pdf = new PDF();
        $this->pdf->aliasNbPages();

        $this->pdf->addPage('P', 'mm', 'A4');
        $this->pdf->ln();

        $busCompany  = new BusinessBasicBusCompany();
        $company     = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $businessCoursed    = new BusinessAcademicBusPossibilitiesAndMaterialOfEnroll();

        $reportData = $businessCoursed->selectContract($data);

        if ( count($reportData) > 0 )
        {
            foreach ( $reportData as $fdata )
            {
                $data[0] = $fdata[0];
                $data[8] = $fdata[1];
                $data[5] = $fdata[2];

                $rdata  = array (
                                  $businessCoursed->coursedCurricularComponent($data),  //Disciplinas cursadas e matriculadas no periodo letivo
                                  $businessCoursed->possibilitiesOfEnroll($data),       //Possibilidades de matrícula
                                  $businessCoursed->otherCurricularComponent($data),    //Outras disciplinas cursadas
                                  $businessCoursed->complementaryActivities($data),     //Atividades complementares
                                  $businessCoursed->personData($data[0]),
                                  $businessCoursed->hangingDocuments($data),
                                  $businessCoursed->responsableLegal($data),
                                  $businessCoursed->footerMessages($data),
                                  $company->personId,
                                  $data[9],
                                  $data[10],
                                  $data[6],
                                  $businessCoursed->lessonHoursComplement($data),
                                  $businessCoursed->getOtherCourseFormated($data[0])
                                );

                $this->generateContent($rdata);

                $this->pdf->addPage('P', 'mm', 'A4');
                $this->AddPage;
            }
        }

        $this->pdf->close();
        $this->pdf->output();

    }

    function SetCol($col)
    {
        $module    = MIOLO::getCurrentModule();
        //Set position at a given column
        $this->col = $col;
        $x         = 10 + $col * 65;
        $this->SetX($x);
    }

    function generateContent($rdata)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $businessCompany = new BusinessBasicBusCompany();
        $company         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

        $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 8);

        if ( strlen(SAGUFile::getPhotoPath($rdata[8])) > 0 )
        {
            $this->pdf->Image(SAGUFile::getPhotoPath($rdata[8]),177, 4, 25, SAGU::getParameter('BASIC', 'PHOTO_FORMAT'));
        }

        $this->pdf->cell(33, 5,'','',0,'C');
        $this->pdf->ln();

        $this->pdf->cell(130, 3, _M('Situação acadêmica', $module). ' - ' . _M('Requerimento de matrícula', $module), 0, 0, 'L');
        $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);
        $this->pdf->cell(52, 3, _M('Emissão', $module) . ': ' . $rdata[9] . ' ' . $rdata[10], 0, 0, 'L');

        $this->pdf->ln();
        $this->pdf->cell(90, 3, _M('Período', $module) . ': ' . $rdata[7][0][2], 0, 0, 'L');
        $this->pdf->cell(40, 3, _M('Telefone', $module) . ': ' . $rdata[4][0][12], 0, 0, 'L');
        $this->pdf->cell(120, 3, _M('Idade', $module) . ': ' . $rdata[4][0][0], 0, 0, 'L');

        $this->pdf->ln();
        $this->pdf->cell(90, 3, _M('Aluno', $module) . ': ' . $rdata[4][0][1]. ' - ' . $rdata[4][0][2], 0, 0, 'L');
        $this->pdf->cell(50, 3, _M('Telefone comercial', $module) . ': ' . $rdata[4][0][13], 0, 0, 'L');

        $this->pdf->ln();
       $this->pdf->cell(90, 3, _M('Endereço', $module) . ': ' . $rdata[4][0][3]. ', ' . $rdata[4][0][4]. ' - ' . _M('Bairro', $module) . ': ' . $rdata[4][0][5], 0, 0, 'L'); 
        $this->pdf->cell(35, 3, _M('Fone celular', $module) . ': ' . $rdata[4][0][14], 0, 0, 'L');
        $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 8);
        $this->pdf->cell(30, 3, _M('Placa do carro', $module) . ': ' . $rdata[4][0][16], 0, 0, 'L'); 

        $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);
        $this->pdf->ln();
        $this->pdf->cell(90, 3, _M('Cidade', $module) . ': ' . $rdata[4][0][6]. ' - ' . $rdata[4][0][7], 0, 0, 'L');
        $this->pdf->cell(50, 3, _M('CEP', $module) . ': ' . $rdata[4][0][15], 0, 0, 'L'); 

        $this->pdf->ln();
        $this->pdf->cell(125, 3, _M('Curso', $module) . ': ' . $rdata[4][0][8]. ' - ' . $rdata[4][0][11]. ' - ' . _M('Unidade', $module) . ': ' . $rdata[4][0][9]. ' - ' . $rdata[4][0][10], 0, 0, 'L');
        $this->pdf->cell(50, 3, _M('E-mail', $module) . ': ' . strtolower($rdata[4][0][17]), 0, 0, 'L');
        $this->pdf->ln();

// Disciplinas cursadas
        if( is_array($rdata[3]) )
        {
            foreach ($rdata[3] as $complementaryActivities) //Laço para totalizar horas
            {
                $totalHoursActivities   += $complementaryActivities[10];
                $totalCreditsActivities += $complementaryActivities[11];
            }
        }


        if ( count($rdata[0])>0 )
        {
            $this->pdf->SetLineWidth('0.5mm');
            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
            $this->pdf->cell(192, 5, _M('DISCIPLINAS CURSADAS', $module), 'BT', 'B', 'C');
            $this->pdf->ln();

            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);
            $this->pdf->cell(8, 5, _M('Per', $module), 'BT', 0, 'L'); // Período
            $this->pdf->cell(5, 5, '', 'BT', 0, 'L');
            $this->pdf->cell(52, 5, _M('Disciplina', $module), 'BT', 0, 'L');
            $this->pdf->cell(7, 5, _M('Nota', $module), 'BT', 0, 'L');
            $this->pdf->cell(6, 5, _M('C.H.', $module), 'BT', 0, 'L');
            $this->pdf->cell(6, 5, _M('Créd.', $module), 'BT', 0, 'L');
            $this->pdf->cell(14, 5, _M('Curs.', $module), 'BT', 0, 'L');

            $this->pdf->cell(8, 5, _M('Per', $module), 'BT', 0, 'L'); // Período
            $this->pdf->cell(5, 5, '', 'BT', 0, 'L');
            $this->pdf->cell(52, 5, _M('Disciplina', $module), 'BT', 0, 'L');
            $this->pdf->cell(7, 5, _M('Nota', $module), 'BT', 0, 'L');
            $this->pdf->cell(6, 5, _M('C.H.', $module), 'BT', 0, 'L');
            $this->pdf->cell(6, 5, _M('Créd.', $module), 'BT', 0, 'L');
            $this->pdf->cell(10, 5, _M('Curs.', $module), 'BT', 0, 'L');
            $this->pdf->ln();

            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);
            $this->pdf->setFillColor(232);
            $x = 0; // "false"
            $y = 0;
            $yy = 0;

            $totalOfCurricularComponentConclued = count($rdata[0]);

            $countColumn1 = 0;
            $countColumn2 = ceil($totalOfCurricularComponentConclued/2);

            //For para ordenar vetor de forma, que exiba no pdf na ordem correta
            for ( $x = 0 ; $x < $totalOfCurricularComponentConclued; $x++ )
            {
                if ( ($x % 2) == 0 )
                {
                    $vetAux[$x] = $rdata[0][$countColumn1];
                    $countColumn1++;
                }
                else
                {
                    $vetAux[$x] = $rdata[0][$countColumn2];
                    $countColumn2++;
                }
            }

            //foreach ( $rdata[0] as $inscription)
            //{
            foreach ( $vetAux as $inscription)
            {
                if ($yy == 1)
                {
                    $yy = 0;
                }
                else
                {
                    $yy = 1;
                }

                if ( ($inscription[2] == $inscription[9]) && ($inscription[1] == $inscription[8]) )
                {

                    $this->pdf->cell(8, 3, $inscription[0], 0, 0, 'L');
                    $this->pdf->cell(4, 3, ''/*$inscription[11]*/, 0, 0, 'L');



                    //$this->pdf->cell(8, 3, $inscription[1], 0, 0, 'L');
                    //$this->pdf->cell(45, 3, $inscription[3], 0, 0, 'L');

                    $this->pdf->cell(53, 3, substr($inscription[1] . ' ' . $inscription[3], 0, 28), 0, 0, 'L');

                    if ( $inscription[6] != 0 )
                    {
                        $this->pdf->cell(7, 3, $inscription[6], 0, 0, 'L');
                    }
                    elseif ( $inscription[6] == 0 )
                    {
                        $this->pdf->cell(7, 3, $inscription[13], 0, 0, 'L');
                    }

                    $this->pdf->cell(6, 3, $inscription[5], 0, 0, 'L');
                    $this->pdf->cell(6, 3, SAGU::calcNumber($inscription[4], true), 0, 0, 'L');
                    $this->pdf->cell(7, 3, $inscription[8], 0, 0, 'L');
                    $this->pdf->cell(7, 3, $inscription[12], 0, 0, 'L');

                    if ( $yy == 0)
                    {
                        $this->pdf->ln();
                    }
                }
                elseif ( ($inscription[2] != $inscription[9]) || ($inscription[1] != $inscription[8]) )
                {
                    $this->pdf->cell(8, 3, $inscription[0], 0, 0, 'L');
                    $this->pdf->cell(4, 3, ''/*$inscription[11]*/, 0, 0, 'L');
                    $this->pdf->cell(8, 3, $inscription[1], 0, 0, 'L');
                    $this->pdf->cell(45, 3, substr($inscription[3]. ' [' . $inscription[10], 0, 30) . '', 0, 0, 'L');

                    if ( $inscription[6] != 0 )
                    {
                        $this->pdf->cell(7, 3, $inscription[6], 0, 0, 'L');
                    }
                    elseif ( $inscription[6] == 0 )
                    {
                        if ( strlen($inscription[13]) > 0 )
                        { //enrolled
                            $this->pdf->cell(7, 3, $inscription[13], 0, 0, 'L');
                        }
                        else
                        {
                            if ( $inscription[7] == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED') )
                            {
                                $this->pdf->cell(7, 3, _M('Disp.', $module), 0, 0, 'L');
                            }
                            else
                            {
                                $this->pdf->cell(7, 3, '', 0, 0, 'L');
                            }
                        }
                    }

                    $this->pdf->cell(6, 3, $inscription[5], 0, 0, 'L');
                    $this->pdf->cell(6, 3, SAGU::calcNumber($inscription[4], true), 0, 0, 'L');
                    $this->pdf->cell(7, 3, $inscription[8], 0, 0, 'L');
                    $this->pdf->cell(7, 3, $inscription[12], 0, 0, 'L');

                    if ( $yy == 0)
                    {
                        $this->pdf->ln();
                    }
                }
            } // end of 'foreach'
            if ($yy != 0)
            {
                $this->pdf->ln();
            }
        } // end of 'if'

        $yy = 0;
        if ( count($rdata[1]->possibilitiesOfEnroll) > 0 )
        {
            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
            $this->pdf->SetLineWidth('0.5mm');
            $this->pdf->cell(192, 5, _M('POSSIBILIDADES DE MATRÍCULA', $module), 'BT', 0, 'C');
            $this->pdf->ln();

            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 7);
            $this->pdf->MultiCell(192, 3, _M('Colocar na primeira coluna o dia da semana em que ocorre a disciplina: Dia = 1-Dom, 2-Seg, 3-Ter, 4-Qua, 5-Qui, 6-Sex, 7-Sáb, 8-Intensivo e na segunda coluna o turno: Turno = M-Manhã T-Tarde, N-Noite, V-Vespertino', $module), 0, 'L', 0);

            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);
            $this->pdf->MultiCell(192, 5, _M('Per: Período - C.H.: Carga horária - Cred: Número de créditos da disciplina - Curs.: Disciplina cursada - Sem: Semestre/Seriação - A: Disciplinas aproveitadas', $module) . ' ', 'B', 'L', 0);

            for ($i = 1; $i <= 2; $i++)
            {
                $this->pdf->SetLineWidth('0.2mm');
                $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);
                $this->pdf->cell(12, 3, _M('Dia Turno', $module), 'B', 0, 'L');
                $this->pdf->cell(5, 3,  '', 'B', 0, 'L');
                $this->pdf->cell(60, 3, _M('Disciplina', $module), 'B', 0, 'L');
                $this->pdf->cell(6, 3, _M('Sem.', $module), 'B', 0, 'L');
                $this->pdf->cell(6, 3, _M('C.H.', $module), 'B', 0, 'L');
                $this->pdf->cell(7, 3, _M('Créd.', $module), 'B', 0, 'L');
            }

            $this->pdf->ln();

            if ( is_array($rdata[1]->possibilitiesOfEnroll) )
            {
                //Have complementary activity

                foreach ($rdata[1]->possibilitiesOfEnroll as $inscriptionP)
                {
                    if ($x == 1)
                    {
                        $x = 0;
                    }
                    else
                    {
                        $x = 1;
                    }
                    if ($yy == 1)
                    {
                        $yy = 0;
                    }
                    else
                    {
                        $yy = 1;
                    }
                    $y++;

                    if ( $inscriptionP[7] == SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY') )
                    {
                        if ( count($rdata[3]) > 0 )
                        {
                            //Curriculum type id is complementary activity
                            foreach ( $rdata[3] as $complementaryActivity )
                            {
                                $totalActivitiesComplementaryHours   += (float)$complementaryActivity[10];
                                $totalActivitiesComplementaryCredits += (float)$complementaryActivity[11];
                            }

                            $inscriptionP[5] = $inscriptionP[5] - $totalActivitiesComplementaryHours;
                            $inscriptionP[6] = $inscriptionP[6] - $totalActivitiesComplementaryCredits;
                        }
                    }

                    $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 7);

                    $this->pdf->cell(12, 3, '[   ]  [   ]', 0, 0, 'L', $x);
                    $this->pdf->cell(5, 3, $inscriptionP[4], 0, 0, 'L', $x);


                    $this->pdf->cell(60, 3, substr($inscriptionP[0] . ' ' . $inscriptionP[2], 0, 35), 0, 0, 'L', $x);

                    $this->pdf->cell(6, 3, $inscriptionP[3], 0, 0, 'L', $x);
                    $this->pdf->cell(6, 3, $inscriptionP[5], 0, 0, 'L', $x);
                    $this->pdf->cell(7, 3, SAGU::calcNumber($inscriptionP[6], true), 0, 0, 'L', $x);
                    $x++;
                    if ( $yy == 0 )
                    {
                        $this->pdf->ln();
                        $x = $x-1;
                    }
                }
            }
            else
            {
                //Don't have complementary activity
            }

            if ( $yy != 0 )
            {
                if ($x == 2)
                {
                    $complBorder = 1;
                }
                else
                {
                    $complBorder = 0;
                }
                
                $this->pdf->cell(96, 3, '', 0, 0, 'L', $complBorder);
                $this->pdf->ln();
            }

            $this->pdf->ln();
            $this->pdf->cell(9, 3, '[   ] [   ]', 0, 0, 'L');
            $this->pdf->cell(14, 3, '[              ]', 0, 0, 'L');
            $this->pdf->cell(74, 3, '____________________________________________________', 0, 0, 'L');
            $this->pdf->cell(9, 3, '[   ] [   ]', 0, 0, 'L');
            $this->pdf->cell(14, 3, '[              ]', 0, 0, 'L');
            $this->pdf->cell(72, 3, '____________________________________________________', 0, 0, 'L');
            $this->pdf->ln();
            $this->pdf->ln();
        }

        $yy = 0;
        if ( count($rdata[1]->nonCoursedCurricularComponent) > 0 )
        {

            $this->pdf->SetLineWidth('0.5mm');
            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
            $this->pdf->cell(192, 5, _M('DISCIPLINAS NÃO CURSADAS', $module), 'BT', 'B', 'C');
            $this->pdf->ln();

            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);
            for ($i = 1; $i <= 2; $i++)
            {
                $this->pdf->cell(11, 5, '', 'BT', 0, 'C');
                $this->pdf->cell(58, 5, _M('Disciplina', $module), 'BT', 0, 'L');
                $this->pdf->cell(8, 5, _M('Sem.', $module), 'BT', 0, 'L');
                $this->pdf->cell(8, 5, _M('C.H.', $module), 'BT', 0, 'L');
                $this->pdf->cell(11, 5, _M('Créd.', $module), 'BT', 0, 'L');
            }

            $this->pdf->ln();

            foreach ($rdata[1]->nonCoursedCurricularComponent as $inscriptionN)
            {
                if ($yy == 1)
                {
                    $yy = 0;
                }
                else
                {
                    $yy = 1;
                }

                $this->pdf->cell(11, 3, '', 0, 0, 'C');
                $this->pdf->cell(58, 3, substr($inscriptionN[2], 0, 32), 0, 0, 'L');
                //$this->pdf->cell(50, 3, $inscriptionN[2], 0, 0, 'L');
                $this->pdf->cell(8, 3, $inscriptionN[3], 0, 0, 'L');
                $this->pdf->cell(8, 3, $inscriptionN[5], 0, 0, 'L');

                if ( strlen($inscriptionN[6]) > 0 )
                {
                    $this->pdf->cell(11, 3, SAGU::calcNumber($inscriptionN[6], true), 0, 0, 'L');
                }
                else
                {
                    $this->pdf->cell(11, 3, $inscriptionN[6], 0, 0, 'L');
                }

                if ($yy == 0)
                {
                    $this->pdf->ln();
                }

            } // end of 'foreach'

            if ($yy != 0)
            {
                $this->pdf->ln();
            }
        }
//--OTHER COURSED CURRICULAR COMPONENTS
        $yy = 0;
        if ( count($rdata[2])>0 )
        {
            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
            $this->pdf->SetLineWidth('0.5mm');
            $this->pdf->cell(192, 5, _M('OUTRAS DISCIPLINAS CURSADAS', $module), 'BT', 0, 'C');
            $this->pdf->ln();
            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);

            for ($i = 1; $i <= 2; $i++)
            {
                $this->pdf->cell(8, 5, _M('Per', $module), 'BT', 0, 'L'); // Período
                $this->pdf->cell(10, 5, _M('Curso', $module), 'BT', 0, 'L');
                $this->pdf->cell(45, 5, _M('Disciplina', $module), 'BT', 0, 'L');
                $this->pdf->cell(8, 5, _M('Nota', $module), 'BT', 0, 'L');
                $this->pdf->cell(7, 5, _M('C.H.', $module), 'BT', 0, 'L');
                $this->pdf->cell(8, 5, _M('Créd.', $module), 'BT', 0, 'L');

                if ($i == 1)
                {
                    $this->pdf->cell(11, 5, _M('Curs.', $module), 'BT', 0, 'L');
                }
                elseif ($i == 2)
                {
                    $this->pdf->cell(9, 5, _M('Curs.', $module), 'BT', 0, 'L');
                }
            }

            $this->pdf->ln();

            unset($vetAux);
            $totalOfOtherCoursedCurricularComponents = count($rdata[2]);

            $countColumn1 = 0;
            $countColumn2 = ceil($totalOfOtherCoursedCurricularComponents/2);

            //For para ordenar vetor de forma, que exiba no pdf na ordem correta
            for ( $x = 0 ; $x < $totalOfOtherCoursedCurricularComponents; $x++ )
            {
                if ( ($x % 2) == 0 )
                {
                    $vetAux[$x] = $rdata[2][$countColumn1];
                    $countColumn1++;
                }
                else
                {
                    $vetAux[$x] = $rdata[2][$countColumn2];
                    $countColumn2++;
                }
            }

            //foreach ($rdata[2] as $inscriptionO)
            foreach ($vetAux as $inscriptionO)
            {
                if ($yy == 1)
                {
                    $yy = 0;
                }
                else
                {
                    $yy = 1;
                }
                $y++;

                $this->pdf->cell(8, 3, $inscriptionO[0], 0, 0, 'L');
                $this->pdf->cell(8, 3, $inscriptionO[10], 0, 0, 'L');
                $this->pdf->cell(8, 3, $inscriptionO[1], 0, 0, 'L');
                $this->pdf->cell(1, 3, '', 0, 0, 'L');
                $this->pdf->cell(38, 3, substr($inscriptionO[3], 0, 28), 0, 0, 'L');
                $this->pdf->cell(8, 3, $inscriptionO[4], 0, 0, 'L');
                $this->pdf->cell(7, 3, $inscriptionO[7], 0, 0, 'L');
                $this->pdf->cell(8, 3, SAGU::calcNumber($inscriptionO[6], true), 0, 0, 'L');

                if ( ($inscriptionO[1] != $inscriptionO[8]) || ($inscriptionO[2] != $inscriptionO[9]) )
                {
                    $this->pdf->cell(7, 3, $inscriptionO[8], 0, 0, 'L');
                }
                else
                {
                    $this->pdf->cell(7, 3, '', 0, 0, 'L');
                }

                $this->pdf->cell(4, 3, $inscriptionO[13], 0, 0, 'L');

                if ($yy == 0)
                {
                    $this->pdf->ln();
                }
            }

            if ($yy != 0)
            {
                $this->pdf->ln();
            }
        }

        $yy = 0;
        if ( count($rdata[3])>0 )
        {
            $this->pdf->ln();
            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
            $this->pdf->SetLineWidth('0.5mm');
            $this->pdf->cell(192, 5, _M('ATIVIDADES COMPLEMENTARES', $module), 'BT', 0, 'C');
            $this->pdf->ln();

            $this->pdf->SetLineWidth('0.5mm');
            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);
            $this->pdf->cell(8, 5, _M('Per', $module), 'BT', 0, 'L'); // Período
            $this->pdf->cell(10, 5, _M('Curso', $module), 'BT', 0, 'L');
            $this->pdf->cell(140, 5, _M('Disciplina', $module), 'BT', 0, 'L');
            $this->pdf->cell(8, 5, _M('Nota', $module), 'BT', 0, 'L');
            $this->pdf->cell(7, 5, _M('C.H.', $module), 'BT', 0, 'L');
            $this->pdf->cell(8, 5, _M('Créd.', $module), 'BT', 0, 'L');
            $this->pdf->cell(10, 5, _M('Curs.', $module), 'BT', 0, 'L');
            $this->pdf->ln();

            foreach ($rdata[3] as $inscriptionC)
            {
                if ($x == 1)
                {
                    $x = 0;
                }
                else
                {
                    $x = 1;
                }
                $y++;

                //$inscriptionC[0] = periodId;
                //$inscriptionC[1] = disciplinaId;
                //$inscriptionC[2] = disciplinaVersion;
                //$inscriptionC[3] = disciplinaName;
                //$inscriptionC[4] = finalNote desta matricula;
                //$inscriptionC[5] = statusId da matrícula;
                //$inscriptionC[6] = disciplinaId do groupId - turma;
                //$inscriptionC[7] = versão da disciplinaId do groupId - turma;
                //$inscriptionC[8] = descrição da atividade complementar;

                $this->pdf->cell(8, 3, $inscriptionC[0], 0, 0, 'L');
                $this->pdf->cell(8, 3, $inscriptionC[13], 0, 0, 'L');
                $this->pdf->cell(142 , 3, substr(($inscriptionC[1]. '   ' . $inscriptionC[3] . '[' . $inscriptionC[8] . ']'), 0, 110), 0, 0, 'L');
                $this->pdf->cell(8, 3, $inscriptionC[9], 0, 0, 'L');
                $this->pdf->cell(7, 3, $inscriptionC[10], 0, 0, 'L');
                $this->pdf->cell(8, 3, SAGU::calcNumber($inscriptionC[11], true), 0, 0, 'L');
                $this->pdf->cell(10, 3, $inscriptionC[6] . ' ' . $inscriptionC[7], 0, 0, 'L');

                $this->pdf->ln();
            }
            if ($yy != 0)
            {
                $this->pdf->ln();
            }
        }
        $this->pdf->ln(1);
        $this->pdf->SetLineWidth('0.5mm');

//Complementação da carga horária
        if ( count($rdata[12])>0 )
        {
            $this->pdf->ln();
            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
            $this->pdf->SetLineWidth('0.5mm');
            $this->pdf->cell(192, 5, _M('DISCIPLINAS PARA COMPLEMENTAÇÃO DE CARGA HORÁRIA', $module), 'BT', 0, 'C');
            $this->pdf->ln();

            $this->pdf->SetLineWidth('0.5mm');
            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);
            $this->pdf->cell(8, 5, _M('Per', $module), 'BT', 0, 'L'); // Período
            $this->pdf->cell(10, 5, _M('Curso', $module), 'BT', 0, 'L');
            $this->pdf->cell(140, 5, _M('Disciplina', $module), 'BT', 0, 'L');
            $this->pdf->cell(8, 5, _M('Nota', $module), 'BT', 0, 'L');
            $this->pdf->cell(7, 5, _M('C.H.', $module), 'BT', 0, 'L');
            $this->pdf->cell(8, 5, _M('Créd.', $module), 'BT', 0, 'L');
            $this->pdf->cell(11, 5, _M('Curs.', $module), 'BT', 0, 'L');
            $this->pdf->ln();

            foreach ( $rdata[12] as $inscriptionLHC )
            {
                if ( $x == 1 )
                {
                    $x = 0;
                }
                else
                {
                    $x = 1;
                }
                $y++;

                $this->pdf->cell(8, 3, $inscriptionLHC[0], 0, 0, 'L');
                $this->pdf->cell(8, 3, $inscriptionLHC[16] . '/' . $inscriptionLHC[17], 0, 0, 'L');
                $this->pdf->cell(142 , 3, substr(($inscriptionLHC[1] . ' ' . $inscriptionLHC[10]), 0, 110), 0, 0, 'L');
                $this->pdf->cell(8, 3, $inscriptionLHC[6], 0, 0, 'L');
                $this->pdf->cell(7, 3, $inscriptionLHC[14], 0, 0, 'L');
                $this->pdf->cell(8, 3, SAGU::calcNumber($inscriptionLHC[15], true), 0, 0, 'L');
                $this->pdf->cell(10, 3, $inscriptionLHC[8], 0, 0, 'L');

//                 $this->pdf->cell(8, 3, $inscriptionLHC[0], 0, 0, 'L');
//                 $this->pdf->cell(8, 3, $inscriptionLHC[6], 0, 0, 'L');
//                 $this->pdf->cell(142 , 3, substr(($inscriptionLHC[1]. '   ' . $inscriptionLHC[3] . '[' . $inscriptionLHC[8] . ']'), 1, 110), 0, 0, 'L');
//                 $this->pdf->cell(8, 3, $inscriptionLHC[9], 0, 0, 'L');
//                 $this->pdf->cell(7, 3, $inscriptionLHC[14], 0, 0, 'L');
//                 $this->pdf->cell(8, 3, $inscriptionLHC[15], 0, 0, 'L');
//                 $this->pdf->cell(10, 3, $inscriptionLHC[12], 0, 0, 'L');
                $this->pdf->ln();
            }
            if ($yy != 0)
            {
                $this->pdf->ln();
            }
        }
        //$this->pdf->ln(3);

        //Bloco para escrever os cursos que o aluno já concluiu
        $this->pdf->ln(2);

        if ( is_array($rdata[13]) && ( count($rdata[13]) > 0 ) )
        {
            $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
            foreach ( $rdata[13] as $value1 )
            {
                $this->pdf->cell(192, 0, _M('OBS', $module) . '.: ' . _M('Este(a) aluno(a) é formado(a) em @1 na @2.', $module, ($value1[1] . ' - ' . $value1[2]), $legalPerson->name), '', 0, '') ;

                $this->pdf->ln(3);
            }
        }

//         $this->pdf->cell(192, 0, '', 'T', 0, '');
        if ( $rdata[7] != null )
        {
            $fill = 0;
            foreach ($rdata[7] as $message)
            {

                if ( $message[1] = 'B' )
                {
                    $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
                }
                elseif ( $message[1] = 'I' )
                {
                    $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'I', 7);
                }
                elseif ( $message[1] = 'D' )
                {
                    $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 7);
                }

                $contract = $rdata[6][0][0];

                if ( $fill == 0 )
                {
                    $this->pdf->cell(8, 3, '', 'T', 0, 'L');
                    $this->pdf->MultiCell(184, '3', str_replace("\n", '', str_replace("\$preco", number_format($message[3],2, ',', '.'), str_replace("\$contrato", "$contract", $message[0]))), 'T', 'L', 0);

                }
                elseif ( $fill == 1 )
                {
                    $this->pdf->cell(8, 3, '', 0, 0, 'L');
                    $this->pdf->MultiCell(184, '3', str_replace("\n", '', str_replace("\$preco", number_format($message[3],2, ',', '.'), str_replace("\$contrato", "$contract", $message[0]))), 0, 'L', 0);

                }

                $fill = 1;
            }
        }

        $yy = 0;
        $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 7);
        $this->pdf->SetLineWidth('0.5mm');

        if ( $rdata != null )
        {
            unset($docFinal);
            if( $rdata[5] != null )
            {
                foreach ( $rdata[5] as $doc )
                {
                    $docFinal .= $doc[1] . ', ';
                }
            }
            $this->pdf->MultiCell(192, 3, _M('DOCUMENTOS PENDENTES', $module) . ': ' . $docFinal, 'T', 'L', 0);
        }
        else
        {
            $this->pdf->cell(45, 5, _M('Sem pendências no momento', $module), 0, 0, 'L');
        }

        $this->pdf->ln();

        $x = 1;
        $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 6);
        $this->pdf->SetLineWidth('0.2mm');
        $this->pdf->cell(192, 4, _M('RESPONSÁVEL PELO PAGAMENTO DAS MENSALIDADES (FAE - Fundo de Apoio ao Estudante)', $module) . ': ' . $rdata[6][0][1], 'BT', 0, 'L', $x);

        $this->pdf->ln();

        $businessCompany = new BusinessBasicBusCompany();
        $company         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

        $businessCity = new BusinessBasicBusCity();
        $city         = $businessCity->getCity($legalPerson->cityId);

        $this->pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);
        $this->pdf->SetLineWidth('0.5mm');
        $this->pdf->cell(192, 4, _M('Aluno', $module) . ': ' . ' ________________________________________  ' . _M('Recebido por', $module) . ': ' . ' ________________________________________  ' . SAGU::getCapitulatetString($city->name) . ' ___/___/______  ', 'B', 0, 'L');
        $this->pdf->ln();

        $this->pdf->SetLineWidth('0.5mm');
        $this->pdf->cell(192, 3,'', 'BT', 0, 'L');

    }
    
}

?>
