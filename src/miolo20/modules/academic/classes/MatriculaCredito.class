<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Matricula Web
 *
 * @author Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * \b Maintainers: \n
 * Jonas Guilherme Dahmer [jonas@solis.coop.br]
 *
 * @since
 * Class created on 10/04/2012
 *
 */
class MatriculaCredito extends Matricula
{
    /**
     * Gera a estrutura das disciplinas oferecidas para a matricula de credito
     *
     * @param type $args
     * @return type 
     */
    public function listaDisciplinasOferecidas($args=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $busEnroll = new BusinessAcademicBusEnroll();

        $enrollData = $this->listaDisciplinasOferecidasParaEsteSemestre();
        
        $currPeriodTable = $this->generateTable($enrollData, _M('Disciplinas oferecidas para o curso de @1 no período @2', $module, $this->obterCurso(), $this->obterTurmaPeriodo()), 'group', true, false, null, $args);
        $fields[] = $currPeriodTable;

        $curriculums = $this->listaDisciplinasOferecidasPendentes();

        if ( count($curriculums) > 0 )
        {
            $args->gridName = 'pendingGroups';
            $args->pendingGroups = array( );
            foreach ( $curriculums as $curriculum )
            {
                $args->pendingGroups[$curriculum->groupId] = $curriculum->curriculumId;
            }
        }

        $args->gridName = 'customGroups';
        $args->customGroups = array( );

        $enroll = $busEnroll->getEnrollByLearningPeriod($this->contractId, $this->learningPeriodId);
        $displayed = $this->getAllSelectedGroups($args);
        for ( $i = 0; $i < count($enroll); $i++ )
        {
            if ( strlen($displayed[$enroll[$i][2]]) == 0 )
            {
                $args->customGroups[$enroll[$i][2]] = $enroll[$i][1];
            }
        }

        //exibir disciplinas eletivas
        if($this->obterConfiguracoes()->showElectivesExternal==DB_TRUE)
        {
            $fields[] = new MSeparator();
            $fields[] = $this->disciplinasEletivas($args);
        }

        return $fields;
    }
}


?>