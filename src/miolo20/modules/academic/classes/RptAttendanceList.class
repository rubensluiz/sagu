<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/

/**
 *Definition of a set that stores the file path will be used as model
 **/
define('MODEL_NAME', $MIOLO->getModulePath('basic', '/documents/attendanceReport.sxw'));

/**
 * SXW extension to generate report
 */
class RptAttendanceList
{
    public function RptAttendanceList($data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $business = new BusinessAcademicBusAttendance();
        
        set_time_limit(0);
        
        //BusinessSchedule
        $businessSchedule = new BusinessAcademicBusSchedule();
        //BusinessFrequenceEnroll
        $businessFrequenceEnroll = new BusinessAcademicBusFrequenceEnroll();
        //BusinessDegree
        $businessDegree = new BusinessAcademicBusDegree();
        //BusinessDegreeEnroll
        $businessEnrollDegree = new BusinessAcademicBusDegreeEnroll();
        //BusinessGroup
        $businessGroup = new BusinessAcademicBusGroup();
        
        // include and instance agata api
        $MIOLO->uses('/core/AgataAPI.class');
        $api = new AgataAPI();
        
        //Receive the model.sxw the parameters MAX_PUPIL_BY_PAGE = maximum of persons per page
        //and MAX_LEN_NAME maximum size of the name.
        $agataParameter = AgataOO::getConfig(MODEL_NAME);

        //Variable that controls the page break.
        if ( count($data->groupId) > 0 )
        {
            $curricularData = array();
            $arraySubfield = array();
            
            foreach ( $data->groupId as $key => $group )
            {
                list ( $groupId, $professorId ) = $group;
                
                $group = $businessGroup->getGroup($groupId);
                $reportData = $business->getGroupDataBySchedule($groupId, $professorId);
                $reportData->emissionDate = $data->emissionDate;
                $reportData->pupils = $business->listGroupEnrolledPupils($groupId);
                $reportData->curriculumCourseName = $group->curriculumCourseName;
                
                //Schedules of group
                $schedules = $businessSchedule->getScheduleOfGroup($groupId);
                //Degrees
                $degrees = $businessDegree->getEnrollDegree($groupId);
                
                //Pupils listing
                if ( count($reportData->pupils) > 0 )
                {
                    $count = 1;
                    
                    for ( $n = 0; $n < count($schedules); $n = $n + $agataParameter['classes'] )
                    {                        
                    	foreach ( $reportData->pupils as $key1 => $pupil )
                        {
                            list ( $enrollId, $personId, $personName, $courseId, $statusId, $statusDescription, $dateCancellation ) = $pupil;
                            
                            if ( ($courseId != $oldCourseId) || ($oldGroupId != $reportData->groupId) || ($oldPg != $pg) || ($professorId != $oldProfessorId) )
                            {
                                $oldProfessorId = $professorId;
                                $oldGroupId = $reportData->groupId;
                                $linePg = 1;
                                $oldPg = $pg;
                                
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][0] = $reportData->curricularComponent;
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][1] = $reportData->center;
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][2] = $reportData->curriculumCourseName;
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][3] = $reportData->unit;
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][4] = $reportData->professor;
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][5] = $reportData->minimumNumberHours;
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][6] = $reportData->emissionDate;
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][7] = $reportData->periodId;
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][8] = $reportData->numberHours;
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][9] = $reportData->classId;
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][10] = $reportData->room;
                                $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][11] = $reportData->groupId;
                                
                                //Parameter document number of classes    
                                $maxLenClasses = ($agataParameter['classes'] + $n);
                                
                                //Add day and month in document
                                for ( $i = $n; $i < $maxLenClasses; $i++ )
                                {
                                    $date = explode('-', $schedules[$i][2]);
                                    $month = $date[1];
                                    $day = $date[2];
                                    $beginHour = $schedules[$i][4];
                                    $endHour = $schedules[$i][5];
                                    
                                    $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][] = ($i + 1);
                                    $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][] = $month;
                                    $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][] = $day;
                                    $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][] = substr($beginHour, 0, 5);
                                    $curricularData[$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][] = substr($endHour, 0, 5);
                                }
                            }
                            
                            //Pupil enroll status cancelled
                            if ( ($statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED')) || ($statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DESISTING')) )
                            {
                                if ( SAGU::getParameter('BASIC', 'SHOW_CANCELLED_PUPILS_IN_EXAM_ACT') == DB_TRUE )
                                {
                                    $subfield = array();
                                    $subfield[] = '*';
                                    $subfield[] = $personId;
                                    $subfield[] = $personName;
                                    $subfield[] = $courseId;
                                }
                            }
                            //Pupil
                            else
                            {
                                $subfield = array();
                                $subfield[] = $count;
                                $subfield[] = $personId;
                                $subfield[] = $personName;
                                $subfield[] = $courseId;
                                $count++;
                            }
                            
                            //Add frequence in document 
                            for ( $i = $n; $i < $maxLenClasses; $i++ )
                            {
                                //Get frequence
                                $scheduleId = $schedules[$i][1];
                                $timeId = $schedules[$i][3];
                                
                                //Invert date
                                if ( $schedules[$i][2] )
                                {
                                    $vDate = explode('-', $schedules[$i][2]);
                                    $date = $vDate[2] . "/" . $vDate[1] . "/" . $vDate[0];
                                }
                                
                                $frequence = $businessFrequenceEnroll->getEnrollFrequencyOnDate($enrollId, $scheduleId, $date, $timeId);
                                
                                //Array total frequence
                                $totalFrequences[] = $frequence;
                                
                                //Presence
                                if ( $frequence == '1' )
                                {
                                    $frequence = $agataParameter['presence'];
                                }
                                //Half presence
                                if ( $frequence == '0.5' )
                                {
                                    $frequence = $agataParameter['half_presence'];
                                }
                                //Absence
                                if ( $frequence == '0' )
                                {
                                    $frequence = $agataParameter['absence'];
                                }
                                
                                $subfield[] = $frequence;
                            }
                            
                            //Add total frequence in document
                            if ( is_array($totalFrequences) )
                            {
                                foreach ( $totalFrequences as $t )
                                {
                                    $totalFrequence = ($totalFrequence + $t);
                                }
                            }
                            
                            //Total frequence student
                            $totalFrequence = ((100 * $totalFrequence) / $reportData->numberHours);
                            $subfield[] = round($totalFrequence, 1) . '%';
                            
                            //Add note in document                        
                            foreach ( $degrees as $degree )
                            {
                                
                                $degreeId = $degree[0];
                                $dataNote = $businessEnrollDegree->getDegreeEnrollHistory($degreeId, $enrollId, $concept = false);
                                $note = $dataNote[0][0];
                                $subfield[] = $note;
                            }
                            
                            //Add data in document
                            $arraySubfield[0][$oldPg . $oldGroupId . $oldProfessorId . $courseId . $n][$key1] = $subfield;
                            
                            //Checks if the number of character of the name of the staff is greater
                            //than or equal to the number that was set on the properties of the
                            //model.sxw
                            if ( strlen($personName) >= $agataParameter['max_len_name'] )
                            {
                                $linePg = $linePg + 2;
                            }
                            else
                            {
                                $linePg++;
                            }
                            //Checks if the number of lines is greater or equal to the parameter
                            //that is in the properties of the model.Sxw
                            if ( $linePg >= $agataParameter['max_pupil_by_page'] )
                            {
                                $pg++;
                            }
                            
                            $oldCourseId = $courseId;
                            //Unset
                            unset($totalFrequences);
                            unset($totalFrequence);
                        }
                        $count = 1;
                        $pg++;
                    }
                }
            }
            
            $fileName = '/attendanceReport_' . $groupId . '_' . $professorId . '.sxw';
            
            // SET AGATA PARAMETERS
            //Set information of the header 
            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . $fileName);
            $api->setDataArray($curricularData);
            $api->setSubDataArray($arraySubfield);

            $ok = $api->parseOpenOffice(MODEL_NAME);

            if ( $ok && ($data->generateOption == 'pdf') )
            {
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/attendanceReport_' . $groupId . '_' . $professorId . '.pdf');
                $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/attendanceReport_' . $groupId . '_' . $professorId . '.sxw');
            }

            $api->fileDialog();
        }
    }
}
?>
