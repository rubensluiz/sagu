<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This class Default defines To report identification
 *
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 14/06/2006
 *
 **/
 
/**
 * Default defines 
 * To report identification
 */
define('REPORT_ID', 'AC001'); 
define('FPDF_FONTPATH', $MIOLO->getModulePath('basic', '/classes/fpdf/font/'));

$MIOLO  = MIOLO::getInstance();
$module = MIOLO::getCurrentModule();
$MIOLO->Uses('classes/fpdf/fpdf.php', 'basic');

/**
 * Create header and footer information
 */
class PDF extends FPDF
{
    var $type = 0;
    var $personName;
    var $maxStrlen = 48;

    /**
     * Defines the footer for this report
     */
    public function Footer()
    {
        $module = MIOLO::getCurrentModule();
        $this->setY(-15);
        $pn = $this->PageNo().'/{nb}';
        $this->cell(190, 1, '', 'B', 1);
        $this->ln();
        
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);
        if ( $pn == 1 )
        {
            $text = $this->personName;
        }
        else
        {
            $text = _M('Continuação de', $module).' '.$this->personName;
        }
        
        $this->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'I', 8);
        $this->cell(50, 4, $text, 0, 0);
        $this->cell(140, 4, _M('RELATÓRIO @1', $module, REPORT_ID).' '._M('Página @1', $module, $pn), 0, 0, 'R');
        $this->ln();
    }

    /**
     * Defines the header for this report
     */
    public function Header()
    {
        $module = MIOLO::getCurrentModule();
        if ( $this->type == 1 )
        {
            $this->ln();
            $this->ln();
            $this->ln();
            $this->ln();
        }
    }
}


/**
 * PDF extension to generate report
 */
class RptScholarshipDescriptionTech 
{
    /**
     * Get report data information
     */
    private function getReportData($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $business = new BusinessAcademicBusScholarshipDescriptionTech();
        $busLegalPerson = new BusinessBasicBusLegalPerson();
        $busCity = new BusinessBasicBusCity();

        //Physical person data
        $physicalPersonData = $business->getPhysicalPersonData($data->contractPersonId);
        $this->personName   = $physicalPersonData->name;

        //Physical person filiation data 
        $physicalPersonFatherData = $business->getPhysicalPersonData($physicalPersonData->fatherId);
        $physicalPersonMotherData = $business->getPhysicalPersonData($physicalPersonData->motherId);

        //Contract data
        $contractData = $business->getContractData($data->contractId);
        
        //Company data
        $companyData = $business->getCompanyData(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        //Legal person data
        $legalPersonData = $busLegalPerson->getLegalPerson($companyData->personId);

        //Document data
        $documentData->rg     = $business->getPersonDocumentData($data->contractPersonId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));
        $documentData->cityRg = strlen($documentData->rg->cityId) > 0 ? $busCity->getCity($documentData->rg->cityId) : '';

        //Course data
        $courseData = $business->getCourseData($data->contractCourseId, $data->contractCourseVersion);

        //Course occurrence data
        $courseOccurrenceData = $business->getCourseOccurrenceData($data->contractCourseId, $data->contractCourseVersion, $contractData->turnId, $contractData->unitId);

        //City data
        $cityPhysPersonData  = $busCity->getCity($physicalPersonData->cityIdBirth);
        $cityLegalPersonData = $busCity->getCity($legalPersonData->cityId);

        //Stamps data
        $stampsData->stamp1 = $business->getStampData($data->stamp1);
        $stampsData->stamp2 = $business->getStampData($data->stamp2);

        //Coursed/Enrolled hours and credits data
        $coursedEnrolledData = $business->getCoursedEnrolledData($data->contractId);

        //Learning period data
        $learningPeriodData = $business->getLearningPeriodData($data->contractId);

        //Curriculum data
        $courseCurriculumData = $business->getCourseCurriculumData($contractData->courseId, $contractData->courseVersion, $contractData->turnId, $contractData->unitId, $data->print8, $data->orderBy);

        if ( count($courseCurriculumData) > 0 )
        {
            foreach ( $courseCurriculumData as $curriculum )
            {
                list ( $curriculumId,
                       $courseId,
                       $courseVersion,
                       $courseName,
                       $turnId,
                       $unitId,
                       $curricularComponentId,
                       $curricularComponentVersion,
                       $curricularComponentName,
                       $semester,
                       $isShowDocumentEndCourse,
                       $curricularComponentGroupId,
                       $curricularComponentGroupName,
                       $curricularComponentGroupElectiveId,
                       $curricularComponentGroupElectiveName,
                       $curriculumTypeId,
                       $curriculumTypeDescription,
                       $endDate,
                       $curricularComponentTypeId,
                       $academicCredits,
                       $academicNumberHours ) = $curriculum ;

                //Check if the curriculum must appear on the scholarship description
                if ( $isShowDocumentEndCourse == DB_TRUE )
                {
                    $groupCurriculumData->curriculumId               = $curriculumId;
                    $groupCurriculumData->curricularComponentId      = $curricularComponentId;
                    $groupCurriculumData->curricularComponentVersion = $curricularComponentVersion;
                    $groupCurriculumData->curricularComponentName    = $curricularComponentName;
                    $groupCurriculumData->academicCredits            = $academicCredits;
                    $groupCurriculumData->academicNumberHours        = $academicNumberHours;

                    $curriculumEnrollData = $business->getEnrollData($data->contractId, $groupCurriculumData->curriculumId);

                    //If the student was approved or excused in this curriculum, gets the respective data
                    if ( count($curriculumEnrollData) > 0 )
                    {
                        //Check if the curriculum is a substitution (i.e electives case)
                        if ( $curriculumEnrollData[0][0] != $curriculumEnrollData[0][7] )
                        {
                            $substitutedCurriculumData = $business->getCurriculumData($curriculumEnrollData[0][7]);

                            if ( (($groupCurriculumData->curricularComponentName != $substitutedCurriculumData->curricularComponentName)) && ($data->print1) )
                            {
                                $groupCurriculumData->curricularComponentSubstitutedName = '[' . $substitutedCurriculumData->curricularComponentName . ']';
                            }
                        }

                        $groupCurriculumData->finalNote        = $curriculumEnrollData[0][1];
                        $groupCurriculumData->periodId         = $curriculumEnrollData[0][2];
                        $groupCurriculumData->obsExploitation  = $curriculumEnrollData[0][3];
                        $groupCurriculumData->statusId         = $curriculumEnrollData[0][4];
                        $groupCurriculumData->concept          = $curriculumEnrollData[0][5];
                        $groupCurriculumData->curriculumTypeId = $curriculumTypeId;

                        if ( $groupCurriculumData->statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') )
                        {
                            $groupCurriculumData->concept   = 'Matr';
                            $groupCurriculumData->finalNote = '';
                        }
                        elseif ( ($groupCurriculumData->statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DISAPPROVED')) 
                              || ($groupCurriculumData->statusId == 
                                  SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DISAPPROVED_FOR_LACKS')) )
                        {
                            $groupCurriculumData->concept = 'N/A';
                        }
                        elseif ( $groupCurriculumData->statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED') )
                        {
                            $groupCurriculumData->concept = 'A';
                        }
                        elseif ( $groupCurriculumData->statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED') )
                        {
                            $groupCurriculumData->concept = 'Disp';
                        }
                        else
                        {
                            $groupCurriculumData->concept = 'N/C';
                            $groupCurriculumData->finalNote = '';
                        }
                    }
                    //If not, informs that the student didn't coursed the curriculum yet
                    else
                    {
                        $groupCurriculumData->concept = 'N/C';
                    }

                    $curricularComponentGroupData[] = $groupCurriculumData;
                    unset($groupCurriculumData);
                } 
            }
        }
        $contractState = $business->getContractStateData($data->contractId);
        $busCountry    = new BusinessBasicBusCountry();
        $country       = $busCountry->getCountry($cityPhysPersonData->countryId);

        $courseAbilitiesData = $business->getCourseAbilitiesData($courseData->courseId, $courseData->courseVersion);

        //Organizing data to the report
        $rdata->course         = $courseData->name;
        $rdata->courseArea     = $courseData->educationArea;
        $rdata->recognition    = $courseData->recognitionDocumentNumber;
        $rdata->contractState  = $contractState;
        $rdata->name           = $physicalPersonData->name;
        $rdata->personId       = $physicalPersonData->personId;
        $rdata->contractId     = $data->contractId;
        $rdata->father         = $physicalPersonFatherData->name;
        $rdata->mother         = $physicalPersonMotherData->name;
        $rdata->dateBirth      = $physicalPersonData->dateBirth;
        $rdata->cityBirth      = $cityPhysPersonData->name;
        $rdata->stateBirth     = $cityPhysPersonData->stateId;
        $rdata->expeditionDate = $documentData->rg->dateExpedition;
        $rdata->identity       = $documentData->rg->content;
        $rdata->organ          = $documentData->rg->organ;
        $rdata->identityCity   = $documentData->cityRg->stateId.'/'.$documentData->cityRg->name;
        $rdata->nationality    = $country->nationality;
        $rdata->curriculumInfo = $curricularComponentGroupData;
        
        $rdata->numberHoursCoursed = $coursedEnrolledData->enrollHoursCoursed;
        $rdata->numberHoursEnroll  = $coursedEnrolledData->enrollHoursEnrolled;
        $rdata->numberHoursTotal   = $courseData->hourTotal;

        $rdata->numberCreditsCoursed = $coursedEnrolledData->enrollCreditsCoursed;
        $rdata->numberCreditsEnroll  = $coursedEnrolledData->enrollCreditsEnrolled;
        $rdata->numberCreditsTotal   = $courseData->credits;

        $rdata->companyAcronym     = $companyData->acronym;
        $rdata->companyName        = $companyData->name;
        $rdata->physEduPrint       = $data->print4;
        $rdata->physEduDesc        = $data->print4T;
        $rdata->showCreditsColumn  = $data->print7;
        $rdata->isFinalHistoric    = $data->print8;
        $rdata->stamp1Name         = $stampsData->stamp1->personName;
        $rdata->stamp2Name         = $stampsData->stamp2->personName;
        $rdata->stamp1Sector       = $stampsData->stamp1->functionDescription;
        $rdata->stamp2Sector       = $stampsData->stamp2->functionDescription;
        $rdata->stamp1Register     = $stampsData->stamp1->register;
        $rdata->stamp2Register     = $stampsData->stamp2->register;
        $rdata->selectiveProcess   = $selectiveProcessData->description.' - '.$selectiveProcessData->periodDescription;
        $rdata->legalPersonName    = $legalPersonData->name;
        $rdata->legalPersonAddress = $legalPersonData->location . ', ' . $legalPersonData->number;
        $rdata->legalPersonNeighborhood = $legalPersonData->neighborhood;
        $rdata->legalPersonCityName     = $cityLegalPersonData->name;
        $rdata->legalPersonState        = $cityLegalPersonData->stateId;
        $rdata->reportDate              = SAGU::getDateByExtense($data->emissionDate);
        $rdata->minimumFrequency        = $learningPeriodData->minimumFrequency;
        $rdata->minimumNote             = $learningPeriodData->finalAverage;
        $rdata->inscriptionData         = $inscriptionData;

        $rdata->conclusionDate  = $contractData->conclusionDate;
        $rdata->courseBeginDate = $contractData->contractBeginDate;

        $rdata->courseOccurrenceData = $courseOccurrenceData;

        $rdata->courseAbilities = $courseAbilitiesData;
        $rdata->institution     = $data->institution;
        $rdata->mantainer       = $data->mantainer;
        $rdata->workingAuth     = $data->workingAuth;
        $rdata->workingAuthDate = $data->workingAuthDate;
        $rdata->changingRes     = $data->changingRes;
        $rdata->regionalCoord   = $data->regionalCoord;
        $rdata->federalLaw      = $data->federalLaw;
        $rdata->authSector      = $data->authSector;

        return $rdata;
    }


    /**
     * Method to generate the report
     */
    public function RptScholarshipDescriptionTech($data = null)
    {
        $rdata  = $this->getReportData($data);
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();

        // Generating PDF file
        $pdf = new PDF();
        $pdf->aliasNbPages();
        $pdf->personName = $rdata->name;
        // First page
        $pdf->addPage('P', 'mm', 'A4');
        //$pdf->ln(30);
        
        $pdf->image($MIOLO->getModulePath('academic', '/html/images/brazil_federative_republic.png'), 19, 10, 25, null, SAGU::getParameter('BASIC', 'PHOTO_FORMAT'));
        
        // FIXME: Remove all this hard-coded text ASAP
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
        $pdf->cell(50, 0, '', 0);
        $pdf->cell(140, 5, $rdata->institution, 0, 0, 'L');
        $pdf->ln();
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);
        $pdf->cell(50, 0, '', 0);
        $pdf->cell(140, 5, 'Entidade Mantenedora: ' . $rdata->mantainer, 0, 0, 'L');
        $pdf->ln();
        $pdf->cell(50, 0, '', 0);
        $pdf->cell(90, 5, 'Parecer de autorização de funcionamento: ' . $rdata->workingAuth, 0, 0, 'L');
        $pdf->cell(50, 5, 'Data: ' . $rdata->workingAuthDate, 0, 0, 'L');
        $pdf->ln();
        $pdf->cell(50, 0, '', 0);
        $pdf->cell(140, 5, 'Resolução de alteração de designação: ' . $rdata->changingRes, 0, 0, 'L');
        $pdf->ln();
        $x = $pdf->getX();
        $y = $pdf->getY();
        $pdf->cell(50, 0, '', 0);
        $pdf->multicell(140, 5, 'Autorização de Funcionamento do Curso ' . $rdata->course . ' - ' . $rdata->courseArea, 0, 'L');
        $pdf->cell(50, 0, '', 0);
        $pdf->cell(140, 5, $rdata->courseOccurrenceData->authorizationDocument, 0, 0, 'L');
        $pdf->ln();
        $pdf->cell(50, 0, '', 0);
        $pdf->cell(60, 5, 'Endereço: ' . $rdata->legalPersonAddress, 0, 0, 'L');
        $pdf->cell(80, 5, 'Bairro: ' . $rdata->legalPersonNeighborhood, 0, 0, 'L');
        $pdf->ln();
        $pdf->cell(50, 0, '', 0);
        $pdf->cell(60, 5, 'Município: ' . $rdata->legalPersonCityName, 0, 0, 'L');
        $pdf->cell(80, 5, $rdata->regionalCoord, 0, 0, 'L');
        
        $x2 = $pdf->getX();
        $y2 = $pdf->getY();
        $pdf->setXY($x, $y + 4);
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 6);
        $pdf->cell(45, 5, 'REPÚBLICA FEDERATIVA DO BRASIL', 0, 0, 'C');
        $pdf->ln();
        $pdf->cell(45, 5, 'ESTADO DO RIO GRANDE DO SUL', 0, 0, 'C');
        $pdf->ln();
        $pdf->cell(45, 5, 'SECRETARIA DE ESTADO DA EDUCAÇÃO', 0, 0, 'C');
        
        $pdf->setXY($x2, $y2);
        $pdf->ln();
        $pdf->ln();
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
        $pdf->cell(190, 5, 'HISTÓRICO ESCOLAR', 'LTR', 0, 'C');
        $pdf->ln();
        $pdf->cell(190, 5, $rdata->course . ' - ' . $rdata->courseArea, 'LR', 0, 'C');
        $pdf->ln();
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 8);
        $pdf->cell(190, 5, 'LEI FEDERAL nº ' . $rdata->federalLaw, 'LBR', 0, 'C');
        $pdf->ln(7);
        
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);
        $pdf->cell(28, 5, 'Nome do(a) aluno(a):', 'LT', 0, 'L');
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
        $pdf->cell(162, 5, $rdata->name, 'TR', 0, 'L');
        $pdf->ln();
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);
        
        if ( strlen($rdata->father) == 0 )
        {
            $filiation = $rdata->mother;
        }
        elseif ( strlen($rdata->mother) == 0 )
        {
            $filiation = $rdata->father;
        }
        else
        {
            $filiation = $rdata->father . ' e de ' . $rdata->mother;
        }
        
        $pdf->cell(190, 5, 'Filho(a) de: ' . $filiation, 'LR', 0, 'L');
        $pdf->ln();
        $pdf->cell(95, 5, 'Data de Nascimento: ' . $rdata->dateBirth, 'L', 0, 'L');
        $pdf->cell(95, 5, 'Nacionalidade: ' . $rdata->nationality, 'R', 0, 'L');
        $pdf->ln();
        $pdf->cell(95, 5, 'Naturalidade: ' . $rdata->cityBirth, 'L', 0, 'L');
        $pdf->cell(95, 5, 'Estado: ' . $rdata->stateBirth, 'R', 0, 'L');
        $pdf->ln();
        $pdf->cell(95, 5, 'Cédula de Identidade: ' . $rdata->identity, 'LB', 0, 'L');
        $pdf->cell(95, 5, 'Órgão Expedidor: ' . $rdata->organ, 'BR', 0, 'L');
        $pdf->ln(7);
        
        if ( $rdata->contractState->concluded == true )
        {
            $text = 'Certificamos que o aluno acima indicado concluiu o curso ' . $rdata->course . ' - ' . $rdata->courseArea . ', autorizado conforme ' . $rdata->courseOccurrenceData->authorizationDocument . ' no ano de ' . $rdata->contractState->year . ' de acordo com a Lei ' . $rdata->federalLaw . ', obtendo os resultados constantes neste Histórico.';
        }
        elseif ( $rdata->contractState->locked == true )
        {
            $text = 'Certificamos que o aluno acima indicado freqüentou o ' . $rdata->course . ' - ' . $rdata->courseArea . ', autorizado conforme ' . $rdata->courseOccurrenceData->authorizationDocument . ' de acordo com a Lei ' . $rdata->federalLaw . ', obtendo até hoje os resultados constantes neste Histórico.';
        }
        else
        {
            $text = 'Certificamos que o aluno acima indicado está cursando o ' . $rdata->course . ' - ' . $rdata->courseArea . ', autorizado conforme ' . $rdata->courseOccurrenceData->authorizationDocument . ' de acordo com a Lei ' . $rdata->federalLaw . ', obtendo até hoje os resultados constantes neste Histórico.';
        }
        
        $pdf->multicell(190, 5, '               ' . $text, 1, 'L');
        
        $pdf->ln(2);
        $pdf->cell(90, 5, 'DISCIPLINAS', 'LTR', 0, 'L');
        $pdf->cell(12, 5, 'NOTA', 'LTR', 0, 'C');
        $pdf->cell(15, 5, 'CARGA', 'LTR', 0, 'C');
        $pdf->cell(15, 5, 'PERIODO', 'LTR', 0, 'C');
        $pdf->cell(8, 5, 'A/NA', 'LTR', 0, 'C');
        
        $x = $pdf->getX();
        $y = $pdf->getY();
        
        $pdf->ln();
        $pdf->cell(90, 5, '', 'LBR', 0, 'L');
        $pdf->cell(12, 5, '', 'LBR', 0, 'C');
        $pdf->cell(15, 5, 'HORARIA', 'LBR', 0, 'C');
        $pdf->cell(15, 5, '', 'LBR', 0, 'C');
        $pdf->cell(8, 5, '', 'LBR', 0, 'C');
        $pdf->ln();
        
        if ( count($rdata->curriculumInfo) > 0 )
        {
            $soma = 0;
            foreach ( $rdata->curriculumInfo as $currComp )
            {   
                $pdf->cell(90, 5, strlen($currComp->curricularComponentName) > $pdf->maxStrlen ? substr($currComp->curricularComponentName, 0, $pdf->maxStrlen) : $currComp->curricularComponentName, 1, 0, 'L');
                $pdf->cell(12, 5, $currComp->finalNote, 1, 0, 'C');
                $pdf->cell(15, 5, $currComp->academicNumberHours, 1, 0, 'C');
                $pdf->cell(15, 5, $currComp->periodId, 1, 0, 'C');
                $pdf->cell(8, 5, $currComp->concept, 1, 0, 'C');
                $pdf->ln();
                $soma += $currComp->academicNumberHours;
            }
        }
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 10);
        $pdf->cell(90, 5, 'TOTAL DA CARGA HORÁRIA', 1, 0, 'L');
        $pdf->cell(12, 5, '', 1, 0, 'L');
        $pdf->cell(15, 5, $soma, 1, 0, 'L');
        $pdf->cell(15, 5, '', 1, 0, 'L');
        $pdf->cell(8, 5, '', 1, 0, 'L');
        $pdf->ln();
        
        $x2 = $pdf->getX();
        $y2 = $pdf->getY();
        
        $pdf->setXY($x, $y);
        $pdf->cell(2, 0, '', 0);
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), 'B', 8);
        $pdf->cell(48, 5, 'Observações:', 'LTR', 0, 'L');
        $pdf->ln();
        $pdf->setXY($x, $pdf->getY());
        $pdf->cell(2, 0, '', 0);
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);
        $pdf->multicell(48, 5, '- Convenção para Resultado: A=Apto, N/A=Não Apto, N/C=Não Cursada, Matr=Matriculado, Disp=Dispensado' . "\n" . '- Nota mínima para Aprovação: ' . $rdata->minimumNote .  "\n" . '- Início do Curso: ' . $rdata->courseBeginDate . "\n" . '- Término do Curso: ' . $rdata->conclusionDate, 'LBR', 'L');
        $pdf->ln(2);
        $pdf->setXY($x, $pdf->getY());
        $pdf->cell(2, 0, '', 0);
        $pdf->cell(48, 5, 'Carimbo da escola', 'LTR', 0, 'C');
        $pdf->ln();
        $pdf->setXY($x, $pdf->getY());
        $pdf->cell(2, 0, '', 0);
        $pdf->cell(48, 30, '', 'LBR', 0, 'C');
        $pdf->ln(32);
        $pdf->setXY($x, $pdf->getY());
        $pdf->cell(2, 0, '', 0);
        $pdf->cell(48, 5, 'Autenticação de ' . $rdata->authSector, 'LTR', 0, 'C');
        $pdf->ln();
        $pdf->setXY($x, $pdf->getY());
        $pdf->cell(2, 0, '', 0);
        $pdf->cell(48, 30, '', 'LBR', 0, 'C');
        $pdf->ln(32);
        $pdf->setXY($x, $pdf->getY());
        $pdf->cell(2, 0, '', 0);
        $pdf->multicell(48, 5, $rdata->legalPersonCityName . ', ' . $rdata->legalPersonState . ', ' . SAGU::getDateByExtense($data->emissionDate), 0, 'L');
        
        $pdf->setXY($x2, 260);
        if ( (strlen($rdata->stamp1Name) > 0) || (strlen($rdata->stamp2Name) > 0) )
        {
            if ( (strlen($rdata->stamp1Name) > 0) && (strlen($rdata->stamp2Name)>0) )
            {
                $pdf->cell(5, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp1Name, 'T', 0, 'C');
                $pdf->cell(20, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp2Name, 'T', 0, 'C');
                $pdf->ln();
                $pdf->cell(5, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp1Sector, 0, 0, 'C');
                $pdf->cell(20, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp2Sector, 0, 0, 'C');
                $pdf->ln();
                $pdf->cell(5, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp1Register, 0, 0, 'C');
                $pdf->cell(20, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp2Register, 0, 0, 'C');
            }
            else
            {
                $stampNumber = strlen($rdata->stamp2Name) > 0 ? 2 : 1;
                
                if ( $stampNumber == 2 )
                {
                    $stampName     = $rdata->stamp2Name;
                    $stampSector   = $rdata->stamp2Sector;
                    $stampRegister = $rdata->stamp2Register;
                }
                else
                {
                    $stampName     = $rdata->stamp1Name;
                    $stampSector   = $rdata->stamp1Sector;
                    $stampRegister = $rdata->stamp1Register;
                }
                
                $pdf->cell(57.5, 5, '');
                $pdf->cell(75, 5, $stampName, 'T', 0, 'C');
                $pdf->cell(57.5, 5, '');
                $pdf->ln();
                $pdf->cell(190, 5, $stampSector, 0, 0, 'C');
                $pdf->ln();
                $pdf->cell(190, 5, $stampRegister, 0, 0, 'C');
            }
        }
        
        $pdf->addPage('P', 'mm', 'A4');
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
        
        $pdf->multicell(190, 5, '           Conforme consta no Plano do Curso ' . $rdata->course . ' - ' . $rdata->courseArea . ' e no Regimento Escolar, aprovados pelo ' . $rdata->courseOccurrenceData->authorizationDocument . ', o(a) aluno(a) ' . $rdata->name . ' demonstra:', 0, 'L');
        
        $pdf->ln();
        
        if ( count($rdata->courseAbilities->generalAbilities) > 0 )
        {
            $pdf->cell(190, 5, 'COMPETÊNCIAS PROFISSIONAIS GERAIS', 1, 0, 'L');
            $pdf->ln();
            
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);
            foreach ( $rdata->courseAbilities->generalAbilities as $ability )
            {
                $pdf->multicell(190, 4, $ability[4], 'LR', 'L');
            }
            $pdf->cell(190, 5, '', 'T');
        }
        
        $pdf->ln(5);
        $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 10);
        
        if ( count($rdata->courseAbilities->especificAbilities) > 0 )
        {
            $pdf->cell(190, 5, 'COMPETÊNCIAS PROFISSIONAIS ESPECÍFICAS', 1, 0, 'L');
            $pdf->ln();
            $pdf->setFont(SAGU::getParameter('BASIC', 'DEFAULT_REPORT_FONT'), '', 8);   
            foreach ( $rdata->courseAbilities->especificAbilities as $ability )
            {
                $pdf->multicell(190, 4, $ability[4], 'LR', 'L');
            }
            $pdf->cell(190, 5, '', 'T');
        }
        $pdf->ln(1);
        $pdf->cell(180, 5, $rdata->legalPersonCityName . ', ' . $rdata->legalPersonState . ', ' . SAGU::getDateByExtense($data->emissionDate), 0, 0, 'R');
        $pdf->ln(23);
        
        if ( (strlen($rdata->stamp1Name) > 0) || (strlen($rdata->stamp2Name) > 0) )
        {
            if ( (strlen($rdata->stamp1Name) > 0) && (strlen($rdata->stamp2Name)>0) )
            {
                $pdf->cell(5, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp1Name, 'T', 0, 'C');
                $pdf->cell(20, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp2Name, 'T', 0, 'C');
                $pdf->ln();
                $pdf->cell(5, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp1Sector, 0, 0, 'C');
                $pdf->cell(20, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp2Sector, 0, 0, 'C');
                $pdf->ln();
                $pdf->cell(5, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp1Register, 0, 0, 'C');
                $pdf->cell(20, 5, ' ', 0, 0);
                $pdf->cell(75, 5, $rdata->stamp2Register, 0, 0, 'C');
            }
            else
            {
                $stampNumber = strlen($rdata->stamp2Name) > 0 ? 2 : 1;
                
                if ( $stampNumber == 2 )
                {
                    $stampName     = $rdata->stamp2Name;
                    $stampSector   = $rdata->stamp2Sector;
                    $stampRegister = $rdata->stamp2Register;
                }
                else
                {
                    $stampName     = $rdata->stamp1Name;
                    $stampSector   = $rdata->stamp1Sector;
                    $stampRegister = $rdata->stamp1Register;
                }
                
                $pdf->cell(57.5, 5, '');
                $pdf->cell(75, 5, $stampName, 'T', 0, 'C');
                $pdf->cell(57.5, 5, '');
                $pdf->ln();
                $pdf->cell(190, 5, $stampSector, 0, 0, 'C');
                $pdf->ln();
                $pdf->cell(190, 5, $stampRegister, 0, 0, 'C');
            }
        }
        
        $pdf->close();
        $pdf->output();
    }
}

?>
