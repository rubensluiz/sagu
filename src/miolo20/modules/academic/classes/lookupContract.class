<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class implements functions to work with lookup.
 * 
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 09/03/2009
 *
 *
 **/
class SLookupContract extends MFormControl 
{
    const LOOKUP_NAME_CONTRACT = 'Contract';
    const LOOKUP_NAME_ACTIVE_CONTRACT = 'ActiveContract';

    /** 
     * This atribute identifies the component.
     */
    public $id = TRUE;
    
    /** 
     * Variable is a filter.
     */
    public $filters = TRUE;
    
    /** 
     * This variable determines whether or not display the contract field is required.
     */
    public $isRequired = TRUE;
    
    /** 
     * This variable determines whether or not display the person field.
     */
    public $showPerson = TRUE;

    /** 
     * This variable determines whether or not display the turn field.
     */
    public $showTurn = TRUE;
    
    /** 
     * This variable determines whether or not display the unit field.
     */
    public $showUnit = TRUE;

    /**
     * This variable determines whether or not display the class field
     */
    public $showClass = FALSE;

    /**
     * Variál que armazena array com diferentes ids para os campos a serem gerados se necessário
     */
    private $ids;


    protected $lookupName;
    
    /**
     * @var MLookupTextField
     */
    private $lookupContract;

    
    /**
     * Initialize some properties.
     * 
     * @param $id (integer) Id for the lookup contract.
     * @param $filters (object)
     * @param $showPerson (boolean) Show lookup person.
     */
    public function __construct($id, $filters, $isRequired = true, $showPerson = true, $showTurn = true, $showUnit = true, $ids = null)
    {
        parent::__construct( $id );
        
        $this->setId($id);
        $this->setFilters($filters);
        $this->setShowPerson($showPerson);
        $this->setShowTurn($showTurn);
        $this->setShowUnit($showUnit);
        $this->setIsRequired($isRequired);

        $this->ids['contractId'] = (isset($ids['contractId']) ? $ids['contractId'] : 'contractId' );
        $this->ids['contractPersonId'] = (isset($ids['contractPersonId']) ? $ids['contractPersonId'] : 'contractPersonId' );
        $this->ids['contractPersonName'] = (isset($ids['contractPersonName']) ? $ids['contractPersonName'] : 'contractPersonName' );
        $this->ids['contractCourseId'] = (isset($ids['contractCourseId']) ? $ids['contractCourseId'] : 'contractCourseId' );
        $this->ids['contractCourseName'] = (isset($ids['contractCourseName']) ? $ids['contractCourseName'] : 'contractCourseName' );
        $this->ids['contractCourseVersion'] = (isset($ids['contractCourseVersion']) ? $ids['contractCourseVersion'] : 'contractCourseVersion' );
        $this->ids['contractTurnId'] = (isset($ids['contractTurnId']) ? $ids['contractTurnId'] : 'contractTurnId' );
        $this->ids['contractTurnDescription'] = (isset($ids['contractTurnDescription']) ? $ids['contractTurnDescription'] : 'contractTurnDescription' );
        $this->ids['contractUnitId'] = (isset($ids['contractUnitId']) ? $ids['contractUnitId'] : 'contractUnitId' );
        $this->ids['contractUnitDescription'] = (isset($ids['contractUnitDescription']) ? $ids['contractUnitDescription'] : 'contractUnitDescription' );
        $this->ids['contractClassId'] = isset($ids['contractClassId']) ? $ids['contractClassId'] : 'contractClassId';
        $this->ids['contractClassDescription'] = isset($ids['contractClassDescription']) ? $ids['contractClassDescription'] : 'contractClassDescription';

        $this->lookupName = 'Contract';
    }
    
    
    /**
     * Function responsible for set the id.
     *  
     * @param $id (string): id of the component
     *
     * @return No return paramenter
     */
    public function setId($id)
    {
        $this->id = $id;
    }

    /**
     * Function responsible for get the id.
     * 
     * @param No receive paramenter.
     * 
     * @return $this->id (string): Return the id.
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Function responsible for set the filters.
     *  
     * @param $filters (object): filters of the component
     *
     * @return No return paramenter
     */
    public function setFilters($filters)
    {
        $this->filters = $filters;
    }

    /**
     * Function responsible for get the month.
     * 
     * @param No receive paramenter.
     * 
     * @return $this->filters (object): Return the filters.
     */
    public function getFilters()
    {
        return $this->filters;
    }

    /**
     * Function responsible for set is field required.
     *  
     * @param $isRequired (boolean): Is contract required
     *
     * @return No return paramenter
     */
    public function setIsRequired($isRequired)
    {
        $this->isRequired = $isRequired;
    }

    /**
     * Function responsible for get if field required.
     * 
     * @param No receive paramenter.
     * 
     * @return $this->isRequired (boolean): Return is required.
     */
    public function getIsRequired()
    {
        return $this->isRequired;
    }
    
    /**
     * Function responsible for set the show person field.
     *  
     * @param $showPerson (boolean): Show person field
     *
     * @return No return paramenter
     */
    public function setShowPerson($showPerson)
    {
        $this->showPerson = $showPerson;
    }

    /**
     * Function responsible for get the show person field.
     * 
     * @param No receive paramenter.
     * 
     * @return $this->showPerson (string): Return true or false.
     */
    public function getShowPerson()
    {
        return $this->showPerson;
    }

    /**
     * Function responsible for set the show turn field.
     *  
     * @param $showTurn (boolean): Show turn field
     *
     * @return No return paramenter
     */
    public function setShowTurn($showTurn)
    {
        $this->showTurn = $showTurn;
    }

    /**
     * Function responsible for get the show turn field.
     * 
     * @param No receive paramenter.
     * 
     * @return string: Return MTextField or MHiddenField.
     */
    public function getShowTurn()
    {
        return $this->showTurn;
    }

    /**
     * Function responsible for set the show unit field.
     *  
     * @param $showUnit (boolean): Show unit field
     *
     * @return No return paramenter
     */
    public function setShowUnit($showUnit)
    {
        $this->showUnit = $showUnit;
    }

    /**
     * Function responsible for get the show unit field.
     * 
     * @param No receive paramenter.
     * 
     * @return string: Return MTextField or MHiddenField.
     */
    public function getShowUnit()
    {
        return $this->showUnit;
    }

    public function setShowClass($showClass)
    {
        $this->showClass = $showClass;
    }

    public function getShowClass()
    {
        return $this->showClass;
    }

    public function setLookupName($lookupName)
    {
        $this->lookupName = $lookupName;
    }

    public function getLookupName()
    {
        return $this->lookupName;
    }
    
    public function generateInner()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $data = $this->getFilters();
        $showPerson = $this->getShowPerson();
        $showTurn = $this->getShowTurn();
        $showUnit = $this->getShowUnit();
        $isRequired = $this->getIsRequired();
        
        //Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonId = new MLookupTextField($this->ids['contractPersonId'], SAGU::NVL($data->contractPersonId, MIOLO::_REQUEST($this->ids['contractPersonId'])), _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array($this->ids['contractId'], $this->ids['contractPersonId'], $this->ids['contractPersonName'], $this->ids['contractCourseId'], $this->ids['contractCourseName'], $this->ids['contractCourseVersion'], $this->ids['contractTurnId'], $this->ids['contractTurnDescription'], $this->ids['contractUnitId'], $this->ids['contractUnitDescription']), $module, 'PersonContract', null, array('personId' => $this->ids['contractPersonId']), !$this->page->isPostBack());
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator($this->ids['contractPersonId'], '', 'optional');
        $contractPersonName = new MTextField($this->ids['contractPersonName'], $data->contractPersonName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $contractPersonName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(false);

        //Field contract
        $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractId = $this->getLookupContract();
        $contractCourseId = new MTextField($this->ids['contractCourseId'], SAGU::NVL($data->contractCourseId, MIOLO::_REQUEST($this->ids['contractCourseId'])), _M('Curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseId->setReadOnly(true);
        $contractCourseVersion = new MTextField($this->ids['contractCourseVersion'], SAGU::NVL($data->contractCourseVersion, MIOLO::_REQUEST($this->ids['contractCourseVersion'])), _M('Versão', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseName = new MTextField($this->ids['contractCourseName'], SAGU::NVL($data->contractCourseName, MIOLO::_REQUEST($this->ids['contractCourseName'])), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $contractCourseName->setReadOnly(true);
        $hctContract = new MHContainer('hctContractS', array($contractLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(false);

        if ( $isRequired )
        {
            $contractLabel->setClass('m-caption m-caption-required');
        }
        
        if ( $showTurn )
        {
            //Field turn
            $turnLabel = new MText($this->ids['turnLabel'], _M('Turno', $module) . ':');
            $turnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $turnId = new MTextField($this->ids['contractTurnId'], SAGU::NVL($data->contractTurnId, MIOLO::_REQUEST($this->ids['contractTurnId'])), _M('Turno', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $turnId->setJsHint(_M('Código do turno', $module));
            $turnId->setReadOnly(true);
            $turnDescription = new MTextField($this->ids['contractTurnDescription'], SAGU::NVL($data->contractTurnDescription, MIOLO::_REQUEST($this->ids['contractTurnDescription'])), _M('Turno', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $turnDescription->setJsHint(_M('Descrição do turno', $module));
            $turnDescription->setReadOnly(true);
            $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
            $hctTurn->setShowLabel(false);
        }
        else 
        {
            $hctTurn = new MHiddenField($this->ids['contractTurnId'], $data->contractTurnId);
        }

        if ( $showUnit )
        {
            //Field unit
            $unitLabel = new MText('unitLabel', _M('Unidade', $module) . ':');
            $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $unitId = new MTextField($this->ids['contractUnitId'], SAGU::NVL($data->contractUnitId, MIOLO::_REQUEST($this->ids['contractUnitId'])), _M('Unidade', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $unitId->setJsHint(_M('Código da unidade', $module));
            $unitId->setReadOnly(true);
            $unitDescription = new MTextField($this->ids['contractUnitDescription'], SAGU::NVL($data->contractUnitDescription, MIOLO::_REQUEST($this->ids['contractUnitDescription'])), _M('Descrição da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $unitDescription->setJsHint(_M('Descrição da unidade', $module));
            $unitDescription->setReadOnly(true);
            $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
            $hctUnit->setShowLabel(false);
        }
        else
        {
            $hctUnit = new MHiddenField($this->ids['contractUnitId'], $data->contractUnitId);
        }

        // Field pupil class
        if ( $this->getShowClass() )
        {
            $classId = new MTextField($this->ids['contractClassId'], SAGU::NVL($data->contractClassId, MIOLO::_REQUEST($this->ids['contractClassId'])), _M('Turma', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $classId->setJsHint(_M('Código da turma', $module));
            $classId->setReadOnly(true);
            $classLabel = new MText('classLabel', _M('Turma', $module) . ':');
            $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $classDescription = new MTextField($this->ids['contractClassDescription'], SAGU::NVL($data->contractClassDescription, MIOLO::_REQUEST($this->ids['contractClassDescription'])), '', 30);
            $classDescription->setReadOnly(true);
            $classDescription->setJsHint(_M('Nome da turma', $module));
            $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $classDescription));
            $hctClass->setShowLabel(false);
        }
        else
        {
            $hctClass = new MHiddenField($this->ids['contractClassId'], $data->contractClassId);
        }
        
        if ( $showPerson )
        {
            $vctLookupContract = new MVContainer('vctLookupContract', array($hctPerson, $hctContract, $hctTurn, $hctUnit, $hctClass));
        }
        else 
        {
            $vctLookupContract = new MVContainer('vctLookupContract', array($hctContract, $hctTurn, $hctUnit, $hctClass));
        }

        $this->inner = $vctLookupContract->generate();
    }
    
    /**
     *
     * @return MLookupTextField
     */
    public function getLookupContract()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        if ( !$this->lookupContract )
        {
            $data = $this->getFilters();
            $showPerson = $this->getShowPerson();

            if ( $showPerson )
            {
                $returnLookup = array($this->ids['contractPersonId'], $this->ids['contractPersonName'], $this->ids['contractCourseId'], $this->ids['contractCourseName'], $this->ids['contractCourseVersion'], $this->ids['contractTurnId'], $this->ids['contractTurnDescription'], $this->ids['contractUnitId'], $this->ids['contractUnitDescription'], 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', $this->ids['contractClassId'], $this->ids['contractClassDescription']);
                $lookupParameter = array('personId' => $this->ids['contractPersonId']);
            }
            else 
            {
                $returnLookup = array('limbo', 'limbo', $this->ids['contractCourseId'], $this->ids['contractCourseName'], $this->ids['contractCourseVersion'], $this->ids['contractTurnId'], $this->ids['contractTurnDescription'], $this->ids['contractUnitId'], $this->ids['contractUnitDescription'], 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', $this->ids['contractClassId'], $this->ids['contractClassDescription']);
                $lookupParameter = '';
            }

            $contractId = new MLookupTextField($this->ids['contractId'], SAGU::NVL($data->contractId, MIOLO::_REQUEST($this->ids['contractId'])), _M('Contrato', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, $returnLookup, 'academic', $this->lookupName, null, $lookupParameter, true);
            $contractId->setJsHint(_M('Informe o código do contrato', $module));
            
            $this->lookupContract = $contractId;
        }
        
        return $this->lookupContract;
    }
}
?>