<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * BasicEducationScholarshipDescription form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 **/

/**
 * Form to manipulate a scholarshipDescription
 **/
class FrmBasicEducationScholarshipDescription extends SForm
{

    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct( _M('Relatório', $module ), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request( 'function' );

        //Field person
        $contractPersonLabel = new MText( 'contractPersonLabel', _M('Pessoa', $module ) . ':' );
        $contractPersonLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $contractPersonLabel->setClass( 'm-caption m-caption-required' );

        if (strlen( $this->getFormValue( 'contractId' ) ) > 0)
        {
            $contractPersonId = new MLookupTextField( 'contractPersonId', $this->getFormValue( 'contractPersonId', $this->enrollData->contractPersonId ), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array( 'limbo', 'contractPersonId', 'contractPersonName' ), $module, 'PersonContract', null, array( 'personId' => 'contractPersonId' ), true );
            $contractPersonId->setJsHint( _M('Informe o código da pessoa', $module ) );
        }
        else
        {
            $contractPersonId = new MLookupTextField( 'contractPersonId', $this->getFormValue( 'contractPersonId', $this->enrollData->contractPersonId ), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array( 'contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion' ), $module, 'PersonContract', null, array( 'personId' => 'contractPersonId' ), true );
            $contractPersonId->setJsHint( _M('Informe o código da pessoa', $module ) );
        }

        $validators[] = new MRequiredValidator( 'contractPersonId', _M('Pessoa', $module ) );
        $contractPersonName = new MTextField( 'contractPersonName', $this->getFormValue( 'contractPersonName', $this->enrollData->contractPersonName ), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE') );
        $contractPersonName->setReadOnly( true );
        $contractPersonName->setJsHint( _M('Nome da pessoa', $module ) );
        $hctPerson = new MHContainer( 'hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName) );
        $hctPerson->setShowLabel( true );
        $fields[] = $hctPerson;

        //Field contract
        $contractCourseLabel = new MText( 'contractCourseLabel', _M('Contrato', $module ) . ':' );
        $contractCourseLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $contractCourseLabel->setClass( 'm-caption m-caption-required' );
        $contractId = new MLookupTextField( 'contractId', $this->getFormValue( 'contractId' ), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array( 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber' ), $module, 'Contract', null, array( 'personId' => 'contractPersonId' ), true );
        $contractId->setJsHint( _M('Informe o código do contrato', $module ) );
        $validators[] = new MRequiredValidator( 'contractId', _M('Contrato', $module ) );
        $contractCourseId = new MTextField( 'contractCourseId', $this->getFormValue( 'contractCourseId', $data->contractCourseId ), _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE') );
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseId->setReadOnly( true );
        $contractCourseVersion = new MTextField( 'contractCourseVersion', $this->getFormValue( 'contractCourseVersion', $data->contractCourseVersion ), _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE') );
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseVersion->setReadOnly( true );
        $contractCourseName = new MTextField( 'contractCourseName', $this->getFormValue( 'contractCourseName', $data->contractCourseName ), _M('Nome do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE') );
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $contractCourseName->setReadOnly( true );
        $hctContract = new MHContainer( 'hctContract', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractPersonName) );
        $hctContract->setShowLabel( false );
        $fields[] = $hctContract;

        $fields[] = new MSeparator(' ');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Method to get data and generate the report
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data = $this->getTypesData();
        $data->ignoreDebits   = MIOLO::_request('ignoreDebits');

        $business = new BusinessAcademicBusBasicEducationScholarshipDescription();
        $businessCompany = new BusinessBasicBusLegalPerson();

        try
        {
            // First of all, obtain the course referred to pupil
            if ( ! SAGU::checkParameter('BASIC_AND_MIDDLE_LEVEL_FORMATION') )
            {
                throw new Exception( _M('Configurações necessárias de nível de formação não foram encontradas, por favor, verifique os parâmetros básicos do sistema', $module ) );
            }

            if ( ! SAGU::checkParameter('DEFAULT_COMPANY_CONF') )
            {
                throw new Exception( _M('O parâmetro que indica a instituição padrão não está configurada, por favor, verifique esta configuração', $module ) );
            }

            if ( SAGU::checkParameter( 'ENROLL_STATUS_APPR_OR_EXC') && SAGU::checkParameter( 'ENROLL_STATUS_DISAPPROVED' ) && SAGU::checkParameter( 'ENROLL_STATUS_DISAPPROVED_BY_PERIOD' ) && SAGU::checkParameter('ENROLL_STATUS_DISAPPROVED_FOR_LACKS') )
            {
                throw new Exception( _M('Os parâmetro de matrícula não estão configurados apropriadamente, por favor, verifique os parâmetros de matrícula', $module ) );
            }

            // Get the default institution information
            $legalPerson = $businessCompany->getLegalPerson( SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF') );

            if ( ! is_object( $legalPerson ) )
            {
                throw new Exception( _M('A instituição padrão registrada nas configurações não é um código válido', $module ) );
            }

            $contractData = $business->relatedContracts($data->contractId);

            if ( ! is_array( $contractData ) )
            {
                throw new Exception( _M( 'O nível de formação deste contrato não permite a geração do histórico do ensino básico', $module ) );
            }

            $curricularComponentData = $business->checkCurricularComponent($contractData[0][0]);

            if ( ! is_array( $curricularComponentData[0] ) )
            {
                throw new Exception( _M('O contrato não contém um curso com um currículo válido, por favor, verifique o currículo deste curso', $module, $contractData[0][0] ) );
            }

            $maxSemester = $business->checkSemester($contractData[0][0]);

            if ( ! is_array( $maxSemester[0][0] ) )
            {
                throw new Exception( _M('O sistema não encontrou informações de semetre do currículo do curso, por favor, verifique o currículo do curso (@1)', $module, $contractData[0][0] ) );
            }

            $havePermission = false;

            if ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') && (strtoupper(SAGU::getParameter('BASIC', 'WARNING_IF_DEFAULTER')) == 'TRUE') )
            {
                if ( $cd->ignoreDebits != 'yes' )
                {
                    $business = new BusinessFinanceBusGeneralQueries();
                    $businessContract = new BusinessAcademicBusContract();

                    $debt = $business->getDefaulterDebt($data->contractId, false);
                    $debt = strlen($debt) > 0 ? $debt : 0;

                    //Verifica se o aluno possui débitos financeiros
                    if ( $debt > 0 )
                    {
                        $this->AddError( _M('O sistema detectou uma dívida com a instituição. Por favor, verifique com o setor financeiro.', $module));

                        $contract     = $businessContract->getContract($data->contractId);
                        $matricula = new Matricula($data->contractId, Matricula::MATRICULA_NORMAL);
                        $enrollConfig = $matricula->obterConfiguracoes();

                        if ( $MIOLO->checkAccess('FrmBasicEducationScholarshipDescription', A_ADMIN, false, true) || $enrollConfig->blockDebt == DB_FALSE)
                        {
                            $this->addField(new MHiddenField('ignoreDebits','yes'));

                            $this->addError(_M('Se desejar continuar mesmo assim, clique no botão "Imprimir" abaixo.', $module));
                        }
                    }
                    else
                    {
                        $havePermission = true;
                    }
                }
                else
                {
                    $havePermission = true;
                }
            }
            else
            {
                $havePermission = true;
            }

            if ( $havePermission )
            {
                $personData = $business->getPhysicalPersonData($data->contractPersonId);
                $enrollData = $business->getEnrollData($data->contractId);

                $MIOLO->uses('/core/AgataAPI.class');

                $api = new AgataAPI;
                $api->setParameter('$personId', $personData->personId);
                $api->setParameter('$personName', $personData->personName);
                $api->setParameter('$nationality', $personData->nationality);
                $api->setParameter('$stateDescription', $personData->stateDescription);
                $api->setParameter('$dateBirth', $personData->dateBirth);
                $api->setParameter('$series', $enrollData->studyData->series);
                $api->setParameter('$years', $enrollData->studyData->years);
                $api->setParameter('$colleges', $enrollData->studyData->colleges);
                $api->setParameter('$cities', $enrollData->studyData->cities);
                $api->setParameter('$states', $enrollData->studyData->states);
                $api->setParameter('$legalPersonName', $enrollData->legalPerson->name);
                $api->setParameter('$legalPersonFakeName', $enrollData->legalPerson->fakeName);
                $api->setParameter('$legalPersonZipCode', $enrollData->legalPerson->zipCode);
                $api->setParameter('$legalPersonAddress', $enrollData->legalPerson->address);
                $api->setParameter('$legalPersonPhone', $enrollData->legalPerson->phone);
                $api->setParameter('$msg', $enrollData->msg);
                $api->setParameter('$legalPersonState', $enrollData->legalPerson->stateName);
                $api->setDataArray(null);

                $ed[0][1] = $enrollData->ccData;

                foreach ($enrollData->ccTotalHours as $key => $ccTh)
                {
                    $api->setParameter('$tot'.$key, $ccTh);
                }

                $api->setSubDataArray($ed);
                $api->setLanguage($MIOLO->getConf('i18n.language'));
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/basicEducationScolarshipDescription.sxw');

                if ($enrollData->maxSemester == 3)
                {
                    $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/basicEducationScolarshipDescription3years.sxw'));
                }
                elseif ($enrollData->maxSemester == 8)
                {
                    $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/basicEducationScolarshipDescription8years.sxw'));
                }
                else
                {
                    $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/basicEducationScolarshipDescription9years.sxw'));
                }
                if ( $ok )
                {
                    $api->fileDialog();
                }
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Method to get data information when the form is submitted
     **/
    public function getTypesData()
    {
        $data->contractPersonId = $this->contractPersonId->value;
        $data->contractPersonName = $this->contractPersonName->value;
        $data->contractCourseId = $this->contractCourseId->value;
        $data->contractCourseVersion = $this->contractCourseVersion->value;
        $data->contractCourseName = $this->contractCourseName->value;
        $data->contractId = $this->contractId->value;

        return $data;
    }
}
?>
