<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Enroll contract form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/02/2006
 *
 **/

/**
 * Form to manipulate an enroll
 **/
class FrmEnrollAddition extends SForm
{
    public $enrollData;
    
    private $home;
    private $module;
    
    
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $this->module = 'academic';
        parent::__construct(_M('Acréscimo de disciplina', $this->module), null, null);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = $this->module;
        
        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->disableButton('tbBtnSave');
        
        $data = $this->getTypesData();
        
        //Field period
        $business = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $business->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[] = new MRequiredValidator('periodId','', 'required');
        $fields[] = $periodId;
                
        // Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription', 'pupilClassId', 'pupilClassName'), $module, 'ActivePersonContract', null, array('personId' => 'personId'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MRequiredValidator('personId', _M('Pessoa', $module));
        $contractPersonName = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(false);
        $fields[] = $hctPerson;

        // Field contract
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'pupilClassId', 'pupilClassName'), $module, 'ActiveContract', null, array('personId' => 'personId', 'contractId' => 'contractId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato', $module));
        $contractCourseId = new MTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $hctContractCourse = new MHContainer('hctContractCourse', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContractCourse->setShowLabel(false);
        $fields[] = $hctContractCourse;
        
        // Field turn
        $contractTurnLabel = new MText('contractTurnLabel', _M('Turno', $module) . ':');
        $contractTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractTurnId = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractTurnId->setReadOnly(true);
        $contractTurnId->setJsHint(_M('Código do turno', $module));
        $contractTurnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractTurnDescription->setReadOnly(true);
        $contractTurnDescription->setJsHint(_M('Descrição do turno', $module));
        $hctContractTurn = new MHContainer('hctContractTurn', array($contractTurnLabel, $contractTurnId, $contractTurnDescription));
        $hctContractTurn->setShowLabel(false);
        $fields[] = $hctContractTurn;
        
        // Field unit
        $contractUnitLabel = new MText('contractUnitLabel', _M('Unidade', $module) . ':');
        $contractUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractUnitId = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractUnitId->setReadOnly(true);
        $contractUnitId->setJsHint(_M('Código da unidade', $module));
        $contractUnitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractUnitDescription->setReadOnly(true);
        $contractUnitDescription->setJsHint(_M('Descrição da unidade', $module));
        $hctContractUnit = new MHContainer('hctContractUnit', array($contractUnitLabel, $contractUnitId, $contractUnitDescription));
        $hctContractUnit->setShowLabel(false);
        $fields[] = $hctContractUnit;
        
        $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');

        //Field learning period
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), _M('Período letivo', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescription', 'academic', 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'unitId' => 'unitId', 'turnId' => 'turnId'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[]     = new MIntegerValidator('learningPeriodId', _M('Período letivo',$module), 'required');
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(false);
        $fields[]          = $hctLearningPeriod;
        
        $fields[] = new Separator();
        
        //Buttons
        $fields[] = new MButton('btnList', _M('Procurar disciplinas disponíveis', $module));

        $this->addFields($fields);
        $this->setValidators($validators);
        
        parent::defineFields();
    }
    
    public function btnList_click($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data = $this->getTypesData();
        
        try
        {
            $fields = array();
            
            if(SAGU::getParameter('FINANCE', 'PERMITIR_ADITAR_INCENTIVOS') == DB_TRUE)
            {
                $busIncentive = new BusinessFinanceBusIncentive();
                $incentivos = $busIncentive->searchIncentive($data);
                
                foreach($incentivos as $incentivo)
                {
                    if($incentivo[19] == DB_TRUE)
                    {   
                        $msg = _M('Não é possível efetuar ajuste de matrícula, pois o contrato possuí o incentivo aditado.');
                        throw new Exception($msg);
                    }
                }
            }
            
            if ( strlen($data->contractId) < 1 )
            {
                throw new Exception(_M('Um contrato deve ser informado.', $module));
            }    

            if ( strlen($data->learningPeriodId) < 1 )
            {
                throw new Exception(_M('Um período letivo deve ser informado.', $module));
            }    
            
            if ( strlen($data->periodId) < 1 )
            {
                throw new Exception(_M('Um período deve ser informado.', $module));
            }    
            
            $business = new BusinessAcademicBusContract();
            $contract = $business->getContract($data->contractId);

            if ( strlen($contractData->conclusionDate) > 0 )
            {
                throw new Exception(_M('Todas as disciplinas do contrato @1 já foram cursadas.',$module));
            }
            
            $business = new BusinessAcademicBusEnrollAddition();
            $gridData1 = $business->getPersonEnrolls($data->contractId, $data->periodId);
            
            $grid1 = $MIOLO->getUI()->getGrid($module,'GrdEnrolledGroups', null);
            $grid1->setData($gridData1);

            $gridData2 = $business->getEnrollPossibilities($data->contractId, $data->learningPeriodId);
            
            $grid2 = $MIOLO->getUI()->getGrid($module,'GrdEnrollAddition', null);
            $grid2->setData($gridData2->groups);

            $fields[] = new MSeparator();
            $fields[] = new MText('enrolledGroups', '<b>' . _M('Matriculado', $module) . '</b>');
            $fields[] = $grid1;
            $fields[] = new MSeparator();
            $fields[] = new MText('enrollPossibilities', '<b>' . _M('Possibilidades de matrícula', $module) . '</b>');
            $fields[] = $grid2;
            $fields[] = new MSeparator();
                
            if ( count($gridData2->electives) > 0 )
            {
                $busCurriculum = new BusinessAcademicBusCurriculum();
                foreach ($gridData2->electives as $electiveCurriculumId)
                {
                    $electiveFields = array();
                    
                    $curriculumData = $busCurriculum->getCurriculum($electiveCurriculumId);

                    $electiveFields[] = new MHiddenField( 'curricularComponentGroupElectiveId_' . $electiveCurriculumId, $curriculumData->curricularComponentGroupElectiveId );
                        
                    $autoCompleteFields = array('lookGroupId_' . $electiveCurriculumId,
                                                'lookCurricularComponentId_' . $electiveCurriculumId,
                                                'lookCurricularComponentName_' . $electiveCurriculumId,
                                                'lookUnit_' . $electiveCurriculumId,
                                                'lookDay_' . $electiveCurriculumId,
                                                'lookTime_' . $electiveCurriculumId,
                                                'lookProfessor_' . $electiveCurriculumId,
                                                'lookClass_' . $electiveCurriculumId);
                                                    
                    $filterFields = array('curricularComponentGroupElectiveId' => 'curricularComponentGroupElectiveId_' . $electiveCurriculumId, 
                                          'courseId' => 'contractCourseId', 
                                          'courseVersion' => 'contractCourseVersion',
                                          'contractId' => 'contractId',
                                          'learningPeriodId' => 'learningPeriodId');
                                              
                    $fldLookField = new MLookupField('lookField_' . $electiveCurriculumId, $this->getFormValue('lookField_' . $electiveCurriculumId), _M('Código da disciplina oferecida',$module), null, $autoCompleteFields, $module, 'Elective', null, $filterFields );
                    
                    $fldLookGroupId = new MTextField('lookGroupId_' . $electiveCurriculumId, $this->getFormValue('lookGroupId_' . $electiveCurriculumId), _M('Código da disciplina oferecida', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                    $fldLookGroupId->setReadOnly(true);
                        
                    $fldLookCurricularComponentId = new MTextField('lookCurricularComponentId_' . $electiveCurriculumId, $this->getFormValue('lookCurricularComponentId_' . $electiveCurriculumId), _M('Código da disciplina', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                    $fldLookCurricularComponentId->setReadOnly(true);
                        
                    $fldLookCurricularComponentName = new MTextField('lookCurricularComponentName_' . $electiveCurriculumId, $this->getFormValue('lookCurricularComponentName_' . $electiveCurriculumId), _M('Nome da disciplina', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                    $fldLookCurricularComponentName->setReadOnly(true);
                        
                    $fldLookUnit = new MTextField('lookUnit_' . $electiveCurriculumId, $this->getFormValue('lookUnit_' . $electiveCurriculumId), _M('Unidade', $module), 20);
                    $fldLookUnit->setReadOnly(true);
                        
                    $fldLookDay = new MTextField('lookDay_' . $electiveCurriculumId, $this->getFormValue('lookDay_' . $electiveCurriculumId), _M('Dia', $module), 20);
                    $fldLookDay->setReadOnly(true);
                        
                    $fldLookTime = new MTextField('lookTime_' . $electiveCurriculumId, $this->getFormValue('lookTime_' . $electiveCurriculumId), _M('Horário',  $module), 40);
                    $fldLookTime->setReadOnly(true);
                    
                    $fldLookProfessor = new MTextField('lookProfessor_' . $electiveCurriculumId, $this->getFormValue('lookProfessor_' . $electiveCurriculumId), _M('Professor',  $module), 40);
                    $fldLookProfessor->setReadOnly(true);

                    $fldLookClass = new MTextField('lookClass_' . $electiveCurriculumId, $this->getFormValue('lookClass_' . $electiveCurriculumId), _M('Turma',  $module), 40);
                    $fldLookClass->setReadOnly(true);
                    
                    $addButton = new MLinkButton('addButton_' . $electiveCurriculumId, '&nbsp', $MIOLO->getActionURL($module, $action, null, array('electiveCurriculumId' => $electiveCurriculumId, 'event'=>'addNewElective')));
                    $addButton->setText(_M('Adicionar', $module));
                    
                    $cntLine1         = new MHContainer('cntLine1_' . $electiveCurriculumId, array($fldLookField, $fldLookGroupId, $fldLookCurricularComponentId, $fldLookCurricularComponentName));
                    $electiveFields[] = $cntLine1;
                        
                    $cntLine2         = new MHContainer('cntLine2_' . $electiveCurriculumId, array($fldLookUnit, $fldLookDay, $fldLookTime, $fldLookProfessor, $fldLookClass, $addButton));
                    $electiveFields[] = $cntLine2;
                        
                    $bsgElective      = new MBaseGroup('bsgElective_' . $electiveCurriculumId, $curriculumData->curricularComponentName, $electiveFields, 'vertical');
                    $fields[] = $bsgElective;
                }
            }
            
            $this->addFields($fields);
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
    
    public function addNewEnroll()
    {
        $this->addEnroll(MIOLO::_request('groupId'), MIOLO::_request('curriculumId'));
    }
    
    public function addNewElective()
    {
        $curriculumId = MIOLO::_request('electiveCurriculumId');
        $groupId = $this->getFormValue('lookGroupId_' . $curriculumId);
        
        $this->addEnroll($groupId, $curriculumId);
    }
    
    private function addEnroll($groupId, $curriculumId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data = $this->getTypesData();
        
        try
        {
            $busEnrollAddition = new BusinessAcademicBusEnrollAddition();
            $busEnrollAddition->beginTransaction();
            
            $enrollData = $busEnrollAddition->addEnroll($data->contractId, $data->learningPeriodId, $curriculumId, $groupId);
            
            // Caso esteja definido para o semestre ser equivalente a carga horária cursada.
            $acdSemesterContractPeriod = new AcdSemesterContractPeriod(null, $data->contractId, $data->periodId);
            $acdSemesterContractPeriod->atualizaSemestreDoContrato();
            
            $busEnrollAddition->endTransaction();
            
            $opts = array('contractId' => $data->contractId,
                          'periodId' => $data->periodId,
                          'learningPeriodId' => $data->learningPeriodId,
                          'event' => 'btnList_click');
            $url = $MIOLO->getActionURL($module, $action, null, $opts);
            $MIOLO->information(_M('Acréscimo de matrícula efetuado.', $module), $url);
        }
        catch ( Exception $e )
        {
            $busEnrollAddition->undoTransaction();
            $this->addError($e->getMessage());
        }
    }
    
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        // get filters values
        $data = new lookupContract();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->getFormValue($var);
        }
        $data->periodId = $this->getFormValue('periodId');
        $data->learningPeriodId = $this->getFormValue('learningPeriodId');
   
        return $data;
    }
}

?>
