<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Enroll requisition report form
 *
 * @author Andre Chagas Dias [andre@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 05/12/2008
 */

/**
 * Form to manipulate an enroll
 */
class FrmEnrollRequisitionReport extends SForm
{
	public $reportData;
	public $agataParameter;

	/*
	 * Variable instance class that manipulates date.
	 */
	private $krono;

	/**
	 * Class constructor
	 */
	public function __construct()
	{
		$module = MIOLO::getCurrentModule();

		parent::__construct( _M('Requerimento de matrícula', $module), NULL, NULL );

		$this->krono = new MKrono( );
	}

	/**
	 * Default method to define fields
	 */
	public function defineFields()
	{
		$MIOLO  = MIOLO::getInstance();
		$module = MIOLO::getCurrentModule();
		$action = MIOLO::getCurrentAction();

		//Field period
		$businessPeriod = new BusinessAcademicBusPeriod();
		$periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
		$periodId->setJsHint(_M('Selecione um período', $module));
		$fields[] = $periodId;

		//Field contract
		$contractLabel = new MText('contractLabel', _M('Contrato', $module));
		$contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
		$contractLabel->setClass('m-caption m-caption-required');
		$contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $this->reportData->contractId), _M('Contrato',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
		$contractId->setJsHint(_M('Informe o código do contrato', $module));
		$validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');
		$contractPersonId = new MTextField('contractPersonId', $this->getFormValue('contractPersonId', $this->reportData->contractPersonId), _M('Pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
		$contractPersonId->setReadOnly(true);
		$contractPersonId->setJsHint(_M('Código da pessoa', $module));
		$contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $this->reportData->contractPersonName), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
		$contractPersonName->setReadOnly(true);
		$contractPersonName->setJsHint(_M('Nome da pessoa', $module));
		$hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $contractPersonId, $contractPersonName));
		$hctContract->setShowLabel(false);
		$fields[]    = $hctContract;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $fields[] = $courseOccurrenceLookup;

		//Field learning period
		$learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
		$learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
		$learningPeriodLabel->setClass('m-caption m-caption-required');
		$learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $this->enrollData->learningPeriodId), _M('Período letivo', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, courseId, courseVersion, limbo, limbo, learningPeriodDescription, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseName', 'academic', 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId'), true);
		$learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
		$validators[]     = new MRequiredValidator('learningPeriodId', _M('Período letivo', $module));
		$learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $this->reportData->learningPeriodDescription), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
		$learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
		$learningPeriodDescription->setReadOnly(true);
		$hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
		$hctLearningPeriod->setShowLabel(false);
		$fields[] = $hctLearningPeriod;

		//Field emission date
		$emissionDate = new MCalendarField( 'emissionDate', $this->getFormValue( 'emissionDate', date( SAGU::getParameter('BASIC', 'MASK_DATE_PHP') ) ), _M('Data de emissão', $module ), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE') );
		$emissionDate->setJsHint(_M('Informe a data de emissão', $module));
		$validators[] = new MDateDMYValidator( 'emissionDate', '', 'optional' );
		$fields[] = $emissionDate;

		$fields[] = new MSeparator('');

		if ( count($validators) > 0 )
		{
			$this->setValidators($validators);
		}
                
                parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

		$this->toolbar->disableButton(MToolBar::BUTTON_NEW);
		$this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
		$this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
		$this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
                $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
                $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
	}

	/**
	 * Event triggered when user click print
	 */
	public function tbBtnPrint_click($sender = null)
	{
		$MIOLO  = MIOLO::getInstance();
		$module = MIOLO::getCurrentModule();
		$data   = $this->getTypesData();
		$data->ignoreDebits   = MIOLO::_request('ignoreDebits');

                $SReport = new SReport();
                $reportPath = $SReport->findReportFile('academic', 'enrollRequisition_User.jrxml');
                
                if ( !is_null($reportPath) ) // Verifica se existe um relatório em iReport.
                {
                    $this->jasperReportGenerate();
                }
                else
                {
                    $havePermission = false;

                    if ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') && (strtoupper(SAGU::getParameter('BASIC', 'WARNING_IF_DEFAULTER')) == 'TRUE') )
                    {
                            if ( $cd->ignoreDebits != 'yes' )
                            {
                                    $busEnrollConfig   = new BusinessAcademicBusEnrollConfig();
                                    $business = new BusinessFinanceBusGeneralQueries();
                                    $businessContract = new BusinessAcademicBusContract();

                                    $debt = $business->getDefaulterDebt(MIOLO::_request('contractId'), false);
                                    $debt = strlen($debt) > 0 ? $debt : 0;

                                    //Verifica se o aluno possui débitos financeiros
                                    if ( $debt > 0 )
                                    {
                                            $this->addError(_M('O sistema detectou uma dívida com a instituição. Por favor, verifique com o setor financeiro.', $module));

                                            $contract     = $businessContract->getContract(MIOLO::_request('contractId'));
                                            $enrollConfig = $busEnrollConfig->getCourseEnrollConfig($contract->courseId, $contract->courseVersion, $contract->turnId, $contract->unitId);

                                            if ( $MIOLO->checkAccess('FrmEnrollRequisitionReport', A_ADMIN, false, true) || $enrollConfig->blockDebt == DB_FALSE)
                                            {
                                                    $this->addField(new MHiddenField('ignoreDebits','yes'));

                            $this->addError(_M('Se desejar continuar mesmo assim, clique no botão "Imprimir" abaixo.', $module));
                                            }
                                    }
                                    else
                                    {
                                            $havePermission = true;
                                    }
                            }
                            else
                            {
                                    $havePermission = true;
                            }
                    }
                    else
                    {
                            $havePermission = true;
                    }

                    if ( $havePermission )
                    {
                            $MIOLO->uses('/core/AgataAPI.class');
                            $api = new AgataAPI;

                            $business = new BusinessAcademicBusEnrollRequisition();

                            $contractExists = $business->contractExists($data->contractId, $data->contractCourseId[0]);

                            if( count( $contractExists ) > 0 )
                            {
                                    $personData = $business->getPersonData($data->contractId);

                                    $personData[0][5] =  strtoupper(SAGU::getSex(strtolower($personData[0][5])));

                                    // If the student has responsable legal
                                    if( $personData[0][23])
                                    {
                                        $responsableLegalData = $business->getResponsableLegalData($personData[0][23]);
                                        $name = $responsableLegalData[0][0];
                                        $rg = $responsableLegalData[0][1];
                                            $cpf = $responsableLegalData[0][2];
                                            $job = $responsableLegalData[0][3];
                                            $phone = $responsableLegalData[0][4];
                                            $email = $responsableLegalData[0][5];
                                    }
                                    else
                                    {
                                            $name = $personData[0][1];
                                            $rg = $personData[0][24];
                                            $cpf = $personData[0][25];
                                            $job = $personData[0][26];
                                            $phone = $personData[0][13];
                                            $email = $personData[0][27];
                                    }
                                    $personData[0][24] = $name;
                                    $personData[0][25] = $rg;
                                    $personData[0][26] = $cpf;
                                    $personData[0][27] = $job;
                                    $personData[0][28] = $phone;
                                    $personData[0][29] = $email;

                                    $credits = $business->getCreditValueForCourse(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'), $data->contractId, $data->learningPeriodId);
                                    if( is_array($credits) )
                                    {
                                            $personData[0][30] = $credits[0][0];
                                            $personData[0][31] = $credits[0][1];
                                            $personData[0][33] = $credits[0][3];
                                            $personData[0][34] = $credits[0][3];
                                            $personData[0][34] = number_format($personData[0][34], SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') ,  SAGU::getParameter('BASIC', 'REPORT_DECIMAL_SEPARATOR'), SAGU::getParameter('BASIC', 'REPORT_THOUSAND_SEPARATOR'));
                                            $personData[0][35] = $credits[0][4];
                                    }

                                    $company = $business->getCompanyInformation(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

                                    $api->setParameter('$companyName', $company->companyName);
                                    $api->setParameter('$companyAcronym', $company->companyAcronym);
                                    $api->setParameter('$companyCity', $company->cityName);

                                    $emissionDate = strlen($data->emissionDate) > 0 ? $data->emissionDate : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));

                                    $api->setParameter('$emissionDate', SAGU::getDateByExtense($emissionDate));

                                    $api->setLanguage($MIOLO->getConf('i18n.language'));
                                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/enrollRequisition.sxw');

                                    $api->setDataArray($personData);

                                    $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/enrollRequisition.sxw'));

                                    if ( $ok )
                                    {
                                            $api->fileDialog();
                                    }
                            }
                            else
                            {
                                    $this->addError(_M('Para visualizar este relatório você deve selecionar um contrato e seu curso correspondente.', $module));
                            }
                    }
                }
	}
        
        /**
         * Gera o relatório em iReport caso exista.
         */
        public function jasperReportGenerate()
        {
            $data   = $this->getTypesData();
            
            $parameters = array();
            $parameters['contractid']       = (int) $data->contractId;
            $parameters['personid']         = (int) $data->contractPersonId;
            $parameters['learningPeriodId'] = (int) $data->learningPeriodId;
            $parameters['emissionDate']     = (String) $data->emissionDate;

            $report = new SReport();
            $report->setReportName('enrollRequisition');
            $report->setFileType(MIOLO::_REQUEST('reportFormat'));
            $report->setParameters($parameters);
            $report->generate();
        }

	/**
	 * Method to get data information when the form is submitted
	 */
	public function getTypesData()
	{
		$data->contractPersonId      = $this->contractPersonId->value;
		$data->contractPersonName    = $this->contractPersonName->value;
		$data->contractCourseId      = $this->courseId->value;
		$data->contractCourseVersion = $this->courseVersion->value;
		$data->contractCourseName    = $this->courseName->value;
		$data->contractId            = $this->contractId->value;
		$data->learningPeriodId         = $this->learningPeriodId->value;
		$data->emissionDate          = $this->emissionDate->value;

		return $data;
	}
}
?>