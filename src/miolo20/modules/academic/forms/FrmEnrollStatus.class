<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Status da matricula
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 02/04/2012
 */
//$MIOLO->uses('ui/controls/msubdetail.class');
////$MIOLO->uses('ui/controls/msubdetailvalidators.class');

class FrmEnrollStatus extends SManagementForm
{
    public $sub;
    
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/ui/controls/msubdetail.class');
        parent::__construct(new AcdEnrollStatus(), array('statusId'), 'BusEnrollStatus');
        
        // Disable buttons
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }


    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $statusId = MIOLO::_REQUEST('statusId');
            
            $fields[] = new MTextLabel('statusId_', $statusId, _M('Código', $module));
            $fields[] = new MHiddenField('statusId', $statusId);
            
            $business = new BusinessAcademicBusEnrollStatus();
            $data = $business->getEnrollStatus($statusId);
        }

        // Descricao
        $description = new MTextField('_description', $this->getFormValue('_description', $data->description), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setReadOnly(true);
        $fields[] = $description;

        /*
         * Subdetail
         */
        // Abreviatura
        $shortDescription = new MTextField('shortDescription', $this->getFormValue('shortDescription', $data->shortDescription), _M('Abreviatura', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $shortDescription->setJsHint(_M('Informe a abreviatura', $module));
        $subFields[] = $shortDescription;
        $subValidators[] = new MRequiredValidator('shortDescription', _M('Abreviatura', $module));
        
        $subFields[] = new SHiddenField('detailEnrollStatusId');
        
        // Descricao
        $description = new MTextField('description', $this->getFormValue('description', $data->_description), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição', $module));
        $subFields[] = $description;
        $subValidators[] = new MRequiredValidator('description', _M('Descrição', $module));

        //estado padrão
        $isDefaultDetailStatus = new MText('isDefaultDetailStatus', _M('Estado Padrão', $module) . ':');
        $isDefaultDetailStatus->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $optYes = new MRadioButton('defaultstatus', DB_TRUE, null, false);
        $optYes->text = _M('Sim', $module);
        $optNo = new MRadioButton('defaultstatus', DB_FALSE, null, false);
        $optNo->text = _M('Não', $module);
        $default = new MHContainer('defaultStatusCnt', array($isDefaultDetailStatus, $optYes, $optNo));
        
        $subFields[] = $default;

        
        //estado padrão
        $isDefaultExam = new MText('isDefaultExam', _M('Estado referente a exame', $module) . ':');
        $isDefaultExam->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $optYes1 = new MRadioButton('isexam', DB_TRUE, null, false);
        $optYes1->text = _M('Sim', $module);
        $optNo1 = new MRadioButton('isexam', DB_FALSE, null, false);
        $optNo1->text = _M('Não', $module);
        $isexam = new MHContainer('isexamCnt', array($isDefaultExam, $optYes1, $optNo1));
 
        $subFields[] = $isexam;

                
        $cols[] = new MGridColumn('Exame', 'left', true, '', false, 'isexam');
        $cols[] = new MGridColumn('detailEnrollStatusId', 'left', true, '', false, 'detailEnrollStatusId');
        $cols[] = new MGridColumn(_M('Abreviatura', $module), 'left', true, '', true, 'shortDescription');
        $cols[] = new MGridColumn(_M('Descrição', $module), 'left', true, '', true, 'description');
        $cols[] = new MGridColumn(_M('Estado Padrão', $module), 'left', true, '', false, 'defaultstatus');
        $fields[] = $this->sub = new MSubDetail('detailEnrollStatus', _M('Detalhes', $module), $cols, $subFields, true);
        $this->sub->setValidators($subValidators);
        
        if ( $this->isSubDetailEditMode() )
        {
            $this->sub->setData( SAGU::convertSTypeToSubDetail($cols, $data->detailEnrollStatus) );
        }
        $this->sub->addActionEvent('add', 'uniqueDefaultStatus', __CLASS__);
        parent::defineFields($fields, $validators, $data);
    }
    
    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->detailEnrollStatus = SAGU::convertSubDetailToSType('detailEnrollStatus', new AcdDetailedEnrollStatus());
        
        return $data;
    }
    
    public function uniqueDefaultStatus($args)
    {
        $MIOLO = MIOLO::getInstance();
        $data = MSubDetail::getData('detailEnrollStatus');
        
        if( $args->defaultstatus == 't' )
        {
            foreach($data as $status)
            {
                if( $args->defaultstatus == $status->defaultstatus && $args->detailEnrollStatusId != $status->detailEnrollStatusId )
                {
                    $args->defaultstatus = 'f';
                    $alerta = 'Há outro estado detalhada marcado como padrão. Desmarque-o para que este possa ser marcado.';
                }
            }
        }
        
        if( $args->isexam == 't' )
        {
            foreach($data as $status)
            { 
                if( $args->isexam == $status->isexam && $args->detailEnrollStatusId != $status->detailEnrollStatusId )
                {
                    $args->isexam = 'f';
                    $alerta .= '    Há outro estado detalhada marcado como exame. Desmarque-o para que este possa ser marcado';
                }
            }
        }

        if( $alerta )
        {            
            $MIOLO->page->addAJAXJsCode("alert('{$alerta}');");
        }
        
        return $args;
    }
}
?>
