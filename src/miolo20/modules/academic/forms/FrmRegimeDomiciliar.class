<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Bruno E. Fuhr [bruno@solis.com.br]
 *
 * @version $Id$
 *
 * @since
 * Class Created on 05/12/2013
 *
 **/
class FrmRegimeDomiciliar extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcdRegimeDomiciliar(), array('regimeDomiciliarId') );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $busPeriod = new BusinessAcademicBusPeriod();
        
        $function = MIOLO::_REQUEST('function');
        
        if ( $function == 'insert' )
        {
            //Field person
            $personLabel  = new MText('personLabel', _M('Pessoa', $module) . ':');
            $personLabel->setClass('m-caption m-caption-required');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, array('personId' => 'personId'), true);
            $personId->setJsHint(_M('Informe o código da pessoa', $module));
            $validators[] = new MIntegerValidator('personId', _M('Pessoa',$module), 'required');
            $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setJsHint(_M('Nome da pessoa', $module));
            $personName->setReadOnly(true);
            $hctPerson    = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(false);
            $fields[]     = $hctPerson;

            //Field contract
            $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
            $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractLabel->setClass('m-caption m-caption-required');
            $contractId    = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'personId'), true);
            $contractId->setJsHint(_M('Informe o código do contrato', $module));
            $validators[]  = new MRequiredValidator('contractId', _M('Contrato',$module), 'required');
            $courseId      = new MTextField('courseId', $this->getFormValue('courseId',$this->courseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseId->setReadOnly(true);
            $courseId->setJsHint(_M('Código do curso',$module));
            $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$this->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseVersion->setReadOnly(true);
            $courseVersion->setJsHint(_M('Versão do curso', $module));
            $courseName    = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Nome do curso', $module));
            $hctContract   = new MHContainer('hctContract', array($contractLabel, $contractId, $courseId, $courseVersion, $courseName));
            $hctContract->setShowLabel(true);
            $fields[]      = $hctContract;

            $fields[] = new MSelection('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período'), $busPeriod->listPeriod());
            $validators[] = new MRequiredValidator('periodId');

            $ajaxAction = SForm::getAjaxAction('FrmRegimeDomiciliar::btnFiltrar_click', 'divDados', false);
            $fields[] = new MButton('btnFiltrar', _M('Filtrar disciplinas'), $ajaxAction);
            $fields[] = new MDiv('divDados');
            
            $fields[] = new MLabel(_M('Período do regime domiciliar'));
            $fields[] = new MCalendarField('dataInicial', $_GET['dataInicial'], _M('Data inicial'));
            $fields[] = new MCalendarField('dataFinal', $_GET['dataFinal'], _M('Data final'));
            $fields[] = new MDiv('spacer3');

            $fields[] = new MMultiLineField('justificativa', $_GET['justificativa'], _M('Justificativa'), 50, 5, 40);
            $fields[] = new MDiv('spacer4');
        }
        else
        {
            $regimeDomiciliarId = MIOLO::_REQUEST('regimedomiciliarid');
            
            if ( $regimeDomiciliarId )
            {
                $acdRegimentoDomiciliar = new AcdRegimeDomiciliar();
                $acdRegimentoDomiciliar->regimeDomiciliarId = $regimeDomiciliarId;
                $regimeDomiciliar = $acdRegimentoDomiciliar->findOne();
                
                $busEnroll = new BusinessAcademicBusEnroll();
                $busGroup = new BusinessAcademicBusGroup();
                $busContract = new BusinessAcademicBusContract();
                $busPerson = new BusinessBasicBusPerson();
                
                $enroll = $busEnroll->getEnroll($regimeDomiciliar->enrollId);
                $contract = $busContract->getContract($enroll->contractId);
                $person = $busPerson->getPerson($contract->personId);
                $group = $busGroup->getGroup($enroll->groupId);
                
                $fields[] = new MHiddenField('regimedomiciliarid', $regimeDomiciliarId);
                $fields[] = new MLabel('Contrato: <b>' . $contract->contractId . ' - ' . $person->name . '</b>');
                $fields[] = new MLabel('Disciplina em regime domiciliar: <b>' . $group->curriculumCurricularComponentName . '</b>');
                
                $fields[] = new MCalendarField('dataInicial', $regimeDomiciliar->dataInicial, _M('Data inicial'));
                $fields[] = new MCalendarField('dataFinal', $regimeDomiciliar->dataFinal, _M('Data final'));
                $fields[] = new MMultiLineField('justificativa', $regimeDomiciliar->justificativa, _M('Justificativa'), 50, 5, 40);
            }
        }
        
        $validators[] = new MDATEDMYValidator('dataInicial');
        $validators[] = new MDATEDMYValidator('dataFinal');
        
        $this->SetValidators($validators);
        parent::defineFields($fields);
    }
    
    public function btnFiltrar_click($args)
    {
        $busEnroll = new BusinessAcademicBusEnroll();
        $busGroup = new BusinessAcademicBusGroup();
        
        $filters = new stdClass();
        $filters->contractId = $args->contractId;
        $filters->statusId = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED');
        
        $disciplinas = $busEnroll->searchEnroll($filters);
        
        $arrayDisciplinas = array();
        foreach ( $disciplinas as $key => $disciplina )
        {
            $enrollId = $disciplina[0];
            $group = $busGroup->getGroup($disciplina[2]);
            $nomeDisciplina = $group->curriculumCurricularComponentName;
            
            $chkBox = new MCheckBox("disciplinasDoPeriodo[$enrollId]", 't');
            $arrayDisciplinas[$key][] = $chkBox;
            $arrayDisciplinas[$key][] = $nomeDisciplina;
        }
        
        $fields[] = new MDiv('spacer1');
        $fields[] = new MTableRaw(NULL, $arrayDisciplinas, array('', _M('Disciplinas do período')));
        $fields[] = new MDiv('spacer2');
        
        return SAGU::alignFields($fields);
    }
    
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();        
        
        $data = $_REQUEST;
        
        $goTo = $MIOLO->GetActionURL($module, 'main:register:regimedomiciliar', NULL, array(
            'function' => 'insert', 
            'event' => 'tbBtnNew:click', 
            'personId' => $data['personId'], 
            'contractId' => $data['contractId'], 
            'periodId' => $data['periodId'],
            'dataInicial' => $data['dataInicial'],
            'dataFinal' => $data['dataFinal'],
            'justificativa' => $data['justificativa'])
        );
        
        if ( MIOLO::_REQUEST('function') == 'insert' )
        {
            if ( count($data['disciplinasDoPeriodo']) > 0 )
            {
                if ( strlen($data['dataInicial']) > 0 && strlen($data['dataFinal']) > 0 )
                {
                    foreach ( $data['disciplinasDoPeriodo'] as $key => $disciplinaDoPeriodo )
                    {
                        $acdRegimeDomiciliar = new AcdRegimeDomiciliar();
                        $acdRegimeDomiciliar->enrollId = $key;
                        $acdRegimeDomiciliar->dataInicial = $data['dataInicial'];
                        $acdRegimeDomiciliar->dataFinal = $data['dataFinal'];
                        $acdRegimeDomiciliar->justificativa = $data['justificativa'];                    

                        $ok = $acdRegimeDomiciliar->save();
                    }

                    $this->confirmInsertUpdate($ok);
                }
                else
                {
                    if ( strlen($data['dataInicial']) == 0 )
                    {
                        $MIOLO->information(_M('Preencha o campo \'Data inicial\'.'), $goTo);
                    }
                    elseif ( strlen($data['dataFinal']) == 0 )
                    {
                        $MIOLO->information(_M('Preencha o campo \'Data final\'.'), $goTo);
                    }
                }
            }
            else
            {
                $MIOLO->information(_M('Nenhuma disciplina foi selecionada.'), $goTo);
            }
        }
        else
        {
            $acdRegimeDomiciliar = new AcdRegimeDomiciliar();
            $acdRegimeDomiciliar->regimeDomiciliarId = $data['regimedomiciliarid'];
            $acdRegimeDomiciliar->dataInicial = $data['dataInicial'];
            $acdRegimeDomiciliar->dataFinal = $data['dataFinal'];
            $acdRegimeDomiciliar->justificativa = $data['justificativa'];                    

            $ok = $acdRegimeDomiciliar->save();
            $this->confirmInsertUpdate($ok);
        }
    }
}

?>
