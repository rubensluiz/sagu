<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Generic document frm
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 30/03/2010
 */

/**
 * Form to manipulate a contract document
 */
class FrmGenericDocument extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct( _M('Documento genérico', $module), NULL, NULL );
        set_time_limit(0);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');
        
        $fields[] = new MHiddenField('limbo', '');

        //Field contract
        $contractId = new MHiddenField('contractId', $this->contractId->value);
        $fields2[] = $contractId;

        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), _M('Código da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array( 'contractId', 'personId', 'personName' ), 'academic', 'PersonContract', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[] = $hctPerson;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $fields[] = $courseOccurrenceLookup;

        //Field class
        $classLabel = new MText('classLabel', _M('Turma',$module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'className_, null, contractCourseId, contractCourseVersion, contractCourseName', $module, 'Class', null, null, true);
        $classId->setJsHint(_M('Informe o código da turma',$module));
        $className_ = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className_->setReadOnly(true);
        $className_->setJsHint(_M('Nome da turma',$module));
        $hctClass     = new MHContainer('hctClass', array($classLabel, $classId, $className_));
        $hctClass->setShowLabel(true);
        $fields[]     = $hctClass;

        //Field rad option file
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), DB_TRUE);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), DB_FALSE);
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo', $module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array( $radFileTypeLabel, $radFileType ));
        $hctFileType->setShowLabel(false);
        $fields[] = $hctFileType;

        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     */
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filter = $this->getTypesData();

        set_time_limit(0);

        try
        {
            if ( (strlen($filter->personId) == 0) && (strlen($filter->courseId) == 0) && ((strlen($filter->classId) == 0)) )
            {
                throw new Exception(_M('A pesquisa não retornou nenhum dado. Certifique-se de que os filtros tenham sido definidos corretamente', $module));
            }
            else
            {
                $businessGenericDocument = new BusinessAcademicBusGenericDocument();
                $data = $businessGenericDocument->getGenericDocument($filter);

                if ( count($data[0]) == 0 )
                {
                    throw new Exception(_M('Dados inexistentes para as informações fornecidas.', $module) . ' ' . _M('Verifique os dados do formulário e o cadastro da pessoa.', $module));
                }
                else
                {
                    $businessCompany = new BusinessBasicBusCompany();
                    $company = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

                    $businessLegalPerson = new BusinessBasicBusLegalPerson();
                    $legalPerson = $businessLegalPerson->getLegalPerson($company->personId);

                    $businessCity = new BusinessBasicBusCity();
                    $city = $businessCity->getCity($legalPerson->cityId);

                    $MIOLO->uses('/core/AgataAPI.class');

                    $api = new AgataAPI();

                    $api->setParameter('$companyId', $company->companyId);
                    $api->setParameter('$companyName', $company->name);
                    $api->setParameter('$cnpj', $legalPerson->cnpj);
                    $api->setParameter('$fakeName', $legalPerson->fakeName);
                    $api->setParameter('$companyCity', $city->name);
                    $api->setParameter('$companyStateId', $city->stateId);
                    $api->setParameter('$companyLocation', $legalPerson->location);
                    $api->setParameter('$companyNumber', $legalPerson->number);
                    $api->setParameter('$acronym', $company->acronym);
                    $api->setParameter('$emissionDate', date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')));
                    $api->setLanguage($MIOLO->getConf('i18n.language'));
                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/genericDocument.sxw');
                    $api->setDataArray(null);
                    $array[0][1] = $data;
                    $api->setSubDataArray($array);

                    if ( !$api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/genericDocument.sxw')) )
                    {
                        throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                    }

                    if ( $filter->fileType == 'pdf' )
                    {
                        $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/genericDocument.pdf');

                        if ( ! $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/genericDocument.sxw') )
                        {
                            throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                        }
                    }

                    $api->fileDialog();
                }
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data->personId = $this->getFormValue('personId');
        $data->courseId = $this->getFormValue('courseId');
        $data->courseVersion  = $this->getFormValue('courseVersion');
        $data->turnId = $this->getFormValue('turnId');
        $data->unitId = $this->getFormValue('unitId');
        $data->classId = $this->getFormValue('classId');
        $data->fileType = $this->getFormValue('radFileType');

        return $data;
    }
}
?>