<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Possibilities and material of enroll form
 *
 * @author Rafael Luís Spengler  [rafael@solis.coop.br]
 *         Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 10/01/2006
 *
 **/

/**
 * Form to manipulate inscription reports
 **/
class FrmPossibilitiesAndMaterialOfEnroll extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        parent::__construct( _M('Material de matrícula do aluno', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        
        //Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId'), _M('Pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'limbo', 'unitId'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName'), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $contractPersonName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;

        //Field is listener
        $isListener = new MHiddenField('isListener', $this->getFormValue('isListener'));
        $fields[]    = $isListener;
        
        //Field contract
        $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), _M('Contrato',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'isListener'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $courseId    = new MTextField('courseId', $this->getFormValue('courseId'), _M('Curso',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseId->setJsHint(_M('Código do curso', $module));
        $courseId->setReadOnly(true);
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion'), _M('Versão do curso',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setJsHint(_M('Versão do curso', $module));
        $courseVersion->setReadOnly(true);
        $courseName = new MTextField('courseName', $this->getFormValue('courseName'), _M('Nome do curso',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setJsHint(_M('Nome do curso', $module));
        $courseName->setReadOnly(true);
        $hctCourse = new MHContainer('hctCourse', array($contractLabel, $contractId, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(false);
        $fields[]   = $hctCourse;

        //Field turn
        $turnLabel = new MText('turnLabel', _M('Turno', $module) . ':');
        $turnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $turnId = new MTextField('turnId', $this->getFormValue('turnId'), _M('Turno', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $turnId->setJsHint(_M('Código do turno', $module));
        $turnId->setReadOnly(true);
        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription'), _M('Descrição do turno', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $turnDescription->setJsHint(_M('Descrição do turno', $module));
        $turnDescription->setReadOnly(true);
        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(false);
        $fields[] = $hctTurn;  
        
        //Field unit
        $unitLabel = new MText('unitLabel', _M('Unidade', $module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitId = new MTextField('unitId', $this->getFormValue('unitId'), _M('Unidade', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitId->setJsHint(_M('Código da unidade', $module));
        $unitId->setReadOnly(true);
        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription'), _M('Descrição da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $unitDescription->setJsHint(_M('Descrição do turno', $module));
        $unitDescription->setReadOnly(true);
        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(false);
        $fields[] = $hctUnit;          

        //Field learning period
        $learningPeriodIdLabel = new MText('learningPeriodIdLabel', _M('Período letivo', $module) . ':');
        $learningPeriodIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodIdLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId'), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, courseId, courseVersion, turnId, unitId, learningPeriodName, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseName', $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo',$module));
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Período letivo', $module), 'required');
        $learningPeriodName = new MTextField('learningPeriodName', $this->getFormValue('learningPeriodName'), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodName->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodName->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodIdLabel, $learningPeriodId, $learningPeriodName));
        $hctLearningPeriod->setShowLabel(false);
        $fields[]           = $hctLearningPeriod;

        $options = array( 
                          array(_M('Matriculado', $module),    'E'),
                          array(_M('Outro', $module),       'O'),
                          array(_M('Calouro', $module),    'F'),
                          array(_M('Indiferente', $module), 'I')
                        );

        $pupilSituationLabel = new MText('pupilSituationLabel', _M('Situação do aluno', $module) . ':');
        $pupilSituationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $pupilSituation = new MRadioButtonGroup('pupilSituation', '', $options, $this->getFormValue('pupilSituation', 'I'), '', 'vertical');
        $pupilSituation->setShowLabel(false);
        $hctOptions = new MHContainer('hctOptions', array($pupilSituationLabel, $pupilSituation));
        $hctOptions->setShowLabel(false);
        $fields[] = $hctOptions;
       
        //Field emission date
        $emissionLabel = new MText('emissionLabel', _M('Data de emissão', $module) . ':');
        $emissionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emissionDate = new MCalendarField('emissionDate', strlen($this->getFormValue('emissionDate'))>0 ? $this->getFormValue('emissionDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão', $module));
        $validators[] = new DateDMYValidator('emissionDate', null, 'required');
        $emissionTime = new MTextField('emissionTime', strlen($this->getFormValue('emissionTime'))>0 ? $this->getFormValue('emissionTime') : date(SAGU::getParameter('BASIC', 'MASK_TIME_PHP')), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $emissionTime->setJsHint('Enter the emission time', $module);
        $hctDateTime = new MHContainer('hctDateTime', array($emissionLabel, $emissionDate, $emissionTime));
        $hctDateTime->setShowLabel(true);
        $fields[]     = $hctDateTime;
        
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user click in the button 'print'
     **/
    public function tbBtnPrint_click ($sender=NULL)
    {
        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();

        $data = $this->getTypesData();
        $rptData = array (
                           $data->contractId,
                           $data->courseId,
                           $data->courseVersion,
                           $data->turnId,
                           $data->unitId,
                           $data->contractPersonId,
                           $data->learningPeriodId,
                           $data->pupilSituation,
                           $data->isListener,
                           $data->emissionDate,
                           $data->emissionTime,
                           $data->periodId
                         );

        if ( (strlen($data->contractId) == 0) && ((strlen($data->courseId) == 0) || (strlen($data->courseVersion) == 0)) )
        {
            $this->addError(_M('Você deve informar ou um curso ou um contrato para gerar para apenas um aluno ou para todo o curso, respectivamente.', $module));
        }
        elseif ( strlen($data->contractId) > 0 )
        {
            $MIOLO->getClass($module, 'RptEnrollMaterial');
            $report = new RptEnrollMaterial($rptData);
        }
        else
        {
            $MIOLO->getClass($module, 'RptAllEnrollMaterial');
            $report = new RptAllEnrollMaterial($rptData);
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->contractId       = $this->getFormValue('contractId', $this->contractId->value);
        $data->courseId         = $this->getFormValue('courseId', $this->courseId->value);
        $data->courseVersion    = $this->getFormValue('courseVersion', $this->courseVersion->value);
        $data->turnId           = $this->getFormValue('turnId', $this->turnId->value);
        $data->unitId           = $this->getFormValue('unitId', $this->unitId->value);
        $data->contractPersonId = $this->getFormValue('contractPersonId', $this->contractPersonId->value);
        $data->learningPeriodId = $this->getFormValue('learningPeriodId', $this->learningPeriodId->value);
        $data->pupilSituation   = $this->getFormValue('pupilSituation', $this->pupilSituation->value);
        if ( $data->pupilSituation == 'I' )
        {
            $data->pupilSituaion = null;
        }
        $data->isListener       = $this->getFormValue('isListener', $this->isListener->value);
        $data->emissionDate     = $this->getFormValue('emissionDate', $this->emissionDate->value);
        $data->emissionTime     = $this->getFormValue('emissionTime', $this->emissionTime->value);
        $data->periodId         = $this->getFormValue('periodId', $this->periodId->value);

        return $data;
    }
}

?>
