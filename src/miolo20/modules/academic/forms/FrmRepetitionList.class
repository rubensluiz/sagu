<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Repetition listing form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 14/09/2006
 *
 **/

/**
 * Form for the repetition listing
 **/
class FrmRepetitionList extends SForm
{
    private $home;
    public $filters;
    /**
     * Class constructor
     **/
    public function __construct($data)
    {

        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Listagem de repetência', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusFormationLevel();
        $formationLevelId = new MComboBox('formationLevelId', $this->getFormValue('formationLevelId',$data->formationLevelId), _M('Grau de formação',$module), $business->listFormationLevel());
        $fields[] = $formationLevelId;

        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod() );
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]         = $periodId;
        
        unset($opts);
        $opts = array( array(_M('Aluno', $module), 1),
                       array(_M('Curso e disciplina', $module), 2) );

        $orderByLabel = new MText('orderByLabel', _M('Ordenar por',$module) . ':');
        $orderByLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $orderByLabel->setClass('m-caption m-caption-required');
        
        $marked  = $this->getFormValue('orderBy', $data->orderBy) ? $this->getFormValue('orderBy', $data->orderBy) : 1;
        $orderBy = new MRadioButtonGroup('orderBy', '', $opts, $marked, '', 'vertical', '');
        $orderBy->setShowLabel(false);

        $hctOrderBy = new MHContainer('hctOrderBy', array($orderByLabel, $orderBy));
        $hctOrderBy->setShowLabel(false);
        $fields[]    = $hctOrderBy;

        $btn1     = new MButton('btnList', _M('Lista', $module));
        $fields[] = $btn1;
        
        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        
        $this->filters->formationLevelId = $this->formationLevelId->value;
        $this->filters->periodId         = $this->periodId->value;

    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnList_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusRepetitionList();

        $data = $this->getData();

        $listData = $business->getRepetitionList($data->periodId, $data->formationLevelId, $data->orderBy);

        if ( count($listData) > 0 )
        {
            if ( $data->orderBy == 1 )
            {    
                //Laço para obter os dados necessários a listagem de tipo 1 (Ordenada por aluno)
                foreach ( $listData as $row )
                {
                    list ( $contractId,
                           $personId,
                           $personName,
                           $curricularComponentId,
                           $curricularComponentVersion,
                           $curricularComponentName,
                           $academicCredits,
                           $periodId,
                           $finalNote ) = $row;

                    $curricularComponent = $curricularComponentId . '(' . $curricularComponentVersion . ')';
                    $rowData = array($curricularComponent, $curricularComponentName, $academicCredits, $periodId, $finalNote); 

                    $tableData[$personId]->desc   = $personId . ' - ' . $personName;
                    $tableData[$personId]->data[] = $rowData;
                }

                $columns[] = "<div style=\"text-align: center;\">" . _M('Código', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Disciplina', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Créditos', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Período', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Nota final', $module) . "</div>";

                if ( count($tableData) > 0 )
                {
                    //Laço para criar as tabelas
                    foreach ( $tableData as $tableRow )
                    {
                        $tableRaw = new MTableRaw($tableRow->desc, $tableRow->data, $columns);
                        $tableRaw->setAlternate(true);
                        $tableRaw->addStyle('width', '100%');
                        $tableRaw->setCellAttribute(0, 0, 'width', '10%');
                        $tableRaw->setCellAttribute(0, 1, 'width', '60%');
                        $tableRaw->setCellAttribute(0, 2, 'width', '10%');
                        $tableRaw->setCellAttribute(0, 3, 'width', '10%');
                        $tableRaw->setCellAttribute(0, 4, 'width', '10%');
                        $this->addField($tableRaw);
                    }
                }
            }
            elseif ( $data->orderBy == 2 )
            {
                //Laço para obter os dados necessários a listagem de tipo 2 (ordenada por curso e disciplina)
                foreach ( $listData as $row )
                {
                    list ( $courseId,
                            $courseVersion,
                            $courseShortName,
                            $turnId,
                            $turnDesc,
                            $unitId,
                            $unitDesc,
                            $contractId,
                            $personId,
                            $personName,
                            $curricularComponentId,
                            $curricularComponentVersion,
                            $curricularComponentName,
                            $academicCredits,
                            $periodId,
                            $finalNote ) = $row;
                            
                    $course = $courseId . '(' . $courseVersion . ') - ' . $courseShortName . ' - ' . $turnDesc . ' - ' . $unitDesc;
                    $curricularComponent = $curricularComponentId . '(' . $curricularComponentVersion . ') - ' . $curricularComponentName;
                    $rowData = array($personId, $personName, $periodId, $finalNote);
                    
                    $courseIndex   = $courseId . '-' . $courseVersion . '-' . $turnId . '-' . $unitId;
                    $currCompIndex = $curricularComponentId . '-' . $curricularComponentVersion;
                    
                    $tableData[$courseIndex]->desc                         = $course;
                    $tableData[$courseIndex]->data[$currCompIndex]->desc   = $curricularComponent;
                    $tableData[$courseIndex]->data[$currCompIndex]->data[] = $rowData;
                }
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Código', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Nome', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Período', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Nota final', $module) . "</div>";
                
                if ( count($tableData) > 0 )
                {
                    //Laço para separar por curso
                    foreach ( $tableData as $courseIndex => $tableRow )
                    {
                        $text = new MText($courseIndex, '<b>' . $tableRow->desc . '</b>', 'red');
                        $this->addField($text);
                        $this->addField(new MSeparator(''));
                        
                        //Laço para criar as tabelas para cada disciplina
                        foreach ( $tableRow->data as $tData )
                        {
                            $tableRaw = new MTableRaw($tData->desc, $tData->data, $columns);
                            $tableRaw->setAlternate(true);
                            $tableRaw->addStyle('width', '100%');
                            $tableRaw->setCellAttribute(0, 0, 'width', '10%');
                            $tableRaw->setCellAttribute(0, 1, 'width', '70%');
                            $tableRaw->setCellAttribute(0, 2, 'width', '10%');
                            $tableRaw->setCellAttribute(0, 3, 'width', '10%');
                            $this->addField($tableRaw);
                        }
                        $this->addField(new MSeparator('<hr>'));
                    }
                }
            }
        }
        else
        {
            $this->AddError(_M('Dados não encontrados', $module));
        }
    }
}

?>
