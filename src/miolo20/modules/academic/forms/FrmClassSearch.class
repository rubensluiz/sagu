<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdClass table
 *
 * @author Flaudizio B. S. Filho [flaudizio@yahoo.com.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 19/12/206
 *
 **/

set_time_limit(60);
class FrmClassSearch extends SSearchForm
{
    public function __construct($data)
    {
        parent::__construct(null, new AcdClass(), array('classId'), 'BusClass');
    }

    
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $limboS = new MHiddenField('limboS', '');
        $fields[] = $limboS;

        //Field class code
        $classLabelS = new MText('classLabelS', _M('Código', $module) . ':');
        $classLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classIdS = new MTextField('classIdS', $this->classIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $classIdS->setJsHint(_M('Informe o código da turma',$module));
        $hctClassIdS = new MHContainer('hctClassIdS', array($classLabelS, $classIdS));
        $fields[]    = $hctClassIdS;

        //Field class name
        $classLabelNameS = new MText('classLabelNameS', _M('Nome da turma', $module) . ':');
        $classLabelNameS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $className_S = new MTextField('className_S', $this->className_S->value,'', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className_S->setJsHint(_M('Informe o nome da turma',$module));
        $hctClassNameS = new MHContainer('hctClassNameS', array($classLabelNameS, $className_S));
        $fields[]      = $hctClassNameS;

        //Field vacant
        $classLabelVacantS = new MText('classLabelVacantS', _M('Vagas', $module) . ':');
        $classLabelVacantS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $vacantS = new MTextField('vacantS', $this->vacantS->value,'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $vacantS->setJsHint(_M('Informe o número de vagas',$module));
        $hctClassVacantS = new MHContainer('hctClassVacantS', array($classLabelVacantS, $vacantS));
        $fields[]        = $hctClassVacantS;

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodIdS      = new MComboBox('periodIdS', $this->getFormValue('periodIdS', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID')), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodIdS->setJsHint(_M('Selecione um período', $module));
        $fields[]       = $periodIdS;

        //Field course
        $courseLabelS   = new MText('courseLabelS', _M('Curso', $module) . ':');
        $courseLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseIdS     = new MLookupTextField('courseIdS', $this->getFormValue('courseIdS', $data->courseIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseVersionS, courseNameS', $module, 'CourseVersion', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $courseIdS->setJsHint(_M('Informe o código do curso',$module));
        $courseNameS    = new MTextField('courseNameS', $this->getFormValue('courseNameS', $data->courseNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseNameS->setReadOnly(true);
        $courseNameS->setJsHint(_M('Nome do curso',$module));
        $courseVersionS = new MTextField('courseVersionS', $this->getFormValue('courseVersionS', $data->courseVersionS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersionS->setReadOnly(true);
        $courseVersionS->setJsHint(_M('Versão do curso',$module));
        $hctCourseS     = new MHContainer('hctCourseS', array($courseLabelS, $courseIdS, $courseVersionS, $courseNameS));
        $hctCourseS->setShowLabel(true);
        $fields[]      = $hctCourseS;

        $lookupFilters = array('periodId' => 'periodIdS', 'courseId' => 'courseIdS', 'courseVersion' => 'courseVersionS');

        //Field initial period
        $initialLearningPeriodLabelS = new MText('initialLearningPeriodLabelS', _M('Período letivo inicial',$module).':');
        $initialLearningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $initialLearningPeriodIdS = new MLookupTextField('initialLearningPeriodIdS', $this->getFormValue('initialLearningPeriodIdS', $data->initialLearningPeriodIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limboS,courseIdS,courseVersionS,limboS,limboS,initialLearningPeriodDescriptionS,limboS,limboS,limboS,limboS,limboS,limboS,limboS,limboS,limboS,courseNameS', $module, 'LearningPeriod', null, $lookupFilters, true);
        $initialLearningPeriodIdS->setJsHint(_M('Informe o período letivo inicial',$module));
        $validators[] = new MIntegerValidator('initialLearningPeriodIdS', _M('Período letivo inicial',$module));
        $initialLearningPeriodDescriptionS = new MTextField('initialLearningPeriodDescriptionS', $this->getFormValue('initialLearningPeriodDescriptionS', $data->learningPeriodDescriptionS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $initialLearningPeriodDescriptionS->setJsHint(_M('Descrição do período letivo inicial',$module));
        $initialLearningPeriodDescriptionS->setReadOnly(true);
        $hctInitialLearningPeriodS = new MHContainer('hctInitialLearningPeriodS', array($initialLearningPeriodLabelS, $initialLearningPeriodIdS, $initialLearningPeriodDescriptionS));
        $hctInitialLearningPeriodS->setShowLabel(true);
        $fields[]  = $hctInitialLearningPeriodS;

        parent::defineFields($fields, $module, 'GrdClassSearch', $validators);
    }
}
?>
