<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Complementary Activities form
 *
 * @author Helio H R Guimaraes [helio@solis.coop.br]
 *         Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 05/12/2005
 *
 **/

/**
 * Form to generate multiple complementary activities
 **/
class FrmGenerateMultipleComplementaryActivities extends SForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            $title = _M('Inserir', $module);
        }
        else
        {
            $title = _M('Atualizar', $module);
        }
        
        parent::__construct( $title, NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $courseId       = $MIOLO->_request('courseId');
        $courseVersion  = $MIOLO->_request('courseVersion');
        $turnId         = $MIOLO->_request('turnId');
        $unitId         = $MIOLO->_request('unitId');
        $groupId        = $MIOLO->_request('groupId');
        $groupName      = $MIOLO->_request('groupGroupName');

        $businessCourse = new BusinessAcademicBusCourse();
        $businessGroup  = new BusinessAcademicBusGroup();
        $businessCurricularComponent = new BusinessAcademicBusCurricularComponent();
        $businessTurn   = new BusinessBasicBusTurn();
        $businessUnit   = new BusinessBasicBusUnit();

        $courseData     = $businessCourse->getCourse($courseId);
        $turnData       = $businessTurn->getTurn($turnId);
        $unitData       = $businessUnit->getUnit($unitId);

        $fields[]  = new MTextLabel('lbcourseId', $courseId . ' - ' . $courseData->shortName, _M('Curso', $module));
        $fields[]  = new MTextLabel('lbcourseVersion', $courseVersion, _M('Versão do curso', $module));
        $fields[]  = new MTextLabel('lbturnId', $turnId . ' - ' . $turnData->description, _M('Turno', $module));
        $fields[]  = new MTextLabel('lbunitId', $unitId . ' - ' . $unitData->description, _M('Unidade', $module));
        $fields[]  = new MTextLabel('lbofferId', $groupId . ' - ' . $groupName, _M('Disciplina oferecida',$module));

        $fields[]  = new MHiddenField('courseId', $courseId);
        $fields[]  = new MHiddenField('courseVersion', $courseVersion);
        $fields[]  = new MHiddenField('turnId', $turnId);
        $fields[]  = new MHiddenField('unitId', $unitId);
        $fields[]  = new MHiddenField('groupId', $groupId);
        $fields[]  = new MHiddenField('groupName', $groupName);

        $groupData = $businessGroup->getGroup($groupId);

        if ( is_object($groupData) )
        {
            $curricularComponentData         = $businessCurricularComponent->getCurricularComponent($groupData->curriculumCurricularComponentId, $groupData->curriculumCurricularComponentVersion);

            $numberCreditsPerHour = SAGU::calcNumber($curricularComponentData->academicCredits . '* 1.00' .  '/' . $curricularComponentData->academicNumberHours); // Use in javaScript
        }

        $academicNumberHours = new MHiddenField('academicNumberHours', $curricularComponentData->academicNumberHours);
        $fields[] = $academicNumberHours;

        $curriculumCurricularComponent = new MHiddenField('curriculumCurricularComponent', $groupData->curriculumCurricularComponentId);
        $fields[] = $curriculumCurricularComponent;

        //Field complementary activities
        $complementaryActivitiesDescription = new MTextField('complementaryActivitiesDescription', $this->getFormValue('complementaryActivitiesDescription', $data->complementaryActivitiesDescription), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $complementaryActivitiesDescription->setJsHint(_M('Informe a descrição da atividade complementar', $module));
        $fields[] = $complementaryActivitiesDescription;
        $validators[] = new MRequiredValidator('complementaryActivitiesDescription');

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]       = $periodId;

        //Field total hours
        $totalHours = new MTextField('totalHours', $this->getFormValue('totalHours', $data->totalHours), _M('Total de horas', $module), SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'));
        $totalHours->setJsHint(_M('Informe o total de horas', $module));
        $fields[] = $totalHours;
        $validators[] = new MFloatValidator('totalHours', '', SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');

        $totalHours->addAttribute('onChange', 'calcCredits(' . $numberCreditsPerHour . ')');

        $this->page->addJSCode("function calcCredits(numberCreditsPerHour)
                                {
                                    var total;

                                    totalHours    = document.getElementsByName('totalHours')[0];
                                    totalCredits1 = document.getElementsByName('totalCredits')[0];

                                    total = totalHours.value * numberCreditsPerHour;

                                    totalCredits1.value = total;
                                }");

        //Field total credits
        $totalCredits = new MTextField('totalCredits', $this->getFormValue('totalCredits', $data->totalCredits), _M('Total de créditos', $module), 13);
        $totalCredits->setJsHint(_M('Informe o total de créditos', $module));
        $fields[] = $totalCredits;
        $validators[] = new MRequiredValidator('totalCredits');

        //Field degree
        $degree = new MTextField('degree', $this->getFormValue('degree', $data->degree), _M('Nota', $module), 13);
        $degree->setJsHint(_M('Informe o grau', $module));
        $fields[] = $degree;
        $validators[] = new MFloatValidator('degree', '', SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE'), 'optional');

        //Field concept
        $concept = new MTextField('concept', $this->getFormValue('concept', $data->concept), _M('Conceito', $module), 13);
        $concept->setJsHint(_M('Informe o conceito', $module));
        $fields[] = $concept;

        //Field complementary activities category
        $businessCC = new BusinessAcademicBusComplementaryActivitiesCategory();
        $dataCC = $businessCC->listComplementaryActivitiesCategory();
        $complementaryActivitiesCategoryId = new MComboBox('complementaryActivitiesCategoryId', $this->getFormValue('complementaryActivitiesCategoryId', $data->complementaryActivitiesCategoryId ? $data->complementaryActivitiesCategoryId : ''), _M('Categoria da atividade complementar',$module), $dataCC );
        $complementaryActivitiesCategoryId->setJsHint(_M('Selecione uma categoria de atividade complementar', $module));
        $fields[] = $complementaryActivitiesCategoryId;
        $validators[] = new MRequiredValidator('complementaryActivitiesCategoryId');

        $fields[] = new Separator('');

        $fields[] = new MButton('btnGenerate', _M('Gerar', $module));

        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function btnGenerate_click($sender = null)
    {
        $MIOLO            = MIOLO::getInstance();
        $module           = MIOLO::getCurrentModule();
        $action           = MIOLO::getCurrentAction();

        $data             = $this->getTypesData();
        $business         = new BusinessAcademicBusComplementaryActivities();
        $businessContract = new BusinessAcademicBusContract();
        $businessComplementaryRules = new BusinessAcademicBusComplementaryActivitiesCategoryRules();
        $business2        = new BusinessAcademicBusGenerateMultipleComplementaryActivities();

        $curriculumCurricularComponent = MIOLO::_request('curriculumCurricularComponent');
        $academicNumberHours           = MIOLO::_request('academicNumberHours');
        $groupId                       = MIOLO::_request('groupId');
        $groupGroupName                = MIOLO::_request('groupName');

        $filters3->curricularComponentId             = $curriculumCurricularComponent;
        $filters3->complementaryActivitiesCategoryId = $data->complementaryActivitiesCategoryId;

        $searchCompRules = $businessComplementaryRules->searchComplementaryActivitiesCategoryRules($filters3);

        $pupils = unserialize(urldecode(stripslashes(MIOLO::_request('pupils'))));

        $ok = true;

        foreach ( $pupils as $pupilContract ) // Percore o vetor de pessoas da atividade complementar
        {
            $dataContract   = $businessContract->getContract($pupilContract);

            $filters1->contractId             = $pupilContract;
            $searchComplementaryActivities    = $business->searchComplementaryActivities($filters1);

            $totalActivitiesRegitered         = 0; //total de atividades complementares
            $totalActivitiesRegiteredCategory = 0; //total de atividades complementares na categoria

            if ( is_array($searchComplementaryActivities) && sizeof($searchComplementaryActivities) )
            {
                //A pessoa possui atividades complementares cadastradas
                for ($x=0; $x < sizeof($searchComplementaryActivities); $x++)
                {
                    $totalActivitiesRegitered += $searchComplementaryActivities[$x][3];

                    if ( $searchComplementaryActivities[8] == $data->complementaryActivitiesCategoryId )
                    {
                        //Somara a $totalActivitiesRegiteredCategory se as categorias forem iguais
                        $totalActivitiesRegiteredCategory += $searchComplementaryActivities[$x][3];
                    }
                }

                //Verifica se a pessoa ira ultrapassar o maximo possivel com estas horas para categoria
                if ( is_array($searchCompRules) &&(sizeof($searchCompRules) > 0) )
                {
                    //Existe maximo permitido cadastrado
                    if ( ($totalActivitiesRegiteredCategory + $data->totalHours) > $searchCompRules[0][7])
                    {
                        $msgCategory[] = $dataContract->personName;
                        $ok = false;
                    }
                }
                else
                {
                    //Nao existe maximo permitido cadastrado
                }

                //Verifica se a pessoa ira ultrapassar o maximo de atividades complementares
                if ( ($totalActivitiesRegitered+$data->totalHours) > $academicNumberHours )
                {
                    //Ultrapassa total permitido para atividades complementares
                    $msgTotal[] = $dataContract->personName;
                    $ok = false;
                }
                else
                {
                    //Nao ultrapassa total permitido para atividades complementares
                }
            }
        }

        if ( $ok == true )
        {
            $x = 0;

            $business2->beginTransaction();
            
            foreach ( $pupils as $value )
            {
                $data->contractId = $value;

                $enrollId = $business->getPupilGroupEnroll($data->groupId, $data->contractId);

                if (strlen($enrollId) == 0)
                {
                    $enrollId = $business->insertPupilGroupEnroll($data);
                }

                $data->enrollId = $enrollId;

                $ok  = $business->insertComplementaryActivities($data);

                if ( $ok )
                {
                    $x++;
                }
            }

            $business2->commit();

            $msg = _M('@1 registros inseridos', $module, $x);

            if ( $x > 0 )
            {
                $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleComplementaryActivitiesPupils';
                $goto = $MIOLO->getActionURL($module, $postAction, null, null);

                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $msg  = _M('Erro executando a operação solicitada. Verifique se há atividades complementares no currículo do curso.', $module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
        else
        {

            if ( sizeof($msgCategory) > 0 )
            {
                $msg = _M('Os alunos', $module) . ' '. implode(', ', $msgCategory) . ' ' . _M('irão passar o máximo permitido para esta categoia', $module) . '.<br>' ;
            }

            if ( sizeof($msgTotal) > 0 )
            {
                $msg .= _M('Os alunos', $module) . ' '. implode(', ', $msgTotal) . ' ' . _M('irão passar o máximo permitido para esta atividade complementar de seus cursos', $module) . '.<br>' ;
            }

            $msg .= _M('Nenhum aluno foi inserido devido aos problemas acima') . '.<br>';

            $opts['courseId']       = $data->courseId;
            $opts['courseVersion']  = $data->courseVersion;
            $opts['turnId']         = $data->turnId;
            $opts['unitId']         = $data->unitId;
            $opts['pupils']         = urlencode(serialize($pupils));
            $opts['groupId']        = $data->groupId;
            $opts['groupGroupName'] = $groupGroupName;

            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdComplementaryActivities();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        $data->description = $this->complementaryActivitiesDescription->value;
        $data->contractId  = $this->contractId->value;
        $data->groupId     = $this->groupId->value;

        $data->courseId      = $this->courseId->value;
        $data->courseVersion = $this->courseVersion->value;
        $data->turnId        = $this->turnId->value;
        $data->unitId        = $this->unitId->value;

        return $data;
    }
}

?>
