<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Contract document form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/05/2006
 */

/**
 * Form to manipulate a contract document
 */
class FrmContractDocument extends SForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        parent::__construct(_M('Contrato da graduação', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array( 'event' => 'tbBtnPrint_click' )));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
  }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event = MIOLO::_REQUEST('event');

        // Field contract
        $contractId = new MHiddenField('contractId', $this->contractId->value);
        $fields2[] = $contractId;

        //Field person
        $contractPersonIdLabel = new MText('contractPersonIdLabel', _M('Pessoa',$module).':');
        $contractPersonIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonIdLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'contractUnitId'), 'academic', 'PersonContract', null, array('personId' => 'contractPersonId'), array('personId' => 'contractPersonId'), true);
        $validators[]     = new MIntegerValidator('contractPersonId', _M('Pessoa',$module), 'required');
        $contractPersonId->setJsHint(_M('Informe o código da pessoa',$module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->incentiveSearch->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctPerson', array($contractPersonIdLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        
        //Field contract
        $contractIdLabel = new MText('contractIdLabel', _M('Contrato',$module).':');
        $contractIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractIdLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $data->contractId ? $data->contractId : $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), 'academic', 'Contract', null, array(),  true);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $validators[]     = new MIntegerValidator('contractId', _M('Contrato',$module), 'required');
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$this->incentiveSearch->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->incentiveSearch->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->incentiveSearch->contractCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $hctContract = new MHContainer('hctContract', array($contractIdLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;

        $fields[] = new MSeparator();

        // Field unit
        $business = new BusinessBasicBusUnit();
        $unitLabel = new MText('unitLabel', _M('Unidade', $module));
        $unitLabel->setClass('m-caption m-caption-required');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitId = new MComboBox('unitId', $this->getFormValue('unitId', $this->unitId->value), '', $business->listUnit());
        $unitId->setJsHint(_M('Informe uma unidade', $module));
        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId));
        $validators[] = new MRequiredValidator('unitId', _M('Unidade', $module));

        // Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodLabel = new MText('periodLabel', _M('Período', $module));
        $periodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId)) > 0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), '', $businessPeriod->listPeriod(), true);
        $periodId->setJsHint(_M('Selecione um período', $module));
        $hctPeriod = new MHContainer('hctPeriod', array($periodLabel, $periodId));

        // Field learning period
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('periodId', 'contractCourseId', 'contractCourseVersion', 'turnId', 'unitId', 'learningPeriodDescription', null, null, null, null, null, null, null, null), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'unitId' => 'unitId'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Período letivo', $module));

        // Container period + learning period + unit
        $fields[] = new MVContainer('vctEnrolled', array($hctPeriod, $hctUnit, $hctLearningPeriod));

        $fields[] = new MSeparator();

        // Field rad option file
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), DB_TRUE);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), DB_FALSE);
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo', $module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[] = $hctFileType;

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     */
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $cd->contractId = MIOLO::_REQUEST('contractId');
        $cd->personId = MIOLO::_REQUEST('contractPersonId');
        $cd->courseId = MIOLO::_REQUEST('contractCourseId');
        $cd->courseVersion = MIOLO::_REQUEST('contractCourseVersion');
        $cd->turnId = MIOLO::_REQUEST('turnId');
        $cd->unitId = MIOLO::_REQUEST('unitId');
        $cd->learningPeriodId = MIOLO::_REQUEST('learningPeriodId');
        $cd->fileType = MIOLO::_REQUEST('radFileType');

        set_time_limit(0);

        try
        {
            /*
             * Verifica parâmetro ACADEMIC_CONTRACT_MODEL
             * 1 - Agata
             * 2 - iReport
             */
            $parameter = 'ACADEMIC_CONTRACT_MODEL';
            if ( !defined($parameter) )
            {
                $sql = 'SELECT parameter,
                               value
                          FROM basConfig
                         WHERE moduleConfig = UPPER(?)
                           AND parameter = UPPER(?)';

                $pk = array('ACADEMIC', $parameter);

                $db = SDatabase::getInstance();
                $result = $db->query(SAGU::prepare($sql, $pk, false));

                if ( count($result) == 0 )
                {
                    $model == 1;
                }

                define($parameter, $result[0][1]);
            }

            $model = constant($parameter);

            if ( $model && $model == 2 )
            {
                return $this->generateJasperReport($cd);
            }
            else
            {
                return $this->generateAgataReport($cd);
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
    
    /**
     * Gera em PDF
     */
    public function generateJasperReport($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Parameters of the report
        $parameters = array();
        $parameters['personId'] = intval($data->personId);
        $parameters['courseId'] = $data->courseId;
        $parameters['courseVersion'] = intval($data->courseVersion);
        $parameters['unitId'] = intval($data->unitId);
        $parameters['learningPeriodId'] = intval($data->learningPeriodId);
        $parameters['periodId'] = MIOLO::_REQUEST('periodId');

        switch ( MIOLO::_REQUEST('radFileType') )
        {
            case 'sxw':
                $format = SReport::FILETYPE_ODT;
                break;

            case 'pdf':
            default:
                $format = SReport::FILETYPE_PDF;
                break;
        }

        $report = new SReport();
        $report->setReportName('contract');
        $report->setFileType($format);
        $report->setParameters($parameters);
        if ( !$report->generate() )
        {
            $this->addError(_M('Não foi possível gerar o documento.', $module));
        }
    }

    /**
     * Gera em Agata
     */
    public function generateAgataReport($cd)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        //Adicionando novo filtro - mais informacoes na funcao que busca o $data. Ticket #34465
        $cd->imprimirContrato = true;
        
        $businessContractDocument = new BusinessAcademicBusContractDocument();
        $data = $businessContractDocument->getGraduationContractDocument($cd);
        
        if ( count($data) == 0 )
        {
            throw new Exception(_M('Dados inexistentes para as informações fornecidas.', $module) . ' ' . _M('Verifique os dados do formulário e o cadastro da pessoa.', $module));
        }
        else
        {
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $busContract = new BusinessAcademicBusContract();
            $busClassPupil = new BusinessAcademicBusClassPupil();
            $countData = count($data);
            for ( $count = 0; $count < $countData; $count++ )
            {
                if ( $data[$count][25] < SAGU::getParameter('BASIC', 'MAJORITY_AGE') )// For minor contract
                {
                    $responsableLegal = $businessContractDocument->getResponsableLegalContractDocument($data[$count][0]);

                    if ( empty($responsableLegal) )
                    {
                        // if there is no responsable legal
                        throw new Exception(_M('The selected person didn\'t reach majority and have no legal responsible.', $module) . ' ' . _M('Preencha esta informação para gerar o contrato.', $module));
                    }

                    // Additional data (Responsable legal)
                    $data[$count] = array_merge($data[$count], $responsableLegal[0]);

                    $contractResource = 'graduationMinorContract.sxw';
                }
                else
                {
                    $data[$count] = array_merge($data[0], array(null, null, null, null, null, null, null, null, null, null));
                    $contractResource = 'graduationContract.sxw';
                }

                $businessCompany = new BusinessBasicBusCompany();
                $company = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
                $price = $businessContractDocument->getPricePerLearningPeriodDocument($cd, $company->companyId);

                if ( !empty($price) )
                {
                    // Adjusts monetary values
                    $price[0][1] = number_format($price[0][1], SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), SAGU::getParameter('BASIC', 'REPORT_DECIMAL_SEPARATOR'), SAGU::getParameter('BASIC', 'REPORT_THOUSAND_SEPARATOR'));
                    $price[0][2] = number_format($price[0][2], SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), SAGU::getParameter('BASIC', 'REPORT_DECIMAL_SEPARATOR'), SAGU::getParameter('BASIC', 'REPORT_THOUSAND_SEPARATOR'));
                    $price[0][4] = SAGU::getExtensiveNumber($price[0][3], $country->currency, $country->pluralCurrency);
                    $price[0][3] = number_format($price[0][3], SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), SAGU::getParameter('BASIC', 'REPORT_DECIMAL_SEPARATOR'), SAGU::getParameter('BASIC', 'REPORT_THOUSAND_SEPARATOR'));

                    $data[$count] = array_merge($data[$count], $price[0]);
                }
                else
                {
                    $data[$count] = array_merge($data[$count], array(null, null, null, null, null));
                }

                $textComplements = array(
                    1 => '_________________________________',
                    2 => '_______________',
                    3 => '______________________________________________',
                    4 => '_________',
                    5 => '_________________________________',
                    6 => '_________________________________',
                    7 => '_____',
                    14 => '______________________',
                    15 => '______________________',
                    28 => '_________________________________',
                    29 => '_________________________________',
                    30 => '___________________',
                    31 => '___________________',
                    32 => '___________________',
                    33 => '________________________________________________________',
                    34 => '_____',
                    35 => '_______________________',
                    36 => '_____'
                );

                foreach ( $textComplements as $key => $d )
                {
                    if ( $data[$count][$key] == null )
                    {
                        $data[$count][$key] = $d;
                    }
                }
                $learningPeriod = $busLearningPeriod->getLearningPeriod($cd->learningPeriodId);

                $filters = new stdClass();
                $filters->personId = $data[$count][0];
                $filters->courseId = $learningPeriod->courseId;
                $filters->courseVersion = $learningPeriod->courseVersion;
                $filters->turnId = $learningPeriod->turnId;
                $filters->unitId = $learningPeriod->unitId;
                $contract = $busContract->searchContract($filters);
                $contract = $busContract->getContract($contract[0][0]);

                $filters2 = new stdClass();
                $filters2->personId = $data[$count][0];
                $filters2->contractId = $contract->contractId;
                $classData = $busClassPupil->searchClassPupil($filters2);

                $parcelas = $contract->parcelsNumber;

                if ( (strlen($parcelas) == 0) && (strlen($learningPeriod->parcelsNumber) == 0) ) // numero de parcelas do contrato
                {
                    throw new Exception(_M('Número de parcelas não definido para o período letivo @1, nem para o contrato @2.', $module, $learningPeriodId, $contract->contractId));
                }
                else
                {
                    $parcelas = strlen($parcelas) != 0 ? $parcelas : $learningPeriod->parcelsNumber;
                }

                $data[$count] = array_merge($data[$count], array($contract->contractId, $classData[0][0], $parcelas, Sagu::getExtensiveNumber($parcelas)));
            }

            $businessLegalPerson = new BusinessBasicBusLegalPerson();
            $legalPerson = $businessLegalPerson->getLegalPerson($company->personId);

            $businessCity = new BusinessBasicBusCity();
            $city = $businessCity->getCity($legalPerson->cityId);

            $MIOLO->uses('/core/AgataAPI.class');

            $api = new AgataAPI();
            $api->setParameter('$companyId', $company->companyId);
            $api->setParameter('$companyName', $company->name);
            $api->setParameter('$cnpj', $legalPerson->cnpj);
            $api->setParameter('$fakeName', $legalPerson->fakeName);
            $api->setParameter('$companyCity', $city->name);
            $api->setParameter('$companyStateId', $city->stateId);
            $api->setParameter('$companyZipCode', $city->zipCode);
            $api->setParameter('$companyLocation', $legalPerson->location);
            $api->setParameter('$companyNumber', $legalPerson->number);
            $api->setParameter('$acronym', $company->acronym);
            $api->setParameter('$contractId', $contract->contractId);
            
            #FIXME: Alterar deposi para usar a funcao de obter a data por extenso do sagu.
            #Feito desta maneira por nao se ter uma definicao de como fazer isso
            $mes['01'] = _M('Janeiro');
            $mes['02'] = _M('Fevereiro');
            $mes['03'] = _M('Março');
            $mes['04'] = _M('Abril');
            $mes['05'] = _M('Maio');
            $mes['06'] = _M('Junho');
            $mes['07'] = _M('Julho');
            $mes['08'] = _M('Agosto');
            $mes['09'] = _M('Setembro');
            $mes['10'] = _M('Outubro');
            $mes['11'] = _M('Novembro');
            $mes['12'] = _M('Dezembro');
            
            $api->setParameter('$dia', date('d'));
            $api->setParameter('$mes', $mes[date('m')]);
            $api->setParameter('$ano', date('Y'));
            
            $busInvoice = new BusinessFinanceBusInvoice();
            $parcelas = $busInvoice->obterMensalidades($contract->contractId);
         
            $total = 0;
            
            foreach($parcelas as $k=>$parcela)
            {
                $dados[$k][1] = $data[0][23];
                $dados[$k][2] = $data[0][22];
                $dados[$k][3] = $data[0][24];
                $dados[$k][4] = $parcela[0];
                $dados[$k][5] = money_format('%.2n', $parcela[1]);
                
                $total = SAGU::calcNumber($total.' + '.$parcela[1]);
            }
            
            $api->setParameter('$total', money_format('%.2n', $total));
            
            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');
            
            $api->setDataArray($data);
            $dados = array(array($dados));
            
            $api->setSubDataArray($dados);

            if ( !$api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/') . $contractResource) )
            {
                throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
            }

            if ( $cd->fileType == 'pdf' || MIOLO::_REQUEST('fileType') == 'pdf' )
            {
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.pdf');

                if ( !$api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw') )
                {
                    throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                }
            }

            $api->fileDialog();
        }
    }
}
?>
