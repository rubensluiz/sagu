<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Complementary Activities form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 05/12/2005
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmComplementaryActivitiesRegister extends SForm
{
    public $addComplementaryActivities;

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();

        if ( MIOLO::_request('function') == 'insert' )
        {
            $title = _M('Inserir', $module);
        }
        else
        {
            $title = _M('Atualizar', $module);
        }
        
        parent::__construct( $title, NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $businessComplementaryActivities = new BusinessAcademicBusComplementaryActivities();
        $businessEnroll                  = new BusinessAcademicBusEnroll();
        $curriculum                      = new BusinessAcademicBusCurriculum();
        $businessCurriculum              = new BusinessAcademicBusCurriculum();
        $businessPhysicalPerson          = new BusinessBasicBusPhysicalPerson();
        $businessContract                = new BusinessAcademicBusContract();
        $businessCurricularComponent     = new BusinessAcademicBusCurricularComponent();
        $businessComplementaryActivitiesCategoryRules = new BusinessAcademicBusComplementaryActivitiesCategoryRules();

        if ( in_array($function, array('update', 'delete')) )
        {
            $complementaryActivitiesId = MIOLO::_request('complementaryActivitiesId');
            $complementaryActivities = new MHiddenField('complementaryActivitiesId', $complementaryActivitiesId);
            $fields[] = $complementaryActivities;
        }

        if ( $function == 'update' )
        {
            $dataComplementaryActivities = $businessComplementaryActivities->getComplementaryActivities($complementaryActivitiesId);

            $dataEnroll   = $businessEnroll->getEnroll($dataComplementaryActivities->enrollId);
            $dataContract = $businessContract->getContract($dataEnroll->contractId);
            $dataPerson   = $businessPhysicalPerson->getPhysicalPerson($dataContract->personId);
            $data         = $dataComplementaryActivities;

            $personLabel = new MText('personLabel', _M('Pessoa',$module) . ':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $personId    = new MTextLabel('personId', $dataContract->personId);
            $personName  = new MTextLabel('personName', $dataPerson->name);

            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            $contractLabel = new MText('contractLabel', _M('Contrato',$module) . ':');
            $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $flds[]                = $contractLabel;

            $contractId            = new MTextLabel('contractId', $dataEnroll->contractId);
            $contractCourseId      = new MTextLabel('contractCourseId', $dataContract->courseId);
            $contractCourseVersion = new MTextLabel('contractCourseVersion', $dataContract->courseVersion);
            $contractCourseName    = new MTextLabel('contractCourseName', $dataContract->courseName);

            $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
            $fields[]    = $hctContract;

            $curriculumTypeId = new MHiddenField('curriculumTypeId', 1);
            $fields[] = $curriculumTypeId;

            $groupLabel = new MText('groupLabel', _M('Disciplina do currículo',$module) . ':');
            $groupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $curriculumId     = new MTextLabel('curriculumId',   $dataEnroll->curriculumId);
            
            $groupData = $curriculum->getCurriculum($curriculumId->value);
    
            $groupName   = new MTextLabel('groupName', $groupData->curricularComponentName);
            
            $hctGroup = new MHContainer('hctGroup', array($groupLabel, $curriculumId, $groupName));
            $fields[]  = $hctGroup;            

        }
        elseif ( $function == 'insert' )
        {
            $personLabel = new MText('personLabel', _M('Pessoa',$module) . ':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            // Lookup de pessoa
            $personId     = new MLookupTextField('personId', 
                                                 $this->getFormValue('personId', $this->personId->value), 
                                                 '', 
                                                 SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), 
                                                 null, 
                                                 null, 
                                                 array('limbo', 
                                                       'personId', 
                                                       'personName', 
                                                       'contractCourseId', 
                                                       'contractCourseName', 
                                                       'contractCourseVersion'), 
                                                 $module, 
                                                 'PersonContract', 
                                                 null, 
                                                 null, 
                                                 !$this->page->isPostBack());
            $validators[] = new MIntegerValidator('personId', '', 'optional');
            $personId->setReadOnly(true);

            $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Nome da pessoa',$module));

            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            $contractLabel = new MText('contractLabel', _M('Contrato',$module) . ':');
            $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $flds[]                = $contractLabel;

            $limbo = new MHiddenField('limbo', '');
            $fields[] = $limbo;
            
            // Lookup de contrato
            $contractId = new MLookupTextField('contractId', 
                                               $this->getFormValue('contractId',$data->contractId), 
                                               '', 
                                               SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), 
                                               null, 
                                               null,    
                                               array('personId', 
                                                     'personName', 
                                                     'contractCourseId', 
                                                     'contractCourseName', 
                                                     'contractCourseVersion', 
                                                     'contractTurnId', 
                                                     'limbo', 
                                                     'contractUnitId'), 
                                               $module, 
                                               'Contract', 
                                               null, 
                                               array('personId' => 'personId',
                                                     'contractId' => 'contractId'), 
                                               true);
            
            $contractId->setJsHint(_M('Informe o código do contrato',$module));
            $flds[]           = $contractId;
            $contractId->setReadOnly(true);
            $validators[] = new MIntegerValidator('contractId', _M('Contrato',$module), 'required');

            $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseId->setReadOnly(true);
            $contractCourseId->setJsHint(_M('Curso',$module));
            $flds[]           = $contractCourseId;

            $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseVersion->setReadOnly(true);
            $contractCourseVersion->setJsHint(_M('Versão do curso',$module));
            $flds[]                = $contractCourseVersion;

            $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractCourseName->setReadOnly(true);
            $contractCourseName->setJsHint(_M('Descrição',$module));
            $flds[]             = $contractCourseName;

            $hctContract = new MHContainer('hctContract', $flds);
            $hctContract->setShowLabel(true);
            $fields[]    = $hctContract;
            unset($flds);

            $contractTurnId = new MHiddenField('contractTurnId', '');
            $fields[]    = $contractTurnId;

            $contractUnitId = new MHiddenField('contractUnitId', '');
            $fields[]    = $contractUnitId;

            $groupLabel = new MText('groupLabel', _M('Disciplina do currículo',$module) . ':');
            $groupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $curriculumTypeId = new MHiddenField('curriculumTypeId', 1);
            $fields[] = $curriculumTypeId;

            $curriculumId = new MLookupTextField('curriculumId', $this->getFormValue('curriculumId', $data->curriculumId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('groupName'), $module, 'CurriculumSimple', null, array('curriculumTypeId' => 'curriculumTypeId', 'courseId' => 'contractCourseId'), true);
            $curriculumId->setReadOnly(true);

            $groupName = new MTextField('groupName', strlen($this->getFormValue('groupName', $data->groupName)) > 0 ? $this->getFormValue('groupName', $data->groupName) : $getGroup->groupName , '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $groupName->setJsHint(_M('Nome da disciplina do currículo',$module));
            $groupName->setReadOnly(true);

            $hctGroup = new MHContainer('hctGroup', array($groupLabel, $curriculumId, $groupName));
            $hctGroup->setShowLabel(true);
            $fields[]  = $hctGroup;

            $groupData = $curriculum->getCurriculum($curriculumId->value);

            unset($flds);

            $enrollExploitationLabel = new MText('enrollExploitationLabel', _M('Matrícula para aproveitamento',$module) . ':');
            $enrollExploitationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $flds[] = $enrollExploitationLabel;

            $notCurriculumTypeId = ''.SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY').', '.SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_CURRICULAR_INTEGRATE').', '.SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_MINIMUM').', '.SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_PROFICIENCY').'';

            $fields[]            = new MHiddenField('notCurriculumTypeId', $notCurriculumTypeId);

            $enrollExploitationId = new MLookupTextField('enrollExploitationId', $this->getFormValue('enrollExploitationId', $data->enrollExploitationId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('enrollExploitationId', 'limbo', 'complementaryActivitiesDescription', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'totalHours', 'totalCredits', 'degree', 'concept'), $module, 'EnrollContractOptionalCurriculum', null, array('contractId' => 'contractId', 'notCurriculumTypeId' => 'notCurriculumTypeId'), true);
            $enrollExploitationId->setJsHint(_M('Informe o código de matrícula para aproveitamento',$module));
            $flds[]           = $enrollExploitationId;

            $hctEnrollExploitation = new MHContainer('hctEnrollExploitation', $flds);
            $hctEnrollExploitation->setShowLabel(true);
            $fields[]    = $hctEnrollExploitation;
            unset($flds);
        }

        
        if ( in_array($function, array('update', 'insert')) )
        {
            
            if ( is_object($groupData) )
            {

                $curricularComponentData = $businessCurricularComponent->getCurricularComponent($groupData->curricularComponentId, $groupData->curricularComponentVersion);

                $numberCreditsPerHour = SAGU::calcNumber($curricularComponentData->academicCredits . '* 1.00' .  '/' . $curricularComponentData->academicNumberHours); // Use in javaScript

                if ( in_array($function, array('update')) )
                {
                    //Aqui, utiliza-se as horas acadêmicas da atividade complementar, ou seja, da disciplina que está no currículo do aluno

                    $dataCurriculumEnrollAux = $businessCurriculum->getCurriculum($dataEnroll->curriculumId);

                    $dataCurricularComponentAux = $businessCurricularComponent->getCurricularComponent($dataCurriculumEnrollAux->curricularComponentId, $dataCurriculumEnrollAux->curricularComponentVersion);

                    $curricularComponentData->academicNumberHours = $dataCurricularComponentAux->academicNumberHours;
                }
            }

            $fields[] = new MSeparator('<hr>');

            $divError = new MDiv('divError', null, null, 'align=center');
            $fields[] = $divError;

            $fields[] = new MSeparator('');

            $complementaryActivitiesDescription = new MTextField('complementaryActivitiesDescription', $this->getFormValue('complementaryActivitiesDescription', $data->description), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $fields[] = $complementaryActivitiesDescription;
            $validators[] = new MRequiredValidator('complementaryActivitiesDescription');

            $businessPeriod = new BusinessAcademicBusPeriod();
            $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
            $validators[]   = new MRequiredValidator('periodId');
            $fields[]       = $periodId;

            $totalHours = new MTextField('totalHours', $this->getFormValue('totalHours', $data->totalHours), _M('Total de horas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $fields[] = $totalHours;
            $validators[] = new MFloatValidator('totalHours', '', SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
            $totalHours->addAttribute('onChange', 'calcCredits(' . $numberCreditsPerHour . ')');

            $this->page->addJSCode("function calcCredits(numberCreditsPerHour)
                                    {
                                        var total;

                                        totalHours    = document.getElementsByName('totalHours')[0];
                                        totalCredits1 = document.getElementsByName('totalCredits')[0];

                                        total = Math.round((totalHours.value * numberCreditsPerHour)*1000)/1000;

                                        totalCredits1.value = total;
                                    }");

            $totalCredits = new MTextField('totalCredits', $this->getFormValue('totalCredits', $data->totalCredits), _M('Total de créditos', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $fields[] = $totalCredits;
            $validators[] = new MRequiredValidator('totalCredits', _M('Total de créditos', $module), 'required');
    
            $degree = new MTextField('degree', $this->getFormValue('degree', $data->degree), _M('Nota', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $fields[] = $degree;
            $validators[] = new MFloatValidator('degree', '', SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE'), 'optional');
    
            $concept         = new MTextField('concept', $this->getFormValue('concept', $data->concept), _M('Conceito', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE') );
            $concept->setJsHint(_M('Informe aqui o conceito', $module));
            $fields[]        = $concept;

            $businessCC = new BusinessAcademicBusComplementaryActivitiesCategory();
            $dataCC = $businessCC->listComplementaryActivitiesCategory();
            $complementaryActivitiesCategoryId = new MComboBox('complementaryActivitiesCategoryId', $this->getFormValue('complementaryActivitiesCategoryId', $data->complementaryActivitiesCategoryId ? $data->complementaryActivitiesCategoryId : ''), _M('Categoria da atividade complementar',$module), $dataCC );
            $fields[] = $complementaryActivitiesCategoryId;
            $validators[] = new MRequiredValidator('complementaryActivitiesCategoryId');

            $fields[] = new MSeparator('');

            //Grid - begin

            $filter1->contractId = $contractId->value;
            $filter1->curriculumId = $this->getFormValue('curriculumId');

            $searchComplementaryActivities = $businessComplementaryActivities->searchComplementaryActivities($filter1);

            $firsStepInForeach = TRUE;

            $filters5->courseId              = $contractCourseId->value;
            $filters5->curricularComponentId = $groupData->curriculumCurricularComponentId;
            $filters5->complementaryActivitiesCategoryId = null;

            $dataComplementaryActivitiesCategoryRules = $businessComplementaryActivitiesCategoryRules->searchComplementaryActivitiesCategoryRules($filters5);

            $countCategoryIdsAux = 0;

            if ( isset($dataComplementaryActivitiesCategoryRules) )
            {
                foreach ( $dataComplementaryActivitiesCategoryRules as $key2 => $value2 )
                {
                    eval('$minimumCategory'.$value2[2].' = $value2[6];');

                    eval('$maximumCategory'.$value2[2].' = $value2[7];');
                    $countCategoryIdsAux += 1;
                    $categoryIdsAux1[] = $value2[2];
                }
            }

            if ( isset($searchComplementaryActivities) )
            {
                foreach ($searchComplementaryActivities as $key1 => $resultComplementaryActivities1)
                {
                    eval('$total'.$resultComplementaryActivities1[8].' += $resultComplementaryActivities1[3];');

                    $totalGeral += $resultComplementaryActivities1[3];

                    if ( ($resultComplementaryActivities1[8] != $oldCategoryId) && (!$firsStepInForeach) )
                    {
                        //Escreve o total da categoria
                        unset($totalCategoryLine);
                        $totalCategoryLine    = array('', '', '', '', '', '', '', '', '', ''); //9 positions

                        $totalCategoryLine[2] = '<b>' . _M('Total da categoria', $module) . ' ' . $oldCategoryDesc . ' ' . _M('concluído', $module) . '</b>';
                        eval('$totalCategoryLine[3] = \'<b>\' . $total'.$oldCategoryId.' . \'</b>\';');

                        $grdData[] = $totalCategoryLine;

                        eval('$aux1 = $minimumCategory'.$oldCategoryId.';');

                        if ( isSet($aux1) )
                        {
                            unset($totalCategoryLine);

                            $totalCategoryLine[2] = '<b>' . _M('Mínimo de horas necessário para a categoria', $module) . ' ' . $oldCategoryDesc . '</b>';
                            eval('$totalCategoryLine[3] = \'<b>\' . $minimumCategory'.$oldCategoryId.' . \'</b>\';');
                            $grdData[] = $totalCategoryLine;
                        }

                        eval('$aux1 = $maximumCategory'.$oldCategoryId.';');

                        if ( isSet($aux1) )
                        {
                            unset($totalCategoryLine);
                            $totalCategoryLine[2] = '<b>' . _M('Máximo de horas necessário para a categoria', $module) . ' ' . $oldCategoryDesc . '</b>';
                            eval('$totalCategoryLine[3] = \'<b>\' . $maximumCategory'.$oldCategoryId.' . \'</b>\';');
                            $grdData[] = $totalCategoryLine;
                        }

                        $grdData[] = '';
                    }

                    $grdData[] = $resultComplementaryActivities1;

                    $categoryIdsAux[] = $resultComplementaryActivities1[8];

                    $oldCategoryId   = $resultComplementaryActivities1[8];
                    $oldCategoryDesc = $resultComplementaryActivities1[9];

                    if ( $firsStepInForeach ) //Flag para controle de não escrever na primeira passagem a 
                                            // categoria
                    {
                        $firsStepInForeach = FALSE;
                    }
                }
            }

            //Para somar com últimos valores do foreach acima
            if ( strlen($oldCategoryDesc) > 0 )
            {
                $totalCategoryLine    = array('', '', '', '', '', '', '', '', '', ''); //9 positions
                $totalCategoryLine[2] = '<b>' . _M('Total da categoria', $module) . ' ' . $oldCategoryDesc . '</b>';
                eval('$totalCategoryLine[3] = \'<b>\' . $total'.$oldCategoryId.' . \'</b>\';');

                $grdData[] = $totalCategoryLine;

                eval('$aux1 = $minimumCategory'.$oldCategoryId.';');

                if ( isSet($aux1) )
                {
                    unset($totalCategoryLine);
                    $totalCategoryLine[2] = '<b>' . _M('Mínimo de horas necessário para a categoria', $module) . ' ' . $oldCategoryDesc . '</b>';
                    eval('$totalCategoryLine[3] = \'<b>\' . $minimumCategory'.$oldCategoryId.' . \'</b>\';');

                    $grdData[] = $totalCategoryLine;
                }

                eval('$aux1 = $maximumCategory'.$oldCategoryId.';');

                if ( isSet($aux1) )
                {
                    unset($totalCategoryLine);
                    $totalCategoryLine[2] = '<b>' . _M('Máximo de horas necessário para a categoria', $module) . ' ' . $oldCategoryDesc . '</b>';
                    eval('$totalCategoryLine[3] = \'<b>\' . $maximumCategory'.$oldCategoryId.' . \'</b>\';');

                    $grdData[] = $totalCategoryLine;
                }

                $grdData[] = '';
                $totalCategoryLine    = array('', '', '', '', '', '', '', '', '', ''); //9 positions
            }

            for ($x = 0 ; $x < $countCategoryIdsAux; $x++)
            {
                $flagIsTheSame = false;

                for ( $y = 0 ; $y < count($categoryIdsAux); $y++ )
                {
                    if ( $categoryIdsAux1[$x] == $categoryIdsAux[$y] )
                    {
                        $flagIsTheSame = true;
                        break;
                    }
                }

                if ( $flagIsTheSame === false )
                {
                    $filters5->complementaryActivitiesCategoryId = $categoryIdsAux1[$x];

                    $dataComplementaryActivitiesCategoryRulesAux = $businessComplementaryActivitiesCategoryRules->searchComplementaryActivitiesCategoryRules($filters5);

                    $totalCategoryLine    = array('', '', '', '', '', '', '', '', '', ''); //9 positions

                    $totalCategoryLine[2] = '<b>' . _M('Mínimo de horas necessário para a categoria', $module) . ' ' . $dataComplementaryActivitiesCategoryRulesAux[0][3] . '</b>';
                    $totalCategoryLine[3] = '<b>' . $dataComplementaryActivitiesCategoryRulesAux[0][6] . '</b>';

                    $grdData[] = $totalCategoryLine;

                    unset($totalCategoryLine);

                    $totalCategoryLine[2] = '<b>' . _M('Máximo de horas necessário para a categoria', $module) . ' ' . $dataComplementaryActivitiesCategoryRulesAux[0][3] . '</b>';
                    $totalCategoryLine[3] = '<b>' . $dataComplementaryActivitiesCategoryRulesAux[0][7] . '</b>';

                    $grdData[] = $totalCategoryLine;

                    $grdData[] = '';
                    $totalCategoryLine    = array('', '', '', '', '', '', '', '', '', ''); //9 positions
                }
            }

            $totalCategoryLine[2] = '<b>' . _M('Total de atividades complementares concluídas', $module) . '</b>';

            if ( !(strlen($totalGeral) > 0) )
            {
                $totalGeral = 0;
            }

            $totalCategoryLine[3] = '<b>' . $totalGeral . '</b>';

            $grdData[] = $totalCategoryLine;

            if ( is_object($curricularComponentData) && isset($totalGeral) )
            {
                $faultComplementaryActivities = SAGU::calcNumber($curricularComponentData->academicNumberHours . '-' . $totalGeral);
            }

            $faultCompActivHidden = new MHiddenField('faultCompActivHidden', $faultComplementaryActivities);
            $fields[] = $faultCompActivHidden;

            $totalCategoryLine    = array('', '', '', '', '', '', '', '', '', ''); //9 positions
            $totalCategoryLine[2] = '<b><font color=\'red\'>' . _M('Atividade complementar faltando', $module) . '</font></b>';
            $totalCategoryLine[3] = '<b><font color=\'red\'>' . $faultComplementaryActivities  . '</font></b>';

            $grdData[] = $totalCategoryLine;

            $totalCategoryLine    = array('', '', '', '', '', '', '', '', '', ''); //9 positions
            $totalCategoryLine[2] = '<b>' . _M('Total de atividades complementares necessárias', $module) . '</b>';
            $totalCategoryLine[3] = '<b>' . $curricularComponentData->academicNumberHours . '</b>';

            $grdData[] = $totalCategoryLine;

            $fields[] = new MHiddenField('academicNumberHours', $curricularComponentData->academicNumberHours);

            $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdComplementaryActivitiesSearch'); 
            $grdResults->setData($grdData);

            $fields[] = $grdResults;

            $fields[] = new MSeparator('<hr>');

            //grid - end
        }
        
        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Última modificação', $module));
        }
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);

    }

    /**
     * Event triggered when user chooses New from the toolbar
     **/
     public function tbBtnNew_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_request('function');

        $opts = array('function' => $function);

        $action = 'main:register:complementaryActivities:complementaryActivities';

        $this->page->redirect($MIOLO->getActionURL($module, $action, null, $opts));
     }
     
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnSearch_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_request('function');

        $opts = array('function' => $function);

        $action = 'main:register:complementaryActivities:complementaryActivities';

        $this->page->redirect($MIOLO->getActionURL($module, $action, null, $opts));
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=>'tbBtnDelete_confirm',
                        'function'=>'delete',
                        'complementaryActivitiesId'=>MIOLO::_request('complementaryActivitiesId')
                       );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO                      = MIOLO::getInstance();
        $module                     = MIOLO::getCurrentModule();
        $action                     = MIOLO::getCurrentAction();

        $business                   = new BusinessAcademicBusComplementaryActivities();
        $businessEnroll             = new BusinessAcademicBusEnroll();
        $businessContract           = new BusinessAcademicBusContract();
        $businessGroup              = new BusinessAcademicBusGroup();

        $data                       = $this->getTypesData();

        $getComplementaryActivities = $business->getComplementaryActivities($data->complementaryActivitiesId);
        $getEnroll                  = $businessEnroll->getEnroll($getComplementaryActivities->enrollId);
        $getCotract                 = $businessContract->getContract($getEnroll->contractId);
        $getGroup                   = $businessGroup->getGroup($getEnroll->curriculumId);

        $ok                         = $business->deleteComplementaryActivities($data->complementaryActivitiesId);

        if ( $ok )
        {
            if ( strlen($getComplementaryActivities->curriculumIdOld) > 0 )
            {
                $data1->curriculumId = $getComplementaryActivities->curriculumIdOld;  //curriculumIdOld
                $data1->enrollId     = $getComplementaryActivities->enrollId;
                $businessEnroll->updateCurriculumFromEnroll($data1);
            }

            $action = 'main:register:complementaryActivities:complementaryActivities';

            $opts['function'] = 'search';

            $msg  = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, NULL, $opts);
            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $faultCompActivHidden            = MIOLO::_request('faultCompActivHidden');
        $academicNumberHours             = MIOLO::_request('academicNumberHours');
        $curriculumId                    = MIOLO::_request('curriculumId');
        $data = $this->getTypesData();

        $businessComplementaryActivities = new BusinessAcademicBusComplementaryActivities();
        $businessComplementaryActivitiesCategoryRules = new BusinessAcademicBusComplementaryActivitiesCategoryRules();
        $businessContract = new BusinessAcademicBusContract();
        $curriculum       = new BusinessAcademicBusCurriculum();
        $businessEnroll   = new BusinessAcademicBusEnroll();
        
        $dataContract     = $businessContract->getContract($data->contractId);

        $dataGroup = $curriculum->getCurriculum($curriculumId);

        $filters1->contractId            = $data->contractId;
        $filters1->curriculumId = $data->curriculumId;

        $dataComplementaryActivities     = $businessComplementaryActivities->searchComplementaryActivities($filters1);

        $filters2->courseId              = $dataContract->courseId;
        $filters2->curricularComponentId = $dataGroup->curriculumCurricularComponentId;
        
        $dataComplementaryActivitiesCategoryRules = $businessComplementaryActivitiesCategoryRules->searchComplementaryActivitiesCategoryRules($filters2);

        //Get total hours conclued
        if ( is_array($dataComplementaryActivities) )
        {
            foreach ( $dataComplementaryActivities as $row1 )
            {
                if ( $function == 'update' && $row1[0] == $data->complementaryActivitiesId )
                {
                    $totalHoursConclued += $data->totalHours;
                }
                else
                {
                    $totalHoursConclued += $row1[3];
                }
            }
        }

        if ( $function == 'update' )
        {
            $dataComplementaryActivitiesAux = $businessComplementaryActivities->getComplementaryActivities($data->complementaryActivitiesId);

            $data->enrollId = $dataComplementaryActivitiesAux->enrollId;
        }

        //Verifica se já existem atividades complementares para este contrato
        if ( is_array($dataComplementaryActivities) )
        {
            foreach ( $dataComplementaryActivities as $key1 => $value1 )
            {
                if ( $function == 'update' && $value1[0] == $data->complementaryActivitiesId )
                {
                    eval('$totalCategory'.$value1[8].' += $data->totalHours ;');
                    $totalGeral += $data->totalHours ;

                }
                else
                {
                    eval('$totalCategory'.$value1[8].' += $value1[3] ;');
                    $totalGeral += $value1[3] ;
                }
            }
        }

        //Verifica se existem regras para atividades complementares por categoria
        if ( is_array($dataComplementaryActivitiesCategoryRules) )
        {
            foreach ( $dataComplementaryActivitiesCategoryRules as $key2 => $value2 )
            {
                eval('$minimumCategory'.$value2[2].' = $value2[6];');
                eval('$maximumCategory'.$value2[2].' = $value2[7];');

                $categoryIds[] = $value2[2];
            }
        }

        //Verificar aqui se existe choque com o que quero inserir
        eval('$aux1 = $totalCategory'.$data->complementaryActivitiesCategoryId.';');
        eval('$aux2 = $maximumCategory'.$data->complementaryActivitiesCategoryId.';');

        if ( isSet($aux1) && isSet($data->totalHours) && isSet($aux2) )
        {
            $isSetVariables = true;
        }
        else
        {
            $isSetVariables = false;
        }

        if ( $function == 'insert' )
        {
            if (($aux1 + $data->totalHours) > $aux2)
            {
                $isMorThatMaximum = true;
            }
            else
            {
                $isMorThatMaximum = false;
            }
        }
        elseif ( $function == 'update' )
        {
            if ( $aux1 > $aux2 )
            {
                $isMorThatMaximum = true;
            }
            else
            {
                $isMorThatMaximum = false;
            }
        }
        
        if ( ($isSetVariables && $isMorThatMaximum) || ($isMorThatMaximum && $aux2))
        {
            //Tem problema, pois irá ultrapassar o máximo
            $msg     = _M('Esta atividade complementar não pode ser cadastrada na categoria selecionada porque excede o máximo de horas permitido.', $module);
            $this->AddError($msg);
            $flagFaultRequired = true;
        }
        elseif ( ((($totalHoursConclued + $data->totalHours ) > $academicNumberHours) && $function ==  'insert') || ( ($totalHoursConclued > $academicNumberHours) && $function == 'update' ) )
        {
            //Ir´a ultrapassar maximo da carga hor´aria total
            $msg     = _M('Esta atividade complementar não pode ser inserida, pois o máximo de atividades complementares será excedido', $module) . '.';
            $this->AddError($msg);
            $flagFaultRequired = true;
        }
        else
        {
            //Pode inserir normalmente
            if ( $function == 'update' )
            {
                $ok  = $businessComplementaryActivities->updateComplementaryActivities($data);
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
            }
            else
            {
                //Verifica se o aluno informou uma matrícula para aproveitamento
                if ( strlen($data->enrollExploitationId) > 0 )
                {
                    //Se o aluno INFORMOU uma matrícula, aqui que gerencia-se isso
                    $data->enrollId        = $data->enrollExploitationId;

                    $data1->enrollId       = $data->enrollExploitationId;
                    $data1->curriculumId   = $dataGroup->curriculumId;

                    $dataEnrollAux         = $businessEnroll->getEnroll($data->enrollId);

                    $data->curriculumIdOld = $dataEnrollAux->curriculumId;

                    $businessEnroll->updateCurriculumFromEnroll($data1);
                }
                else
                {
                    //Se o aluno NÃO INFORMOU uma matrícula
                    $data->enrollId = $businessComplementaryActivities->getPupilGroupEnroll($data->curriculumId, $data->contractId);

                    //Verifica se o aluno já possui matrícula nesta atividade complementar
                    if ( ! (strlen($data->enrollId) > 0) )
                    {
                        //Inseri uma nova matrícula para o aluno
                        $data->enrollId = $businessComplementaryActivities->insertPupilGroupEnroll($data);
                    }
                }

                if ( strlen($data->enrollId) > 0 )
                {
                    $ok  = $businessComplementaryActivities->insertComplementaryActivities($data);
                    $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');

                    $infoMsg = '';
                }
                else
                {
                    $ok = false;
                    $infoMsg = _M('Impossível registrar uma matrícula para este aluno', $module);
                }
            }

            if ( $ok )
            {
                $opts = array('complementaryActivitiesIdS'=>$data->complementaryActivitiesId,
                              'curriculumId' => $data->curriculumId);

                $action = 'main:register:complementaryActivities:complementaryActivities';

                if ( $function == 'update' )
                {
                    $caption = _M('Informação', $module);
                    $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                }
                else
                {
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);

                    $action = 'main:register:complementaryActivities:complementaryActivitiesRegister';

                    $opts['function'] = 'insert';

                    $opts['curriculumId']                = $data->curriculumId;
                    $opts['groupName']             = $dataGroup->curriculumCurricularComponentName;

                    $opts['contractId']            = $data->contractId;
                    $opts['contractCourseId']      = $dataContract->courseId;
                    $opts['contractCourseVersion'] = $dataContract->courseVersion;
                    $opts['contractCourseName']    = $dataContract->courseName;
                    $opts['contractTurnId']        = $dataContract->turnId;
                    $opts['contractUnitTurnId']    = $dataContract->unitId;

                    $opts['personId']              = $dataContract->personId;
                    $opts['personName']            = $dataContract->personName;

                    $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Questão',$module);
                    $MIOLO->question($msg, $gotoYes, $goto);
                }
            }
            else
            {
                $msg  = _M('Erro executando a operação solicitada.', $module). ' ' . $infoMsg . '. ';
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdComplementaryActivities();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        $data->description      = $this->complementaryActivitiesDescription->value;
        $data->contractId       = $this->contractId->value;
        $data->groupId          = $this->groupId->value;
        $data->curriculumId     = $this->curriculumId->value;

        $data->enrollExploitationId = $this->enrollExploitationId->value;

        return $data;
    }
}

?>
