<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Alternative enroll process
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 22/10/2010
 */

/**
 * Enroll form
 */
class FrmEnrollAlt1 extends SForm
{
    private $module;
    private $busEnroll;
    private $enrollConfig;

    /**
     * Class constructor
     */
    public function __construct()
    {
        $this->module = SAGU::getFileModule(__FILE__);
        parent::__construct(_M('Matrícula do aluno', $this->module), null, null);
        
        // Garantir carragamento para MIOLO_Window
        $this->page->AddScript('x/x_win.js');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnSearch');
        
        $validators = array();
        $fields = array();

        // Field period
        $busPeriod = new BusinessAcademicBusPeriod();
        $periodValue = $this->getFormValue('periodId') ? $this->getFormValue('periodId') : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID');
        $periodId = new MComboBox('periodId', $periodValue, _M('Código do período', $this->module), $busPeriod->listPeriod());
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = $periodId;
        $fields[] = new MSeparator();

        // Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $this->module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'contractTurnDescription', 'contractUnitId', 'contractUnitDescription', 'pupilClassId', 'pupilClassName'), $this->module, 'ActivePersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $this->module));
        $validators[] = new MRequiredValidator('contractPersonId', _M('Pessoa', $this->module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $this->module));
        $hctPerson = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(false);

        // Field contract
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $this->module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'contractTurnDescription', 'contractUnitId', 'contractUnitDescription', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'pupilClassId', 'pupilClassName'), $this->module, 'ActiveContract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato', $this->module));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato', $this->module));
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso', $this->module));
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso', $this->module));
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName'), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $this->module));
        $hctContractCourse = new MHContainer('hctContractCourse', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContractCourse->setShowLabel(false);

        // Field unit
        $contractUnitLabel = new MText('contractUnitLabel', _M('Unidade', $this->module) . ':');
        $contractUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractUnitId = new MTextField('contractUnitId', $this->getFormValue('contractUnit'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractUnitId->setReadOnly(true);
        $contractUnitId->setJsHint(_M('Código da unidade', $this->module));
        $contractUnitDescription = new MTextField('contractUnitDescription', $this->getFormValue('contractUnitDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractUnitDescription->setReadOnly(true);
        $contractUnitDescription->setJsHint(_M('Descrição da unidade', $this->module));
        $hctContractUnit = new MHContainer('hctContractUnit', array($contractUnitLabel, $contractUnitId, $contractUnitDescription));
        $hctContractUnit->setShowLabel(false);

        // Field turn
        $contractTurnLabel = new MText('contractTurnLabel', _M('Turno', $this->module) . ':');
        $contractTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractTurnId = new MTextField('contractTurnId', $this->getFormValue('contractTurn'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractTurnId->setReadOnly(true);
        $contractTurnId->setJsHint(_M('Código do turno', $this->module));
        $contractTurnDescription = new MTextField('contractTurnDescription', $this->getFormValue('contractTurnDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractTurnDescription->setReadOnly(true);
        $contractTurnDescription->setJsHint(_M('Descrição do turno', $this->module));
        $hctContractTurn = new MHContainer('hctContractTurn', array($contractTurnLabel, $contractTurnId, $contractTurnDescription));
        $hctContractTurn->setShowLabel(false);

        $hctContract = new MVContainer('hctContract', array($hctContractCourse, $hctContractUnit, $hctContractTurn));

        // Field pupil class
        $pupilClassLabel = new MText('pupilClassLabel', _M('Turma do aluno', $this->module) . ':');
        $pupilClassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $pupilClassLabel->setClass('m-caption m-caption-required');
        $pupilClassId = new MLookupTextField('pupilClassId', $this->getFormValue('pupilClassId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('pupilClassName'), $this->module, 'Class', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion'), true);
        $pupilClassId->setJsHint(_M('Informe a turma do aluno', $this->module));
        $validators[] = new MRequiredValidator('pupilClassId', _M('Turma do aluno', $this->module));
        $pupilClassName = new MTextField('pupilClassName', $this->getFormValue('pupilClassName'), '', 30);
        $pupilClassName->setReadOnly(true);
        $pupilClassName->setJsHint(_M('Nome da turma do aluno', $this->module));
        $hctPupilClass = new MHContainer('hctpupilClass', array($pupilClassLabel, $pupilClassId, $pupilClassName));
        $hctPupilClass->setShowLabel(false);

        // Field learning period
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $this->module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'learningPeriodName'), $this->module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'), true);
        $learningPeriodId->setJsHint(_M('Informe a turma do aluno', $this->module));
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Período letivo', $this->module));
        $learningPeriodName = new MTextField('learningPeriodName', $this->getFormValue('learningPeriodName'), '', 30);
        $learningPeriodName->setReadOnly(true);
        $learningPeriodName->setJsHint(_M('Descrição do período letivo', $this->module));
        $hctLearningPeriod = new MHContainer('hctlearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodName));
        $hctLearningPeriod->setShowLabel(false);

        $bsg1 = new BaseGroup('bsg1', _M('Dados do contrato', $this->module), array($hctPerson, $hctContract, $hctPupilClass, $hctLearningPeriod), 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width = '100%';
        $fields[] = $bsg1;

        // Clean any erros actually being displayed and do the AJAX call to load groups
        $fields[] = new MButton('btnLoadEnroll', _M('Carregar matrícula', $this->module), $this->getAjaxAction('loadEnroll', 'divEnrollData', true));

        $fields[] = new MDiv('divEnrollData');

        $this->setShowPostButton(false);
        $this->toolbar->setIsPost('tbBtnSave', false);        
        $this->toolbar->setButtonURL('tbBtnSave', $this->getAjaxAction('saveEnroll', 'divEnrollData', true, null, true, false));

        $this->addFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }

    /**
     * AJAX call to load all enroll data
     *
     * @param (stdClass) $args All form data in form of a stdClass object.
     */
    public function loadEnroll($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();

        $learningPeriodId = $args->learningPeriodId;
        $contractId = $args->contractId;
        $classId = $args->pupilClassId;
        
        try
        {
            if(SAGU::getParameter('FINANCE', 'PERMITIR_ADITAR_INCENTIVOS') == DB_TRUE)
            {   
                //Filtrar apenas os incentivos que não estão cancelados
                $args->fimIncentivo = SAGU::getDateNow();
                
                $busIncentive = new BusinessFinanceBusIncentive();
                $incentivos = $busIncentive->searchIncentive($args);
                
                foreach($incentivos as $incentivo)
                {
                    if($incentivo[19] == DB_TRUE)
                    {   
                        $msg = _M('Não é possível efetuar ajuste de matrícula, pois o contrato possuí o incentivo aditado.');
                        throw new Exception($msg);
                    }
                }
            }
            $busContract = new BusinessAcademicBusContract();
            $contract = $busContract->getContract($contractId);
            
            //Adicionar validação para que o código do perído letivo seja correspondente ao curso/versao/turno/unidade selecionados
            $busContract = new BusinessAcademicBusLearningPeriod();
            $learningPeriod = $busContract->getLearningPeriod($learningPeriodId);
            
            if( $learningPeriod->periodId != $args->periodId  )
            {
                throw new Exception(_M('O período letivo não corresponde ao período selecionado', $this->module));
            }
            
            if( $learningPeriod->courseId != $contract->courseId || $learningPeriod->courseVersion != $contract->courseVersion || $learningPeriod->turnId != $contract->turnId || $learningPeriod->unitId != $contract->unitId )
            {
                throw new Exception(_M('O período letivo não corresponde ao contrato selecionado', $this->module));
            }
            // Sanity checks
            if ( strlen($learningPeriodId) == 0 )
            {
                throw new Exception(_M('O código do período letivo deve ser informado.', $this->module));
            }
            if ( strlen($contractId) == 0 )
            {
                throw new Exception(_M('Deve ser informado um código de contrato.', $this->module));
            }
            if ( strlen($classId) == 0 )
            {
                throw new Exception(_M('A turma deve ser informada.', $this->module));
            }


            if ( strlen($contract->contractId) == 0 )
            {
                throw new Exception(_M('Contrato @1 não encontrado.', $this->module, $contractId));
            }

            /*
             * Check pupil's class data
             */
            $busClassPupil = new BusinessAcademicBusClassPupil();
            $classPupil = $busClassPupil->getContractCurrentClass($contractId);

            if ( strlen($classPupil->classId) < 1 )
            {
                $this->addAlert(_M('Este aluno não pertence a nenhuma turma.', $this->module) . ' ' .
                        _M('Se você continuar com o processo de matrícula, o aluno passará a pertencer à turma @1.', $this->module, $classId));
            }
            elseif ( $classPupil->classId != $classId )
            {
                $this->addAlert(_M('A turma do contrato é @1, não @2. Continuando, a turma será substituída.', $this->module, $classPupil->classId, $classId));
            }

            $busClass = new BusinessAcademicBusClass();
            $classActualPeriod = $busClass->getSemesterContract($contractId);
            // when no actual period is found, assume 1 as pupil's actual period
            if ( strlen($classActualPeriod) <= 0 )
            {
                $classActualPeriod = 1;
            }

            $matricula = new Matricula($contract->contractId, Matricula::MATRICULA_NORMAL);
            $this->enrollConfig = $matricula->obterConfiguracoes();

            $this->busEnroll = new BusinessAcademicBusEnroll();

            $fields = array();
            
            $busGnuteca = new BusinessGnutecaBusGnutecaToSagu2();
            
            if ( SAGU::getParameter('BASIC', 'MODULE_GNUTECA_INSTALLED') == 'YES' )
            {                
                if ( $busGnuteca->verificaPendenciasGnuteca($this->enrollConfig->pendenciasGnuteca, $contract->personId, $this->enrollConfig->bloqueioEmprestimos, $this->enrollConfig->bloqueioMultas, $this->enrollConfig->bloqueioPenalidades) )
                {
                    $url = $MIOLO->getActionURL('academic', 'main', null, array('personId' => $contract->personId, 'event'=>'btnSearch:click'));
                    $lnkAcademicDiverseConsultation = new MLink('lnk'.rand(), _M('Clique aqui', $module), $url, null, 'new');
                    $msg = _M('A pessoa possui pendência(s) Nada Consta no Gnuteca. @1 para consultar este(s) débito(s).', $module, $lnkAcademicDiverseConsultation->generate());

                    if ( $this->enrollConfig->pendenciasGnuteca == AcdEnrollConfig::SOMENTE_AVISO )
                    {
                        $this->addAlert($msg);
                    }
                    else
                    {
                        $this->AddError($msg);
                    }
                }
            }

            /*
             * Check for missing documents
             */
            $busDocument = new BusinessBasicBusDocument();
            $missingDocs = $busDocument->checkMissingDocuments($contract->personId, $contractId);

            $blockProcess = false;
            $blockProcessMsg = "";
            if ( count($missingDocs) > 0 )
            {
                foreach ( $missingDocs as $documentTypeId => $documentData )
                {
                    // If some other missing document already blocked the enroll, leave it true.
                    // Otherwise, use the value of isBlockEnroll.
                    $blockProcess = $blockProcess ? $blockProcess : $documentData->isBlockEnroll;

                    if ( $documentData->isBlockEnroll )
                    {
                        $blockProcessMsg = $msg = _M('A entrega do documento @1 é requisito obrigatório para a efetivação da matrícula do aluno.', $this->module, $documentData->documentName);
                    }
                    else
                    {
                        $msg = _M('O documento @1 não foi entregue.', $this->module, $documentData->documentName);
                    }
                    $this->addAlert($msg);
                }
            }

            /*
             * Check for observations on documents
             */
            $documentsObs = $busDocument->checkDocumentsObs($contract->personId);
            if ( count($documentsObs) > 0 )
            {
                foreach ( $documentsObs as $obs )
                {
                    $obj = new stdClass();
                    list ( $obj->documentTypeId,
                            $obj->documentName,
                            $obj->observation,
                            $obj->isBlock ) = $obs;

                    $this->addInfo(_M('Observações para o documento @1: @2', $this->module, $obj->documentName, $obj->observation));
                }
            }

            //Não gera informações financeiras
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $dataLearningPeriod = $busLearningPeriod->getLearningPeriod($learningPeriodId);
            if ( $dataLearningPeriod->isFinanceGenerate == DB_TRUE )
            {
                /*
                 * Check for finance debits
                 */
                if ( SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES' )
                {
                    $business = new BusinessFinanceBusGeneralQueries();
                    $debt = $business->getDefaulterDebt($contractId, ($this->enrollConfig->checkDebits == DB_TRUE));

                    if ( $debt > 0 )
                    {
                        $msg = _M('O sistema detectou um débito financeiro em atraso com a instituição.', $this->module);

                        // If enroll is configured to block when a debit found and the current user is not A_ADMIN of this class, block the enroll
                        if ( $this->enrollConfig->blockDebt == DB_TRUE && (!$MIOLO->checkAccess('FrmEnrollContract', A_ADMIN, false, true)) )
                        {
                            $blockProcessMsg .= $msg .= ' ' . _M('Para efetuar a matrícula, a situação de débito financeiro atrasado deve ser resolvida.', $this->module);
                            // Note that the enroll process may have been already blocked elsewhere
                            $blockProcess = true;
                        }

                        // Allow the user to inspect the debit if he has access to the finance diverse consultation
                        if ( $MIOLO->checkAccess('FINANCE', A_ACCESS, false, true) )
                        {
                            $url = $MIOLO->getActionURL('finance', 'main', null, array('personId' => $contract->personId, 'event' => 'btnSearch:click'));
                            $financialSituation = new MLink('fin', _M('Clique aqui para consultar este débito.', $this->module), $url, null, '_new');
                            $msg .= ' ' . $financialSituation->generate();
                        }

                        $this->addError($msg);
                    }
                    
                    //Buscar por um débito financeiro em aberto com a instituição
                    $openDebt = $business->getDefaulterDebt($contractId, ($this->enrollConfig->checkDebits == DB_TRUE));

                    if ( $openDebt > 0 )
                    {
                        $msg = _M('O sistema detectou um débito financeiro em aberto com a instituição.', $this->module);

                        // If enroll is configured to block when a debit found and the current user is not A_ADMIN of this class, block the enroll
                        if ( $this->enrollConfig->checkDebits == DB_TRUE && (!$MIOLO->checkAccess('FrmEnrollContract', A_ADMIN, false, true)) )
                        {
                            $blockProcessMsg .= $msg .= ' ' . _M('Para efetuar a matrícula, a situação de débito financeiro em aberto deve ser resolvida.', $this->module);
                            // Note that the enroll process may have been already blocked elsewhere
                            $blockProcess = true;
                            
                        }

                        // Allow the user to inspect the debit if he has access to the finance diverse consultation
                        if ( $MIOLO->checkAccess('FINANCE', A_ACCESS, false, true) )
                        {
                            $url = $MIOLO->getActionURL('finance', 'main', null, array('personId' => $contract->personId, 'event' => 'btnSearch:click'));
                            $financialSituation = new MLink('fin', _M('Clique aqui para consultar este débito.', $this->module), $url, null, '_new');
                            $msg .= ' ' . $financialSituation->generate();
                        }

                        $this->addError($msg);
                    }
                }

                /*
                 * Check for gnuteca debits
                 */
                if ( SAGU::getParameter('BASIC', 'MODULE_GNUTECA_INSTALLED') == 'YES' && SAGU::getParameter('ACADEMIC', 'CHECK_GNUTECA_FINES') == 'YES' )
                {
                    $busGnuteca = new BusinessGnutecaBusGnutecaToSagu2();
                    $debt = count($busGnuteca->searchPersonOpenFines($contract->personId));

                    if ( $debt > 0 )
                    {
                        $msg = _M('O sistema detectou um débito com a biblioteca.', $this->module);

                        // If enroll is configured to block when a debit found and the current user is not A_ADMIN of this class, block the enroll
                        if ( $this->enrollConfig->blockDebt == DB_TRUE && (!$MIOLO->checkAccess('FrmEnrollContract', A_ADMIN, false, true)) )
                        {
                            $blockProcessMsg .= $msg .= ' ' . _M('Para efetuar a matrícula, a situação de débito deve ser resolvida.', $this->module);
                            // Note that the enroll process may have been already blocked elsewhere
                            $blockProcess = true;
                        }

                        // Allow the user to inspect the debit if he has access to the finance diverse consultation
                        if ( $MIOLO->checkAccess('FINANCE', A_ACCESS, false, true) )
                        {
                            $url = $MIOLO->getActionURL('finance', 'main', null, array('personId' => $contract->personId, 'event' => 'btnSearch:click'));
                            $financialSituation = new MLink('fin', _M('Clique aqui para consultar este débito.', $this->module), $url, null, '_new');
                            $msg .= ' ' . $financialSituation->generate();
                        }

                        $this->addError($msg);
                    }
                }
            }

            // If some check caused the enroll to be blocked, block it.
            if ( $blockProcess )
            {
                throw new Exception(_M('Matrícula bloqueada. <br>' . $blockProcessMsg, $this->module));
            }
            
            $enrollData = $this->busEnroll->getGroupsAvailableForEnroll($contractId, $classId, $learningPeriodId);
            $args->group = array();
            for ( $i = 0; $i < count($enrollData); $i++ )
            {
                $args->group[$enrollData[$i]->groupId] = $enrollData[$i]->curriculumId;
            }            
            
            //Verifica se tem disciplina com regime de férias e se tem preço cadastrado pra ela.
            $busGroup = new BusinessAcademicBusGroup();
            $busPrice = new BusinessFinanceBusPrice();
            foreach($args->group as $key => $groups)
            {                
                $group = $busGroup->getGroup($key);
                $price = $busPrice->getLastPriceFerias($group->curriculumCourseId, $group->curriculumCourseVersion,$group->turnId, $group->unitId);
                             
                if( $group->regimenId == SAGU::getParameter('ACADEMIC', 'REGIME_DE_FERIAS') )
                {
                    if($price == null || $price == 0)
                    {   
                        //Faz redirecionamento para a tela consulta de preço.
                        $url = $MIOLO->getActionURL('finance', 'main:register:price', null, array('courseId' => $args->contractCourseId, 'courseVersion' => $args->contractCourseVersion, 'unitId' => $args->contractUnitId, 'turnId' => $args->contractTurnId));
                        $linkPrecoDisciplina = new MLink('fin', _M('Clique aqui para cadastrar o preço.', $this->module), $url, null, '_new');
                        $msg = _M('A disciplina de regime de férias não tem preço cadastrado.', $this->module);
                        $msg .= '<br>'.$linkPrecoDisciplina->generate();
                        throw new Exception($msg);
                    }
                }                
            }
            
            /*
             * Show enroll type
             */
            //Verifica se é matrícula normal, matrícula para os bixos ou reajuste
            $busPeriodEnrollDate = new BusinessAcademicBusPeriodEnrollDate();
            $periodEnrollDate = $busPeriodEnrollDate->getCurrentPeriodEnrollDate($learningPeriodId);
            $busFunctions = new BusinessBasicBusFunctions();

            //AJUSTE DE MATRÍCULAS e MATRÍCULA FORA DE PERÍODO (para funcionários)
            if ( strtoupper($periodEnrollDate->isAdjustment) == strtoupper(DB_TRUE) ||
                    !($busFunctions->isBetweenDates(date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), $periodEnrollDate->beginDate, $periodEnrollDate->endDate, SAGU::getParameter('BASIC', 'MASK_DATE')))
            )
            {
                $enrollType = _M('Esta matrícula está sendo feita fora de um período de matrícula, portanto será efetuada como ajuste.', $this->module);
            }
            // MATRÍCULAS PARA CALOUROS(PROCESSO SELETIVO)
            elseif ( strtoupper($periodEnrollDate->isSelectiveProc) == DB_TRUE )
            {
                $enrollType = _M('Esta matrícula está sendo feita dentro de um período de matrícula para calouros.', $this->module);
            }
            // MATRÍCULAS PARA VETERANOS
            else
            {
                $enrollType = _M('Esta matrícula está sendo feita dentro de um período de matrícula para veteranos.', $this->module);
            }
            // show period enroll date data, if any
            if ( strlen($periodEnrollDate->beginDate) > 0 && strlen($periodEnrollDate->endDate) > 0 )
            {
                $enrollType .= ' ' . _M('O período de matrícula vai de @1 até @2.', $this->module, $periodEnrollDate->beginDate, $periodEnrollDate->endDate);
            }
            $txtEnrollPeriodInfo = new MText('txtEnrollPeriodInfo', $enrollType);
            $txtEnrollPeriodInfo->setColor('blue');
            $fields[] = $txtEnrollPeriodInfo;

            /*
             * Generate quick access links
             */
            $lnkDiverseConsultation = new MLink('lnkDiverseConsultation', '', $MIOLO->getActionURL($this->module, 'main', null, array('personId' => $contract->personId)), _M('Consultas diversas', $this->module), '_new');
            $lnkScholarshipDescription = new MLink('lnkScholarshipDescription', '', $MIOLO->getActionURL($this->module, 'main:document:scholarshipDescription', null, array('contractId' => $contractId)), _M('Histórico escolar', $this->module), '_new');
            $lnkBulletin = new MLink('lnkBulletin', '', $MIOLO->getActionURL($this->module, 'main:document:bulletinOfNotesAndFrequencies', null, array('contractId' => $contractId, 'learningPeriodId' => $learningPeriodId)), _M('Boletim de notas e frequências', $this->module), '_new');
            $fields[] = new MBaseGroup('bsgQuickAccess', _M('Acesso rápido', $this->module), array($lnkDiverseConsultation, $lnkScholarshipDescription, $lnkBulletin));

            /*
             * List curricular components belonging to the current period of the pupil's class
             */

            $enrollData = $this->busEnroll->getGroupsAvailableForEnroll($contractId, $classId, $learningPeriodId);
            $enrollData = array_values($enrollData);

            $currPeriodTable = $this->generateTable($enrollData, _M('Disponibilidade de matrícula para o período @2 da turma @1', $this->module, $classId, $classActualPeriod));
            $fields[] = $currPeriodTable;

            $args->group = array();
            for ( $i = 0; $i < count($enrollData); $i++ )
            {
                $args->group[$enrollData[$i]->groupId] = $enrollData[$i]->curriculumId;
            }            
            
            /*
             * List of curricular components pending from previous periods
             */

            
            $curriculums = $pendingCurriculumIds = $this->busEnroll->getPendingCurriculumIds($contractId, $classActualPeriod);
            
            // If pending curriculums were found
            if ( count($curriculums) > 0 )
            {
                // Field pending curricular components
                $pendingCurriculumLabel = new MText('pendingCurriculumsLabel', _M('Disciplinas pendentes', $this->module) . ':');
                $pendingCurriculumLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $pendingCurriculumId = new MSelection('pendingCurriculumId', $this->getFormValue('pendingCurriculumId'), null, $curriculums);
                $pendingCurriculumId->setJsHint(_M('Informe a disciplina do currículo a adicionar', $this->module));
                $hctPendingCurriculum = new MHContainer('hctPendingCurriculum', array($pendingCurriculumLabel, $pendingCurriculumId));
                $hctPendingCurriculum->setShowLabel(false);

                // Field pendingGroup
                $pendingGroupLabel = new MText('pendingGroupLabel', _M('Disciplina oferecida', $this->module) . ':');
                $pendingGroupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $pendingGroupId = new MLookupTextField('pendingGroupId', $this->getFormValue('pendingGroupId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('pendingGroupName'), $this->module, 'Group', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'curriculumId' => 'pendingCurriculumId'), true);
                $pendingGroupId->setJsHint(_M('Informe a disciplina oferecida a adicionar', $this->module));
                $pendingGroupName = new MTextField('pendingGroupName', $this->getFormValue('pendingGroupName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $pendingGroupName->setReadOnly(true);
                $pendingGroupName->setJsHint(_M('Nome da disciplina oferecida', $this->module));
                $btnAddGroup = new MButton('btnAddGroup', _M('Adicionar', $this->module), $this->getAjaxAction('manageCustomGroup', 'divPendingGroups', false, array('gridName' => 'pendingGroups', 'gridAction' => 'add')));
                $hctPendingGroup = new MHContainer('hcPendingtGroup', array($pendingGroupLabel, $pendingGroupId, $pendingGroupName, $btnAddGroup));
                $hctPendingGroup->setShowLabel(false);

                $args->gridName = 'pendingGroups';
                // Reset $args->groups to load new ones (the ones the pupil is already enrolled)
                $args->pendingGroups = array();
                for ( $i = 0; $i < count($curriculums); $i++ )
                {
                    $enrollId = $this->busEnroll->getEnrolledEnrollId($curriculums[$i][0], $contractId, $learningPeriodId);
                    if ( strlen($enrollId) > 0 )
                    {
                        $enroll = $this->busEnroll->getEnroll($enrollId);
                        $args->pendingGroups[$enroll->groupId] = $enroll->curriculumId;
                    }
                }

                $pendingGroups = new MDiv('divPendingGroups', $this->manageCustomGroup($args));
                $fields[] = new MBaseGroup('hctGroupAndDiv', _M('Disciplinas pendentes de períodos anteriores', $this->module), array($hctPendingCurriculum, $hctPendingGroup, $pendingGroups), 'vertical');
            }

            /*
             * Open a place where the user can add any group by querying for it
             */

            // Field curriculum
            $customCurricularComponentLabel = new MText('customCurricularComponentLabel', _M('Disciplina do currículo', $this->module) . ':');
            $customCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $customCurricularComponentId = new MLookupTextField('customCurricularComponentId', $this->getFormValue('customCurricularComponentId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('customCurricularComponentVersion', 'customCurricularComponentName', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'customCurriculumId'), $this->module, 'CurricularComponentInCurriculum', null, array('courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'), true);
            $customCurricularComponentId->setJsHint(_M('Informe a disciplina a adicionar', $this->module));
            $customCurricularComponentVersion = new MTextField('customCurricularComponentVersion', $this->getFormValue('customCurricularComponentVersion'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $customCurricularComponentVersion->setReadOnly(true);
            $customCurricularComponentVersion->setJsHint(_M('Versão da disciplina', $this->module));
            $customCurricularComponentName = new MTextField('customCurricularComponentName', $this->getFormValue('customCurricularComponentName'), '', 30);
            $customCurricularComponentName->setReadOnly(true);
            $customCurricularComponentName->setJsHint(_M('Nome da disciplina', $this->module));
            $customCurriculumId = new MHiddenField('customCurriculumId', $this->getFormValue('customCurriculumId'));
            $hctCurriculum = new MHContainer('hctCurriculum', array($customCurricularComponentLabel, $customCurricularComponentId, $customCurricularComponentVersion, $customCurricularComponentName, $customCurriculumId));
            $hctCurriculum->setShowLabel(false);

            // Field group
            $groupLabel = new MText('groupLabel', _M('Disciplina oferecida', $this->module) . ':');
            $groupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $customGroupId = new MLookupTextField('customGroupId', $this->getFormValue('customGroupId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('groupName'), $this->module, 'Group', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'curricularComponentId' => 'customCurricularComponentId', 'curricularComponentVersion' => 'customCurricularComponentVersion'), true);
            $customGroupId->setJsHint(_M('Informe a disciplina oferecida a adicionar', $this->module));
            $groupName = new MTextField('groupName', $this->getFormValue('groupName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $groupName->setReadOnly(true);
            $groupName->setJsHint(_M('Nome da disciplina oferecida', $this->module));
            $btnAddGroup = new MButton('btnAddGroup', _M('Adicionar', $this->module), $this->getAjaxAction('manageCustomGroup', 'divCustomGroups', false, array('gridName' => 'customGroups', 'gridAction' => 'add')));
            $hctGroup = new MHContainer('hctGroup', array($groupLabel, $customGroupId, $groupName, $btnAddGroup));
            $hctGroup->setShowLabel(false);

            $args->gridName = 'customGroups';
            // Reset $args->customGroups to load new ones (the ones the pupil is already enrolled)
            $args->customGroups = array();
            // Get learning period's enroll data
            $enroll = $this->busEnroll->getEnrollByLearningPeriod($contractId, $learningPeriodId);
            // Get already displayed enrolls
            $displayed = $this->getAllSelectedGroups($args);
            // Subtract displayed from all enroll and leave just what was not displayed yet
            for ( $i = 0; $i < count($enroll); $i++ )
            {
                // If same curriculum is already shown elsewhere, don't add it as a custom group
                if ( strlen($displayed[$enroll[$i][2]]) == 0 )
                {
                    $args->customGroups[$enroll[$i][2]] = $enroll[$i][1];
                }
            }

            $customGroups = new MDiv('divCustomGroups', $this->manageCustomGroup($args));
            $fields[] = new MBaseGroup('hctGroupAndDiv', _M('Utilize o campo abaixo para adicionar disciplinas oferecidas não listadas acima', $this->module), array($hctCurriculum, $hctGroup, $customGroups), 'vertical');

            // Finance data display
            if ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') && ($dataLearningPeriod->isFinanceGenerate == DB_TRUE) )
            {
                if( $MIOLO->checkAccess('FrmIncentive', A_EXECUTE, false, true) )
                {
                    $opts['function'] = SForm::FUNCTION_INSERT;
                    $opts['contractPersonId'] = $args->contractPersonId;
                    $opts['contractId'] = $args->contractId;                    
                    $btnIncentive = new MButton('btnInsertIncentive', _M('Inserir incentivo', $this->module), "MIOLO_Window('{$MIOLO->getActionURL('finance', 'main:register:incentive', null, $opts)}', '_blank')");
                    $fields[] = $btnIncentive;
                }
                $fields[] = new MButton('btnSimulate', _M('Simular financeiro', $this->module), $this->getAjaxAction('simulateFinance', 'divFinance'));
                $fields[] = new MDiv('divFinance');
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }

        return new MVContainer('divTables', $fields);
    }

    /**
     * Query all selected groups form every place where groups can be added.
     *
     * @param (stdClass) $args Custom object containing an attribute for each field in the form. This object is queried for its attributes group, pendingGroups and customGroups.
     * @return (array) Array in the format $key => $value, where each key is a groupId and each value is the corresponding curriculumId.
     */
    private function getAllSelectedGroups($args)
    {
        $allGroups = array();
        // Get current period groups
        if ( count($args->group) > 0 )
        {
            foreach ( $args->group as $groupId => $curriculumId )
            {
                $allGroups[$groupId] = $curriculumId;
            }
        }
        // Get pending groups
        if ( count($args->pendingGroups) > 0 )
        {
            foreach ( $args->pendingGroups as $groupId => $curriculumId )
            {
                $allGroups[$groupId] = $curriculumId;
            }
        }
        // Get custom groups
        if ( count($args->customGroups) > 0 )
        {
            foreach ( $args->customGroups as $groupId => $curriculumId )
            {
                $allGroups[$groupId] = $curriculumId;
            }
        }

        return $allGroups;
    }

    /**
     * AJAX call to process all actions for custom groups to be added.
     *
     * @param (stdClass) $args Contains all form values, plus the action to be taken. $args->gridAction may be 'add' or 'delete'.
     * When it is 'add', a new group ($args->customGroupId) is tested and, if ok, added to the list. When it is 'delete', $args->item
     * is checked and excluded from the list of custom groups.
     *
     * @return (array) Array of fields to be added to the results div.
     */
    public function manageCustomGroup($args)
    {
        $MIOLO = MIOLO::getInstance();

        $contractId = $args->contractId;

        $busGroup = new BusinessAcademicBusGroup();
        $busCurriculum = new BusinessAcademicBusCurriculum();
        $busCurricularComponent = new BusinessAcademicBusCurricularComponent();
        $this->busEnroll = new BusinessAcademicBusEnroll();

        try
        {
            $busContract = new BusinessAcademicBusContract();
            $contract = $busContract->getContract($contractId);

            if ( strlen($contract->contractId) == 0 )
            {
                throw new Exception(_M('Contrato @1 não encontrado.', $this->module, $contractId));
            }

            $matricula = new Matricula($contract->contractId, Matricula::MATRICULA_NORMAL);
            $this->enrollConfig = $matricula->obterConfiguracoes();

            // Extract information to be tested
            $gridName = $args->gridName;
            if ( $gridName == 'customGroups' )
            {
                $curriculumId = $args->customCurriculumId;
                $groupId = $args->customGroupId;
                $gridTitle = _M('Outras disciplinas oferecidas', $this->module);
            }
            elseif ( $gridName == 'pendingGroups' )
            {
                $curriculumId = $args->pendingCurriculumId;
                $groupId = $args->pendingGroupId;
                $gridTitle = _M('Disciplinas oferecidas pendentes', $this->module);
            }
            else
            {
                throw new Exception(_M('A tabela especificada (@1) é inválida.', $this->module, $gridName));
            }

            switch ( $args->gridAction )
            {
                case 'add':
                    // Check for non-informed group
                    if ( strlen($groupId) == 0 || strlen($curriculumId) == 0 )
                    {
                        throw new Exception(_M('Por favor selecione uma disciplina oferecida e uma disciplina do currículo para adicionar', $this->module));
                    }

                    $allGroups = $this->getAllSelectedGroups($args);

                    // Check if group has already been used somewhere
                    if ( array_key_exists($groupId, $allGroups) )
                    {
                        throw new Exception(_M('Disciplina oferecida @1 já foi selecionada.', $this->module, $groupId));
                    }

                    // Check if curriculum has already been used somewhere
                    if ( in_array($curriculumId, array_values($allGroups)) )
                    {
                        throw new Exception(_M('O código de currículo @1 já foi selecionado.', $this->module, $curriculumId));
                    }

                    $group = $busGroup->getGroup($groupId);

                    if ( strlen($group->groupId) == 0 )
                    {
                        throw new Exception(_M('Disciplina oferecida @1 não existe.', $this->module, $groupId));
                    }

                    $curriculum = $busCurriculum->getCurriculum($curriculumId);
                    $groupCurriculum = $busCurriculum->getCurriculum($group->curriculumId);

                    if ( strlen($curriculum->curriculumId) == 0 )
                    {
                        throw new Exception(_M('Disciplina selecionada não existe.', $this->module));
                    }

                    if ( $this->busEnroll->isCoursed($curriculum, $contractId) )
                    {
                        throw new Exception(_M('Disciplina selecionada já foi cursada ou possui aproveitamento.', $this->module));
                    }
                    
                    if ( $group->totalEnrolled >= $group->vacant )
                    {
                        throw new Exception(_M('O total de vagas já foi preenchido para esta disciplina.', $this->module));
                    }

                    // if we reached this point, no error ocrrued, so the new group can be added to the respective list
                    $args->{$gridName}[$groupId] = $curriculumId;
                    break;
                case 'delete':
                    if ( property_exists($args, $gridName) )
                    {
                        $newCustomGroups = array();
                        if ( count($args->$gridName) > 0 )
                        {
                            foreach ( $args->$gridName as $groupId => $curriculumId )
                            {
                                if ( $groupId != $args->item )
                                {
                                    $newCustomGroups[$groupId] = $curriculumId;
                                }
                            }
                        }
                        $args->$gridName = $newCustomGroups;
                    }
                    break;
                default:
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }

        // Build the grid which will contain additional groups
        $enrollData = array();
        if ( property_exists($args, $gridName) )
        {
            if ( count($args->$gridName) > 0 )
            {
                foreach ( $args->$gridName as $groupId => $curriculumId )
                {
                    $group = $busGroup->getGroup($groupId);
                    $curriculum = $busCurriculum->getCurriculum($curriculumId);

                    $row = new stdClass();
                    $row->groupId = $groupId;
                    $row->curriculumId = $curriculumId;
                    $row->semester = $group->semester;
                    $row->groupCurricularComponentId = $group->curriculumCurricularComponentId;
                    $row->groupCurricularComponentVersion = $group->curriculumCurricularComponentVersion;
                    $row->groupCurricularComponentName = $group->curriculumCurricularComponentName;
                    $row->curriculumCurricularComponentId = $curriculum->curricularComponentId;
                    $row->curriculumCurricularComponentVersion = $curriculum->curricularComponentVersion;
                    $row->curriculumCurricularComponentName = $curriculum->curricularComponentName;
                    $row->classId = $group->classId;
                    $row->learningPeriodId = $group->learningPeriodId;
                    $row->totalEnrolled = $group->totalEnrolled;
                    $row->vacant = $group->vacant;
                    $row->regimenId = $group->regimenId;
                    $row->regimenDescription = $group->regimenDescription;
                    $row->startDate = $group->startDate;
                    $row->endDate = $group->endDate;

                    // Get information about the last person enroll status on this curriculum id
                    $lastEnroll = $this->busEnroll->getLastEnrollByCurriculumId($contractId, $curriculumId);

                    $row->enrollId = $lastEnroll->enrollId;
                    $row->enrollStatus = $lastEnroll->statusId;
                    $row->enrollStatusDescription = $lastEnroll->statusDescription;
                    $enrollData[] = $row;
                }
            }
        }

        // Do not display checkboxes and allow delete
        $fields[] = $this->generateTable($enrollData, $gridTitle, $gridName, false, true, $gridName);

        return $fields;
    }

    /**
     * Generate a MTableRaw by processing $enrollData parameter, which should contain this structure:
     *
     * $enrollData->curriculumId,
     * $enrollData->semester,
     * $enrollData->curricularComponentId,
     * $enrollData->curricularComponentVersion,
     * $enrollData->curricularComponentName,
     * $enrollData->turnId,
     * $enrollData->turnDescription,
     * $enrollData->unitId,
     * $enrollData->unitName,
     * $enrollData->groupId,
     * $enrollData->classId,
     * $enrollData->periodId,
     * $enrollData->learningPeriodId,
     * $enrollData->totalEnrolled,
     * $enrollData->vacant,
     * $enrollData->regimenId,
     * $enrollData->regimenDescription,
     * $enrollData->startDate,
     * $enrollData->endDate,
     * $enrollData->classId,
     * $enrollData->className,
     * $enrollData->enrollId,
     * $enrollData->enrollStatus,
     * $enrollData->enrollStatusDescription
     *
     * @param (stdClass) $enrollData
     * @param (string) $title Grid title
     * @param (string) $chkBoxName What will be the name of checkboxes. Default is 'group'.
     * @param (boolean) $showControls Whether the checkbox will be displayed (true) or not (false).
     * @param (boolean) $allowDelete Whether the Delete button will be shown (true) or not (false).
     *
     * @return MTableRaw()
     */
    private function generateTable($enrollData, $title, $chkBoxName = 'group', $showControls = true, $allowDelete = false, $gridName = null)
    {
        $MIOLO = MIOLO::getInstance();

        $columns = array(_M('Matrícula', $this->module),
            _M('Disciplina oferecida', $this->module),
            _M('Semestre', $this->module),
            _M('Disciplina', $this->module) . '/' . _M('Horário', $this->module),
            _M('Vagas', $this->module),
            _M('Regime', $this->module),
            _M('Código da matrícula', $this->module),
            _M('Estado de matrícula', $this->module),
            _M('Professores', $this->module));

        $data = array();
        for ( $i = 0; $i < count($enrollData); $i++ )
        {
            $row = array();
            $actions = array();
            $controlName = $chkBoxName . '[' . $enrollData[$i]->groupId . ']';
            if ( $allowDelete )
            {
                $imgUrl = $MIOLO->getUI()->getImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
                $actions[] = new MButton('btnDelGroup', _M('Excluir', $this->module), $this->getAjaxAction('manageCustomGroup', 'div' . ucfirst($gridName), false, array('gridName' => $gridName, 'gridAction' => 'delete', 'item' => $enrollData[$i]->groupId)));
            }

            //Se existirem vagas ou o aluno ja estiver matriculado exibe o checkbox
            if( $enrollData[$i]->totalEnrolled < $enrollData[$i]->vacant || $enrollData[$i]->enrollStatus == 1 )
            {
                if($showControls)
                {
                    //$actions[] = new MCheckBox($controlName, $enrollData[$i]->curriculumId, '', ($enrollData[$i]->enrollStatus == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED')));
                    $actions[] = new MCheckBox($controlName, $enrollData[$i]->curriculumId, '', true);
                }
                else
                {
                    $actions[] = new MHiddenField($controlName, $enrollData[$i]->curriculumId);
                }
            }

            $row[] = $actions;
            $row[] = $enrollData[$i]->groupId;
            $row[] = $enrollData[$i]->semester;

            $fields = array();
            $curricularComponent = $enrollData[$i]->curriculumCurricularComponentId . '/' . $enrollData[$i]->curriculumCurricularComponentVersion . '  - ' . $enrollData[$i]->curriculumCurricularComponentName;
            if ( strlen($enrollData[$i]->groupCurricularComponentId) > 0 && strlen($enrollData[$i]->groupCurricularComponentVersion) > 0 )
            {
                if ( $enrollData[$i]->curriculumCurricularComponentId != $enrollData[$i]->groupCurricularComponentId
                        || $enrollData[$i]->curriculumCurricularComponentVersion != $enrollData[$i]->groupCurricularComponentVersion )
                {
                    $curricularComponent .= ' (' . $enrollData[$i]->groupCurricularComponentId . '/' . $enrollData[$i]->groupCurricularComponentVersion . '  - ' . $enrollData[$i]->groupCurricularComponentName . ')';
                }
            }
            $fields[] = new MText('txtCurricularComponent', $curricularComponent);

            // Show all dates
            if ( $this->enrollConfig->scheduleDisplayMode == 'D' )
            {
                $fields[] = new MTableRaw(null, $this->busEnroll->getScheduleOccurrenceDatesByBeginAndEndHour($enrollData[$i]->groupId), null);
            }
            // Show week days only
            elseif ( $this->enrollConfig->scheduleDisplayMode == 'W' )
            {
                $fields[] = new MTableRaw(null, $this->busEnroll->getScheduleBeginAndEndHoursByWeekDay($enrollData[$i]->groupId), null);
            }
            // Show only group start and end dates
            elseif ( $this->enrollConfig->scheduleDisplayMode == 'B' )
            {
                $fields[] = new MText('txtStartEndDate', $enrollData[$i]->startDate . ' - ' . $enrollData[$i]->endDate);
            }
            else
            {
                if( strlen($enrollConfig->scheduleDisplayMode) > 0 )
                {
                    $msg = _M('Modo de exibição de horário não reconhecido (@1). Verifique a configuração de matrícula.');
                }
                else
                {
                    $msg = _M('Modo de exibição de horário não definido. Verifique a configuração de matrícula.');
                }                     
                throw new Exception($msg, null, $enrollConfig->scheduleDisplayMode);
            }

            $row[] = new MVContainer('divCurricularComponent', $fields);

            $row[] = $enrollData[$i]->totalEnrolled . '/' . $enrollData[$i]->vacant;
            $row[] = $enrollData[$i]->regimenDescription;
            $row[] = $enrollData[$i]->enrollId;
            $row[] = strlen($enrollData[$i]->enrollStatusDescription) > 0 ? $enrollData[$i]->enrollStatusDescription : _M('DISPONÍVEL', $this->module);
            $row[] = $this->busEnroll->getGroupProfessors($enrollData[$i]->groupId);

            $data[] = $row;
        }

        return new MTableRaw($title, $data, $columns);
    }

    public function saveEnroll($args)
    {
        $MIOLO = MIOLO::getInstance();
        $fields = array();

        $busEnroll = new BusinessAcademicBusEnroll();        
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();

        try
        {
            $groups = $this->getAllSelectedGroups($args);

            if ( count($groups) == 0 )
            {
                throw new Exception(_M('Nenhuma disciplina oferecida selecionada.', $this->module));
            }

            if ( !$busEnroll->beginTransaction() )
            {
                throw new Exception(_M('Não foi possível iniciar uma nova transação.', $this->module));
            }

            /*
             * Check pupil's class data
             */
            $busClassPupil = new BusinessAcademicBusClassPupil();
            $classPupil = $busClassPupil->getContractCurrentClass($args->contractId);

            // If pupil has no class, put him into the selected class
            if ( strlen($classPupil->classId) < 1 )
            {
                $newClassPupil = new AcdClassPupil();
                $newClassPupil->classId = $args->pupilClassId;
                $newClassPupil->contractId = $args->contractId;
                $newClassPupil->beginDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));

                if ( !$busClassPupil->insertClassPupil($newClassPupil) )
                {
                    throw new Exception(_M('Erro definindo turma @1 para o contrato @2.', $this->module, $newClassPupil->classId, $newClassPupil->contractId));
                }
            }
            elseif ( $classPupil->classId != $args->pupilClassId )
            {
                $today = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
                $yesterday = $today - 86400;

                $classPupil->endDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'), $yesterday);

                if ( !$busClassPupil->updateClassPupil($newClassPupil) )
                {
                    throw new Exception(_M('Erro cancelando turma @1 para o contrato @2.', $this->module, $classPupil->classId, $classPupil->contractId));
                }

                $newClassPupil = new AcdClassPupil();
                $newClassPupil->classId = $args->pupilClassId;
                $newClassPupil->contractId = $args->contractId;
                $newClassPupil->beginDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));

                if ( !$busClassPupil->insertClassPupil($newClassPupil) )
                {
                    throw new Exception(_M('Erro definindo turma @1 para o contrato @2.', $this->module, $newClassPupil->classId, $newClassPupil->contractId));
                }
            }

            $enrollData = $busEnroll->enroll($args->contractId, $args->learningPeriodId, $groups);
            // if no error occurred, we can commit the transaction. otherwise, an error will be thrown
            $busEnroll->endTransaction();

            $msg = MPrompt::Information(_M('Matrícula salva.', $this->module), 'NONE');

            if ( SAGU::getParameter('ACADEMIC', 'CONTRACT_FORMATION_LEVEL') == DB_TRUE )
            {
                $_args = array('contractId' => $args->contractId);
                $action = $MIOLO->getActionURL($this->module, 'main:document:contractGeneration', null, $_args);
                $msg->addButton( _M('Gerar contrato', $this->module), $action );
            }
            else
            {
                // Link to contract printing
                $vars = array('personId' => $args->contractPersonId, 'learningPeriodId' => $args->learningPeriodId);
                $action = 'window.open(\'' . $MIOLO->getActionUrl($this->module, 'main:document:contract:graduation', null, $vars) . '\')';
                $msg->addButton(_M('Contrato', $this->module), $action);

                // Link to additive term printing
                $vars = array('personId' => $args->contractPersonId, 'learningPeriodId' => $args->learningPeriodId);
                $action = 'window.open(\'' . $MIOLO->getActionUrl($this->module, 'main:document:contract:additiveTerm', null, $vars) . '\')';
                $msg->addButton(_M('Termo aditivo', $this->module), $action);

                // Link to enroll confirmation document
                $vars = array('contractId' => $args->contractId, 'learningPeriodId' => $args->learningPeriodId);
                $action = 'window.open(\'' . $MIOLO->getActionUrl($this->module, 'main:document:enrollConfirmation', null, $vars) . '\')';
                $msg->addButton(_M('Confirmação de matrícula', $this->module), $action);
            }

                        //Não gera informações financeiras

            $dataLearningPeriod = $busLearningPeriod->getLearningPeriod($args->learningPeriodId);
            if ( $dataLearningPeriod->isFinanceGenerate == DB_TRUE )
            {
                // Link to carnet printing
                $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
                $filters = new stdClass();
                $filters->learningPeriodId = $args->learningPeriodId;
                $filters->personId = $args->contractPersonId;
                $filters->isCanceled = DB_FALSE;
                $filters->orderByParcelNumber = DB_TRUE;
                $invoiceIds = $busReceivableInvoice->searchReceivableInvoice($filters);

                $ids = array();
                for ( $i = 0; $i < count($invoiceIds); $i++ )
                {
                    $ids[] = $invoiceIds[$i][0];
                }

                if ( count($ids) > 0 )
                {
                    $action = $MIOLO->getActionUrl('finance', 'main', null, array('invoices' => implode(',', $ids), 'event' => 'generateCarnetByInvoicesPassedByURL'));
                    $opts = array( '_invoiceId' => $ids[0], 'event' => 'submit_button_click' );                    
                    $hrefPrint = $MIOLO->getActionURL( 'finance', "main:process:printInvoice", null, $opts );
                }
                else
                {
                    $action = "javascript:alert('" . _M('Não foram encontrados títulos para gerar o carnê.', $this->module) . "');";
                    $hrefPrint = "javascript:alert('" . _M('Parcela 1 não encontrada. Verifique se os títulos foram gerados corretamente.', $this->module) . "');";
                }
                $msg->addButton(_M('Imprimir carnê', $this->module), $action);
		if ( count($ids) > 0 )
                {
                    $msg->addButton(_M('Imprimir boleto', $this->module), $hrefPrint);
                }
            }

            // Link to start a new enroll
            $msg->addButton(_M('Nova matrícula', $this->module), $MIOLO->getActionUrl($MIOLO->getCurrentModule(), $MIOLO->getCurrentAction()));

            $fields[] = $msg;
        }
        catch ( Exception $e )
        {
            $busEnroll->undoTransaction();
            $this->addError($e->getMessage());
        }

        return $fields;
    }

    /**
     * Simulate the pupil's finance if the enroll were submitted
     *
     * @param (stdClass) $args Object containing all form data
     */
    public function simulateFinance($args)
    {
        $MIOLO = MIOLO::getInstance();

        $fields = array();
        $busEnroll = new BusinessAcademicBusEnroll();        
        try
        {
            if ( !SDatabase::beginTransaction() )
            {
                throw new Exception(_M('Não foi possível iniciar uma nova transação.', $this->module));
            }

            
            /*
             * Check pupil's class data
             */
            $busClassPupil = new BusinessAcademicBusClassPupil();
            $classPupil = $busClassPupil->getContractCurrentClass($args->contractId);

            // If pupil has no class, put him into the selected class
            if ( strlen($classPupil->classId) < 1 )
            {
                $newClassPupil = new AcdClassPupil();
                $newClassPupil->classId = $args->pupilClassId;
                $newClassPupil->contractId = $args->contractId;
                $newClassPupil->beginDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));

                if ( !$busClassPupil->insertClassPupil($newClassPupil) )
                {
                    throw new Exception(_M('Erro definindo turma @1 para o contrato @2.', $this->module, $newClassPupil->classId, $newClassPupil->contractId));
                }
            }
            elseif ( $classPupil->classId != $args->pupilClassId )
            {
                $today = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
                $yesterday = $today - 86400;

                $classPupil->endDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'), $yesterday);

                if ( !$busClassPupil->updateClassPupil($newClassPupil) )
                {
                    throw new Exception(_M('Erro cancelando turma @1 para o contrato @2.', $this->module, $classPupil->classId, $classPupil->contractId));
                }

                $newClassPupil = new AcdClassPupil();
                $newClassPupil->classId = $args->pupilClassId;
                $newClassPupil->contractId = $args->contractId;
                $newClassPupil->beginDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));

                if ( !$busClassPupil->insertClassPupil($newClassPupil) )
                {
                    throw new Exception(_M('Erro definindo turma @1 para o contrato @2.', $this->module, $newClassPupil->classId, $newClassPupil->contractId));
                }
            }

            // when simulating, disable enroll checks (last parameter)
            $enrollData = $busEnroll->enroll($args->contractId, $args->learningPeriodId, $this->getAllSelectedGroups($args), true, false, false, false, false, false, AcdEnroll::MATRICULA_SISTEMA);

            $data = array();
            $parcelNumber = 0;
            $columns = array(_M('Número da parcela', $this->module),
                _M('Data de vencimento', $this->module),
                _M('Valor', $this->module),
                _M('Valor atualizado', $this->module),
                _M('Status', $this->module));


            if ( count($enrollData->invoices) == 0 )
            {
                $fields[] = new MText('txtNoInvoicesMsg', _M('Nenhum título gerado.', $this->module));
            }
            else
            {
                foreach ( $enrollData->invoices as $invoiceId => $invoice )
                {
                    $row = array();

                    $row[] = $invoice->parcelNumber;
                    $row[] = $invoice->maturityDate;

                    $subRow = array();
                    foreach ( $invoice->entries as $entry )
                    {
                        $subRow[] = array($entry->operationDescription,
                            $entry->operationTypeId,
                            $entry->value);
                    }
                    $subRow[] = array(_M('Saldo', $this->module),
                        '',
                        $invoice->balance); // entry value
                    $row[] = new MTableRaw(null, $subRow, null);
                    $row[] = $invoice->balanceWithPolicies;
                    
                    $finStatusDoTitulo = new FinStatusDoTituloLog();                    
                    $status = $finStatusDoTitulo->obtemStatusDoTituloLog($invoiceId);                                        
                    $row[] = $status; 

                    $data[] = $row;
                }

                // Table where invoices data will be displayed
                $fields[] = new MTableRaw(_M('Simulação de títulos', $this->module), $data, $columns);
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }

        
        // Undo current transaction, since we're simulating
        SDatabase::rollback();

        return $fields;
    }
}
?>
