<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Confirmacao de matricula
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe SAGU [sagu@solis.com.br]
 *
 * @since
 * Class created on 01/02/2013
 */
class FrmConfirmEnrollAcd extends SForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Confirmação de matrícula', $module), null, null);

        // Desabilita alguns botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }
    
    /**
     * @return array
     */
    public function getGridData()
    {
        $filters = new stdClass();
        $filters->contractId = MIOLO::_REQUEST('contractId');
        
        // TODO Descomentar linha abaixo
//        $filters->learningPeriodId = MIOLO::_REQUEST('learningPeriodId');
        
        return (array) AcdEnroll::searchPreEnrollCurricularComponents($filters);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $contractId = MIOLO::_REQUEST('contractId');
        $learningPeriodId = MIOLO::_REQUEST('learningPeriodId');

        $fields[] = new MHiddenField('limbo', '');
        $fields[] = new SLookupContract('contractId');

        $fields[] = $learningPeriod = new SLookupContainer('learningPeriodId', $this->getRequestValue('learningPeriodId'), array(
            'required' => true,
            'label' => _M('Período letivo', $module),
            'module' => 'academic',
            'item' => 'LearningPeriod',
            'filter' => array('courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'),
        ));

        $validators[] = new MRequiredValidator('learningPeriodId', _M('Período letivo', $module));

        $fields[] = new MButton('btnSearch', _M('Pesquisar', $module));

        if ( strlen($contractId) > 0 )
        {
            $contract = new AcdContract();
            $enrollConfirm = new AcdEnrollConfirm();
            
            $matricula = new Matricula($contractId, Matricula::MATRICULA_NORMAL); // FIXME Deve ser visto quando pegar WEB e/ou NORMAL
            $enrollConfig = $matricula->obterConfiguracoes();
            $confirmation = $enrollConfirm->findByContractAndLP($contractId, $learningPeriodId);
            
            $row = $contract->findByPk($contractId);
            $row instanceof AcdContract;
            
            $ultimaMov = $row->obterUltimaMovimentacaoContratual();
            $movimentacao = $ultimaMov->statecontract instanceof AcdStateContract ? $ultimaMov->statecontract->description : '-';

            $fields[] = new MTextLabel('lastmovement', $movimentacao, _M('Última movimentação', $module));

            $flds[] = new MSelection('contractSigned', SAGU::NVL($this->getRequestValue('contractSigned'), $confirmation->contractSigned), _M('Contrato assinado', $module) . ':', SAGU::listYesNo());
            
            if ( $enrollConfig instanceof AcdEnrollConfig && $row->alunoVerificaPrimeiraParcela($enrollConfig, $learningPeriodId) )
            {
                $userVal = SAGU::getYesNo( sPreMatricula::pagouPrimeiraParcela($contractId, $learningPeriodId) ? DB_TRUE : DB_FALSE );
                $flds[] = new MTextLabel('payFirst', $userVal, _M('Pagou primeira parcela', $module) . ':');

                $flds[] = new MSeparator('<br/>');
            }
            
            if ( $enrollConfig instanceof AcdEnrollConfig && $row->alunoVerificaConfirmacaoPortal($enrollConfig, $learningPeriodId) )
            {
                $userVal = SAGU::getYesNo( $confirmation->confirmationStudent == DB_TRUE ? DB_TRUE : DB_FALSE );
                $flds[] = new MTextLabel('hasConfirmation', $userVal, _M('Teve confirmação no portal do aluno', $module) . ':');
            }
            
            $fields[] = new MBaseGroup('bgrInfo', _M('Confirmação de matrícula', $module), $flds, 'vertical');
            
            // Grid
            $columns[] = new SGridColumn('', _M('Código da matrícula', $module), 'left', array('visible' => false));
            $columns[] = new SGridColumn('', _M('Código do período', $module), 'left', array());
            $columns[] = new SGridColumn('', _M('Cod. disciplina', $module), 'left', array());
            $columns[] = new SGridColumn('', _M('Disciplina', $module), 'left', array());
            $columns[] = new SGridColumn('', _M('Professor', $module), 'left', array());
            $columns[] = new SGridColumn('', _M('Horário', $module), 'left', array());
            $columns[] = new SGridColumn('', _M('Sala', $module), 'left', array());
            $columns[] = new SGridColumn('', _M('Carga horária - créditos', $module), 'left', array());
            $columns[] = new SGridColumn('', _M('Nota', $module), 'left', array());
            $columns[] = new SGridColumn('', _M('Frequência', $module), 'left', array());
            $columns[] = new SGridColumn('', _M('Estado', $module), 'left', array());
            $columns[] = new SGridColumn('', _M('Turma', $module), 'left', array());

            $grid = new SGrid(null, $columns);
            $grid->disablePagination();
            $grid->disableColumnSorting();            
            $grid->setData( $this->getGridData() );
            $fields[] = $grid;
            
            $fields[] = new MSeparator();
            $fields[] = new MButton('btnSave', _M('Salvar', $module));
        }

        $this->SetFields($fields);
        $this->SetValidators($validators);

        parent::defineFields();
    }

    public function btnSave_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $contractId = MIOLO::_REQUEST('contractId');
        $learningPeriodId = MIOLO::_REQUEST('learningPeriodId');
        $contractSigned = MIOLO::_REQUEST('contractSigned');
        
        $matricula = new Matricula($contractId, Matricula::MATRICULA_NORMAL); // FIXME Deve ser visto quando pegar WEB e/ou NORMAL
        $enrollConfig = $matricula->obterConfiguracoes(false);

        try
        {
            SDatabase::beginTransaction();
            
            $ecFind = new AcdEnrollConfirm();
            $row = $ecFind->findByContractAndLP($contractId, $learningPeriodId);

            // Se ja existir o registro, utiliza o da base, senao, insere novo
            $enrollConf = $row instanceof AcdEnrollConfirm ? $row : new AcdEnrollConfirm();                
            $enrollConf->learningPeriodId = $learningPeriodId;
            $enrollConf->contractId = $contractId;
            $enrollConf->contractSigned = $contractSigned;                        
            $enrollConf->save();
            
            if ( sPreMatricula::confirmacaoPortal($enrollConfig, $contractId, $learningPeriodId) )
            {
                sPreMatricula::confirmacaoDePreMatricula($contractId, $learningPeriodId);
            }
            
            SDatabase::commit();
            
            $MIOLO->information(_M('Matrícula confirmada com sucesso', $module));
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            
            $this->AddError($e->getMessage());
        }
    }
}
?>