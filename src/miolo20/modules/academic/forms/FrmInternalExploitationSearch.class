<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdEnroll table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 21/11/2005
 *
 * */
class FrmInternalExploitationSearch extends SForm
{
    /**
     * Construtor da classe
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        parent::__construct( _M('Localizar', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filters = $this->getTypesData();

        $MIOLO->getClass('academic', 'lookupContract');
        $fields[] = new SLookupContract('contractId', $filters);

        $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');
        $validators[] = new MIntegerValidator('contractPersonId', _M('Pessoa', $module));

        //Parâmetros para o lookup
        $fields[] = new MHiddenField('hideContractIdField', DB_TRUE);
        $fields[] = new MHiddenField('checkNumberHours', DB_TRUE);
        $fields[] = new MHiddenField('statusEnrolled', DB_FALSE);

        //Field curriculum
        $newCurriculumIdS = new MHiddenField('newCurriculumIdS', $this->newCurriculumIdS->value);
        $fields[] = $newCurriculumIdS;

        //Field curricular component
        $newCurricularComponentLabelS = new MText('newCurricularComponentLabelS', _M('Disciplina do currículo a aproveitar', $module) . ':');
        $newCurricularComponentLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $newCurricularComponentLabelS->setClass('m-caption m-caption-required');
        $newCurricularComponentId = new MLookupTextField('newCurricularComponentId', $this->getFormValue('newCurricularComponentId', $this->newCurricularComponentId->value), _M('Código da disciplina', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array( 'newCurricularComponentVersion', 'newCurricularComponent', 'newCurriculumId', 'limbo', 'limbo', 'limbo', '', '', '' ), $module, 'CurriculumFaultToConclue', null, array( 'contractId' => 'contractId', 'hideContractIdField' => 'hideContractIdField', 'checkNumberHours' => 'checkNumberHours', 'statusEnrolled' => 'statusEnrolled' ), true);
        $newCurricularComponentId->setJsHint(_M('Informe o código da disciplina', $module));
        
        $newCurricularComponentId->addAttribute('onchange', SForm::getAjaxAction('obtemEletiva', 'divEletiva', null, $filters));
        $newCurricularComponentId->setAutoPostBack(true);
        
        $validators[] = new MRequiredValidator('newCurricularComponentId', _M('Disciplina', $module));
        $newCurricularComponentVersion = new MTextField('newCurricularComponentVersion', $this->GetFormValue('newCurricularComponentVersion', $this->newCurricularComponentVersion->value), _M('Versão da disciplina', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $newCurricularComponentVersion->setJsHint(_M('Versão da disciplina', $module));
        $newCurricularComponentVersion->setReadOnly(true);
        $newCurricularComponent = new MTextField('newCurricularComponent', $this->GetFormValue('newCurricularComponent', $this->newCurricularComponent->value), _M('Disciplina', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $newCurricularComponent->setJsHint(_M('Nome da disciplina', $module));
        $newCurricularComponent->setReadOnly(true);
        $hctCurriculumS = new MHContainer('hctCurriculumS', array( $newCurricularComponentLabelS, $newCurricularComponentId, $newCurricularComponentVersion, $newCurricularComponent ));
        $hctCurriculumS->setShowLabel(false);
        $fields[] = $hctCurriculumS;
        
        $fields[] = new MDiv('divEletiva', $this->obtemEletiva($filters));
        
        $fields[] = new MButton('btnSearch', _M('Localizar', $module));
        $fields[] = new MSeparator('');

        $this->setFields($fields);
        $this->setValidators($validators);

        // get form values
        $contractId = $this->contractId->value;
        $curriculumId = $this->newCurriculumIdS->value;
        $curricularComponentId = $this->newCurricularComponentId->value;
        $curricularComponentVersion = $this->newCurricularComponentVersion->value;

        if ( (strlen($contractId) > 0) && (strlen($curricularComponentId) > 0) && (strlen($curricularComponentVersion) > 0) )
        {
            try
            {
                $businessContract = new BusinessAcademicBusContract();
                $contractData = $businessContract->getContract($contractId);
            }
            catch ( Exception $e )
            {
                $msg = _M('Erro ao buscar dados do contrato.', $module) . ' ' . $e->getMessage();
                $this->addError($msg);
            }

            if ( strlen($contractData->conclusionDate) > 0 )
            {
                //Contrato fechado
                $msg = _M('Este contrato está fechado e o sistema não permite o cadastro de aproveitamentos em contratos nesta situação.', $module);
                $this->addError($msg);
            }
            else
            {
                try
                {
                    $busCurriculum = new BusinessAcademicBusCurriculum();
                    $isFromCurriculum = $busCurriculum->isFromCurriculum($contractData->courseId, $contractData->courseVersion, $contractData->turnId, $contractData->unitId, $curricularComponentId, $curricularComponentVersion);
                }
                catch ( Exception $e )
                {
                    $msg = _M('Erro obtendo dados do currículo. ', $module) . $e->getMessage();
                    $this->addError($msg);
                }

                if ( !$isFromCurriculum )
                {
                    $msg = _M('Esta disciplina não pertence a este currículo.', $module);
                    $this->addError($msg);
                }
                else
                {
                    $filters = new stdClass();
                    $filters->courseId = $contractData->courseId;
                    $filters->courseVersion = $contractData->courseVersion;
                    $filters->turnId = $contractData->turnId;
                    $filters->unitId = $contractData->unitId;
                    $filters->curricularComponentId = $curricularComponentId;
                    $filters->curricularComponentVersion = $curricularComponentVersion;

                    try
                    {
                        $resultCurriculum = $busCurriculum->searchCurriculum($filters);

                        $curriculumId = $resultCurriculum[0][0];
                    }
                    catch ( Exception $e )
                    {
                        $msg = _M('Erro obtendo dados do currículo. ', $module) . $e->getMessage();
                        $this->addError($msg);
                    }

                    if ( strlen($curriculumId) > 0 )
                    {
                        try
                        {
                            $busEnroll = new BusinessAcademicBusEnroll();
                            $isCoursed = $busEnroll->checkIfCoursed($contractId, $curriculumId, true);
                        }
                        catch ( Exception $e )
                        {
                            $msg = _M('Erro obtendo dados da matrícula. ', $module) . $e->getMessage();
                            $this->addError($msg);
                        }

                        if ( $isCoursed )
                        {
                            $msg = _M('Esta disciplina já foi cursada', $module);
                            $this->addError($msg);
                        }
                        else
                        {
                            $filters = new stdClass();
                            $filters->contractId = $contractId;
                            $filters->newCurricularComponentId = $curricularComponentId;
                            $filters->curriculumId = $curriculumId;

                            //Dados
                            $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdInternalExploitationSearch', $filters);
                            $grdResults->setTitle(_M('Disciplinas cursadas em outros contratos disponíveis para aproveitamento.', $module));

                            try
                            {
                                $business = new BusinessAcademicBusInternalExploitation();
                                $gridData = $business->searchContractExploitableEnroll($contractId);
                            }
                            catch ( Exception $e )
                            {
                                $msg = _M('Erro obtendo matrículas aproveitáveis. ', $module) . $e->getMessage();
                                $this->addError($msg);
                            }

                            $grdResults->setData($gridData);
                            $this->addField($grdResults);
                            
                            //Dados disciplinas mesmo curriculo
                            $grdMesmoContrato = $MIOLO->getUI()->getGrid($module, 'GrdInternalExploitationSearch', $filters);
                            $grdMesmoContrato->setTitle(_M('Disciplinas cursadas no mesmo contrato disponíveis para aproveitamento.', $module));
                            
                            /*
                             * Obtem as disciplinas do mesmo curriculo
                             * searchContractExploitableEnrollInSameContract()
                             * 
                             */
                            try
                            {
                                $busInternalExploitation = new BusinessAcademicBusInternalExploitation();
                                $gridDataMesmoContrato = $busInternalExploitation->searchContractExploitableEnrollInSameContract($contractId);
                            }
                            catch ( Exception $e )
                            {
                                $msg = _M('Erro obtendo matrículas aproveitáveis do mesmo contrato. ', $module) . $e->getMessage();
                                $this->addError($msg);
                            }
                            
                            $grdMesmoContrato->setData($gridDataMesmoContrato);
                            $this->addField($grdMesmoContrato);
                        }
                    }
                    else
                    {
                        $msg = _M('Problemas ao buscar o código da matriz curricular. Verifique o cadastro da disciplina no curso do contrato.', $module);
                        $this->addError($msg);
                    }
                }
            }
        }

        $this->page->onLoad('setInitialFocus(document.' . $this->name . ');');
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        parent::defineFields();
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        // get filters values
        $data = new lookupContract();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->getFormValue($var);
        }
        
        $data->electiveCurriculumId = MIOLO::_REQUEST('electiveCurriculumId');
        
        return $data;
    }
    
    /*
     * Retorna combo box caso a disciplina escolhida seja uma eletiva.
     * 
     */
    public function obtemEletiva($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
     
        $filters->curricularComponentId = MIOLO::_REQUEST('newCurricularComponentId');
        $filters->curricularComponentVersion = MIOLO::_REQUEST('newCurricularComponentVersion');
        $filters->courseVersion = MIOLO::_REQUEST('contractCourseVersion');
        $filters->turnId = MIOLO::_REQUEST('contractTurnId');
        $filters->unitId = MIOLO::_REQUEST('contractUnitId');

        if($filters->curricularComponentId)
        {
            $business = new BusinessAcademicBusCurriculum();
            $curriculumData = $business->searchCurriculum($filters);
                        
        }
        
        if($curriculumData[0][23] == SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_TYPE_ELECTIVE'))
        { 
            $filter->courseId = $curriculumData[0][1];
            $filter->courseVersion = $curriculumData[0][2];
            $filter->turnId = $curriculumData[0][4];
            $filter->unitId = $curriculumData[0][6];
            $filter->curricularComponentGroupElectiveId = $curriculumData[0][15];

            //Obtém as disciplinas vínculadas a uma determinada disciplina eletiva.
            $busCurriculum = new BusinessAcademicBusCurriculum();
            $options = $busCurriculum->optionEletive($filter);
            
            $electiveCurriculumLabel = new MText('electiveCurriculumLabel', _M('Opção de eletiva', $module) . ':');
            $electiveCurriculumLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $electiveCurriculumLabel->setClass('m-caption m-caption-required');
            $electiveCurriculumLabel->addBoxStyle('text-align', 'right'); //alinhar label
            $electiveCurriculumId = new MComboBox('electiveCurriculumId', null, '',$options);
            $electiveCurriculumId->setAutoPostBack(true);
            $validators[] = new MIntegerValidator('electiveCurriculumId', _M('Opção de eletiva', $module), 'required');
            $eletiveCurriculum = new MHContainer('hctElectiveCurriculum', array( $electiveCurriculumLabel,$electiveCurriculumId ));
            $eletiveCurriculum->setShowLabel(false);
            $flds[] = $eletiveCurriculum;
            
            $eletiveField = new MVContainer('eletiveField', $flds);
            
            $this->SetValidators($validators);
            return $eletiveField;
        }
    }
}
?>
