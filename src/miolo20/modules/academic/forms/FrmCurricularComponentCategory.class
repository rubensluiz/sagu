<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Categoria de disciplina
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 27/03/2012
 *
 **/
class FrmCurricularComponentCategory extends SManagementForm
{
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);
        parent::__construct(new AcdCurricularComponentCategory(), array('curricularComponentCategoryId'));
    }


    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            
            $fields[]  = new MTextLabel('', $pk->curricularComponentCategoryId, _M('Código',$module));
            $fields[]  = new MHiddenField('curricularComponentCategoryId', $pk->curricularComponentCategoryId);
            
            $data = new AcdCurricularComponentCategory($pk->curricularComponentCategoryId);
        }
        else
        {
            // Codigo
            $fields[] = $codigo = new MTextField('curricularComponentCategoryId', $this->getFormValue('curricularComponentCategoryId',$data->curricularComponentCategoryId), _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $codigo->setJsHint(_M('Informe o código da categoria',$module));
            $validators[] = new MRequiredValidator('curricularComponentCategoryId', _M('Código', $module));
        }

        // Descricao
        $description = new MTextField('description', $this->getFormValue('description',$data->description), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Ex: teórica, prática', $module));
        $description->setJsHint(_M('Informe a descrição da categoria',$module));
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description');

        parent::defineFields($fields, $validators, $data);
    }
}
?>
