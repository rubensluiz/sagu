<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/12/2005
 *
 **/

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmMinimumTurnUnblock extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        
        parent::__construct( new acdCurricularComponentUnblock(), array('curricularComponentUnblockId'), 'BusMinimumTurnUnblock' );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array('update', 'delete')) )
        {
            $curricularComponentUnblockId = MIOLO::_REQUEST('curricularComponentUnblockId');

            $business = $this->busObject;
            $data     = $business->getMinimumTurnUnblock($curricularComponentUnblockId);

            $fields[]  = new MHiddenField('curricularComponentUnblockId', $curricularComponentUnblockId);
            $fields[]  = new MTextLabel('curricularComponentUnblockId', $data->curricularComponentUnblockId, _M('Código', $module));
        }

        if ($function == 'insert')
        {
            $businessPeriod = new BusinessAcademicBusPeriod();
            $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
            $periodId->setJsHint(_M('Selecione um período', $module));
            $fields[] = $periodId;
            
            $lookupFilters = array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId');
        }
        else
        {
            $lookupFilters = array('courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId');
        }

        $filters = $this->getTypesData();
        
        //Field lookup contract
        $filters = is_object($data) ? $data : $this->getTypesData();
        
        $fields[] = new MHiddenField('limbo', '');
        $MIOLO->getClass( 'academic', 'lookupContract' );
        $fields[] = new SLookupContract('contractId', $filters);
        
        $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');
        $validators[] = new MIntegerValidator('contractPersonId', _M('Pessoa', $module));
        
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Período letivo', $module) . ':');
        $learningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));      
        $learningPeriodLabelS->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$data->learningPeriodId), _M('Código do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('periodId', null, null, null, null, 'learningPeriod'), $module, 'LearningPeriod', null, $lookupFilters, true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo',$module), 'required');
        $learningPeriod = new MTextField('learningPeriod', $this->getFormValue('learningPeriod',$data->learningPeriod), _M('Período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriod->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriod->setReadOnly(true);
        $hctlearningPeriod = new MHContainer('hctlearningPeriod', array($learningPeriodLabelS, $learningPeriodId, $learningPeriod));
        $hctlearningPeriod->setShowLabel(false);
        $fields[]    = $hctlearningPeriod;    

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Última modificação', $module));
        }

        $fields[] = new Separator('');
        
        parent::defineFields($fields, $validators, $data);

        if ( $function == 'insert' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        }
        elseif ( $function == 'delete' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);            
        }

    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
    }
    
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $busContract = new BusinessAcademicBusContract();

        $data   = $this->getTypesData();
        
        $business = $this->busObject;

        $filters1->contractId       = $data->contractId;
        $filters1->learningPeriodId = $data->learningPeriodId;

        $searchMinimumTurnUnblock = $business->searchMinimumTurnUnblock($filters1);
        
        $curricularComponentUnblockId = $this->getFormValue('curricularComponentUnblockId', $this->curricularComponentUnblockId->value);

        if (    ( count($searchMinimumTurnUnblock) > 0 && $function == 'insert')
             || ( $searchMinimumTurnUnblock[0][0] != $curricularComponentUnblockId && count($searchMinimumTurnUnblock) > 0 )  )
        {
            //Ja existe um desbloqueio para esta disciplina, periodo letivo e contrato
            $this->addError(_M('Já existe desbloqueio para este contrato e período letivo', $module) . '.');
        }
        else
        {
            foreach ( $data as $key1 => $value1 )
            {
                $opts["$key1"] = $value1;
            }
    
            $opts['function'] = $function;
            $opts['event']    = 'tbBtnSave_confirm';
    
            $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
    
            unset($opts['event']);
    
            $goto    = SAGU::getStackBackUrl();
            $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
    
            $msg = _M('Você tem certeza que quer inserir desbloqueio por turno para este aluno e este período letivo', $module) . '?' ;
    
            $msg .= '<br><br>' . $data->learningPeriodDescription . '<br><br>' . _M('Aluno', $module). ' ' . $data->personName . '<br><br>';
    
            $caption = _M('Questão',$module);
            $MIOLO->question($msg, $gotoYes, $gotoNo);
        }
    }


    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_confirm($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        
        try        
        {
            $business = $this->busObject;
            
            $opts = array('curricularComponentUnblockIdS'=>$data->curricularComponentUnblockId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
            
            if ( $function == 'update' )
            {
                $ok  = $business->updateMinimumTurnUnblock($data);
                
                $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $goto);
            }
            else
            {
                $ok  = $business->insertMinimumTurnUnblock($data);
                
                $opts    = array('event'=>'tbBtnNew_click',
                                    'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                
                $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED'), $gotoYes, $goto);
            }
            
        }
        catch( Exception $e )
        {
            $this->addError( _M('Erro executando a operação requerida', $module) . '. ' . $e->getMessage() );
        }
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        
        foreach ( $vars as $var => $value )
        {
            if ( $var != 'description' )
            {
                $data->$var = $this->getFormValue($var, $this->$var->value);
            }
        }

        $data->learningPeriodDescription = $this->getFormValue('learningPeriod', $this->learningPeriod->value);
        $data->personName                = $this->getFormValue('contractPersonName', $this->contractPersonName->value);

        return $data;
    }
}

?>
