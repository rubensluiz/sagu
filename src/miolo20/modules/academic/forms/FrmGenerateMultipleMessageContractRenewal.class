<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * GenerateMultipleMessageContractRenewal form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 27/01/2006
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmGenerateMultipleMessageContractRenewal extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {

        $module = MIOLO::getCurrentModule();

        parent::__construct( _M('Gerar diversas mensagens de renovação contratual', $module), new AcdMessageContractRenewal(), 'messageContractRenewalId' );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();       

        $fields[]  = new MHiddenField('messageContractRenewalId', $messageContractRenewalId);

        $learningPeriodId  = new MHiddenField('learningPeriodId');
        $fields[] = $learningPeriodId;

        $periodId = $_GET['periodId'] ? $_GET['periodId'] : $_POST['periodId'];
        $fields[] = new MTextLabel('periodId', $periodId, _M('Período',$module));
        $fields[] = new MHiddenField('periodId', $periodId);
        $fields[] = new Separator('');        

        $messageLabel = new MText('messageLabel', _M('Mensagem', $module) . ':');
        $messageLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $messageLabel->setClass('m-caption m-caption-required');
        
        $message = new MMultiLineField('message', $this->getFormValue('message', $data->message), '', 100, 5, 40);
        $message->setJsHint(_M('Informe a mensagem', $module));
        
        $messageSearch = new MLookupField('messageSearch', null, '', _M('Clique para localizar mensagens', $module), 'limbo, limbo, limbo, limbo, limbo, limbo, message, font, sequence, length, isListener, status', $module, 'MessageContractRenewal');
        
        $hctMessage = new MHContainer('hctMessage', array($messageLabel, $message, $messageSearch));
                
        $fields[] = $hctMessage;
        
        $opts = array (
                        'D' => _M('Padrão',$module),
                        'B' => _M('Negrito',$module),
                        'I' => _M('Itálico',$module)
                      );

        $font = new MSelection('font', $this->getFormValue('font', $data->font), _M('Fonte',$module), $opts);
        $font->setJsHint(_M('Informe a fonte', $module));
        $fields[] = $font;
        $validators[] = new MRequiredValidator('font');

        $opts = array (
                        '1'  => _M('Um',$module),
                        '2'  => _M('Dois',$module),
                        '3'  => _M('Três',$module),
                        '4'  => _M('Quatro',$module),
                        '5'  => _M('Cinco',$module),
                        '6'  => _M('Seis',$module),
                        '7'  => _M('Sete',$module),
                        '8'  => _M('Oito',$module),
                        '9'  => _M('Nove',$module),
                        '10' => _M('Dez',$module)
                      );

        $sequence = new MSelection('sequence', $this->getFormValue('sequence', $data->sequence), _M('Sequência',$module), $opts);
        $sequence->setJsHint(_M('Informe a sequência', $module));
        $fields[] = $sequence;
        $validators[] = new MRequiredValidator('sequence');

        $length = $this->getFormValue('length', $data->length);
        $length = new MTextField('length', $length ? $length : SAGU::getParameter('ACADEMIC', 'DEFAULT_LINE_CHARS'), _M('Caracteres por linha',$module), 5);
        $length->setJsHint(_M('Informe o número de caracteres por linha', $module));
        $fields[] = $length;
        $validators[] = new MRequiredValidator('length');

        $isListenerLabel = new MText('isListenerLabel', _M('É ouvinte',$module) . '?');
        $isListenerLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $isListenerLabel->setClass('m-caption m-caption-required');

        $isListener = $this->GetFormValue('isListener',$data->isListener);
        if (! isset($isListener) )
        {
            $isListener = 'f';
        }

        $isListener = new MRadioButtonGroup('isListener', '', SAGU::listYesNo(1), $isListener, null, 'horizontal');
        $isListener->SetShowLabel(false);

        $hctIsListener = new MHContainer('hctIsListener', array($isListenerLabel, $isListener));
        $fields[]  = $hctIsListener;

        $busMessageContractRenewal = new BusinessAcademicBusMessageContractRenewal();
        $status = new MSelection('status', $this->getFormValue('status', $data->status), _M('Estado',$module), $busMessageContractRenewal->listStatus());
        $status->setJsHint(_M('Informe o estado', $module));
        $fields[] = $status;
        $validators[] = new MRequiredValidator('status');
       
        $fields[] = new Separator('');
        
        $fields[]     = new MButton('btnGenerate', _M('Gerar', $module));

        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }
    
    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data     = $this->getTypesData();
        $business  = new BusinessAcademicBusMessageContractRenewal();
        $business2 = new BusinessAcademicBusGenerateMultipleDataInLot();

        $learningPeriods = unserialize(urldecode(stripslashes(MIOLO::_request('learningPeriods'))));
        $periodId        = $this->getFormValue('periodId');
        $x = 0;

        $business2->beginTransaction();

        foreach ( $learningPeriods as $value )
        {
            $data->learningPeriodId  = $value;

            $ok  = $business->insertMessageContractRenewal($data);

            if ( $ok )
            {
                $x++;
            }
        }

        $business2->commit();

        $msg = _M('@1 registros inseridos', $module, $x);

        if ( $x > 0 )
        {
            $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleMessageContractRenewalCourse';
            $goto = $MIOLO->getActionURL($module, $postAction, null, null);

            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $opts['periodId']         = $periodId;
            $opts['learningPeriods'] = urlencode(serialize($learningPeriods));

            $msg  = _M('Erro executando a operação solicitada.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }

        return $data;
    } 
}

?>
