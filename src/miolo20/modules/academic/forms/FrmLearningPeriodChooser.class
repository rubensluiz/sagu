<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulario responsável pela escolha do período letivo que deverá ser
 * utilizado nos próximos passos, caso seja necessário.
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 03/03/2011
 *
 **/
class FrmLearningPeriodChooser extends FrmLearningPeriodFather
{
    /*
     * Construtor da classe
     */
    public function __construct($steps = null)
    {
        if ( !$steps->disableConstruct )
        {
            parent::__construct($steps, null, new acdLearningPeriod(), array('learningPeriodId'));
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( $this->isFirstAccess() )
        {
            $this->cleanStepData();
            if ( SAGU::getEventName() != 'nextStepButton:click' )
            {
                MSubDetail::clearData('learningPeriodDuplicate');
                MSubDetail::clearData($this->getDegreesId());
            }
        }
        
        $busTurn = new BusinessBasicBusTurn();
        $busUnit = new BusinessBasicBusUnit();
        $businessLearnigPeriod = new BusinessAcademicBusLearningPeriod();
        $businessFormationLevel = new BusinessAcademicBusFormationLevel();

        //Load data
        $allData = $this->getStepData();
        $data    = $this->getStepDataByForm(__CLASS__);
        
        $learningPeriodId = MIOLO::_REQUEST('learningPeriodId');
        
        if ( strlen($learningPeriodId) > 0 && $this->isFirstAccess() )
        {
            $data = $businessLearnigPeriod->getLearningPeriod($learningPeriodId);            
            $courseId = ($data->courseId) ? $data->courseId : null;
            
            if( strlen($data->previousLearningPeriodId) > 0 )
            {
                 $data->learningPeriodIdChooser = $data->previousLearningPeriodId;
                 $data->learningPeriodChooserDescription = $businessLearnigPeriod->getLearningPeriod($data->previousLearningPeriodId)->previousLearningPeriodDescription;                 
            }
        }

        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $courseIdHidden = new MHiddenField('courseId', $courseId);
            $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo anterior', $module) . ':');
            $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $learningPeriodId = new MLookupTextField('learningPeriodIdChooser', $this->getFormValue('learningPeriodIdChooser', $data->learningPeriodIdChooser), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodChooserDescription', $module, 'learningPeriod', null, array( 'courseId' => 'courseId' ), true);
            $learningPeriodId->setJsHint(_M('Informe o código do período letivo anterior', $module));
            $learningPeriodDescription = new MTextField('learningPeriodChooserDescription', $this->getFormValue('learningPeriodChooserDescription', $data->learningPeriodChooserDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $learningPeriodDescription->setReadOnly(true);
            $learningPeriodDescription->setJsHint(_M('Descrição do período letivo anterior',$module));
            $fields[] = $selectiveProcess = new MHContainer('learningPeriodCnt',array($courseIdHidden, $learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
            $selectiveProcess->showLabel = true;
            $validators[] = new MIntegerValidator('learningPeriodIdChooser', _M('Período letivo', $module));
        }
        else
        {
            // Subdetail
            $msg = new MLabel(_M('* Caso sejam adicionados valores nesta lista, ao finalizar o passo a passo serão gerados N períodos letivos de uma única vez.', $module));
            $campos[] = $div = new MDiv('div', $msg);
            $div->addBoxStyle(null, 'width:690px;float:left;');
            
            $valid = array();

            $campos[] = $courseOccurrence = new SCourseOccurrenceLookup(null, false, '', 'courseId,courseVersion,courseName,turnId,turnDescription,unitId,unitDescription,formationLevelId');
            $courseOccurrence->addAttribute('onChange', 'validaPeriodo();');
            
            $this->page->addJsCode("
                function validaPeriodo()
                {
                    var _learningPeriodId = document.getElementById('_learningPeriodId').value;                    
                    if( _learningPeriodId != '' )
                    {
                        document.getElementById('_learningPeriodId').value = '';
                        document.getElementById('_learningPeriodDescription').value = '';
                    }
                }
            ");
            
            $courseOccurrence->setRequiredValidators($valid);


            // Periodo letivo
            $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
            $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $learningPeriodId = new MLookupTextField('_learningPeriodId', $this->getFormValue('_learningPeriodId', $data->_learningPeriodId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,courseId,courseVersion,turnId,unitId,_learningPeriodDescription,formationLevelId,limbo,limbo,limbo,limbo,limbo,limbo,limbo,limbo,limbo,courseName,turnDescription,unitDescription', $module, 'learningPeriod', null, array('courseId' => 'courseId'), true);
            $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
            $learningPeriodDescription = new MTextField('_learningPeriodDescription', $this->getFormValue('_learningPeriodDescription', $data->_learningPeriodDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $learningPeriodDescription->setReadOnly(true);
            $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
            $formationLevelIdHidden = new MHiddenField('formationLevelId', $this->getFormValue('formationLevelId', $data->formationLevelId));
            $campos[] = new MHContainer('hct'.rand(),array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription, $formationLevelIdHidden));
            $campos[] = new MSeparator();
            $valid[] = new MIntegerValidator('_learningPeriodId', _M('Período letivo', $module));
            
            $colunas[] = new MGridColumn(_M('Curso', $module), 'left', FALSE, '', TRUE, 'courseId');
            $colunas[] = new MGridColumn(_M('Versão', $module), 'left', FALSE, '', TRUE, 'courseVersion');
            $colunas[] = new MGridColumn(_M('Turno', $module), 'left', FALSE, '', TRUE, 'turnId', null, SAGU::convertListToAssociative($busTurn->listTurn()));
            $colunas[] = new MGridColumn(_M('Unidade', $module), 'left', FALSE, '', TRUE, 'unitId', null, SAGU::convertListToAssociative($busUnit->listUnit()));
            $colunas[] = new MGridColumn(_M('Período letivo', $module), 'left', FALSE, '', TRUE, '_learningPeriodId', null, SAGU::convertListToAssociative($businessLearnigPeriod->listLearningPeriod()));            
            $colunas[] = new MGridColumn(_M('Grau de formação', $module), 'left', FALSE, '', TRUE, 'formationLevelId', null, SAGU::convertListToAssociative($businessFormationLevel->listFormationLevel()));
            
            $fields[] = $sub = new MSubDetail('learningPeriodDuplicate', _M('Gerar diversos períodos letivos', $module), $colunas, $campos);            
            $sub->setValidators($valid);
        }

        $this->setFields($fields);
        $this->setValidators($validators);
    }

    /**
     * Ação do botão de confirmação de exclusão de registro
     */
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $learningPeriodId = MIOLO::_REQUEST('learningPeriodId');
        $this->defaultDisabledButtonsToolbar();
        
        $msg = "Não foi possível excluir o período letivo pois:<br>";
        try
        {
            // Business do período letivo
            $business = new BusinessAcademicBusLearningPeriod();
            // Business do grau final
            $businessDegree = new BusinessAcademicBusDegree();

            // Transação
            $transaction = $business->getDatabase()->getTransaction();
            $transaction->_beginTransaction();
            $errorMsg = $business->validateDelOfLearningPeriod($learningPeriodId); 
            
            if ( isset($errorMsg) )
            {
                $filters = new stdClass();
                $filters->learningPeriodId = $learningPeriodId;
                $busClass = new BusinessAcademicBusClass();
                $class = $busClass->searchClass($filters);
                
                if ( count($class) > 0 )
                {
                    $msg .= "Precisa ser deletada a turma {$class[0][0]} - {$class[0][1]}. <br>";
                    throw new Exception();
                }
                
                // Dados do grau final
                $degreeData = $businessDegree->getLearningPeriodFinalDegree($learningPeriodId);
                // Deleta grau final                        
                $degreeDeleted = true;                
                try
                {
                    $businessDegree->deleteDegree($degreeData->degreeId);
                }
                catch( Exception $e )
                {
                    $degreeDeleted = false;
                    throw new Exception();            
                }
                // Deleta período letivo
                $business->deleteLearningPeriod($learningPeriodId);

                $transaction->_commit();

                $msg  = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $msg .= $errorMsg;
                throw new Exception();
            }
        }
        catch ( Exception $e )
        {
            $transaction->_rollback();
            $goTo = $MIOLO->getActionURL($module, 'main:register:learningPeriod');
            if( !$degreeDeleted )
            {
                $msg .= 'Precisam ser deletados os Graus acadêmicos.<br>';
            }
                        
            $MIOLO->error($msg, $goTo);
        }
    }
    
    public function nextStepButton_click($args = null)
    {
        $module = SAGU::getFileModule(__FILE__);
        $data = $this->getData(); 
        
        try
        {
            $subData = (array) MSubDetail::getData('learningPeriodDuplicate');
            
            $learningPeriodIds = array();
            $formationLevelIds = array();
            $currentData       = array();                
            
            foreach ( $subData as $data )
            {
                $learningPeriodId = $data->_learningPeriodId;                
                if ( (!$data->removeData) && (in_array($learningPeriodId, $learningPeriodIds)) && ($learningPeriodId != null) )
                {
                    throw new Exception( _M("O campo 'Período letivo' não pode ser repetido.", $module) );
                }
                $learningPeriodIds[] = $learningPeriodId;
                
                $line = $data->courseId . $data->courseVersion . $data->turnId . $data->unitId;                
                if ( !$data->removeData && in_array($line, $currentData) )
                {
                    throw new Exception( _M('Os campos Curso, Turno, Versão e Unidade não podem ser repetidos.', $module) );
                }
                $currentData[]       = $line;
                
                $formationLevelId = $data->formationLevelId;                
                if ( (sizeof($formationLevelIds) > 0) && (!$data->removeData) && (!in_array($formationLevelId, $formationLevelIds)) )
                {
                    throw new Exception( _M('O grau de formação dos cursos selecionados devem ser iguais.') );
                }          
                elseif ( !$data->removeData && strlen($learningPeriodId) < 0 )
                {
                    $formationLevelIds[] = $formationLevelId;
                }
            }
            
            $args->formationLevelId = $subData->formationLevelId;
            parent::nextStepButton_click($args);
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }
}
?>