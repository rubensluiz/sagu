<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * GenerateMultipleMessageContractRenewal form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 28/01/2006
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmGenerateMultipleMessageContractRenewalCourse extends SForm
{
    private $home;
    public $filters;
    /**
     * Class constructor
     **/
    public function __construct($data)
    {

        $module = MIOLO::getCurrentModule();

        $this->home   = $data->home;

        parent::__construct( _M('Gerar diversas mensagens de renovação contratual', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod() );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]       = $periodId;
        
        //Field formation level
        $business = new BusinessAcademicBusFormationLevel();
        $formationLevelId = new MComboBox('formationLevelId', $this->getFormValue('formationLevelId',$data->formationLevelId), _M('Grau de formação', $module), $business->listFormationLevel());
        $formationLevelId->setJsHint(_M('Selecione o grau de formação', $module));
        $validators[]   = new MRequiredValidator('formationLevelId');
        $fields[] = $formationLevelId;
        
        $btn1     = new MButton('btnFilter', _M('Filtrar', $module));
        $fields[] = $btn1;
        
        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
        $this->filters->formationLevelId = $this->formationLevelId->value;
        $this->filters->periodId         = $this->periodId->value;

    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnFilter_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusGenerateMultipleDataInLot();
        $businessC = new BusinessAcademicBusCourse();

        $this->filters->status = 't';
        $courses2 = $businessC->getCourses($this->filters);

        if( count($courses2) > 0 )
        {
            $data1 = array();
            $flagCanMessageContractRenewalInTheLearningPeriod = 0;

            $data2 = array();
            $flagDontCanMessageContractRenewalInTheLearningPeriod = 0;

            foreach ( $courses2 as $courses1 )
            {
                $return = $business->alreadyExistsMessageContract($courses1[6]);

                if ( $return )
                {
                    $data2[] = $courses1;
                    $flagDontCanMessageContractRenewalInTheLearningPeriod = 1;
                }
                else
                {
                    $data1[] = $courses1;
                    $flagCanMessageContractRenewalInTheLearningPeriod = 1;
                }
            }

            if ( $flagCanMessageContractRenewalInTheLearningPeriod == 1 )
            {
                $btn2     = new MButton('btnInvertSelection1', _M('Inverter seleção', $module), 'invertSelection1()');
                $this->addField($btn2);

                $grdResults1 = $MIOLO->getUI()->getGrid($module,'GrdGenerateMultipleMessageContractRenewal', $data1);
                $grdResults1->setData($data1);

                $grdResults1->setTitle(_M('Cursos que NÃO TÊM mensagem de renovação contratual neste período', $module));
                $grdResults1->name = "grd1";
                $this->addField($grdResults1);
            }

            if ( $flagDontCanMessageContractRenewalInTheLearningPeriod == 1 )
            {
                $btn3     = new MButton('btnInvertSelection2', _M('Inverter seleção', $module), 'invertSelection2()');
                $this->addField($btn3);

                $grdResults2 = $MIOLO->getUI()->getGrid($module,'GrdGenerateMultipleMessageContractRenewal', $data2);
                $grdResults2->setData($data2);

                $grdResults2->setTitle(_M('Cursos que já TÊM mensagem de renovação contratual neste período', $module));
                $grdResults2->name = "grd2";
                $this->addField($grdResults2);
            }

            $script1 .= "    function invertSelection1()\n    {\n";
            $x1 = 0;

            foreach ( $data1 as $row1 )
            {
                $script1 .= '        if ( document.' . $this->name . '[\'selectgrd1[' . $x1 . ']\'].checked == true )' . "\n        {\n";
                $script1 .= '            document.' . $this->name . '[\'selectgrd1[' . $x1 . ']\'].checked = false;' . "\n";
                $script1 .= '        }' . "\n        else\n        {\n";
                $script1 .= '            document.' . $this->name . '[\'selectgrd1[' . $x1 . ']\'].checked = true;' . "\n";
                $script1 .= '        }' . "\n";
                $x1++;
            }
            $script1 .= "    }\n";
            $script1 .= "    invertSelection1();";
            $this->page->addJsCode($script1);

            $script2 .= "    function invertSelection2()\n    {\n";
            $x2 = 0;
            foreach ( $data2 as $row2 )
            {
                $script2 .= '        if ( document.' . $this->name . '[\'selectgrd2[' . $x2 . ']\'].checked == true )' . "\n        {\n";
                $script2 .= '            document.' . $this->name . '[\'selectgrd2[' . $x2 . ']\'].checked = false;' . "\n";
                $script2 .= '        }' . "\n        else\n        {\n";
                $script2 .= '            document.' . $this->name . '[\'selectgrd2[' . $x2 . ']\'].checked = true;' . "\n";
                $script2 .= '        }' . "\n";
                $x2++;
            }
            $script2 .= "    }\n";
            $this->page->addJsCode($script2);

            $btn1[]     = new MButton('btnNext', _M('Próximo', $module) . ' >>');
            $div1       = new MDiv('div1', $btn1, null, 'align=center');

            $fields[] = $div1;
            $fields[] = new Separator('');

            $this->addField($fields);
        }
        else
        {
            $this->addError(_M('Não foram encontrados cursos coincidentes com os campos selecionados.', $module));
        }
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnNext_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $learningPeriodResult = array();

        $learningPeriod1 = $this->getFormValue('selectgrd1',$this->selectgrd1) ? $this->getFormValue('selectgrd1',$this->selectgrd1) : array() ;
        $learningPeriod2 = $this->getFormValue('selectgrd2',$this->selectgrd2) ? $this->getFormValue('selectgrd2',$this->selectgrd2) : array() ;

        $learningPeriodResult = array_merge($learningPeriodResult, $learningPeriod1, $learningPeriod2);

        if ( count($learningPeriodResult) > 0 )
        {
            foreach ( $learningPeriodResult as $id => $value )
            {
                $learningPeriodVars[$id] = $value;
            }

            $vars['periodId'] = $this->periodId->value;

            $vars['learningPeriods']  = urlencode(serialize($learningPeriodVars));

            $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleMessageContractRenewal';
            $this->page->redirect($MIOLO->getActionURL($module, $postAction, null, $vars));
        }
        else
        {
            $this->addError(_M('Você deve selecionar pelo menos um curso para iniciar a geração por lotes.', $module));

            $this->btnFilter_click();
        }
    }
}

?>
