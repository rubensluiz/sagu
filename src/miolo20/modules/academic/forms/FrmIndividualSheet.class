<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Individual sheet form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 05/12/2008
 *
 **/

/**
 * Form to manipulate a pupilListing
 **/
class FrmIndividualSheet extends SForm
{
    /**
     * @var NUMBER_OF_SUBFIELDS Specifies the maximum number of subfields that the model documents will have.
     * This is used to make sure Agata doesn't understands $subfield10 as $subfield1 followed by a 0.
     * See ticket #6761 for more info.
     */
    const NUMBER_OF_SUBFIELDS = 20;
    
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Folha individual', $module), NULL, NULL);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $businessPeriod->listPeriod() );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        $validators[] = new MRequiredValidator('periodId',_M('Período',$module));
        
        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonId     = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $this->contractPersonId->value), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, array('contractId' => 'contractId'), !$this->page->isPostBack());
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('contractPersonId', _M('Pessoa',$module), 'optional');
        $contractPersonName = new MTextField('contractPersonName', $this->contractPersonName->value, NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setJsHint(_M('Nome da pessoa',$module));
        $contractPersonName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        //Field contract
        $contractLabel = new MText('contractLabel', _M('Contrato',$module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'contractPersonId', 'personName' => 'contractPersonName', 'courseId' => 'courseId' , 'courseVersion' => 'courseVersion' ,'courseName' => 'courseName' ), true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $validators[] = new MIntegerValidator('contractId', _M('Contrato',$module), 'required');

        //Field course
        $courseId = new MTextField('courseId', $this->getFormValue('courseId', $data->courseId), _M('Curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseId->setJsHint(_M('Código do curso', $module));
        $courseId->setReadONly(true);
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), _M('Versão do curso',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setJsHint(_M('Versão do curso', $module));
        $courseVersion->setReadOnly(true);
        $courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso', $module));

        //Container contract + person
        $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $courseId, $courseVersion, $courseName));
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;

        //Field learning period
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $this->enrollData->learningPeriodId), _M('Período letivo', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, courseId, courseVersion, limbo, limbo, learningPeriodDescription, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseName', 'academic', 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[]     = new MIntegerValidator('learningPeriodId', _M('Período letivo',$module));
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $this->reportData->learningPeriodDescription), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(false);
        $fields[] = $hctLearningPeriod;
        
        //Field print mode
        $printModeLabel = new MText('printModeLabel', _M('Modo de impressão', $module) . ':');
        $printModeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $printModeOptions = array ( array(_M('Modelo 1', $module), 1),
                                    array(_M('Modelo 2', $module), 2),
                                    array(_M('Modelo 3', $module), 3) );

        $printMode = strlen($this->GetFormValue('printMode', $data->printMode)) > 0 ? $this->GetFormValue('printMode', $data->printMode) : 1;
        $printMode = new MRadioButtonGroup('printMode', '', $printModeOptions, $printMode, null, 'horizontal');
        $printMode->setShowLabel(false);
        $hctPrintMode = new MHContainer('hctPrintMode', array($printModeLabel, $printMode));
        $fields[] = $hctPrintMode;

        //Field rad optiom file typr
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);       

        $generateOptionLabel = new MText('generateOptionLabel', _M('Tipo de arquivo', $module).':');
        $generateOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generateOption      = $this->GetFormValue('generateOption', $data->generateOption) ? $this->GetFormValue('generateOption', $data->generateOption) : DB_TRUE;
        $generateOption      = new MRadioButtonGroup('generateOption', '', $opts, $generateOption, null, 'horizontal');
        $generateOption->SetShowLabel(false);
        $hctGenerateOption   = new MHContainer('hctGenerateOption', array($generateOptionLabel, $generateOption));
        $fields[]            = $hctGenerateOption;

        //Field emission date
        $emissionDate = new MCalendarField('emissionDate', $this->getFormValue('emissionDate', date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'))    ), _M('Data de emissão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão', $module));
        $validators[] = new MDateDMYValidator('emissionDate', '', 'optional');
        $fields[] = $emissionDate;
        
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }


     /**
     * Event triggered when user click print
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData(); //get form's data
        $data->fileType = MIOLO::_request('generateOption');
        $data->ignoreDebits   = MIOLO::_request('ignoreDebits');

        $havePermission = false;
        
        if ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') && (strtoupper(SAGU::getParameter('BASIC', 'WARNING_IF_DEFAULTER')) == 'TRUE') )
        {
            if ( $data->ignoreDebits != 'yes' )
            {
                $business = new BusinessFinanceBusGeneralQueries();
                $businessContract = new BusinessAcademicBusContract();

                $debt = $business->getDefaulterDebt($data->contractId, false);
                $debt = strlen($debt) > 0 ? $debt : 0;
    
                //Verifica se o aluno possui débitos financeiros
                if ( $debt > 0 )
                {
                    $this->addError(_M('O sistema detectou uma dívida com a instituição. Por favor, verifique com o setor financeiro.', $module));
                    
                    $contract     = $businessContract->getContract($data->contractId);
                    $matricula = new Matricula($data->contractId, Matricula::MATRICULA_NORMAL);
                    $enrollConfig = $matricula->obterConfiguracoes();
                    
                    if ( $MIOLO->checkAccess('FrmIndividualSheet', A_ADMIN, false, true) || $enrollConfig->blockDebt == DB_FALSE)
                    {
                        $this->addField(new MHiddenField('ignoreDebits','yes'));
                        
                        $this->addError(_M('Se desejar continuar mesmo assim, clique no botão "Imprimir" abaixo.', $module));
                    }
                }
                else 
                {
                    $havePermission = true;
                }
            }
            else 
            {
                $havePermission = true;
            }
        }
        else 
        {
            $havePermission = true;
        }

        if ( $havePermission )
        {
            $business = new BusinessAcademicBusBulletinOfNotesAndFrequencies();
            
            $MIOLO->uses('/core/AgataAPI.class');
            $api = new AgataAPI;
    
            //get the business classes wich will be used to generate the PDF file
            $busPhPerson        = new BusinessBasicBusPhysicalPerson();
            $busCity            = new BusinessBasicBusCity();
            $busContract        = new BusinessAcademicBusContract();
            $busClass            = new BusinessAcademicBusClass();
            $busClassPupil      = new BusinessAcademicBusClassPupil();
            $busLearningPeriod  = new BusinessAcademicBusLearningPeriod();
            $busCompany         = new BusinessBasicBusCompany();
            $busLePerson        = new BusinessBasicBusLegalPerson();
            $busPeriod            = new BusinessAcademicBusPeriod();
            
            $contract       = $busContract->getContract($data->contractId);
            $period            = $busPeriod->getPeriod($data->periodId);        
            
            $company        = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
            
            $legalPerson    = $busLePerson->getLegalPerson($company->personId);

            try
            {
                
                if (strlen($contract->contractId) <= 0)
                {
                    throw new Exception(_M('Este contrato não existe! Digite um contrato válido.', $module));
                }
                
                if (strlen($period->periodId) <= 0)
                {
                    throw new Exception(_M('Período inválido! Digite um período válido.', $module));
                }
            
                $contractClass  = $busClassPupil->getContractCurrentClass($data->contractId);
            
                if( strlen($data->learningPeriodId) > 0 )
                {
                    $learningPeriod = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);    
                }
                
                if( strlen($contractClass->classId) > 0 )
                {
                    $classData = $busClass->getClass($contractClass->classId);      
                }
                
                $person = $busPhPerson->getPhysicalPerson($contract->personId);

                // $dataPerson contains every data which will be parsed by Agata and replaced
                // inside the template document
                $dataPerson = array();
                $dataPerson[0][0] = $person->name;
                $dataPerson[0][1] = $person->personId;
                $dataPerson[0][2] = $contract->courseId . '/' . $contract->courseVersion . ' - ' . $contract->courseName;
                $dataPerson[0][3] = $classData->className_;
                $dataPerson[0][4] = $period->periodId;
                $dataPerson[0][5] = $busClass->getSemesterContract($data->contractId);
                $dataPerson[0][6] = $person->dateBirth;
                
                if (strlen($person->cityIdBirth) > 0)
                {
                    $birthCity = $busCity->getCity($person->cityIdBirth);
                }
                
                $dataPerson[0][7] = $birthCity->name . ' - ' . $birthCity->countryId;
                
                if (strlen($person->motherId) > 0)
                {
                    $personMother = $busPhPerson->getPhysicalPerson($person->motherId);
                }
                
                if (strlen($person->fatherId) > 0)
                {
                    $personFather = $busPhPerson->getPhysicalPerson($person->fatherId);
                }
                
                $dataPerson[0][8] = $personFather->name;
                $dataPerson[0][9] = $personMother->name;
                
                $dataPerson[0][10] = $person->locationType . ' ' . $person->location . ', ' . $person->number;
                $dataPerson[0][11] = $person->neighborhood;
                $dataPerson[0][12] = $person->zipCode;
                $dataPerson[0][13] = $person->residentialPhone;
                
                $periodData = new stdClass();
                $periodData->periodId = $period->periodId;
                $periodData->learningPeriodId = $learningPeriod->learningPeriodId;
                            
                $bulletinData = $business->getContractEnrollsResults($data->contractId, $periodData);
                
                // Standardize $bulletinData so that all lines will have the same width
                // to make sure Agata will understand the values correctly. 
                for ( $i=0; $i<count($bulletinData); $i++ )
                {
                    for ( $j=count($bulletinData[$i]); $j<self::NUMBER_OF_SUBFIELDS; $j++ )
                    {
                        $bulletinData[$i][$j] = '';
                    }
                }

                // $subDataPerson contains data used by subfields of the template document
                $subDataPerson = array();
                $subDataPerson[0][0] = $bulletinData;
                
                $api->setParameter('$beginDate', $learningPeriod->beginDate);
                $api->setParameter('$endDate', $learningPeriod->endDate);
                $api->setParameter('$city', $legalPerson->cityName);
                
                $krono = new MKrono();
                $krono->abbr = false;
                
                list ($day, $month, $year) = explode('/', $data->emissionDate);
                
                $month = $krono->nToMonth((int)$month);
                
                $api->setParameter('$day', $day);
                $api->setParameter('$month', $month);
                $api->setParameter('$year', $year);
    
                $api->setLanguage($MIOLO->getConf('i18n.language'));
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/individualSheet.sxw');
    
                $api->setDataArray($dataPerson);
                
                $api->setSubDataArray($subDataPerson);
    
                if ($data->printMode == 1)
                {
                    $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/individualSheet.sxw'));
                }
                elseif ($data->printMode == 2)
                {
                    $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/individualSheet2.sxw'));
                }
                elseif ($data->printMode == 3)
                {
                    $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/individualSheet3.sxw'));
                }
                else
                {
                    throw new Exception(_M('Modo de impressão desconhecido. Experado 1, 2 ou 3, mas recebido @1.', $module, $data->printMode));
                }
    
                if ( $ok && $data->fileType == 'pdf' )
                {
                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/individualSheet.pdf');
                    $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/individualSheet.sxw');
                }
    
                if ( $ok )
                {
                    $api->fileDialog();
                }
            }
            catch ( Exception $e )
            {
                $this->addError($e->getMessage());
            }
        }
    }
}

?>
