<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Class form
 *
 * @author Flaudizio B. S. Filho [flaudizio@yahoo.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 19/12/2006
 * 
 */
class FrmClassPupil extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new AcdClassPupil(), array( 'classId', 'contractId', 'beginDate' ), 'BusClassPupil');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE,SForm::FUNCTION_UPDATE)) )
        {
            $classId = MIOLO::_REQUEST('classId');
            $contractId = MIOLO::_REQUEST('contractId');
            $beginDate = MIOLO::_REQUEST('beginDate');

            $business = new BusinessAcademicBusClassPupil();
            $data = $business->getClassPupil($classId, $contractId, $beginDate);

            $fields[] = new MTextLabel('classId', $classId, _M('Turma', $module));
            $fields[] = new MHiddenField('classId', $classId);

            $busContract = new BusinessAcademicBusContract();
            $personInformation = $busContract->getContract($contractId);

            $fields[] = new MTextLabel('personInformation', $personInformation->personId . ' - ' . $personInformation->personName, _M('Pessoa', $module));
            $fields[] = new MHiddenField('personInformation', $personInformation->personId . ' ' . $personInformation->personName);

            $fields[] = new MTextLabel('contractId', $contractId, _M('Contrato', $module));
            $fields[] = new MHiddenField('contractId', $contractId);

            $fields[] = new MTextLabel('beginDate', $beginDate, _M('Data inicial', $module));
            $fields[] = new MHiddenField('beginDate', $beginDate);

            $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $endDate->setJsHint(_M('Informe a data final', $module));
            $fields[] = $endDate;

            $reasonLabel = new MText('reasonLabel', _M('Motivo', $module) . ':');
            $reasonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $flds[] = $reasonLabel;

            $reasonId = new MLookupTextField('reasonId', $this->getFormValue('reasonId', $data->reasonId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null,'reasonDescription',$module, 'Reason', null, null, true);
            $reasonId->setJsHint(_M('Código do motivo', $module));
            $flds[] = $reasonId;
            $validators[] = new MIntegerValidator('reasonId', _M('Motivo', $module), 'optional');

            $reasonDescription = new MTextField('reasonDescription', $this->reasonDescription->value, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $reasonDescription->setReadOnly(true);
            $reasonDescription->setJsHint(_M('Descrição do motivo', $module));
            $flds[] = $reasonDescription;

            $hctReason = new MHContainer('hctReason', $flds);
            $hctReason->setShowLabel(true);
            $fields[] = $hctReason;
            unset($flds);
        }
        else
        {
            //Field class
            $classLabel = new MText('classLabel', _M('Turma', $module) . ':');
            $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $classLabel->setClass('m-caption m-caption-required');
            $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'className_', $module, 'Class', null, array( 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion' ), true);
            $classId->setJsHint(_M('Informe o código da turma', $module));
            $className_ = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $className_->setReadOnly(true);
            $className_->setJsHint(_M('Nome da turma', $module));
            $hctClass = new MHContainer('hctClass', array( $classLabel, $classId, $className_ ));
            $hctClass->setShowLabel(true);
            $fields[] = $hctClass;
            $validators[] = new MRequiredValidator('classId', _M('Turma', $module), 'required');

            //Field person
            $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
            $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $data->contractPersonId), _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array( 'contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion' ), $module, 'PersonContract', null, array( 'personId' => 'contractPersonId' ), true);
            $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
            $validators[] = new MIntegerValidator('contractPersonId', _M('Pessoa', $module), 'optional');
            $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->contractPersonName), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
            $contractPersonName->setReadOnly(true);
            $hctPerson = new MHContainer('hctContract', array( $contractPersonLabel, $contractPersonId, $contractPersonName ));
            $hctPerson->setShowLabel(false);
            $fields[] = $hctPerson;

            //Field contract
            $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
            $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractLabel->setClass('m-caption m-caption-required');
            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), _M('Contrato', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array( 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId' ), $module, 'Contract', null, array( 'personId' => 'contractPersonId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion' ), true);
            $contractId->setJsHint(_M('Informe o código do contrato', $module));
            $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');
            $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $this->contractCourseId->value), _M('Curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseId->setJsHint(_M('Código do curso', $module));
            $contractCourseId->setReadOnly(true);
            $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion', $this->postEnrollConditionUnblockSearch->contractCourseVersion), _M('Versão', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
            $contractCourseVersion->setReadOnly(true);
            $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName', $this->postEnrollConditionUnblockSearch->contractCourseName), _M('Descrição', $module), 30);
            $contractCourseName->setJsHint(_M('Nome do curso', $module));
            $contractCourseName->setReadOnly(true);
            $hctContractS = new MHContainer('hctContractS', array( $contractLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName ));
            $hctContractS->setShowLabel(false);
            $fields[] = $hctContractS;

            //Field begin date
            $beginDate = new MCalendarField('beginDate', strlen($this->getFormValue('beginDate', $data->beginDate)) > 0 ? $this->getFormValue('beginDate', $data->beginDate) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $beginDate->setJsHint(_M('Informe a data inicial', $module));
            $fields[] = $beginDate;
            $beginDate->setValidator(new MDATEDMYValidator('beginDate', _M('Data inicial', $module), 'required'));

        }
        
        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     */
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'=> 'tbBtnDelete_confirm',
                        'function'=> 'delete',
                        'classId'=> MIOLO::_request('classId'),
                        'contractId'=> MIOLO::_request('contractId'),
                        'beginDate'=> MIOLO::_request('beginDate'));

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts   = array('classIdS'=> MIOLO::_request('classId'),
                        'contractIdS'=> MIOLO::_request('contractId'),
                        'beginDateS'=> MIOLO::_request('beginDate')
                        );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

        $caption = _M('Questão',$module);
        $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE'), $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusClassPupil();
        $ok = $business->deleteClassPupil(MIOLO::_request('classId'), MIOLO::_request('contractId'), MIOLO::_request('beginDate'));

        if ( $ok )
        {
            $opts = array('classIdS' => MIOLO::_request('classId'));
            
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            
            $caption = _M('Informação',$module);
            $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), $goto);
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');

        $data = $this->getTypesData();
        $business = new BusinessAcademicBusClassPupil();

        $classOpen = $business->getContractCurrentClass($data->contractId);

        $endDateIsNull = strlen($classOpen->classId) > 0;

        if( $function == 'insert' )
        {
            $date->typeMsg  = _M('Data inicial', $module);

            $contractInThePeriod = $business->getContractByPeriod($data->contractId, $data->beginDate, null );
        }
        else
        {
            $date->typeMsg  = _M('Data final', $module);

            $contractInThePeriod = $business->getContractByPeriod($data->contractId, $data->endDate, $data->classId );
        }

        $error = false;

        if( (strlen($data->endDate) > 0 && strlen($data->reasonId) == 0) ||               (strlen($data->endDate) == 0 && strlen($data->reasonId) > 0)  )
        {
            $this->addError( _M('Para fechar essa turma e necessário completar os campos "Data final" e "Motivo".',$module) );
            $error = true;
        }
        if( (SAGU::dateDiff($data->beginDate,$data->endDate) > 0) && $function == 'update')
        {
            $this->addError( _M('A data final deve ser maior ou igual a data inicial.',$module) );
            $error = true;
        }
        if( ($endDateIsNull && $function == 'insert') )
        {
            $this->addError( _M('Esse contrato (@1) possui a turma (@2) em aberto! Para fechar essa turma (@2), você precisa atualizar o valor do campo "data final" que está vazio.',$module,$data->contractId, $classOpen->classId) );
            $error = true;
        }
        if( strlen($contractInThePeriod->classId) > 0 )
        {
            $this->addError( _M('Já existe turma no período informado! Informe uma "@1" que não se sobrepõe a um período já utilizado por outra turma para o contrato (@2).',$module, $date->typeMsg, $data->contractId) );
            $error = true;
        }
        if(!$error)
        {
            $check    = strlen(MIOLO::_request('check')) > 0 ? MIOLO::_request('check') : $business->checkCourse($data);

            //a consulta na base é executada apenas uma vez. Se for false, exibe a mensagem de conflito e pede para gravar mesmo assim
            if ( $check == DB_FALSE && $function == 'insert')
            {
                $msg = _M('O código do curso do contrato deste aluno e da turma não são os mesmos. Deseja incluir este aluno nessa turma mesmo assim?', $module);
                $opts   = array( 'classId' => $data->classId,
                                 'personId' => $data->personId,
                                 'contractId' => $data->contractId,
                                 'beginDate' => $data->beginDate,
                                 'function' => $function);
                $gotoNo = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                $opts['check'] = DB_TRUE;
                $opts['event'] = $event;
                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Questão',$module);
                $MIOLO->question($msg, $gotoYes, $gotoNo);
            }
            else
            {
                if ( $function == 'update' )
                {
                    $ok  = $business->updateClassPupil($data);
                    $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
                }
                else
                {
                    $ok  = $business->insertClassPupil($data);
                    $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
                }
    
                if ( $ok )
                {
                    // This returns the primary key data to the search form
                    // so that the user can see the inserted/updated record.
                    $opts = array('classIdS' => MIOLO::_request('classId'));
                    if ( $function == 'update' )
                    {
                        $caption = _M('Informação',$module);
                        $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                    }
                    else
                    {
                        unset($opts);
                        $opts = array('classIdS' => MIOLO::_request('classId'));
                        $goto = $MIOLO->getActionURL( $module, $action, null, $opts);
    
                        $opts = array( 'function' => 'insert', 'classId' => MIOLO::_request('classId'));
    
                        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                        $caption = _M('Questão',$module);
                        $MIOLO->question($msg, $gotoYes, $goto);
                    }
                }
                else
                {
                    $msg = _M('Erro executando a operação solicitada.', $module);
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                    $caption = _M('Erro', $module);
                    $MIOLO->error($msg, $goto, $caption);
                }
            }
        }
    }
    
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdClassPupil();
        $data->classId = $this->classId->value;
        $data->contractId = $this->contractId->value;
        $data->beginDate = $this->beginDate->value;
        $data->endDate = $this->endDate->value;
        $data->reasonId = $this->reasonId->value;

        return $data;
    }
}
?>