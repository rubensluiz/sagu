<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 28/12/2012
 *
 **/
class FrmMatriculaRetroativa extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);
        
        parent::__construct(_M('Matrícula retroativa', $module), null, null);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_BACK);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data = $this->getData();
        
        $gfields = new sGenericFields();
        $fields[] = $gfields->labelDica( _M('Este processo efetuará a matrícula apenas em disciplinas oferecidas fechadas.'));

        //Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa',$module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$this->enrollData->contractPersonId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo'), $module, 'ActivePersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa',$module));
        $validators[] = new MRequiredValidator('contractPersonId', _M('Pessoa',$module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->enrollData->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa',$module));
        $hctPerson = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(false);

        //Field contract
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato',$module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $this->enrollData->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'ActiveContract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato',$module));
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$this->enrollData->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso',$module));
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->enrollData->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso',$module));
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->enrollData->contractCourseName), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso',$module));
        $hctContract = new MHContainer('hctContract', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(false);
        
        $fields[] = $hctPerson;        
        $fields[] = $hctContract;
        
        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MSelection('periodo', $this->getFormValue('periodId', $data->periodId), _M('Período',$module), $businessPeriod->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        $validators[] = new MRequiredValidator('periodo', _M('Período', $module));
        
        //Disciplina
        $fields[] = new SLookupContainer('codigodisciplina', null, array(
            'module' => 'academic',
            'item' => 'CurricularComponentNew',
            'label' => _M('Disciplina', $module),
            'required' => true,
        ));
        $validators[] = new MRequiredValidator('codigodisciplina', _M('Disciplina', $module));
        
        //Disciplina
        $fields[] = $turma = new SLookupContainer('nometurma', null, array(
            'module' => 'academic',
            'item' => 'Class',
            'label' => _M('Turma', $module),
            'required' => true,
        ));
        $turma->getDescriptionField()->hint = _M('Turma para qual a disciplina foi oferecida', $module);
        $validators[] = new MRequiredValidator('nometurma', _M('Turma', $module));
        
        // frequencia
        $fields[] = new MTextField('frequency', $data->frequency, _M('Frequência', $module), 10, _M('Número de horas de frequência', $module));
        $validators[] = new MFloatValidator('frequency', _M('Frequência', $module), '.', null, 'required');

        $notaOuConceito = SAGU::NVL(MIOLO::_REQUEST('notaOuConceito'), DB_TRUE);
                
        $labelNotaConceito = new MText('labelNotaConceito', _M('Campo nota deve ser registrado como nota ou conceito?'));
        $labelNotaConceito->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $nota = new MRadioButton('notaOuConceito', DB_TRUE, '', $notaOuConceito == DB_TRUE ? true : false, _M('Nota'));
        $nota->setAutoPostBack(true);
        $conceito = new MRadioButton('notaOuConceito', DB_FALSE, '', $notaOuConceito == DB_TRUE ? false : true, _M('Conceito'));
        $conceito->setAutoPostBack(true);
        $fields[] = new MHContainer('hctNotaOuConceito', array($labelNotaConceito, $nota, $conceito));
        
        // nota
        $fields[] = new MTextField('nota', $data->nota, _M('Nota / Conceito', $module));
        if ( $notaOuConceito == DB_TRUE )
        {
            $validators[] = new MFloatValidator('nota', _M('Nota / Conceito', $module), '.', null, 'required');
        }
        else
        {
            $validators[] = new MRequiredValidator('nota', _M('Nota / Conceito', $module));
        }
        
        // data cancelamento
        $fields[] = new MCalendarField('datacancelamento', $data->datacancelamento, _M('Data cancelamento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[] = new MDateDMYValidator('datacancelamento', _M('Data cancelamento', $module));
        
        // status
        $estadosDetalhados = AcdDetailedEnrollStatus::list4ComboBox();
        if ( count($estadosDetalhados) > 0 )
        {
            $fields[] = new MComboBox('statusShortDescription', $data->statusShortDescription, _M('Status', $module), $estadosDetalhados, true);
        }
        else
        {
            $busEnrollStatus = new BusinessAcademicBusEnrollStatus();
            $fields[] = new MComboBox('forceStatusId', $data->forceStatusId, _M('Status', $module), $busEnrollStatus->listEnrollStatus(), true);
        }
        
        $fields[] = new MSeparator();

        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
    }
    
    /**
     *
     * @return stdClass
     */
    public function getData()
    {
        $data = parent::getData();
        
        $curricularComponent = explode(" - ", $data->codigodisciplinaDescription);
        $data->componentVersion = $curricularComponent[0];
        
        $estadosDetalhados = new AcdDetailedEnrollStatus();
        $filters = new stdClass();
        $filters->shortdescription = $data->statusShortDescription;
        $detailStatus = $estadosDetalhados->search($filters);
        
        $data->statusDetail = $data->statusShortDescription;
        $data->status = $detailStatus[0]->parentStatus;
        
        $data->nota = MIOLO::_REQUEST('nota');
        $data->notaOuConceito = MIOLO::_REQUEST('notaOuConceito');
        $data->isClosed = DB_TRUE;
        
        return $data;
    }
    
    public function tbBtnSave_click($args)
    {
        try
        {
            SDatabase::beginTransaction();
            
            $data = $this->getData();
            
            $csv = new sCSVMatriculaRetroativa();
            $csv->importLine2($data);
            
            $this->AddInfo(_M('Dados importados com sucesso.', $modules));
            
            SDatabase::commit();
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            
            $this->AddError($e->getMessage());
        }
    }
}
?>
