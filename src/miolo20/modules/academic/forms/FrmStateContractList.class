<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Form to choice the enroll book report option
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/08/2006
 */

/**
 * Form to generate Multiple Learning Period
 */
class FrmStateContractList extends SForm
{
    private $home;
    public $filters;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();

        $this->home = "main:report:stateContractList";

        parent::__construct( _M('Listagem de estados contratuais', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $periodId = MIOLO::_request('periodId');
        
        $fields[] = new MSeparator('');

        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', $this->getFormValue('periodId', $data->periodId), _M('Período',$module), $businessPeriod->listPeriod() );
        $fields[] = $periodId;

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $this->addValidator(new MDateDMYValidator('beginDate', '', 'optional'));
        $fields[] = $beginDate;

        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $this->addValidator(new MDateDMYValidator('endDate', '', 'optional'));
        $fields[] = $endDate;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $fields[] = $courseOccurrenceLookup;

        $busStateContract = new BusinessAcademicBusStatesContract();
        $stateContractId = new MComboBox('stateContractId', $this->getFormValue('stateContractId', $data->stateContractId), _M('Estado contratual', $module), $busStateContract->listStatesContract());
        $fields[] = $stateContractId;

        $btn1 = new MButton('btnList', _M('Lista', $module));
        $fields[] = $btn1;
        $fields[] = new MSeparator('<hr>');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Event triggered when user clicks list button
     */
    public function btnList_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusStateContractList();
        $data = $this->getData();
        $listData = $business->listStateContractPupils($data);

        if (count($listData) > 0)
        {
            $columns[] = "<div style=\"text-align: center;\">" . _M('Código da pessoa', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Nome', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Telefone residencial', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Telefone comercial', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Fone celular', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Situação atual', $module) . "</div>";

            foreach ($listData as $gridData)
            {
                $tableRaw = new MTableRaw($gridData->title, $gridData->data, $columns);
                $tableRaw->setAlternate(true);
                $this->addField($tableRaw);
            }
        }
        else
        {
            $text = new MText('text', _M('A pesquisa não retornou nenhum dado. Certifique-se de que os filtros tenham sido definidos corretamente', $module) . '<br>' . _M('Dica: você deve definir ao menos um curso ou um estado contratual.', $module), 'red');
            $this->addField($text);
            $this->addField(new MSeparator());
        }
    }
}
?>