<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Possibilities and material of enroll form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/08/2006
 *
 **/

/**
 * Form to manipulate inscription reports
 **/
class FrmPossibilitiesAndMaterialOfEnrollAfterGraduation extends SForm
{

    var $business;

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->business = new BusinessAcademicBusPossibilitiesAndMaterialOfEnrollAfterGraduation();
        parent::__construct( _M('Material de matrícula do aluno', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {

        $this->setAction('main');

        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $action         = MIOLO::getCurrentAction();
        $function       = MIOLO::_request('function');
        
        $fields[]  = new MHiddenField('limbo1');

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        
        //Field person
        $contractPersonLabel = new MText('contractPersonLabel1', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption m-caption-required');        
        $formationLevel = new MHiddenField('formationLevel', SAGU::getParameter('ACADEMIC', 'ACD_AFTER_GRADUATION_FORMATION_LEVEL_ID'));
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId'), _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'PersonContract', null, array('personId' => 'contractPersonId', 'formationLevelId' => 'formationLevel'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MRequiredValidator('contractPersonId', _M('Pessoa', $module), 'required');
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName'), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $contractPersonName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($contractPersonLabel, $contractPersonId,  $contractPersonName, $formationLevel));
        $hctPerson->setShowLabel(false);
        $fields[]   = $hctPerson;

        //Field contract
        $contractLabel = new MText('contractLabel1', _M('Contrato', $module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), _M('Contrato', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription'), $module, 'Contract', null, array('personId' => 'contractPersonId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion'), true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato',$module), 'required');
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId'), _M('Curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseId->setReadOnly(true);
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion'), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName'), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $contractCourseName->setReadOnly(true);
        $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(false);
        $fields[] = $hctContract;

        //Field turn
        $turnLabel = new MText('turnLabel', _M('Turno', $module) . ':');
        $turnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $turnId = new MTextField('turnId', $this->getFormValue('turnId', $this->reportData->turnId), _M('Código do turno',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $turnId->setJsHint(_M('Código do turno', $module));
        $turnId->setReadOnly(true);
        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $this->reportData->turnDescription), _M('Descrição do turno', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $turnDescription->setJsHint(_M('Descrição do turno', $module));
        $turnDescription->setReadOnly(true);
        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(false);
        $fields[] = $hctTurn;

        //Field unit
        $unitLabel = new MText('unitLabel', _M('Unidade', $module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitId = new MTextField('unitId', $this->getFormValue('unitId', $this->reportData->unitId), _M('Código da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitId->setJsHint(_M('Código da unidade', $module));
        $unitId->setReadOnly(true);
        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $this->reportData->unitDescription), _M('Descrição da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $unitDescription->setJsHint(_M('Descrição da unidade', $module));
        $unitDescription->setReadOnly(true);
        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(false);
        $fields[] = $hctUnit;

        //Field formation level
        $formationLevelIdAux = new MHiddenField('formationLevelIdAux', SAGU::getParameter('ACADEMIC', 'ACD_AFTER_GRADUATION_FORMATION_LEVEL_ID'));
        $fields[] = $formationLevelIdAux;
        
        //Field learning period
        $learningPeriodIdLabel = new MText('learningPeriodIdLabel', _M('Período letivo', $module) . ':');
        $learningPeriodIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodIdLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId'), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('limbo', 'contractCourseId', 'contractCourseVersion', 'limbo1', 'limbo', 'learningPeriodName', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'contractCourseName'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId', 'formationLevelId' => 'formationLevelIdAux'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[]      = new MRequiredValidator('learningPeriodId', _M('Período letivo', $module), 'required');
        $learningPeriodName = new MTextField('learningPeriodName', $this->getFormValue('learningPeriodName'), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodName->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodIdLabel, $learningPeriodId, $learningPeriodName));
        $hctLearningPeriod->setShowLabel(false);
        $fields[] = $hctLearningPeriod;

        //Field stamp
        $stampLabel          = new MText('stampLabel', _M('Carimbo', $module) . ':');
        $stampLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $stampId        = new MLookupTextField('stampId', $this->getFormValue('stampId'), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('stampId', 'employeeName', 'functionDescription', 'sector'), 'basic', 'Stamp', null, null, true);
        $stampId->setJsHint(_M('Informe o código da pessoa', $module));
        
        //Field employee
        $employeeName = new MTextField('employeeName', $this->getFormValue('employeeName'), null, 20);
        $employeeName->setJsHint(_M('Nome do funcionário', $module));
        $employeeName->setReadOnly(true);
        
        //Field function
        $functionDescription = new MTextField('functionDescription', $this->getFormValue('functionDescription'), null, 20);
        $functionDescription->setJsHint(_M('Função do funcionário', $module));
        $functionDescription->setReadOnly(true);

        //Fiedl sector
        $sector = new MTextField('sector', $this->getFormValue('sector'), null, 20);
        $sector->setJsHint(_M('Descrição do setor', $module));
        $sector->setReadOnly(true);

        //Container stamp + employee + function + sector
        $hctStamp = new MHContainer('hctStamp', array($stampLabel, $stampId, $employeeName, $functionDescription, $sector));
        $hctStamp->setShowLabel(false);
        $fields[] = $hctStamp;

        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user click in the button 'print'
     **/
    public function tbBtnPrint_click ($sender=NULL)
    {
        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $this->business = new BusinessAcademicBusPossibilitiesAndMaterialOfEnroll();

        $data = array (
                        contractId            => MIOLO::_request('contractId'),
                        contractCourseId      => MIOLO::_request('contractCourseId'),
                        contractCourseVersion => MIOLO::_request('contractCourseVersion'),
                        contractTurnId        => MIOLO::_request('turnId'),
                        contractUnitId        => MIOLO::_request('unitId'),
                        contractPersonId      => MIOLO::_request('contractPersonId'),
                        learningPeriod        => MIOLO::_request('learningPeriodId'),
                        periodId              => MIOLO::_request('periodId'),
                        employeeName          => MIOLO::_request('employeeName'),
                        functionDescription   => MIOLO::_request('functionDescription'),
                        sector                => MIOLO::_request('sector')
                      );
        $data->ignoreDebits   = MIOLO::_request('ignoreDebits');

        $havePermission = false;
        
        if ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') && (strtoupper(SAGU::getParameter('BASIC', 'WARNING_IF_DEFAULTER')) == 'TRUE') )
        {
            if ( $cd->ignoreDebits != 'yes' )
            {
                $business = new BusinessFinanceBusGeneralQueries();
                $businessContract = new BusinessAcademicBusContract();

                $debt = $business->getDefaulterDebt(MIOLO::_request('contractId'), false);
                $debt = strlen($debt) > 0 ? $debt : 0;
    
                //Verifica se o aluno possui débitos financeiros
                if ( $debt > 0 )
                {
                    $this->addError(_M('O sistema detectou uma dívida com a instituição. Por favor, verifique com o setor financeiro.', $module));
                    
                    $contract     = $businessContract->getContract(MIOLO::_request('contractId'));
                    $matricula = new Matricula($contract->contractId, Matricula::MATRICULA_NORMAL);
                    $enrollConfig = $matricula->obterConfiguracoes();
                    
                    if ( $MIOLO->checkAccess('FrmPossibilitiesAndMaterialOfEnrollAfterGraduation', A_ADMIN, false, true) || $enrollConfig->blockDebt == DB_FALSE)
                    {
                        $this->addField(new MHiddenField('ignoreDebits','yes'));
                        
                        $this->addError(_M('Se desejar continuar mesmo assim, clique no botão "Imprimir" abaixo.', $module));
                    }
                }
                else 
                {
                    $havePermission = true;
                }
            }
            else 
            {
                $havePermission = true;
            }
        }
        else 
        {
            $havePermission = true;
        }
    
        if ( $havePermission )
        {
            $MIOLO->getClass($module, 'RptEnrollMaterialAfterGraduation');
            
            $report = new RptEnrollMaterialAfterGraduation($data);
        }
    }
}

?>
