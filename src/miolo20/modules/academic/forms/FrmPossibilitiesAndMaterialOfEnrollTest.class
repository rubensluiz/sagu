<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Possibilities and material of enroll form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 10/01/2006
 */

/**
 * Form to manipulate inscription reports
 */
class FrmPossibilitiesAndMaterialOfEnrollTest extends SForm
{
    var $currentPage;
    var $business;

    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->business = new BusinessAcademicBusPossibilitiesAndMaterialOfEnroll();

        parent::__construct( _M('Material de matrícula de aluno do curso', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $this->setAction('main');
        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $action         = MIOLO::getCurrentAction();
        $function       = MIOLO::_REQUEST('function');

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;

        if ( (strlen($function) == 0) || ($function == null) )
        {
            $fields[]  = new MHiddenField('limbo2');

            $businessPeriod = new BusinessAcademicBusPeriod();
            $period         = $businessPeriod->listPeriod();

            $courseLabel2 = new MText('courseLabel2', _M('Curso', $module) . ':');
            $courseLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $courseLabel2->setClass('m-caption m-caption-required');
            $flds4[]      = $courseLabel2;

            $courseId2    = new MLookupTextField('courseId2', $this->getFormValue('courseId2'), _M('Código do curso',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseId2, courseVersion2, courseName2, turnId2, limbo, unitId2, limbo2', $module, 'CourseOccurrence', null, null, !$this->page->isPostBack());
            $flds4[]      = $courseId2;
            $validators[] = new MRequiredValidator('courseId2', _M('Código do curso',$module));
            $courseVersion2 = new MTextField('courseVersion2', $this->getFormValue('courseVersion2'), _M('Versão do curso',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseVersion2->setJsHint(_M('Informe a versão do curso',$module));
            $courseVersion2->setReadOnly(true);
            $flds4[]        = $courseVersion2;
            $courseName2 = new MTextField('courseName2', $this->getFormValue('courseName2'), _M('Nome do curso',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $courseName2->setJsHint(_M('Informe o nome do curso',$module));
            $courseName2->setReadOnly(true);
            $flds4[]     = $courseName2;
            $hctCourse2 = new MHContainer('hctCourse2', $flds4);
            $hctCourse2->setShowLabel(false);
            $fields[]   = $hctCourse2;
            unset($flds4);

            $business = new BusinessBasicBusTurn();
            $turnId2  = new MComboBox('turnId2', $this->GetFormValue('turnId2'), _M('Turno',$module), $business->listTurn());
            $fields[] = $turnId2;

            $business = new BusinessBasicBusUnit();
            $unitId2  = new MComboBox('unitId2', $this->GetFormValue('unitId2'), _M('Unidade',$module), $business->listUnit());
            $fields[] = $unitId2;

            $businessPeriod1 = new BusinessAcademicBusPeriod();
            $periodId1 = new MComboBox('periodId1', strlen($this->getFormValue('periodId1', $data->periodId1))>0 ? $this->getFormValue('periodId1', $data->periodId1) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod1->listPeriod(), true );
            $fields[] = $periodId1;

            $learningPeriodIdLabel2 = new MText('learningPeriodIdLabel2', _M('Período letivo',$module) . ':');
            $learningPeriodIdLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $learningPeriodIdLabel2->setClass('m-caption m-caption-required');
            $flds2[] = $learningPeriodIdLabel2;
            $learningPeriodId2 = new MLookupTextField('learningPeriodId2', $this->getFormValue('learningPeriodId2'), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, limbo, limbo, limbo, limbo, learningPeriodName2', $module, 'LearningPeriod', null, array('periodId' => 'periodId1', 'courseId' => 'courseId2', 'courseVersion' => 'courseVersion2', 'turnId' => 'turnId2', 'unitId' => 'unitId2'), true);
            $learningPeriodId2->setJsHint(_M('Informe o código do período letivo',$module));
            $validators[]      = new MRequiredValidator('learningPeriodId2', _M('Período letivo',$module), 'required');
            $flds2[]           = $learningPeriodId2;
            $learningPeriodName2 = new MTextField('learningPeriodName2', $this->getFormValue('learningPeriodName2'), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $learningPeriodName2->setReadOnly(true);
            $flds2[]             = $learningPeriodName2;
            $hctLearningPeriod2 = new MHContainer('hctLearningPeriod2', $flds2);
            $hctLearningPeriod2->setShowLabel(false);
            $fields[]           = $hctLearningPeriod2;
            unset($flds2);

            $fields[] = new Separator();

            $options = array(
                array(_M('Matriculado', $module), 'E'),
                array(_M('Outro', $module), 'O'),
                array(_M('Calouro', $module), 'F')
            );

            $optionsLabel2 = new MText('optionsLabel2', _M('Situação do aluno', $module) . ':');
            $optionsLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $flds4[]       = $optionsLabel2;

            if ( $this->getFormValue('options2', $options2) == NULL )
            {
                $options2 = 'E';
            }

            $options2     = new MRadioButtonGroup('options2', _M('Situação do aluno', $module), $options, $this->getFormValue('options2', $options2), '', 'vertical');
            $options2->setShowLabel(false);
            $flds4[]      = $options2;

            $opt2          = $this->getFormValue('options2');
            $course2       = $this->getFormValue('courseId2');
            $reportOpt2    = $this->getFormValue('reportOption2');
            $periodValue2  = $this->getFormValue('selectiveProccessId2');
            $personValue2  = $this->getFormValue('personId2');
            $reportOption2 = $this->getFormValue('reportOption2');

            $flds4[] = new Separator();

            $emissionLabel2 = new MText('emissionLabel2', _M('Emissão',$module) . ':');
            $emissionLabel2->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $flds7[] = $emissionLabel2;
            $emissionDate2 = new MCalendarField('emissionDate2', strlen($this->getFormValue('emissionDate2'))>0 ? $this->getFormValue('emissionDate2') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $flds7[]       = $emissionDate2;
            $emissionTime2 = new MTextField('emissionTime2', strlen($this->getFormValue('emissionTime2'))>0 ? $this->getFormValue('emissionTime2') : date(SAGU::getParameter('BASIC', 'MASK_TIME_PHP')), _M('Hora', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $flds7[]       = $emissionTime2;
            $hctDateTime2 = new MHContainer('hctDateTime2', $flds7);
            $hctDateTime2->setShowLabel(true);
            $fields[]     = $hctDateTime2;
            $fields[] = new Separator();

            $hctOptions2 = new MHContainer('hctOptions2', $flds4);
            $hctOptions2->setShowLabel(false);
            $fields[]    = $hctOptions2;

            $btnAll2 = new MButton('btnAll2',_M('Imprimir relatórios', $module));
            $btnAll2->attachEventHandler('click', 'listClickAll');
            $fields[] = $btnAll2;

        }

        $fields[] = new Separator();

        parent::defineFields( array( 'fields' => $fields, 'vaidators' => $validators ) );
    }

    public function listClickAll( $sender=NULL )
    {
        $MIOLO          = MIOLO::getInstance();
        $module         = MIOLO::getCurrentModule();
        $this->business = new BusinessAcademicBusPossibilitiesAndMaterialOfEnroll();

        $courseId         = MIOLO::_REQUEST('courseId2');
        $learningPeriodId = MIOLO::_REQUEST('learningPeriodId2');

        if ( ! (strlen($courseId) > 0) )
        {
            $stringOptions[] = _M('Código do curso requerido', $module);
        }
        if ( ! (strlen($learningPeriodId) > 0) )
        {
            $stringOptions[] = _M('Código do período letivo requerido', $module);
        }

        $this->currentPage = 1;

        $flagFaultRequired = false;

        if ( is_array($stringOptions) )
        {
            foreach ( $stringOptions as $key => $stringOption )
            {
                    $lblMsg1 = new MText('lblMsg1', $stringOption);
                    $lblMsg1->color = 'red';

                    $cntErrors      = new MVContainer('cntErrors', array($lblMsg1));
                    $this->divError->addControl($cntErrors);
                    $flagFaultRequired = true;
            }
        }

        if ( ! $flagFaultRequired )
        {
            $data = array(
                MIOLO::_REQUEST('contractId2'),
                MIOLO::_REQUEST('courseId2'),
                MIOLO::_REQUEST('courseVersion2'),
                MIOLO::_REQUEST('turnId2'),
                MIOLO::_REQUEST('unitId2'),
                MIOLO::_REQUEST('personId2'),
                MIOLO::_REQUEST('learningPeriodId2'),
                MIOLO::_REQUEST('options2'),
                MIOLO::_REQUEST('isListener2'),
                MIOLO::_REQUEST('emissionDate2'),
                MIOLO::_REQUEST('emissionTime2'),
                MIOLO::_REQUEST('contractPeriodId2')
            );

            $MIOLO->getClass($module, 'RptAllEnrollMaterial');

            $report = new RptAllEnrollMaterial($data);
        }
    }
}
?>