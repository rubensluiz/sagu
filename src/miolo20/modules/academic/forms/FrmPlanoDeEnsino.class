<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Inscription reports form
 *
 * @author Augusto A. Silva [augusto@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Augusto [augusto@solis.coop.br]
 *
 * @since
 * Class created on 21/08/2011
 *
 */
class FrmPlanoDeEnsino extends SForm
{

    /**
     * Construtor da classe
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        parent::__construct(_M('Plano de ensino', $module), null, null);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array( 'event' => 'tbBtnPrint_click' )));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     * */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // Field period
        $busPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', $this->getFormValue('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID')), _M('Período', $module), $busPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        
        //Field professor
        $professorLabel = new MText('professorLabel', _M('Professor', $module) . ':');
        $professorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $professorLabel->setClass('m-caption m-caption-required');
        $professorId = new MLookupTextField('professorId', $this->professorId->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorId->setJsHint(_M('Informe o código do professor',$module));
        $validators[] = new MIntegerValidator('professorId', _M('Professor',$module));
        $professorName = new MTextField('professorName', $this->professorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $professorName->setReadOnly(true);
        $professorName->setJsHint(_M('Nome do professor',$module));
        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
        $hctProfessor->setShowLabel(true);
        $validators[] = new MRequiredValidator('professorId', _M('Professor',$module));
        $fields[] = $hctProfessor;

        //Field group
        $groupLabel = new MText('groupLabel', _M('Disciplina oferecida', $module) . ':');
        $groupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $groupLabel->setClass('m-caption m-caption-required');
        $groupId = new MLookupTextField('groupId', $this->groupId->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'groupGroupName', $module, 'Group', null, array( 'groupId' => 'groupId', 'professorId' => 'professorId', 'periodId' => 'periodId' ), true);
        $groupId->setJsHint(_M('Informe o código da disciplina oferecida', $module));
        $validators[] = new MIntegerValidator('groupId', _M('Disciplina oferecida', $module), 'optional');
        $groupGroupName = new MTextField('groupGroupName', $this->groupGroupName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $groupGroupName->setJsHint(_M('Nome da disciplina oferecida', $module));
        $groupGroupName->setReadOnly(true);
        $hctGroup = new MHContainer('hctGroup', array($groupLabel, $groupId, $groupGroupName));
        $hctGroup->setShowLabel(true);
        $validators[] = new MRequiredValidator('groupId', _M('Disciplina oferecida', $module));
        $fields[] = $hctGroup;
        
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : SReport::FILETYPE_PDF, _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        
        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
    }
    
    /**
     * Método para geração do documento de plano de ensino
     * Tanto no portal do professo e portal do aluno
     */
    public function tbBtnPrint_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule(); 
        
        $options['module'] = $module;
        $options['reportName'] = 'gradebook';
        
        $data = $this->getData();
       
        //Lógica a seguir verifica se os dados salvos no campos bibliograficos, estão corretos (int)
        $isGnutecaInstalled = SAGU::getParameter('BASIC', 'MODULE_GNUTECA_INSTALLED') == 'YES';
        $busGnuteca = $isGnutecaInstalled ? new BusinessGnutecaBusGnutecaToSagu2() : null;
        $busGnuteca instanceof BusinessGnutecaBusGnutecaToSagu2;

        $busGroup = new BusinessAcademicBusGroup();
        $dados = $busGroup->getGroup($data->groupId);
        
        for ( $i=0; $i<count($dados->basicBibliography); $i++ )
        {
            // Código do livro
            $filters = new stdClass();
            $filters->controlNumber = $dados->basicBibliography[$i];

            // Livro
            $basicBibliography .= $isGnutecaInstalled ? $busGnuteca->searchBibliographyData($filters, 'get') : null;
            
        }        
        
        //Parâmetro que recebe o valor dos dados bibliográficos.
        //Caso esteja inválidos os dados, ireport não busca por estes registros, evitando erro ao gerar o relatório.
        $options['parameters']['bibliografia'] =  $basicBibliography;
        
        if ( strlen($data->professorId) > 0 )
        {            
            $options['parameters']['professorId'] = (integer)$data->professorId;
        }
        
        if ( strlen($data->professorName) > 0 )
        {            
            $options['parameters']['professorName'] = (string)$data->professorName;
        }

        if ( isset($data->groupId))
        {
            $options['parameters']['groupid'] = (int)$data->groupId;
        }

        if ( strlen($data->reportFormat) > 0 )
        {
            $options['fileType'] = $data->reportFormat;
        }

        $sreport = new SReport($options);

        if ( !$sreport->generate() )
        {
            $this->addError(_M('Erro ao gerar relatório. Verifique se o professor e(ou) o período selecionados possuiem alguma relação com a disciplina.', $module));
        }
    }
}
?>
