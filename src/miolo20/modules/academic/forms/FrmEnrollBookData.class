<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Enroll book data generate form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 20/06/2006
 *
 */
class FrmEnrollBookData extends SForm
{

    /**
     * Construtor da classe
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        parent::__construct(_M('Gerar livro de matrícula'), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // PeriodId
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', $this->getFormValue('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID')), _M('Período', $module), $businessPeriod->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = $periodId;

        // FormationLevelId
        $businessFormationLevel = new BusinessAcademicBusFormationLevel();
        $opt = $businessFormationLevel->listFormationLevel();
        $courseType = new MSelection('formationLevelId', $this->getFormValue('formationLevelId', $data->formationLevelId), _M('Grau de Formação', $module), $opt);
        $courseType->setJsHint(_M('Selecione o grau de formação dos contratos que serão utilizados para gerar o livro de matrícula', $module));
        $validators[] = new MRequiredValidator('formationLevelId');
        $fields[] = $courseType;

        // Is listerner
        $fields[] = $isListener = new MRadioButtonGroup('isListener', _M('É ouvinte', $module), SAGU::listTrueFalseIndifferent(1), $this->getFormValue('isListener', $data->isListener), null, 'horizontal');
        $isListener->setJsHint(_M('Gerar livro de matrícula para contratos de alunos ouvintes', $module));

        $fields[] = new MSeparator('');

        $btnGenerate = new MButton('btnGenerate', _M('Gerar', $module));
        $fields[] = $btnGenerate;

        $this->setFields($fields);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);

        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }

        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));

        parent::defineFields();
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     */
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();

        $business = new BusinessAcademicBusEnrollBook();
        $businessPeriod = new BusinessAcademicBusPeriod();

        if ( strlen($data->periodId) == 0 )
        {
            $this->addError(_M('Nenhum período selecionado.', $module));
        }
        else if ( $business->isAlreadyGenerated($data->periodId) )
        {
            $periodEnrollBookDate = $businessPeriod->getPeriodEnrollBookDate($data->periodId);
            if ( $MIOLO->checkAccess('FrmEnrollBookData', A_ADMIN, false, false) )
            {
                //Goto enroll book data report
                $vars = array( 'periodId' => $data->periodId );
                $actionReport = 'main:report:enrollBookOptions';
                $gotoReport = $MIOLO->getActionURL($module, $actionReport, null, $vars);

                //Goto enroll book data document
                $vars = array( 'periodId' => $data->periodId );
                $actionDocument = 'main:document:enrollBookDataDocument';
                $gotoDocument = $MIOLO->getActionURL($module, $actionDocument, null, $vars);

                //Goto enroll book config
                $vars = array( 'periodId' => $data->periodId );
                $actionConfig = 'main:config:enrollBookDataConfig';
                $gotoConfig = $MIOLO->getActionURL($module, $actionConfig, null, $vars);

                //Execute the process enroll book generate
                $vars['event'] = 'generateEnrollBook';
                $gotoGenerate = $MIOLO->getActionURL($module, $action, null, $vars);

                $gotoCancel = $MIOLO->getActionURL($module, $action, null, $vars);

                $msg = _M('Os dados do livro matrícula para o período selecionado já foram gerados em @1.', $module, $periodEnrollBookDate) .
                $msg .= '<ul>' .
                        ' <li>' . _M('Clique GERAR para gerar todos os dados novamente (esta operação poderá levar alguns minutos)', $module) . '.</li>' .
                        ' <li>' . _M('Clique RELATÓRIO para ir à página opções de relatório do livro de matrícula', $module) . '.</li>' .
                        ' <li>' . _M('Clique DOCUMENTO para ir à página documento do livro de matrícula', $module) . '.</li>' .
                        ' <li>' . _M('Clique CONFIGURAÇÃO para ir à página de configuração do livro de matrícula', $module) . '.</li>' .
                        ' <li>' . _M('Clique CANCELAR para retornar a página gerar livro de matrícula', $module) . '.</li>' .
                        '</ul>';

                $prompt = new MPrompt(_M('Questão', $module), $msg);
                $prompt->setType('question');
                $prompt->addButton(_M('Gerar', $module), $gotoGenerate);
                $prompt->addButton(_M('Relatório', $module), $gotoReport);
                $prompt->addButton(_M('Documento', $module), $gotoDocument);
                $prompt->addButton(_M('Configuração', $module), $gotoConfig);
                $prompt->addButton(_M('Cancelar', $module), $gotoCancel);

                $this->setFields($prompt);
            }
            else
            {
                $this->addError(_M('Os dados do livro matrícula para o período selecionado já foram gerados em @1.', $module, $periodEnrollBookDate) . ' ' . _M('Você não tem permissão para gerar o livro de matrícula novamente.', $module));
            }
        }
        elseif ( $MIOLO->checkAccess('FrmEnrollBookData', A_ADMIN, false, false) )
        {
            $vars = array( 'periodId' => $data->periodId, 'formationLevelId' => $data->formationLevelId, 'isListener' => $data->isListener);
            $gotoNo = $MIOLO->getActionURL($module, $action, null, $vars);

            $vars['event'] = 'generateEnrollBook';
            $gotoYes = $MIOLO->getActionURL($module, $action, null, $vars);

            $MIOLO->question(_M('Deseja gerar os dados do livro matrícula para @1?', $module, $data->periodId) . ' ' . _M('Esta operação poderá ser demorada.', $module), $gotoYes, $gotoNo);
        }
        else
        {
            $this->addError(_M('Você não tem o permissão para gerar o livro de matrícula', $module)).'.';
        }
    }

    /**
     * Função responsável por gerar o livro de matrícula para o período informado
     */
    public function generateEnrollBook()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();

        $business = new BusinessAcademicBusEnrollBook();

        $x = $business->generateEnrollBookTable($data);

        if ( count($business->getErrors()) > 0 )
        {
            $this->addError($business->getErrors());
        }
        else
        {
            $caption = _M('Informação', $module);

            $vars = array( 'periodId' => $data->periodId );

            //Goto enroll book data report
            $actionReport = 'main:report:enrollBookOptions';
            $gotoReport = $MIOLO->getActionURL($module, $actionReport, null, $vars);

            //Goto enroll book data document
            $actionDocument = 'main:document:enrollBookDataDocument';
            $gotoDocument = $MIOLO->getActionURL($module, $actionDocument, null, $vars);

            //Goto enroll book config
            $actionConfig = 'main:config:enrollBookDataConfig';
            $gotoConfig = $MIOLO->getActionURL($module, $actionConfig, null, $vars);

            //Goto enroll book process
            $actionProcess = 'main:process:enrollBookGenerate';
            $gotoProcess = $MIOLO->getActionURL($module, $actionProcess, null, $vars);

            if ( $x > 0 )
            {
                $msg = _M('Livro matrícula gerado. @1 registros inseridos.', $module, $x) .
                        '<ul>' .
                        ' <li>' . _M('Clique OK para retornar à página gerar livro de matrícula', $module) . '</li>' .
                        ' <li>' . _M('Clique RELATÓRIO para ir à página opções de relatório do livro de matrícula', $module) . '.</li>' .
                        ' <li>' . _M('Clique DOCUMENTO para ir à página documento do livro de matrícula', $module) . '.</li>' .
                        ' <li>' . _M('Clique CONFIGURAÇÃO para ir à página de configuração do livro de matrícula', $module) . '.</li>' .
                        '</ul>';

                $promptMsg = new MPrompt($caption, $msg);
                $promptMsg->setType('information');

                $promptMsg->addButton(_M('OK', $module), $gotoProcess);
                $promptMsg->addButton(_M('Relatório', $module), $gotoReport);
                $promptMsg->addButton(_M('Documento', $module), $gotoDocument);
                $promptMsg->addButton(_M('Configuração', $module), $gotoConfig);

                $MIOLO->prompt($promptMsg);
            }
            else
            {
                $this->addError(_M('Não existem contratos ou estados contratuais válidos para este período', $module));
            }
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->periodId = MIOLO::_REQUEST('periodId');
        $data->formationLevelId = MIOLO::_REQUEST('formationLevelId');
        $data->isListener = MIOLO::_REQUEST('isListener');

        return $data;
    }
}
?>
