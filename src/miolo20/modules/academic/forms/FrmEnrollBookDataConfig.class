<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Form to choice the enroll book config
 *
 * @author Samuel Koch [samuel@solsi.coop.br@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 * 
 * @since
 * Class created on 29/04/2009
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmEnrollBookDataConfig extends SForm
{
    private $home;
    public $filters;
    /**
     * Class constructor
     **/
    public function __construct($data)
    {

        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Configuração dos dados do livro de matrícula', $module), NULL, NULL);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId       = new MComboBox('periodId', $this->getFormValue('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID')), _M('Período',$module), $businessPeriod->listPeriod() );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]         = $periodId;
        
        $fields[] = new MSeparator('');
        
        $filters = $this->getTypesData(); 

        $btnGenerate = new MButton('btnSearch', _M('Localizar', $module));
        $fields[] = $btnGenerate;
        
        $btnSave = false;
        if ( strlen($filters->periodId) > 0 )
        {
            $btnSave = true;
            
            //Configure courses view mode
            $business = new BusinessAcademicBusEnrollBook();
            
            $coursesSequenceConfig = $business->getCoursesSequenceConfig($filters->periodId, 1);
            
            $fields[] = new MSeparator('');

            if (count($coursesSequenceConfig) > 0)
            {
                $instructions = '<b>' . _M('Instruções', $module) . ':</b><br><br>' . 
                _M('Crie grupos de curso digitando o mesmo número nas caixas de texto dos cursos que devem aparecer juntos', $module) . '. ' . _M('Por exemplo', $module) . ':<br><br>' . 
                ' - ' . _M('Se você deseja que os cursos X e Y apareçam um após o outro, digite 1 nas duas caixas de texto', $module) . '.<br>' . 
                ' - ' . _M('Se você deseja que os cursos X e Y apareçam depois dos cursos A e B (que pertencem ao grupo N), digite 2 nas suas caixas de texto', $module) . '.';
                
                $instructionsField = new MText('instructionsField', $instructions);
                
                $instructionsDiv   = new MDiv('instructionsDiv', $instructionsField);
                
                $fields[] = $instructionsDiv;
                $fields[] = new MSeparator('');
                
                $columns[] = "<div style=\"text-align: center;\">" . _M('Código', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Curso', $module) . "</div>";
                $columns[] = "<div style=\"text-align: center;\">" . _M('Disciplina oferecida', $module) . "</div>";
                
                $title = strtoupper(_M('Configuração do modo de visualização dos cursos no livro matrícula', $module));
                
                foreach ($coursesSequenceConfig as $row)
                {
                    list (  $courseId,
                            $name,
                            $sequence   ) = $row;
                            
                    $groupField = new MTextField('grpField[' . $courseId . ']', $sequence, '', 5, _M('Digite o número do grupo para o curso', $module) . ' ' . $courseId);
                    
                    $tableRow[] = $courseId;
                    $tableRow[] = $name;
                    $tableRow[] = $groupField;
                    
                    $tableData[] = $tableRow;
                    unset($tableRow);
                }
                
                $tableRaw = new MTableRaw($title, $tableData, $columns);
                $tableRaw->setAlternate(true);
                $fields[] = $tableRaw;
            }
        }
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        if($btnSave)
        {
            $this->toolbar->enableButton(MToolBar::BUTTON_SAVE);
        }
        else
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }
    
    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $courseGroups = $this->getFormValue('grpField');
        
        try 
        {
            if (count($courseGroups) > 0)
            {
                $busCourse = new BusinessAcademicBusCourse();
                
                foreach ($courseGroups as $courseId=>$group)
                {
                    $courseData = $busCourse->getCourse($courseId);
                    
                    $courseData->enrollBookSequence = $group;
                    
                    $busCourse->updateCourse($courseData);
                }
                
                $caption = _M('Informação', $module);
                $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED'), $MIOLO->getActionURL( $module, $action, null, $opts));
            }
            else
            {
                throw new Exception(_M('Erro executando a operação solicitada.', $module));
            }
        }
        catch (Exception $e)
        {
            $this->addError( $e->getMessage() );
        }
    }
        
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        // get filters values
        $data->periodId = $this->getFormValue('periodId');
        
        return $data;
    }
}

?>
