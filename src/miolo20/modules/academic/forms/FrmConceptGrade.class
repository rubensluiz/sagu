<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável por inserir grupo de conceitos e conceitos
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 02/03/2011
 *
 **/
MIOLO::uses('/ui/controls/msubdetail.class');
class FrmConceptGrade extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcdConceptGroup(), array('conceptGroupId'), 'BusConceptGroup' );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        // se for o primeiro acesso limpa a subdetail
        if ( !$MIOLO->page->isPostBack() )
        {
            MSubDetail::clearData('subConcept');
        }

        if ( in_array($function, array(SForm::FUNCTION_UPDATE,SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $conceptGroupId = $pk->conceptGroupId;
            $fields[] = new MTextLabel('conceptGroupIdLabel', $conceptGroupId, _M('Código',$module));
            $fields[] = new MHiddenField('conceptGroupId', $conceptGroupId);

            // business do conceito
            $businessConcept = new BusinessAcademicBusConcept();
            // dados do grupo de conceitos
            $data = $this->busObject->getConceptGroup($conceptGroupId);

            $filters = new stdClass();
            $filters->conceptGroupId = $conceptGroupId;
            if ( strlen($conceptGroupId)>0 )
            {
                $dataSub = $businessConcept->searchConceptAsObject($filters);
            }
        }

        // campo descrição do grupo de conceitos
        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Nome do grupo', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição que identificará os conceitos definidos abaixo', $module).'.');
        $validators[] = new MRequiredValidator('description');
        $fields[] = $description;

        /*
         * subDetail conceitos
         */
        
        // campo legenda
        $subtitleLabel = new MText('subtitleLabel', _M('Legenda', $module) . ':');
        $subtitleLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $subtitleLabel->setClass('m-caption m-caption-required');
        $subtitle = new MTextField('subtitle', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Informe a legenda do conceito. Ex.: A, B, C', $module).'.');
        $hctSubtitle = new MHContainer('hctSubtitle', array($subtitleLabel, $subtitle));
        $subValidators[] = new MRequiredValidator('subtitle', _M('Legenda',$module), 1);
        $subFields[] = $hctSubtitle;

        // campo escondido código do conceito
        $subFields[] = new SHiddenField('conceptId');

        // campo descrição
        $descriptionLabel = new MText('descriptionLabel', _M('Descrição', $module) . ':');
        $descriptionLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description = new MTextField('descriptionConcept', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $hctDescription = new MHContainer('hctDescription', array($descriptionLabel, $description));
        $subValidators[] = new MRequiredValidator('descriptionConcept', _M('descrição',$module));
        $subFields[] = $hctDescription;
        
        // campo ordem
        $conceptOrderLabel = new MText('conceptOrderLabel', _M('Ordem', $module) . ':');
        $conceptOrderLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $conceptOrderLabel->setClass('m-caption m-caption-required');
        $conceptOrder = new MTextField('conceptOrder', $this->getFormValue('conceptOrder', $data->conceptOrder), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $conceptOrder->setJsHint( _M('Informe a ordem em que este grau deverá aparecer em listagens', $module).'.' );
        $hctConceptOrder = new MHContainer('conceptOrderCnt', array($conceptOrderLabel, $conceptOrder));
        $subValidators[] = new MIntegerValidator('conceptOrder', _M('Ordem',$module), 'required');
        $subFields[] = $hctConceptOrder;

        // campo estado que o conceito representa
        $enrollStatusLabel = new MText('enrollStatusIdLabel', _M('Status de matrícula', $module) . ':');
        $enrollStatusLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $enrollStatusLabel->setClass('m-caption m-caption-required');
        $busEnrollStatus = new BusinessAcademicBusEnrollStatus();
        $enrollStatus = new MSelection('enrollStatusId', null, $data->enrollStatusId, $busEnrollStatus->listEnrollStatus());
        $subValidators[] = new MRequiredValidator('enrollStatusId', _M('Status de matrícula', $module));
        $enrollStatus->setJsHint( _M('Informe o status de matrícula associado a este conceito', $module). '.');
        $subFields[] = new MHContainer('enrollStatusHct', array($enrollStatusLabel, $enrollStatus));

        // colunas da grid
        $cols[] = new MGridColumn(_M('Conceito',$module), 'left', true, '', false, 'conceptId');
        $cols[] = new MGridColumn(_M('Legenda',$module), 'left', true, '', true, 'subtitle');
        $cols[] = new MGridColumn(_M('Descrição',$module), 'left', true, '', true, 'descriptionConcept');
        $cols[] = new MGridColumn(_M('Ordem', $module), 'left', true, '', true, 'conceptOrder');
        $cols[] = new MGridColumn(_M('Estado de matrícula', $module), 'left', true, '', true, 'enrollStatusId',false, $busEnrollStatus->listEnrollStatus(1));

        $fields[] = $sub = new MSubDetail('subConcept', _M('Conceitos', $module), $cols, $subFields,true);
        $sub->setValidators($subValidators);

        // set data dos dados da subdetail (edição)
        if ( $dataSub && MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click' )
        {
            MSubDetail::setData($dataSub, 'subConcept');
        }

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Envento do botão salvar da toolbar
     **/
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        // dados do form
        $data = $this->getData();
        // business grupo de conceitos
        $businessConceptGroup = new BusinessAcademicBusConceptGroup();
        // business conceitos
        $businessConcept = new BusinessAcademicBusConcept();
                
        try
        {
            // inicio transação
            $businessConceptGroup->beginTransaction();

            if ( $function == SForm::FUNCTION_INSERT )
            {
                //insere o grupo de conceitos e retorna o código
                $conceptGroupId = $businessConceptGroup->insertConceptGroup($data);
            }
            elseif ( $function == SForm::FUNCTION_UPDATE )
            {
                $businessConceptGroup->updateConceptGroup($data);
            }
            
            // Conceitos
            if ( count($data->subConcept) > 0 )
            {
                foreach ( $data->subConcept as $dataSub )
                {
                    // usa o código do grupo de conceitos obtido no data (edição) ou pega no retorno do insert
                    $dataSub->conceptGroupId = $data->conceptGroupId ? $data->conceptGroupId : $conceptGroupId;
                    $dataSub->description = $dataSub->descriptionConcept;

                    // Insert
                    if ( !$dataSub->removeData && (strlen($dataSub->conceptId) == 0) )
                    {
                        $businessConcept->insertConcept($dataSub);
                    }
                    // Update
                    elseif ( !$dataSub->removeData && (strlen($dataSub->conceptId) > 0) )
                    {
                        //
                        // valida se deve bloquear este campo, caso ja tenha nota registrada com esta descricao
                        //
                        $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();
                        $oldConcept = $businessConcept->getConcept($dataSub->conceptId);

                        // verifica se o que foi digitado e diferente do que estava antes
                        if ( ( strlen($oldConcept->description) > 0 && strtoupper($oldConcept->description) != strtoupper($dataSub->description) ) &&
                               $busDegreeEnroll->temFrequenciasUsandoConceito($dataSub->conceptGroupId, $oldConcept->description) )
                        {
                            throw new Exception(_M('Não é possível alterar o conceito de "@1" para "@2", pois o mesmo já possui notas registradas.', null, $oldConcept->description, $dataSub->description));
                        }
                        
                        // segue fluxo normal
                        $businessConcept->updateConcept($dataSub);
                    }
                    // Delete
                    elseif ( $dataSub->removeData && (strlen($dataSub->conceptId) > 0) )
                    {
                        $businessConcept->deleteConcept($dataSub->conceptId);
                    }
                }
            }

            $businessConceptGroup->endTransaction();
            $msg = ($function==SForm::FUNCTION_UPDATE) ? SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED') : SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED_INFO');
            SAGU::information($msg, $MIOLO->getActionURL($module, $action, null, array('function'=>'search')));
        }
        catch (Exception $e)
        {
            $this->AddError( $e->getMessage() );
        }
    }
}
?>
