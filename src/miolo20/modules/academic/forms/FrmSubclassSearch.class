<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdSubclass table
 *
 * @author Andre Chagas Dias [andre@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2008
 *
 **/

class FrmSubclassSearch extends SSearchForm
{
    public function __construct($data)
    {
        parent::__construct(null, new AcdSubclass(), array('subclassId'), 'BusSubclass');
    }


    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $limboS = new MHiddenField('limboS', '');
        $fields[] = $limboS;

        //Field sub class code
        $subclassLabelS = new MText('subclassLabelS', _M('Código', $module) . ':');
        $subclassLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $subclassIdS = new MTextField('subclassIdS', $this->subclassIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $subclassIdS->setJsHint(_M('Informe o código da subturma',$module));
        $hctSubclassIdS = new MHContainer('hctSubclassIdS', array($subclassLabelS, $subclassIdS));
        $fields[]    = $hctSubclassIdS;

        //Class
        $classLabelS   = new MText('classLabelS', _M('Turma',$module) . ':');
        $classLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $classIdS     = new MLookupTextField('classIdS', $this->getFormValue('classIdS', $data->classIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'classNameS', $module, 'Class', null, null, true);
        $classIdS->setJsHint(_M('Informe o código da turma',$module));

        $classNameS    = new MTextField('classNameS', $this->getFormValue('classNameS', $data->classNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $classNameS->setJsHint(_M('Nome da turma',$module));

        $hctClassS     = new MHContainer('hctClassS', array($classLabelS, $classIdS, $classNameS));
        $hctClassS->setShowLabel(true);
        $fields[]      = $hctClassS;
        //end class

        $subclassLabelDescriptionS = new MText('subclassLabelDescriptionS', _M('Descrição da subturma',$module) . ':');
        $subclassLabelDescriptionS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $subclassDescriptionS = new MTextField('subclassDescription_S', $this->subclassDescription_S->value,'', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $subclassDescriptionS->setJsHint(_M('Informe a descrição da subturma',$module));

        $hctSubclassDescriptionS = new MHContainer('hctSubclassDescriptionS', array($subclassLabelDescriptionS, $subclassDescriptionS));
        $fields[]      = $hctSubclassDescriptionS;

        //Person
        $personLabelS  = new MText('personLabelS', _M('Pessoa',$module) . ':');
        $personLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $personIdS     = new MLookupTextField('personIdS', $this->getFormValue('personIdS', $data->personIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'personNameS, limboS, limboS, limboS, limboS, limboS, limboS, limboS, limboS, externalCourseIdHs, externalCourseHsName, institutionIdHs, institutionHsName, cityIdHs, cityHsName, yearHs, limbo, passive', 'basic', 'PhysicalPerson', null, null, true);
        $personIdS->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personIdS', _M('Pessoa', $module), 'optional');

        $personNameS   = new MTextField('personNameS', $this->personNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personNameS->setReadOnly(true);
        $personNameS->setJsHint(_M('Nome da pessoa',$module));

        $hctPersonS    = new MHContainer('hctPersonS', array($personLabelS, $personIdS, $personNameS));
        $hctPersonS->setShowLabel(true);
        $fields[]     = $hctPersonS;

        $groupIdLabelS = new MText('groupIdLabelS', _M('Disciplina oferecida',$module) . ':');
        $groupIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $groupIdS = new MLookupTextField('groupIdS',// Name
                            $this->getFormValue('groupIdS', $data->groupIdS), //value
                            '', //label
                            SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), //size
                            null, //hint
                            null, // validator
                            'groupIdDescriptionS', //related
                            $module, //module
                            'Group', //item
                            null, null, true);
        $groupIdS->setJsHint(_M('Informe o código da disciplina oferecida',$module));
        $validators[] = new MIntegerValidator('groupIdS', _M('Disciplina oferecida',$module), 'optional');

        $groupIdDescriptionS = new MTextField('groupIdDescriptionS', $this->getFormValue('groupIdDescriptionS', $data->groupIdDescriptionS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $groupIdDescriptionS->setJsHint(_M('Descrição da disciplina oferecida',$module));
        $groupIdDescriptionS->setReadOnly(true);

        $hctGroupS = new MHContainer('hctGroupS', array($groupIdLabelS, $groupIdS, $groupIdDescriptionS));
        $hctGroupS->setShowLabel(true);
        $fields[] = $hctGroupS;

        parent::defineFields($fields, $module, 'GrdSubclassSearch');
    }
}
?>
