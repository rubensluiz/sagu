<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Course enroll certified form
 *
 * @author Artur Bernardo Koefender [artur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Artur Bernardo Koefender [artur@solis.coop.br]
 *
 * @since
 * Class created on 27/06/2013
 */

/**
 * Form to manipulate a contract document
 */
class FrmEnrollCertified extends SForm
{
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Certificado de matrícula', $module), null, null);

        // Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Cria o formulario
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');


        //Field person
        $personLabel  = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setClass('m-caption m-caption-required');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractid', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, array('personId' => 'personId'), true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson    = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[]     = $hctPerson;

        //Field contract
        $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractLabel->setClass('m-caption m-caption-required');
        $contractid    = new MLookupTextField('contractid', $this->getFormValue('contractid'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'personId'), true);
        $contractid->setJsHint(_M('Informe o código do contrato', $module));
        $validators[]  = new MRequiredValidator('contractid', _M('Contrato', $module), 'required');
        $courseId      = new MTextField('courseId', $this->getFormValue('courseId', $this->courseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseId->setReadOnly(true);
        $courseId->setJsHint(_M('Código do curso', $module));
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $this->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Versão do curso', $module));
        $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $this->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso', $module));
        $hctContract   = new MHContainer('hctContract', array($contractLabel, $contractid, $courseId, $courseVersion, $courseName));
        $hctContract->setShowLabel(true);
        $fields[]      = $hctContract;
        
       


        // Formato
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat', _M('Formato do relatório', $module));
        $fields[] = new MSeparator();

        $this->setValidators($validators);
        $this->setFields($fields);

        parent::defineFields();
    }

    /**
     * Método para geração do Relatório
     */
    public function generateReport($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();
        $options['module'] = $module;
        $options['reportName'] = 'enrollCertified';

        $options['parameters']['contractid'] = (int)$data->contractid;
        $options['fileType'] = $data->reportFormat;
        
        $sreport = new SReport($options);

        if ( !$sreport->generate() )
        {
            $this->addError(_M('Nenhum registro encontrado.', $module ));
        }
    }

    /**
     * Método que obtem os dados do formulário.
     */
    public function getTypesData()
    {
        $data = new stdClass();
        $data->contractid = $this->getFormValue('contractid');
        $data->reportFormat = $this->getFormValue('reportFormat');


        return $data;
    }
}
?>
