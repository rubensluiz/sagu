<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * StateContractField form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 09/01/2006
 *
 **/

/**
 * Form to manipulate a stateContractField
 **/
class FrmStateContractField extends SManagementForm
{
    public function __construct()
    {
        parent::__construct(new AcdStateContractField(), array('stateContractFieldId'), 'BusStateContractField');
    }

    
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $stateContractFieldId = MIOLO::_REQUEST('stateContractFieldId');

            $fields[]  = new MTextLabel('stateContractFieldId', $stateContractFieldId, _M('Código do campo do estado contratual', $module));
            $fields[]  = new MHiddenField('stateContractFieldId', $stateContractFieldId);

            $data = $this->busObject->getStateContractField($stateContractFieldId);
            $data->stateContractFieldDescription = $data->description;
        }

        $stateContractLabel = new MText('stateContractLabel', _M('Estado contratual',$module) . ':');
        $stateContractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $stateContractLabel;
        $stateContractLabel->setClass('m-caption m-caption-required');

        $stateContractId = new MLookupTextField('stateContractId', $this->getFormValue('stateContractId',$data->stateContractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'stateContractDescription', $module, 'StateContract', null, null, true);
        $stateContractId->setJsHint(_M('Informe o código do estado do contrato',$module));
        $flds[] = $stateContractId;
        $validators[] = new MIntegerValidator('stateContractId', _M('Estado contratual',$module), 'required');

        $stateContractDescription = new MTextField('stateContractDescription', $this->getFormValue('stateContractDescription',$data->stateContractDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stateContractDescription->setReadOnly(true);
        $stateContractDescription->setJsHint(_M('Estado contratual',$module));
        $flds[] = $stateContractDescription;

        $hctStateContract = new MHContainer('hctStateContract', $flds);
        $hctStateContract->setShowLabel(true);
        $fields[]  = $hctStateContract;
        unset($flds);
        
        $stateContractFieldDescription = new MTextField('stateContractFieldDescription', $this->getFormValue('stateContractFieldDescription',$data->stateContractFieldDescription), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stateContractFieldDescription->setJsHint(_M('Informe a descrição',$module));
        $fields[] = $stateContractFieldDescription;
        $validators[] = new MRequiredValidator('stateContractFieldDescription');
        
        $isRequiredLabel = new MText('isRequiredLabel', _M('É obrigatório',$module) . '?');
        $isRequiredLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $isRequiredLabel;
        $isRequired = new MRadioButtonGroup('isRequired', null, SAGU::listTrueFalse(1), $this->getFormValue('isRequired', $data->isRequired) > 0 ? $this->getFormValue('isRequired', $data->isRequired) : DB_FALSE, null, 'horizontal');
        $isRequired->setShowLabel(false);
        $flds[] = $isRequired;
        $hctIsRequired = new MHContainer('hctIsRequiredS', $flds);
        $fields[] = $hctIsRequired;
        
        $fields[] = new MSeparator('<br>');
        $l = new MText('lLabel', _M(' '));
        $l->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $l->setClass('m-caption');
        $label = new MLabel(_M('Demais campos abaixo não funcionam para a tela de Encerramento de contrato.'));
        $label->setClass('m-hint');
        $fields[] = new MHContainer('lContainer', array($l, $label));
        
        $rows = new MTextField('rows', $this->getFormValue('rows',$data->rows), _M('Linhas',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $rows->setJsHint(_M('Informe o número de linhas',$module));
        $validators[] = new MRegExpValidator('rows','','(^-?[0-9][0-9]*$)');
        $fields[] = $rows;
        
        $columns = new MTextField('columns', $this->getFormValue('columns',$data->columns), _M('Colunas',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $columns->setJsHint(_M('Informe o número de colunas',$module));
        $validators[] = new MRegExpValidator('columns','','(^-?[0-9][0-9]*$)');
        $fields[] = $columns;
        
        $isLookupLabel = new MText('isLookupLabel', _M('É lookup',$module) . '?');
        $isLookupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $isLookupLabel;

        $isLookup = new MRadioButtonGroup('isLookup', null, SAGU::listTrueFalse(1), $this->getFormValue('isLookup', $data->isLookup) > 0 ? $this->getFormValue('isLookup', $data->isLookup) : DB_FALSE, null, 'horizontal');
        $isLookup->setShowLabel(false);
        $flds[] = $isLookup;

        $hctIsLookup = new MHContainer('hctIsLookup', $flds);
        $fields[] = $hctIsLookup;
        unset($flds);

        $lookupName = new MTextField('lookupName', $this->getFormValue('lookupName', $data->lookupName), _M('Nome do lookup', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $lookupName->setJsHint(_M('Informe o nome do método de lookup',$module));
        $fields[] = $lookupName;
        
        $lookupModule = new MTextField('lookupModule', $this->getFormValue('lookupModule', $data->lookupModule), _M('Módulo do lookup', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $lookupModule->setJsHint(_M('Informe o módulo de seleção',$module));
        $fields[] = $lookupModule;
        
        $fieldValidator = new MTextField('fieldValidator', $this->getFormValue('fieldValidator',$data->fieldValidator), _M('Validador de campo',$module), 50);
        $fieldValidator->setJsHint(_M('Informe o validador do campo',$module));
        $fields[] = $fieldValidator;
        
        unset($flds);

        parent::defineFields($fields, $validators, $data);
    }

    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->description = $this->stateContractFieldDescription->value;
        $data->isLookup = $this->getFormValue('isLookup');

        return $data;
    }
}
?>