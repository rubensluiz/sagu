<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelas notas e avaliações da transferência de turno
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 28/09/2011
 *
 **/
class FrmTurnTransferNotes extends FrmTurnTransfer
{    
    public function __construct($steps = null)
    {        
        parent::__construct($steps, __CLASS__);
    }

    
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        //Load data
        $stepData = $this->getStepData();

        // $turnTransferData['learningPeriods'] = Dados gerados no FrmTurnTransfer
        foreach ( (array) $this->turnTransfer['learningPeriods'] as $obj )
        {
            // Obtem learningPeriods
            $learningPeriodOld = $this->busLearningPeriod->getLearningPeriod($obj->learningPeriodIdOld);
            $learningPeriodNew = $this->busLearningPeriod->getLearningPeriod($obj->learningPeriodIdNew);

            $title = _M('Período @1 - @2', $module, $learningPeriodOld->periodId, $learningPeriodOld->description);
            
            $tableData = array();
            
            // Cria lista para popular select
            $degreesOldList = array();
            $degreesOldObj = array();
            foreach ( $obj->degreesNew as $row )
            {
                $degree = $this->busDegree->getDegree($row[0]);
                $degreesOldObj[ $degree->degreeId ] = $degree;
                $degreesOldList[ $degree->degreeId ] = $degree->description;
            }
            
            // Cria dados para MTableRaw
            for ($i=0; $i < count($obj->degreesNew); $i++)
            {
                $degreeOld = $this->busDegree->getDegree( $obj->degreesOld[$i][0] );
                
                // Obtem valor da sessao caso exista
                $degreesChaned = (array) $MIOLO->session->get('degreesChanged');
                $value = $degreesChaned[$obj->learningPeriodIdOld][$degreeOld->degreeId];
                // Obtem default
                if ( strlen($value) <= 0 )
                {
                    foreach ( $degreesOldObj as $_row )
                    {
                        if ( $_row->degreeNumber == $degreeOld->degreeNumber )
                        {
                            $value = $_row->degreeId;
                        }
                    }
                }

                $idSel = "degreesChanged[{$obj->learningPeriodIdOld}][{$degreeOld->degreeId}]";
                $select = new MSelection($idSel, $value, null, $degreesOldList);
                $validators[] = new MRequiredValidator($idSel, _M('Equivalente (da avaliação "@1")', $module, $degreeOld->description));
                
                $tableData[] = array($degreeOld->description, $select);
            }
            
            $fields[] = $table = new MTableRaw($title, $tableData, array(
                _M('Avaliação', $module),
                _M('Equivalente no período @1 - @2', $module, $learningPeriodNew->periodId, $learningPeriodNew->description),
            ));
            $fields[] = new MSeparator();
        }
        
        
        $this->setValidators($validators);
        $this->setFields($fields);
    }
    
    
    public function nextStepButton_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $data = $this->getData();
        
        try
        {
            $degrees = (array) MIOLO::_REQUEST('degreesChanged');
            $MIOLO->session->set('degreesChanged', $degrees);
            
            // Realiza validacao para nao permitir duplicidade no valor selection
            foreach ( (array) $this->turnTransfer['learningPeriods'] as $obj )
            {
                $dg = $degrees[$obj->learningPeriodIdOld];
                if ( count($dg) != count(array_unique(array_values($dg))) )
                {
                    throw new Exception( _M('Nenhuma equivalência pode ser repetida.', $module) );
                }
            }
            
            parent::nextStepButton_click($args);
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }
}
?>