<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Curriculum concurrence form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/09/2005
 */

/**
 * Form to manipulate a curriculumConcurrence
 */
class FrmCurriculumConcurrence extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();

        parent::__construct( new acdCurriculumConcurrence(), array('curriculumOutId', 'curriculumInId'), 'BusCurriculumConcurrence', _M('Titulo', $module));
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $fields[] = new MSeparator();
        $instructions = new MTextLabel('instructions', _M('Selecione as disciplinas que serão concorrentes. Se um aluno cursar uma delas, então não poderá cursar a outra.', $module));
        $fields[] = $instructions;
        $fields[] = new MSeparator();

        //Label info instruction
        $cOutCourseInstruction = new MTextLabel('textLabel', _M('Disciplina que, se for cursada, impede a disciplina de "Entrada" de ser cursada',$module).'.');

        //Field course out
        $cOutCourseOutLabel = new MText('cOutCourseOutLabel', _M('Curso', $module) . ':');
        $cOutCourseOutLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cOutCourseOutLabel->setClass('m-caption m-caption-required');
        $cOutCourseId = new MLookupTextField('cOutCourseId', $this->cOutCourseId->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'cOutCourseId, cOutCourseVersion, cOutCourseName, cOutCourseTurnId, cOutCourseTurnDescription, cOutCourseUnitId, cOutCourseUnitDescription', $module, 'CourseOccurrence', null, array('courseId' => 'cOutCourseId'), true);
        $cOutCourseId->setJsHint(_M('Informe o código do curso', $module));
        $validators[] = new MRequiredValidator('cOutCourseId', _M('Código do curso de saída', $module));
        $cOutCourseName = new MTextField('cOutCourseName', $this->cOutCourseName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cOutCourseName->setJsHint(_M('Nome do curso', $module));
        $cOutCourseName->setReadOnly(true);
        $cOutCourseVersion = new MTextField('cOutCourseVersion', $this->cOutCourseVersion->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $cOutCourseVersion->setJsHint(_M('Versão do curso', $module));
        $cOutCourseVersion->setReadOnly(true);
        $hctcOutCourse = new MHContainer('hctcOutCourse', array($cOutCourseOutLabel, $cOutCourseId, $cOutCourseVersion, $cOutCourseName));
        $hctcOutCourse->setShowLabel(true);

        //Field unit
        $cOutCourseUnitIdLabel = new MText('curriculumOutCourseUnitIdLabel', _M('Unidade', $module) . ':');
        $cOutCourseUnitIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cOutCourseUnitId = new MTextField('cOutCourseUnitId', $this->cOutCourseUnitId->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $cOutCourseUnitId->setJsHint(_M('Código da unidade', $module));
        $cOutCourseUnitId->setReadOnly(true);
        $cOutCourseUnitDescription = new MTextField('cOutCourseUnitDescription', $this->cOutCourseUnitDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cOutCourseUnitDescription->setJsHint(_M('Descrição da unidade', $module));
        $cOutCourseUnitDescription->setReadOnly(true);
        $hctCurricularOutCourseUnit = new MHContainer('curriculumOutCourseUnit', array($cOutCourseUnitIdLabel, $cOutCourseUnitId, $cOutCourseUnitDescription));

        //Field turn
        $cOutCourseTurnIdLabel = new MText('curriculumOutCourseTurnIdLabel', _M('Turno', $module) . ':');
        $cOutCourseTurnIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cOutCourseTurnId = new MTextField('cOutCourseTurnId', $this->cOutCourseTurnId->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $cOutCourseTurnId->setJsHint(_M('Código do turno', $module));
        $cOutCourseTurnId->setReadOnly(true);
        $cOutCourseTurnDescription = new MTextField('cOutCourseTurnDescription', $this->cOutCourseTurnDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cOutCourseTurnDescription->setJsHint(_M('Descrição do turno', $module));
        $cOutCourseTurnDescription->setReadOnly(true);
        $hctCurricularOutCourseTurn = new MHContainer('curriculumOutCourseTurn', array($cOutCourseTurnIdLabel, $cOutCourseTurnId, $cOutCourseTurnDescription));

        //Field curricular component
        $cOutCurricularComponentLabel = new MText('cOutCurricularComponentLabel', _M('Disciplina', $module) . ':');
        $cOutCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cOutCurricularComponentLabel->setClass('m-caption m-caption-required');
        $cOutCurricularComponentId = new MLookupTextField('cOutCurricularComponentId', $this->cOutCurricularComponentId->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'cOutCurricularComponentVersion,cOutCurricularComponentName', $module, 'CurricularComponent', null, null, true);
        $cOutCurricularComponentId->setJsHint(_M('Informe o código da disciplina', $module));
        $validators[] = new MRequiredValidator('cOutCurricularComponentId', _M('Código da disciplina de saída', $module));
        $cOutCurricularComponentVersion = new MTextField('cOutCurricularComponentVersion', $this->cOutCurricularComponentVersion->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $cOutCurricularComponentVersion->setJsHint(_M('Versão da disciplina', $module));
        $cOutCurricularComponentVersion->setReadOnly(true);
        $cOutCurricularComponentName = new MTextField('cOutCurricularComponentName', $this->cOutCurricularComponentName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cOutCurricularComponentName->setJsHint(_M('Nome da disciplina', $module));
        $cOutCurricularComponentName->setReadOnly(true);
        $hctcOutCurricularComponent = new MHContainer('hctcOutCurricularComponent', array($cOutCurricularComponentLabel, $cOutCurricularComponentId, $cOutCurricularComponentVersion, $cOutCurricularComponentName));
        $hctcOutCurricularComponent->setShowLabel(true);

        $fields[] = new MBaseGroup('bgOut', _M('Disciplina 1', $module), array(new MSeparator(), $cOutCourseInstruction, $hctcOutCourse, $hctCurricularOutCourseUnit, $hctCurricularOutCourseTurn, $hctcOutCurricularComponent, new MSeparator()), 'vertical');

        //Label info instruction
        $cInCourseInstruction = new MTextLabel('textLabel1', _M('Disciplina que não pode ser cursada se a disciplina de "Saída" for cursada',$module).'.');

        //Field course
        $cCourseInLabel = new MText('cCourseInLabel', _M('Curso', $module) . ':');
        $cCourseInLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cCourseInLabel->setClass('m-caption m-caption-required');
        $cInCourseId = new MLookupTextField('cInCourseId', $this->cInCourseId->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'cInCourseId, cInCourseVersion, cInCourseName, cInCourseTurnId, cInCourseTurnDescription, cInCourseUnitId, cInCourseUnitDescription', $module, 'CourseOccurrence', null, null, true);
        $cInCourseId->setJsHint(_M('Informe o código do curso',$module));
        $validators[] = new MRequiredValidator('cInCourseId', _M('Código do curso de entrada',$module));
        $cInCourseName = new MTextField('cInCourseName', $this->cInCourseName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cInCourseName->setJsHint(_M('Nome do curso',$module));
        $cInCourseName->setReadOnly(true);
        $cInCourseVersion = new MTextField('cInCourseVersion', $this->cInCourseVersion->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $cInCourseVersion->setJsHint(_M('Versão do curso', $module));
        $cInCourseVersion->setReadOnly(true);
        $hctcInCourse = new MHContainer('hctcInCourse', array($cCourseInLabel, $cInCourseId, $cInCourseVersion, $cInCourseName));
        $hctcOutCourse->setShowLabel(true);

        //Field unit in
        $cInCourseUnitIdLabel = new MText('curriculumInCourseUnitIdLabel', _M('Unidade', $module) . ':');
        $cInCourseUnitIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cInCourseUnitId = new MTextField('cInCourseUnitId', $this->cInCourseUnitId->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $cInCourseUnitId->setJsHint(_M('Código da unidade', $module));
        $cInCourseUnitId->setReadOnly(true);
        $cInCourseUnitDescription = new MTextField('cInCourseUnitDescription', $this->cInCourseUnitDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cInCourseUnitDescription->setJsHint(_M('Descrição da unidade', $module));
        $cInCourseUnitDescription->setReadOnly(true);
        $hctCurricularInCourseUnit = new MHContainer('curriculumInCourseUnit', array($cInCourseUnitIdLabel, $cInCourseUnitId, $cInCourseUnitDescription));

        //Field turn in
        $cInCourseTurnIdLabel = new MText('curriculumInCourseTurnIdLabel', _M('Turno', $module) . ':');
        $cInCourseTurnIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cInCourseTurnId = new MTextField('cInCourseTurnId', $this->cInCourseTurnId->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $cInCourseTurnId->setJsHint(_M('Código do turno', $module));
        $cInCourseTurnId->setReadOnly(true);
        $cInCourseTurnDescription = new MTextField('cInCourseTurnDescription', $this->cInCourseTurnDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cInCourseTurnDescription->setJsHint(_M('Descrição do turno', $module));
        $cInCourseTurnDescription->setReadOnly(true);
        $hctCurricularInCourseTurn = new MHContainer('curriculumInCourseTurn', array($cInCourseTurnIdLabel, $cInCourseTurnId, $cInCourseTurnDescription));

        //Field curricular component
        $cInCurricularComponentLabel = new MText('cInCurricularComponentLabel', _M('Disciplina', $module) . ':');
        $cInCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cInCurricularComponentLabel->setClass('m-caption m-caption-required');
        $cInCurricularComponentId = new MLookupTextField('cInCurricularComponentId', $this->cInCurricularComponentId->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'cInCurricularComponentVersion, cInCurricularComponentName', $module, 'CurricularComponent', null, null, true);
        $cInCurricularComponentId->setJsHint(_M('Informe o código da disciplina', $module));
        $validators[] = new MRequiredValidator('cInCurricularComponentId', _M('Código da disciplina de entrada', $module));
        $cInCurricularComponentVersion = new MTextField('cInCurricularComponentVersion', $this->cInCurricularComponentVersion->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $cInCurricularComponentVersion->setJsHint(_M('Versão da disciplina', $module));
        $cInCurricularComponentVersion->setReadOnly(true);
        $cInCurricularComponentName = new MTextField('cInCurricularComponentName', $this->cInCurricularComponentName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cInCurricularComponentName->setJsHint(_M('Nome da disciplina', $module));
        $cInCurricularComponentName->setReadOnly(true);
        $hctcInCurricularComponent = new MHContainer('hctcInCurricularComponent', array($cInCurricularComponentLabel, $cInCurricularComponentId, $cInCurricularComponentVersion, $cInCurricularComponentName));
        $hctcInCurricularComponent->setShowLabel(true);

        $fields[] = new Separator();
        $fields[] = new MBaseGroup('bgIn', _M('Disciplina 2', $module), array(new MSeparator(), $cInCourseInstruction, $hctcInCourse, $hctCurricularInCourseUnit, $hctCurricularInCourseTurn, $hctcInCurricularComponent, new MSeparator()), 'vertical');
        $fields[] = new Separator();

        parent::defineFields($fields, $validators, $data);

    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     */
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();

        $opts = array(
            'event' => 'tbBtnDelete_confirm',
            'function' => 'delete',
            'curriculumOutId' => MIOLO::_request('curriculumOutId'),
            'curriculumInId' =>  MIOLO::_request('curriculumInId')
        );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $goto = SAGU::getStackBackUrl();
        $gotoNo = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Questão',$module);
        $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE'), $gotoYes, $gotoNo);
    }


    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();

        if ( ( strlen($data->curriculumOutId) > 0 ) &&
             ( strlen($data->curriculumInId) > 0 ) )
        {
            if ($data->curricularComponentOutId == $data->curricularComponentInId &&
                $data->curricularComponentOutVersion == $data->curricularComponentInVersion)
            {
                $this->addError(_M('As disciplinas 1 e 2 são iguais. Selecione disciplinas diferentes.', $module));
            }
            else
            {
                try
                {
                    $business = new BusinessAcademicBusCurriculumConcurrence();

                    if ( $function == 'update' )
                    {
                        $ok = $business->updateCurriculumConcurrence($data);
                        $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
                    }
                    else
                    {
                        $ok = $business->insertCurriculumConcurrence($data);
                        $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
                    }

                    // This returns the primary key data to the search form
                    // so that the user can see the inserted/updated record.
                    $opts = array('curriculumOutIdS' => $data->curriculumOutId,
                                  'curriculumInIdS' => $data->curriculumInId);

                    if ( $function == 'update' )
                    {
                        $caption = _M('Informação', $module);
                        $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                    }
                    else
                    {
                        unset($opts);
                        $goto = SAGU::getStackBackUrl();
                        $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                        $opts = array('function'=>'insert');

                        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                        $caption = _M('Questão',$module);
                        $MIOLO->question($msg, $gotoYes, $goto);
                    }
                }
                catch (Exception $e)
                {
                    $msg = _M('Erro executando a operação solicitada.',$module) . ' ' . $e->getMessage();
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                    $caption = _M('Erro',$module);
                    $MIOLO->error( $msg, $goto, $caption );
                }
            }
        }
        else
        {
            $this->addError(_M('Impossível encontrar o currículo correto para', $module) . ' ' . $this->cOutCurricularComponentId->value . '(' . $this->cOutCurricularComponentVersion->value . ') ' . _M('ou', $module) . ' ' . $this->cInCurricularComponentId->value . '(' . $this->cInCurricularComponentVersion->value . ').');
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = new acdCurriculumConcurrence();

        $businessCurriculum = new BusinessAcademicBusCurriculum();

        //curriculumOut
        $filters1->courseId = $this->cOutCourseId->value;
        $filters1->courseVersion = $this->cOutCourseVersion->value;
        $filters1->unitId = $this->cOutCourseUnitId->value;
        $filters1->turnId = $this->cOutCourseTurnId->value;
        $filters1->curricularComponentId = $data->curricularComponentOutId = $this->cOutCurricularComponentId->value;
        $filters1->curricularComponentVersion = $data->curricularComponentOutVersion = $this->cOutCurricularComponentVersion->value;

        $searchCurriculum = $businessCurriculum->searchCurriculum($filters1);

        if ( count($searchCurriculum) == 1 )
        {
            $data->curriculumOutId = $searchCurriculum[0][0];
        }

        //curriculumIn
        $filters2->courseId = $this->cInCourseId->value;
        $filters2->courseVersion = $this->cInCourseVersion->value;
        $filters2->unitId = $this->cInCourseUnitId->value;
        $filters2->turnId = $this->cInCourseTurnId->value;
        $filters2->curricularComponentId = $data->curricularComponentInId = $this->cInCurricularComponentId->value;
        $filters2->curricularComponentVersion = $data->curricularComponentInVersion = $this->cInCurricularComponentVersion->value;

        $searchCurriculum1 = $businessCurriculum->searchCurriculum($filters2);

        if ( count($searchCurriculum1) == 1 )
        {
            $data->curriculumInId = $searchCurriculum1[0][0];
        }

        return $data;
    }
}
?>