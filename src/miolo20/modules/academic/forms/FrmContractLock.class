<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/01/2006
 */
class FrmContractLock extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct( _M('Encerramento de contrato', $module), NULL, NULL );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), _M('Pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'PersonContract', null, array('personId' => 'contractPersonId', 'contractId' => 'contractId'), !$this->page->isPostBack() );
        $contractPersonId->setJsHint(_M('Informe o código da pessoa',$module));
        $flds[] = $contractPersonId;
        $validators[] = new MIntegerValidator('contractPersonId', '', 'optional');

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonNameS',$data->contractPersonNameS), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $flds[] = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(false);
        $fields[] = $hctPerson;
        unset($flds);

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $contractLabel;
        $contractLabel->setClass('m-caption m-caption-required');

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), _M('Contrato',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'ContractLock', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $validators[] = new MIntegerValidator('contractId','', 'required');
        $flds[] = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), _M('Curso',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $flds[] = $contractCourseId;
        $contractCourseId->setJsHint(_M('Código do curso do contrato',$module));

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $flds[] = $contractCourseVersion;
        $contractCourseVersion->setJsHint(_M('Versão do curso do contrato',$module));

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), _M('Descrição',$module), 30);
        $contractCourseName->setReadOnly(true);
        $flds[] = $contractCourseName;
        $contractCourseName->setJsHint(_M('Nome do curso do contrato',$module));

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[] = $hctContract;
        unset($flds);

        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo',$module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, limbo, limbo, limbo, limbo, learningPeriodDescription', $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo',$module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo',$module), 'required');

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo',$module));
        $learningPeriodDescription->setReadOnly(true);

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(true);
        $fields[] = $hctLearningPeriod;
        
        // campos de movimentacao contratual
        $fields = array_merge($fields, AcdMovimentacaoContratual::gerarCamposEstadoContratual($this));

        $fields[] = new Separator('');
        $fields[] = new MButton('btnLock', null . _M('Encerrar', $module));
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function btnLock_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // Instancia os business
        $busCountry = new BusinessBasicBusCountry();
        $busContract = new BusinessAcademicBusContract();
        $businessInvoice = new BusinessFinanceBusInvoice();
        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $busMovementContract = new BusinessAcademicBusMovementContract();
        $busStateTransistion = new BusinessAcademicBusStateTransistion();
        $busStateContract = new BusinessAcademicBusStateContract();

        // Obtém os dados
        $tmpData = $this->getTypesData();
        
        $data = new stdClass();
        $data->contractId = $tmpData->contractId;
        $data->learningPeriodId = $tmpData->learningPeriodId;
        
        $campos = AcdMovimentacaoContratual::obterCamposDoEstadoContratual($this->getRequestValue('stateContractId'));
        
        foreach ( $campos as $campo )
        {
            $idCampo = 'field_' . $campo->stateContractFieldId;
            $valorCampo = $this->getRequestValue('field_' . $campo->stateContractFieldId);
            $data->$idCampo = $valorCampo;
        }        

        try
        {
            $dadosContrato = $busContract->getContract($data->contractId);
            $dadosPeriodLetivo = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);
                                    
            if ( ($dadosContrato->courseId != $dadosPeriodLetivo->courseId) || 
                 ($dadosContrato->courseVersion != $dadosPeriodLetivo->courseVersion) || 
                 ($dadosContrato->turnId != $dadosPeriodLetivo->turnId) || 
                 ($dadosContrato->unitId != $dadosPeriodLetivo->unitId) )
            {
                throw new Exception(_M('<br> O período letivo informado não corresponde a mesma ocorrência de curso do contrato. Para prosseguir, escolha um período letivo pertencente a mesma ocorrência.'));
            }
            
            // Verifica se o estado atual permite o novo estado seguinte
            $ultimaMovimentacao = $busMovementContract->getLastMovementContract($data->contractId);
            $novaMovimentacao = $this->getRequestValue('stateContractId');
            
            if ( strlen($ultimaMovimentacao->stateContractId) > 0 )
            {
                $movimentacao = $busStateTransistion->getStateTransistion($ultimaMovimentacao->stateContractId, $novaMovimentacao);
                
                if ( !strlen($movimentacao->beginStateId) > 0 )
                {
                    $filter = new stdClass();
                    $filter->stateContractId = $ultimaMovimentacao->stateContractId;
                    $atualEstado = $busStateContract->searchStateContract($filter);
                    
                    $filter = new stdClass();
                    $filter->stateContractId = $novaMovimentacao;
                    $novoEstado = $busStateContract->searchStateContract($filter);
                                        
                    throw new Exception(_M('<br> O estado contratual @1 não permite o estado @2 como estado seguinte.', $module, $atualEstado[0][0] . ' - ' . $atualEstado[0][1], $novoEstado[0][0] . ' - ' . $novoEstado[0][1]));
                }
            }
            
            // Verifica se o contrato já não está encerrado
            if ( $busContract->isCancelled($data->contractId) )
            {
                $contractStatus = $busContract->getContractState($data->contractId);
                $sql = _M('O contrato @1 já está encerrado.', $module, $data->contractId);
                throw new Exception($sql);
            }

            // Número mínimo de períodos cursados para efetuar o trancamento
            $minimumPeriodsForLock = SAGU::getParameter('BASIC', 'MINIMUM_PERIODS_FOR_CONTRACT_LOCK');
            $minimoAtingido = true;
            if ( strlen($minimumPeriodsForLock) > 0 )
            {
                if ( $minimumPeriodsForLock > AcdContract::obterSemestreDoContrato($data->contractId) )
                {
                    $minimoAtingido = false;
                }
            }
            
            // Se não atingiu o mínimo e não for ADMIN
            if ( !$minimoAtingido && !$MIOLO->checkAccess('FrmContractLock', A_ADMIN, false, false) )
            {
                if ( $minimumPeriodsForLock > AcdContract::obterSemestreDoContrato($data->contractId) )
                {
                    $this->addError("O aluno não atingiu o mínimo de semestres cursados obrigatórios configurados (parâmetro MINIMUM_PERIODS_FOR_CONTRACT_LOCK), impossibilitando o trancamento do contrato. Apenas um administrador poderá efetuar o encerramento.");
                }
            }
            elseif ( $this->GetFormValue('clicked') != DB_TRUE && !$minimoAtingido )
            {
                $this->addInfo("O aluno não atingiu o mínimo de semestres cursados obrigatórios configurados, impossibilitando o trancamento do contrato. Se mesmo assim deseja encerrar o contrato, clique novamente em 'Encerrar'.");
                $this->AddField(new SHiddenField('clicked', DB_TRUE));
            }
            else
            {
                $data->stateContractId = $this->getRequestValue('stateContractId');
                $data->reasonId = $this->getRequestValue('reasonId');
                $data->stateTime = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME_PHP'));

                $dataCountry = $busCountry->getCountry(SAGU::getParameter('BASIC', 'DEFAULT_COUNTRY_ID'));
                $dataContract = $busContract->getContract($data->contractId);
                $dataEntry = $busReceivableInvoice->selectOpenEntryByPerson($dataContract->personId, $data->contractId);                

                $opts['event'] = 'onlyLookContract';
                $opts['data'] = urlencode(serialize($data));

                if ( is_array($dataEntry) && (count($dataEntry) > 0) )
                {
                    // Existem lançamentos - títulos abertos para a pessoa
                    $msg = new MTextLabel('label1', _M('Esta pessoa possui títulos em aberto.', $module) . '<br>' . _M('Os títulos em aberto estão sendo listados abaixo', $module) . '.' . '<br>', null, 'red');
                    $msg2 = new MTextLabel('label2', '<br>' . _M('O que deseja fazer', $module) . '?<br>', null, 'red');
                    $div1 = new MDIV('div1', array($msg, new Separator(''), $msg2), null, 'align=center');
                    
                    $btnLookContract = new MButton('btnLookContract', _M('Somente encerrar o contrato', $module), $MIOLO->getActionURL($module, $action, null, $opts));
                    
                    $opts['event'] = 'lookContractAndInvoices';
                    $btnLookContractInvoices = new MButton('btnLookContractInvoices', _M('Encerrar contrato e cancelar os títulos', $module), $MIOLO->getActionURL($module, $action, null, $opts));

                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

                    $btnNo1 = new MButton('btnNo1', _M('Abortar', $module), $goto);
                    $div2 = new MDIV('div2', array($btnLookContract, $btnLookContractInvoices, $btnNo1), null, 'align=center');

                    $fields[] = new MSeparator('');
                    $fields[] = $div1;
                    $fields[] = new MSeparator('');
                    $fields[] = $div2;
                    $fields[] = new MSeparator('');
                    $fields[] = new MSeparator('');

                    foreach ( $dataEntry as $key1 => $value1 )
                    {
                        if ( $value1[3] != $oldMaturityDate )
                        {
                            $grdEntry[$key1] = $MIOLO->getUI()->getGrid($module, 'GrdContractBlockEntry', $data);
                            $grdEntry[$key1]->setTitle(_M('Lançamentos para título @1 e data de vencimento @2', $module, $value1[0], $value1[3]));

                            $arrayDatas[] = $value1;
                            $grdEntry[$key1]->setData($arrayDatas);

                            $footer1 = new MText('footer', str_repeat('&nbsp;', '5') . _M('Saldo em aberto', $module) .':', 'blue');
                            $footer1->setWidth('600');
                            $openBalance = $businessInvoice->getInvoiceBalance($value1[0]);
                            $footer2 = new MText('footer2', $openBalance, $openBalance>0 ? 'red' : 'blue');
                            $footerA1 = array($footer1, $footer2);
                            $hctFooter1 = new MHContainer('hctFooter', $footerA1);

                            $footer3 = new MText('footer3', str_repeat('&nbsp;', '5') . _M('Saldo atualizado', $module).':', 'blue');
                            $footer3->setWidth('600');
                            $updatedBalance = $businessInvoice->getInvoiceBalanceWithPolicies($value1[0]);
                            $footer4 = new MText('footer4', $updatedBalance, $updatedBalance>0 ? 'red' : 'blue');
                            $footerA2 = array($footer3, $footer4);
                            $hctFooter2 = new MHContainer('hctFooter2', $footerA2);
                            $vctFooter = new MVContainer('vctFooter', array($hctFooter1, $hctFooter2));
                            $grdEntry[$key1]->setFooter($vctFooter);

                            $fields[] = new Separator('');
                            $fields[] = $grdEntry[$key1];
                            $fields[] = new Separator('');

                            unset($arrayDatas);
                        }
                        else
                        {
                            $arrayDatas[] = $value1;
                        }

                        $oldMaturityDate = $value1[3];
                    }

                    $this->setFields($fields);
                }
                else
                {
                    // Não existem títulos - lançamentos em aberto para a pessoa
                    $this->page->redirect($MIOLO->getActionURL($module, $action, null, $opts));
                }
            }
        }
        catch (Exception $e)
        {
            $msg = _M('Erro executando a operação solicitada: ',$module) . ' ' . $e->getMessage();
            $this->addError( $msg );
        }
    }
    
    /**
     * Tranca somente o contrato da pessoa.
     */
    public function onlyLookContract()
    {
        $this->confirmBlock(false);
    }
    
    /**
     * Tranca o contrato e cancela os títulos da pessoa.
     */
    public function lookContractAndInvoices()
    {
        $this->confirmBlock(true);
    }

    /**
     * Tranca o contrato
     * 
     * @param boolean $cancelInvoices
     */
    public function confirmBlock($cancelInvoices = false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        try
        {
            SDatabase::beginTransaction();

            $business = new BusinessAcademicBusContractLock();        
            $busMovementContract = new BusinessAcademicBusMovementContract();

            $data = unserialize(urldecode(stripslashes(MIOLO::_request('data'))));
                        
            if ( $cancelInvoices && !$data->confirmProcess )
            {        
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

                $data->confirmProcess = true;
                $opts['event'] = 'lookContractAndInvoices';
                $opts['data'] = urlencode(serialize($data));

                $msg = _M('Todos os títulos desta pessoa serão cancelados, deseja prosseguir?', $module);
                $MIOLO->question($msg, $MIOLO->getActionURL($module, $action, null, $opts), $goto);
            }    
            
            $x = $business->runContractLock($data->contractId, $data->learningPeriodId, $this->reasonCancellationId->value, $cancelInvoices, $data->reasonId);
 
            // insere dados da movimentacao contratual
            AcdMovimentacaoContratual::inserirDadosMovimentacao($this, $data);
                        
            $ok = SDatabase::commit();

            $msg = ($cancelInvoices) ? _M('Contrato encerrado. @1 disciplinas e todos os títulos cancelados.', $module, $x) : _M('Contrato encerrado. @1 disciplinas canceladas.', $module, $x);

            if ( $ok )
            {                
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, null);

                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {                
                $msg = _M('Erro executando a operação solicitada.', $module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
        catch ( Exception $err )
        {
            SDatabase::rollback();
            $MIOLO->error($err);
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data = new AcdMovementContract();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                $data->$var = $this->$var->value;
            }
        }

        return $data;
    }
    
    public function gerarCamposComplementoMovimentacao($args)
    {
        return AcdMovimentacaoContratual::gerarCamposComplementoMovimentacao($this, $args);
    }
}
?>