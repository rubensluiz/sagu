<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *         Helio Henrique Rodrigues Guimaraes [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 03/05/2006
 */

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmCurricularComponentOutOfCurriculumUnblock extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {        
        $module = MIOLO::getCurrentModule();
        parent::__construct( new acdCurricularComponentUnblock(), array('curricularComponentUnblockId'), 'BusCurricularComponentOutOfCurriculumUnblock' );
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $fields[] = new MTextLabel('msgPupil',_M('Informação dos alunos', $module));

        if ( in_array($function, array('update', 'delete')) )
        {
            $curricularComponentUnblockId = MIOLO::_request('curricularComponentUnblockId');

            $business = new BusinessAcademicBusConditionUnblock();
            $data = $business->getConditionUnblock($curricularComponentUnblockId);

            $businessLearningPeriodId = new BusinessAcademicBusLearningPeriod();
            $dataLearningPeriod = $businessLearningPeriodId->getLearningPeriod($data->learningPeriodId);

            $data->periodId = $dataLearningPeriod->periodId;
            $busCurr = new BusinessAcademicBusCurriculum();

            $fields[] = new MHiddenField('curricularComponentUnblockId', $curricularComponentUnblockId);
            $fields[] = new MTextLabel('curricularComponentUnblockId', $data->curricularComponentUnblockId, _M('Código da disciplina desbloqueada', $module));
        }

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        $contractData = is_object($data) ? $data : $this->getTypesData();

        $fields[] = new MHiddenField('limbo', '');

        $MIOLO->getClass( 'academic', 'lookupContract' );
        $fields[] = new SLookupContract('contractId', $contractData);

        $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');
        $validators[] = new MIntegerValidator('contractPersonId', _M('Pessoa', $module));

        //Field learning period
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Período letivo', $module) . ':');
        $learningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabelS->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$data->learningPeriodId), _M('Código do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('periodId', null, null, null, null, 'learningPeriod'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId', 'courseName' => 'contractCourseName'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo',$module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo',$module), 'required');
        $learningPeriod = new MTextField('learningPeriod', $this->getFormValue('learningPeriod',$data->learningPeriod), _M('Período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriod->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriod->setReadOnly(true);
        $hctlearningPeriod = new MHContainer('hctlearningPeriod', array($learningPeriodLabelS, $learningPeriodId, $learningPeriod));
        $hctlearningPeriod->setShowLabel(false);
        $fields[] = $hctlearningPeriod;

        $fields[] = new MSeparator();
        $fields[] = new MTextLabel('msgPupil',_M('Informações da disciplina de fora do currículo', $module));
        $fields[] = new MSeparator();

        //Field course
        $courseLabel = new MText('courseLabel', _M('Curso',$module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseIdOutOfCurriculum = new MLookupTextField('courseIdOutOfCurriculum', $this->getFormValue('courseIdOutOfCurriculum', $data->courseIdOutOfCurriculum), _M('Curso',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), '', null, array('courseIdOutOfCurriculum', 'courseVersionOutOfCurriculum', 'courseNameOutOfCurriculum', 'turnIdOutOfCurriculum', 'turnDescriptionOutOfCurriculum', 'unitIdOutOfCurriculum', 'unitDescriptionOutOfCurriculum'), $module, 'CourseOccurrence', null, array('courseId' => 'courseIdOutOfCurriculum'), !$this->page->isPostBack());
        $courseIdOutOfCurriculum->setJsHint(_M('Informe o código do curso',$module));
        $fields[] = new MHiddenField('turnIdOutOfCurriculum', $turnIdOutOfCurriculum);
        $fields[] = new MHiddenField('unitIdOutOfCurriculum', $unitIdOutOfCurriculum);
        $courseVersionOutOfCurriculum = new MTextField('courseVersionOutOfCurriculum', $this->getFormValue('courseVersionOutOfCurriculum', $data->courseVersionOutOfCurriculum), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersionOutOfCurriculum->setJsHint(_M('Informe a versão do curso', $module));
        $validators[] = new MIntegerValidator('courseVersionOutOfCurriculum', _M('Versão do curso',$module));
        $courseNameOutOfCurriculum = new MTextField('courseNameOutOfCurriculum', $this->getFormValue('courseNameOutOfCurriculum', $data->courseNameOutOfCurriculum), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseNameOutOfCurriculum->setReadOnly(true);
        $courseNameOutOfCurriculum->setJsHint(_M('Nome do curso', $module));
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseIdOutOfCurriculum, $courseVersionOutOfCurriculum, $courseNameOutOfCurriculum));
        $hctCourse->setShowLabel(false);
        $fields[] = $hctCourse;

        //Field is use learning period id
        $isUseLearningPeriodId = new MHiddenField('isUseLearningPeriodId', 'true');
        $fields[] = $isUseLearningPeriodId;

        //Field curricular component
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Disciplina',$module) . ':');
        $curricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLabel->setClass('m-caption m-caption-required');
        
        // Ignorar unidade - ticket #38575
        $fields[] = new SHiddenField('ignorarUnidade', DB_TRUE);
        
        $curricularComponentId = new MLookupTextField('curricularComponentId', 
                                                      $this->getFormValue('curricularComponentId', $data->curricularComponentId), 
                                                      _M('Código',$module), 
                                                      SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), 
                                                      null, 
                                                      null, 
                                                      array('curricularComponentVersion',
                                                            'curricularComponentName'), 
                                                      $module, 
                                                      'CurricularComponentInCurriculum',
                                                      null, 
                                                      array('isUseLearningPeriodId' => 'isUseLearningPeriodId', 
                                                            'courseId' => 'courseIdOutOfCurriculum', 
                                                            'curricularComponentId' => 'curricularComponentId',
                                                            'ignorarUnidade' => 'ignorarUnidade'), 
                                                      true);
        
        $curricularComponentId->setJsHint(_M('Informe o código da disciplina', $module));
        $validators[] = new MRequiredValidator('curricularComponentId', _M('Disciplina',$module));
        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersion->setJsHint(_M('Informe a versão da disciplina', $module));
        $validators[] = new MIntegerValidator('curricularComponentVersion', _M('Versão da disciplina',$module), 'required');
        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentName->setJsHint(_M('Nome da disciplina', $module));
        $curricularComponentName->setReadOnly(true);
        $hctCurricularComponent = new MHContainer('hctCurricularComponent', array($curricularComponentLabel, $curricularComponentId, $curricularComponentVersion, $curricularComponentName));
        $hctCurricularComponent->setShowLabel(false);
        $fields[] = $hctCurricularComponent;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Última modificação', $module));
        }

        $fields[] = new Separator();
        
        parent::defineFields($fields, $validators, $data);

        if ( $function == 'insert' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        }
        elseif ( $function == 'delete' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    /**
     * Event triggered when user chooses New from the toolbar
     */
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
    }

    public function tbBtnSave_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();

        $busCurriculum = new BusinessAcademicBusCurriculum();
        $busGroup = new BusinessAcademicBusGroup();
        $busEnroll = new BusinessAcademicBusEnroll();
        $busCondition = new BusinessAcademicBusCondition();

        $filters->curricularComponentId = $data->curricularComponentId;
        $filters->curricularComponentVersion = $data->curricularComponentVersion;

        $curriculumData = $busCurriculum->searchCurriculum($filters);
        
        if ( strlen($curriculumData[0][0]) > 0 )
        {
            $msgCondition = '';
            $conditionFilter = new stdClass();
            $conditionFilter->curriculumId = $curriculumData[0][0];
            $isCondition = $busCondition->searchCondition($conditionFilter);
            
            if ( strlen($isCondition[0][0]) > 0 )
            {
                $msgCondition = 'Esta disciplina possuí requisitos cadastrados, caso seja efetuado o desbloqueio estes requisitos serão ignorados: <br>';
                
                foreach( $isCondition as $requisito )
                {
                    $condition = $busCondition->getCondition($requisito[0]);
                    
                    if ( $condition->conditionCurriculumId )
                    {
                        $msgCondition .= ' * ' . $condition->conditionalCurriculumCurricularComponentId . '/' . $condition->conditionalCurriculumCourseVersion . ' - ' . $condition->conditionalCurriculumCourseName . '<br>';
                    }
                    
                    if ( $condition->numberHour )
                    {
                        $msgCondition .= ' * ' . $condition->numberHour . ' horas <br>';
                    }
                    
                    if ( $condition->credits )
                    {
                        $msgCondition .= ' * ' . $condition->credits . ' créditos <br>';
                    }
                }
            }
        }

        $filters->courseId = $this->getFormValue('contractCourseId', $this->contractCourseId->value);
        $filters->courseVersion = $this->getFormValue('contractCourseVersion', $this->contractCourseVersion->value);
        $filters->turnId = $this->getFormValue('contractTurnId', $this->contractTurnId->value);
        $filters->unitId = $this->getFormValue('contractUnitId', $this->contractUnitId->value);

        $hasErrors = false;

        // verificar se a disciplina eh mesmo fora do curriculo
        if ( count($busCurriculum->searchCurriculum($filters)) > 0 )
        {
            $msg = _M('A disciplina @1 está na matriz curricular do curso do aluno.', $module, $data->curricularComponentName);
            $this->addError($msg);
        }
        // verificar se a disciplina esta sendo oferecida neste periodo
        if ( ! $busGroup->isCurricularComponentBeingOfferredInPeriod($data->curricularComponentId, $data->curricularComponentVersion, $data->periodId) )
        {
            $this->addError(_M('A disciplina @1 não foi oferecida no período @2.', $module, $data->curricularComponentId . '/' . $data->curricularComponentVersion . ' - ' . $data->curricularComponentName, $data->periodId));
        }

        if ( strlen( $curriculumData[0][0] ) > 0 )
        {
            $data->curriculumId = $curriculumData[0][0];

            // verificar se a disciplina já foi cursada pelo aluno informado
            if( strlen( $busEnroll->getCoursedEnrollId($curriculumData[0][0], $data->contractId) ) > 0 )
            {
                $this->addError(_M('A disciplina @1 já foi cursada pelo aluno @2.', $module, $data->curricularComponentId . ' - ' . $data->curricularComponentName, $data->personId . ' - ' .$data->personName));
            }
        }
        else
        {
            $this->addError(_M('Não existe um currículo para este curso e esta disciplina', $module).'.');
        }

        // verificar se já existe um desbloqueio para esta disciplina, periodo letivo e contrato
        $business = $this->busObject;

        $filters1->learningPeriodId = $data->learningPeriodId;
        $filters1->contractId = $data->contractId;
        $filters1->curricularComponentId = $data->curricularComponentId;
        $filters1->curricularComponentVersion = $data->curricularComponentVersion;

         $searchCurricularComponentOutOfCurriculum = $business->searchCurricularComponentOutOfCurriculumUnblock($filters1);

        if ( ( count($searchCurricularComponentOutOfCurriculum) > 0 && $function == 'insert' )
             || ($searchCurricularComponentOutOfCurriculum[0][0] != $data->curricularComponentUnblockId && count($searchCurricularComponentOutOfCurriculum) > 0) )
        {
            $this->addError(_M('Já existe desbloqueio para este contrato, período letivo e esta disciplina', $module) . '.');
        }

        if ( ! $this->hasErrors() )
        {
            foreach ( $data as $key1 => $value1 )
            {
                $opts["$key1"] = $value1;
            }

            $opts['function'] = $function;
            $opts['event'] = 'tbBtnSave_confirm';

            $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

            unset($opts['event']);

            $goto = SAGU::getStackBackUrl();
            $gotoNo = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

            $msg = _M( $msgCondition . 'Deseja realmente desbloquear a disciplina @1 para @2 no período @3?', $module, $data->curricularComponentId . '/' . $data->curricularComponentVersion . ' - ' . $data->curricularComponentName, $data->personName, $data->periodId);

            $caption = _M('Questão', $module);
            $MIOLO->question($msg, $gotoYes, $gotoNo);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_confirm($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();

        try
        {
            $business = $this->busObject;

            $opts = array('curricularComponentUnblockIdS'=>$data->curricularComponentUnblockId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);

            if ( $function == 'update' )
            {
                $business->updateCurricularComponentOutOfCurriculumUnblock($data);
                $MIOLO->information( SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $goto);

            }
            else
            {
                $business->insertCurricularComponentOutOfCurriculumUnblock($data);

                $opts = array(
                    'event'=>'tbBtnNew_click',
                    'function'=>'insert'
                );

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $MIOLO->question( SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED'), $gotoYes, $goto);
            }
        }
        catch( Exception $e )
        {
            //Nao tem turma para este curriculo e periodo letivo
            $msg = _M('Erro executando a operação requerida', $module) . '.';
            $msg .= '<br><br>' . _M('Não existe uma turma para este currículo neste período letivo', $module) . '.<br><br>';
            $this->addError( $msg .' '.$e->getMessage() );
        }
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $var != 'description' )
            {
                $data->$var = $this->getFormValue($var, $this->$var->value);
            }
        }

        $data->personId = $this->getFormValue('contractPersonId', $this->contractPersonId->value);
        $data->personName = $this->getFormValue('contractPersonName', $this->contractPersonName->value);
        $data->periodId = $this->periodId->value;
        $data->curricularComponentName = $this->curricularComponentName->value;

        return $data;
    }
}
?>