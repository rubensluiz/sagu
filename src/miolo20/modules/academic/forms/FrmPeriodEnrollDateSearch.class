<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdPeriodEnrollDate table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [edaurdo@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 07/11/2005
 */

/**
 * Form to search the scdPeriodEnrollDate table
 */
class FrmPeriodEnrollDateSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(null, new acdPeriodEnrollDate(), array('periodEnrollDateId'), 'BusPeriodEnrollDate');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Field learning period
        $fields[] = $periodEnrollDateIdS = new MTextField('periodEnrollDateIdS', $this->getFormValue('periodEnrollDateIdS', $data->periodEnrollDateIdS), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $periodEnrollDateIdS->setJsHint(_M('Informe o código do período de matricula', $module));

        //Field learning period
        $learningPeriodIdS = new MTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $data->learningPeriodIdS), _M('Código do período letivo', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $learningPeriodIdS->setJsHint(_M('Informe o código do período letivo', $module));
        $fields[] = $learningPeriodIdS;

        $this->page->isPostBack() ? $dataPeriodId = $this->getFormValue('periodIdS', $data->periodIdS) : $dataPeriodId = SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID');

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodIdS      = new MComboBox('periodIdS', $dataPeriodId, _M('Período', $module), $businessPeriod->listPeriod() );
        $periodIdS->setJsHint(_M('Selecione um período', $module));
        $fields[]       = $periodIdS;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );

        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $fields[] = $courseOccurrenceLookup;

        //Field period enroll date description
        $periodEnrollDateDescriptionS = new MTextField('periodEnrollDateDescriptionS', $this->periodEnrollDateDescriptionS->value, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $periodEnrollDateDescriptionS->setJsHint(_M('Informe a descrição do período de matrícula', $module));
        $fields[] = $periodEnrollDateDescriptionS;

        //Field bagin date lesson
        $beginDateLessonsS = new MCalendarField('beginDateLessonsS', $this->getFormValue('beginDateLessonsS', $data->beginDateLessonsS), _M('Data inicial das aulas',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDateLessonsS->setJsHint(_M('Informar a data inicial das aulas', $module));
        $validators[] = new MDATEDMYValidator('beginDateLessonsS', '', 'optional');
        $fields[] = $beginDateLessonsS;

        //Field end date lesson
        $endDateLessonsS = new MCalendarField('endDateLessonsS', $this->getFormValue('endDateLessonsS', $data->endDateLessonsS), _M('Data final das aulas',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDateLessonsS->setJsHint(_M('Informar a data final das aulas', $module));
        $validators[] = new MDATEDMYValidator('endDateLessonsS', '', 'optional');
        $fields[] = $endDateLessonsS;

        //Field formation level
        $business = new BusinessAcademicBusFormationLevel();
        $period   = $business->listFormationLevel();
        $formationLevelIdS = new MComboBox ('formationLevelIdS', $this->formationLevelIdS->value, _M('Grau de formação', $module), $period, true, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $formationLevelIdS->setJsHint(_M('Selecone o código do tipo de documento', $module));
        $fields[]      = $formationLevelIdS;
        $validators[]  = new MIntegerValidator('formationLevelIdS');

        //Field is internet
        $isInternetLabel = new MText('isInternetLabel', _M('Permitir inscrição via internet',$module) . '?');
        $isInternetLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isInternetS = $this->GetFormValue('isInternetS',$data->isInternetS);
        $isInternetS = new MRadioButtonGroup('isInternetS', '', SAGU::listTrueFalse(1), $isInternetS, null, 'horizontal');
        $isInternetS->SetShowLabel(false);
        $hctIsInternetS = new MHContainer('hctIsInternetS', array($isInternetLabel, $isInternetS));
        $fields[]  = $hctIsInternetS;

        //Field is adjustmentLabel
        $isAdjustmentLabel = new MText('isAdjustmentLabel', _M('É período de ajuste',$module) . '?');
        $isAdjustmentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isAdjustmentS = $this->GetFormValue('isAdjustmentS',$data->isAdjustmentS);
        $isAdjustmentS = new MRadioButtonGroup('isAdjustmentS', '', SAGU::listTrueFalse(1), $isAdjustmentS, null, 'horizontal');
        $isAdjustmentS->SetShowLabel(false);
        $hctIsAdjustmentS = new MHContainer('hctIsAdjustmentS', array($isAdjustmentLabel, $isAdjustmentS));
        $fields[]  = $hctIsAdjustmentS;

        //Field is selective procS
        $isSelectiveProcLabelS = new MText('isSelectiveProcLabelS', _M('É período para calouros',$module) . '?');
        $isSelectiveProcLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isSelectiveProcS = $this->GetFormValue('isSelectiveProcS',$data->isSelectiveProcS);
        $isSelectiveProcS = new MRadioButtonGroup('isSelectiveProcS', '', SAGU::listTrueFalse(1), $isSelectiveProcS, null, 'horizontal');
        $isSelectiveProcS->SetShowLabel(false);
        $hctIsSelectiveProcS = new MHContainer('hctIsSelectiveProcS', array($isSelectiveProcLabelS, $isSelectiveProcS));
        $fields[]  = $hctIsSelectiveProcS;

        parent::defineFields($fields, $module, 'GrdPeriodEnrollDateSearch', $validators);
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();

        // get filters values
        $data->periodEnrollDateId = $this->getFormValue('periodEnrollDateIdS');
        $data->learningPeriodId            = $this->getFormValue('learningPeriodIdS');
        $data->periodEnrollDateDescription = $this->getFormValue('periodEnrollDateDescriptionS');
        $data->beginDateLessons            = $this->getFormValue('beginDateLessonsS');
        $data->endDateLessons              = $this->getFormValue('endDateLessonsS');
        $data->formationLevelId            = $this->getFormValue('formationLevelIdS');
        $data->isInternet                  = $this->getFormValue('isInternetS');
        $data->isAdjustment                = $this->getFormValue('isAdjustmentS');
        $data->isSelectiveProc             = $this->getFormValue('isSelectiveProcS');
        $data->periodId                    = $this->getFormValue('periodIdS');
        $data->courseId                    = $this->getFormValue('courseId');
        $data->courseVersion               = $this->getFormValue('courseVersion');
        $data->turnId                      = $this->getFormValue('turnId');
        $data->unitId                      = $this->getFormValue('unitId');
        
        return $data;
    }
}

?>
