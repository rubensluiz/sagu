<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * PupilListing form
 *
 * @author Leovan Tavares da Silva [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Cristian Edson Göhl [cristian@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/03/2006
 */
$MIOLO->uses('classes/sreport.class', 'basic');

/**
 * Form to manipulate a pupilListing
 */
class FrmAttendance extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct( _M('Caderno de chamada e Ata de exame', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');

        $data = $this->getTypesData();

        // Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId)) > 0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $businessPeriod->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = $periodId;

        // Field course
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, true, $suffix = '', $related = null, $filter = null, $autoComplete = true, NULL, NULL, FALSE);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        // Field class
        $lblClass = new MText('lblClass', _M('Turma', $module) . ':');
        $lblClass->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $lkpClassId = new MLookupTextField('lkpClassId', $this->getFormValue('lkpClassId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'txtClassName', $module, 'Class', null, array('classId' => 'lkpClassId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'periodId' => 'periodId'), !$this->page->isPostBack());
        $lkpClassId->setJsHint(_M('Informe o código da turma', $module));
        $txtClassName = new MTextField('txtClassName', $this->getFormValue('txtClassName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $txtClassName->setJsHint(_M('Nome da turma', $module));
        $txtClassName->setReadOnly(true);
        $txtClassName->setJsHint(_M('Nome da turma', $module));
        $hctClass = new MHContainer('hctClass', array($lblClass, $lkpClassId, $txtClassName));
        $hctClass->setShowLabel(false);
        $fields[] = $hctClass;

        // Field rad option file type
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);
        $generateOptionLabel = new MText('generateOptionLabel', _M('Tipo de arquivo', $module) . ':');
        $generateOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generateOption = $this->GetFormValue('generateOption', $data->generateOption) ? $this->GetFormValue('generateOption', $data->generateOption) : DB_TRUE;
        $generateOption = new MRadioButtonGroup('generateOption', '', $opts, $generateOption, null, 'horizontal');
        $generateOption->SetShowLabel(false);
        $hctGenerateOption = new MHContainer('hctGenerateOption', array($generateOptionLabel, $generateOption));
        // FIXME: Os relatórios não estão sendo gerados em mais de uma opção de tipo de arquivo, por isso não há possibilidade de escolha
        // $fields[] = $hctGenerateOption;

        // Field emission date
        $emissionDate = new MCalendarField('emissionDate', $this->getFormValue('emissionDate', date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'))), _M('Data de emissão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão', $module));
        $validators[] = new MDateDMYValidator('emissionDate', '', 'optional');
        $fields[] = $emissionDate;

        $btnList = new MButton('btnList', _M('Localizar', $module));
        $fields[] = $btnList;

        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);

        $MIOLO->uses('classes/msuspendedform.class', 'basic');
        $htmlFields .= '<table align="left" border=0>' . '<tr><th align="left" width="100px">' . '<font face="arial" size=2>' . _M('Dias letivos', $module) . ':</font>' . '</th><th width="100px"><input type="text" id = "textFieldParam1" name="textFieldParam1"></th></tr>' . '<tr><th align="left" width="100px">' . '<font face="arial" size=2>' . _M('Data de verificação dos resultados finais', $module) . ':</font>' . '</th><th width="100px"><input id="textFieldParam2" type="text" name="textFieldParam2" onkeypress="return MIOLO_Validate_Mask(_validator_datedmy,event)"></th></tr>' . '<tr><th colspan="2"><input type="submit" value="' . _M('Continuar', $module) . '"></th></tr></table><br>';

        // $size = '200px';
        $suspendedForm = new MSuspendedForm('finalResultActForm', _M('Parâmetros do relatório', $module), $htmlFields);

        $this->page->addJsCode($suspendedForm->generateJsCode());

        $this->page->addJsCode("var _validator_datedmy        = new MIOLO_Validator();
                                    _validator_datedmy.id     = 'datedmy';
                                    _validator_datedmy.form   = '$this->id';
                                    _validator_datedmy.field  = 'textFieldParam2';
                                    _validator_datedmy.label  = '';
                                    _validator_datedmy.min    = '10';
                                    _validator_datedmy.max    = '10';
                                    _validator_datedmy.type   = 'optional';
                                    _validator_datedmy.chars  = '/0123456789';
                                    _validator_datedmy.mask   = '99/99/9999';
                                    _validator_datedmy.msgerr = '';
                                    _validator_datedmy.checker = 'MIOLO_Validate_Check_DATEDMY';");
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     */
    public function btnList_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $periodId = MIOLO::_request('periodId');
        $courseId = MIOLO::_request('courseId');
        $courseVersion = MIOLO::_request('courseVersion');
        $classId = MIOLO::_request('lkpClassId');

        $data->emissionDate = MIOLO::_request('emissionDate');

        if ( (strlen($courseId) == 0 || strlen($courseVersion) == 0) && strlen($classId) == 0 )
        {
            $this->addError(_M('Você deve preencher o campo curso ou o campo turma.', $module));
        }
        else
        {
            $business = new BusinessAcademicBusAttendance();
            $businessSchedule = new BusinessAcademicBusSchedule();
            $businessTimeSheet = new BusinessAcademicBusTimeSheet();

            $listingData = $business->listCurricularComponentGroups($periodId, $courseId, $courseVersion, $classId);

            foreach ( (array)$listingData as $ind => $val )
            {
                // $val[0] = group Id;
                // $val[1] = curricular componente
                // $val[2] = unit
                $fullList[$ind][] = $val[0];
                $fullList[$ind][] = $val[1];

                // Search and sorts the day of the week
                $filters->professorId = $val[3];
                $weekDay = $businessSchedule->getGroupWeekDays($val[0], $filters);

                if ( count($weekDay) > 0 )
                {
                    ksort($weekDay);
                    $fullList[$ind][] = str_replace(',', '<br>', implode(',', $weekDay));
                }
                else
                {
                    $fullList[$ind][] = _M('Dia da semana não definido', $module);
                }

                // Search and sorts the day of the schedule
                $timeIds = $businessSchedule->getGroupTimes($val[0]);

                if ( count($timeIds) > 0 )
                {
                    foreach ( $timeIds as $val1 )
                    {
                        $times = $businessTimeSheet->getTime($val1);
                        $arrayTime[] = $times->beginHour . ' - ' . $times->endHour;
                    }

                    $fullList[$ind][] = str_replace(',', '<br>', implode(',', $arrayTime));
                }
                else
                {
                    $fullList[$ind][] = _M('Horário não definido', $module);
                }
                $fullList[$ind][] = $val[2];
                $fullList[$ind][] = $val[3];

                unset($arrayTime);
            }

            $grid = $MIOLO->getUI()->getGrid($module, 'GrdAttendanceCurricularComponents', $data);
            $grid->setData($fullList);

            $this->addField($grid);
        }
    }

    /**
     * Function that filters the data of the form and passing as a parameter for RptExaminationAct.class that generates
     * the minutes of examination.
     */
    public function examinationAct($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusAttendance();

        $data->emissionDate = $MIOLO->_request('emissionDate');
        $data->generateOption = MIOLO::_request('generateOption');
        $data->groupId = array(array(MIOLO::_request('groupId'), MIOLO::_request('professorId')));

        if ( count($data->groupId) > 0 )
        {
            $professors = array();

            foreach ( $data->groupId as $key => $group )
            {
                list($groupId, $professorId) = $group;

                $reportData = $business->getGroupDataBySchedule($groupId, $professorId);

                $professors[] = $reportData->professor;
            }

            $reportData->emissionDate = $data->emissionDate;

            $professors = array_unique($professors);

            if ( count($professors) > 1 )
            {
                /*
                 * no caso de mais de um professor, adiciona paretensis para a
                 * pessoa poder marcar o professor do relatório
                 */
                $reportData->professors = implode(' ( ) | ', $professors);
            }
            else
            {
                $reportData->professors = current($professors);
            }

            $reportData->groupId = (int) $reportData->groupId;

            $busGroup = new BusinessAcademicBusGroup();
            $groupData = $busGroup->getGroup($reportData->groupId);
            $reportData->courseId = $groupData->curriculumCourseId;
            $reportData->courseName = $groupData->curriculumCourseName;
            $reportData->curricularComponentId = $groupData->curriculumCurricularComponentId;
            $reportData->curricularComponentName = $groupData->curriculumCurricularComponentName;
            $reportData->semester = $groupData->semester;
            $reportData->turnDescription = $groupData->turnDescription;
            $reportData->totalEnrolled = $groupData->totalEnrolled;

            // File type of the report
            $fileType = MIOLO::_REQUEST('generateOption') == 'sxw' ? 'odt' : MIOLO::_REQUEST('generateOption');

            $report = new SReport();
            $report->setReportName('examinationAct');
            // $report->setFileType($fileType);
            // FIXME: Definindo o tipo PDF porque os demais não estão funcionando
            $report->setFileType('pdf');
            $report->setParameters((array)$reportData);

            if ( !$report->generate() )
            {
                // Se vier do portal, redireciona novamente para ele com a mensagem de erro
                if ( substr_count($this->getPreviousURL(), 'portal') > 0 )
                {
                    $MIOLO->page->Redirect($this->getPreviousURL().'&action=main:documentosProfessor&groupid='.MIOLO::_request('groupId').'&attendenceError=t');
                }
                else
                {
                    $this->addError(_M('Não foi possível gerar o documento. Verifique se o professor e o horário da disciplina estão definidos.'));  
                }
            }
        }
    }

    /**
     * Function that filters the data of the form and passing as a parameter for RptAttachedLeaf.class that generates
     * the attached sheet.
     */
    public function attachedLeaf($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusAttendance();

        $data->emissionDate = $this->emissionDate->value;
        $data->generateOption = MIOLO::_request('generateOption');

        $data->groupId = array(array(MIOLO::_request('groupId'), MIOLO::_request('professorId')));

        $MIOLO->uses('classes/RptAttachedLeaf.class', $module);

        $report = new RptAttachedLeaf($data);
    }

    public function finalResultAct($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusAttendance();

        $data->periodId = $this->getFormValue('periodId', MIOLO::_request('periodId-value'));
        $data->courseId = $this->getFormValue('courseId', MIOLO::_request('courseId-value'));
        $data->courseVersion = $this->getFormValue('courseVersion', MIOLO::_request('courseVersion-value'));
        $data->emissionDate = MIOLO::_request('emissionDate');
        $data->learningDays = $this->getFormValue('textFieldParam1', MIOLO::_request('textFieldParam1'));
        $data->finalVerification = $this->getFormValue('textFieldParam2', MIOLO::_request('textFieldParam2'));

        $data->groupId = array(array(MIOLO::_request('groupId')));

        // FIXME: Definindo o tipo SXW porque os demais não estão funcionando
        $data->generateOption = 'sxw';

        $MIOLO->uses('classes/RptFinalResultAct.class', $module);

        try
        {
            $report = new RptFinalResultAct($data);
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
    }

    public function getTypesData()
    {
        $data->periodId = $this->periodId->value;
        $data->courseId = $this->courseId->value;
        $data->courseVersion = $this->courseVersion->value;
        $data->emissionDate = $this->emissionDate->value;
        $data->generateOption = $this->generateOption->value;

        return $data;
    }
}
?>