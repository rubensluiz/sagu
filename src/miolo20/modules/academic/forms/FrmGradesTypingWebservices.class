<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Grades typing form to webservices
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 01/02/2011
 */

/**
 * Form to manipulate a pupilListing
 */
class FrmGradesTypingWebservices extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Digitação de notas e frequências', $module), null, null);

        // Disable toolbar buttons
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = SAGU::getFileModule(__FILE__);
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Professor Id
        $professorId = MIOLO::_REQUEST('personId');
        $fields[] = new MHiddenField('professorId', $professorId);

        // Field period
        $busPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $busPeriod->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        $validators[] = new MRequiredValidator('periodId');

        // Separator
        $fields[]  = new Separator('');

        // Button search
        $btnList  = new MButton('btnList', _M('Localizar', $module));
        $divButtons = new MDiv('divButtons', array($btnList));
        $fields[] = $divButtons;

        // Field currentURL
        $fields[] = new MHiddenField('currentUrl', str_replace('&amp;', '&', $MIOLO->getCurrentURL()));

        // Div schedules
        $fields[] = new MDiv('divSchedulesForm', null, null, 'display=none');

        $this->page->scripts->add( $MIOLO->getActionURL( 'academic', 'html:scripts:gradesTyping.js' ));
        $this->SetLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->SetClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        parent::defineFields();

        $this->SetFields($fields);
        $this->SetValidators($validators);
    }

    public function mpopup($args)
    {
        // Field professor
        $personLabel = new MText('personLabel', _M('Professor',$module));
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId',$data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personName', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa',$module));
        $personName = new MTextField('personName', $this->personName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa',$module));
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $popupFields[]  = $hctPerson;

        $fields[] = new MPopup('popup', $popupFields, _M('Solicitação de informações', $module));

        return $fields;
    }
    
    /**
     * Exibe a GrdGradesTypingWebservices
     */
    public function btnList_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $periodId    = MIOLO::_request('periodId');
        $professorId = MIOLO::_request('professorId');

        $bus = new BusinessAcademicBusProfessorCurricularComponent();
        $listingData = $bus->listProfessorCurricularComponents($professorId, $periodId);

        $grid = $MIOLO->getUI()->getGrid($module, 'GrdGradesTypingWebservices', array( 'periodId' => $periodId, 'professorId' => $professorId ));
        $grid->setData($listingData);
        $this->addField($grid);
    }

    /**
     * @param Função para gerara o popup com formulário com grade de horários
     */
    public function getScheduleForm($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'academic';
        $args = explode(',', $args[0]);
        $groupId  = $args[0];

        $busSchedule = new BusinessAcademicBusSchedule();
        $schedules = $busSchedule->getGroupScheduleDataWithRooms($groupId);

        unset($scheduleArray);
        if (count($schedules) > 0)
        {
            foreach ($schedules as $scheduleInfo)
            {
                unset($scheduleStr);
                if (strlen($scheduleInfo[0]) > 0)
                {
                    $scheduleStr = $scheduleInfo[0];
                }
                if (strlen($scheduleStr) > 0)
                {
                    $scheduleStr .= strlen($scheduleInfo[1]) > 0 ? '-' . $scheduleInfo[1] : '';
                }
                else
                {
                    $scheduleStr = $scheduleInfo[1];
                }
                if (strlen($scheduleStr) > 0)
                {
                    $scheduleArray[] = $scheduleStr;
                    $fields[] = new MText( 'schedules'.$groupId, $scheduleStr );
                }
            }
        }
        else
        {
            $fields[] = new MText( 'scheduleNotDefined', _M('Horário não definido', $module) );
        }

        MPopup::show('schedulePopup', $fields, _M('Horários', $module));
    }
}
?>
