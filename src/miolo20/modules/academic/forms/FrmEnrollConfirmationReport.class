<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Enroll confirmation report form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 06/02/2006
 */

/**
 * Form to manipulate an enroll
 */
class FrmEnrollConfirmationReport extends SForm
{
    public $reportData;
    public $agataParameter;

    /*
     * Variable instance class that manipulates date.
     */
    private $krono;

    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();

        parent::__construct( _M('Confirmação de matrícula', $module), NULL, NULL );

        $this->krono = new MKrono();
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId)) > 0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $businessPeriod->listPeriod(), true);
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        // LearningPeriod
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $this->enrollData->learningPeriodId), _M('Período letivo', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, limbo, limbo, limbo, limbo, learningPeriodDescription', 'academic', 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Período letivo', $module));
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $this->reportData->learningPeriodDescription), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(false);
        $fields[] = $hctLearningPeriod;

        // Field person hint
        $personHint = new MText('personHint', _M('Para gerar para apenas um aluno, preencha o campo abaixo.', $module));
        $fields[] = $personHint;

        // Field contract
        $contractLabel = new MText('contractLabel', _M('Contrato', $module));
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $this->reportData->contractId), _M('Contrato', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $contractPersonId = new MTextField('contractPersonId', $this->getFormValue('contractPersonId', $this->reportData->contractPersonId), _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractPersonId->setReadOnly(true);
        $contractPersonId->setJsHint(_M('Código da pessoa', $module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $this->reportData->contractPersonName), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $contractPersonId, $contractPersonName));
        $hctContract->setShowLabel(false);
        $fields[] = $hctContract;

        // Field document model
        $optsModel[] = new MOption('detailed', 'd', _M('Detalhado', $module), true);
        $optsModel[] = new MOption('succinct', 's', _M('Sucinto', $module), false);
        $documentModelLabel = new MText('documentModelLabel', _M('Modelo de documento', $module) . ':');
        $documentModelLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $documentModel = new MRadioButtonGroup('documentModel', '', $optsModel, $this->getFormValue('documentModel', 's'), '', 'horizontal', '');
        $documentModel->setShowLabel(false);
        $hctDocumentoModel = new MHContainer('hctDocumentoModel', array($documentModelLabel, $documentModel));
        $hctDocumentoModel->setShowLabel(false);
        $fields[] = $hctDocumentoModel;
        
        //Field report format
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : SReport::FILETYPE_PDF, _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user click print
     */
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $SReport = new SReport();
        $reportPathUser = $SReport->findReportFile('academic', 'enrollConfirmationReport.jrxml');
        $reportPathDetail = $SReport->findReportFile('academic', 'enrollConfirmationDetails.jrxml');
        $reportPathSimple = $SReport->findReportFile('academic', 'enrollConfirmation.jrxml');

        if ( !is_null($reportPathUser) || !is_null($reportPathDetail) || !is_null($reportPathSimple) ) // Verifica se existe um relatório em iReport.
        {
            $this->jasperReportGenerate();
        }
        else
        {
            $MIOLO->error(_M('Não foi encontraco o relatório para ser gerado.', $module));
        }
    }
    
    /**
     * Gera o relatório em iReport caso exista.
     */
    public function jasperReportGenerate()
    {
        $data   = $this->getData();
        $parameters = array();
        
        $SReport = new SReport();
        $reportPathUser = $SReport->findReportFile('academic', 'enrollConfirmationReport.jrxml');
        
        if( is_null($reportPathUser) )
        {   
            //Relatório específico do cliente
            $reportName = 'enrollConfirmationReport';
        }
        else
        {
            if( $data->documentModel == 'd' )
            {   
                //Detalhado
                $reportName = 'enrollConfirmationReportDetails';
            }
            else
            {
                //Sucinto
                $reportName = 'enrollConfirmationReport';
            }
        }
            
        $parameters['contractid'] = $data->contractId;
        $parameters['learningperiodid'] = $data->learningPeriodId;
        $parameters['courseid'] = $data->courseId;
        $parameters['courseversion'] = $data->courseVersion;
        $parameters['turnid'] = $data->turnId;
        $parameters['unitid'] = $data->unitId;
        
        $report = new SReport();
        $report->setReportName($reportName);
        $report->setFileType($data->reportFormat);
        $report->setParameters($parameters);
        $report->generate();
    }
}
?>
