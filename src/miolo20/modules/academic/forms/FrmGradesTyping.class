<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Grades typing form
 *
 * @author Leovan Tavares da Silva [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini[fabiano@solis.coop.br]
 *
 * @since
 * Class created on 20/01/2006
 */
class FrmGradesTyping extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct(_M('Digitação de notas e frequências', $module),null,null);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnPrint');
        $this->toolbar->disableButton('tbBtnSave');
        
        if ( !MIOLO::_REQUEST('__EVENTTARGETVALUE') )
        {
            $_SESSION['professorId'] = null;
        }

        // Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $businessPeriod->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        $validators[] = new MRequiredValidator('periodId');

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;
        $fields[] = new MDiv('divExtra', null);

        // Field class
        $classLabel = new MText('classLabel', _M('Turma', $module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'className_, courseId, courseVersion, courseName, turnId, turnDescription, unitId, unitDescription', $module, 'ClassCourse', null, array( 'periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion' ), true);
        $classId->setJsHint(_M('Informe o código da turma', $module));
        $className_ = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className_->setReadOnly(true);
        $className_->setJsHint(_M('Nome da turma', $module));
        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $className_));
        $hctClass->setShowLabel(true);
        $fields[] = $hctClass;
        
        $groupLabel = new MText('groupLabel', _M('Disciplina oferecida', $module). ':');
        $groupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $groupId = new MLookupTextField('groupIds', $this->getFormValue('groupIds', $data->groupId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentName, courseId, courseVersion, courseName, limbo, limbo, limbo, limbo, limbo, limbo, limbo, turnId, turnDescription, unitId, unitDescription', $module, 'Group', null, array('className' => 'className_'), true);
        $groupId->setJsHint(_M('Informe o código da disciplina', $module));
        $groupName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $groupName->setReadOnly(true);
        $groupName->setJsHint(_M('Disciplina', $module));
        $hctGroup= new MHContainer('hctGroup', array($groupLabel,$groupId,$groupName));
        $fields[] = $hctGroup;
        
        $professorLabel = new MText('professorLabel', _M('Professor',$module) . ':');
        $professorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $professorId = new MLookupTextField('professorId', $this->getFormValue('professorId', $data->professorId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorId->setJsHint(_M('Código do professor', $module));
        $professorName = new MTextField('professorName', $this->getFormValue('professorName', $data->professorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $professorName->setJsHint(_M('Nome do professor', $module));
        $professorName->setReadOnly(true);
        $hctProfessor = new MHContainer('hctProfessor', array( $professorLabel, $professorId, $professorName) );
        $hctProfessor->setShowLabel(false);
        $fields[] = $hctProfessor;

        // Options type typing
        $opts = array(array(_M('Disciplina', 'basic'),'discipline' ),
                      array(_M('Grupo de disciplinas', 'basic'),'disciplineGroup' ) );

        // Type typing
        $typeTypingLabel = new MText('typeTypingLabel', _M('Digitação por', $module) . ':');
        $typeTypingLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $typeTypingOption = $this->GetFormValue('typeTyping', $data->typeTyping)?$this->GetFormValue('typeTyping', $data->typeTyping):'discipline';
        $typeTyping = new MRadioButtonGroup('typeTyping', null, $opts, $typeTypingOption, null, 'horizontal');
        $typeTyping->SetShowLabel(false);
        $hctTypeTyping = new MHContainer('hcTtypeTyping', array($typeTypingLabel,$typeTyping));
        $fields[] = $hctTypeTyping;

        $fields[] = new Separator('');

        $btnList = new MButton('btnList', _M('Localizar', $module));
        $divButtons = new MDiv('divButtons', array($btnList));
        $fields[] = $divButtons;

        $fields[] = new MHiddenField('currentUrl', str_replace('&amp;', '&', $MIOLO->getCurrentURL()));
        $fields[] = new MDiv('divSchedulesForm', null);

        $fields[] = new MDiv('mPopupClose', null);
        $fields[] = new MDiv('divUnblock', null);
         
        $MIOLO->getRequiredJS4Ajax();
        $this->page->addScript('m_lookup_ajax.js');
        $this->page->addScript('m_validate.js');
        $this->page->addScript(SAGU::ABSOLUTE_URL_JS_FILES . 'sagu.js');
        $this->page->scripts->add( $MIOLO->getActionURL( 'academic', 'html:scripts:gradesTyping.js' ));
        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        parent::defineFields();
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     */
    public function btnList_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Get data form
        $periodId = MIOLO::_request('periodId');
        $courseId = MIOLO::_request('courseId');
        $classId = MIOLO::_request('classId');
        $courseVersion = MIOLO::_request('courseVersion');
        $turnId = MIOLO::_request('turnId');
        $unitId = MIOLO::_request('unitId');
        $groupId = MIOLO::_request('groupIds');
        $professorId = MIOLO::_request('professorId');
        
        $opts = array('periodId' => $periodId,
                       'courseId' => $courseId,
                       'courseVersion' => $courseVersion,
                       'turnId' => $turnId,
                       'classId' => $classId,
                       'unitId' => $unitId);

        $opts1 = urlencode(serialize($opts));

        $optionTypeTyping = $this->getFormValue('typeTyping');

        // Discipline or group
        switch ($optionTypeTyping)
        {
            case 'discipline':

                try
                {
                    $businessGradeTyping = new BusinessAcademicBusGradeTyping();

                    $listingData = $businessGradeTyping->listCurricularComponentGroups($periodId, $courseId, $courseVersion, $turnId, $classId, $groupId, $professorId);

                    if ( !is_array($listingData) )
                    {
                        throw new Exception(_M('Nenhum registro encontrado', $module) . '!');
                    }

                    $grid = $MIOLO->getUI()->getGrid($module, 'GrdGradesTyping', $opts1);
                    $grid->setData($listingData);
                    $this->addField($grid);
                    $this->addField(new MSeparator());
                }
                catch ( Exception $e )
                {
                    $this->addAlert($e->getMessage());
                }

                break;

           case 'disciplineGroup':

               try
               {
                    $businessCurricularComponentGroup = new BusinessAcademicBusCurricularComponentGroup();

                    $filters = new stdClass();
                    $filters->courseId = $courseId;
                    $filters->courseVersion = $courseVersion;
                    $filters->classId = $classId;
                    $filters->unitId = $unitId;
                    $filters->turnId = $turnId;
                    $filters->periodId = $periodId;
                    $filters->professorId = $professorId;

                    $dataCurricularComponentGroup = $businessCurricularComponentGroup->searchCurricularComponentGroupByLearningPeriod($filters);

                    if ( !is_array($dataCurricularComponentGroup) )
                    {
                        throw new Exception(_M('Nenhum registro encontrado', $module) . '!');
                    }

                    $grid = $MIOLO->getUI()->getGrid($module, 'GrdGroupOfDisciplines', $opts1);

                    $grid->setData($dataCurricularComponentGroup);
                    $this->addField($grid);
                    $this->addField(new MSeparator());
                }
                catch ( Exception $e )
                {
                    $this->addAlert($e->getMessage());
                }

                break;

           default:
               break;
        }

    }

    /**
     * @param Função para gerara o popup com formulário com grade de horários
     */
    public function getScheduleForm($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'academic';
        $groupId = $args->groupId;

        $busSchedule = new BusinessAcademicBusSchedule();
        $busGroup = new BusinessAcademicBusGroup();
        $data = $busGroup->getGroup($groupId);
        $scheduleData = $busSchedule->searchSchedule($data, true);
        
//                $schedules = $busSchedule->getGroupScheduleDataWithRooms($groupId);
        

        unset($scheduleArray);
        if ( count($scheduleData) > 0 )
        {
            $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdScheduleSearch', $data);
            $grdResults->setTitle(_M('Horários para', $module) . ' ' . $data->curriculumCurricularComponentId . ' - ' . $data->curriculumCurricularComponentName);
            $grdResults->setData($scheduleData);
            $grdResults->setIsScrollable(false);
            $grdResults->setReadOnlyMode(true);
            
            $fields[] = new MDiv('divX', array($grdResults));
        }
        else
        {
            $fields[] = new MText( 'scheduleNotDefined', _M('Horário não definido', $module) );
        }
        
        MPopup::show($module, $fields, _M('Horários', $module));
    }
    

    /**
     * Desbloqueio de disciplina.
     *
     * @param stdClass $args
     * @return MPopup 
     */
    public function btnUnblock($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $groupId = $args->groupId;
        
        try
        {
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
            return;
        }
        
        $busGroup = new BusinessAcademicBusGroup();
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $groupUnblock = new AcdGroupUnblock();
        
        $group = $busGroup->getGroup($groupId);
        $learningPeriod = $busLearningPeriod->getLearningPeriod($group->learningPeriodId);

        $fields[] = new SHiddenField('groupId', $groupId);
        
        $fields[] = new MTextLabel('txtDisc0', $group->curriculumCurricularComponentName, _M('Disciplina', $module));
        $fields[] = new MTextLabel('txtDisc1', $group->learningPeriodId . ' - ' . $learningPeriod->description, _M('Período letivo', $module));
        $fields[] = new MTextLabel('txtDisc2', $learningPeriod->limitRegisterDate, _M('Data limite configurada no período letivo', $module));
        
        $fields[] = $limitdate = new MCalendarField('limitdate', null, _M('Nova data limite para registro', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $limitdate->setJsHint(_M('Esta data prorrogará o limite para registro de notas/frequências para esta disciplina, sobrescrevendo a configuração no Período letivo.', $module));
        $this->addValidator(new MDateDMYValidator('limitdate', _M('Data limite para registro', $module), 'required'));

        $fields[] = $obs = new sMultiLineField('observation', array(
            'label' => _M('Justificativa', $module),
        ));
        $obs->setJsHint(_M('Informe a justificativa', $module));
        $this->addValidator(new MRequiredValidator('observation', _M('Justificativa', $module)));

        $btn = new MButton('btnApply', _M('Salvar', $module), SForm::getAjaxAction('saveUnblock', 'divUnblock'));
        $btnCancel = new MButton('btnCancel', _M('Cancelar', $module), 'javascript:mpopup.remove();');
        $fields[] = new MHContainer(rand(), array($btn, $btnCancel));

        $historico = $groupUnblock->obterHistoricoParaTableRaw($groupId);
        
        if ( count($historico) > 0 )
        {
            $fields[] = $table = new MTableRaw(_M('Histórico'), $historico, array(
                _M('Data do registro', $module),
                _M('Data limite', $module),
                _M('Justificativa', $module)
            ));
        }
        
        MPopup::show('popAllocate', $fields, _M('Desbloquear disciplina para digitação de notas', $module));
        
        $this->generateAJAXValidators();
    }
    
    public function saveUnblock($args)
    {
        $module = SAGU::getFileModule(__FILE__);
        
        $groupUnblock = new AcdGroupUnblock();
        $groupUnblock->groupId = $args->groupId;
        $groupUnblock->limitdate = $args->limitdate;
        $groupUnblock->observation = $args->observation;
        $groupUnblock->save();
        
        $this->AddInfo( _M('Desbloqueio inserido com sucesso.', $module) );
    }
}
?>