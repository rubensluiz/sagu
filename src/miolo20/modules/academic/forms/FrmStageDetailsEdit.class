<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulario de edicao de um detalhamento de estagio
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 28/02/2011
 *
 **/
MIOLO::uses('/ui/controls/msubdetail.class');

class FrmStageDetailsEdit extends SForm
{
    public function  __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Detalhamento do estágio', $module), $object, $pkey);
    }


    public function  createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $busTrainingDetail = new BusinessAcademicBusTrainingDetail();

        $filters = new stdClass();
        $filters->groupId = MIOLO::_REQUEST('groupId');
        $filters->enrollId = MIOLO::_REQUEST('enrollId');
        $rows = $busTrainingDetail->searchTrainingDetail($filters, true);

        $frmData = new stdClass();
        $frmData->disableConstruct = true;
        $FrmStageDetailsTrainingDetail = $MIOLO->getUI()->getForm($module, 'FrmStageDetailsTrainingDetail', $frmData);

        $fields[] = new MHiddenField('groupId', $this->getFormValue('groupId', MIOLO::_REQUEST('groupId')));
        $fields[] = new MHiddenField('enrollId',  $this->getFormValue('enrollId', MIOLO::_REQUEST('enrollId')));

        //
        //Informacao
        //

        //Nome da disciplina oferecida
        $curricularComponentNameLabel = new MText('curricularComponentNameLabel', _M('Disciplina oferecida', $module) . ':');
        $curricularComponentNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentName = new MText('curricularComponentName', $rows[0]->curricularComponentName);
        $controls[] = new MHContainer('curricularComponentNameCnt', array($curricularComponentNameLabel, $curricularComponentName));

        //Nome da pessoa
        $personNameEnrollLabel = new MText('personNameEnrollLabel', _M('Nome', $module) . ':');
        $personNameEnrollLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personNameEnroll = new MText('personNameEnroll', $rows[0]->personNameEnroll);
        $controls[] = new MHContainer('personNameEnrollCnt', array($personNameEnrollLabel, $personNameEnroll));

        $controls = array(new MVContainer('vctInformation', $controls));

        $fields[] = new MBaseGroup('bgrInformation', _M('Informação', $module), $controls);
        //
        
        $fields = array_merge($fields, $FrmStageDetailsTrainingDetail->getFields());

        if ( strlen(SAGU::getEventName()) <= 0 )
        {
            $FrmStageDetailsTrainingDetail->subdetail->setData($rows);
        }

        $this->setFields($fields);
        $this->SetValidators(array());

//        parent::defineFields();
    }


    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busTrainingDetail = new BusinessAcademicBusTrainingDetail();
        
        try
        {
            $busTrainingDetail->beginTransaction();

            $data = $this->getData();

            $filters = new stdClass();
            $filters->groupId = $data->groupId;
            $filters->enrollId = $data->enrollId;
            $rows = $busTrainingDetail->searchTrainingDetail($filters, true);

            $oks = array();
            foreach ( (array) $rows as $row )
            {
                $oks[] = $busTrainingDetail->deleteTrainingDetail($row->trainingDetailId);
            }

            foreach ( (array) $data->emphasis as $emp )
            {
                if ( !$emp->removeData )
                {
                    $oks[] = $busTrainingDetail->insertTrainingDetail($emp);
                }
            }

            $busTrainingDetail->endTransaction();

            $sucess = !in_array(false, $oks);

            $opts['groupIdS'] = $data->groupId;
            parent::tbBtnSave_click($sender, $sucess, $opts);
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }


    public function  tbBtnDelete_click($sender = NULL, $opts)
    {
        $opts['groupId'] = MIOLO::_REQUEST('groupId');
        $opts['enrollId'] = MIOLO::_REQUEST('enrollId');
        parent::tbBtnDelete_click($sender, $opts);
    }

    
    public function  tbBtnDelete_confirm($sender = NULL, $success)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busTrainingDetail = new BusinessAcademicBusTrainingDetail();

        //Deleta filtrando por groupId e enrollId
        $filters = new stdClass();
        $filters->groupId = MIOLO::_REQUEST('groupId');
        $filters->enrollId = MIOLO::_REQUEST('enrollId');
        $rows = $busTrainingDetail->searchTrainingDetail($filters, true);

        $oks = array();
        foreach ( (array) $rows as $row )
        {
            $oks[] = $busTrainingDetail->deleteTrainingDetail($row->trainingDetailId);
        }

        parent::tbBtnDelete_confirm($sender, !in_array(false, $oks) );
    }
}
?>