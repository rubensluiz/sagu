<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Complementary Activities form
 *
 * @author Helio H R Guimaraes [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 12/03/2006
 *
 **/

/**
 * Form to generate multiple complementary activities
 **/
class FrmGenerateMultipleClassPupil2 extends SForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            $title = _M('Inserir', $module);
        }
        else
        {
            $title = _M('Atualizar', $module);
        }
        
        parent::__construct( $title, NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $courseId       = $MIOLO->_request('courseId');
        $courseVersion  = $MIOLO->_request('courseVersion');
        $turnId         = $MIOLO->_request('turnId');
        $unitId         = $MIOLO->_request('unitId');

        $businessCourse = new BusinessAcademicBusCourse();

        $businessTurn   = new BusinessBasicBusTurn();
        $businessUnit   = new BusinessBasicBusUnit();

        $courseData     = $businessCourse->getCourse($courseId);
        $turnData       = $businessTurn->getTurn($turnId);
        $unitData       = $businessUnit->getUnit($unitId);

        $fields[]  = new MTextLabel('lbcourseId', $courseId . ' - ' . $courseData->shortName, _M('Curso', $module));
        $fields[]  = new MTextLabel('lbcourseVersion', $courseVersion, _M('Versão', $module));
        $fields[]  = new MTextLabel('lbturnId', $turnId . ' - ' . $turnData->description, _M('Turno', $module));
        $fields[]  = new MTextLabel('lbunitId', $unitId . ' - ' . $unitData->description, _M('Unidade', $module));

        $fields[]  = new MHiddenField('courseId', $courseId);
        $fields[]  = new MHiddenField('courseVersion', $courseVersion);
        $fields[]  = new MHiddenField('turnId', $turnId);
        $fields[]  = new MHiddenField('unitId', $unitId);

        //Field class
        $classLabel   = new MText('classLabel', _M('Turma', $module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classLabel->setClass('m-caption m-caption-required');
        $classId      = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'className_', $module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $classId->setJsHint(_M('Informe o código da turma', $module));
        $className_   = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className_->setReadOnly(true);
        $className_->setJsHint(_M('Nome da turma', $module));
        $hctClass     = new MHContainer('hctClass', array($classLabel, $classId, $className_));
        $hctClass->setShowLabel(true);
        $fields[]     = $hctClass;
        $validators[] = new MRequiredValidator('classId', _M('Turma', $module), 'required');
        //end class

        //Field begin date
        $beginDate    = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $fields[]     = $beginDate;
        $beginDate->setValidator(new MDATEDMYValidator('beginDate', _M('Data inicial',$module), 'required'));

        //Field end date
        $endDate    = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data inicial', $module));
        $fields[]     = $endDate;
        $endDate->setValidator(new MDATEDMYValidator('endDate', _M('Data final',$module), 'optional'));

        $fields[] = new MButton('btnGenerate', _M('Gerar', $module));

        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function btnGenerate_click($sender = null)
    {
        $MIOLO            = MIOLO::getInstance();
        $module           = MIOLO::getCurrentModule();
        $action           = MIOLO::getCurrentAction();

        $business         = new BusinessAcademicBusClassPupil();

        $data             = $this->getTypesData();

        $contractIds = unserialize(urldecode(stripslashes(MIOLO::_request('contractIds'))));

        $x = 0;

        $business->beginTransaction();

        foreach ( $contractIds as $contractId )
        {
            unset($filters1);
            unset($searchPupil);

            $filters1->classId    = $data->classId;
            $filters1->beginDate  = $data->beginDate;
            $filters1->contractId = $contractId;

            $searchPupil          = $business->searchClassPupil($filters1);

            $filters1->endDate    = $data->endDate;

            if ( is_array($searchPupil) && (count($searchPupil) > 0) )
            {
                //Update
                $ok = $business->updateClassPupil($filters1);
            }
            else
            {
                //Insert
                $ok = $business->insertClassPupil($filters1);
            }

            if ( $ok == true )
            {
                $x++;
            }
            else
            {
                $ok = false;
                break;
            }
        }

        if ( $ok == true )
        {
            $business->commit();

            $msg = _M('@1 registros inseridos', $module, $x);

            if ( $x > 0 )
            {
                $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleClassPupil';
                $goto = $MIOLO->getActionURL($module, $postAction, null, null);

                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $opts['courseId']       = $data->courseId;
                $opts['courseVersion']  = $data->courseVersion;
                $opts['turnId']         = $data->turnId;
                $opts['unitId']         = $data->unitId;
                $opts['contractIds']    = urlencode(serialize($contractIds));

                $msg  = _M('Erro executando a operação requisitada. Verifique se os dados estão corretos', $module) . '.';
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Erro', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }

    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new AcdClassPupil();
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        return $data;
    }
}

?>
