<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Enroll cancellation form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 01/02/2006
 *
 */
class FrmEnrollCancelation extends SForm
{

    /**
     * Construtor da classe
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        parent::__construct(_M('Cancelamento de disciplina',$module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Field period
        $business = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId)) > 0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $business->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[] = new MRequiredValidator('periodId', '', 'required');
        $fields[] = $periodId;

        $filters = $this->getTypesData();

        $fields[] = new MHiddenField('limbo', '');
        $MIOLO->getClass('academic', 'lookupContract');
        $fields[] = new SLookupContract('contractId', $filters);

        $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');

        //Field learning period
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), _M('Período letivo', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescription', 'academic', 'LearningPeriod', null, array( 'periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'unitId' => 'contractUnitId', 'turnId' => 'contractTurnId' ), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo', $module), 'required');
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array( $learningPeriodLabel, $learningPeriodId, $learningPeriodDescription ));
        $hctLearningPeriod->setShowLabel(false);
        $fields[] = $hctLearningPeriod;

        $fields[] = new Separator('');

        //Buttons
        $fields[] = new MButton('btnList', _M('Localizar', $module));

        $this->setFields($fields);

        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        
        parent::defineFields();
    }

    /**
     * Event triggered when user click list
     */
    public function btnList_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData();
        
        if(SAGU::getParameter('FINANCE', 'PERMITIR_ADITAR_INCENTIVOS') == DB_TRUE)
        {
            $busIncentive = new BusinessFinanceBusIncentive();
            $incentivos = $busIncentive->searchIncentive($data);
            
            foreach($incentivos as $incentivo)
            {
                if($incentivo[19] == DB_TRUE)
                {   
                    $msg = _M('Não é possível efetuar ajuste de matrícula, pois o contrato possuí o incentivo aditado.');
                    $hasErrors = true;
                    $MIOLO->error($msg);
                }
            }
        }
        
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $filtro =  new stdClass();
        $filtro->periodId = $data->periodId;
        $filtro->courseId = $_REQUEST['contractCourseId'];
        $filtro->courseVersion = $_REQUEST['contractCourseVersion'];
        $filtro->turnId = $data->turnId;
        $filtro->unitId = $data->unitId;
        $result = $busLearningPeriod->searchLearningPeriod($filtro);
        
        foreach($result as $pos)
        {
            if($pos[0] == $data->learningPeriodId)
            {
                $ok = true;
            }
        }

        if(!$ok)
        {
            return $this->addError(_M('Periodo letivo selecionado não confere com o periodo letivo do curso matriculado. O periodo letivo do curso correto é o '.$result[0][0], $module));
        }
            
        $business = new BusinessAcademicBusEnrollCancelation();
        $enrolls = $business->getPersonEnrolls($data->contractId, $data->periodId, null, $data->learningPeriodId);

        $grid = $MIOLO->getUI()->getGrid($module, 'GrdEnrollCancellation', null);
        $grid->setData($enrolls);

        $this->addField(new MSeparator());
        $this->addField($grid);
        $this->addField(new MSeparator());
    }

    /**
     * Ação do botão cancelar
     */
    public function btnEnrollCancel_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $validators = array( );

        $data = $this->getData();

        $busEnrollCancelation = new BusinessAcademicBusEnrollCancelation();

        // fields needed to process the cancellation process
        $enrollId = new MHiddenField('enrollId', $this->getFormValue('enrollId'));
        $fields[] = $enrollId;
        $contractId = new MHiddenField('contractId', $this->getFormValue('contractId'));
        $fields[] = $contractId;
        $periodId = new MHiddenField('periodId', $this->getFormValue('periodId'));
        $fields[] = $periodId;
        $contractCourseId = new MHiddenField('contractCourseId', $this->getFormValue('contractCourseId'));
        $fields[] = $contractCourseId;
        $learningPeriodId = new MHiddenField('learningPeriodId', $this->getFormValue('learningPeriodId'));
        $fields[] = $learningPeriodId;

        $fields[] = new MHiddenField('contractPersonId', $this->getFormValue('contractPersonId'));
        $fields[] = new MHiddenField('contractPersonName', $this->getFormValue('contractPersonName'));

        $fields[] = new MHiddenField('contractCourseName', $this->getFormValue('contractCourseName'));

        //Field person
        $business = new BusinessAcademicBusPeriod();
        $period = $business->getPeriod($this->getFormValue('periodId'));
        $periodId = new MTextLabel('period', $this->getFormValue('periodId') . ' - ' . $period->description, _M('Período', $module));
        $fields[] = $periodId;

        //Field person
        $contractPerson = new MTextLabel('person', $this->getFormValue('contractPersonId') . ' - ' . $this->getFormValue('contractPersonName'), _M('Pessoa', $module));
        $fields[] = $contractPerson;

        //Field contract
        $contract = new MTextLabel('contract', $this->getFormValue('contractId') . ' - ' . $this->getFormValue('contractCourseId') . '/' . $this->getFormValue('contractCourseVersion') . ' ' . $this->getFormValue('contractCourseName'), _M('Contrato', $module));
        $fields[] = $contract;

        //Field reason cancellation
        $business = new BusinessAcademicBusReasonCancellation();
        $reasonCancellations = $business->listReasonCancellation();
        $reasonCancellation = new MComboBox('reasonCancellationId', $this->getFormValue('reasonCancellation'), _M('Razão de cancelamento', $module), $reasonCancellations, true);
        $reasonCancellation->setJsHint(_M('Selecione uma razão de cancelamento', $module));
        $fields[] = $reasonCancellation;
        $validators[] = new MRequiredValidator('reasonCancellationId');

        $enrolls = $busEnrollCancelation->getPersonEnrolls($data->contractId, $data->periodId, $this->getFormValue('enrollId'), null, $this->getFormValue('learningPeriodId'));

        $grid = $MIOLO->getUI()->getGrid($module, 'GrdEnrollCancellation', null);
        $grid->setData($enrolls);
        unset($grid->actions);

        $fields[] = new MSeparator();
        $fields[] = $grid;
        $fields[] = new MSeparator();

        //Buttons
        $opts = array( );
        foreach ( $data as $k => $v )
        {
            $opts[$k] = $v;
        }
        $opts['event'] = 'btnList_click';
        $backUrl = $MIOLO->getActionURL($module, $action, null, $opts);

        $opts = array( 'enrollId' => $this->getFormValue('enrollId'),
                        'learningPeriodId' => $this->getFormValue('learningPeriodId'),
            'event' => 'btnEnrollCancelConfirmation_click' );
        $confirmUrl = $MIOLO->getActionURL($module, $action, null, $opts);
        $btn1[] = new MButton('btnBack', _M('Voltar', $module), $backUrl);
        $btn1[] = new MButton('btnConfirm', _M('Confirmar cancelamento de disciplina', $module));
        $div1 = new MDiv('div1', $btn1, null, 'align=center');

        $fields[] = $div1;
        $fields[] = new Separator('');

        $this->setFields($fields);

        if ( count($validators) > 0 )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
    }

    /*
     * Ação do botão confirmar
     */
    public function btnConfirm_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData();

        foreach ( $data as $k => $v )
        {
            $opts[$k] = $v;
        }
        $opts['event'] = 'btnList_click';

        $enrollId         = $MIOLO->_request('enrollId');
        $learningPeriodId = $MIOLO->_request('learningPeriodId');
        $contractId       = $MIOLO->_request('contractId');
        $periodId         = $MIOLO->_request('periodId');
        
        
        $reasonCancelationId = $this->getFormValue('reasonCancellationId');

        try
        {
            $busEnrollCancelation = new BusinessAcademicBusEnrollCancelation();
            // start a new transaction
            $busEnrollCancelation->beginTransaction();

            // cancel the specified enroll id
            $busEnrollCancelation->cancelarDisciplina($enrollId, $reasonCancelationId, $learningPeriodId);
            
            // Caso esteja definido para o semestre ser equivalente a carga horária cursada.
            $acdSemesterContractPeriod = new AcdSemesterContractPeriod(null, $contractId, $periodId);
            $acdSemesterContractPeriod->atualizaSemestreDoContrato();

            // commit changes
            $busEnrollCancelation->endTransaction();

            $msg = _M('Disciplina cancelada com sucesso', $module);
            $goto = $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $goto);
        }
        catch ( Exception $e )
        {
            // rollback changes
            $busEnrollCancelation->undoTransaction();

            $this->addError(_M('Não foi possível cancelar a inscrição', $module) . ': ' . $e->getMessage());
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        // get filters values
        $data = new lookupContract();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->getFormValue($var);
        }

        return $data;
    }
}
?>