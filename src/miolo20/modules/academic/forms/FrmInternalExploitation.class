<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * InternalExploitation form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/11/2005
 */
class FrmInternalExploitation extends SForm
{
    /**
     * Construtor da classe
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        parent::__construct($function == SForm::FUNCTION_INSERT ? _M('Inserir', $module) : _M('Atualizar', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
         
        try
        {
            if ( $function == 'insert' )
            {
                $exploitationEnrollId = MIOLO::_request('exploitationEnrollId');
                $contractId = MIOLO::_request('contractId');
                $curriculumId = MIOLO::_request('curriculumId');

                if ( (strlen($exploitationEnrollId) > 0) && (strlen($contractId)) && (strlen($curriculumId) > 0) )
                {
                    $business = new BusinessAcademicBusEnroll();
                    $exploitationEnrollData = $business->getEnroll($exploitationEnrollId);

                    if( !$exploitationEnrollData->groupId )
                    {
                        $msg .= _M('Não é possível fazer um aproveitamento interno para a disciplina selecionada, pois ela é um aproveitamento externo no contrato original ou é um aproveitamento de um aproveitamento e neste caso deve ser aproveitado a disciplina original. <br> ', $module);
                        
                        $MIOLO->error($msg, $MIOLO->getActionURL('academic', 'main:process:exploitation:internalExploitation'));
                    }

                    $business = new BusinessAcademicBusGroup();
                    $enrollGroupData = $business->getGroup($exploitationEnrollData->groupId);

                    $business = new BusinessAcademicBusDegreeEnroll();
                    $filters2 = new stdClass();
                    $filters2->enrollId = $exploitationEnrollData->enrollId;
                    $degreeEnroll = $business->searchDegreeEnroll($filters2);

                    $business = new BusinessAcademicBusCurriculum();
                    $enrollCurriculumData = $business->getCurriculum($enrollGroupData->curriculumId);
                    $curriculumData = $business->getCurriculum($curriculumId);

                    $business = new BusinessAcademicBusCurricularComponent();
                    $enrollCurricularComponentData = $business->getCurricularComponent($enrollCurriculumData->curricularComponentId, $enrollCurriculumData->curricularComponentVersion);
                    $curricularComponentData = $business->getCurricularComponent($curriculumData->curricularComponentId, $curriculumData->curricularComponentVersion);

                    $business = new BusinessAcademicBusContract();
                    $enrollContractData = $business->getContract($exploitationEnrollData->contractId);
                    $contractData = $business->getContract($contractId);

                    $business = new BusinessAcademicBusCourse();
                    $enrollCourseData = $business->getCourse($enrollContractData->courseId);
                    $courseData = $business->getCourse($contractData->courseId);

                    $business = new BusinessBasicBusPhysicalPerson();
                    $personData = $business->getPhysicalPerson($contractData->personId);

                    $business = new BusinessAcademicBusInternalExploitation();

                    $filters = new stdClass();
                    $filters->curriculumId = $curriculumId;
                    $filters->contractId = $contractId;

                    $exploitationSearch = $business->searchExploitation($filters);

                    if ( strlen($exploitationSearch[0][5]) > 0 )
                    {
                        $exploitationSummary = $business->getEnrollExploitationSummary($exploitationSearch[0][5]);

                        $exploitationData = $business->getEnrollExploitationData($exploitationSearch[0][2]);
                    }
                    else
                    {
                        $exploitationSummary->remainingNumberHours = $curricularComponentData->academicNumberHours;
                    }

                    $exploitableSummary = $business->getEnrollExploitableSummary($exploitationEnrollId);

                    $fields[] = new MHiddenField('contractId', $contractId);
                    $fields[] = new MHiddenField('exploitationEnrollId', $exploitationEnrollId);
                    $fields[] = new MHiddenField('curriculumId', $curriculumId);
                    $fields[] = new MHiddenField('curriculumNumberHours', $exploitationSummary->remainingNumberHours);
                    $fields[] = new MHiddenField('exploitableNumberHours', $exploitableSummary->remainingNumberHours);
                }
                else
                {
                    $msg = _M('Nenhum código de matrícula, contrato ou matriz curricular encontrado. Você usou o procedimento correto para acessar este formulário? A(s) disciplina(s) selecionada(s) estão cadastradas na matriz curricular do curso?', $module);
                    $this->addError($msg);
                }
            }
            elseif ( $function == 'update' )
            {
                $exploitationId = MIOLO::_request('exploitationId');

                if ( strlen($exploitationId) > 0 )
                {
                    $busExploitation = new BusinessAcademicBusInternalExploitation();
                    $dataExploitation = $busExploitation->getInternalExploitation($exploitationId);

                    $business = new BusinessAcademicBusEnroll();
                    $enrollData = $business->getEnroll($dataExploitation->enrollId);
                    $exploitationEnrollData = $business->getEnroll($dataExploitation->exploitationEnrollId);

                    $business = new BusinessAcademicBusLearningPeriod();
                    $learningPeriodData = $business->getLearningPeriod($enrollData->learningPeriodId);

                    $business = new BusinessAcademicBusGroup();
                    $enrollGroupData = $business->getGroup($exploitationEnrollData->groupId);

                    $business = new BusinessAcademicBusCurriculum();
                    $enrollCurriculumData = $business->getCurriculum($enrollGroupData->curriculumId);
                    $curriculumData = $business->getCurriculum($enrollData->curriculumId);

                    $business = new BusinessAcademicBusCurricularComponent();
                    $enrollCurricularComponentData = $business->getCurricularComponent($enrollCurriculumData->curricularComponentId, $enrollCurriculumData->curricularComponentVersion);
                    $curricularComponentData = $business->getCurricularComponent($curriculumData->curricularComponentId, $curriculumData->curricularComponentVersion);

                    $business = new BusinessAcademicBusContract();
                    $enrollContractData = $business->getContract($exploitationEnrollData->contractId);
                    $contractData = $business->getContract($enrollData->contractId);

                    $business = new BusinessAcademicBusCourse();
                    $enrollCourseData = $business->getCourse($enrollContractData->courseId);
                    $courseData = $business->getCourse($contractData->courseId);

                    $business = new BusinessBasicBusPhysicalPerson();
                    $personData = $business->getPhysicalPerson($contractData->personId);

                    $filters->curriculumId = $enrollData->curriculumId;
                    $filters->contractId = $enrollData->contractId;

                    $exploitationSearch = $busExploitation->searchExploitation($filters);
                    $exploitationSummary = $busExploitation->getEnrollExploitationSummary($dataExploitation->enrollId);
                    $exploitationData = $busExploitation->getEnrollExploitationData($dataExploitation->enrollId);
                    $exploitableSummary = $busExploitation->getEnrollExploitableSummary($dataExploitation->exploitationEnrollId);

                    $fields[] = new MHiddenField('exploitationId', $exploitationId);
                    $fields[] = new MHiddenField('contractId', $enrollData->contractId);
                    $fields[] = new MHiddenField('exploitationEnrollId', $dataExploitation->exploitationEnrollId);
                    $fields[] = new MHiddenField('curriculumId', $enrollData->curriculumId);
                    $fields[] = new MHiddenField('curriculumNumberHours', $exploitationSummary->remainingNumberHours);
                    $fields[] = new MHiddenField('exploitableNumberHours', $exploitableSummary->remainingNumberHours);
                    $fields[] = new MHiddenField('pastExploitationNumberHours', $dataExploitation->exploitationNumberHours);
                    $fields[] = new MHiddenField('enrollId', $dataExploitation->enrollId);

                    $data->periodId = $learningPeriodData->periodId;
                    $data->exploitationNumberHours = $dataExploitation->exploitationNumberHours;
                    $data->exploitationCredits = $dataExploitation->exploitationCredits;
                }
                else
                {
                    $msg = _M('Nenhum código de aproveitamento encontrado. Você usou o procedimento correto para acessar este formulário?', $module);
                    $this->addError($msg);
                }
            }
        }
        catch(Exception $e)
        {
            
        }
        
        
        $fields[] = new MHiddenField('limbo', null);
        
        $personIdLabel = new MTextLabel('personIdLabel', _M('Pessoa:', $module));
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personIdLabel->setClass('m-caption');
        $personId = new MTextLabel('personId', $personData->personId . ' - ' . $personData->name);
        $fields[] = new MHContainer('personIdContainer', array( $personIdLabel, $personId ));
        $fields[] = new MSeparator('');

        $flds = array( );
        $courseIdLabel = new MTextLabel('courseIdLabel', _M('Curso:', $module));
        $courseIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseIdLabel->setClass('m-caption');
        $courseId = new MTextLabel('courseIdL', $contractData->courseId . '/' . $contractData->courseVersion . ' - ' . $courseData->name);
        $flds[] = new MHContainer('courseIdContainer', array( $courseIdLabel, $courseId ));
        
        $curricularComponentLabel = new MTextLabel('curricularComponentLabel', _M('Disciplina:', $module));
        $curricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLabel->setClass('m-caption');
        $curricularComponentId = new MTextLabel('curricularComponentId', $curricularComponentData->curricularComponentId . '/' . $curricularComponentData->curricularComponentVersion . ' - ' . $curricularComponentData->name);
        $flds[] = new MHContainer('curricularComponentContainer', array( $curricularComponentLabel, $curricularComponentId ));
        
        $academicNumberLabel = new MTextLabel('academicNumberLabel', _M('Carga horária total:', $module));
        $academicNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $academicNumberLabel->setClass('m-caption');
        $academicNumberHours = new MTextLabel('academicNumberHours', $curricularComponentData->academicNumberHours);
        $flds[] = new MHContainer('academicNumberContainer', array( $academicNumberLabel, $academicNumberHours ));
        
        //FIXME: O campo seguinte exige um casting para String, pois caso contrário não exibe o valor inteiro 0
        $color = $exploitationSummary->remainingNumberHours > 0 ? 'green' : 'red';
        $remainingNumberLabel = new MTextLabel('remainingNumberLabel', _M('Carga horária restante:', $module));
        $remainingNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $remainingNumberLabel->setClass('m-caption');
        $remainingNumberHours = new MTextLabel('remainingNumberHours', (string) $exploitationSummary->remainingNumberHours, null, $color);
        $flds[] = new MHContainer('remainingNumberContainer', array( $remainingNumberLabel, $remainingNumberHours ));
        
        //Gera um campo de texto caso a disciplina seja uma eletiva
        if($curriculumData->curricularComponentTypeId == SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_TYPE_ELECTIVE'))
        {   
            $busCurriculum = new BusinessAcademicBusCurriculum();
            
            if ( strlen($enrollData->enrollId) > 0 )
            {
                //Obtem nome da opção da eletiva
                $busExploitation = new BusinessAcademicBusExploitation();
                $aproveitamento = $busExploitation->getEnrollExploitationData($enrollData->enrollId);

                $verificaCurriculo = array();
                foreach($aproveitamento as $k => $curriculo)
                {
                    if ( !in_array($curriculo[7], $verificaCurriculo) )
                    {
                        $verificaCurriculo[] = $curriculo[7];
                        $curriculos[] = $busCurriculum->getCurriculum($curriculo[7]);
                        $curriculoName .= $curriculos[$k]->curricularComponentId . '/' . $curriculos[$k]->curricularComponentVersion . ' - ' . $curriculos[$k]->curricularComponentName.', ';
                    }
                }

                $curriculoName = substr($curriculoName, 0, strlen($curriculoName)-2);
            }
            else
            {
                $discplinaDaEletiva = MIOLO::_REQUEST('electiveCurriculumId');
                
                $busCurriculum = new BusinessAcademicBusCurriculum();
                $eletiva = $busCurriculum->getCurriculum($discplinaDaEletiva);
                $curriculoName = $eletiva->curricularComponentName;
            }
            
            //Recebe o curriculumid para ser salvo
            $electiveCurriculumId = new MHiddenField('electiveCurriculumId', $discplinaDaEletiva);
            $flds[] = $electiveCurriculumId;
            
            $electiveCurriculumLabel = new MText('electiveCurriculumLabel', _M('Opção da eletiva', $module) . ':');
            $electiveCurriculumLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $electiveCurriculumLabel->setClass('m-caption');
            $electiveCurriculum = new MTextLabel('electiveCurriculum', $curriculoName);
            $flds[] = new MHContainer('hctElectiveCurriculum', array( $electiveCurriculumLabel, $electiveCurriculum ));
        }
        
        $bsg1 = new BaseGroup('bsg1', _M('Dados da disciplina do curso', $module), $flds, 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width = '100%';
        $fields[] = $bsg1;

        if ( count($exploitationData) > 0 )
        {
            $gridFilters = new stdClass();
            $gridFilters->home = $action;
            $gridFilters->readOnly = true;

            $gridExploitations = $MIOLO->getUI()->getGrid($module, 'GrdExploitationSearch', $gridFilters);
            $gridExploitations->setData($exploitationData);
            $fields[] = $gridExploitations;
        }

        $fields[] = new MSeparator('');

        unset($flds);
        
        $enrollCourseLabel = new MTextLabel('enrollCourseLabel', _M('Curso:', $module));
        $enrollCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $enrollCourseLabel->setClass('m-caption');
        $enrollCourseId = new MTextLabel('enrollCourseId', $enrollContractData->courseId . '/' . $enrollContractData->courseVersion . ' - ' . $enrollCourseData->name);
        $flds[] = new MHContainer('enrollCourseContainer', array( $enrollCourseLabel, $enrollCourseId ));
        
        $enrollComponentLabel = new MTextLabel('enrollComponentLabel', _M('Disciplina:', $module));
        $enrollComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $enrollComponentLabel->setClass('m-caption');
        $enrollComponentId = new MTextLabel('enrollComponentId', $enrollCurricularComponentData->curricularComponentId . '/' . $enrollCurricularComponentData->curricularComponentVersion . ' - ' . $enrollCurricularComponentData->name);
        $flds[] = new MHContainer('enrollComponentContainer', array( $enrollComponentLabel, $enrollComponentId ));
                
        $enrollNoteLabel = new MTextLabel('enrollNoteLabel', _M('Nota final:', $module));
        $enrollNoteLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $enrollNoteLabel->setClass('m-caption');
        $enrollNote = new MTextLabel('enrollNote', $exploitationEnrollData->finalNote);
        $flds[] = new MHContainer('enrollNoteContainer', array( $enrollNoteLabel, $enrollNote ));
        
        $enrollConceptLabel = new MTextLabel('enrollConceptLabel', _M('Conceito:', $module));
        $enrollConceptLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $enrollConceptLabel->setClass('m-caption');
        $enrollConcept = new MTextLabel('enrollConcept', $exploitationEnrollData->concept);
        $flds[] = new MHContainer('enrollConceptContainer', array( $enrollConceptLabel, $enrollConcept ));
        
        $enrollFreqLabel = new MTextLabel('enrollFreqLabel', _M('Frequência:', $module));
        $enrollFreqLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $enrollFreqLabel->setClass('m-caption');
        $enrollFreq = new MTextLabel('enrollFreq', $exploitationEnrollData->frequency);
        $flds[] = new MHContainer('enrollFreqContainer', array( $enrollFreqLabel, $enrollFreq ));
        
        $enrollAcademicLabel = new MTextLabel('enrollAcademicLabel', _M('Carga horária total:', $module));
        $enrollAcademicLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $enrollAcademicLabel->setClass('m-caption');
        $enrollAcademic = new MTextLabel('enrollAcademicNumberHours', $enrollCurricularComponentData->academicNumberHours);
        $flds[] = new MHContainer('enrollAcademicContainer', array( $enrollAcademicLabel, $enrollAcademic ));
        
        //FIXME: O campo seguinte exige um casting para String, pois caso contrário não exibe o valor inteiro 0
        $color = $exploitableSummary->remainingNumberHours > 0 ? 'green' : 'red';
        $enrollRemainingLabel = new MTextLabel('enrollRemainingLabel', _M('Carga horária restante:', $module));
        $enrollRemainingLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $enrollRemainingLabel->setClass('m-caption');
        $enrollRemaining = new MTextLabel('enrollRemainingNumberHours', (string) $exploitableSummary->remainingNumberHours, null, $color);
        $flds[] = new MHContainer('enrollRemainingContainer', array( $enrollRemainingLabel, $enrollRemaining ));

        $bsg2 = new BaseGroup('bsg2', _M('Dados da disciplina do aproveitamento', $module), $flds, 'vertical');
        $bsg2->showLabel = true;
        $bsg2->width = '100%';
        $fields[] = $bsg2;
        $fields[] = new MSeparator('');
        unset($flds);

        if ( $function == 'insert' )
        {
            if ( !$data )
            {
                $data = new stdClass();
            }
            
            //Field period
            $businessPeriod = new BusinessAcademicBusPeriod();
            $periodId = new MComboBox('periodId', $this->getFormValue('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID')), _M('Período', $module), $businessPeriod->listPeriod(), true);
            $periodId->setJsHint(_M('Selecione um período', $module));
            $fields[] = $periodId;

            // Try to automatically fill learning period
            $filters = new stdClass();
            $filters->periodId = $this->getFormValue('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'));
            $filters->courseId = $contractData->courseId;
            $filters->courseVersion = $contractData->courseVersion;
            $filters->turnId = $contractData->turnId;
            $filters->unitId = $contractData->unitId;
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $learningPeriodData = $busLearningPeriod->searchLearningPeriod($filters);
            if ( count($learningPeriodData) == 1 )
            {
                $data->learningPeriodId = $learningPeriodData[0][0];
                $data->periodId = $learningPeriodData[0][13];
                $data->courseId = $learningPeriodData[0][7];
                $data->courseVersion = $learningPeriodData[0][9];
                $data->turnId = $learningPeriodData[0][10];
                $data->unitId = $learningPeriodData[0][11];
            }

            //Field learning period
            $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
            $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $learningPeriodLabel->setClass('m-caption m-caption-required');
            $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'learningPeriodDescription, courseId, courseVersion, turnId, unitId, null,null,null,null,null,null,null,null,null,courseName, turnDescription, unitDescription', $module, 'LearningPeriod', null, array( 'periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId' ), true);
            $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
            $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo', $module), 'required');
            $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
            $learningPeriodDescription->setReadOnly(true);
            $hctLearningPeriod = new MHContainer('hctLearningPeriod', array( $learningPeriodLabel, $learningPeriodId, $learningPeriodDescription ));
            $hctLearningPeriod->setShowLabel(true);
            $fields[] = $hctLearningPeriod;
            
            /*
             * Course occurrence lookup
             */
            $lkpValue = array(
                $this->GetFormValue('courseId', $data->courseId),
                $this->GetFormValue('courseVersion', $data->courseVersion),
                $this->GetFormValue('turnId', $data->turnId),
                $this->GetFormValue('unitId', $data->unitId)
            );
            $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
            $courseOccurrenceLookup->showRequiredLabel();
            $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
            $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
            $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
            $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
            $fields[] = $courseOccurrenceLookup;
        }
        else
        {
            $fields[] = new MTextLabel('periodId', $data->periodId, _M('Período', $module));
        }

        $exploitationNumberHours = new MTextField('exploitationNumberHours', $this->GetFormValue('exploitationNumberHours', $data->exploitationNumberHours), _M('Número de horas aproveitadas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $exploitationNumberHours->setJsHint(_M('Informe o número de horas aproveitadas', $module));
        $validators[] = new MRequiredValidator('exploitationNumberHours', _M('Número de horas aproveitadas', $module));
        $fields[] = $exploitationNumberHours;

        $exploitationCredits = new MTextField('exploitationCredits', $this->GetFormValue('exploitationCredits', $data->exploitationCredits), _M('Créditos aproveitados', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $exploitationCredits->setJsHint(_M('Informe os créditos aproveitados', $module));
        $fields[] = $exploitationCredits;
        
        $exploitationFinalNote = new MTextField('exploitationFinalNote', $dataExploitation->finalNote, _M('Nota aproveitada', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $exploitationFinalNote->setJsHint(_M('Informe a nota aproveitada', $module));
        $fields[] = $exploitationFinalNote;

        $fields = array_merge($fields, $this->getCustomFields($this->getTransaction(), MIOLO::_REQUEST('exploitationId')));
        
        $fields[] = new Separator('');
        
        $this->setFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $checkNumberHours = $data->curriculumNumberHours < $data->exploitableNumberHours ? $data->curriculumNumberHours : $data->exploitableNumberHours;

        if ( ($function == 'update') && (isset($data->pastExploitationNumberHours)) )
        {
            $checkNumberHours += $data->pastExploitationNumberHours;
        }

        if ( strlen($checkNumberHours) > 0 && $data->exploitationNumberHours > $checkNumberHours )
        {
            $msg = _M('Podem ser aproveitadas até @1 horas para a disciplina selecionada.', $module, $checkNumberHours);
            $this->addError($msg);
        }
        else
        {
            try
            {
                $business = new BusinessAcademicBusInternalExploitation();
                $transaction = $business->getDatabase()->getTransaction();
                $transaction->_beginTransaction();

                if ( $function == 'update' )
                {
                    $business->updateInternalExploitation($data);
                    $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
                    $goto = $MIOLO->getActionURL($module, 'main:register:enroll', null, array( 'enrollId' => $data->enrollId, 'function' => 'update' ));
                }
                else
                {
                    $business->insertInternalExploitation($data);
                    $msg = _M('Aproveitamento cadastrado.', $module);
                    $goto = $MIOLO->getActionURL($module, $action, null, array( 'function' => 'search' ));
                    
                    $exploitation = SDatabase::getLastInsertId('AcdExploitation');
                }
                
                // Ajusta a nota aproveitada na própria matrícula - ticket #37564
                $busEnroll = new BusinessAcademicBusEnroll();
                $enroll = $busEnroll->getEnroll($data->enrollId);
                
                if ( strlen($data->finalnote) > 0 )
                {
                    if ( is_numeric($data->finalnote) )
                    {
                        $enroll->finalNote = $data->finalnote;
                        $enroll->concept = NULL;
                    }
                    else
                    {
                        $enroll->concept = $data->finalnote;
                        $enroll->finalNote = NULL;
                    }
                }
                else
                {
                    $enroll->finalNote = NULL;
                    $enroll->concept = NULL;
                }
                
                $busEnroll->updateEnroll($enroll);
                
                // Caso esteja definido para o semestre ser equivalente a carga horária cursada.
                $acdSemesterContractPeriod = new AcdSemesterContractPeriod(null, $data->contractId);
                $acdSemesterContractPeriod->atualizaSemestreDoContrato();
                
                $exploitationId = strlen($data->exploitationId) ? $data->exploitationId : $exploitation;
                
                if ( strlen($exploitationId) > 0 )
                {
                    $this->saveCustomFields($exploitationId, null, $this->getTransaction());
                }
                    
                $transaction->_commit();

                $MIOLO->information($msg, $goto);
            }
            catch ( Exception $e )
            {
                $msg = _M('Erro executando a operação solicitada.', $module) . ' ' . $e->getMessage();
                $this->addError($msg);
            }
        }
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     */
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $exploitationId = MIOLO::_request('exploitationId');

        try
        {
            $busExploitation = new BusinessAcademicBusExploitation();
            $exploitationData = $busExploitation->getExploitation($exploitationId);
        }
        catch ( Exception $e )
        {
            $msg = _M('Erro ao buscar dados de aproveitamento.', $module) . ' ' . $e->getMessage();
            $this->addError($msg);
        }

        $opts = array(
            'event' => 'tbBtnDelete_confirm',
            'function' => 'delete',
            'exploitationId' => $exploitationId
        );

        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);

        unset($opts);
        $opts['function'] = 'update';
        $opts['enrollId'] = $exploitationData->enrollId;

        $gotoNo = $MIOLO->getActionURL($module, 'main:register:enroll', null, $opts);
        $msg = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão', $module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     */
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $exploitationId = MIOLO::_request('exploitationId');

        try
        {
            SDatabase::beginTransaction();
            
            $busExploitation = new BusinessAcademicBusExploitation();
            $exploitationData = $busExploitation->getExploitation($exploitationId);

            $busEnroll = new BusinessAcademicBusEnroll();
            $enrollData = $busEnroll->getEnroll($exploitationData->enrollId);

            $busContract = new BusinessAcademicBusContract();
            $contractData = $busContract->getContract($enrollData->contractId);

            $busExploitation->deleteExploitation($exploitationId);
            
            SDatabase::commit();
            $goto = $MIOLO->getActionURL($module, 'main', null, array( 'personId' => $contractData->personId ));
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $MIOLO->information($msg, $goto);
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $msg = _M('Erro executando a operação solicitada.', $module) . ' ' . $e->getMessage();
            $this->addError($msg);
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data->contractId = MIOLO::_request('contractId');
        $data->finalnote = MIOLO::_request('exploitationFinalNote');
        $data->curriculumId = MIOLO::_request('curriculumId');
        $data->exploitationEnrollId = MIOLO::_request('exploitationEnrollId');
        $data->exploitationNumberHours = MIOLO::_request('exploitationNumberHours');
        $data->exploitationCredits = MIOLO::_request('exploitationCredits');
        $data->learningPeriodId = MIOLO::_request('learningPeriodId');
        $data->exploitationId = MIOLO::_request('exploitationId');
        $data->curriculumNumberHours = MIOLO::_request('curriculumNumberHours');
        $data->exploitableNumberHours = MIOLO::_request('exploitableNumberHours');
        $data->pastExploitationNumberHours = MIOLO::_request('pastExploitationNumberHours');
        $data->enrollId = MIOLO::_request('enrollId');
        $data->electiveCurriculumId = MIOLO::_REQUEST('electiveCurriculumId');
        
        return $data;
    }
}
?>