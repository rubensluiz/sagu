<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Course enroll certified form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/05/2006
 */
/**
 * Form to manipulate a contract document
 */
class FrmCurricularComponentEnrollCertified extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct(_M('Matrícula de disciplina', $module), NULL, NULL);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');
        
        $fields[] = new MHiddenField('limbo', '');

        // Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setClass('m-caption m-caption-required');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, array('personId' => 'personId'), true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa',$module), 'required');
        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[] = $hctPerson;

        // Field contract
        $contractLabel = new MText('contractLabel', _M('Contrato',$module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'personId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato',$module), 'required');

        // Field course
        $courseId = new MTextField('courseId', $this->getFormValue('courseId',$this->courseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseId->setReadOnly(true);
        $courseId->setJsHint(_M('Código do curso',$module));
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$this->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Versão do curso',$module));
        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso',$module));

        // Container contract + course
        $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $courseId, $courseVersion, $courseName ));
        $hctContract->setShowLabel(true);
        $fields[] = $hctContract;

        // Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $this->periodId->value))>0 ? $this->getFormValue('periodId', $this->periodId->value) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod() );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        $validators[] = new MRequiredValidator('periodId');

        // Field stamp
        $stampLabel = new MText('stampLabel', _M('Carimbo', $module) . ':');
        $stampLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        // Field employee
        $employeeId = new MLookupTextField('employeeId', $this->getFormValue('employeeId', $this->employeeId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('employeeId', 'employeeName', 'functionDescription', 'sector'), 'basic', 'Stamp', null, null, true);
        $employeeId->setJsHint(_M('Informe o código do funcionário', $module));
        $employeeName = new MTextField('employeeName', $this->getFormValue('employeeName', $data->employeeName), null, 20);
        $employeeName->setJsHint(_M('Nome do funcionário', $module));
        $employeeName->setReadOnly(true);

        // Field function
        $functionDescription = new MTextField('functionDescription', $this->getFormValue('functionDescription', $data->functionDescription), null, 20);
        $functionDescription->setJsHint(_M('Função do funcionário', $module));
        $functionDescription->setReadOnly(true);

        // Function sector
        $sector = new MTextField('sector', $this->getFormValue('sector', $data->sector), null, 20);
        $sector->setJsHint(_M('Setor do funcionário',$module));
        $sector->setReadOnly(true);

        // Container stamp + employee + function + sector
        $hctStamp = new MHContainer('hctStamp', array($stampLabel, $employeeId, $employeeName, $functionDescription, $sector));
        $hctStamp->setShowLabel(false);
        $fields[] = $hctStamp;

        // Field sector
        $sectorLabel = new MText('sectorLabel', _M('Setor',$module).':');
        $sectorLabel->setClass('m-caption m-caption-required');
        $sectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sectorId = new MLookupTextField('sectorId', $this->getFormValue('sectorId', $data->sectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sectorName', 'basic', 'Sector', null, null, true);
        $sectorId->setJsHint(_M('Informe o código do setor',$module));
        $validators[] = new MIntegerValidator('sectorId', _M('Setor',$module), 'required');
        $sectorName = new MTextField('sectorName', $this->getFormValue('sectorName', $data->sectorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sectorName->setJsHint(_M('Descrição do setor', $module));
        $sectorName->setReadOnly(true);
        $hctSector = new MHContainer('hctSector', array($sectorLabel, $sectorId, $sectorName));
        $hctSector->setShowLabel(true);
        $fields[] = $hctSector;

        // Generate option certified type
        $opts[] = new MOption('optGraduation', 'G', _M('Graduação', $module), true);
        $opts[] = new MOption('optTechnician', 'T', _M('Técnico', $module), false);

        // Field option certified
        $radOptionLabel = new MText('radOptionLabel', _M('Tipo de atestado', $module) . ':');
        $radOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radOption = new MRadioButtonGroup('radOption', '', $opts, $this->getFormValue('radOption', $this->radOption->value), '', 'vertical');
        $radOption->setShowLabel(false);
        $hctOption = new MHContainer('hctOption', array($radOptionLabel, $radOption));
        $hctOption->setShowLabel(false);
        $fields[] = $hctOption;

        unset($opts);

        // Gerenate option file type
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);

        // Field file format
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType', 'pdf'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[] = $hctFileType;

        // Field emission date
        $emissionDate = new MCalendarField('emissionDate', strlen($this->getFormValue('emissionDate'))>0 ? $this->getFormValue('emissionDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data de emissão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão', $module));
        $validators[] = new DateDMYValidator('emissionDate', null, 'required');
        $fields[] = $emissionDate;

        $fields[] = new MSeparator();

        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     */
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // Obtém os dados do formulário
        $filter = $this->getTypesData();

        $havePermission = false;

        if ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') && (strtoupper(SAGU::getParameter('BASIC', 'WARNING_IF_DEFAULTER')) == 'TRUE') )
        {
            if ( $filter->ignoreDebits != 'yes' )
            {
                $busEnrollConfig = new BusinessAcademicBusEnrollConfig();
                $business = new BusinessFinanceBusGeneralQueries();
                $businessContract = new BusinessAcademicBusContract();

                $debt = $business->getDefaulterDebt($filter->contractId, false);
                $debt = strlen($debt) > 0 ? $debt : 0;

                // Verifica se o aluno possui débitos financeiros
                if ( $debt > 0 )
                {
                    $this->addError(_M('O sistema detectou uma dívida com a instituição. Por favor, verifique com o setor financeiro.', $module));

                    $contract = $businessContract->getContract($filter->contractId);
                    $enrollConfig = $busEnrollConfig->getCourseEnrollConfig($contract->courseId, $contract->courseVersion, $contract->turnId, $contract->unitId);

                    if ( $MIOLO->checkAccess('FrmCurricularComponentEnrollCertified', A_ADMIN, false, true) || $enrollConfig->blockDebt == DB_FALSE)
                    {
                        $this->addField(new MHiddenField('ignoreDebits','yes'));

                        $this->addError(_M('Se desejar continuar mesmo assim, clique no botão "Imprimir" abaixo.', $module));
                    }
                }
                else
                {
                    $havePermission = true;
                }
            }
            else
            {
                $havePermission = true;
            }
        }
        else
        {
            $havePermission = true;
        }

        if ( $havePermission )
        {
            try
            {
                // verificar se é um aluno ouvinte(daí deve aparecer um erro)
                $businessContract = new BusinessAcademicBusContract();
                $contract = $businessContract->getContract($filter->contractId);

                if ( $contract->isListener == DB_TRUE )
                {
                    throw new Exception(_M('Este é um aluno ouvinte', $module) . '!');
                }
                else
                {
                    // verificar se a pessoa está matriculada naquele semestre
                    $businessEnroll = new BusinessAcademicBusEnroll();
                    $isEnrolled = $businessEnroll->isEnrolledInPeriod($filter->contractId, $filter->periodId);

                    if ( $isEnrolled == false )
                    {
                        throw new Exception(_M('Este aluno não está matriculado', $module) . '!');
                    }
                    else
                    {
                        // pega os dados da instituicao
                        $businessCompany = new BusinessBasicBusCompany();
                        $company = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

                        $businessLegalPerson = new BusinessBasicBusLegalPerson();
                        $legalPerson = $businessLegalPerson->getLegalPerson($company->personId);

                        $businessCity = new BusinessBasicBusCity();
                        $city = $businessCity->getCity($legalPerson->cityId);

                        // pega os dados do aluno
                        $businessPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                        $physicalPerson = $businessPhysicalPerson->getPhysicalPerson($filter->personId);

                        // pega a sequencia de atestados
                        $filter->dateIssue = $filter->emissionDate;
                        $filter->certifiedTypeId = SAGU::getParameter('ACADEMIC', 'CERTIFIED_CURRICULAR_COMPONENT_ENROLL');

                        $businessCertified = new BusinessAcademicBusCertified();
                        $certifiedNumber = $businessCertified->getSequence($filter);

                        $MIOLO->uses('/core/AgataAPI.class');

                        $api = new AgataAPI;

                        $api->setParameter('$certifiedNumber', $certifiedNumber);
                        if ( $filter->certifiedType == 'G' )
                        {
                            $api->setParameter('$departament', $filter->sectorDocument);
                        }
                        elseif ( $filter->certifiedType == 'T' )
                        {
                            $api->setParameter('$departament', $filter->sectorDocument);
                        }
                        $api->setParameter('$institution', $legalPerson->name);
                        $api->setParameter('$personId', $physicalPerson->personId);
                        $api->setParameter('$name', $physicalPerson->name);
                        $api->setParameter('$companyName', $company->companyTypeDescription . ' ' . $legalPerson->fakeName);
                        $api->setParameter('$courseName', $contract->courseName);
                        $api->setParameter('$periodId', $filter->periodId);

                        $api->setParameter('$cityPhysicalPerson', $physicalPerson->cityName);
                        $api->setParameter('$number', $physicalPerson->number);
                        $api->setParameter('$neighborhood', $physicalPerson->neighborhood);
                        $api->setParameter('$locType', $physicalPerson->locationType);
                        $api->setParameter('$location', $physicalPerson->location);
                        $api->setParameter('$complement', $physicalPerson->complement);
                        $api->setParameter('$zipCode', $physicalPerson->zipCode);

                        $api->setParameter('$cityName', SAGU::getCapitulatetString($city->name));
                        $api->setParameter('$stateId', $city->stateId);
                        $api->setParameter('$stampName', SAGU::getCapitulatetString($filter->stampName));
                        $api->setParameter('$functionDescription', SAGU::getCapitulatetString($filter->functionDescription));
                        $api->setParameter('$sector', SAGU::getCapitulatetString($filter->sector));
                        $api->setParameter('$emissionDate', SAGU::getDateByExtense($filter->emissionDate));

                        $api->setLanguage($MIOLO->getConf('i18n.language'));
                        $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.sxw');
                        $api->setDataArray($null);

                        $businessTurns = new BusinessBasicBusTurn();
                        $businessSchedule = new BusinessAcademicBusSchedule();
                        $businessEnroll = new BusinessAcademicBusEnroll();
                        $data = $businessEnroll->getCurricularComponentsEnrolled($filter->contractId, $filter->periodId);

                        if ( isset($data) )
                        {
                            $lb = "\<text:line-break/\>";
                            foreach ( $data AS $index => $curricular )
                            {
                                $curricularComponent[$index][] = $curricular[0]; // courseId
                                $curricularComponent[$index][] = $curricular[1]; // courseVersion
                                $curricularComponent[$index][] = $curricular[2]; // courseName
                                $curricularComponent[$index][] = $curricular[3]; // curricularComponentId
                                $curricularComponent[$index][] = $curricular[4]; // curricularComponentVersion
                                $curricularComponent[$index][] = $curricular[9]; // curricularComponentName
                                $curricularComponent[$index][] = $curricular[6]; // academicCredits
                                $curricularComponent[$index][] = $curricular[7]; // academicNumberHours

                                $infoWeekDay = $businessSchedule->getGroupWeekDays($curricular[8]);

                                if ( isset($infoWeekDay) )
                                {
                                    ksort($infoWeekDay);

                                    $curricularComponent[$index][] = str_replace(',', "\<text:line-break/\>", implode(',', $infoWeekDay));
                                }
                                else
                                {
                                    $curricularComponent[$index][] = '';
                                }

                                $infoTurns = $businessSchedule->getGroupTurns($curricular[8]);

                                if ( isset($infoTurns) )
                                {
                                    ksort($infoTurns);

                                    for ( $count = 0; $count < count($infoTurns); $count++ )
                                    {
                                        $turn = $businessTurns->getTurn($infoTurns[$count]);
                                        if ( $infoTurns[$count + 1] != 0 )
                                        {
                                            $allTurns .= $turn->description . $lb;
                                        }
                                        else
                                        {
                                            $allTurns .= $turn->description;
                                        }
                                    }

                                    $curricularComponent[$index][] = $allTurns;
                                    unset($allTurns);
                                }
                                else
                                {
                                    $curricularComponent[$index][] = '';
                                }
                            }
                        }
                        else
                        {
                            throw new Exception(_M('Nenhum registro encontrado.', $module));
                        }

                        $array[0][1] = $curricularComponent;
                        $api->setSubDataArray($array);

                        if ( ! $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/curricularComponentEnrollCertified.sxw')) )
                        {
                            throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                        }

                        if ( $filter->fileType == 'pdf' )
                        {
                            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.pdf');
                            if ( ! $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.sxw') )
                            {
                                throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                            }
                        }

                        // There is inserted the records
                        if ( $businessCertified->insertCertified($filter) )
                        {
                            $api->fileDialog();
                        }
                        else
                        {
                            throw new Exception(_M('Não foi possível gravar o registro do certificado') . ' !');
                        }
                    }
                }
            }
            catch ( Exception $e )
            {
                $this->addError($e->getMessage());
            }
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data->contractId = $this->contractId->value;
        $data->personId = $this->personId->value;
        $data->courseId = $this->courseId->value;
        $data->courseVersion = $this->courseVersion->value;
        $data->periodId = $this->periodId->value;
        $data->fileType = $this->radFileType->value;
        $data->certifiedType = $this->radOption->value;
        $data->stampName = $this->employeeName->value;
        $data->functionDescription = $this->functionDescription->value;
        $data->sector = $this->sector->value;
        $data->sectorDocument = $this->sectorName->value;
        $data->emissionDate = $this->emissionDate->value;

        return $data;
    }
}
?>