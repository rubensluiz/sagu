<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Additive term document form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 24/05/2006
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmAdditiveTermDocument extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module       = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Termo aditivo', $module), NULL, NULL );
        set_time_limit(0);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $this->page->addJsCode('msg();');
        if ( $this->getFormValue('opts') != 'F')
        {
            //Adiciona à página uma função java scrip que esconde a divFreshmen
            $this->page->addJsCode('noneDivF();');
        }
        else
        {
            //Adiciona à página uma função java scrip que esconde a divFreshmen
            $this->page->addJsCode('noneDivEO();');        
        }
        
        $fields[] = new MHiddenField('limbo', '');

        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa',$module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), _M('Código da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName'), $module, 'PersonContract', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa',$module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;

        $opts[] = new MOption( 'optE', 'E', _M('Matriculado', $module).'<div id="enrollE">'._M('Esta opção gera contratos para Reingressos, Transferências, Portador de Diploma. Ao executar esta operação o Número do Contrato de Prestação de Serviços Educacionais do(s) aluno(s) será recodificado!', $module).'</div>', true);
        $opts[] = new MOption( 'optO', 'O', _M('Outro', $module).'<div id="enrollO">'._M('Esta opção gera contratos para Reingressos, Transferências, Portador de Diploma. Ao executar esta operação o Número do Contrato de Prestação de Serviços Educacionais do(s) aluno(s) será recodificado!', $module).'</div>', false);

        if ( SAGU::getParameter('BASIC', 'MODULE_SELECTIVEPROCESS_INSTALLED') == 'YES' )
        {
            $opts[] = new MOption( 'optF', 'F', _M('Calouro', $module).'<div id="enrollF">'._M('Esta opção gera Contrato de Prestação de Serviços para Calouros. Ao executar esta operação o Número do Contrato da Prestação de Serviços Educacionais do(s) aluno(s) será recodificado!', $module).'</div>', false );
        }

        $jsCode =
<<<HERE
    function setText()
    {
        if ( (document.getElementById('opts_optF').checked == true) )
        {
            document.getElementById('divEnrolled').style.display = 'none';
            document.getElementById('divFreshmen').style.display = 'block';
        }
        else
        {
            document.getElementById('divFreshmen').style.display = 'none';
            document.getElementById('divEnrolled').style.display = 'block';
        }
    }

    function noneDivF()
    {
        document.getElementById('divFreshmen').style.display = 'none';
    }

    function noneDivEO()
    {
        document.getElementById('divEnrolled').style.display = 'none';
    }
    
    function msg()
    {
        if ( (document.getElementById('opts_optE').checked == true) )
        {
            document.getElementById('enrollE').style.display = 'block';
            document.getElementById('enrollO').style.display = 'none';
            document.getElementById('enrollF').style.display = 'none';
        }
        if ( (document.getElementById('opts_optO').checked == true) )
        {
            document.getElementById('enrollE').style.display = 'none';
            document.getElementById('enrollO').style.display = 'block';
            document.getElementById('enrollF').style.display = 'none';
        }
        if ( (document.getElementById('opts_optF').checked == true) )
        {
            document.getElementById('enrollE').style.display = 'none';
            document.getElementById('enrollO').style.display = 'none';
            document.getElementById('enrollF').style.display = 'block';
        }
    }
HERE;
        $this->addJSCode($jsCode);

        for ( $i=0; $i<count($opts); $i++ )
        {
            $opts[$i]->addAttribute('onChange', 'setText()');
        }

        //Field rad option situation
        $radSituationLabel = new MText('radSituationLabel', _M('Situação do aluno', $module) . ':');
        $radSituationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radSituation = new MRadioButtonGroup('opts','', count($opts) == 0 ? $this->getFormValue('opts') : $opts);
        $radSituation->addAttribute('onChange', 'msg()');
        $hctSituation = new MHContainer('hctSituation', array($radSituationLabel, $radSituation));
        $hctSituation->setShowLabel(false);
        $fields[]     = $hctSituation;                  

        unset($opts);
        
        //Field course
        $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseLabel->setClass('m-caption m-caption-required');
        $courseId     = new MLookupTextField('courseId', $this->getFormValue('courseId', $this->courseId->value), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseVersion, courseName', $module, 'CourseVersion', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $courseId->setJsHint(_M('Informe o código do curso', $module));
        $courseName = new MTextField('courseName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso',$module));
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $this->courseVersion->value), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setJsHint(_M('Informe a versão do curso',$module));
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodLabel    = new MText('periodLabel', _M('Período',$module));
        $periodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), '', $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));        
        $hctPeriod = new MHContainer('hctPeriod', array($periodLabel, $periodId));

        //Field learning period
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$this->learningPeriodId->value), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array(null, 'courseId', 'courseVersion', null, 'unitId', 'learningPeriodDescription', null, null, null, null, null, null, null, null, null, 'courseName'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $this->learningPeriodDescription->value), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));

        //Field unit
        $business     = new BusinessBasicBusUnit();
        $unitLabel    = new MText('unitLabel', _M('Unidade', $module));
        $unitLabel->setClass('m-caption m-caption-required');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitLabel->setClass('m-caption m-caption-required');
        $unitId       = new MComboBox('unitId', $this->getFormValue('unitId', $this->unitId->value), '', $business->listUnit());
        $unitId->setJsHint(_M('Selecione uma unidade', $module));
        $hctUnit      = new MHContainer('hctUnit', array($unitLabel, $unitId));

        $vctEnrolled = new MVContainer('vctEnrolled', array ($hctPeriod, $hctLearningPeriod, $hctUnit));
        
        $fields[] = new MDiv('divEnrolled', $vctEnrolled, null, 'align=left');

        //Field selective process
        $selectiveProcessLabel = new MText('selectiveProcessLabel', _M('Processo seletivo', $module));
        $selectiveProcessLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $selectiveProcessLabel->setClass('m-caption m-caption-required');
        $selectiveProcessId = new MComboBox('selectiveProcessId', $this->getFormValue('selectiveProcessId', $data->selectiveProcessId), '', SprSelectiveProcess::listNormal());
        $selectiveProcessId->setJsHint(_M('Selecione um processo seletivo', $module));
        $hctSelectiveProcess = new MHContainer('hctSelectiveProcess', array ($selectiveProcessLabel, $selectiveProcessId) );

        //Field rad option
        $opts[] = new MOption('opt1', '1', _M('1ª opção', $module), true);
        $opts[] = new MOption('opt2', '2', _M('2ª opção', $module), false);
        $opts[] = new MOption('opt3', '3', _M('3ª opção', $module), false);
        $radOptionLabel = new MText('radOptionLabel', _M('Opção', $module) . ':');
        $radOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radOption = new MRadioButtonGroup('radOption', '', $opts, $this->getFormValue('radOption', $this->radOption->value), '', 'vertical');
        $radOption->setShowLabel(false);
        $hctOption = new MHContainer('hctOption', array($radOptionLabel, $radOption));
        $hctOption->setShowLabel(false);
        
        unset($opts);        
        
        $vctFreshmen = new MVContainer('vctFreshmen', array ($hctSelectiveProcess ,$hctOption));
        
        $fields[] = new MDiv('divFreshmen', $vctFreshmen, null, 'align=left');

        //Field rad option file type
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType', 'sxw'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);        
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $cd->contractId         = MIOLO::_request('contractId');
        $cd->personId           = MIOLO::_request('personId');
        $cd->periodId           = MIOLO::_request('periodId');
        $cd->courseId           = MIOLO::_request('courseId');
        $cd->courseVersion      = MIOLO::_request('courseVersion');
        $cd->unitId             = MIOLO::_request('unitId');
        $cd->learningPeriodId   = MIOLO::_request('learningPeriodId');
        $cd->selectiveProcessId = MIOLO::_request('selectiveProcessId');
        $cd->fileType           = MIOLO::_request('radFileType');
        $cd->situation          = MIOLO::_request('opts');
        $cd->optionId           = MIOLO::_request('radOption');

        set_time_limit(0);

        try
        {
            if ( strlen($cd->situation) == 0 )
            {
                throw new Exception(_M('Selecione a respectiva opção de situação',$module) . '!');
            }
            elseif ( $cd->situation == 'F' && ( strlen($cd->selectiveProcessId) == 0) )
            {
                throw new Exception(_M('A pesquisa não retornou nenhum dado. Certifique-se de que os filtros tenham sido definidos corretamente',$module));
            }
            elseif ( $cd->situation != 'F' && ( strlen($cd->learningPeriodId) == 0 || strlen($cd->unitId) == 0 ) )
            {
                throw new Exception(_M('A pesquisa não retornou nenhum dado. Certifique-se de que os filtros tenham sido definidos corretamente',$module));
            }
            else
            {
                $businessContractDocument = new BusinessAcademicBusContractDocument();
                $data                     = $businessContractDocument->getGraduationContractDocument($cd);

                if ( $data[0][22] == true || $data[0][9] < 18 )
                {
                    $contractResource = 'additiveTermMinor.sxw';
                }
                else
                {
                    $contractResource = 'additiveTerm.sxw';
                }

                $businessCompany = new BusinessBasicBusCompany();
                $company         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

                $businessLegalPerson = new BusinessBasicBusLegalPerson();
                $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

                $businessCity = new BusinessBasicBusCity();
                $city         = $businessCity->getCity($legalPerson->cityId);

                $businessCountry = new BusinessBasicBusCountry();
                $country         = $businessCountry->getCountry($city->countryId);

                if ( count($data)>0 )
                {
                    $MIOLO->uses('/core/AgataAPI.class');

                    $api = new AgataAPI;

                    $api->setParameter('$companyId', $company->companyId);
                    $api->setParameter('$companyName', $company->name);
                    $api->setParameter('$cnpj', $legalPerson->cnpj);
                    $api->setParameter('$fakeName', $legalPerson->fakeName);
                    $api->setParameter('$companyCity', $city->name);
                    $api->setParameter('$companyStateId', $city->stateId);
                    $api->setParameter('$companyLocation', $legalPerson->location);
                    $api->setParameter('$companyNumber', $legalPerson->number);
                    $api->setParameter('$acronym', $company->acronym);
                    $api->setParameter('$currencySymbol', $country->currencySymbol);

                    $api->setLanguage($MIOLO->getConf('i18n.language'));
                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');
                    $api->setDataArray($data);

                    if ( ! $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/') . $contractResource) )
                    {
                        throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                    }

                    if ( $cd->fileType == 'pdf')
                    {
                        $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.pdf');
                        
                        if ( ! $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw') )
                        {
                            throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                        }
                    }

                    $api->fileDialog();
                }
                else
                {
                    throw new Exception(_M('Não foi possível gerar o documento, verifique as informações do formulário.',$module));
                }
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
}

?>
