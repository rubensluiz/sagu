<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de dados gerais do período letivo
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 03/03/2011
 */
class FrmLearningPeriodGeneralData extends FrmLearningPeriodFather
{
    /**
     * Default method to define fields
     */
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Load data
        $allData = $this->getData();
        $data = $this->getLearningPeriodData();        
        $isDuplicateMode = $data->isDuplicateMode;

        $learningPeriodId = $data->learningPeriodId;
        $fields[] = new SHiddenField('learningPeriodId', $learningPeriodId);

        // Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $value = !$isDuplicateMode ? $data->periodId : null;
        $value = SAGU::NVL( $allData->periodId, $value );
        $periodId = new MComboBox('periodId', $value, _M('Período', $module), $businessPeriod->listPeriod(), true);
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        $validators[] = new MRequiredValidator('periodId');

        /*
         * Course occurrence lookup
         */
        // So deve ser exibido caso nao tenha sido adicionado registros no passo 1 de duplicar periodos letivos
        if ( ! $isDuplicateMode )
        {
            $lkpValue = array(
                SAGU::NVL($allData->courseId, $data->courseId),
                SAGU::NVL($allData->courseVersion, $data->courseVersion),
                SAGU::NVL($allData->turnId, $data->turnId),
                SAGU::NVL($allData->unitId, $data->unitId)
            );
            $lkpRelated = array(
                'courseId',
                'courseVersion',
                'courseName',
                'turnId',
                'turnDescription',
                'unitId',
                'unitDescription',
                'formationLevelId',
                'formationLevelDescription'
            );

            $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, true, null, $lkpRelated);
            $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
            $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
            $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
            $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
            $fields[] = $courseOccurrenceLookup;
        }

        // Field formation level
        $value = SAGU::NVL( $allData->formationLevelId, $data->formationLevelId );
        $formationLevelLabel = new MText('formationLevelLabel', _M('Grau de formação', $module).':');
        $formationLevelLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $formationLevelLabel->setClass('m-caption m-caption-required');
        $formationLevelId = new MLookupTextField('formationLevelId', $value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'formationLevelDescription', 'academic', 'FormationLevel', null, null, true);
        $formationLevelId->setJsHint(_M('Informe o código do grau de formação', $module));
        $formationLevelId->setReadOnly( !$isDuplicateMode );
        $validators[] = new MIntegerValidator('formationLevelId', _M('Grau de formação', $module), 'required');
        $formationLevelDescription = new MTextField('formationLevelDescription', $this->formationLevelDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $formationLevelDescription->setJsHint(_M('Informe a descrição do grau de formação', $module));
        $formationLevelDescription->setReadOnly(true);
        $hctFormationLevel = new MHContainer('hctFormationLevel', array($formationLevelLabel, $formationLevelId, $formationLevelDescription));
        $hctFormationLevel->setShowLabel(true);
        $fields[] = $hctFormationLevel;

        // Field learning period description
        $value = !$isDuplicateMode ? $data->description : null;
        $value = SAGU::NVL($allData->description, $value);
        $learningPeriodDescription = new MTextField('description', $value, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Informe a descrição do período letivo', $module));
        $fields[] = $learningPeriodDescription;
        $validators[] = new MRequiredValidator('description');

        // Field begin date
        $value = !$isDuplicateMode ? $data->beginDate : null;
        $value = SAGU::NVL($allData->beginDate, $value);
        $beginDate = new MCalendarField('beginDate', $value, _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $beginDate->setValidator( new MDATEDMYValidator('beginDate', _M('Data inicial', $module), 'required'));
        $fields[] = $beginDate;
        $validators[] = new MRequiredValidator('beginDate');

        // Field end date
        $value = !$isDuplicateMode ? $data->endDate : null;
        $value = SAGU::NVL($allData->endDate, $value);
        $endDate = new MCalendarField('endDate', $value, _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data final', $module));
        $endDate->setValidator( new MDATEDMYValidator('endDate', _M('Data final', $module), 'required'));
        $fields[] = $endDate;
        $validators[] = new MRequiredValidator('endDate');

        // Field negin date lessons
        $value = !$isDuplicateMode ? $data->beginDateLessons : null;
        $value = SAGU::NVL($allData->beginDateLessons, $value);
        $beginDateLessons = new MCalendarField('beginDateLessons', $value, _M('Data de início das aulas', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDateLessons->setJsHint(_M('Informe a data inicial das aulas', $module));
        $beginDateLessons->setValidator( new MDATEDMYValidator('beginDateLessons', _M('Data inicial das aulas', $module), 'required'));
        $fields[] = $beginDateLessons;

        // Field week end exams begin
        $value = !$isDuplicateMode ? $data->weekEndExamsBegin : null;
        $value = SAGU::NVL($allData->weekEndExamsBegin, $value);
        $weekEndExamsBegin = new MCalendarField('weekEndExamsBegin', $value, _M('Data dos exames finais', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $weekEndExamsBegin->setJsHint(_M('Informe a data inicial de exame', $module));
        $weekEndExamsBegin->setValidator( new MDATEDMYValidator('weekEndExamsBegin', _M('Data dos exames finais', $module), 'optional'));
        $fields[] = $weekEndExamsBegin;
        
        // Field week end exams begin
        $value = !$isDuplicateMode ? $data->limitRegisterDate : null;
        $value = SAGU::NVL($allData->limitRegisterDate, $value);
        $limitRegisterDate = new MCalendarField('limitRegisterDate', $value, _M('Data limite para registro', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $limitRegisterDate->setJsHint(_M('Data limite para digitação de notas e/ou frequências, via portal. Quando for via sistema administrativo, esta data não terá efeito.', $module));
        $limitRegisterDate->setValidator( new MDATEDMYValidator('limitRegisterDate', _M('Data limite para registro', $module), 'optional'));
        $fields[] = $limitRegisterDate;
        
        // Field accepted term
        $fields[] = new MDiv('term', $this->termOfAccepted($data));        

        if ( $function == SForm::FUNCTION_UPDATE )
        {
            // Field is closed
            $isClosedLabel =  new MText('isClosedLabel', _M('Está fechado', $module) . '?');
            $isClosedLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $isClosedLabel->setClass('m-caption m-caption-required');
            $value = SAGU::NVL($allData->isClosed, $data->isClosed, DB_FALSE);
            $isClosed = new MRadioButtonGroup('isClosed', '', SAGU::listYesNo('1') , $value, null, 'horizontal');
            $isClosed->SetShowLabel(false);
            $hctIsClosed = new MHContainer('hctIsClosed', array($isClosedLabel, $isClosed));
            $hctIsClosed->setShowLabel(false);
            $fields[] = $hctIsClosed;
        }
        else
        {
            $fields[] = new SHiddenField('isClosed', DB_FALSE);
        }

        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
    }
    
    public function termOfAccepted($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
              
        $acceptTermLabel = new MText('acceptTermLabel', _M('Termo de aceite', $module) . ':');
        $acceptTermLabel->setClass('m-caption m-caption-required');
        $acceptTermLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $acceptTermLabel->addAttribute('style', 'float:right;');
        $enrollAcceptedTerm = new MEditor('enrollAcceptedTerm');
        $enrollAcceptedTerm->disableElementsPath();
        $enrollAcceptedTerm->setWidth('640');
        
        $enrollAcceptedTerm->setValue(SAGU::NVL($allData->enrollAcceptedTerm, $data->enrollAcceptedTerm));
        
        $enrollAcceptedTerm->setJsHint(_M('Informe o termo de aceite', $module));
        
        $validators[] = new MRequiredValidator('$enrollAcceptedTerm', _M('Termo de aceite', $module));
        $fields[] = new MVContainer('hctAcceptTerm', array($acceptTermLabel, $enrollAcceptedTerm));
            
        $acceptField = new MVContainer('acceptField', $fields);
        return $acceptField;
    }
}
?>