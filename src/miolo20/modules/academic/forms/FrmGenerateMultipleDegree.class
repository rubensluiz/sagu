<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * GenerateMultipleDegree form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 27/01/2006
 *
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmGenerateMultipleDegree extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {

        $module = MIOLO::getCurrentModule();
        
        parent::__construct( new acdDegree(), 'degreeId', 'BusDegree', _M('Titulo', $module));

        //$this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        //$this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $fields[]  = new MHiddenField('degreeId', $degreeId);

        $learningPeriodId  = new MHiddenField('learningPeriodId');
        $fields[] = $learningPeriodId;

        $periodId = $_GET['periodId'] ? $_GET['periodId'] : $_POST['periodId'];
        $fields[] = new MTextLabel('periodId', $periodId, _M('Período',$module));
        $fields[] = new MHiddenField('periodId', $periodId);

        //Field description
        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $validators[]   = new MRequiredValidator('description');
        $description->setJsHint(_M('Informe a descrição', $module));
        $fields[] = $description;

        //Field limit date
        $limitDate = new MCalendarField('limitDate', $this->getFormValue('limitDate', $data->limitDate), _M('Data limite',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $limitDate->setJsHint(_M('Informe a data limite', $module));
        $validators[] = new MDATEDMYValidator('limitDate', '', 'optional');
        $fields[] = $limitDate;

        //Field degree number
        $degreeNumberOpts = array(1=>'1', 2=>'2', 3=>'3', 4=>'4', 5=>'5', 6=>'6', 7=>'7', 8=>'8', 9=>'9', 10=>'10', 11=>'11', 12=>'12', 13=>'13', 14=>'14', 15=>'15', 16=>'16', 17=>'17', 18=>'18', 19=>'19', 20=>'20');
        $degreeNumber = new MSelection('degreeNumber', $this->getFormValue('degreeNumber', $data->degreeNumber), _M('Número da nota do grau acadêmico', $module), $degreeNumberOpts);
        $degreeNumber->setJsHint(_M('Selecione o numero do grau acadêmico'));
        $validators[] = new MIntegerValidator('degreeNumber', '', 'required');
        $fields[]     = $degreeNumber;
        
        //Field weith
        $weight = new MTextField('weight', $this->getFormValue('weight', $data->weight ? $data->weight : 1), _M('Peso',$module), 10);
        $weight->setJsHint(_M('Informe o peso',$module));
        $fields[] = $weight;
        $validators[] = new MRequiredValidator('weight', _M('Peso',$module));

        $mayBeNullLabel = new MText('mayBeNullLabel', _M('Pode ser nulo',$module) . '?' );
        $mayBeNullLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $mayBeNullLabel->setClass('m-caption m-caption-required');
        $mayBeNull = strlen($this->getFormValue('mayBeNull', $data->mayBeNull)) > 0 ? $this->getFormValue('mayBeNull', $data->mayBeNull) : DB_FALSE;
        $mayBeNull = new MRadioButtonGroup('mayBeNull', '', SAGU::listYesNo(1), $mayBeNull, null, 'horizontal');
        $mayBeNull->SetShowLabel(false);
        $hctMayBeNull = new MHContainer('hctMayBeNull', array($mayBeNullLabel, $mayBeNull));
        $fields[]  = $hctMayBeNull;

        $fields[]     = new MButton('btnGenerate', _M('Gerar', $module));

        $fields[] = new Separator('');
        
        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnGenerate_click($sender=NULL)
    {
        $MIOLO           = MIOLO::getInstance();
        $module          = MIOLO::getCurrentModule();
        $action          = MIOLO::getCurrentAction();

        $data            = $this->getTypesData();
        $business2       = new BusinessAcademicBusGenerateMultipleDataInLot();

        $learningPeriods = unserialize(gzuncompress(base64_decode(MIOLO::_request('learningPeriods'))));
        
        $periodId = $this->getFormValue('periodId');

        $x = 0;

        $business2->beginTransaction();

        foreach ( $learningPeriods as $value )
        {
            $data->parentDegreeId    = $value[0];
            $data->learningPeriodId  = $value[1];

            $data->description       =  $this->description->value;

            $ok  = $this->busObject->insertDegree($data);

            if ( $ok )
            {
                $x++;
            }
        }

        $business2->commit();

        $msg = _M('@1 registros inseridos', $module, $x);

        if ( $x > 0 )
        {
            $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleDegreeCourse';
            $goto = $MIOLO->getActionURL($module, $postAction, null, null);

            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $opts['periodId']        = $periodId;
            $opts['learningPeriods'] = urlencode(base64_encode(gzcompress(serialize($learningPeriods),9)));

            $msg  = _M('Erro executando a operação solicitada.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->$var->value;
        }

        return $data;
    } 
}

?>
