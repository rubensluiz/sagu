<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Form responsible for generating the grid of hours of a stroke or class
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Cristian Edson Göhl [cristian@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 11/12/2008
 */

/**
 * Classe do formulário de pesquisa de ???
 */
class FrmGradesSchedule extends SForm
{
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();

        parent::__construct( _M('Grade de horário', $module), NULL, NULL );
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();        

        //Field period
        $busPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $busPeriod->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[] = new MRequiredValidator('periodId', _M('Período', $module), 'required');
        $fields[] = $periodId;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $fields[]  = $courseOccurrenceLookup;

        //Field class
        $classLabel = new MText('classLabel', _M('Turma', $module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), _M('Turma', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('className_'), $module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $classId->setJsHint(_M('Informe o código da turma', $module));
        $className = new MTextField('className_', $this->getFormValue('className_', $data->className), _M('Nome da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className->setJsHint(_M('Nome da turma', $module));
        $className->setReadOnly(true);
        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $className));
        $hctClass->setShowLabel(false);
        $fields[] = $hctClass;

        $professorLabel = new MText('professorLabel', _M('Professor',$module).':');
        $professorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $professorId = new MLookupTextField('scheduleProfessorId', $this->getFormValue('scheduleProfessorId', $data->scheduleProfessorId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorId->setJsHint(_M('Informe o código do professor',$module));

        $professorName = new MTextField('professorName', $this->getFormValue('professorName', $data->professorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $professorName->setReadOnly(true);
        $professorName->setJsHint(_M('Nome do professor',$module));

        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
        $hctProfessor->setShowLabel(true);
        $fields[]  = $hctProfessor;
        
        //Options the select file type
        unset($opts);
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);

        //Field select file type
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType','pdf'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        //field emission date
        $emissionDate = new MCalendarField('emissionDate', $this->getFormValue('emissionDate', date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'))    ), _M('Data de emissão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint('Enter the emission date', $module);
        $validators[] = new MDateDMYValidator('emissionDate', '', 'optional');
        $fields[] = $emissionDate;
        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators', $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filter = $this->getTypesData();

        set_time_limit(0);

        //Instance with agata
        $MIOLO->uses('/core/AgataAPI.class');
        $api = new AgataAPI;

        $api->setLanguage($MIOLO->getConf('i18n.language'));
        $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/gradesSchedule.sxw');

        $api->setParameter('$emissionDate', $filter->emissionDate);

        if ( strlen($filter->personId) >0 )
        {
            $filtroProfessor = new stdClass();
            $filtroProfessor->professorId = $filter->personId;
            $filtroProfessor->periodId = $filter->periodId;
            $busGroup = new BusinessAcademicBusGroup();
            $groupsProfessor = $busGroup->searchGroup($filtroProfessor);
            
            foreach ( $groupsProfessor as $groupProfessor )
            {
                $arrayGroups[] = $groupProfessor[0];
            }
            
            $filter->groupIds = is_array($arrayGroups) ? implode(',',$arrayGroups) : "0";
        }
        
        try
        {
            $busGradesSchedule = new BusinessAcademicBusGradesSchedule();
            $infoGroup = $busGradesSchedule->searchGroups($filter);

            if ( count($infoGroup) > 0 )
            {
                $busSchedule = new BusinessAcademicBusSchedule();

                foreach ( $infoGroup AS $index => $group )
                {
                    $data = $busSchedule->getScheduleForReport($group[0]);

                    $curricularComponent = $group[4] . '/' . $group[5] . ' - ' . $group[6];
                    $gradesSchedule = $busSchedule->getGradesSchedule($gradesSchedule, $data, $group[2], $curricularComponent);

                    if ( $oldCourse != $group[2] )
                    {
                        $oldCourse = $group[2];

                        $dataPerson[$oldCourse] = array(
                                $group[2],
                                $group[3],
                                $group[1],
                                $group[7]
                        );
                    }
                }

                if ( count($gradesSchedule) > 0 )
                {
                    foreach ( $gradesSchedule AS $index => $grades )
                    {
                        foreach ( $grades AS $index1 => $grade )
                        {
                            ksort($grade);
                            foreach ( $grade AS $index2 => $g )
                            {
                                for ( $count = 0; $count <= 6; $count++ )
                                {
                                    if ( $index2 == $count )
                                    {
                                        $subDataPerson[0][$oldCourse][$index1][$count] = $grade[$count];
                                    }
                                    elseif ( is_null($subDataPerson[0][$oldCourse][$index1][$count]) )
                                    {
                                        $subDataPerson[0][$oldCourse][$index1][$count] = '-';
                                    }
                                }
                            }

                            $hour = str_replace(' - ', "\<text:line-break/\>" . ' às ' . "\<text:line-break/\>", $index1);
                            array_unshift($subDataPerson[0][$oldCourse][$index1], $hour);

                            ksort($subDataPerson[0][$oldCourse]);
                        }
                    }
                }
                else
                {
                    throw new Exception(_M('Nenhum registro encontrado.', $module));
                }
            }
            else
            {
                throw new Exception(_M('Nenhum registro encontrado.', $module));
            }

            $api->setDataArray($dataPerson);
            $api->setSubDataArray($subDataPerson);

            if ( ! $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/gradesSchedule.sxw')) )
            {
                throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
            }

            if ( $filter->fileType == 'pdf' )
            {
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/gradesSchedule.pdf');
                if ( ! $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/gradesSchedule.sxw') )
                {
                    throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                }
            }

            $api->fileDialog();
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->periodId = $this->getFormValue('periodId');
        $data->courseId = $this->getFormValue('courseId');
        $data->courseVersion = $this->getFormValue('courseVersion');
        $data->courseName = $this->getFormValue('courseName');
        $data->classId = $this->getFormValue('classId');
        $data->className = $this->getFormValue('className_');
        $data->fileType = $this->getFormValue('radFileType');
        $data->emissionDate = $this->getFormValue('emissionDate');
        $data->personId = $this->getFormValue('scheduleProfessorId');

        return $data;
    }
}

?>
