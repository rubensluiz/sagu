<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.coop.br]
 *
 * @since
 * Class created on 18/09/2014
 *
 **/

class FrmCalculoCoeficienteDeClassificacao extends SForm
{
    
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Cálculo do coeficiente de classificação', $module));
        
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $event = MIOLO::_REQUEST('__EVENTTARGETVALUE');
        $page = MIOLO::_REQUEST('pn_page');
        
        if ( !($event == '_gnPrev:click' || $event == '_gnNext:click' || $event == '_gnFirst:click' || $event == '_gnLast:click' || (strlen($page) > 0 && $event != 'visualizarCalculo:click') || stristr($event, 'exportGridAs') ) )
        {
            AcdCalculoClassificacaoDeMatricula::cancelarProcessamento();
            $MIOLO->session->set('gridDataX', null);
        }
        
        // Curso - mudando de lookup para uma lista, ticket #35173
        $busCourse = new BusinessAcademicBusCourse();
        $courseId = new MComboBox('courseId', $this->getFormValue('courseId'), _M("Curso", $module), $busCourse->listCourse(true), false, _M("Somente listados cursos que possuem alunos ativos.", $module));
        $validators[] = new MRequiredValidator('courseId', _M("Curso", $module));
        $fields[] = $courseId;
        $fields[] = new MSpacer(null);
        
        $visualizarClassificacao = new MButton('visualizarCalculo', _M('Visualizar cálculo', $module));
        $visualizarClassificacao->addBoxStyle('margin-left', '44%');
        $fields[] = $visualizarClassificacao;
        $fields[] = SProgressBar::getCurrent()->setup();
        
        $fields[] = new MDiv('divCalculo');
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
        
        if ( $event == '_gnPrev:click' || $event == '_gnNext:click' || $event == '_gnFirst:click' || $event == '_gnLast:click' || (strlen($page) > 0 && $event != 'visualizarCalculo:click') )
        {
            $gridData = $MIOLO->session->get('gridDataX');
            
            $flds = $this->obtemGridEAcoes($gridData);
            $this->addFields($flds);
        }
    }
    
    /**
     * Sobreescrevido método do mform
     * 
     * @param type $gridName
     * @return type
     */
    public function getGridData($gridName)
    {       
        $MIOLO = MIOLO::getInstance();
        
        $colunas = $MIOLO->session->get('gridColumns');
        $colunas = array($colunas);
        
        return array_merge($colunas, $MIOLO->session->get('gridDataX'));
    }
        
    public function obtemGridEAcoes($gridData)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $fields[] = $grid = $MIOLO->getUI()->getGrid($module, 'GrdCalculoCoeficienteDeClassificacao');
        $grid->setClose(false);
        $grid->setData($gridData);
        
        $colunas = array();
        foreach ( $grid->columns as $columns )
        {
            $colunas[] = $columns->title;
        }
        
        $MIOLO->session->set('gridColumns', $colunas);
        
        $flds[] = $aplicarClassificacao = new MButton('aplicarCalculo', _M('Aplicar', $module), SForm::getAjaxAction('aplicarCalculo', 'divAplicarCalculo', false));
        
        $flds[] = $cancelarClassificacao = new MButton('cancelarCalculo', _M('Cancelar', $module), SForm::getAjaxAction('cancelarCalculo', 'divAplicarCalculo', false));
        
        $fields[] = $div = new MDiv('divButtons', $flds);
        $div->addBoxStyle('margin-left', '44%');
        
        $fields[] = new MDiv('divAplicarCalculo');
        
        return $fields;
    }
    
    public function visualizarCalculo_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $progressBar = SProgressBar::getCurrent();
        $progressBar->show();
        
        $data = new stdClass();
        $data->courseId = MIOLO::_REQUEST('courseId');
        
        $acdCalculoClassificacaoDeMatricula = new AcdCalculoClassificacaoDeMatricula();
        
        $gridData = $acdCalculoClassificacaoDeMatricula->obtemCoeficienteDeClassificacao($data, true);
                        
        $fields = $this->obtemGridEAcoes($gridData);
        
        $MIOLO->session->set('gridDataX', $gridData);
        
        $this->addFields($fields);
        
        $progressBar->updateProgress("Processo finalizado", 100);
        
    }
    
    public function cancelarCalculo($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        AcdCalculoClassificacaoDeMatricula::cancelarProcessamento();
        
        $MIOLO->session->set('gridDataX', null);
        
        $url = $MIOLO->getActionURL($module, $action);
        $url = str_replace('amp;', '', $url);
        
        $MIOLO->page->addAJAXJsCode("window.location = '$url';");
    }
    
    
    public function aplicarCalculo($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $busCourse = new BusinessAcademicBusCourse();
        $course = $busCourse->getCourse($args->courseId);
        
        if ( strlen($course->courseId) == 0 )
        {
            $MIOLO->page->addAJAXJsCode("alert('O curso informado não existe. Por favor informe um curso válido.');");
        }
        else
        {
            $data = new stdClass();
            $data->courseId = $course->courseId;

            if ( $args->phpFunction == 'aplicarCalculo' )
            {
                $acdCalculoClassificacaoDeMatricula = new AcdCalculoClassificacaoDeMatricula();
                $result = $acdCalculoClassificacaoDeMatricula->registrarCoeficienteNoContratoDoAluno($data);

                if ( $result )
                {
                    $url = $MIOLO->getActionURL($module, $action);

                    $info = _M('Processo do cálculo do coeficiente de classificação de matrícula executado com sucesso.', $module);
                    $MIOLO->information($info, $url);
                }
                else
                {
                    $info = _M('Não foi possível executar o processo do cálculo do coeficiente de classificação de matrícula.', $module);
                    $this->AddError($info);
                }
            }
        }
    }
}
