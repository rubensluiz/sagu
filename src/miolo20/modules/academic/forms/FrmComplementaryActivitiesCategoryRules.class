<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * ComplementaryActivitiesCategory form
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 11/01/2007
 */
class FrmComplementaryActivitiesCategoryRules extends SManagementForm
{
    const TIPO_CADASTRO_UNICO = 'U';
    const TIPO_CADASTRO_LOTE = 'L';
    
    public function __construct()
    {
        parent::__construct(new AcdComplementaryActivitiesCategoryRules(), array('complementaryActivitiesCategoryRulesId'), 'BusComplementaryActivitiesCategoryRules');
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        // Mensagem de informação
        $fields[] = MMessage::getStaticMessage('msgInfo', _M("Se o registro de horas máximas digitadas for maior que o que está cadastrado na disciplina, será salvo o que está cadastrado na disciplina.", $module), MMessage::TYPE_INFORMATION);
        
        if ( $this->isInsertFunction() )
        {
            //Opção de escolha (em lote ou um por um)
            $radioLabel = new MLabel(_M('Regra de categoria', $module) . ':');
            $radioLabel->setClass('m-caption');
            $radioLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $radioUnicoLabel = new MLabel(_M("Para uma ocorrência de curso específica", $module));
            $radioUnico = new MRadioButton('escolhaCadastro', self::TIPO_CADASTRO_UNICO, NULL, true);
            $radioUnico->addAttribute('onChange', $this->getAjaxAction('obterCampos', 'divOcorrencia', false, array('tipoCadastro' => self::TIPO_CADASTRO_UNICO)));
            $radioUnico->setAttribute('class', 'radio2');
            $hctRadioUnico = new MHContainer('hctRadioUnico', array($radioUnico, $radioUnicoLabel));;

            $radioLoteLabel = new MLabel(_M("Em lote para todas ocorrências de cursos que possuam em suas matrizes a disciplina de atividade complementar a ser selecionada", $module));
            $radioLote = new MRadioButton('escolhaCadastro', self::TIPO_CADASTRO_LOTE);
            $radioLote->addAttribute('onChange', $this->getAjaxAction('obterCampos', 'divOcorrencia', false, array('tipoCadastro' => self::TIPO_CADASTRO_LOTE)));
            $radioLote->setAttribute('class', 'radio1');
            $hctRadioLote = new MHContainer('hctRadioLote', array($radioLote, $radioLoteLabel));

            $fields[] = new MHContainer('hctRadio', array($radioLabel, new MVContainer('vctRadios', array($hctRadioUnico, $hctRadioLote))));
        }
        else
        {
            $complementaryActivitiesCategoryRulesId = MIOLO::_REQUEST('complementaryActivitiesCategoryRulesId');
            $fields[] = new MHiddenField('complementaryActivitiesCategoryRulesId', $complementaryActivitiesCategoryRulesId);
            $data = $this->obterDadosDisciplina($complementaryActivitiesCategoryRulesId);
        }
        
        //Div dos campos
        $fields[] = new MDiv('divOcorrencia', $this->obterCampos());

        $businessCC = new BusinessAcademicBusComplementaryActivitiesCategory();
        $dataCC = $businessCC->listComplementaryActivitiesCategory();

        $complementaryActivitiesCategoryId = new MSelection('complementaryActivitiesCategoryId', $this->getFormValue('complementaryActivitiesCategoryId', $data->complementaryActivitiesCategoryId ? $data->complementaryActivitiesCategoryId : ''), _M('Categoria da atividade',$module), $dataCC );
        $complementaryActivitiesCategoryId->setJsHint(_M('Selecione a categoria da atividade complementar', $module));
        $fields[] = $complementaryActivitiesCategoryId;
        $validators[] = new MIntegerValidator('complementaryActivitiesCategoryId', _M('Código da categoria da atividade complementar',$module), 'required');

        $minimumHours = new MTextField('minimumHours', $this->getFormValue('minimumHours', $data->minimumHours), _M('Mínimo de horas',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $minimumHours->setJsHint(_M('Informe o mínimo de horas', $module));
        $fields[] = $minimumHours;
        $validators[] = new MRequiredValidator('minimumHours');

        $maximumHours = new MTextField('maximumHours', $this->getFormValue('maximumHours', $data->maximumHours), _M('Máximo de horas',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $maximumHours->setJsHint(_M('Informe o máximo de horas', $module));
        $fields[] = $maximumHours;
        $validators[] = new MRequiredValidator('maximumHours');

        parent::defineFields($fields, $validators, $data);
    }

    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        
        $businessCurriculum     = new BusinessAcademicBusCurriculum();
        $busCurricularComponent = new BusinessAcademicBusCurricularComponent();

        $data                = new acdComplementaryActivitiesCategoryRules();
        $curricularComponent = $busCurricularComponent->getCurricularComponent($this->curricularComponentId->value, $this->curricularComponentVersion->value);

        $filter->courseId = $this->courseId->value;
        $filter->curricularComponentId = $this->curricularComponentId->value;
        $filter->curricularComponentVersion = $this->curricularComponentVersion->value;
        $filter->courseVersion = $this->courseVersion->value;
        $data->courseId = $filter->courseId;
        $data->curricularComponentVersion = $filter->curricularComponentVersion;
        $data->curricularComponentId = $filter->curricularComponentId;

        $dataCurriculum = $businessCurriculum->searchCurriculum($filter);

        $data->curriculumId = $dataCurriculum[0][0];
        $data->complementaryActivitiesCategoryId = $this->complementaryActivitiesCategoryId->value;

        $data->maximumHours = $this->maximumHours->value;
        $data->minimumHours = $this->minimumHours->value;
        
        if ( $data->maximumHours <  $this->minimumHours->value )
        {
            $goto = $MIOLO->GetActionURL($module, 'main:register:complementaryActivities:complementaryActivitiesCategoryRules', null, array('function' => 'insert', 'event' => 'tbBtnNew:click'));
            $MIOLO->error(_M("O mínimo de horas deve ser menor que o máximo de horas.", $module), $goto);
        }
        elseif ( $this->maximumHours->value > $curricularComponent->academicNumberHours && $function != SForm::FUNCTION_DELETE )
        {
            $data->maximumHours = $curricularComponent->academicNumberHours;
        }

        $data->complementaryActivitiesCategoryRulesId = $this->complementaryActivitiesCategoryRulesId->value;
        $data->description = $this->complementaryActivitiesCategoryDescription->value;

        return $data;
    }
    
    public function obterDadosDisciplina($complementaryActivitiesCategoryRulesId)
    {
        $data = $this->busObject->getComplementaryActivitiesCategoryRules($complementaryActivitiesCategoryRulesId);            

        $businessTurn = new BusinessBasicBusTurn();
        $businessUnit = new BusinessBasicBusUnit();
        $businessCurriculum = new BusinessAcademicBusCurriculum();

        $dataCurriculum = $businessCurriculum->getCurriculum($data->curriculumId);

        $data->courseId = $dataCurriculum->courseId;            
        $data->curricularComponentId = $dataCurriculum->curricularComponentId;
        $data->courseVersion = $dataCurriculum->courseVersion;
        $data->courseName = $dataCurriculum->courseName;

        $data->turnId = $dataCurriculum->turnId;
        $data->unitId = $dataCurriculum->unitId;

        $dataTurn = $businessTurn->getTurn($data->turnId);
        $dataUnit = $businessUnit->getUnit($data->unitId);

        $data->turnDescription = $dataTurn->description;
        $data->unitDescription = $dataUnit->description;
            
        return $data;
    }
    
    public function obterCampos($args = null)
    {
        $function = MIOLO::_REQUEST('function');
        $module = MIOLO::getCurrentModule();

        // Lookup muda se for em lote
        $lookup = 'CurricularComponentComplementaryActivity';
        
        // CurriculumTypeId
        $curriculumTypeId = new SHiddenField('curriculumTypeId', SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY'));
        $fields[] = $curriculumTypeId;
        
        $filtrosLookup = array('curricularComponentId' => 'curricularComponentId', 'curricularComponentVersion' => 'curricularComponentVersion');
        if ( $args->tipoCadastro == self::TIPO_CADASTRO_UNICO || is_null($args) )
        {
            //Course
            $courseLabel = new MLabel(_M('Curso',$module) . ':');
            $courseLabel->setClass('m-caption m-caption-required');
            $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
            {
                $complementaryActivitiesCategoryRulesId = MIOLO::_REQUEST('complementaryActivitiesCategoryRulesId');
                $fields[] = new MHiddenField('complementaryActivitiesCategoryRulesId', $complementaryActivitiesCategoryRulesId);
                $data = $this->obterDadosDisciplina($complementaryActivitiesCategoryRulesId);
                
                /*
                 * Course occurrence lookup
                 */
                $lkpValue = array(
                    $this->GetFormValue('courseId', $data->courseId),
                    $this->GetFormValue('courseVersion', $data->courseVersion),
                    $this->GetFormValue('turnId', $data->turnId),
                    $this->GetFormValue('unitId', $data->unitId)
                );
                $courseId = new MLookupTextField('courseId', $data->courseId, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('courseId', 'courseVersion', 'courseName', 'turnId', 'turnDescription', 'unitId', 'unitDescription'), $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), $this->page->isPostBack());
            }
            else
            {
                /*
                 * Course occurrence lookup
                 */
                $lkpValue = array(
                    $this->GetFormValue('courseId', $data->courseId),
                    $this->GetFormValue('courseVersion', $data->courseVersion),
                    $this->GetFormValue('turnId', $data->turnId),
                    $this->GetFormValue('unitId', $data->unitId)
                );
                $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('courseId', 'courseVersion', 'courseName', 'turnId', 'turnDescription', 'unitId', 'unitDescription'), $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), true);
            }

            $courseId->setJsHint(_M('Informe o código do curso',$module));
            $courseId->setValidator(new MRequiredValidator('courseId', _M('Curso', $module)));
            $courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Nome do curso',$module));
            $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseVersion->setJsHint(_M('Informe a versão do curso', $module));
            $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
            $hctCourse->setShowLabel(true);
            $fields[] = $hctCourse;

            //Turn
            $turnLabel = new MLabel(_M('Turno', $module) . ':');
            $turnLabel->setClass('m-caption');
            $turnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $turnId = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $turnId->setReadOnly(true);
            $turnId->setJsHint(_M('Código do turno', $module));
            $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $turnDescription->setReadOnly(true);
            $turnDescription->setJsHint(_M('Descrição do turno', $module));
            $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
            $hctTurn->setShowLabel(true);
            $fields[] = $hctTurn;

            //Unit
            $unitLabel = new MLabel(_M('Unidade', $module) . ':');
            $unitLabel->setClass('m-caption');
            $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $unitId = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $unitId->setReadOnly(true);
            $unitId->setJsHint(_M('Código da unidade', $module));
            $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $unitDescription->setReadOnly(true);
            $unitDescription->setJsHint(_M('Descrição da unidade', $module));
            $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
            $hctUnit->setShowLabel(true);
            $fields[] = $hctUnit;
            
            $lookup = 'CurricularComponentInCurriculum';
            $filtrosLookup = array('courseId'=>'courseId',
                                   'courseVersion' => 'courseVersion',
                                   'curricularComponentId' => 'curricularComponentId',
                                   'curricularComponentVersion' => 'curricularComponentVersion',
                                   'unitId' => 'unitId',
                                   'turnId' => 'turnId',
                                   'curriculumTypeId' => 'curriculumTypeId',);
        }
        
        // Label da disciplina
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Disciplina',$module) . ':');
        $curricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLabel->setClass('m-caption m-caption-required');
        $flds[] = $curricularComponentLabel;
        
        // Código da disciplina
        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('curricularComponentVersion', 'curricularComponentName'), $module, $lookup, null, $filtrosLookup, true);
        $curricularComponentId->setJsHint(_M('Informe o código da disciplina', $module));
        $flds[] = $curricularComponentId;
        
        // Versão da disciplina
        $curricularComponentId->setValidator(new MRequiredValidator('curricularComponentId', _M('Disciplina',$module)));
        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersion->setReadOnly(true);
        $curricularComponentVersion->setJsHint(_M('Informe a versão da disciplina', $module));
        $flds[] = $curricularComponentVersion;
        
        // Nome da disciplina
        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentName->setReadOnly(true);
        $curricularComponentName->setJsHint(_M('Nome da disciplina', $module));
        $flds[] = $curricularComponentName;

        // Container da disciplina
        $hctCurricularComponent = new MHContainer('hctCurricularComponent', $flds);
        $hctCurricularComponent->setShowLabel(false);
        $fields[] = $hctCurricularComponent;
        unset($flds);
        
        $fields = SAGU::alignFields($fields);
        
        return $fields;
    }
    
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        //Se estiver inserindo e for em lote, a lógica muda, senão continua sempre a mesma
        if ( $this->isInsertFunction() )
        {
            $tipoCadastro = MIOLO::_REQUEST('escolhaCadastro');
            
            if ( $tipoCadastro == self::TIPO_CADASTRO_UNICO )
            {
                parent::tbBtnSave_click($sender);
            }
            elseif ( $tipoCadastro == self::TIPO_CADASTRO_LOTE )
            {
                $dados = $this->salvarEmLote();
                $goTo = $MIOLO->GetActionURL($module, 'main:register:complementaryActivities:complementaryActivitiesCategoryRules');
                
                if ( !(count($dados['salvos']) > 0) )
                {
                    
                    $MIOLO->error(_M("Todas as ocorrências de curso para esta disciplina já estão registradas para esta regra.", $module), $goTo);
                }
                else
                {
                    foreach ( $dados as $status => $item )
                    {
                        if ( $status == 'salvos' )
                        {
                            $msgSalvos = "Os seguintes registros foram salvos: ";
                            
                            foreach ( $item as $curriculum )
                            {
                                $msgSalvos .= "<br> * " . $curriculum;
                            }
                        }
                        elseif ( $status == 'repetidos' )
                        {
                            $msgRepetidos = "Os seguintes registros não foram salvos pois já estão cadastrados: ";
                            foreach ( $item as $curriculum )
                            {
                                $msgRepetidos .= "<br> * " . $curriculum;
                            }
                        }
                    }
                    
                    $MIOLO->information(_M($msgSalvos . '<br><br>' . $msgRepetidos, $module));
                }
            }
        }
        else
        {
            parent::tbBtnSave_click($sender);
        }
    }
    
    /**
     * Registra em lote os curriculuns e retorna os que foram salvos e os que não foram salvos.
     * 
     * @return array
     */
    public function salvarEmLote()
    {
        $MIOLO = MIOLO::getInstance();
        $data = $this->getTypesData();
        
        $filters = new stdClass();
        $filters->curricularComponentId = $data->curricularComponentId;
        $filters->curricularComponentVersion = $data->curricularComponentVersion;

        $busCurriculum = new BusinessAcademicBusCurriculum();
        $curriculums = $busCurriculum->searchCurriculum($filters);
        
        SDatabase::beginTransaction();
        try
        {
            $regras = array();
            foreach ( $curriculums as $curriculum )
            {
                $busComplementaryCatRules = new BusinessAcademicBusComplementaryActivitiesCategoryRules();

                $filtersCat = new stdClass();
                $filtersCat->curriculumId = $curriculum[0];
                $filtersCat->complementaryActivitiesCategoryId = $data->complementaryActivitiesCategoryId;
                $searchRule = $busComplementaryCatRules->searchComplementaryActivitiesCategoryRules($filtersCat);

                if ( strlen($searchRule[0][0]) ) 
                {
                    $regras['repetidos'][] = '(' . $curriculum[8] . ' - ' . $curriculum[9] . ')' . $curriculum[10] . 
                                             ' / Curso: ' . $curriculum[1] . ' Versão: ' . $curriculum[2] . ' Turno: ' . $curriculum[4] . ' Unidade: ' . $curriculum[6];
                }
                else
                {
                    $newData = new stdClass();

                    $newData->curriculumId = $curriculum[0];
                    $newData->complementaryActivitiesCategoryId = $data->complementaryActivitiesCategoryId;
                    $newData->minimumHours = $data->minimumHours;
                    $newData->maximumHours = $data->maximumHours;

                    $busComplementaryCatRules->insertComplementaryActivitiesCategoryRules($newData);

                    $regras['salvos'][] = '(' . $curriculum[8] . ' - ' . $curriculum[9] . ')' . $curriculum[10] . 
                                             ' / Curso: ' . $curriculum[1] . ' Versão: ' . $curriculum[2] . ' Turno: ' . $curriculum[4] . ' Unidade: ' . $curriculum[6];
                }
            }
            SDatabase::commit();
        } 
        catch (Exception $ex) 
        {
            SDatabase::rollback();
            $MIOLO->error($ex->getMessage());
        }
        
        return $regras;
    }
}
?>