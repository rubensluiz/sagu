<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * ScholarshipDescriptionTechnician form
 *
 * @author Andre Chagas Dias [andre@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 03/12/2008
 *
 * */
class FrmScholarshipDescriptionTechnician extends SForm
{
    /**
     * Class constructor
     * */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Relatório', $module),null,null);
        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnSave');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array( 'event' => 'tbBtnPrint_click' )));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     * */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $this->contractPersonId->value), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array( 'contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion' ), $module, 'PersonContract', null, array( 'personId' => 'contractPersonId' ), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MRequiredValidator('contractPersonId', _M('Pessoa', $module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $this->enrollData->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctContract', array( $contractPersonLabel, $contractPersonId, $contractPersonName ));
        $hctPerson->setShowLabel(true);
        $fields[] = $hctPerson;

        //Field contract
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array( 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName' ), $module, 'Contract', null, array( 'personId' => 'contractPersonId' ), true);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato', $module));
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $data->contractCourseId), _M('Código do curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseId->setReadOnly(true);
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion', $data->contractCourseVersion), _M('Versão do curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName', $data->contractCourseName), _M('Nome do curso', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $contractCourseName->setReadOnly(true);
        $hctContract = new MHContainer('hctContract', array( $contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName ));
        $hctContract->setShowLabel(false);
        $fields[] = $hctContract;
        $fields[] = new Separator('');
        
        $this->setFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }

    /**
     * Method to get data and generate the report
     * */
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data = $this->getTypesData();
        $data->ignoreDebits = MIOLO::_request('ignoreDebits');

        $havePermission = false;

        if ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') && (strtoupper(SAGU::getParameter('BASIC', 'WARNING_IF_DEFAULTER')) == 'TRUE') )
        {
            if ( $cd->ignoreDebits != 'yes' )
            {
                $business = new BusinessFinanceBusGeneralQueries();
                $businessContract = new BusinessAcademicBusContract();

                $debt = $business->getDefaulterDebt($data->contractId, false);
                $debt = strlen($debt) > 0 ? $debt : 0;

                //Verifica se o aluno possui débitos financeiros
                if ( $debt > 0 )
                {
                    $this->addError(_M('O sistema detectou uma dívida com a instituição. Por favor, verifique com o setor financeiro.', $module));

                    $contract = $businessContract->getContract($data->contractId);
                    $matricula = new Matricula($data->contractId, Matricula::MATRICULA_NORMAL);
                    $enrollConfig = $matricula->obterConfiguracoes();

                    if ( $MIOLO->checkAccess('FrmScholarshipDescriptionTechnician', A_ADMIN, false, true) || $enrollConfig->blockDebt == DB_FALSE )
                    {
                        $this->addField(new MHiddenField('ignoreDebits', 'yes'));

                        $this->addError(_M('Se desejar continuar mesmo assim, clique no botão "Imprimir" abaixo.', $module));
                    }
                }
                else
                {
                    $havePermission = true;
                }
            }
            else
            {
                $havePermission = true;
            }
        }
        else
        {
            $havePermission = true;
        }

        if ( $havePermission )
        {
            $MIOLO->uses('/core/AgataAPI.class');
            $api = new AgataAPI;
            
            //pega os dados da instituicao
            $businessCompany = new BusinessBasicBusCompany();
            $company = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
            $businessLegalPerson = new BusinessBasicBusLegalPerson();
            $legalPerson = $businessLegalPerson->getLegalPerson($company->personId);
            $businessCity = new BusinessBasicBusCity();
            $city = $businessCity->getCity($legalPerson->cityId);
                        
            $business = new BusinessAcademicBusScholarshipDescriptionTechnician();

            $contractTechnicianExists = $business->contractTechnicianExists($data->contractId);

            if ( strlen($contractTechnicianExists->contractId) > 0 && $contractTechnicianExists->formationLevelId == SAGU::getParameter('ACADEMIC', 'TECHNICIAN_FORMATION_LEVEL') )
            {
                $personData = $business->getContractPhysicalPersonData($data->contractId);

                $dataPerson[0][0] = $personData->personId;
                $dataPerson[0][1] = $personData->personName;
                $dataPerson[0][2] = $personData->rgContent;
                $dataPerson[0][3] = $personData->rgOrgan;
                $dataPerson[0][4] = $personData->dateBirth;
                $dataPerson[0][5] = $personData->cityBirth;
                $dataPerson[0][6] = $personData->stateIdBirth;
                $dataPerson[0][7] = $personData->nationality;

                $personTopCourse = $business->getContractTopCourseData($data->contractId);

                $dataPerson[0][8] = strlen($personTopCourse->topCourse) > 0 ? $personTopCourse->topCourse : ' ';
                $dataPerson[0][9] = strlen($personTopCourse->topCourse) > 0 ? strtoupper(_M('Data de conclusão', $module)) . ':' : ' ';
                $dataPerson[0][10] = strlen($personTopCourse->topCourseConclusionDate) > 0 ? $personTopCourse->topCourseConclusionDate : ' ';
                $dataPerson[0][11] = strlen($personTopCourse->topCourse) > 0 ? strtoupper(_M('Estabelecimento', $module)) . ':' : ' ';
                $dataPerson[0][12] = strlen($personTopCourse->topCourseInstitution) > 0 ? $personTopCourse->topCourseInstitution : ' ';

                $personCourseEnrolled = $business->getContractCourseEnrolled($data->contractId);

                $dataPerson[0][13] = $personCourseEnrolled->companyName;
                $dataPerson[0][14] = $personCourseEnrolled->recognitionDocumentNumber;

                $personCurricularComponentsCoursed = $business->getContractCurricularComponentsCoursed($data->contractId);

                $hourTotal = $business->getCourseHourTotal($data->contractId);
                $dataPerson[0][15] = $hourTotal->hourTotal;

                $dataPerson[0][16] = $personCourseEnrolled->conclusionYear;
                $dataPerson[0][17] = $personCourseEnrolled->knowledgeArea;

                $contractCourseCapabilities = $business->getContractCourseCapabilities($data->contractId);

                $capabilitiesSize = count($contractCourseCapabilities);

                if ( $capabilitiesSize > 0 )
                {
                    $lineBreak = '\<text:line-break/\>\<text:line-break/\>';

                    foreach ( $contractCourseCapabilities as $key => $ability )
                    {
                        $dataPerson[0][18] .= '- ' . $ability[0] . ( $key < $capabilitiesSize - 1 ? ';' . $lineBreak : '.' );
                    }
                }
                else
                {
                    $dataPerson[0][18] = ' ';
                }

                $dataPerson[0][19] = $personCourseEnrolled->conclusionDate;
                                
                //Define alguns parametros
                $busScholarSchip = new BusinessAcademicBusScholarshipDescription();
                $api->setParameter('$cpf', $personData->cpf);
                $api->setParameter('$enrollHoursCoursed', ($scholarSchipData->enrollHoursCoursed > 0 ? $scholarSchipData->enrollHoursCoursed : 0));                
                $api->setParameter('$cityName', SAGU::getCapitulatetString($city->name));
                $api->setParameter('$emissionDate', SAGU::getDateByExtense(SAGU::getDateNow()));
                
                $subDataPerson = array( array( $personCurricularComponentsCoursed ) );

                $api->setLanguage($MIOLO->getConf('i18n.language'));
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/scholarshipDescriptionTechnician.sxw');

                $api->setDataArray($dataPerson);

                $api->setSubDataArray($subDataPerson);

                $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/scholarshipDescriptionTechnician.sxw'));

                if ( $ok )
                {
                    $api->fileDialog();
                }
            }
            else
            {
                $this->addError(_M('Para visualizar este relatório você deve selecionar um curso técnico.', $module));
            }
        }
    }

    /**
     * Method to get data information when the form is submitted
     * */
    public function getTypesData()
    {
        $data->contractPersonId = $this->contractPersonId->value;
        $data->contractPersonName = $this->contractPersonName->value;
        $data->contractCourseId = $this->contractCourseId->value;
        $data->contractCourseVersion = $this->contractCourseVersion->value;
        $data->contractCourseName = $this->contractCourseName->value;
        $data->contractId = $this->contractId->value;

        return $data;
    }
}

?>
