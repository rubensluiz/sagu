<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 03/05/2006
 *
 **/

/**
 * Form to search the basCenter table
 */
class FrmCurricularComponentOutOfCurriculumUnblockSearch extends SSearchForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $this->home   = $data->home;

        $module = SAGU::getFileModule(__FILE__);        
        parent::__construct(_M('Localizar', $module), new acdCurricularComponentUnblock(), 'curricularComponentUnblockId', 'BusCurricularComponentOutOfCurriculumUnblock' );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $limbo = new MHiddenField('limboS', '');
        $fields[] = $limbo;
        
        $filters = $this->getTypesData();
        
        //Field curricular component unblock
        $curricularComponentUnblockIdS = new MHiddenField('curricularComponentUnblockIdS','');
        $fields[] = $curricularComponentUnblockIdS;
        
        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodIdS', strlen($this->getFormValue('periodIdS', $data->periodId))>0 ? $this->getFormValue('periodIdS', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        
        $MIOLO->getClass( 'academic', 'lookupContract' );
        $fields[] = new MHiddenField('limboS', '');
        $fields[] = new SLookupContract('contractIdS', $filters, false);
        
        //Field learning period
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Período letivo', $module) . ':');
        $learningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));      
        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS'), _M('Código do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('periodIdS', null, null, null, null, 'learningPeriodS'), $module, 'LearningPeriod', null, array('periodId' => 'periodIdS', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'));
        $learningPeriodIdS->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MIntegerValidator('learningPeriodIdS', _M('Código do período letivo',$module));
        $learningPeriodS = new MTextField('learningPeriodS', $this->getFormValue('learningPeriodS',$this->substitutionUnblockSearch->learningPeriodS), _M('Período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodS->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodS->setReadOnly(true);
        $hctlearningPeriodS = new MHContainer('hctlearningPeriodS', array($learningPeriodLabelS, $learningPeriodIdS, $learningPeriodS));
        $hctlearningPeriodS->setShowLabel(false);
        $fields[]    = $hctlearningPeriodS;

        //Field curricular component
        $curriculumCurricularComponentLabel = new MText('curriculumCurricularComponentS', _M('Disciplina', $module) . ':');
        $curriculumCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCurricularComponentIdS = new MLookupTextField('curriculumCurricularComponentIdS', $this->curriculumCurricularComponentIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curriculumCurricularComponentVersionS,curriculumCurricularComponentNameS', $module, 'CurricularComponentInCurriculum', null, array('curricularComponentId' => 'curriculumCurricularComponentIdS'), true);
        $curriculumCurricularComponentIdS->setJsHint(_M('Informe o código da disciplina do currículo', $module));
        $curriculumCurricularComponentVersionS = new MTextField('curriculumCurricularComponentVersionS', $this->curriculumCurricularComponentVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCurricularComponentVersionS->setJsHint(_M('Versão da disciplina do currículo', $module));
        $curriculumCurricularComponentVersionS->setReadOnly(true);
        $curriculumCurricularComponentNameS = new MTextField('curriculumCurricularComponentNameS', $this->curriculumCurricularComponentNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCurricularComponentNameS->setJsHint(_M('Nome da disciplina do currículo', $module));
        $curriculumCurricularComponentNameS->setReadOnly(true);
        $hctCurriculumCurricularComponent = new MHContainer('hctCurriculumCurricularComponentS', array($curriculumCurricularComponentLabel, $curriculumCurricularComponentIdS, $curriculumCurricularComponentVersionS, $curriculumCurricularComponentNameS));
        $hctCurriculumCurricularComponent->setShowLabel(true);
        $fields[]  = $hctCurriculumCurricularComponent;

        //$curriculumIdS 
        $businessCurriculum = new BusinessAcademicBusCurriculum();

        $filters1->courseId                   = $contractCourseId->value;
        $filters1->courseVersion              = $contractCourseVersion->value;
        $filters1->unitId                     = $contractUnitId->value;
        $filters1->turnId                     = $contractTurnId->value;
        $filters1->curricularComponentId      = $curriculumCurricularComponentIdS->value;
        $filters1->curricularComponentVersion = $curriculumCurricularComponentVersionS->value;
        
        $searchCurriculum   = $businessCurriculum->searchCurriculum($filters1);

        if ( count($searchCurriculum) == 1 )
        {
            $filters->curriculumId = $searchCurriculum[0][0];
        }
        unset($flds);
        
        parent::defineFields( $fields, $module, 'GrdCurricularComponentOutOfCurriculumUnblockSearch', $validators );        
        
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }
    
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        // get filters values
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->getFormValue($var);
        }
   
        $data->personId                     = $this->getFormValue('contractPersonId', $this->contractPersonId->value);
        $data->curricularComponentUnblockId = $this->getFormValue('curricularComponentUnblockIdS', $this->curricularComponentUnblockIdS->value);
        $data->learningPeriodId             = $this->getFormValue('learningPeriodIdS', $this->learningPeriodIdS->value);
        $data->curricularComponentId        = $this->getFormValue('curriculumCurricularComponentIdS', $this->curriculumCurricularComponentIdS->value);
        $data->curricularComponentVersion   = $this->getFormValue('curriculumCurricularComponentVersionS', $this->curriculumCurricularComponentVersionS->value);
        $data->periodId                     = $this->getFormValue('periodId', $this->periodId->value);
        
        return $data;
    }

}

?>
