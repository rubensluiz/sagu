<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Course Occurrence form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 */
class FrmCourseOccurrence extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('ui/controls/msubdetailvalidators.class');
        $MIOLO->uses('/ui/controls/msubdetail.class');
        
        parent::__construct(new AcdCourseOccurrence(), array( 'courseId','courseVersion','turnId','unitId' ), 'BusCourseOccurrence');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_REQUEST('event');

        if ( in_array($function, array( SForm::FUNCTION_UPDATE, SForm::FUNCTION_UPDATE )) )
        {
            $courseId = MIOLO::_request('courseId');
            $courseVersion = MIOLO::_request('courseVersion');
            $turnId = MIOLO::_request('turnId');
            $unitId = MIOLO::_request('unitId');

            $business = new BusinessAcademicBusCourseOccurrence();
            $data = $business->getCourseOccurrence($courseId, $courseVersion, $turnId, $unitId);

            $fields[] = new MHiddenField('courseId', $courseId);
            $fields[] = new MTextLabel('course', $data->courseId, _M('Curso', $module));
            $fields[] = new MHiddenField('courseVersion', $courseVersion);
            $fields[] = new MTextLabel('courseVersion1', $courseVersion, _M('Versão', $module));
            $fields[] = new MHiddenField('turnId', $turnId);
            $fields[] = new MTextLabel('turn', $data->turn, _M('Turno', $module));
            $fields[] = new MHiddenField('unitId', $unitId);
            $fields[] = new MTextLabel('unit', $data->unit, _M('Unidade', $module));
            
            if ( $this->isSubDetailEditMode() )
            {   
                $filters = new stdClass();
                $filters->courseId = $courseId;
                $filters->courseVersion = $courseVersion;
                $filters->turnId = $turnId;
                $filters->unitId = $unitId;

                $reconDeCurso = new AcdReconhecimentoDeCurso();
                $dataRecon    = $reconDeCurso->searchGrid($filters, true);
                
                MSubDetail::clearData('reconhecimento');
            }
            else
            {
                $dataRecon = MSubDetail::getData('reconhecimento');
            }
        }
        else
        {
             
            //Field course version
            $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
            $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $courseLabel->setClass('m-caption m-caption-required');
            $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseVersion, courseName', $module, 'CourseVersion', null, null, true);
            $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
            $courseId->setJsHint(_M('Informe o código do curso', $module));
            $courseName = new MTextField('courseName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Nome do curso', $module));
            $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseVersion->setJsHint(_M('Versão do curso', $module));
            $courseVersion->setReadOnly(true);
            $hctCourse = new MHContainer('hctCourse', array( $courseLabel, $courseId, $courseVersion, $courseName ));
            $hctCourse->setShowLabel(true);
            $fields[] = $hctCourse;

            //Field turn
            $business = new BusinessBasicBusTurn();
            $turnId = new MComboBox('turnId', $this->GetFormValue('turnId', $data->turnId), _M('Turno', $module), $business->listTurn());
            $turnId->setJsHint(_M('Informe o código do turno', $module));
            $validators[] = new MRequiredValidator('turnId');
            $fields[] = $turnId;

            //Field unit
            $business = new BusinessBasicBusUnit();
            $unitId = new MComboBox('unitId', $this->GetFormValue('unitId', $data->unitId), _M('Unidade', $module), $business->listUnit());
            $unitId->setJsHint(_M('Informe o código da unidade', $module));
            $validators[] = new MRequiredValidator('unitId');
            $fields[] = $unitId;
        }

        //Field autorization date
        $authorizationDate = new MCalendarField('authorizationDate', $this->getFormValue('authorizationDate', $data->authorizationDate), _M('Data de autorização', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $authorizationDate->setJsHint(_M('Informe a data de autorização', $module));
        $validators[] = new MDATEDMYValidator('authorizationDate', '', 'required');
        $fields[] = $authorizationDate;

        //Field autorization document
        $authorizationDocument = new MMultiLineField('authorizationDocument', $this->getFormValue('authorizationDocument', $data->authorizationDocument), _M('Documento de autorização', $module), 10, 7, 30);
        $authorizationDocument->setJsHint(_M('Informe o documento de autorização', $module));
        $fields[] = $authorizationDocument;

        if ( $function == 'update' )
        {
            $statusLabel = new MText('statusLabel', _M('Está ativo', $module) . '?');
            $statusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $statusLabel->setClass('m-caption m-caption-required');

            $status = $this->GetFormValue('status', $data->status);
            if ( !isset($status) )
            {
                //default true
                $status = DB_TRUE;
            }

            $status = new MRadioButtonGroup('status', '', SAGU::listTrueFalse(1), $status, null, 'horizontal');
            $status->SetShowLabel(false);

            $hctStatus = new MHContainer('hctStatus', array( $statusLabel, $status ));
            $fields[] = $hctStatus;
        }
        else
        {
            $fields[] = new MHiddenField('status', DB_TRUE);
        }

        //Field maximum Days to frequence notification
        $daysToFrequenceNotification = new MTextField('daysToFrequenceNotification', $this->getFormValue('daysToFrequenceNotification', $data->daysToFrequenceNotification), _M('Prazo para registro de frequências', $module), 8, _M('em dias', $module));
        $daysToFrequenceNotification->setJsHint(_M('Informe o prazo para registro de frequências, após será enviado uma notificação', $module));
        $validators[] = new MIntegerValidator('daysToFrequenceNotification', _M('Prazo para registro de frequências', $module));
        $fields[] = $daysToFrequenceNotification;

        //Field minimum conclusion course
        $minimumConclusionCourse = new MTextField('minimumConclusionCourse', $this->getFormValue('minimumConclusionCourse', $data->minimumConclusionCourse), _M('Tempo mínimo para conclusão de curso', $module), 8, _M('em anos', $module));
        $minimumConclusionCourse->setJsHint(_M('Informe o mínimo de tempo para concluir o curso', $module));
        $fields[] = $minimumConclusionCourse;

        //Field maximum conclusion course
        $maximumConclusionCourse = new MTextField('maximumConclusionCourse', $this->getFormValue('maximumConclusionCourse', $data->maximumConclusionCourse), _M('Tempo máximo para conclusão de curso', $module), 8, _M('em anos', $module));
        $maximumConclusionCourse->setJsHint(_M('Informe o tempo máximo para conclusão do curso', $module));
        $fields[] = $maximumConclusionCourse;

        //Cost center
        if ( $MIOLO->checkAccess('FINANCE', A_ACCESS, false, true) && (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') )
        {
            $costCenterLabel = new MText('costCenterLabel', _M('Centro de custo', $module) . ':');
            $costCenterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $costCenterId = new MLookupTextField('costCenterId',$this->getFormValue('costCenterId', $data->costCenterId),'', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null,'costCenterDescription','accountancy','CostCenter');
            $costCenterId->setjshint(_M('Informe o centro de custo', $module));
            $costCenterDesc = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription', $data->costCenterDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $costCenterDesc->setReadOnly(true);
            $fields[] = new MHContainer('hctCostCenter', array( $costCenterLabel, $costCenterId, $costCenterDesc ));
        }

        //Código do curso no INEP
        $codinep = new MTextField('idCursoInep', $this->getFormValue('idCursoInep', $data->idCursoInep), _M('Código do curso no INEP', $module), 8, _M('até 9 caracteres', $module));
        $codinep->setJsHint(_M('Código identificador do curso no INEP (Instituto Nacional de Estudos e Pesquisas)', $module));
        $codinep->setAttribute('maxlength', 9);
        $fields[] = $codinep;
        $validators[] = new MIntegerValidator('idCursoInep', _M('Código do curso no INEP', $module));
        
        //Vagas no INEP
        $vagasinep = new MTextField('vagasInep', $this->getFormValue('vagasInep', $data->vagasInep), _M('Vagas no INEP', $module), 8, _M('até 9 caracteres', $module));
        $vagasinep->setJsHint(_M('Número de vagas autorizado para o curso no INEP (Instituto Nacional de Estudos e Pesquisas)', $module));
        $vagasinep->setAttribute('maxlength', 9);
        $fields[] = $vagasinep;
        $validators[] = new MIntegerValidator('vagasInep', _M('Vagas no INEP', $module));
        
        //Field curso bloqueado
        $cursoBloqueadoValue = $this->GetFormValue('cursoBloqueado', $data->cursoBloqueado) ? $this->GetFormValue('cursoBloqueado', $data->cursoBloqueado) : DB_FALSE;
        $cursoBloqueado = new MRadioButtonGroup('cursoBloqueado', _M('Está bloqueado para novos contratos'), SAGU::listTrueFalse(1), $cursoBloqueadoValue, null,'horizontal');
        $fields[] = $cursoBloqueado;
        
         //Hidden que recebe o id do reconhecimento para edições.
        $reconId = new SHiddenField('reconhecimentoDeCursoId', null);
        $flds[] = $reconId;
        
        //Field recognition date
        $recognitionDate = new MCalendarField('recognitionDate', null, _M('Data de reconhecimento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $recognitionDate->setJshint(_M('Informe a data de reconhecimento do curso', $module));
        $flds[] = $recognitionDate;
        $valids[] = new MDATEDMYValidator('recognitionDate','','required',  'O campo "Data de reconhecimento" é requerido.');
        
        //Field recognition document
        $recognitionDocumentNumber = new MMultiLineField('recognitionDocumentNumber', null, _M('Número do documento de reconhecimento', $module), 40, 4, 40);
        $recognitionDocumentNumber->setJsHint(_M('Informe o número do documento de reconhecimento', $module));
        $valids[] = new MRequiredValidator('recognitionDocumentNumber','','','O campo "Número do documento de reconhecimento" é requerido.');
        $flds[] = $recognitionDocumentNumber;
        
        //Data inicial de vigência do documento
        $recognitionDateInitial = new MCalendarField('recognitionDateInitial', null, _M('Data inicial de vigência do documento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $recognitionDateInitial->setJshint(_M('Informe a data inicial de vigência do documento', $module));
        $flds[] = $recognitionDateInitial;
        $valids[] = new MDATEDMYValidator('recognitionDateInitial','', 'required', 'O campo "Data inicial de vigência do documento" é requerido.');
        
        //Data final de vigência do documento
        $recognitionDateFinal = new MCalendarField('recognitionDateFinal', null, _M('Data final de vigência do documento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $recognitionDateFinal->setJshint(_M('Informe a data final de vigência do documento', $module));
        $flds[] = $recognitionDateFinal;
        $valids[] = new MDATEDMYValidator('recognitionDateFinal','', 'required', 'O campo "Data final de vigência do documento" é requerido.');
        
        $cols[] = new MGridColumn(_M('Código do reconhecimento', $module), 'left', true, '', false, 'reconhecimentoDeCursoId');
        $cols[] = new MGridColumn(_M('Data de reconhecimento', $module), 'right', true, '', true, 'recognitionDate');
        $cols[] = new MGridColumn(_M('Documento de reconhecimento', $module), 'left', true, '', true, 'recognitionDocumentNumber');
        $cols[] = new MGridColumn(_M('Data início de regência do documento', $module), 'right', true, '', true, 'recognitionDateInitial');
        $cols[] = new MGridColumn(_M('Data final de regência do documento', $module), 'right', true, '', true, 'recognitionDateFinal');  
        
        $fields[] = $sub = new MSubDetail('reconhecimento', _M('Reconhecimento da ocorrência do curso', $module), $cols, $flds, true);
        $sub->setValidators($valids);  
        $sub->addActionEvent('add', 'onAddTestEvent', __CLASS__);
        
        if ( $dataRecon )
        {
            $sub->setData($dataRecon);
        }
        
        parent::defineFields($fields, $validators, $data);
    }
    
    /**
     * Evento executado ao adicionar item a subdetail.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public function onAddTestEvent($args)
    {          
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule(); 
        
        $teste = SAGU::compareTimestamp($args->recognitionDateInitial, '>', $args->recognitionDateFinal);        
        
        if($teste == true) 
        {
            // Data inicial maior que a final, seta erro.
            //$args->recognitionDateInitial = "erro";
            //return false;
            $MIOLO->page->addAJAXJsCode("
                alert('A data inicial de vigência do documento não pode ser maior que a data final!');
                document.getElementById('recognitionDateInitial').value = null;
                document.getElementById('recognitionDateFinal').value = null;
            ");
            
            $args->recognitionDateInitial = null;
            $args->recognitionDateFinal = null;
        }
        
        return $args;        
    }

    /**
     * Event triggered when user chooses New from the toolbar
     */
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $this->$var->value = $this->getFormValue($var . 'S') ? $this->getFormValue($var . 'S') : '';
            }
        }
        $this->courseId->value = $this->getFormValue('courseIdS') ? $this->getFormValue('courseIdS') : '';
        MSubDetail::clearData('reconhecimento');        
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     */
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $opts = array( 'event' => 'tbBtnDelete_confirm',
                       'function' => 'delete',
                       'courseId' => MIOLO::_request('courseId'),
                       'courseVersion' => MIOLO::_request('courseVersion'),
                       'turnId' => MIOLO::_request('turnId'),
                       'unitId' => MIOLO::_request('unitId'));

        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
        $goto = SAGU::getStackBackUrl();
        $gotoNo = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão', $module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     */
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data->courseId = MIOLO::_request('courseId');
        $data->courseVersion = MIOLO::_request('courseVersion');
        $data->turnId = MIOLO::_request('turnId');
        $data->unitId = MIOLO::_request('unitId');

        $business = new BusinessAcademicBusCourseOccurrence();
        $ok = $business->deleteCourseOccurrence($data);

        if ( $ok )
        {
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg = _M('Erro executando a operação solicitada.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();      
        $business = new BusinessAcademicBusCourseOccurrence();

        if ( $function == 'update' )
        {
            $ok = $business->updateCourseOccurrence($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
        }
        else
        {
            $ok = $business->insertCourseOccurrence($data);

            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
        }
        
        $ok = $this->salvarReconhecimentoDaOcorrenciaDoCurso($data);

        if ( $ok )
        {
            $this->confirmInsertUpdate($ok);
        }
        else
        {
            $msg = _M('Erro executando a operação solicitada.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }      
    }
    
    /**
     * Registra os reconhecimentos de curso adicionados para a ocorrência do curso.
     * 
     * @param stdClass $data
     * @return boolean
     */
    private function salvarReconhecimentoDaOcorrenciaDoCurso($data)
    {
        $ok = false;
        if ( MSubDetail::getData('reconhecimento') != null )
        {
            foreach ( MSubDetail::getData('reconhecimento') as $value )
            {
                $reconhecimentoDeCurso = new AcdReconhecimentoDeCurso();

                $reconhecimentoDeCurso->courseId                = $data->courseId;
                $reconhecimentoDeCurso->courseVersion           = $data->courseVersion;
                $reconhecimentoDeCurso->turnId                  = $data->turnId;
                $reconhecimentoDeCurso->unitId                  = $data->unitId;
                $reconhecimentoDeCurso->reconhecimentoDeCursoId = $value->reconhecimentoDeCursoId;
                $reconhecimentoDeCurso->documentoReconhecimento = $value->recognitionDocumentNumber;
                $reconhecimentoDeCurso->dataReconhecimento      = $value->recognitionDate;
                $reconhecimentoDeCurso->dataInicialdeVigencia   = $value->recognitionDateInitial;
                $reconhecimentoDeCurso->dataFinaldeVigencia     = $value->recognitionDateFinal;

                if ( $value->removeData )
                {
                    $ok = $reconhecimentoDeCurso->delete();
                }
                else
                {
                    $ok = $reconhecimentoDeCurso->save();
                }                
            }
        }
        else
        {
            $ok = true;
        }
        
        return $ok;
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data = new acdCourseOccurrence();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $data->$var = $this->$var->value;
            }
        }

        return $data;
    }
}
?>