<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * External exploitation insertion, edition and deletion control
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 25/11/2005
 */
class FrmExternalExploitation extends SForm
{
    /**
     * Construtor da classe
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        parent::__construct($function == SForm::FUNCTION_INSERT ? _M('Inserir', $module) : _M('Atualizar', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Default method to define fields
     * */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        
        if ( $function == SForm::FUNCTION_INSERT )
        {
            $curriculumId = MIOLO::_REQUEST('curriculumId');
            $contractId = MIOLO::_REQUEST('contractId');

            if ( (strlen($contractId) > 0) && (strlen($curriculumId) > 0) )
            {
                $business = new BusinessAcademicBusContract();
                $contractData = $business->getContract($contractId);

                $business = new BusinessAcademicBusCurriculum();
                $curriculumData = $business->getCurriculum($curriculumId);

                $business = new BusinessAcademicBusCurricularComponent();
                $curricularComponentData = $business->getCurricularComponent($curriculumData->curricularComponentId, $curriculumData->curricularComponentVersion);

                $business = new BusinessAcademicBusCourse();
                $courseData = $business->getCourse($contractData->courseId);

                $business = new BusinessBasicBusPhysicalPerson();
                $personData = $business->getPhysicalPerson($contractData->personId);

                $filters->curriculumId = $curriculumId;
                $filters->contractId = $contractId;

                $business = new BusinessAcademicBusExternalExploitation();

                $exploitationSearch = $business->searchExploitation($filters);

                if ( strlen($exploitationSearch[0][5]) > 0 )
                {
                    $exploitationSummary = $business->getEnrollExploitationSummary($exploitationSearch[0][5]);

                    $exploitationData = $business->getEnrollExploitationData($exploitationSearch[0][5]);
                }
                else
                {
                    $exploitationSummary->remainingNumberHours = $curricularComponentData->academicNumberHours;
                }

                $fields[] = new MHiddenField('contractId', $contractId);
                $fields[] = new MHiddenField('curriculumId', $curriculumId);
                $fields[] = new MHiddenField('curriculumNumberHours', $exploitationSummary->remainingNumberHours);
            }
            else
            {
                $msg = _M('Nenhum código de contrato ou matriz curricular encontrado. Você utilizou o procedimento correto para acessar este formulário?', $module);
                $this->addError($msg);
            }
        }
        elseif ( $function == 'update' )
        {
            $exploitationId = MIOLO::_REQUEST('exploitationId');

            if ( strlen($exploitationId) > 0 )
            {                
                $busExploitation = new BusinessAcademicBusExternalExploitation();
                $data = $busExploitation->getExternalExploitation($exploitationId);

                $business = new BusinessAcademicBusEnroll();
                $enrollData = $business->getEnroll($data->enrollId);

                $business = new BusinessAcademicBusContract();
                $contractData = $business->getContract($enrollData->contractId);

                $business = new BusinessAcademicBusCurriculum();
                $curriculumData = $business->getCurriculum($enrollData->curriculumId);

                $business = new BusinessAcademicBusCurricularComponent();
                $curricularComponentData = $business->getCurricularComponent($curriculumData->curricularComponentId, $curriculumData->curricularComponentVersion);

                $business = new BusinessAcademicBusCourse();
                $courseData = $business->getCourse($contractData->courseId);

                $business = new BusinessBasicBusPhysicalPerson();
                $personData = $business->getPhysicalPerson($contractData->personId);

                $business = new BusinessAcademicBusLearningPeriod();
                $learningPeriodData = $business->getLearningPeriod($enrollData->learningPeriodId);

                $exploitationSummary = $busExploitation->getEnrollExploitationSummary($data->enrollId);
                $exploitationData = $busExploitation->getEnrollExploitationData($data->enrollId);

                $fields[] = new MHiddenField('exploitationId', $exploitationId);
                $fields[] = new MHiddenField('contractId', $enrollData->contractId);
                $fields[] = new MHiddenField('curriculumId', $enrollData->curriculumId);
                $fields[] = new MHiddenField('curriculumNumberHours', $exploitationSummary->remainingNumberHours);
                $fields[] = new MHiddenField('pastExploitationNumberHours', $data->exploitationNumberHours);
                $fields[] = new MHiddenField('enrollId', $data->enrollId);
            }
            else
            {
                $msg = _M('Nenhum código de aproveitamento encontrado. Você usou o procedimento correto para acessar este formulário?', $module);
                $this->addError($msg);
            }
        }

        $fields[] = new MHiddenField('limbo', null);
        $fields[] = new MTextLabel('personId', $personData->personId . ' - ' . $personData->name, _M('Pessoa', $module));
        $fields[] = new MSeparator();

        //Info course
        $courseLabel = new MText('courseIdInfoLabel', _M('Curso', $module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $course = new MTextLabel('courseIdInfo', $contractData->courseId . '/' . $contractData->courseVersion . ' - ' . $courseData->name);
        $flds[] = new MHContainer('hctCourse', array( $courseLabel, $course ));

        //Info curricular component
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Disciplina', $module) . ':');
        $curricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponent = new MTextLabel('curricularComponentId', $curricularComponentData->curricularComponentId . '/' . $curricularComponentData->curricularComponentVersion . ' - ' . $curricularComponentData->name);
        $flds[] = new MHContainer('hctCurricularComponent', array( $curricularComponentLabel, $curricularComponent ));
        
        //Info number hours
        $numberHoursLabel = new MText('numberHours', _M('Carga horária total', $module) . ':');
        $numberHoursLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $numberHours = new MTextLabel('academicNumberHours', $curricularComponentData->academicNumberHours);
        $flds[] = new MHContainer('hctNumberHours', array( $numberHoursLabel, $numberHours ));

        //FIXME: O campo seguinte exige um casting para String, pois caso contrário não exibe o valor inteiro 0
        $color = $exploitationSummary->remainingNumberHours > 0 ? 'green' : 'red';
        $remainingNumberHoursLabel = new MText('remainingNumberHours', _M('Carga horária restante', $module) . ':');
        $remainingNumberHoursLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $remainingNumberHours = new MTextLabel('remainingNumberHours', (string) $exploitationSummary->remainingNumberHours, '', $color);
        $flds[] = new MHContainer('hctRemainingNumberHours', array( $remainingNumberHoursLabel, $remainingNumberHours ));
        
        //Obtém as disciplinas vínculadas a uma determinada disciplina eletiva.
        $busCurriculum = new BusinessAcademicBusCurriculum();
        $options = $busCurriculum->optionEletive($curriculumData);
        
        //Gera combobox caso a disciplina seja uma eletiva
        if($curriculumData->curricularComponentTypeId == SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_TYPE_ELECTIVE'))
        { 
            $electiveCurriculumLabel = new MText('electiveCurriculumLabel', _M('Opção de eletiva', $module) . ':');
            $electiveCurriculumLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $electiveCurriculumLabel->setClass('m-caption m-caption-required');
            $electiveCurriculumId = new MComboBox('electiveCurriculumId', $this->getFormValue('electiveCurriculumId', $data->electiveCurriculumId), '',$options);
            $validators[] = new MIntegerValidator('electiveCurriculumId', _M('Opção de eletiva', $module), 'required');
            $flds[] = new MHContainer('hctElectiveCurriculum', array( $electiveCurriculumLabel,$electiveCurriculumId ));
            
        }
        
        if ( $function == 'update' )
        {
            $flds[] = new MTextLabel('periodId', $learningPeriodData->periodId, _M('Período do aproveitamento', $module));
        }

        $bsg1 = new BaseGroup('bsg1', _M('Dados da disciplina do curso', $module), $flds, 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width = '100%';
        $fields[] = $bsg1;
        unset($flds);

        if ( count($exploitationData) > 0 )
        {
            $gridFilters->home = $action;
            $gridFilters->readOnly = true;

            $gridExploitations = $MIOLO->getUI()->getGrid($module, 'GrdExploitationSearch', $gridFilters);
            $gridExploitations->setData($exploitationData);

            $fields[] = $gridExploitations;
        }

        $fields[] = new MSeparator();

        //Field exploitation institution
        $exploitationInstitutionLabel = new MText('exploitationInstitutionLabel', _M('Instituição do aproveitamento', $module) . ':');
        $exploitationInstitutionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $exploitationInstitutionLabel->setClass('m-caption m-caption-required');
        $exploitationInstitutionId = new MLookupTextField('exploitationInstitutionId', $this->getFormValue('exploitationInstitutionId', $data->institutionId), _M('Código da instituição do aproveitamento', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'exploitationInstitutionName', 'basic', 'LegalPersonInstitution', null, null, true);
        $exploitationInstitutionId->setJsHint(_M('Informe o código da instituição de aproveiramento', $module));
        $validators[] = new MIntegerValidator('exploitationInstitutionId', '', 'required');
        $exploitationInstitutionName = new MTextField('exploitationInstitutionName', $this->getFormValue('exploitationInstitutionName', $this->exploitationInstitutionName->value), _M('Nome da instituição do aproveitamento', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $exploitationInstitutionName->setJsHint(_M('Nome da instituição do aproveitamento', $module));
        $exploitationInstitutionName->setReadOnly(true);
        $hctExploitationInstitution = new MHContainer('hctExploitationInstitution', array( $exploitationInstitutionLabel, $exploitationInstitutionId, $exploitationInstitutionName ));
        $hctExploitationInstitution->setShowLabel(false);
        $flds[] = $hctExploitationInstitution;

        //Field course
        $courseTxtLabel = new MText('courseTxtLabel', _M('Curso', $module) . ':');
        $courseTxtLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseTxtName = new MTextField('courseName_app', $this->getFormValue('courseName_app', $data->courseName), _M('Curso', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseTxtName->setJsHint(_M('Informe o nome do curso', $module));
        $hctCourseTxt = new MHContainer('hctCourseTxt', array( $courseTxtLabel, $courseTxtName ));
        $hctCourseTxt->setShowLabel(false);
        $flds[] = $hctCourseTxt;

        //Field curricular component
        $curricularComponentTxtLabel = new MText('curricularcomponentTxtLabel', _M('Disciplina', $module) . ':');
        $curricularComponentTxtLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentTxtName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Disciplina', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentTxtName->setJsHint(_M('Informe o nome da disciplina', $module));
        $hctCurricularComponentTxt = new MHContainer('hctCurricularComponentTxt', array( $curricularComponentTxtLabel, $curricularComponentTxtName ));
        $hctCurricularComponentTxt->setShowLabel(false);
        $flds[] = $hctCurricularComponentTxt;

        //Field curricular component
        $numberHoursTxtLabel = new MText('numberHoursTxtLabel', _M('Número de horas', $module) . ':');
        $numberHoursTxtLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $numberHours = new MTextField('numberHours', $this->getFormValue('numberHours', $data->numberHours), _M('Carga horária', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $numberHours->setJsHint(_M('Informe a carga horária da disciplina do aproveitamento', $module));
        $hctNumberHours = new MHContainer('hctNumberHours', array( $numberHoursTxtLabel, $numberHours ));
        $hctNumberHours->setShowLabel(false);
        $flds[] = $hctNumberHours;

        //Field curricular component
        $creditsTxtLabel = new MText('creditsTxtLabel', _M('Créditos', $module) . ':');
        $creditsTxtLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $credits = new MTextField('credits', $this->getFormValue('credits', $data->credits), _M('Créditos', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $credits->setJsHint(_M('Informe os créditos da disciplina do aproveitamento', $module));
        $hctCredits = new MHContainer('hctCredits', array( $creditsTxtLabel, $credits ));
        $hctCredits->setShowLabel(false);
        $flds[] = $hctCredits;

        //Field curricular component
        $finalNoteTxtLabel = new MText('finalNoteTxtLabel', _M('Nota da disciplina externa', $module) . ':');
        $finalNoteTxtLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $finalNote = new MTextField('finalNote', $this->getFormValue('finalNote', $data->finalNote), _M('Grau final', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $finalNote->setJsHint(_M('Informe o grau final', $module));
        $hctFinalNote = new MHContainer('hctFinalNote', array( $finalNoteTxtLabel, $finalNote ));
        $hctFinalNote->setShowLabel(false);
        $flds[] = $hctFinalNote;

        //Field period
        $periodTxtLabel = new MText('periodTxtLabel', _M('Período', $module) . ':');
        $periodTxtLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $period = new MTextField('period', $this->getFormValue('period', $data->period), _M('Período', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $period->setJsHint(_M('Informe o período no qual a disciplina foi cursada', $module));
        $hctPeriod = new MHContainer('hctPeriod', array( $periodTxtLabel, $period ));
        $hctPeriod->setShowLabel(false);
        $flds[] = $hctPeriod;

        $bsg2 = new BaseGroup('bsg2', _M('Dados da disciplina do aproveitamento', $module), $flds, 'vertical');
        $bsg2->showLabel = true;
        $bsg2->width = '100%';
        $fields[] = $bsg2;
        unset($flds);

        if ( $function == 'insert' )
        {
            /*
             * Course occurrence lookup
             */
            $lkpValue = array(
                $this->GetFormValue('courseId', $data->courseId),
                $this->GetFormValue('courseVersion', $data->courseVersion),
                $this->GetFormValue('turnId', $data->turnId),
                $this->GetFormValue('unitId', $data->unitId)
            );
            $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
            $courseOccurrenceLookup->showRequiredLabel();
            $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
            $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
            $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
            $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
            $validators[] = new MIntegerValidator('credits', _M('Créditos', $module));
            $fields[] = $courseOccurrenceLookup;
                    
            //Field period
            $businessPeriod = new BusinessAcademicBusPeriod();
            $periodId = new MComboBox('periodId', $this->getFormValue('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID')), _M('Período', $module), $businessPeriod->listPeriod(), true);
            $periodId->setJsHint(_M('Selecione um período', $module));
            $fields[] = $periodId;

            //Field learning period
            $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
            $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $learningPeriodLabel->setClass('m-caption m-caption-required');
            $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescription', $module, 'LearningPeriod', null, array( 'periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId' ), true);
            $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
            $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo', $module), 'required');
            $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
            $learningPeriodDescription->setReadOnly(true);
            $hctLearningPeriod = new MHContainer('hctLearningPeriod', array( $learningPeriodLabel, $learningPeriodId, $learningPeriodDescription ));
            $hctLearningPeriod->setShowLabel(true);
            $fields[] = $hctLearningPeriod;
        }
                
        //Field number hour exploitation
        $numberHourExploitation = new MTextField('numberHourExploitation', $this->getFormValue('numberHourExploitation', $data->exploitationNumberHours), _M('Número de horas aproveitadas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $numberHourExploitation->setJsHint(_M('Informe o número de horas aproveitadas', $module));
        $validators[] = new MRequiredValidator('numberHourExploitation', _M('Número de horas aproveitadas', $module));
        $fields[] = $numberHourExploitation;

        //Field credits explitation
        $creditsExploitation = new MTextField('creditsExploitation', $this->getFormValue('creditsExploitation', $data->exploitationCredits), _M('Créditos aproveitados', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $creditsExploitation->setJsHint(_M('Informe os créditos aproveitados', $module));
        $fields[] = $creditsExploitation;
        
        $args = new stdClass();
        $args->contractId = $contractId;
        $args->curriculumId = $curriculumId;
        $args->enrollId = $enrollData->enrollId;
        
        $busEnroll = new BusinessAcademicBusEnroll();
        $enrolls = $busEnroll->searchEnroll($args);
                
        if ( count($enrolls) > 0 )
        {
            $busDegree = new BusinessAcademicBusDegree();
            $finalDegree = $busDegree->getLearningPeriodFinalDegree($enrolls[0][33]);

            $filters = new stdClass();
            $filters->degreeId = $finalDegree->degreeId;
            $filters->enrollId = $enrolls[0][0];

            $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();
            $degreeEnroll = $busDegreeEnroll->searchDegreeEnroll($filters);
            
            $data->notaFinal = $degreeEnroll[0][3];
        }
        
        $data->notaFinal = $function == 'insert' ? null : $data->notaFinal;
        
        //Field credits explitation
        $hint = _M('Nota final do aproveitamento, para casos de n:1. Caso a nota seja numérica digitar APENAS "." (pontos) e não "," (vírgulas), caso contrário o sistema interpretará um conceito.');
        $notaFinal = new MTextField('notaFinal', $this->getFormValue('notaFinal', $data->notaFinal), _M('Nota final', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), $hint);
        $fields[] = $notaFinal;
        
        $fields[] = new Separator();
        
        $fields = array_merge($fields, $this->getCustomFields($this->getTransaction(), MIOLO::_REQUEST('exploitationId')));
        
        $opt = array(
                'function' => 'search',
                'contractPersonId' => MIOLO::_REQUEST('contractPersonId'),
                'contractId' => MIOLO::_REQUEST('contractId'),
                'event' => 'btnSearch_click'
            );
        
        $linkBack = $MIOLO->getActionURL($module, 'main:process:exploitation:externalExploitation', null, $opt);            
        
        $fields[] = new MButton('tbnBackPage', _M('<< Voltar'), $linkBack);    
        
        $this->setFields($fields);
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }

        parent::defineFields();
    }
    
    /**
     * Event triggered when user chooses Delete from the toolbar
     * */
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $exploitationId = MIOLO::_REQUEST('exploitationId');

        try
        {
            $busExploitation = new BusinessAcademicBusExploitation();
            $exploitationData = $busExploitation->getExploitation($exploitationId);
        }
        catch ( Exception $e )
        {
            $msg = _M('Erro ao buscar dados de aproveitamento.', $module) . ' ' . $e->getMessage();
            $this->addError($msg);
        }

        $opts = array( 'event' => 'tbBtnDelete_confirm',
            'function' => 'delete',
            'exploitationId' => $exploitationId );

        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);

        unset($opts);
        $opts['function'] = 'update';
        $opts['enrollId'] = $exploitationData->enrollId;

        $gotoNo = $MIOLO->getActionURL($module, 'main:register:enroll', null, $opts);
        $msg = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão', $module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     * */
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $exploitationId = MIOLO::_REQUEST('exploitationId');

        try
        {
            SDatabase::beginTransaction();
            
            $busExploitation = new BusinessAcademicBusExploitation();
            $exploitationData = $busExploitation->getExploitation($exploitationId);

            $busEnroll = new BusinessAcademicBusEnroll();
            $enrollData = $busEnroll->getEnroll($exploitationData->enrollId);

            $busContract = new BusinessAcademicBusContract();
            $contractData = $busContract->getContract($enrollData->contractId);

            $busExploitation->deleteExploitation($exploitationId);
            
            SDatabase::commit();
            $goto = $MIOLO->getActionURL($module, 'main', null, array( 'personId' => $contractData->personId ));
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $MIOLO->information($msg, $goto);
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $msg = _M('Erro executando a operação solicitada.', $module) . ' ' . $e->getMessage();
            $this->addError($msg);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     * */
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $data = $this->getTypesData();

        if ( ($function == 'update') && (isset($data->pastExploitationNumberHours)) )
        {
            $checkNumberHours = $data->curriculumNumberHours + $data->pastExploitationNumberHours;
        }
        else
        {
            $checkNumberHours = $data->curriculumNumberHours;
        }

        if ( $data->exploitationNumberHours > $checkNumberHours )
        {
            $msg = _M('Podem ser aproveitadas até @1 horas para a disciplina selecionada.', $module, $checkNumberHours);
            $this->addError($msg);
        }
        else
        {
            try
            {
                SDatabase::beginTransaction();
                $business = new BusinessAcademicBusExternalExploitation();
                
                if ( $function == 'update' )
                {
                    $business->updateExternalExploitation($data);
                    $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
                    $goto = $MIOLO->getActionURL($module, 'main:register:enroll', null, array( 'enrollId' => $data->enrollId, 'function' => 'update' ));
                }
                else
                {
                    $data = $business->insertExternalExploitation($data);
                    $msg = _M('Aproveitamento cadastrado.', $module);
                    $goto = $MIOLO->getActionURL($module, $action, null, array( 'function' => 'search', 'contractId' => MIOLO::_REQUEST('contractId') ));
                }

                if ( strlen($data->notaFinal) > 0 )
                {
                    $this->insereOuEditaNotaFinal($data);
                }
                
                // Caso esteja definido para o semestre ser equivalente a carga horária cursada.
                $acdSemesterContractPeriod = new AcdSemesterContractPeriod(null, $data->contractId);
                $acdSemesterContractPeriod->atualizaSemestreDoContrato();
                
                if ( strlen($data->exploitationId) > 0 )
                {
                    $this->saveCustomFields($data->exploitationId, null, $this->getTransaction());
                }
                    
                SDatabase::commit();
                $MIOLO->information($msg, $goto);
            }
            catch ( Exception $e )
            {
                SDatabase::rollback();
                $msg = _M('Erro executando a operação solicitada.', $module) . ' ' . $e->getMessage();
                $this->addError($msg);
            }
        }
    }
    
    /**
     * Insere ou edita a nota final do aproveitamento.
     * 
     * @param stdClass $data
     * @return boolean
     */
    private function insereOuEditaNotaFinal($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $busEnroll = new BusinessAcademicBusEnroll();
        $enrollData = $busEnroll->getEnroll($data->enrollId);
        
        $busDegree = new BusinessAcademicBusDegree();
        $finalDegree = $busDegree->getLearningPeriodFinalDegree($enrollData->learningPeriodId);
        
        if ( is_null($finalDegree->degreeId) )
        {
            throw new Exception(_M("Não foi encontrada a nota final. Verifique na configuração de notas e frequências do período letivo {$data->learningPeriodId}."));
            return;
        }
        
        $filters = new stdClass();
        $filters->degreeId = $finalDegree->degreeId;
        $filters->enrollId = $data->enrollId;
        
        $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();
        $degreeEnroll = $busDegreeEnroll->searchDegreeEnroll($filters);
        
        if ( strlen($data->notaFinal) > 0 )
        {
            if ( is_numeric($data->notaFinal) )
            {
                $enroll->finalNote = $data->notaFinal;
                $enroll->concept = NULL;
            }
            else
            {
                $enroll->concept = $data->notaFinal;
                $enroll->finalNote = NULL;
            }
        }
        else
        {
            $enroll->finalNote = NULL;
            $enroll->concept = NULL;
        }
        
        $filters->recordDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
        
        if ( count($degreeEnroll) > 0 )
        {
            $filters->degreeEnrollId = $degreeEnroll[0][0];
            $ok = $busDegreeEnroll->updateDegreeEnroll($filters);
        }
        else
        {
            $ok = $busDegreeEnroll->insertDegreeEnroll($filters);
        }
        
        //Salva também no finalNote da acdEnroll - ticket #36607
        if ( $ok )
        {
            is_numeric($data->notaFinal) ? $enrollData->finalNote = $data->notaFinal : $enrollData->concept = $data->notaFinal;
            $ok = $busEnroll->updateEnroll($enrollData);
        }
        
        return $ok;
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data->contractId = MIOLO::_REQUEST('contractId');
        $data->curriculumId = MIOLO::_REQUEST('curriculumId');
        $data->exploitationNumberHours = MIOLO::_REQUEST('numberHourExploitation');
        $data->exploitationCredits = MIOLO::_REQUEST('creditsExploitation');
        $data->institutionId = MIOLO::_REQUEST('exploitationInstitutionId');
        $data->courseName = MIOLO::_REQUEST('courseName_app');
        $data->curricularComponentName = MIOLO::_REQUEST('curricularComponentName');
        $data->finalNote = MIOLO::_REQUEST('finalNote');
        $data->numberHours = MIOLO::_REQUEST('numberHours');
        $data->credits = MIOLO::_REQUEST('credits');
        $data->period = MIOLO::_REQUEST('period');
        $data->learningPeriodId = MIOLO::_REQUEST('learningPeriodId');
        $data->exploitationId = MIOLO::_REQUEST('exploitationId');
        $data->curriculumNumberHours = MIOLO::_REQUEST('curriculumNumberHours');
        $data->pastExploitationNumberHours = MIOLO::_REQUEST('pastExploitationNumberHours');
        $data->enrollId = MIOLO::_REQUEST('enrollId');
        $data->notaFinal = MIOLO::_REQUEST('notaFinal');
        $data->electiveCurriculumId = MIOLO::_REQUEST('electiveCurriculumId');

        return $data;
    }
}
?>