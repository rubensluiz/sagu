<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Curriculum Type form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 **/

/**
 * Form to manipulate a curricular type
 **/
class FrmCurriculumType extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcdCurriculumType(), array('curriculumTypeId'), 'BusCurriculumType');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');


        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $curriculumTypeId = MIOLO::_request('curriculumTypeId');
            
            $data = $this->busObject->getCurriculumType($curriculumTypeId, $curriculumTypeVersion);

            $fields[]  = new MHiddenField('curriculumTypeId', $curriculumTypeId);
            $fields[]  = new MTextLabel('curriculumTypeId', $curriculumTypeId, _M('Código', $module));
        }
        
        $curriculumTypeDescription = new MTextField('curriculumTypeDescription', $this->getFormValue('curriculumTypeDescription',$data->curriculumTypeDescription), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumTypeDescription->setJsHint(_M('Informe a descrição do tipo de currículo', $module));
        $validators[] = new MRequiredValidator('curriculumTypeDescription', '', 'required');
        $fields[]     = $curriculumTypeDescription;

        $shortDescription = new MTextField('shortDescription', $this->getFormValue('shortDescription', $data->shortDescription), _M('Abreviatura', $module), 30, _M('@1 caracteres no máximo', $module, SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_SHORT_NAME_MAX_LENGTH')));
        $shortDescription->setJsHint(_M('Informe a descrição da abreviatura', $module));
        $validators[] = new MRequiredValidator('shortDescription', '', 'required');
        $fields[] = $shortDescription;

        parent::defineFields($fields, $validators, $data);
    }

    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->description = $this->curriculumTypeDescription->value;

        return $data;
    }

}

?>
