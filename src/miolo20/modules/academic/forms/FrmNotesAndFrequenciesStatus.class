<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Relatório de acompanhamento da digitação de notas e frequências
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @since
 * Class created on 26/08/2011
 */

/**
 * Formulário para gerar o relatório de acompanhamento de digitação de notas e frequências
 */
class FrmNotesAndFrequenciesStatus extends SForm
{
    private $module;
    private $MIOLO;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $this->module = SAGU::getFileModule(__FILE__);
        $this->MIOLO = MIOLO::getInstance();

        parent::__construct(_M('Acompanhamento da digitação de notas e frequências', $module), null, null);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        try
        {
            $busTurn = new BusinessBasicBusTurn();
            $busUnit = new BusinessBasicBusUnit();
            $busPeriod = new BusinessAcademicBusPeriod();

            $listTurn = $busTurn->listTurn();
            $listUnit = $busUnit->listUnit();
            $listPeriod = $busPeriod->listPeriod();
        }
        catch (Exception $e)
        {
            $MIOLO->error($e->getMessage(), MIOLO::_request('goto'));
        }

        $periodValue = $this->getFormValue('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'));
        $periodId = new MComboBox('periodId', $periodValue, _M('Código do período', $this->module), $listPeriod);
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = $periodId;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $fields[] = $courseOccurrenceLookup;

        $classLabel = new MText('classLabel', _M('Turma', $this->module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'className_, limbo, limbo, limbo, limbo, limbo', $this->module, 'ClassCourse', null, array('courseId'=>'courseId'), true);
        $classId->setJsHint(_M('Informe o código da turma', $this->module));
        $className_ = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className_->setReadOnly(true);
        $className_->setJsHint(_M('Nome da turma', $this->module));
        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $className_));
        $hctClass->setShowLabel(true);
        $fields[] = $hctClass;

        $fields[] = new MSeparator();

        $this->addFields($fields);
        if (count($validators) > 0)
        {
            $this->setValidators($validators);
        }

        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($this->MIOLO->getActionURL($this->module, 'main:report'));
        $this->page->onLoad('document.' . $this->name . '.courseId.focus();');

        parent::defineFields();

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $this->MIOLO->getActionURL($this->module, MIOLO::getCurrentAction(), null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when button print is clicked
     */
     public function generateReport()
     {
        $MIOLO = MIOLO::getInstance();

        //Parameters of the report
        $parameters['periodid'] = MIOLO::_REQUEST('periodId');
        if (strlen(MIOLO::_REQUEST('courseId')) > 0)
        {
            $parameters['courseid'] = MIOLO::_REQUEST('courseId');
        }
        if (strlen(MIOLO::_REQUEST('courseVersion')) > 0)
        {
            $parameters['courseversion'] = (int)MIOLO::_REQUEST('courseVersion');
        }
        if (strlen(MIOLO::_REQUEST('turnId')) > 0)
        {
            $parameters['turnid'] = (int)MIOLO::_REQUEST('turnId');
        }
        if (strlen(MIOLO::_REQUEST('unitId')) > 0)
        {
            $parameters['unitid'] = (int)MIOLO::_REQUEST('unitId');
        }
        if (strlen(MIOLO::_REQUEST('classId')) > 0)
        {
            $parameters['classid'] = MIOLO::_REQUEST('classId');
        }

        $report = new SReport();
        $report->setReportName('notesAndFrequenciesStatus');
        $report->setParameters($parameters);

        if ( !$report->generate() )
        {
            $goto = SAGU::getStackBackUrl();
            $url  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($this->module, MIOLO::getCurrentAction());

            SAGU::error(_M("Nenhuma informação encontrada.", $this->module), $url);
        }
     }
}
?>
