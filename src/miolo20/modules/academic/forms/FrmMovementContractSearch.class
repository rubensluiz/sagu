<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdMovementContract table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 30/08/2005
 *
 **/

/**
 * Form to search the basMovementContract table
 */
class FrmMovementContractSearch extends SSearchForm
{
    public function __construct($data)
    {
        parent::__construct(null, new acdMovementContract(), array('contractId', 'stateContractId', 'stateTime'), 'BusMovementContract');
    }

    
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $fields[] = new MDiv('divLimbo');

        $personLabel = new MText('personLabel', _M('Pessoa',$module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $contractPersonIdS     = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS', $this->contractPersonIdS->value), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonName', 'courseIdS', 'courseName', 'courseVersion'), $module, 'PersonContract', null, array('personId' => 'contractPersonIdS'), !$this->page->isPostBack());
        $contractPersonIdS->setJsHint(_M('Informe o código da pessoa',$module));
        $validators[] = new MIntegerValidator('contractPersonIdS', _M('Pessoa',$module), 'optional');

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->contractPersonName), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa',$module));

        $hctPerson = new MHContainer('hctPerson', array($personLabel, $contractPersonIdS, $contractPersonName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        $contractLabel = new MText('contractLabel', _M('Contrato',$module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[]      = $contractLabel;

        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS', $data->contractIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonIdS', 'contractPersonName', 'courseIdS', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'contractPersonIdS'), true);
        $contractIdS->setJsHint(_M('Informe o código do contrato',$module));
        $flds[] = $contractIdS;
        $validators[] = new MIntegerValidator('contractIdS', _M('Contrato',$module), 'optional');

        $courseId = new MTextField('courseIdS', $this->getFormValue('courseIdS',$this->courseIdS->value), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseId->setReadOnly(true);
        $courseId->setJsHint(_M('Código do curso',$module));
        $flds[]   = $courseId;

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$this->courseVersion->value), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Versão do curso',$module));
        $flds[]        = $courseVersion;

        $courseName = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', 30);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso',$module));
        $flds[]             = $courseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);

        $stateContractLabel= new MText('stateContractLabel', _M('Estado contratual',$module) . ':');
        $stateContractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[]                = $stateContractLabel;
        
        $stateContractIdS = new MLookupTextField('stateContractIdS', $this->getFormValue('stateContractIdS', $data->stateContractIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'stateDescriptionS', $module, 'StatesContract', null, null, true);
        $stateContractIdS->setJsHint(_M('Informe o código do estado',$module));
        $flds[]                = $stateContractIdS;
        $validators[] = new MIntegerValidator('stateContractIdS', _M('Estado contratual',$module), 'optional');

        $stateDescriptionS = new MTextField('stateDescriptionS', $this->getFormValue('stateDescriptionS', $data->stateDescriptionS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $stateDescriptionS->setReadOnly(true);
        $stateDescriptionS->setJsHint(_M('Descrição do estado contratual',$module));
        $flds[]                = $stateDescriptionS;

        $hctStateContract = new MHContainer('hctStateContract', $flds);
        $hctStateContract->setShowLabel(true);
        $fields[]    = $hctStateContract;
        unset($flds);

        $reasonLabel= new MText('reasonLabel', _M('Motivo',$module) . ':');
        $reasonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[]                = $reasonLabel;

        $reasonIdS = new MLookupTextField('reasonIdS', $this->getFormValue('reasonIdS', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'reasonDescriptionS', $module, 'Reason', null, null, true);
        $reasonIdS->setJsHint(_M('Informe o código do motivo',$module));
        $flds[]                = $reasonIdS;
        $validators[] = new MIntegerValidator('reasonIdS', _M('Motivo',$module), 'optional');

        $reasonDescriptionS = new MTextField('reasonDescriptionS', $this->reasonDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $reasonDescriptionS->setReadOnly(true);
        $reasonDescriptionS->setJsHint(_M('Descrição do motivo',$module));
        $flds[]                = $reasonDescriptionS;

        $hctReason = new MHContainer('hctReason', $flds);
        $hctReason->setShowLabel(true);
        $fields[]    = $hctReason;
        unset($flds);

        $stateTime  = $this->getFormValue('stateTimeS');
        $stateTimeS = new MCalendarField('stateTimeS', $stateTime, _M('Data do estado',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $stateTimeS->setJsHint(_M('Data do estado', $module));
        $stateTimeS->setValidator( new MDATEDMYValidator('stateTimeS', _M('Data do estado',$module), 'optional'));
        $fields[]   = $stateTimeS;

        $stateHourS   = new MTextField('stateHourS', $this->getFormValue('stateHourS'), _M('Horário do estado',$module), SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), 'hh:mm');
        $stateHourS->setJsHint(_M('Informe a hora do estado', $module));
        $validators[] = new MTimeValidator('stateHourS', _M('Horário do estado',$module), 'optional');
        $fields[]     = $stateHourS;

        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodIdS', $this->getFormValue('periodIdS', $data->periodIdS), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        $learningPeriodLabel= new MText('learningPeriodLabel', _M('Último período acadêmico',$module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[]                = $learningPeriodLabel;
        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $data->learningPeriodIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limboS, limboS, limboS, limboS, limboS, learningPeriodIdDescriptionS', $module, 'LearningPeriod', null, array('periodId' => 'periodIdS', 'courseId' => 'courseIdS'), true);
        $learningPeriodIdS->setJsHint(_M('Informe o último período letivo',$module));
        $flds[]                = $learningPeriodIdS;
        $validators[]           = new MIntegerValidator('learningPeriodIdS', _M('Último período acadêmico',$module));

        $fields[] = new MHiddenField('limboS', $limbo);

        $learningPeriodIdDescriptionS = new MTextField('learningPeriodIdDescriptionS', $this->learningPeriodIdDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodIdDescriptionS->setReadOnly(true);
        $learningPeriodIdDescriptionS->setJsHint(_M('Descrição do último período',$module));
        $flds[]                = $learningPeriodIdDescriptionS;

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', $flds);
        $hctLearningPeriod->setShowLabel(true);
        $fields[]    = $hctLearningPeriod;
        unset($flds);

        parent::defineFields($fields, $module, 'GrdMovementContractSearch', $validators);
    }


    public function  getTypesData()
    {
        $filters = parent::getTypesData();
        $filters->contractId       = MIOLO::_REQUEST('contractIdS');
        $filters->personId         = MIOLO::_REQUEST('contractPersonIdS');
        $filters->stateContractId  = MIOLO::_REQUEST('stateContractIdS');
        $filters->reasonId         = MIOLO::_REQUEST('reasonIdS');
        $filters->learningPeriodId = MIOLO::_REQUEST('learningPeriodIdS');
        $filters->periodId         = MIOLO::_REQUEST('periodIdS');

        if (strlen(MIOLO::_REQUEST('stateTimeS')) > 0 && strlen(MIOLO::_REQUEST('stateHourS')) > 0)
        {
            $filters->stateTime = MIOLO::_REQUEST('stateTimeS');
        }
        elseif (strlen(MIOLO::_REQUEST('stateTimeS')) > 0)
        {
            $filters->stateTime = MIOLO::_REQUEST('stateTimeS');
        }
        elseif (strlen(MIOLO::_REQUEST('stateHourS')) > 0)
        {
            $filters->stateTime = MIOLO::_REQUEST('stateHourS') . '%';
        }

        return $filters;
    }
    
    /**
     * Gera a popup de vizualização dos complementos da movimentação contratual.
     * 
     * @param stdClass $args
     */
    public function popupCompletoMovimentacaoContratual($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $busMovementContractComplement = new BusinessAcademicBusMovementContractComplement();
        $complemento = $busMovementContractComplement->searchMovementContractComplement($args);
                
        //Obtém as informações do complemento do contrato
        $busStateContractField = new BusinessAcademicBusStateContractField();
        $dadosComplemento = $busStateContractField->getStateContractField($complemento[0][5]);
        
        // Tabela complemento movimentação contratual
        $colunas = array( 
            _M('Estado contratual', $module),
            _M('Data do complemento', $module),
            _M('Descrição', $module),
            _M('Registro', $module)
        );
        
        $dadosDaTabela[] = array(
                $args->stateContractId,
                $args->stateTime,
                $dadosComplemento->description,
                $complemento[0][8]
        );
        
        $fields[] = new MTableRaw(null, $dadosDaTabela, $colunas);
        
        $this->setFields($fields);
        MPopup::show('popupCompletoMovimentacaoContratual', $fields, _M('Complemento da movimentação contratual', $module));
    }
}
?>