<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Extension document form
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 05/10/2006
 *
 * */
class FrmDiplomaDocument extends SForm
{
    /**
     * Class constructor
     * */
        public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Diploma', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array( 'event' => 'tbBtnPrint_click' )));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
        set_time_limit(0);
    }
    
    /**
     * Default method to define fields
     * */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');
        $fields[] = new MHiddenField('limbo', '');

        //Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $contractPersonId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array( 'contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber' ), $module, 'PersonContract', null, array( 'personId' => 'contractPersonId' ), !$this->page->isPostBack());
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $this->enrollData->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctContract', array( $contractPersonLabel, $contractPersonId, $contractPersonName ));
        $hctPerson->setShowLabel(true);
        $fields[] = $hctPerson;

        //Field contract
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array( 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber' ), $module, 'Contract', null, array( 'personId' => 'contractPersonId' ), true);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato', $module), 'required');
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $this->enrollData->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion', $this->enrollData->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName', $this->enrollData->contractCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $hctContract = new MHContainer('hctContract', array( $contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName ));
        $hctContract->setShowLabel(true);
        $fields[] = $hctContract;
        unset($flds);

        $businessDiploma = new BusinessAcademicBusDiploma();
        $registerNumber = $businessDiploma->getNextRegisterNumber();
        $sheet = $businessDiploma->getNextPageNumber();

        //Fiedl register
        $registerNumberLabel = new MText('$registerNumberLabel', _M('Registro', $module) . ':');
        $registerNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $registerNumberLabel->setClass('m-caption m-caption-required');
        $registerNumber = new MTextField('registerNumber', $this->getFormValue('registerNumber', $registerNumber), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $registerNumber->setJsHint(_M('Informe o código do registro', $module));
        $validators[] = new MRequiredValidator('registerNumber', _M('Registro', $module), 'required');
        $hctRegisterId = new MHContainer('hctRegisterId', array( $registerNumberLabel, $registerNumber ));
        $hctRegisterId->setShowLabel(true);
        $fields[] = $hctRegisterId;

        //Field sheet
        $sheetLabel = new MText('sheetLabel', _M('Folha', $module) . ':');
        $sheetLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sheetLabel->setClass('m-caption m-caption-required');
        $sheet = new MTextField('sheet', $this->getFormValue('sheet', $sheet), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $sheet->setJsHint(_M('Informe o número da folha', $module));
        $validators[] = new MRequiredValidator('sheet', _M('Folha', $module), 'required');
        $hctSheet = new MHContainer('hctSheet', array( $sheetLabel, $sheet ));
        $hctSheet->setShowLabel(true);
        $fields[] = $hctSheet;

        //Field book
        $bookLabel = new MText('bookLabel', _M('Livro', $module) . ':');
        $bookLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $bookLabel->setClass('m-caption m-caption-required');
        $book = new MTextField('book', $this->getFormValue('book', $book), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $book->setJsHint(_M('Informe o número da folha', $module));
        $validators[] = new MRequiredValidator('book', _M('Livro', $module), 'required');
        $hctBook = new MHContainer('hctBook', array( $bookLabel, $book ));
        $hctBook->setShowLabel(true);
        $fields[] = $hctBook;

        //Ignore debits
        if ( $MIOLO->checkAccess('FrmDiplomaDocument', A_ADMIN, false, true) )
        {
            $fields[] = new MRadioButtonGroup('ignoreDebits', _M('Ignorar débitos financeiros',$modules), SAGU::listYesNo(), DB_FALSE, null, 'horizontal');
        }
        else
        {
            $fields[] = new SHiddenField('ignoreDebits', DB_FALSE);
        }

        //Field rad options file type
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo', $module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array( $radFileTypeLabel, $radFileType ));
        $hctFileType->setShowLabel(false);
        $fields[] = $hctFileType;

        //Field emission type
        $emissionDate = new MCalendarField('emissionDate', strlen($this->getFormValue('emissionDate')) > 0 ? $this->getFormValue('emissionDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data de emissão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão', $module));
        $emissionDate->setValidator(new MDATEDMYValidator('emissionDate', '', 'required'));
        $fields[] = $emissionDate;
        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();}

    /**
     * Event triggered when user chooses Search from the toolbar
     * */
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Dados do form
        $data->personId = MIOLO::_request('contractPersonId');
        $data->personName = MIOLO::_request('contractPersonName');
        $data->contractId = MIOLO::_request('contractId');
        $data->emissionDate = MIOLO::_request('emissionDate');
        $data->registerNumber = MIOLO::_request('registerNumber');
        $data->book = MIOLO::_request('book');
        $data->sheet = MIOLO::_request('sheet');
        $data->courseVersion = MIOLO::_request('contractCourseVersion');
        $data->fileType = MIOLO::_request('radFileType');
        $data->ignoreDebits = MIOLO::_request('ignoreDebits');
        //Permissão para gerar o relatório default true
        $havePermission = true;

        $msg = _M('O diploma não pode ser gerado pelo(s) seguinte(s) motivo(s)') . '.' . '<br /><br />';

        try
        {
            if ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') ||
                 ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'NO') &&
                   (strtoupper(SAGU::getParameter('BASIC', 'WARNING_IF_DEFAULTER')) == 'TRUE')) )
            {
                if ( $data->ignoreDebits == DB_FALSE )
                {
                    $busEnrollConfig = new BusinessAcademicBusEnrollConfig();
                    $business = new BusinessFinanceBusGeneralQueries();
                    $businessContract = new BusinessAcademicBusContract();

                    $debt = $business->getDefaulterDebt($data->contractId, false);
                    $debt = strlen($debt) > 0 ? $debt : 0;

                    //Verifica se o aluno possui débitos financeiros
                    if ( ($debt > 0) && ($enrollConfig->blockDebt == DB_TRUE) )
                    {
                        $message .= _M('O sistema detectou uma dívida com a instituição. Por favor, verifique com o setor financeiro.', $module) . '.' .  '<br />';
                       
                        $contract = $businessContract->getContract($data->contractId);
                        $enrollConfig = $busEnrollConfig->getCourseEnrollConfig($contract->courseId, $contract->courseVersion, $contract->turnId, $contract->unitId);
                        $havePermission = false;
                    }
                }
            }
            else
            {
                $message .= _M('O módulo financeiro não está instalado', $module) . '.' .  '<br />';
                $havePermission = false;
            }

            if ( $havePermission )
            {
                $businessPhysicalPerson = new BusinessBasicBusPhysicalPersonStudent();
                $businessCompany = new BusinessBasicBusCompany();
                $businessPeriod = new BusinessAcademicBusPeriod();
                $businessLegalPerson = new BusinessBasicBusLegalPerson();
                $businessCity = new BusinessBasicBusCity();
                $businessCountry = new BusinessBasicBusCountry();
                $businessDocument = new BusinessBasicBusDocument();
                $businessContract = new BusinessAcademicBusContract();
                $businessCourse = new BusinessAcademicBusCourse();
                $businessEducationArea = new BusinessAcademicBusEducationArea();
                $businessDiplomaDocument = new BusinessAcademicBusDiplomaDocument();
                $businessCourseAbility = new BusinessAcademicBusCourseAbility();

                //Pessoa
                $physicalPerson = $businessPhysicalPerson->getPhysicalPersonStudent($data->personId);

                //Instituição
                $company = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
                $legalPerson = $businessLegalPerson->getLegalPerson($company->personId);

                //Pai
                if( strlen($physicalPerson->fatherId) > 0 )
                {
                    $fatherPerson = $businessPhysicalPerson->getPhysicalPerson($physicalPerson->fatherId);
                }
                else if ( strlen($physicalPerson->fatherName) > 0 )
                {
                    $fatherPerson = new stdClass();
                    $fatherPerson->name = $physicalPerson->fatherName;
                }
                else
                {
                    $message .= _M('Este aluno não possui pai cadastrado', $module) . '.' . '<br />';
                }

                //Mae
                if( strlen($physicalPerson->motherId)>0 )
                {
                    $motherPerson = $businessPhysicalPerson->getPhysicalPerson($physicalPerson->motherId);
                }
                else if ( strlen($physicalPerson->motherName) > 0 )
                {
                    $motherPerson = new stdClass();
                    $motherPerson->name = $physicalPerson->motherName;
                }
                else
                {
                    $message .= _M('Este aluno não possui mãe cadastrada', $module) . '.' . '<br />';
                }

                //Cidade de origem
                if ( strlen($physicalPerson->cityIdBirth)>0 )
                {
                    $cityBirth = $businessCity->getCity($physicalPerson->cityIdBirth);
                }
                else
                {
                    $message .= _M('Este aluno não possui cidade de origem cadastrada', $module) . '.' . '<br />';
                }

                //Cidade
                if ( strlen($legalPerson->cityId)>0 )
                {
                    $companyTown = $businessCity->getCity($legalPerson->cityId);
                }
                else
                {
                    $message .= _M('Este aluno não possui cidade cadastrada', $module) . '.' . '<br />';
                }

                //Pais
                if ( strlen($cityBirth->countryId)>0 )
                {
                    $countryNationality = $businessCountry->getCountry($cityBirth->countryId);
                }
                else
                {
                    $message .= _M('Este aluno não possui país cadastrado', $module) . '.' . '<br />';
                }

                $document = $businessDocument->getDocument($data->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));

                if ( strlen($document->cityId) > 0 )
                {
                    $cityDocument = $businessCity->getCity($document->cityId);
                }

                $contract = $businessContract->getContract($data->contractId);
                $course = $businessCourse->getCourse($contract->courseId);

                $period = $businessPeriod->getPeriod($contract->periodId);

                if ( strlen($course->educationAreaId) > 0 )
                {
                    $educationArea = $businessEducationArea->getEducationArea($course->educationAreaId);
                }

                $filters1->courseId = $contract->courseId;
                $courseAbility = $businessCourseAbility->searchCourseAbility($filters1);

                $filters2->courseId = $contract->courseId;
                $filters2->courseVersion = $contract->courseVersion;
                $filters2->unitId = $contract->unitId;
                $filters2->turnId = $contract->turnId;
                $curricularComponentLessonsHours = $businessDiplomaDocument->getCurricularComponentLessonsHours($filters2);

                if ( strlen($contract->diplomaDate) > 0 )
                {
                    $businessDiploma = new BusinessAcademicBusDiploma();

                    $getDiploma = $businessDiploma->getDiploma($data->registerNumber);

                    $okDiploma = true;
                    if ( !count($getDiploma->registerNumber) > 0 )
                    {
                        $okDiploma = $businessDiploma->insertDiploma($data);
                    }
                    if( !$okDiploma )
                    {
                        $message .= _M('Erro inserindo dados do diploma', $module) . '.' . '<br />';
                    }
                }
                else
                {
                    //Data de diploma nula.
                    $message .= _M('Este aluno não possui data de diploma', $module) . '.' . '<br />';
                }
            }

            //Validação dos dados
            if( strlen($message)>0 )
            {
                $messages .= $msg;
                $messages .= $message;
                throw new Exception($messages);
            }

            /*
             * Gera relatório
             */

            //Agata API
            $MIOLO->uses('/core/AgataAPI.class');
            $MIOLO->uses('classes/sagu.class', 'basic');

            $api = new AgataAPI;

            //Diploma curso técnico
            if ( $course->formationLevelId == SAGU::getParameter('ACADEMIC', 'TECHNICIAN_FORMATION_LEVEL') ) //Curso técnico
            {
                $textAbility = '';

                if ( is_array($courseAbility) )
                {

                    $textAbility .= '\</text:span\>';
                    foreach ( $courseAbility as $ability )
                    {
                        $textAbility .= $ability[4] . '\</text:p\>\<text:p text:style-name="Default"\>';
                    }
                    $textAbility .= '\<text:span\>';
                }

                $textCurricularData = '';

                if ( is_array($curricularComponentLessonsHours) )
                {
                    $textCurricularData .= '\</text:span\>';

                    foreach ( $curricularComponentLessonsHours as $curricularData )
                    {
                        $textCurricularData .= $curricularData[0] . '    ' . $curricularData[1] . '\</text:p\>\<text:p text:style-name="Default"\>';
                    }

                    $textCurricularData .= '\<text:span\>';
                }

                if ( count($data) > 0 )
                {
                    $api->setParameter('$companyFakeName', $company->companyTypeDescription . ' ' . $legalPerson->fakeName);
                    $api->setParameter('$companyName', $company->name);
                    $api->setParameter('$companyAcronym', $company->acronym);
                    $api->setParameter('$companyCity', ucwords(strtolower($companyTown->name)));
                    $api->setParameter('$companyState', ucwords(strtolower($companyTown->stateName)));
                    $api->setParameter('$companyAbbreviationState', $companyTown->stateId);
                    $api->setParameter('$companyCountry', ucwords(strtolower($companyTown->countryName)));
                    $api->setParameter('$personName', ucwords(strtolower($data->personName)));
                    $api->setParameter('$fatherName', $fatherPerson->name);
                    $api->setParameter('$motherName', $motherPerson->name);
                    $api->setParameter('$cityBirth', $cityBirth->name);
                    $api->setParameter('$stateBirth', $cityBirth->stateId);
                    $api->setParameter('$nationality', strtolower($countryNationality->nationality));
                    $api->setParameter('$birthDate', SAGU::getDateByExtense($physicalPerson->dateBirth));
                    $api->setParameter('$dateDiploma', SAGU::getDateByExtense($contract->diplomaDate));

                    $api->setParameter('$conclusionDate', SAGU::getDateByExtense($contract->conclusionDate));

                    $yearConclusion = substr($contract->diplomaDate, 5, 4);

                    $api->setParameter('$yearConclusion', $yearConclusion);
                    $api->setParameter('$documentId', $document->content);
                    $api->setParameter('$organ', $document->organ);
                    $api->setParameter('$courseName', $course->name);
                    $api->setParameter('$courseArea', $educationArea->description);
                    $api->setParameter('$emissionDate', SAGU::getDateByExtense($data->emissionDate));

                    $api->setParameter('$bookNumber', $data->book);

                    $api->setParameter('$textAbility', $textAbility);
                    $api->setParameter('$curricularData', $textCurricularData);
                    $api->setParameter('$externalCourse', $physicalPerson->externalCourseHsName);
                    $api->setParameter('$conclusionYear', $physicalPerson->yearHs);
                    $api->setParameter('$conclusionSchool', $physicalPerson->institutionHsName);
                    $api->setParameter('$citySchool', $physicalPerson->cityHsName);
                    $api->setParameter('$stateIdHs', $physicalPerson->stateIdHs);

                    $api->setLanguage($MIOLO->getConf('i18n.language'));
                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');

                    $dataAgata[0][0] = 'A';

                    $api->setDataArray($dataAgata);

                    $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/diplomaTechnican.sxw'));


                    if ( $ok && $data->fileType == 'pdf' )
                    {
                        $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.pdf');
                        $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');
                    }

                    if ( !$ok )
                    {
                        $this->addError(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                    }
                    else
                    {
                        $api->fileDialog();
                    }
                }
            }

            //Diploma curso de graduação
            elseif ( $course->formationLevelId == SAGU::getParameter('ACADEMIC', 'COURSE_FORMATIONLEVELID_GRADUATE') )
            {
                if ( count($data) > 0 )
                {
                    $api->setParameter('$companyFakeName', $company->companyTypeDescription . ' ' . $legalPerson->fakeName);
                    $api->setParameter('$companyCity', ucwords(strtolower($companyTown->name)));
                    $api->setParameter('$companyState', ucwords(strtolower($companyTown->stateName)));
                    $api->setParameter('$companyCountry', ucwords(strtolower($companyTown->countryName)));
                    $api->setParameter('$courseName', $course->name);
                    $api->setParameter('$dateDiploma', SAGU::getDateByExtense($contract->diplomaDate));
                    $api->setParameter('$personName', ucwords(strtolower($data->personName)));

                    if ( strlen($contract->conclusionDate) > 0 )
                    {
                        $api->setParameter('$conclusionDate', SAGU::getDateByExtense($contract->conclusionDate));
                    }
                    else
                    {
                        $api->setParameter('$conclusionDate', _M('Indefinido', $module));
                    }

                    $api->setParameter('$nationality', strtolower($countryNationality->nationality));
                    $api->setParameter('$documentId', $document->content);
                    $api->setParameter('$organ', $document->organ);
                    $api->setParameter('$stateOrgan', $cityDocument->stateId);
                    $api->setParameter('$dateBirth', SAGU::getDateByExtense($physicalPerson->dateBirth));
                    $api->setParameter('$cityBirth', ucwords(strtolower($cityBirth->name)));
                    $api->setParameter('$stateName', ucwords(strtolower($cityBirth->stateName)));
                    $api->setParameter('$recognitionDocumentNumber', $course->recognitionDocumentNumber);
                    $api->setParameter('$recognitionDocumentNumber', $course->recognitionDocumentNumber);

                    $api->setParameter('$registerNumber', $data->book);
                    $api->setParameter('$bookNumber', $data->book);
                    $api->setParameter('$sheet', $data->sheet);
                    $api->setParameter('$courseGrau', $course->degree);
                    $api->setParameter('$description', strtolower($period->description));

                    $api->setLanguage($MIOLO->getConf('i18n.language'));
                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');

                    $dataAgata[0][0] = 'A';

                    $api->setDataArray($dataAgata);

                    $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/diplomaGraduation.sxw'));

                    if ( $ok && $data->fileType == 'pdf' )
                    {
                        $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.pdf');
                        $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');
                    }

                    if ( !$ok )
                    {
                        $this->addError(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                    }
                    else
                    {
                        $api->fileDialog();
                    }
                }
            }
            else
            {
                throw new Exception(_M('Não existe modelo implementado para este grau de formação',$module).'.');
            }
        }
        catch ( Exception $e )
        {
            $this->AddAlert($e->getMessage());
        }
    }
}
?>