<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Class form
 *
 * @author Flaudizio B. S. Filho [flaudizio@yahoo.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 19/12/2006
 *
 **/

/**
 * Form to manipulate a class
 **/
class FrmClass extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcdClass(), array('classId'), 'BusClass');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $classId = MIOLO::_REQUEST('classId');
            
            $fields[] = new MTextLabel('classId', $classId, _M('Código',$module));
            $fields[] = new MHiddenField('classId', $classId);

            $data = $this->busObject->getClass($classId);
        }
        else
        {
            //Field class code
            $classLabel = new MText('classLabel', _M('Código', $module) . ':');
            $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $classLabel->setClass('m-caption m-caption-required');
            $classId      = new MTextField('classId', $this->getFormValue('classId', $data->classId),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validators[] = new MRequiredValidator('classId', _M('Código da turma', $module), 'required');
            $classId->setJsHint(_M('Informe o código da turma',$module));
            $hctClassId = new MHContainer('hctClassId', array($classLabel, $classId));
            $fields[]   = $hctClassId;

            $this->page->onLoad('document.' . $this->name . '.classId.focus();');

        }

        //Field class name
        $classLabelName = new MText('classLabelName', _M('Turma',$module) . ':');
        $classLabelName->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classLabelName->setClass('m-caption m-caption-required');
        $className_   = new MTextField('className_', $this->getFormValue('className_', $data->className_),'', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $validators[] = new MRequiredValidator('className_', _M('Nome da turma', $module), 'required');
        $className_->setJsHint(_M('Informe o nome da turma', $module));
        $hctClassName = new MHContainer('hctClassName', array($classLabelName, $className_));
        $fields[]     = $hctClassName;

        //Field vacant
        $classLabelVacant = new MText('classLabelVacant', _M('Vagas',$module) . ':');
        $classLabelVacant->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classLabelVacant->setClass('m-caption m-caption-required');
        $vacant       = new MTextField('vacant', $this->getFormValue('vacant', $data->vacant), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MRequiredValidator('vacant', _M('Vagas', $module), 'required');
        $vacant->setJsHint(_M('Informe o número de vagas', $module));
        $hctClassVacant = new MHContainer('hctClassVacant', array($classLabelVacant, $vacant));
        $fields[]   = $hctClassVacant;

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        $lookupFilters = array('periodId' => 'periodId');
        
        if ( $this->_function == self::FUNCTION_INSERT )
        {        
            //Field course
            $courseLabel   = new MText('courseLabel', _M('Curso', $module) . ':');
            $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $courseId     = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseVersion, courseName', $module, 'CourseVersion', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
            $courseId->setJsHint(_M('Informe o código do curso', $module));
            $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseVersion->setJsHint(_M('Informe a versão do curso', $module));
            $courseName    = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Nome do curso', $module));
            $hctCourse     = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
            $hctCourse->setShowLabel(true);
            $fields[]      = $hctCourse;
            //end course

            $lookupFilters += array('courseId' => 'courseId', 'courseVersion' => 'courseVersion');
        }

        //Field initial learning period
        $initialLearningPeriodLabel = new MText('initialLearningPeriodLabel', _M('Período letivo inicial',$module).':');
        $initialLearningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $initialLearningPeriodLabel->setClass('m-caption m-caption-required');
        $initialLearningPeriodId = new MLookupTextField('initialLearningPeriodId', $this->getFormValue('initialLearningPeriodId', $data->initialLearningPeriodId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,courseId,courseVersion,limbo,limbo,learningPeriodDescription,limbo,limbo,limbo,limbo,limbo,limbo,limbo,limbo,limbo,courseName', $module, 'LearningPeriod', null, $lookupFilters, true);
        $validators[] = new MRequiredValidator('initialLearningPeriodId', _M('Período letivo inicial', $module), 'required');
        $initialLearningPeriodId->setJsHint(_M('Informe o período letivo inicial',$module));
        $initialLearningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('initialLearningPeriodDescription', $data->initialLearningPeriodDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $initialLearningPeriodDescription->setJsHint(_M('Descrição do período letivo inicial',$module));
        $initialLearningPeriodDescription->setReadOnly(true);
        $hctinitialLearningPeriod = new MHContainer('hctlearningPeriod', array($initialLearningPeriodLabel, $initialLearningPeriodId, $initialLearningPeriodDescription));
        $hctinitialLearningPeriod->setShowLabel(true);
        $fields[]  = $hctinitialLearningPeriod;

        parent::defineFields($fields, $validators, $data);
    }
    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->classId = strtoupper($data->classId);
        
        return $data;
    }
}
?>
