<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Bruno E. Fuhr [bruno@solis.com.br]
 *
 * @version $Id$
 *
 * @since
 * Class created on 24/04/2014
 *
 **/

class FrmUnificarDisciplinaOferecida extends SForm
{    
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/ui/controls/msubdetail.class');
        
        parent::__construct(_M('Unificar disciplina oferecida'), null, null);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);       
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        // Se for primeiro acesso ao form, limpa a subdetail.
        if ( !($this->page->isPostBack()) && 
             !($_REQUEST['__EVENTTARGETVALUE'] == 'btnConfirmar:click') &&
             !(strlen($_REQUEST['Voltar']) > 0 ) )
        {
            foreach ( $_SESSION['MSubDetail'] as $key => $item )
            {
                unset($_SESSION['MSubDetail'][$key]);
            }
        }
        
        $fields[] = new MSeparator();
        
        $disciplinaDestinoLabel = new MText('disciplinaDestinoLabelS', _M('Disciplina oferecida de destino:', $module));
        $disciplinaDestinoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $disciplinaDestino = new MLookupTextField('disciplinaDestino', $this->getFormValue('disciplinaDestino'), _M('Disciplina oferecida de destino',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'nomeDisciplinaDestino', $module, 'GroupWithPrefix', null, array('groupId' => 'disciplinaDestino'), !$this->page->isPostBack());
        $disciplinaDestino->setJsHint(_M('Informe o código da disciplina que será a de destino', $module));                
        $nomeDisciplinaDestino = new MTextField('nomeDisciplinaDestino', $this->getFormValue('nomeDisciplinaDestino'), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $nomeDisciplinaDestino->setJsHint(_M('Nome da disciplina', $module));
        $nomeDisciplinaDestino->setReadOnly(true);
        $hctdisciplinaDestino = new MHContainer('hctdisciplinaDestino', array($disciplinaDestinoLabel, $disciplinaDestino, $nomeDisciplinaDestino));
        $hctdisciplinaDestino->setShowLabel(false);
        
        $fields[] = $hctdisciplinaDestino;
        $fields[] = new MSeparator();
        
        $fields[] = $this->obterSubdetail();
        
        $fields[] = new MSeparator();

        $button = new MButton('btnConfirmar', _M('Unificar'));
        $divButton = new Mdiv('', $button);
        $fields[] = $divButton;
        
        //Validadores
        $validators[] = new MRequiredValidator('disciplinaDestino', _M('Disciplina oferecida de destino'));
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
    }
    
    private function obterSubdetail()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $sdFields = array();
        $sdFields[] = new MSeparator();
        $sdFields[] = MMessage::getStaticMessage('msgAlerta', _M('Atenção! Os registros de notas e frequências das matrículas não serão migrados.'), MMessage::TYPE_WARNING);
        
        $cols[] = new MGridColumn(_M('Cód. da oferecida', $module), 'center', true, '', true, 'disciplinaOrigem');
        $cols[] = new MGridColumn(_M('Nome da disciplina', $module), 'left', true, '', true, 'nomeDisciplinaOrigem');
        
        $disciplinaOrigemLabel = new MText('disciplinaOrigemLabelS', _M('Disciplina oferecida de origem:', $module));
        $disciplinaOrigemLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $disciplinaOrigem = new MLookupTextField('disciplinaOrigem', $this->getFormValue('disciplinaOrigem'), _M('Disciplina oferecida de origem',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'nomeDisciplinaOrigem', $module, 'GroupWithPrefix', null, array('groupId' => 'disciplinaOrigem'), !$this->page->isPostBack());
        $disciplinaOrigem->setJsHint(_M('Informe o código da disciplina que será a de origem', $module));                
        $nomeDisciplinaOrigem = new MTextField('nomeDisciplinaOrigem', $this->getFormValue('nomeDisciplinaOrigem'), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $nomeDisciplinaOrigem->setJsHint(_M('Nome da disciplina', $module));
        $nomeDisciplinaOrigem->setReadOnly(true);
        $hctdisciplinaOrigem = new MHContainer('hctdisciplinaOrigem', array($disciplinaOrigemLabel, $disciplinaOrigem, $nomeDisciplinaOrigem));
        $hctdisciplinaOrigem->setShowLabel(false);
        
        $sdFields[] = $hctdisciplinaOrigem;        
        
        $subDetail = new MSubDetail('sdDisciplinasOrigem', _M('Disciplinas oferecidas de origem'), $cols, $sdFields, array('remove'));
        
        $svalidators[] = new MSubDetailUniqueValidator('disciplinaOrigem', _M('Disciplinas oferecidas de origem', $module));
        $svalidators[] = new MRequiredValidator('disciplinaOrigem', _M('Disciplinas oferecidas de origem', $module));
        $svalidators[] = new MIntegerValidator('disciplinaOrigem', _M('Disciplinas oferecidas de origem', $module));
        $svalidators[] = new MRequiredValidator('nomeDisciplinaOrigem', _M('Nome da disciplina', $module));
        $subDetail->setValidators($svalidators);
        
        return $subDetail;
    }

    /**
     * Ação de unificação da disciplina.
     * 
     * @param sdtClass $args
     * @return boolean
     */
    public function btnConfirmar_click($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $busEnroll = new BusinessAcademicBusEnroll();
        $busFrequence = new BusinessAcademicBusFrequenceEnroll();
        $busDegree = new BusinessAcademicBusDegree();
        
        $data = $this->getData();
        $temFrequencias = FALSE;
        $temNotas = FALSE;
        
        $disciplinaDestino = $data->disciplinaDestino;
        
        $countDisciplinasOrigem = 0;
        foreach( $data->sdDisciplinasOrigem as $sdDisciplinaOrigem )
        {
            if ( !($sdDisciplinaOrigem->removeData) )
            {
                $countDisciplinasOrigem++;
            }
        }
        
        if ( $countDisciplinasOrigem > 0 )
        {
            $matriculasDeOrigem = array();        
            foreach ( $data->sdDisciplinasOrigem as $sdDisciplinaOrigem )
            {
                if ( !($sdDisciplinaOrigem->removeData) )
                {
                    $disciplinaOrigem = $sdDisciplinaOrigem->disciplinaOrigem;

                    // Obter as matriculas desta disciplina.
                    $filters = new stdClass();
                    $filters->groupId = $disciplinaOrigem;

                    $enrolls = $busEnroll->searchEnroll($filters);
                    foreach ( $enrolls as $enroll )
                    {
                        $objEnroll = new stdClass();
                        $objEnroll->disciplinaDeDestino = $disciplinaDestino;
                        $objEnroll->enrollId = $enroll[0];
                        $objEnroll->contractId = $enroll[1];
                        $objEnroll->groupId = $enroll[2];
                        $objEnroll->curriculumId = $enroll[3];
                        $objEnroll->dateEnroll = $enroll[4];
                        $objEnroll->hourEnroll = $enroll[5];
                        $objEnroll->dateCancellation = $enroll[6];
                        $objEnroll->hourCancellation = $enroll[7];
                        $objEnroll->reasonCancellationId = $enroll[8];
                        $objEnroll->note = $enroll[9];
                        $objEnroll->examNote = $enroll[10];
                        $objEnroll->finalNote = $enroll[11];
                        $objEnroll->concept = $enroll[12];
                        $objEnroll->textEvaluation = $enroll[13];
                        $objEnroll->frequency = $enroll[14];
                        $objEnroll->obsExploitation = $enroll[15];
                        $objEnroll->exploitationInstitutionId = $enroll[16];
                        $objEnroll->numberHourExploitation = $enroll[17];
                        $objEnroll->creditsExploitation = $enroll[18];
                        $objEnroll->isShowDocumentEndCourse = $enroll[19];
                        $objEnroll->statusId = $enroll[20];
                        $objEnroll->frequencyAlertEmail = $enroll[22];
                        $objEnroll->isInternet = $enroll[23];
                        $objEnroll->ip = $enroll[24];
                        $objEnroll->isConfirm = $enroll[25];
                        $objEnroll->isSetFree = $enroll[26];
                        $objEnroll->complement = $enroll[27];
                        $objEnroll->subclassId = $enroll[34];
                        $objEnroll->finalExaminationTheme = $enroll[35];
                        $objEnroll->groupIdOrigem = $sdDisciplinaOrigem->disciplinaOrigem;

                        $matriculasDeOrigem[] = $objEnroll;
                    }
                }
            }

            foreach ( $matriculasDeOrigem as $matriculaDeOrigem )
            {
                $notas = $busDegree->searchEnrollDegree($matriculaDeOrigem->enrollId);
                if ( !$temNotas )
                {
                    $temNotas = count($notas) > 0;
                }

                $filters = new stdClass();
                $filters->enrollId = $matriculaDeOrigem->enrollId;
                $frequencias = $busFrequence->searchFrequenceEnroll($filters);
                if ( !$temFrequencias )
                {
                    $temFrequencias = count($frequencias) > 0;
                }
            }

            if ( $temFrequencias || $temNotas )
            {
                $gotoYes = $MIOLO->GetActionURL($module, 'main:process:unificarDisciplinaOferecida');
                $gotoNo = $MIOLO->GetActionURL($module, 'main:process:unificarDisciplinaOferecida');
                
                $MIOLO->session->setValue('matriculasDeOrigem', $matriculasDeOrigem);
                
                $MIOLO->question(_M('As disciplinas oferecidas de origem possuem registros de notas e/ou frequências.<br>
                    Estes registros não serão migrados para a disciplina de destino.<br>
                    Você confirma a unificação destas disciplinas?
                '), $gotoYes, $gotoNo, 'unificarDisciplinas');
            }
            else
            {
                $this->unificarDisciplinas($matriculasDeOrigem);
            }
        }
        else
        {
            $this->AddInfo(_M('Não foi informada nenhuma disciplina de origem.'));
        }
    }
    
    public function unificarDisciplinas($matriculasDeOrigem)
    {
        $MIOLO = MIOLO::getInstance();
        
        // em caso de vir da confirmação do usuário
        if ( !$matriculasDeOrigem )
        {           
            $matriculasDeOrigem = $MIOLO->session->getValue('matriculasDeOrigem');
        }
        
        $busEnroll = new BusinessAcademicBusEnroll();
        $busGroup = new BusinessAcademicBusGroup();
        
        try
        {
            SDatabase::beginTransaction();
            
            foreach ( $matriculasDeOrigem as $matriculaDeOrigem )
            {     
                $newEnroll = $matriculaDeOrigem;
                $newEnroll->groupId = $matriculaDeOrigem->disciplinaDeDestino;
                
                // Inserir nova matrícula
                $ok = $busEnroll->insertEnroll($newEnroll);
                                
                if ( $ok )
                {
                    // Cancelar a matrícula antiga.
                    $busEnroll->cancelEnroll($matriculaDeOrigem->enrollId, SAGU::getParameter('ACADEMIC', 'MOTIVO_CANCELAMENTO_MATRICULA_UNIFICACAO_DISCIPLINAS_OFERECIDAS'));
                    
                    // Cancelar disciplina.
                    $busGroup->cancelGroup($matriculaDeOrigem->groupIdOrigem);
                }
            }            
            
            SDatabase::commit();
            
            $this->AddInfo(_M('Disciplinas unificadas com sucesso.'));
        }
        catch(Exception $e)
        {
            SDatabase::rollback();
            $this->AddError($e->getMessage());
        }
    }
}
?>
