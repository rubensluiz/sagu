<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * PupilListing form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 14/03/2006
 *
 **/

/**
 * Form to manipulate a professor taught classes
 **/
class FrmProfessorTaughtClasses extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct( null, array('scheduleProfessorId'), 'BusScheduleProfessorContent', _M('Aulas ministradas pelo professor', $module) );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request( 'function' );
        $event = MIOLO::_request( 'event' );
        
        // Disable buttons which won't be used
        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnSave');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->disableButton('tbBtnDelete');
                
        //Field Professor
        $professorLabel = new MText('professorLabel', _M('Professor',$module).':');
        $professorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $professorLabel->setClass('m-caption m-caption-required');
        $professorId = new MLookupTextField('scheduleProfessorId', $this->getFormValue('scheduleProfessorId', $data->scheduleProfessorId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorId->setJsHint(_M('Informe o código do professor',$module));
        $validators[] = new MIntegerValidator('scheduleProfessorId', _M('Professor',$module), 'required');
        $professorName = new MTextField('professorName', $this->getFormValue('professorName', $data->professorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $professorName->setReadOnly(true);
        $professorName->setJsHint(_M('Nome do professor',$module));
        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
        $hctProfessor->setShowLabel(true);
        $fields[]  = $hctProfessor;

        $fields[] = new MCalendarField('beginDate', null, _M('Data de início', $module));
        $validators[] = new MRequiredValidator('beginDate', _M('Data de início', $module));
        
        $fields[] = new MCalendarField('endDate', null, _M('Data de fim', $module));
        $validators[] = new MRequiredValidator('endDate', _M('Data de fim', $module));
        
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        $fields[] = new MSeparator();
        
        $fields[] = new MButton('btnGenerate', _M('Gerar', $module));
        
        parent::defineFields($fields, $validators, $data);
    }
    
    /**
     * Event triggered when user click Generate
     **/
     public function btnGenerate_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $professorId = MIOLO::_REQUEST('scheduleProfessorId');
        $beginDate = MIOLO::_REQUEST('beginDate');
        $endDate = MIOLO::_REQUEST('endDate');

        $business = new BusinessAcademicBusScheduleProfessorContent();
        $filters = new stdClass();
        $filters->professorId = $professorId;
        $data = $business->searchScheduleProfessorContent($filters);
        
        if( count($data) > 0 )
        {
            //Parameters of the report        
            $parameters['professorId'] = (int) $professorId;
            $parameters['beginDate'] = $beginDate;
            $parameters['endDate'] = $endDate;

            $options['reportName'] = 'professorClassesWithinPeriod';
            $options['parameters'] = $parameters;
            $options['fileType'] = MIOLO::_REQUEST('reportFormat');

            $report = new SReport( $options );
            if ( !$report->generate() )
            {
                $this->addError("Dados nao encontrados. Professor nao registrou aulas.");
            }            
        }
        else
        {
            $this->addError(_M("Dados nao encontrados. Professor nao registrou aulas.", $module));
        }
        
        
        
    }
}

?>
