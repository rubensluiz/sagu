<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/12/2005
 *
 **/

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmScheduleShockUnblock extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        if ( MIOLO::_request('function') == 'insert' )
        {
            $title = _M('Inserir', $module);
        }
        else
        {
            $title = _M('Atualizar', $module);
        }
        
        parent::__construct( new acdCurricularComponentUnblock(), array('curricularComponentUnblockId'), 'BusScheduleShockUnblock', $title);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( $function == 'insert' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        }
        elseif ( $function == 'delete' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }

        if ( in_array($function, array('update', 'delete')) )
        {
            $curricularComponentUnblockId = MIOLO::_request('curricularComponentUnblockId');

            $business               = $this->busObject;
            $businessLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $data     = $business->getScheduleShockUnblock($curricularComponentUnblockId);

            $busCurr  = new BusinessAcademicBusCurriculum();
            $currData = $busCurr->getCurriculum($data->curriculumId);

            $data->curricularComponentId = $currData->curricularComponentId;
            $data->curricularComponentVersion = $currData->curricularComponentVersion;

            $getLearningPeriod = $businessLearningPeriod->getLearningPeriod($data->learningPeriodId);
            $data->periodId    = $getLearningPeriod->periodId;

            $fields[]  = new MHiddenField('curricularComponentUnblockId', $curricularComponentUnblockId);
            $fields[]  = new MTextLabel('curricularComponentUnblockId', $data->curricularComponentUnblockId, _M('Código', $module));
        }
        
        if ( strlen($data->periodId) > 0 )
        {
            $periodIdValue = $data->periodId;
        }
        else
        {
            strlen($this->getFormValue('periodId', $data->periodId)) > 0 ? $periodIdValue = $this->getFormValue('periodId', $data->periodId) : $periodIdValue = SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID');
        }

        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', $periodIdValue, _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        
        $contractData = is_object($data) ? $data : $this->getTypesData();
        
        //Field lookup contract
        $fields[] = new MHiddenField('limbo', '');
        $MIOLO->getClass( 'academic', 'lookupContract' );
        $fields[] = new SLookupContract('contractId', $contractData);
        
        $validators[] = new MIntegerValidator('contractPersonId', _M('Pessoa', $module));
        $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');
        
        //Field learning period
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Período letivo', $module) . ':');
        $learningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));      
        $learningPeriodLabelS->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$data->learningPeriodId), _M('Código do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('periodId', null, null, null, null, 'learningPeriod'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo',$module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo', $module), 'required');
        $learningPeriod = new MTextField('learningPeriod', $this->getFormValue('learningPeriod',$data->learningPeriod), _M('Período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriod->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriod->setReadOnly(true);
        $hctlearningPeriod = new MHContainer('hctlearningPeriod', array($learningPeriodLabelS, $learningPeriodId, $learningPeriod));
        $hctlearningPeriod->setShowLabel(false);
        $fields[]    = $hctlearningPeriod;
        
        //Curricular component
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Disciplina',$module) . ':');
        $curricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLabel->setClass('m-caption m-caption-required');
        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentVersion,curricularComponentName', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'contractCourseId', 'curricularComponentId' => 'curricularComponentId'), true);
        $curricularComponentId->setJsHint(_M('Informe o código da disciplina', $module));
        $validators[] = new MRequiredValidator('curricularComponentId', _M('Disciplina',$module));
        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersion->setJsHint(_M('Informe a versão da disciplina'));
        $validators[] = new MIntegerValidator('curricularComponentVersion', _M('Versão da disciplina', $module));
        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentName->setJsHint(_M('Nome da disciplina', $module));
        $curricularComponentName->setReadOnly(true);
        $hctCurricularComponent = new MHContainer('hctCurricularComponent', array($curricularComponentLabel, $curricularComponentId, $curricularComponentVersion, $curricularComponentName));
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Última modificação', $module));
        }

        $fields[] = new Separator('');
        
        parent::defineFields($fields, $validators, $data);
    }


    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data   = $this->getTypesData();
        
        $busCurriculum = new BusinessAcademicBusCurriculum();
        $busGroup      = new BusinessAcademicBusGroup();
        $busEnroll     = new BusinessAcademicBusEnroll();

        $filtersCurriculum = new stdClass();
        $filtersCurriculum->curricularComponentId = $this->getFormValue('curricularComponentId',$data->curricularComponentId);
        $filtersCurriculum->curricularComponentVersion = $this->getFormValue('curricularComponentVersion',$data->curricularComponentVersion);
        $filtersCurriculum->courseId = $this->getFormValue('contractCourseId', $data->contractCourseId);
        $filtersCurriculum->courseVersion = $this->getFormValue('contractCourseVersion', $data->contractCourseVersion);
        $filtersCurriculum->unitId = $this->getFormValue('contractUnitId', $data->contractUnitId);
        $filtersCurriculum->turnId = $this->getFormValue('contractTurnId', $data->contractTurnId);

        $curriculumData = $busCurriculum->searchCurriculum($filtersCurriculum);
        
        $hasErrors = false;
        
        // Caso nao encontre, faz outra tentativa, removendo o filtro courseId e courseVersion.
        // Isto foi feito para resolver um problema de nao estar permitindo fazer desbloqueio para disciplinas fora do curriculo.
        if ( strlen( $curriculumData[0][0] ) <= 0 )
        {
            // limpa filtros
            $filtersCurriculum->courseId = null;
            $filtersCurriculum->courseVersion = null;
            
            $curriculumData = $busCurriculum->searchCurriculum($filtersCurriculum);
        }
        
        if ( count($curriculumData) > 0  && strlen( $curriculumData[0][0] ) > 0 )
        {
            $data->curriculumId = $curriculumData[0][0];
        
            // verificar se a disciplina já foi cursada pelo aluno informado
            if( strlen( $busEnroll->getCoursedEnrollId($curriculumData[0][0], $data->contractId) ) > 0 )
            {
                $this->addError(_M('A disciplina @1 já foi cursada pelo aluno @2.', $module, $data->curricularComponentId . ' - ' . $data->curricularComponentName, $data->personId . ' - ' .$data->personName));
            }
            
            // verificar se já existe um desbloqueio para esta disciplina, periodo letivo e contrato
            $business = $this->busObject;

            $filter1->contractId       = $data->contractId;
            $filter1->learningPeriodId = $data->learningPeriodId;
            $filter1->curriculumId     = $data->curriculumId;
            
            $searchScheduleShockUnblock = $business->searchScheduleShockUnblock($filter1);
            
            if ( ( count($searchScheduleShockUnblock) > 0 && $function == 'insert' )
                 || ($searchScheduleShockUnblock[0][0] != $data->curricularComponentUnblockId && count($searchScheduleShockUnblock) > 0 ) )
            {
                $this->addError(_M('Já existe desbloqueio para este contrato, período letivo e disciplina', $module) . '.');
            }
            
        }
        else
        {
            $this->addError(_M('Não existe um currículo para este curso e esta disciplina', $module).'.');
        }
        
        if ( ! $this->hasErrors() )
        {
            foreach ( $data as $key1 => $value1 )
            {
                $opts["$key1"] = $value1;
            }
            
            $opts['function'] = $function;
            $opts['event']    = 'tbBtnSave_confirm';
    
            $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
    
            unset($opts['event']);
    
            $goto    = SAGU::getStackBackUrl();
            $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
    
            $msg = _M('Você tem certeza que quer inserir desbloqueio por choque de horário para este aluno, este período letivo e esta disciplina', $module) . '?' ;
    
            $msg .= '<br><br>' . $data->personName . ' - ' . $data->learningPeriodDescription . '<br><br>' . _M('Disciplina', $module). ': ' . $data->curricularComponentName;
    
    
            $caption = _M('Questão',$module);
            $MIOLO->question($msg, $gotoYes, $gotoNo);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_confirm($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        
        try
        {        
            $business = $this->busObject;
    
            $opts = array('curricularComponentUnblockIdS'=>$data->curricularComponentUnblockId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                
            if ( $function == 'update' )
            {
                $business->updateScheduleShockUnblock($data);
                
                $MIOLO->information( SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $goto);                
            }
            else
            {
                $business->insertScheduleShockUnblock($data);
                
                $opts    = array('event'=>'tbBtnNew_click',
                                'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                
                $MIOLO->question( SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED'), $gotoYes, $goto);                
            }

        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }        
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $var != 'description' )
            {
                $data->$var = $this->getFormValue($var, $this->$var->value);
            }
        }

        $data->personId                     = $this->getFormValue('contractPersonId', $this->contractPersonId->value);
        $data->personName                = $this->getFormValue('contractPersonName', $this->contractPersonName->value);
        $data->learningPeriodDescription = $this->learningPeriod->value;
        $data->curricularComponentName   = $this->curricularComponentName->value;
        
        return $data;
    }

}

?>
