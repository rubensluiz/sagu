<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for acdCurriculumConcurrence table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/09/2005
 */

/**
 * Form to search the acdCurriculumConcurrence table
 */
class FrmCurriculumConcurrenceSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);
        
        parent::__construct(_M('Titulo', $module), new acdCurriculumConcurrence(), array('curriculumOutId', 'curriculumInId'), 'BusCurriculumConcurrence');
        // titulo do form, instancia do type, primary keys, business
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $fields[] = new MHiddenField('limboS');

        //Label info instruction
        $cOutCourseInstruction = new MTextLabel('textLabel', _M('Disciplina que, se for cursada, impede a disciplina de "Entrada" de ser cursada',$module).'.');

        //Field curriculum course
        $curriculumCourseOutLabel = new MText('curriculumCourseOutLabel', _M('Curso', $module) . ':');
        $curriculumCourseOutLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumOutCourseIdS = new MLookupTextField('curriculumOutCourseIdS', $this->curriculumOutCourseIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'curriculumOutCourseIdS, curriculumOutCourseVersionS, curriculumOutCourseNameS, curriculumOutCourseTurnIdS, curriculumOutCourseTurnDescriptionS, curriculumOutCourseUnitIdS, curriculumOutCourseUnitDescriptionS', $module, 'CourseOccurrence', null, array('courseId' => 'curriculumOutCourseIdS'), !$this->page->isPostBack());
        $curriculumOutCourseIdS->setJsHint(_M('Informe o código do curso', $module));
        $curriculumOutCourseNameS = new MTextField('curriculumOutCourseNameS', $this->curriculumOutCourseNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumOutCourseNameS->setJsHint(_M('Nome do curso', $module));
        $curriculumOutCourseNameS->setReadOnly(true);
        $curriculumOutCourseVersionS = new MTextField('curriculumOutCourseVersionS', $this->curriculumOutCourseVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumOutCourseVersionS->setJsHint(_M('Versão do curso', $module));
        $curriculumOutCourseVersionS->setReadOnly(true);
        $hctCurriculumOutCourse = new MHContainer('hctCurriculumOutCourse', array($separator, $curriculumCourseOutLabel, $curriculumOutCourseIdS, $curriculumOutCourseVersionS, $curriculumOutCourseNameS,));
        $hctCurriculumOutCourse->setShowLabel(true);

        //Field course unit
        $curriculumOutCourseUnitIdLabelS = new MText('curriculumOutCourseUnitIdSLabel', _M('Unidade', $module) . ':');
        $curriculumOutCourseUnitIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumOutCourseUnitIdS = new MTextField('curriculumOutCourseUnitIdS', $this->curriculumOutCourseUnitIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumOutCourseUnitIdS->setJsHint(_M('Código da unidade', $module));
        $curriculumOutCourseUnitIdS->setReadOnly(true);
        $curriculumOutCourseUnitDescriptionS = new MTextField('curriculumOutCourseUnitDescriptionS', $this->curriculumOutCourseUnitDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumOutCourseUnitDescriptionS->setJsHint(_M('Descrição da unidade', $module));
        $curriculumOutCourseUnitDescriptionS->setReadOnly(true);
        $hctCurricularOutCourseUnit = new MHContainer('curriculumOutCourseUnit', array($curriculumOutCourseUnitIdLabelS, $curriculumOutCourseUnitIdS, $curriculumOutCourseUnitDescriptionS));

        //Field course turn
        $curriculumOutCourseTurnIdLabelS = new MText('curriculumOutCourseTurnIdSLabel', _M('Turno', $module) . ':');
        $curriculumOutCourseTurnIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumOutCourseTurnIdS = new MTextField('curriculumOutCourseTurnIdS', $this->curriculumOutCourseTurnIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumOutCourseTurnIdS->setJsHint(_M('Código do turno', $module));
        $curriculumOutCourseTurnIdS->setReadOnly(true);
        $curriculumOutCourseTurnDescriptionS = new MTextField('curriculumOutCourseTurnDescriptionS', $this->curriculumOutCourseTurnDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumOutCourseTurnDescriptionS->setJsHint(_M('Descrição do turno', $module));
        $curriculumOutCourseTurnDescriptionS->setReadOnly(true);
        $hctCurricularOutCourseTurn = new MHContainer('curriculumOutCourseTurn', array($curriculumOutCourseTurnIdLabelS, $curriculumOutCourseTurnIdS, $curriculumOutCourseTurnDescriptionS));

        //Field curricular component
        $curriculumOutCurricularComponentLabel = new MText('curriculumOutCurricularComponentLabel', _M('Disciplina',$module) . ':');
        $curriculumOutCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumOutCurricularComponentIdS = new MLookupTextField('curriculumOutCurricularComponentIdS', $this->curriculumOutCurricularComponentIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curriculumOutCurricularComponentVersionS,curriculumOutCurricularComponentNameS', $module, 'CurricularComponent', null, null, !$this->page->isPostBack());
        $curriculumOutCurricularComponentIdS->setJsHint(_M('Informe o código da disciplina', $module));
        $curriculumOutCurricularComponentVersionS = new MTextField('curriculumOutCurricularComponentVersionS', $this->curriculumOutCurricularComponentVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumOutCurricularComponentVersionS->setJsHint(_M('Versão da disciplina', $module));
        $curriculumOutCurricularComponentVersionS->setReadOnly(true);
        $curriculumOutCurricularComponentNameS = new MTextField('curriculumOutCurricularComponentNameS', $this->curriculumOutCurricularComponentNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumOutCurricularComponentNameS->setJsHint(_M('Nome da disciplina', $module));
        $curriculumOutCurricularComponentNameS->setReadOnly(true);
        $hctCurriculumOutCurricularComponent = new MHContainer('hctCurriculumOutCurricularComponent', array($curriculumOutCurricularComponentLabel, $curriculumOutCurricularComponentIdS, $curriculumOutCurricularComponentVersionS, $curriculumOutCurricularComponentNameS));
        $hctCurriculumOutCurricularComponent->setShowLabel(true);

        $separator = new MSeparator();
        $fields[] = new MBaseGroup('bgOut', _M('Disciplina 1', $module), array($separator, $cOutCourseInstruction, $hctCurriculumOutCourse, $hctCurricularOutCourseUnit, $hctCurricularOutCourseTurn, $hctCurriculumOutCurricularComponent, $separator), 'vertival');

        //Label info instruction
        $cInCourseInstruction = new MTextLabel('textLabel1', _M('Disciplina que não pode ser cursada se a disciplina de "Saída" for cursada',$module).'.');

        //Field curriculum course
        $curriculumCourseInLabel = new MText('curriculumCourseInLabel', _M('Curso',$module) . ':');
        $curriculumCourseInLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumInCourseIdS = new MLookupTextField('curriculumInCourseIdS', $this->curriculumInCourseIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'curriculumInCourseIdS, curriculumInCourseVersionS, curriculumInCourseNameS, curriculumInCourseTurnIdS, curriculumInCourseTurnDescriptionS, curriculumInCourseUnitIdS, curriculumInCourseUnitDescriptionS', $module, 'CourseOccurrence', null, null, !$this->page->isPostBack());
        $curriculumInCourseIdS->setJsHint(_M('Informe o código do curso', $module));
        $curriculumInCourseNameS = new MTextField('curriculumInCourseNameS', $this->curriculumInCourseNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumInCourseNameS->setJsHint(_M('Nome do curso', $module));
        $curriculumInCourseNameS->setReadOnly(true);
        $curriculumInCourseVersionS = new MTextField('curriculumInCourseVersionS', $this->curriculumInCourseVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumInCourseVersionS->setJsHint(_M('Versão do curso', $module));
        $curriculumInCourseVersionS->setReadOnly(true);
        $hctCurriculumInCourse = new MHContainer('hctCurriculumInCourse', array($curriculumCourseInLabel, $curriculumInCourseIdS, $curriculumInCourseVersionS, $curriculumInCourseNameS, $curriculumInCourseUnitDescriptionS, $curriculumInCourseTurnDescriptionS));
        $hctCurriculumInCourse->setShowLabel(true);

        //Field course unit
        $curriculumInCourseUnitIdLabelS = new MText('curriculumInCourseUnitIdSLabel', _M('Unidade', $module) . ':');
        $curriculumInCourseUnitIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumInCourseUnitIdS = new MTextField('curriculumInCourseUnitIdS', $this->curriculumInCourseUnitIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumInCourseUnitIdS->setJsHint(_M('Código da unidade', $module));
        $curriculumInCourseUnitIdS->setReadOnly(true);
        $curriculumInCourseUnitDescriptionS = new MTextField('curriculumInCourseUnitDescriptionS', $this->curriculumInCourseUnitDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumInCourseUnitDescriptionS->setJsHint(_M('Descrição da unidade', $module));
        $curriculumInCourseUnitDescriptionS->setReadOnly(true);
        $hctCurricularInCourseUnit = new MHContainer('curriculumInCourseUnit', array($curriculumInCourseUnitIdLabelS, $curriculumInCourseUnitIdS, $curriculumInCourseUnitDescriptionS));

        //Field course turn
        $curriculumInCourseTurnIdLabelS = new MText('curriculumInCourseTurnIdSLabel', _M('Turno', $module) . ':');
        $curriculumInCourseTurnIdLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumInCourseTurnIdS = new MTextField('curriculumInCourseTurnIdS', $this->curriculumInCourseTurnIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumInCourseTurnIdS->setJsHint(_M('Código do turno', $module));
        $curriculumInCourseTurnIdS->setReadOnly(true);
        $curriculumInCourseTurnDescriptionS = new MTextField('curriculumInCourseTurnDescriptionS', $this->curriculumInCourseTurnDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumInCourseTurnDescriptionS->setJsHint(_M('Descrição do turno', $module));
        $curriculumInCourseTurnDescriptionS->setReadOnly(true);
        $hctCurricularInCourseTurn = new MHContainer('curriculumInCourseTurn', array($curriculumInCourseTurnIdLabelS, $curriculumInCourseTurnIdS, $curriculumInCourseTurnDescriptionS));

        //Field curricular ccomponent
        $curriculumInCurricularComponentLabel = new MText('curriculumInCurricularComponentLabel', _M('Disciplina',$module) . ':');
        $curriculumInCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumInCurricularComponentIdS = new MLookupTextField('curriculumInCurricularComponentIdS', $this->curriculumInCurricularComponentIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curriculumInCurricularComponentVersionS,curriculumInCurricularComponentNameS', $module, 'CurricularComponent', null, null, !$this->page->isPostBack());
        $curriculumInCurricularComponentIdS->setJsHint(_M('Informe o código do curso', $module));
        $curriculumInCurricularComponentVersionS = new MTextField('curriculumInCurricularComponentVersionS', $this->curriculumInCurricularComponentVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumInCurricularComponentVersionS->setJsHint(_M('Versão da disciplina',$module));
        $curriculumInCurricularComponentVersionS->setReadOnly(true);
        $curriculumInCurricularComponentNameS = new MTextField('curriculumInCurricularComponentNameS', $this->curriculumInCurricularComponentNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumInCurricularComponentNameS->setJsHint(_M('Nome da disciplina',$module));
        $curriculumInCurricularComponentNameS->setReadOnly(true);
        $hctCurriculumInCurricularComponent = new MHContainer('hctCurriculumInCurricularComponent', array($curriculumInCurricularComponentLabel, $curriculumInCurricularComponentIdS, $curriculumInCurricularComponentVersionS, $curriculumInCurricularComponentNameS));
        $hctCurriculumInCurricularComponent->setShowLabel(true);

        $fields[] = new MBaseGroup('bgIn', _M('Disciplina 2', $module), array($separator, $cInCourseInstruction, $hctCurriculumInCourse, $hctCurricularInCourseUnit, $hctCurricularInCourseTurn, $hctCurriculumInCurricularComponent, $separator), 'vertival');
        $limbo = new MHiddenField('limboS', '');
        $fields[] = $limbo;

        parent::defineFields($fields, $module, 'GrdCurriculumConcurrenceSearch', $validators);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data = parent::getTypesData();
        
        $data->courseOutId = $this->getFormValue('curriculumOutCourseIdS');
        $data->courseOutVersion = $this->getFormValue('curriculumOutCourseVersionS');
        $data->unitOutId = $this->getFormValue('curriculumOutCourseUnitIdS');
        $data->turnOutId = $this->getFormValue('curriculumOutCourseTurnIdS');
        $data->curricularComponentOutId = $this->getFormValue('curriculumOutCurricularComponentIdS');
        $data->curricularComponentOutVersion = $this->getFormValue('curriculumOutCurricularComponentVersionS');
        $data->courseInId = $this->getFormValue('curriculumInCourseIdS');
        $data->courseInVersion = $this->getFormValue('curriculumInCourseVersionS');
        $data->unitInId = $this->getFormValue('curriculumInCourseUnitIdS');
        $data->turnInId = $this->getFormValue('curriculumInCourseTurnIdS');
        $data->curricularComponentInId = $this->getFormValue('curriculumInCurricularComponentIdS');
        $data->curricularComponentInVersion = $this->getFormValue('curriculumInCurricularComponentVersionS');

        return $data;
    }
}
?>