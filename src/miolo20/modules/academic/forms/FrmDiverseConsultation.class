
<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Diverse consultation form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Vinícius Becker [vinicius@solis.coop.br]
 *
 * @since
 * Class created on 22/08/2005
 *
 **/

MIOLO::Import('extensions::cpaint.inc.php','cpaint');

/**
 * Form to manipulate a classification
 **/
class FrmDiverseConsultation extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        parent::__construct(_M('Consultas diversas', $module), null, null);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $fields[] = new MDiv('divLimbo');

        $businessDiverseConsultation = new BusinessAcademicBusDiverseConsultation();
        $businessContract            = new BusinessAcademicBusContract();

        //Field cpf
        $cpfLabel = new MText('cpfLabel', _M('CPF', $module) . ':');
        $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $lkpFields = array (
            'personId',
            'personName'
        );
        $txtCpf  = new MLookupTextField('txtCpf', $this->getFormValue('txtCpf', $this->txtCpf->value), _M('CPF',$module), 16, null, null, $lkpFields, 'basic', 'PhysicalPersonCPF', null, array('cpf' => 'txtCpf'), true);
        $txtCpf->setJsHint(_M('Informe o CPF', $module));
        $validators[] = new MCPFValidator('txtCpf', _M('CPF',$module), 'optional');
        $cntCPF = new MHContainer('cntCPF', array($cpfLabel, $txtCpf));
        $cntCPF->setShowLabel(false);
        $fields[] = $cntCPF;

        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $lkpFields = array (
            'personName',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'txtCpf'
        );
        $personId  = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId), _M('Código da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, $lkpFields, 'basic', 'PhysicalPerson', null, array('cpf' => 'txtCpf'), true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $personName  = new MTextField('personName', $this->getFormValue('personName', $this->inscriptionData->personName), _M('Nome da pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personId->addAttribute('onkeyDown', 'if (event.keyCode == 13) { this.onExit(); }');
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $cntPerson = new MHContainer('cntPerson', array($personLabel, $personId, $personName));
        $cntPerson->setShowLabel(false);
        $fields[] = $cntPerson;

        //Field period
        $business = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $business->listPeriod(), true );
        $periodId->setJsHint(_M('Informe o código do período'));
        $fields[] = $periodId;

        $searchButton        = new MButton('btnSearch',_M('Localizar',$module));
        $searchButton->event = 'btnSearch';

        $fields[] = $searchButton;
        $fields[] = new MSeparator();
        $fields[] = new MHiddenField('currentUrl', str_replace('&amp;', '&', $MIOLO->getCurrentURL()));

        $filterContract->personId = $this->getFormValue('personId');

        if ( strlen($filterContract->personId) > 0 )
        {
            $dataContracts = $businessDiverseConsultation->getPersonContracts($filterContract->personId);

            if ( count($dataContracts) > 0 )
            {
                $fields[] = $tab = new MTabbedBaseGroup('allContracts');
                $isFirst  = true;
                foreach ( $dataContracts as $contractRow )
                {
                    $mControlText  = $contractRow[1] . '/' . $contractRow[2] . ' - ' . $contractRow[3] . ' - ' . $contractRow[4];
                    $mControlHint  = _M('Curso', $module) . ' ' . $contractRow[5] . " - ";
                    $mControlHint .= _M('Versão', $module) . ' ' . $contractRow[2] . " - ";
                    $mControlHint .= _M('Turno', $module) . ' ' . $contractRow[6] . " - ";
                    $mControlHint .= _M('Unidade', $module) . ' ' . $contractRow[4] . " - ";
                    $mControlHint .= _M('Estado contratual', $module) . ' ' . $contractRow[7];

                    $personIdValue = $this->getFormValue('personId', $this->personId->value);
                    $divContent = '';
                    if( strlen($personIdValue) > 0 )
                    {
                        $args = new stdClass();
                        $args->personId   = $personIdValue;
                        $args->contractId = $contractRow[0];
                        $args->periodId   = $this->getFormValue('periodId', $data->periodId);
                        $divContent = $this->getContract($args);
                    }
                    $divContract = new MDiv('divContract' . $contractRow[0], $divContent);

                    $tab->createTab('tabContract' . $contractRow[0], $mControlText, array( $divContract ));
                }

                $cntData = new MVContainer('cntData', array($bsgContracts, $bsgPage));
                $fields[] = $cntData;
            }
            else
            {
                $this->addError(_M('Nenhum contrato encontrado para esta pessoa.', $module));
            }
        }

        parent::defineFields(array('fields' => $fields, 'validators' => $validators, 'toolbar' => false));

        $MIOLO->page->addScript('m_tabbedbasegroup.js');
        $MIOLO->getRequiredJS4Ajax();

        $this->page->onLoad('document.' . $this->name . '.personId.focus();');
    }

    /**
     * Verifica e retorna se a pessoa tem documentos pendentes de entrega - ACADEMICO
     * @param type $args
     * @return \MDiv
     */
    public function documentosPendentes($args)
    {
        $personId = $args->personId;
        $gfields = new sGenericFields();

        $busDocument = new BusinessBasicBusDocument();
        $listDoc = $busDocument->checkDocumentosPendentes($personId);

        if ( count($listDoc) > 0)
        {

            $msg = _M('O(s) seguinte(s) documento(s) do aluno(a) esta(ão) pendente(s) de entrega:');

            foreach ( $listDoc as $value)
            {
                $msg.= "<br>".$value[0];
            }

            $flds[] = $gfields->labelDica($msg);
        }

        $controls = new MDiv('divDocs', $flds);

        return $controls;
    }

    /**
     * Exibe as informações do contrato.
     *
     * @param type array
     * @return MTabbedBaseGroup
     */
    public function getContract($args)
    {
        $MIOLO = MIOLO::getInstance();

        if ( (strlen($args->personId)>0 ) )
        {
            $fields[] = $tab = new MTabbedBaseGroup('generalData' . $args->contractId);

            $tab->createTab('tabGeneralInfo' . $args->contractId, _M('Dados gerais', $module), array( $this->getGeneralInfo($args) ));
            $tab->createTab('tabCurricularComonentPeriod' . $args->contractId, _M('Disciplinas do período', $module), array( $this->getCurricularComonentPeriod($args) ));
            $tab->createTab('tabGradeDeHorarios' . $args->contractId, _M('Grade de horários', $module), array( self::getGradeDeHorarios($args) ));
            $tab->createTab('tabSchoolHistoric' . $args->contractId, _M('Histórico escolar', $module), array( $this->getSchoolHistoric($args) ));
            $tab->createTab('tabDisciplinasCursadasForaDeCurriculo' . $args->contractId, _M('Disciplinas cursadas fora do currículo', $module), array( $this->obtemDisciplinasCursadasForaDeCurriculo($args) ));
            $tab->createTab('tabAchievements' . $args->contractId, _M('Aproveitamentos', $module), array( $this->getAchievements($args) ));
            $tab->createTab('tabProficiency' . $args->contractId, _M('Proficiência', $module), array( $this->getProficiency($args) ));
            $tab->createTab('tabComplementActivities' . $args->contractId, _M('Atividades complementares', $module), array( $this->getComplementActivities($args) ));
            $tab->createTab('tabContractMovement' . $args->contractId, _M('Movimentação contratual', $module), array( $this->getContractMovement($args) ));
        }

        return $fields;
    }

    /**
     * Exibe dados pessoais.
     *
     * @param type array()
     * @return html
     */
    public function getGeneralInfo($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $busContract       = new BusinessAcademicBusContract();
        $busClassPupil     = new BusinessAcademicBusClassPupil();
        $busTurn           = new BusinessBasicBusTurn();
        $busUnit           = new BusinessBasicBusUnit();
        $busCity           = new BusinessBasicBusCity();

        $contractData = $busContract->getContract($args->contractId);

        $turnData     = $busTurn->getTurn($contractData->turnId);
        $unitData     = $busUnit->getUnit($contractData->unitId);

        $classPupilData = $busClassPupil->obterTurmaDoAlunonoPeriodo($args->contractId, $args->periodId);

        // Caso esteja definido para o semestre ser equivalente a carga horária cursada.
        if ( SAGU::getParameter('ACADEMIC', 'DEFINE_SEMESTRE_POR_CARGA_HORARIA') == DB_TRUE )
        {
            $acdSemesterContractPeriod = new AcdSemesterContractPeriod();
            $acdSemesterContractPeriod->contractId = $args->contractId;
            $acdSemesterContractPeriod->periodId = $args->periodId;

            $semestreLabel = new MText('semestreLabel', _M('Semestre no período:'));
            $semestreLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $semester = $acdSemesterContractPeriod->obterSemestrePeloContratoEPeriodo();

            if ( strlen($semester) > 0 )
            {
                $semestre = new MText('semestre', $semester . 'º');
            }
            else
            {

                $semestre = new MText('semestre', _M("O contrato não possui semestre definido para o período de {$args->periodId}."), 'red');
            }

            $flds[] = new MHContainer('semestreHC', array($semestreLabel, $semestre));
        }

        $docs = $this->documentosPendentes($args);

        //Campos de dados contratuais
        $contractLabel    = new MText('contractLabel' . $args->contractId, _M('Contrato',$module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $contractIdT      = new MTextField('contractId' . $args->contractId, $contractData->contractId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractIdT->setReadOnly(true);

        $hctContract      = new MHContainer('hctContract' . $args->contractId, array($contractLabel, $contractIdT));
        $hctContract->setShowLabel(true);
        $flds[]      = $hctContract;

        $courseLabel      = new MText('courseLabel' . $args->contractId, _M('Curso',$module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $courseId         = new MTextField('courseId' . $args->contractId, $contractData->courseId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseId->setReadOnly(true);

        $courseName       = new MTextField('courseName' . $args->contractId, $contractData->courseName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);

        $courseVersion    = new MTextField('courseVersion' . $args->contractId, $contractData->courseVersion, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setReadOnly(true);

        $hctCourse        = new MHContainer('hctCourse' . $args->contractId, array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $flds[]      = $hctCourse;

        $turnLabel        = new MText('turnLabel' . $args->contractId, _M('Turno', $module) . ':');
        $turnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $turnId           = new MTextField('turnId' . $args->contractId, $contractData->turnId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $turnId->setReadOnly(true);

        $turnData = $busTurn->getTurn($contractData->turnId);
        $turnDescription  = new MTextField('turnDescription' . $args->contractId, $turnData->description, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $turnDescription->setReadOnly(true);

        $hctTurn          = new MHContainer('hctTurn' . $args->contractId, array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $flds[]        = $hctTurn;

        $unitLabel        = new MText('unitLabel' . $args->contractId, _M('Unidade', $module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $unitId           = new MTextField('unitId' . $args->contractId, $contractData->unitId,'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitId->setReadOnly(true);

        $unitData = $busUnit->getUnit($contractData->unitId);
        $unitDescription  = new MTextField('unitDescription' . $args->contractId, $unitData->description, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $unitDescription->setReadOnly(true);

        $hctUnit          = new MHContainer('hctUnit' . $args->contractId, array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $flds[]        = $hctUnit;

        $classLabel       = new MText('classLabel' . $args->contractId, _M('Turma', $module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $classId          = new MTextField('classId' . $args->contractId, $classPupilData->classId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $classId->setReadOnly(true);

        $classDescription = new MTextField('classDescription' . $args->contractId, $classPupilData->name, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $classDescription->setReadOnly(true);

        $hctClass         = new MHContainer('hctClass' . $args->contractId, array($classLabel, $classId, $classDescription));
        $hctClass->setShowLabel(true);
        $flds[]        = $hctClass;

        if (strtoupper($contractData->isRequestAcademicDegree) == strtoupper(DB_TRUE))
        {
            $formationPeriodLabel = new MText('formationPeriodLabel' . $args->contractId, _M('Período de formatura', $module) . ':');
            $formationPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $formationPeriodId    = new MTextField('formationPeriodId' . $args->contractId, $contractData->formationPeriodId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $formationPeriodId->setReadOnly(true);

            $hctFormationPeriod   = new MHContainer('hctFormationPeriod' . $args->contractId, array($formationPeriodLabel, $formationPeriodId));
            $hctFormationPeriod->setShowLabel(true);
            $flds[]            = $hctFormationPeriod;

            $formationDateLabel   = new MText('formationDateLabel' . $args->contractId, _M('Data de Formatura', $module) . ':');
            $formationDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $formationDate        = new MTextField('formationDate' . $args->contractId, $contractData->formationDate, '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $formationDate->setReadOnly(true);

            $hctFormationDate     = new MHContainer('hctFormationDate' . $args->contractId, array($formationDateLabel, $formationDate));
            $hctFormationDate->setShowLabel(true);
            $flds[]            = $hctFormationDate;

            $conclusionDateLabel  = new MText('conclusionDateLabel' . $args->contractId, _M('Data de Conclusão', $module) . ':');
            $conclusionDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $conclusionDate       = new MTextField('conclusionDate' . $args->contractId, $contractData->formationDate, '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $conclusionDate->setReadOnly(true);

            $hctConclusionDate    = new MHContainer('hctConclusionDate' . $args->contractId, array($conclusionDateLabel, $conclusionDate));
            $hctConclusionDate->setShowLabel(true);
            $flds[]            = $hctConclusionDate;
        }

        $globalAverageLabel = new MText('globalAverageLabel' . $args->contractId, _M('Média global', $module) . ':');
        $globalAverageLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $globalAverage      = new MTextField('globalAverage' . $args->contractId, $contractData->globalAverage > 0 ? $contractData->globalAverage : $busContract->getGlobalAverageContract($args->contractId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $globalAverage->setReadOnly(true);

        $hctGlobalAverage   = new MHContainer('hctGlobalAverage' . $args->contractId, array($globalAverageLabel, $globalAverage));
        $hctGlobalAverage->setShowLabel(true);
        $flds[]            = $hctGlobalAverage;

        $flds[] = new MButton('editContract' . $args->contractId, _M('Editar contrato', $module), $MIOLO->getActionURL($module, 'main:register:contract:contract', null, array( 'function' => 'update', 'contractId' => $args->contractId)));

        $bsgContractData = new MBaseGroup('bsgContractData' . $args->contractId, _M('Dados do contrato', $module), $flds, 'vertical', 'css');
        unset($flds);

        //Campos de dados pessoais-
        $bsgPersonData = new SPersonalDataField(array( 'personId' => $contractData->personId) );

        $controls = new MVContainer('vctGeneralData' . $args->contractId, array($docs, $bsgContractData, $bsgPersonData ));

        return $controls;
    }

    /**
     * Exibe disciplinas do período.
     *
     * @param type array
     * @return html
     */
    public function getCurricularComonentPeriod($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filter = new stdClass();
        $filter->periodId   = $args->periodId;
        $filter->contractId = $args->contractId;

        $businessDiverseConsultation = new BusinessAcademicBusDiverseConsultation();
        $dataGrid = $businessDiverseConsultation->getCurricularComponentCoursed($filter);
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationCurricularComponentRegistered');
        $grdResults->setData($dataGrid);
        $grdResults->setClose(null);

        $enrollLink = new MButton('enrollLink', _M('Executar matrícula', $module), $MIOLO->getActionURL($module, 'main:process:enrollContract', null, array('function' => 'insert', 'contractId' => $args->contractId)));
        $enrollDiv = new MDiv('enrollDiv', array(new MSeparator(''), $enrollLink), null, 'align=center');

        $controls = new MDiv('vctRegistered', array($grdResults, $enrollDiv));

        return $controls;
    }

    /**
     * Exibe disicplinas cursadas fora do currículo
     *
     * @param type array
     * @return html
     */
    public function obtemDisciplinasCursadasForaDeCurriculo($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filter = new stdClass();
        $filter->notInPeriodId = $args->periodId;
        $filter->contractId    = $args->contractId;
        $filter->foraDeCurriculo = DB_TRUE;

        $businessDiverseConsultation = new BusinessAcademicBusDiverseConsultation();
        $dataGrid = $businessDiverseConsultation->getCurricularComponentCoursed($filter);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationCurricularComponentRegistered');
        $grdResults->setData($dataGrid);
        $grdResults->setClose(null);
        $grdResults->setTitle(_M('Disciplinas cursadas fora de currículo', $module));
        $grdResults->showDetailedStatus();

        $controls = new MDiv('divSchoolHistoric', $grdResults);

        return $controls;
    }

    /**
     * Exibe histórico escolar.
     *
     * @param type array
     * @return html
     */
    public function getSchoolHistoric($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filter = new stdClass();
        $filter->notInPeriodId = $args->periodId;
        $filter->contractId    = $args->contractId;
        $filter->foraDeCurriculo = DB_FALSE;

        $businessDiverseConsultation = new BusinessAcademicBusDiverseConsultation();
        $dataGrid = $businessDiverseConsultation->getCurricularComponentCoursed($filter);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationCurricularComponentRegistered');
        $grdResults->setData($dataGrid);
        $grdResults->setClose(null);
        $grdResults->setTitle(_M('Histórico escolar', $module));
        $grdResults->showDetailedStatus();

        $controls = new MDiv('divSchoolHistoric', $grdResults);

        return $controls;
    }

    /**
     * Exibe aproveitamentos.
     *
     * @param type array
     * @return html
     */
    public function getAchievements($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filter = new stdClass();
        $filter->contractId = array( $args->contractId );
        $filter->periodId   = $args->periodId;

        $businessDiverseConsultation = new BusinessAcademicBusDiverseConsultation();
        $dataGrid    = $businessDiverseConsultation->getCurricularComponentExploited($filter);

        $grdResults  = $MIOLO->getUI()->getGrid($module, 'GrdDiverseConsultationCurricularComponentExploited', $filter);
        $grdResults->setData($dataGrid);
        $grdResults->setClose(null);

        $personId = MIOLO::_REQUEST('personId');

        $externalButton = new MButton('externalButton', _M('Novo aproveitamento externo', $module), $MIOLO->getActionURL($module, 'main:process:exploitation:externalExploitation', null, array('contractPersonId'=>$personId, 'contractIdS'=>$contractId)));
        $internalButton = new MButton('internalButton', _M('Novo aproveitamento interno', $module), $MIOLO->getActionURL($module, 'main:process:exploitation:internalExploitation', null, array('contractPersonId'=>$personId, 'contractIdS'=>$contractId)));
        $buttonsDiv     = new MDiv('buttonsDiv', array($externalButton, $internalButton), null, 'align=center');

        $controls = new MDiv('exploitationsDiv', array($grdResults, $buttonsDiv));

        return $controls;
    }

    /**
     * Exibe proficiências.
     *
     * @param type array
     * @return html
     */
    public function getProficiency($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filter = new stdClass();
        $filter->contractId  = $args->contractId;
        $filter->proficiency = true;

        $businessDiverseConsultation = new BusinessAcademicBusDiverseConsultation();
        $dataGrid = $businessDiverseConsultation->getCurricularComponentCoursed($filter);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationCurricularComponentRegistered');
        $grdResults->columns[2]  = new MGridColumn( _M('Código do período', $module), 'right', true, null, true, null, false );
        $grdResults->columns[5]->visible  = false;
        $grdResults->columns[6]->visible  = false;
        $grdResults->columns[7]->visible  = false;
        $grdResults->columns[8]->visible = false;
        $grdResults->columns[10]->visible = false;
        $grdResults->setTitle(_M('Proficiência', $module));
        $grdResults->setData($dataGrid);
        $grdResults->setClose(null);

        $controls = new MDiv('divProficiency', $grdResults);

        return $controls;
    }

    /**
     * Exibe atividades complementares.
     *
     * @param type array
     * @return html
     */
    public function getComplementActivities($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filter = new stdClass();
        $filter->contractId = $args->contractId;
        $filter->changeAction = true;

        $busComplementaryActivities = new BusinessAcademicBusComplementaryActivities();
        $dataGrid = $busComplementaryActivities->searchComplementaryActivities($filter);

        if( count($dataGrid) > 0 )
        {
            foreach($dataGrid as $cod=>$atividade)
            {
                $categoria = $atividade[9];
                $total[$categoria] = $total[$categoria]+$atividade[3];
                $totalGeral = $totalGeral+$atividade[3];
            }

            foreach($total as $cat=>$valor)
            {
                $data[] = array($cat, $valor.'h');
            }
            $data = array_merge($data, array(array('<b>TOTAL</b>', '<b>'.$totalGeral.'h</b>')));
            $tableTotal = new MTableRaw(_M('Total de horas por categoria da atividade'), $data, array('Categoria da atividade', 'Total de horas'));
        }

        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdComplementaryActivitiesSearch', $filter);
        $grdResults->setData($dataGrid);
        $grdResults->setPageLength(0);
        $grdResults->setTitle(_M('Atividades complementares', $module));
        $grdResults->setClose(null);

        if (count($grdResults->clumns) > 0)
        {
            foreach ($grdResults->columns as $column)
            {
                $column->order = false;
            }
        }

        $personId = MIOLO::_REQUEST('personId');
        $complementaryActivitiesButton = new MButton('complementaryActivitiesButton', _M('Nova atividade complementar', $module), $MIOLO->getActionURL($module, 'main:register:complementaryActivities:complementaryActivities', null, array('function'=>'insert', 'personId' => $personId, 'contractId'=>$args->contractId)));
        $buttonsDiv                    = new MDiv('buttonsDiv', array($complementaryActivitiesButton), null, 'align=center');

        $controls = new MDiv('complementaryActivitiesDiv', array($tableTotal, $grdResults, $buttonsDiv));

        return $controls;
    }

    /**
     * Exibe movimentações contratuais.
     *
     * @param type array
     * @return html
     */
    public function getContractMovement($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filter = new stdClass();
        $filter->contractId = $args->contractId;
        $filter->changeAction = true;

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdMovementContractSearch',$filter);
        $busMovementContract = new BusinessAcademicBusMovementContract();
        $dataGrid = $busMovementContract->searchMovementContract($filter, false, false, true);

        $grdResults->setData($dataGrid);
        $grdResults->setPageLength(0);
        $grdResults->setTitle(_M('Movimentação contratual', $module));
        $grdResults->setClose(null);

        foreach ($grdResults->columns as $column)
        {
            $column->order = false;
        }
        $controls = new MDiv('divContractMovement', $grdResults);

        return $controls;
    }

    /**
     * Método que obtem a grade de horários da tela de confirmação de matrícula.
     *
     * @author Bruno E. Fuhr <bruno@solis.com.br>
     * @since 21/11/2013
     * @version 3.9
     * @ticket #24262
     *
     * @param Object $args => contractId - Código do contrato, periodId - Código do período
     * @return MTableRaw - Grade de horários da pessoa
     */
    public static function getGradeDeHorarios($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $busGroup = $MIOLO->GetBusiness('academic', 'BusGroup');
        $busEnroll = $MIOLO->GetBusiness('academic', 'BusEnroll');
        $acdContract = new AcdContract($args->contractId);

        $enrollData = new stdClass();
        $enrollData->periodId = $args->periodId;
        $enrollData->contractPersonId = $acdContract->personId;
        $enrollData->contractId = $acdContract->contractId;
        $enrollData->contractCourseId = $acdContract->courseId;
        $enrollData->contractCourseVersion = $acdContract->courseVersion;
        $enrollData->contractUnitId = $acdContract->unitId;
        $enrollData->contractTurnId = $acdContract->turnId;

        // Verifica se contrato está ativo
        if ( !AcdContract::contratoEstaAtivo($args->contractId) )
        {
            $return = new MTableRaw(_M('Horário do período'), array('Nenhum registro encontrado'), NULL);
        }
        else
        {
            $disciplinas = array();
            $disciplinasDaPessoa = $busGroup->obterDisciplinasDaPessoaPorPeriodo($enrollData->contractPersonId, $enrollData->periodId, $acdContract->contractId);
            foreach ( $disciplinasDaPessoa as $disciplinaDaPessoa )
            {
                if ( $disciplinaDaPessoa[1] )
                {
                    if ( !$enrollData->learningPeriodId )
                    {
                        $group = $busGroup->getGroup($disciplinaDaPessoa[1]);
                        $enrollData->learningPeriodId = $group->learningPeriodId;
                    }

                    $enroll = $busEnroll->getEnroll($disciplinaDaPessoa[0]);
                    $curriculumId = $enroll->curriculumId;

                    $disciplinas[$disciplinaDaPessoa[1]] = $curriculumId;
                }
            }

            $return = new MTableRaw(_M('Horário do período'), array('Nenhum registro encontrado'), NULL);
            if ( count($disciplinas) > 0 )
            {
                $data = new stdClass();
                $data->groupId = $disciplinas;
                $data->learningPeriodId = $enrollData->learningPeriodId;
                $data->contractId = $enrollData->contractId;
                $data->periodId = $enrollData->periodId;

                $session = $MIOLO->session;
                $session->setValue('enrollData', $enrollData);
                $session->setValue('data', $data);

                $frmEnrollConfirmation = $MIOLO->getUI()->getForm('academic', 'FrmEnrollConfirmation', false);
                $return = $frmEnrollConfirmation->gradeHorarios;
            }
        }

        return $return;
    }

    /**
     * Gera a popup de vizualização dos complementos da movimentação contratual.
     *
     * @param stdClass $args
     */
    public function popupCompletoMovimentacaoContratual($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();

        $busMovementContractComplement = new BusinessAcademicBusMovementContractComplement();
        $complemento = $busMovementContractComplement->searchMovementContractComplement($args);

        //Obtém as informações do complemento do contrato
        $busStateContractField = new BusinessAcademicBusStateContractField();
        $dadosComplemento = $busStateContractField->getStateContractField($complemento[0][5]);

        // Tabela complemento movimentação contratual
        $colunas = array(
            _M('Estado contratual', $module),
            _M('Data do complemento', $module),
            _M('Descrição', $module),
            _M('Registro', $module)
        );

        $dadosDaTabela[] = array(
                $args->stateContractId,
                $args->stateTime,
                $dadosComplemento->description,
                $complemento[0][8]
        );

        $fields[] = new MTableRaw(null, $dadosDaTabela, $colunas);

        $this->setFields($fields);
        MPopup::show('popupCompletoMovimentacaoContratual', $fields, _M('Complemento da movimentação contratual', $module));
    }
}

?>
