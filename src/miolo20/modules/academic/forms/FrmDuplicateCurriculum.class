<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Form to duplicate an already existing curriculum
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 10/11/2010
 */

/**
 * Duplicate curriculum form
 */
class FrmDuplicateCurriculum extends SForm
{
    private $module;

    /**
     * Class constructor
     */
    public function __construct()
    {
        $this->module = SAGU::getFileModule(__FILE__);
        parent::__construct(_M('Duplicar matriz curricular', $this->module), null, null);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->disableButton('tbBtnSave');

        $fields[] = new SHiddenField('allCourseOccurrence', DB_TRUE);
        
        // Field sourceCourse
        $sourceCourseLabel = new MText('sourceCourseLabel', _M('Curso', $this->module) . ':');
        $sourceCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sourceCourseLabel->setClass('m-caption m-caption-required');
        $sourceCourseId = new MLookupTextField('sourceCourseId', $this->getFormValue('sourceCourseId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'sourceCourseId, sourceCourseVersion, sourceCourseName, sourceTurnId, sourceTurnDescription, sourceUnitId, sourceUnitDescription', $this->module, 'CourseOccurrence', null, array('courseId' => 'sourceCourseId', 'allCourseOccurrence' => 'allCourseOccurrence'), true);
        $sourceCourseId->setJsHint(_M('Informe o código do curso', $this->module));
        $validators[] = new MRequiredValidator('sourceCourseId', _M('Curso de origem', $this->module));
        $sourceCourseName = new MTextField('sourceCourseName', $this->getFormValue('sourceCourseName', $data->sourceCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sourceCourseName->setReadOnly(true);
        $sourceCourseName->setJsHint(_M('Nome do curso', $this->module));
        $sourceCourseVersion = new MTextField('sourceCourseVersion', $this->getFormValue('sourceCourseVersion', $data->sourceCourseVersion),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $sourceCourseVersion->setJsHint(_M('Versão do curso', $this->module));
        $validators[] = new MRequiredValidator('sourceCourseVersion', _M('Versão do curso', $this->module));
        $sourceCourseVersion->setReadOnly(true);
        $hctSourceCourse = new MHContainer('hctSourceCourse', array($sourceCourseLabel, $sourceCourseId, $sourceCourseVersion, $sourceCourseName));
        $hctSourceCourse->setShowLabel(true);

        // Field sourceUnit
        $sourceUnitLabel = new MText('sourceUnitLabel', _M('Unidade', $this->module) . ':');
        $sourceUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sourceUnitLabel->setClass('m-caption m-caption-required');
        $sourceUnitId = new MTextField('sourceUnitId', $this->getFormValue('sourceUnitId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $sourceUnitId->setReadOnly(true);
        $sourceUnitId->setJsHint(_M('Código da unidade', $this->module));
        $validators[] = new MRequiredValidator('sourceUnitId', _M('Código da unidade', $this->module));
        $sourceUnitDescription = new MTextField('sourceUnitDescription', $this->getFormValue('sourceUnitDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sourceUnitDescription->setReadOnly(true);
        $sourceUnitDescription->setJsHint(_M('Descrição da unidade', $this->module));
        $hctSourceUnit = new MHContainer('hctSourceUnit', array ($sourceUnitLabel, $sourceUnitId, $sourceUnitDescription));
        $hctSourceUnit->setShowLabel(false);

        // Field sourceTurn
        $sourceTurnLabel = new MText('sourceTurnLabel', _M('Turno', $this->module) . ':');
        $sourceTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sourceTurnLabel->setClass('m-caption m-caption-required');
        $sourceTurnId = new MTextField('sourceTurnId', $this->getFormValue('sourceTurn'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $sourceTurnId->setReadOnly(true);
        $sourceTurnId->setJsHint(_M('Código do turno', $this->module));
        $validators[] = new MRequiredValidator('sourceTurnId', _M('Código do turno', $this->module));
        $sourceTurnDescription = new MTextField('sourceTurnDescription', $this->getFormValue('sourceTurnDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sourceTurnDescription->setReadOnly(true);
        $sourceTurnDescription->setJsHint(_M('Descrição do turno', $this->module));
        $hctSourceTurn = new MHContainer('hctSourceTurn', array ($sourceTurnLabel, $sourceTurnId, $sourceTurnDescription));
        $hctSourceTurn->setShowLabel(false);
        $hctSourceCourse = new MVContainer('hctContract', array($hctSourceCourse, $hctSourceUnit, $hctSourceTurn));

        $bsg1 = new BaseGroup('bsg1', _M('Curso de origem', $this->module), array($hctSourceCourse), 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width = '100%';
        $fields[] = $bsg1;

        // Field destinationCourse
        $destinationCourseLabel = new MText('destinationCourseLabel', _M('Curso', $this->module) . ':');
        $destinationCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationCourseLabel->setClass('m-caption m-caption-required');
        $destinationCourseId = new MLookupTextField('destinationCourseId', $this->getFormValue('destinationCourseId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'destinationCourseId, destinationCourseVersion, destinationCourseName, destinationTurnId, destinationTurnDescription, destinationUnitId, destinationUnitDescription', $this->module, 'CourseOccurrence', null, array('courseId' => 'destinationCourseId', 'allCourseOccurrence' => 'allCourseOccurrence'), true);
        $destinationCourseId->setJsHint(_M('Informe o código do curso', $this->module));
        $validators[] = new MRequiredValidator('destinationCourseId', _M('Curso de destino', $this->module));
        $destinationCourseName = new MTextField('destinationCourseName', $this->getFormValue('destinationCourseName', $data->destinationCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationCourseName->setReadOnly(true);
        $destinationCourseName->setJsHint(_M('Nome do curso', $this->module));
        $destinationCourseVersion = new MTextField('destinationCourseVersion', $this->getFormValue('destinationCourseVersion', $data->destinationCourseVersion),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $destinationCourseVersion->setJsHint(_M('Versão do curso', $this->module));
        $validators[] = new MRequiredValidator('destinationCourseVersion', _M('Versão do curso', $this->module));
        $destinationCourseVersion->setReadOnly(true);
        $hctDestinationCourse = new MHContainer('hctDestinationCourse', array($destinationCourseLabel, $destinationCourseId, $destinationCourseVersion, $destinationCourseName));
        $hctDestinationCourse->setShowLabel(true);

        // Field destinationUnit
        $destinationUnitLabel = new MText('destinationUnitLabel', _M('Unidade', $this->module) . ':');
        $destinationUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationUnitLabel->setClass('m-caption m-caption-required');
        $destinationUnitId = new MTextField('destinationUnitId', $this->getFormValue('destinationUnitId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $destinationUnitId->setReadOnly(true);
        $destinationUnitId->setJsHint(_M('Código da unidade', $this->module));
        $validators[] = new MRequiredValidator('destinationUnitId', _M('Código da unidade', $this->module));
        $destinationUnitDescription = new MTextField('destinationUnitDescription', $this->getFormValue('destinationUnitDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationUnitDescription->setReadOnly(true);
        $destinationUnitDescription->setJsHint(_M('Descrição da unidade', $this->module));
        $hctDestinationUnit = new MHContainer('hctDestinationUnit', array ($destinationUnitLabel, $destinationUnitId, $destinationUnitDescription));
        $hctDestinationUnit->setShowLabel(false);

        // Field destinationTurn
        $destinationTurnLabel = new MText('destinationTurnLabel', _M('Turno', $this->module) . ':');
        $destinationTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationTurnLabel->setClass('m-caption m-caption-required');
        $destinationTurnId = new MTextField('destinationTurnId', $this->getFormValue('destinationTurn'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $destinationTurnId->setReadOnly(true);
        $destinationTurnId->setJsHint(_M('Código do turno', $this->module));
        $validators[] = new MRequiredValidator('destinationTurnId', _M('Código do turno', $this->module));
        $destinationTurnDescription = new MTextField('destinationTurnDescription', $this->getFormValue('destinationTurnDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationTurnDescription->setReadOnly(true);
        $destinationTurnDescription->setJsHint(_M('Descrição do turno', $this->module));
        $hctDestinationTurn = new MHContainer('hctDestinationTurn', array ($destinationTurnLabel, $destinationTurnId, $destinationTurnDescription));
        $hctDestinationTurn->setShowLabel(false);
        $hctDestinationCourse = new MVContainer('hctContract', array($hctDestinationCourse, $hctDestinationUnit, $hctDestinationTurn));

        $bsg1 = new BaseGroup('bsg1', _M('Curso de destino', $this->module), array($hctDestinationCourse), 'vertical');
        $bsg1->showLabel = true;
        $bsg1->width = '100%';
        $fields[] = $bsg1;
        $fields[] = new MButton('btnValidateDuplication', _M('Validar duplicação', $this->module), $this->getAjaxAction('btnValidateDuplication_click', 'divResult', true));
        $fields[] = new MDiv('divResult');

        $this->addFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }

    /**
     * AJAX function that receives all form data as an object and check if duplication is possible
     * @param (stdClass) $args Contains all form data.
     */
    public function btnValidateDuplication_click($args)
    {
        $MIOLO = MIOLO::getInstance();

        $fields = array();
        try
        {
            if ( $args->sourceCourseId == $args->destinationCourseId
                 && $args->sourceCourseVersion == $args->destinationCourseVersion
                 && $args->sourceTurnId == $args->destinationTurnId
                 && $args->sourceUnitId == $args->destinationUnitId )
            {
                throw new Exception(_M('Cursos de origem e destino devem ser diferentes.', $this->module));
            }

            $busCurriculum = new BusinessAcademicBusCurriculum();

            $filters = new stdClass();
            $filters->courseId = $args->sourceCourseId;
            $filters->courseVersion = $args->sourceCourseVersion;
            $filters->turnId = $args->sourceTurnId;
            $filters->unitId = $args->sourceUnitId;
            $sourceCurriculum = $busCurriculum->searchCurriculum($filters, true);

            if ( count($sourceCurriculum) <= 0 )
            {
                throw new Exception(_M('Curso de origem não possui disciplinas.', $this->module));
            }

            $filters = new stdClass();
            $filters->courseId = $args->destinationCourseId;
            $filters->courseVersion = $args->destinationCourseVersion;
            $filters->turnId = $args->destinationTurnId;
            $filters->unitId = $args->destinationUnitId;
            $destinationCurriculum = $busCurriculum->searchCurriculum($filters, true);

            /*
             * Make sure none of the curricular components on source course are already in destination course
             */
            $curricularComponents = array();
            for ( $i=0; $i<count($sourceCurriculum); $i++ )
            {
                for ( $j=0; $j<count($destinationCurriculum); $j++ )
                {
                    if ( $sourceCurriculum[$i][8] == $destinationCurriculum[$j][8]
                         && $sourceCurriculum[$i][9] == $destinationCurriculum[$j][9] )
                    {
                        $curricularComponents[] = $sourceCurriculum[$i][8] . '/' . $sourceCurriculum[$i][9] . ' - ' . $sourceCurriculum[$i][10];
                    }
                }
            }

            if ( count($curricularComponents) > 0 )
            {
                $msg = _M('As seguintes disciplinas já fazem parte da matriz curricular do curso de destino:', $this->module) . '<br />' . implode('<br />', $curricularComponents);

                throw new Exception($msg);
            }

            $yesAction = $this->getAjaxAction('btnConfirmOperation_click', 'divResult', true);
            $noAction = $this->getAjaxAction(null, 'divResult', true);
            $confirmPrompt = MPrompt::confirmation(_M('Verifique os dados da duplicação abaixo e escolha Ok para confirmar a operação ou Cancelar para desistir.', $this->module), $yesAction, $noAction);

            $fields[] = $confirmPrompt;

            $alerts = array();

            /*
             * Check if destination course already has a curriculum
             */
            if ( count($destinationCurriculum) > 0 )
            {
                $alerts[] = _M('Curso de destino já possui @1 disciplinas.', $this->module, count($destinationCurriculum));
            }

            $busCourseOccurrence = new BusinessAcademicBusCourseOccurrence(true);

            $sourceCourseOccurrence = $busCourseOccurrence->getCourseOccurrence($args->sourceCourseId, $args->sourceCourseVersion, $args->sourceTurnId, $args->sourceUnitId);
            $destinationCourseOccurrence = $busCourseOccurrence->getCourseOccurrence($args->destinationCourseId, $args->destinationCourseVersion, $args->destinationTurnId, $args->destinationUnitId);

            /*
             * Check if both courses are still alive
             */
            if ( $sourceCourseOccurrence->status != DB_TRUE )
            {
                $alerts[] = _M('Curso de origem está inativo.', $this->module);
            }

            if ( $destinationCourseOccurrence->status != DB_TRUE )
            {
                $alerts[] = _M('Curso de destino está inativo.', $this->module);
            }

            $busCourseVersion = new BusinessAcademicBusCourseVersion();

            $sourceCourseVersion = $busCourseVersion->getCourseVersion($args->sourceCourseId, $args->sourceCourseVersion);
            $destinationCourseVersion = $busCourseVersion->getCourseVersion($args->destinationCourseId, $args->destinationCourseVersion);

            /*
             * Check if both courses have the same number of subdivisions
             */
            if ( $sourceCourseVersion->periodTotal != $destinationCourseVersion->periodTotal )
            {
                $alerts[] = _M('Curso de origem tem @1 períodos, enquanto o curso de destino tem @2 períodos.', $this->module, $sourceCourseVersion->periodTotal, $destinationCourseVersion->periodTotal);
            }

            $busCourse = new BusinessAcademicBusCourse();

            $sourceCourse = $busCourse->getCourse($args->sourceCourseId);
            $destinationCourse = $busCourse->getCourse($args->destinationCourseId);

            /*
             * Check if both courses have the same formation level
             */
            if ( $sourceCourse->knowledgeAreaId != $destinationCourse->knowledgeAreaId )
            {
                $alerts[] = _M('Curso de origem tem nível de formação @1, enquanto curso de destino tem nível de formação @2.', $this->module, $sourceCourse->knowledgeAreaId, $destinationCourse->knowledgeAreaId);
            }

            /*
             * Check if both courses have the same knowledge area
             */
            if ( $sourceCourse->knowledgeAreaId != $destinationCourse->knowledgeAreaId )
            {
                $alerts[] = _M('Curso de origem possui área de conhecimento @1, enquanto curso de destino possui área de conhecimento @2.', $this->module, $sourceCourse->knowledgeAreaId, $destinationCourse->knowledgeAreaId);
            }

            /*
             * Check if both courses have the same education area
             */
            if ( $sourceCourse->educationAreaId != $destinationCourse->educationAreaId )
            {
                $alerts[] = _M('Curso de origem possui área de educação @1, enquanto curso de destino possui área de educação @2.', $this->module, $sourceCourse->educationAreaId, $destinationCourse->educationAreaId);
            }

            if ( count($alerts) > 0 )
            {
                $fields[] = MPrompt::Alert($alerts, 'NONE');
            }

            $columns = array(str_replace('%n', '', $sourceCourseVersion->periodDescription),
                             _M('Código da disciplina', $this->module),
                             _M('Disciplina', $this->module),
                             _M('Tipo de disciplina', $this->module),
                             _M('Créditos', $this->module),
                             _M('Carga horária', $this->module));

            $data = array();
            for ( $i=0; $i<count($sourceCurriculum); $i++ )
            {
                $data[] = array($sourceCurriculum[$i][11], // semester
                                $sourceCurriculum[$i][8] . '/' . $sourceCurriculum[$i][9], // curricular component id and version
                                $sourceCurriculum[$i][10], // curricular component name
                                $sourceCurriculum[$i][18], // curricularComponentTypeDescription
                                $sourceCurriculum[$i][24], // academic credits
                                $sourceCurriculum[$i][25] // academic number hours
                               );
            }

            $fields[] = new MTableRaw(_M('As seguintes disciplinas serão adicionadas ao curso de destino', $this->module), $data, $columns);
        }
        catch ( Exception $e )
        {
            // this is only to clear any content eventually present in divResult
            $fields[] = new MText();
            $this->addError($e->getMessage());
        }

        return $fields;
    }

    public function btnConfirmOperation_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();

        $fields = array();

        try
        {
            $busCurriculum = new BusinessAcademicBusCurriculum();

            if ( ! $busCurriculum->beginTransaction() )
            {
                throw new Exception(_M('Não foi possível criar a transação.', $this->module));
            }

            $filters = new stdClass();
            $filters->courseId = $args->sourceCourseId;
            $filters->courseVersion = $args->sourceCourseVersion;
            $filters->turnId = $args->sourceTurnId;
            $filters->unitId = $args->sourceUnitId;
            $sourceCurriculum = $busCurriculum->searchCurriculum($filters, true);

            for ( $i=0; $i<count($sourceCurriculum); $i++ )
            {
                $newCurriculum = $busCurriculum->getCurriculum($sourceCurriculum[$i][0], true);
                $newCurriculum->curriculumId = null;
                $newCurriculum->courseId = $args->destinationCourseId;
                $newCurriculum->courseVersion = $args->destinationCourseVersion;
                $newCurriculum->turnId = $args->destinationTurnId;
                $newCurriculum->unitId = $args->destinationUnitId;
                $newCurriculum->userName = null;
                $newCurriculum->dateTime = null;
                $newCurriculum->ipAddress = null;

                if ( ! $busCurriculum->insertCurriculum($newCurriculum) )
                {
                    throw new Exception(_M('Erro incluindo nova matriz curricular.', $this->module));
                }
            }
            
            if ( ! $busCurriculum->endTransaction() )
            {
                throw new Exception(_M('Não foi possível efetivar a transação.', $this->module));
            }

            $info = _M('Matriz curricular duplicada com sucesso.', $this->module) . ' ' . _M('Escolha uma das opções abaixo.', $this->module);
            $prompt = MPrompt::Information($info, 'NONE');
            $opts = array('courseId' => $args->destinationCourseId,
                          'courseVersion' => $args->destinationCourseVersion,
                          'unitId' => $args->destinationUnitId,
                          'turnId' => $args->destinationTurnId);
            $prompt->addButton(_M('Editar matriz curricular duplicada', $this->module), $MIOLO->getActionURL($this->module, 'main:register:curriculum:curriculum', null, $opts));
            $prompt->addButton(_M('Sair', $this->module), $MIOLO->getActionURL($this->module, 'main:process'));

            $fields[] = $prompt;
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
            if ( ! $busCurriculum->undoTransaction() )
            {
                $this->addError(_M('Não foi possível desfazer a transação.', $this->module));
            }
        }

        return $fields;
    }
}
?>