<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Academic calendar
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 14/10/2010
 */
class FrmAcademicCalendar extends SManagementForm
{
    public $_columns;

    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);
        $this->_columns = array(
        _M('Ações', $module),
        _M('Data do evento', $module),
        _M('Haverá aula', $module),
        _M('Descrição', $module),
        _M('Curso', $module),
        _M('Versão', $module),
        _M('Turno', $module),
        _M('Unidade', $module)
    );

        parent::__construct(new AcdAcademicCalendar(), array('calendarYear'), 'BusAcademicCalendar', _M('Calendário acadêmico', 'academic'), $module);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();
            $data = $this->busObject->getAcademicCalendar($pk->calendarYear);
            
            if ( $function != SForm::FUNCTION_DELETE )
            {
                $this->page->onLoad($this->getAjaxAction('generateTable', 'divTable', true));
            }
        }

        // Field calendar year
        $calendarYear = new MTextField('calendarYear', $this->getFormValue('calendarYear', $data->calendarYear), _M('Ano', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), 'Ex: 2035', null, (in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE))));
        $calendarYear->setJsHint(_M('Informe o ano', $module));
        $validators[] = new MIntegerValidator('calendarYear', _M('Ano', $module), 'required');
        $fields[] = $calendarYear;

        // Field description
        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição', $module));
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));
        $fields[] = $description;

        $fields[] = new MSeparator();
        $fields[] = new MDiv('divAcademicCalendar', $field);

        // Base calendar event
        // Event date
        $eventDateLabel = new MText('eventDateLabel', _M('Data do evento', $module) . ':');
        $eventDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $eventDate = new MCalendarField('eventDate', '', null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $hctDate = new MHContainer('hctDate', array($eventDateLabel, $eventDate));

        // Event description
        $eventDescriptionLabel = new MText('labelDescription', _M('Descrição', $module) . ':');
        $eventDescriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $eventDescription = new MMultiLineField('eventDescription', $this->getFormValue('eventDescription', $data->eventDescription), '', 40, 4, 37);
        $eventDescription->setJsHint(_M('Informe a descrição', $module));
        $hctEventDescriptionement = new MHContainer('hctObservation', array($eventDescriptionLabel, $eventDescription));

        // Have class
        $haveClassLabel = new MText('haveClassLabel', _M('Não haverá aula', $module) . ':');
        $haveClassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $haveClass = new MCheckBox('haveClass', 'f', '', false);
        $hctHaveClass = new MHContainer('hctHaveClass', array($haveClassLabel, $haveClass));

        if ( (MIOLO::_REQUEST('event') == 'tbBtnSave:click') || (in_array($function, array(SForm::FUNCTION_UPDATE))) )
        {
            if( MIOLO::getCurrentModule() == 'pedagogico' )
            {
                $fields[] = new sEscolha('ocorrenciacursoid', null, _M('Ocorrência de curso'), new AcpOcorrenciaCursoLookup());
                $fields[] = new MSpacer();
            }
            else
            {
                /*
                * Course occurrence lookup
                */
               $courseOccurrenceLookup = new SCourseOccurrenceLookup();
               $fields[] = $courseOccurrenceLookup;
            }
            
        }

        $button1 = new MButton('btnNewEventCalendar', _M('Adicionar', $module), $this->getAjaxAction('generateTable', 'divTable', true, array('action' => 'INSERT')) . '; document.forms[0].reset();');
        $button2 = new MButton('btnResetEventCalendar', _M('Limpar', $module), 'javascript:document.forms[0].reset();');
        $button = new MDiv('divButtons', array($button1, $button2));
        $button->addBoxStyle('text-align', 'center');

        $dataTable = array(array());

        $table = new MTableRaw(_M('Eventos', $module), $dataTable, $this->_columns);
        $divTable = new MDiv('divTable', $table);

        $base[] = new MBaseGroup('baseCalendarEvent', _M('Calendário de eventos', $module), array($hctDate, $hctEventDescriptionement, $hctHaveClass, $button, $divTable), 'vertical');
        $fields['baseCalendar'] = new MDiv('divCalendarEvent', $base);

        if ( $function == SForm::FUNCTION_INSERT )
        {
            $js = " document.getElementById('divCalendarEvent').style.display = 'none';";
            $this->addJsCode($js);
        }
        $fields[] = new MDiv('divTable', null);

        parent::defineFields($fields, $validators, $data);
    }

    public function tbBtnSave_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        // Business academic calendar
        $busCalendar = new BusinessAcademicBusAcademicCalendar();

        // Get data fields
        $data = $this->getData();

        // Function insert
        if ( $function == SForm::FUNCTION_INSERT )
        {
            $filter = new stdClass();
            $filter->calendarYear = $data->calendarYear;
            $validate = $busCalendar->searchAcademicCalendar($filter);

            // Valid this academic calendar year
            if ( count($validate) > 0 )
            {
                $msg = _M('Já existe um calendário acadêmico para o ano letivo @1, digite um ano válido.', $module, $data->calendarYear);
                
                $goto = MIOLO::getCurrentURL();
                $goto = str_replace('&amp;function=insert&amp;event=tbBtnSave:click', '', $goto);
                
                $MIOLO->error($msg, $goto);
            }
            else if ( strlen($data->calendarYear) > 0 && !preg_match('/[0-9]{4}/', $data->calendarYear) )
            {
                $this->AddError(_M('Epa! O ano digitado está inválido, utilize o formato AAAA, ex.: 2012.'));
            }
            else
            {
                // Insert academic calendar
                $ok = $busCalendar->insertAcademicCalendar($data);
                if ( $ok )
                {
                    // Hidden academic calendar fields
                    $js = " document.getElementById('divAcademicCalendar').style.display = 'none';";
                    $this->addJsCode($js);
                    // Disable toolbar save button
                    $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
                    // Add message info the sucessfully insert
                    $msg = _M('O calendário acadêmico para o ano @1 foi inserido com sucesso, introduzir as datas que não haverá aula.', $module, $data->calendarYear);
                    $this->addInfo($msg, $MIOLO->getActionURL($module, $action));
                    // Enable academic calendar event fields
                    $js = " document.getElementById('divCalendarEvent').style.display = 'block';";
                    $this->addJsCode($js);
                }
                else
                {
                    $msg = _M('Erro ao inserir o registro', $module);
                    $MIOLO->error($msg);
                }
            }
        }

        // Function update
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            // Update this register
            $ok = $busCalendar->updateAcademicCalendar($data);

            if ( $ok )
            {
                // Hidden academic calendar fields
                $js = " document.getElementById('divAcademicCalendar').style.display = 'none';";
                $this->addJsCode($js);
                // Disable toolbar save button
                $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
                // Add message info the sucessfully update
                $msg = _M('O calendário acadêmico para o ano @1 foi atualizado com sucesso.', $module, $data->calendarYear);
                $this->addInfo($msg, $MIOLO->getActionURL($module, $action));
                // Enable academic calendar event fields
                $js = " document.getElementById('divCalendarEvent').style.display = 'block';";
                $this->addJsCode($js);
            }
            else
            {
                $msg = _M('Erro ao atualizar o registro', $module);
                $this->addError($msg);
            }
        }
    }

    /**
     * Function to generate the table with data
     */
    public function generateTable($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        // Business academic event
        $busEvent = new BusinessAcademicBusAcademicCalendarEvent();

        // Function insert
        if ( $args->action == 'INSERT' )
        {
            if ( strlen($args->eventDate) > 0 )
            {
                // Valid year
                $date = explode('/', $args->eventDate);
                $year = $date[2];

                if ( $year != $args->calendarYear )
                {
                    $msg = _M('Data inválida para calendário acadêmico de @1.', $module, $args->calendarYear);
                    $this->addAlert($msg);
                    $msg = null;
                }
                else
                {
                    if ( strlen($args->courseId) > 0 ) // Se foi selecionado algum curso
                    {
                        // Filter
                        $filters = new StdClass();
                        $filters->eventDate = $args->eventDate;
                        $filters->courseId = $args->courseId;
                        $filters->courseVersion = $args->courseVersion;
                        $filters->turnId = $args->turnId;
                        $filters->unitId = $args->unitId;
                        $filters->ocorrenciacursoid = $args->ocorrenciacursoid;

                        // Search this event already
                        $dataEvent = $busEvent->searchAcademicCalendarEvent($filters);
                    }
                    else
                    {
                        // Filter
                        $filters = new StdClass();
                        $filters->eventDate = $args->eventDate;
                        $filters->ocorrenciacursoid = $args->ocorrenciacursoid;

                        // Search this event already
                        $_dataEvent = $busEvent->searchAcademicCalendarEvent($filters);
                    }

                    // Validate this event
                    if ( count($dataEvent) > 0 )
                    {
                        $msg = _M('Já existe um evento na data @1 para este curso.', $module, $args->eventDate);
                        $this->addAlert($msg);
                        $msg = null;
                    }
                    else if ( count($_dataEvent) > 0 )
                    {
                        $msg = _M('Já existe um evento na data @1.', $module, $args->eventDate);
                        $this->addAlert($msg);
                        $msg = null;
                    }
                    else
                    {
                        // Paramters
                        $data = $args;
                        $data->description = $args->eventDescription;
                        $data->haveClass = (strlen($args->haveClass) > 0 ? DB_FALSE : DB_TRUE);

                        
                        //Caso a opção Não haverá aula estiver marcada
                        if ( $data->haveClass == DB_FALSE ) 
                        {
                            $busSchedule = new BusinessAcademicBusSchedule();
                            $busGroup = new BusinessAcademicBusGroup();
                            
                            //Busca se ja existe alguma aula marcada na data selecionada e não permite gravar o evento
                            $filters = new stdClass();
                            $filters->courseId = $data->courseId;
                            $filters->courseVersion = $data->courseVersion;
                            $filters->courseTurnId = $data->turnId;
                            $filters->courseUnitId = $data->unitId;
                            $filters->ocorrenciacursoid = $data->ocorrenciacursoid;
                            $filters->occurrenceDates = array($data->eventDate);
                            
                            $searchSchedule = $busSchedule->searchSchedule($filters);
                            if( count($searchSchedule) > 0 )
                            {                                
                                $msgErr = array();
                                $msgErr[] = '<div style="font-size: 12px; font-weight: bold;">'._M('Não é possível registrar o evento como NÃO HAVERÁ AULA, as seguintes disciplinas possuem aula na data selecionada:').'</div><br>';
                                
                                //Percorre cada horário e exibe a disciplina
                                foreach($searchSchedule  as $cod=>$linha)
                                {     
                                    $groupData = $busGroup->getGroup($linha[1]);
                                    $curricularComponent[$groupData->curriculumCourseName] = $groupData->curriculumCurricularComponentName.", ".$curricularComponent[$groupData->curriculumCourseName];
                                }
                                foreach( $curricularComponent as $curriculumCourseName=>$curricularComponent)
                                {
                                    $msgErr[] = '<div style="font-size: 10px; font-weight: normal;">'.$curriculumCourseName.": <br>".$curricularComponent.'</div>';
                                }
                                $this->addError($msgErr);
                            }
                        }
                        
                        //Caso não ocorreu nenhum erro
                        if( count($msgErr) == 0 )
                        {
                            // Insert the academic calendar event
                            $ok = $busEvent->insertAcademicCalendarEvent($data);

                            if ( $ok )
                            {
                                $msg = _M('O evento para o dia @1 foi adicionado com sucesso.', $module, $data->eventDate);
                            }
                        }
                    }
                }
            }
            else
            {
                $msg = _M('O campo data do evento deve ser preenchido.', $module);
                $this->addAlert($msg);
                $msg = null;
            }
        }

        // Function delete
        if ( $args->action == 'DELETE' )
        {
            $ok = $busEvent->deleteAcademicCalendarEvent($args->academicCalendarEventId);

            if ( $ok )
            {
                $msg = _M('O evento foi removido com sucesso.', $module, $data->eventDate);
            }
        }

        // Table calendar events
        // Filter the calendar event
        $filter = new stdClass();
        $filter->calendarYear = $args->calendarYear;
        // Business calendar event
        $busEvent = new BusinessAcademicBusAcademicCalendarEvent();
        $dataEvent = $busEvent->searchAcademicCalendarEvent($filter, true);
        $opt = SAGU::listTrueFalse(0);

        // Data calendar event
        if ( count($dataEvent) > 0 )
        {
            foreach ( $dataEvent as $row )
            {
                $linkDrop = $this->getAjaxAction('generateTable', 'divTable', true, array('action' => 'DELETE', 'academicCalendarEventId' => $row->academicCalendarEventId), true, false);
                $linkImgDrop = new MImageLink("linkDrop", _M('Excluir', $module), $linkDrop, $MIOLO->getUI()->getImageTheme('smodern', 'button_drop.png'));
   
                    // Data table array
                    $dataTable[] = array(
                        array( $linkImgDrop->generate() ),
                        $row->eventDate,
                        $opt[$row->haveClass],
                        $row->description,
                        $row->courseName,
                        $row->courseVersion,
                        $row->turnDescription,
                    $row->unitDescription
                );
            }
        }

        // Table event
        $fields[] = new MTextLabel('information', $msg);
        $fields[] = new MTableRaw(_M('Eventos', $module), $dataTable, $this->_columns);

        return $fields;
    }
}
?>