<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Curriculum link form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 29/12/2005
 */
class FrmCurriculumLink extends SManagementForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new AcdCurriculumLink(), array( 'curriculumId', 'curriculumLinkId' ), 'BusCurriculumLink');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Utiliza vinculo para matricula
        $vincMatriculaLabel = new MLabel(_M("Utiliza vínculo para matrícula:"));
        $vincMatriculaLabel->setClass('m-caption m-caption-required');
        $vincMatriculaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $vincMatricula = new MRadioButtonGroup('utilizaVinculoParaMatricula_', null, SAGU::listYesNo(0), SAGU::NVL($this->getFormValue('utilizaVinculoParaMatricula_'), 'f'), null, 'horizontal', 'required');
        $vincMatricula->setJsHint(_M("Marque 'SIM' caso deseje utilizar o vínculo para matrícula."));
        $fields[] = new MHContainer('hctVincMatricula', array( $vincMatriculaLabel, $vincMatricula ));

        /*
         * course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $caption = _M('Curso atual', $module);
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, true, null, null, null, true, $caption, 'css');
        // Validadores
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        //Field curricular component
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Disciplina', $module) . ':');
        $curricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLabel->setClass('m-caption m-caption-required');
        $curricularComponentId = new MLookupTextField('curricularComponentId', MIOLO::_REQUEST('curricularComponentId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentVersion, curricularComponentName', $module, 'CurricularComponentInCurriculum', null, array( 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'unitId' => 'unitId', 'turnId' => 'turnId', 'curricularComponentId' => 'curricularComponentId' ), true);
        $curricularComponentId->setJsHint(_M('Informe o código da disciplina', $module));
        $validators[] = new MRequiredValidator('curricularComponentId', _M('Disciplina', $module));
        $curricularComponentVersion = new MTextField('curricularComponentVersion', MIOLO::_REQUEST('curricularComponentVersion'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersion->setJsHint(_M('Informe a versão da disciplina', $module));
        $curricularComponentVersion->setReadOnly(true);
        $curricularComponentName = new MTextField('curricularComponentName', MIOLO::_REQUEST('curricularComponentName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentName->setJsHint(_M('Informe o nome da disciplina do currículo', $module));
        $curricularComponentName->setReadOnly(true);
        $hctCurricularComponent = new MHContainer('hctCurricularComponent', array( $curricularComponentLabel, $curricularComponentId, $curricularComponentVersion, $curricularComponentName ));
        $hctCurricularComponent->setShowLabel(true);
        $courseOccurrenceLookup->addControl(new MSeparator());
        $courseOccurrenceLookup->addControl($hctCurricularComponent);
        $fields[] = new MSeparator();


        /*
         * course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseIdLink', $data->courseIdLink),
            $this->GetFormValue('courseVersionLink', $data->courseVersionLink),
            $this->GetFormValue('turnIdLink', $data->turnIdLink),
            $this->GetFormValue('unitIdLink', $data->unitIdLink)
        );
        $caption = _M('Curso novo', $module);
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, true, 'Link', $lkpRelated, $lkpFilter, true, $caption, 'css');
        // Validadores
        $validators[] = new MRequiredValidator('courseIdLink', _M('Curso de vínculo', $module));
        $validators[] = new MIntegerValidator('courseVersionLink', _M('Versão do curso de vínculo', $module));
        $validators[] = new MIntegerValidator('turnIdLink', _M('Turno de vínculo', $module));
        $validators[] = new MIntegerValidator('unitIdLink', _M('Unidade de vínculo', $module));
        $fields[] = $courseOccurrenceLookup;

        //Field curricular component link
        $curricularComponentLinkLabel = new MText('curricularComponentLinkLabel', _M('Disciplina de vínculo', $module) . ':');
        $curricularComponentLinkLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLinkLabel->setClass('m-caption m-caption-required');
        $curricularComponentLinkId = new MLookupTextField('curricularComponentLinkId', MIOLO::_REQUEST('curricularComponentLinkId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentLinkVersion, curricularComponentLinkName', $module, 'CurricularComponentInCurriculum', null, array( 'courseId' => 'courseIdLink', 'courseVersion' => 'courseVersionLink', 'unitId' => 'unitIdLink', 'turnId' => 'turnIdLink', 'curricularComponentId' => 'curricularComponentLinkId' ), true);
        $curricularComponentLinkId->setJsHint(_M('Informe o código da disciplina de vínculo', $module));
        $validators[] = new MRequiredValidator('curricularComponentLinkId', _M('Códido da disciplina de vínculo', $module));
        $curricularComponentLinkVersion = new MTextField('curricularComponentLinkVersion', MIOLO::_REQUEST('curricularComponentLinkVersion'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentLinkVersion->setJsHint(_M('Informe a versão da disciplina de vínculo', $module));
        $curricularComponentLinkVersion->setReadOnly(true);
        $curricularComponentLinkName = new MTextField('curricularComponentLinkName', MIOLO::_REQUEST('curricularComponentLinkName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentLinkName->setJsHint(_M('Nome da disciplina de vínculo', $module));
        $curricularComponentLinkName->setReadOnly(true);
        $hctCurricularComponentLink = new MHContainer('hctCurricularComponentLink', array( $curricularComponentLinkLabel, $curricularComponentLinkId, $curricularComponentLinkVersion, $curricularComponentLinkName ));
        $hctCurricularComponentLink->setShowLabel(true);
        $courseOccurrenceLookup->addControl(new MSeparator());
        $courseOccurrenceLookup->addControl($hctCurricularComponentLink);


        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     */
    public function tbBtnDelete_confirm($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $curriculumId = MIOLO::_request('curriculumId');
        $curriculumLinkId = MIOLO::_request('curriculumLinkId');

        $business = new BusinessAcademicBusCurriculumLink();
        $ok = $business->deleteCurriculumLink($curriculumId, $curriculumLinkId);

        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação', $module);
            $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), $goto);
        }
        else
        {
            $msg = _M('Erro executando a operação solicitada.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     * */
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $businessCurriculum = new BusinessAcademicBusCurriculum();
        $data = new AcdCurriculumLink();

        //curriculumId
        $filters1->courseId = $this->courseId->value[0];
        $filters1->courseVersion = $this->courseVersion->value;
        $filters1->unitId = $this->unitId->value;
        $filters1->turnId = $this->turnId->value;
        $filters1->curricularComponentId = $this->curricularComponentId->value;
        $filters1->curricularComponentVersion = $this->curricularComponentVersion->value;
        $searchCurriculum = $businessCurriculum->searchCurriculum($filters1);

        if ( count($searchCurriculum) == 1 )
        {
            $data->curriculumId = $searchCurriculum[0][0];
        }

        //curriculumLinkId
        $filters2->courseId = $this->courseIdLink->value[0];
        $filters2->courseVersion = $this->courseVersionLink->value;
        $filters2->unitId = $this->unitIdLink->value;
        $filters2->turnId = $this->turnIdLink->value;
        $filters2->curricularComponentId = $this->curricularComponentLinkId->value;
        $filters2->curricularComponentVersion = $this->curricularComponentLinkVersion->value;
        $searchCurriculum1 = $businessCurriculum->searchCurriculum($filters2);

        if ( count($searchCurriculum1) == 1 )
        {
            $data->curriculumLinkId = $searchCurriculum1[0][0];
        }

        $data->utilizaVinculoParaMatricula = MIOLO::_REQUEST('utilizaVinculoParaMatricula_');

        return $data;
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $function = MIOLO::_REQUEST('function');

        $busCurriculumLink = new BusinessAcademicBusCurriculumLink();

        $data = $this->getTypesData();

        if ( is_null($data->curriculumId) || is_null($data->curriculumLinkId) )
        {
            $this->addError(_M('Não foram encontradas as matrizes curriculares, verifique se as versões dos cursos para as disciplinas estão corretas.', $module));
            return;
        }

        if ( $data->utilizaVinculoParaMatricula == DB_TRUE )
        {
            $busCurriculum = new BusinessAcademicBusCurriculum();
            $curriculumAtual = $busCurriculum->getCurriculum($data->curriculumId);
            $curriculumNovo = $busCurriculum->getCurriculum($data->curriculumLinkId);
            $eletivaOptavida = SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_OPTATIVE');
            
            if ( $curriculumAtual->curricularComponentTypeId == $eletivaOptavida || $curriculumNovo->curricularComponentTypeId == $eletivaOptavida )
            {
                $this->AddError((_M('Não é possível fazer vinculação de disciplinas se uma ou ambas forem optativas/eletivas!')));
                return;
            }

            if ( !BusinessAcademicBusCurriculumLink::verificarDisciplinaNoCurriculumId($data->curriculumId, $data->curriculumLinkId) )
            {
                $this->addError(_M('Ocorreu um erro! Para o utilizar o vínculo para matrícula não é permitido o vínculo de currículos entre disciplinas que já existem na matriz curricular do curso atual.'));
                return;
            }
            
            //Não pode vincular eletivas (exemplo: vincular a disciplina HISTÓRIA DA AMÉRICA com ELETIVA II, vice-versa também)
            $curriculumOriginal = $busCurriculum->getCurriculum($data->curriculumId);
            $curriculumLink = $busCurriculum->getCurriculum($data->curriculumLinkId);

            if ( $curriculumOriginal->curricularComponentTypeId == SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_TYPE_ELECTIVE') ||
                 $curriculumLink->curricularComponentTypeId == SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_TYPE_ELECTIVE') )
            {
                $this->addError(_M("Não é possível vincular disciplinas eletivas/optativas. Pois as disciplinas eletivas/optativas não levam em consideração a configuração de matrícula, portanto não é necessário o vínculo de currículo, senão elas se repetiram na tela de matrícula.", $module));
                return;
            }
        }

        $filters = new stdClass();
        $filters->curriculumId = $data->curriculumId;
        $filters->curriculumLinkId = $data->curriculumLinkId;

        $search = $busCurriculumLink->searchCurriculumLink($filters);
        if ( count($search) > 0 )
        {
            $this->addError(_M('Este vínculo de currículo ja está cadastrado', $module));
        }
        else
        {
            parent::tbBtnSave_click($sender);
        }
    }

}

?>