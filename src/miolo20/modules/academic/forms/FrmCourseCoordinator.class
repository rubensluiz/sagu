<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Course coordinator form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 02/08/2005
 *
 */
class FrmCourseCoordinator extends SManagementForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new AcdCourseCoordinator(), array( 'courseId', 'courseVersionId', 'turnId', 'unitId', 'coordinatorId'), 'BusCourseCoordinator');
    }


    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array( 'update', 'delete' )) )
        {
            $courseId = MIOLO::_REQUEST('courseId');
            $courseVersion = MIOLO::_REQUEST('courseVersion');
            $turnId = MIOLO::_REQUEST('turnId');
            $unitId =  MIOLO::_REQUEST('unitId');
            $coordinatorId = MIOLO::_REQUEST('coordinatorId');

            $business = new BusinessAcademicBusCourseCoordinator();
            $data = $business->getCourseCoordinator($courseId, $courseVersion, $turnId, $unitId, $coordinatorId);

            /*
             * Course occurrence lookup
             */
            $lkpValue = array(
                $this->GetFormValue('courseId', $data->courseId),
                $this->GetFormValue('courseVersion', $data->courseVersion),
                $this->GetFormValue('turnId', $data->turnId),
                $this->GetFormValue('unitId', $data->unitId)
            );
            $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
            $courseOccurrenceLookup->showRequiredLabel();
            $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
            $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
            $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
            $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
            $fields[]  = $courseOccurrenceLookup;

            $coordinatorName = $this->getFormValue('coordinatorName', $data->coordinatorName);
            $fields[] = new MTextLabel('coordinatorId', $coordinatorId . ' - ' . $coordinatorName, _M('Coordenador', $module));
            $fields[] = new MHiddenField('coordinatorId', $coordinatorId);
            $fields[] = new MHiddenField('coordinatorName', $coordinatorName);
        }
        else
        {

            /*
             * Course occurrence lookup
             */
            $lkpValue = array(
                $this->GetFormValue('courseId', $data->courseId),
                $this->GetFormValue('courseVersion', $data->courseVersion),
                $this->GetFormValue('turnId', $data->turnId),
                $this->GetFormValue('unitId', $data->unitId)
            );
            $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
            $courseOccurrenceLookup->showRequiredLabel();
            $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
            $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
            $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
            $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
            $fields[]  = $courseOccurrenceLookup;

            //Coordinator
            $coordinatorLabel = new MText('coordinatorLabel', _M('Coordenador', $module) . ':');
            $coordinatorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $coordinatorLabel->setClass('m-caption m-caption-required');
            $coordinatorId = new MLookupTextField('coordinatorId', $this->getFormValue('coordinatorId', $data->coordinatorId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'coordinatorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
            $coordinatorId->setJsHint(_M('Informe o código do coordenador', $module));
            $validators[] = new MIntegerValidator('coordinatorId', _M('Coordenador', $module), 'required');
            $coordinatorName = new MTextField('coordinatorName', $this->getFormValue('coordinatorName', $data->coordinatorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $coordinatorName->setJsHint(_M('Nome do coordenador', $module));
            $coordinatorName->setReadOnly(true);
            $hctCoordinator = new MHContainer('hctCoordinator', array( $coordinatorLabel, $coordinatorId, $coordinatorName ));
            $hctCoordinator->setShowLabel(true);
            $fields[] = $hctCoordinator;

            $this->page->onLoad('document.' . $this->name . '.courseId.focus();');
        }

        $opts = array( '1' => _M('Um', $module),
                       '2' => _M('Dois', $module),
                       '3' => _M('Três', $module),
                       '4' => _M('Quatro', $module),
                       '5' => _M('Cinco', $module),
                       '6' => _M('Seis', $module),
                       '7' => _M('Sete', $module),
                       '8' => _M('Oito', $module),
                       '9' => _M('Nove', $module),
                       '10' => _M('Dez', $module));

        $level = new MComboBox('level', $this->getFormValue('level', $data->level), _M('Nível hierárquico', $module), $opts);
        $level->setJsHint(_M('Informe o nível', $module));
        $fields[] = $level;

        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $validators[] = new MDATEDMYValidator('beginDate', '', 'optional');
        $fields[] = $beginDate;

        if ( in_array($function, array( 'update', 'delete' )) )
        {
            $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $endDate->setJsHint(_M('Informe a data final', $module));
            $validators[] = new MDATEDMYValidator('endDate', '', 'optional');
            $fields[] = $endDate;
        }

        $isSendEmailLabel = new MText('isSendEmailLabel', _M('Deve enviar e-mail', $module) . '?');
        $isSendEmailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isSendEmailLabel->setClass('m-caption m-caption-required');

        $isSendEmailOptions = array(array( _M('Sim', $module), 't' ),
                                    array( _M('Não', $module), 'f' ));

        $isSendEmail = strlen($this->getFormValue('isSendEmail', $data->isSendEmail)) > 0 ? $this->getFormValue('isSendEmail', $data->isSendEmail) : DB_FALSE;
        $isSendEmail = new MRadioButtonGroup('isSendEmail', null, SAGU::listTrueFalse(1), $isSendEmail, null, 'horizontal');
        $isSendEmail->setShowLabel(false);

        $hctIsSendEmail = new MHContainer('hctIsSendEmail', array( $isSendEmailLabel, $isSendEmail ));
        $fields[] = $hctIsSendEmail;

        $email = new MTextField('email', $this->getFormValue('email', $data->email), _M('E-mail', $module), 30);
        $email->setJsHint(_M('Informe o e-mail do coordenador', $module));
        $fields[] = $email;

        $expirationLevel = new MTextField('expirationLevel', $this->getFormValue('expirationLevel', $data->expirationLevel), _M('Nível de expiração', $module), 12, _M('horas:minutos', $module));
        $expirationLevel->setJsHint(_M('Informe o nível de expiração', $module));
        $fields[] = $expirationLevel;

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses New from the toolbar
     */
    public function tbBtnNew_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     */
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $opts = array( 'event' => 'tbBtnDelete_confirm',
                       'function' => 'delete',
                       'courseId' => MIOLO::_request('courseId'),
                       'courseVersion' => MIOLO::_request('courseVersion'),
                       'turnId' => MIOLO::_request('turnId'),
                       'unitId' => MIOLO::_request('unitId'),
                       'coordinatorId' => MIOLO::_request('coordinatorId') );

        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $opts = array( 'courseIdS' => MIOLO::_request('courseId'),
                       'courseVersionS' => MIOLO::_request('courseVersion'),
                       'turnIdS' => MIOLO::_request('turnId'),
                       'unitIdS' => MIOLO::_request('unitId'),
                       'coordinatorIdS' => MIOLO::_request('coordinatorId') );
        $goto = SAGU::getStackBackUrl();
        $gotoNo = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Questão', $module);
        $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE'), $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     */
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusCourseCoordinator();
        $ok = $business->deleteCourseCoordinator(count($this->courseId->value)>1 ? $this->courseId->value[0] : $this->courseId->value, $this->courseVersion->value, $this->turnId->value, $this->unitId->value, $this->coordinatorId->value);
        
        if ( $ok )
        {
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação', $module);
            $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), $goto);
        }
        else
        {
            $msg = _M('Erro executando a operação solicitada.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $business = new BusinessAcademicBusCourseCoordinator();

        if ( $function == 'update' )
        {
            $ok = $business->updateCourseCoordinator($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
        }
        else
        {
            $ok = $business->insertCourseCoordinator($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
        }

        if ( $ok )
        {
            // This returns the primary key data to the search form
            // so that the user can see the inserted/updated record.
            $opts = array( 'courseIdS' => $data->courseId,
                           'courseVersionS' => $data->courseVersion,
                           'turnIdS' => $data->turnId,
                           'unitIdS' => $data->unitId,
                           'coordinatorIdS' => $data->coordinatorId );

            if ( $function == 'update' )
            {
                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $MIOLO->getActionURL($module, $action, null, $opts));
            }
            else
            {
                unset($opts);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                $opts = array( 'function' => 'insert' );

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Questão', $module);
                $MIOLO->question($msg, $gotoYes, $goto);
            }
        }
        else
        {
            $msg = _M('Erro executando a operação solicitada.', $module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }
}
?>