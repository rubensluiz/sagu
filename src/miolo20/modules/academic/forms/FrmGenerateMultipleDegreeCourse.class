<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * GenerateMultipleDegree form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 27/01/2006
 *
 */

/**
 * Form to generate Multiple Learning Period
 */
class FrmGenerateMultipleDegreeCourse extends MForm
{
    private $home;
    public $filters;
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Gerar diversos graus acadêmicos', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());
        $this->eventHandler();
    }

    /**
     * Default method to define fields
     */
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnNew');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnSearch');
        $toolBar->hideButton('tbBtnBack');
        $toolBar->hideButton('tbBtnReset');

        //favoritos
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'bookmark-disabled-20x20.png');
        $url           = $MIOLO->getActionURL($module, $this->home, null, array('function' => 'search', 'event' => 'bookmark'));
        

        if ( MIOLO::_request('event') == 'bookmark' )
        {
            $MIOLO->getClass('basic', 'access');
            access::insert('Generate multiple degree', $this->home, 'generateMultipleDegreeCourse-16x16.png', true);
        }
        //fim favoritos
        $fields[] = $toolBar;

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod() );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]       = $periodId;

        //Field formation level
        $business = new BusinessAcademicBusFormationLevel();
        $formationLevelId = new MComboBox('formationLevelId', $this->getFormValue('formationLevelId',$data->formationLevelId), _M('Grau de formação',$module), $business->listFormationLevel());
        $formationLevelId->setJsHint(_M('Selecione o grau de formação', $module));
        $fields[] = $formationLevelId;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        $btn1     = new MButton('btnFilter', _M('Filtrar', $module));
        $fields[] = $btn1;
        $fields[] = new MSeparator('');

        $this->setFields($fields);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        $this->filters->formationLevelId = $this->formationLevelId->value;
        $this->filters->periodId         = $this->periodId->value;
        $this->filters->courseId         = $this->courseId->value;
        $this->filters->courseVersion    = $this->courseVersion->value;
        $this->filters->turnId    = $this->turnId->value;
        $this->filters->unitId    = $this->unitId->value;
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     */
    public function btnFilter_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusGenerateMultipleDataInLot();
        $businessC = new BusinessAcademicBusCourse();
        $businessD = new BusinessAcademicBusDegree();

        $this->filters->status = DB_TRUE;
        $courses = $businessC->getCourses($this->filters);

        if ( count($courses) > 0 )
        {
            $fieldsAppearOnGrid = array( null,    //checkbox
                                         0   ,    //Degree id
                                         10  ,    //Degree description
                                         9   ,    //Degree number
                                         11  ,    //Weight
                                         13     );//Parent degree

            foreach ( $courses as $course )
            {
                $filtersDegree->learningPeriodId = $course[0];
                $degreesPerCourse = $businessD->searchDegree($filtersDegree);

                if( count($degreesPerCourse) > 0 )
                {
                    $data[] = array(null);
                    $data[] = array(true, $course[1].' - '.$course[2], $course[3].' / '.$course[4], $course[5] );

                    foreach($degreesPerCourse as $degree)
                    {
                        unset($dataGridLine);

                        foreach($fieldsAppearOnGrid as $field)
                        {
                            $dataGridLine[] = $degree[$field];
                        }

                        $dataGridLine[] = $filtersDegree->learningPeriodId;
                        $data[] = $dataGridLine;
                    }
                }
            }

            if ( count($data) > 0 )
            {
                $btn3     = new MButton('btnInvertSelection', _M('Inverter seleção', $module), 'invertSelection()');
                $this->addField($btn3);

                $grdResults = $MIOLO->getUI()->getGrid($module,'GrdGenerateMultipleDegree', $data);
                $grdResults->setData($data);
                $grdResults->setTitle(_M('Selecione APENAS UM grau pai por curso', $module));
                $this->addField($grdResults);

                $script .= "    function invertSelection()\n    {\n";

                foreach ( $data as $key => $row )
                {
                    if( count($row) > 4 ) //For lines that can be selected ( myRowMethod )
                    {
                        $script .= '        if ( document.' . $this->name . '[\''.$grdResults->name.'Select[' . $row[1] . ']\'].checked == true )' . "\n        {\n";
                        $script .= '            document.' . $this->name . '[\''.$grdResults->name.'Select[' . $row[1] . ']\'].checked = false;' . "\n";
                        $script .= '        }' . "\n        else\n        {\n";
                        $script .= '            document.' . $this->name . '[\''.$grdResults->name.'Select[' . $row[1] . ']\'].checked = true;' . "\n";
                        $script .= '        }' . "\n";
                    }
                }
                $script .= "    }\n";

                $this->page->addJsCode($script);
            }

            $btn1[]     = new MButton('btnNext', _M('Próximo', $module) . ' >>');
            $div1       = new MDiv('div1', $btn1, null, 'align=center');

            $fields[] = $div1;
            $fields[] = new Separator('');

            $this->addField($fields);
        }
        else
        {
            $this->addError(_M('Não foram encontrados cursos ativos coincidentes com os campos selecionados.', $module));
        }
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     */
    public function btnNext_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $learningPeriods = array();
        $learningPeriods1 = $this->getFormValue('gridGenerateMultipleDegreeSelect',$this->gridGenerateMultipleDegreeSelect) ? $this->getFormValue('gridGenerateMultipleDegreeSelect',$this->gridGenerateMultipleDegreeSelect) : array() ;
        $learningPeriods = array_merge($learningPeriods, $learningPeriods1);

        if ( count($learningPeriods) > 0 )
        {
            foreach ( $learningPeriods as $id => $value )
            {
                $learningPeriodVars[$id] = explode(',', $value);
                $countParentDegreeId[] = $learningPeriodVars[$id][1];
            }

            $countSelected = count($countParentDegreeId);

            if( count(array_unique($countParentDegreeId)) < $countSelected )
            {
                $this->addError(_M('Você selecionou MAIS DE UM grau pai para um mesmo curso!', $module));

                $this->btnFilter_click();
            }
            else
            {
                $vars['learningPeriods']  = urlencode(base64_encode(gzcompress(serialize($learningPeriodVars),9)));
                $vars['periodId'] = $this->periodId->value;

                $postAction = substr($action,0,strrpos($action,':')) . ':generateMultipleDegree';
                $this->page->redirect($MIOLO->getActionURL($module, $postAction, null, $vars));
            }
        }
        else
        {
            $this->addError(_M('Você deve selecionar pelo menos um grau pai para iniciar a geração por lotes.', $module));
            $this->btnFilter_click();
        }
    }
}
?>