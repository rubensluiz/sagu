<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Coursed curriculum consultation form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 05/07/2006
 **/

/**
 * Form to generate Multiple Learning Period
 **/
class FrmCoursedCurriculumConsultation extends SForm
{
    private $home;
    public $filters;
    /**
     * Class constructor
     **/
    public function __construct($data)
    {

        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Consulta currículo cursado', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod() );
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]       = $periodId;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[]  = $courseOccurrenceLookup;

        $opts = array ( array(_M('Apenas ativos', $module), 0),
                        array(_M('Ativo e passivo', $module), 1) );

        $pupilStatusLabel = new MText('pupilStatusLabel', _M('Estado dos alunos',$module) . ':');
        $pupilStatusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $pupilStatus = $this->GetFormValue('pupilStatus', $data->pupilStatus) ? $this->GetFormValue('pupilStatus',$data->pupilStatus) : 0;
        $pupilStatus = new MRadioButtonGroup('pupilStatus', '', $opts , $pupilStatus, null, 'horizontal');
        $pupilStatus->SetShowLabel(false);

        $hctPupilStatus = new MHContainer('hctPupilStatus', array($pupilStatusLabel, $pupilStatus));
        $fields[]       = $hctPupilStatus;

        $opts = array ( array(_M('Apenas concluídos', $module), 0),
                        array(_M('Concluídas e matriculadas', $module), 1) );

        $currCompStatusLabel = new MText('currCompLabel', _M('Estado da disciplina',$module) . ':');
        $currCompStatusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $currCompStatus = $this->GetFormValue('currCompStatus', $data->currCompStatus) ? $this->GetFormValue('currCompStatus', $data->currCompStatus) : 0;
        $currCompStatus = new MRadioButtonGroup('currCompStatus', '', $opts , $currCompStatus, null, 'horizontal');
        $currCompStatus->SetShowLabel(false);

        $hctCurrCompStatus = new MHContainer('hctCurrCompStatus', array($currCompStatusLabel, $currCompStatus));
        $fields[]          = $hctCurrCompStatus;

        $btn1     = new MButton('btnList', _M('Lista', $module));
        $fields[] = $btn1;

        $fields[] = new MSeparator('');

        $fields[] = new MContainer('ctGrids');
        
        parent::defineFields( array( 'fields' => $validators, 'validators' => $validators ) );

        self::toolBar();
    }

    /**
     * Event triggered when user clicks on List button
     **/
    public function btnList_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusCoursedCurriculumConsultation();
        $data     = $this->getData();

        $options->pupilStatus    = $data->pupilStatus;
        $options->currCompStatus = $data->currCompStatus;

        $gridData = $business->listCoursedCurriculum($data, $options);

        if (count($business->getErrors()) > 0)
        {
            $this->addError($business->getErrors());
        }
        else
        {
            $grid = $MIOLO->getUI()->getGrid($module, 'GrdCoursedCurriculumConsultation', $gridData);

            //###GRID///is_array($gridData) ? $grid->SetScrollHeight(SAGU::getParameter('BASIC', 'GRID_SCROLL_HEIGHT')) : false;

            $this->addField($grid);
        }
    }

    public function listPupils($sender=null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $curriculumId   = $MIOLO->_request('curriculumId');
        $business       = new BusinessAcademicBusCurriculum();
        $curriculumData = $business->getCurriculum($curriculumId);

        $data               = $this->getData();
        $data->curriculumId = $curriculumId;

        $business = new BusinessAcademicBusCoursedCurriculumConsultation();
        $pupils   = $business->listCoursedCurriculumPupils($data);

        $grid  = $MIOLO->getUI()->getGrid($module, 'GrdCoursedCurriculumConsultationPupils', $pupils);
        $title = _M('Alunos que cursaram', $module) . ': ' . $curriculumData->curricularComponentName;
        $grid->setTitle($title);

        $this->clearFields();
        
        self::toolBar();
               
        $this->addField($grid);

        $arrayData = get_object_vars($data);

        $backUrl = $MIOLO->getActionURL($module, $action, null, $arrayData);
    }
    
    public function toolBar()
    {
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }
}

?>
