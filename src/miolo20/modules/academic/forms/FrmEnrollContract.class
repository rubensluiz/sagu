<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Enroll contract form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdernann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 29/09/2005
 *
 **/

/**
 * Form to manipulate an enroll
 **/
class FrmEnrollContract extends SForm
{
    public $enrollData;    
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $MIOLO = MIOLO::getInstance();

        $this->home = $data->home;        
        $session = $MIOLO->session;
        $loginUid = $session->isRegistered('loginUid') ? $session->getValue('loginUid') : null;
        $loginPasswd = $session->isRegistered('loginPasswd') ? $session->getValue('loginPasswd') : null;
        
        $this->enrollData = $session->isRegistered('enrollData') ? $session->getValue('enrollData') : null;
        $session->unregister('enrollData');

        if ( $session->isRegistered('data') )
        {
            $session->unregister('data');
        }

        parent::__construct( _M('Dados básicos', $module), null, null );

        if ( ! ( SAGU::authenticate($loginUid, $loginPasswd) || $MIOLO->checkAccess('FrmEnrollContract', A_ACCESS, false, true) ) )
        {
            $this->page->redirect($MIOLO->getActionURL($module, substr($action,0,strrpos($action,':')) . ':enroll'));
        }
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        /*
         * Formulario para os atendentes
         */
        if ( $MIOLO->checkAccess('FrmEnrollContract', A_EXECUTE, false, true) )
        {
            $this->page->onLoad('document.' . $this->name . '.contractPersonId.focus();');

            //Field period
            $busPeriod = new BusinessAcademicBusPeriod();
            $periodValue = $this->getFormValue('periodId',$this->enrollData->periodId) ? $this->getFormValue('periodId',$this->enrollData->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID');
            $periodId = new MComboBox('periodId', $periodValue, _M('Código do período', $module), $busPeriod->listPeriod());
            $validators[] = new MRequiredValidator('periodId');
            $fields[] = $periodId;
            $fields[] = new MSeparator();

            //Field person
            $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa',$module) . ':');
            $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractPersonLabel->setClass('m-caption m-caption-required');
            $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$this->enrollData->contractPersonId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo'), $module, 'ActivePersonContract', null, array('personId' => 'contractPersonId'), true);
            $contractPersonId->setJsHint(_M('Informe o código da pessoa',$module));
            $validators[] = new MRequiredValidator('contractPersonId', _M('Pessoa',$module));
            $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->enrollData->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractPersonName->setReadOnly(true);
            $contractPersonName->setJsHint(_M('Nome da pessoa',$module));
            $hctPerson = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));
            $hctPerson->setShowLabel(false);

            //Field contract
            $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato',$module) . ':');
            $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractCourseLabel->setClass('m-caption m-caption-required');
            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $this->enrollData->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'ActiveContract', null, array('personId' => 'contractPersonId'), true);
            $contractId->setJsHint(_M('Informe o código do contrato',$module));
            $validators[] = new MRequiredValidator('contractId', _M('Contrato',$module));
            $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$this->enrollData->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseId->setReadOnly(true);
            $contractCourseId->setJsHint(_M('Código do curso',$module));
            $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->enrollData->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseVersion->setReadOnly(true);
            $contractCourseVersion->setJsHint(_M('Versão do curso',$module));
            $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->enrollData->contractCourseName), '', 30);
            $contractCourseName->setReadOnly(true);
            $contractCourseName->setJsHint(_M('Nome do curso',$module));
            $hctContract = new MHContainer('hctContract', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
            $hctContract->setShowLabel(false);
            
            $bsg1 = new BaseGroup('bsg1', _M('Dados do contrato',$module), array($hctPerson, $hctContract), 'vertical');
            $bsg1->showLabel = true;
            $bsg1->width = '100%';
            $fields[] = $bsg1;

            $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));
        }
        /*
         * Formulario para os alunos
         */
        else
        {

            $personId = $this->getFormValue('personId',$this->enrollData->personId);
            $contractPersonId = new MTextField('contractPersonId', $personId, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractPersonId->setReadOnly(true);
            $fields[] = $contractPersonId;

            $business = new BusinessBasicBusPerson();
            $person   = $business->getPerson($this->enrollData->personId);

            $personName = new MTextField('personName', $this->getFormValue('personName',$person->name), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setReadOnly(true);
            $fields[]   = $personName;

            $business  = new BusinessAcademicBusContract();
            $contracts = $business->listAvailableContractsForEnroll($personId);

            $array = array();
            for ( $i=0; $i<count($contracts); $i++ )
            {
                list ( $contractIdValue,
                       $courseId,
                       $courseVersion,
                       $courseName,
                       $turnId,
                       $unitId ) = $contracts[$i];

                $array[$contractIdValue] = $courseId . ' - ' . $courseName;
            }

            $contractId = new MSelection('contractId', $this->getFormValue('contractId',$this->enrollData->contractId), _M('Curso', $module), $array);
            $validators[] = new MRequiredValidator('contractId');
            $contractId->setAutoSubmit(true);
            $fields[] = $contractId;

            $contractId = $this->getFormValue('contractId',$this->enrollData->contractId);

            if ( strlen($contractId) > 0 )
            {
                if ( $this->enrollData->parcelsNumber == '' )
                {
                    $business = new BusinessAcademicBusContract();
                    $contractData = $business->getContract($contractId);

                    $parcelsNumber->value = $contractData->parcelsNumber;
                }
                
                $periodValue = $this->getFormValue('periodId',$this->enrollData->periodId) ? $this->getFormValue('periodId',$this->enrollData->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID');
                
                $business = new BusinessAcademicBusContract();
                $isFreshman = $business->isFreshmanByPeriod($contractId, $periodValue);
                
                $business = new BusinessAcademicBusPeriodEnrollDate();
                $learningPeriod = $business->listPeriodEnrollDate($contractId, $isFreshman);

                if ( count($learningPeriod) == 1 )
                {
                    $this->enrollData->learningPeriodId = $learningPeriod[0][0];
                    $data->learningPeriodId = $learningPeriod[0][0];
                }

                $learningPeriodId = new MSelection('learningPeriodId', $this->getFormValue('learningPeriodId', $this->enrollData->learningPeriodId), _M('Período', $module), $learningPeriod);
                $validators[]     = new MRequiredValidator('learningPeriodId');
                $flds[]           = $learningPeriodId;

                if ( count($learningPeriod) == 1 )
                {
                    $this->learningPeriodId->value      = $learningPeriod[0][0];
                }

                $divPeriod = new MDiv('divPeriod', $flds, null, 'align=center');
                $fields[]  = $learningPeriodId;
                unset($flds);
            }
        }

        $fields[] = new MSeparator();

        //Error container
        $divError = new MDiv('divError', $lblMsg, null, 'align=left');
        $fields[] = $divError;

        $fields[] = new MSeparator();
        
        //Buttons
        $btn1[] = new MButton('btnNext', _M('Próximo', $module) . ' >>');
        $div1 = new MDiv('div1', $btn1, null, 'align=center');

        $fields[] = $div1;
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Event triggered when user click previous
     **/
    public function btnPrev_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        if ( $MIOLO->checkAccess('FrmEnrollContract', A_EXECUTE, false, true) )
        {
            // formulario de destino para funcionarios
            $postAction = substr($action,0,strrpos($action,':')) . ':enroll';
        }
        else
        {
            $data = $this->getData();

            foreach ( $data as $k => $v )
            {
                $this->enrollData->$k = $v;
            }

            $session = $MIOLO->session;

            $session->setValue('enrollData', $this->enrollData);

            // formulario de destino para alunos
            $postAction = substr($action,0,strrpos($action,':')) . ':enrollPersonData';
        }

        $this->page->redirect($MIOLO->getActionURL($module, $postAction,null,$vars));
    }

    /**
     * Event triggered when user click next
     **/
    public function btnNext_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData();
        
        foreach ( $data as $k => $v )
        {
            $this->enrollData->$k = $v;
        }
        
        $hasErrors = BusinessFinanceBusIncentive::verificaSePossuiIncentivoAditado($data->contractId);
        
        $this->enrollData->className = $data->className_;

        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $busClass = new BusinessAcademicBusClass();

        $filters->periodId = $data->periodId;
        $filters->learningPeriodId = $data->learningPeriodId;

        $hasErrors = false;

        $busContract = new BusinessAcademicBusContract();
        $contract = $busContract->getContract($data->contractId);

        $data->contractCourseId = $this->enrollData->contractCourseId = $contract->courseId;
        $data->contractCourseVersion = $this->enrollData->contractCourseVersion = $contract->courseVersion;
        $data->contractUnitId = $this->enrollData->contractUnitId = $contract->unitId;
        $data->contractTurnId = $this->enrollData->contractTurnId = $contract->turnId;

        $matricula = new Matricula($data->contractId, Matricula::MATRICULA_NORMAL);
        $enrollConfig = $matricula->obterConfiguracoes();

        $vars = array ( 'enrollData' => urlencode(serialize($this->enrollData)) );
        
        $contractLastStatus = $busContract->getContractLastMovementStatus($data->contractId);
        
        //Verifica se o contrato está trancado
        if ( ( ($contractLastStatus->stateContract == SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_LOCKED')) || 
                ($contractLastStatus->inOutTransition == 'O') ) && (!$hasErrors) )
        {
            $this->addError(_M('O contrato selecionado não está disponível para matrícula', $module));
            $hasErrors = true;
        }
        
        // Verifica se possui pendencias no gnuteca
        if ( SAGU::getParameter('BASIC', 'MODULE_GNUTECA_INSTALLED') == 'YES' )
        {
            $busGnuteca = new BusinessGnutecaBusGnutecaToSagu2();
            
            $matricula = new Matricula($data->contractId, Matricula::MATRICULA_NORMAL);
            $enrollConfig = $matricula->obterConfiguracoes();
            
            if ( $busGnuteca->verificaPendenciasGnuteca($enrollConfig->pendenciasGnuteca, $data->contractPersonId, $enrollConfig->bloqueioEmprestimos, $enrollConfig->bloqueioMultas, $enrollConfig->bloqueioPenalidades) )
            {
                $url = $MIOLO->getActionURL('academic', 'main', null, array('personId' => $data->contractPersonId, 'event'=>'btnSearch:click'));
                $lnkAcademicDiverseConsultation = new MLink('lnk'.rand(), _M('Clique aqui', $module), $url, null, 'new');
                $msg = _M('A pessoa possui pendência(s) Nada Consta no Gnuteca. @1 para consultar este(s) débito(s).', $module, $lnkAcademicDiverseConsultation->generate());
                
                if ( $enrollConfig->pendenciasGnuteca == AcdEnrollConfig::SOMENTE_AVISO )
                {
                    $MIOLO->session->setValue('alertPendenciasGnuteca', $msg);
                }
                else
                {
                    $this->AddError($msg);
                    $hasErrors = true;
                }
            }
        }        

        // Business movement contract
        $businessMovementContract = new BusinessAcademicBusMovementContract();
        // Last movement contract
        $lastMovementContract = $businessMovementContract->getLastMovementContract($data->contractId);
        // Verifica se o aluno não está pré-matriculado
        $preEnroll = ($lastMovementContract->stateContractId == SAGU::getParameter('ACADEMIC','STATE_CONTRACT_ID_PRE_ENROLL'));

        if ( SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES' )
        {
            $business = new BusinessFinanceBusGeneralQueries();
            $debt = $business->getDefaulterDebt($data->contractId, false);
        }
        else
        {
            $debt = 0;
        }

        //Verifica se o aluno possui débitos financeiros
        if ( ($debt > 0) && (!$hasErrors) && (!$preEnroll) )
        {
            $url = $MIOLO->getActionURL('finance', 'main', null, array('personId'=>$data->contractPersonId, 'event'=>'btnSearch:click'));
            $financialSituation = new MLink('fin', _M('Clique aqui para consultar este débito.', $module), $url, null, 'new');
            $this->addError(_M('O sistema detectou um débito com a instituição.',$module) . $financialSituation->generate());

            if ( ($MIOLO->checkAccess('FrmEnrollContract', A_ADMIN, false, true)) || ($enrollConfig->blockDebt == DB_FALSE) )
            {
                $this->addError(_M('Se desejar continuar mesmo assim, clique no botão "Próximo" abaixo.', $module));
                // Let administrator ignore the debit message
                $this->addField(new MHiddenField('ignoreDebits','yes'));
                
                $hasErrors = false;
            }
            else 
            {
                $this->addError(_M('Não é possível continuar a matrícula.', $module));
                
                $hasErrors = true;
            }
        }
        
        //FIXME: Verificar ausência de requerimento de matrícula
        $filters->courseId         = $data->contractCourseId;
        $filters->courseVersion    = $data->contractCourseVersion;
        $filters->unitId           = $data->contractUnitId;
        $filters->turnId           = $data->contractTurnId;
        
        $learningData = $busLearningPeriod->searchLearningPeriod($filters);
        
        if ( count($learningData) == 1 )
        {
            $data->learningPeriodId = $learningData[0][0];
        }
        elseif ( count($learningData) >= 2 )
        {
            $msg = _M('@1 períodos letivos cadastrados. Por favor, selecione um para continuar.', $module, count($learningData));
            $lblMsg = new MText('lblMsg', $msg);
            $lblMsg->color = 'red';
            
            foreach ( $learningData as $learningPeriodData )
            {
                $selArray[] = array($learningPeriodData[0], $learningPeriodData[1]);
            }

            $selLearningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo',$module) . ':');
            $selLearningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $selLearningPeriodLabel->setClass('m-caption m-caption-required');
            $selLearningPeriod = new MComboBox('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), '', $selArray);
            $hctSelLearningPeriod = new MHContainer('learningPeriod', array($selLearningPeriodLabel, $selLearningPeriod));
            
            $this->addError($msg);
            $this->divError->addControl($hctSelLearningPeriod);
            
            if ( strlen($this->getFormValue('learningPeriodId', $data->learningPeriodId)) > 0 )
            {
                $data->learningPeriodId = $this->getFormValue('learningPeriodId', $data->learningPeriodId);
            }
            else
            {
                $hasErrors = true;
            }
        }

        if ( (strlen($data->learningPeriodId) == 0) )
        {
            $this->addError(_M('Não foi possível obter o período letivo. Verifique se ele está cadastrado corretamente para este curso e período.', $module));
            $hasErrors = true;
        }
        
        if ( strlen($this->enrollData->learningPeriodId) == 0 )
        {
            $this->enrollData->learningPeriodId = $data->learningPeriodId;
        }
        
        if ( strlen($this->enrollData->learningPeriodId) > 0 )
        {
               $learningPeriodData = $busLearningPeriod->getLearningPeriod($this->enrollData->learningPeriodId);
               
            if ( $learningPeriodData->isClosed == DB_TRUE )
            {
                $this->addError(_M('O período letivo selecionado está fechado, então nenhuma matrícula é permitida. Para continuar o processo de matrícula, reabra o período letivo ou selecione um período aberto.', $module));
                $hasErrors = true;
            }
        }

        if ( !$hasErrors || $this->getFormValue('ignoreDebits') == 'yes' )
        {
            //$vars = array ( 'returnTo' => $action,
            //                'enrollData' => urlencode(serialize($this->enrollData)) );
            $session = $MIOLO->session;
            $session->setValue('enrollData', $this->enrollData);
            $session->setValue('returnTo', $action);
                            
            $postAction = substr($action,0,strrpos($action,':')) . ':enrollCurricularComponents';
            
            $this->page->redirect($MIOLO->getActionURL($module, $postAction, null, $vars));
        }
    }
}

?>
