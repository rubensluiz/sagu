<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Augusto A. Silva [augusto@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Augusto A. Silva [augusto@solis.coop.br]
 *
 * @since
 * Class created on 06/09/2013
 */
class FrmTransferenciaDeVersaoDadosContratuais extends SStepByStepForm
{
    public function __construct($steps = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        }
    }

    /**
     * Default method to define fields
     */
    public function createFields()
    {  
        $MIOLO   = MIOLO::getInstance();
        $session = $MIOLO->getSession();
        
        if ($this->isFirstAccess())
        {
            $this->cleanStepData();
            
            $MIOLO->session->set('allData', null);

            //Limpa as informações dos aproveitamentos de disciplinas utilizados no passo 2
            $session->setValue('makeToGroup', '');
            $session->setValue('enrollId', '');
            $session->setValue('numberHours', '');
            $session->setValue('notes', '');
            $session->setValue('note', '');
            $session->setValue('curricularComponent', '');
        }
        
        $data = $this->getStepData();
        
        $value = $data->transferencia;
        $radioUnitaria = new MRadioButton('transferencia', TRANSFERENCIA_UNITARIA, '', ($value == TRANSFERENCIA_UNITARIA || is_null($value)) ? true : false, "Transferir apenas um contrato");
        $radioUnitaria->addAttribute('onChange', $this->getAjaxAction('obterCamposDeTransferencia', 'divTransferecia', false, array('emLote' => DB_FALSE)));
        $radioEmLote = new MRadioButton('transferencia', TRANSFERENCIA_EM_LOTE, '', $value == TRANSFERENCIA_EM_LOTE ? true : false, "Transferir vários contratos de uma ocorrência de curso");
        $radioEmLote->addAttribute('onChange', $this->getAjaxAction('obterCamposDeTransferencia', 'divTransferecia', false, array('emLote' => DB_TRUE)));
        $transContainer = new MHContainer('transContainer', array($radioUnitaria, $radioEmLote));
        $fields[] = $transContainer;
        
        $args = new stdClass();
        $args->emLote = $value ? ( $value == TRANSFERENCIA_EM_LOTE ? DB_TRUE : DB_FALSE ) : null;
        $fields[] = new MDiv('divTransferecia', $this->obterCamposDeTransferencia($args));
        
        $this->setFields($fields);
    }
    
    /**
     * Método controlador de tipo de transferência.
     * 
     * @param stdClass $args
     * @return array
     */
    public function obterCamposDeTransferencia($args)
    {
        if ( $args->emLote == DB_TRUE )
        {
            $campos = $this->obterCamposDeTransferenciaEmLote();
        }
        else
        {
            $campos = $this->obterCamposDeTransferenciaUnitaria();
        }
        
        return $campos;
    }
    
    /**
     * Retorna os campos necessários para uma transferência de versão de curso em lote.
     * 
     * @return array
     */
    public function obterCamposDeTransferenciaEmLote()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = $MIOLO->getCurrentModule();

        //Load data
        $data = $this->getStepData();
        
        //Field course
        $curriculumCourseLabel = new MText('curriculumCourseLabel', _M('Curso',$module) . ':');
        $curriculumCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseLabel->setClass('m-caption m-caption-required');
        $curriculumCourseId = new MLookupTextField('courseId', $data->courseId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'courseId, curriculumCourseVersion, curriculumCourseName, curriculumCourseTurnId, curriculumCourseTurnDescription, curriculumCourseUnitId, curriculumCourseUnitDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $curriculumCourseId->setJsHint(_M('Informe o código do curso', $module));
        $validators[] = new MRequiredValidator('curriculumCourseId', _M('Curso',$module));
        $curriculumCourseName = new MTextField('curriculumCourseName', $data->curriculumCourseName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseName->setJsHint(_M('Nome do curso', $module));
        $curriculumCourseName->setReadOnly(true);
        $curriculumCourseVersion = new MTextField('curriculumCourseVersion', $data->curriculumCourseVersion, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseVersion->setJsHint(_M('Versão do curso', $module));
        $curriculumCourseVersion->setReadOnly(true);
        $hctCurriculumCourse = new MHContainer('hctCurriculumCourse', array($curriculumCourseLabel, $curriculumCourseId, $curriculumCourseVersion, $curriculumCourseName));
        $hctCurriculumCourse->setShowLabel(true);

        //Field unit
        $curriculumCourseUnitLabel = new MText('curriculumCourseUnitLabel', _M('Unidade', $module) . ':');
        $curriculumCourseUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseUnitId = new MTextField('curriculumCourseUnitId', $data->curriculumCourseUnitId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseUnitId->setJsHint(_M('Código da unidade', $module));
        $curriculumCourseUnitId->setReadOnly(true);
        $curriculumCourseUnitId->addAttribute('onBlur', $this->getAjaxAction('obterCampoDeVersoes', 'divResponse', false, $data));
        $curriculumCourseUnitDescription = new MTextField('curriculumCourseUnitDescription', $data->curriculumCourseUnitDescription, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseUnitDescription->setJsHint(_M('Descrição da unidade', $module));
        $curriculumCourseUnitDescription->setReadOnly(true);
        $hctCurriculumCourseUnit = new MHContainer('hctCurriculumCourseUnit', array($curriculumCourseUnitLabel, $curriculumCourseUnitId, $curriculumCourseUnitDescription));
        $hctCurriculumCourseUnit->setShowLabel(true);

        //Field turn
        $curriculumCourseTurnLabel = new MText('curriculumCourseTurnLabel', _M('Turno', $module) . ':');
        $curriculumCourseTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseTurnId = new MTextField('curriculumCourseTurnId', $data->curriculumCourseTurnId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseTurnId->setJsHint(_M('Código do turno', $module));
        $curriculumCourseTurnId->setReadOnly(true);
        $curriculumCourseTurnId->addAttribute('onBlur', $this->getAjaxAction('obterCampoDeVersoes', 'divResponse', false, $data));
        $curriculumCourseTurnDescription = new MTextField('curriculumCourseTurnDescription', $data->curriculumCourseTurnDescription, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseTurnDescription->setJsHint(_M('Descrição do turno', $module));
        $curriculumCourseTurnDescription->setReadOnly(true);
        $hctCurriculumCourseTurn = new MHContainer('hctCurriculumCourseTurn', array($curriculumCourseTurnLabel, $curriculumCourseTurnId, $curriculumCourseTurnDescription));
        $hctCurriculumCourseTurn->setShowLabel(true);

        // Field class
        $pupilClassLabel = new MText('classLabel', _M('Turma', $module) . ':');
        $pupilClassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $pupilClassLabel->setClass('m-caption');
        $pupilClassId = new MLookupTextField('classId', $this->getFormValue('classId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('pupilClassName'), $module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'curriculumCourseVersion'), true);
        $pupilClassId->setJsHint(_M('Informe a turma', $module));
        $pupilClassName = new MTextField('pupilClassName', $this->getFormValue('pupilClassName'), '', 30);
        $pupilClassName->setReadOnly(true);
        $pupilClassName->setJsHint(_M('Nome da turma', $module));
        $hctPupilClass = new MHContainer('hctpupilClass', array($pupilClassLabel, $pupilClassId, $pupilClassName));
        $hctPupilClass->setShowLabel(false);

        //Basegroup Contrato a transferir
        $fields[] = new MBaseGroup('bsgContractToTransfer', _M('Ocorrência de curso a transferir', $module), array($hctCurriculumCourse, $hctCurriculumCourseUnit, $hctCurriculumCourseTurn, $hctPupilClass), 'vertical');
        
        //Basegroup Curso de destino
        $fields[] = $this->obterBaseGroupDeVersaoDeDestino($data);

        //Basegroup Aproveitamentos
        $fields[] = $this->obterBaseGroupDeAproveitamentos();
        
        $fields[] = new MSpacer(); 
        $this->setValidators($validators);
        
        return $fields;
    }
    
    /**
     * Retorna os campos necessários para uma transferência de um único contrato.
     * 
     * @return array
     */
    public function obterCamposDeTransferenciaUnitaria()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = $MIOLO->getCurrentModule();

        //Load data
        $data = $this->getStepData();

        // Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription', 'pupilClassId', 'pupilClassName'), $module, 'ActivePersonContract', null, array('personId' => 'personId'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $contractPersonId->addAttribute('onBlur', $this->getAjaxAction('obterCampoDeVersoes', 'divResponse', false, $data));
        $validators[] = new MRequiredValidator('personId', _M('Pessoa', $module));
        $contractPersonName = new MTextField('personName', $this->getFormValue('personName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(false);

        // Field contract
        $contractIdValue = $this->getFormValue('contractId', $data->contractId);
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $contractIdValue, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'pupilClassId', 'pupilClassName'), $module, 'ActiveContract', null, array('personId' => 'personId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $contractId->addAttribute('onBlur', $this->getAjaxAction('obterCampoDeVersoes', 'divResponse', false, $data));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato', $module));
        $contractCourseId = new MTextField('courseId', $this->getFormValue('courseId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseName = new MTextField('courseName', $this->getFormValue('courseName'), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $hctContractCourse = new MHContainer('hctContractCourse', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContractCourse->setShowLabel(false);

        // Field unit
        $contractUnitLabel = new MText('contractUnitLabel', _M('Unidade', $module) . ':');
        $contractUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractUnitId = new MTextField('unitId', $this->getFormValue('unit'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractUnitId->setReadOnly(true);
        $contractUnitId->setJsHint(_M('Código da unidade', $module));
        $contractUnitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractUnitDescription->setReadOnly(true);
        $contractUnitDescription->setJsHint(_M('Descrição da unidade', $module));
        $hctContractUnit = new MHContainer('hctContractUnit', array($contractUnitLabel, $contractUnitId, $contractUnitDescription));
        $hctContractUnit->setShowLabel(false);
        
        // Field turn
        $contractTurnLabel = new MText('contractTurnLabel', _M('Turno', $module) . ':');
        $contractTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractTurnId = new MTextField('turnId', $this->getFormValue('turnid'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractTurnId->setReadOnly(true);
        $contractTurnId->setJsHint(_M('Código do turno', $module));
        $contractTurnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractTurnDescription->setReadOnly(true);
        $contractTurnDescription->setJsHint(_M('Descrição do turno', $module));
        $hctContractTurn = new MHContainer('hctContractTurn', array($contractTurnLabel, $contractTurnId, $contractTurnDescription));
        $hctContractTurn->setShowLabel(false);
        
        $hctContract = new MVContainer('hctContract', array($hctContractCourse, $hctContractUnit, $hctContractTurn));

        // Field pupil class
        $pupilClassLabel = new MText('pupilClassLabel', _M('Turma do aluno', $module) . ':');
        $pupilClassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $pupilClassLabel->setClass('m-caption m-caption-required');
        $pupilClassId = new MLookupTextField('pupilClassId', $this->getFormValue('pupilClassId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('pupilClassName'), $module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $pupilClassId->setJsHint(_M('Informe a turma do aluno', $module));
        $validators[] = new MRequiredValidator('pupilClassId', _M('Turma do aluno', $module));
        $pupilClassName = new MTextField('pupilClassName', $this->getFormValue('pupilClassName'), '', 30);
        $pupilClassName->setReadOnly(true);
        $pupilClassName->setJsHint(_M('Nome da turma do aluno', $module));
        $hctPupilClass = new MHContainer('hctpupilClass', array($pupilClassLabel, $pupilClassId, $pupilClassName));
        $hctPupilClass->setShowLabel(false);

        //Basegroup Contrato a transferir
        $fields[] = new MBaseGroup('bsgContractToTransfer', _M('Contrato a transferir', $module), array($hctPerson, $hctContract, $hctPupilClass), 'vertical');
        
        //Basegroup Curso de destino
        $fields[] = $this->obterBaseGroupDeVersaoDeDestino($data);

        //Basegroup Aproveitamentos
        $fields[] = $this->obterBaseGroupDeAproveitamentos();
        
        $fields[] = new MSpacer(); 
        $this->setValidators($validators);
        
        return $fields;
    }
    
    /**
     * Retorna base group de seleção da versão do curso de destino.
     * 
     * @param stdClass $data
     * @return \MBaseGroup
     */
    public function obterBaseGroupDeVersaoDeDestino($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        //Nova versão.
        $contract = new stdClass();
        $contract->contractId = $this->getFormValue('contractId', $data->contractId);
        $contract->courseVersionNew = $this->getFormValue('courseVersionNew', $data->courseVersionNew);
        $flds2[] = new MDiv('divResponse', $this->obterCampoDeVersoes($contract));
        
        //Período
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodLabel = new MText('periodLabel', _M('Período da transferência:', $module));
        $periodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $periodLabel->setClass('m-caption m-caption-required');
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), null, $businessPeriod->listPeriod(), true );
        $flds2[] = new MHContainer('periodHC', array($periodLabel, $periodId));
        $validators[] = new MRequiredValidator('periodId', _M('Período', $module));
        
        //Motivo da transferência
        $busReason = new BusinessAcademicBusReason();
        $reasons = $busReason->listReasonByStateContract(SAGU::getParameter($module, 'STATE_CONTRACT_ID_TRANSFERENCIA_VERSAO'));
        
        $resonLabel = new MText('reasonLabel', _M('Motivo:', $module));
        $resonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $resonLabel->setClass('m-caption m-caption-required');
        $reasonId = new MSelection('reasonId', $data->reasonId, null, $reasons);
        $flds2[] = new MHContainer('reasonHC', array($resonLabel, $reasonId));
        $validators[] = new MRequiredValidator('reasonId', _M('Motivo'));
        
        //Turma de destino
        $flds2[] = new SHiddenField('allClasses', DB_TRUE); // Para trazer todas as turmas independente a unidade logada.
        $destinationClassLabel = new MText('destinationClassLabel', _M('Nova turma', $module) . ':');
        $destinationClassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationClassLabel->setClass('m-caption m-caption-required');
        $destinationClassId = new MLookupTextField('destinationClassId', $data->destinationClassId, _M('Nova turma', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'destinationClassDescription', 'academic', 'Class', null, array('courseId'=>'courseId', 'courseVersion'=>'courseVersionNew', 'allClasses'=>'allClasses'), !$this->page->isPostBack());
        $destinationClassId->setJsHint(_M('Informe o código do turma', $module));
        $destinationClassDescription = new MTextField('destinationClassDescription', $data->destinationClassDescription, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationClassDescription->setJsHint(_M('Descrição do turma', $module));
        $destinationClassDescription->setReadOnly(true);
        $hctClass = new MHContainer('hctClass', array($destinationClassLabel, $destinationClassId, $destinationClassDescription));
        $hctClass->setShowLabel(false);
        $flds2[] = $hctClass;
        $validators[] = new MRequiredValidator('destinationClassId', _M('Nova turma', $module));
        $this->setValidators($validators);
        
        return new MBaseGroup('bsgVersionDestination', _M('Versão de destino', $module), $flds2, 'vertical');
    }
    
    /**
     * Retorna basegroup de seleção de tipo de aproveitamentos.
     * 
     * @return \MBaseGroup
     */
    public function obterBaseGroupDeAproveitamentos()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $stepData = $this->getStepDataByForm(__CLASS__);
        
        $takeCurriculumLabel = new MText('takeCurriculumLabel', _M('Aproveitar disciplinas comuns entre os cursos:'));
        $takeCurriculumLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $takeCurriculum = new MCheckBox('takeCurriculum', DB_TRUE, null, ($stepData->takeCurriculum == DB_TRUE) ? true : false);
        $flds[] = new MHContainer('takeHC', array($takeCurriculumLabel, $takeCurriculum));
        
        $takeCurriculumLinksLabel = new MText('takeCurriculumLinksLabel', _M('Aproveitar vínculos de disciplinas (equivalências):'));
        $takeCurriculumLinksLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $takeCurriculumLinks = new MCheckBox('takeCurriculumLinks', DB_TRUE, null, ($stepData->takeCurriculumLinks == DB_TRUE) ? true : false);
        $flds[] = new MHContainer('takeLinkHC', array($takeCurriculumLinksLabel, $takeCurriculumLinks));
        
        return new MBaseGroup('bsgExploitations', _M('Aproveitamentos', $module), $flds, 'vertical');
    }
    
    /**
     * Retorna a combobox de verções do curso.
     * 
     * @param type $args
     * @return \MHContainer
     */
    public function obterCampoDeVersoes($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        $busContract = new BusinessAcademicBusContract();
        
        $versions = array();
        
        if ( strlen($args->contractId) > 0 )
        {            
            $contract    = $busContract->getContract($args->contractId);
            $versions    = $this->listCourseVersion($contract->courseId, $contract->turnId, $contract->unitId);
        }
        else if ( strlen($args->courseId) > 0 && strlen($args->curriculumCourseUnitId) > 0 && strlen($args->curriculumCourseTurnId) > 0 )
        {
            $versions = $this->listCourseVersion($args->courseId, $args->curriculumCourseTurnId, $args->curriculumCourseUnitId);
        }        
        else if ( strlen($args->personId) > 0 )
        {
            $contracts = $busContract->getPersonContracts($args->personId);
            $contract = $busContract->getContract($contracts[0][0]);
            if ( $contract )
            {
                $versions = $this->listCourseVersion($contract->courseId, $contract->turnId, $contract->unitId);
            }
        }
        
        $courseVersionNewLabel = new MText('courseVersionNewLabel', _M('Versão do curso:', $module));
        $courseVersionNewLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseVersionNewLabel->setClass('m-caption m-caption-required');
        $courseVersionNew = new MComboBox('courseVersionNew', $args->courseVersionNew, null, $versions);
        $courseVersionNewContainer = new MHContainer('courseVersionNewContainer', array($courseVersionNewLabel, $courseVersionNew));
        
        return $courseVersionNewContainer;
    }
    
    /**
     * Retorna todas versões diponíveis filtrando por curso turno e unidade.
     * 
     * @param String $courseId
     * @param int $turnId
     * @param int $unitId
     * @return array
     */
    public function listCourseVersion($courseId, $turnId, $unitId)
    {
        $filters = new stdClass();
        $filters->courseId = $courseId;
        $filters->unitId   = $unitId;
        $filters->turnId   = $turnId;

        $busCourseOccurrence = new BusinessAcademicBusCourseOccurrence();
        
        return $busCourseOccurrence->listCourseVersions($filters);
    }

    /**
     * Ação do botão próxima etapa
     * Valida algumas informações antes de avançar
     * para o próximo passo
     * @param type $args
     */
    public function nextStepButton_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');
        $session = $MIOLO->getSession();

        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();

        //Dados do formulário
        $data = $this->getData();

        try
        {  
            // Validações somente feitas se for transferência de um contrato, caso contrário estas validações devem ser feitas no próximo passo.
            if ( $data->transferencia != TRANSFERENCIA_EM_LOTE )
            {
                //Valida se a versão do curso de destino é diferente da versão atual.
                if ($data->courseVersion == $data->courseVersionNew)
                {
                    $message = _M('O contrato já está na versão @1 do curso.', $module, $data->courseVersionNew);
                    throw new Exception($message);
                }

                //Valida se o aluno ja possui contrato ativo no curso de destino
                $filters = new stdClass();
                $filters->personId = $data->personId;
                $filters->courseId = $data->courseId;
                $filters->courseVersion = $data->courseVersionNew;
                $filters->turnId = $data->turnId;
                $filters->unitId = $data->unitId;
                $filters->isClosed = DB_FALSE;

                $busContract = new BusinessAcademicBusContract();
                $searchActiveContract = $busContract->searchContract($filters);

                if( count($searchActiveContract) > 0 )
                {
                    $message = _M('O aluno já possui contrato ativo para o curso na versão @1.', $module, $data->courseVersionNew);
                    throw new Exception($message);
                }
                
                //Obtém o período letivo para o novo contrato                
                $lpFilters = new stdClass();
                $lpFilters->courseId = $data->courseId;
                $lpFilters->courseVersion = $data->courseVersionNew;
                $lpFilters->turnId = $data->turnId;
                $lpFilters->unitId = $data->unitId;
                $lpFilters->periodId = $data->periodId;            

                $newLearningPeriod = $busLearningPeriod->searchLearningPeriod($lpFilters);                        
                $oldLearningPeriod = $busLearningPeriod->getLearningPeriodByContractAndPeriod($data->contractId, $data->periodId);
            }
            else
            {                       
                $lpFilters = new stdClass();
                $lpFilters->courseId = $data->courseId;
                $lpFilters->courseVersion = $data->courseVersionNew;
                $lpFilters->turnId = $data->curriculumCourseTurnId;
                $lpFilters->unitId = $data->curriculumCourseUnitId;
                $lpFilters->periodId = $data->periodId;            

                $newLearningPeriod = $busLearningPeriod->searchLearningPeriod($lpFilters);
                
                $lpFilters->courseVersion = $data->curriculumCourseVersion;
                $oldLearningPeriod = $busLearningPeriod->searchLearningPeriod($lpFilters);
            }
            
            if ( count($newLearningPeriod) <= 0 )
            {
                throw new Exception(_M('Nenhum período letivo encontrado para o curso na versão @1.', $module, $data->courseVersionNew));
            }
            
            if ( count($oldLearningPeriod) <= 0 )
            {
                throw new Exception(_M('Nenhum período letivo encontrado para o curso selecionado na versão de origem.', $module));
            }
            
            parent::nextStepButton_click($args);
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
    
    /**
     * Retorna os dados informados no formulário.
     * 
     * @return stdClass
     */
    public function getData()
    {        
        $data = parent::getData();
        
        // Para transferência em lote.
        $data->curriculumCourseVersion         = MIOLO::_REQUEST('curriculumCourseVersion');
        $data->curriculumCourseTurnId          = MIOLO::_REQUEST('curriculumCourseTurnId');
        $data->curriculumCourseUnitId          = MIOLO::_REQUEST('curriculumCourseUnitId');
        $data->curriculumCourseName            = MIOLO::_REQUEST('curriculumCourseName');
        $data->curriculumCourseUnitDescription = MIOLO::_REQUEST('curriculumCourseUnitDescription');
        $data->curriculumCourseTurnDescription = MIOLO::_REQUEST('curriculumCourseTurnDescription');
        $data->classId = MIOLO::_REQUEST('classId');
        
        return $data;
    }
}
?>