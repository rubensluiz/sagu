<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Curriculum Conversion form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/01/2006
 */

/**
 * Form to manipulate a curriculum conversion
 */
class FrmCurriculumConversion extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct(_M('Conversão do currículo', $module), NULL, NULL);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        /*
         * old course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseIdOld', $data->courseIdOld),
            $this->GetFormValue('courseVersionOld', $data->courseVersionOld),
            $this->GetFormValue('turnIdOld', $data->turnIdOld),
            $this->GetFormValue('unitIdOld', $data->unitIdOld)
        );
        $caption = _M('Curso atual', $module);
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, true, 'Old', $lkpRelated, $lkpFilter, true, $caption, 'css');
        // Validadores
        $validators[] = new MRequiredValidator('courseIdOld', _M('Curso atual', $module));
        $validators[] = new MIntegerValidator('courseVersionOld', _M('Versão do curso atual', $module));
        $validators[] = new MIntegerValidator('turnIdOld', _M('Turno atual', $module));
        $validators[] = new MIntegerValidator('unitIdOld', _M('Unidade atual', $module));
        $fields[] = $courseOccurrenceLookup;

        /*
         * new course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseIdNew', $data->courseIdNew),
            $this->GetFormValue('courseVersionNew', $data->courseVersionNew),
            $this->GetFormValue('turnIdNew', $data->turnIdNew),
            $this->GetFormValue('unitIdNew', $data->unitIdNew)
        );
        $caption = _M('Curso novo', $module);
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, true, 'New', $lkpRelated, $lkpFilter, true, $caption, 'css');
        // Validadores
        $validators[] = new MRequiredValidator('courseIdNew', _M('Novo curso', $module));
        $validators[] = new MIntegerValidator('courseVersionNew', _M('Nova versão do curso', $module));
        $validators[] = new MIntegerValidator('turnIdNew', _M('Novo turno', $module));
        $validators[] = new MIntegerValidator('unitIdNew', _M('Nova unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        $convertLabel = new MText('convertLabel', _M('Converter disciplinas aproveitadas?', $module) . ':');
        $convertLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $convert = new MRadioButtonGroup('convertAll', null, SAGU::listYesNo(0), 't', '', 'horizontal');
        $hctConvert = new MHContainer('hctConvertAll', array($convertLabel, $convert));
        $hctConvert->setShowLabel(false);
        $flds[] = $hctConvert;
                
        // utiliza esta opção de conversão, para convertermos o currículo para contratos ativos apenas
        $flds[] = new MHiddenField('convert', '1');
        $flds[] = new MTextLabel('lblMes', _M('Se informar a pessoa abaixo, a conversão de currículo será só para esta pessoa', $module) . '.');

        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), _M('Pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName'), $module, 'PersonContract', null, array('personId' => 'personId', 'courseId' => 'courseIdNew'), !$this->page->isPostBack() );
        $personId->setJsHint(_M('Informe o código da pessoa',$module));
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $flds[] = $hctPerson;

        
        //Base group convert information
        $bsg3 = new BaseGroup('bsg3', _M('Informações da conversão', $module), $flds, 'vertical');
        $fields[] = $bsg3;
        $fields[] = new MSeparator();
        unset($flds);
        $fields[] = new Separator();

        //Buttons
        $btn1[] = new MButton('btnBack', _M('Voltar', $module), $MIOLO->getActionURL($module, 'main:process:curriculumConversion'));
        $btn1[] = new MButton('btnConvert', _M('Converter', $module));
        $div1 = new MDiv('div1', $btn1, null, 'align=center');
        $fields[] = $div1;
        $fields[] = new Separator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
    }

    /**
     * Event triggered when user click convert
     */
    public function btnConvert_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getData();
        $convertAll = MIOLO::_request('convertAll');
        
        $business = $MIOLO->getBusiness($module, 'BusCurriculumConversion');

        if ( strlen($data->personId) > 0 )
        {
            //se for só para uma pessoa
            $contracts = $business->getContractsByData( $data->courseIdOld,
                                                        $data->courseVersionOld,
                                                        $data->unitIdOld,
                                                        $data->turnIdOld,
                                                        $data->personId,
                                                        $data->convert);
        }
        else
        {
            //conversaoa para todos do curso
            $contracts = $business->getContractsByData( $data->courseIdOld,
                                                        $data->courseVersionOld,
                                                        $data->unitIdOld,
                                                        $data->turnIdOld,
                                                        null,
                                                        $data->convert);
        }

        //se der algum erro exibe uma mensagem
        if ( count($business->getErrors()) > 0 )
        {
            $msg = _M('Erro ao buscar lista de contratos',$module) . ': ' . '<br>' . $business->getErrors();

            $this->addError($msg);
        }

        //percorre os contratos a serem convertidos
        if ( count($contracts) > 0 )
        {
            $columns[] = "<div style=\"text-align: center;\">" . _M('Código do contrato', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Código da pessoa', $module) . "</div>";
            $columns[] = "<div style=\"text-align: center;\">" . _M('Nome da pessoa', $module) . "</div>";

            $business->beginTransaction();

            foreach ( $contracts as $contract )
            {
                list ($contractId,
                      $personId,
                      $personName ) = $contract;

                //coleta as matrículas dos contratos
                $enrolls = $business->getContractEnrolls($contract[0]);

                //em caso de erro na coleta das matrículas
                if ( count($business->getErrors()) > 0 )
                {
                    $msg = _M('Erro ao buscar lista de matrícula',$module) . ': ' . '<br>' . $business->getErrors();

                    $this->addError($msg);
                }

                //se o aluno tiver disciplinas a serem convertidas
                if ( count($enrolls) > 0 )
                {
                    foreach ( $enrolls as $enroll )
                    {
                        //pesquisa por disciplinas equivalentes para conversao
                        //$curriculumLink[0][0] - curriculo que sai
                        //$curriculumLink[0][1] - curriculo que entra
                        $curriculumLink = $business->getCurriculumLink($enroll[1],
                                                                       $data->courseIdNew,
                                                                       $data->courseVersionNew,
                                                                       $data->unitIdNew,
                                                                       $data->turnIdNew);

                        //em caso de erro na pesquisa de disciplins equivalentes
                        if ( count($business->getErrors()) > 0 )
                        {
                            $msg = _M('Erro ao buscar lista de equivalências',$module) . ': ' . '<br>' . $business->getErrors();

                            $this->addError($msg);
                        }

                        //se existirem disciplinas equivalentes para conversao
                        if ( count($curriculumLink) > 0 )
                        {
                            // Converter disciplinas aproveitadas?
                            if( $convertAll == DB_TRUE || ( $convertAll == DB_FALSE && $enroll[2] == DB_FALSE) )
                            {
                                $business->updateEnrollCurriculumId($enroll[0], $curriculumLink[0][1]);
                            }                            
                        }
                    }
                }

                //atualiza os dados do contrato para o novo curso
                unset($sameCourse);

                $sameCourse = $business->checkSameContractToCourse($contract[0], $data->courseIdNew, $data->courseVersionNew, $data->unitIdNew, $data->turnIdNew);

                if ( is_array($sameCourse) && ( count($sameCourse) > 0 ) )
                {
                    //Já existe um contrato para esta pessoa, curso, versão, turno e unidade
                    $msg .= '<br>' . _M('Já existe contrato para este aluno', $module) . ' '. $sameCourse[0][0] . ' - ' . $sameCourse[0][1] . ' ' . _M('neste curso, versão e unidade', $module) . '. <br>' . _M('A matriz curricular já foi alterada para o novo curso', $module).'.';
                }
                else
                {
                    $business->updateContractCourseData($contract[0],
                                                        $data->courseIdNew,
                                                        $data->courseVersionNew,
                                                        $data->unitIdNew,
                                                        $data->turnIdNew);
                }


                //em caso de erros
                if ( count($business->getErrors()) > 0 )
                {
                    $msg = _M('Erro ao atualizar o contrato',$module) . ' ' . $contract[0] . ':<br>' . $business->getErrors();

                    $this->addError($msg);
                }
                else
                {
                    $matrix[] = array($contractId, $personId, $personName);
                }
            }

            if ( count($business->getErrors()) > 0 )
            {
                $business->rollbackTransaction();
            }
            else
            {
                $business->commitTransaction();
            }

            $tableRaw = new MTableRaw('', $matrix, $columns);
            $tableRaw->setAlternate(true);
            $tableRaw->addStyle('width', '75%');
            $tableRaw->setCellAttribute(0, 0, 'width', '15%');
            $tableRaw->setCellAttribute(0, 1, 'width', '15%');
            $tableRaw->setCellAttribute(0, 2, 'width', '70%');

            $fields[] = new MSeparator();

            $msg .= '<br>' . _M('Conversão concluída para esta pessoa', $module) . '<br>';

            $fields[] = new MSeparator();
            $fields[] = $tableRaw;
            $fields[] = new MSeparator();

            $this->bsg1->caption = _M('Curso antigo', $module);
            $this->btnConvert->visible = false;
            $this->bsg3->visible = false;
            $this->courseIdOld->setReadOnly(true);
            $this->courseIdNew->setReadOnly(true);
            $this->addInfo($msg);

        }
        else
        {
            $msg = _M('Nenhum contrato disponível de acordo com os parâmetros selecionados', $module);
            $this->addError($msg);
        }
    }
}
?>