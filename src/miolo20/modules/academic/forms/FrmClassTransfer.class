<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluç?es Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; voc? pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundaç?o
 * do Software Livre (FSF); na vers?o 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇ?O a qualquer MERCADO
 * ou APLICAÇ?O EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * portugu?s para maiores detalhes.
 *
 * Voc? deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se n?o, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundaç?o do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário correspondente a tranfer?ncia de turma
 *
 * @author Rodrigo Strate Fogaça [rodrigo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Rodrigo Strate Fogaça [rodrigo@solis.coop.br]
 *
 * @since
 * Class created on 25/01/2012
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluç?es Livres \n
 * The SAGU Development Team
 *
 * \b Copyright: \n
 * Copyright (c) 2005-2007 SOLIS - Cooperativa de Soluç?es Livres \n
 * Copyright (c) 2005-2007 UNIVATES - Centro Universitario \n
 *
 * \b License: \n
 * Licensed under GPLv2 (for further details read the COPYING file or http://www.gnu.org/licenses/gpl.html)
 *
 * \b History: \n
 * See: http://sagu.solis.coop.br/
 */
class FrmClassTransfer extends SForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Tranfer?ncia de turma', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event = MIOLO::_REQUEST('event');
        
        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, true,$suffix = '', $related = null, $filter = null, $autoComplete = true, _M('Curso'), $border = 'block');
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Vers?o do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;
              
        // Field class
        $classLabel = new MText('classLabel', _M('Turma',$module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classLabel->setClass('m-caption m-caption-required');
        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), _M('Código da turma',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('className_'), $module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $classId->setJsHint(_M('Informe o código da turma', $module));
        $validators[] = new MRequiredValidator('classId', _M('Turma', $module));
        $className = new MTextField('className_', $this->getFormValue('className_', $data->className), _M('Nome da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className->setJsHint(_M('Nome da turma', $module));
        $className->setReadOnly(true);
        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $className));
        $hctClass->setShowLabel(false);
        
        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array(null,null,/*'classId', 'className_', */'personId', 'personName'), $module, 'PersonByClass', null, array('personId' => 'personId', 'personName' => 'personName'), true);//!$this->page->isPostBack());
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa',$module), 'optional');
        $personName = new MTextField('personName', $this->personName->value, NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa',$module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
                
        $fields[] = new MBaseGroup('bsgAllowLoan', _M('Turma de origem', $module), array($hctCourse, $hctClass, $hctPerson ), 'vertical');
        
        // Field class
        $classNewLabel = new MText('classNewLabel', _M('Nova Turma',$module) . ':');
        $classNewLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classNewLabel->setClass('m-caption m-caption-required');
        $classNewId = new MLookupTextField('classNewId', $this->getFormValue('classNewId', $data->classNewId), _M('Código da nova turma',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('classNewName_'), $module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $classNewId->setJsHint(_M('Informe o código da nova turma', $module));
        $validators[] = new MRequiredValidator('classNewId', _M('Nova Turma', $module));
        $classNewName = new MTextField('classNewName_', $this->getFormValue('classNewName_', $data->classNewName), _M('Nome da nova turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $classNewName->setJsHint(_M('Nome da nova turma', $module));
        $classNewName->setReadOnly(true);
        $hctNewClass = new MHContainer('hctNewClass', array($classNewLabel, $classNewId, $classNewName));
        $hctNewClass->setShowLabel(false);
               
        // Motivo
        $busReason = new BusinessAcademicBusReason();
        $list = $busReason->listReason();
        
        $validators[] = new MRequiredValidator('reasonId', $reasonText);

        $fields[] = new MBaseGroup('bsgAllowLoan', _M('Turma de destino', $module), array( $hctNewClass), 'vertical');
        $fields[] = new MSelection('reasonId', $this->getRequestValue('reasonId', $stepData->reasonId), _M('Motivo', $module), $list);
        
        // Button close
        $fields[] = new MSeparator();
        $fields[] = new MButton('executar', _M('Executar', $module));

        $this->SetFields($fields);
        $this->SetValidators($validators);
        $this->SetLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->SetClose($MIOLO->getActionURL($module, substr($action, 0, strrpos($action, ':'))));
        parent::defineFields();
    }

    /**
     * Close to validate and close the selected learning period
     */
    public function executar_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'academic';

        $busClass = new BusinessAcademicBusClass();
        $busClassPupil = new BusinessAcademicBusClassPupil();
        $data = $this->getData();
                
        try
        {    
            SDatabase::beginTransaction();

            $dataClass = $busClass->getClass($data->classId);
            $dataClassNew = $busClass->getClass($data->classNewId);
            $dataTranotalClass = $busClassPupil->getTotalClassPupil($data->classId);
            $dataTranotalClassNew = $busClassPupil->getTotalClassPupil($data->classNewId);
            $vacancyAvailable = SAGU::calcNumber($dataClassNew->vacant . '-' . $dataTranotalClassNew, true, SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE'));
            
            $filter->classId = $data->classId;
            
            if ( strlen($data->personId) > 0 )
            {
                $filter->personId = $data->personId;
            }
            
            // Turma da pessoa informada
            $dataPupilClass = $busClassPupil->searchClassPupil($filter, true);
            
            if( count($dataPupilClass)< 0 )
            {
                $msg = '<ul><li>' . _M('N?o existe alunos na turma de origem.', $module).'</ul></li>';                
            }
            if ( $data->courseId != $dataClass->courseId )
            {
                $msg = '<ul><li>' . _M('N?o foi possível transferir o aluno. A turma de origem n?o corresponde ao curso.', $module).'</ul></li>';
            }
            if ( $data->courseId != $dataClassNew->courseId )
            {
                $msg .= '<ul><li>' . _M('N?o foi possível transferir o aluno. A turma de destino n?o corresponde ao curso.', $module). '</ul></li>';
            }
            if ( (strlen($data->personId)>0) && ($dataClass->classId != $dataPupilClass[0]->classId) )
            {
                $msg .= '<ul><li>' . _M('N?o foi possível transferir o aluno. O aluno n?o faz parte da turma selecionada.', $module). '</ul></li>';
            }
            if ( $dataClass->classId == $dataClassNew->classId )
            {
                $msg .= '<ul><li>' . _M('N?o foi possível transferir o aluno. O aluno já faz parte desta turma.', $module). '</ul></li>';
            }
            if ( $vacancyAvailable  <= 0 )
            {
                $msg .= '<ul><li>' . _M('N?o foi possível transferir o aluno. N?o existe vagas nesta turma.', $module). '</ul></li>';
            }
            if ( $dataTranotalClass == 0 )
            {
                $msg .= '<ul><li>' . _M('N?o é possível transferir pois a turma n?o contém alunos.', $module). '</ul></li>';
            }
            if ( $dataClass->courseId != $dataClassNew->courseId )
            {
                $msg .= '<ul><li>' . _M('N?o é possível transferir pois o curso n?o é o mesmo.', $module) . '</ul></li>'; 
            }
            if ( $dataClass->turnId != $dataClassNew->turnId )
            {
                $msg .=  '<ul><li>' . _M('N?o é possível transferir pois o turno n?o é o mesmo.', $module) . '</ul></li>'; 
            }
            if ( $dataClass->unitId != $dataClassNew->unitId )
            {
                $msg .= '<ul><li>' . _M('N?o é possível transferir pois a unidade n?o é o mesmo.', $module) . '</ul></li>'; 
            }
            
            if ( strlen($msg) > 0 )
            {
                $msg = substr($msg, 8);
                throw new Exception($msg);
            }

            foreach ( $dataPupilClass AS $pupil )
            {  
                //Verifica se o aluno já está na turma
                $filters = new stdClass();
                $filters->personId = $pupil->personId;
                $filters->classId = $data->classNewId;
                
                $alunoTurma = ( $pupil->classId == $data->classNewId );
                
                if ( $alunoTurma )
                {
                    $this->addAlert(_M('O aluno @1 já está na turma @2.', $module, $pupil->personId . '-' . $pupil->personName, $data->classNewId .'-'. $data->classNewName_));
                }    
                
                if ( ( strlen( $pupil->classPupilEndDate ) < 0 ) || ( !$alunoTurma ) )
                {
                    if ( SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_DE_TURMA_APROVEITAR_NOTAS_E_FREQUENCIAS') == DB_TRUE )
                    {
                        $enrollFilters = new stdClass();
                        $enrollFilters->contractId = $pupil->contractId;
                        $enrollFilters->classId = $pupil->classId;
                        $enrollFilters->statusId = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED');

                        // Busca todas enrolls do contrato.
                        $busEnroll = new BusinessAcademicBusEnroll();
                        $dataTranransfer = $busEnroll->searchEnroll($enrollFilters);

                        foreach ( $dataTranransfer as $dataTran )
                        {                            
                            // Obtém um objeto enroll.
                            $enroll = new stdClass();
                            list ( $enroll->enrollId,                  $enroll->contractId,             $enroll->groupId,             $enroll->curriculumId,
                                   $enroll->dateEnroll,                $enroll->hourEnroll,             $enroll->dateCancellation,    $enroll->hourCancellation,
                                   $enroll->reasonCancellationId,      $enroll->note,                   $enroll->examNote,            $enroll->finalNote,
                                   $enroll->concept,                   $enroll->textEvaluation,         $enroll->frequency,           $enroll->obsExploitation,
                                   $enroll->exploitationInstitutionId, $enroll->numberHourExploitation, $enroll->creditsExploitation, $enroll->isShowDocumentEndCourse,
                                   $enroll->statusId,                  $enroll->description,            $enroll->frequencyAlertEmail, $enroll->isInternet,
                                   $enroll->ip,                        $enroll->isConfirm,              $enroll->isSetFree,           $enroll->complement,
                                   $enroll->obsExploitation,           $enroll->userName,               $enroll->dateTime,            $enroll->ipAddress,
                                   $enroll->isExploitation,            $enroll->learningPeriodId,       $enroll->subclassId,          $enroll->finalExaminationTheme ) = $dataTran;
                        
                            // Insere nova enroll com todos os dados iguais a enroll antiga.
                            $ok = $busEnroll->insertEnroll($enroll);

                            if ( $ok )
                            {
                                $oldEnrollId = $enroll->enrollId;
                                $enroll->enrollId = NULL;
                                $enrolls = $busEnroll->searchEnroll($enroll);

                                // Obtém qual o enrollid da nova enroll.
                                foreach ( $enrolls as $enrollId )
                                {
                                    if ( $enrollId[0] != $oldEnrollId )
                                    {
                                        $newEnrollId = $enrollId[0];
                                    }
                                }

                                // Obtém o novo group.
                                $busGroup = new BusinessAcademicBusGroup();
                                $group = $busGroup->getGroup($enroll->groupId);

                                $args = new stdClass();
                                $args->curricularComponentId = $group->curriculumCurricularComponentId;
                                $args->curricularComponentVersion = $group->curriculumCurricularComponentVersion;
                                $args->classId = $data->classNewId;
                                $args->learningPeriodId = $group->learningPeriodId;   
                                $newGroup = $busGroup->searchGroup($args, true);

                                // Significa que a nova turma possui a disciplina equivalente a disciplina oferecida da turma anterior.
                                if ( count($newGroup) > 0 )
                                {
                                    // Obtém todas as notas registradas da antiga enroll.
                                    $degreesFilters = new stdClass();
                                    $degreesFilters->enrollId = $oldEnrollId;

                                    $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();
                                    $degreesArray = $busDegreeEnroll->searchDegreeEnroll($degreesFilters);

                                    // Insere as mesmas notas da enroll antiga para a nova enroll.
                                    foreach ( $degreesArray as $degrees )
                                    {
                                        $degree = new stdClass();

                                        list ( $degree->degreeEnrollId,
                                               $degree->degreeId,
                                               $degree->enrollId,
                                               $degree->note,
                                               $degree->concept,
                                               $degree->description,
                                               $degree->recordDate,
                                               $degree->userName,
                                               $degree->dateTime,
                                               $degree->ipAddress ) = $degrees;

                                        $degree->enrollId = $newEnrollId;
                                        $busDegreeEnroll->insertDegreeEnroll($degree);
                                    }

                                    // Obtém schedule do novo group.
                                    $busSchedule = new BusinessAcademicBusSchedule();
                                    $schedules = $busSchedule->getScheduleOfGroup($newGroup[0]->groupId);

                                    // Obtém todas as frequências registradas da antiga enroll.
                                    $frequenceFilters = new stdClass();
                                    $frequenceFilters->enrollId = $oldEnrollId;

                                    $busFrequenceEnroll = new BusinessAcademicBusFrequenceEnroll();
                                    $frequenceArray = $busFrequenceEnroll->searchFrequenceEnroll($frequenceFilters);
                                    $cont = 0;

                                    if ( count($frequenceArray) > count($schedules) )
                                    {
                                        throw new Exception(_M("Disciplina oferecida de código {$newGroup[0]->groupId}, possui menor número de datas de ocorrência das aulas que a disciplina oferecida de código {$enroll->groupId}"));
                                    }

                                    // Insere as mesmas frequências da enroll antiga para a nova enroll.
                                    foreach ( $frequenceArray as $frequences )
                                    {
                                        $schedule = new stdClass();

                                        list ( $schedule->groupId,
                                               $schedule->scheduleId,
                                               $schedule->occurrenceDate,
                                               $schedule->timeId,
                                               $schedule->beginHour,
                                               $schedule->beginHour,
                                               $schedule->endHour ) = $schedules[$cont];

                                        $frequence = new stdClass();

                                        list ( $frequence->enrollId,
                                               $frequence->scheduleId,
                                               $frequence->frequencyDate,
                                               $frequence->timeId,
                                               $frequence->frequency,
                                               $frequence->timeHours,
                                               $frequence->reasonCancellation,
                                               $frequence->justification ) = $frequences;

                                        /**
                                         * Passa os registros de frequências equivalentes do group antigo para o group novo, 
                                         * inserindo, por exemplo, o registro da primeira data do group antigo para a primeira data do group novo.
                                         */
                                        $freqDate = explode('-', $frequence->frequencyDate);
                                        $dateFreq = $freqDate[2] . '/' . $freqDate[1] . '/' . $freqDate[0];
                                        $timeFreq = $busSchedule->getBeginEndHourTime($frequence->timeId);

                                        $frequence->justification = "Frequência referente à aula de {$dateFreq}, {$timeFreq}, de origem da turma transferida.";
                                        $frequence->enrollId = $newEnrollId;
                                        $frequence->scheduleId = $schedule->scheduleId;
                                        $frequence->frequencyDate = $schedule->occurrenceDate;
                                        $frequence->timeId = $schedule->timeId;

                                        $busFrequenceEnroll->insertFrequenceEnroll($frequence);

                                        $cont ++;
                                    }                            

                                    // Edita o groupid da nova enroll para o groupid da turma nova.
                                    $busEnroll->updateEnrollClassTransfer($newEnrollId, $newGroup[0]->groupId);
                                }
                                else
                                {
                                    throw new Exception(_M("Precisam ser oferecidas as mesmas disciplinas da turma {$pupil->classId} para a nova turma {$data->classNewId}."));
                                }

                                // Cancela a enroll antiga
                                $enroll->enrollId = $oldEnrollId;
                                $enroll->statusId = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED');
                                $busEnroll->updateEnroll($enroll);
                            }
                        }                       
                    }
                    
                    // Tira a pessoa da turma
                    $dataPupil->classId = $pupil->classId;
                    $dataPupil->contractId = $pupil->contractId;
                    $dataPupil->beginDate = $pupil->classPupilBeginDate;
                    $dataPupil->reasonId = $data->reasonId;
                    $dataPupil->endDate = SAGU::getDateNow();
                    $ok = $busClassPupil->updateClassPupil($dataPupil);

                    if ( $ok )
                    {
                        // Insere na nova
                        unset($dataPupil);
                        $dataPupil->classId = $data->classNewId;
                        $dataPupil->contractId = $pupil->contractId;
                        $dataPupil->beginDate = SAGU::getDateNow();
                        $ok = $busClassPupil->insertClassPupil($dataPupil);

                        $this->addInfo(_M('Aluno @1 foi transferido com sucesso da turma @2 para a turma @3', $module, $pupil->personId . '-' . $pupil->personName, $pupil->classId . '-'. $pupil->className, $data->classNewId .'-'. $data->classNewName_));
                    }
                }
                
                if ( $ok )
                {
                    SDatabase::commit();
                }
            }
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $this->addError($e->getMessage());
        }
    }
}
?>