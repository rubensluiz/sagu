<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types cobranca bancaria
 *
 * @author Nataniel Ingor da Silva [nataniel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Nataniel Ingor da Silva [nataniel@solis.com.br]
 *
 * @since
 * Class created on 21/10/2013
 */
set_time_limit(600);
class FrmResultadoAvaliacaoInstitucional extends SForm
{
    
    public function __construct()
    {
        parent::__construct(_M('Resultado Avaliação Institucional'));

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $unitId = sMultiUnidade::obterObjetoUnidade();
                  
        $label = new MText('label', _M('Código da avaliação institucional', $module) . ':');
        $label->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $label->setClass('m-caption m-caption-required');
        $lookup = new MLookupTextField('id_avaliacao', $this->getFormValue('id_avaliacao', $data->id_avaliacao), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'id_avaliacao, nome', 'academic', 'AvaliacaoInstitucional', null, array('id_avaliacao' => 'id_avaliacao'), true);
        $lookup->setJsHint(_M('Informe o código do centro de custo', $module));
        $description = new MTextField('nome', $this->getFormValue('nome',$data->nome), _M('Avaliação institucional',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição da avaliação institucional', $module));
        $description->setReadOnly(true);
        $validators[] = new MRequiredValidator('id_avaliacao', _M('Avaliação institucional', $module));
        $hctAvaliacao = new MHContainer('hctAvaliacao',array($label,$lookup, $description));
        $hctAvaliacao->setShowLabel(false);
        $fields[] = $hctAvaliacao;
        
        //Filtro de unidade
        $business = new BusinessBasicBusUnit();        
        $opts = $business->listUnit();
        
        $unitId = new MComboBox('unitIdS', $this->getFormValue('unitIdS', $data->unitIdS), _M('Unidade', $module), $opts);
        $unitId->setJsHint(_M('Selecione uma unidade', $module));
        $fields[] = $unitId;
        
        $fields[] = new MSeparator();
        
        // Field course
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );

        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, false, null, null, array('unitId' => 'unitIdS'));
        $validCourse = new MRequiredValidator('courseId', _M('Curso', $module));
        $fields[] = $courseOccurrenceLookup;
        
        //Field report format
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : SReport::FILETYPE_PDF, _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        $fields[] = new MSeparator();
        
        $fields[] = new MButton('btPrint', _M('Imprimir',$module));
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));

    }
    
    public function btPrint_click()
    {           
        $this->deletaDadosAvaliacao();
        
        $idAvaliacao = MIOLO::_REQUEST('id_avaliacao');
        
        $this->buscaDadosAvaliacao($idAvaliacao);   
        
        $this->generateReport();
        
    }
    
    public function generateReport()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Parameters of the report
        $parameters['avaliacaoId_1'] = MIOLO::_REQUEST('id_avaliacao');
        $parameters['unitids'] = MIOLO::_REQUEST('unitIdS');
        $parameters['courseids'] = MIOLO::_REQUEST('courseId');
        $parameters['courseDesc'] = MIOLO::_REQUEST('courseName');
        
        $parameters['unitDesc'] = ''; 
        
        if ( strlen($parameters['unitids']) )
        {
            //$busUnit = $MIOLO->getBusiness('BusUnit', 'basic');
            $business = new BusinessBasicBusUnit();        
            $unit = $business->getUnit($parameters['unitids']);
            $parameters['unitDesc'] = $unit->description;
        }
        
        $report = new SReport();
        $report->setReportName('resultado_avaliacao_institucional');
        $report->setFileType( MIOLO::_REQUEST('reportFormat') );
        $report->setParameters($parameters);
        $report->generate();
    }
    
    public function buscaDadosAvaliacao($idAvaliacao)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/types/avaAvaliacao.class.php', 'avinst');
        
        try
        {
            $busAvaliacao = new avaAvaliacao();
            $opcoes = $busAvaliacao->obtemOpcoesQuestoes($idAvaliacao);

            foreach($opcoes as $valor => $opcao)
            {
                $opcao = utf8_encode($opcao[1]);

                $opt = unserialize($opcao);
                
                if ( $opt->opcoes )
                {
                    $opt = $opt->opcoes;
                }
                
                for($i=0; $i <count($opt); $i++)
                {   
                   $this->insereDadosAvaliacao($opt[$i]->codigo, utf8_decode( $opt[$i]->legenda ? $opt[$i]->legenda : $opt[$i]->descricaoOpcao), $opcoes[$valor][2] );
                }
            }
        }
        catch (Exception $e)
        {
            throw new Exception($e);
        }
    }
    
    public function insereDadosAvaliacao($valor, $opcao, $questao)
    {   
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/types/avaAvaliacao.class.php', 'avinst');
        
        try
        {
            $busAvaliacao = new avaAvaliacao();
            $teste = $busAvaliacao->insereOpcoesQuestoes($valor, $opcao, $questao);
        }
        catch(Exception $e)
        {
            throw new Exception($e);
        }
        
    }    
    
    public function deletaDadosAvaliacao()
    {        
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/types/avaAvaliacao.class.php', 'avinst');
        
        try
        {
            $busAvaliacao = new avaAvaliacao();
            $busAvaliacao->deleteOpcoesQuestoes();
        }
        catch(Exception $e)
        {
            throw new Exception($e);
        }
    }
}



?>
