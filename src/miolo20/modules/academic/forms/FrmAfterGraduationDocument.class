<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * After-Graduation document form
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @since
 * Class created on 25/05/2006
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmAfterGraduationDocument extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Pós-Graduação', $module), NULL, NULL );

        set_time_limit(0);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');
        
        $fields[] = new MHiddenField('limbo', '');

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint('Select a period', $module);
        $fields[] = $periodId;

        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), _M('Código da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array(/*'contractId', 'personId', */'personName'/*, 'courseId', 'courseName', 'courseVersion', 'limbo', 'limbo', 'unitId'*/), 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa'), $module);
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[]  = $courseOccurrenceLookup;

        //Field learning period
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$this->learningPeriodId->value), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('limbo', 'courseId', 'courseVersion', 'limbo' , 'unitId', 'learningPeriodDescription', 'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' , 'courseName'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[]     = new MRequiredValidator('learningPeriodId', _M('Período letivo',$module), 'required');
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $this->learningPeriodDescription->value), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $fields[]          = $hctLearningPeriod;

        //Field formation level
        $formationLevelId = new MHiddenField('formationLevelId', SAGU::getParameter('ACADEMIC', 'ACD_AFTER_GRADUATION_FORMATION_LEVEL_ID'));
        $fields[] = $formationLevelId;

        //Field money value
        $moneyValueLabel = new MText('moneyValueLabel', _M('Valor', $module) . ':');
        $moneyValueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $moneyValue      = new MTextField('moneyValue', '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Formato', $module) . '0.00');
        $moneyValue->setJsHint(_M('Informe o valor', $module));
        $validators[] = new MFloatValidator('moneyValue');
        $hctValue = new MHContainer('hctValue', array($moneyValueLabel, $moneyValue));
        $hctValue->setShowLabel(false);
        $fields[]  = $hctValue;

        //Field parcels
        $parcelsLabel = new MText('parcelsLabel', _M('Parcelas', $module) . ':');
        $parcelsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parcels      = new MTextField('parcels', '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parcels->setJsHint(_M('Informe o número de parcelas', $module));
        $hctParcels = new MHContainer('hctParcels', array($parcelsLabel, $parcels));
        $hctParcels->setShowLabel(false);
        $fields[]   = $hctParcels;

        //Field duration
        $durationLabel = new MText('durationLabel', _M('Duração',$module) . ':');
        $durationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $durationMonth = new MSelection('durationMonth', $this->getFormValue('durationMonth',$currDate['mon']), _M('Duração',$module), SAGU::listMonths());
        $durationMonth->setJsHint(_M('Selecione o mês de início', $module));
        $middleLabel = new MText('middleLabel', _M('De',$module));
        $durationYear = new MSelection('durationYear', $this->getFormValue('durationYear',$currDate['mon']), _M('Duração',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $durationYear->setJsHint(_M('Selecione o ano de início', $module));
        $middleLabel1 = new MText('middleLabel1', _M('Até',$module));
        $durationMonth1 = new MSelection('durationMonth1', $this->getFormValue('durationMonth1',$currDate['mon']), _M('Duração',$module), SAGU::listMonths());
        $durationMonth1->setJsHint(_M('Selecione o mês de fim', $module));
        $middleLabel2 = new MText('middleLabel2', _M('De',$module));
        $durationYear1 = new MSelection('durationYear1', $this->getFormValue('durationYear1',$currDate['mon']), _M('Duração',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $durationYear1->setJsHint(_M('Selecione o ano de fim', $module));
        $hctDuration = new MHContainer('hctDuration', array($durationLabel, $durationMonth, $middleLabel, $durationYear, $middleLabel2, $durationMonth1, $middleLabel2, $durationYear1));
        $hctDuration->setShowLabel(false);
        $fields[]  = $hctDuration;

        //Field expiration
        $expirationLabel = new MText('expirationLabel', _M('Expiração da primeira parcela',$module) . ':');
        $expirationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $expirationMonth = new MSelection('expirationMonth', $this->getFormValue('expirationMonth',$currDate['mon']), _M('Expiração',$module), SAGU::listMonths());
        $lastLabel = new MText('lastLabel', _M('De',$module));
        $expirationYear = new MSelection('expirationYear', $this->getFormValue('expirationYear',$currDate['mon']), _M('Expiração',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $hctExpiration = new MHContainer('hctExpiration', array($expirationLabel, $expirationMonth, $lastLabel, $expirationYear));
        $hctExpiration->setShowLabel(false);
        $fields[]  = $hctExpiration;

        //Field rad option file type
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType', 'pdf'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $cd->contractId         = MIOLO::_request('contractId');
        $cd->personId           = MIOLO::_request('personId');
        $cd->courseId           = MIOLO::_request('courseId');
        $cd->courseVersion      = MIOLO::_request('courseVersion');
        $cd->courseName         = MIOLO::_request('courseName');
        $cd->unitId             = MIOLO::_request('unitId');
        $cd->learningPeriodId   = MIOLO::_request('learningPeriodId');
        $cd->fileType           = MIOLO::_request('radFileType');
        $cd->moneyValue         = MIOLO::_request('moneyValue');
        $cd->parcels            = MIOLO::_request('parcels');
        $cd->durationMonth      = MIOLO::_request('durationMonth');
        $cd->durationYear       = MIOLO::_request('durationYear');
        $cd->durationMonth1     = MIOLO::_request('durationMonth1');
        $cd->durationYear1      = MIOLO::_request('durationYear1');
        $cd->expirationMonth    = MIOLO::_request('expirationMonth');
        $cd->expirationYear     = MIOLO::_request('expirationYear');
        $businessContractDocument = new BusinessAcademicBusContractDocument();
        $data = $businessContractDocument->getAfterGraduationContractDocument($cd);

        $contractResource = 'additiveTerm.sxw';

        $businessCompany = new BusinessBasicBusCompany();
        $company         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

        $businessCity = new BusinessBasicBusCity();
        $city         = $businessCity->getCity($legalPerson->cityId);

        $businessCountry = new BusinessBasicBusCountry();
        $country         = $businessCountry->getCountry($city->countryId);

        try
        {
            if ( count($data) > 0 )
            {
                $MIOLO->uses('/core/AgataAPI.class');
                $MIOLO->uses('classes/sagu.class', 'basic');

                $api = new AgataAPI;

                set_time_limit(0);

                $api->setParameter('$companyId',              $company->companyId);
                $api->setParameter('$companyName',            $company->name);
                $api->setParameter('$cnpj',                   $legalPerson->cnpj);
                $api->setParameter('$companyTypeDescription', $company->companyTypeDescription);
                $api->setParameter('$fakeName',               $legalPerson->fakeName);
                $api->setParameter('$companyCity',            $city->name);
                $api->setParameter('$companyStateId',         $city->stateId);
                $api->setParameter('$companyLocation',        $legalPerson->location);
                $api->setParameter('$companyNumber',          $legalPerson->number);
                $api->setParameter('$acronym',                $company->acronym);
                $api->setParameter('$currencySymbol',         $country->currencySymbol);
                $api->setParameter('$courseName',             $cd->courseName);
                $api->setParameter('$moneyValue',             $cd->moneyValue);

                if ( strlen($cd->moneyValue) > 0 )
                {
                    $api->setParameter('$descriptionMoney', SAGU::getExtensiveNumber(SAGU::formatNumber($cd->moneyValue), 'REAL', 'REAIS'));
                }
                else
                {
                    $api->setParameter('$descriptionMoney', '');
                }

                if ( (strlen($cd->moneyValue) > 0) && (strlen($cd->parcels)>0) )
                {
                    $parcelsValue = SAGU::calcNumber(SAGU::formatNumber($cd->moneyValue).'/'.SAGU::formatNumber($cd->parcels), true);
                }
                else
                {
                    $parcelsValue = '';
                }

                $api->setParameter('$parcelsValue', $parcelsValue);
                $api->setParameter('$descriptionParcelsValue', SAGU::getExtensiveNumber(SAGU::formatNumber($parcelsValue), 'REAL', 'REAIS'));

                $api->setParameter('$restParcelsDescription', SAGU::getExtensiveNumber($cd->parcels - 1));
                $api->setParameter('$restParcels', $cd->parcels - 1);

                $api->setParameter('$parcelsDescription', SAGU::getExtensiveNumber(SAGU::formatNumber($cd->parcels)));
                $api->setParameter('$parcels', $cd->parcels);

                $api->setParameter('$durationMonth1', SAGU::getMonth($cd->durationMonth1));
                $api->setParameter('$durationYear1', $cd->durationYear1);
                $api->setParameter('$durationMonth', SAGU::getMonth($cd->durationMonth));
                $api->setParameter('$durationYear', $cd->durationYear);
                $api->setParameter('$expirationMonth', SAGU::getMonth($cd->expirationMonth));
                $api->setParameter('$expirationYear', $cd->expirationYear);

                $api->setLanguage($MIOLO->getConf('i18n.language'));

                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');
                $api->setDataArray($data);

                $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/afterGraduationContract.sxw'/*'/documents/additiveTerm.sxw'*/ /*. $contractResource*/));

                if ( $ok && $cd->fileType == 'pdf' )
                {
                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.pdf');
                    $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');
                }

                if ( !$ok )
                {
                    throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                }
                else
                {
                    $api->fileDialog();
                }
            }
            else
            {
                throw new Exception(_M('Nenhum registro encontrado.', $module));
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
}

?>
