<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/12/2005
 *
 **/

/**
 * Form to search the basCenter table
 */
class FrmPostEnrollConditionUnblockSearch extends SSearchForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        $module = SAGU::getFileModule(__FILE__);        
        parent::__construct(_M('Localizar', $module), new acdCurricularComponentUnblock(), 'curricularComponentUnblockId', 'BusPostEnrollConditionUnblock' );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        //Field limbo
        $limbo = new MHiddenField('limboS', '');
        $fields[] = $limbo;
        
        //Field curricular component
        $curricularComponentUnblockIdS = new MHiddenField('curricularComponentUnblockIdS','');
        $fields[] = $curricularComponentUnblockIdS;          
        
        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodIdS', strlen($this->getFormValue('periodIdS', $data->periodId))>0 ? $this->getFormValue('periodIdS', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        $filters = $this->getTypesData();
        
        //Field lookup contract
        $fields[] = new MHiddenField('limboS', '');
        $MIOLO->getClass( 'academic', 'lookupContract' );
        $fields[] = new SLookupContract('contractlookupS', $filters, true, true, true, true, array('contractId' => 'contractIdS'));
        
        $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');
        $validators[] = new MIntegerValidator('contractPersonId', _M('Pessoa', $module));
        
        //Field learning period
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Período letivo', $module) . ':');
        $learningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));      
        $learningPeriodLabelS->setClass('m-caption m-caption-required');      
        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS'), _M('Código do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('periodIdS', null, null, null, null, 'learningPeriodS'), $module, 'LearningPeriod', null, array('periodId' => 'periodIdS', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'));
        $learningPeriodIdS->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MIntegerValidator('learningPeriodIdS', _M('Código do período letivo',$module));
        $learningPeriodS = new MTextField('learningPeriodS', $this->getFormValue('learningPeriodS',$this->substitutionUnblockSearch->learningPeriodS), _M('Período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodS->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodS->setReadOnly(true);
        $hctlearningPeriodS = new MHContainer('hctlearningPeriodS', array($learningPeriodLabelS, $learningPeriodIdS, $learningPeriodS));
        $hctlearningPeriodS->setShowLabel(false);
        $fields[] = $hctlearningPeriodS;
        
        $validators[] = new MIntegerValidator('learningPeriodIdS', _M('Período letívo', $module), 'required');
                
        parent::defineFields($fields, $module, 'GrdPostEnrollConditionUnblockSearch', $validators);        
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);

    }

    public function btnUnblock_click($sender = null)
    {
        $MIOLO                  = MIOLO::getInstance();
        $module                 = MIOLO::getCurrentModule();
        $action                 = MIOLO::getCurrentAction();

        $data->contractId       = MIOLO::_request('contractId');
        $data->learningPeriodId = MIOLO::_request('learningPeriodId');
        $data->curriculumId     = MIOLO::_request('curriculumId');
        $actionIsUnblock        = MIOLO::_request('actionIsUnblock');

        $opts = array('contractIdS'       => MIOLO::_request('contractId'),
                      'learningPeriodIdS' => MIOLO::_request('learningPeriodId'),
                      'curriculumIdS'     => MIOLO::_request('curriculumId')
                     );

        $gotoNo = SAGU::getStackBackUrl();

        $gotoNo = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
        $opts['event'] = 'btnYes_click';
        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);

        if ( $actionIsUnblock == DB_FALSE )
        {
            $msg = _M('Tem certeza que deseja DESBLOQUEAR a disciplina selecionada?', $module);
        }
        else
        {
            $msg = _M('Tem certeza que deseja REMOVER O DESBLOQUEIO da disciplina selecionada?', $module);
        }

        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    public function btnYes_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $this->busObject;
        $data     = $this->object;

        $data->contractId       = MIOLO::_request('contractIdS');
        $data->learningPeriodId = MIOLO::_request('learningPeriodIdS');
        $data->curriculumId     = MIOLO::_request('curriculumIdS');

        $ok  = $business->updatePostEnrollConditionUnblock($data);
        $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');

        $opts = array('contractIdS'       =>$data->contractId,
                      'learningPeriodIdS' =>$data->learningPeriodId,
                      'curriculumIdS'     =>$data->curriculumId
                     );

        $goto = SAGU::getStackBackUrl();
        $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);

        $caption = _M('Informação', $module);
        $MIOLO->information($msg, $goto);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        // get filters values
        $data = new lookupContract();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->getFormValue($var);
        }

        $data->curricularComponentUnblockId = $this->getFormValue('curricularComponentUnblockIdS');
        $data->learningPeriodId = $this->getFormValue('learningPeriodIdS');

        if ( strlen($data->contractId) <= 0 )
        {
            $data->contractId = $this->getFormValue('contractIdS');
        }
        
        return $data;
    }
}

?>
