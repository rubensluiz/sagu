<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * Class created on 07/08/2006
 *
 **/

/**
 * Form to generate condition unblock list
 **/
class FrmConditionUnblockList extends SForm
{
    private $home;
    public $filters;
    /**
     * Class constructor
     **/
    public function __construct($data)
    {

        $module = MIOLO::getCurrentModule();
        $this->home   = 'main:report:conditionUnblockList';

        parent::__construct( _M('Lista de desbloqueios de requisito', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $periodId = MIOLO::_request('periodId');
        
        //Field period
        $dperiodId      = strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID');
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId       = new MComboBox('periodId', $dperiodId, _M('Período',$module), $businessPeriod->listPeriod() );
        $periodId->setjsHint(_M('Selecione um período', $module));
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]       = $periodId;
        
        //Field formation lever
        $businessFormationLevel = new BusinessAcademicBusFormationLevel();
        $formationLevelId       = new MComboBox('formationLevelId', $this->getFormValue('formationLevelId', $data->formationLevelId), _M('Grau de formação', $module), $businessFormationLevel->listFormationLevel());
        $formationLevelId->setJsHint(_M('Selecione o grau de formação', $module));
        $validators[]           = new MRequiredValidator('formationLevelId');
        $fields[]               = $formationLevelId;
                                      
        $btn1     = new MButton('btnList', _M('Lista', $module));
        $fields[] = $btn1;
        $fields[] = new MSeparator('<hr>');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Event triggered when user clicks list button
     **/
    public function btnList_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $business = new BusinessAcademicBusConditionUnblockList();
        $data     = $this->getData();
        
        $listData = $business->listConditionUnblockPupils($data->periodId, $data->formationLevelId);
                
        if (count($listData) > 0)
        {
            foreach ($listData as $tableData)
            {
                unset($tableRows);
                if (count($tableData->currComps) > 0)
                {
                    foreach ($tableData->currComps as $currComps)
                    {
                        unset($columns);
                        $columns[] = "<div style=\"text-align: center;\">" . _M('Código', $module) . "</div>";
                        $columns[] = "<div style=\"text-align: center;\">" . _M('Nome', $module) . "</div>";
                        
                        $tableRaw = new MTableRaw($currComps->title, $currComps->data, $columns);

                        $tableRaw->setAlternate(true);
                        
                        $tableRows[] = array($tableRaw);
                    }
                }
                
                $total       = "<div style=\"background-color: black; color: white; text-align: right;\"><b>" . _M('Total do curso', $module) . ': ' . $tableData->total . "</b></div>";
                $tableRows[] = array($total);
                $courseTable = new MTableRaw($tableData->title, $tableRows, null);
                $this->addField($courseTable);
                $this->addField(new MSeparator());
            }
        }
    }
}

?>
