<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Period form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 */

/**
 * Form to manipulate a period
 **/
class FrmPeriod extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcdPeriod(), array('periodId'), 'BusPeriod');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_request('function');

        // Get data
        $data = $this->getTypesData();
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $data->periodId = MIOLO::_REQUEST('periodId');
            
            $fields[] = new MTextLabel('periodId', $data->periodId, _M('Código',$module));
            $fields[] = new MHiddenField('periodId', $data->periodId);

            $business = new BusinessAcademicBusPeriod();
            $data = $business->getPeriod($data->periodId);
        }
        else
        {
            $periodId = new MTextField('periodId', $this->getFormValue('periodId', $data->periodId), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $periodId->setJsHint(_M('Informe o código do período', $module));
            $fields[] = $periodId;
            $validators[] = new MRequiredValidator('periodId');
        }

        $data->description = $this->getFormValue('description', $data->description);
        $description = new MTextField('description', $data->description, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição do período', $module));
        $fields[] = $description;
        
        $businessPeriod = new BusinessAcademicBusPeriod();
        $fields[] = new MComboBox('prevPeriodId', $this->getFormValue('prevPeriodId', $data->prevPeriodId), _M('Período anterior', $module), $businessPeriod->listPeriod());
        
        $validators[] = new MRequiredValidator('description');

        parent::defineFields($fields, $validators, $data);
    }
    
    public function saveTypeData($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = $MIOLO->_REQUEST('function');
        
        $data = $this->getTypesData();
        
        // Não pode ser registrado como período anterior o prório período a ser cadastrado ou editado.
        if ( $data->periodId == $data->prevPeriodId )
        {
            $goto = $MIOLO->GetActionURL($module, 'main:register:period', null, array('function' => $function, 'periodId' => $data->periodId));
            $MIOLO->error("Ei! Não faz nenhum sentido o período anterior ser igual ao registrado!", $goto);
        }
        
        //Valida se o período anterior ja não é utilizado por outro período
        $busPeriod = new BusinessAcademicBusPeriod();
        $filters = new stdClass();
        $filters->prevPeriodId = $data->prevPeriodId;
        $searchPeriod = $busPeriod->searchPeriod($filters);
        if( count($searchPeriod) > 0 )
        {
            $periodoCadastrado = $searchPeriod[0][0];
            $args['function'] = $function;
            if( $function == SForm::FUNCTION_UPDATE )
            {
                $args['periodId'] = $data->periodId;
            }
            $goto = $MIOLO->GetActionURL($module, 'main:register:period', null, $args);
            $MIOLO->error(_M("Não é possível utilizar o período @1 como período anterior. Ele já é período anterior do período @2", $module, $data->prevPeriodId, $periodoCadastrado), $goto);
        }
        
        $ok = parent::saveTypeData($sender);
        
        if ( $ok && $this->isInsertFunction() )
        {
            $gotoYes = $MIOLO->GetActionURL($module, $action, null, array('event' => 'setCurrentPeriod', 'periodId' => $data->periodId));
            $gotoNo = $MIOLO->GetActionURL($module, $action, null, array('function' => 'search'));
            
            $MIOLO->question(_M('Foi detectado que um novo período foi inserido. Caso queira que o parâmetro <b>CURRENT_PERIOD_ID</b> seja atualizado automaticamente, clique em `SIM`, do contrário, `NÃO`.'), $gotoYes, $gotoNo);
        }
        
        return $ok;
    }
}
?>