<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Augusto A. Silva [augusto@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Augusto A. Silva [augusto@solis.coop.br]
 *
 * @since
 * Class created on 06/09/2013
 */

class FrmTransferenciaDeVersaoResumo extends SStepByStepForm
{
    public function __construct($steps = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        //Load data
        $allData = $this->getStepData();
        $MIOLO->session->set('allData', $allData);
        
        $fields[] = new MDiv('divLimbo');
        
        if ( $allData->transferencia != TRANSFERENCIA_EM_LOTE )
        {            
            $options = array(
                'value' => array(
                    _M('Pessoa', $module) => $allData->personId . ' - ' . $allData->personName,
                    _M('Contrato', $module) => $allData->contractId,
                    _M('Curso', $module) => $allData->courseId . ' - ' . $allData->courseName,
                    _M('Versão de origem', $module) => $allData->courseVersion,
                    _M('Versão de destino', $module) => $allData->courseVersionNew,
                    _M('Turno', $module) => $allData->turnId . ' - ' . $allData->turnDescription,
                    _M('Unidade', $module) => $allData->unitId . ' - ' . $allData->unitDescription,
                    _M('Turma de destino', $module) => $allData->destinationClassId . ' - ' . $allData->destinationClassDescription,
                ),
                'title' => _M('Informações da transferência', $module),
                'columns' => 1,
                'textWidth' => '500px'
            );        
            $fields[] = new SInformationField($options);

            if( ( $allData->takeCurriculum == DB_TRUE || $allData->takeCurriculumLinks == DB_TRUE ))
            {
                $fields = array_merge($fields, $this->getTransferData());
            }
        }
        else
        {
            $options = array(
                'value' => array(
                    _M('Curso', $module) => $allData->courseId . ' - ' . $allData->curriculumCourseName,
                    _M('Versão de origem', $module) => $allData->curriculumCourseVersion,
                    _M('Versão de destino', $module) => $allData->courseVersionNew,
                    _M('Turno', $module) => $allData->curriculumCourseTurnId . ' - ' . $allData->curriculumCourseTurnDescription,
                    _M('Unidade', $module) => $allData->curriculumCourseUnitId . ' - ' . $allData->curriculumCourseUnitDescription,
                    _M('Turma de destino', $module) => $allData->destinationClassId . ' - ' . $allData->destinationClassDescription,
                ),
                'title' => _M('Informações da transferência', $module),
                'columns' => 1,
                'textWidth' => '500px'
            );        
            $fields[] = new SInformationField($options);
            
            // Obter todos os contratos que serão transferidos.
            $gridData = $this->obterContratosQueSeraoTransferidos($allData);
            $fields[] = $grid = $MIOLO->getUI()->getGrid($module, 'GrdTransferenciaDeVersaoDeCursoEmLote');
            $grid->setTitle(_M('Alunos que serão transferidos.', $module));
            $grid->setClose(false);
            $grid->setData($gridData);
        }
        
        $fields[] = new MSpacer();
        
        $this->setFields($fields);
    }   
    
    /**
     * Retorna todos os contratos que serão transferidos de versão de curso.
     * 
     * @param stdClass $data
     * @return array
     */
    private function obterContratosQueSeraoTransferidos($data)
    {
        $filters = new stdClass();
        $filters->courseId = $data->courseId;
        $filters->courseVersion = $data->curriculumCourseVersion;
        $filters->turnId = $data->curriculumCourseTurnId;
        $filters->unitId = $data->curriculumCourseUnitId;
        $filters->classId = $data->classId;
        
        return AcdCourseTransfer::obterContratosParaTransferenciaDeVersaoDeCursoEmLote($filters);
    }
    
    /**
     * Gera a popup de vizualização do rezumo da transferência 
     * de versão de curso para o contrato.
     * 
     * @param stdClass $args
     */
    public function popupVizualisarResumo($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $fields = self::getTransferData($args->contractId);
        
        MPopup::show('popupVizualisarResumo', $fields, 'Teste');
    }
    
    /*
     * Get the transfer data information
     * 
     * @param int $contractId
     */
    public static function getTransferData($contractId = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $allData = $MIOLO->session->getValue('allData');
        
        if ( $allData->transferencia == TRANSFERENCIA_EM_LOTE )
        {
            $allData->contractId = $contractId;
            $allData->turnId     = $allData->curriculumCourseTurnId;
            $allData->unitId     = $allData->curriculumCourseUnitId;
        }
        
        try
        {        
            $destinationCourse = new AcdCourseOccurrence();
            $destinationCourse->courseId = $allData->courseId;
            $destinationCourse->courseVersion = $allData->courseVersionNew;
            $destinationCourse->turnId = $allData->turnId;
            $destinationCourse->unitId = $allData->unitId;

            $options['takeCurriculum'] = $allData->takeCurriculum;
            $options['takeCurriculumLinks'] = $allData->takeCurriculumLinks;

            SDatabase::beginTransaction(); //Inicia a transação

            $courseTransfer = new AcdCourseTransfer($allData->contractId, $destinationCourse, $allData->destinationClassId, $allData->periodId, $allData->reasonId, $options);
            $transferData   = $courseTransfer->transferenciaDeVersao(); //Executa a tranferencia

            //Disciplinas comuns migradas       
            if( count($transferData->disciplinas) > 0 )
            {
                $grid = $MIOLO->getUI()->getGrid($module,'GrdCourseTransferCanceledEnrolls', $data);
                $grid->setTitle(_M('Disciplinas comuns entre as versões', $module));
                $grid->setClose(false);
                $grid->setData($transferData->disciplinas);
                $fields[] = new MDiv('divTransferData1', $grid);
                $fields[] = new MSpacer();
            }

            //Disciplinas equivalentes aproveitadas
            if( count($transferData->vinculos) > 0 )
            {
                $grid = $MIOLO->getUI()->getGrid($module,'GrdCourseTransferCanceledEnrolls', $data);
                $grid->setTitle(_M('Disciplinas equivalentes entre as versões', $module));
                $grid->setClose(false);
                $grid->setData($transferData->vinculos);
                $fields[] = new MDiv('divTransferData2', $grid);
                $fields[] = new MSpacer();
            }
            
            //Disciplinas sem nenhum vínculo com a nova matriz curricular.
            if( ( $allData->takeCurriculum == DB_TRUE || $allData->takeCurriculumLinks == DB_TRUE ) && count($transferData->noActions) > 0 )
            {                
                $grid = $MIOLO->getUI()->getGrid($module,'GrdCourseTransferCanceledEnrolls', $data);
                $grid->setTitle(_M('Disciplinas restantes da antiga versão.', $module));
                $grid->setClose(false);
                $grid->setData($transferData->noActions);
                $fields[] = new MDiv('divTransferData3', $grid);
                $fields[] = new MSpacer();
            }

            SDatabase::rollback(); //Volta as alterações

            return $fields;
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $MIOLO->error($e);
        }
    }
    
    public function mostraPopupInformarNota($args)
    {
        $args = explode('|', $args->args);
        
        $busCurriculumLink = new BusinessAcademicBusCurriculumLink();
        $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();
        
        $filters = new stdClass();
        $filters->curriculumLinkId = $args[0];
        $links = $busCurriculumLink->searchCurriculumLink($filters);

        $contractId = $args[1];
        $fields[] = $contractField = new MTextField('contractId', $contractId);
        $contractField->addAttribute('hidden');
        
        foreach( $links as $link )
        {            
            $nota = $busDegreeEnroll->obterNotaPorCurriculumEContrato($link[0], $contractId);
            
            $fields[] = new MDiv();
            $fields[] = new MLabel($link[4] . ' - NOTA: ' . $nota);
        }
        
        $fields[] = new MDiv();
        $fields[] = new MHContainer('contNovaNota', array(new MLabel($links[0][9] . ' - NOTA: '), new MTextField("nota[{$args[0]}]", $_SESSION['novaNota'][$contractId][$args[0]])));
        $fields[] = new MDiv();
        
        $action = SForm::getAjaxAction('FrmTransferenciaDeVersaoResumo::salvarNota', 'mPopupResponse', false, NULL, true, false);
        $fields[] = new MButton('btnSalvarNota', _M('OK'), $action);
        
        $form = new MVContainer('contSalvarNota', SAGU::alignFields($fields));
        
        MPopup::show('popupInformarNota', array($form), _M('Informe a nota da disciplina equivalente'));
    }
    
    public function salvarNota($args)
    {
        foreach ( $args->nota as $key => $nota )
        {
            $_SESSION['novaNota'][$args->contractId][$key] = $nota;
        }
        
        MPopup::remove();
    }


    public function finalizeButton_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $data = $this->getStepData();
        
        $destinationCourse = new AcdCourseOccurrence();
        $destinationCourse->courseId = $data->courseId;
        $destinationCourse->courseVersion = $data->courseVersionNew;
        $destinationCourse->turnId = $data->turnId;
        $destinationCourse->unitId = $data->unitId;
        
        $options['takeCurriculum'] = $data->takeCurriculum;
        $options['takeCurriculumLinks'] = $data->takeCurriculumLinks;
        
        try 
        {
            SDatabase::beginTransaction();

            if ( $data->transferencia == TRANSFERENCIA_EM_LOTE )
            {
                $destinationCourse->turnId = $data->curriculumCourseTurnId;
                $destinationCourse->unitId = $data->curriculumCourseUnitId;
                
                $gridData = $MIOLO->_REQUEST('selectGrdTransferenciaDeVersaoDeCursoEmLote');
                
                foreach ( $gridData as $contractId )
                {
                    $courseTransfer = new AcdCourseTransfer($contractId, $destinationCourse, $data->destinationClassId, $data->periodId, $data->reasonId ,$options);
                    $courseTransfer->transferenciaDeVersao();
                }
            }
            else
            {
                $courseTransfer = new AcdCourseTransfer($data->contractId, $destinationCourse, $data->destinationClassId, $data->periodId, $data->reasonId ,$options);
                $courseTransfer->transferenciaDeVersao(); //Executa a tranferencia
            }
            
            SDatabase::commit();
        }
        catch ( Exception $e )
        {
            parent::finalizeButton_click($args);
            
            SDatabase::rollback();
            $MIOLO->error($e->getMessage());
        }
        
        parent::finalizeButton_click($args);
       
        $goto = $MIOLO->getActionURL('academic', 'main:process:transferenciaDeVersao');
        SAGU::information(_M('Transferência de versão de curso realizada com sucesso.', $module), $goto);
    }
}
?>