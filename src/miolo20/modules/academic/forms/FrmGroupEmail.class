<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Form to send an email to a group pupils
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 03/01/2008
 *
 **/

/**
 * Form to send an email to a group pupils
 **/
class FrmGroupEmail extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct( _M('Enviar email para alunos da oferecida', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {        
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $groupId = $MIOLO->_request('groupId');
        
        if (strlen($groupId) > 0)
        {
            $busEnroll   = new BusinessAcademicBusEnroll();
            $groupPupils = $busEnroll->listGroupEnrolledPeople($groupId);
            
            $busGroup  = new BusinessAcademicBusGroup();
            $dataGroup = $busGroup->getGroup($groupId);
            
            $fields[] = new MHiddenField('groupId', $groupId);
        
            $fields[] = new MTextLabel('groupLabel', $groupId . ' - ' . $dataGroup->curriculumCurricularComponentName, _M('Disciplina oferecida', $module));
        }
        else
        {
            $this->addError(_M('Nenhum código de oferecida obtido.'));
        }
        
        $busEmail  = new BusinessBasicBusEmail();
        $dataEmail = $busEmail->getEmail(SAGU::getParameter('ACADEMIC', 'ACD_GROUP_EMAIL_ID'));
        
        unset($flds);
        
        if ($MIOLO->checkAccess('FrmEnrollContract', A_ADMIN, false, true))
        {
            unset($flds);
            
            $from = new MTextField('from', $this->getFormValue('from', $dataEmail->from), _M('De',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $from->setJsHint(_M('Informe o e-mail de origem',$module));
            $flds[] = $from;
            $validators[] = new MRequiredValidator('from');
        }
        else
        {
            if (strlen(trim($dateEmail->from)) > 0)
            {
                $fields[] = new MHiddenField('server', $dataEmail->server);
                $fields[] = new MHiddenField('port', $dataEmail->port);
                $fields[] = new MHiddenField('from', $dataEmail->from);
            }
            else
            {
                $MIOLO->error(_M('Para enviar e-mails para os alunos de uma oferecida você precisa cadastrar um e-mail em Básico::Configurações::E-mail e atualizar o parâmetro ACD_GROUP_EMAIL. Se isso não for possível, contate o administrador do sistema.', $module), $MIOLO->getActionURL($module, 'main:process:group'));
            }
        }

        $bcc = new MTextField('bcc', $this->getFormValue('bcc', $data->bcc), _M('Cco',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $bcc->setJsHint(_M('Informe o e-mail oculto',$module));
        $flds[] = $bcc;

        $subject = new MTextField('subject', $this->getFormValue('subject', $data->subject), _M('Assunto',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $subject->setJsHint(_M('Informe o assunto',$module));
        $flds[] = $subject;
        $validators[] = new MRequiredValidator('subject');
        
        $bgHeader = new MBaseGroup('bgHeader', _M('Cabeçalho do email', $module), $flds, 'vertical');
        $fields[] = $bgHeader;
        $fields[] = new MSeparator();
        unset($flds);
        
        if (count($groupPupils) > 0)
        {
            $toLabel  = new MText('to', _M('Enviar para', $module) . ':');
            $toLabel->setBold(true);
            $fields[] = $toLabel;
            $fields[] = new MSeparator('<hr>');
            
            $btnInvert = new MButton('btnInvertSelection', _M('Inverter seleção', $module), 'invertSelection()');
            $fields[] = $btnInvert;
            
            $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdGroupEmailPupils');
            $grdResults->setData($groupPupils);
            $grdResults->name = 'grd';
            $grdResults->setScrollHeight(SAGU::getParameter('BASIC', 'GRID_SCROLL_HEIGHT'));
            $fields[] = $grdResults;
            
            $script = "    function invertSelection()\n    {\n";
            $x = 0;
            
            foreach ( $groupPupils as $row )
            {
                $script .= '        if ( document.' . $this->name . '[\'selectgrd[' . $x . ']\'].checked == true )' . "\n        {\n";
                $script .= '            document.' . $this->name . '[\'selectgrd[' . $x . ']\'].checked = false;' . "\n";
                $script .= '        }' . "\n        else\n        {\n";
                $script .= '            document.' . $this->name . '[\'selectgrd[' . $x . ']\'].checked = true;' . "\n";
                $script .= '        }' . "\n";
                $x++;
            }
            
            $script .= "    }\n";
            $this->page->addJsCode($script);
        }

        $fields[] = new Separator();
        
        $hint .= '$courseId - '       . _M('Código do curso', $module) . "\n".
                 '$courseVersion - '  . _M('Versão do curso', $module) . "\n".
                 '$courseName - '     . _M('Nome do curso', $module) . "\n" .
                 '$currCompId - '     . _M('Código da disciplina', $module) . "\n" .
                 '$currCompVersion - '. _M('Versão da disciplina', $module) . "\n" .
                 '$currCompName - '   . _M('Nome da disciplina', $module) . "\n" .
                 '$personId - '       . _M('Código da pessoa', $module) . "\n" .
                 '$personName - '     . _M('Nome da pessoa', $module);
        
        $hintText = new MMultiLineField('hintText', $this->getFormValue('hintText', $hint), _M('Variáveis disponíveis' ,$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), 10, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $hintText->setReadOnly(true);
        $hintText->setJSHint(_M('Variáveis que podem ser usadas na mensagem', $module));
        
        $body = new MMultiLineField('body', $this->getFormValue('body', $data->body), _M('Mensagem',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE')*2, 10, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE')*2);
        $body->setJsHint(_M('Informe a mensagem',$module));
        $validators[] = new MRequiredValidator('body');
        
        $cnt = new MHContainer('cntmsg', array($body, $hintText));
        $fields[] = $cnt;

        $btnSend = new MButton('btnSend', _M('Enviar', $module));
        $fields[] = $btnSend;

        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }

    /**
     * Event triggered when user clicks Send button
     **/
    public function btnSend_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getData();
        
        $pupils = $MIOLO->_request('selectgrd');
        
        if (count($pupils) > 0)
        {
            $busEnroll = new BusinessAcademicBusEnroll();
            $busContract = new BusinessAcademicBusContract();
            $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
            $busCurriculum = new BusinessAcademicBusCurriculum();
            
            $search = array('$courseId', '$courseVersion', '$courseName', '$currCompId', '$currCompVersion', '$currCompName', '$personId', '$personName');
            
            foreach ($pupils as $pupilEnroll)
            {
                $dataEnroll = $busEnroll->getEnroll($pupilEnroll);
                $dataContract = $busContract->getContract($dataEnroll->contractId);
                $dataPhysicalPerson = $busPhysicalPerson->getPhysicalPerson($dataContract->personId);
                $dataCurriculum = $busCurriculum->getCurriculum($dataEnroll->curriculumId);
                
                $values = array($dataContract->courseId, $dataContract->courseVersion, $dataContract->courseName, $dataCurriculum->curricularComponentId, $dataCurriculum->curricularComponentVersion, $dataCurriculum->curricularComponentName, $dataPhysicalPerson->personId, $dataPhysicalPerson->name);
                
                //Include class sendEmail
                $MIOLO->uses( 'classes/sendEmail.class', 'basic' );
                //Parameters
                $from = strtolower($data->from);
                $fromName = strtolower($data->from);
                $recipient[strtolower($dataPhysicalPerson->email)] = strtolower($dataPhysicalPerson->email);
                $subject = str_replace($search, $values, $data->subject);
                $body = '<html><body>' . str_replace($search, $values, str_replace("\n", '<br>', $data->body) ) . '</body></html>';
                $bcc = explode(',', $data->bcc);
                //Instance of sendEmail
                $okEmail = new sendEmail($from, $fromName, $recipient , $subject, $body, $bcc );
                //Send mail
                $okEmail->sendEmail();                
            }
            
            $msg     = _M('E-mail enviado.', $module);
            $caption = _M('Informação', $module);
            $MIOLO->information($msg, $MIOLO->getActionURL($module, 'main:process:group'));
        }
        else
        {
            $this->addError(_M('Você deve selecionar pelo menos um aluno da lista', $module));
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new basEmail();

        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $data->$var = $this->$var->value;
            }
        }
        return $data;
    }
}

?>
