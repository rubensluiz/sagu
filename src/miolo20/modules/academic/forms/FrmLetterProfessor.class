<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Letter professor form
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 04/07/2006
 *
 **/

/**
 * Form to manipulate a pupilListing
 **/
class FrmLetterProfessor extends SForm
{
    private $home;
    
    //Variable used to retrieve information from time
    public $krono;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;        
        $this->krono = new Mkrono();
        
        parent::__construct(_M('Carta para professores', $module), NULL, NULL);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $divError = new MDiv('divError', null, null, 'align=center');
        $fields[] = $divError;
        
        $fields[] = new MHiddenField('limbo', '');    

        //field period
        $business = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $business->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = $periodId;

        //Field begin lesson
        $beginLessonLabel = new MText('beginLessonLabel', _M('Iníco das aulas', $module) . ':');
        $beginLessonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginLesson = new MTextField('beginLesson', $this->getFormValue('beginLesson', $data->beginLesson) ? $this->getFormValue('beginLesson', $data->beginLesson) : SAGU::getParameter('ACADEMIC', 'ACD_LETTER_PROFESSOR_BEGIN_DATE'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $beginLesson->setJsHint(_M('Informar a data inicial das aulas', $module));        
        $hctBeginLesson = new MHContainer('hctBeginLesson', array($beginLessonLabel, $beginLesson));
        $hctBeginLesson->setShowLabel(false);
        $fields[] = $hctBeginLesson;
        
        //field meeting date
        $meetingDateLabel = new MText('meetingDateLabel', _M('Data de encontro', $module) . ':');
        $meetingDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $meetingDate = new MTextField('meetingDate', $this->getFormValue('meetingDate', $data->meetingDate) > 0 ? $this->getFormValue('meetingDate', $data->meetingDate) : SAGU::getParameter('ACADEMIC', 'ACD_LETTER_PROFESSOR_METTING_DATE') , '', 20);
        $meetingDate->setJsHint('Enter the meeting date');
        $hctMeetingDate = new MHContainer('hctMeetingDate', array($meetingDateLabel, $meetingDate));
        $hctMeetingDate->setShowLabel(false);
        $fields[] = $hctMeetingDate;

        //field meeting hour
        $meetingHourLabel = new MText('meetingHourLabel', _M('Hora de encontro',$module) . ':');
        $meetingHourLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $meetingHour = new MTextField('meetingHour', $this->getFormValue('meetingHour', $data->meetingHour) > 0 ? $this->getFormValue('meetingHour', $data->meetingHour) : SAGU::getParameter('ACADEMIC', 'ACD_LETTER_PROFESSOR_METTING_HOUR'), '', 17);
        $meetingHour->setJsHint(_M('Informe a hora de encontro', $module));
        $hctMeetingHour = new MHContainer('hctMeetingHour', array($meetingHourLabel, $meetingHour));
        $hctMeetingHour->setShowLabel(false);
        $fields[]       = $hctMeetingHour;

        //field meeting place
        $meetingPlaceLabel = new MText('meetingPlaceLabel', _M('Local de encontro', $module) . ':');
        $meetingPlaceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $meetingPlace = new MTextField('meetingPlace', $this->getFormValue('meetingPlace', $data->meetingPlace) > 0 ? $this->getFormValue('meetingPlace', $data->meetingPlace) : SAGU::getParameter('ACADEMIC', 'ACD_LETTER_PROFESSOR_METTING_PLACE'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $meetingPlace->setJsHint('Enter the meeting place', $module);
        $hctMeetingPlace = new MHContainer('hctMeetingPlace', array($meetingPlaceLabel, $meetingPlace));
        $hctMeetingPlace->setShowLabel(false);
        $fields[]       = $hctMeetingPlace;

        //field delivery contents
        $deliveryContentsLabel = new MText('deliveryContentsLabel', _M('Entrega de conteúdos', $module) . ':');
        $deliveryContentsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $deliveryContents = new MTextField('deliveryContents', $this->getFormValue('deliveryContents', $data->deliveryContents) > 0 ? $this->getFormValue('deliveryContents', $data->deliveryContents) : SAGU::getParameter('ACADEMIC', 'ACD_LETTER_PROFESSOR_DELIVERY_CONTENTS'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $deliveryContents->setJsHint('Enter the date for delivery od coments', $module);
        $hctDeliveryContents = new MHContainer('hctDeliveryContents', array($deliveryContentsLabel, $deliveryContents));
        $hctDeliveryContents->setShowLabel(false);
        $fields[] = $hctDeliveryContents;

        //field number craft
        $numberCraftLabel = new MText('numberCraftLabel', _M('Número de ofício', $module) . ':');
        $numberCraftLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $numberCraft = new MTextField('numberCraft', $this->getFormValue('numberCraft', $data->numberCraft), '', 5);
        $numberCraft->setJsHint(_M('Informe o número do ofício', $module));
        $hctnumberCraft = new MHContainer('hctnumberCraft', array($numberCraftLabel, $numberCraft));
        $hctnumberCraft->setShowLabel(false);
        $fields[] = $hctnumberCraft;

        //Field sector
        $sectorLabel = new MText('sectorLabel', _M('Setor do documento', $module).':');
        $sectorLabel->setClass('m-caption m-caption-required');
        $sectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sectorId     = new MLookupTextField('sectorId', $this->getFormValue('sectorId', $data->sectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sectorName', 'basic', 'Sector', null, null, true);
        $sectorId->setJsHint(_M('Informe o código do setor', $module));
        $validators[] = new MIntegerValidator('sectorId', _M('Setor', $module), 'required');
        $sectorName   = new MTextField('sectorName', $this->getFormValue('sectorName', $data->sectorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sectorName->setJsHint(_M('Descrição do setor', $module));
        $sectorName->setReadOnly(true);
        $hctSector = new MHContainer('hctSector', array($sectorLabel, $sectorId, $sectorName));
        $hctSector->setShowLabel(true);
        $fields[]  = $hctSector;

        //Field formation level
        $business         = new BusinessAcademicBusFormationLevel();
        $formationLevelId = new MSelection('formationLevelId', $this->getFormValue('formationLevelId', $data->formationLevelId), _M('Grau de formação', $module), $business->listFormationLevel());
        $formationLevelId->setJsHint(_M('Selecione o grau de formação', $module));
        $validators[]     = new MRequiredValidator('formationLevelId');
        $fields[]         = $formationLevelId;

        //Label of the information
        $fields[] = new MText('description', 'Obs.: ' . _M('O campo professor não é obrigatório, mas serve para imprimir a carta de disciplinas para um único professor',$module) . '.');
        
        //Field professor
        $professorLabel = new MText('professorLabel', _M('Professor', $module).':');
        $professorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $professorId  = new MLookupTextField('professorId', $this->getFormValue('professorId',$data->professorId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorId->setJsHint(_M('Informe o código do professor', $module));
        $professorName = new MTextField('professorName', $this->professorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $professorName->setJsHint(_M('Nome do professor', $module));
        $professorName->setReadOnly(true);
        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
        $hctProfessor->setShowLabel(true);
        $fields[]   = $hctProfessor;

        //Generate option
        unset($opts);
        $opts[] = new MOption( 'opt1', 1, _M('por dia da semana', $module ), true );
        $opts[] = new MOption( 'opt2', 2, _M('por data', $module ), false );
        
        //Print mode
        $printModeLabel = new MText( 'printModeLabel', _M('Modo de impressão', $module ) . ':' );
        $printModeLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $printMode = strlen( $this->GetFormValue( 'printMode', $data->printMode ) ) > 0 ? $this->GetFormValue( 'printMode', $data->printMode ) : 1;
        $printMode = new MRadioButtonGroup( 'printMode', '', $opts, $printMode, null, 'horizontal' );
        $printMode->setShowLabel( false );
        $hctPrintMode = new MHContainer( 'hctPrintMode', array($printModeLabel, $printMode) );
        $fields[] = $hctPrintMode;

        //Options the select file type
        unset($opts);
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);

        //Field select file type
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType','pdf'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        //field emission date
        $emissionDate = new MCalendarField('emissionDate', $this->getFormValue('emissionDate', date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'))    ), _M('Data de emissão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão', $module));
        $validators[] = new MDateDMYValidator('emissionDate', '', 'optional');
        $fields[] = $emissionDate;
        
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);        
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $filter = $this->getTypesData();

        set_time_limit(0);

        $day = $this->krono->getDay($filter->emissionDate);    
        $month = $this->krono->getMonth($filter->emissionDate);
        $year = $this->krono->getYear($filter->emissionDate);

        $descriptionMonth = $this->krono->nToMonth($month);

        //Get info of company
        $businessCompany = new BusinessBasicBusCompany();
        $company = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        //Get info of legal person
        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $legalPerson = $businessLegalPerson->getLegalPerson($company->personId);

        //Get info of city
        $businessCity = new BusinessBasicBusCity();
        $city = $businessCity->getCity($legalPerson->cityId);

        $businessLetterProfessor = new BusinessAcademicBusLetterProfessor();
        $businessSchedule = new BusinessAcademicBusSchedule();
        $businessTurn = new BusinessBasicBusTurn();

        //Instance with agata
        $MIOLO->uses('/core/AgataAPI.class');
        $api = new AgataAPI;

        $api->setParameter('$fakeName', $legalPerson->fakeName);
        $api->setParameter('$department', $filter->sectorDocument);
        $api->setParameter('$city', $city->name);
        $api->setParameter('$companyStateId', $city->stateId);
        $api->setParameter('$companyLocation', $legalPerson->location);
        $api->setParameter('$semester', $filter->periodId);
        $api->setParameter('$beginLesson', $filter->beginLesson);
        $api->setParameter('$meetingDate', $filter->meetingDate);    
        $api->setParameter('$meetingHour', $filter->meetingHour);
        $api->setParameter('$meetingPlace', $filter->meetingPlace);    
        $api->setParameter('$deliveryContents', $filter->deliveryContents);
        $api->setParameter('$numberCraft', $filter->numberCraft);
        $api->setParameter('$day', $day);
        $api->setParameter('$month', $descriptionMonth);
        $api->setParameter('$year', $year);    

        $api->setLanguage($MIOLO->getConf('i18n.language'));
        $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/letterProfessor.sxw');

        try
        {
            $infoLetterProfessor = $businessLetterProfessor->getProfessorFromPeriod($filter->periodId, $filter->formationLevelId, $filter->personId);

            if ( (count($infoLetterProfessor) > 0) )
            {
                foreach ( $infoLetterProfessor AS $index => $professor )
                {
                    $infoCurricularComponent = $businessLetterProfessor->getCurricularComponentByProfessor($professor[0], $filter->periodId);

                    if ( isset($infoCurricularComponent) )
                    {
                        
                        foreach ( $infoCurricularComponent AS $index1 => $curricularComponent )
                        {
                            if ( $oldProfessor != $professor[0] )
                            {
                                $oldProfessor = $professor[0];
                                
                                $dataPerson[$oldProfessor] = array(
                                        $professor[0], //Professor code
                                        $professor[1], //Professor name
                                        $professor[2], //Location
                                        $professor[3], //Neighborhood
                                        $professor[4], //City
                                        $professor[5], //State
                                        $professor[6], //number
                                        $professor[7], //complement
                                        $professor[8]  //zip code
                                );
                            }
                            
                            if ( $filter->printMode == 1 )
                            {
                                $infoSchedule = $businessSchedule->getScheduleForReport1($curricularComponent[0]);
                                
                                if ( count($infoSchedule->weekDays)>0 )
                                {
                                    $count1 = 1;
                                    foreach ( $infoSchedule->weekDays AS $index2 => $weekDay )
                                    {
                                        //Set as false to return the day of the week shortened.
                                        $this->krono->abbr = true;
                                        $sWeekDay = $this->krono->nToDay( $weekDay );
                                        $sWeekDay = strtoupper($sWeekDay);
    
                                        if ( count($infoSchedule->turns)>0 )
                                        {
                                            for ( $count = 0; $count < count($infoSchedule->turns); $count++ )
                                            {
                                                $dataTurn = $businessTurn->getTurn($infoSchedule->turns[$count]);
                                                
                                                if ( (strlen($infoSchedule->turns[$count+1]) > 0) )
                                                {
                                                    $infoWeek .= $sWeekDay . '-' . $dataTurn->shortDescription . '/';
                                                }
                                                else 
                                                {
                                                    $infoWeek .= $sWeekDay . '-' . $dataTurn->shortDescription;
                                                }
                                            }
                                            
                                            if ( count($infoSchedule->weekDays) > 1 && ($count1 != count($infoSchedule->weekDays)) )
                                            {
                                                $infoWeek .= '/';
                                            }
                                            
                                            $count1++;
                                        }
                                    }
                                }
                                else 
                                {
                                    $infoWeek = _M('Indef.', $module);
                                }
                                
                                $subDataPerson[0][$oldProfessor][] = array(
                                        $infoWeek,
                                        $curricularComponent[1],
                                        $curricularComponent[2],
                                        $curricularComponent[5],
                                        $curricularComponent[4]
                                );
    
                                unset($infoWeek);
                            }
                            elseif ( $filter->printMode == 2 )
                            {
                                $infoSchedule = $businessSchedule->getGroupOccurrenceDates($curricularComponent[0]);

                                if ( strlen($infoSchedule) > 0 )
                                {

                                    foreach ( $infoSchedule AS $index2 => $occurrenceDates )
                                    {
                                        $subDataPerson[0][$oldProfessor][$index1 . $index2] = array(
                                                $occurrenceDates,
                                                $curricularComponent[1],
                                                $curricularComponent[2],
                                                $curricularComponent[5],
                                                $curricularComponent[4]
                                        );
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                throw new Exception(_M('Nenhum registro encontrado.', $module));
            }

            $api->setDataArray($dataPerson);
            $api->setSubDataArray($subDataPerson);

            if ( ! $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/letterProfessor.sxw')) )
            {
                throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
            }

            if ( $filter->fileType == 'pdf' )
            {
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/letterProfessor.pdf');
                if ( ! $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/letterProfessor.sxw') )
                {
                    throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                }
            }

            $api->fileDialog();
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
    
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data->periodId = $this->periodId->value;
        $data->personId = $this->professorId->value;
        $data->professorName = $this->professorName->value;
        $data->beginLesson = $this->beginLesson->value;
        $data->meetingDate = $this->meetingDate->value;
        $data->meetingHour = $this->meetingHour->value;
        $data->meetingPlace = $this->meetingPlace->value;
        $data->deliveryContents = $this->deliveryContents->value;
        $data->numberCraft = $this->numberCraft->value;
        $data->emissionDate = $this->emissionDate->value;
        $data->sectorDocument = $this->sectorName->value;
        $data->fileType = $this->radFileType->value;
        $data->printMode = $this->printMode->value;
        $data->formationLevelId = $this->formationLevelId->value;
        
        return $data;
    }
}

?>
