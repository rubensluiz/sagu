<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/12/2005
 *
 **/

/**
 * Form to search the basCenter table
 */
class FrmSubstitutionUnblockSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);        
        parent::__construct(_M('Localizar', $module), new acdCurricularComponentUnblock(), 'curricularComponentUnblockId', 'BusSubstitutionUnblock');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        //Field limbo
        $limbo = new MHiddenField('limboS', '');
        $fields[] = $limbo;
        
        //Field curricular component unblock
        $curricularComponentUnblockIdS = new MHiddenField('curricularComponentUnblockIdS','');
        $fields[] = $curricularComponentUnblockIdS;

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodIdS', strlen($this->getFormValue('periodIdS', $data->periodId))>0 ? $this->getFormValue('periodIdS', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        $filters = $this->getTypesData();
        
        //Field lookup contract
        $fields[] = new MHiddenField('limboS', '');
        $MIOLO->getClass( 'academic', 'lookupContract' );
        $fields[] = new SLookupContract('contractIdS', $filters, false);
        
        //Field learning period
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Período letivo', $module) . ':');
        $learningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));      
        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS'), _M('Código do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('periodIdS', null, null, null, null, 'learningPeriodS'), $module, 'LearningPeriod', null, array('periodId' => 'periodIdS', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'));
        $learningPeriodIdS->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MIntegerValidator('learningPeriodIdS', _M('Código do período letivo',$module));
        $learningPeriodS = new MTextField('learningPeriodS', $this->getFormValue('learningPeriodS',$this->substitutionUnblockSearch->learningPeriodS), _M('Período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodS->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodS->setReadOnly(true);
        $hctlearningPeriodS = new MHContainer('hctlearningPeriodS', array($learningPeriodLabelS, $learningPeriodIdS, $learningPeriodS));
        $hctlearningPeriodS->setShowLabel(false);
        $fields[]    = $hctlearningPeriodS;

        //Field curricular component
        $curricularComponentLabelC = new MText('curricularComponentLabelCS', _M('Disciplina', $module) . ':');
        $curricularComponentLabelC->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentIdC = new MLookupTextField('curricularComponentIdCS', $this->getFormValue('curricularComponentIdCS'), _M('Código da disciplina substituta',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentVersionCS , curricularComponentNameCS', $module, 'CurricularComponentInCurriculum', null, array('curricularComponentId' => 'curricularComponentIdS'), true);
        $curricularComponentIdC->setJsHint(_M('Informe a disciplina', $module));
        $curricularComponentVersionC = new MTextField('curricularComponentVersionCS', $this->getFormValue('curricularComponentVersionCS', $data->curricularComponentVersionCS), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersionC->setJsHint(_M('Versão da disciplina', $module));
        $curricularComponentVersionC->setReadOnly(true);
        $curricularComponentNameC = new MTextField('curricularComponentNameCS', $this->getFormValue('curricularComponentNameCS', $data->curricularComponentNameCS), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentNameC->setJsHint(_M('Nome da disciplina', $module));
        $curricularComponentNameC->setReadOnly(true);
        $hctCurricularComponentC = new MHContainer('hctCurricularComponentCS', array($curricularComponentLabelC, $curricularComponentIdC, $curricularComponentVersionC, $curricularComponentNameC));
        $hctCurricularComponentC->setShowLabel(false);
        $fields[]  = $hctCurricularComponentC;

        //Field substitute curricular component
        $curricularComponentLabelS = new MText('curricularComponentLabelS', _M('Disciplina substituta', $module) . ':');
        $curricularComponentLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentIdS = new MLookupTextField('curricularComponentIdS', $this->getFormValue('curricularComponentIdS'), _M('Código da disciplina substituta',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentVersionS , curricularComponentNameS', $module, 'CurricularComponentInCurriculum', null, array('curricularComponentId' => 'curricularComponentIdS'), true);
        $curricularComponentIdS->setJsHint(_M('Informe o código da disciplina substituta',$module));
        $curricularComponentVersionS = new MTextField('curricularComponentVersionS', $this->getFormValue('curricularComponentVersionS',$this->curricularComponentVersionS), _M('Versão da disciplina',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersionS->setJsHint(_M('Versão da disciplina substituta', $module));
        $curricularComponentVersionS->setReadOnly(true);
        $curricularComponentNameS = new MTextField('curricularComponentNameS', $this->getFormValue('curricularComponentNameS',$this->curricularComponentNameS), _M('Nome da disciplina',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentNameS->setJsHint(_M('Nome da disciplina substituta', $module));
        $curricularComponentNameS->setReadOnly(true);
        $hctcurricularComponentS = new MHContainer('hctcurricularComponentS', array($curricularComponentLabelS, $curricularComponentIdS, $curricularComponentVersionS, $curricularComponentNameS));
        $hctcurricularComponentS->setShowLabel(false);
        $fields[]    = $hctcurricularComponentS;
        
        parent::defineFields($fields, $module, 'GrdSubstitutionUnblockSearch', $validators);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }
    
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        // get filters values
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->getFormValue($var, $this->$var->value);
        }
   
        $data->curricularComponentUnblockId = $this->getFormValue('curricularComponentUnblockIdS', $this->curricularComponentUnblockIdS->value);
        $data->learningPeriodId             = $this->getFormValue('learningPeriodIdS', $this->learningPeriodIdS->value);
        $data->curricularComponentIdC       = $this->getFormValue('curricularComponentIdC', $this->curricularComponentIdC->value);
        $data->periodId                     = $this->getFormValue('periodIdS', $this->periodId->value);
        $data->curriculumId                 = $this->getFormValue('curriculumIdS', $this->curriculumIdS->value);
        
        //disciplina substituida
        $data->curricularComponentIdS = MIOLO::_REQUEST('curricularComponentIdS');
        $data->curricularComponentVersionS =MIOLO::_REQUEST('curricularComponentVersionS');
        
        //disciplina 
        $data->curricularComponentId = MIOLO::_REQUEST('curricularComponentIdCS');
        $data->curricularComponentVersion =MIOLO::_REQUEST('curricularComponentVersionCS');
        
        return $data;
    }
}

?>