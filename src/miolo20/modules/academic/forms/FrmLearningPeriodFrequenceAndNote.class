<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Formulário de frequências e notas do período letivo
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 03/03/2011
 *
 **/
class FrmLearningPeriodFrequenceAndNote extends FrmLearningPeriodFather
{
    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Load data
        $data = $this->getLearningPeriodData();
        $learningPeriodId = $data->learningPeriodId;

        if ( strlen($learningPeriodId) > 0 )
        {
            // Degree data
            $businessDegree = new BusinessAcademicBusDegree();
            $degreeData = $businessDegree->getLearningPeriodFinalDegree($learningPeriodId);
            $degreeId = $degreeData->degreeId;
            $degreeChilds = strlen($degreeId) > 0 ? $businessDegree->getChildDegrees($degreeId) : array();
        }
        
        // Field minimum frequency   
        $minimumFrequencyLabel = new MText('minimumFrequencyLabel', _M('Frequência mínima', $module));
        $minimumFrequencyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $minimumFrequencyLabel->setClass('m-caption m-caption-required');
        $minimumFrequency = new MIntegerField('minimumFrequency', $this->getFormValue('minimumFrequency', $data->minimumFrequency), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '%');
        $minimumFrequency->setJsHint(_M('Frequência mínima em disciplinas para aprovação, indicado em percentual (0 à 100)', $module));                
        $flds[] = $hctMinimumFrequency = new MHContainer('hctMinimumFrequency', array($minimumFrequencyLabel, $minimumFrequency), MContainer::FORM_MODE_SHOW_SIDE);
        $fields[] = new MBaseGroup('bgr'.rand(), _M('Frequência mínima', $module), $flds, 'vertical');
        
        // Field Degree
        $fields[] = new SHiddenField('degreeId', $degreeData->degreeId);
        
        // Dados do grau final
        $fields[] = new MSeparator();
        $fields[] = $this->obterDadosDoGrauFinal($data, $degreeData, $validators);
        $fields[] = new MSeparator();
        
        //Disciplinas TCC
        $fields[] = $this->obterOpcoesDisciplinasTcc($data);
        
        
        $fields[] = new MSeparator();
        $fields[] = $this->obterGrausAcademicos($data, $degreeData, $degreeChilds);

        $this->setFields($fields);
        $this->setValidators($validators);
    }
    
    private function obterOpcoesDisciplinasTcc($data)
    {
        $module = MIOLO::getCurrentModule();
        $fields[] = new MTextLabel('', _M('Bloqueia tela de digitação de Notas para disciplinas do tipo Trabalho de Conclusão, obrigando o usuário a utilizar a interface de detalhamento de TCC.', $module));
        $fields[] = new MRadioButtonGroup('blockFinalExaminationGradesTyping', _M('Bloquear tela de digitação de Notas para disciplinas TCC', $module), SAGU::listYesNo(), SAGU::NVL($data->blockFinalExaminationGradesTyping, DB_TRUE), '', 'horizontal');
        
        return new MBaseGroup('bsgDisciplinasTcc', _M('Exigir detalhamento de TCC', $module), $fields, 'vertical');
    }
    
    
    /**
     * Obtem campos
     *
     * @param stdClass $data
     * @param stdClass $degreeData
     * 
     * @return MBaseGroup 
     */
    private function obterDadosDoGrauFinal($data, $degreeData, $validators)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $busDegree = new BusinessAcademicBusDegree();
        $fields = array();
        
        $data->session = $MIOLO->page->name;
        
        // Método de controle de avaliação
        $busEvaluationControlMethod = new BusinessAcademicBusEvaluationControlMethod();
        $fieldId = 'evaluationControlMethodId';
        $label = _M('Método de controle de avaliação', $module);
        $value = SAGU::NVL($this->getFormValue($fieldId), $data->$fieldId);
        $hint = _M('Define se a digitação de notas será feita para um grupo de disciplinas ou para cada disciplina', $module);
        $options = $busEvaluationControlMethod->listEvaluationControlMethod();
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setClass('m-caption m-caption-required');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MSelection($fieldId, $value, null, $options);
        $field->setJsHint($hint);
        $validators[] = new MRequiredValidator($fieldId, $label);
        $fields[] = new MHContainer('hct'.rand(), array($labelField, $field));        
        
        // Notas por conceito
        $fieldId = 'gradesByConcept';
        $label = _M('Digitação de notas por conceito', $module);
        $valueGrades = SAGU::NVL($this->getFormValue($fieldId), $data->$fieldId);
        $hint = _M('Define se o(s) grau(s) digitado(s) serão notas. Ex: 0, 5, 10 ou conceitos A, B, C', $module);
        $options = SAGU::listYesNo();
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setClass('m-caption m-caption-required');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MSelection($fieldId, $valueGrades, null, $options);
        $field->setJsHint($hint);
        $field->addAttribute('onchange', $this->getAjaxAction('calcMethod', 'divCalcMethod', false, $data));
        $validators[] = new MRequiredValidator($fieldId, $label);
        $fields[] = new MHContainer('hct'.rand(), array($labelField, $field));
        
        // Field degree description
        $degreeDescLabel = new MText('degreeDescLabel', _M('Descrição', $module) . ':');
        $degreeDescLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $degreeDescLabel->setClass('m-caption m-caption-required');
        $degreeDescription = new MTextField('degreeDescription', strlen($this->getFormValue('degreeDescription', $degreeData->description))>0 ? $this->getFormValue('degreeDescription', $degreeData->description) : $this->getFormValue('degreeDescription', $data->degreeDescription) , '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $validators[] = new MRequiredValidator('degreeDescription',_M('Descrição', $module));
        $degreeDescription->setJsHint(_M('Descrição do grau que representa a nota final do aluno em uma disciplina do período letivo', $module));
        $fields[] = new MHContainer('hctDegreeDescription', array($degreeDescLabel, $degreeDescription));
        
        $data->methodCalculating = $degreeData->methodCalculating;
        $data->gradesByConcept   = $this->getFormValue('gradesByConcept');
        
        $fields[] = new MDiv('divCalcMethod', ($valueGrades != DB_FALSE) ? null : $this->calcMethod($data));
        
        // Field date limit
        $limitLabel = new MText('limitLabel', _M('Data limite', $module) . ':');
        $limitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $limitDate = new MCalendarField('degreeLimitDate', strlen($this->getFormValue('degreeLimitDate', $degreeData->limitDate)) > 0 ? $this->getFormValue('degreeLimitDate', $degreeData->limitDate) : $this->getFormValue('degreeLimitDate', $data->degreeLimitDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $limitDate->setJsHint(_M('Data limite para digitação do(s) grau(s) acadêmico(s)', $module));
        $fields[] = new MHContainer('hctLimitDate', array($limitLabel, $limitDate));

        // Exibir justificativa
        $fieldId = 'justifyDisapprovals';
        $label = _M('Exibir justificativa', $module);
        $value = SAGU::NVL($this->getFormValue($fieldId), $data->$fieldId, DB_FALSE);
        $hint = _M('Define se será exigida uma justificativa se o grau final do aluno for menor', $module);
        $options = SAGU::listYesNo();
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setClass('m-caption m-caption-required');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MSelection($fieldId, $value, null, $options);
        $field->setJsHint($hint);
        $validators[] = new MRequiredValidator($fieldId, $label);
        $fields[] = new MHContainer('hct'.rand(), array($labelField, $field));
        
        return new MBaseGroup('bsgDegree', _M('Dados do grau final', $module), $fields, 'vertical');
    }
    
    /**
     * Obtem os campos de cálculos do Grau final.
     * 
     * @param stdClass $data
     * @return html code 
     */
    public function calcMethod($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $busDegree = new BusinessAcademicBusDegree();
        
        if( $this->getFormValue('gradesByConcept') == DB_FALSE ) 
        {
            // Caso o campo foi alterado, altera o valor do mesmo na $data.
            $data->gradesByConcept = DB_FALSE;
        }
        
        if( ($this->getFormValue('gradesByConcept', $data->gradesByConcept) == DB_TRUE) && ( ($this->getFormValue('methodCalculating', $data->methodCalculating) != 'MAP' ) && ($this->getFormValue('methodCalculating', $data->methodCalculating) != null ) ) )
        {
            /**
             * Caso for selecionado um método de cálculo que bloqueie o campo de peso nos graus acadêmicos
             * e selecionado 'Sim' na digitação de notas por conceito, será executado um post para que o campo
             * de peso seja desbloqueado.
             */
            $this->setFormValue('methodCalculating', null);
            $this->page->addAjaxJsCode("document.getElementById('weight').readOnly = false");
        }
        
        if( $data->gradesByConcept != DB_TRUE )
        {            
            // Método de cálculo.
            $labelField = new MText('lbl'.rand(), _M('Cálculo para definição do grau final', $module) . ':');
            $labelField->setClass('m-caption m-caption-required');
            $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $field = new MSelection('methodCalculating', SAGU::NVL($this->getFormValue('methodCalculating'), $data->methodCalculating, $degreeData->methodCalculating), null, $busDegree->listaMetodosCalculoNota());
            $field->setJsHint(_M('Define o cálculo que será utilizado no(s) grau(s) acadêmico(s) para definir o grau final do aluno', $module));
            $field->addAttribute('onchange', SForm::getAjaxAction('fieldWeight', 'divWeight', false, $data));
            $validators[] = new MRequiredValidator('methodCalculating', _M('Cálculo para definição do grau final', $module));
            $flds[] = new MHContainer('hct'.rand(), array($labelField, $field));
            
            // Nota máxima.
            $maximumFinalAverageLabel = new MLabel(_M('Nota máxima da disciplina para o aluno', $module) . ':');
            $maximumFinalAverageLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $maximumFinalAverageLabel->setClass('m-caption');
            $maximumFinalAverage = new MTextField('maximumFinalAverage', $this->getFormValue('maximumFinalAverage', $data->maximumFinalAverage), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $maximumFinalAverage->setJsHint(_M('Nota máxima que o aluno pode atingir no grau final', $module));
            $validators[] = new MFloatValidator('maximumFinalAverage', _M('Nota máxima',$module));
            $flds[] = new MHContainer('hct'.rand(), array($maximumFinalAverageLabel, $maximumFinalAverage));

            // Nota minima.
            $finalAverageLabel = new MLabel(_M('Nota mínima para aprovação em disciplinas', $module) . ':');
            $finalAverageLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $finalAverageLabel->setClass('m-caption m-caption-required');
            $finalAverage = new MTextField('finalAverage', $this->getFormValue('finalAverage', $data->finalAverage), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $finalAverage->setJsHint(_M('Nota mínima que o aluno deve atingir no grau final', $module));
            $validators[] = new MFloatValidator('finalAverage', _M('Nota mínima para aprovação em disciplinas',$module));  
            $validators[] = new MRequiredValidator('finalAverage', _M('Nota mínima para aprovação em disciplinas',$module));
            $flds[] = new MHContainer('hct'.rand(), array($finalAverageLabel, $finalAverage));            
            $calcMethodField = new MVContainer('calcMethodField', $flds);
            
            $this->SetValidators($validators);
            return $calcMethodField;            
        }
        else
        {
            $flds[] = new MHiddenField('finalAverage', '0');
            $this->removeAJAXValidator('methodCalculating');
            $this->removeAJAXValidator('maximumFinalAverage');
            $this->removeAJAXValidator('finalAverage');
            
            return $flds;
        }
    }    
    
    /**
     * Obtem subdetail
     *
     * @param stdClass $data
     * @param stdClass $degreeData
     * @param array $degreeChilds
     */
    private function obterGrausAcademicos($data, $degreeData, $degreeChilds)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $fields[] = new SHiddenField('degreeIdSub');
        
        // Descricao
        $fieldId = 'descriptionSub';
        $fieldSize = SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE');
        $label = _M('Descrição', $module);
        $hint = _M('Descrição do grau que representa uma das notas', $module);
        $value = null;
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setClass('m-caption m-caption-required');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MTextField($fieldId, $value, null, $fieldSize);
        $field->setJsHint($hint);
        $validators[] = new MRequiredValidator($fieldId, $label);
        $fields[] = new MHContainer('hct'.rand(), array($labelField, $field));
        
        // Data limite
        $fieldId = 'limitDateSub';
        $fieldSize = SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE');
        $label = _M('Data limite', $module);
        $hint = _M('Data limite para digitação das notas para esse grau acadêmico', $module);
        $value = null;
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setClass('m-caption');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MCalendarField($fieldId, $value, null, $fieldSize);
        $field->setJsHint($hint);
        $validators[] = new MDateDMYValidator($fieldId, $label);
        $fields[] = new MHContainer('hct'.rand(), array($labelField, $field));
        
        // Ordem de exibição
        $fieldId = 'degreeNumber';
        $fieldSize = SAGU::getParameter('BASIC', 'FIELD_ID_SIZE');
        $label = _M('Ordem de exibição', $module);
        $hint = _M('Ordem em que este grau acadêmico deve ser exibido', $module);
        $value = null;
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setClass('m-caption m-caption-required');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MTextField($fieldId, $value, null, $fieldSize);
        $field->setJsHint($hint);
        $validators[] = new MIntegerValidator($fieldId, $label, 'required');
        $validators[] = new MSubDetailUniqueValidator($fieldId, $label);
        $fields[] = new MHContainer('hct'.rand(), array($labelField, $field));
        
        $fields[] = new MDiv('divWeight', $this->fieldWeight($data));
        
        // Pode ser nulo
        $fieldId = 'mayBeNull';
        $label = _M('Pode ficar em branco', $module);
        $value = null;
        $labelField = new MText($filedId, $label . ':');
        $labelField->setClass('m-caption m-caption-required');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MSelection($fieldId, $value, null, SAGU::listYesNo());
        $hint = _M('Se esse campo for marcado, o professor poderá deixar essa nota em branco, fazendo com que ela não seja usada no cálculo do grau final', $module);
        $field->setJsHint($hint);
        $fields[] = new MHContainer('hct'.rand(), array($labelField, $field));

        // Grau de exame
        $fieldId = 'isExam';
        $label = _M('Grau de exame', $module);
        $hint = _M('Define se o grau que está sendo cadastrado é exame de algum outro grau que deve ser definido no campo "Grau pai"', $module);
        $value = '';
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setClass('m-caption m-caption-required');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MSelection($fieldId, $value, null, SAGU::listYesNo());
        $field->setJsHint($hint);
        $field->addAttribute('onchange', SForm::getAjaxAction('displayOrHideExamFields', 'divLimbo', false));
        $validators[] = new MRequiredValidator($fieldId, $label, 'required');
        $fields[] = new MHContainer('hct'.rand(), array($labelField, $field));
        
        $fields[] = new MDiv('divLimbo', null);
        
        // Calculo de exame
        $fieldId = 'examCalcMethod';
        $label = _M('Cálculo de exame', $module);
        $hint = _M('Caso seja selecionado \'Substitui grau pai\', a nota de exame deve ser usada para o cálculo da média final ao invés do seu pai. Caso selecionado \'Média com grau pai\', a nota final deve utilizar a média da nota de exame com o grau pai.', $module);
        $value = DB_FALSE;
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setClass('m-caption');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MSelection($fieldId, $value, null, BusinessAcademicBusDegree::listaCalculos());
        $field->setJsHint($hint);
        $hctExamFields[] = new MHContainer('hct'.rand(), array($labelField, $field));
        
        // Nota mínima para não fazer exame
        $fieldId = 'examMinimumNote';
        $fieldSize = SAGU::getParameter('BASIC', 'FIELD_ID_SIZE');
        $label = _M('Nota mínima para aplicação do exame', $module);
        $hint = _M('Nota que habilita a execução de exame (inclusive)', $module);
        $value = null;
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setClass('m-caption');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MTextField($fieldId, $value, null, $fieldSize, $hint);
        $validators[] = new MFloatValidator($fieldId, $label);
        $hctExamFields[] = new MHContainer('hct'.rand(), array($labelField, $field));
        
        // Nota maxima para não fazer exame
        $fieldId = 'examMaximumNote';
        $fieldSize = SAGU::getParameter('BASIC', 'FIELD_ID_SIZE');
        $label = _M('Limite máximo para aplicação do exame', $module);
        $hint = _M('Nota que dispensa da execução de exame (exclusive)', $module);
        $value = null;
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setClass('m-caption');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MTextField($fieldId, $value, null, $fieldSize, $hint);
        $validators[] = new MFloatValidator($fieldId, $label);
        $hctExamFields[] = new MHContainer('hct'.rand(), array($labelField, $field));
        
        $fields[] = new MDiv('divExamFields', $hctExamFields, null, "style=\"display:none\"");
        
        // Grau pai
        $hctNotExamFields[] = self::getSelectionParentList($degreeChilds);
        
        $fields[] = new MDiv('divNotExamFields', $hctNotExamFields ,null, "style=\"display:none\"");
        
        $columns[] = new MGridColumn(_M('Codigo', $module), 'left', FALSE, '', FALSE, 'degreeIdSub');
        $columns[] = new MGridColumn(_M('Descrição', $module), 'left', FALSE, '', TRUE, 'descriptionSub');
        $columns[] = new MGridColumn(_M('Data limite', $module), 'right', FALSE, '', TRUE, 'limitDateSub');
        $columns[] = new MGridColumn(_M('Ordem de exibição', $module), 'right', FALSE, '', TRUE, 'degreeNumber');
        $columns[] = new MGridColumn(_M('Peso', $module), 'right', FALSE, '', TRUE, 'weight');
        $columns[] = new MGridColumn(_M('Pode ser nulo', $module), 'left', FALSE, '', TRUE, 'mayBeNull', null, SAGU::listYesNo(null, true));
        
        // Coluna oculta apenas para guardar os ids dos graus pais, parentDegreeDisplay exibe na tela o nome do grau pai.
        $columns[] = new MGridColumn(_M('Grau pai', $module), 'left', FALSE, '', FALSE, 'parentDegreeIdSub', null, self::getParentList($degreeChilds));
        
        $columns[] = new MGridColumn(_M('Grau pai', $module), 'left', FALSE, '', TRUE, 'parentDegreeDisplay');
        $columns[] = new MGridColumn(_M('Grau de exame', $module), 'left', FALSE, '', TRUE, 'isExam', null, SAGU::listYesNo(null, true));
        $columns[] = new MGridColumn(_M('Cálculo de exame', $module), 'left', FALSE, '', TRUE, 'examCalcMethod', null, BusinessAcademicBusDegree::listaCalculos());
        $columns[] = new MGridColumn(_M('Limite mínimo para aplicação do exame', $module), 'right', FALSE, '', TRUE, 'examMinimumNote');
        $columns[] = new MGridColumn(_M('Limite máximo para aplicação do exame', $module), 'right', FALSE, '', TRUE, 'examMaximumNote');

        $sub = new MSubDetail($this->getDegreesId(), _M('Graus acadêmicos', $module), $columns, $fields);
        $sub->setValidators($validators);
        $sub->addActionEvent(MSubDetail::EVENT_ADD, 'updateParentListAdd', __CLASS__);
        $sub->addActionEvent(MSubDetail::EVENT_EDIT, 'onSubdetailUpdate', __CLASS__);
        
        if ( $this->isFirstAccess() && $this->isSubDetailEditMode() )
        {
            $subData = SAGU::convertSTypeToSubDetail($columns, $degreeChilds);
            
            foreach ( $subData as $collumn )
            {
                $parent = self::getParentList($degreeChilds);                
                $collumn->parentDegreeDisplay = $parent[$collumn->parentDegreeIdSub];
            }
            
            $sub->setData($subData);
        }
        
        return $sub;
    }
    
    /**
     * Campo peso
     * 
     * @param obj $data
     * @return html
     */
    public function fieldWeight($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $businessDegree = new BusinessAcademicBusDegree();        
        $degreeData = $businessDegree->getLearningPeriodFinalDegree($data->learningPeriodId);
        
        // Peso
        $fieldId = 'weight';
        $fieldSize = SAGU::getParameter('BASIC', 'FIELD_ID_SIZE');
        $label = _M('Peso', $module);
        $hint = _M('Define o peso deste grau acadêmico, é utilizado para cálculo da média', $module);
        $value = 1;
        $methodCalculating = SAGU::NVL($this->getFormValue('methodCalculating'), $data->methodCalculating, $degreeData->methodCalculating);
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setClass('m-caption m-caption-required');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MTextField($fieldId, $value, null, $fieldSize);
        $field->setJsHint($hint);
        if ( in_array($methodCalculating, array(BusinessAcademicBusDegree::CALCULO_MEDIA_SIMPLES, BusinessAcademicBusDegree::CALCULO_SOMA)) )
        {
            $field->setValue(1);
            $field->setReadOnly(true);
            
            // Atualiza valores
            $subData = (array) MSubDetail::getData($this->getDegreesId());
            if ( count($subData) > 0 )
            {
                foreach ( $subData as & $row )
                {
                    $row->weight = 1;
                }
                MSubDetail::setData($this->getDegreesId(), $subData);
            }
        }
        
        //$validators[] = new MIntegerValidator('weight', _M('Peso', $module), 'required');
        $fields[] = new MHContainer('hct'.rand(), array($labelField, $field));
        
        return $fields;
    }
    
    /**
     * Uncommented because lack of time
     *
     * @param array $degreeChilds
     * @return MHContainer 
     */
    public static function getSelectionParentList($degreeChilds = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $fieldId = 'parentDegreeIdSub';
        $label = _M('Grau pai', $module);
        $hint = _M('Define um sub grau pai', $module);
        $value = null;
        $options = self::getParentList($degreeChilds);
        $labelField = new MText('lbl'.rand(), $label . ':');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $field = new MSelection($fieldId, $value, null, $options);
        $field->setJsHint($hint);
        $hct = new MHContainer('hct'.rand(), array($labelField, $field));
        
        return $hct;
    }
    
    
    /**
     * Uncommented because lack of time
     *
     * @param stdClass $args
     * @return stdClass
     */
    public static function updateParentListAdd($args)
    {
        $MIOLO = MIOLO::getInstance();
        $list = self::getParentList();
        
        $args->degreeIdSub = SAGU::NVL( $args->degreeIdSub, 'tmp_' . rand() );
        $list[ $args->degreeIdSub ] = $args->descriptionSub;

        self::updateParentListJsCode($list);

        $parentList = self::getParentList();
        $args->parentDegreeDisplay = $parentList[$args->parentDegreeIdSub];
        
        // Limpa campos
        if ( $args->isExam == DB_TRUE )
        {
            $args->parentDegreeIdSub = '';
        }
        else
        {
            $args->examCalcMethod = '';
            $args->examMinimumNote = '';
        }
        
        return $args;
    }
    
    public static function onSubdetailUpdate($args)
    {
        $parentList = self::getParentList();
        $args->parentDegreeDisplay = $parentList[$args->parentDegreeIdSub];
        self::displayOrHideExamFields($args);
   
        return $args;
    }
    
    public function displayOrHideExamFields($args) 
    {
        $MIOLO = MIOLO::getInstance();

        //Esconde todos os campos caso --selecione-- esteja selecionado
        if ( $args->isExam == '' ) 
        {
            $display = 'none';
            $displayNot = 'none';
        } 
        else if ( $args->isExam == DB_TRUE ) 
        {
            $display = 'block';
            $displayNot = 'none';
        }
        else 
        {
            $display = 'none';
            $displayNot = 'block';
        }

        $js .= "document.getElementById('divExamFields').style.display = '{$display}';";
        $js .= "document.getElementById('divNotExamFields').style.display = '{$displayNot}';";

        $MIOLO->page->addAJAXJsCode($js);

        return '';
    }
    
    
    /**
     * Uncommented because lack of time
     *
     * @param array $list 
     */
    public static function updateParentListJsCode($list)
    {
        $MIOLO = MIOLO::getInstance();
        
        $newList = array('0' => '--Selecione--');
        $newList += (array) $list;

        $js = '';
        $js .= "var parentSelect = document.getElementById('parentDegreeIdSub');";
        $js .= "parentSelect.innerHTML = '';";

        $i = 0;
        foreach ( $newList as $key => $val )
        {
            $js .=
                "option = document.createElement('option');
                 option.value = '{$key}';
                 option.innerHTML = '{$val}';
                 
                 parentSelect.options[$i] = option;";
            
            $i++;
        }
        
        $MIOLO->page->addAJAXJsCode($js);
    }
    
    /**
     * Uncommented because lack of time
     * 
     * @param array $degreeChilds
     * @return array 
     */
    public static function getParentList($degreeChilds = null)
    {
        $listDegrees = array();
        
        $childs = (array) ( count($degreeChilds) > 0 ? $degreeChilds : MSubDetail::getData(self::getDegreesId()) );

        foreach ( $childs as $child )
        {
            if ( !$child->removeData )
            {
                $listDegrees[ $child->degreeIdSub ] = $child->descriptionSub;
            }
        }

        return $listDegrees;
    }  
}
?>