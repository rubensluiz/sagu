<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Passo responsavel pela definicao do tema do exame final.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 07/02/2011
 *
 **/

class FrmFinalExaminationTheme extends FrmFinalExamination
{
    public function __construct($steps = null)
    {
        parent::__construct(null, $steps, __CLASS__);
    }

    
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        //Load data
        $allData = $this->getStepData();
        $stepData = $this->getStepDataByForm(__CLASS__);

        if ( $this->isFirstAccess() )
        {
            MSubDetail::clearData('knowledgeArea');

            $busFinalExaminationKnowledgeArea = new BusinessAcademicBusFinalExaminationKnowledgeArea();
            $busEnroll = new BusinessAcademicBusEnroll();

            $enrollId = MIOLO::_REQUEST('enrollId');

            $filters = new stdClass();
            $filters->enrollId = $enrollId;

            $stepData->knowledgeArea = $busFinalExaminationKnowledgeArea->searchFinalExaminationKnowledgeArea($filters, true);
            $stepData->finalExaminationTheme = $busEnroll->getEnroll($enrollId)->finalExaminationTheme;
        }

        //Tema do TCC
        $fields[] = $finalExaminationTheme = new MMultiLineField('finalExaminationTheme', $stepData->finalExaminationTheme, _M('Título do TCC', $module), 150, 6, 60);
        $finalExaminationTheme->setJsHint(_M('Informe o tema do TCC', $module));

        //
        //Linhas de pesquisa (subdetail)
        //
        // Field knowledge
        $knowledgeAreaLabel = new MText('knowledgeAreaLabel', _M('Área de conhecimento',$module).':');
        $knowledgeAreaLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $knowledgeAreaId = new MLookupTextField('knowledgeAreaId', null, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'knowledgeAreaName', $module, 'KnowledgeArea', null, null, true);
        $knowledgeAreaId->setJsHint(_M('Código de área de conhecimento',$module));
        $_validators[] = new MIntegerValidator('knowledgeAreaId', _M('Área de conhecimento',$module));
        $_validators[] = new MSubDetailUniqueValidator('knowledgeAreaId', _M('Área de conhecimento',$module), 'required');
        $knowledgeAreaName = new MTextField('knowledgeAreaName', $this->getFormValue('knowledgeAreaName', $data->knowledgeAreaName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $knowledgeAreaName->setReadOnly(true);
        $knowledgeAreaName->setJsHint(_M('Nome da área de conhecimento',$module));
        $hctKnowledgeArea = new MHContainer('hctKnowledgeArea', array($knowledgeAreaLabel, $knowledgeAreaId, $knowledgeAreaName));
        $hctKnowledgeArea->setShowLabel(true);
        $_fields[] = $hctKnowledgeArea;

        $_cols[] = new MGridColumn(_M('Código', $module), 'right', true, '', true, 'knowledgeAreaId');
        $_cols[] = new MGridColumn(_M('Área de conhecimento', $module), 'left', true, '', true, 'knowledgeAreaName');
        
        $fields[] = $sub = new MSubDetail('knowledgeArea', _M('Linhas de pesquisa', $module), $_cols, null, true);
        $sub->setFields($_fields);
        $sub->setValidators($_validators);
        if ( count($stepData->knowledgeArea) > 0 )
        {
            $sub->setData( $stepData->knowledgeArea );
        }

        $this->setFields($fields);
        $this->setValidators($validators);
    }
}
?>
