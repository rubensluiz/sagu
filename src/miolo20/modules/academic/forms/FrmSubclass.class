<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Subclass form
 *
 * @author Andre Chagas Dias [andre@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2008
 *
 **/

class FrmSubclass extends SManagementForm
{
    public function __construct()
    {
        parent::__construct(new AcdSubclass(), array('subclassId'), 'BusSubclass');
    }


    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $subclassId = MIOLO::_REQUEST('subclassId');
            
            $fields[] = new MTextLabel('subclassId', $subclassId, _M('Código da subturma',$module));
            $fields[] = new MHiddenField('subclassId', $subclassId);

            $data = $this->busObject->getSubclass($subclassId);
        }
        else
        {
            $subclassLabel = new MText('subclassLabel', _M('Código', $module) . ':');
            $subclassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $subclassLabel->setClass('m-caption m-caption-required');

            $subclassId      = new MTextField('subclassId', $this->getFormValue('subclassId', $data->subclassId),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validators[] = new MRequiredValidator('subclassId', _M('Código', $module), 'required');
            $subclassId->setJsHint(_M('Informe o código da subturma',$module));

            $hctSubclassId = new MHContainer('hctSubclassId', array($subclassLabel, $subclassId));
            $fields[]   = $hctSubclassId;
        }

        //Class
        $classLabel   = new MText('classLabel', _M('Turma',$module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classLabel->setClass('m-caption m-caption-required');

        $classId      = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'className_', $module, 'Class', null, null, true);
        $classId->setJsHint(_M('Informe o código da turma',$module));

        $className_   = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className_->setReadOnly(true);
        $className_->setJsHint(_M('Nome da turma',$module));

        $hctClass     = new MHContainer('hctClass', array($classLabel, $classId, $className_));
        $hctClass->setShowLabel(true);
        $fields[]     = $hctClass;
        $validators[] = new MRequiredValidator('classId', _M('Turma', $module), 'required');
        //end class

        $subclassLabelDescription = new MText('subclassLabelDescription', _M('Descrição da subturma',$module) . ':');
        $subclassLabelDescription->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $subclassLabelDescription->setClass('m-caption m-caption-required');

        $subclassDescription_   = new MTextField('subclassDescription_', $this->getFormValue('subclassDescription_', $data->subclassDescription_),'', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $validators[] = new MRequiredValidator('subclassDescription_', _M('Descrição da subturma', $module), 'required');
        $subclassDescription_->setJsHint(_M('Informe a descrição da subturma', $module));

        $hctSubclassDescription = new MHContainer('hctSubclassDescription', array($subclassLabelDescription, $subclassDescription_));
        $fields[]     = $hctSubclassDescription;

        //Person
        $personLabel  = new MText('personLabel', _M('Responsável',$module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'personName, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, externalCourseIdHs, externalCourseHsName, institutionIdHs, institutionHsName, cityIdHs, cityHsName, yearHs, limbo, passive', 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'optional');

        $personName   = new MTextField('personName', $this->personName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Nome da pessoa',$module));

        $hctPerson    = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]     = $hctPerson;

        $groupIdLabel = new MText('groupIdLabel', _M('Disciplina oferecida',$module) . ':');
        $groupIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $groupId = new MLookupTextField('groupId',// Name
                            $this->getFormValue('groupId', $data->groupId), //value
                            '', //label
                            SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), //size
                            null, //hint
                            null, // validator
                            'groupIdDescription', //related
                            $module, //module
                            'Group', //item
                            null, null, true);
        $groupId->setJsHint(_M('Informe o código da disciplina oferecida',$module));

        $groupIdDescription = new MTextField('groupIdDescription', $this->getFormValue('groupIdDescription', $data->groupIdDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $groupIdDescription->setJsHint(_M('Descrição da disciplina oferecida',$module));
        $groupIdDescription->setReadOnly(true);

        $hctGroup = new MHContainer('hctGroup', array($groupIdLabel, $groupId, $groupIdDescription));
        $hctGroup->setShowLabel(true);
        $fields[] = $hctGroup;

        parent::defineFields($fields, $validators, $data);
    }
}
?>
