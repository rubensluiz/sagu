<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Course enroll certified form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/05/2006
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmGeneralCurricularComponentCertified extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;
        
        parent::__construct( _M('Atestado de disciplina geral', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $fields[] = new MSeparator();
        $fields[] = new MHiddenField('limbo', '');

        $contractId = new MHiddenField('contractId', $this->contractId->value);
        $fields2[]  = $contractId;

        $fields[] = new MSeparator();

        $personLabel  = new MText('personLabel', _M('Pessoa',$module) . ':');
        $personLabel->setClass('m-caption m-caption-required');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[]       = $personLabel;

        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, array('personId' => 'personId'), true);
        $validators[] = new MIntegerValidator('personId', _M('Pessoa',$module), 'required');
        $flds[]       = $personId;

        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Informe o nome da pessoa',$module));
        $personName->setReadOnly(true);
        $flds[]       = $personName;

        $hctPerson    = new MHContainer('hctPerson', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]     = $hctPerson;
        unset($flds);

        $contractLabel = new MText('contractLabel', _M('Contrato',$module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractLabel->setClass('m-caption m-caption-required');
        $flds[]        = $contractLabel;

        $contractId    = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'personId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $validators[]  = new MRequiredValidator('contractId', _M('Contrato',$module), 'required');
        $flds[]        = $contractId;

        $courseId      = new MTextField('courseId', $this->getFormValue('courseId',$this->courseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseId->setReadOnly(true);
        $courseId->setJsHint(_M('Código do curso',$module));
        $flds[]        = $courseId;

        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$this->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Versão do curso',$module));
        $flds[]        = $courseVersion;

        $courseName    = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', 30);
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso',$module));
        $flds[]        = $courseName;

        $hctContract   = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]      = $hctContract;
        unset($flds);

        $business = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $business->listPeriod());
        $validators[] = new MRequiredValidator('periodId','', 'required');
        $fields[] = $periodId;
        $fields[] = new Separator('');

        $stampLabel          = new MText('stampLabel', _M('Carimbo',$module) . ':');
        $stampLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[]              = $stampLabel;

        $employeeId         = new MLookupTextField('employeeId', $this->getFormValue('employeeId', $this->employeeId), null, 10, null, null, array('employeeId', 'employeeName', 'functionDescription', 'sector'), 'basic', 'Stamp', null, null, true);
        $employeeId->setJsHint(_M('Informe o código do funcionário',$module));
        $flds[]              = $employeeId;

        $employeeName = new MTextField('employeeName', $this->getFormValue('employeeName', $data->employeeName), null, 20);
        $employeeName->setJsHint(_M('Função do funcionário',$module));
        $employeeName->setReadOnly(true);
        $flds[]              = $employeeName;

        $functionDescription = new MTextField('functionDescription', $this->getFormValue('functionDescription', $data->functionDescription), null, 20);
        $functionDescription->setJsHint(_M('Função do funcionário',$module));
        $flds[]              = $functionDescription;
        $functionDescription->setReadOnly(true);

        $sector              = new MTextField('sector', $this->getFormValue('sector', $data->sector), null, 20);
        $sector->setJsHint(_M('Setor do funcionário',$module));
        $sector->setReadOnly(true);
        $flds[]              = $sector;

        $hctStamp            = new MHContainer('hctStamp', $flds);
        $hctStamp->setShowLabel(false);
        $fields[]            = $hctStamp;
        unset($flds);

        $sectorLabel = new MText('sectorLabel', _M('Setor',$module).':');
        $sectorLabel->setClass('m-caption m-caption-required');
        $sectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $sectorId     = new MLookupTextField('sectorId', $this->getFormValue('sectorId', $data->sectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sectorName', 'basic', 'Sector', null, null, true);
        $sectorId->setJsHint(_M('Informe o código do setor',$module));
        $validators[] = new MIntegerValidator('sectorId', _M('Setor',$module), 'required');

        $sectorName   = new MTextField('sectorName', $this->getFormValue('sectorName', $data->sectorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sectorName->setReadOnly(true);

        $hctSector = new MHContainer('hctSector', array($sectorLabel, $sectorId, $sectorName));
        $hctSector->setShowLabel(true);
        $fields[]  = $hctSector;

        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType', 'pdf'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);

        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $emissionDate = new MCalendarField('emissionDate', strlen($this->getFormValue('emissionDate'))>0 ? $this->getFormValue('emissionDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data de emissão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[] = new DateDMYValidator('emissionDate', null, 'required');
        $fields[]     = $emissionDate;

        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);        
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $cd->contractId          = MIOLO::_request('contractId');
        $cd->personId            = MIOLO::_request('personId');
        $cd->courseId            = MIOLO::_request('courseId');
        $cd->courseVersion       = MIOLO::_request('courseVersion');
        $cd->periodId            = MIOLO::_request('periodId');
        $cd->fileType            = MIOLO::_request('radFileType');
        $cd->stampName           = MIOLO::_request('employeeName');
        $cd->functionDescription = MIOLO::_request('functionDescription');
        $cd->sector              = MIOLO::_request('sector');
        $cd->sectorDocument      = MIOLO::_request('sectorName');
        $cd->emissionDate        = MIOLO::_request('emissionDate');

        //verificar se é um aluno ouvinte(daí deve aparecer um erro)
        $businessContract = new BusinessAcademicBusContract();
        $contract         = $businessContract->getContract($cd->contractId);

        if ( $contract->isListener == DB_TRUE )
        {
            $this->addError(_M('Este é um aluno ouvinte', $module) . '!');
        }
        else
        {
            //verificar se a pessoa está matriculada naquele semestre
            $businessEnroll = new BusinessAcademicBusEnroll();
            $isEnrolled     = $businessEnroll->isEnrolledInPeriod($cd->contractId, $cd->periodId);

            if ( $isEnrolled == false )
            {
                $this->addError(_M('Este aluno não está matriculado', $module));
            }
            else
            {
                //pega os dados da instituicao
                $businessCompany = new BusinessBasicBusCompany();
                $company         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

                $businessLegalPerson = new BusinessBasicBusLegalPerson();
                $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

                $businessCity = new BusinessBasicBusCity();
                $city         = $businessCity->getCity($legalPerson->cityId);

                //pega os dados do aluno
                $businessPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                $physicalPerson         = $businessPhysicalPerson->getPhysicalPerson($cd->personId);

                //pega a sequencia de atestados

                $cd->dateIssue       = $cd->emissionDate;
                $cd->certifiedTypeId = SAGU::getParameter('ACADEMIC', 'CERTIFIED_GENERAL_CURRICULAR_COMPONENT');

                $businessCertified = new BusinessAcademicBusCertified();
                $certifiedNumber   = $businessCertified->getSequence($cd);
                $MIOLO->uses('/core/AgataAPI.class');

                $api = new AgataAPI;

                $api->setParameter('$certifiedNumber', $certifiedNumber);
                $api->setParameter('$departament', $cd->sectorDocument);
                $api->setParameter('$companyTypeDescription', $company->companyTypeDescription);
                $api->setParameter('$institution', $legalPerson->name);
                $api->setParameter('$personId', $physicalPerson->personId);
                $api->setParameter('$name', $physicalPerson->name);
                $api->setParameter('$companyName', $company->companyTypeDescription . ' ' . $legalPerson->fakeName);
                $api->setParameter('$courseName', $contract->courseName);
                $api->setParameter('$periodId', $cd->periodId);
                $api->setParameter('$cityName', SAGU::getCapitulatetString($city->name));
                $api->setParameter('$stateId', $city->stateId);
                $api->setParameter('$stampName', SAGU::getCapitulatetString($cd->stampName));
                $api->setParameter('$functionDescription', SAGU::getCapitulatetString($cd->functionDescription));
                $api->setParameter('$sector', SAGU::getCapitulatetString($cd->sector));
                $api->setParameter('$emissionDate', SAGU::getDateByExtense($cd->emissionDate));

                $api->setLanguage($MIOLO->getConf('i18n.language'));
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.sxw');
                $api->setDataArray($null);

                $businessEnroll = new BusinessAcademicBusEnroll();
                $data           = $businessEnroll->getContractHistory($cd->contractId);

                $array[0][1] = $data;

                $api->setSubDataArray($array);

                $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/generalCurricularComponentCertified.sxw'));

                if ( $ok && $cd->fileType == 'pdf' )
                {
                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.pdf');
                    $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.sxw');
                }

                //se não conseguiu gerar o arquivo
                if ( !$ok )
                {
                    $this->addError(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                }
                else
                {
                    //insere a sequencia nos atestados
                    $ok = $businessCertified->insertCertified($cd);

                    //se inseriu o registro
                    if ( $ok )
                    {
                        $api->fileDialog();
                    }
                    else
                    {
                        $this->addError(_M('Erro ao inserir a sequencia do certificado.', $module));
                    }
                }
            }
        }
    }
}

?>
