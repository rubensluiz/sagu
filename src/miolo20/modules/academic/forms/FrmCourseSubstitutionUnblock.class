<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/12/2005
 */

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmCourseSubstitutionUnblock extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct( _M('Inserir', $module), NULL, NULL );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Field limbo
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        //Field formation lever
        $formationLevelId = new MHiddenField('formationLevelId', $formationLevelId);
        $fields[] = $formationLevelId;

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        //Field learning period
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Período letivo', $module) . ':');
        $learningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabelS->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$data->learningPeriodId), _M('Código do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('periodId', null, null, null, null, 'learningPeriod'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo', $module), 'required');
        $learningPeriod = new MTextField('learningPeriod', $this->getFormValue('learningPeriod',$data->learningPeriod), _M('Período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriod->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriod->setReadOnly(true);
        $hctlearningPeriod = new MHContainer('hctlearningPeriod', array($learningPeriodLabelS, $learningPeriodId, $learningPeriod));
        $hctlearningPeriod->setShowLabel(false);
        $fields[] = $hctlearningPeriod;

        //Field curricular component
        $curricularComponentLabelC = new MText('curricularComponentLabelC', _M('Disciplina',$module) . ':');
        $curricularComponentLabelC->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLabelC->setClass('m-caption m-caption-required');
        $curricularComponentIdC = new MLookupTextField('curricularComponentIdC', $this->getFormValue('curricularComponentIdC', $data->curricularComponentIdC), _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentVersionC,curricularComponentNameC', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'courseId', 'curricularComponentId' => 'curricularComponentIdC'), !$MIOLO->page->isPostBack());
        $curricularComponentIdC->setJsHint(_M('Código da disciplina', $module));
        $validators[] = new MRequiredValidator('curricularComponentIdC', _M('Disciplina',$module), 'required');
        $curricularComponentVersionC = new MTextField('curricularComponentVersionC', $this->getFormValue('curricularComponentVersionC', $data->curricularComponentVersionC), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersionC->setJsHint(_M('Versão da disciplina', $module));
        $curricularComponentVersionC->setReadOnly(true);
        $validators[] = new MRequiredValidator('curricularComponentVersionC',  _M('Versão da disciplina',$module), 'required');
        $curricularComponentNameC = new MTextField('curricularComponentNameC', $this->getFormValue('curricularComponentNameC', $data->curricularComponentNameC), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentNameC->setJsHint(_M('Nome da disciplina', $module));
        $curricularComponentNameC->setReadOnly(true);       
        $hctCurricularComponentC = new MHContainer('hctCurricularComponentC', array($curricularComponentLabelC, $curricularComponentIdC, $curricularComponentVersionC, $curricularComponentNameC));
        $hctCurricularComponentC->setShowLabel(false);
        $fields[] = $hctCurricularComponentC;

        //Field substitute curricular component
        $curricularComponentLabelS = new MText('curricularComponentLabelS', _M('Disciplina substituta', $module) . ':');
        $curricularComponentLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLabelS->setClass('m-caption m-caption-required');
        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId',$data->curricularComponentId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentVersion , curricularComponentName, courseIdS, courseVersionS, limbo, limbo, turnIdS, unitIdS', $module, 'CurricularComponentInCurriculum', null, array('periodId' => 'periodId', 'curricularComponentId' => 'curricularComponentId', 'formationLevelId' => 'formationLevelId'), !$MIOLO->page->isPostBack());
        $curricularComponentId->setJsHint(_M('Informe o código da disciplina substituta',$module));
        $validators[] = new MRequiredValidator('curricularComponentId', _M('Disciplina substituta', $module));
        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion',$data->curricularComponentVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersion->setJsHint(_M('Versão da disciplina substituta', $module));
        $curricularComponentVersion->setReadOnly(true);
        $validators[] = new MRequiredValidator('curricularComponentVersion', _M('Versão da disciplina substituta', $module), 'required');
        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName',$data->curricularComponentName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentName->setJsHint(_M('Nome da disciplina substituta', $module));
        $curricularComponentName->setReadOnly(true);        
        $hctcurricularComponent = new MHContainer('hctcurricularComponent', array($curricularComponentLabelS, $curricularComponentId, $curricularComponentVersion, $curricularComponentName));
        $hctcurricularComponent->setShowLabel(true);
        $fields[] = $hctcurricularComponent;
        
        $courseLabelS = new MText('courseLabelS', _M('Curso', $module) . ':');
        $courseLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseIdS = new MTextField('courseIdS', $this->getFormValue('courseIdS', $data->courseIdS), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseIdS->setReadOnly(true);
        
        $courseVersionLabelS = new MText('courseVersionLabelS', _M('Versão', $module) . ':');
        $courseVersionS = new MTextField('courseVersionS', $this->getFormValue('courseVersionS', $data->courseVersionS), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersionS->setReadOnly(true);
        
        $turnLabelS = new MText('turnLabelS', _M('Turno', $module) . ':');
        $turnIdS = new MTextField('turnIdS', $this->getFormValue('turnIdS', $data->turnIdS), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $turnIdS->setReadOnly(true);
        
        $unitLabelS = new MText('unitLabelS', _M('Unidade', $module) . ':');
        $unitIdS = new MTextField('unitIdS', $this->getFormValue('unitIdS', $data->unitIdS), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitIdS->setReadOnly(true);
        
        $hctcurricularComponentS = new MHContainer('hctcurricularComponentS', array($courseLabelS, $courseIdS, $courseVersionLabelS, $courseVersionS, $turnLabelS, $turnIdS, $unitLabelS, $unitIdS));
        $hctcurricularComponentS->setShowLabel(true);
        $fields[] = $hctcurricularComponentS;

        $fields[] = new Separator('');
        $fields[] = new MButton('btnList', null . _M('Localizar', $module));
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
    }

    /**
     * Event triggered when user clicks the list button
     */
    public function btnList_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $business = new BusinessAcademicBusCourseSubstitutionUnblock();

        $filters->curricularComponentId = $this->curricularComponentIdC->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersionC->value;
        $filters->courseId = MIOLO::_REQUEST('courseId');
        $filters->courseVersion = $this->courseVersion->value;
        $filters->turnId = $this->GetFormValue('turnId', $this->turnId->value);
        $filters->unitId = $this->GetFormValue('unitId', $this->unitId->value);            

        $busCurr = new BusinessAcademicBusCurriculum();
        $curriculums = $busCurr->searchCurriculum($filters);

        //Verifica se a disciplina informada para ser substituída é do curriculo do aluno
        if ( !(count($curriculums) > 0) )
        {
            $msg .= _M('A disciplina @1 não faz parte do currículo do aluno.', $module, $data->curricularComponentOldName) . '<br>';
            $caption = _M('Erro', $module);
            $this->addError( $msg );
        }
        else
        {
            //Disciplina pertence ao currículo do aluno
            $data->curriculumId = $curriculums[0][0];

            $gridData = $business->selectCourseContracts($data);

            if( count($gridData) > 0 )
            {
                $btn2 = new MButton('btnInvertSelection', _M('Inverter seleção', $module), 'invertSelection()');
                $this->addField($btn2);

                $grid = $MIOLO->getUI()->getGrid($module,'GrdCourseSubstitutionUnblock', null);
                $grid->setData($gridData);
                $this->addField($grid);

                if ( is_array($gridData) )
                {
                    $script .= "    function invertSelection()\n    {\n";
                    $x = 0;

                    foreach ( $gridData as $row )
                    {
                        $script .= '        if ( document.' . $this->name . '[\'selectgridCourseSubstitutionUnblock[' . $x . ']\'].checked == true )' . "\n        {\n";
                        $script .= '            document.' . $this->name . '[\'selectgridCourseSubstitutionUnblock[' . $x . ']\'].checked = false;' . "\n";
                        $script .= '        }' . "\n        else\n        {\n";
                        $script .= '            document.' . $this->name . '[\'selectgridCourseSubstitutionUnblock[' . $x . ']\'].checked = true;' . "\n";
                        $script .= '        }' . "\n";
                        $x++;
                    }

                    $script .= "    }\n";
                    $script .= "    invertSelection();";
                    $this->page->addJsCode($script);

                    $this->toolbar->enableButton('tbBtnSave');
                }
            }
            else
            {    //Não foram encontrados contratos coincidentes com os campos informados
                $this->addError(_M('Não foram encontrados contratos coincidentes com os campos informados.', $module));
            }
        }
    }

    public function tbBtnSave_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $busContract = new BusinessAcademicBusContract();
        $busCurriculum = new BusinessAcademicBusCurriculum();

        $data = $this->getTypesData();

        foreach ( $data as $key1 => $value1 )
        {
            $opts["$key1"] = $value1;
        }

        $contracts = $this->getFormValue('selectgridCourseSubstitutionUnblock',$this->selectgridCourseScheduleShockUnblock);

        if( count($contracts) > 0 )
        {
            $contractsKey = 'a_' . rand();
            $opts['contractsKeys'] = $contractsKey;
            $MIOLO->session->set($contractsKey, $contracts);

            $msg = _M('Você tem certeza que quer inserir desbloqueio por substituição para este(s) aluno(s), este período letivo e estas disciplinas', $module) . '?' ;

            $msg .= '<br><br>' . $data->learningPeriodDescription . '<br><br>' . _M('Disciplina', $module). ': ' . $data->curricularComponentOldName  . '<br><br>' . _M('Disciplina substituta' ,$module). ': ' . $data->curricularComponentNewName . '<br><br>';

            $msg .= _M('Alunos',$module).':<br>';

            if ( count($contracts) == 0 )
            {
                $msg .= '<br />' . _M('Nenhum aluno selecionado.', $module);
            }
            else
            {
                foreach ( $contracts as $key1 => $value1 )
                {
                    $getContract = $busContract->getContract($value1);

                    $msg .= '<br>' . $getContract->personName;
                }
            }

            $opts['function'] = $function;
            $opts['event'] = 'btnList_click';

            $goto = SAGU::getStackBackUrl();
            $gotoNo = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

            //Verifica se a disciplina substituta pertence ao mesmo grau de formação da disciplina a ser substituida
            $filters2->courseId = $data->courseId;
            $filters2->courseVersion = $data->courseVersion;
            $filters2->unitId = $data->unitId;
            $filters2->turnId = $data->turnId;

            $filters2->curricularComponentId = $data->curricularComponentIdC;
            $curricularComponentData = $busCurriculum->searchCurriculum($filters2);
            
            $filters2->courseId = $data->courseIdS;
            $filters2->courseVersion = $data->courseVersionS;
            $filters2->unitId = $data->unitIdS;
            $filters2->turnId = $data->turnIdS;
            $filters2->curricularComponentId = $data->curricularComponentId;
            $curricularComponentSubstituteData = $busCurriculum->searchCurriculum($filters2);


            $filters1->curricularComponentId = $data->curricularComponentId;
            $filters1->formationLevelId = $data->formationLevelId;
            if ( !(count($busCurriculum->searchCurriculum($filters1)) > 0) )
            {
                //Substituta não pertence ao mesmo grau de formação
                unset($opts['event']);
                $msg = _M('A disciplina substituta não é do mesmo grau de formação da disciplina do aluno', $module);
                $caption = _M('Erro', $module);
                $MIOLO->error( $msg, $gotoNo, $caption );
            }
            else
            {
                // Verifica se a disciplina substituta pertence ao mesmo currículo, se forem, não podem ser do mesmo tipo de currículo
                if ( array($data->courseId, $data->courseVersion, $data->turnId, $data->unitId) == array($data->courseIdS, $data->courseVersionS, $data->turnIdS, $data->unitIdS) )
                {                          
                    //Pertence ao mesmo currículo.
                    if ( $curricularComponentData[0][19] == $curricularComponentSubstituteData[0][19] )
                    {
                        //São do mesmo tipo, NÃO PODE substituir
                        unset($opts['event']);
                        $msg = _M('Não é possível substituir esta disciplina, porque ambas disciplinas são do mesmo tipo de currículo', $module) . '.' . '<br>';
                        $caption = _M('Erro', $module);
                        $MIOLO->error( $msg, $gotoNo, $caption );
                    }
                    else
                    {
                        //Não são do mesmo tipo, PODE substituir
                        //Se são de tipos diferentes, só avisar o usuário que pertencem ao mesmo currículo, mas podem ser inseridas
                        $msg .= '<font color=\'red\'><br><br>' . _M('A disciplina substituta @1 está na matriz curricular do curso do aluno.', $module, $data->curricularComponentNewName) . '</font>';
                    }
                }
            }


            $opts['function'] = $function;
            $opts['event'] = 'tbBtnSave_confirm';

            $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

            unset($opts['event']);

            $goto = SAGU::getStackBackUrl();
            $gotoNo = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

            $caption = _M('Questão',$module);

            $MIOLO->question($msg, $gotoYes, $gotoNo);
        }
        else
        {
            $this->addError(_M('Você deve selecionar pelo menos um contrato para inserir um desbloqueio por substituição por curso.', $module));
            $this->btnList_click();
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_confirm($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        

        $data = $this->getTypesData();

        $filters->curricularComponentId = $this->curricularComponentIdC->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersionC->value;
        $filters->courseId = MIOLO::_REQUEST('courseId');
        $filters->courseVersion = $this->courseVersion->value;

        $busCurr = new BusinessAcademicBusCurriculum();
        $curriculums = $busCurr->searchCurriculum($filters);

        if ( count($curriculums) > 0 )
        {
            //Existe este curriculo
            $data->curriculumId = $curriculums[0][0];

            $business = new BusinessAcademicBusCourseSubstitutionUnblock();
            $cnt = 0;

            $contractsKey = MIOLO::_REQUEST('contractsKeys');
            $contracts = $MIOLO->session->get($contractsKey);

            if ( count($contracts) > 0 )
            {
                foreach ( $contracts as $id => $value )
                {
                    if ($business->insertCourseSubstitutionUnblock($data, $value))
                    {
                        $cnt++;
                    }
                }
            }

            if ( $cnt > 0 )
            {
                $msg = _M('@1 registros inseridos', $module,$cnt);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, null);

                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $msg = _M('Erro executando a operação solicitada.', $module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
        else
        {
            //Nao existe este curriculo
            $msg = _M('Não existe um currículo para este curso e esta disciplina', $module).'.';
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function getTypesData()
    {
        $data = new acdCurricularComponentUnblock();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        $data->courseId = MIOLO::_REQUEST('courseId');
        $data->courseVersion = $this->courseVersion->value;
        $data->turnId = $this->turnId->value;
        $data->unitId = $this->unitId->value;
        $data->curricularComponentIdC = $this->curricularComponentIdC->value;
        $data->learningPeriodDescription = $this->learningPeriod->value;
        $data->curricularComponentOldName = $this->curricularComponentNameC->value;
        $data->curricularComponentNewName = $this->curricularComponentName->value;
        $data->formationLevelId = $this->formationLevelId->value;
        $data->courseIdS = $this->courseIdS->value;
        $data->courseVersionS = $this->courseVersionS->value;
        $data->turnIdS = $this->turnIdS->value;
        $data->unitIdS = $this->unitIdS->value;

        return $data;
    }
}
?>
