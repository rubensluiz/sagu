<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * GenerateMultipleComplementaryActivitiesPupils form
 *
 * @author Helio H R Guimaraes [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Equipe Solis [sagu2@solis.coop.br]
 *
 * @since
 * Class created on 12/03/2007
 */

/**
 * Form to generate multiple complementary activites
 */
class FrmGenerateMultipleClassPupil extends SForm
{
    private $home;
    public $filters;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct( _M('Gerar diversos alunos da turma', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;
        
        $classLabel = new MText('classNewLabel', _M('Turma',$module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classId = new MLookupTextField('classNewId', $this->getFormValue('classNewId', $data->classNewId), _M('Código da turma',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('classNewName_'), $module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $classId->setJsHint(_M('Informe o código da turma', $module));
        $className = new MTextField('classNewName_', $this->getFormValue('classNewName_', $data->classNewName), _M('Nome da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className->setJsHint(_M('Nome da turma', $module));
        $hctClass = new MHContainer('hctNewClass', array($classLabel, $classId, $className));
        $hctClass->setShowLabel(false);
        $fields[] = $hctClass;        

        $btn1 = new MButton('btnFilter', _M('Filtrar', $module));
        $fields[] = $btn1;

        $fields[] = new MSeparator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);

        $this->filters->courseId = $this->courseId->value[0];
        $this->filters->courseVersion = $this->courseId->value[1];
        $this->filters->turnId = $this->courseId->value[2];
        $this->filters->unitId = $this->courseId->value[3];
    }

    /**
     * Event triggered when user chooses Generate from the toolbar
     */
    public function btnFilter_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data = $this->getData();
        $this->filters->classId = $data->classNewId;

        $business = new BusinessAcademicBusGenerateMultipleClassPupil();
        $pupils = $business->getPupils($this->filters);

        
        if ( count($pupils) > 0 )
        {
            $data1 = array( );
            $flagCanLearningPeriodCourse = 0;

            $data2 = array( );
            $flagDontCanLearningPeriodCourse = 0;

            $btnInvert = new MButton('btnInvertSelection', _M('Inverter seleção', $module), 'invertSelection()');
            $this->addField($btnInvert);

            $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdGenerateMultipleClassPupil', $pupils);
            $grdResults->setData($pupils);
            $grdResults->setTitle(_M('Alunos registrados no curso', $module) . ' ' . $this->filters->courseId);
            $grdResults->name = 'grd';

            is_array($pupils) ? $grdResults->setScrollHeight(SAGU::getParameter('BASIC', 'GRID_SCROLL_HEIGHT')) : false;

            $this->addField($grdResults);

            $script .= "    function invertSelection()\n    {\n";
            $x = 0;
            
            if ( is_array($pupils) && (count($pupils) > 0) )
            {
                foreach ( $pupils as $row )
                {
                    $script .= '        if ( document.' . $this->name . '[\'selectgrd[' . $x . ']\'].checked == true )' . "\n        {\n";
                    $script .= '            document.' . $this->name . '[\'selectgrd[' . $x . ']\'].checked = false;' . "\n";
                    $script .= '        }' . "\n        else\n        {\n";
                    $script .= '            document.' . $this->name . '[\'selectgrd[' . $x . ']\'].checked = true;' . "\n";
                    $script .= '        }' . "\n";
                    $x++;
                }
            }
            $script .= "    }\n";        
            $script .= "    try{invertSelection();}catch(err){}";
            $this->page->addJsCode($script);
            
            $fields[] = new Separator('');            
            
            //Field class
            $classLabel = new MText('classLabel', _M('Turma', $module) . ':');
            $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $classLabel->setClass('m-caption m-caption-required');
            $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'className_', $module, 'Class', null, array( 'courseId' => 'courseId', 'courseVersion' => 'courseVersion' ), true);
            $classId->setJsHint(_M('Informe o código da turma', $module));
            $className_ = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $className_->setReadOnly(true);
            $className_->setJsHint(_M('Nome da turma', $module));
            $hctClass = new MHContainer('hctClass', array( $classLabel, $classId, $className_ ));
            $hctClass->setShowLabel(true);
            $hctClass->addBoxStyle('width', '100%');
            $fields[] = $hctClass;
            $validators[] = new MRequiredValidator('classId', _M('Turma', $module), 'required');
            //end class

            //Field begin date
            $beginDateLabel = new MText('m-caption m-caption-required', _M('Data inicial', $module) . ':');
            $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $beginDateLabel->setClass('m-caption m-caption-required');
            $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $beginDate->setJsHint(_M('Informe a data inicial', $module));
            $beginDate->setValidator(new MDATEDMYValidator('beginDate', _M('Data inicial', $module), 'required'));
            $htcBeginDate = new MHContainer('hctBeginDate', array( $beginDateLabel, $beginDate ));
            $htcBeginDate->addBoxStyle('width', '100%');
            $fields[] = $htcBeginDate;
            $validators[] = new MRequiredValidator('beginDate', _M('Data inicial', $module), 'required');

            //Field end date
            $endDateLabel = new MText('m-caption', _M('Data final', $module) . ':');
            $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $endDate->setValidator(new MDATEDMYValidator('endDate', _M('Data final', $module), 'optional'));
            $htcEndDate = new MHContainer('hctEndDate', array( $endDateLabel, $endDate ));
            $htcEndDate->addBoxStyle('width', '100%');
            $fields[] = $htcEndDate;

            $btnGenerate = new MButton('btnGenerate', _M('Gerar', $module));
            $btnGenerate->addBoxStyle('width', '100%');
            $btnGenerate->addBoxStyle('float', 'left');
            
            $fields[] = $btnGenerate;

            $fields[] = new Separator('');


            $this->addField($fields);
            $this->AddValidator($validators);
        }
        else
        {
            $this->addError(_M('Não foram encontrados alunos registrados no curso "@1".', $module, $this->filters->courseId . ' - ' . $this->filters->courseVersion));
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     * */
    public function btnGenerate_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusClassPupil();

        $contractIds = $_REQUEST['selectgrd'];
        $contractIds = array_unique($contractIds);

        if ( count($contractIds) > 0 && MIOLO::_request('classId') &&  MIOLO::_request('beginDate') )
        {

            $x = 0;

            $business->beginTransaction();

            foreach ( $contractIds as $contractId )
            {
                unset($filters1);
                unset($searchPupil);

                $filters1->classId = MIOLO::_request('classId');
                $filters1->beginDate = MIOLO::_request('beginDate');
                $filters1->contractId = $contractId;
                
                $searchPupil = $business->searchClassPupil($filters1);

                $filters1->endDate = MIOLO::_request('endDate');

                if ( is_array($searchPupil) && (count($searchPupil) > 0) )
                {
                    //Update
                    $ok = $business->updateClassPupil($filters1);
                }
                else
                {
                    //Insert
                    $ok = $business->insertClassPupil($filters1);
                }

                if ( $ok == true )
                {
                    $x++;
                }
                else
                {
                    $ok = false;
                    break;
                }
            }

            if ( $ok == true )
            {
                $business->commit();

                $msg = _M('@1 registros inseridos', $module, $x);

                if ( $x > 0 )
                {
                    $postAction = substr($action, 0, strrpos($action, ':')) . ':generateMultipleClassPupil';
                    $goto = $MIOLO->getActionURL($module, $postAction, null, null);

                    $caption = _M('Informação', $module);
                    $MIOLO->information($msg, $goto);
                }
                else
                {
                    $opts['courseId'] = MIOLO::_request('courseId');
                    $opts['courseVersion'] = MIOLO::_request('courseVersion');
                    $opts['turnId'] = MIOLO::_request('turnId');
                    $opts['unitId'] = MIOLO::_request('unitId');
                    $opts['contractIds'] = urlencode(serialize($contractIds));

                    $msg = _M('Erro executando a operação requisitada. Verifique se os dados estão corretos', $module) . '.';
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                    $caption = _M('Erro', $module);
                    $MIOLO->error($msg, $goto, $caption);
                }
            }
        }
        elseif(!MIOLO::_request('classId'))
        {
            $this->AddAlert(_M('Você deve selecionar uma turma.', $module));
            $this->btnFilter_click();
        }
        elseif(!MIOLO::_request('beginDate'))
        {
            $this->AddAlert(_M('Você deve selecionar uma data inicial.', $module));
            $this->btnFilter_click();
        }
        else
        {
            $this->AddAlert(_M('Você deve selecionar pelo menos um aluno para começar a geração por lotes.', $module));
            $this->btnFilter_click();
        }
    }
}

?>
