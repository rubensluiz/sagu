<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file list all curricular components coursed in special regimen
 *
 * @author daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 09/06/2006
 *
 **/

/**
 * Form to list data
 */
class FrmSpecialRegimen extends SForm
{
    private $module;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;

        parent::__construct( _M('Disciplinas cursadas em regime especial',$module), NULL, NULL );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $personId = MIOLO::_request('personId');

        $data2->personId = $personId;
        $business = new BusinessAcademicBusContract();
        
        $data     = $business->searchContract($data2);
        if ( count($data) > 0 )
        {
            $contract = $business->getContract($data[0][0]);
        }

        $personIdLabel = new MTextLabel('personIdLabel', $contract->personId, _M('Código',$module));
        //$personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fields[]      = $personIdLabel;

        $personNameLabel = new MTextlabel('personNameLabel', $contract->personName, _M('Nome',$module));
        //$personNameLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $fields[]        = $personNameLabel;

        $this->setFields($fields);

        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdSpecialRegimen');

        if ( count($data) > 0 )
        {
            foreach ( $data as $row )
            {
                $contractId[] = $row[0];
            }
        }
        
        $data       = $business->getCurricularComponentsByRegimen($contractId, SAGU::getParameter('BASIC', 'SPECIAL_REGIMEN'));
        $grdResults->setData($data);

        //###GRID///is_array($data) ? $grdResults->SetScrollHeight(SAGU::getParameter('BASIC', 'GRID_SCROLL_HEIGHT')) : false;

        $this->addField($grdResults);

        unset($fields);
        $flds[] = new MButton('btnClose', _M('Fechar janela', $module), 'window.close()');
        $div = new MDiv('divClose', $flds, null, 'align=center');
        $div->width='99%';
        $fields[] = $div;
        $fields[] = new MSeparator();
        $this->addField($fields);
    }
}

?>
