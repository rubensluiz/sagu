<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/12/2005
 */

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmCourseScheduleShockUnblock extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct( _M('Inserir', $module), NULL, NULL );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        //Field learning period
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Período letivo', $module) . ':');
        $learningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabelS->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$data->learningPeriodId), _M('Código do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('periodId', null, null, null, null, 'learningPeriod'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MRequiredValidator('learningPeriodId','', 'required');
        $learningPeriod = new MTextField('learningPeriod', $this->getFormValue('learningPeriod',$data->learningPeriod), _M('Período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriod->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriod->setReadOnly(true);
        $hctlearningPeriod = new MHContainer('hctlearningPeriod', array($learningPeriodLabelS, $learningPeriodId, $learningPeriod));
        $hctlearningPeriod->setShowLabel(false);
        $fields[] = $hctlearningPeriod;

        //Field curricular component
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Disciplina',$module) . ':');
        $curricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLabel->setClass('m-caption m-caption-required');
        $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentVersion,curricularComponentName', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'courseId', 'curricularComponentId' => 'curricularComponentId'), true);
        $curricularComponentId->setJsHint(_M('Informe o código da disciplina', $module));
        $validators[] = new MRequiredValidator('curricularComponentId');
        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersion->setJsHint(_M('Versão da disciplina', $module));
        $curricularComponentVersion->setReadOnly(true);
        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentName->setJsHint(_M('Nome da disciplina', $module));
        $curricularComponentName->setReadOnly(true);
        $hctCurricularComponent = new MHContainer('hctCurricularComponent', array($curricularComponentLabel, $curricularComponentId, $curricularComponentVersion, $curricularComponentName));
        $hctCurricularComponent->setShowLabel(false);
        $fields[] = $hctCurricularComponent;

        $fields[] = new MButton('btnList', null . _M('Lista', $module));
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
    }

    /**
     * Event triggered when user clicks the list button
     */
    public function btnList_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $business = new BusinessAcademicBusCourseScheduleShockUnblock();
        
        $filters->curricularComponentId = $this->curricularComponentId->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersion->value;
        $filters->courseId = $this->courseId->value[0];
        $filters->courseVersion = $this->courseVersion->value;

        $busCurr = new BusinessAcademicBusCurriculum();
        $curriculums = $busCurr->searchCurriculum($filters);

        if( count($curriculums) > 0 )
        {
            $data->curriculumId = $curriculums[0][0];

            $gridDataAllContracts = $business->selectCourseContracts($data);

            if( count($gridDataAllContracts) > 0 )
            {
                foreach($gridDataAllContracts as $contract)
                {
                    $business = new BusinessAcademicBusScheduleShockUnblock();

                    $filter1->contractId = $contract[0];
                    $filter1->learningPeriodId = $data->learningPeriodId;
                    $filter1->curriculumCurricularComponentId = $data->curricularComponentId;
                    $filter1->curriculumCurricularComponentVersion = $data->curricularComponentVersion;

                    // verificar se já existe um desbloqueio para esta disciplina, periodo letivo e contrato
                    $searchScheduleShockUnblock = $business->searchScheduleShockUnblock($filter1);

                    // se já existe um desbloqueio para esta disciplina, periodo letivo e contrato, não insere
                    if ( ! count($searchScheduleShockUnblock) > 0 )
                    {
                        $gridData[] = $contract;
                    }
                }

                if( count($gridData) > 0 )
                {
                    $grid = $MIOLO->getUI()->getGrid($module, 'GrdCourseScheduleShockUnblock', null);
                    $grid->setData($gridData);
                    $this->addField($grid);

                    $this->addField(new Separator(''));

                    //###GRID///is_array($gridData) ? $grid->SetScrollHeight(SAGU::getParameter('BASIC', 'GRID_SCROLL_HEIGHT')) : false;

                    if ( is_array($gridData) )
                    {
                       $this->toolbar->enableButton(MToolBar::BUTTON_SAVE);
                    }
                }
                else
                {
                    $this->addError(_M('Todos os contratos do curso informado já possuem desbloqueio por choque de horário.', $module));
                }
            }
            else
            {
                $this->addError(_M('Não há alunos registrados para o curso "@1".', $module, $data->courseName));
            }
        }
        else
        {
            $this->addError(_M('Não existe um currículo para este curso e esta disciplina', $module).'.');
        }
    }

    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $busContract = new BusinessAcademicBusContract();

        $data = $this->getTypesData();

        $contracts = $this->getFormValue('selectgridCourseScheduleShockUnblock', $this->selectgridCourseScheduleShockUnblock);

        if( count($contracts) > 0 )
        {
            $opts['contracts'] = urlencode(serialize($contracts));

            foreach ( $data as $key1 => $value1 )
            {
                $opts["$key1"] = $value1;
            }

            $opts['function'] = $function;
            $opts['event'] = 'tbBtnSave_confirm';

            $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

            unset($opts['event']);

            $goto = SAGU::getStackBackUrl();
            $gotoNo = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);

            $msg = _M('Você tem certeza que quer inserir desbloqueio por choque de horário para este aluno, este período letivo e esta disciplina', $module) . '?' ;

            $msg .= '<br><br>' . $data->learningPeriodDescription . '<br><br>' . _M('Disciplina', $module). ': ' . $data->curricularComponentName . '<br><br>';

            $msg .= _M('Alunos',$module).':<br>';

            foreach ( $contracts as $key1 => $value1 )
            {
                $getContract = $busContract->getContract($value1);

                $msg .= '<br>' . $getContract->personName;
            }

            $caption = _M('Questão',$module);
            $MIOLO->question($msg, $gotoYes, $gotoNo);

        }
        else
        {
            $this->addError(_M('Você deve selecionar pelo menos um contrato para inserir um desbloqueio por choque de horário.', $module));

            $this->btnList_click();
        }
    }

    public function tbBtnSave_confirm($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusCourseScheduleShockUnblock();
        $cnt = 0;

        $data = $this->getTypesData();

        $filters->curricularComponentId = $this->curricularComponentId->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersion->value;
        $filters->courseId = $this->courseId->value[0];
        $filters->courseVersion = $this->courseVersion->value;

        $busCurr = new BusinessAcademicBusCurriculum();
        $curriculums = $busCurr->searchCurriculum($filters);

        if ( is_array($curriculums) && ( count($curriculums) > 0 ) )
        {
            $data->curriculumId = $curriculums[0][0];

            $contracts = unserialize(urldecode(stripslashes(MIOLO::_request('contracts'))));

            if ( count($contracts) > 0 )
            {
                foreach ( $contracts as $id => $value )
                {
                    if ($business->insertCourseScheduleShockUnblock($data, $value))
                    {
                        $cnt++;
                    }
                }
            }

            if ( $cnt > 0 )
            {
                $msg = _M('@1 registros inseridos', $module,$cnt);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, null);

                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $msg = _M('Erro executando a operação solicitada.', $module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
        else
        {
            //Nao existe o curriculo
            $msg = _M('Não existe um currículo para este curso e esta disciplina', $module).'.';
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function getTypesData()
    {
        $data = new acdCurricularComponentUnblock();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }

        $data->courseId = $this->courseId->value[0];
        $data->courseVersion = $this->courseVersion->value;
        $data->turnId = $this->turnId->value;
        $data->unitId = $this->unitId->value;
        $data->learningPeriodDescription = $this->learningPeriod->value;
        $data->curricularComponentName = $this->curricularComponentName->value;
        $data->courseName = $this->getFormValue('courseName', $this->courseName->value);
        
        return $data;
    }
}
?>