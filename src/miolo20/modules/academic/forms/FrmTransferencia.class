<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel I. da Silva [nataniel@solis.com.br]
 *
 * @version $Id$
 *
 * @since
 * Class created on 08/07/2014
 */

set_time_limit(60);

class FrmTransferencia extends SStepByStepForm
{        
    protected $busCourseOccurrence;
    protected $busContract;
    protected $busCurriculum;
    protected $busClassPupil;
    protected $busDegree;
    protected $busDegreeEnroll;
    protected $busEntry;
    protected $busEnroll;
    protected $busEnrollStatus;
    protected $busFrequenceEnroll;
    protected $busGroup;
    protected $busClass;
    protected $busInvoice;
    protected $busLearningPeriod;
    protected $busMovementContract;
    protected $busMovementContractComplement;
    protected $busReceivableInvoicePupil;
    protected $busSchedule;
    protected $stepData;
    protected $busCurriculumLink;
    protected $busContractLock;
    protected $busExploitation;
    protected $busCurricularComponent;
    protected $busInternalExploitation;
    protected $busReason;
    protected $busIncentive;
    protected $busConvenantPerson;
    protected $busReceivableInvoice;
    protected $acdTransferencia;
    protected $finStatusDoTitulo;
    protected $busGeneralQueries;
    
    protected $newLearningPeriodId;
    protected $learningPeriodId;
    protected $transferData;
    
    protected $transferDataEncerradas;
    protected $transferDataMatriculadas;
    protected $logsProcesso;
    protected $objTitulo;
    protected $verificaInadinplencia;
    
    public $objetoNotas;
    public $tipoDeTransferencia;
    
    const TRANSFERENCIA_UNIDADE = 'U';
    const TRANSFERENCIA_VERSAO = 'V';
    const TRANSFERENCIA_TURNO = 'T';
    const TRANSFERENCIA_CURSO = 'C';
    const TRANSFERENCIA_TURMA = 'M';
        
    public function  __construct($steps, $formName, $isTest = FALSE)
    {
        if ( !$isTest )
        {
            $MIOLO = MIOLO::getInstance();
            $module = SAGU::getFileModule(__FILE__);
        
            $this->busCourseOccurrence = new BusinessAcademicBusCourseOccurrence();
            $this->busContract = new BusinessAcademicBusContract();
            $this->busCurriculum = new BusinessAcademicBusCurriculum();
            $this->busClass = new BusinessAcademicBusClass();
            $this->busClassPupil = new BusinessAcademicBusClassPupil();
            $this->busDegree = new BusinessAcademicBusDegree();
            $this->busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();
            $this->busEntry = new BusinessFinanceBusEntry();
            $this->busEnroll = new BusinessAcademicBusEnroll();
            $this->busEnrollStatus = new BusinessAcademicBusEnrollStatus();
            $this->busFrequenceEnroll = new BusinessAcademicBusFrequenceEnroll();
            $this->busGroup = new BusinessAcademicBusGroup();
            $this->busInvoice = new BusinessFinanceBusInvoice();
            $this->busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $this->busMovementContract = new BusinessAcademicBusMovementContract();
            $this->busMovementContractComplement = new BusinessAcademicBusMovementContractComplement();
            $this->busSchedule = new BusinessAcademicBusSchedule();
            $this->busReceivableInvoicePupil = new BusinessFinanceBusReceivableInvoicePupil();
            $this->busCurriculumLink = new BusinessAcademicBusCurriculumLink();
            $this->busContractLock = new BusinessAcademicBusContractLock();
            $this->busExploitation = new BusinessAcademicBusExploitation();
            $this->busCurricularComponent = new BusinessAcademicBusCurricularComponent();
            $this->busInternalExploitation = new BusinessAcademicBusInternalExploitation();
            $this->busReason = new BusinessAcademicBusReason();
            $this->busIncentive = new BusinessFinanceBusIncentive();
            $this->busConvenantPerson = new BusinessFinanceBusConvenantPerson();
            $this->busReceivableInvoice = new BusinessFinanceBusReceivableInvoicePupilUser();
            $this->acdTransferencia = new AcdTransferencia();
            $this->finStatusDoTitulo = new FinStatusDoTituloLog();
            $this->busGeneralQueries = new BusinessFinanceBusGeneralQueries();
        
            parent::__construct(null, $steps, $formName);
        
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
        }
    }
    
    /**
     * Executa o processo de transferencia de ocorrência de curso, podendo finalizar ou nao.
     *
     * @param stdClass $args
     * @param boolean $finalize
     */
    public function executaProcessoDeTransferencia($args, $finalize = false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $this->stepData = $stepData = (object)array_merge((array)$this->getStepData(), (array)$this->getData());
        
        $tableModificacoesDisciplinas = array();
        $tableTitulosTransferir = array();
        $transferData = array();
        $contratos = array();
                        
        try
        {
            SDatabase::beginTransaction();
                                                
            $filters = new stdClass();
            $filters->courseId = $stepData->curriculumCourseId;
            $filters->courseVersion = $stepData->curriculumCourseVersion;
            $filters->unitId = $stepData->curriculumCourseUnitId;
            $filters->turnId = $stepData->curriculumCourseTurnId;
            $filters->periodId = $stepData->periodId;
            
            // Verifica se existe período letivo para a nova ocorrência de curso
            $this->verificaSeExistePeriodoLetivoNovaOcorrenciaDeCurso($filters);
            
            if ( strlen($this->newLearningPeriodId) <= 0 )
            {
                throw new Exception( _M('Não foi encontrado um período letivo equivalente com a nova ocorrência de curso selecionado.', $module) );
            } 
            
            $filters = new stdClass();
            $filters->courseId = $stepData->courseId;
            $filters->courseVersion = $stepData->courseVersion;
            $filters->unitId = $stepData->unitId;
            $filters->turnId = $stepData->turnId;
            $filters->periodId = $stepData->periodId;
            
            // Verifica se existe período letivo para a ocorrência de curso a ser transferida
            $this->verificaSeExistePeriodoLetivoOcorrenciaAntiga($filters);
                        
            if ( strlen($this->learningPeriodId) <= 0 )
            {
                throw new Exception( _M('Não foi encontrado um período letivo para a ocorrência de curso selecionado.', $module) );
            }        
            
            // Obtém os contratos ativos da ocorrência de curso/contrato 
            $contratos = $this->obterContratosAtivos($stepData);
                               
            if ( !count($contratos) > 0 )
            {
                throw new Exception( _M('Não foi encontrado contratos ativos para serem transferidos, com os dados informados.', $module) );
            }
            
            // Obtém os contratos selecionados na grid do último passo
            $gridData = $MIOLO->_REQUEST('selectGrdTransferenciaDeOcorrenciaDeCurso');
            
            if ( $finalize == true && count($gridData) == 0 )  
            {
                throw new Exception( _M('É necessário selecionar ao menos um contrato para finalizar o processo de transferência.', $module) );
            }
                        
            foreach ( $contratos as $contrato )
            {
                /*
                * Realizar a transferência apenas para os contratos selecionados na grid
                * 
                */
                if ( ($finalize == true && in_array($contrato->contractId, $gridData)) || ($finalize == false) )
                {
                    $cloneContrato = null;
                    $cloneContrato = clone($contrato);
                    
                    $this->obtemTipoDeMovimentacaoContratual($this->stepData);

                    if ( $this->tipoDeTransferencia == FrmTransferencia::TRANSFERENCIA_TURMA )
                    {
                        // Insere movimentação contratual no contrato antigo apenas quando for transferência de turma
                        $this->insereMovimentacaoContratual($contrato, null);
                        
                        $this->tipoDeTransferencia = null;
                    }
                    
                    //Cria um novo contrato e retorna um objeto do contrato
                    $novoContrato = $this->gerarContratoParaNovaOcorrenciaDeCurso($cloneContrato);

                    //Obtém disciplinas encerradas
                    if ( $stepData->disciplinasEncerradas == DB_TRUE )
                    {
                        $disciplinasEncerradas = $this->obtemDisciplinasEncerradas($contrato);

                        if ( count($disciplinasEncerradas) > 0 )
                        {
                            $aproveitamentosEncerradas = $this->aproveitarDisciplinasEncerradas($disciplinasEncerradas, $novoContrato);
                        }
                    }

                    if ( $stepData->disciplinasMatriculadas == DB_TRUE )
                    {
                        $disciplinasMatriculadas = $this->obtemDisciplinasMatriculadas($contrato, $stepData->periodId);

                        $aproveitamentosMatriculadasComuns = $this->aproveitarDisciplinasMatriculadas($disciplinasMatriculadas, $contrato, $novoContrato);
                    }
                                        
                    // Cancela as disciplinas com status matriculado
                    $canceladas = $this->cancelaDisciplinasMatriculadas($contrato, $stepData->periodId);
                    
                    if ( $canceladas > 0 )
                    {
                        $this->zerarTitulos($contrato);
                    }
                    
                    // Insere movimentações contratuais
                    $this->insereMovimentacaoContratual($contrato, $novoContrato);
                    
                    // Migrar os títulos, incentivos e convênios para o novo contrato
                    if ( SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES' )
                    {
                        $verificaInadiplencia = $this->verificaInadinplencia($contrato);
           
                        if ( $verificaInadiplencia == DB_FALSE )
                        {
                            // cancela as pre matriculas
                            $canceladas = $this->cancelaDisciplinasPreMatriculadas($contrato, $stepData->periodId);

                            // se todas ou alguma pre-matriculada , cancelar
                            if ( $canceladas > 0 )
                            {
                                $this->cancelarTitulos($contrato);
                            }
                            
                            $titulos = $this->migrarFinanceiro($contrato, $novoContrato);
                        }
                    }

                    // Caso seja transferência unitária, bloqueia no primeiro passo, se não monta uma grid no último passo com todos inadimplentes
                    if ( $verificaInadiplencia == DB_TRUE )
                    {
                        if ( $this->stepData->transferencia != 'em_lote' )
                        {
                             throw new Exception( _M('O sistema detectou um débito financeiro em atraso com a instituição.', $module));
                        }
                        else
                        {
                            $this->verificaInadinplencia[$contrato->contractId] = $verificaInadiplencia;    
                        }
                    }
                    
                    // Migra campos customizados do contrato antigo para o novo
                    $this->migrarCamposCustomizadosDoContrato($contrato->contractId, $novoContrato->contractId);
                    
                    // Insere logs da transferência
                    $this->registrarLogsDeTransferencia($contrato, $novoContrato);

                    // Obtém o resumo das disciplinas para o último passo
                    $this->transferDataEncerradas[$contrato->contractId] = $aproveitamentosEncerradas;
                    $this->transferDataMatriculadas[$contrato->contractId] = $aproveitamentosMatriculadasComuns;
                    $this->objTitulo[$contrato->contractId] = $titulos;
                        
                }
            }
            
            if ( $finalize == true )  
            {
                SDatabase::commit();   
                
                $MIOLO->session->set('allData', null);
                
                $goto = $MIOLO->getActionURL($module, $action);
                SAGU::information( _M('Processo executado com sucesso.', $module), $goto );
            }
            else
            {
                $MIOLO->session->set("transferDataEncerradas", $this->transferDataEncerradas);
                $MIOLO->session->set("transferDataMatriculadas", $this->transferDataMatriculadas); // transferDataEncerradas transferDataMatriculadas
                
                $MIOLO->session->set("transferenciaNotas", $this->objetoNotas);
                $MIOLO->session->set("peridoLetivoDeOrigem", $this->learningPeriodId);
                
                $MIOLO->session->set("objTitulo", $this->objTitulo); 
                $MIOLO->session->set("verificaInadinplencia", $this->verificaInadinplencia); 
                
                SDatabase::rollback();
                
                parent::nextStepButton_click($args);
            }
            
            return true;
            
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            $this->addError($e->getMessage());
        }
    }
    
    public function zerarTitulos($contrato)
    {
        $this->cancelarTitulos($contrato);
    }
    
    public function cancelarTitulos($contrato)
    {
        // cancela os titulos
        $titulosMatricula = $this->busInvoice->obterTitulosDaMatricula($contrato->contractId,  $this->learningPeriodId);
        
        foreach ( (array) $titulosMatricula as $invoiceId )
        {            
            if ( ($this->busInvoice->getInvoiceBalance($invoiceId) > 0) && ($this->busInvoice->verificaTituloBloqueado($invoiceId, true) != DB_TRUE) )
            {
                $this->busInvoice->deleteInvoice($invoiceId);
            }
        }
    }
    
    /**
     * Obtém todos contratos ativos de uma ocorrência de curso/contrato
     * 
     * @param type $data
     * @return type
     */
    public function obterContratosAtivos($data, $gridData = false)
    {
        return $this->busContract->obtemContratosAtivos($data, $gridData);
    }
    
    /**
     * Obtém todas as disciplinas encerradas de um contrato
     * 
     * @param type $data
     * @return type
     */
    public function obtemDisciplinasEncerradas($data)
    {
        $filters = new stdClass();
        $filters->contractId = $data->contractId;
        $filters->notStatusId = array(SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED'), SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED'), SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED'));
        
        return $this->busEnroll->searchEnroll($filters);
    }
    
    /**
     * Obtém todas as disciplinas matriculadas de um contrato
     * 
     * @param type $data
     * @return type
     */
    public function obtemDisciplinasMatriculadas($data, $periodid)
    {   
        // Caso a movimentação atual do contrato for de pré-matrícula
        // não pode pegar as disciplinas matriculadas (pois as MATRICULADAS
        // quando a movimentação for de PRÉ estão, na verdade, PRÉ). 
        // Ticket #34443
        
        if ( $this->busContract->getContractStateId($data->contractId) == SAGU::getParameter('ACADEMIC' , 'STATE_CONTRACT_ID_PRE_ENROLL') )
        {
            $result = null;
        }
        else
        {
            $filters = new stdClass();
            $filters->contractId = $data->contractId;
            $filters->statusId = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED');
            $filters->periodId = $periodid;
        
            $result = $this->busEnroll->searchEnroll($filters);
        }
        
        return $result;
    }
    
    /**
     * Obtém todas as disciplinas matriculadas de um contrato
     * 
     * @param type $data
     * @return type
     */
    public function obtemDisciplinasPreMatriculadas($data, $periodid)
    {   
        $filters = new stdClass();
        $filters->contractId = $data->contractId;
        $filters->statusId = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED');
        $filters->periodId = $periodid;
        
        return $this->busEnroll->searchEnroll($filters);
    }

    /**
     * Verifica se existe período letivo para uma ocorrência de curso
     * 
     * @param type array $filters
     * @return type boolean
     */
    public function verificaSeExistePeriodoLetivoNovaOcorrenciaDeCurso($filters)
    {
        $newLearningPeriod = $this->busLearningPeriod->searchLearningPeriod($filters);
     
        return $this->newLearningPeriodId = $newLearningPeriod[0][0];
    }
    /**
     * Verifica se existe período letivo para uma ocorrência de curso
     * 
     * @param type array $filters
     * @return type boolean
     */
    public function verificaSeExistePeriodoLetivoOcorrenciaAntiga($filters)
    {
        $newLearningPeriod = $this->busLearningPeriod->searchLearningPeriod($filters);
        
        return $this->learningPeriodId = $newLearningPeriod[0][0];
    }
    
    /**
     * Aproveita notas e avaliações comum as duas ocorrências de curso
     * 
     * @param type $data
     * @throws Exception
     */
    public function aproveitarDisciplinasMatriculadas($data, $contrato, $novoContrato)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $return = new stdClass();
                
        $contractId = null;
        $contractId = $contrato->contractId;
        
        $logsProcesso = array();
        $transferData = array();
        $transferData['learningPeriods'] = array();
        $transferData['frequencies'] = array();
        $transferData['notesAvaliations'] = array();
                
        if ( $this->stepData->configMatriculadas == AcdTransferencia::CONFIG_MATRICULDAS_DESTINO || !(strlen($this->stepData->configMatriculadas) > 0) )
        {
            if ( strlen($this->stepData->configMatriculadas) > 0 )
            {
                $logsProcesso[] = _M('O aproveitamento de disciplinas foi efetuado procurando-se disciplinas oferecidas equivalentes na ocorrência de curso de destino.');
            }
            elseif ( $this->stepData->disciplinasMatriculadas == DB_TRUE )
            {
                $logsProcesso[] = _M('Não foi selecionada a opção "Fazer uso de quais disciplinas oferecidas?", será utilizado por padrão a procura de disciplinas oferecidas equivalentes na ocorrência de destino.');
            }
        }
        elseif ( $this->stepData->configMatriculadas == AcdTransferencia::CONFIG_MATRICULDAS_ORIGINAL )
        {
            $logsProcesso[] = _M('O aproveitamento de disciplinas foi efetuado utilizando-se as mesmas disciplinas oferecidas da ocorrência de curso atual.');
        }
        
        foreach ( $data as $e )
        {   
            $enroll = null;
            $situacao = null;
            $enroll = $this->busEnroll->getEnroll($e[0]);                        
            $group = $this->busGroup->getGroup($enroll->groupId);
            $learningPeriod = $this->busLearningPeriod->getLearningPeriod($group->learningPeriodId);
            $disciplinaComVinculo = false;
            
            // Quando estado da matricula for MATRICULADO, realiza comportamentos extras (transferencia das notas (acdDegreeEnroll))
            if ( $enroll->statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') )
            {                
                if ( strlen($this->newLearningPeriodId) <= 0 )
                {
                    throw new Exception( _M('Não foi encontrado um período letivo equivalente para "@1"', $module, $learningPeriod->description) );
                }
                
                $learningPeriodNew = $this->busLearningPeriod->getLearningPeriod($this->newLearningPeriodId);

                $objLearningPeriod = new stdClass();
                $objLearningPeriod->learningPeriodIdOld = $group->learningPeriodId;
                $objLearningPeriod->learningPeriodIdNew = $this->newLearningPeriodId;

                // Busca pelos degree's antigos
                $filters = new stdClass();
                $filters->learningPeriodId = $objLearningPeriod->learningPeriodIdOld;
                $objLearningPeriod->degreesOld = (array) $this->busDegree->searchDegree($filters);

                // Busca pelos degree's novos
                $filters = new stdClass();
                $filters->learningPeriodId = $objLearningPeriod->learningPeriodIdNew;
                $objLearningPeriod->degreesNew = (array) $this->busDegree->searchDegree($filters);
                
                // Se quantidade de avaliacoes for diferente, aborta processo
                if ( count($objLearningPeriod->degreesOld) != count($objLearningPeriod->degreesNew) )
                {
                    throw new Exception( _M('O número de notas equivalentes para o período letivo "@1" não é igual ao do período letivo "@2"', $module, $learningPeriod->description, $learningPeriodNew->description) );
                }
                
                if ( $this->stepData->disciplinasComuns == DB_TRUE )
                {                    
                    // Busca o curriculumId de destino
                    $curriculum = $this->busCurriculum->getCurriculum($enroll->curriculumId);
                    $filters = new stdClass();
                    $filters->courseId = $this->stepData->curriculumCourseId;
                    $filters->courseVersion = $this->stepData->curriculumCourseVersion;
                    $filters->turnId = $this->stepData->curriculumCourseTurnId;
                    $filters->unitId = $this->stepData->curriculumCourseUnitId;
                    $filters->curricularComponentId = $curriculum->curricularComponentId;
                    $filters->curricularComponentVersion = $curriculum->curricularComponentVersion;

                    $newCurriculums = $this->busCurriculum->searchCurriculumComponentObject($filters);
                    $curriculumIdNew = $newCurriculums[0]->curriculumId;
                }
                
                if ( count($curriculumIdNew) <= 0 )
                {
                    // Se não achou a disciplina na nova ocorrência de curso, verifica se existe vínculo para essa disciplina 
                    if ( $this->stepData->disciplinasVinculadas == DB_TRUE )
                    {
                        $filtersCurriculumLink = new stdClass();
                        $filtersCurriculumLink->curriculumId = $curriculum->curriculumId;

                        $filtersCurriculumLink->courseId = $curriculum->courseId;
                        $filtersCurriculumLink->courseVersion = $curriculum->courseVersion;
                        $filtersCurriculumLink->courseUnitId = $curriculum->unitId;
                        $filtersCurriculumLink->courseTurnId = $curriculum->turnId;

                        $filtersCurriculumLink->courseLinkId = $this->stepData->curriculumCourseId;
                        $filtersCurriculumLink->courseLinkVersion = $this->stepData->curriculumCourseVersion;
                        $filtersCurriculumLink->courseLinkUnitId = $this->stepData->curriculumCourseUnitId;
                        $filtersCurriculumLink->courseLinkTurnId = $this->stepData->curriculumCourseTurnId;
                                                
                        $searchCurriculumLink = $this->busCurriculumLink->searchCurriculumLink($filtersCurriculumLink);
                        
                        //$curricularComponent = $this->busCurricularComponent->getCurricularComponent($curriculum->curricularComponentId, $curriculum->curricularComponentVersion);
                        
                        // Só aproveita se for vínculo de 1:1
                        if ( count($searchCurriculumLink) == 1 )
                        {
                            $enroll->curriculumId = $curriculumIdNew = $searchCurriculumLink[0][5];
                            $disciplinaComVinculo = true;
                        }
                        else if ( count($searchCurriculumLink) > 1 )
                        {
                            $logsProcesso[] = _M('A disciplina "@1" possuí vínculo de 1:n e não será aproveitada', $module, $curriculum->curricularComponentName);
                            // log throw new Exception( _M('A disciplina "@1" possuí vínculo de 1:n e não será aproveitada', $module, $curriculum->curricularComponentName) );
                        }
                    }
                    
                    $logsProcesso[] = _M('Não foi encontrado uma disciplina equivalente para "@1"', $module, $curriculum->curricularComponentName);
                    // log throw new Exception( _M('Não foi encontrado uma disciplina equivalente para "@1"', $module, $curriculum->curricularComponentName) );
                }
                
                // Se não foi especificado como aproveitar, não será aproveitado nada
                if ( $this->stepData->disciplinasComuns == DB_FALSE || $this->stepData->disciplinasVinculadas == DB_FALSE )
                {
                    continue;
                }                
                
                // Busca novo groupId para atualizar na acdEnroll, somente se as oferecidas utilizadas devem vir do destino
                if ( !(strlen($this->stepData->configMatriculadas) > 0) || $this->stepData->configMatriculadas == AcdTransferencia::CONFIG_MATRICULDAS_DESTINO )
                {
                    $filters = new stdClass();
                    $filters->learningPeriodId = $this->newLearningPeriodId;
                    $filters->curriculumId = $curriculumIdNew;
                    $filters->classId = $this->stepData->destinationClassId;
                    $findGroup = $this->busGroup->searchGroup($filters);

                    $groupIdNew = $findGroup[0][0];

                    if ( strlen($groupIdNew) <= 0 )
                    {
                       $logsProcesso[] = _M('Não foi encontrada uma disciplina oferecida equivalente para disciplina "@1" do período letivo "@2"', $module, $curriculum->curricularComponentName, $learningPeriod->description);
                        // log throw new Exception( _M('Não foi encontrado uma disciplina oferecida equivalente para disciplina "@1" do período letivo "@2"', $module, $curriculum->curricularComponentName, $learningPeriod->description) );
                    }
                }
                elseif ( $this->stepData->configMatriculadas == AcdTransferencia::CONFIG_MATRICULDAS_ORIGINAL )
                {
                    $groupIdNew = $enroll->groupId;
                }

                
                //Altera o groupId
                $enroll->groupId = $groupIdNew;
                
                // Add in frequencies list
                $objFrequencies = new stdClass();
                $objFrequencies->sumWorkLoad = $this->busFrequenceEnroll->getSumWorkLoad($enroll->enrollId, $group->groupId);
                if ( $objFrequencies->sumWorkLoad > 0 )
                {
                    $objFrequencies->curriculumIdOld = $curriculum->curriculumId;
                    $objFrequencies->curriculumIdNew = $curriculumIdNew;
                    $objFrequencies->groupIdOld = $group->groupId;
                    $objFrequencies->groupIdNew = $groupIdNew;
                    $objFrequencies->enrollId = $enroll->enrollId;
                    $objFrequencies->newContractId = $novoContrato->contractId;
                    $transferData['frequencies'][] = $objFrequencies;
                }
                                                
                // Add learningPeriodId in list
                if ( !in_array($group->learningPeriodId, $transferData['learningPeriods']) )
                {              
                    $transferData['learningPeriods'][] = $objLearningPeriod;
                }
                
                $objNotesAvaliations = new stdClass();
                if ( $this->stepData->notesAvaliations == DB_TRUE )
                {
                    $objNotesAvaliations->curriculumIdOld = $curriculum->curriculumId;
                    $objNotesAvaliations->curriculumIdNew = $curriculumIdNew;
                    $objNotesAvaliations->groupIdOld = $group->groupId;
                    $objNotesAvaliations->groupIdNew = $groupIdNew;
                    $objNotesAvaliations->enrollId = $enroll->enrollId;
                    $objNotesAvaliations->newContractId = $novoContrato->contractId;
                    $objNotesAvaliations->learningPeriodId = $group->learningPeriodId;
                    $transferData['notesAvaliations'][] = $objNotesAvaliations;
                }
            }
            
            if ( strlen($enroll->curriculumId) > 0 )
            {
                $curriculum = $this->busCurriculum->getCurriculum($enroll->curriculumId);

                $filters = new stdClass();
                $filters->courseId = $curriculum->courseId;
                $filters->courseVersion = $curriculum->courseVersion;
                $filters->turnId = $curriculum->turnId;
                $filters->unitId = $curriculum->unitId;
                $filters->curricularComponentId = $curriculum->curricularComponentId;
                $filters->curricularComponentVersion = $curriculum->curricularComponentVersion;
                $rows = $this->busCurriculum->searchCurriculum($filters);
                
                $curricComponent = $this->busCurricularComponent->getCurricularComponent($curriculum->curricularComponentId, $curriculum->curricularComponentVersion);
                $status = $this->busEnrollStatus->getEnrollStatus($enroll->statusId);
                $class = $this->busClass->getClass($group->classId);
                
                // Informações para montar grid de resumo no último passo
                $dadosDisciplina[0] = NULL;
                $dadosDisciplina[1] = $enroll->curriculumId;
                $dadosDisciplina[2] = $group->groupId;
                $dadosDisciplina[3] = $learningPeriod->periodId;
                
                // Se for uma disciplina com vínculo exibe a informação da disciplina vinculada também
                if ( $disciplinaComVinculo == true )
                {
                    $dadosDisciplina[4] = $searchCurriculumLink[0][3] .' - '. $searchCurriculumLink[0][4]. ' <br><b>('.$searchCurriculumLink[0][8] .' - '. $searchCurriculumLink[0][9].')</b>';
                }
                else
                {
                    $dadosDisciplina[4] = $curriculum->curricularComponentId . ' / ' . $curriculum->curricularComponentVersion . ' - ' . $curriculum->curricularComponentName;
                }
                
                $dadosDisciplina[5] = $curricComponent->academicNumberHours;
                $dadosDisciplina[6] = $enroll->statusDescription;
                
                if ( count($rows) > 0 && strlen($enroll->groupId) > 0 && strlen($curriculumIdNew) > 0 )
                {
                    $enroll->curriculumId = $rows[0][0];
                    $enroll->contractId = $novoContrato->contractId;
                    
                    // Inserir nova enroll no contrato novo
                    $this->busEnroll->insertEnroll($enroll);
                    
                    if ( $disciplinaComVinculo == true )
                    {
                        $return->disciplinasMatriculadasVinculadas[] = $dadosDisciplina;
                    }
                    else
                    {
                        $return->disciplinasMatriculadasComuns[] = $dadosDisciplina;
                    }
                }
                else
                {
                    $return->disciplinasMatriculadasNaoAproveitadas[] = $dadosDisciplina;
                    
                    $logsProcesso[] = _M('Não foi encontrado uma disciplina correspondente para "@1" na nova ocorrência de curso.', $module, $curriculum->curricularComponentId . ' / ' . $curriculum->curricularComponentVersion . ' - ' . $curriculum->curricularComponentName);
                }
            }
        }
        
        // Salva dados de notas e avaliações
        if ( $this->stepData->notesAvaliations == DB_TRUE )
        {
            foreach ( $transferData['notesAvaliations'] as $objNotas )
            {
                // Obter o novo enrollid para inserir as notas na nova enrollid
                $newEnrollId = $this->busEnroll->getEnrolledEnrollId($objNotas->curriculumIdNew, $objNotas->newContractId, $this->newLearningPeriodId);
                
                // Obtem as equivalencias das notas elencadas no segundo passo
                $degreesChanged = (array) $MIOLO->session->get('degreesChanged');
                
                // Realiza o aproveitamento das notas apenas quando finalizar o processo
                if ( count($degreesChanged) > 0 )
                {
                    $degrees = (array) $degreesChanged[$objNotas->learningPeriodId];
                    foreach ( $degrees as $degreeIdOld => $degreeIdNew )
                    {
                        $filters = new stdClass();
                        $filters->enrollId = $objNotas->enrollId;
                        $filters->degreeId = $degreeIdOld;
                        $filters->orderByDateDesc = true;
                        $degreeEnrolls = (array) $this->busDegreeEnroll->searchDegreeEnroll($filters);
                        
                        $degreeEnrollId = $degreeEnrolls[0][0];
                        if ( strlen($degreeEnrollId) > 0 && strlen($newEnrollId) > 0 )
                        {
                            $degreeEnroll = $this->busDegreeEnroll->getDegreeEnroll($degreeEnrollId);
                            $this->busDegreeEnroll->deleteDegreeEnroll($degreeEnroll->degreeEnrollId);

                            $degreeEnroll->degreeId = $degreeIdNew;
                            $degreeEnroll->enrollId = $newEnrollId;
                            $this->busDegreeEnroll->insertDegreeEnroll($degreeEnroll);
                        }
                    }
                }
            }
        }
          
        // Salva dados de frequencias (acdFrequenceEnroll) se configurado para aproveitar frequências
        if ( $this->stepData->frequency == DB_TRUE )
        {
            foreach ( $transferData['frequencies'] as $key => $row )
            {
                $curriculumOld = $this->busCurriculum->getCurriculum($row->curriculumIdOld);
                $curriculumNew = $this->busCurriculum->getCurriculum($row->curriculumIdNew);

                // Obtém as frequencias antigas para inserir na nova enroll
                $filters = new stdClass();
                $filters->groupId = $row->groupIdOld;
                $filters->enrollId = $row->enrollId;
                $rows = $this->busFrequenceEnroll->searchFrequenceEnrollObject($filters);

                // Obter o novo enrollid para inserir as frequencias da nova matricula
                $newEnrollId = $this->busEnroll->getEnrolledEnrollId($row->curriculumIdNew, $row->newContractId, $this->newLearningPeriodId);
                
                // Total de frequencias lançadas no enroll antiga
                $newWorkLoad = $row->sumWorkLoad;

                // Busca o scheduleId de destino
                $filters = new stdClass();
                $filters->groupId = $row->groupIdNew;
                $schedules = $this->busSchedule->searchSchedule($filters);
                $scheduleId = $schedules[0][0];

                if ( strlen($scheduleId) <= 0 )
                {
                    $logsProcesso[] = _M('Não foi possível encontrar uma horário programado para a disciplina "@1"', $module, $curriculumNew->curricularComponentName);
                    //throw new Exception( _M('Não foi possível encontrar uma horário programado para a disciplina "@1"', $module, $curriculumNew->curricularComponentName) );
                }
                else
                {    
                    // Obtem as datas cadastradas para o novo oferecimento
                    $datas = str_replace('{', '', $schedules[0][13]);
                    $datas = str_replace('}', '', $datas);
                    $dataFrequencias = explode(',', $datas);

                    // Obtém obejto do schedule
                    $scheduleData = $this->busSchedule->getScheduleByGroup($scheduleId);

                    if ( ( strlen($newWorkLoad) > 0 ) && ( count($rows) > 0 ) && strlen($newEnrollId) > 0 )
                    {
                        $count = 0;
                        $verificaFrequencias = 0;

                        //Interação sobre as frequencias antigas $rows 
                        foreach ( (array) $rows as $_row )
                        {
                            $_row->enrollId = $newEnrollId;
                            $_newWorkLoad = SAGU::calcNumber("$newWorkLoad - {$_row->timeHours}", true);
                            $newWorkLoad = $_newWorkLoad;

                            if ( ($_newWorkLoad >= 0) && ($verificaFrequencias < count($rows)) )
                            {
                                $dataFrequencia = $dataFrequencias[$count];

                                // Insere as frequencias
                                foreach ( $scheduleData->timeIds as $timeId )
                                {
                                    if ( strlen($dataFrequencia) > 0 )
                                    {
                                        $verificaFrequencias++;
                                        $_row->frequencyDate = $dataFrequencia;
                                        $_row->timeId = $timeId;
                                        $_row->scheduleId = $scheduleId;
                                        $_row->reasonCancellation = _M('Esta frequência é relativa à disciplina anterior que foi transferida (@1)', $module, $curriculumOld->curricularComponentName);
                                        $ok = $this->busFrequenceEnroll->insertFrequenceEnroll($_row);
                                    }
                                }
                                $count++;
                            }
                            else
                            {
                                break;
                            }                            
                        }

                        if ( round($newWorkLoad) != 0 ) // Quando nao foi possivel encaixar corretamente as novas frequencias
                        {
                            $logsProcesso[] = _M('Não foi possível encaixar corretamente a nova C.H. a utilizar para a disciplina de destino "@1"', $module, $curriculumNew->curricularComponentName);
                            //throw new Exception( _M('Não foi possível encaixar corretamente a nova C.H. a utilizar para a disciplina de destino "@1"', $module, $curriculumNew->curricularComponentName) );
                        }
                    }
                }
            }
        }
                
        $this->objetoNotas[$contractId] = $transferData;
        $this->logsProcesso[$contractId] = $logsProcesso;
        
        return $return;
    }
        
    /**
     * Aproveita as disciplinas encerradas de um contrato
     * 
     * @param Array de objeto de matriculas encerradas  $data
     * @param Objeto do novo contrato
     */
    public function aproveitarDisciplinasEncerradas($data, $novoContrato)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $equivalenciasN1 = array();
        $return = new stdClass();
        
        //Percorre todas as matrículas encerradas do contrato no período
        foreach( $data as $cod => $linha )
        {
            $enroll = $this->busEnroll->getEnroll($linha[0]);
            $oldContractId = $enroll->contractId;
            
            if ( $enroll->isExploitation && !$enroll->groupId )
            {
                $enroll->groupId = $this->busExploitation->getGroupIdFromExploitation($linha[0]);
                $aproveitamentoExterno = $this->busExploitation->getCurriculumIdAndPeriodIdFromExploitation($linha[0]);
            }
            
            //Verifica se é aproveitamento para obter o groupid
            if( (strlen($enroll->groupId) > 0) || (is_null($enroll->groupId) && strlen($aproveitamentoExterno[0]) > 0) )
            {
                if ( strlen($enroll->groupId) > 0 )
                {
                    $group = $this->busGroup->getGroup($enroll->groupId);
                    if( strlen($group->learningPeriodId) > 0 )
                    {
                        $learningPeriod = $this->busLearningPeriod->getLearningPeriod($group->learningPeriodId);
                    }
                }
                else
                {
                    $enroll->curriculumId = $aproveitamentoExterno[0];
                    $learningPeriod->periodId = $aproveitamentoExterno[1];
                }
                
                //Obtem informações da disciplina
                $curriculum = $this->busCurriculum->getCurriculum($enroll->curriculumId);
                $curricComponent = $this->busCurricularComponent->getCurricularComponent($curriculum->curricularComponentId, $curriculum->curricularComponentVersion);

                $noAction = true;
                $dataNoAction = array();

                //Grid data
                $dataNoAction[0] = NULL;
                $dataNoAction[1] = $enroll->curriculumId;
                $dataNoAction[2] = $group->groupId;
                $dataNoAction[3] = $learningPeriod->periodId;
                $dataNoAction[4] = $curriculum->curricularComponentId . ' / ' . $curriculum->curricularComponentVersion . ' - ' . $curriculum->curricularComponentName;
                $dataNoAction[5] = $curricComponent->academicNumberHours;
                $dataNoAction[6] = $enroll->statusDescription;              

                // Verifica se a disciplina comum entre a nova ocorrência de curso
                $filtersCurriculum = new stdClass();
                $filtersCurriculum->curricularComponentId = $curriculum->curricularComponentId;
                $filtersCurriculum->curricularComponentVersion = $curriculum->curricularComponentVersion;
                $filtersCurriculum->courseId = $this->stepData->curriculumCourseId;
                $filtersCurriculum->courseVersion = $this->stepData->curriculumCourseVersion;
                $filtersCurriculum->turnId = $this->stepData->curriculumCourseTurnId;
                $filtersCurriculum->unitId = $this->stepData->curriculumCourseUnitId;
                
                $newCurriculumId = $this->busCurriculum->searchCurriculum($filtersCurriculum);
                
                if ( $newCurriculumId[0][17] == SAGU::getParameter('ACADEMIC', 'STATE_CURRICULUM_TYPE_INACTIVE') )
                {
                    unset($newCurriculumId);
                }
                
                //Se aproveitar disciplinas comuns entre os cursos
                if( count($newCurriculumId) > 0 && $this->stepData->disciplinasComuns == DB_TRUE )
                {
                    //Insere a uma matrícula no novo contrato com a disicplina comum entre os dois cursos
                    $enroll->curriculumId = $newCurriculumId[0][0];
                    $enroll->contractId = $novoContrato->contractId;

                    $this->busEnroll->insertEnroll($enroll);

                    $dataDisciplinas = array();
                    //Grid data
                    $dataDisciplinas[0] = NULL;
                    $dataDisciplinas[1] = $newCurriculumId[0][0];
                    $dataDisciplinas[2] = $group->groupId;
                    $dataDisciplinas[3] = $learningPeriod->periodId;
                    $dataDisciplinas[4] = $newCurriculumId[0][10];
                    $dataDisciplinas[5] = $newCurriculumId[0][25];
                    $dataDisciplinas[6] = $enroll->statusDescription;

                    $return->disciplinas[] = $dataDisciplinas;
                    $noAction = false;
                }
                
                //Se aproveitar vínculos de disciplinas (equivalências)
                if( $this->stepData->disciplinasVinculadas == DB_TRUE && ( count($newCurriculumId) == 0  || $this->stepData->disciplinasComuns == DB_FALSE ) )
                {
                    if( $enroll->statusId != SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED') )
                    {
                        $filtersCurriculumLink = new stdClass();
                        $filtersCurriculumLink->curriculumId = $curriculum->curriculumId;

                        $filtersCurriculumLink->courseId = $curriculum->courseId;
                        $filtersCurriculumLink->courseVersion = $curriculum->courseVersion;
                        $filtersCurriculumLink->courseUnitId = $curriculum->unitId;
                        $filtersCurriculumLink->courseTurnId = $curriculum->turnId;

                        $filtersCurriculumLink->courseLinkId = $this->stepData->curriculumCourseId;
                        $filtersCurriculumLink->courseLinkVersion = $this->stepData->curriculumCourseVersion;
                        $filtersCurriculumLink->courseLinkUnitId = $this->stepData->curriculumCourseUnitId;
                        $filtersCurriculumLink->courseLinkTurnId = $this->stepData->curriculumCourseTurnId;
                        
                        $searchCurriculumLink = $this->busCurriculumLink->searchCurriculumLink($filtersCurriculumLink);

                        $curricularComponent = $this->busCurricularComponent->getCurricularComponent($curriculum->curricularComponentId, $curriculum->curricularComponentVersion);

                        // Vínculo 1:1
                        if ( count($searchCurriculumLink) == 1 && !in_array($searchCurriculumLink[0], $equivalenciasN1)  )
                        {
                            unset($filtersCurriculumLink->curriculumId);
                            $filtersCurriculumLink->curriculumLinkId = $searchCurriculumLink[0][5];

                            $maisEquivalencias = $this->busCurriculumLink->searchCurriculumLink($filtersCurriculumLink);

                            // Vínculo n:1
                            if ( count($maisEquivalencias) > 1 )
                            {
                                $equivalenciasN1 = $maisEquivalencias;
                                $vinculos = array();
                                $equivEnrolls = 0;

                                // Verifica se o aluno está aprovado em todas as disciplinas equivalentes.
                                foreach ( $equivalenciasN1 as $equivalenciaN1 )
                                {
                                    foreach ( $data as $eLinkEnroll )
                                    {
                                        if ( (int)$eLinkEnroll[3] == (int)$equivalenciaN1[0] && $eLinkEnroll[20] == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED') ) //aprovado $eLinkEnroll[20]
                                        {
                                            $groupLink = $this->busGroup->getGroup($eLinkEnroll[2]);
                                            $learningPeriodLink  = $this->busLearningPeriod->getLearningPeriod($groupLink->learningPeriodId);
                                            
                                            $dataExp = array();
                                            //Grid data
                                            $args = $equivalenciaN1[5] . '|' . $oldContractId;// . '|' . $learningPeriodLink->learningPeriodId;
                                            $action = SForm::getAjaxAction('FrmTransferenciaResumo::mostraPopupInformarNota', 'mPopupResponse', false, array('args' => $args), true, false);
                                            $dataExp[0] = '<a href="' . $action . '">Definir nota</a>';
                                            $dataExp[1] = $equivalenciaN1[0];
                                            $dataExp[2] = $group->groupId;
                                            $dataExp[3] = $learningPeriodLink->periodId;
                                            $dataExp[4] = $equivalenciaN1[3] .' - '. $equivalenciaN1[4]. ' <br><b>('.$equivalenciaN1[8] .' - '. $equivalenciaN1[9].')</b>';
                                            $dataExp[5] = $curricularComponent->academicNumberHours;
                                            $dataExp[6] = $enroll->statusDescription;

                                            $vinculos[$equivEnrolls] = $dataExp;
                                            $equivEnrolls ++;
                                        }
                                    }
                                }

                                if ( count($equivalenciasN1) == $equivEnrolls )
                                {
                                    $filters = new stdClass();
                                    $filters->contractId = $novoContrato->contractId;
                                    $filters->learningPeriodId = $this->newLearningPeriodId;
                                    $filters->curriculumId = $equivalenciasN1[0][5];
                                    $filters->exploitationEnrollId = $enroll->enrollId;
                                    $filters->exploitationNumberHours = $equivalenciasN1[0][10];
                                    
                                    $filters->finalnote = $_SESSION['novaNota'][$oldContractId][$equivalenciasN1[0][5]];

                                    if ( $this->busInternalExploitation->insertInternalExploitation($filters) )
                                    {
                                        foreach ( $vinculos as $vinculo )
                                        {
                                            $return->vinculos[] = $vinculo;
                                            $noAction = false;
                                        }
                                    }
                                }
                                else
                                {
                                    unset($equivalenciasN1);
                                }
                            }
                            else
                            {
                                //Atualiza o curriculum
                                $enroll->curriculumId = $searchCurriculumLink[0][5];
                                $enroll->contractId = $novoContrato->contractId;
                                
                                $busDiverseConsultation = new BusinessAcademicBusDiverseConsultation();
                                $filtro = new stdClass();
                                $filtro->enrollId = $enroll->enrollId;
                                $consulta = $busDiverseConsultation->getCurricularComponentCoursed($filtro);
                                
                                if ( strlen($consulta[0][7]) > 0 )
                                {
                                    $enroll->finalNote = $consulta[0][7];
                                }

                                $this->busEnroll->insertEnroll($enroll);

                                $dataExp = array();
                                //Grid data
                                $dataExp[0] = NULL;
                                $dataExp[1] = $searchCurriculumLink[0][0];
                                $dataExp[2] = $group->groupId;
                                $dataExp[3] = $learningPeriod->periodId;
                                $dataExp[4] = $searchCurriculumLink[0][3] .' - '. $searchCurriculumLink[0][4]. ' <br><b>('.$searchCurriculumLink[0][8] .' - '. $searchCurriculumLink[0][9].')</b>';
                                $dataExp[5] = $curricularComponent->academicNumberHours;
                                $dataExp[6] = $enroll->statusDescription;

                                $return->vinculos[] = $dataExp;
                                $noAction = false;
                            }
                        }
                        // Vinculo 1:n
                        else if ( count($searchCurriculumLink) > 1 && in_array($enroll->statusId, array(SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED'),
                                                                                                        SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED'))) )
                        {
                            $exploitation = '';
                            foreach ( $searchCurriculumLink as $curriculumLink )
                            {
                                $filters = new stdClass();
                                $filters->contractId = $novoContrato->contractId;
                                $filters->learningPeriodId = $this->newLearningPeriodId;
                                $filters->curriculumId = $curriculumLink[5];
                                $filters->exploitationEnrollId = $enroll->enrollId;
                                $filters->exploitationNumberHours = $curriculumLink[10];
                                $filters->finalnote = $this->busDegreeEnroll->obterNotaPorCurriculumEContrato($curriculumLink[0], $this->stepData->contractId);

                                if ( $this->busInternalExploitation->insertInternalExploitation($filters) )
                                {
                                    $exploitation .= ' <br><b>('.$curriculumLink[8] .' - '. $curriculumLink[9].')</b>';
                                }
                            }
                            
                            //Dados para a grid
                            if ( strlen($exploitation) > 0 )
                            {
                                $dataExp = array();
                                //Grid data
                                $dataExp[0] = NULL;
                                $dataExp[1] = $searchCurriculumLink[0][0];
                                $dataExp[2] = $group->groupId;
                                $dataExp[3] = $learningPeriod->periodId;
                                $dataExp[4] = $searchCurriculumLink[0][3] .' - '. $searchCurriculumLink[0][4] . $exploitation;
                                $dataExp[5] = $curricularComponent->academicNumberHours;
                                $dataExp[6] = $enroll->statusDescription;

                                $return->vinculos[] = $dataExp;
                                $noAction = false;
                            }
                        }
                    }
                }
                
                if ( $noAction )
                {
                    $return->noActions[] = $dataNoAction;
                }
            }
        }
                
        return $return;
    }
        
    /**
     * Insere um contrato para o aluno na nova ocorrência de curso
     * 
     * @param type $data
     * @return type
     * @throws Exception
     */
    public function gerarContratoParaNovaOcorrenciaDeCurso($filters = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $ok = true;
        
        $oldContract = $this->busContract->getContract($filters->contractId);
        
        $filters->courseId = $this->stepData->curriculumCourseId;
        $filters->courseVersion = $this->stepData->curriculumCourseVersion;
        $filters->turnId = $this->stepData->curriculumCourseTurnId;
        $filters->unitId = $this->stepData->curriculumCourseUnitId; 
        $filters->formationDate = $oldContract->formationDate;
        $filters->formationPeriodId = $oldContract->formationPeriodId;
        $filters->conclusionDate = $oldContract->conclusionDate;
        $filters->emendsDate = $oldContract->emendsDate;
        $filters->diplomaDate = $oldContract->diplomaDate;
        $filters->maturityDay = $oldContract->maturityDay;
        $filters->isListener = $oldContract->isListener;
        $filters->isRequestAcademicDegree = $oldContract->isRequestAcademicDegree;
        $filters->globalAverage = $oldContract->globalAverage;
        $filters->obs = 'Contrato gerado a partir do processo de transferência de ocorrência de curso';
        $filters->parcelsNumber = $oldContract->parcelsNumber;
        $filters->enadeStatusId = $oldContract->enadeStatusId;
        $filters->externalConclusionPeriod = $oldContract->externalConclusionPeriod;
        $filters->cityId = $oldContract->cityId;
        $filters->externalConclusionPeriodInstitutionId = $oldContract->externalConclusionInstitutionId;
        $filters->externalConclusionDate = $oldContract->externalConclusionDate;
        $filters->subscriptionId = $oldContract->subscriptionId;
        $filters->classId = $this->stepData->destinationClassId;
        
        $contractId = $this->busContract->insertContract($filters);
        
        if ( !$contractId )
        {
            throw new Exception('Erro ao gerar contrato para o aluno ' . $oldContract->personId . ' - ' .$oldContract->personName . '.');
        }
        
        $filters->beginDate = SAGU::getDateNow();
        $filters->contractId = $contractId;
        $ok = $this->busClassPupil->insertClassPupil($filters);
        if ( !$ok )
        {
            throw new Exception('Erro ao inserir a turma no contrato do aluno ' . $oldContract->personId . ' - ' .$oldContract->personName . '.');
        }
        
        // Insere data de cancelamento na turma antiga, do contrato antigo
        $data = new stdClass();
        $data->contractId = $oldContract->contractId;
        
        $turmas = $this->busClassPupil->searchClassPupil($data);
        
        foreach ( $turmas as $turma )
        {
            if ( !strlen($turma[10]) > 0 )
            {
                $data->endDate = SAGU::getDateNow();
                $data->classId = $turma[0];
                $data->beginDate = $turma[9];
                
                $this->busClassPupil->updateClassPupil($data);
            }
        }
                
        return $this->busContract->getContract($contractId);
    }
    
    /**
     * Insere movimentação contratual para os contratos migrados
     * 
     * @param type $contrato
     * @param type $novoContrato
     * @throws Exception
     */
    public function insereMovimentacaoContratual($contrato, $novoContrato)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        // Insere as movimentações de transferencia nos dois contratos
        $timeStamp = date(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP'));
                        
        if ( (strlen($this->stepData->tipoDeTransferencia) > 0 && strlen($this->stepData->reasonId) > 0) || ($this->tipoDeTransferencia == FrmTransferencia::TRANSFERENCIA_TURMA) )
        {
            $this->stepData->tipoDeTransferencia = strlen($this->tipoDeTransferencia) > 0 ? $this->tipoDeTransferencia : $this->stepData->tipoDeTransferencia; 
                        
            // TRANSFERENCIA DE UNIDADE
            if ( $this->stepData->tipoDeTransferencia == FrmTransferencia::TRANSFERENCIA_UNIDADE )
            {
                $estadoContratual = SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_UNIDADE_PARA');
                $estadoContratualNovo = SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_UNIDADE_DE');
            }
            // TRANSFERENCIA DE TURNO
            else if ( $this->stepData->tipoDeTransferencia == FrmTransferencia::TRANSFERENCIA_TURNO )
            {
                $estadoContratual = SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_TURNO_PARA');
                $estadoContratualNovo = SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_TURNO_DE');
            }
            // TRANSFERÊNCIA DE VERSÃO
            else if ( $this->stepData->tipoDeTransferencia == FrmTransferencia::TRANSFERENCIA_VERSAO )
            {
                $estadoContratual = SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_VERSAO_PARA');
                $estadoContratualNovo = SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_VERSAO_DE');
            }
            // TRANSFERENCIA DE CURSO
            else if ( $this->stepData->tipoDeTransferencia == FrmTransferencia::TRANSFERENCIA_CURSO )
            {
                $estadoContratual = SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO');
                $estadoContratualNovo = SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_INTERNAL_TRANSFER_FROM');
            }
            else if ( $this->stepData->tipoDeTransferencia == FrmTransferencia::TRANSFERENCIA_TURMA )
            {
                $estadoContratual = SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_TURMA_PARA');
                $estadoContratualNovo = SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_TURMA_DE');
            }

            if ( count($novoContrato) > 0 )
            {
                // Insere movimentação no contrato novo
                $dataMovementContractNew = new stdClass();
                $dataMovementContractNew->contractId = $novoContrato->contractId;
                $dataMovementContractNew->stateContractId = $estadoContratualNovo;
                $dataMovementContractNew->stateTime = $timeStamp;
                $dataMovementContractNew->learningPeriodId = $this->newLearningPeriodId;
                $dataMovementContractNew->reasonId = $this->stepData->reasonId;

                if ( !$this->busMovementContract->insertMovementContract($dataMovementContractNew) )
                {
                    throw new Exception(_M('Ocorreu um erro ao inserir movimentação contratual de transferência interna.', $module));
                }
            }

            if ( count($contrato) > 0 )
            {
                $dataMovementContract = new stdClass();
                $dataMovementContract->contractId = $contrato->contractId;
                $dataMovementContract->stateContractId = $estadoContratual;
                $dataMovementContract->reasonId = $this->stepData->reasonId;
                $dataMovementContract->stateTime = $timeStamp;
                $dataMovementContract->learningPeriodId = $this->learningPeriodId;

                $filters = new stdClass();
                $filters->contractId = $contrato->contractId;
                $filters->stateContractId = $estadoContratual;
                $filters->learningPeriodId = $this->learningPeriodId;
                if ( $this->stepData->tipoDeTransferencia == FrmTransferencia::TRANSFERENCIA_TURMA )
                {
                    $filters->stateTime = $timeStamp;
                }
                $movimentacao = $this->busMovementContract->searchMovementContract($filters);
                
                if ( strlen($movimentacao[0][0]) > 0 )
                {
                    $dataMovementContract->_stateTime = $movimentacao[0][5];
                    if ( !$this->busMovementContract->updateMovementContract($dataMovementContract) )
                    {
                        throw new Exception(_M('Ocorreu um erro ao atualizar a movimentação contratual de transferência interna.', $module));
                    }
                }
                else
                {
                    if ( !$this->busMovementContract->insertMovementContract($dataMovementContract) )
                    {
                        throw new Exception(_M('Ocorreu um erro ao inserir movimentação contratual de transferência interna.', $module));
                    }
                }
            }
        }

        // Insere movimentação de matricula, no contrato novo, caso exista disciplina matriculada no período
        $matriculado = $this->busEnroll->verificaMatriculaNoPeriodo($novoContrato->contractId, $this->newLearningPeriodId);
        
        if ( count($novoContrato) > 0 )
        {
            if ( $matriculado == DB_TRUE )
            {
                $dataMovementContract = new stdClass();
                $dataMovementContract->contractId = $novoContrato->contractId;
                $dataMovementContract->stateContractId = SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED');
                $dataMovementContract->stateTime = SAGU::addIntervalInTimestamp($timeStamp, 'mi', '2');
                $dataMovementContract->learningPeriodId = $this->newLearningPeriodId;

                if ( !$this->busMovementContract->insertMovementContract($dataMovementContract) )
                {
                    throw new Exception(_M('Ocorreu um erro ao inserir movimentação contratual de matricula no processo de transferência de ocorrência de curso.', $module));
                }
            }
        }
    }
    
    /**
     * Cancela as disciplinas matriculadas do contrato antigo
     * 
     * @param type $contrato
     */
    public function cancelaDisciplinasPreMatriculadas($contrato, $periodid)
    {
        $disciplinas = $this->obtemDisciplinasPreMatriculadas($contrato, $periodid);

        foreach ( $disciplinas as $disciplina )
        {
            $dados = new stdClass();
            $dados = $this->busEnroll->getEnroll($disciplina[0]);
            $dados->statusId = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED');
            $dados->reasonCancellationId = SAGU::getParameter('ACADEMIC', 'MOTIVO_CANCELAMENTO_MATRICULA_TRANSFERENCIA');        
            
            $this->busEnroll->updateEnroll($dados);
        }
        
        return count($disciplinas);
    }
    
    /**
     * Cancela as disciplinas matriculadas do contrato antigo
     * 
     * @param type $contrato
     */
    public function cancelaDisciplinasMatriculadas($contrato, $periodid)
    {
        $disciplinas = $this->obtemDisciplinasMatriculadas($contrato, $periodid);

        foreach ( $disciplinas as $disciplina )
        {
            $dados = new stdClass();
            $dados = $this->busEnroll->getEnroll($disciplina[0]);
            $dados->statusId = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED');
            $dados->reasonCancellationId = SAGU::getParameter('ACADEMIC', 'MOTIVO_CANCELAMENTO_MATRICULA_TRANSFERENCIA');        
            
            $this->busEnroll->updateEnroll($dados);
        }
        
        return count($disciplinas);
    }
    
    /**
     * Deve buscar os lançamentos do contrato e período letivo 
     * antigos e atualizar para os novos contrato e período letivo.
     * 
     * Exceto títulos cancelados. Ticket #38664
     * 
     * @param type $contrato
     * @param type $novoContrato
     * @return type
     */
    protected function migrarLancamentos($contrato, $novoContrato)
    {
        // Busca pelos titulos deste invoice
        $filters = new stdClass();
        $filters->contractId = $contrato->contractId;
        $filters->learningPeriodId = $this->learningPeriodId;
        $filters->canceledInvoice = DB_FALSE;
        $entries = $this->busEntry->searchEntry($filters);
        
        $return = array();

        if( count($entries) > 0 )
        {
            //Percorre e atualiza o contrato e lançamento do título
            foreach( $entries as $c=>$l )
            {
                $entry = $this->busEntry->getEntry($l[0]);
                $entry->contractId = $novoContrato->contractId;
                $entry->learningPeriodId = $this->newLearningPeriodId;
                $this->busEntry->updateEntry($entry);

                $return[] = $entry;
            }
        }
        
        return $return;
    }
    
    /**
     * Atualiza os incentivos do contrato velho cuja data de vigência 
     * sobreponha o período letivo para o contrato novo.
     * 
     * @param type $contrato
     * @param type $novoContrato
     * @return type
     */
    protected function migrarIncentivos($contrato, $novoContrato)
    {
        $filters = new stdClass();
        $filters->contractId = $contrato->contractId;
        $searchIncentives = $this->busIncentive->searchIncentive($filters);
        
        $newLearningPeriod = $this->busLearningPeriod->getLearningPeriod($this->newLearningPeriodId);
        
        $return = array();
        
        if( count($searchIncentives) > 0 )
        {
            foreach ( $searchIncentives as $cod=>$linha )
            {
                $incentive = $this->busIncentive->getIncentive($linha[0]);
                //Verifica se as datas do novo período letivo e do incentivo antigo se sobrepõe
                if( SAGU::dateOverlaps($incentive->startDate, $incentive->endDate, $newLearningPeriod->beginDate, $newLearningPeriod->endDate) )
                {
                    //Atualiza o incentivo para o novo contrato
                    $incentive->contractId = $novoContrato->contractId;            
                    $this->busIncentive->updateIncentive($incentive);
                    $return[] = $incentive;
                }
            }
        }
        
        return $return;
    }
    
    /**
     * Atualiza os convênios do contrato velho 
     * cuja data de vigência sobreponha o período letivo para o contrato novo.
     * 
     * @param type $contrato
     * @param type $novoContrato
     * @return type
     */
    protected function migrarConvenios($contrato, $novoContrato)
    {
        $filters = new stdClass();
        $filters->contractId = $contrato->contractId;
        $searchConvenantPerson = $this->busConvenantPerson->searchConvenantPerson($filters);
        
        $newLearningPeriod = $this->busLearningPeriod->getLearningPeriod($this->newLearningPeriodId);
        
        $return = array();
        
        if( count($searchConvenantPerson) > 0 )
        {
            // Verifica se foi inserido algum convênio pela trigger finconcedeconvenios() na tabela de movimentação contratual e o excluí, 
            // deixando apenas o convênio que será migrado do contrato antigo            
            $filtersNovoContrato = new stdClass();
            $filtersNovoContrato->contractId = $novoContrato->contractId;
            
            foreach ( $this->busConvenantPerson->searchConvenantPerson($filtersNovoContrato) as $convenio )
            {
                $this->busConvenantPerson->deleteConvenantPerson($convenio[0]);
            }
            
            foreach ($searchConvenantPerson as $cod=>$linha)
            {
                $convenantPerson = $this->busConvenantPerson->getConvenantPerson($linha[0]);                
                //Somente altera o contrato do convenio caso a o período seja vigente
                if( is_null($convenantPerson->endDate) || SAGU::dateOverlaps($convenantPerson->beginDate, $convenantPerson->endDate, $newLearningPeriod->beginDate, $newLearningPeriod->endDate) )
                {
                    $convenantPerson->contractId = $novoContrato->contractId;
                    $this->busConvenantPerson->updateConvenantPerson($convenantPerson);
                    $return[] = $convenantPerson;
                }
            }
        }
        
        return $return;        
    }
    
    /**
     * Realiza a migração do financeiro para o novo contrato
     * 
     * @param type $contrato
     * @param type $novoContrato
     */
    public function migrarFinanceiro($contrato, $novoContrato)
    {
        $this->migrarLancamentos($contrato, $novoContrato);
        
        // Migra os incentivos apenas se a flag "migrar incentivo" estiver habilitada 
        if ( $this->stepData->migrarIncentivo == DB_TRUE )
        {
            $this->migrarIncentivos($contrato, $novoContrato);
        }
        
        // Migra os convênios apenas se a flag "migrar convênios" estiver habilitada 
        if ( $this->stepData->migrarConvenio == DB_TRUE )
        {
            $this->migrarConvenios($contrato, $novoContrato);
        }
        
        $objTitulo = array();
        
        // Verifica se o aluno está/estava matriculado no periodo para reprocessa o financeiro
        $titulosNovos = $this->busInvoice->obterTitulosDaMatricula($novoContrato->contractId,  $this->newLearningPeriodId);
        $titulosAntigos = $this->busInvoice->obterTitulosDaMatricula($contrato->contractId,  $this->learningPeriodId);

        if ( count($titulosNovos) > 0 || count($titulosAntigos) > 0 )
        {
            // Reprocessamento dos títulos        
            $invoices = $this->busReceivableInvoice->generateReceivableInvoicesFromEnrollSummaries($novoContrato->contractId, $this->newLearningPeriodId);

            // Monta objeto dos títulos reprocessados para exibir no último passo - resumo
            foreach ( $invoices as $invoiceId )
            {   
                $invoice = array();
                $invoice = $this->busReceivableInvoice->getInvoice($invoiceId);

                $row = array();

                $row['parcelNumber'] = $invoice->parcelNumber;
                $row['maturityDate'] = $invoice->maturityDate;

                $subRow = array();

                $entries = $this->busEntry->getInvoiceEntries($invoiceId);
                foreach ( $entries as $entry )
                {
                    $subRow[] = array($entry->operationDescription,
                                      $entry->operationTypeId,
                                      $entry->value);
                }

                //FIXME: Verifica parâmetro que habilita regra de negócio específica
                if ( SAGU::getParameter('BASIC', 'ENABLE_BUSINESS_USER') > '0' )
                {
                    $subRow[] = array(_M('Saldo', $module),
                                      '',
                                      $this->busReceivableInvoice->getInvoiceBalance($invoice->invoiceId)); // trocado para o balance
                }
                else
                {
                    $subRow[] = array(_M('Saldo', $module),
                                      '',
                                      $invoice->value); // entry value
                }

                $row['subRow'] = $subRow; //new MTableRaw(null, $subRow, null);
                $row['balance'] = $this->busReceivableInvoice->getInvoiceBalanceWithPolicies($invoiceId);

                $status = $this->finStatusDoTitulo->obtemStatusDoTituloLog($invoiceId);
                $row['status'] = $status[0][0];

                $objTitulo[] = $row;
            }
        }
                
        return $objTitulo;
    }
    
    /**
     * 
     * @param type $contrato
     * @param type $novoContrato
     */
    public function registrarLogsDeTransferencia($contrato, $novoContrato)
    {
        $filters = new stdClass();
        $filters->contratoDeOrigemId = $contrato->contractId;
        $filters->contratoDeDestinoId = $novoContrato->contractId;
        $filters->turmaDeOrigemId = $this->stepData->pupilClassId;
        $filters->periodoId = $this->stepData->periodId;
        $filters->turmaDeDestinoId = $this->stepData->destinationClassId;
        $filters->motivoId = $this->stepData->reasonId;
        $filters->aproveitouDisciplinasEncerradas = $this->stepData->disciplinasEncerradas;
        $filters->aproveitouDisciplinasMatriculadas = $this->stepData->disciplinasMatriculadas;
        $filters->aproveitouNotasDeMatriculas = $this->stepData->notesAvaliations;
        $filters->aproveitouFrequenciasDeMatriculas = $this->stepData->frequency;
        $filters->aproveitouComunsEntreCursos = $this->stepData->disciplinasComuns;
        $filters->aproveitouVinculosEntreCursos = $this->stepData->disciplinasVinculadas;
         
        if ( $this->stepData->configMatriculadas == AcdTransferencia::CONFIG_MATRICULDAS_DESTINO || !(strlen($this->stepData->configMatriculadas) > 0 ) )
        {
            $filters->aproveitouMatriculadasDoDestino = DB_TRUE;
            $filters->aproveitouMatriculadasDoOriginal = DB_FALSE;
        }
        elseif ( $this->stepData->configMatriculadas == AcdTransferencia::CONFIG_MATRICULDAS_ORIGINAL )
        {
            $filters->aproveitouMatriculadasDoDestino = DB_FALSE;
            $filters->aproveitouMatriculadasDoOriginal = DB_TRUE;
        }
        
        $log = null;
        $log = implode(' | ', $this->logsProcesso[$contrato->contractId]);
        $filters->logsProcessoDeTransferencia = $log;
        
        $ok = $this->acdTransferencia->insert($filters);
        
        return $ok;
    }
    
    public function verificaInadinplencia($contrato)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $matricula = new Matricula($contrato->contractId, Matricula::MATRICULA_NORMAL);
        $enrollConfig = $matricula->obterConfiguracoes();
        
        $debt = $this->busGeneralQueries->getDefaulterDebt($contrato->contractId, ($enrollConfig->checkDebits == DB_TRUE));
        
        if ( $debt > 0 )
        {
            return DB_TRUE;
        }
        
        return DB_FALSE;
    }
    
    public function migrarCamposCustomizadosDoContrato($contractId, $newContractId)
    {
        $basCustomField = new BasCustomField();
        
        $data = new stdClass();
        $data->customized_id = $contractId;
        $data->novoCustomized_id = $newContractId;
        $data->identifier = 'FrmContract';
        
        return $basCustomField->registraCustomValues($data);
    }
    
    public function getBusCourseOccurrence()
    {
        return $this->busCourseOccurrence;
    }

    public function setBusCourseOccurrence($busCourseOccurrence)
    {
        $this->busCourseOccurrence = $busCourseOccurrence;
    }

    public function getBusContract()
    {
        return $this->busContract;
    }

    public function setBusContract($busContract)
    {
        $this->busContract = $busContract;
    }

    public function getBusCurriculum()
    {
        return $this->busCurriculum;
    }

    public function setBusCurriculum($busCurriculum)
    {
        $this->busCurriculum = $busCurriculum;
    }

    public function getBusClassPupil()
    {
        return $this->busClassPupil;
    }

    public function setBusClassPupil($busClassPupil)
    {
        $this->busClassPupil = $busClassPupil;
    }

    public function getBusDegree()
    {
        return $this->busDegree;
    }

    public function setBusDegree($busDegree)
    {
        $this->busDegree = $busDegree;
    }

    public function getBusDegreeEnroll()
    {
        return $this->busDegreeEnroll;
    }

    public function setBusDegreeEnroll($busDegreeEnroll)
    {
        $this->busDegreeEnroll = $busDegreeEnroll;
    }

    public function getBusEntry()
    {
        return $this->busEntry;
    }

    public function setBusEntry($busEntry)
    {
        $this->busEntry = $busEntry;
    }

    public function getBusEnroll()
    {
        return $this->busEnroll;
    }

    public function setBusEnroll($busEnroll)
    {
        $this->busEnroll = $busEnroll;
    }

    public function getBusEnrollStatus()
    {
        return $this->busEnrollStatus;
    }

    public function setBusEnrollStatus($busEnrollStatus)
    {
        $this->busEnrollStatus = $busEnrollStatus;
    }

    public function getBusFrequenceEnroll()
    {
        return $this->busFrequenceEnroll;
    }

    public function setBusFrequenceEnroll($busFrequenceEnroll)
    {
        $this->busFrequenceEnroll = $busFrequenceEnroll;
    }

    public function getBusGroup()
    {
        return $this->busGroup;
    }

    public function setBusGroup($busGroup)
    {
        $this->busGroup = $busGroup;
    }

    public function getBusClass()
    {
        return $this->busClass;
    }

    public function setBusClass($busClass)
    {
        $this->busClass = $busClass;
    }

    public function getBusInvoice()
    {
        return $this->busInvoice;
    }

    public function setBusInvoice($busInvoice)
    {
        $this->busInvoice = $busInvoice;
    }

    public function getBusLearningPeriod()
    {
        return $this->busLearningPeriod;
    }

    public function setBusLearningPeriod($busLearningPeriod)
    {
        $this->busLearningPeriod = $busLearningPeriod;
    }

    public function getBusMovementContract()
    {
        return $this->busMovementContract;
    }

    public function setBusMovementContract($busMovementContract)
    {
        $this->busMovementContract = $busMovementContract;
    }

    public function getBusMovementContractComplement()
    {
        return $this->busMovementContractComplement;
    }

    public function setBusMovementContractComplement($busMovementContractComplement)
    {
        $this->busMovementContractComplement = $busMovementContractComplement;
    }

    public function getBusReceivableInvoicePupil()
    {
        return $this->busReceivableInvoicePupil;
    }

    public function setBusReceivableInvoicePupil($busReceivableInvoicePupil)
    {
        $this->busReceivableInvoicePupil = $busReceivableInvoicePupil;
    }

    public function getBusSchedule()
    {
        return $this->busSchedule;
    }

    public function setBusSchedule($busSchedule)
    {
        $this->busSchedule = $busSchedule;
    }

    public function setStepDataTest($stepData)
    {
        $this->stepData = $stepData;
    }

    public function getBusCurriculumLink()
    {
        return $this->busCurriculumLink;
    }

    public function setBusCurriculumLink($busCurriculumLink)
    {
        $this->busCurriculumLink = $busCurriculumLink;
    }

    public function getBusContractLock()
    {
        return $this->busContractLock;
    }

    public function setBusContractLock($busContractLock)
    {
        $this->busContractLock = $busContractLock;
    }

    public function getBusExploitation()
    {
        return $this->busExploitation;
    }

    public function setBusExploitation($busExploitation)
    {
        $this->busExploitation = $busExploitation;
    }

    public function getBusCurricularComponent()
    {
        return $this->busCurricularComponent;
    }

    public function setBusCurricularComponent($busCurricularComponent)
    {
        $this->busCurricularComponent = $busCurricularComponent;
    }

    public function getBusInternalExploitation()
    {
        return $this->busInternalExploitation;
    }

    public function setBusInternalExploitation($busInternalExploitation)
    {
        $this->busInternalExploitation = $busInternalExploitation;
    }

    public function getBusReason()
    {
        return $this->busReason;
    }

    public function setBusReason($busReason)
    {
        $this->busReason = $busReason;
    }

    public function getBusIncentive()
    {
        return $this->busIncentive;
    }

    public function setBusIncentive($busIncentive)
    {
        $this->busIncentive = $busIncentive;
    }

    public function getBusConvenantPerson()
    {
        return $this->busConvenantPerson;
    }

    public function setBusConvenantPerson($busConvenantPerson)
    {
        $this->busConvenantPerson = $busConvenantPerson;
    }

    public function getBusReceivableInvoice()
    {
        return $this->busReceivableInvoice;
    }

    public function setBusReceivableInvoice($busReceivableInvoice)
    {
        $this->busReceivableInvoice = $busReceivableInvoice;
    }

    public function getAcdTransferencia()
    {
        return $this->acdTransferencia;
    }

    public function setAcdTransferencia($acdTransferencia)
    {
        $this->acdTransferencia = $acdTransferencia;
    }

    public function getFinStatusDoTitulo()
    {
        return $this->finStatusDoTitulo;
    }

    public function setFinStatusDoTitulo($finStatusDoTitulo)
    {
        $this->finStatusDoTitulo = $finStatusDoTitulo;
    }

    public function getBusGeneralQueries()
    {
        return $this->busGeneralQueries;
    }

    public function setBusGeneralQueries($busGeneralQueries)
    {
        $this->busGeneralQueries = $busGeneralQueries;
    }

    public function getNewLearningPeriodId()
    {
        return $this->newLearningPeriodId;
    }

    public function setNewLearningPeriodId($newLearningPeriodId)
    {
        $this->newLearningPeriodId = $newLearningPeriodId;
    }

    public function getLearningPeriodId()
    {
        return $this->learningPeriodId;
    }

    public function setLearningPeriodId($learningPeriodId)
    {
        $this->learningPeriodId = $learningPeriodId;
    }

    public function getTransferData()
    {
        return $this->transferData;
    }

    public function setTransferData($transferData)
    {
        $this->transferData = $transferData;
    }

    public function getTransferDataEncerradas()
    {
        return $this->transferDataEncerradas;
    }

    public function setTransferDataEncerradas($transferDataEncerradas)
    {
        $this->transferDataEncerradas = $transferDataEncerradas;
    }

    public function getTransferDataMatriculadas()
    {
        return $this->transferDataMatriculadas;
    }

    public function setTransferDataMatriculadas($transferDataMatriculadas)
    {
        $this->transferDataMatriculadas = $transferDataMatriculadas;
    }

    public function getLogsProcesso()
    {
        return $this->logsProcesso;
    }

    public function setLogsProcesso($logsProcesso)
    {
        $this->logsProcesso = $logsProcesso;
    }

    public function getObjTitulo()
    {
        return $this->objTitulo;
    }

    public function setObjTitulo($objTitulo)
    {
        $this->objTitulo = $objTitulo;
    }

    public function getVerificaInadinplencia()
    {
        return $this->verificaInadinplencia;
    }

    public function setVerificaInadinplencia($verificaInadinplencia)
    {
        $this->verificaInadinplencia = $verificaInadinplencia;
    }

    public function getObjetoNotas()
    {
        return $this->objetoNotas;
    }

    public function setObjetoNotas($objetoNotas)
    {
        $this->objetoNotas = $objetoNotas;
    }
    
    /**
     * Obtém o tipo de movimentação contratual para carregar os motivos a partir dela
     * 
     * @param type $data
     * @return type
     */
    public function obtemTipoDeMovimentacaoContratual($data)
    {
        $MIOLO = MIOLO::getInstance();
                        
        // TRANSFERÊNCIA DE UNIDADE
        if ( ($data->unitId != $data->curriculumCourseUnitId) && ($data->courseId == $data->curriculumCourseId && $data->courseVersion == $data->curriculumCourseVersion && $data->turnId == $data->curriculumTurnId))
        {
            $this->tipoDeTransferencia = FrmTransferencia::TRANSFERENCIA_UNIDADE;
            return SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_UNIDADE_PARA');
        }
        // TRANSFERENCIA DE TURNO
        else if ( (($data->turnId != $data->curriculumCourseTurnId) || ($data->turnId != $data->curriculumCourseTurnId && $data->unitId != $data->curriculumCourseUnitId)) && ($data->courseId == $data->curriculumCourseId && $data->courseVersion == $data->curriculumCourseVersion))
        {
            $this->tipoDeTransferencia = FrmTransferencia::TRANSFERENCIA_TURNO;
            return SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_TURNO_PARA');
        }
        // TRANSFERENCIA DE VERSÃO
        else if ( (($data->courseVersion != $data->curriculumCourseVersion) || ($data->courseVersion != $data->curriculumCourseVersion && $data->turnId != $data->curriculumCourseTurnId && $data->unitId != $data->curriculumCourseUnitId)) && ($data->courseId == $data->curriculumCourseId))
        {
            $this->tipoDeTransferencia = FrmTransferencia::TRANSFERENCIA_VERSAO;
            return SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_VERSAO_PARA');
        }
        // TRANSFERENCIA DE CURSO
        else if ( $data->courseId != $data->curriculumCourseId )
        {
            $this->tipoDeTransferencia = FrmTransferencia::TRANSFERENCIA_CURSO;
            return SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO'); 
        }
        else
        {
            // TRANSFERENCIA DE TURMA
            $this->tipoDeTransferencia = FrmTransferencia::TRANSFERENCIA_TURMA;
            return SAGU::getParameter('ACADEMIC', 'ESTADO_CONTRATUAL_TRANSFERENCIA_DE_TURMA_PARA');
        }
        
    }
    
}
?>