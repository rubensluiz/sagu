<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gera vínculos em lote
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 03/03/2011
 *
 */
class FrmGenerateMultipleLink extends SSearchForm
{
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct( _M('Gerar diversos vínculos', $module), null, null, null );
    }


    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        //Field period
        $busPeriod = new BusinessAcademicBusPeriod();
        $fields[] = $periodId = new MComboBox('periodIdS', strlen($this->getFormValue('periodIdS', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $busPeriod->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));

        //Field course
        $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseId = new MLookupTextField('courseIdS', $this->getFormValue('courseIdS', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseIdS, courseVersionS, courseNameS', $module, 'CourseOccurrence', null, array('courseId' => 'courseIdS'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Informe o código do curso', $module));
        $courseVersionS = new MTextField('courseVersionS', $this->getFormValue('courseVersionS', $data->courseVersion), _M('Versão do curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersionS->setJsHint(_M('Informe a versão do curso', $module));
        $courseVersionS->setReadOnly(true);
        $courseNameS = new MTextField('courseNameS', $this->getFormValue('courseNameS', $data->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseNameS->setReadOnly(true);
        $courseNameS->setJsHint(_M('Nome do curso', $module));
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersionS, $courseNameS));
        $hctCourse->setShowLabel(false);
        $fields[] = $hctCourse;

        //Field learning period
        $learningPeriodIdLabel = new MText('learningPeriodIdLabel', _M('Período letivo',$module).':');
        $learningPeriodIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodId = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS', $data->learningPeriodId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,courseId,courseVersionS,limbo,limbo,learningPeriodDescription,limbo,limbo,limbo,limbo,limbo,limbo,limbo,limbo,limbo,courseNameS', $module, 'LearningPeriod', null, array('periodId' => 'periodIdS', 'courseId' => 'courseIdS'), true);
        $learningPeriodId->setJsHint(_M('Informe o período letivo',$module));
        $learningPeriodIdDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodIdDescription', $data->learningPeriodIdDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodIdDescription->setJsHint(_M('Descrição do período letivo',$module));
        $learningPeriodIdDescription->setReadOnly(true);
        $fields[] = $learningPeriodIdCnt = new MHContainer('learningPeriodIdCnt', array($learningPeriodIdLabel, $learningPeriodId, $learningPeriodIdDescription));
        $learningPeriodIdCnt->setShowLabel(true);

        //Field link
        $busLink = new BusinessBasicBusLink();
        $fields[] = $linkId = new MComboBox('linkIdS', $this->getFormValue('linkIdS', $data->linkId), _M('Grupo de vínculo', $module), $busLink->listLink());
        $linkId->setJsHint(_M('Selecione um grupo de vínculo', $module));
        
        //Mostrar somente alunos com contratos ativos
        $fields[] = new MCheckBox('onlyActivePupilsS', 't', _M('Mostrar somente alunos com contratos ativos', $module));

        parent::defineFields($fields, $module, 'GrdGenerateMultipleLink');

        if ( strpos(SAGU::getEventName(), ':click') )
        {
            //Data de validate
            $dateValidate = new MCalendarField('dateValidateS', $this->getFormValue('dateValidateS', $data->dateValidateS), _M('Data de validade', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $dateValidate->setJsHint( _M('Informe a nova data de validade em que os vínculos devem ser definidos', $module) );
            $dateValidate->validator->type = 'required';
            $this->addField($dateValidate);                        
            
            $this->AddField( new MButton('btnGenerate', _M('Atualizar vínculos')) );
        }
    }

    public function btnGenerate_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $data = $this->getData();

        $busPersonLink = new BusinessBasicBusPersonLink();

        try
        {
            $selecteds = $this->grid->selecteds;

            if ( count($selecteds) <= 0 )
            {
                throw new Exception( _M('Nenhuma pessoa foi selecionada.', $module) );
            }

            $oks = array();
            foreach ( (array) $this->grid->getData() as $key => $val )
            {
                if  ( in_array($key, $selecteds) )
                {
                    $linkData = new stdClass();
                    $linkData->dateValidate = $data->dateValidateS;

                    list(
                            $linkData->personId,
                            $personName,
                            $linkData->linkId ) = $val;

                    $oks[] = $busPersonLink->updatePersonLink($linkData);
                }
            }

            $goto = $MIOLO->getActionURL($module, $action);
            SAGU::information( SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $goto );
        }
        catch (Exception $e)
        {
            $this->AddError( $e->getMessage() );
        }
    }

    public function  getTypesData()
    {
        $data = new stdClass();
        $data->periodId = MIOLO::_REQUEST('periodIdS');
        $data->courseId = MIOLO::_REQUEST('courseIdS');
        $data->learningPeriodId = MIOLO::_REQUEST('learningPeriodIdS');
        $data->linkId = MIOLO::_REQUEST('linkIdS');
        $data->dateValidate = MIOLO::_REQUEST('dateValidateS');
        $data->onlyActivePupils = MIOLO::_REQUEST('onlyActivePupilsS');

        return $data;
    }

    public function  searchObject($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $busPersonLink = new BusinessBasicBusPersonLink();

        return $busPersonLink->searchPersonLink($filters);
    }
}
?>