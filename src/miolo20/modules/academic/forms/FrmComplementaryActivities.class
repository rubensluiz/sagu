<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
     * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Complementary Activities form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 05/12/2005
 *
 **/

/**
 * Form to manipulate a course occurrence
 **/
class FrmComplementaryActivities extends SManagementForm
{
    public function __construct()
    {
        parent::__construct(new acdComplementaryActivities(), array('complementaryActivitiesId'), 'BusComplementaryActivities');
    }


    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $complementaryActivitiesId = MIOLO::_request('complementaryActivitiesId');
            
            $business = new BusinessAcademicBusComplementaryActivities();
            $data     = $business->getComplementaryActivities($complementaryActivitiesId);
            
            $fields[]  = new MHiddenField('complementaryActivitiesId', $complementaryActivitiesId);
            $fields[]  = new MTextLabel('complementaryActivitiesId', $data->complementaryActivitiesId, _M('Código', $module));
            
            $fields[]  = new MHiddenField('enrollId', $data->enrollId);
            $fields[]  = new MTextLabel('enrollId', $data->enrollId, _M('Código da matrícula', $module));
                        
            $data->complementaryActivitiesDescription = $data->description;

            $busEnroll  = new BusinessAcademicBusEnroll();
            $enrollData = $busEnroll->getEnroll($data->enrollId, true);

            $data->contractId = $enrollData->contractId;
            $data->curriculumId    = $enrollData->curriculumId;
            
        }

        if ( $function == SForm::FUNCTION_INSERT )
        {

            $fields[] = new SHiddenField('contratosEncerradosS', DB_TRUE);
            
            //Fields person
            $personLabel = new MText('personLabel', _M('Pessoa',$module) . ':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'PersonContract', null, array('contratosEncerradosS' => 'contratosEncerradosS'), !$this->page->isPostBack());
            $personId->setJsHint(_M('Informe o código da pessoa',$module));
            $validators[] = new MIntegerValidator('personId', '', 'optional');
            $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Nome da pessoa',$module));
            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            //Fields contract
            $contractLabel = new MText('contractLabel', _M('Contrato',$module) . ':');
            $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractLabel->setClass('m-caption m-caption-required');
            $limbo = new MHiddenField('limbo', '');
            $fields[] = $limbo;
            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personId', 'personName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'Contract', null, array('personId' => 'personId'), true);
            $contractId->setJsHint(_M('Informe o código do contrato', $module));
            $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');
            $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseId->setReadOnly(true);
            $contractCourseId->setJsHint(_M('Código do curso', $module));
            $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseVersion->setReadOnly(true);
            $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
            $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractCourseName->setReadOnly(true);
            $contractCourseName->setJsHint(_M('Nome do curso', $module));
            $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
            $hctContract->setShowLabel(true);
            $fields[]    = $hctContract;
            unset($flds);

            $contractTurnId = new MHiddenField('contractTurnId', $this->getFormValue('contractTurnId', $data->contractTurnId));
            $fields[] = $contractTurnId;

            $contractUnitId = new MHiddenField('contractUnitId', $this->getFormValue('contractUnitId', $data->contractUnitId));
            $fields[] = $contractUnitId;

            $groupLabel = new MText('groupLabel', _M('Disciplina do currículo',$module) . ':');
            $groupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $groupLabel->setClass('m-caption m-caption-required');

            $curriculumTypeId = new MHiddenField('curriculumTypeId', 1);
            $fields[] = $curriculumTypeId;

            //Este Lookup faz um filtro e só mostra atividades complementares que sejam deste curriculo
            $curriculumId = new MLookupTextField('curriculumId', $this->getFormValue('curriculumId', $data->curriculumId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('curricularComponentId, curricularComponentName'), $module, 'CurriculumSimple', null, array('curriculumTypeId' => 'curriculumTypeId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion'), true);
            $curriculumId->setJsHint(_M('Informe o código da atividade complementar', $module));
            $groupName = new MTextField('curricularComponentName', strlen($this->getFormValue('curricularComponentName', $data->groupName)) > 0 ? $this->getFormValue('curricularComponentName', $data->groupName) : $getGroup->groupName , '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $groupName->setJsHint(_M('Disciplina do currículo',$module));
            $groupName->setReadOnly(true);

            $hctGroup = new MHContainer('hctGroup', array($groupLabel, $curriculumId, $groupName));

            $hctGroup->setShowLabel(true);
            $fields[]  = $hctGroup;

            $btn1 = new MButton('btnAddComplemetary', _M('Adicionar atividade', $module));
            $fields[] = $btn1;

            if ( $_REQUEST['contractId'] )
            {


                $this->page->onLoad("
                    document.getElementById('contractId').value = '{$_REQUEST['contractId']}';
                ");
            }
        }
        else
        {   
            $dadosContract = new BusinessAcademicBusContract();
            $contractInfo = $dadosContract->getContract($data->contractId, true);
            
            $personLabel = new MText('personLabel', _M('Pessoa',$module) . ':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $personId   = new MTextField('personId', $this->getFormValue('personId', $contractInfo->personId), NULL, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $personId->setReadOnly(true);

            $personName = new MTextField('personName', $this->getFormValue('personName', $contractInfo->personName), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $personName->setReadOnly(true);
            $personName->setJsHint(_M('Nome da pessoa', $module));

            $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
            $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $limbo = new MHiddenField('limbo', '');
            $fields[] = $limbo;
            $contractId = new MTextField('contractId', $this->getFormValue('contractId',$contractInfo->contractId),NULL, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractId->setReadOnly(true);
            $contractId->setJsHint(_M('Código do contrato', $module));
            $contractCourseId = new MTextField('courseId', $this->getFormValue('courseId',$contractInfo->courseId),NULL, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseId->setReadOnly(true);
            $contractCourseId->setJsHint(_M('Curso',$module));
            $contractCourseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$contractInfo->courseVersion), NULL, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractCourseVersion->setReadOnly(true);
            $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
            $contractCourseName = new MTextField('courseName', $this->getFormValue('courseName',$contractInfo->courseName), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractCourseName->setReadOnly(true);
            $contractCourseName->setJsHint(_M('Nome do curso', $module));
            $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
            $hctContract->setShowLabel(true);
            $fields[]    = $hctContract;
            unset($flds);

            $contractTurnId = new MHiddenField('contractTurnId', '');
            $fields[]    = $contractTurnId;

            $contractUnitId = new MHiddenField('contractUnitId', '');
            $fields[]    = $contractUnitId;
            
            $groupLabel = new MText('groupLabel', _M('Disciplina do currículo',$module) . ':');
            $groupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $groupLabel->setClass('m-caption m-caption-required');

            $curriculumId = new MTextField('curriculumId', $this->getFormValue('curriculumId', $data->curriculumId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $curriculumId->setReadOnly(true);
            $curriculumId->setJsHint(_M('Código da disciplina', $module));

            if ( strlen($curriculumId->value) > 0 )
            {
                $curriculum = new BusinessAcademicBusCurriculum();

                $curriculumInfo = $curriculum->getCurriculum($data->curriculumId, true);

                $businessCurricularComponent     = new BusinessAcademicBusCurricularComponent();

                $curricularComponentData         = $businessCurricularComponent->getCurricularComponent($curriculumInfo->curricularComponentId, $curriculumInfo->curricularComponentVersion);

                $numberCreditsPerHour = SAGU::calcNumber($curricularComponentData->academicCredits . '* 1.00' .  '/' . $curricularComponentData->academicNumberHours); // Use in javaScript

            }
            
            $groupName = new MTextField('groupName', _M($this->getFormValue('groupName', $curriculumInfo->curricularComponentName),$module), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);            
            $groupName->setJsHint(_M('Disciplina do curriculo',$module));
            $groupName->setReadOnly(true);            

            $hctGroup = new MHContainer('hctGroup', array($groupLabel, $curriculumId, $groupName));
            $hctGroup->setShowLabel(true);
            $fields[]  = $hctGroup;

            $fields[] = new MSeparator('<hr>');

            $complementaryActivitiesDescription = new MTextField('complementaryActivitiesDescription', $this->getFormValue('complementaryActivitiesDescription', $data->complementaryActivitiesDescription), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $fields[] = $complementaryActivitiesDescription;
            $validators[] = new MRequiredValidator('complementaryActivitiesDescription');

            $businessPeriod = new BusinessAcademicBusPeriod();
            $periodId       = new MSelection('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true, '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE') );
            $validators[]   = new MRequiredValidator('periodId');
            $fields[]       = $periodId;

            $totalHours = new MTextField('totalHours', $this->getFormValue('totalHours', $data->totalHours), _M('Total de horas', $module), SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'));
            $fields[] = $totalHours;
            $validators[] = new MFloatValidator('totalHours', '', SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');

            $totalHours->addAttribute('onChange', 'calcCredits(' . $numberCreditsPerHour . ')');

            $this->page->addJSCode("
        function calcCredits(numberCreditsPerHour)
        {
            var total;

            totalHours    = document.getElementsByName('totalHours')[0];
            totalCredits1 = document.getElementsByName('totalCredits')[0];

            total = totalHours.value * numberCreditsPerHour;

            totalCredits1.value = total;
        }
        ");


            $totalCredits = new MTextField('totalCredits', $this->getFormValue('totalCredits', $data->totalCredits), _M('Total de créditos', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $fields[] = $totalCredits;
            $validators[] = new MRequiredValidator('totalCredits', _M('Total de créditos', $module), 'required');

            $degree = new MTextField('degree', $this->getFormValue('degree', $data->degree), _M('Nota', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $fields[] = $degree;
            $validators[] = new MFloatValidator('degree', '', SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE'), 'optional');

            $concept = new MTextField('concept', $this->getFormValue('concept', $data->concept), _M('Conceito', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $fields[] = $concept;

            $businessCC = new BusinessAcademicBusComplementaryActivitiesCategory();
            $dataCC = $businessCC->listComplementaryActivitiesCategory();
            $complementaryActivitiesCategoryId = new MComboBox('complementaryActivitiesCategoryId', $this->getFormValue('complementaryActivitiesCategoryId', $data->complementaryActivitiesCategoryId ? $data->complementaryActivitiesCategoryId : ''), _M('Categoria da atividade',$module), $dataCC, '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE') );
            $fields[] = $complementaryActivitiesCategoryId;
            $validators[] = new MRequiredValidator('complementaryActivitiesCategoryId');

            $fields[] = new MSeparator('<hr>');
        }

        parent::defineFields($fields, $validators, $data);
    }

    
    public function getTypesData()
    {
        
        $data = parent::getTypesData();        
        
        $data->description = $this->complementaryActivitiesDescription->value;
        $data->contractId  = $this->contractId->value;
        $data->curriculumId = $this->curriculumId->value;        
        
        return $data;
    }

    
    public function btnAddComplemetary_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $personId              = MIOLO::_request('personId');
        $personName            = MIOLO::_request('personName');
        $contractId            = MIOLO::_request('contractId');
        $contractCourseId      = MIOLO::_request('contractCourseId');
        $contractCourseVersion = MIOLO::_request('contractCourseVersion');
        $contractCourseName    = MIOLO::_request('contractCourseName');
        $contractTurnId        = MIOLO::_request('contractTurnId');
        $contractUnitId        = MIOLO::_request('contractUnitId');
        $curriculumId          = MIOLO::_request('curriculumId');
        $groupName             = MIOLO::_request('groupName');

        $opts = array('personId'              => $personId,
                      'personName'            => $personName,
                      'contractId'            => $contractId,
                      'contractCourseId'      => $contractCourseId,
                      'contractCourseVersion' => $contractCourseVersion,
                      'contractCourseName'    => $contractCourseName,
                      'contractTurnId'        => $contractTurnId,
                      'contractUnitId'        => $contractUnitId,
                      'curriculumId'          => $curriculumId,
                      'groupName'             => $groupName,
                      'function'              => $function);

        $businessContract   = new BusinessAcademicBusContract();
        $contractData       = $businessContract->getContract($contractId);

        $curriculum = new BusinessAcademicBusCurriculum();
        $curriculumInfo = $curriculum->getCurriculum($curriculumId);

        $businessCurriculum = new BusinessAcademicBusCurriculum();
        $curriculumData     = $businessCurriculum->isFromCurriculum($contractData->courseId, $contractData->courseVersion, $contractData->turnId, $contractData->unitId, $curriculumInfo->curricularComponentId, $curriculumInfo->curricularComponentVersion);

        if ( !$curriculumData )
        {
            $this->addError(_M('Esta atividade complementar não é deste currículo', $module). ' ' . $infoMsg . '. ');
        }
        else
        {
            $this->page->redirect($MIOLO->getActionURL($module, 'main:register:complementaryActivities:complementaryActivitiesRegister', null, $opts));
        }
    }
    
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $function = $MIOLO->_REQUEST('function');
        
        $busComplementaryActivities = new BusinessAcademicBusComplementaryActivities();
        
        $data = $this->getTypesData();

        $filters = new stdClass();
        $filters->contractId = $data->contractId;
        $filters->groupId = $data->groupId;

        $dataComplementaryActivities = $busComplementaryActivities->searchComplementaryActivities($filters);

        $totalHoursConclued = 0;
        
        foreach ( $dataComplementaryActivities as $row )
        {
            if ( $function == 'update' && $row[0] == $data->complementaryActivitiesId )
            {
                $totalHoursConclued += $data->totalHours;
            }
            else
            {
                $totalHoursConclued += $row[3];
            }
        }
        
        if ( $totalHoursConclued > $this->getAcademicNumberHours() )
        {
            $msg = _M('Esta atividade complementar não pode ser inserida, pois o máximo de atividades complementares será excedido', $module) . '.';
            $this->AddError($msg);
        }
        else
        {
            // Aplicar validação para bloquear caso ultrapasse a total de horas da disciplina
            parent::tbBtnSave_click($sender);
        }
    }
    
    public function getAcademicNumberHours()
    {
        $busComplementaryActivities = new BusinessAcademicBusComplementaryActivities();
        $busEnroll = new BusinessAcademicBusEnroll();
        $busCurricularComponent = new BusinessAcademicBusCurricularComponent();
        $curriculum = new BusinessAcademicBusCurriculum();
        $busGroup = new BusinessAcademicBusGroup();
        
        $data = $this->getTypesData();
        
        $complementaryActivitiesId = MIOLO::_REQUEST('complementaryActivitiesId');
        
        if ( strlen($complementaryActivitiesId) > 0 )
        {
            $ca = $busComplementaryActivities->getComplementaryActivities($complementaryActivitiesId);
            
            if ( $ca )
            {
                $enroll = $busEnroll->getEnroll($ca->enrollId);

                if ( $enroll )
                {
                    $curriculumInfo = $curriculum->getCurriculum($data->curriculumId, true);
                    if ( $curriculumInfo )    
                    {                        
                        $curricularComponentData = $busCurricularComponent->getCurricularComponent($curriculumInfo->curriculumCurricularComponentId, $curriculumInfo->curriculumCurricularComponentVersion);                        
                    }
                }
            }
        }

        return SAGU::NVL($curricularComponentData->academicNumberHours, '0');
    }
}
?>
