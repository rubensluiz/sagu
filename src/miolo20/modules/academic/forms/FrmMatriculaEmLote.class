<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gera matrículas em lote
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 09/09/2013
 *
 **/
set_time_limit(0);

class FrmMatriculaEmLote extends SForm
{
    /**
     * @var SGrid
     */
    private $grid;
    
    /**
     * @var Tipo de regime da disciplina
     */
    private $seriadoRigido = true;
    
    /**
     * $var Grid data
     */
    private $gridData;

    
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/ui/controls/msubdetail.class');
        
        parent::__construct(_M('Matrícula em lote'));

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $texto = "Disponibiliza apenas períodos letivos abertos.";
        $fields[] = $this->genericFields()->labelDica($texto);
        
        $texto = "Lista apenas alunos que não realizaram matrícula para o período letivo selecionado.";
        $fields[] = $this->genericFields()->labelDica($texto);
        
        $texto = "Lista apenas disciplinas oferecidas com vagas disponíveis.";
        $fields[] = $this->genericFields()->labelDica($texto);
        
        $texto = "A matrícula em lote não garante o conflito de horários das matrículas efetuadas.";
        $fields[] = $this->genericFields()->labelDica($texto);
        
        $fields[] = new MSeparator();
        
        $fields[] = new SHiddenField('isClosed', DB_TRUE);
        
        $fields[] = $learningPeriod = new SLookupContainer('learningPeriodId', $this->getRequestValue('learningPeriodId'), array(
                'required' => true,
                'label' => _M('Período letivo', $module),
                'module' => 'academic',
                'item' => 'LearningPeriod',
                'related' => 'limbo, courseId, courseVersion, turnId, unitId, learningPeriodIdDescription, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseName, turnDescription, unitDescription',
                'filter' => array('learningPeriodId' => 'learningPeriodId', 'isClosed' => 'isClosed'),
            ));
        
        // Curso
        $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseLabel->setClass('m-caption m-caption-required');
        $course = new MTextField('courseId', $this->getFormValue('courseId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);
        $courseName = new MTextField('courseName', $this->getFormValue('courseName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $course, $courseVersion, $courseName));
        $hctCourse->setShowLabel(false);
        $fields[] = $hctCourse;
                
        // Turno
        $turnLabel = new MText('turnLabel', _M('Turno', $module) . ':');
        $turnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $turnLabel->setClass('m-caption m-caption-required');
        $turn = new MTextField('turnId', $this->getFormValue('turnId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);
        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);
        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turn, $turnDescription));
        $hctTurn->setShowLabel(false);
        $fields[] = $hctTurn;
        
        // Unidade
        $unitLabel = new MText('unitLabel', _M('Unidade', $module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitLabel->setClass('m-caption m-caption-required');
        $unit = new MTextField('unitId', $this->getFormValue('unitId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);
        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), null, null, true);
        $hctunit = new MHContainer('hctunit', array($unitLabel, $unit, $unitDescription));
        $hctunit->setShowLabel(false);
        $fields[] = $hctunit;
        
        $busCourseVersion = new BusinessAcademicBusCourseVersion();
        $semesters = $busCourseVersion->getCourseVersionTotalSemester($this->getFormValue('courseId'), $this->getFormValue('courseVersion'));
        for ( $i = 1; $i <= $semesters; $i++ )
        {
            $semestres[$i] = $i;
        }
          
        // Carregar semestres da ocorrência de curso
        $buttonLabel = new MText('buttonLabel', '');
        $buttonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $buttonLabel->setClass('m-caption m-caption');
        $carregarSemetre = new MButton('carregarSemestre', _M('Carregar semestres'));
        $hctCarregarSemestre = new MHContainer('hctCarregarSemestre', array($buttonLabel, $carregarSemetre));
        $hctCarregarSemestre->setShowLabel(false);
        $fields[] = $hctCarregarSemestre;
        
        // Semestre
        $semesterLabel = new MText('semesterLabel', _M('Semestre', $module) . ':');
        $semesterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $semesterLabel->setClass('m-caption m-caption-required');
        $semester = new MSelection('semester', $this->getFormValue('semester'), _M('Semestre da disciplina',$module), $semestres);
        $semester->setJsHint(_M('Selecione o semestre da disciplina', $module));
        $hctSemester = new MHContainer('hctSemester', array($semesterLabel, $semester));
        $hctSemester->setShowLabel(false);
        $fields[] = $hctSemester;
        
        if ( strlen($this->getFormValue('courseId')) > 0 && strlen($this->getFormValue('courseVersion')) > 0 )
        {
            $validators[] = new MRequiredValidator('semester', _M('Semestre', $module));
        }
        
        //Turma
        $fields[] = $classId = new SLookupContainer('classId', $this->getRequestValue('classId'), array(
            'label' => _M('Turma', $module),
            'module' => 'academic',
            'item' => 'Class',
            'filter' => array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId')
        ));
        
        $fields[] = new MSpacer();
        
        $fields[] = new MDiv('divSemestre');
        
        $button = new MButton('filtrarDisc', _M('Filtrar disciplinas e alunos', $module));
        $fields[] = $divButton = new MDiv('divButton', $button);
        $divButton->addBoxStyle('margin-left', '45%');
        
        $this->setValidators($validators);
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));

        if ( SAGU::getEventName() == 'matricular:click' )
        {
            $this->filtrarDisc_click();
        }
    }
        
    public function filtrarDisc_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $courseId = MIOLO::_REQUEST('courseId');
        $courseVersion = MIOLO::_REQUEST('courseVersion');
        $turnId = MIOLO::_REQUEST('turnId');
        $unitId = MIOLO::_REQUEST('unitId');
        $learningPeriodId = MIOLO::_REQUEST('learningPeriodId');
        $classId = MIOLO::_REQUEST('classId');
        $groupId = MIOLO::_REQUEST('curricularComponentId'); 
        $semestre = MIOLO::_REQUEST('semester');
                        
        if ( !strlen($learningPeriodId) > 0 || !is_numeric($learningPeriodId) )
        {
            return ;
        }
        
        $curriculComponentIds = array();
        
        $busEnroll = new BusinessAcademicBusEnroll();
        $disciplinas = $busEnroll->obterDisciplinasParaMatriculaEmLote($courseId, $courseVersion, $turnId, $unitId, $learningPeriodId, $classId, $semestre, $groupId);
        
        foreach ( $disciplinas as $disciplina )
        {
            // Monta aray com curricularcomponentid e curricularcomponenteversion das disciplinas oferecidas
            if ( !in_array($disciplina[2] . '|' . $disciplina[3], $curriculComponentIds) )
            {
                $curriculComponentIds[] = $disciplina[2] . '|' . $disciplina[3];
            }
        }
        
        /*
         * Consultas para buscar professores, turmas e datas iniciais e finais,
         * das disciplinas para matrícula em lote
         */
        $aux=0;
        $business = new BusinessAcademicBusGroup();
        for ( $i=0; $i<count($disciplinas); $i++ )
        {
            $professor[$i] = $business->getProfessorNamesOfGroup($disciplinas[$i][1]);
             
            if(count($professor[$i])>1)
            {
                foreach($professor[$i] as $k => $prof)
                {
                    $teacher = explode(' ', $prof); 
                    $n = count($teacher);
                    
                    if($teacher[$n-1] == null)
                    {
                        $ultimoNome = ($teacher[$n-2]);
                    }else
                    {
                        $ultimoNome = ($teacher[$n-1]);
                    }
                    
                    $professores[$i][$k] = $teacher[0].' '.$ultimoNome;
                }
                
                $p = null;
                $separador = ',';
                foreach($professores[$i] as $key => $val)
                {
                    $p .= $val.$separador.' <br> ';
                    $separador = null;
                }
                
                $p = $p ;                
            }
            else
            {
                foreach($professor[$i] as $k => $v)
                    $p = $v;                
            } 
            
            $disciplinas[$i][12] = $p;
            
            $horarios = $business->getGroup($disciplinas[$i][1]);
                        
            $disciplinas[$i][9]= $horarios->startDate;
            $disciplinas[$i][10]= $horarios->endDate;
        }
        
        // Verifica o tipo de regime do curso, caso seja rígido, desabilita a seleção de disciplina obrigando a matrícular em todas
        $filters = new stdClass();
        $filters->courseId = $courseId;
        $filters->courseVersion = $courseVersion;
        $busCourseVersion = new BusinessAcademicBusCourseVersion();
        $infoCourse = $busCourseVersion->searchCourseVersion($filters);
        
        $courseVersionTypeId = $infoCourse[0][6];
        
        $busCourseVersionType = new BusinessAcademicBusCourseVersionType();
        $ragime = $busCourseVersionType->getCourseVersionType($courseVersionTypeId);
        
        $grid = $this->getGridDisciplinas();
        $grid->setData($disciplinas);
        
        if ( $ragime->regimen != BusinessAcademicBusCourseVersionType::REGIME_SERIADO_RIGIDO )
        {
            $grid->addActionSelect();
            $this->seriadoRigido = false;
        }
        else
        {
            $this->gridData = $grid->getData();
            $this->AddField($this->genericFields()->labelDica(_M('Curso com regime de semestre rígido. Será efetuado a matrícula para todas as disciplinas exibidas na grid.', $module)));
        }
                
        $this->AddField($grid);
        
        // Filtros para buscar alunos possíveis de serem matriculados
        $filters = new stdClass();
        $filters->learningPeriodId = $learningPeriodId;
        $filters->classId = $classId;
        $filters->semestre = ($semestre - 1);
        // Verifica se o aluno já não está aprovado ou dispensado em uma das disciplinas oferecidas e o tira da lista de alunos para matrícula
        $filters->curriculComponentIds = $curriculComponentIds; 
        
        $alunos = $this->obtemAlunosParaMatriculaEmLote($filters);
                        
        $gridAlunos = $MIOLO->getUI()->getGrid($module, 'GrdAlunosMatriculaEmLote', $filter);
        $gridAlunos->setData($alunos);
        $gridAlunos->setTitle(_M('Alunos')); 
        
        $this->AddField($gridAlunos);
        
        $this->AddField(new MSpacer());
        
        $url = $MIOLO->getActionURL($module, MIOLO::getCurrentAction());
        
        $buttons[] = new MButton('matricular', _M('Matricular', $module));
        $buttons[] = new MButton('cancelar', _M('Cancelar', $module), $url);
        $divButtons = new MDiv('divButtons', $buttons);
        $divButtons->addBoxStyle('margin-left', '45%');
        
        $this->AddField($divButtons);
    }
        
    public function matricular_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        
        $learningPeriodId = MIOLO::_REQUEST('learningPeriodId');

        $busEnroll = new BusinessAcademicBusEnroll();
        
        try
        {
            $disciplinas = $this->obterDisicplinaSelecionadas();
            $groups = $this->obterGroups($disciplinas);
            
            if ( count($disciplinas) == 0 )
            {
                if ( $this->seriadoRigido )
                {
                    $msg = _M('Não existem disciplinas oferecidas para o periodo letivo selecionado.', $module);
                }
                else
                {
                    $msg = _M('É necessário selecionar ao menos uma disciplina para executar o processo de matrícula em lote.', $module);
                }
                
                throw new Exception($msg);
            }
            
            $contratos = $this->obterAlunosSelecionados();
            
            if ( count($contratos) == 0 )
            {
                throw new Exception( _M('É necessário selecionar ao menos um aluno para executar o processo de matrícula em lote.', $module) );
            }
                        
            $this->efetivarMatriculas($busEnroll, $contratos, $learningPeriodId, $groups);

        }
        catch (Exception $e)
        {
            $this->AddError( $e->getMessage() );
            return;
        }
    }
    
    /**
     * Obtém as disciplinas selecionadas na grid
     * 
     * @return type
     */
    public function obterDisicplinaSelecionadas()
    {
        $MIOLO = MIOLO::getInstance();
        
        if ( $this->seriadoRigido )
        {
            foreach ( $this->gridData as $gridData )
            {
                $disciplinas[] = $gridData[0];    
            }
        }
        else
        {
            $disciplinas = $MIOLO->_REQUEST('selectGrdMatriculaEmLote');
        }
        
        return $disciplinas;
    }
    
    /**
     * Obtém os alunos selecionados na grid
     * 
     * @return type
     */
    public function obterAlunosSelecionados()
    {
        $MIOLO = MIOLO::getInstance();
        
        $alunos = $MIOLO->_REQUEST('selectGrdAlunosMatriculaEmLote'); 
        
        return $alunos;
    }
    
    private function efetivarMatriculas(BusinessAcademicBusEnroll $busEnroll, $contratos = array(), $learningPeriodId, $groups = array())
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        
        SDatabase::beginTransaction();
        
        // Matricula todos os alunos selecionados nas disciplinas selecionadas
        foreach ( $contratos as $contractId )
        {
            try
            {                               
                $ok = $busEnroll->enroll($contractId, $learningPeriodId, $groups, false, false, false, false, false, false, AcdEnroll::MATRICULA_EM_LOTE);
            }
            catch (Exception $e)
            {
                SDatabase::rollback();
                
                $busContract = new BusinessAcademicBusContract();
                $contract = $busContract->getContract($contractId);
                $person = $contract->personId . ' - ' . $contract->personName;

                throw new Exception(_M('Houve um erro ao matricular a pessoa @1:<br>@2', $module, $person, $e->getMessage()));
            }
        }

        SDatabase::commit();
        
        $msg = _M('Alunos matriculados com sucesso.', $module);
        $url = $MIOLO->GetActionURL($module, $action);
        
        $MIOLO->information($msg, $url);
    }
    
    /**
     * Prepara dados para serem passados na funcao BusEnroll->enroll().
     * 
     * @return array
     */
    public function obterGroups($groupCurriculums = array())
    {
        $groups = array();
        
        foreach ( $groupCurriculums as $groupCurriculum )
        {
            list($groupId, $curriculumId) = explode('_', $groupCurriculum);
            
            $groups[$groupId] = $curriculumId;
        }
        
        return $groups;
    }
        
    /**
     * @return SGrid
     */
    public function getGridDisciplinas()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        if ( !$this->grid )
        {
            $this->grid = $MIOLO->getUI()->getGrid($module, 'GrdMatriculaEmLote', $filters);
            $this->grid->setTitle(_M('Disciplinas')); 
        }
        
        return $this->grid;
    }
    
    /**
     * Obtém alunos para a matricula em lote:
     * -Da ocorrência de curso, sem matrícula efetuada no período
     * 
     * @param type $data
     * @return type
     */
    public function obtemAlunosParaMatriculaEmLote($filters)
    {
        $busContract = new BusinessAcademicBusContract();
        
        $contratos = $busContract->getActiveContract($filters);
        
        return $contratos;
    }
}
?>
