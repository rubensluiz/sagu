<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdProfessorFormation table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2005
 *
 **/

/**
 * Form to search the acdProfessorFormation table
 */
class FrmProfessorFormationSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', 'basic'), new AcdProfessorFormation(), array('professorId', 'formationLevelId', 'externalCourseId'), 'BusProfessorFormation');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $limboS = new MHiddenField('limboS', '');
        $fields[] = $limboS;

        //Field professor
        $professorLabel = new MText('professorLabel', _M('Professor', $module).':');
        $professorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $professorIdS = new MLookupTextField('professorIdS', $this->professorIdS->value,'', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorNameS', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorIdS->setJsHint(_M('Informe o código do professor', $module));
        $validators[] = new MIntegerValidator('professorIdS', _M('Professor', $module), 'optional');
        $professorNameS = new MTextField('professorNameS', $this->professorNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $professorNameS->setJsHint(_M('Informe o nome do professor', $module));
        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorIdS, $professorNameS));
        $hctProfessor->setShowLabel(true);
        $fields[]  = $hctProfessor;

        //Field formation level
        $formationLevelLabel = new MText('formationLevelLabel', _M('Grau de formação', $module).':');
        $formationLevelLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $formationLevelIdS = new MLookupTextField('formationLevelIdS', $this->formationLevelIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'formationLevelDescriptionS', 'academic', 'FormationLevel', null, null, true);
        $formationLevelIdS->setJsHint(_M('Informe o código do grau de formação', $module));
        $validators[] = new MIntegerValidator('formationLevelIdS', _M('Grau de formação', $module), 'optional');
        $formationLevelDescriptionS = new MTextField('formationLevelDescriptionS', $this->formationLevelDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $formationLevelDescriptionS->setJsHint(_M('Informe a descrição do grau de formação', $module));
        $hctFormationLevel = new MHContainer('$hctFormationLevel', array($formationLevelLabel, $formationLevelIdS, $formationLevelDescriptionS));
        $hctFormationLevel->setShowLabel(true);
        $fields[]  = $hctFormationLevel;

        //Field external course
        $externalCourseLabel = new MText('formationLevelLabel', _M('Curso externo', $module).':');
        $externalCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $externalCourseIdS = new MLookupTextField('externalCourseIdS', $this->externalCourseIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'externalCourseNameS', 'academic', 'ExternalCourse', null, null, true);
        $externalCourseIdS->setJsHint(_M('Informe o código do curso externo', $module));
        $validators[] = new MIntegerValidator('externalCourseIdS', _M('Código de curso externo',$module), 'optional');
        $externalCourseNameS = new MTextField('externalCourseNameS', $this->externalCourseNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $externalCourseNameS->setJsHint(_M('Informe o nome do curso externo', $module));
        $hctExternalCourse = new MHContainer('hctExternalCourse', array($externalCourseLabel, $externalCourseIdS, $externalCourseNameS));
        $hctExternalCourse->setShowLabel(true);
        $fields[]  = $hctExternalCourse;

        //Field begin date
        $beginDateS = new MCalendarField('beginDateS', $this->beginDateS->value, _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDateS->setJsHint(_M('Informe a data inicial', $module));
        $validators[] = new MDATEDMYValidator('beginDateS', '', 'optional');
        $fields[] = $beginDateS;

        //Field date conclusion
        $dateConclusionS = new MCalendarField('dateConclusionS', $this->dateConclusionS->value, _M('Data de conclusão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateConclusionS->setJsHint(_M('Informe a data de conclusão', $module));
        $validators[] = new MDATEDMYValidator('dateConclusionS', '', 'optional');
        $fields[] = $dateConclusionS;

        //Field institution
        $institutionLabel = new MText('institutionLabel', _M('Instituição', $module).':');
        $institutionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $institutionIdS = new MLookupTextField('institutionIdS', $this->institutionIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'institutionNameS', 'basic', 'LegalPersonInstitution', null, null, true);
        $institutionIdS->setJsHint(_M('Informe o código da instituição', $module));
        $validators[] = new MIntegerValidator('institutionIdS', _M('Instituição', $module), 'optional');
        $institutionNameS = new MTextField('institutionNameS', $this->institutionNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $institutionNameS->setJsHint(_M('Informe o nome da instituição',$module));
        $hctInstitutuion = new MHContainer('hctInstitutuion', array($institutionLabel, $institutionIdS, $institutionNameS));
        $hctInstitutuion->setShowLabel(true);
        $fields[]  = $hctInstitutuion;

        parent::defineFields($fields, $module, 'GrdProfessorFormationSearch', $validators);
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $fields->professorName = 'professorNameS';
        $fields->formationLevelDescription = 'formationLevelDescriptionS';
        $fields->externalCourseName = 'externalCourseNameS';
        $fields->institutionName = 'institutionNameS';

        foreach ( $fields as $key => $field )
        {
            $data->$key = MIOLO::_REQUEST($field);
        }

        return $data;
    }
}
?>
