<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Falta justificada.
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 02/08/2012
 *
 * */
class FrmFrequenceRegisterLot extends SForm 
{

    private $home;
    private $module;
    private $busFrequenceEnroll;
    private $busGroup;
    private $busEnroll;

    /**
     * Class constructor
     * */
    public function __construct($data) 
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $this->module = 'academic';
        $this->busFrequenceEnroll = new BusinessAcademicBusFrequenceEnroll();
        $this->busGroup = new BusinessAcademicBusGroup();
        $this->busEnroll = new BusinessAcademicBusEnroll();

        parent::__construct(_M('Registro de frequência em lote', $this->module), null, null);
    }

    /**
     * Default method to define fields
     * */
    public function defineFields() 
    {
        $MIOLO = MIOLO::getInstance();
        $action = MIOLO::getCurrentAction();
        $module = $this->module;

        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->disableButton('tbBtnSave');
        $this->toolbar->disableButton('tbBtnPrint');

        $data = $this->getTypesData();

        //Field period
        $business = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId)) > 0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $business->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[] = new MRequiredValidator('periodId', '', 'required');
        $fields[] = $periodId;

        //Field lookup contract
        $fields[] = new MHiddenField('limbo', '');
        $MIOLO->getClass('academic', 'lookupContract');
        $fields[] = new SLookupContract('contractId', $data, false);

        $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module));

        $contractId = $this->getRequestValue('contractId');

        // Snippet adicionado para garantir que o valor do campo contractId nao seja perdido, que no caso, estava sendo apagado quando uma pessoa tinha mais de um contrato
        if (strlen($contractId) > 0) 
        {
            $MIOLO->page->onload(" document.getElementById('contractId').value = '{$contractId}'; ");
        }

        $fields[] = new MSeparator();

        // Disc. oferecida
        $value = $this->getRequestValue('groupId', $data->groupId);
        $group = new SLookupContainer('groupId', $value, array(
            'label' => _M('Disciplina oferecida', $module),
            'item' => 'Group',
            'module' => 'academic',
        ));
        
        $group->showRequiredLabel = true;
        $fields[] = $group;
        $validators[] = new MRequiredValidator('groupId', _M('Disciplina oferecida', $module));

        // Data ini/final
        $date = new SBeginEndPeriod(array(
//            'required' => true,
        ));
        $fields[] = $date;
        $validators[] = new MDateDMYValidator('beginDate', _M('Início', $module));
        $validators[] = new MDateDMYValidator('endDate', _M('Fim', $module));

        $fields[] = new MSeparator();

        // Frequencia atual
        $currFreqLabel = new MText('currFreqLabel', _M('Frequência atual', $module) . ':');
        $currFreqLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cboxes = array();
        foreach (BusinessAcademicBusFrequenceEnroll::listFrequencyTypes() as $key => $val) 
        {
            $checked = in_array($key, $data->frequencyTypes) || !$MIOLO->page->isPostBack();
            $id = "frequencyTypes[{$key}]";
            $cb = new MCheckBox($id, 1, '', $checked);
            if ($checked) 
            {
                $this->page->addJsCode(" document.getElementById('{$id}').checked = true; ");
            }
            $cbLabel = new MText(rand(), $val);
            $cbHct = new MHContainer('hct' . rand(), array($cb, $cbLabel));
            $cboxes[] = $cbHct;
        }
        $vct = new MVContainer('vctFreqs', $cboxes);
        $hct = new MHContainer('hctcurrfreq', array($currFreqLabel, $vct));
        $hct->setShowLabel(false);
        $fields[] = $hct;

        $fields[] = new MSeparator();

        //Buttons
        $fields[] = new MButton('btnList', _M('Filtrar', $module));

        $this->addFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }

    public function btnList_click($data) 
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data = $this->getTypesData();

        try 
        {
            if (count($data->frequencyTypes) <= 0) 
            {
                throw new Exception(_M('Deve ser selecionado ao menos uma opção para "Frequência atual".', $module));
            }

            $group = $this->busGroup->getGroup($data->groupId);
            if ($group->isClosed == DB_TRUE) 
            {
                throw new Exception(_M('Não é possível alterar frequências de uma disciplina já encerrada.', $module));
            }

            if (strlen($data->contractId) > 0) 
            {
                $filters = new stdClass();
                $filters->contractId = $data->contractId;
                $rows = $this->busEnroll->searchEnroll($filters);

                if (count($rows) <= 0) 
                {
                    throw new Exception(_M('O aluno selecionado não está matriculado na disciplina informada.', $module));
                }
            }

            $fields = array();

            // Carrega grid
            $grid = $this->getGrid();
            $fields[] = $grid;


            if (count($grid->getData()) > 0)
            {
                // Alternar frequencia para
                $fields = $this->setAltFrequencyFields($fields);

                $fields[] = new MButton('btnApply', _M('Aplicar', $module));
                $fields[] = new MSeparator();
            }

            $this->addFields($fields);
        } 
        catch (Exception $e) 
        {
            $this->addError($e->getMessage());
        }
    }

    private function setAltFrequencyFields($fields) 
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $list = BusinessAcademicBusFrequenceEnroll::listFrequencyTypes();
        $options = array();

        foreach ($list as $key => $val) 
       {
            $opt = new MOption("{$key}", $key, $val, false);
            $opt->addAttribute('onclick', 'changeAltFrequency(this)');
            $options[] = $opt;
            if ($key == BusinessAcademicBusFrequenceEnroll::NOT_REGISTERED) 
            {
               $opt->setLabel('<b>' . _M('Limpar registro', $module) . '</b>');
               $opt->addAttribute('onchange',SForm::getAjaxAction('msgHint', 'divInfo'));
            }
            else
            {
               $opt->addAttribute('onchange',SForm::getAjaxAction('clearInfo', 'divInfo'));
            }

            if ($key == BusinessAcademicBusFrequenceEnroll::JUSTIFIED_ABSENSE) {
                $id = "altFrequency_{$key}";
                $MIOLO->page->onload("changeAltFrequency( document.getElementById('{$id}') )");
            }
        }

        $altFrequency = new MRadioButtonGroup('altFrequency', _M('Alterar frequência para', $module), $options);
        $fields[] = $altFrequency;
        $justAbs = BusinessAcademicBusFrequenceEnroll::JUSTIFIED_ABSENSE;
        $MIOLO->page->addJsCode("
            function changeAltFrequency(obj)
            {
                this.checked = true;
                obj.value == '{$justAbs}' && obj.checked ? expandContainer('divJustification') : retractContainer('divJustification');
            }
        ");
                
        // Justificativa
        $value = $data->justification;
        $justification = new SMultilineField('justification', array(
            'label' => _M('Justificativa', $module),
            'value' => $value,
        ));
        $fields[] = new MDiv('divJustification', SAGU::alignFields(array($justification)));
        $fields[] = new MDiv('divInfo');
        
        return $fields;
    }

    public function btnApply_click($data) 
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data = $this->getTypesData();

        try 
        {
            SDatabase::beginTransaction();
            $this->setFrequencies();
            SDatabase::commit();

            // Carrega tambem funcoes do botao Filtrar
            $this->btnList_click($data);

            $this->AddInfo(_M('Frequências alteradas com sucesso.', $module));
        } 
        catch (Exception $e) 
        {
            $this->addError($e->getMessage());
        }
    }
    
    public function msgHint($args)
    {
        $fields[] = new MText('<br><br><br><br><br>');
        $fields[] = $this->genericFields()->labelDica("Ao limpar todos registros de determinado data, o conteúdo ministrado será apagado,"
        ." permitindo alterar a ocorrência da aula.");      
            
        return SAGU::alignFields($fields);
    }
    
    public function clearInfo()
    {
        $fields = null;
        
        return SAGU::alignFields($fields);
    }

    public function getTypesData() 
    {
        $data = new stdClass();
        $data->periodId = $this->getFormValue('periodId');
        $data->learningPeriodId = $this->getFormValue('learningPeriodId');
        $data->beginDate = $this->getFormValue('beginDate');
        $data->endDate = $this->getFormValue('endDate');
        $data->contractId = $this->getFormValue('contractId');
        $data->groupId = $this->getFormValue('groupId');
        $data->frequencyTypes = array_keys((array) $this->getFormValue('frequencyTypes'));
        $data->altFrequency = $this->getFormValue('altFrequency');
        $data->justification = $this->getFormValue('justification');
        $data->personId = $this->getFormValue('contractPersonId');

        return $data;
    }

    /**
     *
     * @return MGrid
     */
    public function getGrid() 
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data = $this->getTypesData();

        if (strlen($data->periodId) > 0) 
        {
            $gridData = $this->busFrequenceEnroll->searchForRegisterInLot($data);
        }

        $grid = $MIOLO->getUI()->getGrid($module, 'GrdFrequenceRegisterLot');
        $grid->setData($gridData);

        return $grid;
    }

    private function setFrequencies() {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data = $this->getTypesData();

        // Insere/atualiza ou apaga frequencias
        $frequencyEnrolls = $this->busFrequenceEnroll->searchForRegisterInLot($data);
        $selecteds = MIOLO::_REQUEST('selectGrdFrequenceRegisterLot');
        foreach ($frequencyEnrolls as $position => $frequencyData)
        {
            if (in_array($position, array_keys($selecteds))) 
            {
                $this->setFrequency($frequencyData);
            }
        }
    }

    private function setFrequency($frequencyData) 
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data = $this->getTypesData();
        $fData = new stdClass();

        list($fData->enrollId,
            $fData->scheduleId,
            $fData->frequencyDate,
            $fData->timeId) = $frequencyData;

        if ($data->altFrequency == BusinessAcademicBusFrequenceEnroll::NOT_REGISTERED) 
        {
            $this->busFrequenceEnroll->deleteFrequenceEnrollByPk(
            $fData->enrollId, $fData->scheduleId, $fData->frequencyDate, $fData->timeId);

            $filters = new stdClass();
            $filters->frequencyDate = $fData->frequencyDate;
            $filters->scheduleId = $fData->scheduleId;
            $search = $this->busFrequenceEnroll->searchFrequenceEnroll($filters);
            if( count($search) == 0 )
            {
                $busScheduleContent = new BusinessAcademicBusScheduleProfessorContent();
                $busScheduleContent->deleteScheduleProfessorContent($fData->frequencyDate, $fData->timeId, $fData->scheduleId);
            }
        } 
        else 
        {
            if ($data->altFrequency == BusinessAcademicBusFrequenceEnroll::JUSTIFIED_ABSENSE) {
                if (strlen($data->justification) <= 0) 
                {
                    throw new Exception(_M('Deve ser informado uma justificativa.', $module));
                }

                $fData->frequency = BusinessAcademicBusFrequenceEnroll::PRESENCE;
                $fData->justification = $data->justification;
                $fData->justifiedAbsense = DB_TRUE;
            } 
            else 
            {
                $fData->frequency = $data->altFrequency;
                $fData->justifiedAbsense = DB_FALSE;
            }

            $this->busFrequenceEnroll->updateOrInsertFrequenceEnroll($fData);
        }
    }
}

?>
