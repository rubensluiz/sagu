<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Label for examination form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 05/09/2006
 */

/**
 * Form to manipulate a contract document
 */
class FrmSemesterSchedule extends SForm
{
    private $home;

    // Variable used to retrieve information from time
    public $krono;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = SAGU::getFileModule(__FILE__);

        $this->home = $data->home;
        $this->krono = new Mkrono();

        parent::__construct( _M('Horário do semestre', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event = MIOLO::_REQUEST('event');
        
        $fields[] = new MHiddenField('limbo', '');

        // Field period
        $busPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $busPeriod->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = $periodId;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $fields[] = $courseOccurrenceLookup;

        // Field professor
        $professorLabel = new MText('professorLabel', _M('Professor',$module).':');
        $professorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $professorId = new MLookupTextField('professorId', $this->getFormValue('professorId',$data->professorId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorId->setJsHint(_M('Informe o código do professor', $module));
        $professorName = new MTextField('professorName', $this->professorName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $professorName->setJsHint(_M('Nome do professor', $module));
        $professorName->setReadOnly(true);
        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
        $hctProfessor->setShowLabel(true);
        $fields[] = $hctProfessor;

        // Field formation level
        $busFormationL = new BusinessAcademicBusFormationLevel();
        $formationLevelId = new MSelection('formationLevelId', $this->getFormValue('formationLevelId', $data->formationLevelId), _M('Grau de formação', $module), $busFormationL->listFormationLevel());
        $formationLevelId->setJsHint(_M('Selecione o grau de formação'));
        $validators[] = new MRequiredValidator('formationLevelId');
        $fields[] = $formationLevelId;

        // Generate option
        $opts[] = new MOption( 'opt1', 1, _M('por dia da semana', $module ), true );
        $opts[] = new MOption( 'opt2', 2, _M('por data', $module ), false );

        // Print mode
        $printModeLabel = new MText( 'printModeLabel', _M('Modo de impressão', $module ) . ':' );
        $printModeLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $printMode = strlen( $this->GetFormValue( 'printMode', $data->printMode ) ) > 0 ? $this->GetFormValue( 'printMode', $data->printMode ) : 1;
        $printMode = new MRadioButtonGroup( 'printMode', '', $opts, $printMode, null, 'horizontal' );
        $printMode->setShowLabel( false );
        $hctPrintMode = new MHContainer( 'hctPrintMode', array($printModeLabel, $printMode) );
        $fields[] = $hctPrintMode;

        unset($opts);

        // Generate option
        $opts[] = new MOption( 'optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module ), true );
        $opts[] = new MOption( 'optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module ), false );

        // File format
        $generateOptionLabel = new MText( 'generateOptionLabel', _M('Tipo de arquivo', $module ) . ':' );
        $generateOptionLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $generateOption = $this->GetFormValue( 'generateOption', $data->generateOption ) ? $this->GetFormValue( 'generateOption', $data->generateOption ) : DB_TRUE;
        $generateOption = new MRadioButtonGroup( 'generateOption', '', $opts, $generateOption, null, 'horizontal' );
        $generateOption->SetShowLabel( false );
        $hctGenerateOption = new MHContainer( 'hctGenerateOption', array($generateOptionLabel, $generateOption) );
        $fields[] = $hctGenerateOption;

        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     */
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $filter = $this->getTypesData();

        $busTurn = new BusinessBasicBusTurn();
        $busCourse = new BusinessAcademicBusCourse();
        $busSchedule = new BusinessAcademicBusSchedule();
        $busCompany = new BusinessBasicBusCompany();
        $company = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $busSemesterSchedule = new BusinessAcademicBusSemesterSchedule();
        $infoCurricularComponent = $busSemesterSchedule->getSemesterSchedule($filter);

        set_time_limit(0);

        try
        {
            if ( $company->companyId == NULL )
            {
                throw new Exception(_M('É necessário definir uma companhia padrão para gerar este documento', $module));
            }
            else if ( ! (is_array($infoCurricularComponent) && (count($infoCurricularComponent) > 0)) )
            {
                throw new Exception(_M('Nenhum registro encontrado.', $module));
            }
            else
            {
                // Instance with agata
                $MIOLO->uses('/core/AgataAPI.class');
                $api = new AgataAPI;

                $api->setParameter('$semester', $filter->periodId);
                $api->setLanguage($MIOLO->getConf('i18n.language'));
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/semesterSchedule.sxw');

                $infoCurricularComponent = $busSemesterSchedule->getSemesterSchedule($filter);

                if ( count($infoCurricularComponent[0]) > 0 )
                {
                    foreach ( $infoCurricularComponent as $index => $curricularComponent )
                    {
                        if ( ($oldCourseId != $curricularComponent[2]) || ($oldCourseVersion != $curricularComponent[3]) )
                        {
                            $oldCourseId = $curricularComponent[2];
                            $oldCourseVersion = $curricularComponent[3];

                            $dataPerson[$oldCourseId . $oldCourseVersion] = array(
                                    $curricularComponent[2],
                                    $curricularComponent[4]
                            );
                        }

                        $infoSchedule = $busSchedule->getScheduleForReport($curricularComponent[0]);

                        if ( ((count($infoSchedule->weekDays) > 0) && ($filter->printMode == 1)) || ((count($infoSchedule->occurrenceDates) > 0) && ($filter->printMode == 2)) )
                        {
                            if ( (is_array($infoSchedule->professors)) && (count($infoSchedule->professors) > 0) )
                            {
                                $allProfessor = str_replace(',', "\<text:line-break/\>", implode(',', $infoSchedule->professors));
                            }
                            else
                            {
                                $allProfessor = '';
                            }

                            if ( $filter->printMode == 1 )
                            {
                                $count1 = 1;
                                foreach ( $infoSchedule->weekDays as $index2 => $weekDay )
                                {
                                    // Set as false to return the day of the week shortened.
                                    $this->krono->abbr = true;
                                    $sWeekDay = $this->krono->nToDay( $weekDay );
                                    $sWeekDay = strtoupper($sWeekDay);

                                    if ( count($infoSchedule->turns)>0 )
                                    {
                                        for ( $count = 0; $count < count($infoSchedule->turns); $count++ )
                                        {
                                            $dataTurn = $busTurn->getTurn($infoSchedule->turns[$count]);

                                            if ( (strlen($infoSchedule->turns[$count+1]) > 0) )
                                            {
                                                $infoWeek .= $sWeekDay . '-' . $dataTurn->shortDescription . '/';
                                            }
                                            else
                                            {
                                                $infoWeek .= $sWeekDay . '-' . $dataTurn->shortDescription;
                                            }
                                        }

                                        if ( count($infoSchedule->weekDays) > 1 && ($count1 != count($infoSchedule->weekDays)) )
                                        {
                                            $infoWeek .= '/';
                                        }

                                        $count1++;
                                    }
                                }

                                $subDataPerson[0][$oldCourseId . $oldCourseVersion][$index] = array(
                                        $infoWeek,
                                        $curricularComponent[1],
                                        $curricularComponent[10],
                                        $allProfessor,
                                        min($infoSchedule->occurrenceDates)
                                );

                                unset($infoWeek);
                            }
                            elseif ( $filter->printMode == 2 )
                            {
                                foreach ( $infoSchedule->occurrenceDates as $index2 => $occurrenceDate )
                                {
                                    $subDataPerson[0][$oldCourseId . $oldCourseVersion][$index . $index2] = array(
                                            $occurrenceDate,
                                            $curricularComponent[1],
                                            $curricularComponent[10],
                                            $allProfessor,
                                            min($infoSchedule->occurrenceDates)
                                    );
                                }
                            }
                        }
                    }
                }

                $api->setDataArray($dataPerson);
                $api->setSubDataArray($subDataPerson);

                if ( ! $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/semesterSchedule.sxw')) )
                {
                    throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                }
    
                if ( $filter->generateOption == 'pdf' )
                {
                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/semesterSchedule.pdf');
                    if ( ! $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/semesterSchedule.sxw') )
                    {
                        throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                    }
                }

                $api->fileDialog();
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data->periodId = $this->periodId->value;
        $data->courseId = $this->courseId->value;
        $data->professorId = $this->professorId->value;
        $data->courseVersion = $this->courseVersion->value;
        $data->emissionDate = $this->emissionDate->value;
        $data->generateOption = $this->generateOption->value;
        $data->printMode = $this->printMode->value;
        $data->formationLevelId = $this->formationLevelId->value;

        return $data;
    }
}
?>