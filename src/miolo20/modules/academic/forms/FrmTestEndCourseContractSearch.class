<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdTestEndCourseContract table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 06/01/2006
 *
 **/

/**
 * Form to search the acdTestEndCourseContract table
 */
class FrmTestEndCourseContractSearch extends SSearchForm
{
    public function __construct($data)
    {
        parent::__construct(null, new acdTestEndCourseContract(), array('testEndCourseTypeId', 'contractId', 'testEndCourseDate'), 'BusTestEndCourseContract');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa',$module).':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonIdS = new MLookupTextField('contractPersonIdS', $this->getFormValue('contractPersonIdS',$this->scheduleShockUnblockSearch->contractPersonIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractIdS', 'contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limbo', 'contractUnitIdS'), $module, 'PersonContract', null, array('personId' => 'contractPersonIdS'), !$this->page->isPostBack());
        $contractPersonIdS->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('contractPersonIdS', _M('Pessoa',$module), 'optional');
        $contractPersonNameS = new MTextField('contractPersonNameS', $this->getFormValue('contractPersonNameS',$this->scheduleShockUnblockSearch->contractPersonNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonNameS->setJsHint(_M('Nome da pessoa',$module));
        $contractPersonNameS->setReadOnly(true);
        $hctPersonS = new MHContainer('hctContractS', array($personLabel, $contractPersonIdS, $contractPersonNameS));
        $hctPersonS->setShowLabel(true);
        $fields[]  = $hctPersonS;

        //Fields contract
        $contractLabel = new MText('contractLabel', _M('Contrato', $module).':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $limboS = new MHiddenField('limboS', '');
        $fields[] = $limboS;
        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS',$data->contractIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonIdS', 'contractPersonNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limboS', 'contractUnitIdS'), $module, 'Contract', null, array('personId' => 'contractPersonIdS'), true);
        $contractIdS->setJsHint(_M('Informe o código do contrato',$module));
        $validators[] = new MIntegerValidator('contractIdS', _M('Contrato', $module), 'optional');
        $contractCourseIdS = new MTextField('contractCourseIdS', $this->getFormValue('contractCourseIdS',$data->contractCourseIdS),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseIdS->setReadOnly(true);
        $contractCourseIdS->setJsHint(_M('Código do curso', $module));
        $contractCourseVersionS = new MTextField('contractCourseVersionS', $this->getFormValue('contractCourseVersionS',$data->contractCourseVersionS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersionS->setReadOnly(true);
        $contractCourseVersionS->setJsHint(_M('Versão do curso', $module));
        $contractCourseNameS = new MTextField('contractCourseNameS', $this->getFormValue('contractCourseNameS',$data->contractCourseNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseNameS->setReadOnly(true);
        $contractCourseNameS->setJsHint(_M('Nome do curso', $module));
        $hctContract = new MHContainer('hctContract', array($contractLabel, $contractIdS, $contractCourseIdS, $contractCourseVersionS, $contractCourseNameS));
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;

        //Field contract
        $contractTurnId = new MHiddenField('contractTurnIdS', '');
        $fields[]    = $contractTurnId;

        //Field unit
        $contractUnitId = new MHiddenField('contractUnitIdS', '');
        $fields[]    = $contractUnitId;        

        //Field test end course type
        $testEndCourseTypeLabel = new MText('testEndCourseTypeLabel', _M('Tipo de avaliação do MEC',$module).':');
        $testEndCourseTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $testEndCourseTypeIdS = new MLookupTextField('testEndCourseTypeIdS', $this->getFormValue('testEndCourseTypeIdS', $data->testEndCourseTypeIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'testEndCourseTypeDescriptionS', $module, 'TestEndCourseType', null, null, true);
        $testEndCourseTypeIdS->setJsHint(_M('Informe o código do tipo de avaliação do MEC',$module));
        $validators[] = new MIntegerValidator('testEndCourseTypeIdS', _M('Tipo de avaliação do MEC', $module), 'optional');
        $testEndCourseTypeDescriptionS = new MTextField('testEndCourseTypeDescriptionS', $this->testEndCourseTypeDescriptionS->value,'', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $testEndCourseTypeDescriptionS->setReadOnly(true);
        $testEndCourseTypeDescriptionS->setJsHint(_M('Descrição do tipo da avaliação do MEC', $module));
        $hctTestEndCourseTypeS = new MHContainer('hctTestEndCourseTypeS', array($testEndCourseTypeLabel, $testEndCourseTypeIdS, $testEndCourseTypeDescriptionS));
        $hctTestEndCourseTypeS->setShowLabel(true);
        $fields[]  = $hctTestEndCourseTypeS;
        
        //Field test end course date
        $testEndCourseDateS = new MCalendarField('testEndCourseDateS', $this->getFormValue('testEndCourseDateS',$data->testEndCourseDateS), _M('Data da avaliação do MEC',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $testEndCourseDateS->setJsHint(_M('Informe a data da avaliação do MEC',$module));
        $validators[] = new MDATEDMYValidator('testEndCourseDateS', '', 'optional');
        $fields[]    = $testEndCourseDateS;
        
        //Campo mensagem
        $acdMensagemAv = new AcdMensagemDeAvaliacaoDosAlunos();
        $sql = new MSQL('mensagemdeavaliacaodosalunosid, mensagem', null, null, 'mensagem');
        $mensagemLabel = new MLabel(_M('Mensagem de avaliação do aluno: ', $module));
        $mensagemLabel->setClass('m-caption');
        $mensagemLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $mensagem = new MComboBox('mensagemDeAvaliacaoDosAlunosId', null, null, $acdMensagemAv->findList($sql));
        $mensagem->setJsHint(_M('Escolha a mensagem de avaliação do aluno.', $module));
        $hctMensagemS = new MHContainer('hctMensagemS', array($mensagemLabel, $mensagem));
        $fields[] = $hctMensagemS;
        
        //Field excused
        $excusedLabelS = new MText('excusedLabelS', _M('É dispensado',$module) . '?');
        $excusedLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $excusedS = new MRadioButtonGroup('excusedS', null, SAGU::listYesNo(1), $data->excusedS, null, 'horizontal');
        $excusedS->setShowLabel(false);
        $hctExcusedS = new MHContainer('hctExcusedS', array($excusedLabelS, $excusedS));
        $fields[] = $hctExcusedS;

        //Field is present
        $isPresentLabelS = new MText('isPresentLabelS', _M('Está presente',$module) . '?');
        $isPresentLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isPresentS = new MRadioButtonGroup('isPresentS', null, SAGU::listYesNo(1), $data->isPresentS, null, 'horizontal');
        $isPresentS->setShowLabel(false);
        $hctIsPresentS = new MHContainer('hctIsPresentS', array($isPresentLabelS, $isPresentS));
        $fields[] = $hctIsPresentS;
        
        parent::defineFields($fields, $module, 'GrdTestEndCourseContractSearch', $validators);
    }


    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->personId = $this->getFormValue('contractPersonIdS');

        return $data;
    }    
}
?>
