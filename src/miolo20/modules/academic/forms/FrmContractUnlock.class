<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 25/01/2006
 *
 **/

/**
**
 */
class FrmContractUnlock extends SManagementForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( new AcdMovementContract(), array('contractId', 'stateContractId', 'stateTime'), 'BusMovementContract', _M('Reativação de contrato', $module) );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $fields[] = new SHiddenField('isActiveContract', DB_TRUE);

        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), _M('Pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'PersonContract', null, array('personId' => 'contractPersonId', 'isActiveContract' => 'isActiveContract'), !$this->page->isPostBack() );
        $contractPersonId->setJsHint(_M('Informe o código da pessoa',$module));
        $flds[]           = $contractPersonId;
        $validators[] = new MIntegerValidator('contractPersonId', '', 'optional');

        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonNameS',$data->contractPersonNameS), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;
        unset($flds);
                
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $contractLabel;
        $contractLabel->setClass('m-caption m-caption-required');

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), _M('Contrato',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'ContractUnlock', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $contractId->addAttribute('onblur', SForm::getAjaxAction('verificaTransicao', 'divContractV', false));
        $validators[] = new MIntegerValidator('contractId', '', 'required');
        $flds[]           = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), _M('Curso',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), _M('Descrição',$module), 30);
        $contractCourseName->setReadOnly(true);
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        unset($flds);

        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo',$module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');

        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, limbo, limbo, limbo, limbo, learningPeriodDescription', $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo',$module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo',$module), 'required');

        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo',$module));
        $learningPeriodDescription->setReadOnly(true);

        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(true);
        $fields[]  = $hctLearningPeriod;

        $hctlearningPeriod = new MHContainer('hctlearningPeriod', $flds);
        $hctlearningPeriod->setShowLabel(false);
        $fields[]    = $hctlearningPeriod;
        unset($flds);

        $businessStateContract = new BusinessAcademicBusStatesContract();

        $statesContractObject = $businessStateContract->getStatesContract(SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_UNLOCKED'));

        $businessReason = new BusinessAcademicBusReason();

        $contractInformation->statesContractId->value = SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_UNLOCKED');

        $reasonId = new MComboBox('reasonId', $this->getFormValue('reasonId', $data->reasonId ? $data->reasonId : ''), _M('Motivo',$module), $businessReason->listReasonByStateContract($contractInformation->statesContractId)); 

        $fields[] = $reasonId;

        //Class
        $classLabel   = new MText('classLabel', _M('Turma',$module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classLabel->setClass('m-caption m-caption-required');

        $classId     = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'classNameUnlock', $module, 'Class', null, array( 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'periodId' => 'periodId' ), true);
        $classId->setJsHint(_M('Informe o código da turma',$module));

        $classNameUnlock    = new MTextField('classNameUnlock', $this->getFormValue('classNameUnlock', $data->className), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $classNameUnlock->setReadOnly(true);
        $classNameUnlock->setJsHint(_M('Nome da turma',$module));

        $hctClass     = new MHContainer('hctClass', array($classLabel, $classId, $classNameUnlock));
        $hctClass->setShowLabel(true);
        $fields[]      = $hctClass;
        $validators[] = new MRequiredValidator('classId',_M('Turma',$module));

        //end class

        if($statesContractObject->needsReason == "t")  //if isNeedReason = true
        {
            $validators[] = new MIntegerValidator('reasonId', '', 'required') ;
        }

        $fields[] = new Separator('');

        $fields[] = new MButton('btnUnlock', null . _M('Reativar', $module));

        $fields[] = new Separator('');
        
        $fields[] = new MDiv('divContractV');

        parent::defineFields($fields, $validators, $data);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);        
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);        
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    public function verificaTransicao($args)
    {        
        if ( strlen($args->contractId) > 0 )
        {
            $busMovementContract = new BusinessAcademicBusMovementContract();
            $busStateTransistion = new BusinessAcademicBusStateTransistion();
            $busStateContract = new BusinessAcademicBusStateContract();

            // Verifica se o estado atual permite o novo estado seguinte, cadastrado no parâmetro STATE_CONTRACT_ID_UNLOCKED
            $ultimaMovimentacao = $busMovementContract->getLastMovementContract($args->contractId);
            $novaMovimentacao = SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_UNLOCKED');

            if ( strlen($ultimaMovimentacao->stateContractId) > 0 )
            {
                $movimentacao = $busStateTransistion->getStateTransistion($ultimaMovimentacao->stateContractId, $novaMovimentacao);

                if ( !strlen($movimentacao->beginStateId) > 0 )
                {
                    $filter = new stdClass();
                    $filter->stateContractId = $ultimaMovimentacao->stateContractId;
                    $atualEstado = $busStateContract->searchStateContract($filter);

                    $filter = new stdClass();
                    $filter->stateContractId = $novaMovimentacao;
                    $novoEstado = $busStateContract->searchStateContract($filter);

                    $msg = _M('O estado contratual @1 não permite o estado @2 como estado seguinte.', $module, $atualEstado[0][0] . ' - ' . $atualEstado[0][1], $novoEstado[0][0] . ' - ' . $novoEstado[0][1]);
                
                    $this->AddError($msg);
                }
            }
        }
        
        return;
    }
    
    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function btnUnlock_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $business = $this->busObject;
        $businessClassPupil = new BusinessAcademicBusClassPupil();
        $busMovementContract = new BusinessAcademicBusMovementContract();
        $busStateTransistion = new BusinessAcademicBusStateTransistion();
        $busStateContract = new BusinessAcademicBusStateContract();

        $data->stateContractId = SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_UNLOCKED');
        $data->stateTime       = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME_PHP'));
        $data->classId         = $this->getFormValue('classId',$this->classId->value);
        $data->continue        = $this->getFormValue('continue', $this->continue->value);

        try
        {
            // Verifica se o estado atual permite o novo estado seguinte, cadastrado no parâmetro STATE_CONTRACT_ID_UNLOCKED
            $ultimaMovimentacao = $busMovementContract->getLastMovementContract($data->contractId);
            $novaMovimentacao = $data->stateContractId;
            
            if ( strlen($ultimaMovimentacao->stateContractId) > 0 )
            {
                $movimentacao = $busStateTransistion->getStateTransistion($ultimaMovimentacao->stateContractId, $novaMovimentacao);
                
                if ( !strlen($movimentacao->beginStateId) > 0 )
                {
                    $filter = new stdClass();
                    $filter->stateContractId = $ultimaMovimentacao->stateContractId;
                    $atualEstado = $busStateContract->searchStateContract($filter);
                    
                    $filter = new stdClass();
                    $filter->stateContractId = $novaMovimentacao;
                    $novoEstado = $busStateContract->searchStateContract($filter);
                                        
                    throw new Exception(_M('<br> O estado contratual @1 não permite o estado @2 como estado seguinte.', $module, $atualEstado[0][0] . ' - ' . $atualEstado[0][1], $novoEstado[0][0] . ' - ' . $novoEstado[0][1]));
                }
            }
            
            /**
             * Se o contrato estiver fechado além do tempo de reativação determinado (MONTHS_FOR_CONTRACT_REACTIVATION) somente permite
             * a reativação se o usuário for administrador
             */
            $monthsReactivation = SAGU::getParameter('BASIC', 'MONTHS_FOR_CONTRACT_REACTIVATION');
            $contractDisactivationDate = $business->getContractDisactivationDate($data->contractId);
            
            //Se ultrapassou o tempo limite de reativação determinado
            if ( (strlen( $contractDisactivationDate)>0 && strlen($monthsReactivation)>0 ) && ( SAGU::dateDiffInMonth($contractDisactivationDate, SAGU::getDateNow()) > $monthsReactivation ) && strlen($data->continue) == 0 )
            {
                //Se o usuário NÃO possuir permissão somente exibe o erro
                if ( !$MIOLO->checkAccess('FrmContractUnlock', A_ADMIN, false, false) )
                {
                    throw new Exception( _M('Contrato inativo há mais de @1 meses.', $module, $monthsReactivation) . ' ' . _M('Somente o Administrador poderá reativar.', $module));
                }
                else
                {
                    $msg     = _M('Contrato inativo há mais de @1 meses.', $module, $monthsReactivation) . ' ' . _M('Clique novamente em "@1" para continuar', $module, _M('Reativar', $module));
                    $this->addField(new MHiddenField('continue', 'true'));
                    $this->AddAlert($msg);
                }
            }
            else
            {
                if( strlen($data->continue)>0 )
                {
                    if ( !$MIOLO->checkAccess('FrmContractUnlock', A_ADMIN, false, false) )
                    {
                        throw new Exception( _M('Contrato inativo há mais de @1 meses.', $module, $monthsReactivation) . ' ' . _M('Somente o Administrador poderá reativar.', $module) );
                    }
                }
                
                $businessClassPupil->beginTransaction();

                if( SAGU::getParameter('ACADEMIC', 'EXECUTE_AUTOMATIC_CLASS_CHANGES') == DB_TRUE )
                {
                    $newClass->beginDate  = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));

                    $contractInThePeriod = $businessClassPupil->getFreeDateFromChanges($data->contractId, $newClass->beginDate, ' + ', '');

                    if( strlen($contractInThePeriod->date) > 0 )
                    {
                        $newClass->beginDate = $contractInThePeriod->date;
                        // Foi encontrada uma turma que já ocorreu neste momento. Portanto a nova turma do aluno terá como data inicial "@1".
                        $msgAdditional = _M('Foi encontrada uma turma que já ocorreu neste momento. Portanto a nova turma do aluno terá como data inicial "@1".',$module,$newClass->beginDate);
                    }

                    $existsOpenClassContract = $businessClassPupil->getContractCurrentClass($data->contractId);
                    
                    // Exists open class for contract
                    if( strlen($existsOpenClassContract->classId) > 0 )
                    {
                        if( SAGU::dateDiff($existsOpenClassContract->beginDate,$newClass->beginDate) >= 0 )
                        {
                            $existsOpenClassContract->endDate = $existsOpenClassContract->beginDate;

                            $newClass->beginDate  = SAGU::addIntervalInDate($existsOpenClassContract->endDate, 'd', 1 , ' + ');
                            //Foi encontrada uma turma aberta com data inicial igual ou maior que a de hoje. Ela foi encerrada com data final "@1". Portanto a nova turma do aluno terá como data inicial "@2".
                            $msgAdditional = _M('Foi encontrada uma turma aberta com data inicial igual ou maior que a de hoje. Ela foi encerrada com data final "@1". Portanto a nova turma do aluno terá como data inicial "@2".',$module,$existsOpenClassContract->endDate,$newClass->beginDate);
                        }
                        else
                        {
                            
                            $endDateFormat = SAGU::addIntervalInDate(date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), 'd', 1 , ' - ');

                            $freeDate = $businessClassPupil->getFreeDateFromChanges($data->contractId, $endDateFormat, ' - ', $existsOpenClassContract->beginDate );

                            $existsOpenClassContract->endDate = $freeDate->date;

                        }

                        $existsOpenClassContract->reasonId = SAGU::getParameter('ACADEMIC', 'STATE_REASON_ID_CONTRACT_UNLOCKED');

                        $businessClassPupil->updateClassPupil($existsOpenClassContract);
                    }

                    // insert contract in the new class
                    $newClass->classId    = $data->classId;
                    $newClass->contractId = $data->contractId;

                    $businessClassPupil->insertClassPupil($newClass);
                }

                // insert movement contract
                $business->insertMovementContract($data);

                $businessClassPupil->commit();

                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, null);

                $MIOLO->information(_M('Contrato reativado!', $module) . ' ' . $msgAdditional , $goto);
            }
            
        }
        catch (Exception $e)
        {
            $businessClassPupil->rollback();

            $msg  = _M('Erro executando a operação solicitada: ',$module) . ' ' . $e->getMessage();

            $this->addError( $msg );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var )
            {
                $data->$var = $this->$var->value;
            }
        }

        return $data;
    }

}

?>
