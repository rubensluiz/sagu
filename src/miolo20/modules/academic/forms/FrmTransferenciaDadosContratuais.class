<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel I. da Silva [nataniel@solis.com.br]
 *
 * @version $Id$
 *
 * @since
 * Class created on 08/07/2014
 **/

class FrmTransferenciaDadosContratuais extends FrmTransferencia
{
    public function __construct($steps = null)
    {
        parent::__construct($steps, __CLASS__);
    }
    
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
                
        $data = $this->getStepData();
                                 
        $value = (strlen($data->transferencia) > 0) ? $data->transferencia : $MIOLO->_REQUEST('transferencia');
        $radioUnitaria = new MRadioButton('transferencia', TRANSFERENCIA_UNITARIA, '', ($value == TRANSFERENCIA_UNITARIA || is_null($value)) ? true : false, _M("Transferir apenas um contrato", $module));
        $radioUnitaria->addAttribute('onChange', $this->getAjaxAction('obterCamposDeTransferencia', 'divTransferecia', false, array('emLote' => DB_FALSE)));
        $radioEmLote = new MRadioButton('transferencia', TRANSFERENCIA_EM_LOTE, '', $value == TRANSFERENCIA_EM_LOTE ? true : false, _M("Transferir vários contratos de uma ocorrência de curso", $module));
        $radioEmLote->addAttribute('onChange', $this->getAjaxAction('obterCamposDeTransferencia', 'divTransferecia', false, array('emLote' => DB_TRUE)));
        $transContainer = new MHContainer('transContainer', array($radioUnitaria, $radioEmLote));
        $fields[] = $transContainer;
        
        $args = new stdClass();
        $args->emLote = $value ? ( $value == TRANSFERENCIA_EM_LOTE ? DB_TRUE : DB_FALSE ) : null;
        $fields[] = new MDiv('divTransferecia', $this->obterCamposDeTransferencia($args));
                
        $this->setValidators($validators);
        $this->setFields($fields);
    }
    
    /**
     * Sobrescrito o método estaEmUmEvento, pois ao navegar no passo-a-passo, ele não retorna corretamente se está em um evento
     * limpando os dados já informados nas lookups
     * 
     * @return type
     */
    public function estaEmUmEvento()
    {
        return MIOLO::_REQUEST('__EVENTTARGETVALUE') || MIOLO::_REQUEST('step');
    }
    
    /**
     * Método controlador de tipo de transferência.
     * 
     * @param stdClass $args
     * @return array
     */
    public function obterCamposDeTransferencia($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $data = $this->getStepData();
        
        if ( !strlen($data->courseId) > 0 )
        {
            $data = $MIOLO->session->get('allData');
            $MIOLO->session->set('allData', null);
        }
                
        if ( $args->emLote == DB_TRUE )
        {
            $campos = $this->obterCamposDeTransferenciaEmLote($data);
        }
        else
        {
            $campos = $this->obterCamposDeTransferenciaUnitaria($data);
        }
                
        return $campos;
    }
    
    /**
     * Retorna os campos necessários para uma transferência de versão de curso em lote.
     * 
     * @return array
     */
    public function obterCamposDeTransferenciaEmLote($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        //Field course
        $curriculumCourseLabel = new MText('curriculumCourseLabel', _M('Curso',$module) . ':');
        $curriculumCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseLabel->setClass('m-caption m-caption-required');
        $curriculumCourseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'courseId, courseVersion, courseName, turnId, turnDescription, unitId, unitDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->estaEmUmEvento());
        $curriculumCourseId->setJsHint(_M('Informe o código do curso', $module));
        $validators[] = new MRequiredValidator('courseId', _M('Curso',$module));
        $curriculumCourseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseName->setJsHint(_M('Nome do curso', $module));
        $curriculumCourseName->setReadOnly(true);
        $curriculumCourseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseVersion->setJsHint(_M('Versão do curso', $module));
        $curriculumCourseVersion->setReadOnly(true);
        $hctCurriculumCourse = new MHContainer('hctCurriculumCourse', array($curriculumCourseLabel, $curriculumCourseId, $curriculumCourseVersion, $curriculumCourseName));
        $hctCurriculumCourse->setShowLabel(true);
        
        //Field turn
        $curriculumCourseTurnLabel = new MText('curriculumCourseTurnLabel', _M('Turno', $module) . ':');
        $curriculumCourseTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseTurnId = new MTextField('turnId', $this->getFormValue('turnId',$data->turnId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseTurnId->setJsHint(_M('Código do turno', $module));
        $curriculumCourseTurnId->setReadOnly(true);
        $curriculumCourseTurnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseTurnDescription->setJsHint(_M('Descrição do turno', $module));
        $curriculumCourseTurnDescription->setReadOnly(true);
        $hctCurriculumCourseTurn = new MHContainer('hctCurriculumCourseTurn', array($curriculumCourseTurnLabel, $curriculumCourseTurnId, $curriculumCourseTurnDescription));
        $hctCurriculumCourseTurn->setShowLabel(true);
        
        //Field unit
        $curriculumCourseUnitLabel = new MText('curriculumCourseUnitLabel', _M('Unidade', $module) . ':');
        $curriculumCourseUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseUnitId = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseUnitId->setJsHint(_M('Código da unidade', $module));
        $curriculumCourseUnitId->setReadOnly(true);
        $curriculumCourseUnitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseUnitDescription->setJsHint(_M('Descrição da unidade', $module));
        $curriculumCourseUnitDescription->setReadOnly(true);
        $hctCurriculumCourseUnit = new MHContainer('hctCurriculumCourseUnit', array($curriculumCourseUnitLabel, $curriculumCourseUnitId, $curriculumCourseUnitDescription));
        $hctCurriculumCourseUnit->setShowLabel(true);

        // Field class
        $pupilClassLabel = new MText('classLabel', _M('Turma', $module) . ':');
        $pupilClassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $pupilClassLabel->setClass('m-caption m-caption-required');
        $pupilClassId = new MLookupTextField('classId', $this->getFormValue('classId', $data->pupilClassId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('pupilClassName'), $module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion'), !$this->estaEmUmEvento());
        $pupilClassId->setJsHint(_M('Informe a turma', $module));
        $validators[] = new MRequiredValidator('classId', _M('Turma de origem',$module));
        $pupilClassName = new MTextField('pupilClassName', $this->getFormValue('pupilClassName', $data->pupilClassName), '', 30);
        $pupilClassName->setReadOnly(true);
        $pupilClassName->setJsHint(_M('Nome da turma', $module));
        $hctPupilClass = new MHContainer('hctpupilClass', array($pupilClassLabel, $pupilClassId, $pupilClassName));
        $hctPupilClass->setShowLabel(false);

        //Basegroup Contrato a transferir
        $fields[] = new MBaseGroup('bsgContractToTransfer', _M('Ocorrência de curso a transferir', $module), array($hctCurriculumCourse, $hctCurriculumCourseTurn, $hctCurriculumCourseUnit, $hctPupilClass), 'vertical');
        
        //Basegroup Curso de destino
        $fields[] = $this->obterBaseGroupDeOcorrenciaDeCursoDeDestino($data);

        //Basegroup Aproveitamentos
        $fields[] = $this->obterBaseGroupDeAproveitamentos($data);
        
        $fields[] = new MSpacer(); 
        $this->setValidators($validators);
        
        return $fields;
    }
    
    /**
     * Retorna os campos necessários para uma transferência de um único contrato.
     * 
     * @return array
     */
    public function obterCamposDeTransferenciaUnitaria($data)
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = $MIOLO->getCurrentModule();
        
        // Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription', 'pupilClassId', 'pupilClassName'), $module, 'ActivePersonContract', null, array('personId' => 'personId'), !$this->estaEmUmEvento());
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MRequiredValidator('personId', _M('Pessoa', $module));
        $contractPersonName = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(false);

        // Field contract
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption m-caption-required');
        
        $contractId = new MLookupTextField('contractId', 
                                           $this->getFormValue('contractId', $data->contractId), 
                                           '', 
                                           SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), 
                                           null, 
                                           null, 
                                           array('personId', //RELATEDs
                                                 'personName', 
                                                 'courseId', 
                                                 'courseName', 
                                                 'courseVersion', 
                                                 'turnId', 
                                                 'turnDescription', 
                                                 'unitId', 
                                                 'unitDescription', 
                                                 'limbo', 
                                                 'limbo', 
                                                 'limbo', 
                                                 'limbo', 
                                                 'limbo', 
                                                 'limbo',  
                                                 'limbo', 
                                                 'limbo', 
                                                 'limbo', 
                                                 'limbo', 
                                                 'limbo', 
                                                 'limbo', 
                                                 'limbo', 
                                                 'pupilClassId', 
                                                 'pupilClassName'), 
                                           $module, 
                                           'ActiveContract', 
                                           null, 
                                           array('personId' => 'personId'), 
                                           !$this->estaEmUmEvento());
        
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato', $module));
        $contractCourseId = new MTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $hctContractCourse = new MHContainer('hctContractCourse', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContractCourse->setShowLabel(false);

        // Field unit
        $contractUnitLabel = new MText('contractUnitLabel', _M('Unidade', $module) . ':');
        $contractUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractUnitId = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractUnitId->setReadOnly(true);
        $contractUnitId->setJsHint(_M('Código da unidade', $module));
        $contractUnitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractUnitDescription->setReadOnly(true);
        $contractUnitDescription->setJsHint(_M('Descrição da unidade', $module));
        $hctContractUnit = new MHContainer('hctContractUnit', array($contractUnitLabel, $contractUnitId, $contractUnitDescription));
        $hctContractUnit->setShowLabel(false);
        
        // Field turn
        $contractTurnLabel = new MText('contractTurnLabel', _M('Turno', $module) . ':');
        $contractTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractTurnId = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractTurnId->setReadOnly(true);
        $contractTurnId->setJsHint(_M('Código do turno', $module));
        $contractTurnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractTurnDescription->setReadOnly(true);
        $contractTurnDescription->setJsHint(_M('Descrição do turno', $module));
        $hctContractTurn = new MHContainer('hctContractTurn', array($contractTurnLabel, $contractTurnId, $contractTurnDescription));
        $hctContractTurn->setShowLabel(false);
        
        $hctContract = new MVContainer('hctContract', array($hctContractCourse, $hctContractUnit, $hctContractTurn));

        // Field pupil class
        $pupilClassLabel = new MText('pupilClassLabel', _M('Turma do aluno', $module) . ':');
        $pupilClassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $pupilClassLabel->setClass('m-caption m-caption');
        $pupilClassId = new MLookupTextField('pupilClassId', $this->getFormValue('pupilClassId', $data->pupilClassId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('pupilClassName'), $module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'classId' => 'pupilClassId'), !$this->estaEmUmEvento());
        $pupilClassId->setJsHint(_M('Informe a turma do aluno', $module));
        $pupilClassName = new MTextField('pupilClassName', $this->getFormValue('pupilClassName', $data->pupilClassName), '', 30);
        $pupilClassName->setReadOnly(true);
        $pupilClassName->setJsHint(_M('Nome da turma do aluno', $module));
        $hctPupilClass = new MHContainer('hctpupilClass', array($pupilClassLabel, $pupilClassId, $pupilClassName));
        $hctPupilClass->setShowLabel(false);

        //Basegroup Contrato a transferir
        $fields[] = new MBaseGroup('bsgContractToTransfer', _M('Contrato a transferir', $module), array($hctPerson, $hctContract, $hctPupilClass), 'vertical');
        
        //Basegroup Curso de destino
        $fields[] = $this->obterBaseGroupDeOcorrenciaDeCursoDeDestino($data);

        //Basegroup Aproveitamentos
        $fields[] = $this->obterBaseGroupDeAproveitamentos($data);
        
        $fields[] = new MSpacer(); 
        $this->setValidators($validators);
        
        return $fields;
    }
    
    /**
     * Retorna base group de seleção da versão do curso de destino.
     * 
     * @param stdClass $data
     * @return \MBaseGroup
     */
    public function obterBaseGroupDeOcorrenciaDeCursoDeDestino($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
                            
        //Curso
        $curriculumCourseLabel = new MText('curriculumCourseLabel', _M('Curso',$module) . ':');
        $curriculumCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseLabel->setClass('m-caption m-caption-required');
        $curriculumCourseId = new MLookupTextField('curriculumCourseId', $this->getFormValue('curriculumCourseId', $data->curriculumCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'curriculumCourseId, curriculumCourseVersion, curriculumCourseName, curriculumCourseTurnId, curriculumCourseTurnDescription, curriculumCourseUnitId, curriculumCourseUnitDescription', $module, 'CourseOccurrence', null, array('courseId' => 'curriculumCourseId', 'courseVersion' => 'curriculumCourseVersion', 'turnId' => 'curriculumCourseTurnId', 'unitId' => 'curriculumCourseUnitId'), !$this->estaEmUmEvento());
        $curriculumCourseId->setJsHint(_M('Informe o código do curso', $module));
        $validators[] = new MRequiredValidator('curriculumCourseId', _M('Curso',$module));
        $curriculumCourseName = new MTextField('curriculumCourseName', $this->getFormValue('curriculumCourseName', $data->curriculumCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseName->setJsHint(_M('Nome do curso', $module));
        $curriculumCourseName->setReadOnly(true);
        $curriculumCourseVersion = new MTextField('curriculumCourseVersion', $this->getFormValue('curriculumCourseVersion', $data->curriculumCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseVersion->setJsHint(_M('Versão do curso', $module));
        $curriculumCourseVersion->setReadOnly(true);
        $hctCurriculumCourse = new MHContainer('hctCurriculumCourse', array($curriculumCourseLabel, $curriculumCourseId, $curriculumCourseVersion, $curriculumCourseName));
        $hctCurriculumCourse->setShowLabel(true);
        $flds2[] = $hctCurriculumCourse;
        
        //Unidade
        $curriculumCourseUnitLabel = new MText('curriculumCourseUnitLabel', _M('Unidade', $module) . ':');
        $curriculumCourseUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseUnitId = new MTextField('curriculumCourseUnitId', $this->getFormValue('curriculumCourseUnitId', $data->curriculumCourseUnitId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseUnitId->setJsHint(_M('Código da unidade', $module));
        $curriculumCourseUnitId->setReadOnly(true);
        $curriculumCourseUnitDescription = new MTextField('curriculumCourseUnitDescription', $this->getFormValue('curriculumCourseUnitDescription', $data->curriculumCourseUnitDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseUnitDescription->setJsHint(_M('Descrição da unidade', $module));
        $curriculumCourseUnitDescription->setReadOnly(true);
        $hctCurriculumCourseUnit = new MHContainer('hctCurriculumCourseUnit', array($curriculumCourseUnitLabel, $curriculumCourseUnitId, $curriculumCourseUnitDescription));
        $hctCurriculumCourseUnit->setShowLabel(true);
        $flds2[] = $hctCurriculumCourseUnit;
        
        //Turno
        $curriculumCourseTurnLabel = new MText('curriculumCourseTurnLabel', _M('Turno', $module) . ':');
        $curriculumCourseTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseTurnId = new MTextField('curriculumCourseTurnId', $this->getFormValue('curriculumCourseTurnId', $data->curriculumCourseTurnId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseTurnId->setJsHint(_M('Código do turno', $module));
        $curriculumCourseTurnId->setReadOnly(true);
        $curriculumCourseTurnDescription = new MTextField('curriculumCourseTurnDescription', $this->getFormValue('curriculumCourseTurnDescription', $data->curriculumCourseTurnDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseTurnDescription->setJsHint(_M('Descrição do turno', $module));
        $curriculumCourseTurnDescription->setReadOnly(true);
        $hctCurriculumCourseTurn = new MHContainer('hctCurriculumCourseTurn', array($curriculumCourseTurnLabel, $curriculumCourseTurnId, $curriculumCourseTurnDescription));
        $hctCurriculumCourseTurn->setShowLabel(true);
        $flds2[] = $hctCurriculumCourseTurn;
        
        //Período
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodLabel = new MText('periodLabel', _M('Período da transferência:', $module));
        $periodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $periodLabel->setClass('m-caption m-caption-required');
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), null, $businessPeriod->listPeriod(), true );
        $flds2[] = new MHContainer('periodHC', array($periodLabel, $periodId));
        $validators[] = new MRequiredValidator('periodId', _M('Período', $module));
        
        //Turma de destino
        $flds2[] = new SHiddenField('allClasses', DB_TRUE); // Para trazer todas as turmas independente a unidade logada.
        $destinationClassLabel = new MText('destinationClassLabel', _M('Nova turma', $module) . ':');
        $destinationClassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationClassLabel->setClass('m-caption m-caption-required');
        $destinationClassId = new MLookupTextField('destinationClassId', $this->getFormValue('destinationClassId', $data->destinationClassId), _M('Nova turma', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'destinationClassDescription', 'academic', 'Class', null, array('courseId'=>'curriculumCourseId', 'courseVersion'=>'curriculumCourseVersion', 'allClasses'=>'allClasses'), !$this->page->isPostBack());
        $destinationClassId->setJsHint(_M('Informe o código do turma', $module));
        $destinationClassDescription = new MTextField('destinationClassDescription', $this->getFormValue('destinationClassDescription', $data->destinationClassDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationClassDescription->setJsHint(_M('Descrição do turma', $module));
        $destinationClassDescription->setReadOnly(true);
        $hctClass = new MHContainer('hctClass', array($destinationClassLabel, $destinationClassId, $destinationClassDescription));
        $hctClass->setShowLabel(false);
        $flds2[] = $hctClass;
        $validators[] = new MRequiredValidator('destinationClassId', _M('Nova turma', $module));
                
        $this->setValidators($validators);
        
        return new MBaseGroup('bsgVersionDestination', _M('Ocorrência de curso de destino', $module), $flds2, 'vertical');
    }
    
    /**
     * Retorna basegroup de seleção de tipo de aproveitamentos.
     * 
     * @return \MBaseGroup
     */
    public function obterBaseGroupDeAproveitamentos($stepData)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $parametroDisciplinasEncerradas = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_APROVEITAR_ENCERRADAS'));
        $parametroDisciplinasMatriculadas = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_APROVEITAR_MATRICULADAS'));
        $parametroDisciplinasNotas = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_NOTAS_MATRICULADAS'));
        $parametroDisciplinasFrequencias = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_FREQUENCIAS_MATRICULADAS'));
        $parametroDisciplinasComuns = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_DISCIPLINAS_COMUNS'));
        $parametroDisciplinasVinculadas = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_DISCIPLINAS_VINCULADAS'));
        
        // Desbilita os checkbox caso o segundo elemento do parâmetro esteja como 'f' (permite edição)
        $disableEncerradas = ($parametroDisciplinasEncerradas[1] == DB_FALSE) ? "disabled=true" : "enabled=true";
        $disableMatriculadas = ($parametroDisciplinasMatriculadas[1] == DB_FALSE) ? "disabled=true" : "enabled=true";
        $disableNotas = ($parametroDisciplinasNotas[1] == DB_FALSE) ? "disabled=true" : "enabled=true";
        $disableFrequencias = ($parametroDisciplinasFrequencias[1] == DB_FALSE) ? "disabled=true" : "enabled=true";
        $disableComuns = ($parametroDisciplinasComuns[1] == DB_FALSE) ? "disabled=true" : "enabled=true";
        $disableVinculadas = ($parametroDisciplinasVinculadas[1] == DB_FALSE) ? "disabled=true" : "enabled=true";
        
        $disciplinasEncerradasValue = strlen($stepData->disciplinasEncerradas) > 0 ? (($stepData->disciplinasEncerradas == DB_TRUE) ? true : false) : $parametroDisciplinasEncerradas[0] == DB_TRUE;
        $disciplinasMatriculadasValue = strlen($stepData->disciplinasMatriculadas) > 0 ? (($stepData->disciplinasMatriculadas == DB_TRUE) ? true : false) : $parametroDisciplinasMatriculadas[0] == DB_TRUE;
        $disciplinasComunsValue = strlen($stepData->disciplinasComuns) > 0 ? (($stepData->disciplinasComuns == DB_TRUE) ? true : false) : $parametroDisciplinasComuns[0] == DB_TRUE;
        $disciplinasVinculadasValue = strlen($stepData->disciplinasVinculadas) > 0 ? (($stepData->disciplinasVinculadas == DB_TRUE) ? true : false) : $parametroDisciplinasVinculadas[0] == DB_TRUE;
        $notesAvaliationsValue = strlen($stepData->notesAvaliations) > 0 ? (($stepData->notesAvaliations == DB_TRUE) ? true : false) : $parametroDisciplinasNotas[0] == DB_TRUE;
        $frequencyValue = strlen($stepData->frequency) > 0 ? (($stepData->frequency == DB_TRUE) ? true : false) : $parametroDisciplinasFrequencias[0] == DB_TRUE;
        
        $disciplinasEncerradasLabel = new MText('disciplinasEncerradasLabel', _M('Aproveitar disciplinas encerradas:'));
        $disciplinasEncerradasLabel->setWidth(250);
        $disciplinasEncerradas = new MCheckBox('disciplinasEncerradas', DB_TRUE, null, $disciplinasEncerradasValue, _M(' Sim', $module), _M('Serão aproveitadas todas as disciplinas já encerradas do antigo contrato.'));
        $disciplinasEncerradas->addAttribute($disableEncerradas);
        $flds[] = new MHContainer('takeHC', array($disciplinasEncerradasLabel, $disciplinasEncerradas));
        
        $disciplinasMatriculadasLabel = new MText('disciplinasMatriculadasLabel', _M('Aproveitar disciplinas matriculadas:'));
        $disciplinasMatriculadasLabel->setWidth(250);
        $disciplinasMatriculadas = new MCheckBox('disciplinasMatriculadas', DB_TRUE, null, $disciplinasMatriculadasValue, _M(' Sim', $module), _M('Serão aproveitadas as disciplinas matriculadas no período, do antigo contrato.'));
        $disciplinasMatriculadas->addAttribute($disableMatriculadas);
        
        //Manter disciplinas oferecidas originais ou transferir com as da nova ocorrencia
        $disciplinasMatriculadas->addAttribute('onChange', $this->getAjaxAction('ajaxDisciplinasMatriculadas', 'divMatriculadas', false, $this->getData())); 

        $divMatriculadas = new MDiv('divMatriculadas', $this->ajaxDisciplinasMatriculadas());
        
        $flds[] = new MHContainer('takeLinkHC', array($disciplinasMatriculadasLabel, $disciplinasMatriculadas, $divMatriculadas));
                
        $disciplinasComunsLabel = new MText('disciplinasComunsLabel', _M('Disciplinas comuns entre os cursos:'));
        $disciplinasComunsLabel->setWidth(250);
        $disciplinasComuns = new MCheckBox('disciplinasComuns', DB_TRUE, null, $disciplinasComunsValue, _M(' Sim', $module), _M('Se esta opção estiver desabilitada, juntamente com a opção abaixo, nenhum aproveitamento será feito.'));
        $disciplinasComuns->addAttribute($disableComuns);
        $fldsAp[] = new MHContainer('disciplinasComunsHC', array($disciplinasComunsLabel, $disciplinasComuns));
        
        $disciplinasVinculadasLabel = new MText('disciplinasVinculadasLabel', _M('Disciplinas vinculadas(equivalencias):'));
        $disciplinasVinculadasLabel->setWidth(250);
        $disciplinasVinculadas = new MCheckBox('disciplinasVinculadas', DB_TRUE, null, $disciplinasVinculadasValue, _M(' Sim', $module), _M('Se esta opção estiver desabilitada, juntamente com a opção a cima, nenhum aproveitamento será feito.'));
        $disciplinasVinculadas->addAttribute($disableVinculadas);
        $fldsAp[] = new MHContainer('disciplinasVinculadasHC', array($disciplinasVinculadasLabel, $disciplinasVinculadas));
        
        $flds[] = new MDiv('divHowToMake', new MBaseGroup('bsgHowToMake', _M('Como aproveitar?', $module), $fldsAp, 'vertical'));
        
        $notesAvaliationsLabel = new MText('notesAvaliationsLabel', _M('Aproveitar notas e avaliações equivalentes:'));
        $notesAvaliationsLabel->setWidth(250);
        $notesAvaliations = new MCheckBox('notesAvaliations', DB_TRUE, null, $notesAvaliationsValue, _M(' Sim', $module), _M('Regra somente aplicada para disciplinas matriculadas no período, que serão aproveitas.'));
        $notesAvaliations->addAttribute($disableNotas);
        $fldsBg[] = new MHContainer('notesAvaliationsHC', array($notesAvaliationsLabel, $notesAvaliations));
        
        $frequencyLabel = new MText('frequencyLabel', _M('Aproveitar frequencias equivalentes:'));
        $frequencyLabel->setWidth(250);
        $frequency = new MCheckBox('frequency', DB_TRUE, null, $frequencyValue, _M(' Sim', $module), _M('Regra somente aplicada para disciplinas matriculadas no período, que serão aproveitas.'));
        $frequency->addAttribute($disableFrequencias);
        $fldsBg[] = new MHContainer('frequencykHC', array($frequencyLabel, $frequency));
        
        $flds[] = new MDiv('divNotesAndFrequencys', new MBaseGroup('bsgNotesAndFrequencys', _M('Para as disciplinas matriculadas', $module), $fldsBg, 'vertical'));
        
        $convenioLabel = new MText('convenioLabel', _M('Migrar convênio:'));
        $convenioLabel->setWidth(250);
        $migrarConvenio = new MCheckBox('migrarConvenio', DB_TRUE, null, ($stepData->migrarConvenio == DB_TRUE) || $this->isFirstAccess() ? true : false, _M(' Sim', $module), _M('Se esta opção estiver habilitada, migra o convênio do contrato antigo para o novo.'));
        $fldsCv[] = new MHContainer('convenioHC', array($convenioLabel, $migrarConvenio));
        
        $incentivoLabel = new MText('incentivoLabel', _M('Migrar incentivo:'));
        $incentivoLabel->setWidth(250);
        $migrarIncentivo = new MCheckBox('migrarIncentivo', DB_TRUE, null, ($stepData->migrarIncentivo == DB_TRUE) || $this->isFirstAccess() ? true : false, _M(' Sim', $module), _M('Se esta opção estiver habilitada, migra o incentivo do contrato antigo para o novo.'));
        $fldsCv[] = new MHContainer('incentivoHC', array($incentivoLabel, $migrarIncentivo));
        
        $flds[] = new MDiv('divNotesAndFrequencys', new MBaseGroup('bsgFinanceiro', _M('Financeiro', $module), $fldsCv, 'vertical'));
        
        // Forçado os valores pois no primerio reload da tela devido a algum erro, os campos readonly não eram setados corretamente
        $jsCode = " document.getElementById('disciplinasEncerradas').checked = {$disciplinasEncerradasValue}; ";
        $jsCode .= " document.getElementById('disciplinasMatriculadas').checked = {$disciplinasMatriculadasValue}; ";
        $jsCode .= " document.getElementById('disciplinasComuns').checked = {$disciplinasComunsValue}; ";
        $jsCode .= " document.getElementById('disciplinasVinculadas').checked = {$disciplinasVinculadasValue}; ";
        $jsCode .= " document.getElementById('notesAvaliations').checked = {$notesAvaliationsValue}; ";
        $jsCode .= " document.getElementById('frequency').checked = {$frequencyValue}; ";
        $MIOLO->page->OnLoad($jsCode);
                
        return new MBaseGroup('bsgExploitations', _M('Aproveitamentos', $module), $flds, 'vertical');
    }
    
    public function nextStepButton_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $data = $this->getData();
        
        if ( $data->notesAvaliations == DB_TRUE )
        {
            $this->nextStep = $this->step + 1;
        }
        else
        {
            $this->nextStep = $this->step + 2;
        }
                
        //Executa o processo de transferência        
        $this->executaProcessoDeTransferencia($args);
    }
    
    public function getData()
    {
        $MIOLO = MIOLO::getInstance();
        
        $parametroDisciplinasEncerradas = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_APROVEITAR_ENCERRADAS'));
        $parametroDisciplinasMatriculadas = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_APROVEITAR_MATRICULADAS'));
        $parametroDisciplinasNotas = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_NOTAS_MATRICULADAS'));
        $parametroDisciplinasFrequencias = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_FREQUENCIAS_MATRICULADAS'));
        $parametroDisciplinasComuns = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_DISCIPLINAS_COMUNS'));
        $parametroDisciplinasVinculadas = explode(',', SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_DISCIPLINAS_VINCULADAS'));
        
        $data = new stdClass();
        $data->transferencia = $MIOLO->_REQUEST('transferencia');
                
        $data->personId = $MIOLO->_REQUEST('personId');
        $data->personName = $MIOLO->_REQUEST('personName');
        $data->contractId = $MIOLO->_REQUEST('contractId');
        $data->courseId = $MIOLO->_REQUEST('courseId');
        $data->courseVersion = $MIOLO->_REQUEST('courseVersion');
        $data->courseName = $MIOLO->_REQUEST('courseName');
        $data->turnId = $MIOLO->_REQUEST('turnId');
        $data->turnDescription = $MIOLO->_REQUEST('turnDescription');
        $data->unitId = $MIOLO->_REQUEST('unitId');
        $data->unitDescription = $MIOLO->_REQUEST('unitDescription');
        $data->pupilClassId = strlen($MIOLO->_REQUEST('pupilClassId')) > 0 ? $MIOLO->_REQUEST('pupilClassId') : $MIOLO->_REQUEST('classId') ;
        $data->pupilClassName = $MIOLO->_REQUEST('pupilClassName');
        
        $data->curriculumCourseId = $MIOLO->_REQUEST('curriculumCourseId');
        $data->curriculumCourseVersion = $MIOLO->_REQUEST('curriculumCourseVersion');
        $data->curriculumCourseName = $MIOLO->_REQUEST('curriculumCourseName');
        $data->curriculumCourseUnitId = $MIOLO->_REQUEST('curriculumCourseUnitId');
        $data->curriculumCourseUnitDescription = $MIOLO->_REQUEST('curriculumCourseUnitDescription');
        $data->curriculumCourseTurnId = $MIOLO->_REQUEST('curriculumCourseTurnId');
        $data->curriculumCourseTurnDescription = $MIOLO->_REQUEST('curriculumCourseTurnDescription');
        $data->periodId = $MIOLO->_REQUEST('periodId');
        $data->destinationClassId = $MIOLO->_REQUEST('destinationClassId');
        $data->destinationClassDescription = $MIOLO->_REQUEST('destinationClassDescription');
        $data->reasonId = $MIOLO->_REQUEST('reasonId');
        
        $data->disciplinasEncerradas = ($MIOLO->_REQUEST('disciplinasEncerradas') == DB_TRUE) ? DB_TRUE : ($parametroDisciplinasEncerradas[1] == DB_FALSE) ? $parametroDisciplinasEncerradas[0] : DB_FALSE;
        $data->disciplinasMatriculadas = ($MIOLO->_REQUEST('disciplinasMatriculadas') == DB_TRUE) ? DB_TRUE : ($parametroDisciplinasMatriculadas[1] == DB_FALSE) ? $parametroDisciplinasMatriculadas[0] : DB_FALSE;
        $data->notesAvaliations = ($MIOLO->_REQUEST('notesAvaliations') == DB_TRUE) ? DB_TRUE : ($parametroDisciplinasNotas[1] == DB_FALSE) ? $parametroDisciplinasNotas[0] : DB_FALSE;
        $data->frequency = ($MIOLO->_REQUEST('frequency') == DB_TRUE) ? DB_TRUE : ($parametroDisciplinasFrequencias[1] == DB_FALSE) ? $parametroDisciplinasFrequencias[0] : DB_FALSE;
        $data->disciplinasComuns = ($MIOLO->_REQUEST('disciplinasComuns') == DB_TRUE) ? DB_TRUE : ($parametroDisciplinasComuns[1] == DB_FALSE) ? $parametroDisciplinasComuns[0] : DB_FALSE;
        $data->disciplinasVinculadas = ($MIOLO->_REQUEST('disciplinasVinculadas') == DB_TRUE) ? DB_TRUE : ($parametroDisciplinasVinculadas[1] == DB_FALSE) ? $parametroDisciplinasVinculadas[0] : DB_FALSE;
        $data->migrarConvenio = ($MIOLO->_REQUEST('migrarConvenio') == DB_TRUE) ? DB_TRUE : DB_FALSE;
        $data->migrarIncentivo = ($MIOLO->_REQUEST('migrarIncentivo') == DB_TRUE) ? DB_TRUE : DB_FALSE;
        
        $param = SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_APROVEITAR_MATRICULADAS');
        $parametro = explode(',', $param);
        $configMatriculadas = AcdTransferencia::CONFIG_MATRICULDAS_DESTINO;
        
        if ( $parametro[2] == DB_FALSE )
        {
            $configMatriculadas = AcdTransferencia::CONFIG_MATRICULDAS_ORIGINAL;
        }
        
        $data->configMatriculadas = SAGU::NVL($MIOLO->_REQUEST('configMatriculadas'), $configMatriculadas);
        
        return $data;
    }
    
    public function ajaxDisciplinasMatriculadas($args)
    {
        $MIOLO = MIOLO::getInstance();
        $param = SAGU::getParameter('ACADEMIC', 'TRANSFERENCIA_APROVEITAR_MATRICULADAS');
        $parametro = explode(',', $param);
        $config = MIOLO::_REQUEST('configMatriculadas');

        if ( SAGU::NVL($args->disciplinasMatriculadas, $parametro[0]) == DB_TRUE )
        {
            $show = false;
            if ( $config == AcdTransferencia::CONFIG_MATRICULDAS_DESTINO )
            {
                $show = true;
            }
            elseif ( !(strlen($config) > 0 ) )
            {
                $parametro[2] == DB_TRUE ? $show = true : $show = false;
            }
            
            $procurarMatriculadasNovasLabel = new MLabel(_M("Procurar por disciplinas oferecidas equivalentes na ocorrência de curso de destino."));
            $procurarMatriculadasNovasLabel->setClass('m-caption');
            $procurarMatriculadasNovas = new MRadioButton('configMatriculadas', AcdTransferencia::CONFIG_MATRICULDAS_DESTINO, null, $show);
            $procurarMatriculadasNovas->setClass('class', 'radio1');

            $procurarMatriculadasOriginaisLabel = new MLabel(_M("Utilizar as mesmas disciplinas oferecidas na ocorrência de curso atual."));
            $procurarMatriculadasOriginaisLabel->setClass('m-caption');
            $procurarMatriculadasOriginais = new MRadioButton('configMatriculadas', AcdTransferencia::CONFIG_MATRICULDAS_ORIGINAL, null, !$show);
            $procurarMatriculadasOriginais->setClass('class', 'radio2');

            //Desabilita poder de escolha
            if ( $parametro[1] == DB_FALSE )
            {
                $procurarMatriculadasNovas->addAttribute('disabled=true');
                $procurarMatriculadasOriginais->addAttribute('disabled=true');
            }
            
            $hctMatriculadasOriginais = new MHContainer('hctMatriculadasOriginais', array($procurarMatriculadasOriginaisLabel, $procurarMatriculadasOriginais, new MSpacer()));
            $hctMatriculadasNovas = new MHContainer('hctMatriculadasNovas', array($procurarMatriculadasNovasLabel, $procurarMatriculadasNovas));
            $bsgMatriculadas = new MBaseGroup('bshMatriculadas', _M("Para o aproveitamento de disciplinas atualmente matriculadas: "), array($hctMatriculadasNovas, $hctMatriculadasOriginais));
        }
          
        // Forçado os valores pois no primerio reload da tela devido a algum erro, os campos readonly não eram setados corretamente
        $destino = $show ? 'true' : 'false';
        $original = !$show ? 'true' : 'false';
        
        $jsCode = " var configMat = document.getElementsByName('configMatriculadas');
                    for ( var i = 0; i < configMat.length; i++ )
                    {
                        if ( configMat[i].value == 'destino' )
                        {
                            configMat[i].checked = $destino;
                        }
                        else if ( configMat[i].value == 'original' )
                        {
                            configMat[i].checked = $original;
                        }
                    } ";
        $MIOLO->page->OnLoad($jsCode);
        
        return $bsgMatriculadas;
    }
}

?>

