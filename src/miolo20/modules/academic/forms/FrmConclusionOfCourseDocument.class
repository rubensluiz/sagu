<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Conclusin of course document form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/02/2011
 */

/**
 * Form to manipulate a contract document
 */
class FrmConclusionOfCourseDocument extends SForm
{
    const TYPE_CERTIFICATE = 'conclusionOfCourse';
    const TYPE_DECLARATION = 'declarationOfCourse';

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Conclusão de curso', $module), null, null);

        // Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array( 'event' => 'btnPrint_click' )));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $MIOLO->getClass('academic', 'lookupContract');
        $fields[] = new SLookupContract('contractId', $data, true);
        $validators[] = new MRequiredValidator('contractId', _M('Contrato', $module));

        //carimbo
        if ( SAGU::getParameter('ACADEMIC', 'SIMPLIFIED_SCHOLARSHIP_DESCRIPTION_DOCUMENT_EXTRA_PARAMS') == 'YES' )
        {        
            $busStamp = new BusinessBasicBusStamp();
            $fields[] = $carimbo = new MSelection('carimbo', null, _M('Carimbo'), $busStamp->listStamp());
            $fields[] = new MSeparator();
            $validators[] = new MRequiredValidator('carimbo', _M('Carimbo', $module));
        }
        
        // Tipo de documento
        $options = array(
            self::TYPE_CERTIFICATE => _M('Certificado', $module),
            self::TYPE_DECLARATION => _M('Declaração', $module),
        );
        $fields[] = new MRadioButtonGroup('documentType', _M('Tipo de documento', $module), $options, self::TYPE_CERTIFICATE);
      
        // Formato
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat', _M('Formato', $module));
        $fields[] = new MSeparator('');
        
        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }

    /**
     * Evendo chamado no botão Imprimir da barra de ferramentas
     */
    public function btnPrint_click($sender = null)
    {
        $data = $this->getTypesData();
        $options['module'] = $module = SAGU::getFileModule(__FILE__);
        $options['reportName'] = $data->documentType; // Adicionar documento
        $options['parameters']['datenow'] = SAGU::getDateByExtense(SAGU::getDateNow());

        if ( strlen($data->contractId) > 0 )
        {
            $options['parameters']['contractid'] = $data->contractId;
        }

        if ( strlen($data->contractCourseId) > 0 )
        {
            $options['parameters']['courseid'] = $data->contractCourseId;
        }

        if ( strlen($data->contractPersonId) > 0 )
        {
            $options['parameters']['personid'] = $data->contractPersonId;
        }
        if ( MIOLO::_REQUEST('carimbo') )
        {
            $options['parameters']['carimbo'] = MIOLO::_REQUEST('carimbo');
        }

        if ( strlen($data->reportFormat) > 0 )
        {
            $options['fileType'] = $data->reportFormat;
        }
        
        $errors = $this->getReportErrors($data);
        
        if ( strlen($errors) <= 0) {
            $sreport = new SReport($options);

            if (!$sreport->generate()) {
                $this->addError(_M('Não foi possível gerar o documento.', $module));
            }
        } else {
            $this->addError(_M('Não foi possível gerar o documento. '.$errors, $module));
        }
    }

    /**
     * Método criado para verificar se a declaração/certificado pode ser emitido com base
     * nos errors retornados.
     * 
     * Verificações:
     * - Concluiu o curso? 
     * 
     * @author Marco Noronha [marco_noronha@solis.coop.br]
     *
     * @return String Motivo pelo qual relatório não pode ser gerado.
     *          Vazio caso não tenha erro.
     */
    private function getReportErrors($data)
    {
      
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $motive = "";
      
        $busContract = new BusinessAcademicBusContract(); 
        $contract = $busContract->getContract($data->contractId);

        //Verificar se Aluno já concluiu o curso
        // Nao fui eu (moises) que coloquei  o SQL aqui, mas como ja estava, tive que corrigir um bug na pressa
        $result = SDatabase::query("SELECT datetodb(?) < NOW()", array($contract->conclusionDate));
        $maiorQueHoje = $result[0][0] == DB_TRUE;
        
        if(!$maiorQueHoje)
        {
            $motive = "O aluno ainda não concluiu o curso.";
        }
        
        if ( ( SAGU::getParameter('ACADEMIC', 'VALIDA_CONCLUSAO_DISCIPLINAS') == DB_TRUE ) && ( $busContract->getContractStateId($contract->contractId) != SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_GRADUATION') ) )
        {
            $motive .= ' ' . _M('O aluno ainda não concluiu todas as disciplinas (não está com o estado contratual definido como COLAÇÃO DE GRAU).', $module);
        }

        return $motive; 
    }
    
    public function getTypesData()
    {
        $data = new stdClass();
        $data->contractId = $this->GetFormValue('contractId');
        $data->contractCourseId = $this->GetFormValue('contractCourseId');
        $data->contractTurnId = $this->GetFormValue('contractTurnId');
        $data->contractUnitId = $this->GetFormValue('contractUnitId');
        $data->contractPersonId = $this->GetFormValue('contractPersonId');
        $data->reportFormat = $this->GetFormValue('reportFormat');
        $data->documentType = $this->GetFormValue('documentType');

        return $data;
    }
}
?>