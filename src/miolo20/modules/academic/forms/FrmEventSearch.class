<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdEvent table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 06/01/2006
 *
 **/

/**
 * Form to search the acdEvent table
 */
class FrmEventSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', 'basic'), new AcdEvent(), array('eventId'), 'BusEvent');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Field event id
        $eventIdS = new MTextField('eventIdS', $this->getFormValue('eventIdS',$data->eventIdS), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $eventIdS->setJsHint(_M('Informe o código do evento', $module));
        $fields[] = $eventIdS;
        
        //Field event description
        $descriptionS = new MTextField('descriptionS', $this->getFormValue('descriptionS',$data->descriptionS), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descriptionS->setJsHint(_M('Informe a descrição do evento', $module));
        $fields[] = $descriptionS;
      
        //Field account scheme
        $accountSchemeLabelS = new MText('accountSchemeLabelS', _M('Plano de contas', $module) . ':');
        $accountSchemeLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountSchemeIdS = new MLookupTextField('accountSchemeIdS', $this->getFormValue('accountSchemeIdS', $data->accountSchemeIdS), _M('Plano de contas', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'accountSchemeDescriptionS', 'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeIdS->setJsHint(_M('Informe o código do plano de contas', $module));
        $accountSchemeDescriptionS = new MTextField('accountSchemeDescriptionS', $this->getFormValue('accountSchemeDescriptionS', $data->accountSchemeDescriptionS), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescriptionS->setJsHint(_M('Descrição do plano de contas', $module));
        $accountSchemeDescriptionS->setReadOnly(true);
        $hctAccountSchemeS = new MHContainer('hctAccountSchemeS', array($accountSchemeLabelS, $accountSchemeIdS, $accountSchemeDescriptionS));
        $hctAccountSchemeS->setShowLabel(false);
        $fields[]  = $hctAccountSchemeS;

        //Field cost center
        $costCenterLabelS = new MText('costCenterLabelS', _M('Centro de custo', $module) . ':');
        $costCenterLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $costCenterIdS = new MLookupTextField('costCenterIdS', $this->getFormValue('costCenterIdS', $data->costCenterIdS), _M('Centro de custo', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'costCenterDescriptionS', 'accountancy', 'CostCenter', null, null, true);
        $costCenterIdS->setJsHint(_M('Informe o código do centro de custos', $module));
        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->getFormValue('costCenterDescriptionS', $data->costCenterDescriptionS), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescriptionS->setJsHint(_M('Descrição do centro de custos', $module));
        $costCenterDescriptionS->setReadOnly(true);
        $hctCostCenterS = new MHContainer('hctCostCenterS', array($costCenterLabelS, $costCenterIdS, $costCenterDescriptionS));
        $hctCostCenterS->setShowLabel(false);
        $fields[]  = $hctCostCenterS;
        
        //Field 
        $policyLabelS = new MText('policyLabelS', _M('Política', $module) . ':');
        $policyLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $policyIdS = new MLookupTextField('policyIdS', $this->getFormValue('policyIdS', $data->policyIdS), _M('Política', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'policyDescriptionS', 'finance', 'Policy', null, null, true);
        $policyIdS->setJsHint(_M('Informe o código da política', $module));
        $validators[] = new MIntegerValidator('policyIdS', '', 'optional');
        $policyDescriptionS = new MTextField('policyDescriptionS', $this->getFormValue('policyDescriptionS', $data->policyDescriptionS), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $policyDescriptionS->setJsHint(_M('Descrição da política', $module));
        $policyDescriptionS->setReadOnly(true);
        $hctPolicyS = new MHContainer('hctPolicyS', array($policyLabelS, $policyIdS, $policyDescriptionS));
        $hctPolicyS->setShowLabel(false);
        $fields[]  = $hctPolicyS;
        
        //Field income source
        $incomeSourceLabelS = new MText('incomeSourceLabelS', _M('Origem', $module) . ':');
        $incomeSourceLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $incomeSourceIdS = new MLookupTextField('incomeSourceIdS', $this->getFormValue('incomeSourceIdS', $data->incomeSourceIdS), _M('Origem', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'incomeSourceDescriptionS', 'finance', 'IncomeSource', null, null, true);
        $incomeSourceIdS->setJsHint(_M('Informe o código de origem da receita', $module));
        $validators[] = new MIntegerValidator('incomeSourceIdS', '', 'optional');
        $incomeSourceDescriptionS = new MTextField('incomeSourceDescriptionS', $this->getFormValue('incomeSourceDescriptionS',$data->incomeSourceDescriptionS), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $incomeSourceDescriptionS->setJsHint(_M('Informe a descrição da origem', $module));
        $incomeSourceDescriptionS->setReadOnly(true);
        $hctIncomeSourceS = new MHContainer('hctIncomeSourceS', array($incomeSourceLabelS, $incomeSourceIdS, $incomeSourceDescriptionS));
        $hctIncomeSourceS->setShowLabel(false);
        $fields[]  = $hctIncomeSourceS;

        //Field inscription free
        $inscriptionFeeS = new MTextField('inscriptionFeeS', $this->getFormValue('inscriptionFeeS', $data->inscriptionFeeS), _M('Taxa de inscrição', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Formato', $module) . ': 0.00');
        $inscriptionFeeS->setJsHint(_M('Informe a taxa de inscrição',$module));
        $fields[] = $inscriptionFeeS;
        $validators[] = new MFloatValidator('inscriptionFeeS', '', SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'optional');
        
        //Campo carga horária
        $inscriptionFee = new MTextField('numberHoursS', $this->getFormValue('numberHours', $data->numberHours), _M('Carga horária',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $inscriptionFee->setJsHint(_M('Informe a carga horária', $module));
        $fields[] = $inscriptionFee;
        $validators[] = new MIntegerValidator('numberHoursS', _M('Carga horária', $module), 'optional');

        parent::defineFields($fields, $module, 'GrdEventSearch', $validators);
    }
}

?>
