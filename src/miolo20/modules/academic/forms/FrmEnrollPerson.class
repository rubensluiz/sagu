<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Enroll person form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 06/10/2005
 *
 **/

/**
 * Form to manipulate an enroll
 **/
class FrmEnrollPerson extends MForm
{

    var $enrollData;

    /**
     * Class constructor
     **/
    public function __construct()
    {

        $action = MIOLO::getCurrentAction();
        $module = MIOLO::getCurrentModule();
        $MIOLO  = MIOLO::getInstance();

        $session     = $MIOLO->session;
        $loginUid    = $session->isRegistered('loginUid') ? $session->getValue('loginUid') : null;
        $loginPasswd = $session->isRegistered('loginPasswd') ? $session->getValue('loginPasswd') : null;

        $this->enrollData = unserialize(urldecode(stripslashes(MIOLO::_request('enrollData'))));

        parent::__construct(_M('Pessoa', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();

        if ( !( SAGU::Authenticate($loginUid, $loginPasswd) || $MIOLO->checkAccess('FrmEnrollConract', A_EXECUTE, false, true) ) )
        {
            $this->page->redirect($MIOLO->getActionURL($module, substr($action,0,strrpos($action,':')) . ':enroll'));
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $session  = $MIOLO->session;
        $personId = $session->isRegistered('loginUid') ? $session->getValue('loginUid') : null;
        
        $busContract        = new BusinessAcademicBusContract();
        $availableContracts = $busContract->listAvailableContractsForEnroll($personId);
        
        if (count($availableContracts) == 0)
        {
            $msg = _M('Não há contrato disponível. Por favor, entre em contato com o setor de atendimento ao aluno.', $module);
            
            $MIOLO->error($msg, $MIOLO->getActionURL($module, 'main:process:enroll'), _M('Erro', $module));
        }

        $business = new BusinessBasicBusPhysicalPerson();
        $data     = $business->getPhysicalPerson($personId);

        $fields[] = new MHiddenField('limbo');
        $fields[] = new MHiddenField('personId', isset($this->enrollData->personId) ? $this->enrollData->personId : $data->personId);

        //BaseGroup 1
        $personName   = new MTextField('personName', isset($this->enrollData->personName) ? $this->enrollData->personName : $data->name, _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $validators[] = new MRequiredValidator('personName');
        $flds[]       = $personName;
        $personName->setJsHint(_M('Informe o nome da pessoa',$module));
        $personName->setReadOnly(true);

        $zipCode      = new MLookupTextField('zipCode', isset($this->enrollData->zipCode) ? $this->enrollData->zipCode : $data->zipCode, _M('CEP',$module), SAGU::getParameter('BASIC', 'FIELD_ZIPCODE_SIZE'), null, null, 'location1, limbo, countryName, limbo, stateName, cityId, cityName, limbo, neighborhood', 'basic', 'LocationZipCode', null, null, $this->page->isPostBack() );
        $zipCode->setJsHint(_M('Informe o CEP',$module));
        $validators[] = new MRangeValidator('zipCode', '', '00000000', '99999999', 'i', 'optional');
        //$validators[] = new MCepValidator('zipCode');
        $flds[]       = $zipCode;

        $location1 = new MHiddenField('location1', $this->getFormValue('location1', $location1));
        $fields[]  = $location1;

        if ( (strlen($location1->value) > 0) && (!(strlen($this->enrollData->location)>0)) && (!(strlen($data->location)>0)))
        {
            $data->location = $location1->value;
        }

        $cityId       = new MLookupTextField('cityId', isset($this->enrollData->cityId) ? $this->enrollData->cityId : $data->cityId, _M('Código da cidade',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'cityName, limbo, stateName, limbo, countryName, zipCode', 'basic', 'City', null, null, true);
        $cityId->setJsHint(_M('Informe o código da cidade',$module));
        $validators[] = new MRequiredValidator('cityId');
        $flds[]       = $cityId;
 
        $cityName     = new MTextField('cityName', isset($this->enrollData->cityName) ? $this->enrollData->cityName : $data->cityName, _M('Nome da cidade',$module), 20);
        $cityName->setReadOnly(true);
        $flds[]       = $cityName;

        $stateName    = new MTextField('stateName', isset($this->enrollData->stateName) ? $this->enrollData->stateName : $data->stateName, _M('Nome do estado',$module), 20);
        $stateName->setReadOnly(true);
        $flds[]       = $stateName;
 
        $countryName  = new MTextField('countryName', isset($this->enrollData->countryName) ? $this->enrollData->countryName : $data->countryName, _M('Nome do país',$module), 20);
        $countryName->setReadOnly(true);
        $flds[]       = $countryName;

        $location     = new MTextField('location', isset($this->enrollData->location) ? $this->enrollData->location : $data->location, _M('Logradouro',$module), 30);
        $location->setJsHint(_M('Informe o logradouro da pessoa',$module));
        $validators[] = new MRequiredValidator('location');
        
        $number       = new MTextField('number', isset($this->enrollData->number) ? $this->enrollData->number : $data->number, _M('Número', $module), 5);
        $number->setJsHint(_M('Informe o número do endereço da pessoa'));
        
        $lochct            = new MHContainer('lochct', array($location, $number));
        $lochct->showLabel = true;
        
        $flds[]       = $lochct;

        $complement   = new MTextField('complement', isset($this->enrollData->complement) ? $this->enrollData->complement : $data->complement, _M('Complemento',$module), 10);
        $complement->setJsHint(_M('Informe o complemento do logradouro',$module));
        $flds[]       = $complement;

        $neighborhood = new MTextField('neighborhood', isset($this->enrollData->neighborhood) ? $this->enrollData->neighborhood : $data->neighborhood, _M('Bairro',$module), 20);
        $neighborhood->setJsHint(_M('Informe o bairro da pessoa',$module));
        $flds[]       = $neighborhood;

        $bsg1 = new BaseGroup('bsg1',_M('Endereço',$module),$flds,'vertical');
        $bsg1->showLabel = false;
        $bsg1->width = '97%';
        unset($flds);

        //BaseGroup 2
        $residentialPhone = new MTextField('residentialPhone', isset($this->enrollData->residentialPhone) ? $this->enrollData->residentialPhone : $data->residentialPhone, _M('Telefone residencial',$module), 20);
        $residentialPhone->setJsHint(_M('Informe o fone residencial',$module));
        $flds[]       = $residentialPhone;

        $workPhone    = new MTextField('workPhone', isset($this->enrollData->workPhone) ? $this->enrollData->workPhone : $data->workPhone, _M('Telefone comercial',$module), 20);
        $workPhone->setJsHint(_M('Informe o fone comercial',$module));
        $flds[]       = $workPhone;

        $cellPhone    = new MTextField('cellPhone', isset($this->enrollData->cellPhone) ? $this->enrollData->cellPhone : $data->cellPhone, _M('Fone celular',$module), 20);
        $cellPhone->setJsHint(_M('Informe o telefone celular',$module));
        $flds[]       = $cellPhone;

        $messagePhone = new MTextField('messagePhone', isset($this->enrollData->messagePhone) ? $this->enrollData->messagePhone : $data->messagePhone, _M('Fone para recado',$module), 20);
        $messagePhone->setJsHint(_M('Informe o telefone para recados',$module));
        $flds[]       = $messagePhone;

        $email        = new MTextField('email', isset($this->enrollData->email) ? $this->enrollData->email : $data->email, _M('E-mail',$module), 30);
        $email->setJsHint(_M('Informe o e-mail pessoal',$module));
        $validators[] = new MEmailValidator('email','','optional');
        $flds[]       = $email;

        $emailAlternative = new MTextField('emailAlternative', isset($this->enrollData->emailAlternative) ? $this->enrollData->emailAlternative : $data->emailAlternative, _M('E-mail alternativo',$module), 30);
        $emailAlternative->setJsHint(_M('Informe o e-mail alternativo da pessoa',$module));
        $validators[] = new MEmailValidator('emailAlternative','','optional');
        $flds[]       = $emailAlternative;

        $bsg2            = new BaseGroup('bsg2',_M('Contatos',$module),$flds,'vertical');
        $bsg2->showLabel = false;
        $bsg2->width     = '97%';
        unset($flds);

        //BaseGroup 3
        $carPlate     = new MTextField('carPlate', isset($this->enrollData->carPlate) ? $this->enrollData->carPlate : $data->carPlate, _M('Placa do carro',$module), 20);
        $carPlate->setJsHint(_M('Informe a placa do carro',$module));
        $flds[]       = $carPlate;

        $business     = new BusinessBasicBusEthnicOrigin();
        $flds[]       = new MComboBox('ethnicOriginId', isset($this->enrollData->ethnicOriginId) ? $this->enrollData->ethnicOriginId : $data->ethnicOriginId, _M('Informe o código da origem étnica',$module), $business->listEthnicOrigin());

        $business     = new BusinessBasicBusSpecialNecessity();
        $flds[]       = new MComboBox('specialNecessityId', isset($this->enrollData->specialNecessityId) ? $this->enrollData->specialNecessityId : $data->specialNecessityId, _M('Código da necessidade especial',$module), $business->listSpecialNecessity());

        $specialNecessityDescription = new MTextField('specialNecessityDescription', isset($this->enrollData->specialNecessityDescription) ? $this->enrollData->specialNecessityDescription : $data->specialNecessityDescription, _M('Descrição da necessidade especial',$module), 30);
        $specialNecessityDescription->setJsHint(_M('Informe a descrição da necessidade especial da pessoa',$module));
        $flds[]       = $specialNecessityDescription;

        $bsg3            = new BaseGroup('bsg3', _M('Dados gerais',$module), $flds, 'vertical');
        $bsg3->showLabel = false;
        $bsg3->width     = '97%';
        unset($flds);

        //VerticalContainer 1: BaseGroup 2 + BaseGroup 3
        $vct1            = new MVContainer('vct1', array($bsg2, $bsg3));
        $vct1->showLabel = false;
        $vct1->width     = '49%';

        //VerticalContainer 2: BaseGroup 1
        $vct2            = new MVContainer('vct2', array($bsg1));
        $vct2->showLabel = false;
        $vct2->width     = '49%';

        //HorizontalContainer 1: VerticalContainer 2 + VerticalContainer 1
        $hct1            = new MHContainer('hct1', array($vct2, $vct1));
        $hct1->width     = '100%';
        $hct1->showLabel = false;
        
        //Error container
        $divError        = new MDiv('divError', $lblMsg, null, 'align=center');

        //Div 2
        $btn1[] = new MButton('btnPrev', '<< ' . _M('Anterior', $module), 'RETURN');
        $btn1[] = new MButton('btnNext', _M('Próximo', $module) . ' >>');
        $div2   = new MDiv('div2', $btn1, null, 'align=center');

        //VeticalContainer 3: HorizontalContainer 1 + ErrorDiv + Div 2
        $vct3            = new MVContainer('vct2', array($hct1, $divError, $div2));
        $vct3->width     = '100%';
        $vct3->showLabel = false;

        $fields[] = $vct3;
        

        $this->page->onLoad('document.' . $this->name . '.personName.focus();');

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        //$this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

    }

    /**
     * Event triggered when user click next
     **/
    public function btnNext_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //collect all form data
        $physicalPerson->personId                    = $this->personId->value;
        $physicalPerson->name                        = $this->personName->value;
        $physicalPerson->zipCode                     = $this->zipCode->value;
        $physicalPerson->cityId                      = $this->cityId->value;
        $physicalPerson->location                    = $this->location->value;
        $physicalPerson->number                      = $this->number->value;
        $physicalPerson->complement                  = $this->complement->value;
        $physicalPerson->neighborhood                = $this->neighborhood->value;
        $physicalPerson->residentialPhone            = $this->residentialPhone->value;
        $physicalPerson->workPhone                   = $this->workPhone->value;
        $physicalPerson->cellPhone                   = $this->cellPhone->value;
        $physicalPerson->messagePhone                = $this->messagePhone->value;
        $physicalPerson->email                       = strtolower($this->email->value);
        $physicalPerson->emailAlternative            = strtolower($this->emailAlternative->value);
        $physicalPerson->carPlate                    = $this->carPlate->value;
        $physicalPerson->ethnicOriginId              = $this->ethnicOriginId->value;
        $physicalPerson->specialNecessityId          = $this->specialNecessityId->value;
        $physicalPerson->specialNecessityDescription = $this->specialNecessityDescription->value;

        //create cvsLog object
        $cvsLog                 = new BasCvsLog();
        $cvsLog->tablePkey      = 'personId';
        $cvsLog->tablePkeyValue = $physicalPerson->personId;

        //create an array with all person attributes
        $person = new BasPerson();
        $vars2  = get_object_vars($person);
        $vars2  = array_keys($vars2);

        //get the person old values
        $business = new BusinessBasicBusPhysicalPerson();
        $data     = $business->getPhysicalPerson($physicalPerson->personId);

        //get the person old values
        $business2 = new BusinessBasicBusCvsLog();

        //update the person
        $ok1 = $business->updatePhysicalPersonToInscriptions($physicalPerson);

        if ( $ok1 == true )
        {
            //look each element if exist a diference
            $vars = get_object_vars($physicalPerson);
            foreach ( $vars as $var => $value )
            {
                if ( $physicalPerson->$var != $data->$var )
                {
                    if ( in_array($var,$vars2) )
                    {
                        $cvsLog->tableName = 'basPerson';
                    }
                    else
                    {
                        $cvsLog->tableName = 'basPhysicalPerson';
                    }
                    $cvsLog->fieldName = $var;
                    $cvsLog->oldValue  = $data->$var;

                    //save the logs
                    $ok2 = $business2->insertCvsLog($cvsLog);

                    if ( $ok2 != true )
                    {
                        $ok1 = false;
                    }
                }
            }
        }

        //if personal data are saved with sucess and none insert in cvsLog generate errors
        if ( $ok1 == true )
        {
            $data = $this->getData();

            foreach ( $data as $k => $v )
            {
                $this->enrollData->$k = $v;
            }

            $vars = array ( 'returnTo' => $action,
                            'enrollData' => urlencode(serialize($this->enrollData)) );
            $postAction = substr($action,0,strrpos($action,':')) . ':enrollContract';
            $this->page->redirect($MIOLO->getActionURL($module, $postAction, null, $vars));
        }
        else
        {
            $msg           = _M('Dados incorretos',$module);

            $lblMsg        = new MText('lblMsg',$msg);
            $lblMsg->color = 'red';

            $flds[]        = $lblMsg;
            $flds[]        = new Separator('');

            $this->divError->addControl($flds);
        }
    }

}

?>
