<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * External course form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 19/09/2005
 */

/**
 * Form to manipulate a condition
 */
class FrmCondition extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new AcdCondition(), array('conditionId'), 'BusCondition');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_REQUEST('event');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $conditionId = MIOLO::_REQUEST('conditionId');

            $fields[] = new MTextLabel('conditionId', $conditionId, _M('Código',$module));
            $fields[] = new MHiddenField('conditionId', $conditionId);

            $data = $this->busObject->getCondition($conditionId);
        }

        //Field course
        $curriculumCourseLabel = new MText('curriculumCourseLabel', _M('Curso',$module) . ':');
        $curriculumCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseLabel->setClass('m-caption m-caption-required');
        $curriculumCourseId = new MLookupTextField('curriculumCourseId', $this->GetFormValue('curriculumCourseId', $data->curriculumCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'curriculumCourseId, curriculumCourseVersion, curriculumCourseName, curriculumCourseTurnId, curriculumCourseTurnDescription, curriculumCourseUnitId, curriculumCourseUnitDescription', $module, 'CourseOccurrence', null, array('courseId' => 'curriculumCourseId'), !$this->page->isPostBack());
        $curriculumCourseId->setJsHint(_M('Informe o código do curso', $module));
        $validators[] = new MRequiredValidator('curriculumCourseId', _M('Curso',$module));
        $curriculumCourseName = new MTextField('curriculumCourseName', $this->getFormValue('curriculumCourseName', strlen($this->curriculumCourseName->value) > 0 ? $this->curriculumCourseName->value : $data->curriculumCourseName ), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseName->setJsHint(_M('Nome do curso', $module));
        $curriculumCourseName->setReadOnly(true);
        $curriculumCourseVersion = new MTextField('curriculumCourseVersion', $this->getFormValue('curriculumCourseVersion', $data->curriculumCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseVersion->setJsHint(_M('Versão do curso', $module));
        $curriculumCourseVersion->setReadOnly(true);
        $hctCurriculumCourse = new MHContainer('hctCurriculumCourse', array($curriculumCourseLabel, $curriculumCourseId, $curriculumCourseVersion, $curriculumCourseName));
        $hctCurriculumCourse->setShowLabel(true);
        $fields[] = $hctCurriculumCourse;

        //Field unit
        $curriculumCourseUnitLabel = new MText('curriculumCourseUnitLabel', _M('Unidade', $module) . ':');
        $curriculumCourseUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseUnitId = new MTextField('curriculumCourseUnitId', strlen($this->curriculumCourseUnitId->value) > 0 ? $this->curriculumCourseUnitId->value : $data->curriculumUnitId , '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseUnitId->setJsHint(_M('Código da unidade', $module));
        $curriculumCourseUnitId->setReadOnly(true);
        $curriculumCourseUnitDescription = new MTextField('curriculumCourseUnitDescription', strlen($this->curriculumCourseUnitDescription->value) > 0 ? $this->curriculumCourseUnitDescription->value : $data->curriculumUnitDescription, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseUnitDescription->setJsHint(_M('Descrição da unidade', $module));
        $curriculumCourseUnitDescription->setReadOnly(true);
        $hctCurriculumCourseUnit = new MHContainer('hctCurriculumCourseUnit', array($curriculumCourseUnitLabel, $curriculumCourseUnitId, $curriculumCourseUnitDescription));
        $hctCurriculumCourseUnit->setShowLabel(true);
        $fields[] = $hctCurriculumCourseUnit;

        //Field turn
        $curriculumCourseTurnLabel = new MText('curriculumCourseTurnLabel', _M('Turno', $module) . ':');
        $curriculumCourseTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseTurnId = new MTextField('curriculumCourseTurnId', strlen($this->curriculumCourseTurnId->value) > 0 ? $this->curriculumCourseTurnId->value : $data->curriculumTurnId, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseTurnId->setJsHint(_M('Código do turno', $module));
        $curriculumCourseTurnId->setReadOnly(true);
        $curriculumCourseTurnDescription = new MTextField('curriculumCourseTurnDescription', strlen($this->curriculumCourseTurnDescription->value) > 0 ? $this->curriculumCourseTurnDescription->value : $data->curriculumTurnDescription , '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseTurnDescription->setJsHint(_M('Descrição do turno', $module));
        $curriculumCourseTurnDescription->setReadOnly(true);
        $hctCurriculumCourseTurn = new MHContainer('hctCurriculumCourseTurn', array($curriculumCourseTurnLabel, $curriculumCourseTurnId, $curriculumCourseTurnDescription));
        $hctCurriculumCourseTurn->setShowLabel(true);
        $fields[] = $hctCurriculumCourseTurn;

        //Field curricular component
        $curriculumCurricularComponentLabel = new MText('curriculumCurricularComponent', _M('Disciplina', $module) . ':');
        $curriculumCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCurricularComponentLabel->setClass('m-caption m-caption-required');
        $curriculumCurricularComponentId = new MLookupTextField('curriculumCurricularComponentId', $this->getFormValue('curriculumCurricularComponentId', $data->curriculumCurricularComponentId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curriculumCurricularComponentVersion,curriculumCurricularComponentName', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'curriculumCourseId', 'curricularComponentId' => 'curriculumCurricularComponentId'), true);
        $curriculumCurricularComponentId->setJsHint(_M('Informe o código da disciplina', $module));
        $validators[] = new MRequiredValidator('curriculumCurricularComponentId', _M('Disciplina',$module));
        $curriculumCurricularComponentVersion = new MTextField('curriculumCurricularComponentVersion', $this->getFormValue('curriculumCurricularComponentVersion', $data->curriculumCurricularComponentVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCurricularComponentVersion->setJsHint(_M('Versão da disciplina', $module));
        $curriculumCurricularComponentVersion->setReadOnly(true);
        $curriculumCurricularComponentName = new MTextField('curriculumCurricularComponentName', $this->curriculumCurricularComponentName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCurricularComponentName->setJsHint(_M('Nome da disciplina', $module));
        $curriculumCurricularComponentName->setReadOnly(true);
        $hctCurriculumCurricularComponent = new MHContainer('hctCurriculumCurricularComponent', array($curriculumCurricularComponentLabel, $curriculumCurricularComponentId, $curriculumCurricularComponentVersion, $curriculumCurricularComponentName));
        $hctCurriculumCurricularComponent->setShowLabel(true);
        $fields[] = $hctCurriculumCurricularComponent;

        //Field condiction curricular component
        $conditionCurriculumCurricularComponentLabel = new MText('conditionCurriculumCurricularComponentLabel', _M('Disciplina do requisito',$module) . ':');
        $conditionCurriculumCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $conditionCurriculumCurricularComponentId = new MLookupTextField('conditionCurriculumCurricularComponentId', $this->getFormValue('conditionCurriculumCurricularComponentId', $data->conditionalCurriculumCurricularComponentId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'conditionCurriculumCurricularComponentVersion,conditionCurriculumCurricularComponentName', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'curriculumCourseId', 'curricularComponentId' => 'conditionCurriculumCurricularComponentId'), true);
        $conditionCurriculumCurricularComponentId->setJsHint(_M('Informe o nome da disciplina do requisito curricular', $module));
        $conditionCurriculumCurricularComponentVersion = new MTextField('conditionCurriculumCurricularComponentVersion', $this->getFormValue('conditionCurriculumCurricularComponentVersion', $data->conditionalCurriculumCurricularComponentVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $conditionCurriculumCurricularComponentVersion->setJsHint(_M('Informe a versão da disciplina do requisito curricular',$module));
        $conditionCurriculumCurricularComponentVersion->setReadOnly(true);
        $hint = _M('Caso não preenchido, requisito será a carga horária APROVADA total informada abaixo.');
        $conditionCurriculumCurricularComponentName = new MTextField('conditionCurriculumCurricularComponentName', $this->getFormValue('conditionCurriculumCurricularComponentName', $data->conditionalCurriculumCurricularComponentName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), $hint);
        $conditionCurriculumCurricularComponentName->setJsHint(_M('Nome da disciplina do requisito', $module));
        $conditionCurriculumCurricularComponentName->setReadOnly(true);
        $hctConditionCurriculumCurricularComponent = new MHContainer('hctConditionCurriculumCurricularComponent', array($conditionCurriculumCurricularComponentLabel, $conditionCurriculumCurricularComponentId, $conditionCurriculumCurricularComponentVersion, $conditionCurriculumCurricularComponentName));
        $hctConditionCurriculumCurricularComponent->setShowLabel(true);
        $fields[] = $hctConditionCurriculumCurricularComponent;

        //Field type
        $type = new MSelection('type', $this->getFormValue('type', $data->type), _M('Tipo', $module), array( 'P' => _M('Pré', $module), 'C' => _M('Co', $module) ) );
        $type->setJsHint(_M('Selecione o tipo', $module));
        $fields[] = $type;
        $validators[] = new MRequiredValidator('type');

        //Field credits
        $credits = new MTextField('credits', $this->getFormValue('credits', $data->credits), _M('Créditos',$module), 10);
        $credits->setJsHint(_M('Informe os créditos', $module));
        $validators[] = new MRegExpValidator('credits','','(^-?[0-9][0-9]*$)');
        $fields[] = $credits;

        //Field number hour
        $hint = _M('Horas cursadas na disciplina do requisito (ATIVIDADE COMPLEMENTAR). Caso não selecionada, calcula horas totais cursadas.');
        $numberHour = new MTextField('numberHour', $this->getFormValue('numberHour', $data->numberHour), _M('Número de horas',$module), 10, $hint);
        $numberHour->setJsHint(_M('Informe o número de horas', $module));
        $numberHour->addAttribute('onBlur', $this->getAjaxAction('campoConsiderarDiscMatric', 'divDiscMatric', false, $data));
        $validators[] = new MRegExpValidator('numberHour','','(^-?[0-9][0-9]*$)');
        $fields[] = $numberHour;
        
        //Div do campo de consideração das disciplinas matriculadas para o cálculo de horas totais cursadas.
        $filters = new stdClass();
        $filters->numberHour = $this->getFormValue('numberHour', $data->numberHour);
        $filters->consideraDiscMatriculadas = $this->getFormValue('consideraDiscMatriculadas', $data->consideraDiscMatriculadas);
        $fields[] = new MDiv('divDiscMatric', $this->campoConsiderarDiscMatric($filters));

        //Field education area
        $busEducationArea = new BusinessAcademicBusEducationArea();
        $educationAreaId = new MComboBox('educationAreaId', $this->getFormValue('educationAreaId', $data->educationAreaId), _M('Área de ensino (técnico)', $module), $busEducationArea->listEducationArea());
        $educationAreaId->setJsHint(_M('Selecione a área de ensino', $module));
        $fields[] = $educationAreaId;

        parent::defineFields($fields, $validators, $data);
        
        // Corrige problemas ao editar um requisito.
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $this->page->onLoad("
                document.getElementById('curriculumCourseId').value = '{$this->getFormValue('curriculumCourseId', $data->curriculumCourseId)}';
                document.getElementById('curriculumCourseName').value = '{$this->getFormValue('curriculumCourseName', $data->curriculumCourseName)}';
                document.getElementById('curriculumCourseVersion').value = '{$this->getFormValue('curriculumCourseVersion', $data->curriculumCourseVersion)}';
                document.getElementById('curriculumCourseUnitId').value = '{$this->getFormValue('curriculumCourseUnitId', $data->curriculumUnitId)}';
                document.getElementById('curriculumCourseUnitDescription').value = '{$this->getFormValue('curriculumCourseUnitDescription', $data->curriculumUnitDescription)}';
                document.getElementById('curriculumCourseTurnId').value = '{$this->getFormValue('curriculumCourseTurnId', $data->curriculumTurnId)}';
                document.getElementById('curriculumCourseTurnDescription').value = '{$this->getFormValue('curriculumCourseTurnDescription', $data->curriculumTurnDescription)}';
            ");
        }
    }
    
    /**
     * Retorna o campo de configuração de consideração das disciplinas
     * matriculadas para o cálculo de total de horas cursadas.
     * 
     * @param stdClass $args
     * @return string
     */
    public function campoConsiderarDiscMatric($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $fieldMV = " ";
        
        if ( strlen($args->numberHour) > 0 )
        {
            if ( is_double((double)$args->numberHour) || is_integer((int)$args->numberHour) )
            {
                $hint = _M("Considera para o cálculo de horas totais cursadas, as disciplinas matriculadas e que estiverem sendo matriculadas", $module);
                $fieldLabel = new MText('considerarDiscMatricLabel', _M('Considerar disciplinas matriculadas', $module) . ':');
                $fieldLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $fieldLabel->setClass('m-caption');
                $fieldLabel->addAttribute('style', 'float:right !important; text-align:right !important');
                $field = new MCheckBox('consideraDiscMatriculadas', DB_TRUE, null, ($args->consideraDiscMatriculadas == DB_TRUE), null, $hint);
                $fieldHC = new MHContainer('fieldHC', array($fieldLabel, $field));
                $fieldHC->addAttribute('style', 'margin-top:5px');
                $fieldMV = new MVContainer('fieldMV', array(new MSeparator(), $fieldHC));
            }
        }
        
        return $fieldMV;
    }

    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $businessCurriculum = new BusinessAcademicBusCurriculum();

        $filters1->courseId = MIOLO::_request('curriculumCourseId');
        $filters1->courseVersion = MIOLO::_request('curriculumCourseVersion');
        $filters1->curricularComponentId = MIOLO::_request('curriculumCurricularComponentId');
        $filters1->curricularComponentVersion = MIOLO::_request('curriculumCurricularComponentVersion');
        $filters1->courseUnitId = MIOLO::_request('curriculumCourseUnitId');
        $filters1->courseTurnId = MIOLO::_request('curriculumCourseTurnId');

        $data = $this->getTypesData();

        if ( strlen($data->curriculumId) > 0 )
        {
            if ($data->curricularComponentId == $data->conditionCurricularComponentId &&
                $data->curricularComponentVersion == $data->conditionCurricularComponentVersion)
            {
                $this->addError(_M('A disciplina não pode ter ela mesma como requisito.', $module));
            } 
            else if (strlen ($businessCurriculum->verificationCondition($data->curriculumId, $data->conditionCurriculumId, $data->type)) > 0)
            {
                $this->addError(_M('Este requisito já foi cadastrado.', $module));
            }
            else
            {
                try
                {
                    $business = new BusinessAcademicBusCondition();

                    if ( $function == 'update' )
                    {
                        $ok = $business->updateCondition($data);
                    }
                    else
                    {
                        $ok = $business->insertCondition($data);
                    }
                    
                    $this->confirmInsertUpdate($ok);
                }
                catch (Exception $e)
                {
                    $msg = _M('Erro executando a operação solicitada.',$module) . ' ' . $e->getMessage();
                    $goto = SAGU::getStackBackUrl();
                    $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                    $caption = _M('Erro',$module);
                    $MIOLO->error( $msg, $goto, $caption );
                }
            }
        }
        else
        {
            $this->addError(_M('Impossível encontrar o código do currículo de requisito correto para ', $module) . $data->curricularComponentId . '(' . $data->curricularComponentVersion . ') ' . _M('ou para', $module) . ' ' . $data->conditionCurriculumCurricularComponentId . '(' . $data->conditionCurriculumCurricularComponentVersion . ').');
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_request('function');

        $businessCurriculum = new BusinessAcademicBusCurriculum();

        $data = new AcdCondition();
        $data->conditionId = $this->conditionId->value;

        $filters1->courseId = $this->curriculumCourseId->value;
        $filters1->courseVersion = $this->curriculumCourseVersion->value;
        $filters1->curricularComponentId = $data->curricularComponentId = $this->curriculumCurricularComponentId->value;
        $filters1->curricularComponentVersion = $data->curricularComponentVersion = $this->curriculumCurricularComponentVersion->value;
        $filters1->unitId = $this->GetFormValue('curriculumCourseUnitId');
        $filters1->turnId = $this->curriculumCourseTurnId->value;

        $searchCurriculum = $businessCurriculum->searchCurriculum($filters1);

        $curriculumMsg = '';

        $curriculumId = $searchCurriculum[0][0];
        
        //$conditionCurriculumId
        $filters2->courseId = $this->curriculumCourseId->value;
        $filters2->courseVersion = $this->curriculumCourseVersion->value;
        $filters2->curricularComponentId = $data->conditionCurricularComponentId = $this->conditionCurriculumCurricularComponentId->value;
        $filters2->curricularComponentVersion = $data->conditionCurricularComponentVersion = $this->conditionCurriculumCurricularComponentVersion->value;
        $filters2->unitId = $this->curriculumCourseUnitId->value;
        $filters2->turnId = $this->curriculumCourseTurnId->value;
        
        if ( strlen($filters2->curricularComponentId) > 0 && strlen($filters2->curricularComponentVersion) > 0 )
        {
            $searchConditionalCurriculum = $businessCurriculum->searchCurriculum($filters2);
            $conditionCurriculumId = $searchConditionalCurriculum[0][0];
            
            $data->conditionCurriculumId = $conditionCurriculumId;/*$this->conditionCurriculumId->value;*/
        }
        
        $data->curriculumId = $curriculumId;/*$this->curriculumId->value;*/
        $data->form = $this->form->value;
        $data->type = $this->type->value;
        $data->credits = $this->credits->value;
        $data->numberHour = $this->numberHour->value;
        $data->consideraDiscMatriculadas = is_null($this->getFormValue('consideraDiscMatriculadas')) ? DB_FALSE : $this->getFormValue('consideraDiscMatriculadas');
        $data->educationAreaId = $this->educationAreaId->value;

        return $data;
    }
}
?>