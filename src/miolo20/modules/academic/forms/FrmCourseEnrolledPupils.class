<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * FrmCourseEnrolledPupils
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 11/01/2006
 *
 **/
class FrmCourseEnrolledPupils extends SForm
{
    public $periodId;
    public $unitId;
    public $courseId;
    public $courseVersion;
    public $turnId;
    
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();

        parent::__construct( _M('Listar alunos matriculados por curso',$module), NULL, NULL );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $MIOLO->session->setValue('periodId', MIOLO::_request('periodId'));
        $MIOLO->session->setValue('unitId', MIOLO::_request('unitId'));
        $MIOLO->session->setValue('courseId', MIOLO::_request('courseId'));
        $MIOLO->session->setValue('courseVersion', MIOLO::_request('courseVersion'));
        $MIOLO->session->setValue('turnId', MIOLO::_request('turnId'));
        $returnPath    = urldecode(stripslashes(MIOLO::_request('returnPath')));
        $returnData    = unserialize(urldecode(stripslashes(MIOLO::_request('returnData'))));

        //pesquisa os dados
        $business = new BusinessAcademicBusPupilListing();
        
        $data = $business->getCourseEnrolledPupils(
                $MIOLO->session->getValue('periodId'), 
                $MIOLO->session->getValue('unitId'), 
                $MIOLO->session->getValue('courseId'), 
                $MIOLO->session->getValue('courseVersion'), 
                $MIOLO->session->getValue('turnId')
        );

        if ( count($data) > 0 )
        {
            foreach ( $data as $row )
            {
                $emails[][0] = $row[3];
            }

            foreach ( $data as $key => $row )
            {
                $signature1[$key][0] = $row[1];
                $signature1[$key][1] = $row[2];
            }
        }

        //registrar em seção do miolo(aki)(daniel)

        $session   = $MIOLO->session;

        if ( !($session->IsRegistered('signature1')) )
        {
            $session->SetValue('signature1', serialize($signature1));

            $session->SetValue('emails', serialize($emails));

            $signature1 = $session->IsRegistered('signature1') ? unserialize($session->GetValue('signature1')) : null;

            $emails = $session->IsRegistered('emails') ? unserialize($session->GetValue('emails')) : null;
        }

        //cria os atalhos para emails e assinaturas
        $actionEmail = $MIOLO->getActionURL('basic', 'main:report:emailList', null, array('personId' => $personId));

        $optsSignature = array('event' => 'signatureList',
                               'periodId'=>$this->periodId);

        $actionSignature = $MIOLO->getActionURL($module, 'main:report:listcourseenrolledpupils', null, $optsSignature);

        $flds[] = new MOpenWindow('lnk1', _M('Lista de e-mail', $module), $actionEmail);
        $flds[] = new MSeparator();

        $flds[] = new MLink('lnk2', _M('Lista de assinaturas', $module), $actionSignature);
        $flds[] = new MSeparator();

        $bsg1        = new BaseGroup('bsg1', null, $flds, 'horizontal');
        $bsg1->width = '70%';
        $bsg1->align = 'center';
        $bsg1->addboxstyle('align', 'center');
        $div1        = new MDiv('div1', $flds, null, 'align=center');
        $fields[]    = $div1;
        unset($flds);
        
        $fields[] = $this->generateGrid();

        if ( strlen($returnPath) > 0 )
        {
            $fields[] = new Separator();
            $btn1     = new MButton('btnBack', _M('Voltar', $module), $MIOLO->getActionURL($module, $returnPath, null, array('filter' => urlencode(serialize($returnData['filter'])), 'reportOption' => $returnData['reportOption'])));
            $div1     = new MDiv('div1', $btn1, null, 'align=center');
            $fields[] = $div1;
            $fields[] = new Separator();
        }

        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators, 'toolbar' => FALSE ) );
    }

    public function signatureList()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $session   = $MIOLO->session;
        $signature1 = $session->IsRegistered('signature1') ? unserialize($session->GetValue('signature1')) : null;

        $emails = $session->IsRegistered('emails') ? unserialize($session->GetValue('emails')) : null;
    }
    
    /**
     * Cria a grid.
     * 
     * @return obj Grid
     */
    public function generateGrid()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //pesquisa os dados
        $business = new BusinessAcademicBusPupilListing();
        $data     = $business->getCourseEnrolledPupils(
                $MIOLO->session->getValue('periodId'), 
                $MIOLO->session->getValue('unitId'), 
                $MIOLO->session->getValue('courseId'), 
                $MIOLO->session->getValue('courseVersion'), 
                $MIOLO->session->getValue('turnId')
        );
        
        $grdResults = $MIOLO->getUI()->getGrid($module,'GrdListCourseEnrolledPupils', $data);
        $grdResults->setData($data);
        
        return $grdResults;
    }
    
    /**
     * Exporta os dados da grid para um arquivo PDF.
     */
    public function exportGridAsPDF_click()
    {
        $grid = $this->generateGrid();

        if ( isset($grid) )
        {
            parent::obterArrayComoPDF($this->getGridData($grid));
        }
    }
    
    /**
     * Exporta os dados da grid para uma planilha CSV.
     */
    public function exportGridAsCSV_click()
    {
        $grid = $this->generateGrid();

        if ( isset($grid) )
        {
            $data = MUtil::getArrayAsCSV($this->getGridData($grid));
            SAGU::returnAsFile('dados.csv', $data, 'text/csv');            
        }
    }
    
    /**
     * Exporta os dados da grid em HTML.
     */
    public function exportGridAsHTML_click()
    {
        $grid = $this->generateGrid();

        if ( isset($grid) )
        {
            $data = MUtil::getArrayAsHTML($this->getGridData($grid));
            SAGU::returnAsFile('dados.html', $data, 'text/html');
        }

        // Finaliza a execução. Como o HTML é gerado em nova janela, o exit aqui não é um problema.
        exit();
    }
    
    /**
     * Ajusta os dados da grid para as exportações.
     * 
     * @param obj $grid
     * @return array
     */
    public function getGridData($grid)
    {
        $titles = array();
        foreach ($grid->columns as $index => $c)
        {
            if ( $c->visible )
            {
                $titles[] = $c->title;
            }
            else
            {
                $invisibleColumns[] = $index;
            }
        }
        
        $data = $grid->getData();
        if ( !$data )
        {
            return;
        }

        $titleCount = count($titles);
        $visibleData = array();
        foreach ( $data as $line )
        {
            if ( $invisibleColumns )
            {
                // Remove invisible columns
                foreach ( $invisibleColumns as $index )
                {
                    unset( $line[$index] );
                }
            }
            
            $newLine = array_values(array_slice($line, 0, $titleCount));

            $visibleData[] = $newLine;
        }

        $titles = array_values( $titles );
        return array_merge( array($titles), $visibleData );
    }
}

?>
