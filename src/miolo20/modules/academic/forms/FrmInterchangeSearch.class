<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdInterchange table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 19/09/2005
 *
 **/

/**
 * Form to search the acdInterchange table
 */
class FrmInterchangeSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(null, new AcdInterchange(), array('interchangeId'), 'BusInterchange');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $limboS = new MHiddenField('limboS', '');
        $fields[] = $limboS;

        //Field interchanges
        $interchangeIdS = new MTextField('interchangeIdS', $this->getFormValue('interchangeIdS', $data->interchangeId), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $interchangeIdS->setJsHint(_M('Informe o código do intercâmbio', $module));
        $fields[] = $interchangeIdS;
        
        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personIdS     = new MLookupTextField('personIdS', $this->getFormValue('personIdS', $this->personIdS->value), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractIdS', 'personIdS', 'personNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS'), $module, 'PersonContract', null, null, !$this->page->isPostBack());
        $personIdS->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personIdS', _M('Pessoa', $module), 'optional');
        $personNameS = new MTextField('personNameS', $this->getFormValue('personNameS', $data->personNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personNameS->setJsHint(_M('Nome da pessoa', $module));
        $personNameS->setReadOnly(true);
        $hctPerson = new MHContainer('hctContract', array($personLabel, $personIdS, $personNameS));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        //Field contract
        $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractIdS = new MLookupTextField('contractIdS', $this->getFormValue('contractIdS',$data->contractIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personIdS', 'personNameS', 'contractCourseIdS', 'contractCourseNameS', 'contractCourseVersionS', 'contractTurnIdS', 'limboS', 'contractUnitIdS'), $module, 'Contract', null, array('personId' => 'personIdS'), true);
        $contractIdS->setJsHint(_M('Informe o código do contrato',$module));
        $validators[] = new MIntegerValidator('contractIdS', _M('Contrato',$module), 'optional');
        $contractCourseIdS = new MTextField('contractCourseIdS', $this->getFormValue('contractCourseIdS',$data->contractCourseIdS),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseIdS->setReadOnly(true);
        $contractCourseIdS->setJsHint(_M('Curso',$module));
        $contractCourseVersionS = new MTextField('contractCourseVersionS', $this->getFormValue('contractCourseVersionS',$data->contractCourseVersionS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersionS->setReadOnly(true);
        $contractCourseVersionS->setJsHint(_M('Versão do curso',$module));
        $contractCourseNameS = new MTextField('contractCourseNameS', $this->getFormValue('contractCourseNameS',$data->contractCourseNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseNameS->setReadOnly(true);
        $contractCourseNameS->setJsHint(_M('Nome do curso',$module));
        $hctContract = new MHContainer('hctContract', array($contractLabel, $contractIdS, $contractCourseVersionS, $contractCourseNameS));
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;

        //Field Turn
        $fields[]  = new MHiddenField('contractTurnIdS', $this->getFormValue('contractTurnIdS', $contractTurnIdS));

        //Field unit
        $fields[]  = new MHiddenField('contractUnitIdS', $this->getFormValue('contractUnitIdS', $contractUnitId));

        //Field interchange tipe
        $business           = new BusinessAcademicBusInterchangeType();
        $interchangeTypeIdS = new MComboBox('interchangeTypeIdS', $this->getFormValue('interchangeTypeIdS', $data->interchangeTypeIdS), _M('Tipo de intercâmbio', $module), $business->listInterchangeType());
        $interchangeTypeIdS->setJsHint(_M('Informe o código do tipo de intercâmbio',$module));
        $fields[]           = $interchangeTypeIdS;
        $validators[]        = new MIntegerValidator('interchangeTypeIdS');

        //Field interchange complement
        $interchangeTypeComplementS = new MTextField('interchangeTypeComplementS', $this->getFormValue('interchangeTypeComplementS', $data->interchangeTypeComplementS->value), _M('Complemento do tipo de intercâmbio',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $interchangeTypeComplementS->setJsHint(_M('Informe o tipo de intercâmbio',$module));
        $fields[] = $interchangeTypeComplementS;

        //Field interchange activity
        $activityInterchangeS = new MTextField('activityInterchangeS', $this->getFormValue('activityInterchangeS', $data->activityInterchangeS->value), _M('Atividade realizada',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $activityInterchangeS->setJsHint(_M('Informe a atividade realizada',$module));
        $fields[] = $activityInterchangeS;

        //Field begin date
        $beginDateS = new MCalendarField('beginDateS', $this->beginDateS->value, _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDateS->setJsHint(_M('Informe a data inicial', $module));
        $validators[] = new MDATEDMYValidator('beginDateS', '', 'optional');
        $fields[] = $beginDateS;

        //Field end date
        $endDateS = new MCalendarField('endDateS', $this->endDateS->value, _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDateS->setJsHint(_M('Informe a data final', $module));
        $validators[] = new MDATEDMYValidator('endDateS', '', 'optional');
        $fields[] = $endDateS;
        
        //Field origin country
        $originCountryLabelS = new MText('originCountryLabelS', _M('País de origem', $module) . ':');
        $originCountryLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $originCountryIdS = new MLookupTextField('originCountryIdS', $this->originCountryIdS->value, _M('País de origem', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'originCountryNameS', 'basic', 'Country', null, null, true);
        $originCountryIdS->setJsHint(_M('Informe o código do país de origem', $module));
        $validators[] = new MRequiredValidator('originCountryIdS', '', 'optional');
        $originCountryNameS = new MTextField('originCountryNameS', $this->originCountryNameS->value, _M('Nome do país de origem', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $originCountryNameS->setJsHint(_M('Nome do país de origem', $module));
        $originCountryNameS->setReadOnly(true);
        $hctOriginCountryS = new MHContainer('hctOriginCountryS', array($originCountryLabelS, $originCountryIdS, $originCountryNameS));
        $hctOriginCountryS->setShowLabel(false);
        $fields[] = $hctOriginCountryS;

        //Field origin institutional
        $originInstitutionLabelS = new MText('originInstitutionLabelS', _M('Instituição de origem', $module) . ':');
        $originInstitutionLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $originInstitutionIdS = new MLookupTextField('originInstitutionIdS', $this->originInstitutionIdS->value, _M('Instituição de origem', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'originInstitutionNameS', 'basic', 'LegalPersonInstitution', null, array('countryId' => 'originCountryIdS'), true);
        $originInstitutionIdS->setJsHint(_M('Informe o código da instituição de origem', $module));
        $validators[] = new MIntegerValidator('originInstitutionIdS', _M('Instituição de origem', $module), 'optional');
        $originInstitutionNameS = new MTextField('originInstitutionNameS', $this->originInstitutionNameS->value, _M('Nome da instituição de origem', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $originInstitutionNameS->setJsHint(_M('Nome da instituição de origem', $module));
        $originInstitutionNameS->setReadOnly(true);       
        $hctOriginInstitutionS = new MHContainer('hctOriginInstitutionS', array($originInstitutionLabelS, $originInstitutionIdS, $originInstitutionNameS));
        $hctOriginInstitutionS->setShowLabel(false);
        $fields[] = $hctOriginInstitutionS;

        //Field destination country
        $destinationCountryLabelS = new MText('destinationCountryLabelS', _M('País de destino', $module) . ':');
        $destinationCountryLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationCountryIdS = new MLookupTextField('destinationCountryIdS', $this->destinationCountryIdS->value, _M('País de destino', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'destinationCountryNameS', 'basic', 'Country', null, null, true);
        $destinationCountryIdS->setJsHint(_M('Informe o código do país de destino', $module));
        $validators[] = new MRequiredValidator('destinationCountryIdS', '', 'optional');
        $destinationCountryNameS = new MTextField('destinationCountryNameS', $this->destinationCountryNameS->value, _M('Nome do país de destino', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationCountryNameS->setJsHint(_M('Nome do país',$module));
        $destinationCountryNameS->setReadOnly(true);
        $hctDestinationCountryS = new MHContainer('hctDestinationCountryS', array($destinationCountryLabelS, $destinationCountryIdS, $destinationCountryNameS));
        $hctDestinationCountryS->setShowLabel(false);
        $fields[] = $hctDestinationCountryS;

        //Field destination institutional
        $destinationInstitutionLabelS = new MText('destinationInstitutionLabelS', _M('Instituição de destino', $module) . ':');
        $destinationInstitutionLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationInstitutionIdS = new MLookupTextField('destinationInstitutionIdS', $this->destinationInstitutionIdS->value, _M('Instituição de destino', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'destinationInstitutionNameS', 'basic', 'LegalPersonInstitution', null, array('countryId' => 'destinationCountryIdS'), true);
        $destinationInstitutionIdS->setJsHint(_M('Informe o código da instituição de destino', $module));
        $validators[] = new MIntegerValidator('destinationInstitutionIdS', _M('Instituição de destino',$module), 'optional');
        $destinationInstitutionNameS = new MTextField('destinationInstitutionNameS', $this->destinationInstitutionNameS->value, _M('Nome da instituição de destino', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationInstitutionNameS->setJsHint(_M('Nome da instituição de destino',$module));
        $destinationInstitutionNameS->setReadOnly(true);
        $hctDestinationInstitutionS = new MHContainer('hctDestinationInstitutionS', array($destinationInstitutionLabelS, $destinationInstitutionIdS, $destinationInstitutionNameS));
        $hctDestinationInstitutionS->setShowLabel(false);
        $fields[] = $hctDestinationInstitutionS;

        //Field is remuneration
        $isRemuneratedLabelS = new MText('isRemuneratedLabelS', _M('É remunerado',$module).':');
        $isRemuneratedLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isRemuneratedS = new MRadioButtonGroup('isRemuneratedS', null, SAGU::listTrueFalse(1), $this->isRemuneratedS->value, null, 'horizontal');
        $isRemuneratedS->setShowLabel(false);
        $hctIsRemunerated = new MHContainer('hctIsRemunerated', array($isRemuneratedLabelS, $isRemuneratedS));
        $fields[] = $hctIsRemunerated;

        parent::defineFields($fields, $module, 'GrdInterchangeSearch', $validators);
    }
}
?>
