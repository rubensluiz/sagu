<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * ScholarshipDescription form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Cristian Edson Göhl [cristian@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 **/

/**
 * Form to manipulate a scholarshipDescription
 **/
class FrmScholarshipDescription extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct( _M('Relatório', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $MIOLO->page->addScript(SAGU::ABSOLUTE_URL_JS_FILES . 'sagu.js');
        
        $businessStamp = new BusinessBasicBusStamp();
        $stampData     = $businessStamp->listStamp();

        $fields[] = new MHiddenField('limbo', '');
        $MIOLO->getClass( 'academic', 'lookupContract' );
        $filters = new stdClass();
        $filters->contractId = MIOLO::_request('contractId');
        $fields[] = new SLookupContract('contractId', $filters);
        
        $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module));
        
        $reportTypesLabel = new MText('reportTypeLabel', _M('Tipo de relatório', $module) . ':');
        $reportTypesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $reportTypes = array( array(_M('Graduação', $module), 1),
                              array(_M('Técnico', $module), 2) );

        if ( !strlen($data->scholarshipType) > 0 )
        {
            $data->scholarshipType = 1;
        }

        $scholarshipType = new MRadioButtonGroup('scholarshipType', '', $reportTypes, $this->getFormValue('scholarshipType', $data->scholarshipType), '', 'Vertical');
        $scholarshipType->setShowLabel(false);
        $scholarshipType->setAutoPostBack(true);
        $hctScholarshipType = new MHContainer('hctSholershipType', array($reportTypesLabel, $scholarshipType));
        $fields[] = $hctScholarshipType;
        
        if ( ($this->getFormValue('scholarshipType', $data->scholarshipType)) == 1 )
        {      

            $reportOptionLabel = new MText('reportOptionLabel', _M('Opção de relatório', $module) . ':');
            $reportOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $print0_opt = array( array(_M('Anexo de atividades complementares', $module), 1),
                                 array(_M('Atividades complementares discriminadas', $module), 2) );

            $print0 = $this->getFormValue('print0', $data->print0) ? $this->getFormValue('print0', $data->print0) : 2;
            $print0 = new MRadioButtonGroup('print0', '', $print0_opt, $print0, '', 'vertical');
            $print0->setShowLabel(false);

            $business = new BusinessAcademicBusScholarshipDescription();
            $data1 = unserialize($business->getSavedOptions());

            if ( (is_array($data1)) || (is_object($data1)) )
            {
                foreach ( $data1 as $key => $line )
                {
                    $data->$key = $line;
                }
            }
         
            //Field print curricular component substituted
            $print1 = new MCheckBox('print1', 1, '', $this->getFormValue('print1', $data->print1),_M(' Imprimir disciplinas substituídas', $module));
            
            //Field print exploitations details
            $print15 = new MCheckBox('print15', 1, '', $this->getFormValue('print15', $data->print15),_M(' Imprimir detalhes de aproveitamentos', $module));
            
            //Field print dismissal physical education
            $print4_1 = new MCheckBox('print4', 4, '', $this->getFormValue('print4', $data->print4), _M(' Imprimir o texto: Dispensa de educação física', $module));
            $print4_2 = new MTextField('print4T', !$this->getFormValue('print4T', $data->print4T) ? SAGU::getParameter('ACADEMIC', 'REPORT_SCHOLARSHIP_DESCRIPTION_DISMISS_PHYSICAL_EDUCATION') : $this->getFormValue('print4T', $data->print4T), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $print4_2->setJsHint(_M('Informe a dispensa de educação física', $module));
            $print4 = new MHContainer('hctPrint4', array($print4_1, $print4_2));

            //Field print "Not coursed" on not coursed disciplines
            $print5 = new MCheckBox('print5', 5, '', $this->getFormValue('print5', $data->print5), _M(' Imprimir "Não cursada" em disciplinas não cursadas', $module));
            
            //Field print other coursed disciplines
            $print6 = new MCheckBox('print6', 6, '', $this->getFormValue('print6', $data->print6), _M(' Imprimir outras disciplinas cursadas', $module));

            //Field don\'t print disciplines of concluded course
            $print10_1 = new MCheckBox('print10', 10, '', $this->getFormValue('print10', $data->print10), _M(' Não imprimir disciplinas de cursos concluídos', $module));
            $print10_2 = new MTextField('print10T', $this->getFormValue('print10T', $data->print10T), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $print10 = new MHContainer('hctPrint10', array($print10_1, $print10_2));
            
            //Field print Emends Date (Mathematics and Biology)
            $print11 = new MCheckBox('print11', 11, '', $this->getFormValue('print11', $data->print11), _M(' Imprimir Data da Apostila (Matemática e Biologia)', $module));

            //Field print pupil is not sub-judicial
            $print9_1 = new MCheckBox('print9', 9, '', $this->getFormValue('print9', $data->print9), _M(' Aluno não está sub-júdice', $module));
            $print9_2 = new MTextField('print9T', $this->getFormValue('print9T', $data->print9T), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $print9_2->setJsHint('Enter the pupil is not sub-judicial', $module);
            $print9 = new MHContainer('hctPrint9', array($print9_1, $print9_2));

            //Field print show credits column
            $print7 = new MCheckBox('print7', 7, '', $this->getFormValue('print7', $data->print7), _M(' Exibir coluna de créditos', $module));
        
            //Field print sum complementary activities hours
            $print16 = new MCheckBox('print16', 16, '', $this->getFormValue('print16', $data->print16), _M(' Somar horas relativas a atividades complementares', $module));

            //Field print is it final resume
            $print8 = new MCheckBox('print8', 8, '', $this->getFormValue('print8', $data->print8), _M(' É documento final', $module));
            
            //Field print observation
            $print130 = new MTextLabel('print130', _M('Observação:', $module));
            $print130->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $print130->setClass('m-caption');
            $print130->addAttribute('style', 'text-align: left;');            
            $print13 = new MMultilineField('print13', $this->getFormValue('print13', $data->print13), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), 5, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $print13->addAttribute('style', 'float: left; clear: both;');
            
            //Field print sector
            $print140 = new MTextLabel('print130', _M('Setor:', $module));
            $print140->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $print140->setClass('m-caption');
            $print140->addAttribute('style', 'text-align: left;');
            $print14 = new MTextField('print14', $this->getFormValue('print14', $data->print14), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $print14->addAttribute('style', 'float: left; clear: both;');
            
            //Field print save choosed options
            $data->print12 = false;
            $print12 = new MCheckBox('print12', 12, '', $this->getFormValue('print12', $data->print12), '<b>' . _M('Gravar opções escolhidas', $module) . '</b>');

            $vctPrint = new MVContainer('vctPrint', array($print0, $print1, $print15, $print4, $print5, $print6, $print10, $print11, $print9, $print7, $print16, $print8, $print130, $print13, $print140, $print14, $print12));
            $hctPrint = new MHContainer('hctPrint0', array($reportOptionLabel, $vctPrint));
            $fields[] = $hctPrint;
        }
        else
        {
            //Field institutional
            $institution = new MTextField('institution', $this->getFormValue('institution', $data->institution), _M('Instituição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $institution->setJsHint(_M('Informe a instituição', $module));
            
            //Field mantainer
            $mantainer = new MTextField('mantainer', $this->getFormValue('mantainer', $data->mantainer), _M('Mantenedor', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $mantainer->setJsHint(_M('Informe o mantededor', $module));
            
            //Field working auth
            $workingAuth = new MTextField('workingAuth', $this->getFormValue('workingAuth', $data->workingAuth), _M('Autorização de funcionamento', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $workingAuth->setJsHint(_M('Informe a autorização de funcionamento', $module));
            
            //Field working auth date
            $workingAuthDate = new MCalendarField('workingAuthDate', strlen($this->getFormValue('workingAuthDate', $data->workingAuthDate))>0 ? $this->getFormValue('workingAuthDate', $data->workingAuthDate) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data de autorização de funcionamento', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $workingAuthDate->setJsHint(_M('Informe a data da autorização de funcionamento', $module));
            $validators[] = new DateDMYValidator('workingAuthDate', null, 'optional');
            
            //Field changing resolution
            $changingRes = new MTextField('changingRes', $this->getFormValue('changingRes', $data->changingRes), _M('Resolução de alteração', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $changingRes->setJsHint(_M('Informe a resolução de alteração', $module));
            
            //Field regional coordenator
            $regionalCoord = new MTextField('regionalCoord', $this->getFormValue('regionalCoord', $data->regionalCoord), _M('Coordenação regional de educação', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $regionalCoord->setJsHint(_M('Informe o coordenador regional de educação', $module));
            
            //Field federal law
            $federalLaw = new MTextField('federalLaw', $this->getFormValue('federalLaw', $data->federalLaw), _M('Lei federal', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $federalLaw->setJsHint(_M('Informe a lei federal', $module));
            
            //Field auth sector
            $authSector = new MTextField('authSector', $this->getFormValue('authSector', $data->authSector), _M('Setor de autenticação', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $authSector->setJsHint(_M('Informe o setor de autenticação', $module));
            
            $vctPrint = new MVContainer('vctPrint', array($institution, $mantainer, $workingAuth, $workingAuthDate, $changingRes, $regionalCoord, $federalLaw, $authSector));
            $hctPrint = new MHContainer('hctPrint0', array($reportOptionLabel, $vctPrint));
            $fields[] = $hctPrint;
        }

        //ordem das disciplinas(alfabética ou semestre)
        $orderByLabel = new MText('orderByLabel', _M('Ordenar disciplinas por', $module) . ':');
        $orderByLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $reportTypes = array(
                              array(_M('Semestre, ordem alfabética', $module), 1),
                              array(_M('Ordem alfabética, semestre', $module), 2) 
                             );

        if ( !strlen($data->orderBy) > 0 )
        {
            $data->orderBy = 2;
        }

        $orderBy = new MRadioButtonGroup('orderBy', '', $reportTypes, $this->getFormValue('orderBy', $data->orderBy), '', 'Vertical');
        $orderBy->setShowLabel(false);
        $hctOrderBy = new MHContainer('hctOrderBy', array($orderByLabel, $orderBy));
        $fields[] = $hctOrderBy;

        //Field stamp 1
        $stamp1 = new MComboBox('stamp1', $this->getFormValue('stamp1', $data->stamp1), _M('Carimbo 1', $module),  $stampData);
        $stamp1->setJsHint(_M('Selecione um carimbo', $module));
        $fields[] = $stamp1;

        $stamp2 = new MComboBox('stamp2', $this->getFormValue('stamp2', $data->stamp2), _M('Carimbo 2', $module), $stampData);
        $stamp2->setJsHint(_M('Selecione um carimbo', $module));
        $fields[] = $stamp2;
               
        $fields[] = new MHiddenField('turnId', $this->getFormValue('turnId', $data->turnId));
        $fields[] = new MHiddenField('unitId', $this->getFormValue('unitId', $data->unitId));

        //Field emission type
        $emissionDate = new MCalendarField('emissionDate', strlen($this->getFormValue('emissionDate', $data->emissionDate))>0 ? $this->getFormValue('emissionDate', $data->emissionDate) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data de emissão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão', $module));
        $fields[] = $emissionDate;
        $validators[] = new DateDMYValidator('emissionDate', null, 'required');
        
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }
    
    /**
     * Method to get data and generate the report
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data   = $this->getTypesData();
        $data->ignoreDebits   = MIOLO::_request('ignoreDebits');

        $havePermission = false;
        $fildsPopulate  = true;
        
        if ( !$data->contractId )
        {   
            $this->AddError(_M("Erro ao executar a operação solicitada. Verifique se os campos foram preenchidos corretamente.", $module));
            $fildsPopulate = false;
        }
            
        if ( $fildsPopulate )
        {
            if ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') && (strtoupper(SAGU::getParameter('BASIC', 'WARNING_IF_DEFAULTER')) == 'TRUE') )
            {            
                if ( $data->ignoreDebits != 'yes' )
                {
                    $business = new BusinessFinanceBusGeneralQueries();
                    $businessContract = new BusinessAcademicBusContract();

                    $debt = $business->getDefaulterDebt($data->contractId, false);
                    $debt = strlen($debt) > 0 ? $debt : 0;

                    //Verifica se o aluno possui débitos financeiros
                    if ( $debt > 0 )
                    {
                        $this->addError(_M('O sistema detectou uma dívida com a instituição. Por favor, verifique com o setor financeiro.', $module));

                        $contract = $businessContract->getContract($data->contractId);
                        $matricula = new Matricula($data->contractId, Matricula::MATRICULA_NORMAL);
                        $enrollConfig = $matricula->obterConfiguracoes();

                        if ( $MIOLO->checkAccess('FrmScholarshipDescription', A_ADMIN, false, true) || $enrollConfig->blockDebt == DB_FALSE)
                        {
                            $this->addField(new MHiddenField('ignoreDebits','yes'));

                            $this->addError(_M('Se desejar continuar mesmo assim, clique no botão "Imprimir" abaixo.', $module));
                        }
                    }
                    else 
                    {
                        $havePermission = true;
                    }
                }
                else 
                {
                    $havePermission = true;
                }
            }
            else 
            {
                $havePermission = true;
            }

            try
            {
                if ( $havePermission )
                {
                    $business = new BusinessAcademicBusScholarshipDescription();

                    if ( $data->print12 )
                    {
                        foreach ( $data as $key => $line )
                        {
                            if ( substr($key,0,5) == 'print' )
                            {
                                $data1->$key = stripslashes($line);
                            }
                        }

                        if ( count($data1) > 0 )
                        {
                            $business->saveOptions(serialize($data1));
                        }
                    }

                    if ( $business->testIsListener($data->contractId) == DB_TRUE )
                    {
                        $msg  = _M('Não é possível emitir histórico para aluno ouvinte.',$module);
                        throw new Exception($msg);
                    }
                    else
                    {
                        if ( $data->scholarshipType == 1 )
                        {
                            $MIOLO->getClass($module, 'RptScholarshipDescription');
                            $report = new RptScholarshipDescription($data);
                        }
                        else
                        {
                            $busCourse  = new BusinessAcademicBusCourse();
                            $courseData = $busCourse->getCourse($data->contractCourseId);

                            if ( $courseData->formationLevelId == SAGU::getParameter('ACADEMIC', 'TECHNICIAN_FORMATION_LEVEL') )
                            {
                                $MIOLO->getClass($module, 'RptScholarshipDescriptionTech');
                                $report = new RptScholarshipDescriptionTech($data);
                            }
                            else
                            {
                                $msg = _M('Para visualizar este relatório você deve selecionar um curso técnico.', $module);
                                throw new Exception($msg);
                            }
                        }
                    }
                }
            }
            catch ( Exception $e )
            {
                $this->AddError($e);
            }
        }
    }
    
    /**
     * Method to get data information when the form is submitted
     **/
    public function getTypesData()
    {
        $data->contractPersonId      = $this->getFormValue('contractPersonId');
        $data->contractPersonName    = $this->getFormValue('contractPersonName');
        $data->contractCourseId      = $this->getFormValue('contractCourseId');
        $data->contractCourseVersion = $this->getFormValue('contractCourseVersion');
        $data->contractCourseName    = $this->getFormValue('contractCourseName');
        $data->contractId            = $this->getFormValue('contractId');
        $data->emissionDate          = $this->getFormValue('emissionDate');
        $data->unitId                = $this->getFormValue('unitId');
        $data->turnId                = $this->getFormValue('turnId');
        
        $data->scholarshipType        = $this->getFormValue('scholarshipType');
        
        $data->print0  = $this->getFormValue('print0');
        $data->print1  = $this->getFormValue('print1');
        $data->print2  = $this->getFormValue('print2');
        $data->print3  = $this->getFormValue('print3');
        $data->print4  = $this->getFormValue('print4');
        $data->print4T = $this->getFormValue('print4T');
        $data->print5  = $this->getFormValue('print5');
        $data->print6  = $this->getFormValue('print6');
        $data->print7  = $this->getFormValue('print7');
        $data->print8  = $this->getFormValue('print8');
        $data->print9  = $this->getFormValue('print9');
        $data->print9T = $this->getFormValue('print9T');
        $data->print10 = $this->getFormValue('print10');
        $data->print10T= $this->getFormValue('print10T');
        $data->print11 = $this->getFormValue('print11');
        $data->print12 = $this->getFormValue('print12');
        $data->print13 = $this->getFormValue('print13');
        $data->print14 = $this->getFormValue('print14');
        $data->print15 = $this->getFormValue('print15');
        $data->print16 = $this->getFormValue('print16');
        $data->stamp1  = $this->getFormValue('stamp1');
        $data->stamp2  = $this->getFormValue('stamp2');
        $data->orderBy = $this->getFormValue('orderBy');
        
        $data->institution     = $this->getFormValue('institution');
        $data->mantainer       = $this->getFormValue('mantainer');
        $data->workingAuth     = $this->getFormValue('workingAuth');
        $data->workingAuthDate = $this->getFormValue('workingAuthDate');
        $data->changingRes     = $this->getFormValue('changingRes');
        $data->regionalCoord   = $this->getFormValue('regionalCoord');
        $data->federalLaw      = $this->getFormValue('federalLaw');
        $data->authSector      = $this->getFormValue('authSector');

        return $data;
  }
}

?>
