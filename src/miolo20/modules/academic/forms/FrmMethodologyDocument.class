<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Methodology document form
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 29/05/2006
 */

/**
 * Form to manipulate a contract document
 */
class FrmMethodologyDocument extends SForm
{
    private $home;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Metodologia', $module), NULL, NULL );

        set_time_limit(0);
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $fields[] = new MHiddenField('limbo');

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), _M('Código da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array(/*'contractId', 'personId', */'personName'/*, 'courseId', 'courseName', 'courseVersion', 'limbo', 'limbo', 'unitId'*/), 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa'), $module);
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;

        //Field course
        $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseLabel->setClass('m-caption m-caption-required');
        $courseId     = new MLookupTextField('courseId', $this->getFormValue('courseId', $this->courseId->value), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('courseId', 'courseVersion', 'courseName', 'turnId', 'limbo', 'unitId', 'limbo'), $module, 'CourseOccurrence', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion'), !$this->page->isPostBack());
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $courseId->setJsHint(_M('Informe o código do curso', $module));
        $courseName = new MTextField('courseName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso',$module));
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $this->courseVersion->value), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setJsHint(_M('Informe a versão do curso', $module));
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        //Field learning period
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$this->learningPeriodId->value), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('limbo', 'courseId', 'courseVersion', 'limbo' , 'unitId', 'learningPeriodDescription', 'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' ,'limbo' , 'courseName'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[]     = new MRequiredValidator('learningPeriodId', _M('Período letivo',$module), 'required');
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $this->learningPeriodDescription->value), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $fields[]          = $hctLearningPeriod;

        //Field unit
        $business     = new BusinessBasicBusUnit();
        $unitId       = new MComboBox('unitId', $this->getFormValue('unitId', $this->unitId->value), _M('Unidade',$module), $business->listUnit());
        $unitId->setJsHint(_M('Selecione uma unidade', $module));
        $validators[] = new MRequiredValidator('unitId');
        $fields[]     = $unitId;

        //Field money value
        $moneyValueLabel = new MText('moneyValueLabel', _M('Valor', $module) . ':');
        $moneyValueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $moneyValue      = new MTextField('moneyValue', '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Ex.: 1.00', $module));
        $moneyValue->setJsHint(_M('Informe o valor', $module));
        $validators[] = new MFloatValidator('moneyValue');
        $hctValue = new MHContainer('hctValue', array($moneyValueLabel, $moneyValue));
        $hctValue->setShowLabel(false);
        $fields[]  = $hctValue;

        //Field parcels
        $parcelsLabel = new MText('parcelsLabel', _M('Parcelas', $module) . ':');
        $parcelsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parcels      = new MTextField('parcels', '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parcels->setJsHint(_M('Informe o número de parcelas', $module));
        $hctParcels = new MHContainer('hctParcels', array($parcelsLabel, $parcels));
        $hctParcels->setShowLabel(false);
        $fields[]   = $hctParcels;

        //Field duration
        $durationLabel = new MText('durationLabel', _M('Duração',$module) . ':');
        $durationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $selMonth = new MSelection('selMonth', $this->getFormValue('selMonth',$currDate['mon']), _M('Duração',$module), SAGU::listMonths());
        $selMonth->setJsHint(_M('Selecione o mês de início'));
        $lastLabel = new MText('lastLabel', _M('De',$module));
        $selYear = new MSelection('selYear', $this->getFormValue('selYear', $currDate['mon']), _M('Duração',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $selYear->setJsHint(_M('Selecione o ano de início', $module));
        $middleLabel = new MText('middleLabel', _M('Até',$module));
        $selMonth1 = new MSelection('selMonth1', $this->getFormValue('selMonth1',$currDate['mon']), _M('Duração',$module), SAGU::listMonths());
        $selMonth1->setJsHint(_M('Selecione o mês de fim', $module));
        $lastLabel1 = new MText('lastLabel1', _M('De',$module));
        $selYear1 = new MSelection('selYear1', $this->getFormValue('selYear1', $currDate['mon']), _M('Duração',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $selYear1->setJsHint(_M('Selecione o ano de fim', $module));
        $hctDuration = new MHContainer('hctDuration', array($durationLabel, $selMonth, $lastLabel, $selYear, $middleLabel, $selMonth1, $lastLabel1, $selYear1));
        $hctDuration->setShowLabel(false);
        $fields[]    = $hctDuration;
        unset($flds);

        //Field next parcels
        $nextParcelsLabel = new MText('nextParcelsLabel', _M('Próxima parcela começa em', $module) . ':');
        $nextParcelsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $nextParcelMonth = new MSelection('nextParcelMonth', $this->getFormValue('nextParcelMonth',$currDate['mon']), _M('Expiração',$module), SAGU::listMonths());
        $nextParcelMonth->setJsHint(_M('Selecione o mês da próxima parcela', $module));
        $lastLabel1 = new MText('lastLabel', _M('De',$module));
        $nextParcelYear = new MSelection('nextParcelYear', $this->getFormValue('nextParcelYear',$currDate['mon']), _M('Expiração',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $nextParcelYear->setJsHint(_M('Selecione o ano da próxima parcela', $module));
        $hctNextParcels = new MHContainer('hctNextParcels', array($nextParcelsLabel, $nextParcelMonth, $lastLabel1, $nextParcelYear));
        $hctNextParcels->setShowLabel(false);
        $fields[]       = $hctNextParcels;

        //Field expiration date
        $expirationDateLabel = new MText('expirationDateLabel', _M('Expiração da primeira parcela', $module) . ':');
        $expirationDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $expirationDateLabel->setClass('m-caption m-caption-required');
        $expirationDate = new MCalendarField('expirationDate', strlen($this->getFormValue('expirationDate'))>0 ? $this->getFormValue('expirationDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $expirationDate->setJsHint(_M('Informe a data de vencimento da primeira parcela', $module));
        $validators[] = new DateDMYValidator('expirationDate', null, 'required');
        $hctEnroll = new MHContainer('hctEnroll', array($expirationDateLabel, $expirationDate));
        $hctEnroll->setShowLabel(false);
        $fields[]  = $hctEnroll;

        //Field date cencellation
        $dateCancellationLabel = new MText('dateCancellationLabel', _M('Data limite de cancelamento',$module) . ':');
        $dateCancellationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dateCancellation = new MCalendarField('dateCancellation', strlen($this->getFormValue('dateCancellation'))>0 ? $this->getFormValue('dateCancellation') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateCancellation->setJsHint(_M('Informe a data limite de cancelamento'), $module);
        $validators[] = new DateDMYValidator('dateCancellation', null, 'required');
        $hctDateCancellation = new MHContainer('hctDateCancellation', array($dateCancellationLabel, $dateCancellation));
        $hctDateCancellation->setShowLabel(false);
        $fields[]            = $hctDateCancellation;

        //Field rad option file type
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType', 'pdf'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     */
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO                  = MIOLO::getInstance();
        $module                 = MIOLO::getCurrentModule();
        $action                 = MIOLO::getCurrentAction();

        $cd->contractId         = MIOLO::_request('contractId');
        $cd->personId           = MIOLO::_request('personId');
        $cd->courseId           = MIOLO::_request('courseId');
        $cd->courseName         = MIOLO::_request('courseName');
        $cd->courseVersion      = MIOLO::_request('courseVersion');
        $cd->unitId             = MIOLO::_request('unitId');
        $cd->learningPeriodId   = MIOLO::_request('learningPeriodId');
        $cd->selectiveProcessId = MIOLO::_request('selectiveProcessId');
        $cd->fileType           = MIOLO::_request('radFileType');
        $cd->optionId           = MIOLO::_request('radOption');
        $cd->monthDuration      = MIOLO::_request('selMonth');
        $cd->yearDuration       = MIOLO::_request('selYear');
        $cd->monthDuration1     = MIOLO::_request('selMonth1');
        $cd->yearDuration1      = MIOLO::_request('selYear1');
        $cd->moneyValue         = MIOLO::_request('moneyValue');
        $cd->parcels            = MIOLO::_request('parcels');
        $cd->expirationDate     = MIOLO::_request('expirationDate');
        $cd->nextParcelMonth    = MIOLO::_request('nextParcelMonth');
        $cd->nextParcelYear     = MIOLO::_request('nextParcelYear');
        $cd->dateCancellation   = MIOLO::_request('dateCancellation');

        set_time_limit(0);

        try
        {
            $businessContractDocument = new BusinessAcademicBusContractDocument();

            $data = $businessContractDocument->getMethodologyContractDocument($cd);

            $businessCompany = new BusinessBasicBusCompany();
            $company         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

            $businessLegalPerson = new BusinessBasicBusLegalPerson();
            $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

            $businessCity = new BusinessBasicBusCity();
            $city         = $businessCity->getCity($legalPerson->cityId);

            $businessCountry = new BusinessBasicBusCountry();
            $country         = $businessCountry->getCountry($city->countryId);

            if ( count($data) > 0 )
            {
                $MIOLO->uses('/core/AgataAPI.class');

                $api = new AgataAPI;

                $api->setParameter('$courseName', $cd->courseName);
                $api->setParameter('$companyId', $company->companyId);
                $api->setParameter('$companyName', $company->name);
                $api->setParameter('$companyTypeDescription', $company->companyTypeDescription);
                $api->setParameter('$cnpj', $legalPerson->cnpj);
                $api->setParameter('$fakeName', $legalPerson->fakeName);
                $api->setParameter('$companyCity', $city->name);
                $api->setParameter('$companyStateId', $city->stateId);
                $api->setParameter('$companyLocation', $legalPerson->location);
                $api->setParameter('$companyNumber', $legalPerson->number);
                $api->setParameter('$acronym', $company->acronym);
                $api->setParameter('$currencySymbol', $country->currencySymbol);
                $api->setParameter('$monthDuration1', SAGU::getMonth($cd->monthDuration1));
                $api->setParameter('$yearDuration1', $cd->yearDuration1);
                $api->setParameter('$monthDuration', SAGU::getMonth($cd->monthDuration));
                $api->setParameter('$yearDuration', $cd->yearDuration);

                if ( strlen($cd->moneyValue) > 0 )
                {
                    $api->setParameter('$descriptionMoney', SAGU::getExtensiveNumber(SAGU::formatNumber($cd->moneyValue), 'REAL', 'REAIS'));
                }
                else
                {
                    $api->setParameter('$descriptionMoney', '');
                }

                $api->setParameter('$moneyValue', $cd->moneyValue);

                if ( (strlen($cd->moneyValue) > 0) && (strlen($cd->parcels) > 0) )
                {
                    $api->setParameter('$parcelsValue', SAGU::calcNumber(SAGU::formatNumber($cd->moneyValue).'/'.SAGU::formatNumber($cd->parcels), true));
                    $api->setParameter('$descriptionParcelsValue', SAGU::getExtensiveNumber(SAGU::calcNumber(SAGU::formatNumber($cd->moneyValue).'/'.SAGU::formatNumber($cd->parcels), true)) );
                }
                else
                {
                    $api->setParameter('$parcelsValue',            '');
                    $api->setParameter('$descriptionParcelsValue', '');
                }

                $api->setParameter('$descriptionParcels', SAGU::extensive($cd->parcels));
                $api->setParameter('$parcels', $cd->parcels);
                $api->setParameter('$expirationDate', $cd->expirationDate);
                $api->setParameter('$nextParcelsMonth', SAGU::getMonth($cd->nextParcelMonth));
                $api->setParameter('$nextParcelsYear', $cd->nextParcelYear);
                $api->setParameter('$dateCancellation', $cd->dateCancellation);

                $api->setLanguage($MIOLO->getConf('i18n.language'));
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');
                $api->setDataArray($data);

                $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/methodologyContract.sxw'));

                if ( $ok && $cd->fileType == 'pdf' )
                {
                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.pdf');
                    $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');
                }

                if ( !$ok )
                {
                    throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                }
                else
                {
                    $api->fileDialog();
                }
            }
            else
            {
                throw new Exception(_M('Nenhum registro encontrado.', $module));
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
}
?>