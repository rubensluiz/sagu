<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Documment generation of term of Grant
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 22/10/2010
 *
 **/

/**
 * Form to manipulate a pupilListing
 **/
class FrmTermOfGrant extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Termo de outorga', $module), null, null);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnSave');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnSearch');
        
        // Enable print button as tbBtnPrint_click event
        $this->toolbar->setButtonURL('tbBtnPrint', $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost('tbBtnPrint', true);

        //Field institutional
        $legalPersonLabel = new MText('legalPersonLabel', _M('Instituição', $module) . ':');
        $legalPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $legalPersonLabel->setClass('m-caption m-caption-required');
        $legalPersonId = new MLookupTextField('institutionId', $this->getFormValue('institutionId', $data->institutionId), _M('Instituição', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'legalPersonDescription', 'basic', 'legalPerson', null, null, true);
        $legalPersonId->setJsHint(_M('Informe o código da instituição', $module));
        $validators[] = new MIntegerValidator('institutionId', '', 'required');
        $legalPersonDescription = new MTextField('legalPersonDescription', $this->getFormValue('legalPersonDescription', $this->legalPersonDescription->value), _M('Descrição de pessoa física', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $legalPersonDescription->setJsHint(_M('Nome da instituição', $module));
        $legalPersonDescription->setReadOnly(true);
        $hctLegalPerson = new MHContainer('hctLegalPerson', array($legalPersonLabel, $legalPersonId, $legalPersonDescription));
        $hctLegalPerson->setShowLabel(false);
        $fields[]  = $hctLegalPerson;
        
        //Field contract
        $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), _M('Contrato', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'Contract', null, null, true);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $validators[] = new MIntegerValidator('contractId', '', 'required');
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $this->contractCourseId->value), _M('Curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseId->setReadOnly(true);
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion', $this->contractCourseVersion->value), _M('Versão', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName', $this->contractCourseName->value), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $contractCourseName->setReadOnly(true);
        $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;

        //Field person
        $contractPersonLabelS = new MText('contractPersonLabelS', _M('Pessoa', $module) . ':');
        $contractPersonLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonId = new MTextField('contractPersonId', $this->getFormValue('contractPersonId', $this->contractPersonId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractPersonId->setReadOnly(true);
        $contractPersonId->setJsHint(_M('Código da pessoa', $module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $this->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa',$module));
        $hctPerson = new MHContainer('hctPerson', array($contractPersonLabelS, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        //Program container
        $programLabel = new MText('prgoramLabel', _M('Programa', $module) . ':');
        $programLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $programLabel->setClass('m-caption m-caption-required');
        $program = new MMultiLineField('program', $this->getFormValue('program', $data->pogram), _M('Programa', $module), 100, 5, 40);
        $program->setJsHint(_M('Informe o programa', $module));
        $cntProgram = new MHContainer('cntProgram', array($programLabel, $program));
        $cntProgram->setShowLabel(false);
        $fields[] = $cntProgram;
        $validators[] = new MRequiredValidator('program');

        //Field type of Benefit
        $typeOfBenefit = new MTextField('typeOfBenefit', null, _M('Tipo de benefício', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $typeOfBenefit->setClass('m-caption m-caption-required');
        $fields[] = $typeOfBenefit;
        $validators[] = new MRequiredValidator('typeOfBenefit');

        //Field begin date
        $beginDate    = new MCalendarField('beginDate', strlen($this->getFormValue('beginDate', $data->beginDate))>0 ? $this->getFormValue('beginDate', $data->beginDate) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setClass('m-caption m-caption-required');
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $validators[] = new MRequiredValidator(beginDate);
        $fields[]     = $beginDate;

        //Field begin date
        $endDate    = new MCalendarField('endDate', null, _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data final', $module));
        $fields[]     = $endDate;

        //Field rad option file type
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType', 'pdf'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $this->setFields($fields);
        $this->setValidators($validators);

        parent::defineFields();
    }

    public function tbBtnPrint_click()
    {
        $module = MIOLO::getCurrentModule();
        $MIOLO = MIOLO::getInstance();

        $busPerson = new BusinessBasicBusPerson();
        $busDocument = new BusinessBasicBusDocument();
        $data = $this->getData();
        
        try
        {            
            $MIOLO->uses('/core/AgataAPI.class');            
            $api = new AgataAPI;
            
            set_time_limit(0);

            $fData = $busPerson->getPerson($data->institutionId);
            $pData = $busPerson->getPerson($data->contractPersonId);
            $pCPF = $busDocument->getDocument($data->contractPersonId, SAGU::getParameter('basic', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'));
            $pRG = $busDocument->getDocument($data->contractPersonId, SAGU::getParameter('basic', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));

            $sData[] = $fData->personId;
            $sData[] = $fData->name;
            $sData[] = $fData->shortName;
            $sData[] = $fData->location;
            $sData[] = $data->program;
            $sData[] = $data->typeOfBenefit;
            $sData[] = $pData->name;
            $sData[] = $pCPF->content;
            $sData[] = $pRG->content;
            $sData[] = $pRG->organ;
            $sData[] = $pRG->location;
            $sData[] = $data->beginDate;
            $sData[] = $data->endDate;
            
            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/termOfGrant.sxw');
            $api->setDataArray(array($sData));
            $api->setSubDataArray(null);

            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/termOfGrant.sxw'));
            
            if ( $ok && $data->radFileType == 'pdf' )
            {
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/termOfGrant.sxw');
                $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/termOfGrant.sxw');
            }

            if ( !$ok )
            {
                throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
            }
            else
            {
                $api->fileDialog();
            }
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
}

?>