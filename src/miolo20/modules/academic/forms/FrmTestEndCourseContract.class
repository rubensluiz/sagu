<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * TestEndCourseContract form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 10/01/2006
 *
 **/

/**
 * Form to manipulate a testEndCourseContract
 **/
class FrmTestEndCourseContract extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new acdTestEndCourseContract(), array('testEndCourseTypeId', 'contractId', 'testEndCourseDate'), 'BusTestEndCourseContract');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $personFilters = array('personId' => 'contractPersonId');
        $showButton = true;
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            /**
             * Como a chave primária da tabela no banco de dados possui
             * três IDs, se trocar qualquer um deles no momento da edição
             * o sistema vai tentar dar um "get" a partir das chaves, não vai achar
             * uma primary key e vai dar problema no update, porque não vai ter
             * primary key. Para bloquear a escolha via lookup vamos forçar um
             * filtro errôneo, e avisar o usuário de que não pode editar as chaves.
             * 
             * Mais informações ticket #36804
             */
            $fields[] = MMessage::getStaticMessage('msgInfo', _M("Não é possível trocar a data, o tipo ou o contrato da avaliação ao editar, é necessário realizar a exclusão e o recadastramento da mesma."), MMessage::TYPE_WARNING); 
            $showButton = false;
            
            
            $testEndCourseTypeId = MIOLO::_request('testEndCourseTypeId');
            $contractId            = MIOLO::_request('contractId');
            $testEndCourseDate    = MIOLO::_request('testEndCourseDate');

            $business = new BusinessAcademicBusTestEndCourseContract();
            $data = $business->getTestEndCourseContract($testEndCourseTypeId,$contractId,$testEndCourseDate);
            
            $busContract = new BusinessAcademicBusContract();
            $contractData = $busContract->getContract($contractId); 
            
            $data->contractPersonId = $contractData->personId;
            $data->contractCourseId = $contractData->courseId;
            $data->contractCourseVersion = $contractData->courseVersion;
            $data->contractTurnId = $contractData->turnId;
            $data->contractUnitId = $contractData->unitId;
            
            $busPerson = new BusinessBasicBusPerson();
            $personData = $busPerson->getPerson($contractData->personId);
            
            $data->contractPersonName = $personData->name;
            
            $busCourse = new BusinessAcademicBusCourse();
            $courseData = $busCourse->getCourse($contractData->courseId);
            
            $data->contractCourseName = $courseData->name;
            
            $busTestEndCourseType = new BusinessAcademicBusTestEndCourseType();
            $testEndCourseTypeData = $busTestEndCourseType->getTestEndCourseType($data->testEndCourseTypeId);
            
            $data->testEndCourseTypeDescription = $testEndCourseTypeData->description;
        }

        //Fields person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa',$module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[]                = $contractPersonLabel;

        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$data->contractPersonId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('limbo', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'PersonContract', null, $personFilters, true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa',$module));
        $contractPersonId->setShowButton($showButton);
        $function == 'update' ? $contractPersonId->setReadOnly(true) : null;
        $validators[] = new MIntegerValidator('contractPersonId', _M('Pessoa',$module), 'optional');
        $flds[]           = $contractPersonId;
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonNameS',$data->contractPersonNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $contractPersonName->setReadOnly(true);
        $flds[]             = $contractPersonName;

        $hctPerson = new MHContainer('hctContract', $flds);
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;
        unset($flds);

        //Fields contract
        $contractLabel = new MText('contractLabel', _M('Contrato',$module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractLabel->setClass('m-caption m-caption-required');
        $flds[]                = $contractLabel;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId',$data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'contractTurnId', 'limbo', 'contractUnitId'), $module, 'Contract', null, $personFilters, true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $contractId->setShowButton($showButton);
        $function == 'update' ? $contractId->setReadOnly(true) : null;
        $validators[] = new MIntegerValidator('contractId', _M('Contrato',$module), 'required');
        $flds[]           = $contractId;

        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId',$data->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseId->setReadOnly(true);
        $flds[]           = $contractCourseId;

        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseVersion->setReadOnly(true);
        $flds[]                = $contractCourseVersion;

        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$data->contractCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $flds[]             = $contractCourseName;

        $hctContract = new MHContainer('hctContract', $flds);
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;
        unset($flds);

        $contractTurnId = new MHiddenField('contractTurnId', '');
        $fields[]    = $contractTurnId;

        $contractUnitId = new MHiddenField('contractUnitId', '');
        $fields[]    = $contractUnitId;        

        //Field course end test type
        $testEndCourseTypeLabel = new MText('testEndCourseTypeLabel', _M('Tipo de avaliação do MEC', $module) . ':');
        $testEndCourseTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $testEndCourseTypeLabel->setClass('m-caption m-caption-required');
        $flds[]                = $testEndCourseTypeLabel;

        $testEndCourseTypeId = new MLookupTextField('testEndCourseTypeId', $this->getFormValue('testEndCourseTypeId', $data->testEndCourseTypeId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'testEndCourseTypeDescription', $module, 'TestEndCourseType', null, $function == SForm::FUNCTION_UPDATE ? $personFilters : null, true);
        $testEndCourseTypeId->setJsHint(_M('Informe o código do tipo de avaliação do MEC',$module));
        $testEndCourseTypeId->setShowButton($showButton);
        $function == 'update' ? $testEndCourseTypeId->setReadOnly(true) : null;
        $validators[] = new MIntegerValidator('testEndCourseTypeId', _M('Tipo de avaliação do MEC',$module), 'required');
        $flds[] = $testEndCourseTypeId;

        $testEndCourseTypeDescription = new MTextField('testEndCourseTypeDescription', $this->getFormValue('testEndCourseTypeDescription', $data->testEndCourseTypeDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $testEndCourseTypeDescription->setReadOnly(true);
        $testEndCourseTypeDescription->setJsHint(_M('Descrição do tipo da avaliação do MEC', $module));
        $flds[] = $testEndCourseTypeDescription;

        $hctTestEndCourseType = new MHContainer('hctTestEndCourseType', $flds);
        $hctTestEndCourseType->setShowLabel(true);
        $fields[]  = $hctTestEndCourseType;
        unset($flds);
        
        //Field course end test date
        $testEndCourseDate = new MCalendarField('testEndCourseDate', $this->getFormValue('testEndCourseDate',$data->testEndCourseDate), _M('Data da avaliação do MEC',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $testEndCourseDate->setJsHint(_M('Informe a data da avaliação do MEC',$module));
        $function == 'update' ? $testEndCourseDate->setReadOnly(true) : null;
        $testEndCourseDate->setValidator(new MDATEDMYValidator('testEndCourseDate', _M('Data da avaliação do MEC',$module), 'required'));
        $validators[] = new MDateDMYValidator('testEndCourseDate',  _M('Data da avaliação do MEC',$module), 'required');
        $fields[]    = $testEndCourseDate;
        
        //Campo mensagem
        $acdMensagemAv = new AcdMensagemDeAvaliacaoDosAlunos();
        $sql = new MSQL('mensagemdeavaliacaodosalunosid, mensagem', null, null, 'mensagem');
        $mensagemLabel = new MLabel(_M('Mensagem de avaliação do aluno: ', $module));
        $mensagemLabel->setClass('m-caption');
        $mensagemLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $mensagem = new MComboBox('mensagemDeAvaliacaoDosAlunosId', $this->getFormValue('mensagemDeAvaliacaoDosAlunosId', $data->mensagemDeAvaliacaoDosAlunosId), null, $acdMensagemAv->findList($sql));
        $mensagem->setJsHint(_M('Escolha a mensagem de avaliação do aluno.', $module));
        $hctMensagem = new MHContainer('hctMensagem', array($mensagemLabel, $mensagem));
        $fields[] = $hctMensagem;
        
        //Campo nota do aluno
        $notaDoAlunoLabel = new MLabel(_M('Nota do aluno:', $module));
        $notaDoAlunoLabel->setClass('m-caption');
        $notaDoAlunoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $notaDoAluno = new MTextField('notaDoAluno', $this->GetFormValue('notaDoAluno', $data->notaDoAluno), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $notaDoAluno->setJsHint(_M('Digite aqui a nota do aluno.', $module));
        $notaDoAluno->addAttribute('onBlur', 'validaCampoDouble(\'notaDoAluno\')');
        $hctNotaDoAluno = new MHContainer('hctNotaDoAluno', array($notaDoAlunoLabel ,$notaDoAluno));
        $fields[] = $hctNotaDoAluno;
        
        $excusedLabel = new MText('excusedLabel', _M('É dispensado',$module) . '?');
        $excusedLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $excusedLabel;

        $excusedOptions = array(
                                      array(_M('Sim', $module), 't'),
                                      array(_M('Não', $module), 'f')
                                     );

        $excused = new MRadioButtonGroup('excused', null, SAGU::listTrueFalse(1), strlen($this->getFormValue('excused', $data->excused)) > 0 ? $this->getFormValue('excused', $data->excused) : DB_FALSE, null, 'horizontal');
        $excused->setShowLabel(false);
        $flds[] = $excused;

        $hctExcused = new MHContainer('hctExcused', $flds);
        $fields[] = $hctExcused;
        unset($flds);
        
        $isPresentLabel = new MText('isPresentLabel', _M('Está presente',$module) . '?');
        $isPresentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[] = $isPresentLabel;

        $isPresentOptions = array(
                                      array(_M('Sim', $module), 't'),
                                      array(_M('Não', $module), 'f')
                                     );

        $isPresent = new MRadioButtonGroup('isPresent', null, SAGU::listTrueFalse(1), strlen($this->getFormValue('isPresent', $data->isPresent)) > 0 ? $this->getFormValue('isPresent', $data->isPresent) : DB_TRUE, null, 'horizontal');
        $isPresent->setShowLabel(false);
        $flds[] = $isPresent;

        $hctIsPresent = new MHContainer('hctIsPresent', $flds);
        $fields[] = $hctIsPresent;
        unset($flds);

        parent::defineFields($fields, $validators, $data);
    }
}
?>
