<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdGroup table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/09/2005
 */
MIOLO::Import('extensions::cpaint.inc.php','cpaint');
ini_set('max_execution_time', '0');
ini_set('memory_limit', '10240M');

class GroupGridData
{
    public $title; // grid title
    public $data; // array containing the grid data to be used with setData()
    public $confirmed; // number of confirmed groups
    public $cancelled; // number of cancelled groups

    public function __construct($grdTitle)
    {
        $this->title = $grdTitle;
        unset($this->data);
        $this->confirmed = 0;
        $this->cancelled = 0;
    }
}

/**
 * Form to search the acdGroup table
 */
class FrmGroupSearch extends MForm
{
    private $home;
    private $module;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $this->module = 'academic';
        $module = $this->module;
        $this->home   = $data->home;

        parent::__construct(_M('Localizar',$module));

        // hide the 'Submit' button
        $this->setShowPostButton(false);

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        if (($f = $this->page->request('cpaint_function')) != "")
        {
            $this->manager->getTheme()->clearContent();
            $this->$f($this->page->request('cpaint_argument'));
            $this->page->generateMethod = 'generateAJAX';
        }
        else
        {
            $this->defineFields();
            $this->eventHandler();
        }
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $unitId = sMultiUnidade::obterObjetoUnidade();

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnSave');
        $toolBar->disableButton('tbBtnDelete');
        $toolBar->disableButton('tbBtnPrint');
        $toolBar->hideButton('tbBtnBack');
        $toolBar->hideButton('tbBtnReset');
        
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-disabled-20x20.png');        
        $toolBar->addButton('tbBtnExit', _M('Close'), $MIOLO->getActionUrl('sagu2', 'main'), _M('Close'), true, $enabledImage, $disabledImage, NULL);
                        
        $fields[] = $toolBar;

        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        //Field group
        $groupIdS = new MTextField('groupIdS', $this->groupIdS->value, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $groupIdS->setJsHint(_M('Informe o código da disciplina oferecida',$module));
        $fields[] = $groupIdS;
        $validators[] = new MIntegerValidator('groupIdS', _M('Código da disciplina oferecida',$module), 'optional');
        
        if( SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'NO' )
        {
            //Field curricular components
            $curricularComponentLabelS   = new MText('curricularComponentLabelS', _M('Disciplina', $module));
            $curricularComponentLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $curricularComponentIdS      = new MLookupTextField('curricularComponentIdS', $this->getFormValue('curricularComponentIdS', $data->curricularComponentIdS), _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentVersionS,curricularComponentNameS', $module, 'CurricularComponent', null, array('curricularComponentId' => 'curricularComponentIdS'), !$this->page->isPostBack());
            $curricularComponentIdS->setJsHint(_M('Informe o código da disciplina', $module));
            $curricularComponentVersionS = new MTextField('curricularComponentVersionS', $this->getFormValue('curricularComponentVersionS', $data->curricularComponentVersionS), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $curricularComponentVersionS->setJsHint(_M('Versão da disciplina', $module));
            $curricularComponentVersionS->setReadOnly(true);
            $curricularComponentNameS    = new MTextField('curricularComponentNameS', $this->getFormValue('curricularComponentNameS', $data->curricularComponentNameS), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $curricularComponentNameS->setJsHint(_M('Nome da disciplina', $module));
            $curricularComponentNameS->setReadOnly(true);
            $hctCurricularComponentS     = new MHContainer('hctCurricularComponentS', array($curricularComponentLabelS, $curricularComponentIdS, $curricularComponentVersionS, $curricularComponentNameS));
            $hctCurricularComponentS->setShowLabel(false);
            $fields[]                    = $hctCurricularComponentS;

            //Field course
            $courseLabelS   = new MText('courseLabelS', _M('Curso',$module) . ':');
            $courseLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $courseIdS      = new MLookupTextField('courseIdS', $this->getFormValue('courseIdS', $data->courseIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseIdS, courseVersionS, courseNameS, turnIdS, limbo, unitIdS, limbo', $module, 'CourseOccurrence', null, array('courseId' => 'courseIdS', 'courseVersion' => 'courseVersionS', 'turnId' => 'turnIdS', 'unitId' => 'unitIdS'), !$this->page->isPostBack());
            $courseIdS->setJsHint(_M('Informe o código do curso', $module));
            $courseNameS    = new MTextField('courseNameS', $this->getFormValue('courseNameS', $data->courseNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $courseNameS->setJsHint(_M('Nome do curso', $module));
            $courseNameS->setReadOnly(true);
            $courseVersionS = new MTextField('courseVersionS', $this->getFormValue('courseVersionS', $data->courseVersionS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseVersionS->setReadOnly(true);
            $courseVersionS->setJsHint(_M('Versão do curso', $module));
            $hctCourseS     = new MHContainer('hctCourseS', array($courseLabelS, $courseIdS, $courseVersionS, $courseNameS));
            $hctCourseS->setShowLabel(true);
            $fields[]       = $hctCourseS;
        }
            //Field period
            $businessPeriod = new BusinessAcademicBusPeriod();
            $periodId       = new MComboBox('periodId', $this->getFormValue('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID')), _M('Período',$module), $businessPeriod->listPeriod(), true );
            $periodId->setJsHint(_M('Selecione um período', $module));
            $fields[]       = $periodId;
            
        if( SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'NO' )
        {
            //Learning period
            $learningPeriodLabelS       = new MText('learningPeriodLabelS', _M('Período letivo', $module));
            $learningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $learningPeriodIdS          = new MLookupTextField('learningPeriodIdS', $this->learningPeriodIdS->value, _M('Código do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescriptionS', $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId'=>'courseIdS', 'turnId' => 'turnIdS', 'unitId' => 'unitIdS'), true);
            $learningPeriodIdS->setJsHint(_M('Informe o código do período letivo', $module));
            $learningPeriodDescriptionS = new MTextField('learningPeriodDescriptionS', $this->learningPeriodDescriptionS->value, _M('Descrição do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $learningPeriodDescriptionS->setJsHint(_M('Informe a descrição do período letivo', $module));
            $hctLearningPeriodS         = new MHContainer('hctLearningPeriodS', array($learningPeriodLabelS, $learningPeriodIdS, $learningPeriodDescriptionS));
            $hctLearningPeriodS->setShowLabel(false);
            $fields[]                   = $hctLearningPeriodS;

            //Field regimen
            $business   = new BusinessAcademicBusRegimen();
            $regimenIdS = new MComboBox('regimenIdS', $this->getFormValue('regimenIdS', $data->regimenIdS), _M('Regime', $module), $business->listRegimen());
            $regimenIdS->setJsHint(_M('Selecione um regime', $module));
            $fields[]   = $regimenIdS;

            //Field turn
            $business = new BusinessBasicBusTurn();
            $turnIdS  = new MComboBox( 'turnIdS', $this->getFormValue('turnIdS',$data->turnIdS), _M('Turno', $module), $business->listTurn());
            $turnIdS->setJsHint(_M('Selecione um turno', $module));
            $fields[] = $turnIdS;
        }
        
        //Field unit
        $business = new BusinessBasicBusUnit();
        
        if($unitId->unitId)
        {
          $opts = $business->listUnitSimple($unitId->unitId);  
          $unidade = $unitId->unitId;
        }else
        {
          $opts =  $business->listUnit();
          $unidade = $data->unitId;
        }
        
        $unitIdS = new MComboBox('unitIdS', $this->getFormValue('unitIdS', $unidade), _M('Unidade', $module), $opts);
        $unitIdS->setJsHint(_M('Selecione uma unidade', $module));
        $fields[] = $unitIdS;

        //Field professor
        $professorLabelS = new MText('professorLabelS', _M('Professor',$module) . ':');
        $professorLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $professorIdS    = new MLookupTextField('professorIdS', $this->getFormValue('professorIdS', $data->professorIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorNameS', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorIdS->setJsHint(_M('Código do professor', $module));
        $professorNameS  = new MTextField('professorNameS', $this->getFormValue('professorNameS', $data->professorNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $professorNameS->setJsHint(_M('Nome do professor', $module));
        $hctProfessorS   = new MHContainer('hctProfessorS', array( $professorLabelS, $professorIdS, $professorNameS) );
        $hctProfessorS->setShowLabel(false);
        $fields[]        = $hctProfessorS;
        
        if( SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'NO' )
        {
            if ( SAGU::getParameter('ACADEMIC', 'PROFESSOR_RESPONSAVEL') == 'YES' )
            {
                //Field professor responsible
                $professorResponsibleLabelS = new MText('professorResponsibleLabelS', _M('Professor responsável',$module) . ':');
                $professorResponsibleLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $professorRepsonsibleS    = new MLookupTextField('professorResponsibleS', $this->getFormValue('professorResponsibleS', $data->professorResponsibleS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorResponsibleNameS', 'basic', 'PhysicalPersonProfessor', null, null, true);
                $professorRepsonsibleS->setJsHint(_M('Código do professor', $module));
                $professorResponsibleNameS  = new MTextField('professorResponsibleNameS', $this->getFormValue('professorResponsibleNameS', $data->professorResponsibleNameS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $professorResponsibleNameS->setJsHint(_M('Nome do professor', $module));
                $hctProfessorResponsibleS   = new MHContainer('hctProfessorResponsibleS', array( $professorResponsibleLabelS, $professorRepsonsibleS, $professorResponsibleNameS) );
                $hctProfessorResponsibleS->setShowLabel(false);
                $fields[]        = $hctProfessorResponsibleS;
            }
                
            //Field class
            $classLabelS = new MText('classLabelS', _M('Turma',$module) . ':');
            $classLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $classIdS    = new MLookupTextField('classIdS', $this->getFormValue('classIdS', $data->classIdS), _M('Código da turma',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('classNameS_'), $module, 'Class', null, array( 'courseId' => 'courseIdS', 'courseVersion' => 'courseVersionS', 'periodId' => 'periodId' ), true);
            $classIdS->setJsHint(_M('Informe o código da turma', $module));
            $classNameS  = new MTextField('classNameS_', $this->getFormValue('classNameS_', $data->classNameS), _M('Nome da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $classNameS->setJsHint(_M('Informe o nome da turma', $module));
            $hctClassS   = new MHContainer('hctClassS', array($classLabelS, $classIdS, $classNameS));
            $hctClassS->setShowLabel(false);
            $fields[]    = $hctClassS;
            
        }else
        {
            $busClass = new BusinessAcademicBusClass();
            $optClass = $busClass->listClassSimple($this->getFormValue('unitIdS', $unitId->unitId));
            
            $classLabelS = new MText('classLabelS', _M('Turma',$module) . ':');
            $classLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));            
            $classIdS = new MComboBox('classIdS', '', '', $optClass);
            $classIdS->setJsHint(_M('Selecione uma turma'));
            $fields[] = new MHContainer('hctClass', array($classLabelS, $classIdS));
            
            $fields[] = new MSeparator();           
        }        
        
        if( SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'NO' )
        {
            // Field evaluation type
            $busEvaluationType = new BusinessAcademicBusEvaluationType();
            $cmbEvaluationTypeIdS = new MComboBox('evaluationTypeIdS', $this->getFormValue('evaluationTypeIdS', $data->evaluationTypeId), _M('Código da forma de avaliação', $module), $busEvaluationType->listEvaluationType());
            $cmbEvaluationTypeIdS->setJsHint(_M('Forma de avaliação'));
            $fields[] = $cmbEvaluationTypeIdS;
        }
        
        //Is Cancellation
        $fields[] = new MCheckBox('chkIsCancellation', 't', _M('Somente canceladas', $module), $this->getFormValue('chkIsCancellation', 'f') == 't', _M('Marque esta caixa para exibir somente disciplinas oferecidas canceladas', $module));

        //Button search
        $fields[] = new MButton('btnSearch',_M('Localizar',$module));

        $this->setFields($fields);
        $this->setValidators($validators);
        $this->page->onLoad('document.' . $this->name . '.groupIdS.focus();');
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));

        $MIOLO->getRequiredJS4Ajax();

        $currentUrl = str_replace('&amp;', '&', $this->manager->getCurrentURL());

        $jsCode =
<<< HERE
        function showGroupSchedules(groupId)
        {
            var groupDiv = "groupDiv_" + groupId;

            if (xGetElementById(groupDiv).innerHTML == '')
            {
                var showFunction = "showData_" + groupId;

                cpaint_call("{$currentUrl}", "POST", "showGroupSchedules_click", groupId, eval(showFunction), "TEXT");
            }
            else
            {
                expandRetractContainer(groupDiv);
            }
        }

        function expandRetractContainer(elementId)
        {
            if (xGetElementById(elementId).style.display != 'none')
            {
                xGetElementById(elementId).style.display = 'none';
            }
            else
            {
                xGetElementById(elementId).style.display = 'block';
            }
        }

        function changeElementImage(elementId, image1, image2)
        {
            if (xGetElementById(elementId).src == image1)
            {
                xGetElementById(elementId).src = image2;
            }
            else
            {
                xGetElementById(elementId).src = image1;
            }
        }
HERE;

        $this->page->addJsCode($jsCode);
    }

    public function btnSearch_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filters = $this->getTypesData();

        if ( $this->getFormValue('chkIsCancellation') == 't' )
        {
            $filters->isCancellation = DB_TRUE;
        }

        $business          = new BusinessAcademicBusGroup();
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $busCourse         = new BusinessAcademicBusCourse();
        $busUnit           = new BusinessBasicBusUnit();

        $groups = $business->searchGroup($filters);
        
        // iterate all groups found, finding the schedules of each group and the
        // professors of each schedule
        $oldLearningPeriodId = '';
        $gridNumber = -1;
        unset($data);
        for ( $i=0; $i<count($groups); $i++ )
        {            
            $professor[$i] = $business->getProfessorNamesOfGroup($groups[$i][0]);
                        
            if ( $oldLearningPeriodId != $groups[$i][7] )
            {
                $gridNumber++;

                $learningPeriodData = $busLearningPeriod->getLearningPeriod($groups[$i][7]);
                $courseData         = $busCourse->getCourse($learningPeriodData->courseId);
                $unitData           = $busUnit->getUnit($learningPeriodData->unitId);

                $grdTitle = _M('Período letivo', $module) . ' ' . $groups[$i][7] . ': ' .
                            $learningPeriodData->periodId . ' | ' .
                            _M('Curso', $module) . ' ' . $learningPeriodData->courseId . '/' . $learningPeriodData->courseVersion . ' ' . $courseData->shortName . ' | ' .
                            _M('Unidade', $module) . ' ' .  $learningPeriodData->unitId . ' ' . $unitData->description;
                $grdTitle = str_replace(' ', '&nbsp;', $grdTitle);
                $data[$gridNumber] = new GroupGridData($grdTitle);

                $periodId = $learningPeriodData->periodId;
                
                $oldLearningPeriodId = $groups[$i][7];
            }

            // make curricular component data link to enrolled pupils listing
            $mlink = new MLink('groupPupils' . $groups[$i][0], NULL, $MIOLO->getActionURL($module, 'main:process:groupEnrolledPeople', NULL, array('groupId'=>$groups[$i][0])), $groups[$i][1], 'new');
            $mlink->setClass('m-grid-column');
            $groups[$i][1] = $mlink->generate();

            // totalizers
            if ( $groups[$i][2] == DB_TRUE )
            {
                $text = new MText('group' . $groups[$i][0], _M('Cancelado', $module));
                $text->color = 'red';
                $data[$gridNumber]->cancelled++;
            }
            else
            {
                $text = new MText('group' . $groups[$i][0], _M('Confirmado', $module));
                $text->color = 'blue';
                $data[$gridNumber]->confirmed++;
            }
            $groups[$i][2] = $text->generate();

            //Ação de editar
            $opts = array('function' => 'update',
                          'groupId'  => $groups[$i][0],
                          'periodId' => $periodId);
            $href_edit = $MIOLO->getActionURL( $module, $action, null, $opts );

            $imageEditURL = $MIOLO->getUI()->getImageTheme($MIOLO->getConf("theme.main"), 'button_edit.png');
            $actionEdit   = new MImageLink('edit_' . $groups[$i][0], _M('Atualizar', $module), $href_edit, $imageEditURL);
             
            //Ação de excluir
            if ( SAGU::getParameter('BASIC', 'INCREASE_SECURITY_LEVEL') == 'YES' )
            {
                $href_delete = 'javascript:void(0)';

                $imageDeleteURL = $MIOLO->getUI()->getImageTheme($MIOLO->getConf("theme.main"), 'button_drop_disable.png');
            }
            else
            {
                $opts = array('function' => 'delete',
                              'groupId'  => $groups[$i][0],
                              'event'    => 'tbBtnDelete_click');
                $href_delete = $MIOLO->getActionURL( $module, $action, null, $opts );

                $imageDeleteURL = $MIOLO->getUI()->getImageTheme($MIOLO->getConf("theme.main"), 'button_drop.png');
            }
            
            $actionDelete = new MImageLink('delete_' . $groups[$i][0], _M('Excluir', $module), $href_delete, $imageDeleteURL);
            
            
            //acad delete cascade
            $opts = array('function' => 'delete',
                          'groupId'  => $groups[$i][0],
                          'event'    => 'tbBtnDeleteCascade_click');
            $href_deleteCascade = $MIOLO->getActionURL( $module, $action, null, $opts );

            $imageDeleteCascadeURL = $MIOLO->getUI()->getImage('academic', 'button_clear-16x16.png');
            
            $actionDeleteCascade = new MImageLink('delete_' . $groups[$i][0], _M('Excluir Frequências e notas', $module), $href_deleteCascade, $imageDeleteCascadeURL);
            

            //Ação de imprimir
            $opts = array('function' => 'printContent',
                          'groupId'  => $groups[$i][0],
                          'event'    => 'tbBtnPrint_click');
            $href_print = $MIOLO->getActionURL( $module, $action, null, $opts);

            $imagePrintURL = $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'print.png');

            $actionPrint = new MImageLink('print_' . $groups[$i][0], _M('Imprimir conteúdo programático', $module), $href_print, $imagePrintURL);

            $opts = array('periodId' => $periodId,
                           'groupId' => $groups[$i][0],
                        'professorId' => $filters->professorId );

            $moodleSubscription = $MIOLO->getActionURL( 'services', 'moodleSubscription', null, $opts );
            $imageMoodle = $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'botao_aplicar.png');
            $actionMoodle = new MImageLink('inscricaoMoodle_' . $groups[$i][0], _M('Inscrição no Moodle', $module), $moodleSubscription, $imageMoodle);
        
            //Ação de enviar emails
            $totalEnrolled = explode('/', $groups[$i][3]);

            $totalEnrolled = $totalEnrolled[0];

            if ($totalEnrolled > 0)
            {
                $imageEmail = $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'button_sendemail.png');
                $href_email = $MIOLO->getActionURL($module, 'main:process:groupEmail', null, array('groupId' => $groups[$i][0]));
                $actionEmail = new MImageLink('email_' . $groups[$i][0], _M('Enviar email', $module), $href_email, $imageEmail);
            }
            else
            {
                $imageEmail = $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'button_sendemail_disable.png');
                $actionEmail = new MImage('email_' . $groups[$i][0], _M('Não há alunos matriculados nesta disciplina', $module), $imageEmail);
            }

            
            //Monta o vetor de dados para a tabela
            $actionsString = $actionEdit->generate() . $actionDelete->generate() . $actionPrint->generate() . $actionEmail->generate();
           
            if ( $MIOLO->checkAccess('FrmGroupAcademic', A_ADMIN, false, true) )
            {
                $actionsString .= $actionDeleteCascade->generate();
            }
            
            if ( SAGU::getParameter('BASIC', 'MOODLE_INSTALLED') == 'YES' )
            {
                $actionsString .= $actionMoodle->generate();
            }
            
            //
            // AUDITORIA
            //
            $schema = 'public';
            $table = 'AcdGroup';    

            $MIOLO->Uses( 'classes/auditoria.class', 'basic' );
            
            if ( auditoria::verificaAuditoria($schema, $table) &&
                 (strlen(SAGU::getParameter('BASIC', 'MIOLO_AUDIT_DATABASE')) > 0) &&
                 $MIOLO->checkAccess('FrmAuditoria', A_ACCESS) )
            {
                $args['event'] = 'localizar_click';
                $args['function'] = SForm::FUNCTION_SEARCH;
                $args['schema_name'] = strtolower($schema);
                $args['table_name'] = strtolower($table);

                $hrefAudit = $MIOLO->getActionURL('basic', 'main:config:auditoria', null, $args);
                $imageAudit = $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'icone-auditoria.png');
                $actionAudit = new MImageLink("audit_{$groups[$i][0]}", _M('Auditoria', $module), $hrefAudit, $imageAudit);
                $actionAudit->setTarget('_new');
                $actionsString .= $actionAudit->generate();
            }
            
            //Concatena os professores caso aja mais que um, trunca o primeiro e o ultimo nome
            //e adiciona uma vírgula entre os professores.
            if(count($professor[$i])>1)
            {
                foreach($professor[$i] as $k => $prof)
                {
                    $teacher = explode(' ', $prof); 
                    $n = count($teacher);
                    
                    if($teacher[$n-1] == null)
                    {
                        $ultimoNome = ($teacher[$n-2]);
                    }else
                    {
                        $ultimoNome = ($teacher[$n-1]);
                    }                    
                    $professores[$i][$k] = $teacher[0].' '.$ultimoNome;
                }
                                
                $p = null;
                $separador = ',';
                foreach($professores[$i] as $key => $val)
                {
                    $p .= $val.$separador.' <br> ';
                    $separador = null;
                }
                
                $p = $p ;
            }else
            {
                $p = null;
                $p = $professor[$i];
            }            
            
            //Consulta para pegar data de inicio e término.
            $horarios = $business->getGroup($groups[$i][0]);
            
            $data[$gridNumber]->data[] = array($actionsString,
                                               $groups[$i][0], //groupid
                                               $groups[$i][1], //curricularComponent
                                               $groups[$i][2], //isCancellation
                                               $groups[$i][3], //totalEnrolled/vacant
                                               $groups[$i][4],  //regimen
                                               $groups[$i][5] = $horarios->startDate,  //data inicial
                                               $groups[$i][6] = $horarios->endDate,  //data final
                                               $groups[$i][14],  //turma
                                               $p //professor
                                              );
            
            $jsCode = 'function showData_' . $groups[$i][0] . '(result)
                       {
                            xGetElementById(\'groupDiv_' . $groups[$i][0] . '\').innerHTML = result;
                       }';

            $this->page->addJsCode($jsCode);
        }

        if ( count($data) == 0 )
        {
            $this->addInfo(_M('Nenhum registro encontrado.', $module));
        }
        else
        {
            $columns = array(_M('Ações', $module),
                             _M('Código', $module),
                             _M('Disciplina', $module),
                             _M('Estado', $module),
                             _M('Vagas', $module),
                             _M('Regime', $module),
                             _M('Data inicial', $module),
                             _M('Data final', $module),
                             _M('Turma', $module),
                             _M('Professores', $module));

            for ( $i=0; $i<count($data); $i++ )
            {
                $grdResults = new MTableRaw($data[$i]->title, $data[$i]->data, $columns);

                //Configurações das células
                for ($ii = 0; $ii < count($data[$i]->data); $ii++)
                {
                    $grdResults->setCellClass($ii, 0, 'm-tableraw-group-column-action');
                    $grdResults->setCellClass($ii, 1, 'm-tableraw-group-column-groupid');
                    $grdResults->setCellClass($ii, 2, 'm-tableraw-group-column-curricularcomp');
                    $grdResults->setCellClass($ii, 3, 'm-tableraw-group-column-status');
                    $grdResults->setCellClass($ii, 4, 'm-tableraw-group-column-vacancy');
                    $grdResults->setCellClass($ii, 5, 'm-tableraw-group-column-regimen');
                    $grdResults->setCellClass($ii, 6, 'm-tableraw-group-column-begindate');
                    $grdResults->setCellClass($ii, 7, 'm-tableraw-group-column-enddate');
                    $grdResults->setCellClass($ii, 8, 'm-tableraw-group-column-class');
                }

                $this->addField($grdResults);

                // totalizers for each grid
                $this->addField(new MSeparator());
                $this->addField(new MTextLabel('confirmed', '<font color=\'blue\'>' . $data[$i]->confirmed . '</font>', _M('Total de confirmadas', $module)));
                $this->addField(new MTextLabel('cancelled', '<font color=\'red\'>' . $data[$i]->cancelled . '</font>', _M('Total de canceladas', $module)));
                $this->addField(new MTextLabel('total', '<font color=\'green\'>' . ($data[$i]->confirmed + $data[$i]->cancelled) . '</font>', _M('Total de disciplinas oferecidas', $module)));
                $this->addField(new MSeparator());
            }
        }
    }

    /**
     * Method to gather all information from the group form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data->groupId                    = $this->groupIdS->value;
        $data->curricularComponentId      = $this->curricularComponentIdS->value;
        $data->curricularComponentVersion = $this->curricularComponentVersionS->value;
        $data->curricularComponentName    = $this->curricularComponentNameS->value;
        $data->periodId                   = $this->periodId->value;
        $data->learningPeriodId           = $this->learningPeriodIdS->value;
        $data->learningPeriodDescription  = $this->learningPeriodDescriptionS->value;
        $data->regimenId                  = $this->regimenIdS->value;
        $data->unitId                     = $this->unitIdS->value;
        $data->courseUnitId               = $this->unitIdS->value;
        $data->turnId                     = $this->turnIdS->value;
        $data->courseTurnId               = $this->turnIdS->value;
        $data->professorId                = $this->professorIdS->value;
        $data->professorName              = $this->professorNameS->value;
        $data->professorResponsible       = $this->professorResponsibleS->value;
        $data->professorResponsibleName   = $this->professorResponsibleNameS->value;
        $data->courseId                   = $this->courseIdS->value;
        $data->courseVersion              = $this->courseVersionS->value;
        $data->courseName                 = $this->courseNameS->value;
        $data->classId                    = $this->classIdS->value;
        $data->className                  = $this->classNameS_->value;
        $data->evaluationTypeId           = $this->evaluationTypeIdS->value;

        return $data;
    }
}
?>
