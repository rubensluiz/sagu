<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * MovementContract form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 30/08/2005
 *
 **/
class FrmMovementContract extends SManagementForm
{
    public function __construct()
    {
        parent::__construct(new acdMovementContract(), array('contractId', 'stateContractId', 'stateTime'), 'BusMovementContract');
    }

    
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $insertNew = new MHiddenField('insertNew', MIOLO::_request('insertNew'));
        $fields[]    = $insertNew;
        
        $businessContract      = new BusinessAcademicBusContract();
        $businessStateContract = new BusinessAcademicBusStatesContract();

        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $contractId = MIOLO::_REQUEST('contractId');
            $stateContractId = MIOLO::_REQUEST('stateContractId');

            $dataContract      = $businessContract->getContract($contractId);
            $dataStateContract = $businessStateContract->getStatesContract($stateContractId);
            
            if ( $dataStateContract->stateContractIsActive == DB_FALSE )
            {
                $dataStateContract->description = $dataStateContract->description . ' (ESTADO CONTRATUAL INATIVO)';
            }

            $fields[]      = new MTextLabel('contractIdLabel', $contractId . ' - ' . $dataContract->personName, _M('Código do contrato',$module));
            $fields[]      = new MHiddenField('contractId', $contractId);

            $fields[]      = new MTextLabel('stateContractIdLabel', $stateContractId . ' - ' . $dataStateContract->description, _M('Código do estado',$module));
            $fields[]      = new MHiddenField('stateContractId', $stateContractId);
            
            $stateTime = $this->getFormValue('stateTime', $data->stateTime);
//            $fields[]  = new MTextLabel('stateTimeLabel', $stateTime, _M('Data do estado',$module));
//            $fields[]  = new MHiddenField('stateTime', $stateTime);
            $date = date_create($stateTime);
            $fields[] = new MCalendarField('stateTime', date_format($date, 'd/m/Y'), _M('Data do estado'));

            $fields[] = new MHiddenField('courseId', null);
            $fields[] = new MHiddenField('_stateTime', $stateTime);

            $data = $this->busObject->getMovementContract($contractId, $stateContractId, $stateTime);
        }

        if ( (in_array($function,array('insert'))) && ( $insertNew->value != 'insertNew') )
        {
            $personLabel = new MText('personLabel', _M('Pessoa',$module) . ':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $contractPersonId     = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $this->contractPersonId->value), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, null, !$this->page->isPostBack());
            $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
            $validators[] = new MIntegerValidator('contractPersonId', '', 'optional');

            $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->contractPersonName), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractPersonName->setReadOnly(true);
            $contractPersonName->setJsHint(_M('Nome da pessoa',$module));

            $hctPerson = new MHContainer('hctPerson', array($personLabel, $contractPersonId, $contractPersonName));
            $hctPerson->setShowLabel(true);
            $fields[]  = $hctPerson;

            $contractLabel = new MText('contractLabel', _M('Contrato',$module) . ':');
            $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $flds[]      = $contractLabel;
            $contractLabel->setClass('m-caption m-caption-required');

            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null,
                    array('contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'),
                    $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
            $contractId->setJsHint(_M('Informe o código do contrato',$module));
            $flds[] = $contractId;
            $validators[] = new MIntegerValidator('contractId', _M('Contrato',$module), 'required');
    
            $courseId = new MTextField('courseId', $this->getFormValue('courseId',$this->courseId->value), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseId->setReadOnly(true);
            $courseId->setJsHint(_M('Código do curso',$module));
            $flds[]   = $courseId;
    
            $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $this->courseVersion->value), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseVersion->setReadOnly(true);
            $courseVersion->setJsHint(_M('Versão do curso',$module));
            $flds[]        = $courseVersion;
    
            $courseName = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', 30);
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Nome do curso',$module));
            $flds[]             = $courseName;
    
            $hctContract = new MHContainer('hctContract', $flds);
            $hctContract->setShowLabel(true);
            $fields[]    = $hctContract;
            unset($flds);

            $insertNew->value = 'insertNew';

            $btn1 = new MButton('btnAddMovementContract', _M('Adicionar movimentação contratual', $module));
            $fields[] = $btn1;
        }
        else if ( ($insertNew->value == 'insertNew') || (in_array($function,array('update'))) )
        {
            if ( $insertNew->value == 'insertNew' )
            {
                $personLabel = new MText('personLabel', _M('Pessoa',$module) . ':');
                $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

                $contractPersonId = new MTextField('contractPersonId', $this->getFormValue('contractPersonId', $this->contractPersonId->value), NULL, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                $contractPersonId->setReadOnly(true);
                $contractPersonId->setJsHint(_M('Código da pessoa',$module));

                $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->contractPersonName), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $contractPersonName->setReadOnly(true);
                $contractPersonName->setJsHint(_M('Nome da pessoa',$module));

                $hctPerson = new MHContainer('hctPerson', array($personLabel, $contractPersonId, $contractPersonName));
                $hctPerson->setShowLabel(true);
                $fields[]  = $hctPerson;

                $contractLabel = new MText('contractLabel', _M('Contrato',$module) . ':');
                $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $flds[]      = $contractLabel;
                $contractLabel->setClass('m-caption m-caption-required');

                $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null,
                    array('contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'),
                    $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
                $contractId->setJsHint(_M('Informe o código do contrato',$module));
                $flds[] = $contractId;
                $validators[] = new MIntegerValidator('contractId', _M('Contrato',$module), 'required');
                $contractId->setReadOnly(true);

                $courseId = new MTextField('courseId',  $this->getFormValue('courseId',$this->courseId->value), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                $courseId->setReadOnly(true);
                $courseId->setJsHint(_M('Código do curso',$module));
                $flds[]   = $courseId;

                $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$this->courseVersion->value), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                $courseVersion->setReadOnly(true);
                $courseVersion->setJsHint(_M('Versão do curso',$module));
                $flds[]        = $courseVersion;

                $courseName = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', 30);
                $courseName->setReadOnly(true);
                $courseName->setJsHint(_M('Nome do curso',$module));
                $flds[]             = $courseName;

                $hctContract = new MHContainer('hctContract', $flds);
                $hctContract->setShowLabel(true);
                $fields[]    = $hctContract;
                unset($flds);

                $stateContractLabel= new MText('stateContractLabel', _M('Estado contratual',$module) . ':');
                $stateContractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $stateContractLabel->setClass('m-caption m-caption-required');
                $flds[]                = $stateContractLabel;

                $fields[] = new SHiddenField('stateContractIsActive', DB_TRUE);
                
                $stateContractId = new MLookupTextField('stateContractId', null, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'stateDescription', $module, 'StatesContract', null, array('stateContractIsActive' => 'stateContractIsActive'), true);
                $stateContractId->setJsHint(_M('Código do estado contratual',$module));
                $flds[]                = $stateContractId;
                $validators[] = new MIntegerValidator('stateContractId', _M('Estado contratual',$module), 'required');

                $stateDescription = new MTextField('stateDescription', $this->stateDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $stateDescription->setReadOnly(true);
                $stateDescription->setJsHint(_M('Descrição do estado contratual',$module));
                $flds[]                = $stateDescription;

                $hctStateContract = new MHContainer('hctStateContract', $flds);
                $hctStateContract->setShowLabel(true);
                $fields[]    = $hctStateContract;
                unset($flds);

                $stateTime = $this->getFormValue('stateTime', $data->stateTime);
                if ( is_null($stateTime) )
                {
                    //default date(now);
                    $stateTime = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
                }
                $stateTime      = new MCalendarField('stateTime', $stateTime, _M('Data do estado',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
                $stateTime->setValidator( new MDATEDMYValidator('stateTime', _M('Data do estado',$module), 'required'));
                $fields[]       = $stateTime;

                $stateHour = new MTextField('stateHour', $this->getFormValue('stateHour', date('H:i')), _M('Horário do estado',$module), SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), 'hh:mm');
                $validators[] = new MTimeValidator('stateHour', _M('Horário do estado',$module), 'required');
                $fields[] = $stateHour;

            }

            $reasonLabel= new MText('reasonLabel', _M('Motivo',$module) . ':');
            $reasonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $flds[]                = $reasonLabel;

            $reasonId = new MLookupTextField('reasonId', $this->getFormValue('reasonId', $data->reasonId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'reasonDescription', $module, 'Reason', null, array('stateContractId'=>'stateContractId'), true);
            $reasonId->setJsHint(_M('Código do motivo',$module));
            $flds[]                = $reasonId;
            $validators[] = new MIntegerValidator('reasonId', _M('Motivo',$module), 'optional');

            $reasonDescription = new MTextField('reasonDescription', $this->reasonDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $reasonDescription->setReadOnly(true);
            $reasonDescription->setJsHint(_M('Descrição do motivo',$module));
            $flds[]                = $reasonDescription;

            $hctReason = new MHContainer('hctReason', $flds);
            $hctReason->setShowLabel(true);
            $fields[]    = $hctReason;
            unset($flds);
            
            $learningPeriodLabel= new MText('learningPeriodLabel', _M('Último período acadêmico',$module) . ':');
            $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $flds[] = $learningPeriodLabel;
            
            $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'learningPeriodIdDescription, periodId', $module, 'LearningPeriod', null, array('courseId' => 'courseId'), true);
            $learningPeriodId->setJsHint(_M('Último período acadêmico',$module));
            $flds[] = $learningPeriodId;

            $learningPeriodIdDescription = new MTextField('learningPeriodIdDescription', $this->learningPeriodIdDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $learningPeriodIdDescription->setReadOnly(true);
            $learningPeriodIdDescription->setJsHint(_M('Descrição do último período acadêmico',$module));
            $flds[] = $learningPeriodIdDescription;

            $hctLearningPeriod = new MHContainer('hctLearningPeriod', $flds);
            $hctLearningPeriod->setShowLabel(true);
            $fields[] = $hctLearningPeriod;
            unset($flds);
            
            // Verifica se existem disciplinas registradas no campo de disciplinas
            if ( strlen($data->disciplinas) > 0 )
            {
                $fields[] = new SHiddenField('disciplinas', $data->disciplinas);
                
                $data->disciplinas = explode('<>', $data->disciplinas);
                foreach($data->disciplinas as $disciplina)
                {
                    $field[] = new MLabel($disciplina, 'blue');
                }
                // Agrupa disciplinas
                $fields[] = new MBaseGroup('htcDisciplinas', _M('Disciplinas do aluno nessa movimentação'), $field, 'vertical');
            }
            
            
            
            // Exibe as disciplinas que o aluno se metrículou no período
            //$disciplinas->setReadOnly(true);
            
            $fields[] = new MSeparator();
            $btn2 = new MButton('tbBtnSave', _M('Salvar somente esta movimentação contratual', $module));
            $btn3 = new MButton('btnSaveMore', _M('Salvar esta movimentação contratual e inserir outra', $module));

            $divBtn1  = new MDiv('divBtn1', array($btn2, $btn3), null, 'align="center"');
            $fields[] = $divBtn1;

            $fields[] = new Separator('');

            //Grid de Movimentações contratuais
            $fields[]    = new MSeparator('');
            $fields[]    = new MSeparator('<hr>');
            $fields[]    = new MSeparator('');
            $busMovContract   = new BusinessAcademicBusMovementContract();
            $busMovCompl      = new BusinessAcademicBusMovementContractComplement();

            if ( in_array($function,array('update')) )
            {
                $aux = $contractId;
                unset($contractId);
                $contractId->value = $aux;
            }

            $filterContract->contractId = $contractId->value;

            $dataGrid3 = $businessContract->searchContract($filterContract);

            if ( count($dataGrid3) > 0 )
            {
                foreach ( $dataGrid3 as $contract )
                {
                    $contractData[] = $contract;
                    $contractMovs   = $busMovContract->getMovementContractSummary($contractId->value);

                    if ( count($contractMovs) > 0 )
                    {
                        foreach ( $contractMovs as $movement )
                        {
                            $desc           = $movement[0] . ' - ' . $movement[1];
                            
                            if ($movement[2] == SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_INTERNAL_TRANSFER_FROM'))
                            {
                                $movCompl = $busMovCompl->getMovementContractComplement($contractId->value, $movement[2], SAGU::getParameter('ACADEMIC', 'INTERNAL_TRANSFER_FROM_COURSE_FIELD_ID'), $movement[0]);
                            }
                            elseif ($movement[2] == SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO'))
                            {
                                $movCompl = $busMovCompl->getMovementContractComplement($contractId->value, $movement[2], SAGU::getParameter('ACADEMIC', 'INTERNAL_TRANSFER_TO_COURSE_FIELD_ID'), $movement[0]);
                            }
                                                            
                            if (strlen($movCompl->value) > 0)
                            {
                                $desc .= ' ' . $movCompl->value;
                            }
                            
                            $contractData[] = array(null, null, null, null, $desc);
                            unset($movCompl);
                        }
                    }
                }
            }

            $grdResults3 = $MIOLO->getUI()->getGrid($module,'GrdDiverseConsultationContract');
            $grdResults3->setData($contractData);

            $fields[]    = $grdResults3;
            $fields[]    = new MSeparator('');
        }

        parent::defineFields($fields, $validators, $data);
        
        /**
         * Lógicas inseridas para corrigir problemas.
         */
        $this->SetFormValue('reasonId', $data->reasonId);
        
        if ( strlen($data->learningPeriodId) > 0 )
        {
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $learningPeriod = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);
            
            $this->SetFormValue('periodId', $learningPeriod->periodId);
            $this->SetFormValue('learningPeriodId', $data->learningPeriodId);
        }
    }
    

    public function btnAddMovementContract_click($sender=NULL)
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $action    = MIOLO::getCurrentAction();
        $function  = MIOLO::_request('function');

        $opts['insertNew'] = MIOLO::_request('insertNew');

        $MIOLO->getActionURL( $module, $action, null, $opts);
    }

    public function btnSaveMore_click($sender=NULL)
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $action    = MIOLO::getCurrentAction();
        $function  = MIOLO::_request('function');

        $business  = new BusinessAcademicBusMovementContract();

        $data             = $this->getTypesData();
        
        $opts['insertNew']       = MIOLO::_request('insertNew');
        $opts['contractId']      = MIOLO::_request('contractId');
        $opts['function']        = $function;

        $opts['contractPersonId']      = MIOLO::_request('contractPersonId');
        $opts['contractPersonName']      = MIOLO::_request('contractPersonName');
        $opts['courseId']      = MIOLO::_request('courseId');
        $opts['courseVersion']      = MIOLO::_request('courseVersion');
        $opts['courseName']      = MIOLO::_request('courseName');

        // checar se a movimentacao contratual eh permitida
        $ok = $business->movementContractInsertionAllowed($data->contractId, $data->stateContractId, $data->stateTime, $data->reasonId);

        if ( ! $ok )
        {
            $this->addError($business->getErrors());
        }


        if ( $ok )
        {
            if ( $function == SForm::FUNCTION_UPDATE )
            {
                $ok  = $business->updateMovementContract($data);
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
            }
            else
            {
                $ok  = $business->insertMovementContract($data);
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
            }

            if ( $ok )
            {
                // This returns the primary key data to the search form
                // so that the user can see the inserted/updated record.
                if ( $function == SForm::FUNCTION_UPDATE )
                {
                    $opts['function'] = 'insert';
                    $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                }
                else
                {
                    $MIOLO->information(_M('Movimentação contratual inserida', $module), $MIOLO->getActionURL( $module, $action, null, $opts));
                }
            }
            else
            {
                $msg  = _M('Erro executando a operação solicitada.',$module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
    }


    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();

        $busMovementContract  = new BusinessAcademicBusMovementContract();
        $busStateTransition   = new BusinessAcademicBusStateTransistion();
        $busStateContract     = new BusinessAcademicBusStatesContract();

        $filters1->contractId = $data->contractId;

        //Retorna todas as movimentações contratuais de um contrato
        $dataMovementContract = $busMovementContract->searchMovementContract($filters1);

        foreach ( $dataMovementContract as $key1 => $value1 )
        {
            if ( ($data->contractId      == $value1[0]) &&
                 ($data->stateContractId == $value1[1]) &&
                 ($data->stateTime       == $value1[5]) )
            {
                //Aqui, tem-se a posição desta movimentação contratual em $key1
                break;
            }
        }

        //Após o foreach, em $key1 estará a localização da movimentação contratual a 
        //excluir. Lemrando que se entrarmos nesta função tbBtnDelete_click, automaticamente,
        //existe movimentação contratual para o contrato selecionado na grid
        if ( ($key1 == 0) || ($key1 == (count($dataMovementContract)-1)) )
        {
            //Entrará aqui se for a primeira ou a última movimentação contratual que se está exluíndo
            $currentStateContract = $busStateContract->getStatesContract($dataMovementContract[$key1][1]);

            strlen($dataMovementContract[$key1+1][1]) > 0 ? $nextStateContract    = $busStateContract->getStatesContract($dataMovementContract[$key1+1][1]) : null;

            strlen($dataMovementContract[$key1-1][1]) > 0 ? $prevStateContract    = $busStateContract->getStatesContract($dataMovementContract[$key1-1][1]) : null;

            $msgContract .= _M('A movimentação contratual que será excluída tem estas características', $module) . ':<br><br>' . $currentStateContract->description . '<br>' . _M('Este estado contratual é de', $module) . ' ';

            switch ( $currentStateContract->inOutTransition )
            {
                case 'i' : $msgContract .= _M('Entrada', $module); break;
                case 'o' : $msgContract .= _M('Saída', $module); break;
                case 't' : $msgContract .= _M('Transição', $module); break;
            }

            $msgContract .= '<br>' . _M('Este estado contratual', $module) . ' ';

            switch ( $currentStateContract->isCloseContract )
            {
                case DB_TRUE  : $msgContract .= _M('CONTRATO FECHADO', $module); break;
                case DB_FALSE : $msgContract .= _M('Não fecha contrato', $module); break;
            }

            if ( $key1 == 0 )
            {
                //Última movimentação contratual
                if ( $key1 == (count($dataMovementContract)-1) )
                {
                    //Além de ser a última movimentação contratual, também é a primeira e única
                    $msgContract .= '<br><br><br>' . _M('Esta é a única movimentação contratual para este contrato', $module);

                    $onlyOne = true;
                }
                else
                {
                    //É a última movimentação contratual e tem mais movimentações 
                    //para este contrato além desta
                    $msgContract .= '<br><br><br>' . _M('Se a exclusão for confirmada, a ÚLTIMA movimentação contratual passará a ser esta', $module) . ':<br><br>' . $nextStateContract->description . '<br>' . _M('Este estado contratual é de', $module) . ' ';
                    $messageType = 'next';
                }
            }
            else
            {
                //Primeira movimentação do contrato a ser deletada
                $msgContract .= '<br><br><br>' . _M('Se a exclusão for confirmada, a PRIMEIRA movimentação contratual passará a ser esta', $module) . ':<br><br>' . $prevStateContract->description . '<br>' . _M('Este estado contratual é de', $module) . ' ';

                $messageType = 'prev';
            }

            //Ver if para fazer pelo next ou prev
            if ( strlen($messageType) > 0 )
            {
                //Tem mensagem de tipo de movimentação contratual
                if ( $messageType == 'next' )
                {
                    $auxInOutTransition  = $nextStateContract->inOutTransition;
                    $auxIsClosedContract = $nextStateContract->isCloseContract;
                }
                else
                {
                    //Se não for mensagem de 'next', utiliza o 'prev'
                    $auxInOutTransition  = $prevStateContract->inOutTransition;
                    $auxIsClosedContract = $prevStateContract->isCloseContract;
                }
            }

            switch ( $auxInOutTransition )
            {
                case 'i' : $msgContract .= _M('Entrada', $module); break;
                case 'o' : $msgContract .= _M('Saída', $module); break;
                case 't' : $msgContract .= _M('Transição', $module); break;
            }

            !$onlyOne ? $msgContract .= '<br>' . _M('Este estado contratual', $module) . ' ' : null;

            switch ( $auxIsClosedContract )
            {
                case DB_TRUE  : $msgContract .= _M('CONTRATO FECHADO', $module); break;
                case DB_FALSE : $msgContract .= _M('Não fecha contrato', $module); break;
            }
        }
        else
        {
            //Movimentação entre a primeira e a última a ser deletada
            $dataStateTransition = $busStateTransition->getStateTransistion($dataMovementContract[$key1+1][1], $dataMovementContract[$key1-1][1]);

            if ( $dataStateTransition->beginStateId == NULL )
            {
                //Não pode ser permitida esta exclusão devido as transições contratuais não serem permitidas entre os estados contratuais anterior e posterior ao ser excluído
                foreach ( $data as $key2 => $value2 )
                {
                    $opts["$key2"] = $value2;
                }

                $msg  = _M('Não é possível excluir a movimentação contratual pois a exclusão resultaria em uma transição inválida.',$module);
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
                $caption = _M('Erro',$module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }

        $opts   = array('event'           => 'tbBtnDelete_confirm',
                        'function'        => 'delete',
                        'contractId'      => MIOLO::_request('contractId'),
                        'stateContractId' => MIOLO::_request('stateContractId'),
                        'stateTime'       => MIOLO::_request('stateTime') );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);

        strlen($msgContract) > 0 ? $MIOLO->question($msgContract, $gotoYes, $gotoNo) : $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE'), $gotoYes, $gotoNo);
    }
    
    public function tbBtnDelete_confirm($sender = NULL) 
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $this->object->contractId      = MIOLO::_REQUEST('contractId');
        $this->object->stateContractId = MIOLO::_REQUEST('stateContractId');
        $this->object->stateTime       = MIOLO::_REQUEST('stateTime');
        
        $ok = $this->object->delete();
        
        if ( $ok )
        {
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação', $module);
            SAGU::information($msg, $goto);
        }
    }

    
    public function tbBtnSave_click($sender=NULL)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $business = new BusinessAcademicBusMovementContract();

        $ok = true;
        if ( $function == SForm::FUNCTION_INSERT )
        {
            // checar se a movimentacao contratual eh permitida
            $ok = $business->movementContractInsertionAllowed($data->contractId, $data->stateContractId, $data->stateTime, $data->reasonId);

            if ( ! $ok )
            {
                $this->addError($business->getErrors());
            }
        }

        try
        {
            if ( $ok )
            {
                if ( $function == SForm::FUNCTION_INSERT )
                {
                    $business->insertMovementContract($data);
                    
                    $this->displayMessageInsert();
                }
                else
                {
                    $business->updateMovementContract($data);
                    $this->displayMessageUpdate();
                }
            }
        }
        catch(Exception $e)
        {
            $this->addError($e->getMessage());
        }
    }
    
    public function getTypesData() 
    {
        $MIOLO = MIOLO::getInstance();
        $function = $MIOLO->_REQUEST('function');
        
        $data = parent::getTypesData();
        
        $data->learningPeriodId = $_POST['learningPeriodId']; // Buscado por POST pois nenhum outro método funcionou.   
        $data->reasonId         = $_POST['reasonId']; // Buscado por POST pois nenhum outro método funcionou.        
        $hour = $this->stateHour->value;
        if ( strlen($hour) == 0 )
        {
            $hour = date('H:i');
        }        
        $data->stateTime        = ( $function == 'delete' ) ? $data->stateTime : $data->stateTime .= ' ' . $hour . ':00';
        $data->_stateTime = $_REQUEST['_stateTime'];
        
        return $data;
    }
}
?>
