<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 19/12/2005
 */

/**
 * Form to search the basCenter table
 */
class FrmConditionUnblockSearch extends SSearchForm
{
    private $home;
    
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $this->home   = $data->home;

        $module = SAGU::getFileModule(__FILE__);        
        parent::__construct(_M('Localizar', $module), new acdCurricularComponentUnblock(), 'curricularComponentUnblockId', 'BusConditionUnblock' );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $limbo = new MHiddenField('limboS', '');
        $fields[] = $limbo;

        //Field curricular component
        $curricularComponentUnblockIdS = new MHiddenField('curricularComponentUnblockIdS','');
        $fields[] = $curricularComponentUnblockIdS;

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodIdS', strlen($this->getFormValue('periodIdS', $data->periodId))>0 ? $this->getFormValue('periodIdS', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        $contractData = $this->getTypesData();

        $fields[] = new MHiddenField('limboS', '');
        $MIOLO->getClass( 'academic', 'lookupContract' );
        $fields[] = new SLookupContract('contractIdS', $contractData, false);

        //Field learning period
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Período letivo', $module) . ':');
        $learningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));      
        $learningPeriodIdS = new MLookupTextField('learningPeriodIdS', $this->getFormValue('learningPeriodIdS'), _M('Código do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('periodIdS', null, null, null, null, 'learningPeriodS'), $module, 'LearningPeriod', null, array('periodId' => 'periodIdS', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId'));
        $learningPeriodIdS->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MIntegerValidator('learningPeriodIdS', _M('Código do período letivo',$module));
        $learningPeriodS = new MTextField('learningPeriodS', $this->getFormValue('learningPeriodS',$this->substitutionUnblockSearch->learningPeriodS), _M('Período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodS->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodS->setReadOnly(true);
        $hctlearningPeriodS = new MHContainer('hctlearningPeriodS', array($learningPeriodLabelS, $learningPeriodIdS, $learningPeriodS));
        $hctlearningPeriodS->setShowLabel(false);
        $fields[] = $hctlearningPeriodS;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('curriculumCourseIdS', $data->curriculumCourseIdS),
            $this->GetFormValue('curriculumCourseVersionS', $data->curriculumCourseVersionS),
            $this->GetFormValue('curriculumCourseTurnIdS', $data->curriculumCourseTurnIdS),
            $this->GetFormValue('curriculumCourseUnitIdS', $data->curriculumCourseUnitIdS)
        );
        //Field course
        $curriculumCourseLabel = new MText('curriculumCourseLabelS', _M('Curso', $module) . ':');
        $curriculumCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseIdS = new MLookupTextField('curriculumCourseIdS', $lkpValue, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'curriculumCourseIdS, curriculumCourseVersionS, curriculumCourseNameS, curriculumCourseTurnIdS, curriculumCourseTurnDescriptionS, curriculumCourseUnitIdS, curriculumCourseUnitDescriptionS', $module, 'CourseOccurrence', null, array('courseId' => 'curriculumCourseIdS'), !$this->page->isPostBack());
        $curriculumCourseIdS->setJsHint(_M('Informe o código do curso', $module));
        $curriculumCourseVersionS = new MTextField('curriculumCourseVersionS', $this->getFormValue('curriculumCourseVersionS'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseVersionS->setJsHint(_M('Versão do curso', $module));
        $curriculumCourseVersionS->setReadOnly(true);
        $curriculumCourseNameS = new MTextField('curriculumCourseNameS', $this->getFormValue('curriculumCourseNameS'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseNameS->setJsHint(_M('Nome do curso',$module));
        $curriculumCourseNameS->setReadOnly(true);
        $hctCurriculumCourse = new MHContainer('hctCurriculumCourseS', array($curriculumCourseLabel, $curriculumCourseIdS, $curriculumCourseVersionS, $curriculumCourseNameS));
        $hctCurriculumCourse->setShowLabel(true);
        $fields[] = $hctCurriculumCourse;

        //Field turn
        $curriculumCourseTurnLabelS = new MText('turnLabelS', _M('Turno', $module) . ':');
        $curriculumCourseTurnLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseTurnIdS = new MTextField('curriculumCourseTurnIdS', $this->getFormValue('curriculumCourseTurnIdS'), _M('Turno', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseTurnIdS->setJsHint(_M('Código do turno', $module));
        $curriculumCourseTurnIdS->setReadOnly(true);
        $curriculumCourseTurnDescriptionS = new MTextField('curriculumCourseTurnDescriptionS', $this->getFormValue('curriculumCourseTurnDescriptionS'), _M('Descrição do turno', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseTurnDescriptionS->setJsHint(_M('Descrição do turno', $module));
        $curriculumCourseTurnDescriptionS->setReadOnly(true);
        $hctCurriculumTurn = new MHContainer('hctCurriculumTurnS', array($curriculumCourseTurnLabelS, $curriculumCourseTurnIdS, $curriculumCourseTurnDescriptionS));
        $hctCurriculumTurn->setShowLabel(false);
        $fields[] = $hctCurriculumTurn;

        //Field unit
        $curriculumCourseUnitLabelS = new MText('curriculumCourseUnitLabelS', _M('Unidade', $module) . ':');
        $curriculumCourseUnitLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseUnitIdS = new MTextField('curriculumCourseUnitIdS', $this->getFormValue('curriculumCourseUnitIdS'), _M('Unidade', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseUnitIdS->setJsHint(_M('Código da unidade', $module));
        $curriculumCourseUnitIdS->setReadOnly(true);
        $curriculumCourseUnitDescriptionS = new MTextField('curriculumCourseUnitDescriptionS', $this->getFormValue('curriculumCourseUnitDescriptionS'), _M('Descrição da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseUnitDescriptionS->setJsHint(_M('Descrição da unidade', $module));
        $curriculumCourseUnitDescriptionS->setReadOnly(true);
        $hctCurriculumCourseUnit = new MHContainer('hctUnitS', array($curriculumCourseUnitLabelS, $curriculumCourseUnitIdS, $curriculumCourseUnitDescriptionS));
        $hctCurriculumCourseUnit->setShowLabel(false);
        $fields[] = $hctCurriculumCourseUnit;

        //Field curricular component
        $curriculumCurricularComponentLabel = new MText('curriculumCurricularComponentS', _M('Disciplina', $module) . ':');
        $curriculumCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCurricularComponentIdS = new MLookupTextField('curriculumCurricularComponentIdS', $this->getFormValue('curriculumCurricularComponentIdS'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curriculumCurricularComponentVersionS,curriculumCurricularComponentNameS', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'curriculumCourseIdS', 'curricularComponentId' => 'curriculumCurricularComponentIdS'), !$this->page->isPostBack());
        $curriculumCurricularComponentIdS->setJsHint(_M('Informe o código da disciplina do currículo', $module));
        $curriculumCurricularComponentVersionS = new MTextField('curriculumCurricularComponentVersionS', $this->getFormValue('curriculumCurricularComponentVersionS'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCurricularComponentVersionS->setJsHint(_M('Informe a versão da disciplina do currículo', $module));
        $curriculumCurricularComponentVersionS->setReadOnly(true);
        $curriculumCurricularComponentNameS = new MTextField('curriculumCurricularComponentNameS', $this->getFormValue('curriculumCurricularComponentNameS'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCurricularComponentNameS->setJsHint(_M('Informe o nome da disciplina do currículo', $module));
        $curriculumCurricularComponentNameS->setReadOnly(true);
        $hctCurriculumCurricularComponent = new MHContainer('hctCurriculumCurricularComponentS', array($curriculumCurricularComponentLabel, $curriculumCurricularComponentIdS, $curriculumCurricularComponentVersionS, $curriculumCurricularComponentNameS));
        $hctCurriculumCurricularComponent->setShowLabel(true);
        $fields[] = $hctCurriculumCurricularComponent;

        //$curriculumIdS
        $businessCurriculum = new BusinessAcademicBusCurriculum();

        $filters1->courseId = $curriculumCourseIdS->value;
        $filters1->courseVersion = $curriculumCourseVersionS->value;
        $filters1->curricularComponentId = $curriculumCurricularComponentIdS->value;
        $filters1->curricularComponentVersion = $curriculumCurricularComponentVersionS->value;
        $filters1->unitId = $curriculumCourseUnitIdS->value;
        $filters1->turnId = $curriculumCourseTurnIdS->value;

        $searchCurriculum = $businessCurriculum->searchCurriculum($filters1);

        if ( count($searchCurriculum) == 1 )
        {
            $filters->curriculumId = $searchCurriculum[0][0];
        }
        
        parent::defineFields($fields, $module, 'GrdConditionUnblockSearch', $validators);

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
        $filters->curricularComponentUnblockId = $this->getFormValue('curricularComponentUnblockIdS', $this->curricularComponentUnblockIdS->value);
        $filters->personId = $this->getFormValue('contractPersonId', $this->contractPersonId->value);
        $filters->contractId = $this->getFormValue('contractId', $this->contractId->value);
        $filters->learningPeriodId = $this->getFormValue('learningPeriodIdS', $this->learningPeriodIdS->value);
        $filters->curriculumId = $this->getFormValue('curriculumIdS', $this->curriculumIdS->value);
        $filters->courseId = $this->getFormValue('curriculumCourseIdS', $this->curriculumCourseIdS->value);
        $filters->courseVersion = $this->getFormValue('curriculumCourseVersionS', $this->curriculumCourseVersionS->value);
        $filters->curricularComponentId = $this->getFormValue('curriculumCurricularComponentIdS', $this->curriculumCurricularComponentIdS->value);
        $filters->curricularComponentVersion = $this->getFormValue('curriculumCurricularComponentVersionS', $this->curriculumCurricularComponentVersionS->value);
        $filters->unitId = $this->getFormValue('curriculumCourseUnitIdS', $this->curriculumCourseUnitIdS->value);
        $filters->turnId = $this->getFormValue('curriculumCourseTurnIdS', $this->curriculumCourseTurnIdS->value);
        $filters->periodId = $this->getFormValue('periodId', $this->periodId->value);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        // get filters values
        $data = new lookupContract();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            $data->$var = $this->getFormValue($var, $this->$var->value);
        }

        return $data;
    }
}
?>