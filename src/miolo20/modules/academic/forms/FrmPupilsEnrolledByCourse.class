<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Pupils enrolled by course frm
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 15/09/2010
 *
 **/

/**
 * Form to manipulate a document of students enrolled per course
 **/


class FrmPupilsEnrolledByCourse extends SManagementForm
{
    private $home;
    
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        parent::__construct( new AcdEnroll(), null, 'BusEnroll', _M('Alunos matriculados por curso', $module) );
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');

        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnSave');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->disableButton('tbBtnDelete');
        
        //Mensagem de aviso
        $fields[] = MMessage::getStaticMessage('message', "<strong>ATENÇÃO:</strong> Não se esqueça de que é necessário o cadastro de um Período Anterior no cadastro do período a ser filtrado (cadastro pode ser feito em Acadêmcio::Cadastro::Período).", MMessage::TYPE_INFORMATION);
        $fields[] = new MSeparator('&nbsp;');
        
        //Field period
        $business = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $business->listPeriod());
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = $periodId;
        
        //Field course version
        $courseLabel = new MText('courseLabel', _M('Curso',$module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseVersion, courseName', $module, 'CourseVersion', null, null, true);
        $courseId->setJsHint(_M('Informe o código do curso',$module));
        $courseName = new MTextField('courseName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso',$module));
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setJsHint(_M('Versão do curso',$module));
        $courseVersion->setReadOnly(true);
        $hctCourse  = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[] = $hctCourse;

        //Field turn
        $business = new BusinessBasicBusTurn();
        $turnId = new MComboBox( 'turnId', $this->GetFormValue('turnId', $data->turnId), _M('Turno', $module), $business->listTurn());
        $turnId->setJsHint(_M('Informe o código do turno', $module));
        $fields[] = $turnId;

        //Field unit
        $business = new BusinessBasicBusUnit();
        $unitId = new MComboBox('unitId', $this->GetFormValue('unitId', $data->unitId), _M('Unidade', $module), $business->listUnit());
        $unitId->setJsHint(_M('Informe o código da unidade', $module));
        $fields[] = $unitId;
        
        //Hiddenfield limbo
        $periodId = new MHiddenField('limbo');
        $fields[]       = $periodId;
        
        //Field class
        $classLabel = new MText('classLabel', _M('Turma', $module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'className_, limbo, limbo, limbo, limbo, limbo', $module, 'ClassCourse', null, array('courseId'=>'courseId'), true);
        $classId->setJsHint(_M('Informe o código da turma', $module));
        $className_ = new MTextField('className_', $this->getFormValue('className_', $data->className_), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className_->setReadOnly(true);
        $className_->setJsHint(_M('Nome da turma', $module));
        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $className_));
        $hctClass->setShowLabel(true);
        $fields[] = $hctClass;

        //Begin date
        $beginDateLabel = new MText('beginDateLabel', _M('Data inicial', $module) . ':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $beginDate = new MCalendarField('beginDateEnroll', $this->getFormValue('beginDateEnroll', $data->beginDateEnroll), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial.', $module));
        $fields[] = new MHContainer('hctBeginDate', array( $beginDateLabel, $beginDate ));
        //End date
        $endDateLabel = new MText('endDateLabel', _M('Data final', $module) . ':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $endDate = new MCalendarField('endDateEnroll', $this->getFormValue('endDateEnroll', $data->endDateEnroll), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data final', $module));
        $fields[] = new MHContainer('hctEndDate', array( $endDateLabel, $endDate ));
        
        //Field type
        $optsType[] = new MOption('analytic',  'a', _M('Analítico', $module), DB_TRUE);
        $optsType[] = new MOption('synthetic', 's', _M('Sintético', $module), DB_FALSE);
        $generationTypeLabel = new MText('type', _M('Tipo de arquivo', $module) . ':');
        $generationTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generationType = new MRadioButtonGroup('generationType', '', $optsType, $this->getFormValue('generationType'), '', 'horizontal', '');
        $generationType->setShowLabel(false);
        $hctGenerationType = new MHContainer('hctGenerationType', array( $generationTypeLabel, $generationType ));
        $hctGenerationType->setShowLabel(false);
        $fields[] = $hctGenerationType;
        
        //Group by class
        $groupByClassLabel = new MText('groupByClassLabel', _M('Agrupar por turma', $module) . ':');
        $groupByClassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $groupByClass = new MRadioButtonGroup('groupByClass', '', SAGU::listYesNo(1), $this->getFormValue('groupByClass', DB_FALSE), '', 'horizontal', '');
        $groupByClass->setShowLabel(false);
        $hctGroupByClass = new MHContainer('groupByClass', array( $groupByClassLabel, $groupByClass ));
        $hctGroupByClass->setShowLabel(false);
        $fields[] = $hctGroupByClass;
        
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat');
        
        parent::defineFields($fields, $validators, $data);        
        $this->toolbar->enableButton('tbBtnPrint'); //Reabilita o botão para imprimir o relatório pois o defineFields desativa-o
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $filter = $this->getTypesData();
        
        $report = new SReport();
        
        //Define o relatorio entre sintético ou analítico
        if($filter->generationType == 's')
        {
            $report->setReportName('pupilsEnrolledByCourseSyntetic');
        }
        else
        {
            $report->setReportName('pupilsEnrolledByCourseAnalitic');
        }
        
        $businessCompany = new BusinessBasicBusCompany();
        $company = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $legalPerson = $businessLegalPerson->getLegalPerson($company->personId);
        $businessCity = new BusinessBasicBusCity();
        $city = $businessCity->getCity($legalPerson->cityId);
        
        //Parameters of the report   
        $parameters = array();
        $parameters['companyid'] = (int)$company->companyId;
        $parameters['empresa'] = $company->name;
        $parameters['cnpj'] = $legalPerson->cnpj;
        $parameters['cidade'] = $city->name.'/'.$city->stateId;
        $parameters['endereco'] = $legalPerson->location;
        $parameters['numero'] = $legalPerson->number;
        $parameters['periodid'] = $filter->periodId;
        
        if( strlen($filter->courseId) > 0 )
        {
            $parameters['courseid'] = $filter->courseId;
        }
        if( strlen($filter->courseVersion) > 0 )
        {
            $parameters['courseversion'] = (int) $filter->courseVersion;
        }
        if( strlen($filter->turnId) > 0 )
        {
            $parameters['turnid'] = (int) $filter->turnId;
        }
        if( strlen($filter->unitId) > 0 )
        {
            $parameters['unitid'] = (int) $filter->unitId;
        }
        if( strlen($filter->classId) > 0 )
        {
            $parameters['classid'] = $filter->classId;
        }
        if( strlen($filter->beginDateEnroll) > 0 )
        {
            $parameters['begindate'] = $filter->beginDateEnroll;
        }
        if( strlen($filter->endDateEnroll) > 0 )
        {
            $parameters['enddate'] = $filter->endDateEnroll;
        }
        if( $filter->groupByClass == DB_TRUE )
        {
            $parameters['show_class'] = true;
        }
        $parameters['emissiondate'] = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
        
        $report->setFileType(MIOLO::_REQUEST('reportFormat'));
        $report->setParameters($parameters);
        if( !$report->generate() )
        {
            $this->addError(_M('Nenhum registro encontrado', $module));
        }
    }
    
    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new stdClass();
        $data->periodId = $this->getFormValue('periodId');
        $data->courseId = $this->getFormValue('courseId');
        $data->courseVersion = $this->getFormValue('courseVersion');
        $data->turnId = $this->getFormValue('turnId');
        $data->unitId = $this->getFormValue('unitId');
        $data->classId = $this->getFormValue('classId');
        $data->reportFormat = $this->getFormValue('reportFormat');
        $data->generationType = $this->getFormValue('generationType');
        $data->beginDateEnroll = $this->getFormValue('beginDateEnroll');
        $data->endDateEnroll = $this->getFormValue('endDateEnroll');
        $data->groupByClass = $this->getFormValue('groupByClass');

        return $data;
    }
}

?>
