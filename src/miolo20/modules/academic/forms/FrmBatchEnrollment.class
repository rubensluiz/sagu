<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gera matrícula em lotes
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 01/02/2011
 *
 **/

class FrmBatchEnrollment extends SManagementForm
{
    public $grid;

    
    public function __construct()
    {
        parent::__construct( null, null, null );

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
    }

    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $fields[] = new MHiddenField('limbo');

        //Field learning period
        $learningPeriodIdLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
        $learningPeriodIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodIdLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'learningPeriodIdDescription'), 'academic', 'LearningPeriod', null, array('learningPeriodId' => 'learningPeriodId'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo', $module), 'required');
        $learningPeriodIdDescription = new MTextField('learningPeriodIdDescription', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodIdDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodIdDescription->setReadOnly(true);
        $fields[] = new MHContainer('learningPeriodCnt', array($learningPeriodIdLabel, $learningPeriodId, $learningPeriodIdDescription));

        //Turma
        $classIdLabel = new MText('classIdLabel', _M('Turma', $module) . ':');
        $classIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('classIdDescription', 'limbo', 'limbo'), 'academic', 'Class', null, array('classId' => 'classId'), true);
        $classId->setJsHint(_M('Informe o código da turma', $module));
        $classIdDescription = new MTextField('classIdDescription', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $classIdDescription->setJsHint(_M('Nome da turma', $module));
        $classIdDescription->setReadOnly(true);
        $fields[] = new MHContainer('classIdCnt', array($classIdLabel, $classId, $classIdDescription));

        $fields[] = new MButton('listContract', _M('Listar contratos', $module));

        if ( strpos(SAGU::getEventName(), ':click') ) //Se foi clicado em algum botao/evento
        {
            $busContract = new BusinessAcademicBusContract();
            $busEnroll = new BusinessAcademicBusEnroll();

            $filters = new stdClass();
            $filters->learningPeriodId = MIOLO::_REQUEST('learningPeriodId');
            $filters->classId = MIOLO::_REQUEST('classId');

            $gridData = $busContract->getActiveContract($filters, false);

            $fields[] = $this->grid = $MIOLO->getUI()->getGrid($module, 'GrdBatchEnrollment', $filters);
            $this->grid->setData( $gridData );

            $fields[] = new MButton('enrollContract', _M('Matricular', $module));  
        }
        
        parent::defineFields($fields, $validators, $data);
    }

    
    public function enrollContract_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // desabilitar timeout, pois este processo pode ser muito demorado,
        // dependendo da quantidade de alunos a matricular.
        set_time_limit(0);

        $learningPeriodId = MIOLO::_REQUEST('learningPeriodId');

        $busContract = new BusinessAcademicBusContract();
        $busEnroll = new BusinessAcademicBusEnroll();
        $busGroup = new BusinessAcademicBusGroup();
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $busClassPupil = new BusinessAcademicBusClassPupil();
        $busClass = new BusinessAcademicBusClass();

        //Verifica erros diversos
        try
        {
            if ( !(count($this->grid->selecteds) > 0) )
            {
                throw new Exception( _M('Nenhum contrato foi selecionado.', $module) );
            }
        }
        catch (Exception $e)
        {
            $this->AddError( $e->getMessage() );
            return;
        }

        $failCount = 0;
        $okCount = 0;
        $gridData = $this->grid->getData();
        foreach ( $this->grid->selecteds as $position )
        {
            try
            {
                $contractId = $gridData[$position][0];
                $classId = $gridData[$position][4];
                $classPeriod = $gridData[$position][5];

                if ( strlen($classId) <= 0 )
                {
                    throw new Exception(_M('Sem turma para matricular', $module));
                }

                $groups = $busEnroll->getGroupsAvailableForEnroll($contractId, $classId, $learningPeriodId, $classPeriod);

                if ( count($groups) <= 0 )
                {
                    throw new Exception( _M('Não existem disciplinas para este contrato e período da turma.', $module) );
                }

                $_groups = array();
                $classCurriculum = array();
                foreach ( $groups as $group )
                {
                    //Verifica se ha mais de uma opcao de disciplina oferecida para o periodo, contrato e turma
                    $value = $group->classId . $group->curriculumId;
                    $exists = $classCurriculum[$value];
                    
                    if ( strlen($exists) > 0 )
                    {
                        throw new Exception( _M('Existe mais de uma opcao de disciplina oferecida para o período.
                            Não é possível identificar em qual delas o aluno deve ser matriculado.
                            Código das disciplinas oferecidas em conflito: @1 e @2.', $module, $group->groupId, $exists) );
                    }
                    
                    $classCurriculum[$value] = $group->groupId;
                    
                    $_groups[ $group->groupId ] = $group->curriculumId;
                }

                //Realiza a matricula
                $busEnroll->enroll( $contractId, $learningPeriodId, $_groups );

                //Adiciona mensagem na coluna "Mensagem" da grid
                $msg = new MLabel(_M('Matrícula efetuada com sucesso.', $module), 'green');
                $msg->setBold(true);

                $okCount ++;
            }
            catch (Exception $e)
            {
                //Adiciona o erro na coluna "Mensagem" da grid
                $msg = new MLabel($e->getMessage(), 'red');
                $msg->setBold(true);

                $failCount ++;
            }

            $gridData[$position][] = $msg->generate();
        }

        $this->grid->setData($gridData);

        $msg = array();
        $msg[] = _M('Operação executada com sucesso.', $module);
        $msg[] = _M('Matrículas finalizadas: @1', $module, $okCount);
        $msg[] = _M('Matrículas que não puderam ser finalizadas: @1', $module, $failCount);
        
        $this->AddInfo( implode('<br>', $msg) );
    }
}
?>
