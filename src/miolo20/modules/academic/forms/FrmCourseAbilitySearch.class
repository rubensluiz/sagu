<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdCourseAbility table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 21/09/2005
 *
 */
class FrmCourseAbilitySearch extends SForm
{

    /**
     * Construtor da classe
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Localizar', $module), null, null);

        $this->toolbar->disableButton('tbBtnSave');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnPrint');
    }
    
    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $courseAbilityIdS = new MTextField('courseAbilityIdS', $this->courseAbilityIdS->value, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseAbilityIdS->setJsHint(_M('Informe o códido da competência do curso', $module));
        $fields[] = $courseAbilityIdS;

        $formationLevelId = new MHiddenField('formationLevelId', SAGU::getParameter('ACADEMIC', 'TECHNICIAN_FORMATION_LEVEL'));
        $fields[] = $formationLevelId;

        $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseIdS = new MLookupTextField('courseIdS', $this->courseIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseVersionS,courseNameS', $module, 'CourseVersion', null, array( 'formationLevelId' => 'formationLevelId', 'courseId' => 'courseIdS' ), !$this->page->isPostBack());
        $courseIdS->setJsHint(_M('Informe o código do curso', $module));
        $courseVersionS = new MTextField('courseVersionS', $this->courseVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersionS->setJsHint(_M('Informe a versão do curso', $module));
        $validators[] = new MIntegerValidator('courseVersionS', _M('Versão', $module));
        $courseNameS = new MTextField('courseNameS', $this->courseNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseNameS->setJsHint(_M('Informe o nome do curso', $module));
        $hctCourseVersion = new MHContainer('hctCourseVersion', array( $courseLabel, $courseIdS, $courseVersionS, $courseNameS ));
        $hctCourseVersion->setShowLabel(true);
        $fields[] = $hctCourseVersion;

        $descriptionS = new MMultiLineField('descriptionS', $this->descriptionS->value, _M('Descrição', $module), 40, 5, 40);
        $descriptionS->setJsHint(_M('Informe a descrição da competência do curso', $module));
        $fields[] = $descriptionS;

        $opts = array('G' => _M('Geral', $module),
                      'E' => _M('Específico', $module)
                     );

        $typeS = new MSelection('typeS', $this->getFormValue('typeS', $data->typeS), _M('Tipo', $module), $opts);
        $typeS->setJsHint(_M('Informe o tipo de competência do curso', $module));
        $fields[] = $typeS;

        $fields[] = new MButton('btnSearch', _M('Localizar', $module));

        $this->setFields($fields);
        $this->setValidators($validators);

        $filters = $this->getTypesData();

        $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdCourseAbilitySearch', $filters);
        $business = new BusinessAcademicBusCourseAbility();
        $data = $business->searchCourseAbilityFormGrid($filters);
        $grdResults->setData($data);

        $this->addField($grdResults);
        $this->page->onLoad('document.' . $this->name . '.courseAbilityIdS.focus();');
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));

        parent::defineFields();
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     * */
    public function getTypesData()
    {
        // get filters values
        $data->courseAbilityId = $this->getFormValue('courseAbilityIdS');
        $data->courseId = $this->getFormValue('courseIdS');
        $data->courseVersion = $this->getFormValue('courseVersionS');
        $data->courseName = $this->getFormValue('courseNameS');
        $data->description = $this->getFormValue('descriptionS');
        $data->type = $this->getFormValue('typeS');

        return $data;
    }
}

?>
