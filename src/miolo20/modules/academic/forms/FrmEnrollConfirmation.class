<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Enroll confirmation form
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 18/04/2006
 *
 **/

/**
 * Form to confirm an enroll
 **/
class FrmEnrollConfirmation extends MForm
{
    public $enrollData;
    public $data;
    public $groupIds;
    public $invoiceId1;
    public $gradeHorarios;
    public $simularMatricula = true;

    /**
     * Class constructor
     **/
    public function __construct($simularMatricula = true)
    {
        $action = MIOLO::getCurrentAction();
        $module = 'academic';
        $MIOLO  = MIOLO::getInstance();
        
        $this->simularMatricula = $simularMatricula;

        $session = $MIOLO->session;
        $this->enrollData = $session->isRegistered('enrollData') ? $session->getValue('enrollData') : null;
        $this->data = $session->isRegistered('data') ? $session->getValue('data') : null;

        if ( is_null($this->enrollData) || is_null($this->data) )
        {
        	$url = $MIOLO->getActionURL($module,substr($action,0,strrpos($action,':')));
        	$MIOLO->error(_M('Sessão finalizada por inatividade.', $module), $url);
        }
        
        $this->groupIds = $this->data->groupId;
        
        parent::__construct(_M('Confirmação de matrícula', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'academic';
        $action = MIOLO::getCurrentAction();

        try {
            
            $learningPeriodId = $this->enrollData->learningPeriodId;
            $contractId       = $this->enrollData->contractId;

            $business       = new BusinessAcademicBusLearningPeriod();
            $learningPeriod = $business->getLearningPeriod($learningPeriodId);

            $fields[] = new MHiddenField('periodId', $learningPeriod->periodId);
            $fields[] = new MHiddenField('contractId', $this->getFormValue('contractId',$contractId));
            $fields[] = new MHiddenField('learningPeriodId', $this->getFormValue('learningPeriodId', $learningPeriodId));

            $txtPeriodId = new MTextField('txtPeriodId', $learningPeriod->periodId, _M('Código do período',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $txtPeriodId->setReadOnly(true);
            $txtContractId = new MTextField('txtContractId', $contractId, _M('Código do contrato',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $txtContractId->setReadOnly(true);

            $business = new BusinessAcademicBusContract();
            $contract = $business->getContract($contractId);

            $txtPersonId = new MTextField('txtPersonId', $contract->personId, _M('Código da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $txtPersonId->setReadOnly(true);
            $txtPersonName = new MTextField('txtPersonName', $contract->personName, _M('Nome da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $txtPersonName->setReadOnly(true);

            $txtParcelsNumber = new MTextField('txtParcelsNumber', $this->enrollData->parcelsNumber, _M('Número de parcelas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $txtParcelsNumber->setReadOnly(true);

            $cntLine1 = new MHContainer('cntLine1', array($txtPeriodId, $txtContractId, $txtPersonId, $txtPersonName, $txtParcelsNumber));

            $txtCourseId = new MTextField('txtCourseId', $contract->courseId, _M('Código do curso',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $txtCourseId->setReadOnly(true);
            $txtCourseVersion = new MTextField('txtCourseVersion', $contract->courseVersion, _M('Versão do curso',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $txtCourseVersion->setReadOnly(true);
            $txtCourseName = new MTextField('txtCourseName', $contract->courseName, _M('Nome do curso',$module), 60);
            $txtCourseName->setReadOnly(true);

            $cntLine2 = new MHContainer('cntLine2', array($txtCourseId, $txtCourseVersion, $txtCourseName));

            $cntContractInfo = new MBaseGroup('cntContractInfo', _M('Detalhes da matrícula', $module), array($cntLine1, $cntLine2), 'vertical');

            $fields[] = $cntContractInfo;

            $fields[] = new MSeparator();

             // Simulate enroll
            if ( $this->simularMatricula )
            {
                $data = $this->enroll(true);
            }

            if ( count($this->data->groupId) > 0 )
            {
                // TODO: Tentar otimizar a rotina desta função, pois é muito lenta
                $fields[] = $this->gradeHorarios = $this->generateSchedulesArray($this->getSchedulesArray($this->data->groupId));
            }

            if ( SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES' )
            {
                $fields[] = $this->generateFinanceData($data->invoices, $data->status);
            }

            $returnTo = substr($action,0,strrpos($action,':')) . ':enrollCurricularComponents';
            $sep1 = new MSeparator();
            $vars = array ( 'enrollData' => urlencode(serialize($this->enrollData)) );
            $prevUrl = $MIOLO->getActionURL(MIOLO::getCurrentModule(), $returnTo, null, $vars);
            $btnPrev = new MButton('btnPrev', '<< ' . _M('Anterior', $module), $prevUrl);
            $btnConfirm = new MButton('btnConfirm', _M('Confirmar', $module));

            $controls[] = $sep1;
            $controls[] = $btnPrev;
            $controls[] = $btnConfirm;

            $sep2       = new MSeparator();
            $controls[] = $sep2;
            $cntButtons = new MDiv('cntButtons', $controls, null, 'align=center');

            $fields[] = $cntButtons;

            $mailSent = new MHiddenField('mailSent', $this->getFormValue('mailSent', 'no'));
            $fields[] = $mailSent;

        }
        catch(Exception $e)
        {
            $MIOLO->error($e->getMessage());
        }
        
        $this->setFields($fields);
        $this->setShowPostButton(false);
        $this->setClose(false);
    }
    
    /**
     * Process generated finance data to show it in grids
     * 
     * @param unknown_type $data
     */
    private function generateFinanceData($invoices, $status)
    {      
        $text = new MText('previsaoFinanceira', _M('Previsão financeira:', $module));
        $text->setBold(true);
        $fields[] = $text;
        
        // Define primeira parcela
        $parcelIndex = 1;
  
        //Títulos
        foreach( $invoices as $invoice )
        {
            $columns = array();
            $columns[] = _M('Código do título');
            $columns[] = _M('Data de vencimento');
            $columns[] = _M('Valor');
            $columns[] = _M('Valor atualizado');
            $columns[] = _M('Status');
            
            unset($dataTable);
            $dataTable[] = array(
                $invoice->invoiceId,
                $invoice->maturityDate,
                $invoice->balance,
                $invoice->balanceWithPolicies,
                $status[$invoice->invoiceId]
            );

            $labelLancamento = new MText(rand(), _M('Lançamentos'));
            $labelLancamento->setBold(true);
            $dataTable[] = array($labelLancamento);
            
            //Lançamentos
            foreach( $invoice->entries as $entrie )
            {
                $dataLancamento = new MText(rand(), _M('Data'));
                $dataLancamento->setBold(true);
                $operacao = new MText(rand(), _M('Operação'));
                $operacao->setBold(true);
                $valor = new MText(rand(), _M('Valor'));
                $valor->setBold(true);

                $dataTable[] = array($dataLancamento, $operacao, $valor);
                $columnsEntries = array();
                $columnsEntries[] = _M('Data');
                $columnsEntries[] = _M('Operação');
                $columnsEntries[] = _M('Valor');

                //unset($dataTableEntries);
                $dataTable[] = array(
                    $entrie->entryDate,
                    $entrie->operationDescription,
                    $entrie->value
                );
            }
            
            $this->invoiceId1 = ($parcelIndex == 1) ? $invoice->invoiceId : $this->invoiceId1;
            
            $fields[] = new MTableRaw(_M('Parcela ' . $parcelIndex++, $module), $dataTable, $columns);
            $fields[] = new MDiv(rand(), new MText('', '-'));
        }

		$container = new MDiv('financeData', $fields);
		return $container;
    }
    
    public function getSchedulesArray($groups)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'academic';

        $busSchedule = new BusinessAcademicBusSchedule();

        $tmp = array();
        
        if ( count($groups) > 0 )
        {
            foreach ( $groups as $groupId => $curriculumId )
            {
                $schedulesData = $busSchedule->getGroupScheduleDataByDate($groupId);
                
                if ( count($schedulesData) > 0 )
                {
                    foreach ( $schedulesData as $scheduleData )
                    {
                        $tmp[$scheduleData->weekday->id]->description = $scheduleData->weekday->description;
                    
                        foreach ( $scheduleData->units as $unitId => $unit )
                        {
                            foreach ( $unit->turns as $turnId => $turn )
                            {
                                $tmp[$scheduleData->weekday->id]->turns[$turnId]->description = $turn->description;
                            
                                foreach ( $turn->times as $timeId => $time )
                                {
                                    $tmp[$scheduleData->weekday->id]->turns[$turnId]->schedules[$timeId]->beginHour = $time->beginHour;
                                    $tmp[$scheduleData->weekday->id]->turns[$turnId]->schedules[$timeId]->endHour = $time->endHour;
                                    $tmp[$scheduleData->weekday->id]->turns[$turnId]->schedules[$timeId]->groupId = $groupId;
                                    $tmp[$scheduleData->weekday->id]->turns[$turnId]->schedules[$timeId]->unit = $unit->description;
                                    $tmp[$scheduleData->weekday->id]->turns[$turnId]->schedules[$timeId]->professors = $time->professors;
                                }
                            }

                            ksort($tmp[$scheduleData->weekday->id]->turns);
                        }
                    }
                }
            }

            ksort($tmp);
        }
        
        return $tmp;   
    }
    
    public function generateSchedulesArray($schedulesArray)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = 'academic';
        
        if ( count($schedulesArray) > 0 )
        {
            $busGroup = new BusinessAcademicBusGroup();

            $weekDays = array();
            $turns    = array();

            foreach ( $schedulesArray as $weekdayId => $schedulesData )
            {
                if ( ! array_key_exists($weekdayId, $weekDays) )
                {
                    $weekDays[$weekdayId] = $schedulesData->description;
                }
                
                if ( count($schedulesData->turns) > 0 )
                {
                    foreach ( $schedulesData->turns as $turnId => $turnData )
                    {
                        if ( ! array_key_exists($turnId, $turns) )
                        {
                            $turns[$turnId] = $turnData->description;
                        }
                    }
                }
            }
        
            $columns = array();
            $data = array();
            
            $j = 1;
            
            if ( (count($weekDays) > 0) && (count($turns) > 0) )
            {
                $columns[0] = '&nbsp';
                
                foreach ( $weekDays as $weekDayId => $weekDayDescription )
                {
                    foreach ( $turns as $turnId => $turnDescription )
                    {
                        $scheduleData = $schedulesArray[$weekDayId]->turns[$turnId];
                        if ( (isset($scheduleData)) && (count($scheduleData->schedules) > 0) )
                        {
                            $columns[$weekDayId] = '<center><b>' . $weekDayDescription . '</b></center>';
                            $data[$turnId][0] = '<center><b>' . $turnDescription . '</b></center>';
                            
                            $text = array();
                            $counter = 0;
                            
                            foreach ( $scheduleData->schedules as $scheduleId => $turnSchedule )
                            {
                                $groupData = $busGroup->getGroup($turnSchedule->groupId);
                                
                                $text[$counter] .= '<center><b>' . $turnSchedule->beginHour . '-' . $turnSchedule->endHour . '</b></center><center>' . $groupData->curriculumCurricularComponentName . '</center>';
                                
                                $filters->scheduleId = $scheduleId;
                                $professors = $turnSchedule->professors;
                                
                                if ( count($professors) > 0 )
                                {
                                    foreach ( $professors as $professorData )
                                    {
                                        $text[$counter] .= '<center><i>' . $professorData . '</i></center>';
                                    }
                                }
                                else
                                {
                                    $text[$counter] .= '<center><i>' . _M('Sem professor definido', $module) . '</i></center>';
                                }
                                
                                $place = '';
                                if ( strlen($turnSchedule->place) > 0 )
                                {
                                    $place = '<center>' . $turnSchedule->place;
                                    
                                    if ( strlen($turnSchedule->unit) > 0 )
                                    {
                                        $place .= ' - ' . $turnSchedule->unit;
                                    }
                                    
                                    $place .= '</center>';
                                }
                                elseif ( strlen($turnSchedule->unit) > 0 )
                                {
                                    $place = '<center>' . $turnSchedule->unit . '</center>';
                                }
                                
                                if ( strlen($place) > 0 )
                                {
                                    $text[$counter] .= $place;
                                }
                                
                                $counter++;
                            }
                            
                            sort($text);
                            $data[$turnId][$weekDayId] = implode('<br>', $text);
                        }
                    }
                }
            }
             
            $data2 = array();
            $data3 = array();
            if ( count($data) > 0 )
            {
                foreach ( $data as $dataKey => $arrayRow )
                {
                    foreach ( $arrayRow as $key => $value )
                    {
                        foreach ( $data as $dataKey2 => $arrayRow2 )
                        {
                            foreach ( $arrayRow2 as $key2 => $value2 )
                            {
                                if ( ! array_key_exists($key2, $arrayRow) )
                                {
                                    $arrayRow[$key2] = '&nbsp';
                                }
                                
                                if ( ! array_key_exists($key, $arrayRow2) )
                                {
                                    $arrayRow2[$key] = '&nbsp';
                                }
                            }
                        }
                        
                        $data2[$dataKey2] = $arrayRow2;
                    }
                    
                    $data2[$dataKey] = $arrayRow;
                }
                
                ksort($data2);
                $j = 0;
                
                foreach ( $data2 as $dataRow )
                {
                    $i = 0;
                    ksort($dataRow);
                    foreach ( $dataRow as $dataElement )
                    {
                        $data3[$j][$i] = $dataElement;
                        $i++;
                    }
                    
                    $j++;
                }
            }
            
            if ( count($columns) > 0 )
            {
                $i = 0;
                $columns2 = array();
                
                foreach ( $columns as $column ) 
                {
                    $columns2[$i] = $column;
                    $i++;
                }
            }
            
        }

        if ( count($columns2) > 0 && count($data3) > 0 )
        {
	        $schedulesTable = new MTableRaw(_M('Horário do período', $module), $data3, $columns2);
	        $schedulesTable->setAlternate(true);
        }
        else
        {
        	$data3 = array(_M('Não há informações a exibir, pois não existem horários cadastrados para as disciplinas selecionadas.', $module),
        	               _M('Assegure-se de que as disciplinas oferecidas selecionadas possuam horários definidos.', $module));
        	$schedulesTable = new MTableRaw(_M('Horário do período', $module), $data3);
        }
        
        return $schedulesTable;
    }
    
    private function enroll($simulate = false)
    {
    	$MIOLO = MIOLO::getInstance();
    	$module = 'academic';
    	$return = null;

        try
        {
            $busEnroll = new BusinessAcademicBusEnroll();
            SDatabase::beginTransaction();

            $busEnroll->enroll($this->enrollData->contractId, $this->enrollData->learningPeriodId, $this->groupIds, false, false, false, false, false, false, AcdEnroll::MATRICULA_SISTEMA, $this->data->maxDiscCredits);
            
            //Realizar consulta para obter o status dos títulos
            $finStatusDoTitulo = new FinStatusDoTituloLog();
            
            foreach( $busEnroll->enrollData->invoices as $invoice )
            {
                $status[$invoice->invoiceId] = $finStatusDoTitulo->obtemStatusDoTituloLog($invoice->invoiceId);
            }
            
            $busEnroll->enrollData->status = $status;
            
            if ( $simulate )
            {
                SDatabase::rollback();
            }
            else
            {
                SDatabase::commit();
            }

	    $return = $busEnroll->enrollData;
        }
        catch ( Exception $e )
        {
            SDataBase::rollBack();
            throw $e;
        }

        return $return;
    }
    
    public function btnConfirm_click()
    {
        global $MIOLO, $action;
        $module = 'academic';

        try
        {
        	// Enroll setting simulate mode to false
            $enrollData = $this->enroll(false);
            
            // Get form data
            $data = $this->getData();
        
            if ( ($this->getFormValue('mailSent', 'no') == 'no') && (count($this->groupIds) > 0) && ($enrollConfig->sendConfirmationEmail == DB_TRUE) )
            {
                $schedulesTable = $this->generateSchedulesArray($this->getSchedulesArray($this->groupIds));
                $schedulesTable->addStyle('border-width', 'thin');
                $schedulesTable->addStyle('border-style', 'solid');
                $schedulesTable->addStyle('border-color', 'black');
                
                $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
                $learningPeriod = $busLearningPeriod->getLearningPeriod($this->enrollData->learningPeriodId);
                
                $emailId = strlen($enrollConfig->confirmationEmailId) > 0 ? $enrollConfig->confirmationEmailId : SAGU::getParameter('ACADEMIC', 'ACD_ENROLL_CONFIRMED_EMAIL_ID'); 

                $businessMailServer = new BusinessBasicBusMailServer();
                $getMailServer = $businessMailServer->getMailServer();

                $businessEmail = new BusinessBasicBusEmail();
                $getEmail = $businessEmail->getEmail($emailId);

                $businessUnit = new BusinessBasicBusUnit();
                $getUnit = $businessUnit->getUnit($learningPeriod->unitId);

                $busPhysicaPerson = new BusinessBasicBusPhysicalPerson();
                $getPerson = $busPhysicaPerson->getPhysicalPerson($this->enrollData->contractPersonId);
                
                $searchData = array( "\$PERIODID",
                                     "\$PERSONNAME",
                                     "\$PERSONID",
                                     "\$COURSEDESC",
                                     "\$CAMPUSDESC" );

                $replaceData = array( $this->enrollData->periodId,
                                      $contract->personName,
                                      $this->enrollData->contractPersonId,
                                      $contract->courseName,
                                      $getUnit->description );

                $subject = str_replace($searchData, $replaceData, $getEmail->subject);
                
                $body = "<html><head><title>".$subject."</title></head>" ;
                
                $searchData[] = "$#CURRICULARCOMPONENTTABLE#$";

                /**
                 * FIXME: str_replace para definir as bordas da MTableRaw, já que o miolo as pré-define como 0
                 * e não permite alteração, uma vez que esta definição consta no construtor da classe MSimpleTable,
                 * instanciada pelo método Generate() da classe MTableRaw sem os devidos parâmetros
                 */
                $replaceData[] = str_replace('border="0"', 'border="1"', $schedulesTable->generate());
                
                $body .= '<body>';
                $body .= str_replace($searchData, $replaceData, $getEmail->body);
                $body .= "</body></html>";

                $recipient = $this->enrollData->contractPersonName . ' <' . $getPerson->email . '>';
                                
                if ( (strlen(trim($getMailServer->host)) > 0) && (strlen($getMailServer->port) > 0) )
                {
                    //Include class sendEmail
                    $MIOLO->uses( 'classes/sendEmail.class', 'basic' );
                    //Parameters
                    $from = str_replace($searchData, $replaceData, $getEmail->from);
                    $fromName = $from;
                    $recipients[$getPerson->name] = strtolower($getPerson->email);
                    $bcc = explode(',', $getEmail->bcc);
                    //Instance of sendEmail
                    $okEmail = new sendEmail($from, $fromName, $recipients , $subject, $body, $bcc );
                    //Send mail
                    $okEmail->sendEmail();
                    
                    // get to this point means the email was sent to the server, so we can
                    // mark the mailSent field as 'yes' and stop sending more emails when the
                    // user, for example, clicks the Print confirmation button.
                    $this->mailSent->setValue('yes');                    
                }
            }
            
            $vars = array('contractId' => $this->enrollData->contractId,
                          'learningPeriodId' => $this->enrollData->learningPeriodId,
                          'documentModel' => strtolower(SAGU::getParameter('ACADEMIC', 'TIPO_DOCUMENTO_CONFIRMACAO_MATRICULA')),
                          'courseName' =>$data->txtCourseName,
                          'fileType' => pdf,
                          'event' => 'tbBtnPrint_click');
            
            if ( count($this->groupIds) > 0 )
            {
                $msg = _M('Matrícula efetuada com sucesso para o aluno @1 para o curso @2 no período @3', $module, $data->txtPersonId . ' - ' . $data->txtPersonName, $data->txtCourseId . '(' . $data->txtCourseVersion . ') ' . $data->txtCourseName, $data->txtPeriodId);
                $caption = _M('Matrícula finalizada', $module);
            
                $promptMsg = new MPrompt($caption, $msg);

                if ( ($MIOLO->checkAccess('FrmEnrollContract', A_EXECUTE, false, true)) && (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') )
                {
                    $btnInvoiceGen = new MButton('btnInvoiceGen', _M('Gerar boleto', $module));
                }
    
                if (strlen($this->enrollData->returnTo) > 0)
                {
                    $exitUrl = $MIOLO->getActionURL('services', 'main:pupil');
                    $printUrl = $MIOLO->getActionURL('services', 'main:pupil:enrollConfirmationReport', null, $vars);
                }
                else
                {
                    $exitUrl = $MIOLO->getActionURL('sagu2','main');
                    $printUrl = $MIOLO->getActionURL($module, 'main:document:enrollConfirmation', null, $vars);
                    
                    // botao Nova matricula
                    $newUrl = $MIOLO->getActionURL('academic','main:process:enrollContract');
                    $promptMsg->addButton(_M('Nova matrícula', $this->module), $newUrl);
                }
                
                if ( SAGU::getParameter('ACADEMIC', 'ATIVAR_BOTAO_IMPRIMIR_CONFIRMACAO') == DB_TRUE )
                {
                    $promptMsg->addButton(_M('Imprimir confirmação', $module), $printUrl);
                }
                
                if ( SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES' )
                {
                    // Link to carnet printing
                    $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
                    $filters = new stdClass();
                    $filters->learningPeriodId = $this->enrollData->learningPeriodId;
                    $filters->personId = $this->enrollData->contractPersonId;
                    $filters->isCanceled = DB_FALSE;
                    $invoiceIds = $busReceivableInvoice->searchReceivableInvoice($filters);

                    $ids = array();
                    for ( $i = 0; $i < count($invoiceIds); $i++ )
                    {
                        $ids[] = $invoiceIds[$i][0];
                    }
                    
                    $action = $MIOLO->getActionUrl('finance', 'main', null, array('invoices' => implode(',', $ids), 'event' => 'generateCarnetByInvoicesPassedByURL'));
                    $opts = array( '_invoiceId' => $ids[0], 'event' => 'submit_button_click' );                    
                    $hrefPrint = $MIOLO->getActionURL( 'finance', "main:process:printInvoice", null, $opts );
                    $promptMsg->addButton(_M('Imprimir boleto', $this->module), $hrefPrint);
                }                
            }
            else
            {
                $msg = _M('Matrículas canceladas com sucesso', $module);
                $caption = _M('Matrícula finalizada', $module);
                $promptMsg = new MPrompt($caption, $msg);

                $exitUrl = $MIOLO->getActionURL($module,'main:process');
            }
            
            $promptMsg->addButton(_M('Sair', $module), $exitUrl);
            $promptMsg->setType('information');
            
            $session = $MIOLO->session;

            if ( $session->isRegistered('enrollData') )
            {
                $session->unregister('enrollData');
            }
            
            if ( $session->isRegistered('data') )
            {
                $session->unregister('data');
            }

            $MIOLO->prompt($promptMsg);
            
            //Limpar arrays de desempenho
            $MIOLO->session->setValue('arrayParams', NULL);
            $MIOLO->session->setValue('arrayGetContract', NULL);
            $MIOLO->session->setValue('arrayIsCoursed', NULL);
        }
        catch ( Exception $e )
        {
            $msg  = _M('Erro executando a operação solicitada.', $module) . ' ' . $e->getMessage();
            $goto = $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
}

?>
