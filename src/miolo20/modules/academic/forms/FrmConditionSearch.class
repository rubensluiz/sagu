<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for acdCondition table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 19/09/2005
 */

/**
 * Form to search the acdCondition table
 */
class FrmConditionSearch extends SSearchForm
{
    public function __construct($data)
    {
        parent::__construct(null, new AcdCondition(), array('conditionId'), 'BusCondition');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Field condiction code
        $conditionIdS = new MTextField('conditionIdS', $this->getFormValue('conditionIdS', $data->conditionIdS), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $conditionIdS->setJsHint(_M('Informe o código do requisito', $module));
        $fields[] = $conditionIdS;

        //Field course
        $curriculumCourseLabelS = new MText('curriculumCourseLabel', _M('Curso', $module) . ':');
        $curriculumCourseLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseIdS = new MLookupTextField('curriculumCourseIdS', $this->GetFormValue('curriculumCourseIdS', $data->curriculumCourseIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'curriculumCourseIdS, curriculumCourseVersionS, curriculumCourseNameS, curriculumCourseTurnIdS, curriculumCourseTurnDescriptionS, curriculumCourseUnitIdS, curriculumCourseUnitDescriptionS', $module, 'CourseOccurrence', null, array('courseId' => 'curriculumCourseIdS'), !$this->page->isPostBack());
        $curriculumCourseIdS->setJsHint(_M('Informe o código do curso', $module));
        $curriculumCourseVersionS = new MTextField('curriculumCourseVersionS', $this->curriculumCourseVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseVersionS->setJsHint(_M('Versão do curso',$module));
        $curriculumCourseNameS = new MTextField('curriculumCourseNameS', $this->curriculumCourseNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseNameS->setJsHint(_M('Nome do curso', $module));
        $curriculumCourseNameS->setReadOnly(true);
        $curriculumCourseVersionS->setReadOnly(true);
        $hctCurriculumCourse = new MHContainer('hctCurriculumCourse', array($curriculumCourseLabelS, $curriculumCourseIdS, $curriculumCourseVersionS, $curriculumCourseNameS));
        $hctCurriculumCourse->setShowLabel(true);
        $fields[] = $hctCurriculumCourse;

        //Field unit
        $curriculumCourseUnitLabelS = new MText('curriculumCourseUnitLabelS', _M('Unidade', $module) . ':');
        $curriculumCourseUnitLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseUnitIdS = new MTextField('curriculumCourseUnitIdS', $this->curriculumCourseUnitIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseUnitIdS->setJsHint(_M('Código da unidade', $module));
        $curriculumCourseUnitIdS->setReadOnly(true);
        $curriculumCourseUnitDescriptionS = new MTextField('curriculumCourseUnitDescriptionS', $this->curriculumCourseUnitDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseUnitDescriptionS->setJsHint(_M('Descrição da unidade', $module));
        $curriculumCourseUnitDescriptionS->setReadOnly(true);
        $hctCurriculumCourseUnit = new MHContainer('hctCurriculumCourseUnit', array($curriculumCourseUnitLabelS, $curriculumCourseUnitIdS, $curriculumCourseUnitDescriptionS));
        $hctCurriculumCourseUnit->setShowLabel(true);
        $fields[] = $hctCurriculumCourseUnit;

        //Field turn
        $curriculumCourseTurnLabelS = new MText('curriculumCourseTurnLabelS', _M('Turno', $module) . ':');
        $curriculumCourseTurnLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCourseTurnIdS = new MTextField('curriculumCourseTurnIdS', $this->curriculumCourseTurnIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCourseTurnIdS->setJsHint(_M('Código do turno', $module));
        $curriculumCourseTurnIdS->setReadOnly(true);
        $curriculumCourseTurnDescriptionS = new MTextField('curriculumCourseTurnDescriptionS', $this->curriculumCourseTurnDescriptionS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCourseTurnDescriptionS->setJsHint(_M('Descrição do turno', $module));
        $curriculumCourseTurnDescriptionS->setReadOnly(true);
        $hctCurriculumCourseTurn = new MHContainer('hctCurriculumCourseTurn', array($curriculumCourseTurnLabelS, $curriculumCourseTurnIdS, $curriculumCourseTurnDescriptionS));
        $hctCurriculumCourseTurn->setShowLabel(true);
        $fields[] = $hctCurriculumCourseTurn;

        //Field curricular
        $curriculumCurricularComponentLabel = new MText('curriculumCurricularComponent', _M('Disciplina', $module) . ':');
        $curriculumCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curriculumCurricularComponentIdS = new MLookupTextField('curriculumCurricularComponentIdS', $this->curriculumCurricularComponentIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curriculumCurricularComponentVersionS, curriculumCurricularComponentNameS', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'curriculumCourseIdS', 'curricularComponentId' => 'curriculumCurricularComponentIdS'), !$this->page->isPostBack());
        $curriculumCurricularComponentIdS->setJsHint(_M('Informe o código da disciplina', $module));
        $curriculumCurricularComponentVersionS = new MTextField('curriculumCurricularComponentVersionS', $this->curriculumCurricularComponentVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curriculumCurricularComponentVersionS->setJsHint(_M('Versão da disciplina', $module));
        $curriculumCurricularComponentVersionS->setReadOnly(true);
        $curriculumCurricularComponentNameS = new MTextField('curriculumCurricularComponentNameS', $this->curriculumCurricularComponentNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCurricularComponentNameS->setJsHint(_M('Nome da disciplina', $module));
        $curriculumCurricularComponentNameS->setReadOnly(true);
        $hctCurriculumCurricularComponent = new MHContainer('hctCurriculumCurricularComponent', array($curriculumCurricularComponentLabel, $curriculumCurricularComponentIdS, $curriculumCurricularComponentVersionS, $curriculumCurricularComponentNameS));
        $hctCurriculumCurricularComponent->setShowLabel(true);
        $fields[] = $hctCurriculumCurricularComponent;

        //Field condiction
        $conditionCurriculumCurricularComponentLabel = new MText('conditionCurriculumCurricularComponentLabel', _M('Disciplina do requisito',$module) . ':');
        $conditionCurriculumCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $conditionCurriculumCurricularComponentIdS = new MLookupTextField('conditionCurriculumCurricularComponentIdS', $this->conditionCurriculumCurricularComponentIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'conditionCurriculumCurricularComponentVersionS,conditionCurriculumCurricularComponentNameS', $module, 'CurricularComponentInCurriculum', null, array('courseId' => 'curriculumCourseIdS', 'curricularComponentId' => 'conditionCurriculumCurricularComponentIdS'), !$this->page->isPostBack());
        $conditionCurriculumCurricularComponentIdS->setJsHint(_M('Informe o código da disciplina do requisito', $module));
        $conditionCurriculumCurricularComponentVersionS = new MTextField('conditionCurriculumCurricularComponentVersionS', $this->conditionCurriculumCurricularComponentVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $conditionCurriculumCurricularComponentVersionS->setJsHint(_M('Versão da disciplina do requisito', $module));
        $conditionCurriculumCurricularComponentVersionS->setReadOnly(true);
        $conditionCurriculumCurricularComponentNameS = new MTextField('conditionCurriculumCurricularComponentNameS', $this->conditionCurriculumCurricularComponentNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $conditionCurriculumCurricularComponentNameS->setJsHint(_M('Nome da disciplina do requisito', $module));
        $conditionCurriculumCurricularComponentNameS->setReadOnly(true);
        $hctConditionCurriculumCurricularComponent = new MHContainer('hctConditionCurriculumCurricularComponent', array($conditionCurriculumCurricularComponentLabel, $conditionCurriculumCurricularComponentIdS, $conditionCurriculumCurricularComponentVersionS, $conditionCurriculumCurricularComponentNameS));
        $hctConditionCurriculumCurricularComponent->setShowLabel(true);
        $fields[] = $hctConditionCurriculumCurricularComponent;

        //Field education area
        $busEducationArea = new BusinessAcademicBusEducationArea();
        $educationAreaIdS = new MComboBox('educationAreaIdS', $this->educationAreaIdS->value, _M('Área de ensino (técnico)', $module), $busEducationArea->listEducationArea());
        $educationAreaIdS->setJsHint(_M('Selecione a área de ensino', $module));
        $fields[] = $educationAreaIdS;
        $validators[] = new MIntegerValidator('educationAreaIdS');

        parent::defineFields($fields, $module, 'GrdConditionSearch', $validators);
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        // get filters values
        $data->conditionId = $this->getFormValue('conditionIdS');
        $data->curriculumCourseId = $this->getFormValue('curriculumCourseIdS');
        $data->curriculumCourseVersion = $this->getFormValue('curriculumCourseVersionS');
        $data->curriculumCourseName = $this->getFormValue('curriculumCourseNameS');
        $data->curriculumCurricularComponentId = $this->getFormValue('curriculumCurricularComponentIdS');
        $data->curriculumCurricularComponentVersion = $this->getFormValue('curriculumCurricularComponentVersionS');
        $data->curriculumCurricularComponentName = $this->getFormValue('curriculumCurricularComponentNameS');
        $data->conditionalCurriculumCourseId = $this->getFormValue('conditionCurriculumCourseIdS');
        $data->conditionalCurriculumCourseVersion = $this->getFormValue('conditionCurriculumCourseVersionS');
        $data->conditionalCurriculumCourseName = $this->getFormValue('conditionCurriculumCourseNameS');
        $data->conditionalCurriculumCurricularComponentId = $this->getFormValue('conditionCurriculumCurricularComponentIdS');
        $data->conditionCurriculumCurricularComponentVersion = $this->getFormValue('conditionalCurriculumCurricularComponentVersionS');
        $data->conditionCurriculumCurricularComponentName = $this->getFormValue('conditionalCurriculumCurricularComponentNameS');
        $data->educationAreaId = $this->getFormValue('educationAreaIdS');
        $data->educationAreaDescription = $this->getFormValue('educationAreaDescriptionS');
        $data->courseUnitId = $this->getFormValue('curriculumCourseUnitIdS');
        $data->courseTurnId = $this->getFormValue('curriculumCourseTurnIdS');

        return $data;
    }

    public function searchObject($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $businessCurriculum = new BusinessAcademicBusCurriculum();
        $businessCondition = new BusinessAcademicBusCondition();

        $filters1->courseId = $curriculumCourseIdS->value;
        $filters1->courseVersion = $curriculumCourseVersionS->value;
        $filters1->curricularComponentId = $curriculumCurricularComponentIdS->value;
        $filters1->curricularComponentVersion = $curriculumCurricularComponentVersionS->value;
        $filters1->unitId = $curriculumCourseUnitIdS->value;
        $filters1->turnId = $curriculumCourseTurnIdS->value;

        $searchCurriculum = $businessCurriculum->searchCurriculum($filters1);

        if ( count($searchCurriculum) == 1 )
        {
            $filters->curriculumId = $searchCurriculum[0][0];
        }

        $filters2->courseId = $conditionCurriculumCourseIdS->value;
        $filters2->courseVersion = $conditionCurriculumCourseVersionS->value;
        $filters2->curricularComponentId = $conditionCurriculumCurricularComponentIdS->value;
        $filters2->curricularComponentVersion = $conditionCurriculumCurricularComponentVersionS->value;
        $filters2->unitId = $curriculumCourseUnitIdS->value;
        $filters2->turnId = $curriculumCourseTurnIdS->value;

        $searchConditionalCurriculum = $businessCurriculum->searchCurriculum($filters2);

        if ( count($searchConditionalCurriculum) == 1 )
        {
            $filters->conditionCurriculumId = $searchConditionalCurriculum[0][0];
        }

        $filters = $this->getTypesData();
        $data = $businessCondition->searchShortCondition($filters);

        return $data;
    }
}
?>