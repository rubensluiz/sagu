<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Inscription reports form
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 06/12/2011
 *
 */
class FrmAttendanceReport extends SForm
{

    /**
     * Construtor da classe
     */
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        if ( strlen(MIOLO::_REQUEST('services')) > 0 )
        {
            SAGU::defineUserIsFromServices();
        }
        
        parent::__construct(_M('Caderno de chamada', $module), null, null);
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array( 'event' => 'tbBtnPrint_click' )));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     * */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event = MIOLO::_request('event');

        //Disciplina oferecida
        $groupId = new MLookupContainer('groupId', 'groupGroupName', '', _M('Disciplina oferecida', $module), 'groupIdHidden, groupGroupName', $module, 'Group', null, true, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), !$this->page->isPostBack(), true);
        $groupId->setLookupJsHint(_M('Informe o código da disciplina oferecida', $module));
        $groupId->setDescriptionJsHint(_M('Nome da disciplina oferecida', $module));
        $groupId->setReadOnly(true);
        $fields[] = $groupId;
        $fields[] = new MHiddenField('groupIdHidden');
        
        //Exibir foto
        $reportModelLabel = new MText('reportModelLabel', _M('Exibir foto dos alunos', $module) . ':');
        $reportModelLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
        $reportModel = new MCheckBox('reportModel', DB_TRUE, null, false);
        $fields[] = new MHContainer('hctReportModel', array($reportModelLabel, $reportModel));

        //Exibir preenchido
        $checkedCompleted = strlen($this->getFormValue('completed', $args->completed))>0 ? DB_TRUE: DB_FALSE;
        $completedLabel = new MText('completedLabel', _M('Preenchido com horários e presenças', $module) . ':');
        $completedLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
        $completed = new MCheckBox('completed', DB_TRUE, null, $checkedCompleted);
        $completed->addAttribute('onchange', $this->getAjaxAction('changeCompleted', 'divMoreFields', false));
        $fields[] = new MHContainer('hctCompleted', array($completedLabel, $completed));
        
        //Exibir alunos cancelados
        $checkedCancelled = strlen($this->getFormValue('cancelled', $args->cancelled))>0 ? DB_TRUE: DB_FALSE;
        $cancelledLabel = new MText('cancelledLabel', _M('Exibir alunos cancelados', $module) . ':');
        $cancelledLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
        $cancelled = new MCheckBox('cancelled', DB_TRUE, null, $checkedCancelled);
        $fields[] = new MHContainer('hctCancelled', array($cancelledLabel, $cancelled));

        // Campo para adição de componente(s) por ajax
        $args->completed = DB_TRUE;
        $fields[] = new MDiv('divMoreFields', $this->changeCompleted($args));


        if ( ! MIOLO::_request('services') == 1 )
        {
            //Field report format
            $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : SReport::FILETYPE_PDF, _M('Formato', $module), SReport::listReportFormat());
            $validators[] = new MRequiredValidator('reportFormat');
            $fields[] = new MSeparator();
        }
        else if( MIOLO::_request('services') == 1 )
        {
            $fields[] = new MHiddenField('reportFormat', 'pdf');
            $btnBack = new MButton('tbBtnBack',  '<< ' . _M('Voltar', $module), 'javascript:history.back()');
            $btnPrint = new MButton('tbBtnPrint', _M('Imprimir', $module));
            $btnPrint->setShowLoading(false);
            $fields[] = new MHContainer('hctButtons', array($btnBack, $btnPrint));
        }

        // Separator
        $fields[] = new MSeparator();
        
        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }


    public function changeCompleted($args)
    {
        $module = SAGU::getFileModule(__FILE__);
        if ( $args->completed == DB_TRUE )
        {
            $fields[] = new MSeparator();
            $fields[] = new SBeginEndPeriod(array(
                        'label' => _M('Período', $module),
                        'baseGroup' => false,
                        'disposition' => 'horizontal',
                        'begin' => array(
                            'label' => _M('de', $module),
                            'dateId' => 'beginDate'
                        ),
                        'end' => array(
                            'label' => _M('até', $module),
                            'dateId' => 'endDate'
                        ),
                    ));
            $fields[] = new MSeparator();
            $this->generateValidators($fields);
        }
        else
        {
            $fields[] = new MSeparator();
            $numColumnLabel = new MText('numColumnLabel', _M('Número de colunas'));
            $numColumnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
            $numColumn = new MTextField('numColumns', 20, null ,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $fields[] = new MHContainer('hctColumns', array($numColumnLabel, $numColumn));
            $fields[] = new MSeparator();
            $fields[] = new MHiddenField('beginDate',null);
            $fields[] = new MHiddenField('endDate',null);

        }
        
        return $fields ? $fields : new MHiddenField('fieldNull',null);
    }

    /**
     * Método que obtém os dados do formulário.
     */
    public function getTypesData()
    {
        $data = new stdClass();
        $data->completed = $this->getFormValue('completed', DB_FALSE);
        $data->beginDate = $data->completed == DB_FALSE ? SAGU::getDateNow() : $this->getFormValue('beginDate', MIOLO::_REQUEST('beginDate'));
        $data->endDate = $data->completed == DB_FALSE ? SAGU::getDateNow() :  $this->getFormValue('endDate', MIOLO::_REQUEST('endDate'));
        $data->numColumns = $this->getFormValue('numColumns', MIOLO::_REQUEST('numColumns'));
        $data->completed = $this->getFormValue('completed', MIOLO::_REQUEST('completed')) == DB_TRUE ? DB_TRUE : DB_FALSE;
        $data->cancelled = $this->getFormValue('cancelled', MIOLO::_REQUEST('cancelled')) == DB_TRUE ? DB_TRUE : DB_FALSE;
        $data->reportFormat = $this->getFormValue('reportFormat', MIOLO::_REQUEST('reportFormat'));        
        return $data;
    }


    /**
     * Método geração e impressão do relatório com dados da grid
     */
    public function tbBtnPrint_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $reportModel = MIOLO::_REQUEST('reportModel');


        if( $reportModel == DB_TRUE )
        {
            $reportName = 'attendanceReportWithPhoto';
        }
        else
        {
            $reportName = 'attendanceReport';
        }


        // Miolo path
        $mioloPath = $MIOLO->getConf("home.miolo") . '/';

        // Group id
        $groupId = MIOLO::_REQUEST('groupId');

        // Parameters of the report
        $parameters['GROUP_ID'] = (int)$groupId;
        $parameters['SAGU_PATH'] = $mioloPath;
        if( strlen($data->beginDate) > 0 )
        {
            $parameters['BEGIN_DATE'] = $data->beginDate;
        }
        if( strlen($data->endDate) > 0 )
        {
            $parameters['END_DATE'] = $data->endDate;
        }
        $parameters['NUM_COLUMNS'] = (int)$data->numColumns;
        $parameters['FILL_DATA'] = $data->completed;
        $parameters['CANCELLED'] = $data->cancelled;


        // FIXME: Colocar o código abaixo no futuro branch da FAMETRO
        // INÍCIO do código específico da FAMETRO
        $business = new BusinessAcademicBusAttendance();

        $emissionDate = $MIOLO->_request('emissionDate');
        $generateOption = MIOLO::_request('generateOption');

        $groupData = array(array(MIOLO::_request('groupId'), MIOLO::_request('professorId')));

        if ( count($groupData) > 0 )
        {
            $professors = array();

            foreach ( $groupData as $key => $group )
            {
                list($groupId, $professorId) = $group;

                $reportData = (array) $business->getGroupDataBySchedule($groupId, $professorId);

                $professors[] = $reportData['professor'];
            }

            $reportData['emissionDate'] = $emissionDate;

            $professors = array_unique($professors);

            if ( count($professors) > 1 )
            {
                /*
                 * no caso de mais de um professor, adiciona paretensis para a
                 * pessoa poder marcar o professor do relatório
                 */
                $reportData['professors'] = implode(' ( ) | ', $professors);
            }
            else
            {
                $reportData['professors'] = current($professors);
            }

            $reportData['groupId'] = (int) $reportData['groupId'];

            $busGroup = new BusinessAcademicBusGroup();
            $groupData = $busGroup->getGroup($reportData['groupId']);
            $reportData['courseId'] = $groupData->curriculumCourseId;
            $reportData['courseName'] = $groupData->curriculumCourseName;
            $reportData['curricularComponentId'] = $groupData->curriculumCurricularComponentId;
            $reportData['curricularComponentName'] = $groupData->curriculumCurricularComponentName;
            $reportData['semester'] = $groupData->semester;
            $reportData['turnDescription'] = $groupData->turnDescription;
            $reportData['totalEnrolled'] = $groupData->totalEnrolled;
        }
        // FIM do código específico da FAMETRO

        $report = new SReport();
        $report->setReportName($reportName);

        // FIXME: Definindo o tipo PDF porque os demais não estão funcionando
        $report->setFileType($data->reportFormat);

        $report->setParameters(array_merge($parameters, $reportData));

        if ( !$report->generate() )
        {
            $this->addError(_M('Não foi possível gerar o documento. Verifique se o professor e o horário da disciplina estão definidos.', $module ));
        }
    }
}
?>