<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulario pai do passo a passo Detalhamento do estágio
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 21/02/2011
 *
 **/

class FrmStageDetails extends SStepByStepForm
{
    public function  __construct($title = null, $steps = null, $formName = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct($title, $steps, $formName);

            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    
    public function  finalizeButton_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $allData = (object) array_merge( (array) $this->getStepData(), (array) $this->getData() );
        $selectedStudent = unserialize( MIOLO::_REQUEST('selectedStudent') );
        $emphasis = (array) $allData->emphasis;

        $busTransaction = new BusinessBasicBusTransaction();
        $busTrainingDetail = new BusinessAcademicBusTrainingDetail();
        $busEnroll = new BusinessAcademicBusEnroll();

        $enrolls = $busEnroll->listGroupEnrolledPeople( $allData->groupId, true );

        try
        {
            $busTransaction->beginTransaction();

            $_emphasis = array();
            foreach ( $emphasis as $key => $val )
            {
                if ( ! $val->removeData )
                {
                    $_emphasis[] = $val;
                }
            }

            if ( count($_emphasis) <= 0 )
            {
                throw new Exception( _M('Nenhuma ênfase foi adicionada.', $module) );
            }

            foreach ( $enrolls as $key => $enroll )
            {
                if ( in_array($key, $selectedStudent) ) //Se foi marcado na checkbox do passo 2
                {
                    foreach ( $_emphasis as $_key => $_val )
                    {
                        //Verifica se ja existe registro para este enrollId e trainingEmphasisId, caso existir, aborta toda operacao
                        $filters = new stdClass();
                        $filters->trainingEmphasisId = $_val->trainingEmphasisId;
                        $filters->enrollId = $enroll->enrollId;

                        $search = $busTrainingDetail->searchTrainingDetail($filters, true);
                        if ( count($search) > 0 )
                        {
                            $msgs = array(
                               _M('Já existe um ou mais detalhamentos de ênfase para a pessoa @1.', $module, $search[0]->personNameEnroll),
                               _M('Caso queira editar, deve ser feito através da tela de edição invididual.', $module),
                               _M('Caso queira continuar esta operação e inserir os outros registros que faltam, volte para o passo 2 e desmarque esta pessoa.', $module),
                            );
                            throw new Exception( implode("<br>", $msgs) );
                        }

                        $data = $_val;
                        $data->enrollId = $enroll->enrollId;
                        $busTrainingDetail->insertTrainingDetail($data);
                    }
                }
            }

            $busTransaction->commit();

            parent::finalizeButton_click($args);
            
            $goto = $MIOLO->getActionURL($module, $action);
            SAGU::information( SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED_INFO'), $goto );
        }
        catch (Exception $e)
        {
            parent::finalizeButton_click($args);
            
            $this->AddError( $e->getMessage() );
        }
    }
}
?>