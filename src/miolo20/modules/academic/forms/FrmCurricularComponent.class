<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Curricular Component Group form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 **/

/**
 * Form to manipulate a curricular component
 **/
class FrmCurricularComponent extends SManagementForm
{
    public function __construct()
    {
        parent::__construct(new AcdCurricularComponent(), array('curricularComponentId', 'curricularComponentVersion'), 'BusCurricularComponent');
    }


    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $curricularComponentId = MIOLO::_REQUEST('curricularComponentId');
            $curricularComponentVersion = MIOLO::_REQUEST('curricularComponentVersion');

            $data = $this->busObject->getCurricularComponent($curricularComponentId, $curricularComponentVersion);

            $fields[] = new MHiddenField('curricularComponentId', $curricularComponentId);
            $fields[] = new MTextLabel('curricularComponentId', $curricularComponentId, _M('Código', $module));
            $fields[] = new MHiddenField('curricularComponentVersion', $curricularComponentVersion);
            $fields[] = new MTextLabel('curricularComponentVersion', $curricularComponentVersion, _M('Versão', $module));
        }
        else
        {
            //Field curricular component code
            $curricularComponentId = new MTextField('curricularComponentId', $this->GetFormValue('curricularComponentId', $data->curricularComponentId), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $curricularComponentId->setJsHint(_M('Informe o código da disciplina', $module));
            $validators[] = new MRequiredValidator('curricularComponentId');
            $fields[] = $curricularComponentId;

            //Field curricular component version
            $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->GetFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Versão', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $curricularComponentVersion->setJsHint(_M('Informe a versão da disciplina', $module));
            $validators[] = new MIntegerValidator('curricularComponentVersion', '', 'required');
            $fields[] = $curricularComponentVersion;
        }

        //Field curricular component name
        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->name), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentName->setJsHint(_M('Informe o nome da disciplina', $module));
        $validators[] = new MRequiredValidator('curricularComponentName', '', 'required');
        $fields[] = $curricularComponentName;

        //Field short name
        $shortName = new MTextField('shortName', $this->getFormValue('shortName', $data->shortName), _M('Abreviatura', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('@1 caracteres no máximo', $module, SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_SHORT_NAME_MAX_LENGTH') ));
        $shortName->setJsHint(_M('Informe a abreviatura', $module));
        $shortName->addAttribute('maxlength', SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_SHORT_NAME_MAX_LENGTH'));
        $validators[] = new MRequiredValidator('shortName');
        $fields[] = $shortName;

        //Field center
        $business = new BusinessAcademicBusCenter();
        $dataCenter = $business->listCenter();
        $centerId = new MComboBox('centerId', $this->getFormValue('centerId', $data->centerId), _M('Centro',$module), $dataCenter );
        $centerId->setJsHint(_M('Informe o código do centro', $module));
        $fields[] = $centerId;

        //Field summary
        $summary = new MMultiLineField('summary', $this->getFormValue('summary', $data->summary), _M('Ementa', $module), 40, 5, 40);
        $summary->setJsHint(_M('Informe a ementa', $module));
        $fields[] = $summary;
        
        //Objetivos gerais
        $objetivoG = new MMultiLineField('generalobjectives', $this->getFormValue('generalobjectives', $data->generalobjectives), _M('Objetivos gerais', $module), 40, 5, 40);
        $objetivoG->setJsHint(_M('Informe os objetivos gerais', $module));
        $fields[] = $objetivoG;       
        
        //Objetivos especificos 
        $objetivoE = new MMultiLineField('specificobjectives', $this->getFormValue('specificobjectives', $data->specificobjectives), _M('Objetivos específicos', $module), 40, 5, 40);
        $objetivoE->setJsHint(_M('Informe os objetivos específicos', $module));
        $fields[] = $objetivoE; 
        
         if ( SAGU::getParameter('BASIC', 'MODULE_GNUTECA_INSTALLED') == "YES" )
        {
            $MIOLO = MIOLO::getInstance();
            //Bibliografia buscando dados do Gnuteca 
            $url = str_replace( 'miolo20', 'miolo25',$MIOLO->getConf('home.url')).'/index.php?module=gnuteca3&action=main:search:externalSearch&parentElement=bibliografia.bibliografiaid';
            $link = "javascript:window.open('{$url}', 'Busca externa', 'STATUS=NO, TOOLBAR=NO, LOCATION=NO, DIRECTORIES=NO, RESISABLE=NO, SCROLLBARS=YES, TOP=10, LEFT=10, WIDTH=770, HEIGHT=400');";

            //Adicionar aqui popup que abre janela do Gnuteca
            $fldsBasic[] = $field = new MIntegerField('bibliografia.bibliografiaid', NULL, _M('Código do material'));            
            $field->addAttribute('onBlur', SForm::getAjaxAction('obterBibliografiaGnuteca', 'divResult', false));
            $field->setVisibility(false);
            $fldsBasic[] = new MButton('lnkGnutecaSearch', _M('Buscar material', $module), $link);

            $fldsBasic[] = new SHiddenField('bibliografia.componentecurricularid', MIOLO::_REQUEST('componentecurricularid'));
            $fldsBasic[] = new MMultiLineField('basicbibliography', $data->basicbibliography, _M('Descrição', $module), 20, 5, 40);
            $fldsBasic[] = new MDiv('divResult'); 

            $fields[] = $baseGroup = new MBaseGroup('htcBibliografiaBasica', _M('Bibliografia básica', $module), $fldsBasic);
            $baseGroup->addStyle('width', '500px');
            
            //Complemento bibliografico buscando dados do Gnuteca
            $url2 = str_replace( 'miolo20', 'miolo25',$MIOLO->getConf('home.url')).'/index.php?module=gnuteca3&action=main:search:externalSearch&parentElement=complemento.bibliografiaid';
            $link2 = "javascript:window.open('{$url2}', 'Busca externa', 'STATUS=NO, TOOLBAR=NO, LOCATION=NO, DIRECTORIES=NO, RESISABLE=NO, SCROLLBARS=YES, TOP=10, LEFT=10, WIDTH=770, HEIGHT=400');";

            //Adicionar aqui popup que abre janela do Gnuteca
            $fldsComplementary[] = $fieldComplemento = new MIntegerField('complemento.bibliografiaid', NULL, _M('Código do material'));            
            $fieldComplemento->addAttribute('onBlur', SForm::getAjaxAction('obterComplementoBibliograficoGnuteca', 'divResult2', false));
            $fieldComplemento->setVisibility(false);
            $fldsComplementary[] = new MButton('lnkGnutecaSearch2', _M('Buscar material', $module), $link2);

            $fldsComplementary[] = new SHiddenField('complemento.componentecurricularid', MIOLO::_REQUEST('componentecurricularid'));
            $fldsComplementary[] = new MMultiLineField('complementarybibliography', $data->complementarybibliography, _M('Descrição', $module), 20, 5, 40);
            $fldsComplementary[] = new MDiv('divResult2');          

            $fields[] = $baseGroup = new MBaseGroup('htcBibliografiaComplementar', _M('Bibliografia complementar', $module), $fldsComplementary);
            $baseGroup->addStyle('width', '500px');
            
            // Field observation
            $observationLabel = new MText('observationLabel', _M('Observação', $module) . ':');
            $observationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $observation = new MMultiLineField('observation', $this->getFormValue('observation', $data->observation),null, 100, 5, 40);
            $observation->setJsHint(_M('Informe a observação', $module));
            $fields[] = new MHContainer('hctObservation', array($observationLabel, $observation));

            // Field complement
            $complementLabel = new MText('complementLabel', _M('Complemento', $module) . ':');
            $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $complement = new MMultiLineField('complement', $this->getFormValue('complement', $data->complement), null, 100, 5, 40);
            $complement->setJsHint(_M('Informe o complemento', $module));
            $fields[] = new MHContainer('hctComplement', array($complementLabel, $complement));
        }
        else
        {
             // Field bibliography description
            $basicbibliographydescriptionLabel = new MText('basicbibliographydescriptionLabel', _M('Bibliografia básica', $module) . ':');
            $basicbibliographydescriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $basicbibliographydescription = new MMultiLineField('basicbibliography', implode($data->basicbibliography), null, 100, 5, 40);
            $basicbibliographydescription->setJsHint(_M('Informe a bibliografia básica', $module));
            $fields[] = new MHContainer('hctbasicbibliographydescription', array($basicbibliographydescriptionLabel, $basicbibliographydescription));

            // Field complementary bibliography description
            $complementarybibliographydescriptionLabel = new MText('complementarybibliographydescriptionLabel', _M('Bibliografia complementar', $module) . ':');
            $complementarybibliographydescriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $complementarybibliographydescription = new MMultiLineField('complementarybibliography', implode($data->complementarybibliography), null, 100, 5, 40);
            $complementarybibliographydescription->setJsHint(_M('Informe a bibliografia complementar', $module));
            $fields[] = new MHContainer('hctcomplementarybibliographydescription', array($complementarybibliographydescriptionLabel, $complementarybibliographydescription));
        }
        //Field lesson credits
        $lessonCredits = new MTextField('lessonCredits', $this->getFormValue('lessonCredits', $data->lessonCredits), _M('Créditos de aula', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $lessonCredits->setJsHint(_M('Informe os créditos de aula', $module));
        $lessonCredits->addAttribute("onBlur", "validaCampoDouble('lessonCredits');");
        $fields[] = $lessonCredits;
        $validators[] = new MRequiredValidator('lessonCredits', '', 'required');
        
        //Field academic number credits
        $academicNumberHours = new MTextField('academicNumberHours', $this->getFormValue('academicNumberHours', $data->academicNumberHours), _M('Horas acadêmicas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Horas', $module));
        $academicNumberHours->setJsHint(_M('Informe o número de horas acadêmicas', $module));
        $academicNumberHours->addAttribute("onBlur", "validaCampoDouble('academicNumberHours');");
        $fields[] = $academicNumberHours;
        $validators[] = new MRequiredValidator('academicNumberHours', '', 'required');

        //Field lesson number hours
        $lessonNumberHours = new MTextField('lessonNumberHours', $this->getFormValue('lessonNumberHours', $data->lessonNumberHours), _M('Horas aula', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Horas', $module));
        $lessonNumberHours->setJsHint(_M('Informe o número de horas aula', $module));
        $lessonNumberHours->addAttribute("onBlur", "validaCampoDouble('lessonNumberHours');");
        $fields[] = $lessonNumberHours;
        $validators[] = new MRequiredValidator('lessonNumberHours', '', 'required');

        //Field begin date
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $validators[] = new MDATEDMYValidator('beginDate', '', 'required');
        $fields[] = $beginDate;

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            //Field end date
            $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $endDate->setJsHint(_M('Informe a data final', $module));
            $validators[] = new MDATEDMYValidator('endDate', '');
            $fields[] = $endDate;
        }

        //Field education area
        $businessEducationArea = new BusinessAcademicBusEducationArea();
        $educationAreaId = new MComboBox('educationAreaId', $this->getFormValue('educationAreaId', $data->educationAreaId ? $data->educationAreaId : ''), _M('Área de ensino (técnico)',$module), $businessEducationArea->listEducationArea());
        $educationAreaId->setJsHint(_M('Informe o código da área de ensino', $module));
        $fields[] = $educationAreaId;
        
        //Field academic credits
        $academicCreditsLabel = new MTextLabel('academicCreditsLabel', _M('Créditos acadêmicos:', $module));
        $academicCreditsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $academicCreditsLabel->setClass('m-caption m-caption-required');
        $academicCredits = new MTextField('academicCredits', $this->getFormValue('academicCredits', $data->academicCredits), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $academicCredits->addAttribute("onBlur", "validaCampoDouble('academicCredits');");
        $academicCredits->setJsHint(_M('Informe os créditos acadêmicos', $module));
        $academicCredits->setReadOnly(true);
        $academicCreditsContainer = new MHContainer('academicCreditsContainer', array($academicCreditsLabel, $academicCredits));
        $flds[] = $academicCreditsContainer;
        $validators[] = new MRequiredValidator('academicCredits', '', 'required');
        
        // Cria campos dinamicos para creditos por categoria
        $enter = false;
        $width = '';
        foreach ( AcdCurricularComponentCategory::search() as $row )
        {
            $flds[] = new MSpacer('&nbsp;');
            
            $catId = $row->curricularComponentCategoryId;
            $catRequest = MIOLO::_REQUEST('categories');
            $id = 'categories[' . $catId . ']';
            $label = _M('Categoria @1:', $module, $row->description);
            $value = MUtil::NVL($catRequest[$catId], $data->curricularComponentCategoryCreditList[$catId]);

            $categoryLabel = new MTextLabel('category' . $catId, $label);
            $categoryLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $categoryLabel->setClass('m-caption');
            $category = new MTextField($id, $value, null, 5);
            $category->setJsHint( _M('Informe a quantidade de créditos para a categoria @1', $module, $row->description) );
            $category->addAttribute("onBlur", "updateAcademicCredits();");
            $categoryContainer = new MHContainer('categoryContainer' . $idCat, array($categoryLabel, $category));            
            $flds[] = $categoryContainer;
            
            $enter = true;
        }
        
        $fldsInfoCredits = array();
        if ( !$enter )
        {
            $academicCredits->setReadOnly(false);
            $width = '57%';
        }
        else
        {
            $fldsInfoCredits = array(MMessage::getStaticMessage('msgInfo', _M("Os créditos acadêmicos são somados com base nos créditos de cada categoria.",$module), MMessage::TYPE_INFORMATION), new MSpacer('&nbsp;'));
        }
        
        $this->page->addJsCode("
            function updateAcademicCredits()
            {
                var ids = dojo.query('#creditsBaseGroup * input').attr(\"id\");
                
                var allCredits = 0;
                for ( var x = 1; x <= ids.length; x++ )
                {
                    try
                    {
                        value = document.getElementById(ids[x]).value;   
                        value = value.replace(',', '.');

                        if ( isNaN(value * 1) )
                        {
                            alert('Deve ser informado apenas números reais válidos. Ex.: 1, 3.7, 4.9');
                            document.getElementById(ids[x]).focus();
                            
                            return false;
                        }   
                        
                        document.getElementById(ids[x]).value = value;

                        if ( !!value )
                        {
                            allCredits = parseFloat(allCredits) + parseFloat(value);                        
                            document.getElementById('academicCredits').value = allCredits;
                        }
                    }
                    catch(err)
                    {
                        // Caso o valor do elemento seja nulo, não faz nada.
                    }                                        
                }
            }
            
            function validaCampoDouble(campo)
            {
                value = document.getElementById(campo).value;   
                value = value.replace(',', '.');
 
                if ( isNaN(value * 1) )
                {
                    alert('Deve ser informado apenas números reais válidos. Ex.: 1, 3.7, 4.9');
                    document.getElementById(campo).value = '';
                    document.getElementById(campo).focus();

                    return false;
                }   
                
                document.getElementById(campo).value = value;
            }

        ");
               
        $fields[] = $baseGroup = new MBaseGroup('creditsBaseGroup', _M('Créditos', $module), array_merge($fldsInfoCredits, $flds));
        $baseGroup->addAttribute('style', 'width:' . $width);
        
        parent::defineFields($fields, $validators, $data);
    }


    public function getTypesData()
    {        
        $data = parent::getTypesData();
        $data->name = $this->curricularComponentName->value;
        $data->isFromFrmCurricularComponent = true;

        // Categorias
        $categories = (array) MIOLO::_REQUEST('categories');
        $objCategories = array();
        foreach ( array_filter($categories) as $catId => $credits )
        {
            $objCategories[] = $obj = new AcdCurricularComponentCategoryCredit();
            $obj->curricularComponentCategoryId = $catId;
            $obj->credits = $credits;
        }
        $data->curricularComponentCategoryCredit = $objCategories;
        $data->generalobjectives = MIOLO::_REQUEST('generalobjectives');
        $data->specificobjectives = MIOLO::_REQUEST('specificobjectives');
        $data->basicbibliography = MIOLO::_REQUEST('basicbibliography');
        $data->complementarybibliography = MIOLO::_REQUEST('complementarybibliography');
        
        return $data;
    }
    
    
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $data = $this->getTypesData();
        
        try
        {
            SDatabase::beginTransaction();
            // Obtem dados categorias
            $categories = (array) MIOLO::_REQUEST('categories');
            
            $totalByCat = array_sum($categories);
            if ( SAGU::calcNumber("{$totalByCat} > {$data->academicCredits}") == DB_TRUE )
            {
                throw new Exception( _M('O número total de créditos por categoria (@1) não pode ser maior que o número de créditos acadêmicos (@2).', $module, $totalByCat, $data->academicCredits) );
            }

            parent::tbBtnSave_click($sender);

            SDatabase::commit();
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();

            if ( substr_count($e->getMessage(), 'identificador') > 0 )
            {
                $msg = _M("O código da disciplina já existe nesta ou em outra unidade, tente outro código, dica: '" . $this->GetFormValue('curricularComponentId') . "_NOMEUNIDADE'.");
                $this->addAlert( $msg );
            }
            else
            {
                $this->addError( $e->getMessage() );
            }
        }
    }
    
    public function tbBtnDelete_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data = $this->getTypesData();
                
        $filters = new stdClass();
        $filters->curricularComponentId = $data->curricularComponentId;
        $filters->curricularComponentVersion = $data->curricularComponentVersion;
        
        $busConditionUnblock = new BusinessAcademicBusConditionUnblock();
        $coditions = $busConditionUnblock->getConditionUnblockForComponetCurricular($filters);
               
        // Verifica se existe desbloqueio
        if ( count($coditions) > 0 )
        {
            foreach ( $coditions as $condition )
            {
                if ( $condition[2] == DB_TRUE )
                {
                    // Desbloqueio de requisito
                    $desbloqueio[] = ' Desbloqueio de requisito';
                }
                if ( $condition[3] == DB_TRUE )
                {
                    // Desbloqueio por substituição
                    $desbloqueio[] = ' Desbloqueio por substituição';
                }
                if ( $condition[4] == DB_TRUE )
                {
                    // Desbloqueio por choque de horário
                    $desbloqueio[] = ' Desbloqueio por choque de horário';
                }
                if ( $condition[5] == DB_TRUE )
                {
                    // Desbloqueio de disciplina fora do currículo
                    $desbloqueio[] = ' Desbloqueio de disciplina fora do currículo';
                }
                if ( $condition[6] == DB_TRUE )
                {
                    // Desbloqueio por limite de crédito
                    $desbloqueio[] = ' Desbloqueio por limite de crédito';
                }
                if ( $condition[7] == DB_TRUE )
                {
                    // Desbloqueio por turno
                    $desbloqueio[] = ' Desbloqueio por turno';
                }
            }
            
            $desbloqueios = implode('<br>', $desbloqueio);
            
            $this->addError(_M('A disciplina não pode ser excluída, pois existem desbloqueios cadastrados em: ', $module) . '<br>' . $desbloqueios);
        }
        else
        {
            parent::tbBtnDelete_click($sender);
        }
    }
    
     public function obterBibliografiaGnuteca($args)
    {
        $value = $args->basicBibliography;
        if( strlen($args->bibliografia_bibliografiaid) > 0 && is_numeric($args->bibliografia_bibliografiaid) )
        {
            $domain = $_SERVER['SERVER_NAME'];
            $module = MIOLO::getCurrentModule();
            $url = 'http://'.$domain.'/miolo25/html/';
            $clientOptions["location"] = "$url/webservices.php?module=gnuteca3&action=main&class=gnuteca3WebServicesMaterial";
            $clientOptions["uri"] = "$url";
            $clientOptions["encoding"] = "LATIN1";
            $client = new SoapClient(NULL, $clientOptions);
            $result = $client->getMaterialInformation('1', base64_encode('123456'), $args->bibliografia_bibliografiaid, null, "PHP_OBJECT", true);
            $value .= '['.strip_tags($result['format']).']';
        }
        
        $this->page->addAJAXJsCode("document.getElementById('basicBibliography').value = '{$value}'");
    }
    
    public function obterComplementoBibliograficoGnuteca($args)
    {
        $value = $args->complementaryBibliography;
        if( strlen($args->complemento_bibliografiaid) > 0 && is_numeric($args->complemento_bibliografiaid) )
        {
            $domain = $_SERVER['SERVER_NAME'];
            $module = MIOLO::getCurrentModule();
            $url = 'http://'.$domain.'/miolo25/html/';
            $clientOptions["location"] = "$url/webservices.php?module=gnuteca3&action=main&class=gnuteca3WebServicesMaterial";
            $clientOptions["uri"] = "$url";
            $clientOptions["encoding"] = "LATIN1";
            $client = new SoapClient(NULL, $clientOptions);
            $result = $client->getMaterialInformation('1', base64_encode('123456'), $args->complemento_bibliografiaid, null, "PHP_OBJECT", true);
            $value .= strip_tags($result['format']).';';
            $value = '['.str_replace(',', ' ', $value).']';
        }
        
        $this->page->addAJAXJsCode("document.getElementById('complementaryBibliography').value = '{$value}'");
        
    }
}
?>