<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Form to manipulate acdGroup table records
 *
 * @author Leovan Tavares da Silva [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Helio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 18/09/2007
 */

MIOLO::Import('extensions::cpaint.inc.php','cpaint');

class FrmGroup extends SForm
{
    /**
     * Class constructor
     */    
    public function __construct()
    {
        $module = MIOLO::getCurrentModule(); 
        
        if ( MIOLO::_REQUEST('function') == 'insert' )
        {
            parent::__construct(_M('Oferecer disciplina', $module), new AcdGroup(), $groupId);
        }
        else
        {
            parent::__construct(_M('Atualizar disciplina oferecida', $module), new AcdGroup(), $groupId);
        }

        if (($f = $this->page->request('cpaint_function')) != "")
        {
            $this->manager->getTheme()->clearContent();
            $this->$f($this->page->request('cpaint_argument'));
            $this->page->generateMethod = 'generateAJAX';
        }        
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $business = new BusinessAcademicBusGroup();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event = MIOLO::_REQUEST('event');
        
        $groupId = MIOLO::_REQUEST('groupId'); 
        
        $unidadeLogada = sMultiUnidade::obterObjetoUnidade();        
               
        $wasInserted = MIOLO::_REQUEST('wasInserted');

        $toolBar = new MToolBar('toolBar',$MIOLO->getActionURL($module,$action));
        $toolBar->disableButton('tbBtnPrint');

        if ( $function == 'insert' )
        {
            $toolBar->disableButton('tbBtnDelete');
        }
        elseif ( $function == 'delete' )
        {
            $toolBar->disableButton('tbBtnSave');
        }
        $toolBar->hideButton('tbBtnBack');
        $toolBar->hideButton('tbBtnReset');
        
        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-disabled-20x20.png');        
        $toolBar->addButton('tbBtnExit', _M('Close'), $MIOLO->getActionUrl('sagu2', 'main'), _M('Close'), true, $enabledImage, $disabledImage, NULL);

        $session = $MIOLO->session;

        $saveAnyway = $MIOLO->_REQUEST('saveAnyway');

        if ( (strlen($saveAnyway) == 0) && ($session->isRegistered('data')) )
        {
            $session->unregister('data');
        }
        
        $data = $session->isRegistered('data') ? unserialize(base64_decode($session->getValue('data'))) : null;
        
        if ( ($event == 'tbBtnNew:click') || ( $function == 'insert' ) )
        {
            $groupId = null;
            $data->groupId = null;
        }
        
        if ( ($this->GetFormValue('dadosComplementares') == NULL) && ( $function != 'update' ) && ( $event == 'tbBtnNew:click' ) && SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'NO')
        {
            $this->SetFormValue('learningPeriodId', null);
            $this->SetFormValue('unitId', null);
            $data->turnDescription = null;
            $data->unitDescription = null;
        }

        // Definição dos botões visíveis da toolbar
        if ( SAGU::getParameter('BASIC', 'INCREASE_SECURITY_LEVEL') == 'YES' )
        {
            $toolBar->disableButton('tbBtnDelete');
        }
        
        $fields[] = $toolBar;
        $fields[] = new MDiv('promptMsg', null);

        // Definição dos campos
        if ( strlen($groupId) > 0 )
        {
            if ( $wasInserted == 't' )
            {   
                $this->addInfo(_M('Registro inserido com sucesso.', $module));
            }

            try
            {
                $busGroup = new BusinessAcademicBusGroup();
                $data = $busGroup->getGroup($groupId);                

                $data->curricularComponentId = $data->curriculumCurricularComponentId;
                $data->curricularComponentVersion = $data->curriculumCurricularComponentVersion;
                $data->curricularComponentName = $data->curriculumCurricularComponentName;
                $data->courseId = $data->curriculumCourseId;
                $data->courseVersion = $data->curriculumCourseVersion;
                $data->courseName = $data->curriculumCourseName;

                $busCurriculum = new BusinessAcademicBusCurriculum();
                $curriculumData = $busCurriculum->getCurriculum($data->curriculumId);

                $data->turnId = $curriculumData->turnId;
                $data->unitId = $curriculumData->unitId;

                $busCourseOccurrence = new BusinessAcademicBusCourseOccurrence();
                $courseOccurrenceData = $busCourseOccurrence->getCourseOccurrence($data->courseId, $data->courseVersion, $data->turnId, $data->unitId);

                $data->unitDescription = $courseOccurrenceData->unit;
                $data->turnDescription = $courseOccurrenceData->turn;
            }
            catch ( Exception $e )
            {
                $this->addError(_M('Erro obtendo dados da disciplina oferecida', $module) . '.' . $e->getMessage());
            }

            $fields[] = new MHiddenField('groupId', $groupId);
            $fields[] = new MTextLabel('lbl_groupId', $groupId, _M('Código', $module));
        }
        
        // Esta fechado
        $value = SAGU::NVL($data->isClosed, DB_FALSE);
        $fields[] = new SHiddenField('isClosed', $value);
        
         // Field period
        $busPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', $this->getFormValue('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID')), _M('Período', $module), $busPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $periodId->setAutoPostBack(true);
        $fields[] = $periodId;
                
        //Testa para ver se o parametro disciplina oferecida simplificada esta como true
        //caso sim, monta disciplina oferecida simplificada, se não, mantém o padrão.
        if( SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'YES' )
        {
            $fields[] = new MSeparator();
            
            $opsPeriod = $busPeriod->listPeriod();
                                    
            $busCourseOccurrence = new BusinessAcademicBusCourseOccurrence();            
            $courseOccurrenceLabel = new MText('courseOccurrenceLabel', _M('Ocorrência de curso',$module) . ':');
            $courseOccurrenceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $courseOccurrenceLabel->setClass('m-caption m-caption-required');
            $curseOccurrenceId = new MComboBox('curseOccurrenceId', $this->getFormValue('curseOccurrenceId', $data->courseId), '', $busCourseOccurrence->listCourseOccurrenceSimple($unidadeLogada->unitId));
            $curseOccurrenceId->setJsHint(_M('Selecione uma ocorrência de curso'));
            $curseOccurrenceId->setAutoPostBack(true);
            $fields[] = new MHContainer('hctCourseOccurence', array($courseOccurrenceLabel, $curseOccurrenceId));
            $validators[] = new MRequiredValidator('curseOccurrenceId', _M('Ocorrência de curso',$module));
                                               
            $fields[] = new MSeparator();            
                        
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $busCurricularComponent = new BusinessAcademicBusGroup();
            $versaoCurso = $busCourseOccurrence->listCourseOccurrenceSimple($unidadeLogada->unitId);
            
            //Percore o array $versaoCurso para pegar o valor da versão do curso.
            foreach($versaoCurso as $k => $v)
            {
                if($v[0] == $this->GetFormValue('curseOccurrenceId'))
                {
                    $courseVersionValue = $v[2];
                }
            }
             
            //Verifica se é update e tras os cambobox preenchidos
            //Caso contrário, faz a busca passando o id de ocorrencia de curso e período letivo
            if(($function == SForm::FUNCTION_UPDATE && $this->GetFormValue('curseOccurrenceId', $data->courseId) == $data->courseId))
            {   
                $optPeriod = $busLearningPeriod->checkLearningPeriodSimple($data->courseId, $data->courseVersion, $data->turnId, $data->unitId); 
                $optCurriculum = $busCurricularComponent->listGroupSimple($data->courseId, $data->courseVersion, $data->unitId);
                
            }else{
                                
                $optPeriod = $busLearningPeriod->listLearningPeriodSimple($this->GetFormValue('curseOccurrenceId'));
                $optCurriculum = $busCurricularComponent->listGroupSimple($this->GetFormValue('curseOccurrenceId'), $courseVersionValue, $unidadeLogada->unitId);                
            }            
            
            //Limpa combobox caso tenha mudado a ocorrência de curso
            for($i=0; $i < sizeof($optPeriod); $i++ )
            {
                if($optPeriod[$i][0] == $this->getFormValue('learningPeriodId', $data->learningPeriodId) || count($optPeriod) >1)
                {
                    
                }else
                {   
                    $this->SetFormValue('learningPeriodId', null);
                    $this->SetFormValue('curricularComponentId', null); 
                    $this->SetFormValue('classId', null); 
                }                       
            }           
                                                
            $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período Letivo', $module) . ':');
            $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $learningPeriodLabel->setClass('m-caption m-caption-required');
            $learningPeriodId = new MComboBox('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), '', $optPeriod);
            $learningPeriodId->setJsHint(_M('Selecione um período letivo'));        
            $learningPeriodId->setAutoPostBack(true);
            $fields[] = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId));
            $validators[] = new MRequiredValidator('learningPeriodId', _M('Período Letivo',$module));
                     
            $fields[] = new MSeparator();               
            
            $curricularComponentLabel = new MText('curricularComponentLabel', _M('Disciplina', $module) . ':');
            $curricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $curricularComponentLabel->setClass('m-caption m-caption-required');
            $curricularComponentId = new MComboBox('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), '', $optCurriculum);
            $curricularComponentId->setJsHint(_M('Selecione uma disciplina'));
            $hctCurricularComponent = new MHContainer('hctCurricularComponent', array($curricularComponentLabel, $curricularComponentId)); 
            $fields[] = $hctCurricularComponent;
            $validators[] = new MRequiredValidator('curricularComponentId', _M('Disciplina',$module));
            
            if($optPeriod || $optCurriculum)
            {
                $periodo = ((count($optPeriod)) > 1 ? $data->learningPeriodId : $optPeriod[0][0]);
                $this->setFormValue('learningPeriodId', $periodo);
                $disciplina = ((count($optCurriculum)) > 1 ? $data->curricularComponentId : $optCurriculum[0][0]);
                $this->setFormValue('curricularComponentId', $disciplina);
            }

            $fields[] = new MSeparator();
                                                                      
        }else //parâmetro padrão do sistema
        {                 
            // Field course
            $lkpValue = array(
                $this->GetFormValue('courseId', $data->courseId),
                $this->GetFormValue('courseVersion', $data->courseVersion),
                $this->GetFormValue('turnId', $data->turnId),
                $this->GetFormValue('unitId', $data->unitId)
            );

            $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, true, null);
            $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
            $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
            $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
            $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
            $fields[] = $courseOccurrenceLookup;

            if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
            {
                $courseOccurrenceLookup->setReadOnly(true);
            }

            $this->page->onLoad('document.' . $this->name . '.courseId.focus();');

            // Field learning period
            $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo',$module) . ':');
            $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $learningPeriodLabel->setClass('m-caption m-caption-required');
            $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescription', $module, 'LearningPeriod', null, array('periodId'=>'periodId', 'courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId'), true);
            $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
            $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo',$module), 'required');
            $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
            $learningPeriodDescription->setReadOnly(true);
            $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
            $hctLearningPeriod->setShowLabel(true);
            $fields[] = $hctLearningPeriod;

            // Field is un show and date
            $fields[] = new MHiddenField('isUnShowEndDate', DB_TRUE);

            // Field curricular component
            $curricularComponentLabel = new MText('curricularComponentLabel', _M('Disciplina',$module) . ':');
            $curricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $curricularComponentLabel->setClass('m-caption m-caption-required');
            $curricularComponentId = new MLookupTextField('curricularComponentId', $this->getFormValue('curricularComponentId', $data->curricularComponentId), _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('curricularComponentVersion','curricularComponentName'), $module, 'CurricularComponentInCurriculum', null, array('courseId'=>'courseId', 'courseVersion' => 'courseVersion', 'isUnShowEndDate' => 'isUnShowEndDate', 'curricularComponentId' => 'curricularComponentId'), true);
            $curricularComponentId->setJsHint(_M('Informe o código da disciplina', $module));
            $validators[] = new MRequiredValidator('curricularComponentId', _M('Disciplina',$module));
            $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion', $data->curricularComponentVersion), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $curricularComponentVersion->setJsHint(_M('Versão da disciplina'));
            $curricularComponentVersion->setReadOnly(true);
            $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName', $data->curricularComponentName), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $curricularComponentName->setJsHint(_M('Nome da disciplina', $module));
            $curricularComponentName->setReadOnly(true);
            $hctCurricularComponent = new MHContainer('hctCurricularComponent', array($curricularComponentLabel, $curricularComponentId, $curricularComponentVersion, $curricularComponentName));
            $hctCurricularComponent->setShowLabel(false);
            $fields[] = $hctCurricularComponent;        
        
        }
        // Field regimen
        $busRegimen = new BusinessAcademicBusRegimen();
        $quantidadeRegime = $busRegimen->listRegimen();
        $regime = ( count($quantidadeRegime) > 1 ? $data->regimenId : 1 );
        $regimenId = new MComboBox('regimenId', $this->getFormValue('regimenId', $regime), _M('Regime', $module), $busRegimen->listRegimen());
        $regimenId->setJsHint(_M('Selecione um regime'));
        $fields[] = $regimenId;
        $validators[] = new MRequiredValidator('regimenId');

        if(SAGU::getParameter('ACADEMIC', 'VALOR_PADRAO_DE_VAGAS'))
        {
            if ($function == 'insert')
            {
                $vagas = SAGU::getParameter('ACADEMIC', 'VALOR_PADRAO_DE_VAGAS');
            }
        }
        
        // Field vacant
        $vacant = new MTextField('vacant', SAGU::NVL($this->getFormValue('vacant', $data->vacant), $vagas), _M('Vagas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $vacant->setJsHint(_M('Informe o número de vagas', $module));
        $validators[] = new MRegExpValidator('vacant', _M('Vagas', $module),'(^-?[0-9][0-9]*$)', 'required');
        $fields[] = $vacant;
        
        /*
         * Caso esteja ativado o parâmetro de disciplina oferecida simplificada os campos  de
         * "Utiliza pauta eletrônica" e "Notificar sobre o prazo de registro de frequências"
         * não serão exibidos.         * 
         */
        if( SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'NO' )
        {
            // Field user web daily
            $isUseWebDailyLabel = new MText('isUseWebDaily', _M('Utiliza pauta eletrônica',$module) .'?');
            $isUseWebDailyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $isUseWebDailyOptions = array(
                array(_M('Sim', $module), 't'),
                array(_M('Não', $module), 'f')
            );
            $isUseWebDaily = strlen($this->getFormValue('isUseWebDaily', $data->isUseWebDaily)) > 0 ? $this->getFormValue('isUseWebDaily', $data->isUseWebDaily) : DB_TRUE;
            $isUseWebDaily = new MRadioButtonGroup('isUseWebDaily', null, SAGU::listTrueFalse(1), $isUseWebDaily, null, 'horizontal');
            $isUseWebDaily->setShowLabel(false);
            $hctIsUseWebDaily = new MHContainer('hctIsUseWebDaily', array($isUseWebDailyLabel, $isUseWebDaily));
            $fields[] = $hctIsUseWebDaily;

            // Field frequence register notification
            $frequenceRegisterNotificationLabel = new MText('frequenceRegisterNotificationLabel', _M('Notificar sobre o prazo de registro de frequências', $module) .'?');
            $frequenceRegisterNotificationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $frequenceRegisterNotificationValue = strlen($this->getFormValue('frequenceRegisterNotification', $data->frequenceRegisterNotification)) > 0 ? $this->getFormValue('frequenceRegisterNotification', $data->frequenceRegisterNotification) : DB_FALSE;
            $frequenceRegisterNotification = new MRadioButtonGroup('frequenceRegisterNotification', null, SAGU::listTrueFalse(1), $frequenceRegisterNotificationValue, null, 'horizontal');
            $frequenceRegisterNotification->setShowLabel(false);
            $hctFrequenceRegisterNotification = new MHContainer('hctFrequenceRegisterNotification', array($frequenceRegisterNotificationLabel, $frequenceRegisterNotification));
            $fields[] = $hctFrequenceRegisterNotification;
        }
        
        //Seta campo 'codigo da forma de avaliação como padrao 3
        $valorPadraoEvaluation;
        
        if($this->getFormValue('evaluationTypeId', $data->evaluationTypeId) == null)
        {
           $valorPadraoEvaluation = SAGU::getParameter('ACADEMIC', 'FORMA_DE_AVALIACAO_PADRAO_DA_DISCIPLINA_OFERECIDA'); 
        }else
        {
            $valorPadraoEvaluation = $this->getFormValue('evaluationTypeId', $data->evaluationTypeId);
        }
        
        // Field evaluation type
        $busEvaluationType = new BusinessAcademicBusEvaluationType();
        $cmbEvaluationTypeId = new MComboBox('evaluationTypeId', $valorPadraoEvaluation, _M('Código da forma de avaliação', $module), $busEvaluationType->listEvaluationType());
        $cmbEvaluationTypeId->setJsHint(_M('Forma de avaliação'));
        $fields[] = $cmbEvaluationTypeId;
        $validators[] = new MRequiredValidator('evaluationTypeId');
        
        if( SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'YES' )
        {
            $busClass = new BusinessAcademicBusClass(); 
            
            $inArgs = $busCourseOccurrence->listCourseOccurrenceSimple($unidadeLogada->unitId);
            //Percore o array inArgs para pegar o valor da versão do curso.
            foreach($inArgs as $k => $v)
            {
                if($v[0] == $this->GetFormValue('curseOccurrenceId'))
                {
                    $courseVersionValue = $v[2];
                }
            }
            
            //Verifica se é update e trás os dados preenchidos se não faz nova consulta.
            if( $data->courseId && $data->courseVersion )
            {
                $optClass = $busClass->listClass($data->courseId, $data->courseVersion, $unidadeLogada->unitId);
            }else
            {
                $optClass = $busClass->listClass($this->GetFormValue('curseOccurrenceId'), $courseVersionValue, $unidadeLogada->unitId);
            }
            
            $classLabel = new MText('classLabel', _M('Turma',$module) . ':');
            $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $classLabel->setClass('m-caption m-caption-required');
            $classId = new MComboBox('classId', $this->getFormValue('classId', $data->classId), '', $optClass);
            $classId->setJsHint(_M('Selecione uma turma'));
            $fields[] = new MHContainer('hctClass', array($classLabel, $classId));
            $validators[] = new MRequiredValidator('classId', _M('Turma',$module));
            
            $fields[] = new MSeparator();
                                                       
        //parâmetro padrão do sistema  
        }else
        {    
            // Field class
            $classLabel = new MText('classLabel', _M('Turma',$module) . ':');
            $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $classLabel->setClass('m-caption m-caption-required');
            $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), _M('Código da turma',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('className_'), $module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
            $classId->setJsHint(_M('Informe o código da turma', $module));
            $validators[] = new MRequiredValidator('classId', _M('Turma', $module));
            $className = new MTextField('className_', $this->getFormValue('className_', $data->className), _M('Nome da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $className->setJsHint(_M('Nome da turma', $module));
            $className->setReadOnly(true);
            $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $className));
            $hctClass->setShowLabel(false);
            $fields[] = $hctClass;
        }
        
        //Verifica se parâmetro professor responsável esta com verdadeiro e mostra o campo, caso contrário não mostra.
        if( SAGU::getParameter('ACADEMIC', 'PROFESSOR_RESPONSAVEL') == 'YES' )
        {
            // Field professor responsible PROFESSOR_RESPONSAVEL
            $professorResponsibleLabel = new MText('professorResponsibleLabel', _M('Professor responsável',$module) . ':');
            $professorResponsibleLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $professorRepsonsible = new MLookupTextField('professorResponsible', $this->getFormValue('professorResponsible', $data->professorResponsible), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorResponsibleName', 'basic', 'PhysicalPersonProfessor', null, null, true);
            $professorRepsonsible->setJsHint(_M('Código do professor', $module));
            $professorResponsibleName = new MTextField('professorResponsibleName', $this->getFormValue('professorResponsibleName', $data->professorResponsibleName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $professorResponsibleName->setJsHint(_M('Nome do professor', $module));
            $hctProfessorResponsible = new MHContainer('hctProfessorResponsible', array( $professorResponsibleLabel, $professorRepsonsible, $professorResponsibleName) );
            $hctProfessorResponsible->setShowLabel(false);
            $fields[] = $hctProfessorResponsible;
        }
        
        $divUpdate = new MDiv('divUpdate', null, null, 'align=left');
        $fields[] = $divUpdate;        

        $divData = new MDiv('divData', null, null, 'align=left');
        $fields[] = $divData;
        
        if( SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'NO' )
        {
            $fields[] = new Separator();
            
            //combobox para exibir dados complementares
            $dadosComplementaresLabel = new MText('dadosComplementaresLabel', _M('Exibir dados complementares', $module) .'?');
            $dadosComplementaresLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            
            //pega valor inicialDadosComplementares
            if($function == 'update')
            {      
                   if( ( $data->leaderId == null ) && ( $data->subLeaderId == null ) && ( $data->objectives == null ) && ( $data->content_ == null ) && ( $data->methodology == null )
                       && ( $data->evaluation == null )  && ( $data->basicbibliographydescription == '' ) && ( $data->complementarybibliographydescription == '' ) 
                       && ( $data->isCancellation == 'f' ) && ( $data->isContentProgrammarian == 'f' ) &&  !isset($data->conceptGroupId) )
                   {
                      $valorInicialComplementar = DB_FALSE;
                   }
                   else
                   {
                       $valorInicialComplementar = DB_TRUE;
                   }
            }
            else
            {
                $valorInicialComplementar = DB_FALSE;
            }
            
            $dadosComplementares = new MRadioButtonGroup('dadosComplementares', null, SAGU::listTrueFalse(), $valorInicialComplementar, null, 'horizontal');
            $dadosComplementares->setShowLabel(false);
            $ajaxAction = $this->getAjaxAction('ativarDadosComplementares', 'divDadosComplementares', false);
            $dadosComplementares->addAttribute('onChange', $ajaxAction); 
            $hctDadosComplementares = new MHContainer('hctDadosComplementares', array($dadosComplementaresLabel, $dadosComplementares));
            $fields[] = $hctDadosComplementares;
        }
        
        if($data->courseId && $data->courseVersion)
        {
            // Field is cancellation
            $isCancellationLabel = new MText('isCancellationLabel', _M('Está cancelada',$module) .'?');
            $isCancellationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $value = strlen($this->getFormValue('isCancellation', $data->isCancellation)) > 0 ? $this->getFormValue('isCancellation', $data->isCancellation) : DB_FALSE;
            $isCancellation = new MRadioButtonGroup('isCancellation', null, SAGU::listTrueFalse(1), $value, null, 'horizontal');
            $isCancellation->setShowLabel(false);
            $hctIsCancellation = new MHContainer('hctIsCancellation', array($isCancellationLabel, $isCancellation));
            $fields[] = $hctIsCancellation;
        }
        
        $data->basicBibliography || $data->complementaryBibliography ? $this->setFormValue('dadosComplementares', 't') : null;
        
        if ( strlen($_REQUEST['courseId']) > 0 ) // estava ocorrendo problemas ao editar, apagando valores do form, correcao de emergencia
        {
            $this->page->onLoad('document.' . $this->name . ".courseId.value = '{$_REQUEST['courseId']}';");
            $this->page->onLoad('document.' . $this->name . ".courseName.value = '{$_REQUEST['courseName']}';");
            $this->page->onLoad('document.' . $this->name . ".courseVersion.value = '{$_REQUEST['courseVersion']}';");
            $this->page->onLoad('document.' . $this->name . ".turnId.value = '{$_REQUEST['turnId']}';");
            $this->page->onLoad('document.' . $this->name . ".turnDescription.value = '{$_REQUEST['turnDescription']}';");
            $this->page->onLoad('document.' . $this->name . ".unitId.value = '{$_REQUEST['unitId']}';");
            $this->page->onLoad('document.' . $this->name . ".unitDescription.value = '{$_REQUEST['unitDescription']}';");
        }
        
        if($function == 'update' && $valorInicialComplementar == DB_TRUE)
        {
            if (strlen($groupId) > 0 && $groupId != 'undefined')
            {
                try
                {
                    $isGnutecaInstalled = SAGU::getParameter('BASIC', 'MODULE_GNUTECA_INSTALLED') == 'YES';
                    $busGnuteca = $isGnutecaInstalled ? new BusinessGnutecaBusGnutecaToSagu2() : null;
                    $busGnuteca instanceof BusinessGnutecaBusGnutecaToSagu2;

                    $busGroup = new BusinessAcademicBusGroup();
                    $data = $busGroup->getGroup($groupId); 
                                        
                }
                catch (Exception $e)
                {
                    $textError = new MText('groupError', _M('Erro ao buscar dados da disciplina oferecida.', $module) . ' ' . $e->getMessage(), 'red');
                    $textError->addStyle('font-weight', 'bold');
                    $flds[] = $textError;
                }
            }

            // Field leader
            $leaderLabel = new MText('leaderLabel', _M('Líder', $module) . ':');
            $leaderLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $leaderId = new MLookupTextField('leaderId', $this->getFormValue('leaderId', $data->leaderId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'leaderName', 'basic', 'PhysicalPersonStudent', null, null, true);
            $leaderId->setJsHint(_M('Informe o código da pessoa', $module));
            $validators[] = new MIntegerValidator('leaderId', '', 'optional');
            $leaderName = new MTextField('leaderName', $data->leaderName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $leaderName->setJsHint(_M('Nome da pessoa', $module));
            $leaderName->setReadOnly(true);
            $hctLeader = new MHContainer('hctLeader', array($leaderLabel, $leaderId, $leaderName));
            $hctLeader->setShowLabel(true);
            $flds[] = $hctLeader;

            // Field subLeader
            $subLeaderLabel = new MText('subLeaderLabel', _M('Vice-líder', $module) . ':');
            $subLeaderLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $subLeaderId = new MLookupTextField('subLeaderId', $this->getFormValue('subLeaderId',$data->subLeaderId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'subLeaderName', 'basic', 'PhysicalPersonStudent', null, null, true);
            $subLeaderId->setJsHint(_M('Informe o código da pessoa',$module));
            $validators[] = new MIntegerValidator('subLeaderId', '', 'optional');
            $subLeaderName = new MTextField('subLeaderName', $data->subLeaderName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $subLeaderName->setJsHint(_M('Nome da pessoa',$module));
            $subLeaderName->setReadOnly(true);
            $hctSubLeader = new MHContainer('hctSubLeader', array($subLeaderLabel, $subLeaderId, $subLeaderName));
            $hctSubLeader->setShowLabel(true);
            $flds[] = $hctSubLeader;

            // Utiliza conceitos               
            $useConceptLabel = new MText('useConceptLabel', _M('Utiliza conceitos',$module) .'?');
            $useConceptLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $value = strlen($this->getFormValue('useConcept', $data->useConcept)) > 0 ? $this->getFormValue('useConcept', $data->useConcept) : DB_FALSE;         

            $useConcept = new MRadioButtonGroup('useConcept', null, SAGU::listTrueFalse(1), $value, null, 'horizontal');
            $ajaxAction = SForm::getAjaxAction('FrmGroup::ativarGrupoConceito', 'divGrupoConceito', false);
            $useConcept->addAttribute('onChange', $ajaxAction);                     
            $hctUseConcept = new MHContainer('hctUseConcept', array($useConceptLabel, $useConcept));
            $flds[] = $hctUseConcept;
              
            //divGrupoConceito retorna a funçao 
            if($function == 'update' && $value==DB_TRUE)
            {
                $conceptGroupIdLabel = new MText('conceptGroupIdLabel', _M('Grupo de conceitos',$module) . ':');
                $conceptGroupIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));      
                $conceptGroupIdId = new MLookupTextField('conceptGroupIdId', $this->getFormValue('conceptGroupId', $data->conceptGroupId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('conceptGroupIdName'), $module, 'ConceptGroup', null, array(), true);
                $conceptGroupIdId->setJsHint(_M('Informe o código do grupo de conceitos', $module));          
                $validators[] = new MIntegerValidator('conceptGroupIdId', _M('Grupo de conceitos', $module));
                $conceptGroupIdName = new MTextField('conceptGroupIdName', $data->conceptGroupIdName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $conceptGroupIdName->setJsHint(_M('Nome da turma', $module));
                $conceptGroupIdName->setReadOnly(true);
                $conceptGroupIdCnt = new MHContainer('conceptGroupIdCnt', array($conceptGroupIdLabel, $conceptGroupIdId, $conceptGroupIdName));
                $flds[] = new MDiv('divGrupoConceito', array($conceptGroupIdCnt));
                $conceptGroupIdCnt->setShowLabel(false);
            }
            else
            {
                $flds[] = new MDiv('divGrupoConceito');   
            }        
            // Field is cancellation
            $isCancellationLabel = new MText('isCancellationLabel', _M('Está cancelada',$module) .'?');
            $isCancellationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $value = strlen($this->getFormValue('isCancellation', $data->isCancellation)) > 0 ? $this->getFormValue('isCancellation', $data->isCancellation) : DB_FALSE;
            $isCancellation = new MRadioButtonGroup('isCancellation', null, SAGU::listTrueFalse(1), $value, null, 'horizontal');
            $isCancellation->setShowLabel(false);
            $hctIsCancellation = new MHContainer('hctIsCancellation', array($isCancellationLabel, $isCancellation));
            $flds[] = $hctIsCancellation;

            // Field is content programmarian
            $isContentProgrammarianLabel = new MText('isContentProgrammarianLabel', _M('Possui conteúdo programático',$module) .'?');
            $isContentProgrammarianLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $isContentProgrammarianOptions = SAGU::listYesNo();
            $isContentProgrammarian = $this->GetFormValue('isContentProgrammarian',$data->isContentProgrammarian);
            $value = strlen($this->getFormValue('isContentProgrammarian', $data->isContentProgrammarian)) > 0 ? $this->getFormValue('isContentProgrammarian', $data->isContentProgrammarian) : DB_FALSE;
            $isContentProgrammarian = new MRadioButtonGroup('isContentProgrammarian', null, SAGU::listTrueFalse(1), $value, null, 'horizontal');
            $isContentProgrammarian->setShowLabel(false);
            $hctIsContentProgrammarian = new MHContainer('hctIsContentProgrammarian', array($isContentProgrammarianLabel, $isContentProgrammarian));
            $flds[] = $hctIsContentProgrammarian;

            // Field objectives
            $objectivesLabel = new MText('objectivesLabel', _M('Objetivos', $module) . ':');
            $objectivesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $objectives = new MMultiLineField('objectives', $this->getFormValue('objectives', $data->objectives), null, 100, 5, 40);
            $objectives->setJsHint(_M('Informe os objetivos', $module));
            $flds[] = new MHContainer('hctObjectives', array($objectivesLabel, $objectives));

            // Field content
            $contentLabel = new MText('contentLabel', _M('Conteúdo', $module) . ':');
            $contentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $content = new MMultiLineField('content_', $this->getFormValue('content_', $data->content), null, 100, 5, 40);
            $content->setJsHint(_M('Informe o conteúdo', $module));
            $flds[] = new MHContainer('hctContent', array($contentLabel, $content));

            // Field methodology
            $methodologyLabel = new MText('methodologyLabel', _M('Metodologia', $module) . ':');
            $methodologyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $methodology = new MMultiLineField('methodology', $this->getFormValue('methodology', $data->methodology), null, 100, 5, 40);
            $methodology->setJsHint(_M('Informe a metodologia', $module));
            $flds[] = new MHContainer('hctMethodology', array($methodologyLabel, $methodology));

            // Field evaluation
            $evaluationLabel = new MText('evaluationLabel', _M('Avaliação', $module) . ':');
            $evaluationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $evaluation = new MMultiLineField('evaluation', $this->getFormValue('evaluation', $data->evaluation), null, 100, 5, 40);
            $evaluation->setJsHint(_M('Informe a avaliação', $module));
            $flds[] = new MHContainer('hctEvaluation', array($evaluationLabel, $evaluation));

            if ( SAGU::getParameter('BASIC', 'MODULE_GNUTECA_INSTALLED') == "YES" )
            {
                //Bibliografia buscando dados do Gnuteca
                $url = str_replace( 'miolo20', 'miolo25',$MIOLO->getConf('home.url')).'/index.php?module=gnuteca3&action=main:search:externalSearch&parentElement=bibliografia.bibliografiaid';
                $link = "javascript:window.open('{$url}', 'Busca externa', 'STATUS=NO, TOOLBAR=NO, LOCATION=NO, DIRECTORIES=NO, RESISABLE=NO, SCROLLBARS=YES, TOP=10, LEFT=10, WIDTH=770, HEIGHT=400');";
                                
                //Adicionar aqui popup que abre janela do Gnuteca
                $fldsBasic[] = $field = new MIntegerField('bibliografia.bibliografiaid', NULL, _M('Código do material'));            
                $field->addAttribute('onBlur', SForm::getAjaxAction('obterBibliografiaGnuteca', 'divResult', false));
                $field->setVisibility(false);
                $fldsBasic[] = new MButton('lnkGnutecaSearch', _M('Buscar material', $module), $link);
                
                $fldsBasic[] = new SHiddenField('bibliografia.componentecurricularid', MIOLO::_REQUEST('componentecurricularid'));
                $fldsBasic[] = new MMultiLineField('basicBibliography', implode($data->basicBibliography), _M('Descrição', $module), 20, 5, 40);
                $fldsBasic[] = new MDiv('divResult'); 
                
                $flds[] = new MBaseGroup('htcBibliografiaBasica', _M('Bibliografia básica', $module), $fldsBasic);
                
                //Complemento bibliografico buscando dados do Gnuteca
                $url2 = str_replace( 'miolo20', 'miolo25',$MIOLO->getConf('home.url')).'/index.php?module=gnuteca3&action=main:search:externalSearch&parentElement=complemento.bibliografiaid';
                $link2 = "javascript:window.open('{$url2}', 'Busca externa', 'STATUS=NO, TOOLBAR=NO, LOCATION=NO, DIRECTORIES=NO, RESISABLE=NO, SCROLLBARS=YES, TOP=10, LEFT=10, WIDTH=770, HEIGHT=400');";
                
                //Adicionar aqui popup que abre janela do Gnuteca
                $fldsComplementary[] = $fieldComplemento = new MIntegerField('complemento.bibliografiaid', NULL, _M('Código do material'));            
                $fieldComplemento->addAttribute('onBlur', SForm::getAjaxAction('obterComplementoBibliograficoGnuteca', 'divResult2', false));
                $fieldComplemento->setVisibility(false);
                $fldsComplementary[] = new MButton('lnkGnutecaSearch2', _M('Buscar material', $module), $link2);
                
                $fldsComplementary[] = new SHiddenField('complemento.componentecurricularid', MIOLO::_REQUEST('componentecurricularid'));
                $fldsComplementary[] = new MMultiLineField('complementaryBibliography', implode($data->complementaryBibliography), _M('Descrição', $module), 20, 5, 40);
                $fldsComplementary[] = new MDiv('divResult2');          
                
                $flds[] = new MBaseGroup('htcBibliografiaComplementar', _M('Bibliografia complementar', $module), $fldsComplementary);
                
                // Field observation
                $observationLabel = new MText('observationLabel', _M('Observação', $module) . ':');
                $observationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $observation = new MMultiLineField('observation', $this->getFormValue('observation', $data->observation), _M('Observação', $module), 100, 5, 40);
                $observation->setJsHint(_M('Informe a observação', $module));
                $flds[] = new MHContainer('hctObservation', array($observationLabel, $observation));

                // Field complement
                $complementLabel = new MText('complementLabel', _M('Complemento', $module) . ':');
                $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $complement = new MMultiLineField('complement', $this->getFormValue('complement', $data->complement), null, 100, 5, 40);
                $complement->setJsHint(_M('Informe o complemento', $module));
                $flds[] = new MHContainer('hctComplement', array($complementLabel, $complement));
            }

            // Field bibliography description
            $basicbibliographydescriptionLabel = new MText('basicbibliographydescriptionLabel', _M('Bibliografia básica', $module) . ':');
            $basicbibliographydescriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $basicbibliographydescription = new MMultiLineField('basicbibliographydescription', $this->getFormValue('basicbibliographydescription', $data->basicbibliographydescription), null, 100, 5, 40);
            $basicbibliographydescription->setJsHint(_M('Informe a bibliografia básica', $module));
            $flds[] = new MHContainer('hctbasicbibliographydescription', array($basicbibliographydescriptionLabel, $basicbibliographydescription));

            // Field complementary bibliography description
            $complementarybibliographydescriptionLabel = new MText('complementarybibliographydescriptionLabel', _M('Bibliografia complementar', $module) . ':');
            $complementarybibliographydescriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $complementarybibliographydescription = new MMultiLineField('complementarybibliographydescription', $this->getFormValue('complementarybibliographydescription', $data->complementarybibliographydescription), null, 100, 5, 40);
            $complementarybibliographydescription->setJsHint(_M('Informe a bibliografia complementar', $module));
            $flds[] = new MHContainer('hctcomplementarybibliographydescription', array($complementarybibliographydescriptionLabel, $complementarybibliographydescription));

            $hctUpdateData = new MVContainer('hctUpdateData', $flds);
            $hctUpdateData->setShowLabel(false);

            $fields[] = new MDiv('divDadosComplementares', array($hctUpdateData),null,'align=right');
        }
        else
        {
            $fields[] = new MDiv('divDadosComplementares');   
        }
          
        if ( strlen($groupId) > 0 )
        {
            $ops = array(
                'function' => 'insert',
                'groupId' => $data->groupId,
                'unitId' => $data->unitId,
                'learningPeriodId'=> $data->learningPeriodId,
                'event'=>'clean'
            );

            $MIOLO->session->setValue('schedule', '');
            $MIOLO->session->setValue('professor', '');

            $goto = $MIOLO->getActionURL($module, 'main:process:scheduleCurricularComponent', null, $ops);
            $fields[] = new MLink('addSchedule', _M('Definir horário', $module), $goto);

            $fields[] = new MSeparator();

            try
            {
                $busSchedule = new BusinessAcademicBusSchedule();
                $scheduleData = $busSchedule->searchSchedule($data, true);
                if(SAGU::getParameter('ACADEMIC', 'EXIBIR_DATAS_DE_OCORRENCIA_NA_OFERECIDA') == DB_TRUE)
                {                    
                    foreach($scheduleData as $key => $occurrenceDates)
                    {                           
                        $dataConcatenada = NULL;
                        $datas = str_replace( '{', '', $occurrenceDates[13]);
                        $datas = str_replace( '}', '', $datas);
                        
                        $datas = explode(',', $datas);
                        
                        for($i =0; $i < count($datas); $i++)
                        {
                            $date1 = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'), strtotime($datas[$i]));
                            $i++;
                            $date2 = $datas[$i] ? date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'), strtotime($datas[$i])) : null;
                            $i++;
                            $date3 = $datas[$i] ? date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'), strtotime($datas[$i])) : null;
                            
                            $dataConcatenada .= $date1.'&nbsp'.$date2.'&nbsp'.$date3.'<br>';                            
                        }
                        
                        $scheduleData[$key][11] = $dataConcatenada;
                    }  
                }
            }
            catch ( Exception $e )
            {
                $this->addError(_M('Erro ao buscar dados dos horários.', $module) . ' ' . $e->getMessage());
            }

            if ( count($scheduleData) > 0 )
            {
                $data->goto = 'main:process:group';
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdScheduleSearch', $data);

                $grdResults->setTitle(_M('Horários para', $module) . ' ' . $data->curriculumCurricularComponentId . ' - ' . $data->curriculumCurricularComponentName);
                $grdResults->setData($scheduleData);
                $grdResults->setIsScrollable(false);

                $fields[] = $grdResults;

                $scheduleAllocate = $busSchedule->getScheduleAllocate($groupId, true);

                $fields[] = new MSeparator();
                $fields[] = new MTextLabel('totalSchedule', '<font color=\'blue\'>' . $data->lessonNumberHours . ' ' . _M('Horas', $module) . '</font>', _M('Total de horas', $module));
                $fields[] = new MTextLabel('scheduleAllocate', '<font color=\'red\'>' . $scheduleAllocate . ' ' . _M('Horas', $module) . '</font>', _M('Horas alocadas', $module));
                $fields[] = new MTextLabel('balance', '<font color=\'green\'>' . SAGU::timeDiff($data->lessonNumberHours.':00', $scheduleAllocate) . ' ' . _M('Horas', $module) . '</font>', _M('Saldo', $module));
            }
        }
                 
        //Adiciona campos
        $this->setFields($fields);      

        $this->addCustomFields('frmGroupAcademic', $groupId ); 
        
        $this->addField(new MSeparator());
        
        //CASO SEJA UPDATE, MOSTRA A DATA DA ÚLTIMA MODIFICAÇÃO
        if ( $function == 'update' )
        {
            $this->addField(new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', _M('Última modificação',$module)));
        }        
        
        $this->addField(new MSeparator());
        
        if ( isset($validators) )
        {
            $this->setValidators($validators);
        }
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module,substr($action,0,strrpos($action,':'))));

        $currentUrl = str_replace('&amp;', '&', $this->manager->getCurrentURL());

        // FIXME: When MIOLO handle Ajax well enough, these includes shall
        // be dropped. Hopefully.
        $this->page->addScript('m_multitext2.js');
        $this->page->addScript('m_multitext3.js');
        $this->page->addScript('m_lookup_ajax.js');
        $MIOLO->getRequiredJS4Ajax();

        $this->page->onSubmit('selectAllMMultiTextFields()');

        // Javascript functions
        $jsCode =
<<< HERE
        //*
        // * This is used to select all values of every MMultiTextField elements.
        // * The component already has this functions built-in, but it seems like they
        // * doesn't work when used with AJAX, so we had to implement it ourselves.
         
        function selectAllMMultiTextFields()
        {
            var controls = ''
            for ( var iControls=0; iControls<controls.length; iControls++ )
            {
                var mmultitextfield = xGetElementById(controls[iControls])
                if ( mmultitextfield != null )
                {
                    for ( var i=0; i<mmultitextfield.length; i++ )
                    {
                        mmultitextfield.options[i].selected = true
                    }
                }
            }
            return true
        }

        function showUpdate(result)
        {
            xGetElementById('divUpdate').innerHTML = result;

            MIOLO_parseAjaxJavascript(result);

            stopShowLoading();
        }

        function showData(result)
        {
            xGetElementById('divData').innerHTML = result;

            MIOLO_parseAjaxJavascript(result);

            stopShowLoading();
        }

        function showUpdateData(groupId)
        {
            showLoading();

            if (xGetElementById('divUpdate').innerHTML == '')
            {
                cpaint_call("{$currentUrl}", "POST", "showUpdateData_click", groupId, showUpdate, "TEXT");
            }
            else
            {
                expandRetractContainer('divUpdate');
            }
        }

        function expandRetractContainer(elementId)
        {
            if (xGetElementById(elementId).style.display != 'none')
            {
                xGetElementById(elementId).style.display = 'none';
            }
            else
            {
                xGetElementById(elementId).style.display = 'block';
            }
        }

        function changeLinkText(elementId, text1, text2)
        {
            if (xGetElementById(elementId).innerHTML == text1)
            {
                xGetElementById(elementId).innerHTML = text2;
            }
            else
            {
                xGetElementById(elementId).innerHTML = text1;
            }
        }
HERE;

        $this->page->addJsCode($jsCode);
    }

    /**
     * Method used by cpaint to construct the update fields of group form
     */
    private function showUpdateData($args)
    {   
        
    }

    /**
     * Event triggered when user clicks the save button of toolbar
     */
    public function tbBtnSave_click($sender=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $session = $MIOLO->session;

        $busGroup = new BusinessAcademicBusGroup();
        $conceptGroupId = MIOLO::_REQUEST('conceptGroupIdId');
        $hasErrors = false;
        
        $groupId = MIOLO::_REQUEST('groupId');
                
        try
        {
            // Verifica se foi marcado "utilizar conceitos" como SIM mas não preenchido a lookup "Grupo de conceitos"
            if ( (MIOLO::_REQUEST('useConcept') == DB_TRUE) && ( strlen($conceptGroupId) <= 0 ) )
            {
                throw new Exception( _M('Como o campo Utiliza conceitos foi preenchido como "Sim", você deve preencher com algum valor o campo Grupo de conceitos') );
            }
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
            $hasErrors = true;
        }

        // Obtém dados do período letivo
        try
        {
            $busLearning = new BusinessAcademicBusLearningPeriod();

            if ( $function == SForm::FUNCTION_UPDATE )
            {
                $formData = $session->isRegistered('data') ? unserialize(base64_decode($session->getValue('data'))) : $this->getTypesData();
                $this->learningPeriodId->value = $formData->learningPeriodId;
            }

            $dataLearning = $busLearning->getLearningPeriod($this->learningPeriodId->value);
            
            if ($dataLearning->isClosed == DB_TRUE)
            {
                $this->addError(_M('O período letivo selecionado está fechado e nenhuma oferecida pode ser cadastrada. Para o continuar o processo, reabra o período letivo ou selecione um período aberto.', $module));
                $hasErrors = true;
            }
        }
        catch (Exception $e)
        {
            $this->addError(_M('Erro ao buscar dados do período letivo.', $module) . ' ' . $e->getMessage());
            $hasErrors = true;
        }
        
        //Verifica se a ocorrência de curso é a mesma cadastrada no período letivo 
        list ( $courseId, $courseVersion, $turnId, $unitId ) = $this->courseId->value;        
        
        if ( SAGU::getParameter('ACADEMIC', 'TABELA_DE_DISCIPLINA_OFERECIDA_SIMPLIFICADA') == 'NO' )
        {
            if ( ($courseId != $dataLearning->courseId) || ($courseVersion != $dataLearning->courseVersion) || ($turnId != $dataLearning->turnId) || ($unitId != $dataLearning->unitId) )
            {
                $this->addError(_M('A ocorrência de curso não pertence ao período letivo informado. Verifique o cadastro do período letivo.', $module));
                $hasErrors = true;
            }
        }

        // Obtém dados da versão do curso
        try
        {
            $busCourseVersion = new BusinessAcademicBusCourseVersion();
            $dataCourseVersion = $busCourseVersion->getCourseVersion($dataLearning->courseId, $dataLearning->courseVersion);
        }
        catch (Exception $e)
        {
            $this->addError(_M('Erro ao buscar dados da versão do curso.', $module) . ' ' . $e->getMessage());
            $hasErrors = true;
        }

        // Prepara os filtros para obter os dados da matriz curricular
        $filters = new stdClass();
        $filters->curricularComponentId = $this->curricularComponentId->value;
        $filters->curricularComponentVersion = $this->curricularComponentVersion->value;
        $filters->courseId = $dataLearning->courseId;
        $filters->courseVersion = $dataLearning->courseVersion;
        $filters->turnId = $dataLearning->turnId;
        $filters->unitId = $dataLearning->unitId;
        
        try
        {
            $busCurr = new BusinessAcademicBusCurriculum();
            $curriculums = $busCurr->searchCurriculum($filters);
        }
        catch (Exception $e)
        {
            $this->addError(_M('Erro ao buscar dados da matriz curricular.', $module) . ' ' . $e->getMessage());
            $hasErrors = true;
        }
        
        // Obtém os dados do formulário
        $data = $session->isRegistered('data') ? unserialize(base64_decode($session->getValue('data'))) : $this->getTypesData();
               
        // Não descobri de onde vem o "data" da sessão, por este motivo pego do _REQUEST diretamente
        if ( !$data->conceptGroupId )
        {
            $data->conceptGroupId = $conceptGroupId;
        }
        
        $session->setValue('data', base64_encode(serialize($data)));
        $saveAnyway = $MIOLO->_REQUEST('saveAnyway');

        if (strlen($curriculums[0][0]) > 0)
        {
            $filters2 = new stdClass();
            $filters2->periodId = $dataLearning->periodId;
            $filters2->curriculumId = $curriculums[0][0];
            $filters2->classId = $data->classId;

            try
            {
                $groupClass = $busGroup->searchGroup($filters2);
            }
            catch (Exception $e)
            {
                $this->addError(_M('Erro verificando disciplina e turma.', $module) . ' ' . $e->getMessage());
                $hasErrors = true;
            }
        }
                
        // Se a disciplina da matriz curricular já foi registrada para a turma selecionada um alerta é exibido
        if (count($groupClass) > 0 && strlen($saveAnyway) == 0 && !$hasErrors)
        {
            $opts = array(
                'function' => $function,
                'event' =>'tbBtnSave_click',
                'saveAnyway' => 't',
                'groupId' => $data->groupId,
                'curricularComponentId' => MIOLO::_REQUEST('curricularComponentId'),
            );
            
            // Adiciona os campos customizaveis nos argumentos para serem passados para o GET
            // e recebidos corretamente
            foreach ($this->mioloCustomFields as $cf )
            {
                $cf instanceof MCustomField;
                
                $opts[$cf->getInputId()] = MIOLO::_REQUEST($cf->getInputId());
            }
            
            if ( $function == 'update' )
            {
                // Salva campos customizaveis
                $this->saveCustomFields( $groupId, null, 'frmGroupAcademic' );                
            }
            
            
           $this->page->redirect($MIOLO->getActionURL($module, $action, null, $opts ));
        }
        elseif (!$hasErrors)
        {
            // Inserção/Atualização dos dados
            try
            {
                if (count($curriculums) != 1)
                {
                    throw new Exception(_M('A disciplina @1 não pertence a nenhum currículo.', $module, $this->curricularComponentId->value . '/' . $this->curricularComponentVersion->value));
                }

                if ( $function == 'insert')
                {
                    $data->curriculumId = $curriculums[0][0];
                    
                    $groupId = $busGroup->insertGroup($data);
                    $postUrl = $MIOLO->getActionURL($module, $action, null, array('function'=>'update', 'groupId'=>$groupId, 'wasInserted'=>'t') );
                    
                    // Salva campos customizaveis
                    $this->saveCustomFields( $groupId, null, 'frmGroupAcademic' );
                    
                    $this->page->redirect($postUrl);
                }
                elseif ( $function == 'update' )
                {
                    $data->curriculumId = $curriculums[0][0];
                    
                    $updateGroup = $busGroup->updateGroup($data);
                    $groupId = $data->groupId;
                    
                    $currMessage = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
                    // Call defineFields() again, so all updated data is queried again
                    $this->defineFields();
                    $this->addInfo($currMessage);
                }
                else
                {
                    throw new Exception(_M('Função desconhecida: @1', $module, $function));
                }

                // Salva campos customizaveis
                //$this->saveCustomFields( $groupId, null, 'frmGroupAcademic' );
            }
            catch (Exception $e)
            {
                $this->addError($e->getMessage());
            }

            if ($session->isRegistered('data'))
            {
                $session->unregister('data');
            }
        }
    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     */
    public function tbBtnNew_click($sender=NULL)
    {
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     *
     * Verifica a permissão do usuário, caso alguem ja esteje matriculado na disciplina permite a remoção de todas
     * as dependências apenas se o usuário possuir a permissão de administrador (A_ADMIN). Caso não possua não permite a operação,
     * Caso a disciplina não esteje sento utilizada Permite a exclusão normalmente.
     */
    public function tbBtnDelete_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $session = $MIOLO->session;
        $loginUid = $session->isRegistered('loginUid') ? $session->getValue('loginUid') : null;
        $loginPasswd = $session->isRegistered('loginPasswd') ? $session->getValue('loginPasswd') : null;

        $groupId = MIOLO::_REQUEST('groupId');
        $busGroup = new BusinessAcademicBusGroup();
        $dataGroup = $busGroup->getGroup($groupId);

        if( $dataGroup->totalEnrolled > 0 )
        {
            if ( ! ( SAGU::authenticate($loginUid, $loginPasswd) || $MIOLO->checkAccess('FrmGroupAcademic', A_ADMIN, false, true) ) )
            {
                $goto = $MIOLO->getActionURL($module, $action);
                $MIOLO->error(_M('Verifique suas permissões', $module), $goto);
            }
        }
        $opts = array(
            'event' => 'tbBtnDelete_confirm',
            'function' => 'delete',
            'groupId' => MIOLO::_REQUEST('groupId')
        );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $goto = SAGU::getStackBackUrl();
        $gotoNo = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Questão',$module);
        $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE'), $gotoYes, $gotoNo);
    }
    
    

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     */
    public function tbBtnDelete_confirm($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $action = 'main:process:group';

        try
        {
            $busGroup = new BusinessAcademicBusGroup();

            $busGroup->begin();
            $busGroup->deleteGroupRelatedData($this->groupId->value);
            $busGroup->deleteGroup($this->groupId->value);
            $busGroup->commit();

            $goto = $MIOLO->getActionURL($module, $action);
            $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), $goto);
        }
        catch (Exception $e)
        {
            $url = $MIOLO->GetActionURL($module, 'main:process:group');
            
            $erro = $e->getMessage();
            $find = preg_match('/acdgroupunblock/', $erro);
            
            $msg = $find ? _M('Erro executando a operação solicitada. Existem registros de desbloqueio para esta disciplina.', $module) : _M('Erro executando a operação solicitada. Existem alunos matriculados na disciplina.',$module) ;
            
            $MIOLO->error($msg, $url);
        }
    }

    
    
    public function tbBtnDeleteCascade_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $session = $MIOLO->session;
        $loginUid = $session->isRegistered('loginUid') ? $session->getValue('loginUid') : null;
        $loginPasswd = $session->isRegistered('loginPasswd') ? $session->getValue('loginPasswd') : null;

        $groupId = MIOLO::_REQUEST('groupId');
        $busGroup = new BusinessAcademicBusGroup();
        $dataGroup = $busGroup->getGroup($groupId);

        if( $dataGroup->totalEnrolled > 0 )
        {
            if ( ! ( SAGU::authenticate($loginUid, $loginPasswd) || $MIOLO->checkAccess('FrmGroupAcademic', A_ADMIN, false, true) ) )
            {
                $goto = $MIOLO->getActionURL($module, $action);
                $MIOLO->error(_M('Verifique suas permissões', $module), $goto);
            }
        }
        $opts = array(
            'event' => 'tbBtnDeleteCascade_confirm',
            'function' => 'delete',
            'groupId' => MIOLO::_REQUEST('groupId')
        );

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );

        // This return the primary key to the search form so that user
        // can see the record he would delete
        $goto = SAGU::getStackBackUrl();
        $gotoNo = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);

        $caption = _M('Questão',$module);
        $MIOLO->question(_M('Tem certeza que deseja remover todas as notas e frequências da oferta @1',$module,$dataGroup->curriculumCurricularComponentName), $gotoYes, $gotoNo);
    }
    
    
    public function tbBtnDeleteCascade_confirm($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = 'main:process:group';
        $groupId = $this->groupId->value;

        try
        {
            $busGroup = new BusinessAcademicBusGroup();
                        
            // Adicionando log de delete de frequências e notas - ticket #39295
            $login = SAGU::getUsuarioLogado();
            
            $login->mioloUserName;
            
            $pathLog = $MIOLO->getConf('home.miolo') . '/var/log/logDeLimpezaDeNotasEFrequencias.txt';
            $logFile = file_get_contents($pathLog);
            
            $logFile .= PHP_EOL . PHP_EOL;
            $logFile .= "USUÁRIO: " . $login->mioloUserName . PHP_EOL;
            $logFile .= "PESSOA: " . $login->personId . " - " . $login->personName . PHP_EOL;
            $logFile .= "DISCIPLINA LIMPA: " . $groupId;
            
            file_put_contents($pathLog, $logFile);
            
            SDatabase::beginTransaction();
            $busGroup->deleteFrequencyAndNotes($groupId);
            SDatabase::commit();

            $goto = $MIOLO->getActionURL($module, $action);
            $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), $goto);
            
        }
        catch (Exception $e)
        {
            $MIOLO->error(_M('Erro executando a operação solicitada.',$module) . ' ' . $e->getMessage());
        }
    }
    
    
    
    /**
     * Ação do botão imprimir
     * @param type $sender
     */
    public function tbBtnPrint_click($sender=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $groupId = MIOLO::_REQUEST('groupId');

        if ($function == 'printContent')
        {
            $report = new SReport();
            $report->setReportPath('academic', 'gradebook');
            $report->setParameter('groupid', (int) $groupId);
            
            if ( strlen($groupId) > 0 )
            {
                $busGroup = new BusinessAcademicBusGroup();
                $professors = $busGroup->getProfessorNamesOfGroup( $groupId );
                $professor = count($professors) > 0 ? (string) implode(', ', $professors) : _M('Professor não cadastrado');
                $report->setParameter('professorName', $professor);
            }
            
            if ( !$report->generate() )
            {
                $this->addError(_M('Não foi possível gerar o documento.', $module));
            }
        }
    }

    /**
     * Method to gather all information from the group form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $data = new AcdGroup();
        $data->groupId = MIOLO::_REQUEST('groupId');
        $data->groupName = MIOLO::_REQUEST('groupName');
        $data->learningPeriodId = MIOLO::_REQUEST('learningPeriodId');
        $data->curriculumId = MIOLO::_REQUEST('curriculumId');
        $data->turnId = MIOLO::_REQUEST('turnId');
        $data->unitId = MIOLO::_REQUEST('unitId');
        $data->complement = MIOLO::_REQUEST('complement');
        $data->vacant = MIOLO::_REQUEST('vacant');
        $data->leaderId = MIOLO::_REQUEST('leaderId');
        $data->subLeaderId = MIOLO::_REQUEST('subLeaderId');
        $data->objectives = MIOLO::_REQUEST('objectives');
        $data->content = MIOLO::_REQUEST('content_');
        $data->methodology = MIOLO::_REQUEST('methodology');
        $data->evaluation = MIOLO::_REQUEST('evaluation');
        $data->observation = MIOLO::_REQUEST('observation');
        $data->regimenId = MIOLO::_REQUEST('regimenId');
        $data->basicbibliographydescription = MIOLO::_REQUEST('basicbibliographydescription');
        $data->complementarybibliographydescription = MIOLO::_REQUEST('complementarybibliographydescription');
        $data->professorResponsible = MIOLO::_REQUEST('professorResponsible');
        $data->classId = MIOLO::_REQUEST('classId');
        $data->isCancellation = MIOLO::_REQUEST('isCancellation');
        $data->isUseWebDaily = MIOLO::_REQUEST('isUseWebDaily');
        $data->isClosed = MIOLO::_REQUEST('isClosed');
        $data->isContentProgrammarian = MIOLO::_REQUEST('isContentProgrammarian');
        $data->courseId = MIOLO::_REQUEST('courseId');
        $data->courseVersion = MIOLO::_REQUEST('courseVersion');
        $data->curricularComponentId = MIOLO::_REQUEST('curricularComponentId');
        $data->curricularComponentVersion = MIOLO::_REQUEST('curricularComponentVersion');
        $data->useConcept = MIOLO::_REQUEST('useConcept');
        $data->conceptGroupId = MIOLO::_REQUEST('conceptGroupId');
        $data->frequenceRegisterNotification = MIOLO::_REQUEST('frequenceRegisterNotification');
        $data->evaluationTypeId = $this->evaluationTypeId->value;
        $data->basicBibliography = MIOLO::_REQUEST('basicBibliography');        
        $data->complementaryBibliography = MIOLO::_REQUEST('complementaryBibliography');
        
        $data->basicBibliography = '{'.$data->basicBibliography.'}';
        $data->complementaryBibliography = '{'.$data->complementaryBibliography.'}';
        
        return $data;
    } 
    
    public function ativarGrupoConceito($args)
    {    
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');
        
        if($function == 'update')
        {
            $busGroup = new BusinessAcademicBusGroup();
            $data = $busGroup->getGroup($args->groupId);
        }
        if(!isset($args->conceptGroupIdId))
        {
            $conceptGroupIdLabel = new MText('conceptGroupIdLabel', _M('Grupo de conceitos',$module) . ':');
            $conceptGroupIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));      
            $conceptGroupIdId = new MLookupTextField('conceptGroupIdId', $data->conceptGroupId, null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('conceptGroupIdName'), $module, 'ConceptGroup', null, array(), true);
            $conceptGroupIdId->setJsHint(_M('Informe o código do grupo de conceitos', $module));          
            $validators[] = new MIntegerValidator('conceptGroupIdId', _M('Grupo de conceitos', $module));
            $conceptGroupIdName = new MTextField('conceptGroupIdName', $data->conceptGroupIdName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $conceptGroupIdName->setJsHint(_M('Nome da turma', $module));
            $conceptGroupIdName->setReadOnly(true);
            $flds[] = $conceptGroupIdCnt = new MHContainer('conceptGroupIdCnt', array($conceptGroupIdLabel, $conceptGroupIdId, $conceptGroupIdName));
            $conceptGroupIdCnt->setShowLabel(false);
        } 
        return SAGU::alignFields($flds);
    }
    
    public function ativarDadosComplementares($args)
    {
       $module = MIOLO::getCurrentModule();
       $function = MIOLO::_REQUEST('function');
       
       if($function == 'update')
       {
           $busGroup = new BusinessAcademicBusGroup();
           $data = $busGroup->getGroup($args->groupId);
       }
       if(!isset($args->leaderId))
       {
           if (strlen($groupId) > 0 && $groupId != 'undefined')
            {
                try
                {
                    $isGnutecaInstalled = SAGU::getParameter('BASIC', 'MODULE_GNUTECA_INSTALLED') == 'YES';
                    $busGnuteca = $isGnutecaInstalled ? new BusinessGnutecaBusGnutecaToSagu2() : null;
                    $busGnuteca instanceof BusinessGnutecaBusGnutecaToSagu2;

                    $busGroup = new BusinessAcademicBusGroup();
                    $data = $busGroup->getGroup($groupId); 
                                        
                }
                catch (Exception $e)
                {
                    $textError = new MText('groupError', _M('Erro ao buscar dados da disciplina oferecida.', $module) . ' ' . $e->getMessage(), 'red');
                    $textError->addStyle('font-weight', 'bold');
                    $flds[] = $textError;
                }
            }

            // Field leader
            $leaderLabel = new MText('leaderLabel', _M('Líder', $module) . ':');
            $leaderLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $leaderId = new MLookupTextField('leaderId', $this->getFormValue('leaderId', $data->leaderId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'leaderName', 'basic', 'PhysicalPersonStudent', null, null, true);
            $leaderId->setJsHint(_M('Informe o código da pessoa', $module));
            $validators[] = new MIntegerValidator('leaderId', '', 'optional');
            $leaderName = new MTextField('leaderName', $data->leaderName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $leaderName->setJsHint(_M('Nome da pessoa', $module));
            $leaderName->setReadOnly(true);
            $hctLeader = new MHContainer('hctLeader', array($leaderLabel, $leaderId, $leaderName));
            $hctLeader->setShowLabel(true);
            $flds[] = $hctLeader;

            // Field subLeader
            $subLeaderLabel = new MText('subLeaderLabel', _M('Vice-líder', $module) . ':');
            $subLeaderLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $subLeaderId = new MLookupTextField('subLeaderId', $this->getFormValue('subLeaderId',$data->subLeaderId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'subLeaderName', 'basic', 'PhysicalPersonStudent', null, null, true);
            $subLeaderId->setJsHint(_M('Informe o código da pessoa',$module));
            $validators[] = new MIntegerValidator('subLeaderId', '', 'optional');
            $subLeaderName = new MTextField('subLeaderName', $data->subLeaderName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $subLeaderName->setJsHint(_M('Nome da pessoa',$module));
            $subLeaderName->setReadOnly(true);
            $hctSubLeader = new MHContainer('hctSubLeader', array($subLeaderLabel, $subLeaderId, $subLeaderName));
            $hctSubLeader->setShowLabel(true);
            $flds[] = $hctSubLeader;

            // Utiliza conceitos               
            $useConceptLabel = new MText('useConceptLabel', _M('Utiliza conceitos',$module) .'?');
            $useConceptLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $value = strlen($this->getFormValue('useConcept', $data->useConcept)) > 0 ? $this->getFormValue('useConcept', $data->useConcept) : DB_FALSE;         

            $useConcept = new MRadioButtonGroup('useConcept', null, SAGU::listTrueFalse(1), $value, null, 'horizontal');
            $ajaxAction = SForm::getAjaxAction('FrmGroup::ativarGrupoConceito', 'divGrupoConceito', false);
            $useConcept->addAttribute('onChange', $ajaxAction);                     
            $hctUseConcept = new MHContainer('hctUseConcept', array($useConceptLabel, $useConcept));
            $flds[] = $hctUseConcept;
              
            //divGrupoConceito retorna a funçao 
            if($function == 'update' && $value==DB_TRUE)
            {
                $conceptGroupIdLabel = new MText('conceptGroupIdLabel', _M('Grupo de conceitos',$module) . ':');
                $conceptGroupIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));      
                $conceptGroupIdId = new MLookupTextField('conceptGroupIdId', $this->getFormValue('conceptGroupId', $data->conceptGroupId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('conceptGroupIdName'), $module, 'ConceptGroup', null, array(), true);
                $conceptGroupIdId->setJsHint(_M('Informe o código do grupo de conceitos', $module));          
                $validators[] = new MIntegerValidator('conceptGroupIdId', _M('Grupo de conceitos', $module));
                $conceptGroupIdName = new MTextField('conceptGroupIdName', $data->conceptGroupIdName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $conceptGroupIdName->setJsHint(_M('Nome da turma', $module));
                $conceptGroupIdName->setReadOnly(true);
                $conceptGroupIdCnt = new MHContainer('conceptGroupIdCnt', array($conceptGroupIdLabel, $conceptGroupIdId, $conceptGroupIdName));
                $flds[] = new MDiv('divGrupoConceito', array($conceptGroupIdCnt));
                $conceptGroupIdCnt->setShowLabel(false);
            }
            else
            {
                $flds[] = new MDiv('divGrupoConceito');   
            }        
            // Field is cancellation
            $isCancellationLabel = new MText('isCancellationLabel', _M('Está cancelada',$module) .'?');
            $isCancellationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $value = strlen($this->getFormValue('isCancellation', $data->isCancellation)) > 0 ? $this->getFormValue('isCancellation', $data->isCancellation) : DB_FALSE;
            $isCancellation = new MRadioButtonGroup('isCancellation', null, SAGU::listTrueFalse(1), $value, null, 'horizontal');
            $isCancellation->setShowLabel(false);
            $hctIsCancellation = new MHContainer('hctIsCancellation', array($isCancellationLabel, $isCancellation));
            $flds[] = $hctIsCancellation;

            // Field is content programmarian
            $isContentProgrammarianLabel = new MText('isContentProgrammarianLabel', _M('Possui conteúdo programático',$module) .'?');
            $isContentProgrammarianLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $isContentProgrammarianOptions = SAGU::listYesNo();
            $isContentProgrammarian = $this->GetFormValue('isContentProgrammarian',$data->isContentProgrammarian);
            $value = strlen($this->getFormValue('isContentProgrammarian', $data->isContentProgrammarian)) > 0 ? $this->getFormValue('isContentProgrammarian', $data->isContentProgrammarian) : DB_FALSE;
            $isContentProgrammarian = new MRadioButtonGroup('isContentProgrammarian', null, SAGU::listTrueFalse(1), $value, null, 'horizontal');
            $isContentProgrammarian->setShowLabel(false);
            $hctIsContentProgrammarian = new MHContainer('hctIsContentProgrammarian', array($isContentProgrammarianLabel, $isContentProgrammarian));
            $flds[] = $hctIsContentProgrammarian;

            // Field objectives
            $objectivesLabel = new MText('objectivesLabel', _M('Objetivos', $module) . ':');
            $objectivesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $objectives = new MMultiLineField('objectives', $this->getFormValue('objectives', $data->objectives), null, 100, 5, 40);
            $objectives->setJsHint(_M('Informe os objetivos', $module));
            $flds[] = new MHContainer('hctObjectives', array($objectivesLabel, $objectives));

            // Field content
            $contentLabel = new MText('contentLabel', _M('Conteúdo', $module) . ':');
            $contentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $content = new MMultiLineField('content_', $this->getFormValue('content_', $data->content), null, 100, 5, 40);
            $content->setJsHint(_M('Informe o conteúdo', $module));
            $flds[] = new MHContainer('hctContent', array($contentLabel, $content));

            // Field methodology
            $methodologyLabel = new MText('methodologyLabel', _M('Metodologia', $module) . ':');
            $methodologyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $methodology = new MMultiLineField('methodology', $this->getFormValue('methodology', $data->methodology), null, 100, 5, 40);
            $methodology->setJsHint(_M('Informe a metodologia', $module));
            $flds[] = new MHContainer('hctMethodology', array($methodologyLabel, $methodology));

            // Field evaluation
            $evaluationLabel = new MText('evaluationLabel', _M('Avaliação', $module) . ':');
            $evaluationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $evaluation = new MMultiLineField('evaluation', $this->getFormValue('evaluation', $data->evaluation), null, 100, 5, 40);
            $evaluation->setJsHint(_M('Informe a avaliação', $module));
            $flds[] = new MHContainer('hctEvaluation', array($evaluationLabel, $evaluation));

            if ( SAGU::getParameter('BASIC', 'MODULE_GNUTECA_INSTALLED') == "YES" )
            {
                $MIOLO = MIOLO::getInstance();
                //Bibliografia buscando dados do Gnuteca 
                $url = str_replace( 'miolo20', 'miolo25',$MIOLO->getConf('home.url')).'/index.php?module=gnuteca3&action=main:search:externalSearch&parentElement=bibliografia.bibliografiaid';
                $link = "javascript:window.open('{$url}', 'Busca externa', 'STATUS=NO, TOOLBAR=NO, LOCATION=NO, DIRECTORIES=NO, RESISABLE=NO, SCROLLBARS=YES, TOP=10, LEFT=10, WIDTH=770, HEIGHT=400');";
                                
                //Adicionar aqui popup que abre janela do Gnuteca
                $fldsBasic[] = $field = new MIntegerField('bibliografia.bibliografiaid', NULL, _M('Código do material'));            
                $field->addAttribute('onBlur', SForm::getAjaxAction('obterBibliografiaGnuteca', 'divResult', false));
                $field->setVisibility(false);
                $fldsBasic[] = new MButton('lnkGnutecaSearch', _M('Buscar material', $module), $link);
                
                $fldsBasic[] = new SHiddenField('bibliografia.componentecurricularid', MIOLO::_REQUEST('componentecurricularid'));
                $fldsBasic[] = new MMultiLineField('basicBibliography', implode($data->basicBibliography), _M('Descrição', $module), 20, 5, 40);
                $fldsBasic[] = new MDiv('divResult'); 
                
                $flds[] = new MBaseGroup('htcBibliografiaBasica', _M('Bibliografia básica', $module), $fldsBasic);
                
                //Complemento bibliografico buscando dados do Gnuteca
                $url2 = str_replace( 'miolo20', 'miolo25',$MIOLO->getConf('home.url')).'/index.php?module=gnuteca3&action=main:search:externalSearch&parentElement=complemento.bibliografiaid';
                $link2 = "javascript:window.open('{$url2}', 'Busca externa', 'STATUS=NO, TOOLBAR=NO, LOCATION=NO, DIRECTORIES=NO, RESISABLE=NO, SCROLLBARS=YES, TOP=10, LEFT=10, WIDTH=770, HEIGHT=400');";
                
                //Adicionar aqui popup que abre janela do Gnuteca
                $fldsComplementary[] = $fieldComplemento = new MIntegerField('complemento.bibliografiaid', NULL, _M('Código do material'));            
                $fieldComplemento->addAttribute('onBlur', SForm::getAjaxAction('obterComplementoBibliograficoGnuteca', 'divResult2', false));
                $fieldComplemento->setVisibility(false);
                $fldsComplementary[] = new MButton('lnkGnutecaSearch2', _M('Buscar material', $module), $link2);
                
                $fldsComplementary[] = new SHiddenField('complemento.componentecurricularid', MIOLO::_REQUEST('componentecurricularid'));
                $fldsComplementary[] = new MMultiLineField('complementaryBibliography', implode($data->complementaryBibliography), _M('Descrição', $module), 20, 5, 40);
                $fldsComplementary[] = new MDiv('divResult2');          
                
                $flds[] = new MBaseGroup('htcBibliografiaComplementar', _M('Bibliografia complementar', $module), $fldsComplementary);
                
                // Field observation
                $observationLabel = new MText('observationLabel', _M('Observação', $module) . ':');
                $observationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $observation = new MMultiLineField('observation', $this->getFormValue('observation', $data->observation), _M('Observação', $module), 100, 5, 40);
                $observation->setJsHint(_M('Informe a observação', $module));
                $flds[] = new MHContainer('hctObservation', array($observationLabel, $observation));

                // Field complement
                $complementLabel = new MText('complementLabel', _M('Complemento', $module) . ':');
                $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $complement = new MMultiLineField('complement', $this->getFormValue('complement', $data->complement), null, 100, 5, 40);
                $complement->setJsHint(_M('Informe o complemento', $module));
                $flds[] = new MHContainer('hctComplement', array($complementLabel, $complement));
            }

            // Field bibliography description
            $basicbibliographydescriptionLabel = new MText('basicbibliographydescriptionLabel', _M('Bibliografia básica', $module) . ':');
            $basicbibliographydescriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $basicbibliographydescription = new MMultiLineField('basicbibliographydescription', $this->getFormValue('basicbibliographydescription', $data->basicbibliographydescription), null, 100, 5, 40);
            $basicbibliographydescription->setJsHint(_M('Informe a bibliografia básica', $module));
            $flds[] = new MHContainer('hctbasicbibliographydescription', array($basicbibliographydescriptionLabel, $basicbibliographydescription));

            // Field complementary bibliography description
            $complementarybibliographydescriptionLabel = new MText('complementarybibliographydescriptionLabel', _M('Bibliografia complementar', $module) . ':');
            $complementarybibliographydescriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $complementarybibliographydescription = new MMultiLineField('complementarybibliographydescription', $this->getFormValue('complementarybibliographydescription', $data->complementarybibliographydescription), null, 100, 5, 40);
            $complementarybibliographydescription->setJsHint(_M('Informe a bibliografia complementar', $module));
            $flds[] = new MHContainer('hctcomplementarybibliographydescription', array($complementarybibliographydescriptionLabel, $complementarybibliographydescription));

            $hctUpdateData = new MVContainer('hctUpdateData', $flds);
            $hctUpdateData->setShowLabel(false);

            $fields[]= $hctUpdateData;
       }
          return SAGU::alignFields($fields);   
    }
    
    public function obterBibliografiaGnuteca($args)
    {
        $value = $args->basicBibliography;
        if( strlen($args->bibliografia_bibliografiaid) > 0 && is_numeric($args->bibliografia_bibliografiaid) )
        {
            $domain = $_SERVER['SERVER_NAME'];
            $module = MIOLO::getCurrentModule();
            $url = 'http://'.$domain.'/miolo25/html/';
            $clientOptions["location"] = "$url/webservices.php?module=gnuteca3&action=main&class=gnuteca3WebServicesMaterial";
            $clientOptions["uri"] = "$url";
            $clientOptions["encoding"] = "LATIN1";
            $client = new SoapClient(NULL, $clientOptions);
            $result = $client->getMaterialInformation('1', base64_encode('123456'), $args->bibliografia_bibliografiaid, null, "PHP_OBJECT", true);
            $value .= '['.strip_tags($result['format']).']';
        }
        
        $this->page->addAJAXJsCode("document.getElementById('basicBibliography').value = '{$value}'");
    }
    
    public function obterComplementoBibliograficoGnuteca($args)
    {
        $value = $args->complementaryBibliography;
        if( strlen($args->complemento_bibliografiaid) > 0 && is_numeric($args->complemento_bibliografiaid) )
        {
            $domain = $_SERVER['SERVER_NAME'];
            $module = MIOLO::getCurrentModule();
            $url = 'http://'.$domain.'/miolo25/html/';
            $clientOptions["location"] = "$url/webservices.php?module=gnuteca3&action=main&class=gnuteca3WebServicesMaterial";
            $clientOptions["uri"] = "$url";
            $clientOptions["encoding"] = "LATIN1";
            $client = new SoapClient(NULL, $clientOptions);
            $result = $client->getMaterialInformation('1', base64_encode('123456'), $args->complemento_bibliografiaid, null, "PHP_OBJECT", true);
            $value .= strip_tags($result['format']).';';
            $value = '['.str_replace(',', ' ', $value).']';
        }
        
        $this->page->addAJAXJsCode("document.getElementById('complementaryBibliography').value = '{$value}'");
        
    }
}
?>