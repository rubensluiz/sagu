<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Conclusin of course document form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/02/2011
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmTeachingDocument extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Docência', $module), null, null);

        //Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'btnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        //Field professor
        $professorLabel = new MText('professorLabel', _M('Professor', $module) . ':');
        $professorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $professorLabel->setClass('m-caption m-caption-required');
        $professorId = new MLookupTextField('professorId', $this->getFormValue('professorId', $data->professorId), _M('Professor', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $professorId->setJsHint(_M('Informe o código do professor', $module));
        $validators[] = new MRequiredValidator('professorId',_M('Professor', $module), 'required');
        $professorName = new MTextField('professorName', $this->getFormValue('professorName', $data->professorName), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $professorName->setJsHint(_M('Nome do professor', $module));
        $professorName->setReadOnly(true);
        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
        $hctProfessor->setShowLabel(false);
        $fields[]  = $hctProfessor;

        $fields[] = new MDiv('divLimbo', null);

        //Campo entrada
        $entryLabel = new MText(rand(), _M('Data de ingresso na instituição', $module));
        $entryLabel->setClass('m-caption m-caption-required');
        $entryLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $entry = new MCalendarField('entry', $this->getRequestValue('entry'), null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $entry->setJsHint(_M('Informe desde quando a pessoa selecionada é professor da instituição', $module));
        $validators[] = new MDateDMYValidator('entry',_M('Data de ingresso na instituição', $module));
        $validators[] = new MRequiredValidator('entry',_M('Data de ingresso na instituição', $module), 'required');
        $entryButton = new MButton('btnEntryChange', _M('Obter data', $module), $this->getAjaxAction('changeEntry', 'divLimbo', false));
        $fields[] = $cnt = new MHContainer(rand(), array($entryLabel, $entry, $entryButton));
        $cnt->setFormMode(MControl::FORM_MODE_SHOW_SIDE);
        
        if ( SAGU::getParameter('ACADEMIC', 'SIMPLIFIED_SCHOLARSHIP_DESCRIPTION_DOCUMENT_EXTRA_PARAMS') == 'YES' )
        {   
            $busStamp = new BusinessBasicBusStamp();
            $fields[] = new MSelection('carimbo', null, _M('Carimbo'), $busStamp->listStamp());
            $fields[] = new MSeparator();
        }

        //Formato
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat', _M('Formato', $module));
        $fields[] = new MSeparator('');
                
        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }

    /**
     * Evendo chamado no botão Imprimir da barra de ferramentas
     **/
    public function btnPrint_click($sender = null)
    {
        $data = $this->getTypesData();
        $options['module'] = $module = SAGU::getFileModule(__FILE__);
        $options['reportName'] = 'teaching';
        if ( strlen($data->professorId) > 0 )
        {
            $options['parameters']['personid'] = $data->professorId;
        }
        if ( strlen($data->entry) > 0 )
        {
            $options['parameters']['entrada'] = $data->entry;
        }
        if ( strlen($data->carimbo) > 0 )
        {
            $options['parameters']['carimbo'] = (String)$data->carimbo;
        }
        if ( strlen($data->reportFormat)>0 )
        {
            $options['fileType'] = $data->reportFormat;
        }
        $sreport = new SReport($options);
        
        if ( !$sreport->generate() )
        {
            $this->addError(_M('Não foi possível gerar o documento.', $module ));
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->professorId = $this->GetFormValue('professorId');
        $data->professorName = $this->GetFormValue('professorName');
        $data->entry = $this->GetFormValue('entry');
        $data->reportFormat = $this->GetFormValue('reportFormat');
        $data->carimbo = $this->GetFormValue('carimbo');        

        return $data;
    }


    /**
     * Altera o valor do campo Data de ingresso na instituição para a data de entrada do professor selecionado
     * 
     * @param stdClass $args
     * @return null
     */
    public function changeEntry($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $busPhysicalPersonProfessor = new BusinessBasicBusPhysicalPersonProfessor();
        $busProfessorCommitment = new BusinessBasicBusProfessorCommitment();
        $professorId = $args->professorId;

        try
        {
            if ( strlen($professorId) <= 0 )
            {
                throw new Exception( _M('Nenhum professor selecionado.', $module) );
            }

            $entranceDate = $busProfessorCommitment->getOldProfessorCommitmentDate($professorId);
            $this->page->addAJAXJsCode(" xGetElementById('entry').value = '{$entranceDate[0][0]}'; ");
        }
        catch (Exception $e)
        {
            $this->AddError( $e->getMessage() );
        }

        return '';
    }
}
?>