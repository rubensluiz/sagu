<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 22/08/2011
 */

class FrmCourseTransferSummary extends SStepByStepForm
{
    public function __construct($steps = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        //Load data
        $allData = $this->getStepData();
        
        $options = array(
            'value' => array(
                _M('Pessoa', $module) => $allData->personId . ' - ' . $allData->personName,
                _M('Contrato', $module) => $allData->contractId,
                _M('Curso', $module) => $allData->courseId . ' - ' . $allData->courseName,
                _M('Turno', $module) => $allData->turnId . ' - ' . $allData->turnDescription,
                _M('Unidade', $module) => $allData->unitId . ' - ' . $allData->unitDescription,
            ),
            'title' => _M('Contrato de origem', $module),
            'columns' => 1,
            'textWidth' => '500px'
        );        
        $fields[] = new SInformationField($options);

        $options = array(
            'value' => array(
                _M('Curso', $module) => $allData->destinationCourseId . ' - ' . $allData->destinationCourseName,
                _M('Turno', $module) => $allData->destinationTurnId . ' - ' . $allData->destinationTurnDescription,
                _M('Unidade', $module) => $allData->destinationUnitId . ' - ' . $allData->destinationUnitDescription,
                _M('Turma', $module) => $allData->destinationClassId . ' - ' . $allData->destinationClassDescription,
            ),
            'title' => _M('Contrato de destino', $module),
            'columns' => 1,
            'textWidth' => '500px'
        );        
        $fields[] = new SInformationField($options);
        
        $filters = new stdClass();
        $filters->personId = $allData->personId;
        $filters->courseId = $allData->destinationCourseId;
        $filters->courseVersion = $allData->destinationCourseVersion;
        $filters->turnId = $allData->destinationTurnId;
        $filters->unitId = $allData->destinationUnitId;
        $filters->isClosed = DB_TRUE;

        $busContract = new BusinessAcademicBusContract();
        $searchContract = $busContract->searchContract($filters);
        
        if( count($searchContract) > 0 )
        {
            $fields[] = MMessage::getStaticMessage('msgAproveitarContratoAntigo', _M('Este aluno possui um contrato inativo para o curso selecionado.'), MMessage::TYPE_INFORMATION);
            $fields[] = new MSelection('aproveitarContratoAntigo', DB_FALSE, _M('Aproveitar contrato inativo?'), array(
                 DB_TRUE => _M('Sim'),
                 DB_FALSE => _M('Não')
            ));
        }
        
        $fields = array_merge($fields, $this->getTransferData());
        
        $fields[] = new MSpacer();
        
        $this->setFields($fields);
    }   
    
    /*
     * Get the transfer data information
     */
    public function getTransferData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $allData = $this->getStepData();
        
        $destinationCourse = new AcdCourseOccurrence();
        $destinationCourse->courseId = $allData->destinationCourseId;
        $destinationCourse->courseVersion = $allData->destinationCourseVersion;
        $destinationCourse->turnId = $allData->destinationTurnId;
        $destinationCourse->unitId = $allData->destinationUnitId;
        
        $options['takeCurriculum'] = $allData->takeCurriculum;
        $options['takeCurriculumLinks'] = $allData->takeCurriculumLinks;
        
        SDatabase::beginTransaction(); //Inicia a transação
        
        $courseTransfer = new AcdCourseTransfer($allData->contractId, $destinationCourse, $allData->destinationClassId, $allData->periodId, $allData->reasonId, $options);
        
        //Matriculas canceladas
        $dataCanceled = AcdCourseTransfer::getCanceledEnrollIds($allData->contractId, $allData->periodId);
        
        
        
        
        try
        {
            $transferData = $courseTransfer->courseTransfer(); //Executa a tranferencia
        }
        catch( Exception $e )
        {
            $this->AddError($e->getMessage());
        }
        
        
        
        
        
                        
        if( count($dataCanceled) > 0 )
        {
            $fields[] = $grid = $MIOLO->getUI()->getGrid($module,'GrdCourseTransferCanceledEnrolls', $data);
            $grid->setTitle(_M('Disciplinas do período que serão canceladas', $module));
            $grid->setClose(false);
            $grid->setData($dataCanceled);
            $fields[] = new MSpacer();
        }
        
        //Disciplinas comuns migradas       
        if( count($transferData->disciplinas) > 0 )
        {
            $fields[] = $grid = $MIOLO->getUI()->getGrid($module,'GrdCourseTransferCanceledEnrolls', $data);
            $grid->setTitle(_M('Disciplinas comuns migradas', $module));
            $grid->setClose(false);
            $grid->setData($transferData->disciplinas);
            $fields[] = new MSpacer();
        }
        
        //Disciplinas equivalentes aproveitadas
        if( count($transferData->vinculos) > 0 )
        {
            $fields[] = $grid = $MIOLO->getUI()->getGrid($module,'GrdCourseTransferCanceledEnrolls', $data);
            $grid->setTitle(_M('Disciplinas equivalentes aproveitadas', $module));
            $grid->setClose(false);
            $grid->setData($transferData->vinculos);
            $fields[] = new MSpacer();
        }

        SDatabase::rollback(); //Volta as alterações
        
        //Títulos migrados        
        if (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES')
        {
            $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
            $busReceivableInvoice->db = $this->db;
            
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $learningPeriod = $busLearningPeriod->getLearningPeriodByContractAndPeriod($allData->contractId, $allData->periodId);
            
            //Grid exibindo os titulos a serem transferidos
            $filters = new StdClass();
            $filters->contractId = $allData->contractId;
            $filters->learningPeriodId = $learningPeriod->learningPeriodId;          
            $filters->isCanceled = SAGU::getParameter('BASIC', 'DB_FALSE');
            $foundInvoices = $busReceivableInvoice->searchReceivableInvoice($filters);
            
            if ( count($foundInvoices) > 0 )
            {
                $fields[] = $grid = $MIOLO->getUI()->getGrid($module,'GrdCourseTransferCanceledInvoices');
                $grid->setTitle(_M('Títulos que serão transferidos', $module));
                $grid->setClose(false);
                $grid->setData($foundInvoices);
            }
        }
        
        return $fields;        
    }
    
    public function finalizeButton_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $data = $this->getStepData();                     
        $destinationCourse = new AcdCourseOccurrence();
        $destinationCourse->courseId = $data->destinationCourseId;
        $destinationCourse->courseVersion = $data->destinationCourseVersion;
        $destinationCourse->turnId = $data->destinationTurnId;
        $destinationCourse->unitId = $data->destinationUnitId;
        
        $options['takeCurriculum'] = $data->takeCurriculum;
        $options['takeCurriculumLinks'] = $data->takeCurriculumLinks;
        $options['aproveitarContratoAntigo'] = $data->aproveitarContratoAntigo;
        
        $courseTransfer = new AcdCourseTransfer($data->contractId, $destinationCourse, $data->destinationClassId, $data->periodId, $data->reasonId ,$options);

        SDatabase::beginTransaction(); //Inicia a transação
        
        try 
        {
            $courseTransfer->courseTransfer(); //Executa a tranferencia            
        }
        catch(Exception $e)
        {
            parent::finalizeButton_click($args);
            
            SDatabase::rollback();
            $MIOLO->error($e->getMessage());
        }
        SDatabase::commit(); //Aplica as alterações
        
        parent::finalizeButton_click($args);
       
        $goto = $MIOLO->getActionURL('academic', 'main:process:courseTransfer');
        SAGU::information(_M('Transferência de curso realizada com sucesso.', $module), $goto);
    }
}
?>