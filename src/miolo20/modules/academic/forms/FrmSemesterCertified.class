<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Course enroll certified form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br] 
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/05/2006
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmSemesterCertified extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Atestado de semestralidade', $module), NULL, NULL);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $fields[] = new MHiddenField('limbo', '');
        
        //field person
        $personLabel  = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setClass('m-caption m-caption-required');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, array('personId' => 'personId'), true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa',$module), 'required');
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson    = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[]     = $hctPerson;

        //field contract       
        $contractLabel = new MText('contractLabel', _M('Contrato',$module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractLabel->setClass('m-caption m-caption-required');
        $contractId    = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'personId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $validators[]  = new MRequiredValidator('contractId', _M('Contrato',$module), 'required');
        $courseId      = new MTextField('courseId', $this->getFormValue('courseId',$this->courseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseId->setReadOnly(true);
        $courseId->setJsHint(_M('Código do curso',$module));
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$this->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Versão do curso',$module));
        $courseName    = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso',$module));
        $hctContract   = new MHContainer('hctContract', array($contractLabel, $contractId, $courseId, $courseVersion, $courseName));
        $hctContract->setShowLabel(true);
        $fields[]      = $hctContract;

        //field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodLabel    = new MText('periodLabel', _M('Período', $module).':');
        $periodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), '', $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $hctPeriod      = new MHContainer('hctPeriod', array($periodLabel, $periodId));
        $fields[] = $hctPeriod;
        
        //Field course semester
        $cursedSemesterLabel = new MText('cursedSemesterLabel', _M('Semestre',$module) . ':');
        $cursedSemesterLabel->setClass('m-caption');
        $cursedSemesterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cursedSemesterCheckBox = new MCheckBox('cursedSemesterCheckBox', 'Yes', '', false, _M(' Trazer do sistema',$module)); 
        $fields[] = new MHContainer('optionSemester', array($cursedSemesterLabel, $cursedSemesterCheckBox));

        //Field number semester
        $numberSemesterLabel    = new MText('numberSemesterLabel', _M('ou', $module));   
        $numberSemesterLabel->setClass('m-caption');
        $numberSemesterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $numberSemester   = new MTextField('numberSemester', '', '', 5, _M("Informe o semestre manualmente caso não selecionada opção 'Trazer do sistema', ex. 2"));
        $numberSemester->setJsHint(_M('Informe o número de semestres', $module));
        $fields[] = new MHContainer('fieldOption', array($numberSemesterLabel, $numberSemester));

        //Field stamp label
        $stampLabel          = new MText('stampLabel', _M('Carimbo', $module) . ':');
        $stampLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        
        //Field employee
        $employeeId         = new MLookupTextField('employeeId', $this->getFormValue('employeeId', $this->employeeId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('employeeId', 'employeeName', 'functionDescription', 'sector'), 'basic', 'Stamp', null, null, true);
        $employeeId->setJsHint(_M('Informe o código do funcionário', $module));
        $employeeName = new MTextField('employeeName', $this->getFormValue('employeeName', $data->employeeName), null, 20);
        $employeeName->setJsHint(_M('Nome do funcionário', $module));
        $employeeName->setReadOnly(true);
        
        //Field function
        $functionDescription = new MTextField('functionDescription', $this->getFormValue('functionDescription', $data->functionDescription), null, 20);
        $functionDescription->setJsHint(_M('Função do funcionário', $module));
        $functionDescription->setReadOnly(true);
        
        //Field function
        $sector = new MTextField('sector', $this->getFormValue('sector', $data->sector), null, 20);
        $sector->setJsHint(_M('Setor do funcionário', $module));
        $sector->setReadOnly(true);
        $hctStamp = new MHContainer('hctStamp', array($stampLabel, $employeeId, $employeeName, $functionDescription, $sector));
        $hctStamp->setShowLabel(false);
        $fields[] = $hctStamp;

        //Field sector
        $sectorLabel = new MText('sectorLabel', _M('Setor', $module).':');
        $sectorLabel->setClass('m-caption m-caption-required');
        $sectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sectorId     = new MLookupTextField('sectorId', $this->getFormValue('sectorId', $data->sectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sectorName', 'basic', 'Sector', null, null, true);
        $sectorId->setJsHint(_M('Informe o código do setor', $module));
        $validators[] = new MIntegerValidator('sectorId', _M('Setor', $module), 'required');
        $sectorName   = new MTextField('sectorName', $this->getFormValue('sectorName', $data->sectorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sectorName->setJsHint(_M('Descrição do setor', $module));
        $sectorName->setReadOnly(true);
        $hctSector = new MHContainer('hctSector', array($sectorLabel, $sectorId, $sectorName));
        $hctSector->setShowLabel(true);
        $fields[]  = $hctSector;

        //Field rad option certified type
        $opts[] = new MOption('optGraduation', 'G', _M('Graduação', $module), true);
        $opts[] = new MOption('optTechnician', 'T', _M('Técnico', $module), false);
        $radOptionLabel = new MText('radOptionLabel', _M('Tipo de atestado', $module) . ':');
        $radOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radOption = new MRadioButtonGroup('radOption', '', $opts, $this->getFormValue('radOption', $this->radOption->value), '', 'vertical');
        $radOption->setShowLabel(false);
        $hctOption = new MHContainer('hctOption', array($radOptionLabel, $radOption));
        $hctOption->setShowLabel(false);
        $fields[]  = $hctOption;

        unset($opts);
        
        //Field rad option YES or NOT
        $opts[] = new MOption('optNo', 'N', _M('Não', $module), true);
        $opts[] = new MOption('optYes', 'Y', _M('Sim', $module), false);
        $radOption2Label = new MText('radOptionLabel', _M('Descrição das disciplinas cursadas no semestre', $module) . ':');
        $radOption2Label->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radOption2 = new MRadioButtonGroup('radOption2', '', $opts, 2, '', 'horizontal', '');
        $hctOption = new MHContainer('hctOption', array($radOption2Label, $radOption2));
        $hctOption->setShowLabel(false);
        $fields[]  = $hctOption;

        unset($opts);
        
        //Field file type
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType', 'pdf'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        //Field emission date
        $emissionDate = new MCalendarField('emissionDate', strlen($this->getFormValue('emissionDate'))>0 ? $this->getFormValue('emissionDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data de emissão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão', $module));
        $validators[] = new DateDMYValidator('emissionDate', null, 'required');
        $fields[]     = $emissionDate;

        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);        
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->enableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $cd->contractId              = MIOLO::_request('contractId');
        $cd->periodId                = MIOLO::_request('periodId');
        $cd->personId                = MIOLO::_request('personId');
        $cd->courseId                = MIOLO::_request('courseId');
        $cd->courseVersion           = MIOLO::_request('courseVersion');
        $cd->fileType                = MIOLO::_request('radFileType');
        $cd->certifiedType           = MIOLO::_request('radOption');
        $cd->curricularComponentType = MIOLO::_request('radOption2');
        $cd->cursedSemesterCheckBox  = MIOLO::_request('cursedSemesterCheckBox');
        $cd->stampName               = MIOLO::_request('employeeName');
        $cd->functionDescription     = MIOLO::_request('functionDescription');
        $cd->sector                  = MIOLO::_request('sector');
        $cd->sectorDocument          = MIOLO::_request('sectorName');
        $cd->emissionDate            = MIOLO::_request('emissionDate');
        $cd->ignoreDebits            = MIOLO::_request('ignoreDebits');
        $cd->semester                = MIOLO::_request('numberSemester');

        $havePermission = false;
        
        if ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') && (strtoupper(SAGU::getParameter('BASIC', 'WARNING_IF_DEFAULTER')) == 'TRUE') )
        {
            if ( $cd->ignoreDebits != 'yes' )
            {
                $business = new BusinessFinanceBusGeneralQueries();
                $businessContract = new BusinessAcademicBusContract();

                $debt = $business->getDefaulterDebt($cd->contractId, false);
                $debt = strlen($debt) > 0 ? $debt : 0;
    
                //Verifica se o aluno possui débitos financeiros
                if ( $debt > 0 )
                {
                    $this->addError(_M('O sistema detectou uma dívida com a instituição. Por favor, verifique com o setor financeiro.', $module));
                    
                    $contract     = $businessContract->getContract($cd->contractId);
                    $matricula = new Matricula($cd->contractId, Matricula::MATRICULA_NORMAL);
                    $enrollConfig = $matricula->obterConfiguracoes();
                    
                    if ( $MIOLO->checkAccess('FrmSemesterCertified', A_ADMIN, false, true) || $enrollConfig->blockDebt == DB_FALSE)
                    {
                        $this->addField(new MHiddenField('ignoreDebits','yes'));
                        
                        $this->addError(_M('Se desejar continuar mesmo assim, clique no botão "Imprimir" abaixo.', $module));
                    }
                }
                else 
                {
                    $havePermission = true;
                }
            }
            else 
            {
                $havePermission = true;
            }
        }
        else 
        {
            $havePermission = true;
        }

        if ( $havePermission )
        {
            try 
            {    
    
                //verificar se é um aluno ouvinte(daí deve aparecer um erro)
                $businessContract = new BusinessAcademicBusContract();
                $contract         = $businessContract->getContract($cd->contractId);
                
                $busStateContract = new BusinessAcademicBusStateContract();
                $stateContractId = $busStateContract->getCurrentStateContractId($cd->contractId);
                
                if ( $stateContractId != SAGU::getParameter('basic', 'STATE_CONTRACT_ID_ENROLLED') )
                {
                    throw new Exception(_M('Aluno não está matrículado', $module) . '!');
                }
    
                if ( $contract->isListener == DB_TRUE )
                {
                    throw new Exception(_M('Este é um aluno ouvinte', $module) . '!');
                }
                else
                {
                    //pega os dados da instituicao
                    $businessCompany = new BusinessBasicBusCompany();
                    $company         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
    
                    $businessLegalPerson = new BusinessBasicBusLegalPerson();
                    $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);
    
                    $businessCity = new BusinessBasicBusCity();
                    $city         = $businessCity->getCity($legalPerson->cityId);
    
                    //pega os dados do aluno
                    $businessPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                    $physicalPerson         = $businessPhysicalPerson->getPhysicalPerson($cd->personId);
                    //pega a sequencia de atestados
                    $cd->dateIssue       = $cd->emissionDate;
                    $cd->certifiedTypeId = SAGU::getParameter('ACADEMIC', 'CERTIFIED_SEMESTER');
    
                    $businessCertified = new BusinessAcademicBusCertified();
                    $certifiedNumber   = $businessCertified->getSequence($cd);
    
                    $MIOLO->uses('/core/AgataAPI.class');
    
                    $api = new AgataAPI;
                   
                    $api->setParameter('$certifiedNumber', $certifiedNumber);
                    if ( $cd->certifiedType == 'G' )
                    {
                        $api->setParameter('$departament', $cd->sectorDocument);
                    }
                    elseif ( $cd->certifiedType == 'T' )
                    {
                        $api->setParameter('$departament', $cd->sectorDocument);
                    }
                    $api->setParameter('$institution', $legalPerson->name);
                    $api->setParameter('$personId', $physicalPerson->personId);
                    $api->setParameter('$name', $physicalPerson->name);
                    $api->setParameter('$companyName', $company->companyTypeDescription . ' ' . $legalPerson->fakeName);
                    $api->setParameter('$courseName', $contract->courseName);
                    $api->setParameter('$periodId', $cd->periodId);
                    $api->setParameter('$cityName', SAGU::getCapitulatetString($city->name));
                    $api->setParameter('$stateId', $city->stateId);
                    $api->setParameter('$stampName', SAGU::getCapitulatetString($cd->stampName));
                    $api->setParameter('$functionDescription', SAGU::getCapitulatetString($cd->functionDescription));
                    $api->setParameter('$sector', SAGU::getCapitulatetString($cd->sector));
                    $api->setParameter('$emissionDate', SAGU::getDateByExtense($cd->emissionDate));                    
                    
                    if ( is_null($cd->cursedSemesterCheckBox) && strlen($cd->semester) == 0 )
                    {
                        throw new Exception(_M('Semestre não informado', $module) . '!');
                    }
                    
                    if ( strlen($cd->semester) > 0 )
                    {
                        $api->setParameter('$semester', $cd->semester);
                    }
                    else
                    {
                        $busPeriod = new BusinessAcademicBusPeriod();
                        $semester = $busPeriod->getCurrentSemester($cd->contractId);
                        $api->setParameter('$semester', $semester[0][0]);
                    }
    
                    $api->setLanguage($MIOLO->getConf('i18n.language'));
                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.sxw');
                    $api->setDataArray($null);
    
                    $businessTurns = new BusinessBasicBusTurn();
                    $businessSchedule = new BusinessAcademicBusSchedule();
                    $businessEnroll = new BusinessAcademicBusEnroll();
                    $data           = $businessEnroll->getCurricularComponentsEnrolled($cd->contractId, $cd->periodId);
    
                     if ( $cd->curricularComponentType == 'N' )
                     {
                        $contractResource = 'semesterCertifiedNo.sxw';
                     }
                     elseif ( $cd->curricularComponentType == 'Y' ) 
                     {
                        $contractResource = 'semesterCertifiedYes.sxw';
    
                        if ( count($data) > 0 )
                        {
                            $lb = "\<text:line-break/\>";
                            foreach ( $data AS $index => $curricular )
                            {
                                $curricularComponent[$index][] = $curricular[0]; //courseId
                                $curricularComponent[$index][] = $curricular[1]; //courseVersion
                                $curricularComponent[$index][] = $curricular[2]; //courseName
                                $curricularComponent[$index][] = $curricular[3]; //curricularComponentId
                                $curricularComponent[$index][] = $curricular[4]; //curricularComponentVersion
                                $curricularComponent[$index][] = $curricular[5]; //curricularComponentName
                                $curricularComponent[$index][] = $curricular[6]; //academicCredits
                                $curricularComponent[$index][] = $curricular[7]; //academicNumberHours
                                
                                $infoWeekDay = $businessSchedule->getGroupWeekDays($curricular[8]);
                                ksort($infoWeekDay);
                                
                                $curricularComponent[$index][] = str_replace(',', "\<text:line-break/\>", implode(',', $infoWeekDay));
        
                                $infoTurns = $businessSchedule->getGroupTurns($curricular[8]);
                                ksort($infoTurns);
                                
                                for ( $count = 0; $count < count($infoTurns); $count++ )
                                {
                                    $turn = $businessTurns->getTurn($infoTurns[$count]);
                                    if ( $infoTurns[$count + 1] != 0 )
                                    {
                                        $allTurns .= $turn->description . $lb;
                                    }
                                    else 
                                    {
                                        $allTurns .= $turn->description;
                                    }
                                }
                                
                                $curricularComponent[$index][] = $allTurns;
                                unset($allTurns);
                            }
                            
                            $array[0][1] = $curricularComponent;
                            $api->setSubDataArray($array);
                        }
                        else 
                        {
                            throw new Exception(_M('Este aluno não está matriculado no período selecionado', $module));
                        }
                    }
                    
                    $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/') . $contractResource);
    
                    if ( $ok && $cd->fileType == 'pdf' )
                    {
                        $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.pdf');
                        $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.sxw');
                    }
    
                    //se não conseguiu gerar o arquivo
                    if ( !$ok )
                    {
                        throw new Exception(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                    }
                    else
                    {
                        //insere a sequencia nos atestados
                        $ok = $businessCertified->insertCertified($cd);
    
                        //se inseriu o registro
                        if ( $ok )
                        {
                            $api->fileDialog();
                        }
                    }
                }
            }
            catch ( Exception $e )
            {
                $this->addError($e->getMessage());
            }
        }
    }
}

?>
