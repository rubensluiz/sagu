<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Enroll form
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 **/

MIOLO::Import('extensions::cpaint.inc.php','cpaint');

/**
 * Form to manipulate a enroll
 **/
class FrmEnroll extends MForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        
        $this->home   = $data->home;

        parent::__construct(_M('Atualizar', $module));

        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        if (($f = $this->page->request('cpaint_function')) != "")
        {
            $this->manager->getTheme()->clearContent();
            $this->$f($this->page->request('cpaint_argument'));
            $this->page->generateMethod = 'generateAJAX';
        }
        else
        {
            $this->defineFields();
            $this->eventHandler();
        }
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $enrollId = MIOLO::_request('enrollId');
        $personId = MIOLO::_request('personId');
        $periodId = MIOLO::_request('periodId');
        
        if (strlen($enrollId) > 0)
        {
            try
            {
                $business = new BusinessAcademicBusEnroll();
                $data     = $business->getEnroll($enrollId, true);

                $businessContract = new BusinessAcademicBusContract();
                $contract         = $businessContract->getContract($data->contractId);

                $busCurriculum  = new BusinessAcademicBusCurriculum();
                $dataCurriculum = $busCurriculum->getCurriculum($data->curriculumId, true);
                
                $busCurricularComponent  = new BusinessAcademicBusCurricularComponent();
                $dataCurricularComponent = $busCurricularComponent->getCurricularComponent($dataCurriculum->curricularComponentId, $dataCurriculum->curricularComponentVersion);
                
                $busUnit  = new BusinessBasicBusUnit();
                $dataUnit = $busUnit->getUnit($contract->unitId);
                
                $busTurn  = new BusinessBasicBusTurn();
                $dataTurn = $busTurn->getTurn($contract->turnId);
                
                $busLearningPeriod   = new BusinessAcademicBusLearningPeriod();
                
                $busExploitation = new BusinessAcademicBusExploitation();
                $aproveitamento = $busExploitation->getEnrollExploitationData($enrollId);
                
                if($aproveitamento[0][7])
                {
                    foreach($aproveitamento as $k => $curriculo)
                    {
                        $curriculos[] = $busCurriculum->getCurriculum($curriculo[7]);

                        $curriculoName .= $curriculos[$k]->curricularComponentName.', ';
                    }

                    $curriculoName = substr($curriculoName, 0, strlen($curriculoName)-2);
                    $curriculoName = ' ('. $curriculoName . ') ';
                }
                
                if (strlen($data->groupId) > 0)
                {
                    $busGroup            = new BusinessAcademicBusGroup();
                    $dataGroup           = $busGroup->getGroup($data->groupId);
                    $dataCurriculumGroup = $busCurriculum->getCurriculum($dataGroup->curriculumId, true);
                                        
                    $dataLearningPeriod  = $busLearningPeriod->getLearningPeriod($dataGroup->learningPeriodId);
                    
                    $busClass  = new BusinessAcademicBusClass();
                    $dataClass = $busClass->getClass($dataGroup->classId);
                }
                else
                {
                    $dataLearningPeriod  = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);
                }
            }
            catch (Exception $e)
            {
                 $this->addError(_M('Erro obtendo dados do formulário. ', $module) . $e->getMessage());   
            }            
            
            $headerFields = array();
            //Campos do cabeçalho
            $pupilLabel = new MText('pupilLabel', _M('Aluno', $module) . ':');
            $pupilLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            
            $pupilPerson = new MTextLabel('pupilPersonId', $contract->personId . ' - ' . $contract->personName, '');
            
            $hctPupil = new MHContainer('hctPupil', array($pupilLabel, $pupilPerson));
            $hctPupil->setShowLabel(true);
            $headerFields[] = $hctPupil;
            
            $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
            $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            
            // Ignorar multiunidade
            $fields[] = new SHiddenField('ignorarUnidade', DB_TRUE);
            
            $contractId = new MTextLabel('contractIdL', $contract->contractId, '');
            $fields[]   = new MHiddenField('contractId', $contract->contractId);
            
            $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
            $course      = new MTextLabel('course', $contract->courseId . '/' . $contract->courseVersion . ' - ' . $contract->courseName, '');

            $unitLabel = new MText('unitLabel', _M('Unidade', $module) . ':');
            $unit      = new MTextLabel('unit', $dataUnit->description, '');
            
            $turnLabel = new MText('turnLabel', _M('Turno', $module) . ':');
            $turn      = new MTextLabel('turn', $dataTurn->description, '');
            
            $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $courseLabel, $course, $unitLabel, $unit, $turnLabel, $turn));
            $hctContract->setShowLabel(true);
            $headerFields[] = $hctContract;
            
            $curriculumLabel = new MText('curriculumLabel', _M('Disciplina do currículo', $module) . ':');
            $curriculumLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $fields[]        = new MHiddenField('curriculumId', $data->curriculumId);
            
            $curricularComponentText = $dataCurriculum->curricularComponentId . '/' . $dataCurriculum->curricularComponentVersion . ' - ' . $dataCurriculum->curricularComponentName .  $curriculoName ; 
            $curricularComponent     = new MTextLabel('curricularComponent', $curricularComponentText, '');
            
            $numberHoursLabel = new MText('numberHoursLabel', _M('Carga horária', $module). ':');
            $numberHours      = new MTextLabel('numberHours', $dataCurricularComponent->academicNumberHours, '');
            
            $creditsLabel = new MText('creditsLabel', _M('Créditos', $module) . ':');
            $credits      = new MTextLabel('credits', $dataCurricularComponent->academicCredits, '');
            
            $hctCurriculum = new MHContainer('hctCurriculum', array($curriculumLabel, $curricularComponent, $numberHoursLabel, $numberHours, $creditsLabel, $credits));
            $hctCurriculum->setShowLabel(true);
            $headerFields[] = $hctCurriculum;
            
            if (strtoupper($data->isExploitation) == strtoupper(DB_FALSE))
            {
                $groupLabel = new MText('groupLabel', _M('Disciplina cursada', $module) . ':');
                $groupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                
                $groupCurrCompText = $dataCurriculumGroup->curricularComponentId . '/' . $dataCurriculumGroup->curricularComponentVersion . ' - ' . $dataCurriculumGroup->curricularComponentName; 
                $groupCurrCompName = new MTextLabel('groupCurrCompName', $groupCurrCompText, '');
                
                $groupIdLabel = new MText('groupIdLabel', _M('Disciplina oferecida', $module) . ':');
                $groupId      = new MTextLabel('groupIdL', $dataGroup->groupId, '');
                $fields[]     = new MHiddenField('groupId', $dataGroup->groupId);
                
                $groupPeriodIdLabel = new MText('groupPeriodIdLabel', _M('Período', $module) . ':');
                $groupPeriodId      = new MTextLabel('groupPeriodId', $dataLearningPeriod->periodId, '');
                
                $dateEnrollLabel = new MText('dateEnroll', _M('Data da matrícula', $module) . ':');
                $dateEnroll      = new MTextLabel('dateEnrollT', $data->dateEnroll . ' ' . $data->hourEnroll, '');
                $fields[]        = new MHiddenField('dateEnroll', $data->dateEnroll);
                $fields[]        = new MHiddenField('hourEnroll', $data->hourEnroll);
                
                $hctGroup = new MHContainer('hctGroup', array($groupLabel, $groupCurrCompName, $groupIdLabel, $groupId, $groupPeriodIdLabel, $groupPeriodId, $dateEnrollLabel, $dateEnroll));
                $hctGroup->setShowLabel(true);
                $headerFields[] = $hctGroup;
                
                $classLabel = new MText('classLabel', _M('Turma da oferecida', $module) . ':');
                $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                
                $gClassName = new MTextLabel('gClassName', $dataClass->classId . ' - ' . $dataClass->className_, '');
                
                $hctClass = new MHContainer('hctClass', array($classLabel, $gClassName));
                $hctClass->setShowLabel(true);
                $headerFields[] = $hctClass;
            }
            else
            {
                $periodIdLabel = new MText('periodIdLabel', _M('Período', $module) . ':');
                $periodIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $periodIdText = new MTextLabel('periodIdText', $dataLearningPeriod->periodId, '');
                
                $hctPeriod = new MHContainer('hctPeriod', array($periodIdLabel, $periodIdText));
                $hctPeriod->setShowLabel(true);
                $headerFields[] = $hctPeriod;
            }
            
            $bgHeader = new MBaseGroup('bsgHeader', '', $headerFields, 'vertical', 'css');
            $bgHeader->setWidth('99%');
            $fields[] = $bgHeader;
            
            //Botões
            $buttonEnroll = new MButton('button_1', _M('Matrícula', $module), 'getEnrollData(1)');
            $buttonEnroll->setClass('s-tabform-default');
            $buttons[] = $buttonEnroll;
            
            if (strtoupper($data->isExploitation) == strtoupper(DB_FALSE))
            {
                $buttonSchedules = new MButton('button_2', _M('Horários', $module), 'getEnrollData(2)');
                $buttonSchedules->setClass('s-tabform-default');
                $buttons[] = $buttonSchedules;
                
                $buttonGrades = new MButton('button_3', _M('Notas', $module), 'getEnrollData(3)');
                $buttonGrades->setClass('s-tabform-default');
                $buttons[] = $buttonGrades;
            }
            
            $buttons[] = new MDiv('divLoading');
            
            $cntButtons = new MHContainer('cntButtons', $buttons);
            $fields[]   = $cntButtons;
             
            $separator = new MSeparator('<hr>');
            $separator->setWidth('99%');
            $fields[]  = $separator;
            
            $divData  = new MDiv('divData');
            $fields[] = $divData;
            
            $bsgPage = new MBaseGroup('bsgPage', '', array($cntButtons, $separator, $divData), 'vertical', 'css');
            $bsgPage->setWidth('99%');
            
            $fields[] = new MHiddenField('currentUrl', str_replace('&amp;', '&', $MIOLO->getCurrentURL()));
            $fields[] = new MHiddenField('enrollId', $data->enrollId);
            $fields[] = new MHiddenField('periodId', $periodId);
            $fields[] = new MHiddenField('personId', $personId);
            $fields[] = new MHiddenField('selected_tab', 1);
        }
        
        $this->setFields($fields);
        $this->setLabelWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $this->setShowPostButton(false);
        $this->setClose($MIOLO->getActionURL($module, 'main:diverseConsultation', null, array('personId'=>$contract->personId, 'periodId'=>$periodId)));
        $this->addStyleFile('m_grids.css');
        $this->addStyleFile('s_tabforms.css');
        $MIOLO->getRequiredJS4Ajax();  
        $this->page->addScript('m_lookup_ajax.js');
        $this->page->addScript(SAGU::ABSOLUTE_URL_JS_FILES . 'sagu.js');
        $this->page->addScript('enroll.js', $module);
        $this->page->addJsCode('getEnrollData(1)');
        
        $msg = _M('Informe um valor numérico e use "." (ponto) como separador decimal.', $module);
        
        $statusIdApproved       = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED');
        $statusIdDisapproved    = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DISAPPROVED');
        $statusIdFrqDisapproved = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DISAPPROVED_FOR_LACKS');
        
        $jsCode = 
<<< HERE
        function isNumeric(control)
        {
            return (! isNaN(parseFloat(control.value))) && (parseFloat(control.value) == control.value)
        }
        
        function noteChanged(average, finalAverage)
        {
            var noteField = document.getElementById('note');
            
            if ( noteField.value.length > 0)
            {
                if ( isNumeric(noteField) )
                {
                    var examField = document.getElementById('examNote');
                    
                    var finalNoteField = document.getElementById('finalNote');
                    
                    if ( examField.value.length > 0 )
                    {
                        if ( isNumeric(examField) )
                        {
                            finalNoteField.value = Math.round(((parseFloat(noteField.value) + parseFloat(examField.value)) / 2) * 100) / 100;
                            finalNoteChanged(finalAverage);
                        }
                        else
                        {
                            alert('{$msg}');
                        }
                    }
                    else
                    {
                        if ( parseFloat(noteField.value) >= parseFloat(average) )
                        {
                            finalNoteField.value = noteField.value;
                            finalNoteChanged(finalAverage);
                        }
                    }
                }
                else
                {
                    alert('{$msg}');
                }
            }
        }
        
        function examNoteChanged(average)
        {
            var examField = document.getElementById('examNote');
            
            if (examField.value.length > 0)
            {
                if (isNumeric(examField))
                {
                    var noteField = document.getElementById('note');
                    
                    var finalNoteField = document.getElementById('finalNote');
                    
                    if (noteField.value.length > 0)
                    {
                        if (isNumeric(noteField))
                        {
                            finalNoteField.value = Math.round(((parseFloat(noteField.value) + parseFloat(examField.value)) / 2) * 100) / 100;
                            finalNoteChanged(average);
                        }
                        else
                        {
                            alert('{$msg}');
                        }
                    }
                }
                else
                {
                    alert('{$msg}');
                }
            }
        }
        
        function finalNoteChanged(average)
        {
            var finalNoteField = document.getElementById('finalNote');
            
            var statusIdField = document.getElementById('statusId');
            var statusIdSel   = document.getElementById('statusId_sel');
            
            if (finalNoteField.value.length > 0)
            {
                if (isNumeric(finalNoteField))
                {
                    if (parseFloat(finalNoteField.value) >= parseFloat(average))
                    {
                        statusIdField.value = '{$statusIdApproved}';
                    }
                    else
                    {
                        statusIdField.value = '{$statusIdDisapproved}';
                    }
                    
                    statusIdSel.value = statusIdField.value;
                }
                else
                {
                    alert('{$msg}');
                }
            }
        }
        
        function frequencyChanged(minFreq)
        {
            var frequencyField = document.getElementById('frequency');
            
            var statusIdField = document.getElementById('statusId');
            var statusIdSel   = document.getElementById('statusId_sel');
            
            if (frequencyField.value.length > 0)
            {
                if (isNumeric(frequencyField))
                {
                    if (parseFloat(frequencyField.value) < parseFloat(minFreq))
                    {
                        statusIdField.value = '{$statusIdFrqDisapproved}';
                        statusIdSel.value   = statusIdField.value;
                    }
                }
                else
                {
                    alert('{$msg}');
                }
            }
        }
HERE;
        $this->page->addJSCode($jsCode);
    }

    public function getEnrollData($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $isAdmin = $MIOLO->CheckAccess('FrmDiverseConsultationAcademic', A_ADMIN, false);
        
        $args = explode(',', $args[0]);
        
        $enrollId = $args[0];
        $option   = $args[1];
        
        try 
        {
            $business = new BusinessAcademicBusEnroll();
            $data     = $business->getEnroll($enrollId, true);
            
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            
            if (strlen($data->groupId) > 0)
            {
                $busGroup = new BusinessAcademicBusGroup();
                $dataGroup = $busGroup->getGroup($data->groupId);
                $dataLearningPeriod = $busLearningPeriod->getLearningPeriod($dataGroup->learningPeriodId);
            }
            else 
            {
                 $dataLearningPeriod = $busLearningPeriod->getLearningPeriod($data->learningPeriodId);   
            }            
            
            $busDiverseConsultation    = new BusinessAcademicBusDiverseConsultation();
            $busSchedule               = new BusinessAcademicBusSchedule();
            $busFrequenceEnroll        = new BusinessAcademicBusFrequenceEnroll();
            $busContract               = new BusinessAcademicBusContract();
            $busEnrollConfig           = new BusinessAcademicBusEnrollConfig();
            $busGradeTyping               = new BusinessAcademicBusGradeTyping();
            $busDegreeEnroll           = new BusinessAcademicBusDegreeEnroll();
            
            $contractData = $busContract->getContract($data->contractId);
            
            $enrollConfig = $busEnrollConfig->getCourseEnrollConfig($contractData->courseId, $contractData->courseVersion, $contractData->turnId, $contractData->unitId); 
        }
        catch (Exception $e)
        {
            $this->addError(_M('Erro obtendo dados da matrícula. ', $module) . $e->getMessage());
        }
        
        unset($fields);

        if ( !$isAdmin )
        {
            $fields[] = MMessage::getStaticMessage('msgInfo', _M("Você não tem permissão de ADMINISTRADOR nas Consultas Diversas para poder editar a matrícula do aluno.", $module), MMessage::TYPE_WARNING);
        }
        
        switch ($option)
        {
            case 1:
                if (strtoupper($data->isExploitation) == strtoupper(DB_FALSE))
                {
                    $fields[] = new MHiddenField('note', $data->note);
                    $fields[] = new MHiddenField('examNote', $data->examNote);
                    $fields[] = new MHiddenField('finalNote', $data->finalNote);
                    $fields[] = new MHiddenField('concept', $data->concept);

                    // Hidden fields para lookup - ajustado para ignorar multiunidade - ticket #38014
                    $fields[] = new SHiddenField('limbo', NULL);
                    $fields[] = new SHiddenField('curricularComponentIdMy', NULL);
                    $fields[] = new SHiddenField('curricularComponentVersionMy', NULL);
        
                    // Permite editar curriculo e disciplina
                    if ( SAGU::getParameter('ACADEMIC', 'ENROLL_EDIT_CURRICULUM') == DB_TRUE )
                    {
                        // Disciplina do currículo
                        $fields[] = $lkp = new SLookupContainer('curriculumIdMy', $data->curriculumId, array(
                            'module' => 'academic',
                            'item' => 'Curriculum',
                            'label' => _M('Disciplina do currículo', $module),
                            'filter' => array(
                                'curriculumId' => 'curriculumIdMy',
                                'ignorarUnidade' => 'ignorarUnidade'),
                            'related' => array('limbo', 'limbo', 'limbo', 'curricularComponentIdMy', 'curricularComponentVersionMy', 'curriculumIdMyDescription')
                            )
                        );
                        
                        // Disciplina oferecida
                        $fields[] = $lkp = new SLookupContainer('groupIdMy', $data->groupId, array(
                            'module' => 'academic',
                            'item' => 'Group',
                            'label' => _M('Disciplina cursada (oferecida)', $module),
                            'filter' => array(
                                'groupId' => 'groupIdMy',
                                'curricularComponentId' => 'curricularComponentIdMy',
                                'curricularComponentVersion' => 'curricularComponentVersionMy',
                                'ignorarUnidade' => 'ignorarUnidade'
                             )
                        ));
                    }
                    
                    $textEvaluationLabel = new MText('textEvaluationLabel', _M('Avaliação escrita', $module) . ':');
                    $textEvaluationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    
                    $textEvaluation = new MMultiLineField('textEvaluation', $data->textEvaluation, '', null, 5, 30);
                    $textEvaluation->setJsHint(_M('Informe aqui o texto da avaliação', $module));
                    $fields[]     = new MHContainer('hctTextEvaluation', array($textEvaluationLabel, $textEvaluation));
        
                    $frequencyLabel = new MText('frequencyLabel', _M('Frequência', $module) . ':');
                    $frequencyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    
                    $frequency = new MTextField('frequency', $data->frequency, '', 8, 'horas');
                    $frequency->setJsHint(_M('Informe aqui a frequência', $module));
                    $frequency->addAttribute('onChange', 'frequencyChanged(' . $dataLearningPeriod->minimumFrequency . ')');
                    $fields[]     = new MHContainer('hctFrequency', array($frequencyLabel, $frequency));
                    
                    $frequencyAlertLabel = new MText('frequencyAlertLabel', _M('E-mail de alerta de frequência', $module) . ':');
                    $frequencyAlertLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    
                    $frequencyAlertData = array('0'=>_M('Não foi informado', $module),
                                                '1'=>_M('Foi informado que está próximo do limite de faltas', $module),
                                                '2'=>_M('Foi informado sobre o limite de faltas', $module));
        
                    $frequencyAlertEmail = new MSelection('frequencyAlertEmail', $data->frequencyAlertEmail, '', $frequencyAlertData);
                    $frequencyAlertEmail->setJsHint(_M('Informe aqui o e-mail de alerta de frequência', $module));
                    $fields[]     = new MHContainer('hctFrequencyAlertEmail', array($frequencyAlertLabel, $frequencyAlertEmail));
                    
                    
                }
                else
                {
                    try
                    {
                        $busExploitation  = new BusinessAcademicBusExploitation();
                        $dataExploitation = $busExploitation->getEnrollExploitationData($enrollId);
                        
                        $dataExploitationSummary = $busExploitation->getEnrollExploitationSummary($enrollId);
                    }
                    catch (Exception $e)
                    {
                        $this->addError(_M('Erro ao buscar dados de aproveitamento. ', $module) . $e->getMessage());
                    }
                    
                    //$fields[] = new MHiddenField('statusId', $data->statusId);
                    
                    $fields[] = new MSeparator();
                    
                    $gridFilters->home     = $action;
                    $gridFilters->readOnly = false;                    
                    
                    $gridExploitations = $MIOLO->getUI()->getGrid($module, 'GrdExploitationSearch', $gridFilters);
                    $gridExploitations->setData($dataExploitation);
                    $gridExploitations->setTitle(_M('Disciplinas aproveitadas', $module));
                    $gridExploitations->setClose(null);
                    $gridExploitations->setFooter(_M('Carga horária aproveitada', $module) . ': <b>' . $dataExploitationSummary->exploitedNumberHours . '</b> - ' . _M('Carga horária restante', $module) . ': <b>' . $dataExploitationSummary->remainingNumberHours . '</b>');
                    
                    if (count($gridExploitations->columns) > 0)
                    {
                        foreach ($gridExploitations->columns as $column)
                        {
                            $column->order = false;
                        }
                    }
                    
                    $fields[] = new MDiv('divExploitations', array($gridExploitations));
                    
                    $fields[] = new MSeparator();
                }

                $statusLabel = new MText('statusLabel', _M('Código do estado', $module) . ':');
                $statusLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    
                $busEnrollStatus = new BusinessAcademicBusEnrollStatus();
                $statusId = new MComboBox('statusId', $data->statusId, '', $busEnrollStatus->listEnrollStatus() );
                $statusId->setJsHint(_M('Informe aqui o estado', $module));
                $fields[] = new MHContainer('hctStatus', array($statusLabel, $statusId));
                
                // Estado detalhado
                $list = AcdDetailedEnrollStatus::listRecords();
                $detStatusId = new MComboBox('detailEnrollStatusId', $data->detailEnrollStatusId, _M('Estado detalhado', $module), $list);
                $detStatusId->setJsHint(_M('Informe aqui o estado', $module));
                $fields[] = $detStatusId;
                
                $complementLabel = new MText('complementLabel', _M('Complemento', $module) . ':');
                $complementLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                
                $complement = new MMultiLineField('complement', $data->complement, '', null, 5, 30);
                $complement->setJsHint(_M('Informe aqui o complemento', $module));
                $fields[]     = new MHContainer('hctComplement', array($complementLabel, $complement));
        
                $radiosOptions = SAGU::listYesNo('1');
                    
                $isShowDocumentEndCourseLabel = new MText('isShowDocumentEndCourseLabel', _M('É mostrado no documento final de curso?', $module));
                $isShowDocumentEndCourseLabel->setClass('m-caption m-caption-required');
                $isShowDocumentEndCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    
                $isShowDocumentEndCourse = $data->isShowDocumentEndCourse ? $data->isShowDocumentEndCourse : DB_TRUE;
                $isShowDocumentEndCourse = new MRadioButtonGroup('isShowDocumentEndCourse', '', $radiosOptions , $isShowDocumentEndCourse, null, 'horizontal');
                $isShowDocumentEndCourse->SetShowLabel(false);
                    
                $hctIsShowDocumentEndCourse = new MHContainer('hctIsShowDocumentEndCourse', array($isShowDocumentEndCourseLabel, $isShowDocumentEndCourse));
                $fields[]                   = $hctIsShowDocumentEndCourse;
                    
                $isInternetLabel = new MText('isInternetLabel', _M('É via internet', $module) . '?');
                $isInternetLabel->setClass('m-caption m-caption-required');
                $isInternetLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    
                $isInternet = $data->isInternet ? $data->isInternet : DB_FALSE;
                $isInternet = new MRadioButtonGroup('isInternet', '', $radiosOptions , $isInternet, null, 'horizontal');
                $isInternet->SetShowLabel(false);
                    
                $hctIsInternet = new MHContainer('hctIsInternet', array($isInternetLabel, $isInternet));
                $fields[]      = $hctIsInternet;
                    
                $isConfirmLabel = new MText('isConfirmLabel', _M('Está confirmada', $module) . '?');
                $isConfirmLabel->setClass('m-caption m-caption-required');
                $isConfirmLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    
                $isConfirm = $data->isConfirm ? $data->isConfirm : DB_FALSE;
                $isConfirm = new MRadioButtonGroup('isConfirm', '', $radiosOptions , $isConfirm, null, 'horizontal');
                $isConfirm->SetShowLabel(false);
                    
                $hctIsConfirm = new MHContainer('hctIsConfirm', array($isConfirmLabel, $isConfirm));
                $fields[]      = $hctIsConfirm;
        
                $isSetFreeLabel = new MText('isSetFreeLabel', _M('É livre', $module) . '?');
                $isSetFreeLabel->setClass('m-caption m-caption-required');
                $isSetFreeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    
                $isSetFree = $data->isSetFree ? $data->isSetFree : DB_FALSE;
                $isSetFree = new MRadioButtonGroup('isSetFree', '', $radiosOptions , $isSetFree, null, 'horizontal');
                $isSetFree->SetShowLabel(false);
                    
                $hctIsSetFree = new MHContainer('hctIsSetFree', array($isSetFreeLabel, $isSetFree));
                $fields[]     = $hctIsSetFree;
                
                $lastModificationLabel = new MText('lastModificationLabel', _M('Última modificação', $module) . ':');
                $lastModificationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                
                $lastModification = new MTextLabel('lastModification', '[' . $data->userName . ' - ' . $data->dateTime . ']', '');
                
                $fields[] = new MHContainer('hctLastModification', array($lastModificationLabel, $lastModification));
                
                if ( $isAdmin )
                {
                    $fields[] = new MButton('btnUpdate', _M('Atualizar', $module));
                }
                else
                {
                    isset($complement) ? $complement->setReadOnly(true) : null;
                    isset($textEvaluation) ? $textEvaluation->setReadOnly(true) : null;
                    isset($frequency) ? $frequency->setReadOnly(true) : null;
                    isset($frequencyAlertEmail) ? $frequencyAlertEmail->addAttribute('disabled', 'true') : null;
                    isset($statusId) ? $statusId->addAttribute('disabled', 'true') : null;
                    isset($detStatusId) ? $detStatusId->addAttribute('disabled', 'true') : null;
                    
                    // Disable radioboxs
                    $jsCode = " document.getElementById('isShowDocumentEndCourse_0').disabled = true; ";
                    $jsCode .= " document.getElementById('isShowDocumentEndCourse_1').disabled = true; ";
                    $jsCode .= " document.getElementById('isInternet_0').disabled = true; ";
                    $jsCode .= " document.getElementById('isInternet_1').disabled = true; ";
                    $jsCode .= " document.getElementById('isConfirm_0').disabled = true; ";
                    $jsCode .= " document.getElementById('isConfirm_1').disabled = true; ";
                    $jsCode .= " document.getElementById('isSetFree_0').disabled = true; ";
                    $jsCode .= " document.getElementById('isSetFree_1').disabled = true; ";
                    
                    $this->page->addAJAXJSCode($jsCode);
                }
                
                $vctEnroll = new MVContainer('vctEnroll', $fields);
                $vctEnroll->formMode = MControl::FORM_MODE_SHOW_SIDE;
                $controls  = $vctEnroll;
            break;
            case 2:
                switch ($enrollConfig->scheduleDisplayMode)
                {
                case 'W':
                    $schedulesData = $busSchedule->getGroupScheduleDataByDate($data->groupId);
                    
                    if (count($schedulesData) > 0)
                    {
                        unset($tmp);
                        foreach ($schedulesData as $scheduleData)
                        {
                            $tmp[$scheduleData->weekday->id]->weekday->id               = $scheduleData->weekday->id;
                            $tmp[$scheduleData->weekday->id]->weekday->description      = $scheduleData->weekday->description;
                            $tmp[$scheduleData->weekday->id]->weekday->shortDescription = $scheduleData->weekday->shortDescription;
                        
                            foreach ($scheduleData->units as $unitId => $unit)
                            {
                                $tmp[$scheduleData->weekday->id]->units[$unitId]->description = $unit->description;
                            
                                foreach ($unit->turns as $turnId => $turn)
                                {
                                    $tmp[$scheduleData->weekday->id]->units[$unitId]->turns[$turnId]->description      = $turn->description;
                                    $tmp[$scheduleData->weekday->id]->units[$unitId]->turns[$turnId]->shortDescription = $turn->shortDescription;
                                
                                    foreach ($turn->times as $timeId => $time)
                                    {
                                        $tmp[$scheduleData->weekday->id]->units[$unitId]->turns[$turnId]->times[$timeId] = $time;
                                    }
                                }
                                ksort($tmp[$scheduleData->weekday->id]->units[$unitId]->turns);
                            }
                            ksort($tmp[$scheduleData->weekday->id]->units);
                        }
                        
                        $schedulesData = $tmp;
                        ksort($schedulesData);
                    }
                    
                break;
                case 'D':
                case 'B':
                    $schedulesData = $busSchedule->getGroupScheduleDataByUnit($data->groupId);
                break;
                }
                
                if (count($schedulesData) > 0)
                {
                    $bsgSchedules = new MBaseGroup('bsgSchedules_' . $groupData->groupId, '', array(), 'vertical', '');
                    
                    switch ($enrollConfig->scheduleDisplayMode)
                    {
                    case 'W': 
                        foreach ($schedulesData as $scheduleData)
                        {
                            if (count($scheduleData->units) > 0)
                            {
                                foreach ($scheduleData->units as $unitId => $unit)
                                {
                                    $bsgSchedules->addControl(new MSeparator());
                                
                                    $wFieldName   = $groupData->groupId . '_ ' . $scheduleData->weekday->id;
                                    $uFieldName   = $wFieldName . '_' . $unitId;
                                    $weekDayLabel = new MText('weekDayLabel_' . $uFieldName, _M('Dia da semana', $module) . '/' . _M('Unidade', $module) . ':');
                                    $weekDayLabel->setBold(true);
                                    
                                    $weekDayText = new MText('weekDayText_' . $uFieldName, $scheduleData->weekday->description . '/' . $unit->description);
                                    
                                    $hctWeekDay = new MHContainer('hctWeekDay_' . $uFieldName, array($weekDayLabel, $weekDayText));
                                    
                                    $bsgSchedules->addControl($hctWeekDay);
                                    
                                    if (count($unit->turns) > 0)
                                    {    
                                        foreach ($unit->turns as $turnId => $turn)
                                        {
                                            $tFieldName = $uFieldName . '_' . $turnId;
                                            
                                            $turnSpace = new MText('turnSpace_' . $tFieldName, '&nbsp');
                                            $turnSpace->setWidth('20');
                                            
                                            $turnLabel = new MText('turnLabel_' . $tFieldName, _M('Turno', $module) . ':');
                                            $turnLabel->setBold(true);
                                            
                                            $turnText = new MText('turnText_' . $tFieldName, $turn->description);
                                            
                                            $hctTurn = new MHContainer('hctTurn_' . $tFieldName, array($turnSpace, $turnLabel, $turnText));
                                            
                                            $bsgSchedules->addControl($hctTurn);
                                        
                                            if (count($turn->times) > 0)
                                            {
                                                foreach ($turn->times as $timeId => $time)
                                                {
                                                    $tmFieldName = $tFieldName . '_' . $timeId;
                                                    
                                                    $timeSpace = new MText('timeSpace_' . $tmFieldName, '&nbsp');
                                                    $timeSpace->setWidth('40');
                                                    
                                                    $timeLabel = new MText('timeLabel_' . $tmFieldName, _M('Horário', $module) . ':');
                                                    $timeLabel->setBold(true);
                                                    
                                                    $timeText = new MText('timeText_' . $tmFieldName, $time->beginHour . ' - ' . $time->endHour);
                                                    
                                                    $hctTime = new MHContainer('hctTime_' . $tmFieldName, array($timeSpace, $timeLabel, $timeText));
                                                    
                                                    $bsgSchedules->addControl($hctTime);
                                                    
                                                    $profSpaces = new MText('profSpaces_' . $tmFieldName, '&nbsp');
                                                    $profSpaces->setWidth('60');
                                                    
                                                    $profLabel = new MText('profLabel_' . $tmFieldName, _M('Professor(es)', $module) . ':');
                                                    $profLabel->setBold(true);
                                                    
                                                    if (is_array($time->professors))
                                                    {
                                                        $profText = implode(', ', $time->professors);
                                                    }
                                                    else
                                                    {
                                                        $profText = _M('Professor não definido', $module);
                                                    }
                                                    
                                                    $profText = new MText('profText_' . $tFieldName, $profText);
                                                    
                                                    $hctProf = new MHContainer('hctProf_' . $tmFieldName, array($profSpaces, $profLabel, $profText));
                                                    
                                                    $bsgSchedules->addControl($hctProf);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    break;
                    
                    case 'D':
                        foreach ($schedulesData as $scheduleId => $scheduleData)
                        {
                            $bsgSchedules->addControl(new MSeparator());
                        
                            $uFieldName = $groupData->groupId . '_' . $scheduleId;
                        
                            $unitLabel = new MText('unitLabel_' . $uFieldName, _M('Unidade', $module) . ':');
                            $unitLabel->setBold(true);
                            
                            $unitText = new MText('unitText_' . $uFieldName, $scheduleData->description);
                            
                            $hctUnit = new MHContainer('hctUnit_' . $uFieldName, array($unitLabel, $unitText));
                            
                            $bsgSchedules->addControl($hctUnit);
                            
                            $datesLabel = new MText('datesLabel_' . $uFieldName, _M('Datas de ocorrência', $module) . ':');
                            $datesLabel->setBold(true); 
                        
                            $datesText  = new MText('datesText_' . $uFieldName, implode(', ', $scheduleData->dates));
                            
                            $hctDates = new MHContainer('hctDates_' . $scheduleData->scheduleId, array($datesLabel, $datesText));
                            
                            $bsgSchedules->addControl($datesLabel);
                            $bsgSchedules->addControl($datesText);
                            
                            if (count($scheduleData->times) > 0)
                            {
                                foreach ($scheduleData->times as $timeId => $time)
                                {
                                    $tFieldName = $uFieldName . '_' . $timeId;
                                                    
                                    $timeSpace = new MText('timeSpace_' . $tFieldName, '&nbsp');
                                    $timeSpace->setWidth('20');
                                    
                                    $timeLabel = new MText('timeLabel_' . $tFieldName, _M('Horário', $module) . ':');
                                    $timeLabel->setBold(true);
                                    
                                    $timeText = new MText('timeText_' . $tFieldName, $time->beginHour . ' - ' . $time->endHour);
                                    
                                    $hctTime = new MHContainer('hctTime_' . $tFieldName, array($timeSpace, $timeLabel, $timeText));
                                    
                                    $bsgSchedules->addControl($hctTime);
                                    
                                    $profSpaces = new MText('profSpaces_' . $tFieldName, '&nbsp');
                                    $profSpaces->setWidth('40');
                                    
                                    $profLabel = new MText('profLabel_' . $tFieldName, _M('Professor(es)', $module) . ':');
                                    $profLabel->setBold(true);
                                    
                                    if (is_array($scheduleData->professors))
                                    {
                                        $profText = implode(', ', $scheduleData->professors);
                                    }
                                    else
                                    {
                                        $profText = _M('Professor não definido', $module);
                                    }
                                    
                                    $profText = new MText('profText_' . $tFieldName, $profText);
                                    
                                    $hctProf = new MHContainer('hctProf_' . $tFieldName, array($profSpaces, $profLabel, $profText));
                                    
                                    $bsgSchedules->addControl($hctProf);
                                }
                            }
                        }
                    break;
                    case 'B':
                    foreach ($schedulesData as $scheduleId => $scheduleData)
                        {
                            $bsgSchedules->addControl(new MSeparator());
                        
                            $uFieldName = $groupData->groupId . '_' . $scheduleId;
                        
                            $unitLabel = new MText('unitLabel_' . $uFieldName, _M('Unidade', $module) . ':');
                            $unitLabel->setBold(true);
                            
                            $unitText = new MText('unitText_' . $uFieldName, $scheduleData->description);
                            
                            $hctUnit = new MHContainer('hctUnit_' . $uFieldName, array($unitLabel, $unitText));
                            
                            $bsgSchedules->addControl($hctUnit);
                            
                            $datesLabel = new MText('datesLabel_' . $uFieldName, _M('Ocorrência', $module) . ':');
                            $datesLabel->setBold(true); 
                        
                            $datesText  = new MText('datesText_' . $uFieldName, _M('de', $module) . ' ' . $scheduleData->dates[0] . ' ' . _M('até', $module) . ' ' . $scheduleData->dates[count($scheduleData->dates) - 1]);
                            
                            $hctDates = new MHContainer('hctDates_' . $suFieldName, array($datesLabel, $datesText));
                            
                            $bsgSchedules->addControl($hctDates);
                            
                            if (count($scheduleData->times) > 0)
                            {
                                foreach ($scheduleData->times as $timeId => $time)
                                {
                                    $tFieldName = $uFieldName . '_' . $timeId;
                                                    
                                    $timeSpace = new MText('timeSpace_' . $tFieldName, '&nbsp');
                                    $timeSpace->setWidth('20');
                                    
                                    $timeLabel = new MText('timeLabel_' . $tFieldName, _M('Horário', $module) . ':');
                                    $timeLabel->setBold(true);
                                    
                                    $timeText = new MText('timeText_' . $tFieldName, $time->beginHour . ' - ' . $time->endHour);
                                    
                                    $hctTime = new MHContainer('hctTime_' . $tFieldName, array($timeSpace, $timeLabel, $timeText));
                                    
                                    $bsgSchedules->addControl($hctTime);
                                    
                                    $profSpaces = new MText('profSpaces_' . $tFieldName, '&nbsp');
                                    $profSpaces->setWidth('40');
                                    
                                    $profLabel = new MText('profLabel_' . $tFieldName, _M('Professor(es)', $module) . ':');
                                    $profLabel->setBold(true);
                                    
                                    if (is_array($scheduleData->professors))
                                    {
                                        $profText = implode(', ', $scheduleData->professors);
                                    }
                                    else
                                    {
                                        $profText = _M('Professor não definido', $module);
                                    }
                                    
                                    $profText = new MText('profText_' . $tFieldName, $profText);
                                    
                                    $hctProf = new MHContainer('hctProf_' . $tFieldName, array($profSpaces, $profLabel, $profText));
                                    
                                    $bsgSchedules->addControl($hctProf);
                                }
                            }
                        }
                    break;
                    }
                    
                    $fields[] = $bsgSchedules;
                }
                else
                {
                    $timeHour = new MText('timeHour_' . $fieldsName, _M('Horários não definidos', $module), 'red');
                    $timeHour->setBold(true);
                            
                    $fields[] = $timeHour;
                }
                
                if ( $isAdmin )
                { 
                    $editGroup = new MButton('editGroup', _M('Editar oferecida', $module), $MIOLO->getActionURL($module, 'main:process:group', null, array('function'=>'update', 'groupId'=>$dataGroup->groupId)) );
                    $editGroup->target = '_blank';
                    $fields[]  = $editGroup;
                }
                
                $controls = new MVContainer('vctSchedules', $fields);
            break;
            case 3: //notas
                unset($fields);
                
                $degrees = $busGradeTyping->getLearningPeriodDegrees($dataLearningPeriod->learningPeriodId);
                
                unset($columns);
                unset($degreesData);
                
                if (count($degrees) > 0)
                {
                    foreach ($degrees as $degree)
                    {
                        $columns[] = $degree->description;
                        
                        $degreesData[0][] = $busDegreeEnroll->getDegreeEnrollCurrentGrade($degree->degreeId, $data->enrollId, $dataGroup->useConcept == DB_TRUE);
                    }
                }
                
                if (count($degreesData) > 0)
                {
                    $degreesTable = new MTableRaw(_M('Graus do aluno', $module), $degreesData, $columns);
                    
                    $fields[] = $degreesTable;
                }
                
                if ( $isAdmin )
                {
                    $editDegrees = new MButton('editDegrees', _M('Editar graus', $module), $MIOLO->getActionURL($module, 'main:process:listenrolledpupils', null, array('groupId'=>$data->groupId)));
                    $editDegrees->target = '_blank';
                    $fields[] = $editDegrees;
                }
                
                $controls = new MVContainer('vctDegrees', $fields);
            break;
            case 4:
                unset($fields);
                unset($filters);
                $filters->groupId = $data->groupId;
                $schedules = $busSchedule->searchSchedule($filters);
    
                for ( $i=0; $i<count($schedules); $i++ )
                {
                    unset($schedule);
                    list ( $schedule->scheduleId,
                           $schedule->groupId,
                           $schedule->curricularComponent,
                           $schedule->subGroup,
                           $schedule->unitId,
                           $schedule->unitDescription,
                           $schedule->weekDayId,
                           $schedule->weekDayDescription,
                           $schedule->turnId,
                           $schedule->turnDescription,
                           $schedule->scheduleLearningPeriodId,
                           $schedule->scheduleLearningPeriodDescription,
                           $schedule->beginHour,
                           $schedule->endHour,
                           $schedule->physicalResourceId,
                           $schedule->physicalResourceVersion,
                           $schedule->physicalResourceDescription,
                           $schedule->weight,
                           $schedule->leaderId,
                           $schedule->leaderName,
                           $schedule->subleaderId,
                           $schedule->subleaderName,
                           $schedule->beginDate,
                           $schedule->endDate ) = $schedules[$i];
    
                    $tableTitle = _M('Horário', $module) . ' ' . $schedule->scheduleId . ' - ' . $schedule->weekDayDescription . ' (' . $schedule->beginHour . ' - ' . $schedule->endHour . ')';
    
                    $table = new MTableRaw($tableTitle, null, null);
    
                    // Gather all professor for this schedule
                    $table->colTitle[0] = _M('Professores', $module);
    
                    $scheduleProfessors = $business->getScheduleProfessors($schedule->scheduleId);
    
                    $table->array[0][0] = '';
                    
                    // Load professors into table
                    for ( $iProf=0; $iProf<count($scheduleProfessors); $iProf++ )
                    {
                        list ( $scheduleProfessor->professorId,
                               $scheduleProfessor->name ) = $scheduleProfessors[$iProf];
    
                        $table->array[$iProf][0] = $scheduleProfessor->professorId . ' - ' . $scheduleProfessor->name;
                    }
    
                    // Get academic calendar dates
                    //FIXME: Implementar uma nova função que traga estas informações sem utilizar a tabela acdAcademicCalendat que foi excluída
                    $academicCalendar = $busSchedule->getScheduleAcademicCalendar($schedule->scheduleId);
                    for ( $iCal=0; $iCal<count($academicCalendar); $iCal++ )
                    {
                        list ( $acadCal->occurrenceDate,
                               $acadCal->day,
                               $acadCal->month,
                               $acadCal->year,
                               $acadCal->numberHoursLessons ) = $academicCalendar[$iCal];
    
                        $table->colTitle[$iCal+1] = $acadCal->day . '<br />' . $acadCal->month;
    
                        // Get frequency for this date and set
                        $frequency = $busFrequenceEnroll->getEnrollFrequencyOnDate($enrollId, $schedule->scheduleId, $acadCal->occurrenceDate);
                        // Set image according to frequency
                        if ( is_null($frequency) )
                        {
                            $image = new MImage();
                        }
                        elseif ( $frequency == 0 ) // Absense
                        {
                            $image = new MImage(null, _M('Ausente', $module), $MIOLO->getUI()->getImage($module, 'fault.png'));
                        }
                        elseif ( $frequency / $acadCal->numberHoursLessons == 1 ) // Full frequency to this class
                        {
                            $image = new MImage(null, _M('Presente', $module), $MIOLO->getUI()->getImage($module, 'presence.png'));
                        }
                        else // Half presence
                        {
                            $image = new MImage(null, _M('Meia presença', $module), $MIOLO->getUI()->getImage($module, 'presenceHalf.png'));
                        }
                        $table->array[0][$iCal+1] = $image->generate();
                        if ( $iProf > 1 )
                        {
                            $table->setCellAttribute(0, $iCal+1, 'rowspan', $iProf);
                        }
                    }
                    $fields[$schedule->weekDayId . $schedule->beginHour . $schedule->scheduleId] = $table;
                }
                if (is_array($fields))
                {
                    ksort($fields);
                    $controls = new MVContainer('vctFrequencies', $fields);
                }
                else
                {
                    $controls = new MText('freqError', _M('Sem dados de frequência registrados', $module), 'red');
                    $controls->setBold(true);
                }
            break;
        }
        
        $this->manager->getTheme()->setContent($controls);
    }
    
    /**
     * Event triggered when user clicks the Update button
     **/
    public function btnUpdate_click()
    {
        $MIOLO              = MIOLO::getInstance();
        $module             = MIOLO::getCurrentModule();

        $data = $this->getTypesData();
        
        try
        {
            $business = new BusinessAcademicBusEnroll();
            $business->updateEnrollEdit($data);

            $msg     = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
            $this->addInfo($msg);
        }
        catch (Exception $e)
        {
            $msg  = _M('Erro executando a operação solicitada.', $module) . ' ' . $e->getMessage();
            $this->addError( $msg );
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     **/
    public function getTypesData()
    {
        $data = new acdEnroll();
        foreach ( $data->getObjectVars() as $var => $value )
        {
            $data->$var = MIOLO::_request($var);
        }

        $data->curriculumId = MIOLO::_REQUEST('curriculumIdMy');
        $data->groupId = MIOLO::_REQUEST('groupIdMy');
        
        return $data;
    }

}

?>
