<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Degree form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [smauel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 15/09/2005
 *
 **/

/**
 * Form to manipulate a degree
 **/
class FrmDegree extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcdDegree(), array('degreeId'), 'BusDegree');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $isFinal = false;
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $degreeId = MIOLO::_REQUEST('degreeId');
            $fields[] = new MTextLabel('degreeId', $degreeId, _M('Código',$module));
            $fields[] = new MHiddenField('degreeId', $degreeId);

            $business = new BusinessAcademicBusDegree();
            $data = $business->getDegree($degreeId);
            if( strlen($data->parentDegreeId) == 0 )
            {
                $isFinal = true;
            }
        }

        // Field course
        $courseLabel = new MText('courseLabel', _M('Curso',$module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseId = new MLookupTextField('courseId', $this->getFormValue('courseId', $data->courseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseVersion, courseName, unitId, unitDescription, turnId, turnDescription', $module, 'CourseOccurrence', null, array('courseId' => 'courseId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Informe o código do curso', $module));
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $data->courseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setReadOnly(true);
        $courseVersion->setJsHint(_M('Versão do curso', $module));
        $courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->courseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso', $module));
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[] = $hctCourse;

        // Field turn
        $turnLabel = new MText('turnLabel', _M('Turno', $module) . ':');
        $turnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $turnId = new MTextField('turnId', $this->getFormValue('turnId', $data->turnId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $turnId->setReadOnly(true);
        $turnId->setJsHint(_M('Código do turno', $module));
        $turnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription', $data->turnDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $turnDescription->setReadOnly(true);
        $turnDescription->setJsHint(_M('Descrição do turno', $module));
        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(true);
        $fields[] = $hctTurn;

        // Field unit
        $unitLabel = new MText('unitLabel', _M('Unidade', $module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitId = new MTextField('unitId', $this->getFormValue('unitId', $data->unitId),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitId->setReadOnly(true);
        $unitId->setJsHint(_M('Código da unidade', $module));
        $unitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription', $data->unitDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $unitDescription->setReadOnly(true);
        $unitDescription->setJsHint(_M('Descrição da unidade', $module));
        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(true);
        $fields[] = $hctUnit;

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $lookupFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId');
        }
        else
        {
            $businessPeriod = new BusinessAcademicBusPeriod();
            $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
            $periodId->setJsHint(_M('Selecione um período', $module));
            $fields[] = $periodId;

            $lookupFilters = array('courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId', 'periodId' => 'periodId');
        }

        // Field learning period
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo',$module).':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, courseId, courseVersion, turnId, unitId, learningPeriodDescription, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseName, turnDescription, unitDescription', $module, 'LearningPeriod', null, $lookupFilters, true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MRequiredValidator('learningPeriodId', _M('Período letivo', $module));
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescription->setReadOnly(true);
        $hctlearningPeriod = new MHContainer('hctlearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctlearningPeriod->setShowLabel(true);
        $fields[] = $hctlearningPeriod;

        if( !$isFinal )
        {
            // Field parent degree
            $lookupFilters['learningPeriodId'] = 'learningPeriodId';
            $parentDegreeLabel = new MText('parentDegreeLabel', _M('Grau pai', $module) . ':');
            $parentDegreeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $parentDegreeLabel->setClass('m-caption m-caption-required');
            $parentDegreeId = new MLookupTextField('parentDegreeId', $this->getFormValue('parentDegreeId', $data->parentDegreeId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,courseId,courseVersion,turnId,unitId,courseName,turnDescription,unitDescription,limbo,parentDegreeDescription', $module, 'Degree', null, $lookupFilters, true);
            $parentDegreeId->setJsHint(_M('Código do grau pai', $module));
            $validators[] = new MIntegerValidator('parentDegreeId', _M('Grau pai', $module), 'required');
            $parentDegreeDescription = new MTextField('parentDegreeDescription', $this->getFormValue('parentDegreeDescription', $data->parentDegreeDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $parentDegreeDescription->setJsHint(_M('Descrição do grau pai', $module));
            $parentDegreeDescription->setReadOnly(true);
            $hctParentDegree = new MHContainer('hctParentDegree', array($parentDegreeLabel, $parentDegreeId, $parentDegreeDescription));
            $hctParentDegree->setShowLabel(true);
            $fields[] = $hctParentDegree;
        }

        // Field description degree
        $description = new MTextField('description', $this->getFormValue('description', $data->description), _M('Descrição',$module),SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição do grau', $module));
        $fields[] = $description;
        $validators[] = new MRequiredValidator('description');

        // Field limit date
        $limitDate = new MCalendarField('limitDate', $this->getFormValue('limitDate', $data->limitDate), _M('Data limite',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $limitDate->setJsHint(_M('Informe a data limite', $module));
        $validators[] = new MDATEDMYValidator('limitDate', '', 'optional');
        $fields[] = $limitDate;

        if( !$isFinal )
        {
            // Field degree number
            $degreeNumberOpts = array(1=>'1', 2=>'2', 3=>'3', 4=>'4', 5=>'5', 6=>'6', 7=>'7', 8=>'8', 9=>'9', 10=>'10', 11=>'11', 12=>'12', 13=>'13', 14=>'14', 15=>'15', 16=>'16', 17=>'17', 18=>'18', 19=>'19', 20=>'20');
            $degreeNumber = new MSelection('degreeNumber', $this->getFormValue('degreeNumber', $data->degreeNumber), _M('Número da nota do grau acadêmico', $module), $degreeNumberOpts, false, _M('Define a ordem de exibição do grau', $module));
            $degreeNumber->setJsHint(_M('Selecione o número do grau', $module));
            $validators[] = new MIntegerValidator('degreeNumber', '', 'required');
            $fields[] = $degreeNumber;
        }
        else
        {
            $degreeNumber = new MHiddenField('degreeNumber', '0');
            $fields[] = $degreeNumber;
        }

        // Field weight
        $weight = new MTextField('weight', $this->getFormValue('weight', $data->weight ? $data->weight : 1), _M('Peso',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $weight->setJsHint(_M('Informe o peso', $module));
        $fields[] = $weight;
        $validators[] = new MRequiredValidator('weight', _M('Peso',$module));

        if( !$isFinal )
        {            
            // Field mey be null
            $opts = SAGU::listYesNo('1');
            $mayBeNullLabel = new MText('mayBeNullLabel', _M('Pode ser nulo', $module) . '?');
            $mayBeNullLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $mayBeNull = strlen($this->getFormValue('mayBeNull', $data->mayBeNull)) > 0 ? $this->getFormValue('mayBeNull', $data->mayBeNull) : DB_FALSE;
            $mayBeNull = new MRadioButtonGroup('mayBeNull', '', $opts, $mayBeNull, null, 'horizontal');
            $mayBeNull->SetShowLabel(false);
            $hctMayBeNull = new MHContainer('hctMayBeNull', array($mayBeNullLabel, $mayBeNull));
            $fields[] = $hctMayBeNull;
        }
        else
        {
            $hctMayBeNull = new MHiddenField('mayBeNull', DB_FALSE);
            $fields[] = $hctMayBeNull;
        }
        

        parent::defineFields($fields, $validators, $data);
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $fields['learningPeriodDescription'] = 'learningPeriodDescription';
        $fields['periodId'] = 'periodId';

        foreach ( $fields as $key => $field )
        {
            $data->$key = MIOLO::_REQUEST($field);
        }

        return $data;
    }
}
?>