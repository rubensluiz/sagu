<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Extension document form
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 09/10/2006
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmBoxLabel extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Etiqueta da caixa', $module), NULL, NULL );
        set_time_limit(0);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');
        
        $fields[]   = new MHiddenField('limbo', '');

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod() );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[]   = new MRequiredValidator('periodId');
        $fields[]         = $periodId;

        //Field box number
        $boxNumberLabel = new MText('boxNumberLabel', _M('Número da caixa', $module) . ':');
        $boxNumberLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $boxNumber = new MTextField('boxNumber', $this->getFormValue('boxNumber', $boxNumber), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $boxNumber->setJsHint(_M('Informe o número da caixa', $module));
        $hctBoxNumber = new MHContainer('hctBoxNumber', array($boxNumberLabel, $boxNumber));
        $hctBoxNumber->setShowLabel(true);
        $fields[]    = $hctBoxNumber;

        $btnPrintBoxLabel = new MButton('btnPrintBoxLabel',_M('Imprimir documento de etiqueta da caixa', $module));
        $btnPrintBoxLabel->attachEventHandler('click', 'tbBtnPrint_click', true);

        $fields[] = $btnPrintBoxLabel;

        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO                    = MIOLO::getInstance();
        $module                   = MIOLO::getCurrentModule();
        $action                   = MIOLO::getCurrentAction();

        $data->periodId           = MIOLO::_request('periodId');
        $data->boxNumber          = MIOLO::_request('boxNumber');
        $data->formationLevelId   = SAGU::getParameter('ACADEMIC', 'COURSE_FORMATIONLEVELID_GRADUATE');

        $MIOLO->uses('classes/RptBoxLabel.class', $module);

        $businessLearningPeriod   = new BusinessAcademicBusLearningPeriod();
        $learningPeriods          = $businessLearningPeriod->searchLearningPeriod($data);

        $oldValue = 0;
        $keyLearningPeriod = 0;

        if ( is_array($learningPeriods) && (count($learningPeriods) > 0) )
        {
            foreach($learningPeriods as $key => $learningPeriod)
            {
                if ( $oldValue == $learningPeriod[8] )
                {

                }
                else
                {
                    $courseName[$keyLearningPeriod] .= $learningPeriod[7] . ' - ' . $learningPeriod[8];
                    $keyLearningPeriod++;
                }

                $oldValue = $learningPeriod[8];
            }
        }
        else
        {
            $this->addError(_M('Não há período letivo definido para este período',$module));
        }
        
        $data->courseName = $courseName;

        $report = new RptBoxLabel($data);

        $this->page->setAction($MIOLO->getActionURL($module, $action));
    }
}

?>
