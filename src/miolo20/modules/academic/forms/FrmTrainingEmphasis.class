<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelo detalhamento da ênfase
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 25/02/2010
 *
 **/
class FrmTrainingEmphasis extends SStepByStepForm
{
    private $sub;

    /**
     * Construtor da classe
     */
    public function __construct($steps = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Load data
        $stepData = $this->getStepDataByForm('FrmStageChooser');
        $groupId = $stepData->groupId;

        $businessTrainingEmphasis = new BusinessAcademicBusTrainingEmphasis();

        if ( $this->isFirstAccess() )
        {
            MSubDetail::clearData('trainingEmphasis');

            if ( strlen($groupId) > 0 )
            {
                $filters = new stdClass();
                $filters->groupId = $groupId;
                $dataSub = $businessTrainingEmphasis->searchTrainingEmphasis($filters, true);
            }
        }

        // Trainingdetailid
        $subFields[] = new SHiddenField('trainingEmphasisId');

        // Description
        $descriptionLabel = new MText('descriptionLabel', _M('Descrição', $module) . ':');
        $descriptionLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description = new MTextField('description', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint( _M('Informe a descrição da ênfase', $module) );
        $hctDescription = new MHContainer('hctDescription', array($descriptionLabel, $description));
        $subValidators[] = new MRequiredValidator('description', _M('Descrição',$module));
        $subFields[] = $hctDescription;

        // Field summary
        $summaryLabel = new MText('summaryLabel', _M('Ementa', $module) . ':');
        $summaryLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $summary = new MMultiLineField('summary', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'),8, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $summary->setJsHint( _M('Informe a ementa do estágio', $module) );
        $hctSummary = new MHContainer('hctSummary', array($summaryLabel, $summary));
        $subFields[] = $hctSummary;

        // Field responsible
        $responsibleLabel = new MText('responsibleLabel', _M('Responsável',$module).':');
        $responsibleLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $responsibleLabel->setClass('m-caption m-caption-required');
        $responsibleId = new MLookupTextField('responsibleId', $this->getFormValue('responsibleId',$data->responsibleId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'responsibleName', 'basic', 'PhysicalPerson', null, null, true);
        $responsibleId->setJsHint(_M('Informe o código do responsável pelo estágio',$module));
        $subValidators[] = new MIntegerValidator('responsibleId', _M('Responsável',$module));
        $subValidators[] = new MRequiredValidator('responsibleId', _M('Responsável',$module));
        
        // Field responsible name
        $responsibleName = new MTextField('responsibleName', $this->responsibleName->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'),null,null, true);
        $responsibleName->setJsHint(_M('Nome da pessoa',$module));
        $hctResponsible = new MHContainer('hctResponsible', array($responsibleLabel, $responsibleId,$responsibleName));
        $hctResponsible->setShowLabel(true);
        $subFields[] = $hctResponsible;

        // Place
        $placeLabel = new MText('placeLabel', _M('Local', $module) . ':');
        $placeLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $place = new MTextField('place', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $place->setJsHint( _M('Informe o local do estágio', $module) );
        $hctPlace = new MHContainer('hctPlace', array($placeLabel, $place));
        $subFields[] = $hctPlace;
        
        // Columns
        $cols[] = new MGridColumn(_M('Código da ênfase de estágio',$module), 'left', true, '', false, 'trainingEmphasisId');
        $cols[] = new MGridColumn(_M('Descrição', $module), 'left', true, '', true, 'description');
        $cols[] = new MGridColumn(_M('Ementa', $module), 'left', true, '', true, 'summary');
        $cols[] = new MGridColumn(_M('Responsável código', $module), 'left', true, '', false, 'responsibleId');
        $cols[] = new MGridColumn(_M('Responsável', $module), 'left', true, '', true, 'responsibleName');
        $cols[] = new MGridColumn(_M('Local', $module), 'left', true, '', true, 'place');

        $fields[] = $this->sub = new MSubDetail('trainingEmphasis', _M('Ênfases do estágio', $module), $cols, $subFields);
        $this->sub->setValidators($subValidators);
        
        if ( count($dataSub) > 0 && $this->isFirstAccess() )
        {
           $this->sub->setData($dataSub);
        }

        $this->setFields($fields);
    }

    /*
     * Ação do botão finalizar
     */
    public function finalizeButton_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $stageChooser = $this->getStepDataByForm('FrmStageChooser');
        $trainingEmphasis = $this->getData();
        // Business training emphasis
        $businessTrainingEmphasis = new BusinessAcademicBusTrainingEmphasis();

        try
        {
            $businessTrainingEmphasis->beginTransaction();
            
            //Training emphasis
            if ( count($trainingEmphasis->trainingEmphasis) > 0 )
            {
                foreach ( $trainingEmphasis->trainingEmphasis as $data )
                {
                    $data->groupId = $stageChooser->groupId;
                    // Insert
                    if ( !$data->removeData && (strlen($data->trainingEmphasisId) == 0) )
                    {
                        $businessTrainingEmphasis->insertTrainingEmphasis($data);
                    }
                    // Update
                    elseif ( !$data->removeData && (strlen($data->trainingEmphasisId) > 0) )
                    {
                        $businessTrainingEmphasis->updateTrainingEmphasis($data);
                    }
                    // Delete
                    elseif ( $data->removeData && (strlen($data->trainingEmphasisId) > 0) )
                    {
                        $businessTrainingEmphasis->deleteTrainingEmphasis($data->trainingEmphasisId);
                    }
                }
            }

            parent::finalizeButton_click($args);
            
            $businessTrainingEmphasis->endTransaction();
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
            SAGU::information($msg, $MIOLO->getActionURL($module, $action, null, array('function'=>'search')));
        }
        catch (Exception $e)
        {
            $this->AddError( $e->getMessage() );
        }
        
        parent::finalizeButton_click($args);
    }
}
?>
