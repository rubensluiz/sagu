<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Course parent form
 *
 * @author Andre Chagas Dias [andre@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 15/09/2008
 */

/**
 * Form to manipulate a course occurrence
 */
class FrmCourseParent extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new AcdCourseParent(), array('courseParentId'), 'BusCourseParent');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $courseParentId = MIOLO::_REQUEST('courseParentId');

            $fields[] = new MTextLabel('courseParentId', $courseId, _M('Código', $module));
            $fields[] = new MHiddenField('courseParentId', $courseId);

            $data = $this->busObject->getCourseParent($courseParentId);
        }

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        $parentCourseLabel = new MText('parentCourseLabel', _M('Curso complementar',$module) . ':');
        $parentCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parentCourseLabel->setClass('m-caption m-caption-required');
        $parentCourseId = new MLookupTextField('parentCourseId', $this->getFormValue('parentCourseId', $data->parentCourseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('parentCourseId', 'parentCourseVersion','parentCourseName','parentTurnId','parentTurnDescription','parentUnitId','parentUnitDescription'), $module, 'courseOccurrence', null, array('courseId' => 'parentCourseId', 'courseVersion' => 'parentCourseVersion', 'turnId' => 'parentTurnId', 'unitId' => 'parentUnitId' ), true);
        $validators[] = new MRequiredValidator('parentCourseId', _M('Curso complementar',$module));
        $parentCourseId->setJsHint(_M('Informe o código do curso complementar',$module));
        $parentCourseName = new MTextField('parentCourseName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $parentCourseName->setReadOnly(true);
        $parentCourseName->setJsHint(_M('Nome do curso complementar',$module));
        $parentCourseVersion = new MTextField('parentCourseVersion', $this->getFormValue('parentCourseVersion', $data->parentCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parentCourseVersion->setJsHint(_M('Versão do curso complementar',$module));
        $parentCourseVersion->setReadOnly(true);
        $validators[] = new MRequiredValidator('parentCourseVersion', _M('Versão do curso complementar',$module));
        $hctParentCourse = new MHContainer('hctParentCourse', array($parentCourseLabel, $parentCourseId, $parentCourseVersion, $parentCourseName));
        $hctParentCourse->setShowLabel(true);
        $fields[] = $hctParentCourse;

        //Turn
        $parentTurnLabel = new MText('parentTurnLabel', _M('Turno complementar', $module) . ':');
        $parentTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parentTurnId = new MTextField('parentTurnId', $this->getFormValue('parentTurnId', $data->parentTurnId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parentTurnId->setReadOnly(true);
        $parentTurnId->setJsHint(_M('Código do turno complementar', $module));
        $parentTurnDescription = new MTextField('parentTurnDescription', $this->getFormValue('parentTurnDescription', $data->parentTurnDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $parentTurnDescription->setReadOnly(true);
        $parentTurnDescription->setJsHint(_M('Descrição do turno complementar', $module));
        $hctParentTurn = new MHContainer('hctParentTurn', array($parentTurnLabel, $parentTurnId, $parentTurnDescription));
        $hctParentTurn->setShowLabel(true);
        $fields[] = $hctParentTurn;

        //Unit
        $parentUnitLabel = new MText('parentUnitLabel', _M('Unidade complementar', $module) . ':');
        $parentUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parentUnitId = new MTextField('parentUnitId', $this->getFormValue('parentUnitId', $data->parentUnitId),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parentUnitId->setReadOnly(true);
        $parentUnitId->setJsHint(_M('Código da unidade complementar', $module));
        $parentUnitDescription = new MTextField('parentUnitDescription', $this->getFormValue('parentUnitDescription', $data->parentUnitDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $parentUnitDescription->setReadOnly(true);
        $parentUnitDescription->setJsHint(_M('Descrição da unidade complementar', $module));
        $hctParentUnit = new MHContainer('hctParentUnit', array($parentUnitLabel, $parentUnitId, $parentUnitDescription));
        $hctParentUnit->setShowLabel(true);
        $fields[] = $hctParentUnit;

        $parentCurricularComponentsPeriodLabel = new MText('parentCurricularComponentsPeriodLabel', _M('Ordem complementar',$module) . ':');
        $parentCurricularComponentsPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parentCurricularComponentsPeriodLabel->setClass('m-caption m-caption-required');
        $parentCurricularComponentsPeriod = new MTextField('parentCurricularComponentsPeriod', $this->getFormValue('parentCurricularComponentsPeriod', $data->parentCurricularComponentsPeriod), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MIntegerValidator('parentCurricularComponentsPeriod', _M('Ordem complementar', $module), 'required');
        $hctParentCurricularComponentsPeriod = new MHContainer('hctParentCurricularComponentsPeriod', array($parentCurricularComponentsPeriodLabel, $parentCurricularComponentsPeriod));
        $hctParentCurricularComponentsPeriod->setShowLabel(true);
        $hctParentCurricularComponentsPeriod->setJsHint(_M('Informe a ordem complementar',$module));
        $fields[] = $hctParentCurricularComponentsPeriod;

        parent::defineFields($fields, $validators, $data);
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data = $this->getTypesData();
        $business = new BusinessAcademicBusCourseParent();

        if( $data->courseId != $data->parentCourseId)
        {

            $searchInverseRelationships = $business->searchInverseRelationships($data->courseId,$data->parentCourseId,$data->courseParentId);

            if( empty($searchInverseRelationships) )
            {
                try
                {
                    $opts = array('courseParentIdS'=>$data->courseParentId);

                    if ( $function == 'update' )
                    {
                        $business->updateCourseParent($data);
                        $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');

                        $caption = _M('Informação', $module);
                        $MIOLO->information($msg, $MIOLO->getActionURL( $module, $action, null, $opts));
                    }
                    else
                    {
                        $business->insertCourseParent($data);
                        $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');

                        unset($opts);
                        $goto = SAGU::getStackBackUrl();
                        $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);
                        $opts = array('function'=>'insert');

                        $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                        $caption = _M('Questão',$module);
                        $MIOLO->question($msg, $gotoYes, $goto);
                    }
                }
                catch (Exception $e)
                {
                    $this->addError(_M('Erro executando a operação solicitada.',$module) . ' ' . $e->getMessage());
                }
            }
            else
            {
                // Os valores dos campos "Curso" e "Curso complementar" já tem relação inversa ( "@ 1" é complementar de "@ 2")
                $this->addError(_M('Os valores dos campos "Curso" e "Curso complementar" já tem relação inversa ( "@1" é complementar de "@2" ) !', $module, $data->courseId, $data->parentCourseId));
            }
        }
        else
        {
            // O valor dos campos "Curso" e "Curso complementar" devem ser diferentes !
            $this->addError(_M('Os valores dos campos "Curso" e "Curso complementar" devem ser diferentes!', $module));
        }
    }
}
?>