<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Event form
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 06/01/2006
 *
 **/

/**
 * Form to manipulate a event
 **/
class FrmEvent extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcdEvent(), array('eventId'), 'BusEvent');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();

            $fields[]  = new MTextLabel('', $pk->eventId, _M('Código', $module));
            $fields[]  = new MHiddenField('eventId', $pk->eventId);

            $data = $this->busObject->getEvent($pk->eventId);
        }

        //Field event
        $eventDescription = new MMultiLineField('eventDescription', $this->getFormValue('eventDescription', $data->description), _M('Descrição', $module), 40, 2, 40);
        $eventDescription->setJsHint(_M('Informe a descrição', $module));
        $fields[] = $eventDescription;
        $validators[] = new MRequiredValidator('eventDescription');
        
        //Field begin date
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $beginDate->setValidator( new MDATEDMYValidator('beginDate', '', 'required'));
        $fields[] = $beginDate;

        //Field end date
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data final', $module));
        $endDate->setValidator( new MDATEDMYValidator('endDate', '', 'required'));
        $fields[] = $endDate;

        //Field account scheme
        $accountSchemeLabel = new MText('accountSchemeLabel', _M('Plano de contas', $module) . ':');
        $accountSchemeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $accountSchemeId = new MLookupTextField('accountSchemeId', $this->getFormValue('accountSchemeId', $data->accountSchemeId), _M('Plano de contas', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'accountSchemeDescription', 'accountancy', 'AccountScheme', null, null, true);
        $accountSchemeId->setJsHint(_M('Informe o código do plano de contas', $module));
        $validators[] = new MRegExpValidator('accountSchemeId', _M('Plano de contas', $module), '^[0-9]+(\.[0-9]+)*$', 'optional');
        $accountSchemeDescription = new MTextField('accountSchemeDescription', $this->getFormValue('accountSchemeDescription',$data->accountSchemeDescription), _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $accountSchemeDescription->setJsHint(_M('Descrição do plano de contas', $module));
        $accountSchemeDescription->setReadOnly(true);
        $hctAccountScheme = new MHContainer('hctAccountScheme', array($accountSchemeLabel, $accountSchemeId, $accountSchemeDescription));
        $hctAccountScheme->setShowLabel(false);
        $fields[]  = $hctAccountScheme;

        //Field cost center
        $costCenterLabel = new MText('costCenterLabel', _M('Centro de custo', $module) . ':');
        $costCenterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $costCenterId = new MLookupTextField('costCenterId', $this->getFormValue('costCenterId', $data->costCenterId), _M('Centro de custo', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'costCenterDescription', 'accountancy', 'CostCenter', null, null, true);
        $costCenterId->setJsHint(_M('Informe o código do centro de custos', $module));
        $validators[] = new MIntegerValidator('costCenterId', _M('Centro de custo', $module), 'optional');
        $costCenterDescription = new MTextField('costCenterDescription', $this->getFormValue('costCenterDescription', $data->costCenterDescription), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescription->setJsHint(_M('Descrição do centro de custos', $module));
        $costCenterDescription->setReadOnly(true);
        $hctCostCenter = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterId, $costCenterDescription));
        $hctCostCenter->setShowLabel(false);
        $fields[]  = $hctCostCenter;
        
        //Field policy
        $policyLabel = new MText('policyLabel', _M('Política', $module) . ':');
        $policyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $policyId = new MLookupTextField('policyId', $this->getFormValue('policyId', $data->policyId), _M('Política', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'policyDescription', 'finance', 'Policy', null, null, true);
        $policyId->setJsHint(_M('Informe o código da política', $module));
        $validators[] = new MIntegerValidator('policyId', _M('Política', $module), 'optional');
        $policyDescription = new MTextField('policyDescription', $this->getFormValue('policyDescription', $data->policyDescription), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $policyDescription->setJsHint(_M('Descrição da política', $module));
        $policyDescription->setReadOnly(true);
        $hctPolicy = new MHContainer('hctPolicy', array($policyLabel, $policyId, $policyDescription));
        $hctPolicy->setShowLabel(false);
        $fields[]  = $hctPolicy;

        //Field income source
        $incomeSourceLabel = new MText('incomeSourceLabel', _M('Origem', $module) . ':');
        $incomeSourceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $incomeSourceId = new MLookupTextField('incomeSourceId', $this->getFormValue('incomeSourceId', $data->incomeSourceId), _M('Origem', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'incomeSourceDescription', 'finance', 'IncomeSource', null, null, true);
        $incomeSourceId->setJsHint(_M('Informe o código de origem da receita', $module));
        $validators[] = new MIntegerValidator('incomeSourceId', _M('Origem', $module), 'optional');
        $incomeSourceDescription = new MTextField('incomeSourceDescription', $this->getFormValue('incomeSourceDescription', $data->incomeSourceDescription), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $incomeSourceDescription->setJsHint(_M('Informe a descrição da origem', $module));
        $incomeSourceDescription->setReadOnly(true);
        $hctIncomeSource = new MHContainer('hctIncomeSource', array($incomeSourceLabel, $incomeSourceId, $incomeSourceDescription));
        $hctIncomeSource->setShowLabel(false);
        $fields[]  = $hctIncomeSource;

        //Field inscription free
        $inscriptionFee = new MTextField('inscriptionFee', $this->getFormValue('inscriptionFee', $data->inscriptionFee), _M('Taxa de inscrição',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Formato', $module) . ' 0.00');
        $inscriptionFee->setJsHint(_M('Informe a taxa de inscrição', $module));
        $fields[] = $inscriptionFee;
        $validators[] = new MFloatValidator('inscriptionFee', _M('Taxa de inscrição', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'optional');
        
        //Campo carga horária
        $inscriptionFee = new MTextField('numberHours', $this->getFormValue('numberHours', $data->numberHours), _M('Carga horária',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $inscriptionFee->setJsHint(_M('Informe a carga horária', $module));
        $fields[] = $inscriptionFee;
        $validators[] = new MIntegerValidator('numberHours', _M('Carga horária', $module), 'optional');
                
        parent::defineFields($fields, $validators, $data);
    }

    
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->description = $this->eventDescription->value;
        $data->numberHours = $this->numberHours->value;

        return $data;
    }
}
?>
