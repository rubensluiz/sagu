<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for acdCurriculumLink table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 21/09/2005
 */
class FrmCurriculumLinkSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(_M('Localizar', 'basic'), new AcdCurriculumLink(), array( 'curriculumId','curriculumLinkId' ), 'BusCurriculumLink');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseIdS', $data->courseIdS),
            $this->GetFormValue('courseVersionS', $data->courseVersionS),
            $this->GetFormValue('turnIdS', $data->turnIdS),
            $this->GetFormValue('unitIdS', $data->unitIdS)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, true);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseIdS', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersionS', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnIdS', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitIdS', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        //field curricular component
        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Disciplina', $module) . ':');
        $curricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentIdS = new MLookupTextField('curricularComponentIdS', $this->curricularComponentIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentVersionS, curricularComponentNameS', $module, 'CurricularComponent', null, array('curricularComponentId' => 'curricularComponentIdS'), !$this->page->isPostBack());
        $curricularComponentIdS->setJsHint(_M('Informe o código da disciplina', $module));
        $curricularComponentVersionS = new MTextField('curricularComponentVersionS', $this->curricularComponentVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersionS->setJsHint(_M('Informe a versão da disciplina', $module));
        $validators[] = new MIntegerValidator('curricularComponentVersionS');
        $curricularComponentNameS = new MTextField('curricularComponentNameS', $this->curricularComponentNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentNameS->setJsHint(_M('Nome da disciplina',$module));
        $curricularComponentNameS->setReadOnly(true);
        $hctCurricularComponent = new MHContainer('hctCurricularComponent', array($curricularComponentLabel, $curricularComponentIdS, $curricularComponentVersionS, $curricularComponentNameS));
        $hctCurricularComponent->setShowLabel(true);
        $fields[] = $hctCurricularComponent;
        $fields[] = new MSeparator();

        //Field course Link
        $courseLinkLabel = new MText('courseLinkLabel', _M('Curso de vínculo',$module) . ':');
        $courseLinkLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseLinkIdS = new MLookupTextField('courseLinkIdS', $this->courseLinkIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'courseLinkIdS, courseLinkVersionS, courseLinkNameS, courseLinkTurnIdS, courseLinkTurnDescriptionS, courseLinkUnitIdS, courseLinkUnitDescriptionS', $module, 'CourseOccurrence', null, array('courseId' => 'courseLinkIdS'), !$this->page->isPostBack());
        $courseLinkIdS->setJsHint(_M('Informe o curso de vínculo', $module));
        $courseLinkVersionS = new MTextField('courseLinkVersionS', $this->courseLinkVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseLinkVersionS->setJsHint(_M('Informe a versão do curso de vínculo', $module));
        $validators[] = new MIntegerValidator('courseLinkVersionS');
        $courseLinkNameS = new MTextField('courseLinkNameS', $this->courseLinkNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseLinkNameS->setJsHint(_M('Nome do curso de vínculo', $module));
        $courseLinkNameS->setReadOnly(true);
        $hctLinkCourse = new MHContainer('hctLinkCourse', array($courseLinkLabel, $courseLinkIdS, $courseLinkVersionS, $courseLinkNameS));
        $hctLinkCourse->setShowLabel(true);
        $fields[] = $hctLinkCourse;

        //Fields of the turn
        $turnLabel = new MText('turnLabel', _M('Turno',$module) . ':');
        $turnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $turnId = new MTextField('courseLinkTurnIdS', $this->getFormValue('courseLinkTurnIdS'), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $turnId->setJsHint(_M('Código do turno', $module));
        $turnId->setReadOnly(true);
        $turnDescription = new MTextField('courseLinkTurnDescriptionS', $this->getFormValue('courseLinkTurnDescriptionS'), _M('Descrição do turno', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $turnDescription->setJsHint(_M('Descrição do turno', $module));
        $turnDescription->setReadOnly(true);
        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(false);
        $fields[] = $hctTurn;

        //Fields of the unit
        $unitLabel = new MText('unitLabel', _M('Unidade',$module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitId = new MTextField('courseLinkUnitIdS', $this->getFormValue('courseLinkUnitIdS'), _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitId->setJsHint(_M('Código da unidade', $module));
        $unitId->setReadOnly(true);
        $unitDescription = new MTextField('courseLinkUnitDescriptionS', $this->getFormValue('courseLinkUnitDescriptionS'), _M('Descrição da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $unitDescription->setJsHint(_M('Descrição da unidade', $module));
        $unitDescription->setReadOnly(true);
        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(false);
        $fields[] = $hctUnit;

        //Field curricular component link
        $curricularComponentLinkLabel = new MText('curricularComponentLinkLabel', _M('Disciplina de vínculo',$module) . ':');
        $curricularComponentLinkLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLinkIdS = new MLookupTextField('curricularComponentLinkIdS', $this->curricularComponentLinkIdS->value, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentLinkVersionS, curricularComponentLinkNameS', $module, 'CurricularComponent', null, array('curricularComponentId' => 'curricularComponentLinkIdS'), !$this->page->isPostBack());
        $curricularComponentLinkIdS->setJsHint(_M('Informe o código da disciplina de vínculo', $module));
        $curricularComponentLinkVersionS = new MTextField('curricularComponentLinkVersionS', $this->curricularComponentLinkVersionS->value, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentLinkVersionS->setJsHint(_M('Informe a versão da disciplina de vínculo', $module));
        $validators[] = new MIntegerValidator('curricularComponentLinkVersionS');
        $curricularComponentLinkNameS = new MTextField('curricularComponentLinkNameS', $this->curricularComponentLinkNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentLinkNameS->setJsHint(_M('Nome da disciplina de vínculo',$module));
        $curricularComponentLinkNameS->setReadOnly(true);
        $hctCurricularComponentLink = new MHContainer('hctCurricularComponentLink', array($curricularComponentLinkLabel, $curricularComponentLinkIdS, $curricularComponentLinkVersionS, $curricularComponentLinkNameS));
        $hctCurricularComponentLink->setShowLabel(true);
        $fields[] = $hctCurricularComponentLink;

        //Utiliza vinculo para matricula
        $vincMatriculaLabel = new MLabel(_M("Utiliza vínculo para matrícula:"));
        $vincMatriculaLabel->setClass('m-caption');
        $vincMatriculaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $options = SAGU::listYesNo(0);
        $options['i'] = _M("Indiferente");
        $vincMatricula = new MRadioButtonGroup('utilizaVinculoParaMatricula_', null, $options, SAGU::NVL($this->getFormValue('utilizaVinculoParaMatricula_'), 'i'), null, 'horizontal', 'required');
        $vincMatricula->setJsHint(_M("Marque 'SIM' caso deseje utilizar o vínculo para matrícula."));
        $fields[] = new MHContainer('hctVincMatricula', array($vincMatriculaLabel, $vincMatricula));         

        parent::defineFields($fields, $module, 'GrdCurriculumLinkSearch');
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $businessCurriculum = new BusinessAcademicBusCurriculum();
        $data = new AcdCurriculumLink();
        $businessCurriculum = new BusinessAcademicBusCurriculum();

        $data->courseId = MIOLO::_REQUEST('courseId');
        $data->courseVersion = MIOLO::_REQUEST('courseVersion');
        $data->courseUnitId = strlen(MIOLO::_REQUEST('courseUnitId')) > 0 ? MIOLO::_REQUEST('courseUnitId') : $_REQUEST['unitId'];
        $data->courseTurnId = strlen(MIOLO::_REQUEST('courseTurnId')) > 0 ? MIOLO::_REQUEST('courseTurnId') : $_REQUEST['turnId'];
        $data->curricularComponentId = MIOLO::_REQUEST('curricularComponentIdS');
        $data->curricularComponentVersion = MIOLO::_REQUEST('curricularComponentVersionS');
        $data->courseLinkId = MIOLO::_REQUEST('courseLinkIdS');
        $data->courseLinkVersion = MIOLO::_REQUEST('courseLinkVersionS');
        $data->courseLinkUnitId = MIOLO::_REQUEST('courseLinkUnitIdS');
        $data->courseLinkTurnId = MIOLO::_REQUEST('courseLinkTurnIdS');
        $data->curricularComponentLinkId = MIOLO::_REQUEST('curricularComponentLinkIdS');
        $data->curricularComponentLinkVersion = MIOLO::_REQUEST('curricularComponentLinkVersionS');
        $data->searchGrid = TRUE;
        $data->utilizaVinculoParaMatricula = MIOLO::_REQUEST('utilizaVinculoParaMatricula_');
        
        return $data;
    }
}
?>