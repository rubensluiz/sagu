<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Learning Period form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 07/11/2005
 */

/**
 * Form to manipulate a course occurrence
 */
class FrmPeriodEnrollDate extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new acdPeriodEnrollDate(), array('periodEnrollDateId'), 'BusPeriodEnrollDate');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');


        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $periodEnrollDateId = MIOLO::_request('periodEnrollDateId');

            $fields[]  = new MHiddenField('periodEnrollDateId', $periodEnrollDateId);
            $fields[]  = new MTextLabel('periodEnrollDateId', $data->periodEnrollDateId, _M('Código', $module));

            $data     = $this->busObject->getPeriodEnrollDate($periodEnrollDateId);
        }

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[]  = $courseOccurrenceLookup;

        //Field learning period
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module).':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), _M('Código do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, courseId, courseVersion, turnId, unitId, learningPeriodDescription, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, limbo, courseName, turnDescription, unitDescription', $module, 'LearningPeriod', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion', 'turnId' => 'turnId', 'unitId' => 'unitId'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo', $module), 'required');
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->learningPeriodDescription->value, _M('Descrição do período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setReadOnly(true);
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $hctlearningPeriod = new MHContainer('hctlearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctlearningPeriod->setShowLabel(false);
        $fields[]  = $hctlearningPeriod;

        //Field period enroll date description
        $periodEnrollDateDescription = new MTextField('periodEnrollDateDescription', $this->getFormValue('periodEnrollDateDescription', $data->periodEnrollDateDescription), _M('Descrição',$module), 40);
        $periodEnrollDateDescription->setJsHint(_M('Informe a descrição do período de matrícula', $module));
        $fields[]                    = $periodEnrollDateDescription;
        $validators[] = new MRequiredValidator('periodEnrollDateDescription');

        //Field begin date
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informar a data inicial das aulas', $module));
        $beginDate->setValidator( new MDATEDMYValidator('beginDate', _M('Data inicial', $module), 'required'));
        $validators[] = new MRequiredValidator('beginDate');
        $fields[]         = $beginDate;

        //Field end date
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informar a data final das aulas', $module));
        $endDate->setValidator( new MDATEDMYValidator('endDate', _M('Data final', $module), 'required'));
        $validators[] = new MRequiredValidator('endDate');
        $fields[]       = $endDate;

        //Field is internet
        $isInternetLabel = new MText('isInternetLabel', _M('Permitir inscrição via internet',$module).':');
        $isInternetLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isInternetLabel->setClass('m-caption m-caption-required');
        $isInternet = $this->GetFormValue('isInternet',$data->isInternet);
        $isInternet = new MRadioButtonGroup('isInternet', '', SAGU::listTrueFalse(1), $isInternet ? $isInternet : DB_FALSE, null, 'horizontal');
        $isInternet->SetShowLabel(false);
        $hctIsInternet = new MHContainer('hctIsInternet', array($isInternetLabel, $isInternet));
        $fields[]  = $hctIsInternet;

        //Field is adjustmentLabel
        $isAdjustmentLabel = new MText('isAdjustmentLabel', _M('É período de ajuste',$module).':');
        $isAdjustmentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isAdjustmentLabel->setClass('m-caption m-caption-required');
        $isAdjustment = $this->GetFormValue('isAdjustment',$data->isAdjustment);
        $isAdjustment = new MRadioButtonGroup('isAdjustment', '', SAGU::listTrueFalse(1), $isAdjustment ? $isAdjustment : DB_FALSE, null, 'horizontal');
        $isAdjustment->SetShowLabel(false);
        $hctIsAdjustment = new MHContainer('hctIsAdjustment', array($isAdjustmentLabel, $isAdjustment));
        $fields[]  = $hctIsAdjustment;

        //Field is selective proc
        $isSelectiveProcLabel = new MText('isSelectiveProcLabel', _M('É período para calouros',$module).':');
        $isSelectiveProcLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isSelectiveProcLabel->setClass('m-caption m-caption-required');
        $isSelectiveProc = $this->GetFormValue('isSelectiveProc',$data->isSelectiveProc);
        $isSelectiveProc = new MRadioButtonGroup('isSelectiveProc', '', SAGU::listTrueFalse(1), $isSelectiveProc ? $isSelectiveProc : DB_FALSE, null, 'horizontal');
        $isSelectiveProc->SetShowLabel(false);
        $hctIsSelectiveProc = new MHContainer('hctIsSelectiveProc', array($isSelectiveProcLabel, $isSelectiveProc));
        $fields[]  = $hctIsSelectiveProc;

        parent::defineFields($fields, $validators, $data);
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->description  = $this->periodEnrollDateDescription->value;

        return $data;
    }
}

?>
