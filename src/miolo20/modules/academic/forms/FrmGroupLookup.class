<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Physical person lookup form
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 16/08/2006
 */

/**
 * Form to manipulate a city lookup
 */
class FrmGroupLookup extends SManagementForm
{
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance( );
        $module   = MIOLO::getCurrentModule();
        
        parent::__construct( new AcdGroup(), array('groupId'), 'BusGroup', _M('Inserção de disciplina', $module) );
    }

    /**
     * this method is automatically called by MIOLO
     * and is intended to create the form fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $fields[] = $courseOccurrenceLookup;

        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;

        $curriculumCourseId = new MHiddenField('curriculumCourseId', $curriculumCourseId);
        $fields[] = $curriculumCourseId;
        $curriculumCourseVersion = new MHiddenField('curriculumCourseVersion', $curriculumCourseVersion);
        $fields[] = $curriculumCourseVersion;

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo',$module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,curriculumCourseId,curriculumCourseVersion,limbo,limbo,learningPeriodDescription', $module, 'LearningPeriod', null, array('periodId'=>'periodId'), true);
        $validators[]     = new MIntegerValidator('learningPeriodId', _M('Período letivo', $module), 'required');
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(true);
        $fields[] = $hctLearningPeriod;

        $curricularComponentLabel = new MText('curricularComponentLabel', _M('Disciplina',$module) . ':');
        $curricularComponentLabel->setClass('m-caption m-caption-required');
        $curricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[]                   = $curricularComponentLabel;
        $curriculumCurricularComponentId = new MLookupTextField('curriculumCurricularComponentId', $this->getFormValue('curriculumCurricularComponentId ', $data->curriculumCurricularComponentId), _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curriculumCurricularComponentVersion, curriculumCurricularComponentName', $module, 'CurricularComponent', null, null, true);
        $flds[]                = $curriculumCurricularComponentId;
        $curriculumCurricularComponentVersion = new MTextField('curriculumCurricularComponentVersion', $this->getFormValue('curriculumCurricularComponentVersion', $data->curriculumCurricularComponentVersion), _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        //$curricularComponentVersion->setReadOnly(true);
        $flds[]                = $curriculumCurricularComponentVersion;
        $curriculumCurricularComponentName = new MTextField('curriculumCurricularComponentName', $this->getFormValue('curriculumCurricularComponentName', $data->curriculumCurricularComponentName), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curriculumCurricularComponentName->setReadOnly(true);
        $flds[]                  = $curriculumCurricularComponentName;
        $hctCurricularComponent = new MHContainer('hctCurricularComponent', $flds);
        $hctCurricularComponent->setShowLabel(false);
        $fields[]  = $hctCurricularComponent;
        unset($flds);

        $business  = new BusinessAcademicBusRegimen();
        $regimenId = new MComboBox('regimenId', $this->getFormValue('regimenId', $data->regimenId), _M('Regime', $module), $business->listRegimen());
        $fields[]  = $regimenId;
        $validators[]     = new MIntegerValidator('regimenId', '', 'required');

        $vacant = new MTextField('vacant', $this->getFormValue('vacant', $data->vacant), _M('Vagas', $module), 10);
        $vacant->setJsHint(_M('Informe a quantidade de vagas', $module));
        $validators[] = new MRegExpValidator('vacant','','(^-?[0-9][0-9]*$)');
        $fields[] = $vacant;

        $isUseWebDailyLabel = new MText('isUseWebDaily', _M('Utiliza pauta eletrônica',$module) .'?');
        $isUseWebDailyLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isUseWebDailyLabel->setClass('m-caption m-caption-required');
        $isUseWebDaily = new MRadioButtonGroup('isUseWebDaily', null, SAGU::listYesNo(1), $this->getFormValue('isUseWebDaily', 'f'), null, 'horizontal');
        $isUseWebDaily->setShowLabel(false);

        $hctIsUseWebDaily = new MHContainer('hctIsUseWebDaily', array($isUseWebDailyLabel, $isUseWebDaily));
        $fields[] = $hctIsUseWebDaily;

        $classLabel = new MText('classLabel', _M('Turma',$module) . ':');
        $classLabel->setClass('m-caption m-caption-required');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $flds[]     = $classLabel;
        $classId = new MLookupTextField('classId', $this->getFormValue('classId', $data->classId), _M('Código da turma',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('className_'), $module, 'Class', null, null, true);
        $flds[]  = $classId;
        $validators[] = new MRequiredValidator('classId', _M('Código da turma',$module));
        $className = new MTextField('className_', $this->getFormValue('className_', $data->className), _M('Nome da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $className->setReadOnly(true);
        $flds[]    = $className;
        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $className));
        $hctClass->setShowLabel(false);
        $fields[] = $hctClass;
        $fields[] = new formButton('tbBtnSave' , _M('Salvar', $module));
        $fields[] = new formButton('tbBtnBack' , _M('Voltar', $module), 'history.go(-1)');
        unset($flds);

        parent::defineFields($fields, $validators, $data);
        
        $this->disableToolbar();
    }

    public function tbBtnSave_click()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $name     = MIOLO::_Request('name');

        $data     = $this->getTypesData();
        $business = $this->busObject;

        $businessCurriculum                   = new BusinessAcademicBusCurriculum();
        $filters->courseId                    = $data->curriculumCourseId;
        $filters->courseVersion               = $data->curriculumCourseVersion;
        $filters->curricularComponentId       = $data->curriculumCurricularComponentId;
        $filters->curricularComponentVersion  = $data->curriculumCurricularComponentVersion;
        $curriculum = $businessCurriculum->searchCurriculum($filters);

        $data->curriculumId = $curriculum[0][0];

        if ( count($curriculum) == 0 )
        {
            $this->addError(_M('Nenhum currículo encontrado para este curso e disciplina.', $module));
        }
        elseif ( $groupId = $business->insertGroup($data) )
        {
            $this->page->addScript('m_lookup.js');
            $this->page->addJsCode("MIOLO_Deliver('$name', 0, '{$groupId}','{$data->groupName}')" );
        }
        else
        {
            $this->addError(_M('Erro inserindo nova disciplina oferecida',$module));
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'groupName' )
            {
                eval('$data->' . $var . ' = $this->' . $var . '->value;');
            }
        }
        $data->name           = $this->groupName->value;

        return $data;
    }
}
?>