<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Extension document form
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 23/05/2006
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmExtensionDocument extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Extensão', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');
        
        $fields[]   = new MHiddenField('limbo', '');

        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $this->personId->value), _M('Código da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personName'), 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;

        //Field formation lever
        $formationLevelId = new MHiddenField('formationLevelId', SAGU::getParameter('ACADEMIC', 'ACD_EXTENSION_FORMATION_LEVEL_ID'));
        $fields[]         = $formationLevelId;
        
        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $fields[] = $periodId;
        
        //Field course        
        $courseLabel = new MText('courseLabel', _M('Curso', $module) . ':');
        $courseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $courseLabel->setClass('m-caption m-caption-required');
        $courseId     = new MLookupTextField('courseId', $courseId->value > 0 ? $courseId->value > 0 : $this->getFormValue('courseId', $courseId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'courseVersion, courseName', $module, 'CourseVersion', null, array('courseId' => 'courseId', 'formationLevelId' => 'formationLevelId'), !$this->page->isPostBack());
        $courseId->setJsHint(_M('Informe o código do curso',$module));
        $courseName = new MTextField('courseName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setReadOnly(true);
        $courseName->setJsHint(_M('Nome do curso',$module));
        $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion', $this->courseVersion->value), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $courseVersion->setJsHint(_M('Informe a versão do curso',$module));
        $validators[]  = new MRequiredValidator('courseVersion', _M('Curso',$module));
        $hctCourse = new MHContainer('hctCourse', array($courseLabel, $courseId, $courseVersion, $courseName));
        $hctCourse->setShowLabel(true);
        $fields[]  = $hctCourse;

        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodLabel->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$this->learningPeriodId->value), NULL, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array(null, 'courseId', 'courseVersion', null, 'unitId', 'learningPeriodDescription', null, null, null, null, null, null, null, null, null, 'courseName'), $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo',$module));
        $validators[]     = new MRequiredValidator('learningPeriodId', _M('Período letivo', $module), 'required');
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $this->learningPeriodDescription->value), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $fields[]          = $hctLearningPeriod;

        //Field unit
        $business     = new BusinessBasicBusUnit();
        $unitId       = new MSelection('unitId', $this->getFormValue('unitId', $this->unitId->value), _M('Unidade',$module), $business->listUnit());
        $unitId->setJsHint(_M('Selecione uma unidade', $module));
        $validators[] = new MRequiredValidator('unitId');
        $fields[]     = $unitId;

        //Field money value
        $moneyValueLabel  = new MText('moneyValueLabel', _M('Valor', $module) . ':');
        $moneyValueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $moneyValueLabel->setClass('m-caption m-caption-required');
        $moneyValue      = new MTextField('moneyValue', '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Formato', $module) . ' 0.00');
        $moneyValue->setJsHint(_M('Informe o valor',$module));
        $validators[]    = new MFloatValidator('moneyValue', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
        $hctValue = new MHContainer('hctValue', array($moneyValueLabel, $moneyValue));
        $hctValue->setShowLabel(false);
        $fields[] = $hctValue;

        //Field parcels
        $parcelsLabel = new MText('parcelsLabel', _M('Parcelas',$module) . ':');
        $parcelsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $parcelsLabel->setClass('m-caption m-caption-required');
        $parcels      = new MTextField('parcels', '', '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $parcels->setJsHint(_M('Informe as parcelas', $module));
        $validators[]    = new MIntegerValidator('parcels', _M('Parcelas',$module), 'required');
        $hctParcels = new MHContainer('hctParcels', array($parcelsLabel, $parcels));
        $hctParcels->setShowLabel(false);
        $fields[]   = $hctParcels;

        //Field duration
        $durationLabel = new MText('durationLabel', _M('Duração',$module) . ':');
        $durationLabel->setClass('m-caption m-caption-required');
        $durationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $selMonth     = new MSelection('selMonth', $this->getFormValue('selMonth', date('m')), _M('Duração',$module), SAGU::listMonths());
        $selMonth->setJsHint(_M('Selecione o mês de início', $module));
        $validators[] = new MRequiredValidator('selMonth', _M('Mês inicial',$module), 'required');
        $initialLabel = new MText('initialLabel', _M('De',$module));
        $selYear = new MSelection('selYear', $this->getFormValue('selYear', date('Y')), _M('Duração',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $selYear->setJsHint(_M('Selecione o ano de início', $module));
        $validators[] = new MRequiredValidator('selYear', _M('Ano',$module), 'required');
        $middleLabel = new MText('middleLabel', _M('Até',$module));
        $selMonth1 = new MSelection('selMonth1', $this->getFormValue('selMonth1', date('m')), _M('Duração',$module), SAGU::listMonths());
        $selMonth1->setJsHint(_M('Selecione o mês de fim', $module));
        $validators[] = new MRequiredValidator('selMonth', _M('Mês final',$module), 'required');
        $lastLabel = new MText('lastLabel', _M('De',$module));
        $selYear1 = new MSelection('selYear1', $this->getFormValue('selYear1', date('Y')), _M('Duração',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $selYear1->setJsHint('Select the end year', $module);
        $validators[] = new MRequiredValidator('selYear1', _M('Ano',$module), 'required');
        $hctDuration = new MHContainer('hctDuration', array($durationLabel, $selMonth, $initialLabel, $selYear, $middleLabel, $selMonth1, $lastLabel, $selYear1));
        $hctDuration->setShowLabel(false);
        $fields[]  = $hctDuration;

        //Field expiration
        $expirationLabel = new MText('expirationLabel', _M('Expiração da primeira parcela',$module) . ':');
        $expirationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $expirationLabel->setClass('m-caption m-caption-required');
        $selMonth2 = new MSelection('selMonth2', $this->getFormValue('selMonth2', date('m')), _M('Expiração',$module), SAGU::listMonths());
        $selMonth2->setJsHint(_M('Selecione o mês de expiração da primeira parcela', $module));
        $validators[] = new MRequiredValidator('selMonth2', _M('Mês de expiração',$module), 'required');
        $lastLabel1 = new MText('lastLabel', _M('De',$module));
        $selYear2 = new MSelection('selYear2', $this->getFormValue('selYear1', date('Y')), _M('Expiração',$module), SAGU::listYears(date('Y'), date('Y')+10));
        $selYear2->setJsHint(_M('Selecione o ano de expiração da primeira parcela', $module));
        $validators[] = new MRequiredValidator('selYear2', _M('Ano de expiração',$module), 'required');
        $hctExpiration = new MHContainer('hctExpiration', array($expirationLabel, $selMonth2, $lastLabel1, $selYear2));
        $hctExpiration->setShowLabel(false);
        $fields[]      = $hctExpiration;

        //Field date cancelation
        $dateCancellationLabel = new MText('dateCancellationLabel', _M('Data limite de cancelamento',$module) . ':');
        $dateCancellationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dateCancellationLabel->setClass('m-caption m-caption-required');
        $dateCancellation = new MCalendarField('dateCancellation', strlen($this->getFormValue('dateCancellation'))>0 ? $this->getFormValue('dateCancellation') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateCancellation->setJsHint(_M('Informe a data limite de cancelamento', $module));
        $validators[] = new DateDMYValidator('dateCancellation', null, 'required');
        $hctDateCancellation = new MHContainer('hctDateCancellation', array($dateCancellationLabel, $dateCancellation));
        $hctDateCancellation->setShowLabel(false);
        $fields[]            = $hctDateCancellation;

        //Field enroll
        $enrollLabel  = new MText('enrollLabel', 'Re' . strtolower(_M('Matrícula',$module)));
        $enrollLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $enrollCheckBox = new MCheckBox('enrollCheckBox', 'Yes', '', false, '', '2'); 
        $enrollCheckBox->setWidth(20);
        $expirationDateLabel = new MText('expirationDateLabel', _M('Data de expiração', $module) . ':');
        $expirationDateLabel->setClass('m-caption m-caption-required');
        $expirationDate = new MCalendarField('expirationDate', strlen($this->getFormValue('expirationDate'))>0 ? $this->getFormValue('expirationDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $expirationDate->setJsHint(_M('Informe a data de expiração', $module));
        $validators[] = new DateDMYValidator('expirationDate', null, 'required');
        $hctEnroll = new MHContainer('hctEnroll', array($enrollLabel, $enrollCheckBox, $expirationDateLabel, $expirationDate));
        $hctEnroll->setShowLabel(false);
        $fields[]  = $hctEnroll;

        //Field rad option curricular component
        $opts[] = new MOption('optYes', 'Yes', _M('Sim', $module), false);
        $opts[] = new MOption('optNo', 'No', _M('Não', $module), true);
        $radCurricularComponentLabel = new MText('radCurricularComponentLabel', _M('Listar disciplina e turno',$module) . ':');
        $radCurricularComponentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radCurricularComponent = new MRadioButtonGroup('radCurricularComponent', '', $opts, 2, '', 'horizontal', '');
        $radCurricularComponent->setShowLabel(false);
        $hctCurricularComponent = new MHContainer('hctCurricularComponent', array($radCurricularComponentLabel, $radCurricularComponent));
        $hctCurricularComponent->setShowLabel(false);
        $fields[]    = $hctCurricularComponent;
        
        unset($opts);

        //Field rad option file type
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType', 'pdf'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $cd->contractId             = MIOLO::_request('contractId');
        $cd->personId               = MIOLO::_request('personId');
        $cd->personName             = MIOLO::_request('personName');
        $cd->courseId               = MIOLO::_request('courseId');
        $cd->courseName             = MIOLO::_request('courseName');
        $cd->courseVersion          = MIOLO::_request('courseVersion');
        $cd->unitId                 = MIOLO::_request('unitId');
        $cd->learningPeriodId       = MIOLO::_request('learningPeriodId');
        $cd->moneyValue             = MIOLO::_request('moneyValue');
        $cd->parcels                = MIOLO::_request('parcels');
        $cd->fileType               = MIOLO::_request('radFileType');
        $cd->monthDurationBegin     = MIOLO::_request('selMonth');
        $cd->startYear               = MIOLO::_request('selYear');
        $cd->monthDurationEnd       = MIOLO::_request('selMonth1');
        $cd->lastYear               = MIOLO::_request('selYear1');
        $cd->expirationMonth        = MIOLO::_request('selMonth2');
        $cd->expirationYear         = MIOLO::_request('selYear2');
        $cd->dateCancellation       = MIOLO::_request('dateCancellation');
        $cd->enrollCheckBox         = MIOLO::_request('enrollCheckBox');
        $cd->expirationDate         = MIOLO::_request('expirationDate');
        $cd->radCurricularComponent = MIOLO::_request('radCurricularComponent');    

        set_time_limit(0);

        $businessContractDocument = new BusinessAcademicBusContractDocument();
        $data                     = $businessContractDocument->getExtensionContractDocument($cd);

        $businessCompany = new BusinessBasicBusCompany();
        $company         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

        $businessCity = new BusinessBasicBusCity();
        $city         = $businessCity->getCity($legalPerson->cityId);

        $businessCountry = new BusinessBasicBusCountry();
        $country         = $businessCountry->getCountry($city->countryId);

        if ( count($data) > 0 )
        {
            $MIOLO->uses('/core/AgataAPI.class');
            $MIOLO->uses('classes/sagu.class', 'basic');

            $api = new AgataAPI;

            $api->setParameter('$companyId',            $company->companyId);
            $api->setParameter('$courseName',           $cd->courseName);
            $api->setParameter('$companyName',          $company->name);

            $businessPhysicalPerson = new BusinessBasicBusPhysicalPerson();

            $legalResponsable       = $businessPhysicalPerson->getPhysicalPerson($company->legalResponsableId);

            $api->setParameter('$legalResponsableId',   $legalResponsable->name);

            $api->setParameter('$cnpj',                 $legalPerson->cnpj);
            $api->setParameter('$fakeName',             $legalPerson->fakeName);
            $api->setParameter('$companyTypeDescription',$company->companyTypeDescription);
            $api->setParameter('$companyCity',          $city->name);
            $api->setParameter('$companyStateId',       $city->stateId);
            $api->setParameter('$companyLocation',      $legalPerson->location);
            $api->setParameter('$companyNumber',        $legalPerson->number);
            $api->setParameter('$acronym',              $company->acronym);
            $api->setParameter('$currencySymbol',       $country->currencySymbol);
            $api->setParameter('$moneyValue',           $cd->moneyValue);

            if ( strlen($cd->moneyValue) > 0 )
            {
                 $moneyValueParcels = SAGU::calcNumber(SAGU::formatNumber($cd->moneyValue).'/'.SAGU::formatNumber($cd->parcels), true);
            }
            else
            {
                $moneyValueParcels = NULL;
            }

            $api->setParameter('$parcelsXValue'          , $moneyValueParcels);
            $api->setParameter('$parcelsDescription'     , SAGU::extensive('0'.'0'.$cd->parcels));
            $api->setParameter('$parcels'                , $cd->parcels);
            $api->setParameter('$descriptionMoney'       , SAGU::getExtensiveNumber(SAGU::formatNumber($cd->moneyValue), 'REAL', 'REAIS'));
            $api->setParameter('$descriptionParcelsValue', SAGU::getExtensiveNumber($moneyValueParcels, 'REAL', 'REAIS'));
            $api->setParameter('$monthDurationBegin'     , SAGU::getMonth($cd->monthDurationBegin));
            $api->setParameter('$monthDurationEnd'       , SAGU::getMonth($cd->monthDurationEnd));
            $api->setParameter('$startYear'              , $cd->startYear);
            $api->setParameter('$lastYear'               , $cd->lastYear);
            $api->setParameter('$expirationMonth'        , SAGU::getMonth($cd->expirationMonth));
            $api->setParameter('$expirationYear'         , $cd->expirationYear);
            $api->setParameter('$dateCancellation'       , $cd->dateCancellation);
            $api->setParameter('$expirationDate'         , $cd->expirationDate);

            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');
            $api->setDataArray($data);

            $busCompany  = new BusinessBasicBusCompany();
            $company     = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/extensionContract.sxw'));

            if ( $ok && $cd->fileType == 'pdf' )
            {
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.pdf');
                $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');
            }

            if ( !$ok )
            {
                $this->addError(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
            }
            else
            {
                $api->fileDialog();
            }
        }
        else
        {
            $this->addError(_M('Nenhum registro encontrado.', $module));
        }
    }
}

?>
