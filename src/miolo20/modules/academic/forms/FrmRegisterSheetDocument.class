<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Extension document form
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solsi.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 07/10/2006
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmRegisterSheetDocument extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct( _M('Documento de folha de registro', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');
        
        $fields[]   = new MHiddenField('limbo', '');

        //Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $contractPersonId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), !$this->page->isPostBack());
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->enrollData->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        //Field contract
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'parcelsNumber'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato',$module));
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $this->enrollData->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso',$module));
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$this->enrollData->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso',$module));
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName',$this->enrollData->contractCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso',$module));
        $hctContract = new MHContainer('hctContract', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;

        //Field sector
        $sectorLabel = new MText('sectorLabel', _M('Setor', $module).':');
        $sectorLabel->setClass('m-caption m-caption-required');
        $sectorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sectorId     = new MLookupTextField('sectorId', $this->getFormValue('sectorId', $data->sectorId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'sectorName', 'basic', 'Sector', null, null, true);
        $sectorId->setJsHint(_M('Informe o código do setor', $module));
        $validators[] = new MIntegerValidator('sectorId', _M('Setor',$module), 'required');
        $sectorName   = new MTextField('sectorName', $this->getFormValue('sectorName', $data->sectorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $sectorName->setJsHint(_M('Descrição do setor', $module));
        $sectorName->setReadOnly(true);
        $hctSector = new MHContainer('hctSector', array($sectorLabel, $sectorId, $sectorName));
        $hctSector->setShowLabel(true);
        $fields[]  = $hctSector;

        //Field sheet
        $sheetLabel = new MText('sheetLabel', _M('Folha', $module) . ':');
        $sheetLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $sheet = new MTextField('sheet', $this->getFormValue('sheet', $sheet), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $sheet->setJsHint(_M('Informe o número da folha', $module));
        $hctSheet = new MHContainer('hctSheet', array($sheetLabel, $sheet));
        $hctSheet->setShowLabel(true);
        $fields[] = $hctSheet;
        
        //Field rad options file type
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo', $module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);
        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO                    = MIOLO::getInstance();
        $module                   = MIOLO::getCurrentModule();
        $action                   = MIOLO::getCurrentAction();

        $data->personId           = MIOLO::_request('contractPersonId');
        $data->personName         = MIOLO::_request('contractPersonName');
        $data->contractId         = MIOLO::_request('contractId');
        $data->sheet              = MIOLO::_request('sheet');
        $data->fileType           = MIOLO::_request('radFileType');
        $data->sectorDocument     = MIOLO::_request('sectorName');

        $businessCity             = new BusinessBasicBusCity();
        $businessCountry          = new BusinessBasicBusCountry();
        $businessDocument         = new BusinessBasicBusDocument();
        $businessContract         = new BusinessAcademicBusContract();
        $businessMovementContract = new BusinessAcademicBusMovementContract();
        $businessCourse           = new BusinessAcademicBusCourse();
        $businessEducationArea    = new BusinessAcademicBusEducationArea();
        $businessPhysicalPerson   = new BusinessBasicBusPhysicalPersonStudent();
        $businessDiploma          = new BusinessAcademicBusDiploma();
        $businessLegalPerson      = new BusinessBasicBusLegalPerson();
        $businessCompany          = new BusinessBasicBusCompany();
        $company                  = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
        $legalPerson              = $businessLegalPerson->getLegalPerson($company->personId);


        $MIOLO->uses('/core/AgataAPI.class');
        $MIOLO->uses('classes/sagu.class', 'basic');

        $api = new AgataAPI;

        set_time_limit(0);

        if ( (strlen($data->sheet) > 0) || (strlen($data->contractId) > 0) )
        {
            if ( strlen($data->contractId) > 0 )
            {
                $filter3->contractId = $data->contractId;
            }

            if ( strlen($data->sheet) > 0 )
            {
                $filter3->sheet = $data->sheet;
            }

            $diplomaData    = $businessDiploma->searchDiploma($filter3);

            if ( is_array($diplomaData) > 0 )
            {
                foreach($diplomaData as $key1 => $values)
                {
                    $key = $key1+1;
                    $data->contractId  = $values[1];
                    $diplomaData[0][0] = $values[0]; //registerNumber
                    $diplomaData[0][2] = $values[2]; //sheet
                    $diplomaData[0][3] = $values[3]; //book

                    $contract              = $businessContract->getContract($data->contractId);
                    $physicalPerson        = $businessPhysicalPerson->getPhysicalPersonStudent($contract->personId);
                    $fatherPerson          = $businessPhysicalPerson->getPhysicalPerson($physicalPerson->fatherId);
                    $motherPerson          = $businessPhysicalPerson->getPhysicalPerson($physicalPerson->motherId);

                    $cityBirth             = $businessCity->getCity($physicalPerson->cityIdBirth);

                    if ( strlen($physicalPerson->countryIdBirth) > 0 )
                    {
                        $countryNationality    = $businessCountry->getCountry($physicalPerson->countryIdBirth);
                    }

                    $document              = $businessDocument->getDocument($contract->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'));

                    if ( strlen($document->cityId) > 0 )
                    {
                        $cityDocument          = $businessCity->getCity($document->cityId);
                    }

                    $documentEleitoral     = $businessDocument->getDocument($contract->personId, SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_ELECTORAL_QUIT'));

                    $firstMovementContract = $businessMovementContract->getFirstMovementContractDiploma($data->contractId);
                    $course                = $businessCourse->getCourse($contract->courseId);

                    if ( strlen($course->educationAreaId) > 0 )
                    {
                        $educationArea         = $businessEducationArea->getEducationArea($course->educationAreaId);
                    }

                    if ( strlen($contract->diplomaDate) > 0 )
                    {
                        if ( count($data) > 0 )
                        {
                            $api->setParameter('$institution', $legalPerson->name);

                            $api->setParameter('$companyCity', ucfirst(strtolower($legalPerson->cityName)));

                            $api->setParameter('$companyState', $legalPerson->stateId);

                            $api->setParameter('$companyTypeDescription',  $company->companyTypeDescription);

                            $api->setParameter('$companySector', $data->sectorDocument);

                            $api->setParameter('$sheet',             $diplomaData[0][2]);
                            eval('$api->setParameter(\'$personName'.$key.'\',   $data->personName);');

                            $api->setParameter('$personId'.$key,     $data->personId);
                            $api->setParameter('$dateBirth'.$key,    $physicalPerson->dateBirth);

                            $api->setParameter('$documentId'.$key,   $document->content);
                            $api->setParameter('$organ'.$key,        $document->organ);
                            $api->setParameter('$stateOrgan'.$key,   $cityDocument->stateId);

                            $naturalidade = $cityBirth->name . ' / ' . $cityBirth->stateId;

                            $api->setParameter('$naturalidade'.$key, $naturalidade);
                            $api->setParameter('$nationality'.$key,  $countryNationality->nationality);

                            $api->setParameter('$codCourse'.$key,    $course->courseId);
                            $api->setParameter('$courseName'.$key,   $course->name);
                            $api->setParameter('$grauCourse'.$key,   $contract->degree);

                            $api->setParameter('$recognitionDocumentNumber'.$key,     $course->recognitionDocumentNumber);

                            $api->setParameter('$diplomaDate'.$key,  $contract->diplomaDate);

                            $api->setParameter('$fatherName'.$key,   $fatherPerson->name);
                            $api->setParameter('$motherName'.$key,   $motherPerson->name);

                            $api->setParameter('$book'.$key,         $diplomaData[0][3]);
                            $api->setParameter('$registerNumber'.$key, $diplomaData[0][0]);
                        }
                    }
                    else
                    {
                        //Data de diploma nula.
                        $this->addError(_M('Este aluno não possui uma data de diploma', $module));
                    }
                }

                $api->setLanguage($MIOLO->getConf('i18n.language'));
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');

                $dataAgata[0][0] = 'A';

                $api->setDataArray($dataAgata);

                $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/registerSheet.sxw'));

                if ( $ok && $data->fileType == 'pdf' )
                {
                    $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.pdf');
                    $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/contract.sxw');
                }

                if ( !$ok )
                {
                    $this->addError(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
                }
                else
                {
                    $api->fileDialog();
                }
            }
            else
            {
                $this->addError(_M('Não há dados de diploma para as informações fornecidas.', $module));
            }
        }
        else
        {
            $this->addError(_M('Um contrato ou uma folha deve ser informado.', $module));
        }
    }
}

?>
