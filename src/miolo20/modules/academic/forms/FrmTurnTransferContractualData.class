<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelos dados contratuais da transferencia de turno
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 02/09/2011
 *
 **/
class FrmTurnTransferContractualData extends FrmTurnTransfer
{
    public function __construct($steps = null)
    {
        parent::__construct($steps, __CLASS__);
    }

    
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( $this->isFirstAccess() )
        {
            $this->cleanStepData();
            $MIOLO->session->set('degreesChanged', null);
            $MIOLO->session->set('frequenciesChanged', null);
            $MIOLO->session->set('turnTransfer', null);
        }

        //Load data
        $stepData = $this->getStepData();

        $fields[] = new MSeparator();

        //
        // BaseGroup Contrato a transferir
        //
        $controls = array();

        $fields[] = new SHiddenField('limbo');        //Campo pessoa
        $personAutoComplete = array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription', 'classId', 'classDescription');
        $personFilters = array('personId' => 'personId');        
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        if( $readOnly )
        {
            $personId = new MTextField('personId', $data->personId, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $personId->setJsHint(_M('Informe o código da pessoa', $module));
            $personId->setReadOnly(true);
        }
        else
        {
            $personId = new MLookupTextField('personId', $data->personId, _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, $personAutoComplete, $module, 'ActivePersonContract', null, $personFilters, !$this->page->isPostBack());
            $personId->setJsHint(_M('Informe o código da pessoa', $module));        
        }

        $validators[] = new MIntegerValidator('personId', '', 'optional');
        $personName = new MTextField('personName', $data->personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        
        //Campo contrato
        $contractAutoComplelte = array('personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'classId', 'classDescription');
        $contractFilters = array('personId' => 'personId', 'contractId' => 'contractId');
        $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractLabel->setClass('m-caption m-caption-required');

        if( $readOnly )
        {
            $contractId = new MTextField('contractId', $data->contractId, _M('Contrato', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $contractId->setJsHint(_M('Informe o código do contrato', $module));
            $contractId->setReadOnly(true);
        }
        else
        {
            $contractId = new MLookupTextField('contractId', $data->contractId, _M('Contrato', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, $contractAutoComplelte, 'academic', 'ActiveContract', null, $contractFilters, !$this->page->isPostBack());
            $contractId->setJsHint(_M('Informe o código do contrato', $module));          
        }

        $contractCourseId = new MTextField('courseId', $data->courseId, _M('Curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseId->setReadOnly(true);
        $contractCourseVersion = new MTextField('courseVersion', $data->courseVersion, _M('Versão', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseName = new MTextField('courseName', $data->courseName, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $contractCourseName->setReadOnly(true);
        $hctContract = new MHContainer('hctContractS', array($contractLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(false);
        
        $validators[] = new MRequiredValidator('contractId', _M('Contrato', $module));

        //Campo turno
        $turnLabel = new MText('turnLabel', _M('Turno', $module) . ':');
        $turnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $turnId = new MTextField('turnId', $data->turnId, _M('Turno', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $turnId->setJsHint(_M('Código do turno', $module));
        $turnId->setReadOnly(true);
        $turnDescription = new MTextField('turnDescription', $data->turnDescription, _M('Turno', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $turnDescription->setJsHint(_M('Descrição do turno', $module));
        $turnDescription->setReadOnly(true);
        $hctTurn = new MHContainer('hctTurn', array($turnLabel, $turnId, $turnDescription));
        $hctTurn->setShowLabel(false);        

        //Campo unidade
        $unitLabel = new MText('unitLabel', _M('Unidade', $module) . ':');
        $unitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $unitId = new MTextField('unitId', $data->unitId, _M('Unidade', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $unitId->setJsHint(_M('Código da unidade', $module));
        $unitId->setReadOnly(true);
        $unitDescription = new MTextField('unitDescription', $data->unitDescription, _M('Descrição da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $unitDescription->setJsHint(_M('Descrição da unidade', $module));
        $unitDescription->setReadOnly(true);
        $hctUnit = new MHContainer('hctUnit', array($unitLabel, $unitId, $unitDescription));
        $hctUnit->setShowLabel(false);
                
        // Field pupil class                
        $classId = new MTextField('classId', $data->classId, _M('Turma', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $classId->setJsHint(_M('Código da turma', $module));
        $classId->setReadOnly(true);        
        $classLabel = new MText('classLabel', _M('Turma', $module) . ':');
        $classLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $classLabel->setClass('m-caption m-caption-required');        
        $classDescription = new MTextField('classDescription', $data->classDescription, '', 30);
        $classDescription->setReadOnly(true);
        $classDescription->setJsHint(_M('Nome da turma', $module));
        $hctClass = new MHContainer('hctClass', array($classLabel, $classId, $classDescription));
        $hctClass->setShowLabel(false);

        //Basegroup Contrato a transferir
        $fields[] = new MBaseGroup('bsgContractToTransfer', _M('Contrato a transferir', $module), array($hctPerson, $hctContract, $hctTurn, $hctUnit, $hctClass), 'vertical');


        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', $this->getFormValue('periodId', SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID')), _M('Período', $module), $businessPeriod->listPeriod(), true );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;
        $validators[] = new MRequiredValidator('periodId', _M('Período', $module));
        
        $fields[] = new MSeparator();

        $fields[] = $bgr = new sBaseGroup('bgrCAT', _M('Contrato a transferir', $module), $controls);

        //
        // BaseGroup Turno de destino
        //
        $controls = array();

        // Turno
        $busTurn = new BusinessBasicBusTurn();
        $controls[] = $turn = new MSelection('destinationTurnId', $this->getRequestValue('destinationTurnId', $stepData->destinationTurnId), _M('Turno', $module), $busTurn->listTurn());
        $validators[] = new MRequiredValidator('destinationTurnId', _M('Turno', $module));
        
        $fields[] = $bgr = new sBaseGroup('bgrTDD', _M('Turno de destino', $module), $controls);

        // Nova turma
        $fields[] = new SLookupContainer('destinationClassId', $this->getRequestValue('destinationClassId', $stepData->destinationClassId), array(
            'item' => 'Class',
            'module' => 'academic',
            'label' => _M('Nova turma', $module),
            'required' => true,
            'filter' => array('courseId'=>'courseId', 'courseVersion'=>'courseVersion'),
        ));
        $validators[] = new MRequiredValidator('destinationClassId', _M('Nova turma', $module));

        
        // Motivo
        $busReason = new BusinessAcademicBusReason();
        $list = $busReason->listReasonByStateContract(SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO'));
        $fields[] = $reason = new MSelection('reasonId', $this->getRequestValue('reasonId', $stepData->reasonId), _M('Motivo', $module), $list);
        $validators[] = new MRequiredValidator('reasonId', _M('Motivo', $module));

        $fields[] = new SHiddenField('oldTurnId');
        $fields[] = new SHiddenField('_unitId');

        $fields[] = new MSeparator();

        $this->setValidators($validators);
        $this->setFields($fields);
    }

    
    public function nextStepButton_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->session->setValue('old_turnId', $this->GetFormValue("destinationTurnId"));
        
        $this->executeProcess($args);
    }
}
?>