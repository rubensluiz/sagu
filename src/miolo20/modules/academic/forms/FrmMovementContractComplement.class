<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Form to manipulate acdMovementContractComplement table records
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/09/2005
 */

class FrmMovementContractComplement extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcdMovementContractComplement(), array('contractId', 'stateContractId', 'stateTime', 'stateContractFieldId'), 'BusMovementContractComplement');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $contractId = MIOLO::_REQUEST('contractId');
            $stateTime = MIOLO::_REQUEST('stateTime');
            $stateContractId = MIOLO::_REQUEST('stateContractId');
            $stateContractFieldId = MIOLO::_REQUEST('stateContractFieldId');

            $business = new BusinessAcademicBusMovementContractComplement();
            $data = $business->getMovementContractComplement($contractId, $stateContractId, $stateContractFieldId, $stateTime);
            $fields[] = new MHiddenField('contractId', $contractId);
            $fields[] = new MHiddenField('stateTime', $stateTime);
            $fields[] = new MHiddenField('stateContractId', $stateContractId);
            $fields[] = new MHiddenField('stateContractFieldId', $stateContractFieldId);

            $fields[] = new MTextLabel('contractId', $contractId, _M('Contrato',$module));
            $fields[] = new MTextLabel('contractPersonId', $data->contractPersonId . ' - ' . $data->contractPersonName, _M('Pessoa',$module));
            $fields[] = new MTextLabel('stateDescription', $stateContractId . ' - ' . $data->stateDescription, _M('Descrição do estado',$module));
            $fields[] = new MTextLabel('stateContractFieldDescription', $stateContractFieldId . ' - ' . $data->stateContractFieldDescription, _M('Campo do estado contratual',$module));
            $fields[] = new MTextLabel('stateTime', $data->stateTime, _M('Horário',$module));
        }
        else
        {
            // Field person
            $personLabel = new MText('personLabel', _M('Pessoa',$module) . ':');
            $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId', $this->contractPersonId->value), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), !$this->page->isPostBack());
            $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName', $data->contractPersonName), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $contractPersonName->setReadOnly(true);
            $contractPersonName->setJsHint(_M('Nome da pessoa',$module));
            $hctPerson = new MHContainer('hctPerson', array($personLabel, $contractPersonId, $contractPersonName));
            $hctPerson->setShowLabel(true);
            $fields[] = $hctPerson;

            // Field contract
            $contractLabel= new MText('contractLabel', _M('Contrato',$module) . ':');
            $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contractLabel->setClass('m-caption m-caption-required');
            $flds[] = $contractLabel;
            $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'courseId', 'courseName', 'courseVersion'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
            $contractId->setJsHint(_M('Informe o código do contrato',$module));
            $flds[] = $contractId;
            $validators[] = new MIntegerValidator('contractId', _M('Contrato',$module), 'required');

            // Field course
            $courseId = new MTextField('courseId', $this->getFormValue('courseId',$this->courseId->value), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseId->setReadOnly(true);
            $courseId->setJsHint(_M('Código do curso',$module));
            $flds[] = $courseId;
            $courseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion',$this->courseVersion->value), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $courseVersion->setReadOnly(true);
            $courseVersion->setJsHint(_M('Versão do curso',$module));
            $flds[] = $courseVersion;
            $courseName = new MTextField('courseName', $this->getFormValue('courseName',$this->courseName), '', 30);
            $courseName->setReadOnly(true);
            $courseName->setJsHint(_M('Nome do curso',$module));
            $flds[] = $courseName;
            $hctContract = new MHContainer('hctContract', $flds);
            $hctContract->setShowLabel(true);
            $fields[] = $hctContract;
            unset($flds);

            $fields[] = new MHiddenField('limbo');

            // movimentacao contratual
            $movementContractLabel = new MText('movementContractLabel', _M('Movimentação contratual',$module) . ':');
            $movementContractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $flds[] = $movementContractLabel;
            $movementContractId = new MLookupField('movementContractId', $this->getFormValue('movementContractId', $data->movementContractId), '', '', 'limbo, limbo, stateContractId, stateDescription, stateTime', $module, 'MovementContract', null, array('contractId' => 'contractId'), false);
            $movementContractId->setJsHint(_M('Movimentação contratual',$module));
            $flds[] = $movementContractId;
            $flds[] = new MLabel(_M('Clique no botão ao lado e selecione uma movimentação contratual', $module),'blue');
            $hctMovementContract = new MHContainer('hctMovementContract', $flds);
            $hctMovementContract->setShowLabel(true);
            $fields[] = $hctMovementContract;
            unset($flds);

            // estado contratual
            $stateContractLabel= new MText('stateContractLabel', _M('Estado contratual',$module) . ':');
            $stateContractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $stateContractLabel->setClass('m-caption m-caption-required');
            $flds[] = $stateContractLabel;
            $stateContractId = new MLookupTextField('stateContractId', $this->getFormValue('stateContractId', $data->stateContractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'stateDescription, stateTime', $module, 'StatesContract', null, null, true);
            $stateContractId->setJsHint(_M('Código do estado contratual',$module));
            $stateContractId->setReadOnly(true);
            $flds[] = $stateContractId;
            $validators[] = new MIntegerValidator('stateContractId', _M('Estado contratual',$module), 'required');
            $stateDescription = new MTextField('stateDescription', $this->stateDescription->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $stateDescription->setReadOnly(true);
            $stateDescription->setJsHint(_M('Descrição do estado contratual',$module));
            $flds[] = $stateDescription;
            $hctStateContract = new MHContainer('hctStateContract', $flds);
            $hctStateContract->setShowLabel(true);
            $fields[] = $hctStateContract;
            unset($flds);

            // tempo
            $stateTime = $this->getFormValue('stateTime', $data->stateTime);
            $stateTime = new MTextField('stateTime', $stateTime, _M('Horário do estado',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE') * 2);
            $stateTime->setReadOnly(true);
            $fields[] = $stateTime;
            $stateContractFieldLabel= new MText('stateContractFieldLabel', _M('Campo do estado contratual',$module) . ':');
            $stateContractFieldLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $stateContractFieldLabel->setClass('m-caption m-caption-required');
            $flds[] = $stateContractFieldLabel;
            $fields[] = new MHiddenField('hideOptions', DB_TRUE);

            // Field state contract field
            $stateContractFieldId = new MLookupTextField('stateContractFieldId', $this->getFormValue('stateContractFieldId', $data->stateContractFieldId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, limbo, stateContractFieldDescription', $module, 'ContractStateField', null, array('stateContractId' => 'stateContractId', 'hideOptions' => 'hideOptions'), true);
            $stateContractFieldId->setJsHint(_M('Código do campo do estado contratual',$module));
            $validators[] = new MIntegerValidator('stateContractFieldId', _M('Campo do estado contratual',$module), 'required');
            $flds[] = $stateContractFieldId;
            $stateContractFieldDescription = new MTextField('stateContractFieldDescription', $this->getFormValue('stateContractFieldDescription', $data->stateContractFieldDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $stateContractFieldDescription->setReadOnly(true);
            $stateContractFieldDescription->setJsHint(_M('Descrição do campo do estado contratual',$module));
            $flds[] = $stateContractFieldDescription;
            $hctStateContractField = new MHContainer('hctStateContractField', $flds);
            $hctStateContractField->setShowLabel(true);
            $fields[] = $hctStateContractField;
            unset($flds);
        }

        // Field value
        $value = new MTextField('value', $this->getFormValue('value', $data->value), _M('Complemento', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $value->setJsHint(_M('Informe o valor',$module));
        $validators[] = new MRequiredValidator('value', _M('Complemento', $module));
        $fields[] = $value;

        parent::defineFields($fields, $validators, $data);
    }
}
?>