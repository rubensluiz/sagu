<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * ScholarshipDescriptionAfterGraduation form
 *
 * @author Andre Chagas Dias [andre@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 19/11/2008
 *
 **/

/**
 * Form to manipulate a scholarshipDescription
 **/
class FrmScholarshipDescriptionAfterGraduation extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module     = MIOLO::getCurrentModule();
        parent::__construct( _M('Histórico pós-graduação', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $fields[] = new MDiv('divImprimir');

        //Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('contractPersonId', $this->getFormValue('contractPersonId',$this->contractPersonId->value), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), $module, 'PersonContract', null, array('personId' => 'contractPersonId'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MRequiredValidator('contractPersonId', _M('Pessoa', $module));
        $contractPersonName = new MTextField('contractPersonName', $this->getFormValue('contractPersonName',$this->enrollData->contractPersonName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

                
        //Field contract
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName'), $module, 'Contract', null, array('personId' => 'contractPersonId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato',$module));
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $data->contractCourseId), _M('Curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseId->setReadOnly(true);
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion', $data->contractCourseVersion), _M('Versão do curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName', $data->contractCourseName), _M('Nome do curso', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $contractCourseName->setReadOnly(true);
        $hctContract = new MHContainer('hctContract', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(false);
        $fields[]    = $hctContract;
        
        //Field report type
        $reportTypesLabel = new MText('reportTypesLabel', _M('Tipo de relatório', $module) . ':');
        $reportTypesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $reportTypes = array( array(_M('Especialização', $module), 1),
                              array(_M('Mestrado', $module), 2) );

        if ( !strlen($data->scholarshipType) > 0 )
        {
            $data->scholarshipType = 1;
        }

        $scholarshipType = new MRadioButtonGroup('scholarshipType', '', $reportTypes, $this->getFormValue('scholarshipType', $data->scholarshipType), '', 'vertical');
        $scholarshipType->setShowLabel(false);
        $hctScholarshipType = new MHContainer('hctCcholarshipType', array($reportTypesLabel, $scholarshipType));
        $fields[] = $hctScholarshipType;
        
        //Field emission date
        $emissionDate = new MCalendarField('emissionDate', strlen($this->getFormValue('emissionDate', $data->emissionDate))>0 ? $this->getFormValue('emissionDate', $data->emissionDate) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data de emissão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $emissionDate->setJsHint(_M('Informe a data de emissão', $module));
        $fields[] = $emissionDate;
        $validators[] = new DateDMYValidator('emissionDate', _M('Data de emissão', $module), 'required');
        
        if ( SAGU::getParameter('ACADEMIC', 'SCHOLARSHIP_DESCRIPTION_DOCUMENT_EXTRA_PARAMS') == 'YES' )
        {        
            $busStamp = new BusinessBasicBusStamp();
            $fields[] = new MSelection('carimbo1', null, _M('Carimbo 1'), $busStamp->listStamp());
        }
        
        $fields[] = new Separator('');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }
    
    /**
     * Method to get data and generate the report
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $data   = $this->getTypesData();
        $data->ignoreDebits   = MIOLO::_request('ignoreDebits');

        $havePermission = false;
        
        if ( (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') && (strtoupper(SAGU::getParameter('BASIC', 'WARNING_IF_DEFAULTER')) == 'TRUE') )
        {
            if ( $data->ignoreDebits != 'yes' )
            {
                $busEnrollConfig   = new BusinessAcademicBusEnrollConfig();
                $business = new BusinessFinanceBusGeneralQueries();
                $businessContract = new BusinessAcademicBusContract();

                $debt = $business->getDefaulterDebt($data->contractId, false);
                $debt = strlen($debt) > 0 ? $debt : 0;
    
                //Verifica se o aluno possui débitos financeiros
                if ( $debt > 0 )
                {
                    $this->addError(_M('O sistema detectou uma dívida com a instituição. Por favor, verifique com o setor financeiro.', $module));
                    
                    $contract     = $businessContract->getContract($data->contractId);
                    $enrollConfig = $busEnrollConfig->getCourseEnrollConfig($contract->courseId, $contract->courseVersion, $contract->turnId, $contract->unitId);
                    
                    if ( $MIOLO->checkAccess('FrmScholarshipDescriptionAfterGraduatuion', A_ADMIN, false, true) || $enrollConfig->blockDebt == DB_FALSE)
                    {
                        $this->addField(new SHiddenField('ignoreDebits','yes'));
                        
                        $this->addError(_M('Se desejar continuar mesmo assim, clique no botão "Imprimir" abaixo.', $module));
                                              
                        $js[] = SForm::getAjaxAction('doImprimir', 'divImprimir');
                        
                        $this->page->onload(implode("\n", $js));
                    }
                }
                else 
                {
                    $havePermission = true;
                }
            }
            else 
            {
                $havePermission = true;
            }
        }
        else 
        {
            $havePermission = true;
        }

        if ( $havePermission )
        {
            $options['module'] = $module;
            
            $options['parameters']['contractid'] = (int) $data->contractId;
            $options['parameters']['emissiondate'] = $data->emissionDate;            
            
            if ( MIOLO::_REQUEST('carimbo1') )
            {
                $options['parameters']['carimbo1'] = (integer) MIOLO::_REQUEST('carimbo1');
            }
            
            $report = new SReport($options);            
            if( $data->scholarshipType == 1 )
            {
                $report->setReportName('scholarshipDescriptionAfterGraduationSpecialization');
            }
            else
            {
                $report->setReportName('scholarshipDescriptionAfterGraduationMaster');
            }
            $report->generate();
        }
    }

    /**
     * Method to get data information when the form is submitted
     **/
    public function getTypesData()
    {
        $data->contractPersonId      = $this->contractPersonId->value;
        $data->contractPersonName    = $this->contractPersonName->value;
        $data->contractCourseId      = $this->contractCourseId->value;
        $data->contractCourseVersion = $this->contractCourseVersion->value;
        $data->contractCourseName    = $this->contractCourseName->value;
        $data->contractId            = $this->contractId->value;
        $data->emissionDate          = $this->emissionDate->value;
        $data->scholarshipType       = $this->scholarshipType->value;
        $data->carimbo1              = $this->carimbo1->value;

        return $data;
  }
  
  public function doImprimir($args)
  {
      $button = new MButton('btn_new_print', _M('Imprimir'));
      $button->setAttribute('style','margin-left:46%');
      
      return $button;
  }
}

?>
