<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário responsável pelo cadastro de ênfase
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 25/02/2011
 *
 **/

class FrmStageChooser extends SStepByStepForm
{
    public function __construct($steps = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        }
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ($this->isFirstAccess())
        {
            $this->cleanStepData();
        }

        // Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $businessPeriod->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $fields[] = $courseOccurrenceLookup;

        // Filtro para lookup (filtro estatico para filtrar apenas por disciplinas do tipo ESTAGIO)
        $fields[] = new MHiddenField('_curricularComponentTypeId', SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_TYPE_STAGE'));

        // Disciplina oferecida (filtrando por tipo Estagio)
        $groupIdLabel = new MText('groupIdLabel', _M('Disciplina oferecida', $module) . ':');
        $groupIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $groupIdLabel->setClass('m-caption m-caption-required');
        $groupId = new MLookupTextField('groupId', null, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'groupIdDescription', $module, 'Group', null, array('_curricularComponentTypeId' => '_curricularComponentTypeId', 'courseId'=>'courseId', 'courseVersion'=>'courseVersion', 'turnId'=>'turnId', 'unitId'=>'unitId', 'periodId'=>'periodId'), true);
        $groupId->setJsHint(_M('Informe o código da disciplina oferecida', $module));
        $validators[] = new MIntegerValidator('groupId', _M('Disciplina oferecida', $module), 'required');
        $groupIdDescription = new MTextField('groupIdDescription', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $groupIdDescription->setJsHint(_M('Descrição da disciplina oferecida', $module));
        $groupIdDescription->setReadOnly(true);
        $fields[] = $groupIdCnt = new MHContainer('groupIdCnt', array($groupIdLabel, $groupId, $groupIdDescription));
        $groupIdCnt->setShowLabel(true);

        $this->setFields($fields);
        $this->setValidators($validators);
    }

    /*
     * Ação do botão proxima etapa
     */
    public function nextStepButton_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $data = $this->getData();

        // Business group
        $busGroup = new BusinessAcademicBusGroup();

        try
        {
            // Verifica se a disciplina é valida
            $filters = new stdClass();
            $filters->groupId = $data->groupId;
            $filters->curricularComponentTypeId = SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_TYPE_STAGE');
            $dados = $busGroup->searchGroup($filters,false);

            if ( !is_array($dados) )
            {
                throw new Exception( _M('O código da disciplina oferecida informado está inválido', $module).'.' );
            }
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
            return;
        }

        parent::nextStepButton_click($_args);
    }
}
?>
