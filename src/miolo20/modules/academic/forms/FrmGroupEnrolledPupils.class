<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Formulário de digitação de notas por grupo de disciplina
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2005
 *
 **/
class FrmGroupEnrolledPupils extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(null, null, null, _M('Digitação de notas por grupo', $module));
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Obtem os parâmetros da passados pela grid
        $periodId = MIOLO::_REQUEST('periodId');
        $courseId = MIOLO::_REQUEST('courseId');
        $courseVersion = MIOLO::_REQUEST('courseVersion');
        $turnId = MIOLO::_REQUEST('turnId');
        $unitId = MIOLO::_REQUEST('unitId');
        $curricularComponentGroupId = MIOLO::_REQUEST('curricularComponentGroupId');
        $classId = MIOLO::_REQUEST('classId');

        // Filtros
        $fields[] = new MHiddenField('periodId', $periodId);
        $fields[] = new MHiddenField('courseId', $courseId);
        $fields[] = new MHiddenField('courseVersion', $courseVersion);
        $fields[] = new MHiddenField('turnId', $turnId);
        $fields[] = new MHiddenField('unitId', $unitId);
        $fields[] = new MHiddenField('curricularComponentGroupId',$curricularComponentGroupId );
        $fields[] = new MHiddenField('classId', $classId);

        // Disable buttons
        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->disableButton('tbBtnPrint');

        // Grupo
        $bussinessCurricularComponentGroup = new BusinessAcademicBusCurricularComponentGroup();
        $curricularComponent = $bussinessCurricularComponentGroup->getCurricularComponentGroup($curricularComponentGroupId);
        $curricularComponentGroupLabel = new MText('curricularComponentGroupLabel', _M('Grupo',$module) .':');
        $curricularComponentGroupLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentGroup = new MTextLabel('curricularComponentGroupName',$curricularComponent->curricularComponentGroupName);
        $baseData[] = new MHContainer('hctPeriod', array($curricularComponentGroupLabel,$curricularComponentGroup));

        // Período
        $periodLabel = new MText('periodLabel', _M('Período',$module) .':');
        $periodLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $period = new MTextLabel('period', $periodId);
        $baseData[] = new MHContainer('hctPeriod', array($periodLabel,$period));

        $colTitle[] = _M('Código da disciplina',$module) . '/' . _M('versão', $module);
        $colTitle[] = _M('Nome da disciplina',$module);
        $colTitle[] = _M('Créditos acadêmicos',$module);
        $colTitle[] = _M('Horas acadêmicas',$module);
        $colTitle[] = _M('Tipo de disciplina',$module);

        $filters = new stdClass();
        $filters->courseId = $courseId;
        $filters->courseVersion = $courseVersion;
        $filters->courseTurnId = $turnId;
        $filters->courseUnitId = $unitId;
        $filters->curricularComponentGroupId = $curricularComponentGroupId;

        // Obtem as disciplinas
        $businessCurriculum = new BusinessAcademicBusCurriculum();
        $dataCurriculum = $businessCurriculum->searchCurriculumComponent($filters);

        // Bus group
        $businessGroup = new BusinessAcademicBusGroup();

        $isClosed = DB_FALSE;
        $msg = _M('Os dados não podem ser alterados', $module).'</ul></li>';
        foreach( (array)$dataCurriculum as $key=>$line )
        {
            // Verifica se a disciplina oferecida não esta fechada, se tiver exibe uma mensagem.
            $filterGroup = new stdClass();
            $filterGroup->curriculumId = $line[0];
            $filterGroup->periodId = $periodId;
            $groups = $businessGroup->searchGroup($filterGroup);

            foreach ( (array)$groups as $group )
            {
                $columnIsClosed = $group[10];
                if( $columnIsClosed  == DB_TRUE )
                {
                    $msg .= '<ul><li>' ._M('A disciplina oferecida de código @1 está fechada, portanto não é permitida qualquer alteração, para alterar algum dado reabra a oferecida', $module, $group[0]).'.'.'</ul></li>';
                    $isClosed = DB_TRUE;
                }
            }

            $dataResult[$key][0] = $line[1];
            $dataResult[$key][1] = $line[2];
            $dataResult[$key][2] = $line[3];
            $dataResult[$key][3] = $line[4];
            $dataResult[$key][4] = $line[5];
        }

        // Se tiver uma ou mais disciplinas oferecidas fechadas.
        if ( $isClosed == DB_TRUE )
        {
            $this->toolbar->disableButton('tbBtnSave');
            $this->AddAlert($msg);
        }

        $baseData[] = new MTableRaw(_M('Disciplinas',$module), $dataResult,$colTitle);
        $fields[] = new MBaseGroup('baseInformation', _M('Informações do grupo de disciplinas',$module), $baseData, 'vertical');
        $fields[] = new MSeparator();
        $fields[] = new MDiv('divEdit', null);
        $fields[] = new MHiddenField('conceptGroupId', $group[13]);

        // Tabela de alunos matriculados nas disciplinas
        unset($filters);
        $filters = new stdClass();
        $filters->periodId = $periodId;
        $filters->courseId = $courseId;
        $filters->courseVersion = $courseVersion;
        $filters->turnId = $turnId;
        $filters->unitId = $unitId;
        $filters->curricularComponentGroupId = $curricularComponentGroupId;
        $filters->classId = $classId;
        $filters->existingContractInDisciplines = DB_TRUE;

        $businessDegreeCurricularComponentGroup = new BusinessAcademicBusDegreeCurricularComponentGroup();
        $dataEnrolledPupils = $businessDegreeCurricularComponentGroup->searchEnrolledPupilsOfDisciplineGroup($filters);

        // Business enroll status
        $businessEnrollStatus = new BusinessAcademicBusEnrollStatus();

        unset($dataResult);
        foreach( (array)$dataEnrolledPupils as $key=>$line )
        {
            list($learningPeriodId,
                 $contractId,
                 $learningPeriodDescription,
                 $personId,
                 $personName,
                 $gradesByConcept) = $line;

            $dataResult[$key][0] = $personId;
            $dataResult[$key][1] = $personName;
            $dataResult[$key][2] = $learningPeriodDescription;

            // Obtém a ultima nota registrada para o mesmo período letivo e contrato
            $evaluationValue = $businessDegreeCurricularComponentGroup->getDegreeEnrollCurrentGrade($learningPeriodId, $contractId,$curricularComponentGroupId, $gradesByConcept == DB_TRUE ? true : false);

            // Campo onde sera digitado a nota correspondente ao aluno
            $fieldNote = new MTextField('evaluation[' . $learningPeriodId . '][' . $contractId . ']', $evaluationValue->evaluation, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $fieldNote->addAttribute('onChange', $this->getAjaxAction('validateNote', 'divEnrollStatus['.$learningPeriodId.']['.$contractId.']' ,false, array('gradesByConcept'=>$gradesByConcept, 'learningPeriodId'=>$learningPeriodId, 'contractId'=>$contractId)));

            // Hidden field com o valor do status
            $fieldStatus = new MHiddenField('enrollStatus[' . $learningPeriodId . '][' . $contractId . ']', $evaluationValue->enrollStatusId, null);
            $fieldEnrollStatusDescription = new MTextLabel('enrollStatusDescription[' . $learningPeriodId . '][' . $contractId . ']', null, null, 15);
            $fieldEnrollStatusDescription->setReadOnly(true);
            $divEnrollStatus = new MDiv('divEnrollStatus['.$learningPeriodId.']['.$contractId.']', array($fieldStatus, $fieldEnrollStatusDescription));

            // Se ja tiver valor no campo de nota seta readonly e abilita botão de edição
            if ( (strlen($evaluationValue->evaluation)>0) || $isClosed==DB_TRUE )
            {
                $fieldNote->setReadOnly(true);
                // Botão de edição
                if ( strlen($evaluationValue->evaluation)>0 )
                {
                    $linkEdit = new MImageLink($learningPeriodId.$contractId , _M('Editar',$module),$this->getAjaxAction('showPopUpEdit', 'divEdit', true, array('learningPeriodId'=>$learningPeriodId, 'contractId'=>$contractId, 'gradesByConcept'=>$gradesByConcept, 'isClosed'=>$isClosed)) , $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'edit.png') );
                }
                // Campo escondifo para o status
                $fieldStatus = new MHiddenField('enrollStatus[' . $learningPeriodId . '][' . $contractId . ']', $evaluationValue->enrollStatusId?$evaluationValue->enrollStatusId:null);
                $oldEnrollStatus = $evaluationValue->enrollStatusId ? $businessEnrollStatus->getEnrollStatus($evaluationValue->enrollStatusId):null;
                //Campo visível ao usuario na edição
                $fieldEnrollStatusDescription = new MTextLabel('enrollStatusDescription[' . $learningPeriodId . '][' . $contractId . ']', $oldEnrollStatus->description, null, 15);
                $fieldEnrollStatusDescription->setReadOnly(true);
                //Motivo da alteração
                $fieldDescription = new MHiddenField('description[' . $learningPeriodId . '][' . $contractId . ']', null);
                $divEnrollStatus =  new MDiv("divEnrollStatus[$learningPeriodId][$contractId]", array($fieldStatus, $fieldEnrollStatusDescription));
            }

            $dataResult[$key][3] = array($fieldNote->generate(), $linkEdit ? $linkEdit->generate() : null, $fieldDescription ? $fieldDescription : null );
            $dataResult[$key][4] = array($divEnrollStatus ? $divEnrollStatus->generate() : null);

            unset($linkEdit);
            unset($divEnrollStatusDescription);
            unset($fieldDescription);
        }

        $fields[] = new MHiddenField('gradesByConcept',$gradesByConcept);
        unset($colTitle);
        $colTitle[] = _M('Código',$module);
        $colTitle[] = _M('Nome',$module);
        $colTitle[] = _M('Período letivo',$module);
        $colTitle[] = _M('Nota',$module);
        $colTitle[] = _M('Estado',$module);

        $tableEnrollPupils[] = new MTableRaw(null, $dataResult, $colTitle);
        $fields[] = new MBaseGroup('baseGroupEnrollPupils', _M('Alunos matriculados', $module), $tableEnrollPupils);

        $this->page->addScript('cpaint/cpaint.inc.js');

        $fields[] = MPopup::getPopupContainer();

        parent::defineFields($fields, $validators, $data);
    }

    /*
     * PopUp para a edição de avaliações
     */
    public function showPopUpEdit($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();

        $colTitle[] = $args->gradesByConcept ==DB_TRUE ?_M('Conceito', $module): _M('Nota', $module);
        $colTitle[] = _M('Motivo', $module);
        $colTitle[] = _M('Data/Hora', $module);
        $colTitle[] = _M('Alterado por', $module);
        $colTitle[] = _M('Estado', $module);

        $businessDegreeCurricularComponentGroup = new BusinessAcademicBusDegreeCurricularComponentGroup();

        $filters = new stdClass();
        $filters->learningPeriodId = $args->learningPeriodId;
        $filters->contractId = $args->contractId;
        $dataTable = $businessDegreeCurricularComponentGroup->searchDegreeCurricularComponentGroup($filters);

        $businessEnrollStatus = new BusinessAcademicBusEnrollStatus();
        $listEnrollStatus = $businessEnrollStatus->listEnrollStatus();

        foreach ( (array) $dataTable as $key=>$data )
        {
            list( $degreeCurricularComponentGroupId,
                  $learningPeriodId,
                  $contractId,
                  $curricularComponentGroupId,
                  $note,
                  $concept,
                  $description,
                  $enrollStatusId,
                  $enrollStatusDescription,
                  $userName,
                  $dateTime ) = $data;

            $resultTable[$key][0] = $args->gradesByConcept == DB_TRUE? $concept : $note;
            $resultTable[$key][1] = $description;
            $resultTable[$key][2] = $dateTime;
            $resultTable[$key][3] = $userName;
            $resultTable[$key][4] = $enrollStatusDescription;
        }

        $fields[] = new MTableRaw(_M('Histórico de alterações',$module), $resultTable, $colTitle );
        
        if ( $args->isClosed == DB_FALSE )
        {
            $fields[] = new MTextField('newEvaluation', NULL, ($args->gradesByConcept == DB_TRUE ?_M('Novo conceito', $module): _M('Nova nota', $module)).':');
            $fields[] = new MTextField('newDescription', NULL, _M('Motivo', $module).':', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $buttons['ok'] = new MButton('btnConfirm', _M('Atualizar', $module), $this->getAjaxAction('validateNote', "divEnrollStatus[$args->learningPeriodId][$args->contractId]" ,false, array('gradesByConcept'=>$args->gradesByConcept, 'learningPeriodId'=>$args->learningPeriodId, 'contractId'=>$args->contractId, 'popUp'=>true)) . $js );
        }

        $buttons['cancel'] = new MButton('btnCancel', _M('Cancelar', $module), 'mpopup.remove();' );
        $fields[] = new MDiv(NULL, $buttons, 'm-popup-buttons-div');

        MPopup::show('dynamicPopup', $fields, _M('Edição de avaliações', $module));

        return null;
    }

    /**
     *
     * @param <type> $args
     * @param <type> $popUp
     * @return MTextLabel 
     */
    public function validateNote($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();

        $enrollData->statusId = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED');

        // Business learning period
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $learningPeriod = $busLearningPeriod->getLearningPeriod($args->learningPeriodId);

        // Business enrollStatus
        $businessEnrollStatus = new BusinessAcademicBusEnrollStatus();
        $listEnrollStatus = $businessEnrollStatus->listEnrollStatus(1);

        // Nota obtida pelo aluno no eixo temático
        $pupilGrade = $args->evaluation[$args->learningPeriodId][$args->contractId];

        if ( $args->popUp )
        {
            $pupilGrade = $args->newEvaluation;
        }
        
        // Verificar se usa conceito
        if ( $args->gradesByConcept == DB_FALSE )
        {
            if ( is_numeric($pupilGrade) && (strlen($pupilGrade)>0) )
            {
                // Se nota maior que a definada como nota mínima no período letivo aprova se nao desaprova
                if ( $pupilGrade >= $learningPeriod->finalAverage )
                {
                    $statusId = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED');
                }
                else
                {
                    $statusId = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DISAPPROVED');
                }
            }
            else
            {
                $statusId = null;
                $this->AddAlert(_M('Nota digitada está inválida',$module).'.');
            }
        }
        // Verificar notas se a disciplina usa conceito
        elseif ( $args->gradesByConcept == DB_TRUE )
        {
            // obtem o conceito
            $filters = new stdClass();
            $filters->conceptGroupId = $args->conceptGroupId;
            $filters->description = $pupilGrade;
            $businessConcept = new BusinessAcademicBusConcept();
            $conceptData = $businessConcept->searchConceptAsObject($filters);
            $concept = $conceptData[0];

            if ( (!is_numeric($pupilGrade)) && ((strlen($pupilGrade)>0)) && (is_object($concept)) )
            {
                $statusId = $concept->enrollStatusId;
            }
            else
            {
                $statusId = null;
                $this->AddAlert(_M('Conceito digitado está inválido',$module).'.');
            }
        }

        $fields[] = new MHiddenField('enrollStatus[' .$args->learningPeriodId . '][' . $args->contractId . ']',$statusId, null);
        $fields[] = new MTextLabel('enrollStatusDescription[' . $args->learningPeriodId . '][' . $args->contractId . ']', ($statusId ? $listEnrollStatus[$statusId] : null), null, 15);
        
        if ( $args->popUp )
        {
            $js = " //Seta valor no campo nota
                    var newEvaluation = document.getElementById('newEvaluation');
                    document.getElementById('evaluation[$args->learningPeriodId][$args->contractId]').value = newEvaluation.value;
                    //Seta o motivo da troca do status ou da nota (campo oculto)
                    var newDescription = document.getElementById('newDescription');
                    document.getElementById('description[$args->learningPeriodId][$args->contractId]').value = newDescription.value;
                    mpopup.remove();";
            
            $MIOLO->page->addAJAXJsCode($js);
        }

        return $fields;
    }


    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();

        $MIOLO->checkAccess('FrmGradesTyping', A_EXECUTE, true, true);
        
        $data = $this->getData();
        // Array com as notas ou conceitos
        $evaluations = MIOLO::_REQUEST('evaluation');
        // Array com status do aluno no grupo
        $enrollStatus = MIOLO::_REQUEST('enrollStatus');
        // Array com os motivos de troca de status ou nota
        $description = MIOLO::_REQUEST('description');

        $businessDegreeCurricularComponentGroup = new BusinessAcademicBusDegreeCurricularComponentGroup();
        try
        {
            // Begin transaction
            $businessDegreeCurricularComponentGroup->beginTransaction();

            foreach( (array) $evaluations as $learningPeriodId=>$learningPeriod )
            {
                foreach ( (array) $learningPeriod as $contractId=>$evaluation )
                {
                    $newStatus = $enrollStatus[$learningPeriodId][$contractId];
                    $newDescription = $description[$learningPeriodId][$contractId];

                    // Obtem nota e status anterior caso exista
                    $oldEvaluationValueAndStatus = $businessDegreeCurricularComponentGroup->getDegreeEnrollCurrentGrade($learningPeriodId, $contractId, $data->curricularComponentGroupId,  $data->gradesByConcept == DB_TRUE ? true : false);
                    $oldEvaluation = $oldEvaluationValueAndStatus->evaluation;
                    $oldStatus = $oldEvaluationValueAndStatus->enrollStatusId;

                    // Verifica se mudou a nota ou o status
                    if ( ($evaluation!=$oldStatus) || ($newStatus!=$oldStatus) )
                    {
                        // Dados para inserir uma nova nota para o aluno no grupo de disciplinas
                        $data->learningPeriodId = $learningPeriodId;
                        $data->contractId = $contractId;
                        $data->description = $newDescription;
                        $data->enrollStatusId = $newStatus;

                        if ( $data->gradesByConcept == DB_TRUE )
                        {
                            $data->concept = $evaluation;
                        }
                        else
                        {
                            $data->note = $evaluation;
                        }

                        $result = $businessDegreeCurricularComponentGroup->insertDegreeCurricularComponentGroup($data);
                    }
                }
            }
            // End transaction
            $businessDegreeCurricularComponentGroup->endTransaction();

            $msg = _M('Notas gravadas com sucesso!',$module);
            $goto = $MIOLO->getActionURL($module, 'main:process:gradesTyping');
            SAGU::information($msg, $goto);
        }
        catch ( Exception $e )
        {
            $this->addAlert($e->getMessage());
        }
    }
}
?>
