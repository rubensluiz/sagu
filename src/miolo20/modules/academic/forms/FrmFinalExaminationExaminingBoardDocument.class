<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Final examination document document form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/02/2011
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmFinalExaminationExaminingBoardDocument extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Participação em banca', $module), null, null);

        //Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'btnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        //Matrícula
        $fields[] = $lkp = new SLookupContainer('enrollId', $this->getRequestValue('enrollId'), array(
            'module' => $module,
            'item' => 'FinalExaminationExaminingBoardEnroll',
            'label' => _M('Matrícula', $module),
            'descriptionDisplay' => false,
            'related' => array(
                'personId',
                'personIdDescription',
                'directorId',
                'directorIdDescription',
                'contractId',
                'courseId',
                'courseIdDescription',
                'unitId',
                'unitIdDescription',
                'turnId',
                'turnIdDescription',
                'periodId',
                'periodIdDescription',
                'curricularComponent',
                'curricularComponentDescription',
            ),
        ));

        //Pessoa
        $fields[] = $lkp = new SLookupContainer('personId', $this->getRequestValue('personId'), array(
            'module' => 'basic',
            'item' => 'PhysicalPerson',
            'label' => _M('Pessoa', $module),
            'readOnly' => true,
        ));

        //Orientador
        $fields[] = $lkp = new SLookupContainer('directorId', $this->getRequestValue('directorId'), array(
            'module' => 'basic',
            'item' => 'PhysicalPerson',
            'label' => _M('Orientador', $module),
            'readOnly' => true,
        ));

        $fields[] = $contractId = new MTextField('contractId', $this->getRequestValue('contractId'), _M('Código do contrato', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractId->setReadOnly(true);

        //Curso
        $fields[] = $lkp = new SLookupContainer('courseId', null, array(
            'module' => 'academic',
            'item' => 'Course',
            'label' => _M('Curso', $module),
            'readOnly' => true,
        ));

        //Unidade
        $fields[] = $lkp = new SLookupContainer('unitId', null, array(
            'module' => 'basic',
            'item' => 'Unit',
            'label' => _M('Unidade', $module),
            'readOnly' => true,
        ));

        //Turno
        $fields[] = $lkp = new SLookupContainer('turnId', null, array(
            'module' => 'basic',
            'item' => 'Turn',
            'label' => _M('Turno', $module),
            'readOnly' => true,
        ));

        //Período
        $fields[] = $lkp = new SLookupContainer('periodId', null, array(
            'module' => 'academic',
            'item' => 'Period',
            'label' => _M('Período', $module),
            'readOnly' => true,
        ));

        //Disciplina
        $fields[] = $lkp = new SLookupContainer('curricularComponent', null, array(
            'module' => 'academic',
            'item' => 'CurricularComponent',
            'label' => _M('Disciplina', $module),
            'readOnly' => true,
        ));
        
        //Formato
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat', _M('Formato', $module));
        $fields[] = new MSeparator('');
                
        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }

    /**
     * Evendo chamado no botão Imprimir da barra de ferramentas
     **/
    public function btnPrint_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();
        $options['module'] = $module;

        $busFinalExaminationExaminingBoard = new BusinessAcademicBusFinalExaminationExaminingBoard();

        $std = new stdClass();
        $std->personId = $data->directorId;
        $std->enrollId = $data->enrollId;
        $search = $busFinalExaminationExaminingBoard->searchFinalExaminationExaminingBoard($std);
        
        if( !count($search)>0 )
        {
            $this->addError(_M('Nenhum registro encontrado para a Pessoa ou Matrícula selecionada', $module));
        }
        else
        {
            $options['reportName'] = 'finalExaminationExaminingBoard';
            if ( strlen($data->directorId) > 0 )
            {
                $options['parameters']['personid'] = (int) $data->directorId;
            }
            if ( strlen($data->enrollId) > 0 )
            {
                $options['parameters']['enrollid'] = (int) $data->enrollId;
            }
            if ( strlen($data->reportFormat)>0 )
            {
                $options['fileType'] = $data->reportFormat;
            }
            $sreport = new SReport($options);

            if ( !$sreport->generate() )
            {
                $this->addError(_M('Não foi possível gerar o documento.', $module ));
            }
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->personId = $this->GetFormValue('personId');
        $data->directorId = $this->GetFormValue('directorId');
        $data->enrollId = $this->GetFormValue('enrollId');
        $data->reportFormat = $this->GetFormValue('reportFormat');

        return $data;
    }
}

?>
