<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Course form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 */
class FrmCourse extends SManagementForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new AcdCourse(), array( 'courseId' ), 'BusCourse');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function, array( SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE )) )
        {
            $courseId = MIOLO::_REQUEST('courseId');
            $fields[] = new MTextLabel('courseId', $courseId, _M('Código', $module));
            $fields[] = new MHiddenField('courseId', $courseId);

            $business = new BusinessAcademicBusCourse();
            $data = $business->getCourse($courseId);
        }
        else
        {
            //Field course
            $courseId = new MTextField('courseId', $this->getFormValue('courseId', $data->courseId), _M('Código', $module), 20, _M('@1 caracteres no máximo', $module, 10));
            $courseId->setJsHint(_M('Informe o código do curso referido aqui', $module));
            $fields[] = $courseId;
            $validators[] = new MRequiredValidator('courseId');
        }

        //Field formation level
        $business = new BusinessAcademicBusFormationLevel();
        $formationLevelId = new MComboBox('formationLevelId', $this->getFormValue('formationLevelId', $data->formationLevelId), _M('Grau de formação', $module), $business->listFormationLevel());
        $formationLevelId->setJsHint(_M('Selecione o grau de formação', $module));
        $validators[] = new MRequiredValidator('formationLevelId');
        $fields[] = $formationLevelId;

        //Field course name
        $courseName = new MTextField('courseName', $this->getFormValue('courseName', $data->name), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $courseName->setJsHint(_M('Informe o nome do curso', $module));
        $fields[] = $courseName;
        $validators[] = new MRequiredValidator('courseName');

        //Field course short name
        $courseShortName = new MTextField('courseShortName', $this->getFormValue('courseShortName', $data->shortName), _M('Abreviatura', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M("50 caracteres no máximo", $module));
        $courseShortName->setJsHint(_M('Informe a abreviatura do curso', $module));
        $fields[] = $courseShortName;
        $validators[] = new MRequiredValidator('courseShortName', _M("Abreviatura", $module), 50);

        //Field acronym
        $acronym = new MTextField('acronym', $this->getFormValue('acronym', $data->acronym), _M('Sigla', $module), 20, _M('@1 caracteres no máximo', $module, 10));
        $acronym->setJsHint(_M('Informe a sigla do curso', $module));
        $fields[] = $acronym;

        //Field center
        $business = new BusinessAcademicBusCenter();
        $dataCenter = $business->listCenter();
        $centerId = new MComboBox('centerId', $this->getFormValue('centerId', $data->centerId), _M('Centro', $module), $dataCenter);
        $centerId->setJsHint(_M('Selecione o centro do curso', $module));
        $fields[] = $centerId;

        // Centro antigo. utilizado para validacao
        $fields[] = new SHiddenField('_centerOld', $this->getRequestValue('_centerOld', $data->centerId));
        
        //Field knowedge area
        $business = new BusinessAcademicBusKnowledgeArea();
        $knowledgeAreaId = new MSelection('knowledgeAreaId', $this->getFormValue('knowledgeAreaId', $data->knowledgeAreaId), _M('Área de conhecimento', $module), $business->listKnowledgeArea());
        $knowledgeAreaId->setJsHint(_M('Selecione a área de conhecimento', $module));
        $fields[] = $knowledgeAreaId; 
        
        //Field begon date
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial do curso', $module));
        $fields[] = $beginDate;
        $validators[] = new MDATEDMYValidator('beginDate', '', 'required');

        if ( in_array($function, array( 'update', 'delete' )) )
        {
            //Field end date
            $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $endDate->setJsHint(_M('Informe a data final deste curso', $module));
            $fields[] = $endDate;
            $validators[] = new MDATEDMYValidator('endDate');
        }

        //Field more info
        $moreInfo = new MMultiLineField('moreInfo', $this->getFormValue('moreInfo', $data->moreInfo), _M('Mais informações', $module), 40, 4, 40);
        $moreInfo->setJsHint(_M('Entre com mais informações sobre este curso', $module));
        $fields[] = $moreInfo;

        //Field requjiriments
        $requirements = new MMultiLineField('requirements', $this->getFormValue('requirements', $data->requirements), _M('Exigências', $module), 40, 4, 40);
        $requirements->setJsHint(_M('Informe os dados do requerimento', $module));
        $fields[] = $requirements;

        //Field obs
        $obs = new MMultiLineField('obs', $this->getFormValue('obs', $data->obs), _M('Observações', $module), 40, 4, 40);
        $obs->setJsHint(_M('Informe observações extras aqui', $module));
        $fields[] = $obs;

        //Field report order
        $reportOrder = new MTextField('reportOrder', $this->getFormValue('reportOrder', $data->reportOrder), _M('Ordem no livro matrícula', $module), 10);
        $reportOrder->setJsHint(_M('Informe a ordem na qual este curso aparecerá no livro matrícula', $module));
        $fields[] = $reportOrder;
        $validators[] = new MRegExpValidator('reportOrder', '', '(^-?[0-9][0-9]*$)');

        //Field education area
        $educationAreaLabel = new MText('educationAreaLabel', _M('Área de ensino (técnico)', $module) . ':');
        $educationAreaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $educationAreaId = new MLookupTextField('educationAreaId', $this->getFormValue('educationAreaId', $data->educationAreaId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'educationAreaDescription', $module, 'EducationArea', null, null, true);
        $educationAreaId->setJsHint(_M('Informe o código da área de ensino', $module));
        $educationAreaDescription = new MTextField('educationAreaDescription', $this->educationAreaDescription->value, '', 40);
        $educationAreaDescription->setReadOnly(true);
        $educationAreaDescription->setJsHint(_M('Descrição de área de ensino', $module));
        $hctEducationArea = new MHContainer('hctEducationArea', array( $educationAreaLabel, $educationAreaId, $educationAreaDescription ));
        $hctEducationArea->setShowLabel(true);
        $fields[] = $hctEducationArea;

        if ( SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES' )
        {
            //Field income source
            $incomeSourceLabel = new MText('incomeSourceLabel', _M('Origem', $module) . ':');
            $incomeSourceLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $incomeSourceId = new MLookupTextField('incomeSourceId', $this->getFormValue('incomeSourceId', $data->incomeSourceId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'incomeSourceDescription', 'finance', 'IncomeSource', null, null, true);
            $incomeSourceId->setJsHint(_M('Informe o código de origem da receita', $module));
            $incomeSourceDescription = new MTextField('incomeSourceDescription', $this->getFormValue('incomeSourceDescription', $data->incomeSourceDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $incomeSourceDescription->setJsHint(_M('Informe a descrição da origem', $module));
            $incomeSourceDescription->setReadOnly(true);
            $hctIncomeSource = new MHContainer('hctIncomeSource', array( $incomeSourceLabel, $incomeSourceId, $incomeSourceDescription ));
            $hctIncomeSource->setShowLabel(true);
            $fields[] = $hctIncomeSource;
        }

        //Field degree
        $degreeLabel = new MText('degreeLabel', _M('Grau acadêmico', $module) . ':');
        $degreeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $degreeDescription = new MTextField('degree', $this->getFormValue('degree', $data->degree), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $degreeDescription->setJsHint(_M('Informe a descrição do grau acadêmico', $module));
        $hctDegree = new MHContainer('hctDegree', array( $degreeLabel, $degreeDescription ));
        $hctDegree->setShowLabel(true);
        $fields[] = $hctDegree;     
        
        $link = new MLink('courseOcurrenceLink', _M("ocorrências do curso"), $MIOLO->GetActionURL($module, 'main:register:course:courseOccurrence'));
        $this->AddAlert("Só para lembrar, os reconhecimentos agora passaram a ser registrados nas " . $link->generate() . ".");

        parent::defineFields($fields, $validators, $data);        
    }  
    
    public function tbBtnSave_click($sender = NULL)
    {
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');

        $data = $this->getTypesData();
        
        if ( strlen($data->courseId) > 10 )
        {
            $this->AddAlert(_M("O campo 'Código' deve ter 10 caracteres no máximo."));
            return;
        }
        
        if ( strlen($data->acronym) > 10 )
        {
            $this->AddAlert(_M("O campo 'Sigla' deve ter 10 caracteres no máximo."));
            return;
        }
        
        if ( ( strlen($data->_centerOld) > 0 ) && ( strlen($data->centerId) == 0 ) )
        {
            $this->AddError(_M('O campo "Centro" não pode ser apagado.'));
            return;
        }
        
        $update = str_replace('Bus', 'update', $this->business);
        $insert = str_replace('Bus', 'insert', $this->business);
        
        $ok = ($function == SForm::FUNCTION_UPDATE) ? $this->busObject->$update($data) : $this->busObject->$insert($data);
        
        /**
         * caso tudo tenha ocorrido corretamente salva os campos customizáveis
         * só salva os campos customizáveis se precisa
         */
        if ( $ok && count( $this->mioloCustomFields ) > 0)
        {
            $chave = $ok;
            
            //caso a chave venha como ok, tenta obter da url
            if ( $chave === true )
            {
                $chave = $typeObj->{$this->pkey[0]} ? $typeObj->{$this->pkey[0]} : MIOLO::_REQUEST($this->pkey[0]);
            }
            
            if ( ! $chave )
            {
                $campos = array();

                foreach ( $this->mioloCustomFields  as $cf )
                {
                    $campos[] = $cf->name;
                }

                if ( count($campos) > 1 )
                {
                    $mensagem = _M('Não foi possível salvar os valores dos seguintes campos: @1', $module, implode('<br/>', $campos));
                }
                else
                {
                    $mensagem = _M('Não foi possível salvar o valor do seguinte campo: @1', $module, implode('<br/>', $campos));
                }

                $mensagem .= '.<br/>' . _M('Esse cadastro não possui suporte a campos personalizados.', $module);

                $this->addError($mensagem);
                return;
            }
            
            $ok = $this->saveCustomFields( $chave );
        }

        $this->confirmInsertUpdate($ok);
    }
    
    public function tbBtnDelete_confirm($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $this->defaultDisabledButtonsToolbar();
        
        try
        {
            SDatabase::beginTransaction();
            
            foreach ( $this->pkey as $key )
            {
                $id[] = MIOLO::_REQUEST($key);
            }
            
            if ( MSubDetail::getData('reconhecimento') != null )
            {
                foreach ( MSubDetail::getData('reconhecimento') as $value )
                {
                    $reconhecimentoDeCurso = new AcdReconhecimentoDeCurso();

                    $reconhecimentoDeCurso->reconhecimentoDeCursoId = $value->reconhecimentoDeCursoId;
                    $reconhecimentoDeCurso->delete();
                }
            }

            $delete = str_replace('Bus', 'delete', $this->business);
            $ok = $this->busObject->$delete($id);

            //tenta deletar o conteúdo customizado
            if ( $ok && ( count( $this->mioloCustomFields ) > 0 ) )
            {                
                $ok = $this->deleteCustomFieldValues(MIOLO::_REQUEST($this->pkey[0]));
            }
            
            if ( $ok )
            {                
                SDatabase::commit();
                
                $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Informação', $module);
                SAGU::information($msg, $goto);
            }
            else
            {
                SDatabase::rollback();
                
                $msg = _M('Erro executando a operação solicitada.', $module);
                $errors = $this->busObject->getErrors();
                for ( $i=0; $i<count($errors); $i++ )
                {
                    $msg .= '<br />' . $errors[$i];
                }
                $goto = SAGU::getStackBackUrl();
                $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                SAGU::error($msg, $goto, $caption);
            }
        }
        catch( Exception $e )
        {
            SDatabase::rollback();
            
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto) > 0 ? $goto : $MIOLO->getActionURL($module, $action);
            $msg = _M('Existem pendências que impossibilitam a exclusão do item selecionado.');
            $MIOLO->error($msg, $goto);
        }
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $data = new acdCourse();
        $vars = get_object_vars($data);
        
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'name' )
            {
                $data->$var = $this->$var->value;
            }
        }
        
        $data->name = $this->courseName->value;
        $data->shortName = $this->courseShortName->value;
        $data->_centerOld = MIOLO::_REQUEST('_centerOld');
        
        return $data;
    }
}
?>