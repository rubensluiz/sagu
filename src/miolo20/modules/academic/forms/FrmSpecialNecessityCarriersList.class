<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Form to choice the enroll book report option
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 04/08/2006
 *
 */

/**
 * Form to generate Multiple Learning Period
 */
class FrmSpecialNecessityCarriersList extends SForm
{
    private $home;
    public $filters;

    /**
     * Class constructor
     */
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();

        $this->home = $data->home;

        parent::__construct( _M('Situação da matrícula', $module), NULL, NULL );
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $periodId = MIOLO::_request('periodId');
        
        $fields[] = new MSeparator('');

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MRequiredValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MRequiredValidator('turnId', _M('Turno', $module));
        $validators[] = new MRequiredValidator('unitId', _M('Unidade', $module));
        $fields[] = $courseOccurrenceLookup;

        $busSpecialNecessity = new BusinessBasicBusSpecialNecessity();
        $specialNecessityId = new MComboBox('specialNecessityId', $this->getFormValue('specialNecessityId', $data->specialNecessityId), _M('Necessidade especial', $module), $busSpecialNecessity->listSpecialNecessity());
        $fields[] = $specialNecessityId;

        $onlyEnrolled = new MCheckBox('onlyEnrolled', 1, _M('Apenas matriculados', $module) . '?', false);
        $fields[] = $onlyEnrolled;

        $btn1 = new MButton('btnList', _M('Lista', $module));
        $fields[] = $btn1;
        $fields[] = new MSeparator('<hr>');
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
    }

    /**
     * Event triggered when user clicks list button
     */
    public function btnList_click($sender=NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = new BusinessAcademicBusSpecialNecessityCarriersList();
        $data = $this->getData();

        $listData = $business->listSpecialNecessityCarriers($data);

        if ( count($listData) > 0 )
        {
            foreach ($listData as $tableData)
            {
                $grdResults = $MIOLO->getUI()->getGrid($module, 'GrdSpecialNecessityCarriers', $data);
                $grdResults->setData($tableData->data);

                $grdResults->setTitle($tableData->title);
                $this->addField($grdResults);
            }
        }
    }
}
?>