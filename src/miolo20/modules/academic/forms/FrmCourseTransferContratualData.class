<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 22/08/2011
 */
class FrmCourseTransferContratualData extends SStepByStepForm
{
    public function __construct($steps = null)
    {
        if (!$steps->disableConstruct)
        {
            parent::__construct(null, $steps, __CLASS__);
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
            $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        }
    }

    /**
     * Default method to define fields
     */
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $session = $MIOLO->getSession();

        if ($this->isFirstAccess())
        {
            $this->cleanStepData();
            $readOnly = false;

            //Limpa as informações dos aproveitamentos de disciplinas utilizados no passo 2
            $session->setValue('makeToGroup', '');
            $session->setValue('enrollId', '');
            $session->setValue('numberHours', '');
            $session->setValue('notes', '');
            $session->setValue('note', '');
            $session->setValue('curricularComponent', '');
        }
        else
        {
            $readOnly = true;
        }

        //Load data
        $data = $this->getStepData();
        $stepData = $this->getStepDataByForm(__CLASS__);

                // Field person
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa', $this->module) . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption m-caption-required');
        $contractPersonId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription', 'pupilClassId', 'pupilClassName'), $this->module, 'ActivePersonContract', null, array('personId' => 'personId'), true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa', $this->module));
        $validators[] = new MRequiredValidator('personId', _M('Pessoa', $this->module));
        $contractPersonName = new MTextField('personName', $this->getFormValue('personName'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa', $this->module));
        $hctPerson = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(false);

        // Field contract
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato', $this->module) . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('personId', 'personName', 'courseId', 'courseName', 'courseVersion', 'turnId', 'turnDescription', 'unitId', 'unitDescription', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'limbo', 'pupilClassId', 'pupilClassName'), $this->module, 'ActiveContract', null, array('personId' => 'personId'), true);
        $contractId->setJsHint(_M('Informe o código do contrato', $this->module));
        $validators[] = new MRequiredValidator('contractId', _M('Contrato', $this->module));
        $contractCourseId = new MTextField('courseId', $this->getFormValue('courseId'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso', $this->module));
        $contractCourseVersion = new MTextField('courseVersion', $this->getFormValue('courseVersion'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso', $this->module));
        $contractCourseName = new MTextField('courseName', $this->getFormValue('courseName'), '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $this->module));
        $hctContractCourse = new MHContainer('hctContractCourse', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContractCourse->setShowLabel(false);

        // Field unit
        $contractUnitLabel = new MText('contractUnitLabel', _M('Unidade', $this->module) . ':');
        $contractUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractUnitId = new MTextField('unitId', $this->getFormValue('unit'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractUnitId->setReadOnly(true);
        $contractUnitId->setJsHint(_M('Código da unidade', $this->module));
        $contractUnitDescription = new MTextField('unitDescription', $this->getFormValue('unitDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractUnitDescription->setReadOnly(true);
        $contractUnitDescription->setJsHint(_M('Descrição da unidade', $this->module));
        $hctContractUnit = new MHContainer('hctContractUnit', array($contractUnitLabel, $contractUnitId, $contractUnitDescription));
        $hctContractUnit->setShowLabel(false);

        // Field turn
        $contractTurnLabel = new MText('contractTurnLabel', _M('Turno', $this->module) . ':');
        $contractTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractTurnId = new MTextField('turnId', $this->getFormValue('turnid'), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractTurnId->setReadOnly(true);
        $contractTurnId->setJsHint(_M('Código do turno', $this->module));
        $contractTurnDescription = new MTextField('turnDescription', $this->getFormValue('turnDescription'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractTurnDescription->setReadOnly(true);
        $contractTurnDescription->setJsHint(_M('Descrição do turno', $this->module));
        $hctContractTurn = new MHContainer('hctContractTurn', array($contractTurnLabel, $contractTurnId, $contractTurnDescription));
        $hctContractTurn->setShowLabel(false);

        $hctContract = new MVContainer('hctContract', array($hctContractCourse, $hctContractUnit, $hctContractTurn));

        // Field pupil class
        $pupilClassLabel = new MText('pupilClassLabel', _M('Turma do aluno', $this->module) . ':');
        $pupilClassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $pupilClassLabel->setClass('m-caption m-caption-required');
        $pupilClassId = new MLookupTextField('pupilClassId', $this->getFormValue('pupilClassId'), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('pupilClassName'), $this->module, 'Class', null, array('courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $pupilClassId->setJsHint(_M('Informe a turma do aluno', $this->module));
        $validators[] = new MRequiredValidator('pupilClassId', _M('Turma do aluno', $this->module));
        $pupilClassName = new MTextField('pupilClassName', $this->getFormValue('pupilClassName'), '', 30);
        $pupilClassName->setReadOnly(true);
        $pupilClassName->setJsHint(_M('Nome da turma do aluno', $this->module));
        $hctPupilClass = new MHContainer('hctpupilClass', array($pupilClassLabel, $pupilClassId, $pupilClassName));
        $hctPupilClass->setShowLabel(false);

        //Basegroup Contrato a transferir
        $fields[] = new MBaseGroup('bsgContractToTransfer', _M('Contrato a transferir', $module), array($hctPerson, $hctContract, $hctTurn, $hctUnit, $hctPupilClass), 'vertical');

        //Curso de destino
        $fields[] = new SHiddenField('allCourseOccurrence', DB_TRUE); // Para trazer todas ocorr?ncias de curso independente a unidade logada.
        $destCourseAutoComplete = 'destinationCourseId, destinationCourseVersion, destinationCourseName, destinationTurnId, destinationTurnDescription, destinationUnitId, destinationUnitDescription';
        $destCourseFilters = array('courseId'=>'destinationCourseId', 'courseVersion' => 'destinationCourseVersion', 'unitId'=>'destinationUnitId', 'turnId'=>'destinationTurnId', 'allCourseOccurrence'=>'allCourseOccurrence');
        $destinationCourseLabel = new MText('destinationCourseLabel', _M('Curso', $module) . ':');
        $destinationCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationCourseLabel->setClass('m-caption m-caption-required');
        if( $readOnly )
        {
            $destinationCourseId = new MTextField('destinationCourseId', $data->destinationCourseId, _M('Curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $destinationCourseId->setJsHint(_M('Informe o código do curso', $module));
            $destinationCourseId->setReadOnly(true);
        }
        else
        {
            $destinationCourseId = new MLookupTextField('destinationCourseId', $data->destinationCourseId, _M('Curso', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, $destCourseAutoComplete, 'academic', 'CourseOccurrence', null, $destCourseFilters, !$this->page->isPostBack());
            $destinationCourseId->setJsHint(_M('Informe o código do curso', $module));
        }
        $destinationCourseVersion = new MTextField('destinationCourseVersion', $data->destinationCourseVersion, _M('Versão', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $destinationCourseVersion->setJsHint(_M('Versão do curso', $module));
        $destinationCourseVersion->setReadOnly(true);
        $destinationCourseName = new MTextField('destinationCourseName', $data->destinationCourseName, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationCourseName->setJsHint(_M('Nome do curso', $module));
        $destinationCourseName->setReadOnly(true);
        $hctCourse = new MHContainer('hctcourse', array($destinationCourseLabel, $destinationCourseId, $destinationCourseVersion, $destinationCourseName));
        $hctCourse->setShowLabel(false);
        $flds2[] = $hctCourse;
        $validators[] = new MRequiredValidator('destinationCourseId', _M('Curso', $module));
        $validators[] = new MRequiredValidator('destinationCourseVersion', _M('Versão', $module));
        
        //Campo Unidade
        $destinationUnitLabel = new MText('destinationUnitLabel', _M('Unidade', $module) . ':');
        $destinationUnitLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationUnitLabel->setClass('m-caption m-caption-required');
        $destinationUnitId = new MTextField('destinationUnitId', $data->destinationUnitId, _M('Unidade', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $destinationUnitId->setJsHint(_M('Código da unidade', $module));
        $destinationUnitId->setReadOnly(true);
        $destinationUnitDescription = new MTextField('destinationUnitDescription', $data->destinationUnitDescription, _M('Descrição da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationUnitDescription->setJsHint(_M('Descrição da unidade', $module));
        $destinationUnitDescription->setReadOnly(true);
        $hctUnit = new MHContainer('hctUnit', array($destinationUnitLabel, $destinationUnitId, $destinationUnitDescription));
        $hctUnit->setShowLabel(false);
        $flds2[] = $hctUnit;
        $validators[] = new MRequiredValidator('destinationUnitId', _M('Unidade', $module));

        //Campo Turno
        $destinationTurnLabel = new MText('destinationTurnLabel', _M('Turno', $module) . ':');
        $destinationTurnLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationTurnLabel->setClass('m-caption m-caption-required');
        $destinationTurnId = new MTextField('destinationTurnId', $data->destinationTurnId, _M('Turno', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $destinationTurnId->setJsHint(_M('Código do turno', $module));
        $destinationTurnId->setReadOnly(true);
        $destinationTurnDescription = new MTextField('destinationTurnDescription', $data->destinationTurnDescription, _M('Turno', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationTurnDescription->setJsHint(_M('Descrição do turno', $module));
        $destinationTurnDescription->setReadOnly(true);
        $hctTurn = new MHContainer('hctTurn', array($destinationTurnLabel, $destinationTurnId, $destinationTurnDescription));
        $hctTurn->setShowLabel(false);
        $flds2[] = $hctTurn;
        $validators[] = new MRequiredValidator('destinationTurnId', _M('Turno', $module));

        //Basegroup Curso de destino
        $fields[] = new MBaseGroup('bsgCourseDestination', _M('Curso de destino', $module), $flds2, 'vertical');
        
        //Período
        $businessPeriod = new BusinessAcademicBusPeriod();
        $fields[] = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
        $validators[] = new MRequiredValidator('periodId', _M('Período', $module));
        
        //Turma de destino
        $fields[] = new SHiddenField('allClasses', DB_TRUE); // Para trazer todas as turmas independente a unidade logada.
        $destinationClassLabel = new MText('destinationClassLabel', _M('Nova turma', $module) . ':');
        $destinationClassLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationClassLabel->setClass('m-caption m-caption-required');
        $destinationClassId = new MLookupTextField('destinationClassId', $data->destinationClassId, _M('Nova turma', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'destinationClassDescription', 'academic', 'Class', null, array('courseId'=>'destinationCourseId', 'courseVersion'=>'destinationCourseVersion', 'allClasses'=>'allClasses'), !$this->page->isPostBack());
        $destinationClassId->setJsHint(_M('Informe o código do turma', $module));
        $destinationClassDescription = new MTextField('destinationClassDescription', $data->destinationClassDescription, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationClassDescription->setJsHint(_M('Descrição do turma', $module));
        $destinationClassDescription->setReadOnly(true);
        $hctClass = new MHContainer('hctClass', array($destinationClassLabel, $destinationClassId, $destinationClassDescription));
        $hctClass->setShowLabel(false);
        $fields[] = $hctClass;
        $validators[] = new MRequiredValidator('destinationClassId', _M('Nova turma', $module));

        $flds[] = new MCheckBox('takeCurriculum', 't', _M('Aproveitar disciplinas comuns entre os cursos'));
        $flds[] = new MCheckBox('takeCurriculumLinks', 't', _M('Aproveitar vínculos de disciplinas (equivalências)'));
        $fields[] = new MBaseGroup('bsgExploitations', _M('Aproveitamentos', $module), $flds, 'vertical');
        $fields[] = new MSpacer();  
        
        //Motivo da transferência
        $busReason = new BusinessAcademicBusReason();
        $reasons = $busReason->listReasonByStateContract(SAGU::getParameter($module, 'STATE_CONTRACT_ID_INTERNAL_TRANSFER_TO'));
        $fields[] = new MSelection('reasonId', $data->reasonId, _M('Motivo', $module), $reasons);
        $validators[] = new MRequiredValidator('reasonId', _M('Motivo'));

        $fields[] = new MSpacer();

        $this->setFields($fields);
        $this->setValidators($validators);
    }

    /**
     * Ação do botão próxima etapa
     * Valida algumas informações antes de avançar
     * para o próximo passo
     * @param type $args
     */
    public function nextStepButton_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');
        $session = $MIOLO->getSession();

        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();

        //Dados do formulário
        $data = $this->getData();

        try
        {
            //Valida se o curso de origem e destino não são iguais
            if( ($data->courseId == $data->destinationCourseId) && ($data->courseVersion == $data->destinationCourseVersion) && ($data->turnId == $data->destinationTurnId) && ($data->unitId == $data->destinationUnitId) )
            {
                $message = _M('Os cursos de destino e origem devem ser diferentes', $module);
                throw new Exception($message);
            }

            //Valida se o aluno ja possui contrato ativo no curso de destino
            $filters = new stdClass();
            $filters->personId = $data->personId;
            $filters->courseId = $data->destinationCourseId;
            $filters->courseVersion = $data->destinationCourseVersion;
            $filters->turnId = $data->destinationTurnId;
            $filters->unitId = $data->destinationUnitId;
            $filters->isClosed = DB_FALSE;

            $busContract = new BusinessAcademicBusContract();
            $searchActiveContract = $busContract->searchContract($filters);

            if( count($searchActiveContract) > 0 )
            {
                $message = _M('O aluno já possui contrato ativo no curso de destino.', $module);
                throw new Exception($message);
            }

            //Obtém o período letivo para o novo contrato                
            $lpFilters = new stdClass();
            $lpFilters->courseId = $data->destinationCourseId;
            $lpFilters->courseVersion = $data->destinationCourseVersion;
            $lpFilters->turnId = $data->destinationTurnId;
            $lpFilters->unitId = $data->destinationUnitId;
            $lpFilters->periodId = $data->periodId;            
            
            $newLearningPeriod = $busLearningPeriod->searchLearningPeriod($lpFilters);                        
            $OldLearningPeriod = $busLearningPeriod->getLearningPeriodByContractAndPeriod($data->contractId, $data->periodId);
            
            if ( count($newLearningPeriod) <= 0 )
            {
                throw new Exception(_M('Nenhum período letivo encontrado para o curso de destino.', $module));
            }
            if ( !$OldLearningPeriod )
            {
                throw new Exception(_M('Nenhum período letivo encontrado para o contrato selecionado.', $module));
            }
            parent::nextStepButton_click($args);
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }
}
?>