<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finSPCSituation table
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 28/02/2011
 */
class FrmStageDetailsSearch extends SSearchForm
{
    public function __construct()
    {
        parent::__construct(null, null, null, 'BusTrainingDetail');
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //Field period
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodIdS', strlen($this->getFormValue('periodIdS', $data->periodIdS))>0 ? $this->getFormValue('periodIdS', $data->periodIdS) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $businessPeriod->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseIdS', $data->courseIdS),
            $this->GetFormValue('courseVersionS', $data->courseVersionS),
            $this->GetFormValue('turnIdS', $data->turnIdS),
            $this->GetFormValue('unitIdS', $data->unitIdS)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue, false, true);
        $fields[] = $courseOccurrenceLookup;

        //Filtro para lookup (filtro estatico para filtrar apenas por disciplinas do tipo ESTAGIO)
        $fields[] = new MHiddenField('_curricularComponentTypeIdS', SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_TYPE_STAGE'));

        //Disciplina oferecida (filtrando por tipo Estagio)
        $groupIdLabel = new MText('groupIdLabel', _M('Disciplina oferecida', $module) . ':');
        $groupIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $groupIdLabel->setClass('m-caption m-caption-required');
        $groupId = new MLookupTextField('groupIdS', $this->getFormValue('groupIdS', MIOLO::_REQUEST('groupIdS')), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'groupIdDescription', $module, 'Group', null, array('_curricularComponentTypeId' => '_curricularComponentTypeIdS', 'periodId'=>'periodIdS', 'courseId'=>'courseId1', 'courseVersion'=>'courseVersion1', 'turnId'=>'turnId1', 'unitId'=>'unitId1'), true);
        $groupId->setJsHint(_M('Informe o código da disciplina oferecida', $module));
        $validators[] = new MIntegerValidator('groupIdS', _M('Disciplina oferecida', $module), 'required');
        $groupIdDescription = new MTextField('groupIdDescription', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $groupIdDescription->setJsHint(_M('Descrição da disciplina oferecida', $module));
        $groupIdDescription->setReadOnly(true);
        $fields[] = $groupIdCnt = new MHContainer('groupIdCnt', array($groupIdLabel, $groupId, $groupIdDescription));
        $groupIdCnt->setShowLabel(true);

        //Field personId
        $personIdLabel = new MText('personIdLabel', _M('Pessoa',$module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId = new MLookupTextField('personIdEnrollS', $this->getFormValue('personIdS',$data->personIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personIdNameS', 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa',$module));
        $validators[] = new MIntegerValidator('personIdEnrollS', _M('Pessoa', $module));
        $personIdName = new MTextField('personIdNameS', $this->personIdNameS->value, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'),null,null, true);
        $personIdName->setJsHint(_M('Nome da pessoa',$module));
        $fields[] = $personIdCnt = new MHContainer('personIdCnt', array($personIdLabel, $personId,$personIdName));
        $personIdCnt->setShowLabel(true);

        parent::defineFields($fields, $module, 'GrdStageDetailsSearch', $validators);
    }


    public function getTypesData()
    {
        $data->groupId = MIOLO::_REQUEST('groupIdS');
        $data->personIdEnroll = MIOLO::_REQUEST('personIdEnrollS');
        $data->isFromGrid = true;

        return $data;
    }
}
?>
