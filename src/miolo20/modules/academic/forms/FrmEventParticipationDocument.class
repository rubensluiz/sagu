<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Conclusin of course document form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/02/2011
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmEventParticipationDocument extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Participação em evento', $module), null, null);

        //Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'btnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        //Field event
        $eventLabel = new MText('eventLabel', _M('Evento', $module) . ':');
        $eventLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $eventLabel->setClass('m-caption m-caption-required');
        $eventId = new MLookupTextField('eventId', $this->getFormValue('eventId', $data->eventId), _M('Evento', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'eventDescription', $module, 'Event', null, null, true);
        $eventId->setJsHint(_M('Informe o código do evento', $module));
        $validators[] = new MIntegerValidator('eventId', _M('Evento', $module), 'required');
        $eventDescription = new MTextField('eventDescription', $this->getFormValue('eventDescription', $data->eventDescription), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $eventDescription->setJsHint(_M('Descrição do evento', $module));
        $eventDescription->setReadOnly(true);
        $hctEvent = new MHContainer('hctEvent', array($eventLabel, $eventId, $eventDescription));
        $hctEvent->setShowLabel(false);
        $fields[]  = $hctEvent;

        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personLabel->setClass('m-caption m-caption-required');
        $personId = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), _M('Pessoa', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'personName', 'basic', 'PhysicalPerson', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');
        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[]  = $hctPerson;

        //Carimbo
         if ( SAGU::getParameter('ACADEMIC', 'SIMPLIFIED_SCHOLARSHIP_DESCRIPTION_DOCUMENT_EXTRA_PARAMS') == 'YES' )
        {        
            $busStamp = new BusinessBasicBusStamp();
            $fields[] = $carimbo =  new MSelection('carimbo', null, _M('Carimbo'), $busStamp->listStamp());
            $fields[] = new MSeparator();   
            $validators[] = new MRequiredValidator('carimbo', _M('Carimbo', $module) );
        }
        
        //Formato
        $fields[] = $reportFormat = new MSelection('reportFormat', $this->getFormValue('reportFormat') ? $this->getFormValue('reportFormat') : 'PDF', _M('Formato', $module), SReport::listReportFormat());
        $validators[] = new MRequiredValidator('reportFormat', _M('Formato', $module));
        $fields[] = new MSeparator('');
                
        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }

    /**
     * Evendo chamado no botão Imprimir da barra de ferramentas
     **/
    public function btnPrint_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();
        $options['module'] = $module;

        $busEventParticipation = new BusinessAcademicBusEventParticipation();

        $std = new stdClass();
        $std->personId = $data->personId;
        $std->eventId = $data->eventId;
        $search = $busEventParticipation->searchEventParticipation($std);
        if(!count($search)>0)
        {
            $this->addError(_M('@1 não participou do evento: @2', $module, $data->personName, $data->eventDescription ));
        }
        $options['reportName'] = 'eventParticipation';//Adicionar documento
        if ( strlen($data->eventId) > 0 )
        {
            $options['parameters']['eventid'] = $data->eventId;
        }
        if ( MIOLO::_REQUEST('carimbo') )
        {
            $options['parameters']['carimbo'] = MIOLO::_REQUEST('carimbo');
        }
        if ( strlen($data->personId) > 0 )
        {
            $options['parameters']['personid'] = $data->personId;
        }
        if ( strlen($data->reportFormat)>0 )
        {
            $options['fileType'] = $data->reportFormat;
        }
        $sreport = new SReport($options);
        
        if ( !$sreport->generate() )
        {
            $this->addError(_M('Não foi possível gerar o documento.', $module ));
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->eventId = $this->GetFormValue('eventId');
        $data->eventDescription = $this->GetFormValue('eventDescription');
        $data->personId = $this->GetFormValue('personId');
        $data->personName = $this->GetFormValue('personName');
        $data->reportFormat = $this->GetFormValue('reportFormat');

        return $data;
    }
}

?>
