<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Evaluation form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Fabiano Tomasini[fabiano@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Rudi Uhrig Neto [rudi@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 16/09/2005
 */

/**
 * Form to manipulate a evaluation
 */
class FrmEvaluation extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(new AcdEvaluation(), array('evaluationId'), 'BusEvaluation');
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();

            //Field evaluation id
            $fields[] = new MTextLabel('', $pk->evaluationId, _M('Código', $module));
            $fields[] = new MHiddenField('evaluationId', $pk->evaluationId);

            $data = $this->busObject->getEvaluation($pk->evaluationId);
            $data->moodleEvaluation = strlen($data->moodleEvaluationId) > 0;
        }

        // Field limbo
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;

        // Field period
        $business = new BusinessAcademicBusContract();
        $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId)) > 0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período', $module), $business->getPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[] = $periodId;

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $fields[] = $courseOccurrenceLookup;

        // Field learning period
        $learningPeriodLabel = new MText('learningPeriodLabel', _M('Período letivo', $module) . ':');
        $learningPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId', $data->learningPeriodId), null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo,limbo,limbo,limbo,limbo,learningPeriodDescription', $module, 'LearningPeriod', null, array('periodId' => 'periodId', 'courseId' => 'courseId', 'courseVersion' => 'courseVersion'), true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo', $module));
        $validators[] = new MIntegerValidator('learningPeriodId', '', 'optional');
        $learningPeriodDescription = new MTextField('learningPeriodDescription', $this->getFormValue('learningPeriodDescription', $data->learningPeriodDescription), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriodDescription->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriodDescription->setReadOnly(true);
        $hctLearningPeriod = new MHContainer('hctLearningPeriod', array($learningPeriodLabel, $learningPeriodId, $learningPeriodDescription));
        $hctLearningPeriod->setShowLabel(true);
        $fields[] = $hctLearningPeriod;

        // Field offered curricular component
        $groupLabel = new MText('groupLabel', _M('Disciplina oferecida', $module) . ':');
        $groupLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $groupLabel->setClass('m-caption m-caption-required');
        $groupId = new MLookupTextField('groupId', $this->getFormValue('groupId', $data->groupId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'groupGroupName', $module, 'Group', null, array('professorId' => 'professorId', 'learningPeriodId' => 'learningPeriodId', 'courseId' => 'courseId'), true);
        $groupId->setJsHint(_M('Informe o código da disciplina oferecida', $module));
        $validators[] = new MIntegerValidator('groupId', _M('Disciplina oferecida', $module), 'required');
        $groupGroupName = new MTextField('groupGroupName', strlen($this->getFormValue('groupGroupName', $data->groupGroupName)) > 0 ? $this->getFormValue('groupGroupName', $data->groupGroupName) : $getGroup->groupName, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $groupGroupName->setJsHint(_M('Nome da disciplina oferecida', $module));
        $groupGroupName->setReadOnly(true);
        $hctGroup = new MHContainer('hctGroup', array($groupLabel, $groupId, $groupGroupName));
        $hctGroup->setShowLabel(true);
        $fields[] = $hctGroup;

        // Field professor
        $professorLabel = new MText('professorlabel', _M('Professor', $module) . ':');
        $professorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $professorLabel->setClass('m-caption m-caption-required');
        $professorId = new MLookupTextField('professorId', $this->getFormValue('professorId', $data->professorId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'professorName', 'basic', 'PhysicalPersonProfessor', null, $params, true);
        $professorId->setJsHint(_M('Informe o código do professor', $module));
        $validators[] = new MIntegerValidator('professorId', _M('Professor', $module), 'optional');
        $professorName = new MTextField('professorName', $this->getFormValue('professorName', $data->professorName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $professorName->setReadOnly(true);
        $professorName->setJsHint(_M('Nome do professor', $module));
        $hctProfessor = new MHContainer('hctProfessor', array($professorLabel, $professorId, $professorName));
        $hctProfessor->setShowLabel(true);
        $fields[] = $hctProfessor;
        
        // Quem pode digitar notas
        $digitarNotas = new MComboBox('podeDigitar', $this->getFormValue('podeDigitar', $data->podeDigitar), _M('Quem pode digitar as notas', $module), BusinessServicesBusProfessor::listarTipoDeProfessor());
        $digitarNotas->setJsHint(_M('Selecione uma opção', $module));
        $fields[] = $digitarNotas;

        // Field degree
        $degreeLabel = new MText('degreeLabel', _M('Grau acadêmico', $module) . ':');
        $degreeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $degreeLabel->setClass('m-caption m-caption-required');
        $degreeId = new MLookupTextField('degreeId', $this->getFormValue('degreeId', $data->degreeId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'limbo, degreeDescription', $module, 'Degree', null, array('learningPeriodId' => 'learningPeriodId'), true);
        $degreeId->setJsHint(_M('Informe o código do grau acadêmico', $module));
        $validators[] = new MIntegerValidator('degreeId', _M('Grau acadêmico', $module), 'required');
        $degreeDescription = new MTextField('degreeDescription', $this->getFormValue('degreeDescription', $data->degreeDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $degreeDescription->setReadOnly(true);
        $degreeDescription->setJsHint(_M('Descrição do grau acadêmico', $module));
        $hctDegree = new MHContainer('hctDegree', array($degreeLabel, $degreeId, $degreeDescription));
        $hctDegree->setShowLabel(true);
        $fields[] = $hctDegree;

        if ( SAGU::getParameter('basic', 'MOODLE_INSTALLED') == 'YES' )
        {
            //Fields situation
            $importEvaluationLabel = new MText('importMoodleEvaluationLabel', _M('Importar do moodle', $module) . ':');
            $importEvaluationLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $importEvaluation = new MCheckBox('moodleEvaluation', DB_TRUE);
            if ( $function == SForm::FUNCTION_UPDATE )
            {
                $importEvaluation->setChecked($data->moodleEvaluation);
            }
            $importEvaluation->addAttribute('onchange', $this->getAjaxAction('getMoodleAssignment', 'divFieldsAssignment', false));

            $fields['situation'] = new MHContainer('hctImportMoodleEvaluation', array($importEvaluationLabel, $importEvaluation));
            $fields['situation']->setShowLabel(false);
        }
        $fields[] = new MDiv('divFieldsAssignment', $this->getMoodleAssignment($data));

        // Field date forescast
        $dateForecastLabel = new MText('dateForecastLabel', _M('Data prevista', $module) . ':');
        $dateForecastLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dateForecast = new MCalendarField('dateForecast', $this->getFormValue('dateForecast', $data->dateForecast), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dateForecast->setJsHint(_M('Informe a data prevista', $module));
        $validators[] = new MDATEDMYValidator('dateForecast', _M('Data prevista', $module), 'optional');
        $hctForecast = new MHContainer('hctForeseenDate', array($dateForecastLabel, $dateForecast));
        $fields[] = $hctForecast;

        // Field weith
        $weightLabel = new MText('weightLabel', _M('Peso', $module) . ':');
        $weightLabel->setClass('m-caption m-caption-required');
        $weightLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $weight = new MTextField('weight', $this->getFormValue('weight', $data->weight ? $data->weight : 1), '', 10);
        $weight->setJsHint(_M('Informe o peso', $module));
        $validators[] = new MRequiredValidator('weight', _M('Peso', $module));
        $hctWeight = new MHContainer('hctWeight', array($weightLabel, $weight));
        $fields[] = $hctWeight;

        // Ativa função de controle de pontuação máxima nas avaliações
        if(SAGU::getParameter('academic', 'CONTROLE_PONTUACAO_MAXIMA_AVALIACAO') == 'TRUE')
        {
            // Campo de máximo de pontos possíveis de se atingir na referida avaliação
            $maxPointsLabel	= new MText("maxPointsLabel", _M('Máximo de pontos', $module) . ':');
            $maxPointsLabel->setClass('m-caption m-caption-required');
            $maxPointsLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
            $maxPoints = new MTextField('maxPoints', $this->getFormValue('maxPoints', $data->maxPoints), null, 10);
            $maxPoints->setJsHint( _M('Informe o número máximo de pontos possíveis de se atingir na referida avaliação.', $module) );
            $validators[] = new MFloatValidator('maxPoints', _M('Máximo de pontos', $module), null, null, 'required');
            $fields[] = new MHContainer('maxPointsCnt', array($maxPointsLabel, $maxPoints));
        }

        parent::defineFields($fields, $validators, $data);
    }

    public function getMoodleAssignment($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( $args->moodleEvaluation == DB_TRUE )
        {
            if ( strlen($args->groupId) == 0 )
            {
                $this->addInfo(_M('Insira uma disciplina oferecida', $module));
            }
            else
            {
                //Business moodle
                $busMoodle = new BusinessAcademicBusMoodle();

                //Get moodle evaluation
                $data = new stdClass();
                $data->groupId = $args->groupId;
                $assignment = $busMoodle->getMoodleAssignment($data);

                //Insert combo moodle evaluation
                if ( is_array($assignment) )
                {
                    // Field moodle evaluation
                    $moodleAssignmentLabel = new MText('moodleEvaluationLabel', _M('Tarefa do moodle', $module) . ':');
                    $moodleAssignmentLabel->setClass('m-caption m-caption-required');
                    $moodleAssignmentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                    $moodleAssignment = new MComboBox('moodleEvaluationId', $this->getFormValue('moodleEvaluationId', $args->moodleEvaluationId), '', $assignment);
                    $hctMoodleAssigment = new MHContainer('hctMoodleAssignment', array($moodleAssignmentLabel, $moodleAssignment));
                    $fields = $hctMoodleAssigment;
                }
            }
        }
        else
        {
            // Field description evaluation
            $descriptionLabel = new MText('descriptionLabel', _M('Descrição', $module) . ':');
            $descriptionLabel->setClass('m-caption m-caption-required');
            $descriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));       
            $description = new MTextField('description', $this->getFormValue('description', $args->description), '', 25);
            $description->setJsHint(_M('Informe a descrição da avaliação', $module));
            $hctDescription = new MHContainer('hctDescription', array($descriptionLabel, $description));
            $fields[] = new MDiv('divDescription', array($hctDescription), null,'align=right'); 
            
        }
        return $fields;
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     */
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        $data = clone ($this->object);
        $vars = get_object_vars($data);

        foreach ( $vars as $var => $value )
        {
            $fieldName = $var;
            $data->$var = MIOLO::_REQUEST($fieldName);
        }

        $importMoodle = MIOLO::_REQUEST('moodleEvaluation');

        //If moodle evaluation is true
        if ( $importMoodle )
        {
            if ( strlen($data->moodleEvaluationId) )
            {
                $busMoodle = new BusinessAcademicBusMoodle();
                $filters = new stdClass();
                $filters->groupId = $data->groupId;
                $filters->moodleEvaluationId = MIOLO::_REQUEST('moodleEvaluationId');
                $assignment = $busMoodle->getMoodleAssignment($filters);
                $data->moodleEvaluationId = $assignment[0][0];
                $data->description = $assignment[0][1];
            }
        }

        return $data;
    }
}
?>