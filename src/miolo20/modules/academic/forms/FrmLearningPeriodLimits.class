<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Formulário de limites do período letivo
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 03/03/2011
 *
 **/
class FrmLearningPeriodLimits extends FrmLearningPeriodFather
{
    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Load data
        $data = $this->getLearningPeriodData();

        // Field disapprovament to disapprovament period        
        $disapprovementsNumber = new MText('disapprovementsNumber', _M('Número de reprovações', $module) . ':');
        $disapprovementsNumber->setClass('m-caption m-caption-required');
        $disapprovementsNumber->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $disapprovementsToDisapprovePeriod = new MIntegerField('disapprovementsToDisapprovePeriod', $this->getFormValue('disapprovementsToDisapprovePeriod', $data->disapprovementsToDisapprovePeriod), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Número de reprovações necessárias para que o aluno seja reprovado em todo o período letivo',$module));
        $validators[] = new MRequiredValidator('disapprovementsToDisapprovePeriod', _M('Número de reprovações',$module));
        $disapprovementsToDisapprovePeriod->setJsHint(_M('Informe o número de reprovações necessárias para que o aluno seja reprovado em todo o período letivo', $module));        
        $hctDisapprovementsToDisapprovePeriod = new MHContainer('hctDisapprovementsToDisapprovePeriod', array($disapprovementsNumber, $disapprovementsToDisapprovePeriod));        
        

        // Field maximum number of disapprovament that students may have courses for you to the disciplines of the next semester he failed most subjects.        
        $maximumDisapprovalsNumber = new MText('maximumDisapprovalsNumber', _M('Número máximo de reprovações', $module) . ':');
        $maximumDisapprovalsNumber->setClass('m-caption m-caption-required');
        $maximumDisapprovalsNumber->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $maximumDisapprovals = new MIntegerField('maximumDisapprovals', $this->getFormValue('maximumDisapprovals', $data->maximumDisapprovals), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Número máximo de reprovações que o aluno pode ter para cursar as disciplinas do próximo período', $module));
        $validators[] = new MRequiredValidator('maximumDisapprovals', _M('Número máximo de reprovações', $module));
        $maximumDisapprovals->setJsHint(_M('Informe o número máximo de reprovações que o aluno pode ter para cursar as disciplinas do próximo período', $module));
        $htcMaximumDisapprovals = new MHContainer('htcMaximumDisapprovals', array($maximumDisapprovalsNumber, $maximumDisapprovals));

        // Field maximum number of periods that the student has to study their dependencies.        
        $maximumPeriodsNumber = new MText('maximumPeriodsNumber', _M('Número máximo de períodos', $module) . ':');
        $maximumPeriodsNumber->setClass('m-caption m-caption-required');
        $maximumPeriodsNumber->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $maximumPeriods = new MIntegerField('maximumPeriods', $this->getFormValue('maximumPeriods', $data->maximumPeriods), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Número máximo de períodos que o aluno pode cursar sem ter que cursar as dependências', $module));
        $validators[] = new MRequiredValidator('maximumPeriods', _M('Número máximo de períodos', $module));
        $maximumPeriods->setJsHint(_M('Informe o número máximo de períodos que o aluno pode cursar sem ter que cursar as dependências', $module));
        $htcMaximumPeriods = new MHContainer('htcMaximumPeriods', array($maximumPeriodsNumber, $maximumPeriods));

        $vctDisapprovementsToDisapprovePeriod = new MVContainer('cvtDisapprovement', array($disapprovementsToDisapprovePeriodLabel, $hctDisapprovementsToDisapprovePeriod, $maximumDisapprovalsLabel, $htcMaximumDisapprovals, $maximumPeriodsLabel, $htcMaximumPeriods));        
        $fields[] = new MSeparator('');
        $bsg = new BaseGroup('bsg', _M('Reprovações',$module), array(new MSeparator(), $vctDisapprovementsToDisapprovePeriod), 'vertical');
        $bsg->showLabel = true;
        $bsg->width = '100%';
        $fields[] = $bsg;

        // Field Is number hours
        $options  = array(  array(_M('Créditos', $module), DB_FALSE),
                            array(_M('Horas', $module), DB_TRUE) );
        $isNumberHoursLabel = new MText('isNumberHoursLabel', _M('Tipo', $module));
        $isNumberHoursLabel->setClass('m-caption m-caption-required');
        $isNumberHoursLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $isNumberHoursOption_ = $this->GetFormValue('isNumberHours',$data->isNumberHours) ? $this->GetFormValue('isNumberHours',$data->isNumberHours) : DB_FALSE;
        $isNumberHoursOption = new MRadioButtonGroup('isNumberHours', '', $options , $isNumberHoursOption_, null, 'horizontal');
        $isNumberHoursOption->SetShowLabel(false);
        $hctisNumberHoursOptionOpt = new MHContainer('hctReportOpt', array($isNumberHoursLabel, $isNumberHoursOption));
        $hctisNumberHoursOptionOpt->setShowLabel(false);
        $isNumberHoursOption->addAttribute('onchange', SForm::getAjaxAction('changeCredit', 'divCampo', false)); 

        // Field minimum credits        
        $minimumCreditsNumberForPupil= new MText('minimumCreditsNumber', _M('Mínimo', $module) . ':');
        $minimumCreditsNumberForPupil->setClass('m-caption m-caption-required');
        $minimumCreditsNumberForPupil->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $minimumCredits = new MIntegerField('minimumCredits', $this->getFormValue('minimumCredits', (is_null($data->minimumCredits) ? '0' : $data->minimumCredits)), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Aluno é obrigado a cursar em discipinas', $module));
        $validators[] = new MRequiredValidator('minimumCredits', _M('Mínimo', $module));
        $minimumCredits->setJsHint(_M('Informar o número mínimo de créditos que o aluno é obrigado a cursar em discipinas', $module));
        $hctMinimumCredits = new MHContainer('hctMinimumCredits', array($minimumCreditsNumberForPupil, $minimumCredits));
        $vctMinimumCredits = new MVContainer('vctMinimumCredits', array($minimumCreditsLabel, $hctMinimumCredits));

        // Field maximum credits
        $maximumCreditsNumber = new MText('maximumCreditsLabel', _M('Máximo', $module) . ':');
        $maximumCreditsNumber->setClass('m-caption m-caption-required');
        $maximumCreditsNumber->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $maximumCredits = new MIntegerField('maximumCredits', $this->getFormValue('maximumCredits', (is_null($data->maximumCredits) ? '0' : $data->maximumCredits)), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MRequiredValidator('maximumCredits', _M('Máximo',$module));
        $maximumCredits->setJsHint(_M('Informe o número máximo de créditos que um aluno é obrigado a cursar em disciplinas', $module));
        $hctMaximumCredits = new MHContainer('hctMaximumCredits', array($maximumCreditsNumber, $maximumCredits));

        // Field minimum credits freshmann        
        $minimumCreditsFreshmanNumber = new MText('minimumCreditsFreshmanLabel', _M('Mínimo', $module) . ':');
        $minimumCreditsFreshmanNumber->setClass('m-caption m-caption-required');
        $minimumCreditsFreshmanNumber->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $minimumCreditsFreshman = new MIntegerField('minimumCreditsFreshman', $this->getFormValue('minimumCreditsFreshman', (is_null($data->minimumCreditsFreshman) ? '0' : $data->minimumCreditsFreshman)), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Calouro é obrigado a cursar em disciplinas', $module));
        $validators[] = new MRequiredValidator('minimumCreditsFreshman', _M('Mínimo', $module));
        $minimumCreditsFreshman->setJsHint(_M('Informar o número mínimo de créditos que o calouro é obrigado a cursar em disciplinas', $module));
        $hctMinimumCreditsFreshman = new MHContainer('hctMinimumCreditsFreshman', array($minimumCreditsFreshmanNumber, $minimumCreditsFreshman));
        $vctMinimumCreditsFreshman = new MVContainer('vctMinimumCreditsFreshmann', array($minimumCreditsFreshmanLabel, $hctMinimumCreditsFreshman));

        // Field maximum credits freschman
        $maximumCreditsFreshmanNumber = new MText('maximumCreditsFreshmanLabel', _M('Máximo', $module) . ':');
        $maximumCreditsFreshmanNumber->setClass('m-caption m-caption-required');
        $maximumCreditsFreshmanNumber->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $maximumCreditsFreshman = new MIntegerField('maximumCreditsFreshman', $this->getFormValue('maximumCreditsFreshman', (is_null($data->maximumCreditsFreshman) ? '0' : $data->maximumCreditsFreshman)), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $validators[] = new MRequiredValidator('maximumCreditsFreshman', _M('Mínimo', $module));
        $maximumCreditsFreshman->setJsHint(_M('Informe o número máximo de créditos que um calouro é obrigado a cursar em disciplinas', $module));
        $hctMaximumCreditsFreshman = new MHContainer('hctMaximumCreditsFreshman', array($maximumCreditsFreshmanNumber, $maximumCreditsFreshman));

        // Field minimum credits turn        
        $minimumCreditsTurnNumber =  new MText('minimumCreditsTurnNumber', _M('Número', $module) . ':');
        $minimumCreditsTurnNumber->setClass('m-caption m-caption-required');
        $minimumCreditsTurnNumber->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $minimumCreditsTurn  = new MIntegerField('minimumCreditsTurn', $this->getFormValue('minimumCreditsTurn', (is_null($data->minimumCreditsTurn) ? '0' : $data->minimumCreditsTurn)), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('Aluno é obrigado a cursar em disciplinas do curso no respectivo turno para que possa cursar mais disciplinas em outros turnos', $module));
        $minimumCreditsTurn->setJsHint(_M('Informar o número mínimo de créditos que o aluno é obrigado a cursar em disciplinas do curso no respectivo turno para que possa cursar mais disciplinas em outros turnos', $module));
        $validators[] = new MRequiredValidator('minimumCreditsTurn', _M('Número', $module));
        $hctMinimumCreditsTurn = new MHContainer('hctMinimumCreditsTurn', array($minimumCreditsTurnNumber, $minimumCreditsTurn));
        $vctMinimumCreditsTurn = new MVContainer('vctMinimumCreditsTurn', array($minimumCreditsTurnLabel, $hctMinimumCreditsTurn));
        
        $fields[] = new MSeparator('');
        $bsg2 = new BaseGroup('bsg2', _M('Número de horas/créditos acadêmicos', $module), array(new MSeparator(), $hctisNumberHoursOptionOpt, $vctMinimumCredits, $hctMaximumCredits, $vctMinimumCreditsFreshman, $hctMaximumCreditsFreshman, $vctMinimumCreditsTurn), 'vertical');
        $bsg2->showLabel = true;
        $bsg2->width = '100%';
        $fields[] = $bsg2;
                
        $fields[] = new MSeparator('');

        $descricao = new MText('desc','<p>Caso não exista disciplinas disponíveis para matrícula atingindo o número mínimo de créditos, permitir que o aluno se matricule'
        . ' somente se marcar todas as possíveis disciplinas.</center>');
        $enableAuth = $this->getFormValue('matriculasemminimodecreditos', $data->matriculasemminimodecreditos) == DB_TRUE ? DB_TRUE : DB_FALSE;
        $option = new MRadioButtonGroup('matriculasemminimodecreditos', '', SAGU::listTrueFalse(1), $enableAuth, null, 'horizontal');
        $vctText = new MHContainer('vctText', array($descricao,new MSeparator(''), $option));
        
        $bsg3 = new BaseGroup('bsg3', _M('Caso não seja possível atingir o limite mínimo de créditos permitir a matricula nas disciplinas disponíveis?', $module), array(new MSeparator(), $vctText, 'vertical'));
        $bsg3->addStyle('visibility','visible');
        $bsg3->showLabel = true;
        $bsg3->width = '100%';
        
       if($isNumberHoursOption_ == DB_TRUE)
        {
            $bsg3->addStyle('visibility','hidden');
        }

        $fields[] = $bsg3;
        
        $fields[] = new MDiv('divCampo');
        
        $this->setFields($fields);
        $this->setValidators($validators);
    }
    
    public function changeCredit($args)
    {        
        $this->page->addAJAXJsCode("(function changeCredit()
                            {   
                                var elemHiden = xGetElementById('m_bsg3');
                                var elem = xGetElementById('isNumberHours_1');
                                if(elem.checked)
                                {
                                    document.getElementById('matriculasemminimodecreditos_0').value = 'f';
                                    elemHiden.style.visibility = 'hidden';
                                }
                                else
                                {
                                    elemHiden.style.visibility = 'visible';
                                    document.getElementById('matriculasemminimodecreditos_0').value = 't';
                                }
                            })();");
    }
}
?>