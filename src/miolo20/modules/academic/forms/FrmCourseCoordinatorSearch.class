<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdCourseCoordinator table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 31/08/2005
 *
 */
class FrmCourseCoordinatorSearch extends SSearchForm
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        parent::__construct(_M('Localizar', 'basic'), new AcdCourseCoordinator(), array( 'courseId', 'courseVersion', 'turnId', 'unitId', 'coordinatorId' ), 'BusCourseCoordinator');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        /*
         * Course occurrence lookup
         */
        $lkpValue = array(
            $this->GetFormValue('courseId', $data->courseId),
            $this->GetFormValue('courseVersion', $data->courseVersion),
            $this->GetFormValue('turnId', $data->turnId),
            $this->GetFormValue('unitId', $data->unitId)
        );
        $courseOccurrenceLookup = new SCourseOccurrenceLookup($lkpValue);
        $courseOccurrenceLookup->showRequiredLabel();
        $validators[] = new MRequiredValidator('courseId', _M('Curso', $module));
        $validators[] = new MIntegerValidator('courseVersion', _M('Versão do curso', $module));
        $validators[] = new MIntegerValidator('turnId', _M('Turno', $module));
        $validators[] = new MIntegerValidator('unitId', _M('Unidade', $module));
        $fields[]  = $courseOccurrenceLookup;

        //Fields coordinator
        $coordinatorLabelS = new MText('coordinatorLabel', _M('Coordenador', $module) . ':');
        $coordinatorLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $coordinatorIdS = new MLookupTextField('coordinatorIdS', $this->getFormValue('coordinatorIdS', $data->coordinatorIdS), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'coordinatorNameS', 'basic', 'PhysicalPersonProfessor', null, null, true);
        $coordinatorIdS->setJsHint(_M('Informe o código do coordenador', $module));
        $validators[] = new MIntegerValidator('coordinatorIdS', _M('Coordenador', $module), 'optional');
        $coordinatorNameS = new MTextField('coordinatorNameS', $this->coordinatorNameS->value, _M('Nome do coordenador', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $coordinatorNameS->setJsHint(_M('Informe o nome do coordenador', $module));
        $hctCoordinatorS = new MHContainer('hctCoordinatorS', array( $coordinatorLabelS, $coordinatorIdS, $coordinatorNameS ));
        $hctCoordinatorS->setShowLabel(false);
        $fields[] = $hctCoordinatorS;

        //Field begin date
        $beginDateS = new MCalendarField('beginDateS', $this->beginDateS->value, _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDateS->setJsHint(_M('Informe a data inicial', $module));
        $validators[] = new MDATEDMYValidator('beginDateS', '', 'optional');
        $fields[] = $beginDateS;

        //Field end date
        $endDateS = new MCalendarField('endDateS', $this->endDateS->value, _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDateS->setJsHint(_M('Informe a data final', $module));
        $validators[] = new MDATEDMYValidator('endDateS', '', 'optional');
        $fields[] = $endDateS;

        parent::defineFields($fields, $module, 'GrdCourseCoordinatorSearch');
    }

    /**
     * Method to gather all information from the form fields
     * and put them on a database compatible object
     * */
    public function getTypesData()
    {
        // get filters values
        $data->courseId = $this->getFormValue('courseId');
        $data->courseVersion = $this->getFormValue('courseVersion');
        $data->courseName = $this->getFormValue('courseName');
        $data->turnId = $this->getFormValue('turnId');
        $data->turnDescription = $this->getFormValue('turnDescription');
        $data->unitId = $this->getFormValue('unitId');
        $data->unitDescription = $this->getFormValue('unitDescription');
        $data->coordinatorId = $this->getFormValue('coordinatorIdS');
        $data->coordinatorName = $this->getFormValue('coordinatorNameS');
        $data->beginDate = $this->getFormValue('beginDateS');
        $data->endDate = $this->getFormValue('endDateS');
        $data->isSendEmail = $this->getFormValue('isSendEmailS');
        $data->level = $this->getFormValue('levelS');
        $data->email = $this->getFormValue('emailS');
        $data->expirationLevel = $this->getFormValue('expirationLevelS');
                
        return $data;
    }
}

?>
