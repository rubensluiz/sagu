<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * PupilListing form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Cristian Edson Göhl [cristian@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2005
 *
 **/

/**
 * Form to manipulate a pupilListing
 **/
class FrmPupilListing extends SForm
{
    /**
     * Class constructor
     **/
    public $gridData;
    
    public function __construct($data)
    {   
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Listagem de alunos', $module), null, null);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {        
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        //Desabilita os botões da barra de ferramentas
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);

        //Campo período
        $businessPeriod = new BusinessAcademicBusPeriod();
        $periodId       = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod() );
        $periodId->setJsHint(_M('Selecione um período', $module));
        $fields[]       = $periodId;
        $validators[]   = new MRequiredValidator('periodId', _M('Período',$module));        
                
        // Opç?es de relatório.
        $radio1 = new MRadioButton('reportOption', 1, '', null, _M('Número de alunos matriculados por curso', $module));
        $radio1->addAttribute('onChange', $this->getAjaxAction('showConsiderPreEnrolled', 'divConsiderPreEnrolled', false, array('option' => 1)));
        
        $radio2 = new MRadioButton('reportOption', 2, '', null, _M('Número de alunos não matriculados por curso', $module));
        $radio2->addAttribute('onChange', $this->getAjaxAction('showConsiderPreEnrolled', 'divConsiderPreEnrolled', false, array('option' => 2)));
        
        $radio3 = new MRadioButton('reportOption', 3, '', null, _M('Número de alunos por curso e unidade', $module));
        $radio3->addAttribute('onChange', $this->getAjaxAction('showConsiderPreEnrolled', 'divConsiderPreEnrolled', false, array('option' => 3)));
        
        $radio4 = new MRadioButton('reportOption', 4, '', null, _M('Número de alunos por número de créditos', $module));
        $radio4->addAttribute('onChange', $this->getAjaxAction('showConsiderPreEnrolled', 'divConsiderPreEnrolled', false, array('option' => 4)));
        
        $radio5 = new MRadioButton('reportOption', 5, '', null, _M('Número de alunos matriculados por curso e disciplina', $module));
        $radio5->addAttribute('onChange', $this->getAjaxAction('showConsiderPreEnrolled', 'divConsiderPreEnrolled', false, array('option' => 5)));
        
        $reportOptionLabel = new MText('reportOptionLabel', _M('Opção de relatório:', $module));
        $reportOptionLabel->setClass('m-caption');
        $reportOptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $reportOptionVC = new MVContainer('reportOptionVC', array($radio1, $radio2, $radio3, $radio4, $radio5));
        $reportOptionHC = new MHContainer('reportOptionHC', array($reportOptionLabel, $reportOptionVC));
        $fields[] = $reportOptionHC;        

        //Field formation level
        $busFormationLevel = new BusinessAcademicBusFormationLevel();
        $formationLevels   = $busFormationLevel->listFormationLevel();

        $filterLabel   = new MText('filterLabel', _M('Grau de formação', $module) . ':');
        $filterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $filterLabel->setClass('m-caption m-caption-required');
        $filter = new MMultiSelection('filter', is_array($this->getFormValue('filter', $filter)) ? $this->getFormValue('filter', $filter) : array(), '', $formationLevels, true, null, 10);
        $validators[] = new MRequiredValidator('filter', _M('Grau de formação', $module), 'required');
        $hctFilter = new MHContainer('hctFilter', array($filterLabel, $filter));
        $fields[] = $hctFilter;
        
        $fields[] = new Separator('');
        $fields[] = new MDiv('divConsiderPreEnrolled', $this->showConsiderPreEnrolled());       

        $fields[] = new Separator('');
        $fields[] = new MButton('btnGenerate', _M('Gerar', $module));

        $fields[] = new Separator('');
        parent::defineFields( array("fields" => $fields, "validators" => $validators) );
        
        if ( MIOLO::_REQUEST('__EVENTTARGETVALUE') || MIOLO::_REQUEST('pn_page') )
        {
            $this->btnGenerate_click();
        }
    }
    
    /**
     * Exibe campo 'Considerar pré-matriculados'.
     * 
     * @param type $args
     */
    public function showConsiderPreEnrolled($args = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $option = $args->option ? $args->option : $this->GetFormValue('reportOption');
        
        if ( $option == 2 || $option == 4 || is_null($option)  )
        {
            $fields = "";
        }
        else
        {        
            // Considerar Pré-matriculados
            $considerPreEnrolledLabel   = new MText('considerPreEnrolledLabel', _M('Considerar pré-matriculados', $module) . '?');
            $considerPreEnrolledLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $considerPreEnrolledLabel->setClass('m-caption');
            $considerPreEnrolledLabel->addAttribute('style', 'text-align:right !important; float:right !important');
            $considerPreEnrolled = new MCheckBox('considerPreEnrolled', DB_TRUE, null, false, null, "Sim");
            $hctConsiderPe = new MHContainer('hctConsiderPe', array($considerPreEnrolledLabel, $considerPreEnrolled));
            $fields[] = $hctConsiderPe;
        }
        
        return $fields;
    }

    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function btnGenerate_click($sender = null)
    {
        $optionId   = $this->getFormValue('reportOption');
        $periodId   = $this->getFormValue('periodId');
        $filter     = $this->getFormValue('filter');
        $considerPe = $this->getFormValue('considerPreEnrolled');
        
        $fields = $this->getResultsGrid($optionId, $periodId, $filter, $considerPe);
        
        $this->addFields($fields);
    }

    /**
     * Retorna os campos a serem rendererizados de acordo com a opção selecionada.
     * Este método também é utiliado para possibilitar a exportação para CSV dentro
     * de chamadas AJAX.
     *
     * @param (string) $optionId Tipo de relatório a ser gerado
     * @param (string) $periodId Período
     * @param (string) $filter Lista de graus de formação
     *
     * @return (array) Array contendo os campos a serem renderizados.
     */
    public function getResultsGrid($optionId, $periodId, $filter, $considerPe = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $businessPupilListing = new BusinessAcademicBusPupilListing();
        $fields = array();
        
        switch ($optionId)
        {
            case 1:
                //pesquisa os dados
                $pupilListingData = $businessPupilListing->getPupilListingOp1($periodId, $filter, $considerPe);
                $emails           = $businessPupilListing->getPupilEmailListingOp1($periodId, $filter);

                $filtersSignature = new stdClass();
                $filtersSignature->courseId        = NULL;
                $filtersSignature->periodId        = $periodId;
                $filtersSignature->formationLevels = $filter;

                $pupilSignature   = $businessPupilListing->getPupilsSignature($filtersSignature);

                //registrar em seção do miolo
                $session   = $MIOLO->session;
                $session->setValue('emails', serialize($emails));
                $session->setValue('pupilSignature', serialize($pupilSignature));

                $bsg1        = new BaseGroup('bsg1', null, $flds, 'horizontal');
                $bsg1->width = '70%';
                $bsg1->align = 'center';
                $bsg1->addboxstyle('align', 'center');
                $div1        = new MDiv('div1', $flds, null, 'align=center');
                $fields[] = $div1;

                //cria a grid
                $gridPupilListingOp1 = $MIOLO->getUI()->getGrid($module, 'GrdPupilListingOp1', $pupilListingData);
                $gridPupilListingOp1->setData($pupilListingData);
                $this->gridData = $gridPupilListingOp1;
                
                $fields[] = $gridPupilListingOp1;

                break;
            case 2:
                $pupilListingData = $businessPupilListing->getNotEnrolled($periodId, $filter);

                $gridPupilListingOp2 = $MIOLO->getUI()->getGrid($module, 'GrdPupilListingOp2', $pupilListingData);
                $gridPupilListingOp2->setData($pupilListingData);
                $this->gridData = $gridPupilListingOp2;
                $fields[] = $gridPupilListingOp2;
                break;
            case 3:
                $pupilListingData    = $businessPupilListing->getPupilListingOp3($filter, $considerPe, $periodId);
                $gridPupilListingOp3 = $MIOLO->getUI()->getGrid($module, 'GrdPupilListingOp3', $pupilListingData);
                $gridPupilListingOp3->setData($pupilListingData);
                $this->gridData = $gridPupilListingOp3;
                $fields[] = $gridPupilListingOp3;
                break;
            case 4:
                $pupilListingData = $businessPupilListing->getPupilListingOp4($periodId, $filter);
                $gridPupilListingOp4 = $MIOLO->getUI()->getGrid($module, 'GrdPupilListingOp4', $pupilListingData);
                $gridPupilListingOp4->setData($pupilListingData);
                $this->gridData = $gridPupilListingOp4;
                $fields[] = $gridPupilListingOp4;
                $totalCredits = 0;
                $totalPupils = 0;
                
                for ($i = 0; $i < count($pupilListingData); $i++)
                {
                    $totalCredits += $pupilListingData[$i][7] * $pupilListingData[$i][8];
                    $totalPupils += $pupilListingData[$i][8];
                }
                
                $totalCreditsField = new MText('totalCreditsField', "<b>    " . _M('Total de créditos', $module) . ": " . $totalCredits . "</b>");
                $totalPupilsField  = new MText('totalCreditsField', "<b>    " . _M('Total de alunos', $module) . ": " . $totalPupils . "</b>");
                
                $vContainer = new MVContainer('vContainer', array($totalCreditsField, $totalPupilsField));
                
                $fields[] = new MSeparator();
                $fields[] = $vContainer;
                
                break;
            case 5:
                $pupilListingData = $businessPupilListing->getPupilListingOp5($periodId, $filter, $considerPe);

                $gridData = array();
                $gridData[] = array("<font size = 2 color = 'RED'><b>" . $pupilListingData[0][0] . "</b></font>", "<font size = 2 color = 'RED'><b>" . $pupilListingData[0][2] . " - " . $pupilListingData[0][6] . "</b></font>", null);

                $totalPupils = 0;

                for ($i = 0; $i < count($pupilListingData); $i++)
                {
                    $gridData[] = array ($pupilListingData[$i][7], $pupilListingData[$i][8], $pupilListingData[$i][9]);
                    $totalPupils += $pupilListingData[$i][9];

                    if ($pupilListingData[$i][0] != $pupilListingData[$i+1][0] ||
                        $pupilListingData[$i][5] != $pupilListingData[$i+1][5] ||
                        $pupilListingData[$i+1]  == null)
                    {
                        $gridData[]  = array(null, "<b>" . _M('TOTAL DE MATRÍCULAS', $module) ."</b>", "<b>" . $totalPupils . "</b>");
                        $totalPupils = 0;

                        if ($pupilListingData[$i+1] != null)
                        {
                            $gridData[] = array("<font size = 2 color = 'RED'><b>" . $pupilListingData[$i+1][0] . "</b></font>", "<font size = 2 color = 'RED'><b>" . $pupilListingData[$i+1][2] . " - " . $pupilListingData[$i+1][6] . "</b></font>", null);
                        }   
                    }
                }

                $gridPupilListingOp5 = $MIOLO->getUI()->getGrid($module, 'GrdPupilListingOp5', $gridData);
                $gridPupilListingOp5->setData($gridData);
                $this->gridData = $gridPupilListingOp5;
                $fields[] = $gridPupilListingOp5;
                break;            
            default:
                break;
        }

        return $fields;
    }

    /**
     * Exporta os dados da grid num arquivo CSV
     */
    public function exportGridAsCSV_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // Obtém as opções selecionadas no form
        $optionId = $this->getFormValue('reportOption');
        $periodId = $this->getFormValue('periodId');
        $filter   = $this->getFormValue('filter');

        // Obtém os campos que seriam renderizados
        $fields = $this->getResultsGrid($optionId, $periodId, $filter);
        // Procura pela instância da grid para obter seu nome
        $gridName = '';
        foreach ( (array)$fields as $f )
        {
            if ( $f instanceof MGrid )
            {
                $gridName = $f->name;
                break;
            }
        }

        // Se encontrou um nome de grid na lista de campos
        if ( strlen($gridName) > 0 )
        {
            // Instancia um novo form para utilizar o método getGridData. O form será descartado.
            $form = new MForm();
            // Adiciona os campos que seriam renderizados neste form.
            $form->addFields($fields);

            // Obtém os dados utilizando o método nativo do MForm getGridData()
            $data = MUtil::getArrayAsCSV($form->getGridData($gridName));
            // Retorna o CSV
            SAGU::returnAsFile('dados.csv', $data, 'text/csv');            
        }
    }
    
    public function exportGridAsPDF_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // Obtém as opções selecionadas no form
        $optionId = $this->getFormValue('reportOption');
        $periodId = $this->getFormValue('periodId');
        $filter   = $this->getFormValue('filter');

        // Obtém os campos que seriam renderizados
        $fields = $this->getResultsGrid($optionId, $periodId, $filter);
        // Procura pela instância da grid para obter seu nome
        $gridName = '';
        foreach ( (array)$fields as $f )
        {
            if ( $f instanceof MGrid )
            {
                $gridName = $f->name;
                break;
            }
        }

        // Se encontrou um nome de grid na lista de campos
        if ( isset($this->gridData) )
        {
            // Instancia um novo form para utilizar o método getGridData. O form será descartado.
            $form = new MForm();
            
            // Adiciona os campos que seriam renderizados neste form.
            $form->addFields($fields);

            // Obtém os dados utilizando o método nativo do MForm getGridData()
            parent::obterArrayComoPDF($form->getGridData($gridName));
        }
    }
    
    /**
     * Exporta dados da grid para HTML.
     */
    public function exportGridAsHTML_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // Obtém as opções selecionadas no form
        $optionId = $this->getFormValue('reportOption');
        $periodId = $this->getFormValue('periodId');
        $filter   = $this->getFormValue('filter');

        // Obtém os campos que seriam renderizados
        $fields = $this->getResultsGrid($optionId, $periodId, $filter);
        // Procura pela instância da grid para obter seu nome
        $gridName = '';
        foreach ( (array)$fields as $f )
        {
            if ( $f instanceof MGrid )
            {
                $gridName = $f->name;
                break;
            }
        }

        // Se encontrou um nome de grid na lista de campos
        if ( isset($this->gridData) )
        {
            // Instancia um novo form para utilizar o método getGridData. O form será descartado.
            $form = new MForm();
            
            // Adiciona os campos que seriam renderizados neste form.
            $form->addFields($fields);

            // Obtém os dados utilizando o método nativo do MForm getGridData()
            $data = MUtil::getArrayAsHTML($form->getGridData($gridName));
            SAGU::returnAsFile('dados.html', $data, 'text/html');
        }
        
        // Finaliza a execução. Como o HTML é gerado em nova janela, o exit aqui não é um problema.
        exit();
    }

    public function signatureList($sender=null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $session = $MIOLO->session;

        $pupilSignature = $session->IsRegistered('pupilSignature') ? unserialize($session->GetValue('pupilSignature')) : null;

        $periodId = MIOLO::_request('periodId');

        $pupilSignature['periodId'] = $periodId;

        $MIOLO->getClass($module, 'RptSignature');
        $report = new RptSignature($pupilSignature);

    }

}

?>

