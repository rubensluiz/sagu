<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Interchange form
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 19/09/2005
 *
 **/

/**
 * Form to manipulate a interchange
 **/
class FrmInterchange extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcdInterchange(), array('interchangeId'), 'BusInterchange');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function,array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $interchangeId = MIOLO::_REQUEST('interchangeId');

            $fields[] = new MTextLabel('interchangeId', $interchangeId, _M('Código', $module));
            $fields[] = new MHiddenField('interchangeId', $interchangeId);

            $data = $this->busObject->getInterchange($interchangeId);
            
            $doComplete = !$this->page->isPostBack();
        }
        else
        {
            $doComplete = true;
        }

        //Field person
        $personLabel = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setClass('m-caption m-caption-required');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId     = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractId', 'personId', 'personName', 'contractCourseId', 'contractCourseName', 'contractCourseVersionS'), $module, 'PersonContract', null, null, $doComplete);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');
        $personName = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson = new MHContainer('hctContract', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $fields[]  = $hctPerson;

        //Field limbo
        $limbo = new MHiddenField('limbo', '');
        $fields[] = $limbo;
        
        //Field contract 
        $contractLabel = new MText('contractLabel', _M('Contrato', $module) . ':');
        $contractLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractId = new MLookupTextField('contractId', $this->getFormValue('contractId', $data->contractId), '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('limbo', 'limbo', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'/*, 'contractTurnId', 'limbo', 'contractUnitId'*/), $module, 'Contract', null, array('personId' => 'personId'), $doComplete);
        $contractId->setJsHint(_M('Informe o código do contrato', $module));
        $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'optional');
        $contractCourseId = new MTextField('contractCourseId', $this->getFormValue('contractCourseId', $data->contractCourseId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setJsHint(_M('Código do curso', $module));
        $contractCourseId->setReadOnly(true);
        $contractCourseVersion = new MTextField('contractCourseVersion', $this->getFormValue('contractCourseVersion',$data->contractCourseVersion), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setJsHint(_M('Versão do curso', $module));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseName = new MTextField('contractCourseName', $this->getFormValue('contractCourseName', $data->contractCourseName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso', $module));
        $hctContract = new MHContainer('hctContract', array($contractLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName));
        $hctContract->setShowLabel(true);
        $fields[]    = $hctContract;

        //Field interchange
        $business           = new BusinessAcademicBusInterchangeType();
        $interchangeTypeId = new MComboBox('interchangeTypeId', $this->getFormValue('interchangeTypeId', $data->interchangeTypeId), _M('Tipo de intercâmbio', $module), $business->listInterchangeType());
        $interchangeTypeId->setJsHint(_M('Informe o código do tipo de intercâmbio', $module));
        $fields[]           = $interchangeTypeId;
        $validators[] = new MRequiredValidator('interchangeTypeId', _M('Tipo de intercâmbio',$module));

        //Field interchange complement
        $interchangeTypeComplement = new MTextField('interchangeTypeComplement', $this->getFormValue('interchangeTypeComplement', $data->interchangeTypeComplement), _M('Complemento do tipo de intercâmbio',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $interchangeTypeComplement->setJsHint(_M('Informe o tipo de intercâmbio', $module));
        $fields[] = $interchangeTypeComplement;
    
        //Field interchange activity
        $activityInterchange = new MTextField('activityInterchange', $this->getFormValue('activityInterchange', $data->activityInterchange), _M('Atividade realizada',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $activityInterchange->setJsHint(_M('Informe a atividade realizada', $module));
        $fields[] = $activityInterchange;

        //Field begin date
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), _M('Data inicial',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial', $module));
        $fields[] = $beginDate;
        $beginDate->setValidator(new MDATEDMYValidator('beginDate', _M('Data inicial',$module), 'required'));

        //Field end date
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), _M('Data final',$module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data final', $module));
        $endDate->setValidator(new MDATEDMYValidator('endDate', _M('Data final',$module), 'required'));
        $fields[] = $endDate;

        //Field origin country
        $originCountryLabel = new MText('originCountryLabel', _M('País de origem', $module) . ':');
        $originCountryLabel->setClass('m-caption m-caption-required');
        $originCountryLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $originCountryId = new MLookupTextField('originCountryId', $this->getFormValue('originCountryId', $data->originCountryId), _M('País de origem', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'originCountryName', 'basic', 'Country', null, null, true);
        $originCountryId->setJsHint(_M('Informe o código do país de origem', $module));
        $validators[] = new MRequiredValidator('originCountryId', _M('País de origem', $module), 'required');
        $originCountryName = new MTextField('originCountryName', $this->getFormValue('originCountryName', $data->originCountryName), _M('Nome do país de origem', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $originCountryName->setJsHint(_M('Nome do país de origem', $module));
        $originCountryName->setReadOnly(true);
        $hctOriginCountry = new MHContainer('hctOriginCountry', array($originCountryLabel, $originCountryId, $originCountryName));
        $hctOriginCountry->setShowLabel(false);
        $fields[] = $hctOriginCountry;

        //Field origin institutional
        $originInstitutionLabel = new MText('originInstitutionLabel', _M('Instituição de origem', $module) . ':');
        $originInstitutionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $originInstitutionId = new MLookupTextField('originInstitutionId', $this->getFormValue('originInstitutionId', $data->originInstitutionId), _M('Instituição de origem', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'originInstitutionName', 'basic', 'LegalPersonInstitution', null, array('countryId' => 'originCountryId'), true);
        $originInstitutionId->setJsHint(_M('Informe o código da instituição de origem',$module));
        $validators[] = new MIntegerValidator('originInstitutionId', _M('Código da instituição de origem',$module), 'optional');
        $originInstitutionName = new MTextField('originInstitutionName', $this->getFormValue('originInstitutionName', $data->originInstitutionName), _M('Nome da instituição de origem', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $originInstitutionName->setJsHint(_M('Nome da instituição de origem', $module));
        $originInstitutionName->setReadOnly(true);
        $hctOriginInstitution = new MHContainer('hctOriginInstitution', array($originInstitutionLabel, $originInstitutionId, $originInstitutionName));
        $hctOriginInstitution->setShowLabel(false);
        $fields[] = $hctOriginInstitution;

        //Field destination country
        $destinationCountryLabel = new MText('destinationCountryLabel', _M('País de destino', $module) . ':');
        $destinationCountryLabel->setClass('m-caption m-caption-required');
        $destinationCountryLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationCountryId = new MLookupTextField('destinationCountryId', $this->getFormValue('destinationCountryId',$data->destinationCountryId), _M('País de destino', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'destinationCountryName', 'basic', 'Country', null, null, true);
        $destinationCountryId->setJsHint(_M('Informe o código do país', $module));
        $validators[] = new MRequiredValidator('destinationCountryId', _M('País de destino', $module), 'required');
        $destinationCountryName = new MTextField('destinationCountryName', $this->getFormValue('destinationCountryName', $data->destinationCountryName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationCountryName->setJsHint(_M('Informe o nome do país', $module));
        $destinationCountryName->setReadOnly(true);
        $hctDestinationCountry = new MHContainer('hctDestinationCountry', array($destinationCountryLabel, $destinationCountryId, $destinationCountryName));
        $hctDestinationCountry->setShowLabel(false);
        $fields[] = $hctDestinationCountry;

        //Field destination institutional
        $destinationInstitutionLabel = new MText('destinationInstitutionLabel', _M('Instituição de destino', $module) . ':');
        $destinationInstitutionLabel->setClass('m-caption m-caption-required');
        $destinationInstitutionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $destinationInstitutionId = new MLookupTextField('destinationInstitutionId', $this->getFormValue('destinationInstitutionId', $data->destinationInstitutionId), _M('Instituição de destino', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'destinationInstitutionName', 'basic', 'LegalPersonInstitution', null, array('countryId' => 'destinationCountryId'), true);
        $destinationInstitutionId->setJsHint(_M('Informe o código da instituição de destino', $module));
        $validators[] = new MIntegerValidator('destinationInstitutionId', _M('Instituição de destino', $module), 'required');
        $destinationInstitutionName= new MTextField('destinationInstitutionName', $this->getFormValue('destinationInstitutionName', $data->destinationInstitutionName), _M('Nome da instituição de destino', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $destinationInstitutionName->setJsHint(_M('Nome da instituição de destino', $module));
        $destinationInstitutionName->setReadOnly(true);
        $hctDestinationInstitution = new MHContainer('hctDestinationInstitution', array($destinationInstitutionLabel, $destinationInstitutionId, $destinationInstitutionName));
        $hctDestinationInstitution->setShowLabel(false);
        $fields[] = $hctDestinationInstitution;

        //Field is remunerated
        $isRemuneratedLabel = new MText('isRemuneratedLabel', _M('É remunerado', $module).'?');
        $isRemuneratedLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $isRemuneratedLabel->setClass('m-caption m-caption-required');
        $isRemunerated = strlen($this->getFormValue('isRemunerated', $data->isRemunerated)) > 0 ? $this->getFormValue('isRemunerated', $data->isRemunerated) : DB_FALSE;
        $isRemunerated = new MRadioButtonGroup('isRemunerated', null, SAGU::listTrueFalse(1), $isRemunerated, null, 'horizontal');
        $isRemunerated->setShowLabel(false);
        $hctIsRemunerated = new MHContainer('hctIsRemunerated', array($isRemuneratedLabel, $isRemunerated));
        $fields[] = $hctIsRemunerated;

        parent::defineFields($fields, $validators, $data);
    }


    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->activity = $this->activityInterchange->value;
        
        return $data;
    }
}
?>
