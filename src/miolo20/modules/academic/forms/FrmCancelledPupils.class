<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Letter for cancelled pupils form
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br    ]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/06/2006
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmCancelledPupils extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;

        parent::__construct(_M('Alunos trancados', $module), NULL, NULL);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');

        $fields[] = new MSeparator();
        $fields[] = new MHiddenField('limbo', '');

        $fields[] = new MSeparator();

        $business        = new BusinessAcademicBusPeriod();
        $currentPeriodId = new MComboBox('currentPeriodId', strlen($this->getFormValue('currentPeriodId', $data->periodId))>0 ? $this->getFormValue('currentPeriodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período atual', $module), $business->listPeriod());  
        $currentPeriodId->setClass('m-caption m-caption-required');
        $validators[]    = new MRequiredValidator('currentPeriodId', '', 'required');
        $fields[]        = $currentPeriodId;
        $fields[]        = new MSeparator();

        $periodTextLabel = new MText('periodTextLabel', _M('Período de impressão das cartas', $module));
        $fields[]        = $periodTextLabel;
        $fields[]        = new MSeparator();        

        $lastPeriodIdOne = new MComboBox('lastPeriodIdOne', $this->getFormValue('lastPeriodIdOne', $data->periodId), _M('Último período um', $module), $business->listPeriod());
        $validators[] = new MRequiredValidator('lastPeriodIdOne');
        $fields[]        = $lastPeriodIdOne;
        $fields[]        = new MSeparator();

 
        $lastPeriodIdTwo = new MComboBox('lastPeriodIdTwo', $this->getFormValue('lastPeriodIdTwo', $data->periodId), _M('Último período dois', $module), $business->listPeriod());
        $fields[]        = $lastPeriodIdTwo;
        $fields[]        = new MSeparator();
 
        $lastPeriodIdThree = new MComboBox('lastPeriodThree', $this->getFormValue('lastPeriodIdThree', $data->periodId), _M('Último período três', $module), $business->listPeriod());
        $fields[]          = $lastPeriodIdThree;
        $fields[]          = new MSeparator();
 
        $lastPeriodIdFour = new MComboBox('lastPeriodIdFour', $this->getFormValue('lastPeriodIdFour', $data->periodId), _M('Último período quatro', $module), $business->listPeriod());
        $fields[]         = $lastPeriodIdFour;
        $fields[]         = new MSeparator();
 
        $lastPeriodIdFive = new MComboBox('lastPeriodIdFive', $this->getFormValue('lastPeriodIdFive', $data->periodId), _M('Último período cinco', $module), $business->listPeriod());
        $fields[]         = $lastPeriodIdFive;
        $fields[]         = new MSeparator();
 
        $reingressionSemesterLabel = new MText('reingressionSemesterLabel', _M('Semestre de reingresso', $module) . ':');
        $reingressionSemesterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $reingressionSemesterLabel->setClass('m-caption m-caption-required');
        $flds[]                    = $reingressionSemesterLabel;

        $reingressionSemester = new MTextField('reingressionSemester', $this->getFormValue('reingressionSemester', $reingressionSemester), '', 5);
        $flds[]               = $reingressionSemester;
        $validators[] = new MRequiredValidator('reingressionSemester', _M('Semestre de reingresso', $module) , 'required');

        $hctReingressionSemester = new MContainer('$hctReingressionSemester', $flds);
        unset($flds);
        $fields[]                = $hctReingressionSemester;
        $fields[]                = new MSeparator();

        $reingressionDateLabel = new MText('reingressionDateLabel', _M('Solicitar data para reingresso', $module) . ':');
        $reingressionDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $reingressionDateLabel->setClass('m-caption m-caption-required');
        $flds[]                = $reingressionDateLabel;

        $reingressionDate = new MCalendarField('reingressionDate', strlen($this->getFormValue('reingressionDate'))>0 ? $this->getFormValue('reingressionDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[]     = new DateDMYValidator('reingressionDate', null, 'required');
        $flds[]           = $reingressionDate; 

        $hctEnroll = new MHContainer('hctEnroll', $flds);
        $hctEnroll->setShowLabel(false);
        $fields[]  = $hctEnroll;
        unset($flds); 
        $fields[]  = new MSeparator();

        $reingressionPeriodLabel = new MText('reingressionPeriodLabel', _M('Período para reingresso', $module) . ':');
        $reingressionPeriodLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $reingressionPeriodLabel->setClass('m-caption m-caption-required');
        $flds[]                  = $reingressionPeriodLabel;
     
        $reingressionPeriodDay = new MTextField('reingressionPeriodDay', '', '', 2);
        $flds[]                = $reingressionPeriodDay;
        $validators[]          = new MIntegerValidator('reingressionPeriodDay', _M('Ano para período de reingresso'), 'required');

         $reingressionPeriodLabel1 = new MText('reingressionPeriodLabel1', '/');
        $flds[]                   = $reingressionPeriodLabel1;
        
        $selMonth = new MSelection('selMonth', $this->getFormValue('selMonth',$currDate['mon']), '', SAGU::listMonths());
        $flds[]   = $selMonth;
        $validators[]        = new MIntegerValidator('selMonth', _M('Mês para período de reingresso'), 'required');

         $reingressionPeriodLabel2 = new MText('reingressionPeriodLabel2', _M('Até', $module));
        $flds[]                   = $reingressionPeriodLabel2;

        $reingressionPeriodDay1 = new MTextField('reingressionPeriodDay1', '', '', 2);
        $flds[]                 = $reingressionPeriodDay1;
        $validators[]           = new MIntegerValidator('reingressionPeriodDay1', _M('Dia para período de reingresso'), 'required');

         $reingressionPeriodLabel3 = new MText('reingressionPeriodLabel3', '/');
        $flds[]                   = $reingressionPeriodLabel3;    

        $selMonth1 = new MSelection('selMonth1', $this->getFormValue('selMonth1',$currDate['mon']), '', SAGU::listMonths());
        $flds[]    = $selMonth1;
        $validators[]        = new MIntegerValidator('selMonth1', _M('Mês para período de reingresso'), 'required');

         $reingressionPeriodLabel4 = new MText('reingressionPeriodLabel4', '/');
        $flds[]                   = $reingressionPeriodLabel4;

        $selYear = new MSelection('selYear', $this->getFormValue('selYear',$currDate['mon']), '', SAGU::listYears(date('Y'), date('Y')+10));
        $flds[]  = $selYear;
        $validators[]        = new MIntegerValidator('selYear', _M('Ano para período de reingresso'), 'required');

        $hctReingressionPeriod = new MContainer('hctReigressionPeriod', $flds);
        unset($flds);
        $fields[]              = $hctReingressionPeriod; 
        $fields[]              = new MSeparator(); 
 
        $firstCurricularComponentPayLabel = new MText('firstCurricularComponentPayLabel', _M('Data de pagamento da primeira disciplina', $module) . ':');
        $firstCurricularComponentPayLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $firstCurricularComponentPayLabel->setClass('m-caption m-caption-required');
        $flds[]                          = $firstCurricularComponentPayLabel;

        $firstCurricularComponentPayDate = new MCalendarField('firstCurricularComponentPayDate', strlen($this->getFormValue('firstCurricularComponentPayDate'))>0 ? $this->getFormValue('firstCurricularComponentPayDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[]     = new DateDMYValidator('firstCurricularComponentPayDate', null, 'required');
        $flds[]           = $firstCurricularComponentPayDate; 

        $hctEnroll = new MHContainer('hctEnroll', $flds);
        $hctEnroll->setShowLabel(false);
        $fields[]  = $hctEnroll;
        unset($flds); 

        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);

        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $radFileType = new MRadioButtonGroup('radFileType', '', $opts, $this->getFormValue('radFileType', 'pdf'), '', 'horizontal', '');
        $radFileType->setShowLabel(false);

        $hctFileType = new MHContainer('hctFileType', array($radFileTypeLabel, $radFileType));
        $hctFileType->setShowLabel(false);
        $fields[]    = $hctFileType;

        $emissionDate = new MCalendarField('emissionDate', strlen($this->getFormValue('emissionDate'))>0 ? $this->getFormValue('emissionDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')), _M('Data de emissão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[] = new DateDMYValidator('emissionDate', null, 'required');
        $fields[]     = $emissionDate;

        $fields[] = new MSeparator();
        
        parent::defineFields( array( 'fields' =>$fields, 'validators' => $validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);        
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO                           = MIOLO::getInstance();
        $module                          = MIOLO::getCurrentModule();
        $action                          = MIOLO::getCurrentAction();
        $cd->currentPeriodId             = MIOLO::_request('currentPeriodId');
        $cd->lastPeriodOne               = MIOLO::_request('lastPeriodIdOne');
        $cd->lastPeriodTwo               = MIOLO::_request('lastPeriodIdTwo');
        $cd->lastPeriodThree             = MIOLO::_request('lastPeriodThree');
        $cd->lastPeriodFour              = MIOLO::_request('lastPeriodIdFour');
        $cd->lastPeriodFive              = MIOLO::_request('lastPeriodIdFive');
        $cd->reingressionSemester        = MIOLO::_request('reingressionSemester');
        $cd->reingressionDateDay         = MIOLO::_request('reingressionDate');
        $cd->reingressionPeriodDay       = MIOLO::_request('reingressionPeriodDay');
        $cd->reingressionPeriodDay1      = MIOLO::_request('reingressionPeriodDay1');
        $cd->selMonth                    = MIOLO::_request('selMonth');        
        $cd->selMonth1                   = MIOLO::_request('selMonth1');
        $cd->selYear                     = MIOLO::_request('selYear');
        $cd->curricularComponentPayDate  = MIOLO::_request('firstCurricularComponentPayDate');
        $cd->fileType                    = MIOLO::_request('radFileType');
        $cd->emissionDate                = MIOLO::_request('emissionDate');

        //pega os dados da instituicao
        $businessCompany = new BusinessBasicBusCompany();
        $company         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));

        $businessLegalPerson = new BusinessBasicBusLegalPerson();
        $legalPerson         = $businessLegalPerson->getLegalPerson($company->personId);

        $businessCity = new BusinessBasicBusCity();
        $city         = $businessCity->getCity($legalPerson->cityId);

        $businessCancelledPupils = new BusinessAcademicBusCancelledPupils();
        $data         = $businessCancelledPupils->getPupilsCancelleds($cd);

        if ( is_array($data) && ( count($data) > 0 ) )
        {
            $MIOLO->uses('/core/AgataAPI.class');
            $MIOLO->uses('classes/sagu.class', 'basic');
    
            set_time_limit(0);
    
            $api = new AgataAPI;
    
            $api->setParameter('$cityName', SAGU::getCapitulatetString($city->name));
            $api->setParameter('$emissionDate', SAGU::getDateByExtense($cd->emissionDate));
            $api->setParameter('$semester', $cd->reingressionSemester);
            $api->setParameter('$fakeName', $legalPerson->fakeName);
            $api->setParameter('$reingressionDate', $cd->reingressionDate);
            $api->setParameter('$startReingressionPeriod', $cd->reingressionPeriodDay);
            $api->setParameter('$startMonth', SAGU::getMonth($cd->selMonth));
            $api->setParameter('$finalReingressionPeriod', $cd->reingressionPeriodDay1);
            $api->setParameter('$finalMonth', SAGU::getMonth($cd->selMonth1));
            $api->setParameter('$year', $cd->selYear);
            $api->setParameter('$curricularComponentPayDate', $cd->curricularComponentPayDate);
    
            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.sxw');
            $api->setDataArray($data);
    
            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/cancelledPupilsDocument.sxw'));
    
            if ( $ok && $cd->fileType == 'pdf' )
            {
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.pdf');
                $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/certified.sxw');
            }
    
            //se não conseguiu gerar o arquivo
            if ( !$ok )
            {
                $this->addError(_M('O seguinte erro foi retornado pelo AGATA: @1.', $module, $api->getError()));
            }
            else
            {
                //se inseriu o registro
                if ( $ok )
                {
                    $api->fileDialog();
                }
            }
        }
        else
        {
            $this->addError(_M('Não há alunos com contratos trancados para estes períodos selecionados', $module));
        }
    }
}

?>
