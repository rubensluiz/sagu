<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Label for examination form
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 28/06/2006
 *
 **/

/**
 * Form to manipulate a contract document
 **/
class FrmExaminationLabel extends SForm
{
    private $home;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module = MIOLO::getCurrentModule();
        $this->home   = $data->home;
        parent::__construct( _M('Etiqueta para exame', $module), NULL, NULL);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        $event    = MIOLO::_request('event');
        
        $fields[] = new MHiddenField('limbo', '');
        $fields[] = new MHiddenField('formationLevelId', SAGU::getParameter('ACADEMIC', 'COURSE_FORMATIONLEVELID_GRADUATE'));

        //Field period
        $business = new BusinessAcademicBusPeriod();
        $periodId = new MComboBox('periodId', $this->getFormValue('periodId', $data->periodId), _M('Período', $module), $business->listPeriod());
        $periodId->setJsHint(_M('Selecione um período', $module));
        $validators[] = new MRequiredValidator('periodId');
        $fields[] = $periodId;

        //Field print date
        $printDate = new MCalendarField('printDate', $this->getFormValue('printDate', date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'))    ), _M('Data de impressão', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $printDate->setJsHint(_M('Informe a data de implessão', $module));
        $validators[] = new MDateDMYValidator('printDate', '', 'optional');
        $fields[] = $printDate;
        
        $fields[] = new MSeparator();

        parent::defineFields( array( 'fields'=>$fields, 'validators'=>$validators ) );
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);        
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('function' => 'print', 'event' => 'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Event triggered when user chooses Search from the toolbar
     **/
    public function tbBtnPrint_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $MIOLO->uses('/core/AgataAPI.class');
        $api = new AgataAPI;
                
        $periodId         = MIOLO::_request('periodId');
        $formationLevelId = MIOLO::_request('formationLevelId');
        $printDate        = strlen(MIOLO::_request('printDate')) > 0 ? MIOLO::_request('printDate') : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')) ;    

        //Get data of Company
        $businessCompany = new BusinessBasicBusCompany();
        $company         = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
        
        //Get data of Final Examintation
        $businessFinalExamination = new BusinessAcademicBusGroup();
        $finalExamination         = $businessFinalExamination->getProfessorGroupSchedule($periodId, $formationLevelId);

         if( count($finalExamination) > 0 )
        {
            $page = 0;
            $labelPosition = 0;
            
            foreach( $finalExamination as $key => $row )
            {
                if( $key % 2 == 0 && $key != 0 )
                {
                    $page++;
                    $labelPosition = 0;
                    $dataPerson[] = array(null);        
                }
                
                $subDataPerson[0][$page][$labelPosition] = $row;
                
                $labelPosition++;                            
            }
            
            $api->setParameter('$period', $data->periodId );
            $api->setParameter('$institution', $company->acronym);
            $api->setParameter('$date', SAGU::getDateByExtense($printDate));
            
            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/examinationLabel.sxw');
    
            $api->setDataArray($dataPerson);
    
            $api->setSubDataArray($subDataPerson);
    
            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/examinationLabel.sxw'));
    
            if ( $ok )
            {
                $api->fileDialog();
            }            
        }
        else
        {
            $this->addError(_M('Nenhum registro encontrado.', $module));
        }                  
    }
}

?>
