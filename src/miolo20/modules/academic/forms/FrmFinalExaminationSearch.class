<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for Final Examination process
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 03/03/2011
 *
 **/

class FrmFinalExaminationSearch extends SSearchForm
{
    private $gridData;

    public function __construct()
    {
        parent::__construct( null,null,null );
    }


    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //Carrega campos do SForm
        SForm::defineFields();

        $data = $this->getTypesData();

        // Disable buttons which won't be used in searches
        $this->toolbar->disableButton('tbBtnSave');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnPrint');

        $ids['contractId'] = 'contractIdS';
        $ids['contractPersonId'] = 'contractPersonIdS';
        $ids['contractPersonName'] = 'contractPersonNameS';
        $ids['contractCourseId'] = 'contractCourseIdS';
        $ids['contractCourseName'] = 'contractCourseNameS';
        $ids['contractCourseVersion'] = 'contractCourseVersionS';
        $ids['contractTurnId'] = 'contractTurnIdS';
        $ids['contractTurnDescription'] = 'contractTurnDescriptionS';
        $ids['contractUnitId'] = 'contractUnitIdS';
        $ids['contractUnitDescription'] = 'contractUnitDescriptionS';

        $MIOLO->getClass( 'academic', 'lookupContract' );
        $fields[] = new SLookupContract('contractIdS', $data, true, true, true, true, $ids);
        $validators[] = new MRequiredValidator('contractIdS', _M('Contrato', $module));

        //Query button
        $fields[] = new MButton('btnSearch', _M('Localizar', $module));
        
        // Instantiate the results grid
        $this->gridData = $MIOLO->getUI()->getGrid($module, 'GrdFinalExaminationSearch');
        $fields[] = $this->gridData;

        $this->AddFields($fields);
        $this->setValidators($validators);        
    }

    public function btnSearch_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $filters = $this->getTypesData();
        $busEnroll = new BusinessAcademicBusEnroll();

        $data = $busEnroll->searchFinalExamination($filters);
        $this->gridData->setData($data);
    }


    public function  getTypesData()
    {
        $data = new stdClass();
        $data->contractId = $this->getFormValue('contractIdS');
        $data->contractPersonId = $this->getFormValue('contractPersonIdS');
        $data->contractPersonName = $this->getFormValue('contractPersonNameS');
        $data->contractCourseId = $this->getFormValue('contractCourseIdS');
        $data->contractCourseName = $this->getFormValue('contractCourseNameS');
        $data->contractCourseVersion = $this->getFormValue('contractCourseVersionS');
        $data->contractTurnId = $this->getFormValue('contractTurnIdS');
        $data->contractTurnDescription = $this->getFormValue('contractTurnDescriptionS');
        $data->contractUnitId = $this->getFormValue('contractUnitIdS');
        $data->contractUnitDescription = $this->getFormValue('contractUnitDescriptionS');

        return $data;
    }
}
?>
