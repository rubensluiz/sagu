<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCurricularComponentUnblock table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/12/2005
 *
 **/

/**
 * Form to search the acdCurricularComponentUnblock table
 */
class FrmSubstitutionUnblock extends SManagementForm
{
    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct( new acdCurricularComponentUnblock(), array('curricularComponentUnblockId'), 'BusSubstitutionUnblock' );
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        if ( in_array($function, array('update', 'delete')) )
        {
            $curricularComponentUnblockId = MIOLO::_REQUEST('curricularComponentUnblockId');

            $business = $this->busObject;
            $data     = $business->getSubstitutionUnblock($curricularComponentUnblockId);

            $busCurr  = new BusinessAcademicBusCurriculum();
            $currData = $busCurr->getCurriculum($data->curriculumId);

            $data->curricularComponentIdC = $currData->curricularComponentId;
            $data->curricularComponentVersionC = $currData->curricularComponentVersion;

            $fields[]  = new MHiddenField('curricularComponentUnblockId', $curricularComponentUnblockId);
            $fields[]  = new MTextLabel('curricularComponentUnblockId', $data->curricularComponentUnblockId, _M('Código', $module));
        }

        if ($function == 'insert')
        {
            $businessPeriod = new BusinessAcademicBusPeriod();
            $periodId = new MComboBox('periodId', strlen($this->getFormValue('periodId', $data->periodId))>0 ? $this->getFormValue('periodId', $data->periodId) : SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID'), _M('Período',$module), $businessPeriod->listPeriod(), true );
            $fields[] = $periodId;
            
            $lookupFilters = array('periodId' => 'periodId', 'courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId');
        }
        else
        {
            $lookupFilters = array('courseId' => 'contractCourseId', 'courseVersion' => 'contractCourseVersion', 'turnId' => 'contractTurnId', 'unitId' => 'contractUnitId');
        }
        
        //Field lookup contract
        $filters = is_object($data) ? $data : $this->getTypesData();
        
        $fields[] = new MHiddenField('limbo', '');
        $MIOLO->getClass( 'academic', 'lookupContract' );
        $fields[] = new SLookupContract('contractId', $filters);
        
        $validators[] = new MIntegerValidator('contractId', _M('Contrato', $module), 'required');
        $validators[] = new MIntegerValidator('contractPersonId', _M('Pessoa', $module));

        //Field formation level
        $formationLevelId = new MHiddenField('formationLevelId', $formationLevelId);
        $fields[]         = $formationLevelId;

        //Field learning period
        $learningPeriodLabelS = new MText('learningPeriodLabelS', _M('Período letivo', $module) . ':');
        $learningPeriodLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));      
        $learningPeriodLabelS->setClass('m-caption m-caption-required');
        $learningPeriodId = new MLookupTextField('learningPeriodId', $this->getFormValue('learningPeriodId',$data->learningPeriodId), _M('Período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('periodId', null, null, null, null, 'learningPeriod'), $module, 'LearningPeriod', null, $lookupFilters, true);
        $learningPeriodId->setJsHint(_M('Informe o código do período letivo',$module));
        $validators[] = new MIntegerValidator('learningPeriodId', _M('Período letivo',$module), 'required');
        $learningPeriod = new MTextField('learningPeriod', $this->getFormValue('learningPeriod',$data->learningPeriod), _M('Período letivo',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $learningPeriod->setJsHint(_M('Descrição do período letivo', $module));
        $learningPeriod->setReadOnly(true);
        $hctlearningPeriod = new MHContainer('hctlearningPeriod', array($learningPeriodLabelS, $learningPeriodId, $learningPeriod));
        $hctlearningPeriod->setShowLabel(false);
        $fields[]    = $hctlearningPeriod;

        //Field curricular component
        $curricularComponentLabelC = new MText('curricularComponentLabelC', _M('Disciplina', $module) . ':');
        $curricularComponentLabelC->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLabelC->setClass('m-caption m-caption-required');
        $curricularComponentIdC = new MLookupTextField('curricularComponentIdC', $data->curricularComponentIdC, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'curricularComponentVersionC,curricularComponentNameC', $module, 'CurriculumFaultToConclue', null, array('contractId' => 'contractId', 'curricularComponentId' => 'curricularComponentIdC'), true);
        $curricularComponentIdC->setJsHint(_M('Informe o código da disciplina', $module));
        $validators[]          = new MRequiredValidator('curricularComponentIdC', _M('Disciplina',$module), 'required');
        $curricularComponentVersionC = new MTextField('curricularComponentVersionC', $data->curricularComponentVersionC, _M('Versão',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersionC->setJsHint(_M('Versão da disciplina', $module));
        $curricularComponentVersionC->setReadOnly(true);
        $validators[]          = new MRequiredValidator('curricularComponentVersionC', _M('Versão da disciplina',$module), 'required');
        $curricularComponentNameC = new MTextField('curricularComponentNameC', $this->getFormValue('curricularComponentNameC', $data->curricularComponentNameC), _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentNameC->setJsHint(_M('Nome da disciplina', $module));
        $curricularComponentNameC->setReadOnly(true);
        $hctCurricularComponentC = new MHContainer('hctCurricularComponentC', array($curricularComponentLabelC, $curricularComponentIdC, $curricularComponentVersionC, $curricularComponentNameC));
        $hctCurricularComponentC->setShowLabel(false);
        $fields[]  = $hctCurricularComponentC;

        // Campo que caracteriza a ignoração de multi-unidade - ticket #38575
        $fields[] = new SHiddenField('ignorarUnidade', DB_TRUE);
        
        //Field curricular component substitut
        $curricularComponentLabelS = new MText('curricularComponentLabelS', _M('Disciplina substituta', $module) . ':');
        $curricularComponentLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $curricularComponentLabelS->setClass('m-caption m-caption-required');
        
        $curricularComponentId = new MLookupTextField('curricularComponentId', 
                                                      $this->getFormValue('curricularComponentId', $data->curricularComponentId), 
                                                      '', 
                                                      SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), 
                                                      null, 
                                                      null, 
                                                      'curricularComponentVersion , curricularComponentName', 
                                                      $module, 
                                                      'CurricularComponentInCurriculum', 
                                                      null, 
                                                      array('courseIdJustOptionalCurricularComponent' => 'contractCourseId', 
                                                            'curricularComponentId' => 'curricularComponentId', 
                                                            'formationLevelId' => 'formationLevelId',
                                                            'ignorarUnidade' => 'ignorarUnidade'), 
                                                      true);
        
        $curricularComponentId->setJsHint(_M('Informe o código da disciplina substituta',$module));
        $validators[] = new MRequiredValidator('curricularComponentId', _M('Disciplina substituta', $module));
        $curricularComponentVersion = new MTextField('curricularComponentVersion', $this->getFormValue('curricularComponentVersion',$data->curricularComponentVersion),'', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $curricularComponentVersion->setJsHint(_M('Versão da disciplina substituta', $module));
        $curricularComponentVersion->setReadOnly(true);
        $validators[] = new MRequiredValidator('curricularComponentVersion', _M('Versão da disciplina substituta', $module), 'required');                                        
        $curricularComponentName = new MTextField('curricularComponentName', $this->getFormValue('curricularComponentName',$data->curricularComponentName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $curricularComponentName->setJsHint(_M('Nome da disciplina substituta', $module));
        $curricularComponentName->setReadOnly(true);
        $hctcurricularComponent = new MHContainer('hctcurricularComponent', array($curricularComponentLabelS, $curricularComponentId, $curricularComponentVersion, $curricularComponentName));
        $hctcurricularComponent->setShowLabel(true);
        $fields[]    = $hctcurricularComponent;        

        if ( $function == 'update' )
        {
            $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Última modificação', $module));
        }

        $fields[] = new Separator('');

        parent::defineFields($fields, $validators, $data);
        
        if ( $function == 'insert' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        }
        else if ( $function == 'delete' )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }
    
    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $this->$var->value = $this->getFormValue($var.'S') ? $this->getFormValue($var.'S') : '';
            }
        }
    }
    
    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data   = $this->getTypesData();
        $opts   = array('event'         => 'tbBtnDelete_confirm',
                        'function'        => 'delete',
                        'curricularComponentUnblockId' => MIOLO::_request('curricularComponentUnblockId')
                       );
                       
        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $goto    = SAGU::getStackBackUrl();
        $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        $msg     = SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE');
        $caption = _M('Questão',$module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }

    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $business = $this->busObject;
        $ok = $business->deleteSubstitutionUnblock(MIOLO::_request('curricularComponentUnblockId'));

        if ( $ok )
        {
            $msg  = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação',$module);
            $MIOLO->information($msg, $goto);
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Erro', $module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }

    public function tbBtnSave_click($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        try
        {
            $data = $this->getData();
            $data->contractCourseId = $this->getFormValue('contractCourseId');
            $data->contractCourseVersion = $this->getFormValue('contractCourseVersion');
            $data->curricularComponentOldName = $this->getFormValue('curricularComponentNameC');            
            
            $filters = new stdClass();
            $filters->curricularComponentId  = $this->curricularComponentIdC->value;
            $filters->curricularComponentVersion = $this->curricularComponentVersionC->value;
            $filters->courseId = $this->getFormValue('contractCourseId');
            $filters->courseVersion =$this->getFormValue('contractCourseVersion');
            $filters->turnId = $this->getFormValue('contractTurnId');
            $filters->unitId = $this->getFormValue('contractUnitId');

            $busCurr     = new BusinessAcademicBusCurriculum();
            $curriculums = $busCurr->searchCurriculum($filters);      

            if ( strlen($curriculums[0][0]) <= 0 )
            {
                throw new Exception(_M('Esta disciplina não pertence a nenhum currículo.', $module));
            }
                
            //Existe curriculo
            $data->curriculumId = $curriculums[0][0];        
            
            $business = $this->busObject;

            $filter1 = new stdClass();
            $filter1->curriculumId               = $curriculums[0][0];
            $filter1->contractId                 = $data->contractId;
            $filter1->learningPeriodId           = $data->learningPeriodId;
            $filter1->curricularComponentId      = $data->curricularComponentId;
            $filter1->curricularComponentVersion = $data->curricularComponentVersion;

            $searchSubstitutionUnblock      = $business->searchSubstitutionUnblock($filter1);
        
            $curricularComponentUnblockId = $this->getFormValue('curricularComponentUnblockId', $this->curricularComponentUnblockId->value);
            
            if ( (count($searchSubstitutionUnblock) > 0 && $function == 'insert')
                 || ($searchSubstitutionUnblock[0][0] != $curricularComponentUnblockId && count($searchSubstitutionUnblock) > 0) ) 
            {
                //Ja existe um desbloqueio para esta disciplina, periodo letivo e contrato
                throw new Exception(_M('Já existe um desbloqueio para este mesmo contrato, período letivo e disciplinas do currículo e substituta.', $module));
            }

            foreach ( $data as $key1 => $value1 )
            {
                $opts["$key1"] = $value1;
            }
    
            $opts['function'] = $function;
            $opts['event']    = 'tbBtnSave_confirm';
    
            $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
    
            unset($opts['event']);
    
            $goto    = SAGU::getStackBackUrl();
            $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, null, $opts);
    
            $msg = _M('Deseja realmente inserir um desbloqueio por substituição para este aluno, este período letivo e estas disciplinas?', $module);
            $msg .= '<br><br>' . $this->getFormValue('contractPersonName', $this->contractPersonName->value) . ' - ' . $data->learningPeriod . '<br><br>';
            $msg .= _M('Disciplina', $module). ': ' . $data->curricularComponentIdC . '/' . $data->curricularComponentVersionC . ' ' . $data->curricularComponentNameC  . '<br><br>';
            $msg .= _M('Disciplina substituta' ,$module). ': ' . $data->curricularComponentId . '/' . $data->curricularComponentVersion . ' ' . $data->curricularComponentName . '<br><br>';
    
            $busCurriculum = new BusinessAcademicBusCurriculum();
    
            $filters->courseId      = $data->contractCourseId;
            $filters->courseVersion = $data->contractCourseVersion;
            $filters->unitId  = $data->contractUnitId;
            $filters->turnId  = $data->contractTurnId;
    
            //Verifica se a disciplina substituta pertence ao mesmo grau de formação da disciplina a ser substituida
            $filters1 = new stdClass();
            $filters1->curricularComponentId = $data->curricularComponentId;
            $filters1->formationLevelId      = $data->formationLevelId;
    
            if ( count($busCurriculum->searchCurriculum($filters1)) <= 0 )
            {
                throw new Exception(_M('A disciplina do aluno e a disciplina substituta possuem níveis de formação diferentes.', $module));
            }
            
            //Verifica se a disciplina informada para ser substituída é do curriculo do aluno
            $filters->curricularComponentId = $data->curricularComponentIdC;

            if ( count($busCurriculum->searchCurriculum($filters)) <= 0 )
            {
                throw new Exception(_M('A disciplina @1 não faz parte do currículo do aluno.', $module, $data->curricularComponentOldName));
            }
            
            //Verifica se a disciplina substituta é do currículo do aluno.
            $filters->curricularComponentId = $data->curricularComponentId;
            $filters->curricularComponentVersion = $data->curricularComponentVersion;
            
            if ( count($busCurriculum->searchCurriculum($filters)) > 0 )
            {
                // FIXME: Implementar o teste para ver se a disciplina que irá substituir a do currículo é
                // cursável (não é atividade complementar ou outro tipo não cursável)

                $msg .= '<font color=\'red\'>' . _M('A disciplina substituta @1 está na matriz curricular do curso do aluno.', $module, $data->curricularComponentName) . '</font>';
            }

            $caption = _M('Questão',$module);
            $MIOLO->question($msg, $gotoYes, $gotoNo);
        }
        catch ( Exception $e )
        {
            $this->addError($e->getMessage());
        }
    }

    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_confirm($sender = null)
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        $data     = $this->getTypesData();
        
        try
        {
            $business = $this->busObject;

            $opts = array('curricularComponentUnblockIdS'=>$data->curricularComponentUnblockId);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);

            if ( $function == 'update' )
            {
                $ok  = $business->updateSubstitutionUnblock($data);
                
                $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED'), $goto);
            }
            else
            {
                $ok  = $business->insertSubstitutionUnblock($data);
                
                $opts    = array('event'=>'tbBtnNew_click',
                                 'function'=>'insert');
    
                $gotoYes = $MIOLO->getActionURL($module, $action, null, $opts);
                
                $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED'), $gotoYes, $goto);
            }
        }
        catch ( Exception $e )
        {            
             $this->addError( _M('Erro executando a operação requerida', $module) . '. ' . $e->getMessage() );
        }
            
    }
    
    public function getTypesData()
    {
        $data = new acdCurricularComponentUnblock();
        $vars = get_object_vars($data);
        
        foreach ( $vars as $var => $value )
        {
            if ( $var != 'description' )
            {
                $data->$var = $this->getFormValue($var, $this->$var->value);
            }
        }

        $data->curricularComponentIdC     = $this->getFormValue('curricularComponentIdC', $this->curricularComponentIdC->value);

        $data->learningPeriodDescription  = $this->getFormValue('learningPeriod', $this->learningPeriod->value);
        $data->personName                 = $this->getFormValue('contractPersonName', $this->contractPersonName->value);
        $data->curricularComponentOldName = $this->getFormValue('curricularComponentNameC', $this->curricularComponentNameC->value);
        $data->curricularComponentNewName = $this->getFormValue('curricularComponentName', $this->curricularComponentName->value);

        $data->formationLevelId           = $this->getFormValue('formationLevelId', $this->formationLevelId->value);

        return $data;
    }

}

?>
