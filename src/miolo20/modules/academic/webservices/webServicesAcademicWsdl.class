<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Solucoes Livres Ltda.
 *
 * Este arquivo e parte do programa Sagu.
 *
 * O Sagu e um software livre; voce pode redistribui-lo e/ou modifica-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundacao
 * do Software Livre (FSF); na versão 2 da Licenca.
 *
 * Este programa e distribuido na esperanca que possa ser util, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implicita de ADEQUACAO a qualquer MERCADO
 * ou APLICACAO EM PARTICULAR. Veja a Licenca Publica Geral GNU/GPL em
 * portugues para maiores detalhes.
 *
 * Voce deve ter recebido uma copia da Licenca Publica Geral GNU, sob o titulo
 * "LICENCA.txt", junto com este programa, se nao, acesse o Portal do Software
 * Publico Brasileiro no endereco www.softwarepublico.gov.br ou escreva para a
 * Fundacao do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class responsible for storing the functions of login.
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * @version $Id$
 *
 * 
 * @since
 * Class created on 26/05/2014
 *
 * */

class webServicesAcademic
{
    private $auth;
    private $MIOLO;

    public function __construct()
    {
        global $MIOLO;

        chdir( '../' );

        $_SERVER['REQUEST_URI'] = 'module=academic';

        require_once 'classes/miolo.class';
        require_once 'classes/support.inc';

        $this->MIOLO = MIOLO::getInstance();

        $this->MIOLO->conf = new MConfigLoader();
        $this->MIOLO->conf->LoadConf();

        $this->MIOLO->Init();
        $this->MIOLO->Uses( 'classes/sagu.class', 'basic' );
    }

    /**
     * Metodo utilizado para oferecer um curso (disciplina) no sistema.
     *
     * @param string $ESTADO Uf do estado 
     * @param string $CIDADE Cidade
     * @param string $NOME1 Nome do professor 1
     * @param string $CPF1 Cpf do professor 1
     * @param string $NOME2 Nome do professor 1
     * @param string $CPF2 Cpf do professor 2
     * @param string $DATA1 Data de ocorrencia 1
     * @param string $DATA2 Data de ocorrencia 2
     * @param string $DATA3 Data de ocorrencia 3
     * @param string $DATA4 Data de ocorrencia 4
     * @param string $DATA5 Data de ocorrencia 5
     * @param string $DESCRICAO Descricao do recurso fisico
     * @param string $ENDERECO Endereco do recurso fisico
     * @param string $SALA Sala recurso fisico
     * @param string $VAGAS Numero de vagas na disciplina
     * 
     * @return integer Codigo do oferecimento da disciplina em caso de sucesso 0 em caso de erro
     */
    public function wsOferecimento($ESTADO, $CIDADE, $NOME1, $CPF1, $NOME2, $CPF2, $DATA1, $DATA2, $DATA3, $DATA4, $DATA5, $DESCRICAO, $ENDERECO, $SALA, $VAGAS)
    {   
        $CPF1 = SAGU::convertInCPFWithoutDelimiters($CPF1);
        $CPF2 = SAGU::convertInCPFWithoutDelimiters($CPF2);
        
        if( !strlen($ESTADO) > 0 || !strlen($CIDADE) > 0 )
        {
            return '<error>O estado e a cidade sao parametros obrigatorios.</error>';
        }
        
        if( !strlen($DATA1) > 0 || !strlen($DATA2) > 0 || !strlen($DATA3) > 0 || !strlen($DATA4) > 0 || !strlen($DATA5) > 0)
        {
            return '<error>Todas as 5 datas devem ser informadas.</error>';
        }
        
        if( !strlen($NOME1) > 0 || !strlen($CPF1) > 0 )
        {
            return '<error>Os campos NOME e CPF devem ser informados.</error>';
        }
        
        $busUnit = new BusinessBasicBusUnit();
        
        $filters->description = $ESTADO; //'RS';   
        $unit = $busUnit->searchUnit($filters); //busca a unidade $unit[0][0]
        
        $filters->unitId = $unit[0][0];
        
        $busCourseOccurrence = new BusinessAcademicBusCurriculum();
        $ocorrenciaCurso = $busCourseOccurrence->searchCurriculum($filters, true);//busca ocorrencia de curso
        
        $filters->courseId = $ocorrenciaCurso[0][1];
        
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $periodLetivo = $busLearningPeriod->searchLearningPeriod($filters, false, true );//busca o periodo letivo $periodLetivo[0][0] A.learningPeriodId
                
        $filtro->courseId = $ocorrenciaCurso[0][1]; //ocorrencia de curso
        $filtro->courseVersion = $ocorrenciaCurso[0][2]; //versao da ocorrencia de curso
        $filtro->unitId = $unit[0][0]; //unidade
        $filtro->curricularComponentId = 'DIS-AGS'; //Disciplina
              
        $busAcademicCurriculum = new BusinessAcademicBusCurriculum();
        $curriculo = $busAcademicCurriculum->searchCurriculum($filtro, true);
        
        $busGroup = new BusinessAcademicBusGroup();
                
        // Obtem dados do periodo letivo
        try
        {
            $busLearning = new BusinessAcademicBusLearningPeriod();
            $dataLearning = $busLearning->getLearningPeriod($periodLetivo[0][0], true);            
            
            if ($dataLearning->isClosed == DB_TRUE)
            {   
                $hasErrors = true;
                return '<error>O periodo letivo selecionado esta fechado e nenhuma oferecida pode ser cadastrada. Para o continuar o processo, reabra o periodo letivo ou selecione um periodo aberto.</error>';
                
            }
        }
        catch (Exception $e)
        {
            $hasErrors = true;
            return '<error>Erro ao buscar dados do periodo letivo.</error>';
        } 
        
        // Obtem dados da versao do curso
        try
        {
            $busCourseVersion = new BusinessAcademicBusCourseVersion();
            $dataCourseVersion = $busCourseVersion->getCourseVersion($dataLearning->courseId, $dataLearning->courseVersion);
            
        }
        catch (Exception $e)
        {            
            $hasErrors = true;
            return '<error>Erro ao buscar dados da versao do curso.</error>';
        }
        
        //Verificaccoes antes de inserir uma disciplina oferecida
        // Prepara os filtros para obter os dados da matriz curricular **disciplina
        $filters->curricularComponentId = $curriculo[0][8];
        $filters->curricularComponentVersion = $curriculo[0][9];
        $filters->courseId = $curriculo[0][1];
        $filters->courseVersion = $curriculo[0][2];
        $filters->turnId = $periodLetivo[0][10];
        $filters->unitId = $periodLetivo[0][11];
        
        try
        {            
            $busCurr = new BusinessAcademicBusCurriculum();
            $curriculums = $busCurr->searchCurriculum($filters, true);
        }
        catch (Exception $e)
        {            
            
            $hasErrors = true;
            return '<error>Erro ao buscar dados da matriz curricular.</error>';
        }
        
        if (!$hasErrors)
        {
            SDatabase::beginTransaction();
            
            // Insercao
            try
            {
                $busClass = new BusinessAcademicBusClass();
                $turma = $busClass->obtemTurmaPeloCampoPersonalizado($ESTADO, $CIDADE, $filters->courseId);
                                
                if( !strlen($turma) > 0 )
                {
                    $filtersCidade->name = trim($CIDADE);
                    $filtersCidade->stateId = trim($ESTADO);
                    $busCity  = new BusinessBasicBusCity();
                    $cidade = $busCity->searchCity($filtersCidade);
                                                            
                    //Verifica se existe a cidade e marca a flag cidade sede
                    if( count($cidade) > 0)
                    {
                        $busCustomField = new BasCustomField(); 
                        $verficaSede = $busCustomField->getCustomValue('FrmCity', $cidade[0][0]);
                                                
                        $id = $busCustomField->getCustomFieldId('FrmCity', 'cidade_sede');
                        
                        //$value = $busCustomField->getCustomValue('cidade_sede', $cidade[0][0]);
                        
                        //Insere campo personalizado e sede no cadastro da cidade
                        $customValue = new MCustomValue();
                        $customValue->customizedId = $cidade[0][0];
                        $customValue->customFieldId = $id; //$customFieldId;
                        $customValue->value = 't';

                        if( strlen($verficaSede) > 0 )
                        {
                            $customValue->updateByData();
                        }
                        else
                        {
			    $mioloCustomValue = SDatabase::query('SELECT id FROM miolo_custom_value WHERE customized_id = ? AND custom_field_id = ?', array($customValue->customizedId, $customValue->customFieldId));
			    if ( strlen($mioloCustomValue[0][0]) == 0 )
			    {
                                $customValue->insert();
			    }
                        }

                        $data->classId = 'TUR-ACS-'.trim($CIDADE);                        
                        $len = 20 - strlen($cidade[0][0]);
                        $data->classId = substr($data->classId, 0, $len);
                        $data->classId = $data->classId . $cidade[0][0];
                                
                        $data->name = 'TURMA ACS '.trim($ESTADO).' '.trim($CIDADE);
                        $data->vacant = 9999;
                        $data->initialLearningPeriodId = $periodLetivo[0][0];
                        $data->unitId = $unit[0][0];
                        
                        $data->classId = SAGU::removeAcentuacao($data->classId);
                        
                        $data->classId = substr($data->classId, 0, 20);
                        $turma = $busClass->insertClass($data);

                        $idClass = $busCustomField->getCustomFieldId('FrmClass', 'turma_cidade_sede');

                        $value = $cidade[0][0];

                        //Insere campo personalizado cidade sede, no cadastro da turma
                        $customValue2 = new MCustomValue();
                        $customValue2->customizedId = strtoupper($turma);
                        $customValue2->customFieldId = $idClass;
                        $customValue2->value = $value;

                        $customValue2->insert();                        
                    }
		    else
		    {
			throw new Exception("<error>A cidade {$CIDADE}/{$ESTADO} nao foi encontrada.</error>");
	     	    }
                }
                
                if (count($curriculums) != 1)
                {     
                    throw new Exception("<error>A disciplina {$curriculo[0][8]} / {$curriculo[0][9]} nao pertence a nenhum curriculo.</error>");
                }                
                else
                {
                    $dados->learningPeriodId = $periodLetivo[0][0];
                    $dados->curriculumId = $curriculo[0][0];
                    $dados->vacant = strlen($VAGAS) > 0 ? $VAGAS : '40';
                    $dados->regimenId = '1';
                    $dados->isClosed = 'f';
                    $dados->classId = strtoupper($turma);
                    $dados->evaluationTypeId = '2';
                    $dados->financeCredits = '1';
                    $dados->curricularComponentId = $curriculo[0][8];
                    $dados->basicBibliographyRemoveAll = true;
                    $dados->complementaryBibliographyRemoveAll = true;
                    $dados->unitId = $unit[0][0];
                    
                    $busGroup = new BusinessAcademicBusGroup();
                    $groupId = $busGroup->insertGroup($dados);                    
                }               

            }
            catch (Exception $e)
            {
                SDatabase::rollback();
                $groupId = 0;
                return strlen($e->getMessage()) > 0 ? $e->getMessage() : '<error>Erro ao inserir um oferecimento de disciplina.</error>';
            }            
        }
        
        if( strlen($groupId) > 0 && $groupId != 0 )
        {
            try
            { 
                if( strlen($DESCRICAO) > 0 )
                {
                    $filter->description = $DESCRICAO; //recusro fisico
                    $scheduleDados->unitId = $unit[0][0];

                    $busPhysicalResource = new BusinessInstitutionalBusPhysicalResource();
                    $recursoFisico = $busPhysicalResource->searchPhysicalResource($filter);
                    /*
                    * Procura pela descricao o recurso fisico, caso nao encontre, insere um novo.
                    */
                    if($recursoFisico)
                    {
                        $recursoFisicoId = $recursoFisico[0][0];
                        $recursoFisicoVersao = $recursoFisico[0][1];

                    }else
                    {       
                        //if( !strlen($SALA) > 0 )
                        //{
                        //    return '<error>O parametro SALA deve ser informado.</error>';
                        //}
                        $filter->room =  $SALA;
                        $filter->physicalResourceVersion = '1';
                        $filter->dateVersion = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
                        $filter->groupTypeId = SAGU::getParameter( 'ACADEMIC', 'CATEGORIA_PADRAO_DO_RECUSRO_FISICO' );
                        $filter->unitId = $scheduleDados->unitId;
                        $filter->description = $DESCRICAO;

                        $busPhysicalResource->insertPhysicalResource($filter);
                        
                        $recursoFisico = $busPhysicalResource->searchPhysicalResource($filter);
                        $recursoFisicoId = $recursoFisico[0][0];
                        $recursoFisicoVersao = $recursoFisico[0][1];
                        
                        $busCustomField = new BasCustomField(); 
                        $idRecursoFisico = $busCustomField->getCustomFieldId('FrmPhysicalResource', 'recurso_endereco');
                        
                        //Insere campo personalizado endereco, no cadastro de recurso fisico
                        $customValue = new MCustomValue();
                        $customValue->customizedId = $recursoFisicoId;
                        $customValue->customFieldId = $idRecursoFisico; 
                        $customValue->value = $ENDERECO;

                        $customValue->insert();
                        
                    }
                }

                $businessScheduleProfessor = new BusinessAcademicBusScheduleProfessor();

                $CPF1 = SAGU::convertInCPFFormat($CPF1);
		if ( strlen($CPF2) > 0 )
		{
                    $CPF2 = SAGU::convertInCPFFormat($CPF2);
		    $filters->content = array($CPF1, $CPF2);
		}
		else
		{
		    $filters->content = array($CPF1);
		}

                foreach($filters->content as $k =>$filter)
                {
                    $filters->content = $filter;

                    $contentProfessor[$k] = $businessScheduleProfessor->searchScheduleProfessorSimple($filters);
                }     

		$professorError = FALSE;
		$professorErrorMsg = '';
		if ( strlen($CPF1) > 0 && !$contentProfessor[0][0][1] )
		{
		    $professorError = TRUE;
		    $professorErrorMsg .= 'O professor de CPF ' . $CPF1 . ' nao esta cadastrado no sistema. ';
		}

		if ( strlen($CPF2) > 0 && !$contentProfessor[1][0][1] )
                {
                    $professorError = TRUE;
                    $professorErrorMsg .= 'O professor de CPF ' . $CPF2 . ' nao esta cadastrado no sistema.';
                }

		if ( $professorError )
		{
		    throw new Exception('<error>' . $professorErrorMsg . '</error>');
		}		

                $busTimeSheet = new BusinessAcademicBusTimeSheet();
                $timeSheet = $busTimeSheet->getTimeSheetByUnit($unit[0][0]);
                $times = $busTimeSheet->getTimesByTimeSheet($timeSheet[0][0]);
                
                $scheduleDados->groupId = $groupId;            
                $scheduleDados->scheduleId = '';
                $scheduleDados->timeIds = $times;
                $scheduleDados->professor = '';
                $scheduleDados->timeSheetId = $timeSheet[0][0];
                $scheduleDados->learningPeriodId = $periodLetivo[0][0];
                $scheduleDados->physicalResourceId = $recursoFisicoId;
                $scheduleDados->physicalResourceVersion = $recursoFisicoVersao;
                $scheduleDados->occurrenceDates = array($DATA1, $DATA2, $DATA3, $DATA4, $DATA5);
                $scheduleDados->professorName = array($NOME1, $NOME2);
                $scheduleDados->professorId = array($contentProfessor[0][0][1], $contentProfessor[1][0][1]);
                $scheduleDados->isInstitutionalEvaluation = 'f';
                $scheduleDados->weight = '1';            
                $scheduleDados->session = ''; 
		$scheduleDados->unitId = $scheduleDados->unitId ? $scheduleDados->unitId : $unit[0][0];
                                           
                $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
                $learningPeriod = $busLearningPeriod->getLearningPeriod($periodLetivo[0][0]);

                if ( (is_array($scheduleDados->occurrenceDates)) && (in_array('error', $scheduleDados->occurrenceDates)) )
                {
                    throw new Exception("<error>As datas selecionadas nao podem ser menores ou maiores que o intervalo de datas do periodo letivo " . $learningPeriod->periodDescription . ". Este inicia em " . $learningPeriod->beginDate . " e termina " . $learningPeriod->endDate . ".</error>");
                     
                }
                $businessSchedule = new BusinessAcademicBusSchedule();
                $businessScheduleProfessor = new BusinessAcademicBusScheduleProfessor();

                if ( !is_array($scheduleDados->timeIds) )
                {
                    throw new Exception('<error>Deve ser informado, pelo menos um horario</error>');
                }
                elseif ( !is_array($scheduleDados->occurrenceDates) )
                {
                    throw new Exception('<error>Deve ser informada a data em que a disciplina oferecida ocorrera.</error>');
                }

                $scheduleId = $businessSchedule->insertSchedule($scheduleDados);
                if ( ( SAGU::getParameter('ACADEMIC', 'ENABLE_SCHEDULE_PROFESSOR_CHECK') == DB_TRUE ) && $businessSchedule->existeConflitoDeHorario($scheduleDados->groupId, $scheduleDados->unitId,$scheduleDados ->occurrenceDates, $scheduleDados->timeIds, $scheduleId) )
                {
                    throw new Exception('<error>Os dados informados conflitam com um horario ja existente para esta disciplina oferecida.</error>');
                }
                
                // Se for informado recurso fisico e versão de recurso fisico, verifica se existe conflito de alocacao.
//                $conflictPhysicalResource = ( strlen($scheduleDados->physicalResourceId) > 0 && strlen($scheduleDados->physicalResourceVersion) > 0 ) ? $businessSchedule->scheduleAlreadyExistsForPhysicalResource($scheduleDados->physicalResourceId, $scheduleDados->physicalResourceVersion, $scheduleDados->unitId, $scheduleDados->occurrenceDates, $scheduleDados->timeIds) : false;
//
//                // Se existe conflito com o recurso fisico.
//                if ( $conflictPhysicalResource )
//                {
//                    $excPhysicalResource = $scheduleDados->physicalResourceId .'/'. $scheduleDados->physicalResourceVersion .' - '. $SALA;
//                    $businessUnit = new BusinessBasicBusUnit();
//                    $unit = $businessUnit->getUnit($data->unitId);
//                    $excUnit = $data->unitId .' - '. $unit->description;
//                    return "<error>O recurso fisico {$excPhysicalResource} ja esta alocado na unidade {$excUnit} em algum dos horarios informados.</error>";                
//                }

                
                $msg[] = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');                

                // Faz a verificacao de carga horaria excedente para o professor
                $_msg = $businessSchedule->workLoadProfessorCheck($scheduleDados->groupId);
                if ( strlen($_msg) > 0 )
                {
                    $_msg = 'Aviso: ' . $_msg . '<br><br>';
                    $msg = array_merge(array($_msg), $msg);
                }
                 
                foreach ( $scheduleDados->professorId as $value )
                {
                    $infoProfessor->scheduleId = $scheduleId;
                    $infoProfessor->professorId = $value;
                    $infoProfessor->weight = $scheduleDados->weight;
                    $infoProfessor->isInstitutionalEvaluation = $scheduleDados->isInstitutionalEvaluation;                        
                                        
                    $scheduleProfessor = $businessScheduleProfessor->getScheduleProfessor($scheduleId, $value);
                    if ( strlen($scheduleProfessor->scheduleProfessorId) == 0 )
                    { 
                        $businessScheduleProfessor->insertScheduleProfessor($infoProfessor);                        
                    }
                    else
                    {
                        $infoProfessor->scheduleProfessorId = $scheduleProfessor->scheduleProfessorId;
                        $businessScheduleProfessor->updateScheduleProfessor($infoProfessor);
                    }

                    if( SAGU::getParameter('ACADEMIC', 'ENABLE_SCHEDULE_PROFESSOR_CHECK') == DB_TRUE )
                    {
                        // Verifica se existe conflito de horarios para o professor
                        // deve ser executado apos insercao ou atualizacao, e caso exista, executa ROLLBACK
                        $businessSchedule->scheduleAlreadyExistsForProfessor($scheduleId, $infoProfessor->professorId, $scheduleDados->groupId);
                    }
                }
            
                SDatabase::commit();
                
                return $groupId;
            }
            catch ( Exception $e )
            {
                SDatabase::rollback();      
                
                return strlen($e->getMessage()) > 0 ? $e->getMessage() : '<error>Erro ao definir horario da disciplina oferecida.</error>';
            }
        }
        else
        {
            return '<error>Não foi possível cadastrar o oferecimento.</error>';
        }
    }
    
    /**
     * Metodo utilizado para matricular os alunos no oferecimento, alem
     * de cadastra-los como alunos caso ele ainda nao exista no sistema.
     * Deve ser chamado para cada aluno a ser matriculado no sistema
     *
     * @param string $CODIGO_OFERECIMENTO  Recebe o codigo de oferecimento.
     * @param string $NOME Nome do aluno
     * @param string $CPF Cpf 
     * @param string $SEXO Sexo 
     * @param string $DATA_DE_NASCIMENTO Data de nascimento
     * @param string $EMAIL Email
     * @param string $TELEFONE_FIXO Telefone fixo
     * @param string $TELEFONE_CELULAR Telefone celular
     * @param string $MUNICIPIO_RESIDENCIA Municipio residencia
     * @param string $ESTADO_RESIDENCIA Estado residencia
     * @param string $CEP_RESIDENCIA Cep residencia
     * @param string $BAIRRO_RESIDENCIA Bairro residencia
     * @param string $LOGRADOURO_RESIDENCIA Logradouro residencia
     * @param string $NUMERO_RESIDENCIA Numero residencia
     * @param string $COMPLEMENTO_RESIDENCIA Complemento residencia
     * @param string $MUNICIPIO_PROFISSIONAL Municipio profissional
     * @param string $ESTADO_PROFISSIONAL Estado UF profissional
     * @param string $CEP_PROFISSIONAL Cep profissional
     * @param string $BAIRRO_PROFISSIONAL Bairro profissional
     * @param string $LOGRADOURO_PROFISSIONAL Logradouro profissional
     * @param string $NUMERO_PROFISSIONAL Numero profissional
     * @param string $COMPLEMENTO_PROFISSIONAL Complemento profissional
     * 
     * @return integer Codigo da pessoa inserida em caso de sucesso 0 em caso de erro
     */
    public function wsAluno($CODIGO_OFERECIMENTO, $NOME, $CPF, $SEXO, $DATA_DE_NASCIMENTO, $EMAIL, $TELEFONE_FIXO, $TELEFONE_CELULAR,
                            $MUNICIPIO_RESIDENCIA, $ESTADO_RESIDENCIA, $CEP_RESIDENCIA, $BAIRRO_RESIDENCIA, $LOGRADOURO_RESIDENCIA, $NUMERO_RESIDENCIA, $COMPLEMENTO_RESIDENCIA,
                            $MUNICIPIO_PROFISSIONAL, $ESTADO_PROFISSIONAL, $CEP_PROFISSIONAL, $BAIRRO_PROFISSIONAL, $LOGRADOURO_PROFISSIONAL, $NUMERO_PROFISSIONAL, $COMPLEMENTO_PROFISSIONAL)
    {
        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $busPhysicalPersonStudent = new BusinessBasicBusPhysicalPersonStudent();
        $busDocument = new BusinessBasicBusDocument(); 
        $busCity = new BusinessBasicBusCity();        
        
        $cpf = $CPF; //CPF
        $groupId = $CODIGO_OFERECIMENTO; //CODIGO_OFERECIMENTO
        
        $cpf = SAGU::convertInCPFFormat($cpf);
        
        $filter->content = $cpf;
        
        $pessoa = $busPhysicalPerson->searchPhysicalPerson($filter); //verifica se existe pessoa
        
        SDatabase::beginTransaction();
        
        if($pessoa)
        { 
            $data->personId = $pessoa[0][0];
            
            $aluno = $busPhysicalPersonStudent->searchPhysicalPersonStudent($data);//verifica se a pessoa e aluno
            
            if(!$aluno) //se a pessoa não e aluno, insere ela como aluno
            {
                $aluno = $busPhysicalPersonStudent->insertOrUpdatePhysicalPersonStudent($data);
            }
            
           // return $aluno;
        }    
        else
        {   
            //busca cidade da pessoa
            $filtersCity->zipCode = $CEP_RESIDENCIA; // CEP_RESIDENCIA
            $filtersCity->name = strtoupper($MUNICIPIO_RESIDENCIA); //MUNICIPIO_RESIDENCIA
            $filtersCity->stateId = $ESTADO_RESIDENCIA; //ESTADO_RESIDENCIA
            $filtersCity->countryId = 'BRA';            

            $cidade = $busCity->searchCity($filtersCity);
            if($cidade)
            {
                $data->cityId = $cidade[0][0];
            }
            else
            {
                $cidade = $busCity->insertCity($filtersCity);
                $data->cityId = $cidade;            
            }
            
            //busca cidade do trabalho
            $filtersCityWork->zipCode = $CEP_PROFISSIONAL; // CEP_PROFISSIONAL
            $filtersCityWork->name = strtoupper($MUNICIPIO_PROFISSIONAL); //MUNICIPIO_PROFISSIONAL
            $filtersCityWork->stateId = $ESTADO_PROFISSIONAL ; //ESTADO_PROFISSIONAL
            $filtersCityWork->countryId = 'BRA';            

            $cidadeTrabalho = $busCity->searchCity($filtersCityWork);
            if($cidadeTrabalho)
            {
                $data->cityIdWork = $cidadeTrabalho[0][0];
            }
            else
            {
                $cidadeTrabalho = $busCity->insertCity($filtersCityWork);
                $data->cityIdWork = $cidadeTrabalho;            
            }
                 
             $data->name = strtoupper($NOME); //NOME
             $data->sex = strtoupper($SEXO); //SEXO
             $data->content = $cpf; //CPF
             $data->dateBirth = $DATA_DE_NASCIMENTO; // DATA_DE_NASCIMENTO
             $data->email = $EMAIL; // EMAIL
             $data->residentialPhone = $TELEFONE_FIXO; // TELEFONE_FIXO
             $data->cellPhone = $TELEFONE_CELULAR; // TELEFONE_CELULAR
             
             $data->zipCode = $CEP_RESIDENCIA;//CEP_RESIDENCIA
             $data->neighborhood = $BAIRRO_RESIDENCIA;//BAIRRO_RESIDENCIA
             $data->location = $LOGRADOURO_RESIDENCIA;// LOGRADOURO_RESIDENCIA
             $data->number = $NUMERO_RESIDENCIA; // NUMERO_RESIDENCIA
             $data->complement = $COMPLEMENTO_RESIDENCIA; //COMPLEMENTO_RESIDENCIA             
             
             $data->zipCodeWork = $CEP_PROFISSIONAL; //CEP_PROFISSIONAL
             $data->neighborhoodWork = $BAIRRO_PROFISSIONAL; //BAIRRO_PROFISSIONAL
             $data->locationWork = $LOGRADOURO_PROFISSIONAL; // LOGRADOURO_PROFISSIONAL
             // NUMERO_PROFISSIONAL
             $data->complementWork = $COMPLEMENTO_PROFISSIONAL; //COMPLEMENTO_PROFISSIONAL             
             
             $data->documentTypeId = '2'; //SAGU::getParameter('BASIC','DEFAULT_DOCUMENT_TYPE_ID_CPF');
             $data->isDelivered= 'f';
             
             $pessoaNova = $busPhysicalPerson->insertPhysicalPerson($data); //insere uma pessoa  
             
             $data->personId = $pessoaNova;
             
             $busDocument->insertOrUpdateDocument($data); //insere o cpf da pessoa
             
             $aluno = $busPhysicalPersonStudent->insertPhysicalPersonStudent($data); //insere a pessoa como aluno
             
        }
        
        if($aluno)
        {
            $busContract = new BusinessAcademicBusContract();
            $busGroup = new BusinessAcademicBusGroup();
            
            $disciplinaOferecida = $busGroup->getGroup($groupId, true);
            
            if($aluno->personId)
            {
                $filters->personId = $aluno->personId;
            }else
            {
                $filters->personId = $aluno[0][0];
            }
            
            $filters->courseId = $disciplinaOferecida->curriculumCourseId;
            $filters->courseVersion = $disciplinaOferecida->curriculumCourseVersion;
            $filters->turnId = $disciplinaOferecida->turnId;
            $filters->unitId = $disciplinaOferecida->unitId;

            $rows = $busContract->searchContract($filters, false, true); //verifica se existe contrato para o aluno na disciplina oferecida e na turma
            $contractId = $rows[0][0];
            
            if(!$contractId)
            {                
                $filters->isListener = 'f';
                $filters->isRequestAcademicDegree = 'f';
                $filters->exploitenrollsintransfer = 'f';
                
                $contractId = $busContract->insertContract($filters); //insere contrato para o aluno, caso ele não tenha
            }
        }
        
        if($contractId)
        {            
            $matricula = new BusinessAcademicBusEnroll();
            $groups = array($disciplinaOferecida->groupId => $disciplinaOferecida->curriculumId);            
            $learningPeriodId = $disciplinaOferecida->learningPeriodId;            
             
            try
            {
                $matricula->enroll($contractId, $learningPeriodId, $groups, true, false, false, false, false, true);
                $ok = $filters->personId;
            }
            catch(Exception $e)
            {   
                //throw new Exception('Erro ao gerar contrato.');
                $ok = 0;
            }                      
        }  
        
        SDatabase::commit();

        return $ok;
    }
    
    /**
     * Metodo utilizado para identificar o encerramento de um oferecimento, 
     * sendo que todos os passos foram dados e a turma e considerada concluida.
     *
     * @param  integer $CODIGO_OFERECIMENTO  Recebe o codigo de oferecimento.
     * @return string True ou false
     */
    public function wsEncerraOferecimento($CODIGO_OFERECIMENTO)
    {    
        $busGroup = new BusinessAcademicBusGroup();
        
        try
        {
             $busGroup->closeGroup($CODIGO_OFERECIMENTO, true);
             
             $ok = 'true';
        }
        catch (Exception $e)
        {                       
            $ok = 'false';
            
        }
        
        return $ok;
    }
    
}
?>
