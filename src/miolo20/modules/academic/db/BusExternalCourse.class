<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdExternalCourse table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 16/09/2005
 *
 **/

/**
 * Class to manipulate the acdExternalCourse table
 **/
class BusinessAcademicBusExternalCourse extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     * @returns (array): Return an array with the entire table
     **/
    public function listExternalCourse()
    {
        return 'Not implemented';
    }

    /**
     * Return a specific record from the database
     *
     * @param $externalCourseId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     **/
    public function getExternalCourse($externalCourseId)
    {
        $sql = 'SELECT A.externalCourseId,
                       A.name,
                       A.shortName,
                       A.obs,
                       A.knowledgeAreaId,
                       B.name AS knowledgeAreaName,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdExternalCourse A
             LEFT JOIN acdKnowledgeArea B
                    ON (B.knowledgeAreaId = A.knowledgeAreaId)
                 WHERE A.externalCourseId = ?';

        $pk = array( $externalCourseId );

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));

        $externalCourse = new AcdExternalCourse();

        list ( $externalCourse->externalCourseId,
               $externalCourse->name,
               $externalCourse->shortName,
               $externalCourse->obs,
               $externalCourse->knowledgeAreaId,
               $externalCourse->knowledgeAreaName,
               $externalCourse->userName,
               $externalCourse->dateTime,
               $externalCourse->ipAddress ) = $result[0];

        return $externalCourse;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     **/
    public function searchExternalCourse($filters)
    {
        $sql = 'SELECT A.externalCourseId,
                       A.name,
                       A.shortName,
                       A.obs,
                       A.knowledgeAreaId,
                       B.name AS knowledgeAreaName,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdExternalCourse A
             LEFT JOIN acdKnowledgeArea B
                    ON (B.knowledgeAreaId = A.knowledgeAreaId)';

        if ( strlen($filters->externalCourseId) > 0 )
        {
            $where .= ' AND A.externalCourseId = ?';
            $args[] = $filters->externalCourseId;
        }

        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $filters->name . '%';
        }

        if ( strlen($filters->shortName) > 0 )
        {
            $where .= ' AND UNACCENT(A.shortName) ILIKE UNACCENT(?)';
            $args[] = $filters->shortName . '%';
        }

        if ( strlen($filters->obs) > 0 )
        {
            $where .= ' AND A.obs ILIKE ?';
            $args[] = $filters->obs . '%';
        }

        if ( strlen($filters->knowledgeAreaId) > 0 )
        {
            $where .= ' AND A.knowledgeAreaId = ?';
            $args[] = $filters->knowledgeAreaId;
        }

        if ( strlen($filters->knowledgeAreaName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $filters->knowledgeAreaName . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));

        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     **/
    public function insertExternalCourse($data)
    {
        $sql = 'INSERT INTO acdExternalCourse
                            (name,
                             shortName,
                             obs,
                             knowledgeAreaId)
                     VALUES (?,
                             ?,
                             ?,
                             ?)';

        $args = array( $data->name,
                       $data->shortName,
                       $data->obs,
                       $data->knowledgeAreaId );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     **/
    public function updateExternalCourse($data)
    {
        $sql = 'UPDATE acdExternalCourse
                   SET name = ?,
                       shortName = ?,
                       obs = ?,
                       knowledgeAreaId = ?
                 WHERE externalCourseId = ?';

        $args = array( $data->name,
                       $data->shortName,
                       $data->obs,
                       $data->knowledgeAreaId,
                       $data->externalCourseId );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $externalCourseId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     **/
    public function deleteExternalCourse($externalCourseId)
    {
        $sql = 'DELETE FROM acdExternalCourse
                      WHERE externalCourseId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $externalCourseId));

        return $result;
    }
}
?>
