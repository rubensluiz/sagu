<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 08/08/2006
 *
 **/

/**
 * Class to manipulate tables
 **/
class BusinessAcademicBusStateContractList extends sBusiness
{
    public function listStateContractPupils($filters)
    {
        $module = MIOLO::getCurrentModule();
        
        set_time_limit(0);
        
        $db = $this->getDatabase();
        
        $sql = ' SELECT A.courseId,
                        A.courseVersion,
                        E.name,
                        A.unitId,
                        F.description,
                        A.turnId,
                        G.description,
                        A.contractId,
                        A.personId,
                        B.name,
                        B.residentialPhone,
                        B.workPhone,
                        B.cellPhone,
                        (SELECT isCloseContract 
                           FROM acdStateContract 
                          WHERE stateContractId = getContractState(A.contractId)),
                        D.stateContractId,
                        D.description
                   FROM unit_acdContract A
             INNER JOIN acdCourse E
                     ON (E.courseId = A.courseId)
             INNER JOIN basUnit F
                     ON (F.unitId = A.unitId)
             INNER JOIN basTurn G
                     ON (G.turnId = A.turnId)
             INNER JOIN ONLY basPhysicalPersonStudent B
                     ON (B.personId = A.personId) ';

        if (strlen($filters->periodId) > 0)
        {
            $sql   .= ' INNER JOIN unit_acdlearningperiod C
                                ON (C.courseId = A.courseId AND
                                    C.courseVersion = A.courseVersion AND
                                    C.unitId = A.unitId AND
                                    C.turnId = A.turnId AND
                                    C.periodId = ?)
                        INNER JOIN acdStateContract D
                                ON (D.stateContractId = getContractStateBetweenDates(A.contractId, C.beginDate, C.endDate)) ';
            $args[] = $filters->periodId;
        }
        elseif ((strlen($filters->beginDate) > 0) && (strlen($filters->endDate)))
        {
            $sql   .= ' INNER JOIN acdStateContract D 
                                ON (D.stateContractId = getContractStateBetweenDates(A.contractId, TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'))) ';
            $args[] = $filters->beginDate;
            $args[] = $filters->endDate;
        }
        else
        {
            $sql .= ' INNER JOIN acdStateContract D 
                              ON (D.stateContractId = getContractState(A.contractId) ';
        }
        if (strlen($filters->courseId) > 0)
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if (strlen($filters->courseVersion) > 0)
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if (strlen($filters->unitId) > 0)
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if (strlen($filters->turnId) > 0)
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if (strlen($filters->stateContractId) > 0)
        {
            $where .= ' AND D.stateContractId = ? ';
            $args[] = $filters->stateContractId;
        }
        
        if (strlen($where) > 0)
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.courseId, A.courseVersion, A.unitId, A.turnId, D.stateContractId, B.name ';
        
            $result = $db->query(SAGU::prepare($sql, $args));
            
            if (count($result) > 0)
            {
                foreach ($result as $res)
                {
                    $index = $res[0] . '-' . $res[1] . '-' . $res[3] . '-' . $res[5] . '-' . $res[14];
                    $title = $res[0] . '(' . $res[1] . ') - ' . $res[2] . ' - ' . $res[4] . ' - ' . $res[6] . ' - ' . $res[15];
                    
                    $return[$index]->title  = $title;
                    
                    if ($res[13] == DB_FALSE)
                    {
                        $actualSituation = '<font color=blue>' . _M('Ativo', $module) . '</font>';
                    }
                    else
                    {
                        $actualSituation = '<font color=red>' . _M('Inativo', $module) . '</font>';
                    }
                    
                    $row = array($res[8], $res[9], $res[10], $res[11], $res[12], $actualSituation);
                    $return[$index]->data[] = $row;
                }
            }
            
            return $return;
        }
        return null;
    }
}
?>
