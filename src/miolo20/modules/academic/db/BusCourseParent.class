<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basCourse table
 *
 * @author Andre Chagas Dias[andre@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 12/09/2008
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessAcademicBusCourseParent extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCourseParent()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT courseParentId,
                  FROM unit_acdCourseParent   
              ORDER BY courseParentId';
        $ret = $db->query($sql);

        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCourseParent($courseId)
    {
        $sql = 'SELECT courseParentId,
                       courseId,
                       courseVersion,
                       turnId,
                       unitId,
                       parentCourseId,
                       parentCourseVersion,
                       parentTurnId,
                       parentUnitId,
                       parentCurricularComponentsPeriod,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM unit_acdCourseParent
                 WHERE courseParentId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $courseId));

        $courseParent = new acdCourseParent();
        list ( $courseParent->courseParentId,
               $courseParent->courseId,
               $courseParent->courseVersion,
               $courseParent->turnId,
               $courseParent->unitId,
               $courseParent->parentCourseId,
               $courseParent->parentCourseVersion,
               $courseParent->parentTurnId,
               $courseParent->parentUnitId,
               $courseParent->parentCurricularComponentsPeriod,
               $courseParent->userName,
               $courseParent->dateTime ) = $result[0];

        return $courseParent; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCourseParent($filters)
    {
        $sql= 'SELECT A.courseParentId,
                      A.courseId || (SELECT \' - \' || name FROM acdCourse WHERE A.courseId = acdCourse.courseId LIMIT 1),
                      A.courseVersion,
                      A.turnId || (SELECT \' - \' || description FROM basTurn WHERE A.turnId = basTurn.turnId LIMIT 1),
                      (SELECT description FROM basUnit WHERE A.unitId = basUnit.unitId LIMIT 1),
                      A.parentCourseId || (SELECT \' - \' || name FROM acdCourse WHERE A.parentCourseId = acdCourse.courseId LIMIT 1),
                      A.parentCourseVersion,
                      A.parentTurnId || (SELECT \' - \' || description FROM basTurn WHERE A.turnId = basTurn.turnId LIMIT 1),
                      (SELECT description FROM basUnit WHERE A.unitId = basUnit.unitId LIMIT 1),
                      A.parentCurricularComponentsPeriod
                 FROM unit_acdCourseParent A';

        if ( strlen($filters->courseParentId) > 0 )
        {
            $where .= ' AND A.courseParentId = ? ';
            $args[] = $filters->courseParentId;
        }
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if ( strlen($filters->parentCourseId) > 0 )
        {
            $where .= ' AND A.parentCourseId = ? ';
            $args[] = $filters->parentCourseId;
        }
        if ( strlen($filters->parentCourseVersion) > 0 )
        {
            $where .= ' AND A.parentCourseVersion = ? ';
            $args[] = $filters->parentCourseVersion;
        }
        if ( strlen($filters->parentCurricularComponentsPeriod) > 0 )
        {
            $where .= ' AND A.parentCurricularComponentsPeriod = ? ';
            $args[] = $filters->parentCurricularComponentsPeriod;
        }
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY A.courseParentId';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCourseParent($data)
    {
        $sql = 'INSERT INTO acdCourseParent
                            (courseId,
                             courseVersion,
                             turnId,
                             unitId,
                             parentCourseId,
                             parentCourseVersion,
                             parentTurnId,
                             parentUnitId,
                             parentCurricularComponentsPeriod)
                             VALUES (?,?,?,?,?,?,?,?,?)';

        $args = array( $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->parentCourseId,
                       $data->parentCourseVersion,
                       $data->parentTurnId,
                       $data->parentUnitId,
                       $data->parentCurricularComponentsPeriod );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateCourseParent($data)
    {
        $sql = 'UPDATE acdCourseParent
                   SET courseId                          = ?,
                       courseVersion                     = ?,
                       turnId                            = ?,
                       unitId                            = ?,
                       parentCourseId                    = ?,
                       parentCourseVersion               = ?,
                       parentTurnId                      = ?,
                       parentUnitId                      = ?,
                       parentCurricularComponentsPeriod  = ?
                 WHERE courseParentId                    = ?';

        $args = array( $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->parentCourseId,
                       $data->parentCourseVersion,
                       $data->parentTurnId,
                       $data->parentUnitId,
                       $data->parentCurricularComponentsPeriod,
                       $data->courseParentId );
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteCourseParent($courseParentId)
    {
        $sql = 'DELETE FROM acdCourseParent
                      WHERE courseParentId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $courseParentId));

        return $result;
    }

    /**
     * Search inverse relationships between courses
     *
     * @param $courseId (string): Course
     * @param $parentCourseId (string): Course father
     * @return (array): An array containing the search results
     *
     **/
   public function searchInverseRelationships($courseId,$parentCourseId,$courseParentId)
    {
        $sql = 'SELECT courseParentId FROM unit_acdCourseParent 
                         WHERE parentCourseId = ? AND courseId = ? AND courseParentId != ?';

        $args = array( $courseId,
                       $parentCourseId,
                       $courseParentId );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

}
?>
