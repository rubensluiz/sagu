<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for acdEvaluationType table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * 
 * @since
 * Class created on 09/12/2010
 *
 **/

/**
 * Class to manipulate the acdEvaluationType table
 **/
class BusinessAcademicBusEvaluationType extends sBusiness
{
    /**
     * Constantes dos tipos de avaliação.
     */
    const POR_NOTA = 1;
    const POR_FREQUENCIA = 2;
    const POR_NOTA_E_FREQUENCIA = 3;
    const SEM_AVALIACAO = 4;
    
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listEvaluationType()
    {
        $sql = 'SELECT evaluationTypeId,
                       description
                  FROM acdEvaluationType
              ORDER BY description';
        
        $ret = $this->getDatabase()->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $evaluationTypeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEvaluationType($evaluationTypeId)
    {
        $sql = 'SELECT evaluationTypeId,
                       description,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM acdEvaluationType
                 WHERE A.evaluationTypeId = ?';

        $pk = array($evaluationTypeId);

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $pk));
        
        $evaluationType = new AcdEvaluationType();

        list ( $evaluationType->evaluationTypeId,
               $evaluationType->description,
               $evaluationType->userName,
               $evaluationType->dateTime,
               $evaluationType->ipAddress ) = $result[0];

        return $evaluationType;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEvaluationType($filters)
    {
        $sql = 'SELECT evaluationTypeId,
                       description,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM acdEvaluationType';

        if ( strlen($filters->evaluationTypeId) > 0 )
        {
            $where .= ' AND evaluationTypeId = ?';
            $args[] = $filters->evaluationTypeId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?)';
            $args[] = $filters->description . '%';
        }

        $result = null;
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY description';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEvaluationType($data)
    {
        $sql = 'INSERT INTO acdEvaluationType
                            (description)
                     VALUES (?)';

        $args = array($data->description);

        return $this->getDatabase()->execute(SAGU::prepare($sql, $args));
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateEvaluationType($data)
    {
        $sql = 'UPDATE acdEvaluationType
                   SET description = ?
                 WHERE evaluationTypeId = ?';

        $args = array( 
                       $data->description,
                       $data->evaluationTypeId
                     );
                       
        $sqls = SAGU::prepare($sql, $args);

        $result = true;
        for ( $i=0; $i<count($sqls) && $result; $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }
        
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $evaluationTypeId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteEvaluationType($evaluationTypeId)
    {
        $sql = 'DELETE FROM acdEvaluationType
                      WHERE evaluationTypeId = ?';

        $pk = array($evaluationTypeId);

        return $this->getDatabase()->execute(SAGU::prepare($sql, $pk));
    }
}

?>
