<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdConditionUnblock table.
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * This class was created 03/05/2006
 *
 **/

class BusinessAcademicBusCurricularComponentOutOfCurriculumUnblock extends sBusiness
{
    /**
     * Obtain the specified curricularComponentUnblock id data.
     *
     * @param $curricularComponentUnblockId (int): Identifier of the curriculum component type to be retrieved.
     *
     * @return If the specified courseId exists, returns an object (curricularComponentUnblock) containing its data. 
     * Otherwise, returns null.
     *
     */
    public function getCurricularComponentOutOfCurriculumUnblock($curricularComponentUnblockId)
    {

        $sql = 'SELECT   A.learningPeriodId,
                         A.contractId,
                         A.curriculumId,
                         A.curricularComponentId,
                         A.curricularComponentVersion,
                         A.isOutOfCurriculum,
                         A.userName,
                         TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                         A.ipAddress
                    FROM acdCurricularComponentUnblock A
                   WHERE A.curricularComponentUnblockId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $curricularComponentUnblockId));

        

        $curricular = new acdCurricularComponentUnblock();

        list (  $curricular->learningPeriodId,
                $curricular->contractId,
                $curricular->curriculumId,
                $curricular->curricularComponentId,
                $curricular->curricularComponentVersion,
                $curricular->isOutOfCurriculum,
                $curricular->userName,
                $curricular->dateTime,
                $curricular->ipAddress ) = $result[0];

        return $curricular; 
    }

    /**
     * Search for curricularComponentUnblock.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    public function searchCurricularComponentOutOfCurriculumUnblock($data)
    {
        $sql = 'SELECT A.curricularComponentUnblockId,
                       F.personId,
                       F.name,
                       B.courseId || \' / \' || B.courseVersion,
                       C.name,
                       E.curricularComponentId || \' / \' || E.curricularComponentVersion,
                       E.name,
                       A.contractId,
                       A.learningPeriodId
                  FROM acdCurricularComponentUnblock A
            INNER JOIN unit_acdContract B
                    ON (B.contractId = A.contractId)
            INNER JOIN acdCourse C
                    ON (C.courseId = B.courseID)
            INNER JOIN unit_acdlearningperiod D
                    ON (D.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdCurricularComponent E
                    ON (E.curricularComponentId          = A.curricularComponentId AND
                        E.curricularComponentVersion     = A.curricularComponentVersion)
            INNER JOIN ONLY basPhysicalPerson F
                    ON (F.personId = B.personId)
                 WHERE A.isOutOfCurriculum = TRUE ';

        $where  = '';
        unset($args);

        if ( strlen($data->personId) > 0 )
        {
            $where .= '    AND   B.personId = ?';
            $args[] = $data->personId;
        }

        if ( strlen($data->contractId) > 0 )
        {
            $where .= '    AND   A.contractId = ?';
            $args[] = $data->contractId;
        }

        if ( strlen($data->learningPeriodId) > 0 )
        {
            $where .= '    AND   A.learningPeriodId = ?';
            $args[] = $data->learningPeriodId;
        }

        if ( strlen($data->curriculumId) > 0 )
        {
            $where .= '    AND   A.curriculumId = ?';
            $args[] = $data->curriculumId;
        }

        if ( strlen($data->periodId) > 0 )
        {
            $where .= '    AND   D.periodId = ?';
            $args[] = $data->periodId;
        }

        if ( strlen($data->curricularComponentId) > 0 )
        {
            $where .= '    AND   E.curricularComponentId = ?';
            $args[] = $data->curricularComponentId;
        }

        if ( strlen($data->curricularComponentVersion) > 0 )
        {
            $where .= '    AND   E.curricularComponentVersion = ?';
            $args[] = $data->curricularComponentVersion;
        }

        if ( $where != '' )
        {
            $sql .= $where . ' ORDER BY F.name';

            $db      = $this->getDatabase();

            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result;
    }

    /**
     * List all curricularComponentUnblocks.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @return an array containing the select results.
     *
     */
    public function listCurricularComponentOutOfCurriculumUnblock()
    {

        $sql = 'SELECT A.curricularComponentUnblockId,
                          A.description
                     FROM acdCurricularComponentUnblock A
                 ORDER BY A.description';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql,$args));
        

        return $result;
    }

    /**
     * Insert a new acdConditionUnblock.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Object (curricular) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    public function insertCurricularComponentOutOfCurriculumUnblock($data)
    {
        $sql = 'SELECT NEXTVAL(\'seq_curricularcomponentunblockid\')';

        $ret = $this->getDatabase()->query(SAGU::prepare($sql,null));

        $data->curricularComponentUnblockId = $ret[0][0];

        $sql = 'INSERT INTO acdCurricularComponentUnblock
                            (curricularComponentUnblockId,
                             learningPeriodId,
                             contractId,
                             curriculumId,
                             curricularComponentId,
                             curricularComponentVersion,
                             isOutOfCurriculum)
                     VALUES (?,?,?,?,?,?,?)';
        $args = array(
                       $data->curricularComponentUnblockId,
                       $data->learningPeriodId,
                       $data->contractId,
                       $data->curriculumId,
                       $data->curricularComponentId,
                       $data->curricularComponentVersion,
                       DB_TRUE 
                     );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( $result && strlen($data->curricularComponentUnblockId)>0 )
        {
            return $data;
        }
        return false;
    }

    /**
     * Update the specified curricularComponentUnblock data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    public function updateCurricularComponentOutOfCurriculumUnblock($data)
    {
        $update = 'UPDATE acdCurricularComponentUnblock
                      SET learningPeriodId             = ?,
                          contractId                   = ?,
                          curriculumId                 = ?,
                          curricularComponentId        = ?,
                          curricularComponentVersion   = ?
                    WHERE curricularComponentUnblockId = ?';

        $db     = $this->getDatabase();

        $args   = array( $data->learningPeriodId,
                         $data->contractId,
                         $data->curriculumId,
                         $data->curricularComponentId,
                         $data->curricularComponentVersion,
                         $data->curricularComponentUnblockId
                       );
        $sqls = SAGU::prepare($update, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete the specified curricularComponentUnblock.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $curricularComponentUnblockId (int): Identifier of the curricularComponentUnblockId to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    public function deleteCurricularComponentOutOfCurriculumUnblock($curricularComponentUnblockId)
    {
        $delete = 'DELETE FROM acdCurricularComponentUnblock
                    WHERE curricularComponentUnblockId = ?';


        $db     = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete,$curricularComponentUnblockId));

        

        return $result;
    }

}

?>
