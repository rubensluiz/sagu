<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdProfessorCenter table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2005
 *
 **/

/**
 * Class to manipulate the acdProfessorCenter table
 **/
class BusinessAcademicBusProfessorCenter extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $professorId (integer): Primary key of the record to be retrieved
     * @param $centerId (integer): Primary key of the record to be retrieved
     * @param $beginDate (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     **/
    public function getProfessorCenter($professorId, $centerId, $beginDate)
    {
        $sql = 'SELECT A.professorId,
                       B.name,
                       A.centerId,
                       C.name,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdProfessorCenter A
        LEFT JOIN ONLY basPhysicalPersonProfessor B
                    ON ( A.professorId = B.personId )
             LEFT JOIN acdCenter C
                    ON ( A.centerId = C.centerId  )
                 WHERE A.professorId = ?
                   AND A.centerId = ?
                   AND A.beginDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';

        $args = array ( $professorId,
                        $centerId,
                        $beginDate );

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));


        $professorCenter = new acdProfessorCenter();
        list ( $professorCenter->professorId,
               $professorCenter->name,
               $professorCenter->centerId,
               $professorCenter->name,
               $professorCenter->beginDate,
               $professorCenter->endDate,
               $professorCenter->userName,
               $professorCenter->dateTime,
               $professorCenter->ipAddress ) = $result[0];

        return $professorCenter;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     **/
    public function searchProfessorCenter($filters)
    {
        $sql = 'SELECT A.professorId,
                       B.name,
                       A.centerId,
                       C.name,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdProfessorCenter A
       INNER JOIN ONLY basPhysicalPersonProfessor B
                    ON ( A.professorId = B.personId )
            INNER JOIN acdCenter C
                    ON ( A.centerId = C.centerId  ) ';

        if ( strlen($filters->professorId) > 0 )
        {
            $where .= ' AND A.professorId = ? ';
            $args[] = $filters->professorId;
        }

        if ( strlen($filters->professorName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->professorName . '%';
        }

        if ( strlen($filters->centerId) > 0 )
        {
            $where .= ' AND A.centerId = ? ';
            $args[] = $filters->centerId;
        }

        if ( strlen($filters->centerName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->centerName . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.beginDate,
                                                               C.name,
                                                               B.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::Prepare($sql,$args));

        }
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     **/
    public function insertProfessorCenter($data)
    {
        $sql = 'INSERT INTO acdProfessorCenter
                            (professorId,
                             centerId,
                             beginDate,
                             endDate)
                     VALUES (?,?,TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'))';

        $args = array( $data->professorId,
                       $data->centerId,
                       $data->beginDate,
                       $data->endDate );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     **/
    public function updateProfessorCenter($data)
    {
        $sql = 'UPDATE acdProfessorCenter
                   SET professorId = ?,
                       centerId = ?,
                       beginDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       endDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                 WHERE professorId = ?
                   AND centerId = ?
                   AND beginDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';

        $args = array( $data->professorId,
                       $data->centerId,
                       $data->beginDate,
                       $data->endDate,
                       $data->professorId,
                       $data->centerId,
                       $data->beginDate );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $professorId (integer): Primary key of the record to be retrieved
     * @param $centerId (integer): Primary key of the record to be retrieved
     * @param $beginDate (integer): Primary key of the record to be retrieved
     * @return (boolean): True if succeed, otherwise
     **/
    public function deleteProfessorCenter($args)
    {
        $sql = 'DELETE FROM acdProfessorCenter
                      WHERE professorId = ?
                        AND centerId = ?
                        AND beginDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }
}
?>
