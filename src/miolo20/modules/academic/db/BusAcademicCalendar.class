<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finSPCSituation table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 14/10/2010
 */
class BusinessAcademicBusAcademicCalendar extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @returns (array): Return an array with the entire table
     */
    public function listAcademicCalendar()
    {
        $sql = 'SELECT calendarYear,
                       description
                  FROM acdAcademicCalendar
              ORDER BY description';

        $db = $this->getDatabase();
        $return = $db->query($sql);

        return $return;
    }

    /**
     * Return a specific record from the database
     *
     * @param $calendarYear (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     */
    public function getAcademicCalendar($calendarYear)
    {
        $sql = 'SELECT calendarYear,
                       description,
                       userName,
               TO_CHAR (dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM acdAcademicCalendar
                 WHERE calendarYear = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $calendarYear));

        $academicCalendar = new AcdAcademicCalendar();
        list ( $academicCalendar->situationId,
               $academicCalendar->description,
               $academicCalendar->userName,
               $academicCalendar->dateTime,
               $academicCalendar->ipAddress ) = $result[0];

        return $academicCalendar;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     */
    public function searchAcademicCalendar($filters)
    {
        $sql = 'SELECT calendarYear,
                      description
                 FROM acdAcademicCalendar ';

        if ( strlen($filters->calendarYear) > 0 )
        {
            $where .= ' AND calendarYear = ? ';
            $args[] = $filters->calendarYear;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $sql .= ' ORDER BY description';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     */
    public function insertAcademicCalendar($data)
    {
        $sql = 'INSERT INTO acdacademiccalendar
                            (calendarYear,
                             description)
                     VALUES (?,?)';

        $args = array(
            $data->calendarYear,
            $data->description
        );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateAcademicCalendar($data)
    {
        $sql = 'UPDATE acdacademiccalendar
                   SET description = ?
                 WHERE calendarYear = ?';

        $args = array(
            $data->description,
            $data->calendarYear
        );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $calendarYear (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteAcademicCalendar($calendarYear)
    {
        $db = $this->getDatabase();
        $this->beginTransaction();

        // Detete academic calendar event
        $sql = 'DELETE FROM acdacademiccalendarEvent
                      WHERE calendarYear = ?';

        $result = $db->execute(SAGU::prepare($sql, $calendarYear));

        // Delete academic calendar
        $sql = 'DELETE FROM acdacademiccalendar
                      WHERE calendarYear = ?';

        $result = $db->execute(SAGU::prepare($sql, $calendarYear));
        $this->endTransaction();

        return $result;
    }
}
?>
