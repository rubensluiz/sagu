<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdDiploma table.
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * This class was created 05/10/2006
 *
 **/

class BusinessAcademicBusDiploma extends sBusiness
{
    /**
     * Obtain the specified diploma id data.
     *
     * @author Daniel Afonso Heisler [rudi@solis.coop.br]
     *
     * @param $registerNumber (int): Primary key
     *
     * @return If the specified courseId exists, returns an object (diploma) containing its data. 
     * Otherwise, returns null.
     *
     */
    function getDiploma($registerNumber)
    {
        $sql  = 'SELECT A.registerNumber,
                        A.contractId,
                        A.sheet,
                        A.book,
                        TO_CHAR(A.emissionDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        C.personId,
                        C.name as personName,
                        B.courseId,
                        B.courseVersion,
                        B.unitId,
                        B.turnId,
                        A.userName,
                        TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                        A.ipAddress
                   FROM acdDiploma A
             INNER JOIN unit_acdContract B
                     ON ( A.contractId = B.contractId )
        INNER JOIN ONLY basPerson C
                     ON ( B.personId = C.personId )
                  WHERE A.registerNumber = ?';

        $db   = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $registerNumber));

        $diploma = new acdDiploma();
        list ( $diploma->registerNumber,
               $diploma->contractId,
               $diploma->sheet,
               $diploma->book,
               $diploma->emissionDate,
               $diploma->personId,
               $diploma->personName,
               $diploma->courseId,
               $diploma->courseVersion,
               $diploma->unitId,
               $diploma->turnId,
               $diploma->userName,
               $diploma->dateTime,
               $diploma->ipAddress ) = $result[0];

        return $diploma;
    }

    /**
     * Search for diploma.
     *
     * @param $data Object containing data to filter the listing.
     * @return An array containing the search results.
     *
     */
    function searchDiploma($data=null)
    {
        $sql  = 'SELECT A.registerNumber,
                        A.contractId,
                        A.sheet,
                        A.book,
                        TO_CHAR(A.emissionDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        C.personId,
                        C.name as personName,
                        B.courseId,
                        B.courseVersion,
                        B.unitId,
                        B.turnId,
                        A.userName,
                        TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                        A.ipAddress
                   FROM acdDiploma A
             INNER JOIN unit_acdContract B
                     ON ( A.contractId = B.contractId )
        INNER JOIN ONLY basPerson C
                     ON ( B.personId = C.personId )';

        $where  = '';
        unset($args);
        if ( strlen($data->registerNumber) > 0 )
        {
             $where .= '    AND   A.registerNumber = ?';
            $args[] = $data->registerNumber;
        }
        if ( strlen($data->contractId) > 0 )
        {
            $where .= '    AND   A.contractId = ?';
            $args[] = $data->contractId;
        }
        if ( strlen($data->sheet) > 0 )
        {
            $where .= '    AND   A.sheet = ?';
            $args[] = $data->sheet;
        }
        if ( strlen($data->book) > 0 )
        {
            $where .= '    AND   A.book = ?';
            $args[] = $data->book;
        }
        if ( strlen($data->emissionDate) > 0 )
        {
            $where .= '    AND   A.emissionDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\')';
            $args[] = $data->emissionDate;
        }
        if ( strlen($data->personId) > 0 )
        {
            $where .= '    AND   C.personId = ?';
            $args[] = $data->personId;
        }

        if ( strlen($data->personName) > 0 )
        {
            $where .= '    AND   UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $data->personName . '%';
        }

        if ( $where != '' )
        {
            $sql .= '    WHERE ' . substr($where,8) ;
                    ' ORDER BY A.registerNumber';

            $db      = $this->getDatabase();

            $result  = $db->query(SAGU::prepare($sql,$args));
        }

        return $result;
    }

    /**
     * Get the next register number from acdDiploma table
     *
     * @return On success, the sequence id of the inserted record.
     *
     */
    public function getNextRegisterNumber()
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT max(registerNumber) + 1
                  FROM acdDiploma';

        $res = $db->query($sql);

        if ($res[0][0] == NULL)
        {
            return 1;
        };

        return $res[0][0];
    }

    /**
     * Get the next page number from acdDiploma table
     *
     * @return On success, the sequence id of the inserted record.
     *
     */
    public function getNextPageNumber()
    {
        $db  = $this->getDatabase();

        $sql = 'SELECT sheet
                  FROM acdDiploma
              ORDER BY registerNumber DESC
                 LIMIT 2';

        $res = $db->query($sql);

        if ( $res[0][0] == $res[1][0] )
        {
            return $res[0][0] + 1;
        }
        elseif ( $res[0][0] != $res[1][1] )
        {
            return $res[0][0];
        }

    }

    /**
     * Insert a new acdDiploma.
     *
     * @param $data (object): Object (diploma) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertDiploma($data)
    {
        $db = $this->getDatabase();

        $insert = 'INSERT INTO acdDiploma
                               ( registerNumber,
                                 contractId,
                                 sheet,
                                 book,
                                 emissionDate)
                        VALUES (?, ?, ?, ?, TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'))';

        $args = array(  $data->registerNumber,
                        $data->contractId,
                        $data->sheet,
                        $data->book,
                        $data->emissionDate );

        $sqls = SAGU::prepare($insert, $args);

        $result = $db->execute($sqls);

        return $result;
    }

    /**
     * Update the specified diploma data.
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateDiploma($data)
    {
        $update = 'UPDATE acdDiploma
                      SET contractId     = ?,
                          sheet          = ?,
                          book           = ?,
                          emissionDate   = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\')
                    WHERE registerNumber = ?';

        $db     = $this->getDatabase();

        $args = array(  $data->contractId,
                        $data->sheet,
                        $data->book,
                        $data->protocolId,
                        $data->emissionDate,
                        $data->registerNumber );

        $sqls = SAGU::prepare($update, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete the specified diploma.
     *
     * @param $registerNumber (int): Identifier of the registerNumber to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteDiploma($registerNumber)
    {
        $delete = 'DELETE FROM acdDiploma
                    WHERE registerNumber = ?';

        $db     = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete, $registerNumber));

        return $result;
    }
}

?>
