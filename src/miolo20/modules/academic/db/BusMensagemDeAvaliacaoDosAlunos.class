<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * \b Maintainers: \n
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 03/11/2014
 *
 */

class BusinessAcademicBusMensagemDeAvaliacaoDosAlunos extends sBusiness
{
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     */
    public function searchMensagemDeAvaliacaoDosAlunos($filters)
    {
        $sql = "SELECT A.mensagemDeAvaliacaoDosAlunosId,
                       A.mensagem
                  FROM acdMensagemDeAvaliacaoDosAlunos A ";
        
        if (strlen ($filters->mensagemDeAvaliacaoDosAlunosId) > 0)
        {
            $where .= " AND A.mensagemDeAvaliacaoDosAlunosId  = ? ";
            $args[] = $filters->mensagemDeAvaliacaoDosAlunosId;
        }
        
        if (strlen ($filters->mensagem) > 0)
        {
            $where .= " AND UNACCENT(A.mensagem) ILIKE UNACCENT (?)";
            $args[] = $filters->mensagem;
        }
        
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY mensagem';
        }
        
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     */
    public function insertMensagemDeAvaliacaoDosAlunos($data)
    {
        $sql = "INSERT INTO acdMensagemDeAvaliacaoDosAlunos (mensagem)
                VALUES (?)";
        $args = array ($data->mensagem);
        
        $return = SDatabase::execute($sql, $args);
        
        return $return;
    }
    
    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateMensagemDeAvaliacaoDosAlunos($data)
    {
        $sql = 'UPDATE acdMensagemDeAvaliacaoDosAlunos
                   SET mensagem = ?,
                 WHERE mensagemDeAvaliacaoDosAlunosId = ? ';

        $args = array( $data->mensagem,
                       $data->mensagemDeAvaliacaoDosAlunosId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }
    
    /**
     * Delete a record
     *
     * @param $mensagemDeAvaliacaoDosAlunosId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteMensagemDeAvaliacaoDosAlunos($mensagemDeAvaliacaoDosAlunosId)
    {
        $sql = 'DELETE FROM acdMensagemDeAvaliacaoDosAlunos
                      WHERE mensagemDeAvaliacaoDosAlunosId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $mensagemDeAvaliacaoDosAlunosId));
        
        return $result;
    }
}
