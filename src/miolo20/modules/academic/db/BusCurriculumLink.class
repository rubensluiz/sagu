<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCurriculumLink table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 * 
 * @since
 * Class created on 29/12/2005
 *
 **/

/**
 * Class to manipulate the acdCurriculumLink table
 **/
class BusinessAcademicBusCurriculumLink extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCurriculumLink()
    {
        return 'Not implemented';
    }
    
    /**
     *
     **/
    public function getCurriculumLink()
    {
        return 'Not implemented'; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCurriculumLink($filters)
    {
        $searchGrid = $filters->searchGrid;
        
        $sql = ' SELECT A.curriculumId,
                        B.courseId || \' / \' || B.courseVersion,
                        D.name AS courseName,                        
                        B.curricularComponentId || \' / \' || B.curricularComponentVersion,
                        E.name AS curricularComponentName,';
        
        if ( $searchGrid )
        {
            $sql .= '   T.description,
                        U.description,';
        }
                        
        $sql .= '       A.curriculumLinkId,
                        B2.courseId || \' / \' || B2.courseVersion,
                        D2.name AS courseName,                        
                        B2.curricularComponentId || \' / \' || B2.curricularComponentVersion,
                        E2.name AS curricularComponentName,';
        
        if ( $searchGrid )
        {
            $sql .= '   T2.description,
                        U2.description,';
        }                      
        
        $sql .= '       E.academicNumberHours,
                        A.utilizaVinculoParaMatricula
                   FROM unit_acdCurriculumLink A
                  INNER JOIN unit_acdcurriculum B
                     ON (A.curriculumId = B.curriculumId)
                  INNER JOIN basturn T
                     ON (B.turnId = T.turnId)
                  INNER JOIN basunit U
                     ON (B.unitId = U.unitId)
                  INNER JOIN acdCourse D
                     ON (D.courseId = B.courseId)
                  INNER JOIN acdCurricularComponent E
                     ON (E.curricularComponentId = B.curricularComponentId 
                    AND E.curricularComponentVersion = B.curricularComponentVersion)
                  INNER JOIN unit_acdcurriculum B2
                     ON (A.curriculumLinkId = B2.curriculumId)
                  INNER JOIN basturn T2
                     ON (B2.turnId = T2.turnId)
                  INNER JOIN basunit U2
                     ON (B2.unitId = U2.unitId)
                  INNER JOIN acdCourse D2
                     ON (D2.courseId = B2.courseId)
                  INNER JOIN acdCurricularComponent E2
                     ON (E2.curricularComponentId = B2.curricularComponentId) 
                    AND (E2.curricularComponentVersion = B2.curricularComponentVersion)';

        if ( strlen($filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen($filters->curriculumLinkId) > 0 )
        {
            $where .= ' AND A.curriculumLinkId = ?';
            $args[] = $filters->curriculumLinkId;
        }

        //curriculumId
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen($filters->courseUnitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $filters->courseUnitId;
        }
        if ( strlen($filters->courseTurnId) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $filters->courseTurnId;
        }
        if ( strlen($filters->curricularComponentId) > 0 )
        {
            $where .= ' AND B.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen($filters->curricularComponentVersion) > 0 )
        {
            $where .= ' AND B.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }

        //curriculumLink
        if ( strlen($filters->courseLinkId) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $filters->courseLinkId;
        }
        if ( strlen($filters->courseLinkVersion) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $filters->courseLinkVersion;
        }
        if ( strlen($filters->courseLinkUnitId) > 0 )
        {
            $where .= ' AND B2.unitId = ?';
            $args[] = $filters->courseLinkUnitId;
        }
        if ( strlen($filters->courseLinkTurnId) > 0 )
        {
            $where .= ' AND B2.turnId = ?';
            $args[] = $filters->courseLinkTurnId;
        }
        if ( strlen($filters->curricularComponentLinkId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $filters->curricularComponentLinkId;
        }
        if ( strlen($filters->curricularComponentLinkVersion) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentLinkVersion;
        }

        //Utiliza vínculo para matrícula
        if ( $filters->utilizaVinculoParaMatricula == DB_TRUE )
        {
            $where .= ' AND A.utilizaVinculoParaMatricula ';
        }
        elseif ( $filters->utilizaVinculoParaMatricula == DB_FALSE )
        {
            $where .= ' AND A.utilizaVinculoParaMatricula IS FALSE ';
        }
        
        unset($result);
        
        //Montar where
        if ( strlen($where) > 0 )
        {   
            $sql .= ' WHERE ' . substr($where, 4);
        }
        
        //Group e order bies
        if ( $searchGrid )
        {
            $sql .= 'GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
                     ORDER BY A.curriculumId';
        }
        else
        {
            $sql .= 'GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12
                     ORDER BY A.curriculumId';
        }            

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCurriculumLink($data)
    {
        $sql = 'INSERT INTO acdCurriculumLink
                            (curriculumId,
                             curriculumLinkId,
                             utilizaVinculoParaMatricula)
                     VALUES (?,?,?)';

        $args = array( 
                       $data->curriculumId,
                       $data->curriculumLinkId,
                       $data->utilizaVinculoParaMatricula
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCurriculumLink($data)
    {
        return 'Not implemented';
    }

    /**
     * Delete a record
     *
     * @param $curriculumOutId (string): Primary key for deletion
     * @param $curriculumInId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCurriculumLink($curriculumId, $curriculumLinkId)
    {
        $sql = 'DELETE FROM acdCurriculumLink
                      WHERE curriculumId = ?
                        AND curriculumLinkId  = ?';

        $pk = array(
                     $curriculumId,
                     $curriculumLinkId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));

        return $result;
    }
   
    /**
     * Verify if a curriculum have a concurrence
     * 
     * @curriculumInId (int): Curriculum that entered in situation for a other
     * 
     * @return (int): Curriculum that out because the new curriculum.
     */
    public function ifHaveConcurrence($curriculumInId)
    {
        $sql = ' SELECT curriculumOutId
                   FROM unit_acdCurriculumLink
                  WHERE curriculumInId = ? ';

        $db = $this->getDatabase();
    
        $args = array($curriculumInId);
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Verifca se o curriculumLinkId ja nao esta cadastrado na matriz atual.
     * 
     * @curriculumId (int): Código do curriculum atual.
     * @curriculumLinkId (int): Código do curriculum que terá vínculo.
     * 
     * @return (boolean): Verdadeiro ou falso 
     */
    public static function verificarDisciplinaNoCurriculumId($curriculumId, $curriculumLinkId)
    {
        //Obter curricularcomponentid e curricularcomponenteversion da segunda matriz
        $sql = "SELECT curricularComponentId,
                       curricularComponentVersion
                  FROM acdCurriculum
                WHERE curriculumId = '{$curriculumLinkId}'";
                
        $component = SDatabase::query($sql);

        //Obter chaves do curso da primeira matriz
        $sql = "SELECT courseId,
                       courseVersion,
                       turnId,
                       unitId
                  FROM acdCurriculum
                 WHERE curriculumId = '{$curriculumId}'";
        
        $course = SDatabase::query($sql);
        
        //Verificar se o component n?o está no course
        $sql = "SELECT curriculumId
                  FROM acdCurriculum
                 WHERE curricularComponentId = '{$component[0][0]}'
                   AND curricularComponentVersion = '{$component[0][1]}'
                   AND courseId = '{$course[0][0]}'
                   AND courseVersion = '{$course[0][1]}'
                   AND turnId = '{$course[0][2]}'
                   AND unitId=  '{$course[0][3]}'";
                   
        $result = SDatabase::query($sql);
        
        if (strlen ($result[0][0]) > 0 )
        {
            return false;
        }
        else
        {
            return true;
        }
        
    }
}

?>
