<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCurricularComponentGroup table.
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * This class was created 2005/09/06
 *
 **/

class BusinessAcademicBusCurricularComponentGroup extends sBusiness
{
    /**
     * Obtain the specified curricularComponentGroup id data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $curricularComponentGroupId (int): Identifier of the curriculum component group to be retrieved.
     *
     * @return If the specified courseId exists, returns an object (curricularComponentGroup) containing its data. 
     * Otherwise, returns null.
     *
     */
    function getCurricularComponentGroup($curricularComponentGroupId)
    {

        $select = 'SELECT A.name,
                          A.shortName,
                          A.userName,
                          TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                          A.ipAddress
                     FROM acdCurricularComponentGroup A
                    WHERE A.curricularComponentGroupId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($select, $curricularComponentGroupId));

        $curricular = new acdCurricularComponentGroup();

        list ( $curricular->curricularComponentGroupName,
               $curricular->shortName,
               $curricular->userName,
               $curricular->dateTime,
               $curricular->ipAddress ) = $result[0];

        return $curricular; 
    }

    /**
     * Search for curricularComponentGroup.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchCurricularComponentGroup($data=null)
    {

        $select = 'SELECT A.curricularComponentGroupId,
                          A.name,
                          A.shortName
                     FROM acdCurricularComponentGroup A ';

        $where  = '';
        unset($args);
        if ( strlen($data->curricularComponentGroupId) > 0 )
        {
            $where .= '    AND   A.curricularComponentGroupId = ?';
            $args[] = $data->curricularComponentGroupId;
        }
        if ( strlen($data->name) > 0 )
        {
            $where .= '    AND   UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $data->name .'%';
        }

        if ( $where != '' )
        {
            $select .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY A.name';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($select,$args));
        }

        return $result;
    }



    /**
     * Search for curricularComponentGroup by periodId, courseId, courseVersion, turnId, unitId.
     *
     * @author Fabiano Tomasini [fabiano@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchCurricularComponentGroupByLearningPeriod($filters)
    {

        $sql = 'SELECT DISTINCT D.curricularComponentGroupId,
                       D.name,
                       D.shortName,
                       A.evaluationcontrolmethodid,
                       A.periodid,
                       A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId
                  FROM unit_acdlearningperiod A
            INNER JOIN unit_acdGroup B
                    ON (A.learningPeriodId = B.learningPeriodId)
            INNER JOIN unit_acdcurriculum C
                    ON (C.curriculumid = B.curriculumId
                        AND C.courseId = A.courseId
                        AND C.courseVersion = A.courseVersion
                        AND C.turnId = A.turnId
                        AND C.unitId = A.unitId)
            LEFT JOIN acdschedule E
                    ON B.groupid = E.groupid
            LEFT JOIN acdscheduleprofessor F
                    ON F.scheduleid = E.scheduleid
            INNER JOIN acdCurricularComponentGroup D
                    ON (C.curricularcomponentgroupdocumentendcourseid = D.curricularComponentGroupId)
         --Não lista o grupo de código 0, que corresponde ao grupo não informado
                 WHERE curricularComponentGroupId != 0';

        $where  = '';
        unset($args);
        if ( strlen($filters->learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen($filters->professorId) > 0 )
        {
            $where .= ' AND F.professorid = ?';
            $args[] = $filters->professorId;
        }
        if ( strlen($filters->evaluationcontrolmethodId) > 0 )
        {
            $where .= ' AND A.evaluationcontrolmethodId = ?';
            $args[] = $filters->evaluationcontrolmethodId;
        }
        if ( strlen($filters->curricularComponentGroupId) > 0 )
        {
            $where .= ' AND D.curricularComponentGroupId = ?';
            $args[] = $filters->curricularComponentGroupId;
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = $filters->name .'%';
        }
         if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( (strlen($filters->unitId) > 0) )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( (strlen($filters->turnId) > 0) )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $filters->turnId;
        }
        if ( (strlen($filters->classId) > 0) )
        {
            $where .= ' AND B.classId = ?';
            $args[] = $filters->classId;
        }
        if ( (strlen($filters->periodId) > 0) )
        {
            $where .= ' AND A.periodId = ?';
            $args[] = $filters->periodId;
        }

       if ( strlen($where) > 0 )
        {
            $sql .= ' AND ' . substr($where, 4) . '
                   ORDER BY name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));

        }

        return $result;
    }




    /**
     * List all curricularComponentGroups.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @return an array containing the select results.
     *
     */
    function listCurricularComponentGroup()
    {

        $select = 'SELECT A.curricularComponentGroupId,
                          A.name,
                          A.shortName
                     FROM acdCurricularComponentGroup A
                 ORDER BY A.name';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($select,$args));

        return $result;
    }

    /**
     * Insert a new acdCurricularComponentGroup.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Object (curricular) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCurricularComponentGroup($data)
    {
        $db = $this->getDatabase();

        $insert = 'INSERT INTO acdCurricularComponentGroup
                                ( name,
                                shortName )
                                VALUES (?,?)';

        $args = array(  $data->name, 
                        $data->shortName);
        $result = $db->execute(SAGU::prepare($insert, $args));

        return $result;
    }

    /**
     * Update the specified curricularComponentGroup data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateCurricularComponentGroup($data)
    {
        $update = 'UPDATE acdCurricularComponentGroup
                      SET name      = ?,
                          shortName = ?
                    WHERE curricularComponentGroupId = ?';

        $db     = $this->getDatabase();

        $args   = array($data->name,
                        $data->shortName,
                        $data->curricularComponentGroupId,
                       );
        
        $sqls = SAGU::prepare($update, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete the specified curricularComponentGroup.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $curricularComponentGroupId (int): Identifier of the curricularComponentGroupId to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteCurricularComponentGroup($curricularComponentGroupId)
    {
        $delete = 'DELETE FROM acdCurricularComponentGroup
                    WHERE curricularComponentGroupId = ?';


        $db     = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete, $curricularComponentGroupId));

        return $result;
    }
}

?>
