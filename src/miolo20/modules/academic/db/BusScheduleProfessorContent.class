<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for Bus Schedule Professor Content table
 *
 * @author Arthur Lehdermann [arthur] [arthur@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 11/10/2010
 *
 * */

/**
 * Class to manipulate the acdscheduleprofessorcontent table
 * */
class BusinessAcademicBusScheduleProfessorContent extends sBusiness
{
    public function getScheduleProfessorContentObject($date, $timeId, $professorId, $scheduleId)
    {
        return SAGU::resultToObject($this->getScheduleProfessorContent($date, $timeId, $professorId, $scheduleId), array(
            'professorId',
            'visitingProfessorId',
            'description',
            'classOccurred',
            'isInternal',
            'realStartDate',
            'realEndDate',
            'visitingProfessorName',
            'substituteProfessorId',
            'curricularComponentCategoryId',
            'scheduleProfessorContentId'
        ));
    }

    /**
     * Get schedule professor content
     *
     * @param (string) $date
     * @param (int) $timeId
     * @param (int) $scheduleProfessorId
     * @return (string) $result: Return the description
     */
    public function getScheduleProfessorContent($date, $timeId, $professorId = null, $scheduleId)
    {
        $sql = 'SELECT B.professorId,
                       A.visitingProfessorId,
                       A.description,
                       A.classOccurred,
                       A.isInternal,
                       TO_CHAR(A.realStartDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       TO_CHAR(A.realEndDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                           C.name AS visitingProfessorName,
                       A.substituteProfessorId  ,
                       A.curricularComponentCategoryId,
                       A.scheduleProfessorContentId
                  FROM acdscheduleprofessorcontent A
            INNER JOIN acdscheduleProfessor B
                    ON (A.scheduleProfessorId = B.scheduleProfessorId)
             LEFT JOIN basPhysicalPerson C
                    ON (C.personId = A.visitingProfessorId)
                 WHERE B.scheduleId = ?
                   AND A.timeid = ?
                   AND A.date = ?';

        $args[] = $scheduleId;
        $args[] = $timeId;
        $args[] = SAGU::convertDateToDb($date);

        if ( strlen($professorId) > 0 )
        {
            $sql .= ' AND B.professorId = ? ';
            $args[] = $professorId;
        }
        
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result[0];
    }

    /**
     * Obtem o código do professor
     *
     * @param (string) $date
     * @param (int) $timeId
     * @param (int) $scheduleProfessorId
     * @return (string) $result: Return the description
     */
    public function getProfessorId($date, $timeId, $scheduleId)
    {
        $sql = 'SELECT A.professorid
                  FROM acdscheduleprofessor A
            INNER JOIN acdscheduleprofessorContent B
                    ON (A.scheduleprofessorId = B.scheduleProfessorId)
                 WHERE A.scheduleId = ?
                   AND B.timeid = ?
                   AND B.date = ?';

        $args[] = $scheduleId;
        $args[] = $timeId;
        $args[] = SAGU::convertDateToDb($date);

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }

    /**
     * Search a Schedule Professor Content
     *
     * @param $filters (Object)
     * @return array
     */
    public function searchScheduleProfessorContent($filters)
    {
        $sql = 'SELECT B.scheduleProfessorContentId,
                       B.scheduleProfessorId,
                       B.timeId,
                       B.date,
                       B.description,
                       B.visitingprofessorid
                  FROM acdscheduleprofessor A
            INNER JOIN acdscheduleprofessorContent B
                    ON (A.scheduleprofessorId = B.scheduleProfessorId)';

        if ( strlen($filters->scheduleProfessorContentId) > 0 )
        {
            $where .= ' AND B.scheduleProfessorContentId = ? ';
            $args[] = $filters->scheduleProfessorContentId;
        }

        if ( strlen($filters->scheduleProfessorId) > 0 )
        {
            $where .= ' AND B.scheduleProfessorId = ? ';
            $args[] = $filters->scheduleProfessorId;
        }

        if ( strlen($filters->visitingProfessorId) > 0 )
        {
            $where .= ' AND B.visitingProfessorId = ? ';
            $args[] = $filters->visitingProfessorId;
        }

        if ( strlen($filters->timeId) > 0 )
        {
            $where .= ' AND B.timeId = ? ';
            $args[] = $filters->timeId;
        }

        if ( strlen($filters->date) > 0 )
        {
            $where .= ' AND B.date = ? ';
            $args[] = SAGU::convertDateToDb($filters->date);
        }

        if ( strlen($filters->description) > 0 )
        {
            $where .= " AND B.description ILIKE ? ";
            $args[] = $filters->description . '%';
        }

        if ( strlen($filters->scheduleId) > 0 )
        {
            $where .= " AND A.scheduleId = ? ";
            $args[] = $filters->scheduleId;
        }
        
        if ( strlen($filters->professorId) > 0 )
        {
            $where .= " AND A.professorId = ? ";
            $args[] = $filters->professorId;
        }

        if ( $where != '' )
        {
            $sql .= '    WHERE ' . substr($where, 5);

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Save the schedule professor content
     *
     * @param (string) $date
     * @param (int) $timeId
     * @param (int) $scheduleProfessorId
     * @param (string) $description
     * @param (int) $visitingProfessorId
     * @return (boolean) $result: Return true for sucess or false for fail
     */
    public function saveScheduleProfessorContent($data)
    {
        $maskTimestamp = SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME');
        $sql = "INSERT INTO acdscheduleprofessorcontent
                            ( scheduleProfessorId,
                              timeId,
                              date,
                              description,
                              visitingProfessorId,
                              classoccurred,
                              isinternal,
                              realstartdate,
                              realenddate,
                              substituteProfessorId,
                              curricularcomponentcategoryid )
                     VALUES ( ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              TO_TIMESTAMP(?, '{$maskTimestamp}'),
                              TO_TIMESTAMP(?, '{$maskTimestamp}'),
                              ?,
                              ?)";

        $args[] = $data->scheduleProfessorId;
        $args[] = $data->timeId;
        $args[] = SAGU::convertDateToDb($data->date);
        $args[] = $data->description;
        $args[] = $data->visitingProfessorId;
        $args[] = $data->classOccurred;
        $args[] = $data->isInternal;
        $args[] = $data->realStartDate;
        $args[] = $data->realEndDate;
        $args[] = $data->substituteProfessorId;
        $args[] = $data->curricularComponentCategoryId;

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Edita o conteúdo programático de uma aula do professor.
     * Para o registro de frequências em tempo real.
     * 
     * @param stdClass $data
     * @return array
     */
    public function updateDescriptionScheduleProfessorContent($scheduleProfessorContentId, $description)
    {
        $sql = "UPDATE acdscheduleprofessorcontent
                   SET description = ?
                 WHERE scheduleProfessorContentId = ?";

        $args = array(
            $description,
            $scheduleProfessorContentId
        );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Delete schedule professor content
     *
     * @param (string) $date
     * @param (int) $timeId
     * @param (int) $scheduleProfessorId
     * @return (boolean) $result: Return true for sucess or false for fail
     */
    public function deleteScheduleProfessorContent($date, $timeId, $scheduleId)
    {
        $sql = 'DELETE FROM acdscheduleprofessorcontent
                      WHERE scheduleprofessorId IN ( SELECT scheduleProfessorId
                                                       FROM acdscheduleprofessor
                                                      WHERE scheduleId = ?)
                        AND timeid = ?
                        AND date = ?';

        $args[] = $scheduleId;
        $args[] = $timeId;
        $args[] = SAGU::convertDateToDb($date);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }
    
    public function deleteBySchedule($scheduleId)
    {
        $sql = 'DELETE FROM acdScheduleProfessorContent
                      WHERE scheduleProfessorId IN (
                        SELECT scheduleProfessorId
                          FROM acdScheduleProfessor
                         WHERE scheduleId = ? )';

        $args = array();
        $args[] = $scheduleId;

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
    public function deleteByScheduleProfessor($scheduleProfessorId)
    {
        $sql = 'DELETE FROM acdScheduleProfessorContent
                      WHERE scheduleProfessorId IN (
                        SELECT scheduleProfessorId
                          FROM acdScheduleProfessor
                         WHERE scheduleProfessorId = ? )';

        $args = array();
        $args[] = $scheduleProfessorId;

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }
}
?>
