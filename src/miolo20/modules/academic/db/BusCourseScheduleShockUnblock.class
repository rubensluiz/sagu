<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCourseScheduleShockUnblock table.
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * This class was created 19/12/2005
 *
 **/

class BusinessAcademicBusCourseScheduleShockUnblock extends sBusiness
{
    /**
     * Insert a new acdCourseScheduleShockUnblock.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Object (curricular) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCourseScheduleShockUnblock($data, $contractId)
    {
        $db     = $this->getDatabase();

            $sql = 'SELECT NEXTVAL(\'seq_curricularcomponentunblockid\')';
            $ret = $this->getDatabase()->query(SAGU::prepare($sql,null));
            $data->curricularComponentUnblockId = $ret[0][0];

            $sql = 'INSERT INTO acdCurricularComponentUnblock
                               (curricularComponentUnblockId,
                                learningPeriodId,
                                contractId,
                                curriculumId,
                                isScheduleShock)
                         VALUES (?,?,?,?,?)';
            $args = array(
                           $data->curricularComponentUnblockId,
                           $data->learningPeriodId,
                           $contractId, //$result[$i][0],
                           $data->curriculumId,
                           DB_TRUE
                         );

            $ret = $this->getDatabase()->execute(SAGU::prepare($sql, $args)); 

        return $ret;
    }

    function selectCourseContracts($data)
    {
        $db     = $this->getDatabase();

        $sql1 = 'SELECT AA.contractId,
                        AD.name,
                        max(AB.stateTime)
                   FROM unit_acdContract AA
             INNER JOIN acdMovementContract AB
                     ON (AA.contractId = AB.contractId)
             INNER JOIN acdStateContract AC
                     ON (AB.stateContractId = AC.stateContractId)
        INNER JOIN ONLY basPhysicalPerson AD
                     ON (AD.personId = AA.personId)
                  WHERE AA.courseId      = ?
                    AND AA.courseVersion = ?
                    AND AA.turnId        = ?
                    AND AA.unitId        = ?
               GROUP BY 1, 2
               ORDER BY AD.name ASC';

        $args1 = array (
                        $data->courseId,
                        $data->courseVersion,
                        $data->turnId,
                        $data->unitId
                      );

        $result1 = $db->query(SAGU::prepare($sql1, $args1));

        if ( count($result1) > 0 )
        {
            foreach ( $result1 as $value1 )
            {
                $sql2 = ' SELECT A.contractId,
                                 A.personId,
                                 B.name,
                                 D.isCloseContract
                            FROM unit_acdContract A
                 INNER JOIN ONLY basPhysicalPerson B
                              ON (A.personId = B.personId)
                      INNER JOIN acdMovementContract C
                              ON (C.contractId = A.contractId AND
                                  C.stateTime  = \''.$value1[2].'\')
                      INNER JOIN acdStateContract D
                              ON (D.stateContractId = C.stateContractId)
                           WHERE A.contractId  = \''.$value1[0].'\'
                             AND A.contractId NOT IN (SELECT BA.contractId
                                                        FROM acdCurricularComponentUnblock BA
                                                  INNER JOIN unit_acdcurriculum BB
                                                          ON (BB.curriculumId = BA.curriculumId)
                                                       WHERE BA.learningPeriodId = \''.$data->learningPeriodId.'\'
                                                         AND BA.isScheduleShock = \'t\'
                                                         AND BB.courseId      = \''.$data->courseId.'\' 
                                                         AND BB.courseVersion = \''.$data->courseVersion.'\'  
                                                         AND BB.unitId        = \''.$data->unitId.'\'
                                                         AND BB.turnId        = \''.$data->turnId.'\'
                                                         AND BB.curricularComponentId = \''.$data->curricularComponentId.'\' 
                                                         AND BB.curricularComponentVersion = \''.$data->curricularComponentVersion.'\')
                             AND A.contractId NOT IN ( SELECT CA.contractId
                                                         FROM unit_acdEnroll CA
                                                        WHERE CA.curriculumId = \''.$data->curriculumId.'\'
                                                          AND CA.statusId IN ('.SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC').', '.SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED').'))
                        ORDER BY B.name ASC';

                $result2 = $db->query($sql2);

                //Tenho que alimentar o vetor result com if, devido a poder
                //ter mais de um estado contratual para mesma data hora. Isso
                //por causa de eventuais importaçoes de dados
                $flagIsClosedContract = DB_FALSE;

                if ( count($result2) > 0 )
                {
                    foreach ( $result2 as $value2 )
                    {
                        if ( $value2[3] == DB_TRUE )
                        {
                            $flagIsClosedContract = DB_TRUE;
                            break;
                        }
                    }
                }
                else
                {
                    //Aqui, estar´a nulo a pesquisa, ou seja, o referido contrato
                    //ja tera um registro na tabela de desbloqueios, e nao pode ir 
                    //para o result3, por isso setamos esta flag como TRUE
                    $flagIsClosedContract = DB_TRUE;
                }

                if ( $flagIsClosedContract == DB_FALSE )
                {
                    $result3[] = $value2;
                }
            }
        }

        return $result3;
    }
}

?>
