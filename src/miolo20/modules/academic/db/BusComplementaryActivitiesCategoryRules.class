<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Class to manipulate the acdComplementaryActivities table data.
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Creation date 11/01/2007
 *
 **/

class BusinessAcademicBusComplementaryActivitiesCategoryRules extends sBusiness
{
   /**
    * Insert a new learning period
    * 
    * @param $data (object): acdPeriod object
    *
    * @return (boolean): True if succed otherwise fails
    *
    */
    function insertComplementaryActivitiesCategoryRules($data)
    {
        $sql = 'INSERT INTO acdComplementaryActivitiesCategoryRules
                            (curriculumId,
                             complementaryActivitiesCategoryId,
                             minimumHours,
                             maximumHours )
                     VALUES (?,?,?,?)';

        $args = array($data->curriculumId,
                      $data->complementaryActivitiesCategoryId,
                      $data->minimumHours,
                      $data->maximumHours);

        $db = $this->getDatabase();
        $result = $db->Execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
    * Obtain the specified learning period id data.
    * 
    * @param $data (object): acdPeriod object
    *
    * @return If the specified complementaryActivitiesId exists, returns an object (period) containing its data. 
    * Otherwise, returns null.
    *
    */
    function getComplementaryActivitiesCategoryRules($complementaryActivitiesCategoryRulesId)
    {
        $sql = 'SELECT A.complementaryActivitiesCategoryRulesId,
                       A.curriculumId,
                       A.complementaryActivitiesCategoryId,
                       A.minimumHours,
                       A.maximumHours,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdComplementaryActivitiesCategoryRules A  
                 WHERE A.complementaryActivitiesCategoryRulesId = ?';

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $complementaryActivitiesCategoryRulesId));

        $complementaryActivitiesCategoryRules = new AcdComplementaryActivitiesCategoryRules();

        list ( $complementaryActivitiesCategoryRules->complementaryActivitiesCategoryRulesId,
               $complementaryActivitiesCategoryRules->curriculumId,
               $complementaryActivitiesCategoryRules->complementaryActivitiesCategoryId,
               $complementaryActivitiesCategoryRules->minimumHours,
               $complementaryActivitiesCategoryRules->maximumHours,
               $complementaryActivitiesCategoryRules->userName,
               $complementaryActivitiesCategoryRules->dateTime,
               $complementaryActivitiesCategoryRules->ipAddress) = $result[0];

        return $complementaryActivitiesCategoryRules;
    }

    /**
     * Search for learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the syarch results.
     *
     */
    function searchComplementaryActivitiesCategoryRules($data)
    {
            $sql = '  SELECT A.complementaryActivitiesCategoryRulesId,
                             A.curriculumId,
                             A.complementaryActivitiesCategoryId,
                             C.description,
                             D.name as courseName,
                             E.name,
                             A.minimumHours,
                             A.maximumHours
                        FROM acdComplementaryActivitiesCategoryRules A
                  INNER JOIN unit_acdcurriculum B
                          ON (A.curriculumId = B.curriculumId)
                  INNER JOIN acdComplementaryActivitiesCategory C
                          ON (C.complementaryActivitiesCategoryId = A.complementaryActivitiesCategoryId)
                  INNER JOIN acdCourse D
                          ON (D.courseId = B.courseId)
                  INNER JOIN acdCurricularComponent E
                          ON (E.curricularComponentId      = B.curricularComponentId AND
                              E.curricularComponentVersion = B.curricularComponentVersion)';

        if ( strlen($data->courseId) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $data->courseId;
        }
        if ( strlen($data->courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $data->courseVersion;
        }
        if ( strlen($data->turnId) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $data->turnId;
        }
        if ( strlen($data->unitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $data->unitId;
        }
        if ( strlen($data->curricularComponentId) > 0 )
        {
            $where .= ' AND B.curricularComponentId = ?';
            $args[] = $data->curricularComponentId;
        }
        if ( strlen($data->minimumHours) > 0 )
        {
            $where .= ' AND A.minimumHours = ?';
            $args[] = $data->minimumHours;
        }
        if ( strlen($data->maximumHours) > 0 )
        {
            $where .= ' AND A.maximumHours = ?';
            $args[] = $data->maximumHours;
        }
        if ( strlen($data->complementaryActivitiesCategoryRulesId) > 0 )
        {
            $where .= ' AND A.complementaryActivitiesCategoryRulesId = ?';
            $args[] = $data->complementaryActivitiesCategoryRulesId;
        }
        if ( strlen($data->complementaryActivitiesCategoryId) > 0 )
        {
            $where .= ' AND A.complementaryActivitiesCategoryId = ?';
            $args[] = $data->complementaryActivitiesCategoryId;
        }
        if ( strlen($data->curriculumId) > 0 )
        {
            $where .= ' AND B.curriculumId = ?';
            $args[] = $data->curriculumId;
        }

        if ( $where != '' )
        {
            $sql     .= '    WHERE ' . substr($where, 4) .
                        ' ORDER BY D.name, C.description';
            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        return $result;
    }

    /**
     * Update the specified learning period data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the learning period and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateComplementaryActivitiesCategoryRules($data)
    {
        $sql = 'UPDATE acdComplementaryActivitiesCategoryRules 
                       SET curriculumId                              = ?,
                           complementaryActivitiesCategoryId         = ?,
                           minimumHours                              = ?,
                           maximumHours                              = ?
                     WHERE complementaryActivitiesCategoryRulesId    = ?  ';

        $args = array($data->curriculumId,
                      $data->complementaryActivitiesCategoryId,
                      $data->minimumHours,
                      $data->maximumHours,
                      $data->complementaryActivitiesCategoryRulesId );

        $db = $this->getDatabase();

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete the specified learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $complementaryActivitiesId (int): Identifier of the learning period to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteComplementaryActivitiesCategoryRules($complementaryActivitiesCategoryRulesId)
    {
        $delete = 'DELETE FROM acdComplementaryActivitiesCategoryRules
                    WHERE complementaryActivitiesCategoryRulesId = ?';

        $db     = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete, $complementaryActivitiesCategoryRulesId));

        return $result;
    }
}
  
?>
