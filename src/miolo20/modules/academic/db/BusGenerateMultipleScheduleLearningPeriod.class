<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 27/01/2006
 *
 **/

/**
 * Class to manipulate the acdgenerateMultipleScheduleLearningPeriod table
 **/
class BusinessAcademicBusGenerateMultipleScheduleLearningPeriod extends sBusiness
{
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getLearningPeriod($courseId, $courseVersion, $turnId, $unitId, $periodId)
    {
        $sql = 'SELECT B.learningPeriodId
                 FROM unit_acdcourseoccurrence A
                 INNER JOIN unit_acdlearningperiod B
                    ON (A.courseId = B.courseId
                        AND A.courseVersion = B.courseVersion
                        AND A.unitId = B.unitId
                        AND A.turnId = B.turnId) ';

        if ( strlen($courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $courseId;
        }

        if ( strlen($courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $courseVersion;
        }

        if ( strlen($turnId) > 0 )
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $turnId;
        }

        if ( strlen($unitId) > 0 )
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $unitId;
        }

        if ( strlen($periodId) > 0 )
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $periodId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) ;
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result[0][0];
    }
}

?>
