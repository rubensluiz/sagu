<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * Este arquivo controla a conexão e ações para a tabela acdConceptGroup
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 *
 * @since
 * Class created on 02/03/2011
 *
 **/

/**
 * Class to manipulate the acdConceptGroup table
 **/
class BusinessAcademicBusConceptGroup extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $conceptGroupId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getConceptGroup($conceptGroupId)
    {
        $sql = 'SELECT conceptGroupId,
                       description,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM acdConceptGroup
                 WHERE conceptGroupId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($conceptGroupId) ));

        $conceptGroup = new acdConceptGroup();
        list ( $conceptGroup->conceptGroupId,
               $conceptGroup->description,
               $conceptGroup->userName,
               $conceptGroup->dateTime,
               $conceptGroup->ipAddress ) = $result[0];

        return $conceptGroup;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchConceptGroup($filters)
    {
        $sql= 'SELECT conceptGroupId,
                      description
                 FROM acdConceptGroup ';

        if ( strlen($filters->conceptGroupId) > 0 )
        {
            $where .= ' AND conceptGroupId = ? ';
            $args[] = $filters->conceptGroupId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY description';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return Id if succed, otherwise False
     *
     **/
    public function insertConceptGroup($data)
    {
        $sql = 'INSERT INTO acdConceptGroup
                            (description)
                     VALUES (?)';

        $args = array( $data->description );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            unset($sql);
            $sql = 'SELECT last_value FROM acdconceptgroup_conceptgroupid_seq';
            $return = $this->getDatabase()->query(SAGU::prepare($sql, null));

            return $return[0][0];
        }

        return $return;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateConceptGroup($data)
    {
        $sql = 'UPDATE acdConceptGroup
                   SET description = ?
                 WHERE conceptGroupId = ?';

        $args = array( $data->description,
                       $data->conceptGroupId );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $conceptGroupId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteConceptGroup($conceptGroupId)
    {
        //Deleta todos os conceitos do grupo
        $pk = is_array($conceptGroupId) ? $conceptGroupId : array($conceptGroupId);

        $sql = 'DELETE FROM acdConcept
                      WHERE conceptGroupId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $pk));

        if ( $result )
        {
            $sql = 'DELETE FROM acdConceptGroup
                          WHERE conceptGroupId = ?';

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $pk));
        }
        
        return $result;
    }
}
?>
