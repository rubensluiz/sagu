<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for repetition listing
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 * 
 * @since
 * Class created on 14/09/2006
 *
 **/

/**
 * Class that provides methods for repetition listing
 **/
class BusinessAcademicBusRepetitionList extends sBusiness
{
    public function getRepetitionList($periodId, $formationLevelId, $type)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $db = $this->getDatabase();

        //SQLs da lista foram alterados, ticket #34714
        if ($type == 1)
        {
            $sql = 'SELECT A.contractId,
                           G.personId,
                           G.name as personName,
                           D.curricularComponentId,
                           D.curricularComponentVersion,
                           D.name as curricularComponentName,
                           D.academicCredits,
                           E.periodId,
                           A.finalNote
                      FROM unit_acdEnroll A
                INNER JOIN unit_acdGroup B
                        ON (B.groupId = A.groupId)
                 LEFT JOIN unit_acdcurriculum C
                        ON (C.curriculumId = B.curriculumId)
                INNER JOIN acdCurricularComponent D
                        ON (D.curricularComponentId = C.curricularComponentId AND
                            D.curricularComponentVersion = C.curricularComponentVersion)
                INNER JOIN unit_acdlearningperiod E
                        ON (E.learningPeriodId = B.learningPeriodId)
                INNER JOIN unit_acdContract F
                        ON (F.contractId = A.contractId)
                INNER JOIN ONLY basPhysicalPersonStudent G
                        ON (G.personId = F.personId)
                 LEFT JOIN acdCourse H
                        ON (H.courseId = F.courseId)
                INNER JOIN (SELECT DISTINCT A.contractId,
				   C.periodId
                              FROM unit_acdEnroll A
                        INNER JOIN unit_acdGroup B
                                ON (B.groupId = A.groupId)
                        INNER JOIN unit_acdlearningperiod C
                                ON (C.learningPeriodId = B.learningPeriodId)) X
                        ON X.periodId = E.periodId
                       AND X.contractId = A.contractId
                     WHERE E.periodId = ?
                       AND A.statusId IN ( getParameter(\'ACADEMIC\', \'ENROLL_STATUS_DISAPPROVED\')::INT )
                  ORDER BY personName, curricularComponentName, E.periodId';

            $args = array($periodId);

            $result = $db->query(SAGU::prepare($sql, $args));
        }
        elseif ($type == 2)
        {
            $sql = 'SELECT F.courseId,
                           F.courseVersion,
                           H.shortName as courseShortName,
                           F.turnId,
                           getTurnDescription(F.turnId) as turnDescription,
                           F.unitId,
                           getUnitDescription(F.unitId) as unitDescription,
                           A.contractId,
                           G.personId,
                           G.name as personName,
                           D.curricularComponentId,
                           D.curricularComponentVersion,
                           D.name as curricularComponentName,
                           D.academicCredits,
                           E.periodId,
                           A.finalNote
                      FROM unit_acdEnroll A
                INNER JOIN unit_acdGroup B
                        ON (B.groupId = A.groupId)
                INNER JOIN unit_acdcurriculum C
                        ON (C.curriculumId = B.curriculumId)
                INNER JOIN acdCurricularComponent D
                        ON (D.curricularComponentId = C.curricularComponentId )
                INNER JOIN unit_acdlearningperiod E
                        ON (E.learningPeriodId = B.learningPeriodId)
                INNER JOIN unit_acdContract F
                        ON (F.contractId = A.contractId)
                INNER JOIN ONLY basPhysicalPersonStudent G
                        ON (G.personId = F.personId)
                INNER JOIN acdCourse H
                        ON (H.courseId = F.courseId)
                INNER JOIN (SELECT DISTINCT A.contractId,
				   C.periodId
                              FROM unit_acdEnroll A
                        INNER JOIN unit_acdGroup B
                                ON (B.groupId = A.groupId)
                        INNER JOIN unit_acdlearningperiod C
                                ON (C.learningPeriodId = B.learningPeriodId)) X
                        ON X.periodId = E.periodId
                       AND X.contractId = A.contractId
                     WHERE E.periodId = ?
                       AND A.statusId IN ( getParameter(\'ACADEMIC\', \'ENROLL_STATUS_DISAPPROVED\')::INT )
                  ORDER BY F.courseId, D.curricularComponentId, personName, E.periodId';

            $args = array($periodId);

            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

}

?>
