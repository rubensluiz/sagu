<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * Handles external exploitation data
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 23/09/2005
 *
 **/
$MIOLO = MIOLO::getInstance();
$MIOLO->uses('db/BusExploitation.class', 'academic');
/**
 * Class to manipulate the external exploitation data of acdExploitation table
 **/
class BusinessAcademicBusExternalExploitation extends BusinessAcademicBusExploitation
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct();
    }
    
    /**
     * Gets an object that represents the external exploitation data
     *
     * @param $exploitationId: Primary key of the desired register
     *
     * @return (object): An object containing the data
     **/
    public function getExternalExploitation($exploitationId)
    {
        $sql = 'SELECT exploitationId,
                       enrollId,
                       exploitationType,
                       exploitationNumberHours,
                       exploitationCredits,
                       institutionId,
                       courseName,
                       curricularComponentName,
                       finalNote,
                       numberHours,
                       credits,
                       period,
                       electiveCurriculumId
                  FROM unit_acdExploitation
                 WHERE exploitationId = ?';
                 
        $args = array($exploitationId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        list ($exploitationData->exploitationId,
              $exploitationData->enrollId,
              $exploitationData->exploitationType,
              $exploitationData->exploitationNumberHours,
              $exploitationData->exploitationCredits,
              $exploitationData->institutionId,
              $exploitationData->courseName,
              $exploitationData->curricularComponentName,
              $exploitationData->finalNote,
              $exploitationData->numberHours,
              $exploitationData->credits,
              $exploitationData->period,
              $exploitationData->electiveCurriculumId ) = $result[0];
              
        return $exploitationData;
    }
    
    /**
     * Searches for external exploitation data on acdExploitation table
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function seachExternalExploitation($filters)
    {
        $sql = 'SELECT A.exploitationId,
                       A.exploitationType,
                       A.enrollId,
                       D.curricularComponentId || \'/\' || D.curricularComponentVersion,
                       D.name,
                       A.institutionId,
                       E.name,
                       A.courseName,
                       A.curricularComponentName,
                       A.finalNote,
                       A.numberHours,
                       A.credits,
                       A.period,
                       A.exploitationNumberHours,
                       A.exploitationCredits,
                       F.periodId,
                       A.electiveCurriculumId
                  FROM unit_acdExploitation A
            INNER JOIN unit_acdEnroll B
                    ON (B.enrollId = A.enrollId)
            INNER JOIN unit_acdcurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = C.curricularComponentId AND
                        D.curricularComponentVersion = C.curricularComponentVersion)
            INNER JOIN basLegalPerson E
                    ON (E.personId = A.institutionId)
            INNER JOIN unit_acdlearningperiod F
                    ON (F.learningPeriodId = B.learningPeriodId)';
                    
        unset($where);
        if (strlen($filters->exploitationId) > 0)
        {
            $where .= ' AND A.exploitationId = ?';
            $args[] = $filters->exploitationId;
        }
        if (strlen($filters->exploitationType) > 0)
        {
            $where .= ' AND A.exploitationType = ?';
            $args[] = $filters->exploitationType;
        }
        if (strlen($filters->enrollId) > 0)
        {
            $where .= ' AND A.enrollId = ?';
            $args[] = $filters->enrollId;
        }
        if (strlen($filters->curricularComponentId) > 0)
        {
            $where .= ' AND D.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if (strlen($filters->curricularComponentName) > 0)
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curricularComponentName;
        }
        if (strlen($filters->periodId) > 0)
        {
            $where .= ' AND F.periodId = ?';
            $args[] = $filters->periodId;
        }
        if (strlen($filters->contractId) > 0)
        {
            $where .= ' AND B.contractId = ?';
            $args[] = $filters->contractId;
        }
        
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.period, D.name';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }
    }
    
    /**
     * Inserts a external exploitation register on the exploitations table
     *
     * @param $data (object): Object with the data to be inserted
     *
     * @return True if succed, otherwise False
     **/
    public function insertExternalExploitation($data)
    {
        /**
         * Atributos do objeto $data
         * $data->contractId: código do contrato
         * $data->curriculumId: código da disciplina na matriz curricular
         * $data->institutionId: código da instituição onde a disciplina aproveitada foi cursada
         * $data->courseName: curso da disciplina aproveitada
         * $data->curricularComponentName: disciplina aproveitada
         * $data->finalNote: grau obtido na disciplina aproveitada
         * $data->numberHours: carga horária total da disciplina aproveitada
         * $data->credits: número de créditos total da disciplina aproveitada
         * $data->period: período em que a disciplina aproveitada foi cursada
         * $data->exploitationNumberHours: número de horas aproveitadas
         * $data->exploitationCredits: número de créditos aproveitados
         * $data->learningPeriodId: código do período letivo do aproveitamento
         **/
        
        $data->exploitationType = 'E';
        $data->enrollId         = $this->getOrInsertEnrollForExploitation($data->contractId, $data->curriculumId, $data->learningPeriodId);
        
        $sql = 'INSERT INTO acdExploitation
                           (enrollId,
                            exploitationType,
                            exploitationNumberHours,
                            exploitationCredits,
                            institutionId,
                            courseName,
                            curricularComponentName,
                            finalNote,
                            numberHours,
                            credits,
                            period,
                            electiveCurriculumId)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
                     
        $args = array($data->enrollId,
                      $data->exploitationType,
                      $data->exploitationNumberHours,
                      $data->exploitationCredits,
                      $data->institutionId,
                      $data->courseName,
                      $data->curricularComponentName,
                      $data->finalNote,
                      $data->numberHours,
                      $data->credits,
                      $data->period,
                      $data->electiveCurriculumId);
        
        $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        $data->exploitationId = SDatabase::getLastInsertId('AcdExploitation');
        
        return $data;
    }
    
    /**
     * Updates a external exploitation register of the exploitations table
     *
     * @param $data (object): Object with the data to be updated
     *
     * @return True if succed, otherwise False
     **/
    public function updateExternalExploitation($data)
    {
        /**
         * Atributos do objeto $data
         * $data->exploitationId: código do aproveitamento
         * $data->exploitationNumberHours: número de horas aproveitadas
         * $data->exploitationCredits: número de créditos aproveitados
         * $data->institutionId: código da instituição onde a disciplina aproveitada foi cursada
         * $data->courseName: curso da disciplina aproveitada
         * $data->curricularComponentName: disciplina aproveitada
         * $data->finalNote: grau obtido na disciplina aproveitada
         * $data->numberHours: carga horária total da disciplina aproveitada
         * $data->credits: número de créditos total da disciplina aproveitada
         * $data->period: período em que a disciplina aproveitada foi cursada
         **/
        
        $sql = 'UPDATE acdExploitation
                   SET exploitationNumberHours = ?,
                       exploitationCredits = ?,
                       institutionId = ?,
                       courseName = ?,
                       curricularComponentName = ?,
                       finalNote = ?,
                       numberHours = ?,
                       credits = ?,
                       period = ?,
                       electiveCurriculumId = ?
                 WHERE exploitationId = ?';
                 
        $args = array($data->exploitationNumberHours,
                      $data->exploitationCredits,
                      $data->institutionId,
                      $data->courseName,
                      $data->curricularComponentName,
                      $data->finalNote,
                      $data->numberHours,
                      $data->credits,
                      $data->period,
                      $data->electiveCurriculumId,
                      $data->exploitationId);
                      
        return $this->getDatabase()->execute(SAGU::prepare($sql, $args));
    }
    
    /**
     * Searches for curriculums that can have exploitations registered (by contract)
     *
     * @param $contractId: Contract code
     *
     * @return (array): Array with the search results
     **/
    public function searchContractExploitableCurriculum($contractId)
    {
        $sql = 'SELECT A.curriculumId,
                       A.curricularComponentId || \'/\' || A.curricularComponentVersion,
                       B.name AS curricularComponentName,
                       B.academicNumberHours,
                       (SELECT CASE WHEN 
                                            sum(YY.exploitationNumberHours) > 0
                                    THEN
                                            sum(YY.exploitationNumberHours)
                                    ELSE
                                            0
                                    END
                          FROM unit_acdExploitation YY
                    INNER JOIN unit_acdEnroll ZZ
                            ON (ZZ.enrollId = YY.enrollId)
                         WHERE ZZ.contractId = C.contractId
                           AND ZZ.curriculumId = A.curriculumId) AS exploitedNumberHours,
                       A.semester
                  FROM unit_acdcurriculum A
            INNER JOIN acdCurricularComponent B
                    ON (B.curricularComponentId = A.curricularComponentId AND
                        B.curricularComponentVersion = A.curricularComponentVersion)
            INNER JOIN unit_acdContract C
                    ON (C.courseId = A.courseId AND
                        C.courseVersion = A.courseVersion AND
                        C.turnId = A.turnId AND
                        C.unitId = A.unitId)
                 WHERE C.contractId = ?
                   AND ( A.curriculumId NOT IN ( SELECT AA.curriculumid
                                                   FROM unit_acdcurriculum AA
					     INNER JOIN unit_acdEnroll BB
					             ON (AA.curriculumid = BB.curriculumid)
					          WHERE (AA.courseId,AA.courseVersion,AA.turnId,AA.unitId) = (C.courseId,C.courseVersion,C.turnId,C.unitId)
					            AND BB.statusId IN ('.SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC').')
					            AND BB.contractId = C.contractId) ';
                   
        //verifica carga horária - aproveitamentos
        $sql .= 'OR B.academicNumberHours > (SELECT CASE WHEN 
                                                           sum(XY.exploitationNumberHours) > 0
                                                           THEN
                                                           sum(XY.exploitationNumberHours)
                                                           ELSE
                                                           B.academicNumberHours
                                                           END
                                                      FROM unit_acdExploitation XY
                                                INNER JOIN unit_acdEnroll XZ
                                                        ON (XZ.enrollId = XY.enrollId)
                                                     WHERE XZ.contractId = C.contractId
                                                       AND XZ.curriculumId = A.curriculumId) ';
                                                     
        $sql .= ') ';//fecha o parenteses antes de D.statusId NOT IN...
        
        //verifica concorrências
        $sql .= ' AND A.curriculumId NOT IN (SELECT CD.curriculumId 
                                                FROM unit_acdcurriculum CD 
                                               WHERE CD.courseId = A.courseId
                                                 AND (CD.curriculumId IN 
                                                          (SELECT CR.curriculumInId 
                                                             FROM unit_acdCurriculumConcurrence CR 
                                                            WHERE CR.curriculumOutId IN (
                                                                     SELECT CE.curriculumId 
                                                                       FROM unit_acdEnroll CE 
                                                                      WHERE CE.contractId = C.contractId
                                                                        AND CE.statusId IN ('.SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC').')) ';
        $sql .= ' ) '; //fecha o parentes antes de CD.curriculumId IN
        
        $sql .= 'OR CD.curriculumId IN (SELECT CS.curriculumOutId 
                                          FROM unit_acdCurriculumConcurrence CS 
                                         WHERE CS.curriculumInId IN (
                                                               SELECT CF.curriculumId 
                                                                 FROM unit_acdEnroll CF
                                                                WHERE CF.contractId = C.contractId
                                                                  AND CF.statusId IN ('.SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC').'))'; //fim da verificação de concorrências
                                                                  
        $sql .= ' ) ';//fecha o parenteses apos OR CD.curriculumId IN
        
        $sql .= ' ) ';//fecha o parenteses apos AND (CD.curriculumId IN
        
        $sql .= ' ) ';//fecha o parentes apos AND A.curriculumId NOT IN
        
        $sql .= ' AND A.curriculumTypeId NOT IN ('. SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_OPTATIVE') .', ' .  SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY') . ',' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_PROFICIENCY') . ') ';
        
        $args = array($contractId);

        return $this->getDatabase()->query(SAGU::prepare($sql, $args));
    }
}

?>
