<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This file handles the connection and actions for acdCurriculum table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 05/09/2006
 *
 **/

/**
 * Class to manipulate the acdCurriculum table
 **/
class BusinessAcademicBusSemesterSchedule extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $curriculumId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSemesterSchedule($filter)
    {
        $sql = 'SELECT DISTINCT A.groupId,
                       D.name as curricularComponentName,
                       B.courseId,
                       B.courseVersion,
                       E.name as courseName,
                       F.description as courseTurnDescription,
                       G.description as courseUnitDescription,
                       H.unitId as unitFromGroupLesson,
                       J.building,
                       J.room,
                       J.description,
                       N.name as className
                  FROM unit_acdGroup A
            INNER JOIN unit_acdlearningperiod B
                    ON (A.learningPeriodId = B.learningPeriodId)
            INNER JOIN unit_acdcurriculum C
                    ON (C.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = C.curricularComponentId)
            INNER JOIN acdCourse E
                    ON (E.courseId = B.courseId)
            INNER JOIN basTurn F
                    ON (F.turnId = B.turnId)
            INNER JOIN basUnit G
                    ON (G.unitId = B.unitId)
            INNER JOIN acdSchedule H
                    ON (H.groupId = A.groupId)
             LEFT JOIN insPhysicalResource J
                    ON (J.physicalResourceId      = H.physicalResourceId AND
                        J.physicalResourceVersion = H.physicalResourceVersion)
             LEFT JOIN acdScheduleProfessor K
                    ON (K.scheduleId = H.scheduleId)
        LEFT JOIN ONLY basPhysicalPerson L
                    ON (L.personId = K.professorId)
             LEFT JOIN unit_acdclass N 
                    ON (N.classId = A.classId)
                 WHERE A.isCancellation = false
                   AND B.periodId = ?
                   AND E.formationLevelId = ? ';

        $args[] = $filter->periodId;
        $args[] = $filter->formationLevelId;
        
        if ( strlen($filter->courseId) > 0 )
        {
            $sql .= 'AND B.courseId = ? ';
            $args[] = $filter->courseId;
        }
        
        if ( strlen($filter->courseVersion) > 0 )
        {
            $sql .= 'AND B.courseVersion = ? ';
            $args[] = $filter->courseVersion;
        }

        if ( strlen($filter->professorId) > 0 )
        {
            $sql .= 'AND K.professorId = ? ';
            $args[] = $filter->professorId;
        }
        
        $sql .= ' ORDER BY courseTurnDescription,
                              courseUnitDescription, 
                           courseName,
                           curricularComponentName';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result; 
    }
}

?>
