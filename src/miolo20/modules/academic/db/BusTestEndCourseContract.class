<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdTestEndCourseContract table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 09/01/2006
 *
 **/

/**
 * Class to manipulate the acdTestEndCourseContract table
 **/
class BusinessAcademicBusTestEndCourseContract extends sBusiness
{

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listTestEndCourseContract()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $testEndCourseContractId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getTestEndCourseContract($testEndCourseTypeId,$contractId,$testEndCourseDate)
    {
        $sql = 'SELECT testEndCourseTypeId,
                       contractId,
                       TO_CHAR(testEndCourseDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       excused,
                       isPresent,
                       mensagemDeAvaliacaoDosAlunosId,
                       notaDoAluno,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM acdTestEndCourseContract
                 WHERE testEndCourseTypeId = ?
                   AND contractId = ?
                   AND testEndCourseDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';

        $db     = $this->getDatabase();
        
        $args = array($testEndCourseTypeId,
                        $contractId,
                        $testEndCourseDate);

        $result = $db->query(SAGU::prepare($sql, $args));

        $testEndCourseContract = new acdTestEndCourseContract();

        list ( $testEndCourseContract->testEndCourseTypeId,
               $testEndCourseContract->contractId,
               $testEndCourseContract->testEndCourseDate,
               $testEndCourseContract->excused,
               $testEndCourseContract->isPresent,
               $testEndCourseContract->mensagemDeAvaliacaoDosAlunosId,
               $testEndCourseContract->notaDoAluno,
               $testEndCourseContract->userName,
               $testEndCourseContract->dateTime,
               $testEndCourseContract->ipAddress) = $result[0];

        return $testEndCourseContract; 
    }

        /**
     * Return a specific record from the database
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getTestEndCourse($contractId)
    {
        $sql = 'SELECT A.testEndCourseTypeId,
                       A.contractId,
                       B.description,
                       excused,
                       isPresent,
                       TO_CHAR(A.testEndCourseDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       A.mensagemDeAvaliacaoDosAlunosId,
                       A.notaDoAluno
                  FROM acdTestEndCourseContract A
            INNER JOIN acdTestEndCourseType B
                    ON ( A.testEndCourseTypeId = B.testEndCourseTypeId )
                 WHERE contractId = ?';

        $db     = $this->getDatabase();
        
        $args = array( $contractId );

        $result = $db->query(SAGU::prepare($sql, $args));

        $testEndCourseContract = new acdTestEndCourseContract();

        list ( $testEndCourseContract->testEndCourseTypeId,
               $testEndCourseContract->contractId,
               $testEndCourseContract->description,
               $testEndCourseContract->excused,
               $testEndCourseContract->isPresent,
               $testEndCourseContract->examDate,
               $testEndCourseContract->mensagemDeAvaliacaoDosAlunosId,
               $testEndCourseContract->notaDoAluno) = $result[0];

        return $testEndCourseContract; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchTestEndCourseContract($filters)
    {
        $sql = 'SELECT A.testEndCourseTypeId,
                        B.description,
                        A.contractId,
                        C.personId,
                        D.name,
                        TO_CHAR(A.testEndCourseDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                        A.excused,
                        A.isPresent,
                        A.mensagemDeAvaliacaoDosAlunosId::TEXT ||\' - \'|| E.mensagem,
                        A.notaDoAluno
                 FROM acdTestEndCourseContract A
                 INNER JOIN acdTestEndCourseType B
                     ON (A.testEndCourseTypeId = B.testEndCourseTypeId)
                 INNER JOIN unit_acdContract C
                     ON (A.contractId = C.contractId)
                 INNER JOIN ONLY basPhysicalPerson D
                     ON (C.personId = D.personId)
                 LEFT JOIN acdMensagemDeAvaliacaoDosAlunos E
                     ON (A.mensagemDeAvaliacaoDosAlunosId = E.mensagemDeAvaliacaoDosAlunosId)';

        if ( strlen($filters->testEndCourseTypeId) > 0 )
        {
            $where .= ' AND A.testEndCourseTypeId = ?';
            $args[] = $filters->testEndCourseTypeId;
        }
        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $filters->contractId;
        }
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND C.personId = ?';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->testEndCourseDate) > 0 )
        {
            $where .= ' AND A.testEndCourseDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->testEndCourseDate;
        }
        if ( strlen($filters->excused) > 0 )
        {
            $where .= ' AND A.excused = ?';
            $args[] = $filters->excused;
        }
        if ( strlen($filters->isPresent) > 0 )
        {
            $where .= ' AND A.isPresent = ?';
            $args[] = $filters->isPresent;
        }
        if (strlen ($filters->mensagemDeAvaliacaoDosAlunosId) > 0)
        {
            $where .= ' AND A.mensagemDeAvaliacaoDosAlunosId = ? ';
            $args[] = $filters->mensagemDeAvaliacaoDosAlunosId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY description';
        }
        
        $result = SDatabase::query($sql, $args, true, $filters);
        
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertTestEndCourseContract($data)
    {
        $sql = 'INSERT INTO acdTestEndCourseContract
                            (testEndCourseTypeId,
                             contractId,
                             testEndCourseDate,
                             excused,
                             isPresent,
                             mensagemDeAvaliacaoDosAlunosId,
                             notaDoAluno)
                     VALUES (?,?,TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),?,?,?,?)';
                     
        $args = array( $data->testEndCourseTypeId,
                         $data->contractId,
                         $data->testEndCourseDate,
                         $data->excused,
                         $data->isPresent,
                         $data->mensagemDeAvaliacaoDosAlunosId,
                         $data->notaDoAluno);

        $db     = $this->getDatabase();

        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateTestEndCourseContract($data)
    {
        $sql = 'UPDATE acdTestEndCourseContract
                   SET excused = ?,
                       isPresent = ?,
                       mensagemDeAvaliacaoDosAlunosId = ?,
                       notaDoAluno = ?
                 WHERE testEndCourseTypeId  = ?
                   AND contractId = ?
                   AND testEndCourseDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';

        $args = array( $data->excused,
                         $data->isPresent,
                         $data->mensagemDeAvaliacaoDosAlunosId,
                         $data->notaDoAluno,
                         $data->testEndCourseTypeId,
                         $data->contractId,
                         $data->testEndCourseDate);


        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $testEndCourseContractId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteTestEndCourseContract($testEndCourseTypeId,$contractId,$testEndCourseDate)
    {
        // Estava vindo como array de valores, provavelmente do SManagementForm, coloquei o is_array() para nao impactar e funcionar das duas formas o delete
        if ( is_array($testEndCourseTypeId) )
        {
            list($testEndCourseTypeId,$contractId,$testEndCourseDate) = $testEndCourseTypeId;
        }
        
        $sql = 'DELETE FROM acdTestEndCourseContract
                      WHERE testEndCourseTypeId = ?
                        AND contractId = ?
                        AND testEndCourseDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
                        
        $args = array($testEndCourseTypeId,
                        $contractId,
                        $testEndCourseDate);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

}

?>
