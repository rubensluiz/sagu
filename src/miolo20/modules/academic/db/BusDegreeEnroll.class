<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdDegree table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/08/2006
 *
 */

/**
 * Class to manipulate the acdDegree table
 */
class BusinessAcademicBusDegreeEnroll extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @return (array): Return an array with the entire table
     */
    public function listDegree()
    {
        return 'Not implemented';
    }

    /**
     * Return a specific record from the database
     *
     * @param $degreeId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     */
    public function getDegreeEnroll($degreeEnrollId)
    {
        $sql = 'SELECT A.degreeEnrollId,
                       A.degreeId,
                       A.enrollId,
                       A.note,
                       A.concept,
                       A.description,
                       TO_CHAR(A.recordDate,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdDegreeEnroll A
                 WHERE A.degreeEnrollId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($degreeEnrollId)));

        $degreeEnroll = new AcdDegreeEnroll();

        list ( $degreeEnroll->degreeEnrollId,
               $degreeEnroll->degreeId,
               $degreeEnroll->enrollId,
               $degreeEnroll->note,
               $degreeEnroll->concept,
               $degreeEnroll->description,
               $degreeEnroll->recordDate,
               $degreeEnroll->userName,
               $degreeEnroll->dateTime,
               $degreeEnroll->ipAddress ) = $result[0];

        return $degreeEnroll; 
    }

    public function deleteDegreeEnroll($degreeEnrollId)
    {
        $sql = 'DELETE FROM acdDegreeEnroll
                      WHERE degreeenrollid = ?';

        $args[] = $degreeEnrollId;

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }
    
    public function deleteFromEnrollId($enrollId)
    {
        $sql = 'DELETE FROM acdDegreeEnroll
                      WHERE enrollid = ?';

        $args[] = $enrollId;

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * @return AcdDegreeEnroll
     */
    public function getByEnrollAndDegreeLast($enrollId, $degreeId)
    {
        $filters = new stdClass();
        $filters->enrollId = $enrollId;
        $filters->degreeId = $degreeId;
        $filters->orderByDateDesc = true;

        $rows = $this->searchDegreeEnroll($filters);
        $row = null;
        $id = $rows[0][0];
        
        if ( strlen($id) > 0 )
        {
            $row = $this->getDegreeEnroll($id);
        }
        
        return $row;
    }

    /**
     * Function to search Degree Enroll
     * 
     * @param $filters
     */
    public function searchDegreeEnroll($filters)
    {
        $sql = 'SELECT A.degreeEnrollId,
                       A.degreeId,
                       A.enrollId,
                       A.note,
                       A.concept,
                       A.description,
                       TO_CHAR(A.recordDate,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdDegreeEnroll A';

        if ( strlen($filters->degreeEnrollId) > 0 )
        {
            $where .= ' AND A.degreeEnrollId = ? ';
            $args[] = $filters->degreeEnrollId;
        }
        
        if ( strlen($filters->degreeId) > 0 )
        {
            $where .= ' AND A.degreeId = ? ';
            $args[] = $filters->degreeId;
        }

        if ( strlen($filters->enrollId) > 0 )
        {
            $where .= ' AND A.enrollId = ? ';
            $args[] = $filters->enrollId;
        }
        
        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where,5);

            if ( $filters->orderByDateDesc == true )
            {
                $sql .= ' ORDER BY A.recordDate DESC ';
            }
            
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     */
    public function insertDegreeEnroll($data)
    {
        $sql = 'INSERT INTO acdDegreeEnroll
                            ( degreeId,
                              enrollId,
                              note,
                              concept,
                              description,
                              recordDate
                            )
                     VALUES ( ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                             )';

        $args = array( $data->degreeId,
                       $data->enrollId,
                       $data->note,
                       $data->concept,
                       $data->description,
                       $data->recordDate );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateDegreeEnroll($data, $concept = false)
    {
        if ($concept)
        {
            $field = 'concept';
        }
        else
        {
            $field = 'note';
        }
        
        $sql = "UPDATE acdDegreeEnroll
                   SET degreeId = ?,
                       enrollId = ?,
                       ".$field." = ?,
                       description = ?,
                       recordDate = TO_TIMESTAMP(?, '" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "')
                 WHERE degreeEnrollId = ?";

        $args = array ( $data->degreeId,
                        $data->enrollId,
                        ( $concept ? $data->concept : $data->note ),
                        $data->description,
                        $data->recordDate,
                        $data->degreeEnrollId );

        $db = $this->getDatabase();
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Function that insert or update data from a specific record
     *
     * @param $degreeEnroll (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function insertOrUpdateDegreeEnroll($data, $useConcept = false)
    {
        $data->degreeEnrollId = $this->checkDegreeEnroll($data->enrollId, $data->degreeId);

        if ( strlen($data->degreeEnrollId) > 0 )
        {
            $ok = $this->updateDegreeEnroll($data, $useConcept);
        }
        else 
        {
            $ok = $this->insertDegreeEnroll($data);
        }

        return $ok;
    }

    /**
     * Function that checks whether the degree exists
     *
     * @param $degreeEnroll (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function checkDegreeEnroll($enrollId, $degreeId)
    {
        $sql = 'SELECT degreeEnrollId
                  FROM acdDegreeEnroll
                 WHERE enrollId = ?
                   AND degreeId = ?';
                           
        $args = array ( $enrollId,
                        $degreeId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        if ( strlen($result[0][0]) == 0 )
        {
            return null;
        }
        else 
        {
            return $result[0][0];
        }
    }

    /**
     * Get Degree Enroll Current Grade
     *
     * @param int $degreeId
     * @param int $enrollId
     * @param boolean $concept Este parametro está obsoleto, não há mais necessidade de existir
     */
    public function getDegreeEnrollCurrentGrade($degreeId, $enrollId, $concept = null)
    {
        $degreeEnrollCurrentGrade = NULL;
        if ( $degreeId && $enrollId )
        {
            $sql = "SELECT nota FROM getDegreeEnrollCurrentGrade({$degreeId}, {$enrollId}, false)";
            $result = $this->getDatabase()->query(SAGU::prepare($sql, null));
            $degreeEnrollCurrentGrade = $result[0][0];
        }

        return $degreeEnrollCurrentGrade;
    }
    
    /**
     * Função para obter os resultados (notas) de uma matrícula
     * 
     * @author Samuel Koch
     * 
     * @param $enrollId (int): Código da matrícula cujos resultados devem ser obtidos
     * @param $degreeId (int): Código da nota
     * @param $concept (boolean): Verifica se é nota ou conceito. (PARAMETRO OBSOLETO)
     * 
     * @return (array): Vetor com as notas de cada grau
     */
    public function getDegreeEnrollHistory($degreeId, $enrollId, $concept = null)
    {
        $sql = "SELECT * FROM getDegreeEnrollCurrentGrade({$degreeId}, {$enrollId}, true)";
        $result = $this->getDatabase()->query(SAGU::prepare($sql, null));
        
        return $result;
    }
    
    /**
     * Função para obter os resultados (notas) de uma matrícula
     * 
     * @author Leovan Tavares da Silva
     * 
     * @param $enrollId (int): Código da matrícula cujos resultados devem ser obtidos
     * @param $learningPeriodId (int): Código do período letivo
     * 
     * @return (array): Vetor com as notas de cada grau
     */
    public function getEnrollGrades($enrollId, $learningPeriodId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = 'academic';
        
        $busDegree = new BusinessAcademicBusDegree();
        
        $degreeData = $busDegree->getLearningPeriodFinalDegree($learningPeriodId);
        
        $degrees = array();
        if (isset($degreeData))
        {
            $degrees = $busDegree->getChildDegrees($degreeData->degreeId);
            
            $degrees[] = $degreeData;
        }
        

        $return = array();
        if (count($degrees) > 0)
        {
            foreach ($degrees as $degreeData)
            {
                $degreeId = $degreeData->degreeId;
                $sql = "SELECT nota FROM getDegreeEnrollCurrentGrade({$degreeId}, {$enrollId}, false)";
                $res = $this->getDatabase()->query($sql);
                
                $return[$degreeData->degreeId]->description = $degreeData->description;
                $return[$degreeData->degreeId]->concept = $res[0][0];
                $return[$degreeData->degreeId]->note = $res[0][0];
            }
        }

        return $return;
    }
    
    public function obterNotaPorCurriculumEContrato($curriculumId, $contractId)
    {
        $sql = "SELECT DE.note 
                  FROM acddegreeenroll DE 
             LEFT JOIN acdenroll E ON (DE.enrollid = E.enrollid) 
                 WHERE E.contractid = $contractId 
                   AND E.curriculumid = $curriculumId 
                   AND degreeid IN (SELECT degreeid FROM acddegree WHERE parentdegreeid IS NULL AND degreenumber IN (0,1))
              ORDER BY recorddate 
                  DESC LIMIT 1";
        
        $result = $this->getDatabase()->query($sql);
        
        return $result[0][0];
    }
    
    /**
     * Verifica se existe frequencia registrada para o grupo de conceito + conceito passado
     * 
     * @return boolean
     */
    public function temFrequenciasUsandoConceito($conceptGroupId, $concept)
    {
        $sql =     'SELECT COUNT(*) > 0
                      FROM acdGroup G
                INNER JOIN acdEnroll E
                        ON E.groupId = G.groupId
                INNER JOIN acdDegreeEnroll DE
                        ON DE.enrollId = E.enrollId
                     WHERE G.conceptgroupid = ?
                       AND DE.concept = ?';

        $rows = SDatabase::query($sql, array($conceptGroupId, $concept));
        
        return $rows[0][0] == DB_TRUE;
    }
    
    public function existeNotasRegistradas($groupId)
    {
        $sql = ' SELECT COUNT(*) 
                   FROM acddegreeenroll 
                  WHERE enrollid 
                     IN (SELECT enrollid FROM acdenroll WHERE groupid = ?) ';
        
        $result = SDatabase::query($sql, array($groupId));
        
        return $result[0][0] > 0;
    }
}
?>
