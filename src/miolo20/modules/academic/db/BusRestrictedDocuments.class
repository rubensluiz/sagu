<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdRestrictedDocuments table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2005
 *
 **/
class BusinessAcademicBusRestrictedDocuments extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $restrictedDocumentId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     **/
    public function getRestrictedDocuments($restrictedDocumentId)
    {
        $sql = 'SELECT A.restrictedDocumentId,
                       A.documentTypeId,
                       B.name AS documentTypeName,
                       A.formationLevelId,
                       C.description AS formationLevelDescription,
                       A.courseId,
                       A.courseVersion,
                       D.name AS courseName,
                       A.turnId,
                       E.description AS turnDescription,
                       A.unitId,
                       F.description AS unitDescription,
                       A.isIn,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdRestrictedDocuments A
             LEFT JOIN basDocumentType B
                    ON (B.documentTypeId = A.documentTypeId)
             LEFT JOIN acdFormationLevel C
                    ON (C.formationLevelId = A.formationLevelId)
             LEFT JOIN acdCourse D
                    ON (D.courseId = A.courseId)
             LEFT JOIN basTurn E
                    ON (E.turnId = A.turnId)
             LEFT JOIN basUnit F
                    ON (F.unitId = A.unitId)
                 WHERE A.restrictedDocumentId = ?';

        $pk = array( $restrictedDocumentId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $pk));

        $restrictedDocuments = new AcdRestrictedDocuments();

        list ( $restrictedDocuments->restrictedDocumentId,
               $restrictedDocuments->documentTypeId,
               $restrictedDocuments->documentTypeName,
               $restrictedDocuments->formationLevelId,
               $restrictedDocuments->formationLevelDescription,
               $restrictedDocuments->courseId,
               $restrictedDocuments->courseVersion,
               $restrictedDocuments->courseName,
               $restrictedDocuments->turnId,
               $restrictedDocuments->turnDescription,
               $restrictedDocuments->unitId,
               $restrictedDocuments->unitDescription,
               $restrictedDocuments->isIn,
               $restrictedDocuments->userName,
               $restrictedDocuments->dateTime,
               $restrictedDocuments->ipAddress ) = $result[0];

        return $restrictedDocuments;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     **/
    public function searchRestrictedDocuments($filters)
    {
        $sql = 'SELECT A.restrictedDocumentId,
                       A.documentTypeId,
                       B.name AS documentTypeName,
                       A.formationLevelId,
                       C.description AS formationLevelDescription,
                       A.courseId,
                       A.courseVersion,
                       D.name AS courseName,
                       A.turnId,
                       E.description AS turnDescription,
                       A.unitId,
                       F.description AS unitDescription,
                       A.isIn,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM unit_acdRestrictedDocuments A
             LEFT JOIN basDocumentType B
                    ON (B.documentTypeId = A.documentTypeId)
             LEFT JOIN acdFormationLevel C
                    ON (C.formationLevelId = A.formationLevelId)
             LEFT JOIN acdCourse D
                    ON (D.courseId = A.courseId)
             LEFT JOIN basTurn E
                    ON (E.turnId = A.turnId)
             LEFT JOIN basUnit F
                    ON (F.unitId = A.unitId)';

        if ( strlen($filters->restrictedDocumentId) > 0 )
        {
            $where .= ' AND A.restrictedDocumentId = ?';
            $args[] = $filters->restrictedDocumentId;
        }
        if ( strlen($filters->documentTypeId) > 0 )
        {
            $where .= ' AND A.documentTypeId = ?';
            $args[] = $filters->documentTypeId;
        }
        if ( strlen($filters->documentTypeName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $filters->documentTypeName . '%';
        }
        if ( strlen($filters->formationLevelId) > 0 )
        {
            $where .= ' AND A.formationLevelId = ?';
            $args[] = $filters->formationLevelId;
        }
        if ( strlen($filters->formationLevelDescription) > 0 )
        {
            $where .= ' AND UNACCENT(C.description) ILIKE UNACCENT(?)';
            $args[] = $filters->formationLevelDescription . '%';
        }
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $filters->courseId;
        }
        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen($filters->courseName) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = $filters->courseName . '%';
        }
        if ( strlen($filters->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $filters->turnId;
        }
        if ( strlen($filters->turnDescription) > 0 )
        {
            $where .= ' AND UNACCENT(E.description) ILIKE UNACCENT(?)';
            $args[] = $filters->turnDescription . '%';
        }
        if ( strlen($filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( strlen($filters->unitDescription) > 0 )
        {
            $where .= ' AND UNACCENT(F.description) ILIKE UNACCENT(?)';
            $args[] = $filters->unitDescription . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     **/
    public function insertRestrictedDocuments($data)
    {
        $sql = 'INSERT INTO acdRestrictedDocuments
                            (documentTypeId,
                             formationLevelId,
                             courseId,
                             courseVersion,
                             turnId,
                             unitId,
                             isIn)
                     VALUES (?,?,?,?,?,?,?)';

        $args = array( $data->documentTypeId,
                       $data->formationLevelId,
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->isIn );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     **/
    public function updateRestrictedDocuments($data)
    {

        $sql = 'UPDATE acdRestrictedDocuments
                   SET documentTypeId = ?,
                       formationLevelId = ?,
                       courseId = ?,
                       courseVersion = ?,
                       turnId = ?,
                       unitId = ?,
                       isIn = ?
                 WHERE restrictedDocumentId = ?';

        $args = array( $data->documentTypeId,
                       $data->formationLevelId,
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->isIn,
                       $data->restrictedDocumentId );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $restrictedDocumentId (integer): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     **/
    public function deleteRestrictedDocuments($restrictedDocumentId)
    {
        $sql = 'DELETE FROM acdRestrictedDocuments
                      WHERE restrictedDocumentId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $restrictedDocumentId));

        return $result;
    }
}
?>
