<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCurriculum table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/09/2005
 *
 **/

/**
 * Class to manipulate the acdCurriculum table
 **/
class BusinessAcademicBusCurriculum extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCurriculum()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the acdCourse table
     * @param $courseVersion (integer): Primary key of the acdCourse table
     * @param $curricularComponentId (integer): Primary key of the acdCurricularComponent table
     * @param $curricularComponentVersion (integer): Primary key of the acdCurricularComponent table
     *
     * @return (object): Return true or false
     *
     **/
    public function isFromCurriculum($courseId, $courseVersion, $turnId, $unitId, $curricularComponentId, $curricularComponentVersion)
    {
        $sql = 'SELECT count(*)
                  FROM unit_acdcurriculum A
                 WHERE A.courseId                   = ?
                   AND A.courseVersion              = ?
                   AND A.turnId                     = ?
                   AND A.unitId                     = ?
                   AND A.curricularComponentId      = ?
                   AND A.curricularComponentVersion = ?
                   AND A.endDate IS NULL ';

        $args   = array ( $courseId,
                          $courseVersion,
                          $turnId,
                          $unitId,
                          $curricularComponentId,
                          $curricularComponentVersion );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return ((int)$result[0][0] > 0);
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $curriculumId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCurriculum($curriculumId, $ignoreMultiUnidade = false)
    {
        $MIOLO = MIOLO::getInstance();
        $action = $MIOLO->getCurrentAction();
        
        /**
         * Ajustando desempenho da tela de matrícula do sistema.
         * Ticket #38354
         */
        if ( $action == 'main:process:enrollCurricularComponents' )
        {
            //Busca array
            $arrayGetCurriculum = $MIOLO->session->getValue('arrayGetCurriculum');
            
            //Cria key
            $string = 'curriculumId=' . $curriculumId;
            $string .= 'ignoreMultiUnidade=' . $ignoreMultiUnidade;
            
            //Se key nao existe ainda, deixa passar, senao retorna
            if ( array_key_exists($string, $arrayGetCurriculum) )
            {
                return $arrayGetCurriculum[$string];
            }
            
            //Cria variavel para armazenar retorno na sessao depois
            $naSessao = true;
        }
        
        // AcdCurriculum não funciona na sessão
        $curriculum = ($naSessao ? new stdClass() : new AcdCurriculum());

        if ( strlen($curriculumId) > 0 )
        {
            $sql = 'SELECT A.curriculumId,
                           A.courseId,
                           A.courseVersion,
                           B.name AS courseName,
                           A.turnId,
                           A.unitId,
                           A.curricularComponentId,
                           A.curricularComponentVersion,
                           C.name AS curricularComponentName,
                           A.semester,
                           A.showInScholarshipDescription,
                           A.curricularComponentGroupDocumentEndCourseId,
                           D.name AS curricularComponentGroupDocumentEndCourseName,
                           A.curricularComponentGroupElectiveId,
                           E.name AS curricularComponentGroupElectiveName,
                           A.curriculumTypeId,
                           F.description AS curriculumTypeDescription,
                           TO_CHAR(A.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                           A.showInBulletin,
                           A.userName,
                           TO_CHAR(A.dateTime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                           A.ipAddress,
                           A.curricularComponentTypeId,
                           C.academicCredits,
                           C.academicNumberHours,
                           G.description AS curricularComponentTypeDescription
                      FROM unit_acdcurriculum A
                 LEFT JOIN acdCourse B
                        ON (B.courseId = A.courseId)
                 LEFT JOIN acdCurricularComponent C
                        ON (C.curricularComponentId = A.curricularComponentId
                            AND C.curricularComponentVersion = A.curricularComponentVersion)
                 LEFT JOIN acdCurricularComponentGroup D
                        ON (D.curricularComponentGroupId = A.curricularComponentGroupDocumentEndCourseId)
                 LEFT JOIN acdCurricularComponentGroup E
                        ON (E.curricularComponentGroupId = A.curricularComponentGroupElectiveId)
                 LEFT JOIN acdCurriculumType F
                        ON (F.curriculumTypeId = A.curriculumTypeId)
                 LEFT JOIN acdCurricularComponentType G
                        ON (G.curricularComponentTypeId = A.curricularComponentTypeId)
                     WHERE A.curriculumId = ?';

            if ( $ignoreMultiUnidade )
            {
                $sql = str_replace('unit_', '', $sql);
            }
            
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $curriculumId));

            list ( $curriculum->curriculumId,
                   $curriculum->courseId,
                   $curriculum->courseVersion,
                   $curriculum->courseName,
                   $curriculum->turnId,
                   $curriculum->unitId,
                   $curriculum->curricularComponentId,
                   $curriculum->curricularComponentVersion,
                   $curriculum->curricularComponentName,
                   $curriculum->semester,
                   $curriculum->showInScholarshipDescription,
                   $curriculum->curricularComponentGroupDocumentEndCourseId,
                   $curriculum->curricularComponentGroupDocumentEndCourseName,
                   $curriculum->curricularComponentGroupElectiveId,
                   $curriculum->curricularComponentGroupElectiveName,
                   $curriculum->curriculumTypeId,
                   $curriculum->curriculumTypeDescription,
                   $curriculum->endDate,
                   $curriculum->showInBulletin,
                   $curriculum->userName,
                   $curriculum->dateTime,
                   $curriculum->ipAddress,
                   $curriculum->curricularComponentTypeId,
                   $curriculum->academicCredits,
                   $curriculum->academicNumberHours,
                   $curriculum->curricularComponentTypeDescription) = $result[0];
        }
        
        //Salva na sessao
        if ( $naSessao )
        {
            $arrayGetCurriculum[$string] = $curriculum;
            $MIOLO->session->setValue('arrayGetCurriculum', $arrayGetCurriculum);
        }

        return $curriculum; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCurriculum($filters, $isWebServices = false)
    {
        $acdCurriculum = "unit_acdCurriculum";
        $acdCurricularComponentGroup = "acdCurricularComponentGroup";
        
        // Para webservices.
        if ( $isWebServices || $filters->csv )
        {
            $acdCurriculum = "acdCurriculum";
            $acdCurricularComponentGroup = "acdCurricularComponentGroup";
        }        
        
        $sql = "SELECT A.curriculumId,
                       A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       G.Description,
                       A.unitId,
                       H.Description,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.semester,
                       A.showInScholarshipDescription,
                       A.curricularComponentGroupDocumentEndCourseId,
                       D.name AS curricularComponentGroupDocumentEndCourseName,
                       A.curricularComponentGroupElectiveId,
                       E.name AS curricularComponentGroupElectiveName,
                       A.curriculumTypeId,
                       F.description AS curricularComponentTypeDescription,
                       TO_CHAR(A.endDate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "'),
                       A.userName,
                       TO_CHAR(A.dateTime, '" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       A.ipAddress,
                       A.curricularComponentTypeId,
                       C.academicCredits,
                       C.academicNumberHours
                  FROM {$acdCurriculum} A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)
             LEFT JOIN {$acdCurricularComponentGroup} D
                    ON (D.curricularComponentGroupId = A.curricularComponentGroupDocumentEndCourseId)
             LEFT JOIN {$acdCurricularComponentGroup} E
                    ON (E.curricularComponentGroupId = A.curricularComponentGroupElectiveId)
             LEFT JOIN acdCurriculumType F
                    ON (F.curriculumTypeId = A.curriculumTypeId)
            INNER JOIN basTurn G
                    ON (G.turnId = A.turnId)
            INNER JOIN basUnit H
                    ON (H.unitId = A.unitId)";

        if ( strlen($filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen($filters->courseName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $filters->courseName . '%';
        }
        if ( strlen($filters->curricularComponentId) > 0 )
        {
            $where .= ' AND A.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen($filters->curricularComponentVersion) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }
        if ( strlen($filters->curricularComponentName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curricularComponentName;
        }
        if ( strlen($filters->semester) > 0 )
        {
            $where .= ' AND A.semester = ?';
            $args[] = $filters->semester;
        }
        if ( strlen($filters->showInScholarshipDescription) > 0 )
        {
            $where .= ' AND A.showInScholarshipDescription = ?';
            $args[] = $filters->showInScholarshipDescription;
        }
        if ( strlen($filters->curricularComponentGroupDocumentEndCourseId) > 0 )
        {
            $where .= ' AND A.curricularComponentGroupDocumentEndCourseId = ?';
            $args[] = $filters->curricularComponentGroupDocumentEndCourseId;
        }
        if ( strlen($filters->curricularComponentGroupDocumentEndCourseName) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curricularComponentGroupDocumentEndCourseName . '%';
        }
        if ( strlen($filters->curricularComponentGroupElectiveId) > 0 )
        {
            $where .= ' AND A.curricularComponentGroupElectiveId = ?';
            $args[] = $filters->curricularComponentGroupElectiveId;
        }
        if ( strlen($filters->curricularComponentGroupElectiveName) > 0 )
        {
            $where .= ' AND UNACCENT(E.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curricularComponentGroupElectiveName . '%';
        }
        if ( strlen($filters->curriculumTypeId) > 0 )
        {
            $where .= ' AND A.curriculumTypeId = ?';
            $args[] = $filters->curriculumTypeId;
        }
        if ( strlen($filters->curricularComponentTypeId) > 0 )
        {
            $where .= ' AND A.curricularComponentTypeId = ?';
            $args[] = $filters->curricularComponentTypeId;
        }
        if ( strlen($filters->curricularComponentTypeDescription) > 0 )
        {
            $where .= ' AND UNACCENT(F.description) ILIKE UNACCENT(?)';
            $args[] = $filters->curricularComponentTypeDescription . '%';
        }
        if ( (strlen($filters->unitId) > 0) || (strlen($filters->courseUnitId) > 0) )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId > 0 ? $filters->unitId : $filters->courseUnitId;
        }
        if ( (strlen($filters->turnId) > 0) || (strlen($filters->courseTurnId) > 0) )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $filters->turnId > 0 ? $filters->turnId : $filters->courseTurnId;
        }
        if ( strlen($filters->formationLevelId) > 0 )
        {
            $where .= ' AND B.formationLevelId = ?';
            $args[] = $filters->formationLevelId;
        }

        $result = null;
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name, A.semester, C.name';
            
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }
    
    
    /**
     * 
     *
     * @param stdClass $data
     * @return array
     */
    public function searchCurriculumComponentObject($data)
    {
        return SAGU::resultToObject($this->searchCurriculumComponent($data), array(
            'curriculumId',
            'curricularComponentIdVersion',
            'curricularComponentName',
            'academicCredits',
            'academicNumberHours',
            'curricularComponentTypeDescription',
            'semester'
        ));
    }

    /**
     * Return a set of records from the database based on the supplied filters and arguments
     *
     * @param $filters (object): Composes the WHERE clause
     *
     * @return (array): An array containing the query results.
     *
     **/
    public function searchCurriculumComponent($data)
    {
        $sql = 'SELECT A.curriculumId,
                       A.curricularComponentId || \' / \' || A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       C.academicCredits,
                       C.academicNumberHours,
                       A.curricularcomponenttypeid || \' / \' || CCT.description AS curricularComponentTypeDescription,
                       A.semester
                  FROM unit_acdcurriculum A
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)
             LEFT JOIN acdCurricularComponentGroup D
                    ON (D.curricularComponentGroupId = A.curricularComponentGroupDocumentEndCourseId)
             LEFT JOIN acdCurricularComponentGroup E
                    ON (E.curricularComponentGroupId = A.curricularComponentGroupElectiveId)
             LEFT JOIN acdCurriculumType F
                    ON (F.curriculumTypeId = A.curriculumTypeId)
             LEFT JOIN acdcurricularcomponenttype CCT
                    ON CCT.curricularcomponenttypeid = A.curricularcomponenttypeid
            INNER JOIN basTurn G
                    ON (G.turnId = A.turnId)
            INNER JOIN basUnit H
                    ON (H.unitId = A.unitId)
            INNER JOIN acdCourseVersion I
                    ON (A.courseId = I.courseId
                        AND A.courseVersion = I.courseVersion) ';

        if ( strlen($data->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $data->courseId;
        }
        if ( strlen($data->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $data->courseVersion;
        }
        if ( strlen($data->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $data->turnId;
        }
        if ( strlen($data->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $data->unitId;
        }
        if ( strlen($data->courseUnitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $data->courseUnitId;
        }
        if ( strlen($data->courseTurnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $data->courseTurnId;
        }
        if ( strlen($data->semester) > 0 )
        {
            $where .= ' AND A.semester = ?';
            $args[] = $data->semester;
        }
        if ( strlen($data->curricularComponentGroupId) > 0 )
        {
            $where .= ' AND A.curricularcomponentgroupdocumentendcourseid = ?';
            $args[] = $data->curricularComponentGroupId;
        }
        if ( strlen($data->curricularComponentId) > 0 )
        {
            $where .= ' AND A.curricularComponentId = ?';
            $args[] = $data->curricularComponentId;
        }
        if ( strlen($data->curricularComponentVersion) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $data->curricularComponentVersion;
        }
        if ( strlen($data->curriculumTypeId) > 0 )
        {
            $where .= ' AND A.curriculumTypeId = ?';
            $args[] = $data->curriculumTypeId;
        }
        if ( strlen($data->curricularComponentTypeId) > 0 )
        {
            $where .= ' AND A.curricularComponentTypeId = ?';
            $args[] = $data->curricularComponentTypeId;
        }

        $sql .= ' WHERE ' . substr($where, 4) .
                ' ORDER BY A.semester, C.name';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCurriculum($data)
    {
        $sql = 'INSERT INTO acdCurriculum
                            ( courseId,
                              courseVersion,
                              turnId,
                              unitId,
                              curricularComponentId,
                              curricularComponentVersion,
                              curricularComponentTypeId,
                              semester,
                              showInScholarshipDescription,
                              curricularComponentGroupDocumentEndCourseId,
                              curricularComponentGroupElectiveId,
                              curriculumTypeId,
                              showInBulletin )
                     VALUES ( ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ?,
                              ? )';

        $args = array( $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->curricularComponentId,
                       $data->curricularComponentVersion,
                       $data->curricularComponentTypeId,
                       $data->semester,
                       $data->showInScholarshipDescription,
                       $data->curricularComponentGroupDocumentEndCourseId,
                       $data->curricularComponentGroupElectiveId,
                       $data->curriculumTypeId,
                       $data->showInBulletin );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCurriculum($data)
    {
        $sql = 'UPDATE acdCurriculum
                   SET courseId                                    = ?,
                       courseVersion                               = ?,
                       turnId                                      = ?,
                       unitId                                      = ?,
                       curricularComponentId                       = ?,
                       curricularComponentVersion                  = ?,
                       curricularComponentTypeId                   = ?,
                       semester                                    = ?,
                       showInScholarshipDescription                = ?,
                       curricularComponentGroupDocumentEndCourseId = ?,
                       curricularComponentGroupElectiveId          = ?,
                       curriculumTypeId                            = ?,
                       showInBulletin                              = ?
                 WHERE curriculumId = ?';

        $args = array( $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->curricularComponentId,
                       $data->curricularComponentVersion,
                       $data->curricularComponentTypeId,
                       $data->semester,
                       $data->showInScholarshipDescription,
                       $data->curricularComponentGroupDocumentEndCourseId,
                       $data->curricularComponentGroupElectiveId,
                       $data->curriculumTypeId,
                       $data->showInBulletin,
                       $data->curriculumId );
      
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $curriculumId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCurriculum($curriculumId)
    {
        $sql = 'DELETE FROM acdCurriculum
                      WHERE curriculumId = ?';

        $args = array( $curriculumId );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Gets a curriculum period total credits
     *
     **/
    public function getPeriodCredits($courseId, $courseVersion, $turnId, $unitId, $semester)
    {
        $sql = 'SELECT sum(B.academicCredits)
                  FROM unit_acdcurriculum A
               INNER JOIN acdCurricularComponent B
                    ON (B.curricularComponentId = A.curricularComponentId AND
                        B.curricularComponentVersion = A.curricularComponentVersion)
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?
                   AND A.turnId = ?
                   AND A.unitId = ?
                   AND A.semester = ?
                   AND A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'CURRICULUM_TYPE_NON_OPTIONAL') . ')';

        $args = array($courseId, $courseVersion, $turnId, $unitId, $semester);

        $res = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $res[0][0];
    }

    public function getPeriodHours($courseId, $courseVersion, $turnId, $unitId, $semester)
    {
        $sql = 'SELECT sum(B.academicNumberHours)
                  FROM unit_acdcurriculum A
               INNER JOIN acdCurricularComponent B
                    ON (B.curricularComponentId = A.curricularComponentId AND
                        B.curricularComponentVersion = A.curricularComponentVersion)
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?
                   AND A.turnId = ?
                   AND A.unitId = ?
                   AND A.semester = ?
                   AND A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'CURRICULUM_TYPE_NON_OPTIONAL') . ')';

        $args = array($courseId, $courseVersion, $turnId, $unitId, $semester);

        $res = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $res[0][0];
    }

    /**
     * Gets the different number hours of a curriculum
     *
     * @param curriculumId (integer): curriculum id to be searched
     *
     * @return (object): object with the academic, practical and theoretical number hours     *
     **/
    public function getCurriculumNumberHours($curriculumId)
    {
        $sql = ' SELECT B.academicNumberHours,
                        B.practicalNumberHours,
                        B.theoreticalNumberHours
                   FROM unit_acdcurriculum A
             INNER JOIN acdCurricularComponent B
                     ON (B.curricularComponentId = A.curricularComponentId AND
                         B.curricularComponentVersion = A.curricularComponentVersion)
                  WHERE A.curriculumId = ? ';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $curriculumId));

        $return = new stdClass();
        $return->academicNumberHours = $result[0][0];
        $return->practicalNumberHours = $result[0][1];
        $return->theoreticalNumberHours = $result[0][2];

        return $return;
    }

    /**
     * Gets the different credits numbers of a curriculum
     *
     * @param curriculumId (integer): curriculum id to be searched
     *
     * @return (object): object with the academic, practical e theoretical credits     *
     **/
    public function getCurriculumCredits($curriculumId)
    {
        $sql = ' SELECT B.academicCredits,
                        B.practicalCredits,
                        B.theoreticalCredits
                   FROM unit_acdcurriculum A
             INNER JOIN acdCurricularComponent B
                     ON (B.curricularComponentId = A.curricularComponentId AND
                         B.curricularComponentVersion = A.curricularComponentVersion)
                  WHERE A.curriculumId = ? ';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $curriculumId));

        $return = new stdClass();
        $return->academicCredits = $result[0][0];
        $return->practicalCredits = $result[0][1];
        $return->theoreticalCredits = $result[0][2];

        return $return;
    }
    
    /*
     * Função que retorna as disciplinas vinculadas a uma eletiva.
     * 
     * @param courseId, courseVersion, turnId, unitId, curricularComponentGroupElectiveId
     * @return (array): código e nome da disciplina
     */
    public function optionEletive($filters)
    {
        $sql = "SELECT A.curriculumId,
		       B.name 
		  FROM acdCurriculum A
	    INNER JOIN acdCurricularComponent B
		    ON (A.curricularcomponentid, A.curricularcomponentversion) =
		       (B.curricularcomponentid, B.curricularcomponentversion)

	       WHERE A.courseId = ?
	         AND A.courseVersion = ?
	         AND A.turnId = ?
	         AND A.unitId = ?
	         AND A.semester = 0
                 AND A.curricularcomponentgroupdocumentendcourseid = ?
            
            ORDER BY B.name";
        
        $params[] = $filters->courseId;
        $params[] = $filters->courseVersion;
        $params[] = $filters->turnId;
        $params[] = $filters->unitId;
        $params[] = $filters->curricularComponentGroupElectiveId;
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params));
        
        return $result;
        
    }
    
    /*
     * Função que retorna true caso já haja um requisito igual cadastrado.
     * 
     * @param courseId, courseVersion, turnId, unitId, curricularComponentGroupElectiveId
     * @return (array): código e nome da disciplina
     */
    public function verificationCondition($curriculumid, $conditioncurriculumid, $type)
    {
        $sql = "SELECT conditionId 
                FROM acdCondition 
                WHERE curriculumid = ? 
                    AND conditioncurriculumid = ? 
                    AND type = ?";
        
        $params[] = $curriculumid;
        $params[] = $conditioncurriculumid;
        $params[] = $type;
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params));
        
        return $result[0][0];
    }
}

?>
