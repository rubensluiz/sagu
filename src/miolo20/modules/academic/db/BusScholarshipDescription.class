<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search and list data from the
 * tables used by the scholarship description report.
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * This class was created 22/05/2007
 *
 **/
 
class ScholarshipDescriptionCurricularComponent
{
    //Código da disciplina
    public $curricularComponentId;
    //Versão da disciplina
    public $curricularComponentVersion;
    //Nome da disciplina
    public $curricularComponentName;
    //Número de créditos da disciplina
    public $credits;
    //Carga horária da disciplina
    public $numberHours;
    //Carga horária aproveitada para a disciplina
    public $hoursExploited;
    //Creditos aproveitados para a disciplina
    public $creditsExploited;
    //Nota
    public $grade;
    //Conceito
    public $concept;
    //Semestre em que a disciplina foi cursada
    public $semester;
    //Observações (disciplinas aproveitadas)
    public $obs;
    //Dado complementar para a disciplina
    public $complement;
    //Status da disciplina (Cursada, Não cursada, Matriculado)
    public $status;
    //Periodo em que a disciplina foi cursada
    public $periodId;
    //Disciplina substituta (no caso das Eletivas ou disciplinas convertidas em troca de curriculo)
    public $substituteCurricularComponent;
    //Lista de disciplinas aproveitadas (caso existam)
    public $exploitations;
}

class BusinessAcademicBusScholarshipDescription extends sBusiness
{
    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $courseId
     * @return unknown
     */
    public function getCourseData($courseId, $courseVersion, $turnId, $unitId)
    {
        $sql = 'SELECT A.courseId,
                       A.name,
                       A.shortName,
                       TO_CHAR(B.dataReconhecimento, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       B.documentoReconhecimento
                  FROM acdCourse A
            INNER JOIN acdReconhecimentoDeCurso B
                    ON B.courseId = A.courseId
                 WHERE A.courseId = ?
                   AND B.courseVersion = ?
                   AND B.turnId = ?
                   AND B.unitId = ?';
                 
        $args = array(
            $courseId,
            $courseVersion,
            $turnId,
            $unitId
        );
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        list ($courseData->courseId,
              $courseData->courseName,
              $courseData->courseShortName,
              $courseData->recognitionDate,
              $courseData->recognitionDocumentNumber) = $result[0];
              
        return $courseData;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $personId
     * @return unknown
     */
    public function getPhysicalPersonData($personId)
    {
        $sql = 'SELECT A.personId,
                       A.name,
                       TO_CHAR(A.dateBirth,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.cityIdBirth,
                       B.name,
                       B.stateId,
                       C.nationality
                  FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON (B.cityId = A.cityIdBirth)
             LEFT JOIN basCountry C
                    ON (C.countryId = B.countryId)
                 WHERE A.personId = ?';
                 
        $args = array($personId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        list( $personData->personId,
              $personData->personName,
              $personData->dateBirth,
              $personData->cityIdBirth,
              $personData->cityNameBirth,
              $personData->stateIdBirth,
              $personData->nationality ) = $result[0];
             
        return $personData;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $personId
     * @param unknown_type $documentTypeId
     * @return unknown
     */
    public function getDocumentData($personId, $documentTypeId)
    {
        $sql = 'SELECT A.content,
                       TO_CHAR(A.dateExpedition,\''. SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.cityId,
                       B.name,
                       B.stateId,
                       A.organ
                  FROM basDocument A
             LEFT JOIN basCity B
                    ON (B.cityId = A.cityId)
                 WHERE A.personId = ?
                   AND A.documentTypeId = ?';
        
        $args = array($personId, $documentTypeId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        list ( $documentData->content,
               $documentData->dateExpedition,
               $documentData->cityId,
               $documentData->cityName,
               $documentData->stateId,
               $documentData->organ ) = $result[0];
             
        return $documentData;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $personId
     * @return unknown
     */
    public function getStudentData($personId)
    {
        $sql = 'SELECT A.institutionIdHs,
                       B.name,
                       A.externalCourseIdHs,
                       C.name,
                       A.yearHs,
                       A.cityIdHs,
                       D.name,
                       D.stateId
                  FROM ONLY basPhysicalPersonStudent A
             LEFT JOIN basLegalPerson B
                    ON (B.personId = A.institutionIdHs)
             LEFT JOIN acdExternalCourse C
                    ON (C.externalCourseId = A.externalCourseIdHs)
             LEFT JOIN basCity D
                    ON (D.cityId = A.cityIdHs)
                 WHERE A.personId = ?';
                 
        $args = array($personId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        list ( $studentData->institutionId,
               $studentData->institutionName,
               $studentData->courseId,
               $studentData->courseName,
               $studentData->year,
               $studentData->cityId,
               $studentData->cityName,
               $studentData->stateId ) = $result[0];
             
        return $studentData;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $contractId
     * @return unknown
     */
    public function getIngressionFormData($contractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $busContract  = new BusinessAcademicBusContract();
        $contractData = $busContract->getContract($contractId);
     //   /*
        $sql = 'SELECT A.stateContractId,
                       C.description,
                       TO_CHAR(A.stateTime, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM acdMovementContract A
            INNER JOIN unit_acdContract B
                    ON (B.contractId = A.contractId)
            INNER JOIN acdStateContract C
                    ON (C.stateContractId = A.stateContractId)
                 WHERE B.personId = ?
                   AND C.inOutTransition = \'I\'
                   AND B.courseId IN (SELECT courseId 
                                        FROM acdCourse
                                       WHERE formationLevelId IN (' . SAGU::getParameter('ACADEMIC', 'COURSE_FORMATIONLEVELID_GRADUATE') .'))
              ORDER BY A.stateTime LIMIT 1';
              
        $args = array($contractData->personId);
        
        $result1 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        list ( $stateContractId,
               $stateContractDescription,
               $stateContractDate ) = $result1[0];
              
        $sql = 'SELECT stateContractFieldId,
                       description
                  FROM acdStateContractField A
                 WHERE stateContractId = ?';
                 
        $args = array($stateContractId);
        
        $result2 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        if ( count($result2) > 0 )
        {
            list ( $stateContractFieldId,
                   $stateContractFieldDescription ) = $result2[0];
                  
            $sql = 'SELECT value
                      FROM acdMovementContractComplement
                     WHERE stateContractFieldId = ?
                       AND stateContractId = ?
                       AND contractId = ?';
                       
            $args = array($stateContractFieldId, $stateContractId, $contractId);
            
            $result3 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
            
            $stateContractFieldValue = $result3[0][0];
        }

        return $return;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $enrollId
     * @return unknown
     */
    public function getEnrollExploitationData($enrollId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business = new BusinessAcademicBusExploitation();

        $enrollExploitations = $business->getEnrollExploitationData($enrollId);
        $enrollExplSummary   = $business->getEnrollExploitationSummary($enrollId);
        
        if ( count($enrollExploitations) > 0 )
        {
            foreach ( $enrollExploitations as $exploitationData )
            {
                list ( $exploitationId,
                       $exploitationType,
                       $curricularComponentName,
                       $courseName,
                       $periodId,
                       $exploitationNumberHours,
                       $finalDegree ) = $exploitationData;
                      
                $exploitationLine->curricularComponentName = $curricularComponentName;
                $exploitationLine->courseName              = $courseName;
                $exploitationLine->periodId                = $periodId;
                $exploitationLine->exploitationNumberHours = $exploitationNumberHours;
                $exploitationLine->finalGrade              = $finalDegree;
                
                if ( $exploitationType == 'E' )
                {
                    $dataExploitation = $business->getExploitation($exploitationId);
                    
                    $sql = 'SELECT shortName
                              FROM ONLY basLegalPerson
                             WHERE personId = ?';
                             
                    $resInstitution = $this->getDatabase()->query(SAGU::prepare($sql, $dataExploitation->institutionId));
                    $exploitationLine->institution = $resInstitution[0][0];
                }
                
                $result->exploitations[] = clone($exploitationLine);
            }
        }
        
        $result->totalNumberHours     = $enrollExplSummary->totalNumberHours;
        $result->exploitedNumberHours = $enrollExplSummary->exploitedNumberHours;
        $result->remainingNumberHours = $enrollExplSummary->remainingNumberHours;
        
        return $result;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $contractId
     * @return unknown
     */
    public function getCurricularComponentGroups($contractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $busContract  = new BusinessAcademicBusContract();
        $contractData = $busContract->getContract($contractId);

        $courseId      = $contractData->courseId;
        $courseVersion = $contractData->courseVersion;
        $turnId        = $contractData->turnId;
        $unitId        = $contractData->unitId;

        $sql = 'SELECT A.curricularComponentGroupDocumentEndCourseId,
                       B.name
                  FROM unit_acdcurriculum A 
            INNER JOIN acdCurricularComponentGroup B 
                    ON (A.curricularComponentGroupDocumentEndCourseId = B.curricularComponentGroupId) 
                 WHERE A.courseId = ? 
                   AND A.courseVersion = ? 
                   AND A.turnId = ? 
                   AND A.unitid = ?
                   AND A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'SCHOLARSHIP_CURRICULUM_TYPE_NON_OPTIONAL') . ') 
              ORDER BY CASE WHEN A.semester = 0 
                            THEN 9999 
                            ELSE A.semester END';
                            
        $args = array($courseId, $courseVersion, $turnId, $unitId);
       
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        $return = array();
        
        if ( count($result) > 0 )
        {
            foreach ( $result as $res )
            {
                list ( $ret->curricularComponentGroupId,
                       $ret->curricularComponentGroupName ) = $res;
                      
                if ( !in_array($ret, $return) )
                {
                    $return[] = clone($ret);
                }
            }
        }
        
        return $return;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $contractId
     * @param unknown_type $curricularComponentGroupId
     * @param unknown_type $orderType
     * @return unknown
     */
    public function getCurriculumData($contractId, $curricularComponentGroupId=null, $orderType=null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        //Obtem os dados do contrato
        $busContract  = new BusinessAcademicBusContract();
        $contractData = $busContract->getContract($contractId);

        $courseId      = $contractData->courseId;
        $courseVersion = $contractData->courseVersion;
        $turnId        = $contractData->turnId;
        $unitId        = $contractData->unitId;
        
        //Obtem o curriculo do curso
        $sql = 'SELECT A.curriculumId,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       B.name,
                       A.semester,
                       B.academicCredits,
                       B.academicNumberHours
                  FROM unit_acdcurriculum A
            INNER JOIN acdCurricularComponent B
                    ON (B.curricularComponentId = A.curricularComponentId AND
                        B.curricularComponentVersion = A.curricularComponentVersion)
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?
                   AND A.turnId = ?
                   AND A.unitId = ?
                   AND A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'SCHOLARSHIP_CURRICULUM_TYPE_NON_OPTIONAL') . ')';

        $args = array($courseId, $courseVersion, $turnId, $unitId);

        if ( strlen($curricularComponentGroupId) > 0 )
        {
           $sql .= ' AND A.curricularComponentGroupDocumentEndCourseId = ?';
           
           $args[] = $curricularComponentGroupId;
        }
                   
        if ( strlen($orderType) == 0 )
        {
            $orderType = 2;
        }
        
        if ( $orderType == 1 )
        {
            $sql .= ' ORDER BY CASE WHEN A.semester = 0 THEN 9999 ELSE A.semester END, B.name';
        }
        elseif ( $orderType == 2 )
        {
            $sql .= ' ORDER BY B.name, CASE WHEN A.semester = 0 THEN 9999 ELSE A.semester END';
        }

        $result1 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        unset($return);
        if ( count($result1) > 0 )
        {
            foreach ( $result1 as $curriculumData )
            {
                list ( $curriculumId,
                       $curricularComponentId,
                       $curricularComponentVersion,
                       $curricularComponentName,
                       $semester,
                       $credits,
                       $numberHours ) = $curriculumData;
                
                //Monta o objeto que representa uma disciplina no histórico escolar
                $scholarshipCurricularComp = new ScholarshipDescriptionCurricularComponent();

                $scholarshipCurricularComp->curricularComponentId = $curricularComponentId;
                $scholarshipCurricularComp->curricularComponentVersion = $curricularComponentVersion;
                $scholarshipCurricularComp->curricularComponentName = $curricularComponentName;
                $scholarshipCurricularComp->semester = $semester;
                $scholarshipCurricularComp->credits = $credits;
                $scholarshipCurricularComp->numberHours = $numberHours;
                
                //Obtem os dados de matricula da disciplina
                $sql = 'SELECT A.enrollId,
                               obternotaouconceitofinal(A.enrollId) AS finalnote,
                               A.concept,
                               A.obsExploitation,
                               A.statusId,
                               G.description,
                               A.complement,
                               A.isExploitation,
                               B.groupId,
                               B.curriculumId,
                               CASE WHEN C.periodId IS NOT NULL
                               THEN C.periodId
                               ELSE D.periodId END,
                               CASE WHEN A.frequency > F.academicNumberHours THEN
                                   \'100%\'
                               ELSE
                                   ROUND( ((A.frequency * 100) / F.academicNumberHours)::NUMERIC, \'' . SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE') . '\')::TEXT || \'%\'
                               END
                          FROM unit_acdEnroll A
                     LEFT JOIN unit_acdGroup B
                            ON (B.groupId = A.groupId)
                     LEFT JOIN unit_acdlearningperiod C
                            ON (C.learningPeriodId = B.learningPeriodId)
                     LEFT JOIN unit_acdlearningperiod D
                            ON (D.learningPeriodId = A.learningPeriodId)
                     LEFT JOIN unit_acdcurriculum E
                              ON (E.curriculumId = B.curriculumId)
                      LEFT JOIN acdCurricularComponent F
                              ON (F.curricularComponentId = E.curricularComponentId AND
                                   F.curricularComponentVersion = E.curricularComponentVersion)
                      LEFT JOIN acdEnrollStatus G
                              ON (G.statusId = A.statusId)
                         WHERE A.curriculumId = ?
                           AND A.contractId = ?
                           AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') . ',' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED')  . ')';
                           
                $args = array($curriculumId, $contractId);
                
                $result2 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
                
                if ( count($result2) > 0 )
                {
                    foreach ( $result2 as $enrollData )
                    {
                        list ( $enrollId,
                               $finalNote,
                               $concept,
                               $obsExploitation,
                               $statusId,
                               $statusDescription,
                               $complement,
                               $isExploitation,
                               $groupId,
                               $groupCurriculumId,
                               $periodId,
                               $frequency ) = $enrollData;
                              
                        //Verifica se possui aproveitamentos
                        $result3 = $this->getEnrollExploitationData($enrollId);
                        
                        if ( count($result3->exploitations) > 0 )
                        {   
                            //Adiciona a lista de aproveitamentos ao objeto
                            $scholarshipCurricularComp->exploitations        = $result3->exploitations;
                            $scholarshipCurricularComp->exploitedNumberHours = $result3->exploitedNumberHours;
                            $scholarshipCurricularComp->remainingNumberHours = $result3->remainingNumberHours;
                        }
                        //Se não possui aproveitamentos, trata a disciplina como uma disciplina cursada normalmente
                        else
                        {
                            //Verifica se a disciplina foi substituida por outra (caso de eletivas, por exemplo)
                            if ( (strlen($groupCurriculumId) > 0) && ($curriculumId != $groupCurriculumId) )
                            {
                                $sql = 'SELECT B.curricularComponentId,
                                               B.curricularComponentVersion,
                                               B.name
                                          FROM unit_acdcurriculum A
                                    INNER JOIN acdCurricularComponent B
                                            ON (B.curricularComponentId = A.curricularComponentId AND
                                                B.curricularComponentVersion = A.curricularComponentVersion)
                                         WHERE A.curriculumId = ?';
                                         
                                $args = array($groupCurriculumId);
                                
                                $result4 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
                                
                                list ( $subsCurricularComponentId,
                                       $subsCurricularComponentVersion,
                                       $subsCurricularComponentName ) = $result4[0];

                                if ( $curricularComponentName != $subsCurricularComponentName )
                                {
                                    $scholarshipCurricularComp->substituteCurricularComponent = $subsCurricularComponentName;
                                }
                            }
                        }
                        
                        //Verificação da frequencia
                        if ( $frequency >= 100 )
                        {
                            //$frequency = SAGU::formatNumber('100', SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE')) . ' %';
                        }
                        else
                        {
                            if ( is_null($frequency) )
                            {
                                $frequency = 0;
                            }

                            
                            if( is_numeric($frequency) )
                            {
                                $frequency = SAGU::formatNumber($frequency, SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE')) . ' %';
                            }
                        }
                        
                        //Completa os dados do objeto
                        $scholarshipCurricularComp->periodId          = $periodId;
                        $scholarshipCurricularComp->complement        = $complement;
                        $scholarshipCurricularComp->concept           = $concept;
                        $scholarshipCurricularComp->grade             = $finalNote;
                        $scholarshipCurricularComp->obs               = $obsExploitation;
                        $scholarshipCurricularComp->isExploitation    = $isExploitation;
                        $scholarshipCurricularComp->frequency         = $frequency;
                        $scholarshipCurricularComp->statusDescription = $statusDescription;

                        //Obtem o status da disciplina
                        if ( $statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') )
                        {
                            $scholarshipCurricularComp->status = 'ENROLLED';
                        }
                        elseif ( $statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED') )
                        {
                            $scholarshipCurricularComp->status = 'COURSED';
                        }
                        elseif ( $statusId == SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED') )
                        {
                            if ( count($scholarshipCurricularComp->exploitations) > 0 )
                            {
                                $scholarshipCurricularComp->status = 'EXPLOITED';
                            }
                            else
                            {
                                $scholarshipCurricularComp->status = 'EXCUSED';
                            }
                        }
                    }
                }
                //Se não possui matriculas registradas, a disciplina não foi cursada
                else
                {
                    $scholarshipCurricularComp->status = 'NOT COURSED';
                }   
                
                //Adiciona o objeto ao vetor de retorno da função
                $return[] = $scholarshipCurricularComp;
            }            
        }
        
        /* Vetor de objetos com os atributos:
           |_ curricularComponentId = código da disciplina
           |_ curricularComponentVersion = versão da disciplina
           |_ curricularComponentName = nome da disciplina
           |_ credits = número de créditos na disciplina
           |_ numberHours = carga horária da disciplina
           |_ hoursExploited = número de horas aproveitadas para a disciplina
           |_ creditsExploited = número de créditos aproveitados para a disciplina
           |_ grade = nota obtida na disciplina
           |_ concept = conceito obtido na disciplina
           |_ semester = semestre do curso ao qual a disciplina pertence
           |_ obs = observações
           |_ complement = complemento de informação
           |_ status = status da disciplina (Cursada, Dispensado, Matriculado, Não cursada)
           |_ periodId = periodo no qual a disciplina foi cursada/aproveitada
           |_ substituteCurricularComponent = nome da disciplina substituta
           |_ exploitations = dados dos aproveitamentos (vetor de objetos)
              |_ curricularComponent = disciplina aproveitada
              |_ grade = nota obtida na disciplina aproveitada
              |_ credits = número de créditos da disciplina aproveitada
              |_ numberHours = carga horária da disciplina aproveitada
              |_ periodId = periodo em que a disciplina aproveitada foi cursada
              |_ institution = instituição na qual a disciplina aproveitada foi cursada
              |_ courseName = curso da disciplina aproveitada
              |_ exploitedNumberHours = número de horas aproveitadas
              |_ exploitedCredits = número de créditos aproveitados
              |_ exploitationType = tipo de aproveitamento (Interno - 'I' ou Externo - 'E')
        */

        return $return;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $contractId
     * @return unknown
     */
    public function getComplementaryActivitiesData($contractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $busContract  = new BusinessAcademicBusContract();
        $contractData = $busContract->getContract($contractId);
        
        //Obtém as disciplinas do currículo do aluno que são do tipo 'Atividades complementares'
        $sql = 'SELECT B.curriculumId,
                       B.curricularComponentId,
                       B.curricularComponentVersion,
                       C.name,
                       C.academicNumberHours,
                       C.academicCredits
                  FROM unit_acdcurriculum B
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = B.curricularComponentId AND
                        C.curricularComponentVersion = B.curricularComponentVersion)
                 WHERE B.courseId = ?
                   AND B.courseVersion = ?
                   AND B.unitId = ?
                   AND B.turnId = ?
                   AND B.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY') . ')';
                   
        $args = array($contractData->courseId,
                      $contractData->courseVersion,
                      $contractData->unitId,
                      $contractData->turnId);
        
        $result1 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        unset($return);
        if ( count($result1) > 0 )
        {
            foreach ( $result1 as $complActivityCurriculum )
            {
                unset($complActivityData, $caDetails);
                    
                $caHoursConcluded   = 0;
                $caCreditsConcluded = 0;
                
                list ( $caCurriculumId,
                       $caCurricularComponentId,
                       $caCurricularComponentVersion,
                       $caCurricularComponentName,
                       $caAcademicNumberHours,
                       $caAcademicCredits ) = $complActivityCurriculum;
                      
                //Obtém as atividades aproveitadas como 'Atividade Complementar'
                $sql = 'SELECT A.description,
                               A.totalHours,
                               A.totalCredits,
                               A.degree,
                               A.concept,
                               A.periodId,
                               B.obsExploitation
                          FROM acdComplementaryActivities A
                    INNER JOIN unit_acdEnroll B
                            ON (B.enrollId = A.enrollId)
                         WHERE B.curriculumId = ?
                           AND B.contractId = ?
                      ORDER BY A.periodId';
                           
                $args = array($caCurriculumId, $contractId);
                           
                $result2 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
                
                //Obtém os totais de horas e créditos concluidos
                if ( count($result2) > 0 )
                {       
                    foreach ( $result2 as $complActivityDetails )
                    {
                        list ( $ca->description,
                               $ca->totalHours,
                               $ca->totalCredits,
                               $ca->degree,
                               $ca->concept,
                               $ca->periodId,
                               $ca->obs ) = $complActivityDetails;
                              
                        $caHoursConcluded += $ca->totalHours;
                        
                        
                        //Insere a atividade no vetor de detalhes
                        $caDetails[] = clone($ca);
                    }
                }
                
                $caCreditsRate = (float) $caAcademicCredits / (float) $caAcademicNumberHours;
                
                $caCreditsConcluded += $caHoursConcluded * $caCreditsRate;
                
                //Monta o objeto que representa a atividade complementar
                $complActivityData->curricularComponentId      = $caCurricularComponentId;
                $complActivityData->curricularComponentVersion = $caCurricularComponentVersion;
                $complActivityData->curricularComponentName    = $caCurricularComponentName;
                $complActivityData->numberHours                = $caAcademicNumberHours;
                $complActivityData->credits                    = $caAcademicCredits;
                $complActivityData->hoursConcluded             = $caHoursConcluded;
                $complActivityData->creditsConcluded           = $caCreditsConcluded;
                $complActivityData->details                    = $caDetails;
                
                $caHoursNotConcluded = $complActivityData->numberHours - $caHoursConcluded;
                
                //Verificação para não exibir horas negativas
                if ( $caHoursNotConcluded > 0 )
                {
                    $complActivityData->hoursNotConcluded = $caHoursNotConcluded;
                }
                else
                {
                    $complActivityData->hoursNotConcluded = 0;
                }
                
                $caCreditsNotConcluded = $complActivityData->hoursNotConcluded * $caCreditsRate;
                
                if ( $caCreditsNotConcluded > 0 )
                {
                    $complActivityData->creditsNotConcluded = $caCreditsNotConcluded;
                }
                else
                {
                    $complActivityData->creditsNotConcluded = 0;
                }
                
                //Insere o objeto no vetor de retorno
                $return[] = clone($complActivityData);
            }
            
            /* Vetor de objetos com os atributos:
               |_ curricularComponentId = código da disciplina de atividade complementar
               |_ curricularComponentVersion = versão da disciplina de atividade complementar
               |_ curricularComponentName = nome da disciplina de atividade complementar
               |_ numberHours = carga horária exigida em atividades complementares
               |_ credits = número de créditos exigidos em atividades complementares
               |_ hoursConcluded = número de horas em atividades complementares já concluídas
               |_ creditsConcluded = número de créditos em atividades complementares já concluídas
               |_ hoursNotConcluded = horas que faltam fazer em atividades complementares
               |_ creditsNotConcluded = créditos que faltam fazer em atividades complementares
               |_ details = detalhes das atividades aproveitadas (vetor de objetos)
                  |_ description = descrição da atividade
                  |_ totalHours = número de horas aproveitadas com a atividade
                  |_ totalCredits = número de créditos aproveitados com a atividade
                  |_ degree = grau obtido na atividade
                  |_ concept = conceito obtido na atividade
                  |_ periodId = periodo em que a atividade foi realizada 
                  |_ obs = campo para observações */
            
            return $return;
        }
        else
        {
            return null;
        }
    }

    //FIXME: Add comment
    public function getOutOfCurriculumData($contractId, $filters = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $busContract  = new BusinessAcademicBusContract();
        $contractData = $busContract->getContract($contractId);
        
        //Obtém disciplinas cursadas pelo aluno que não pertencem ao currículo do contrato selecionado
        $sql = 'SELECT A.enrollId,
                       C.curricularComponentId,
                       C.curricularComponentVersion,
                       D.name,
                       D.academicCredits,
                       D.academicNumberHours,
                       C.showInScholarshipDescription,
                       E.periodId,
                       obternotaouconceitofinal(A.enrollId) AS finalNote,
                       A.concept,
                       A.obsExploitation
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN unit_acdcurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = C.curricularComponentId AND
                        D.curricularComponentVersion = C.curricularComponentVersion)
            INNER JOIN unit_acdlearningperiod E
                    ON (E.learningPeriodId = B.learningPeriodId)
            INNER JOIN unit_acdContract F
                    ON (F.contractId = A.contractId)
                 WHERE F.personId = ?
                   AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') . ')
                   AND F.courseId IN (SELECT courseId
                                        FROM acdCourse
                                       WHERE formationLevelId IN (' . SAGU::getParameter('ACADEMIC', 'COURSE_FORMATIONLEVELID_GRADUATE') .'))
                   AND A.curriculumId NOT IN (SELECT curriculumId
                                                FROM unit_acdcurriculum
                                               WHERE courseId = ?
                                                 AND courseVersion = ?
                                                 AND turnId = ?
                                                 AND unitId = ?) ';
                                                 
        if ( strlen($filters->concludedCourses) > 0 )
        {
            $sql .= ' AND F.courseId NOT IN (' . $filters->concludedCourses . ') ';
        }
        
        $sql .= ' ORDER BY E.periodId, C.curricularComponentId ';
        
        $args = array( $contractData->personId,
                       $contractData->courseId,
                       $contractData->courseVersion,
                       $contractData->turnId,
                       $contractData->unitId );
                       
        $result1 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        unset($return);
        if ( count($result1) > 0 )
        {
            foreach ( $result1 as $outCurricular )
            {
                list ( $outCurriculumData->enrollId,
                       $outCurriculumData->curricularComponentId,
                       $outCurriculumData->curricularComponentVersion,
                       $outCurriculumData->curricularComponentName,
                       $outCurriculumData->academicCredits,
                       $outCurriculumData->academicNumberHours,
                       $outCurriculumData->showInScholarshipDescription,
                       $outCurriculumData->periodId,
                       $outCurriculumData->finalNote,
                       $outCurriculumData->concept,
                       $outCurriculumData->obs ) = $outCurricular;
                      
                //Verifica se a disciplina foi aproveitada
                $business        = new BusinessAcademicBusInternalExploitation();
                $exploitableData = $business->getEnrollExploitableSummary($outCurriculumData->enrollId);
                
                $outCurriculumData->exploitedHours    = $exploitableData->exploitedNumberHours;
                $outCurriculumData->notExploitedHours = $exploitableData->remainingNumberHours;
                
                $creditsRate = (float) $outCurriculumData->academicCredits / (float) $outCurriculumData->academicNumberHours;
                
                $outCurriculumData->exploitedCredits    = $outCurriculumData->exploitedHours * $creditsRate;
                $outCurriculumData->notExploitedCredits = $outCurriculumData->notExploitedHours * $creditsRate;
                                
                //Insere o objeto no vetor de retorno
                $return[] = clone($outCurriculumData);
            }
        }
        /* Vetor de objetos com os atributos:
           |_ enrollId = código da matricula
           |_ curricularComponentId = código da disciplina
           |_ curricularComponentVersion = versão da disciplina
           |_ curricularComponentName = nome da disciplina
           |_ academicCredits = número de créditos da disciplina
           |_ academicNumberHours = carga horária da disciplina
           |_ isShowDocumentEndCourse = flag que indica se deve (true) ser exibida no histórico
           |_ periodId = período em que a disciplina foi cursada
           |_ exploitedHours = número de horas da disciplina que foram aproveitadas
           |_ exploitedCredits = número de créditos que foram aproveitados
           |_ notExploitedHours = número de horas que restam e podem ser aproveitadas
           |_ notExploitedCredits = número de créditos que restam e podem ser aproveitados */
        
        return $return;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $contractId
     */
    public function importExploitations($contractId = null)
    {
        $sql = 'SELECT A.enrollId,
                       A.groupId,
                       A.exploitationType,
                       A.numberHourExploitation,
                       A.creditsExploitation,
                       A.exploitationInstitutionId,
                       A.obsExploitation,
                       D.name as curricularComponentName,
                       E.periodId as groupPeriodId,
                       CASE WHEN A.exploitationType = \'I\' 
                       THEN (SELECT AA.enrollId 
                               FROM unit_acdEnroll AA 
                         INNER JOIN unit_acdContract BB 
                                 ON (BB.contractId = AA.contractId)
                              WHERE AA.groupId = A.groupId
                                AND BB.personId = F.personId
                                AND AA.statusId IN (2,7)
                                AND AA.curriculumId NOT IN (SELECT curriculumId FROM unit_acdcurriculum WHERE curriculumTypeId = 1) )
                       ELSE \'0\'
                       END as exploitationEnrollId
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdGroup B
                    ON (B.groupId = A.groupId)
            INNER JOIN unit_acdcurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = C.curricularComponentId AND 
                        D.curricularComponentVersion = C.curricularComponentVersion)
            INNER JOIN unit_acdlearningperiod E
                    ON (E.learningPeriodId = B.learningPeriodId)
            INNER JOIN unit_acdContract F
                    ON (F.contractId = A.contractId)
                 WHERE A.statusId IN (2,7)
                   AND A.exploitationType IS NOT NULL';

        if ( strlen($contractId) > 0 )
        {
            $sql .= ' AND A.contractId = ' . $contractId;
        }

        $sql .= ' ORDER BY A.enrollId ';

        $result = $this->getDatabase()->query($sql);

        if ( count($result) > 0 )
        {
            $x = 1;
            foreach ( $result as $exploitedData )
            {
                list ( $enrollId,
                       $groupId,
                       $exploitationType,
                       $numberHourExploitation,
                       $creditsExploitation,
                       $exploitationInstitutionId,
                       $obsExploitation,
                       $curricularComponentName,
                       $periodId,
                       $exploitationEnrollId ) = $exploitedData;
                      
                if ( ($exploitationType == 'I') && (strlen($exploitationEnrollId) > 0) )
                {
                    $sql = ' INSERT INTO acdExploitation (
                                         enrollId,
                                         exploitationType,
                                         exploitationEnrollId,
                                         exploitationNumberHours,
                                         exploitationCredits,
                                         periodId )
                                  VALUES (?, ?, ?, ?, ?, ?) ';
                                 
                    $args = array($enrollId, $exploitationType, $exploitationEnrollId, $numberHourExploitation, $creditsExploitation, $periodId);
                    
                    $result2 = $this->getDatabase()->execute(SAGU::prepare($sql, $args));       
                }
                elseif ( $exploitationType == 'E' )
                {
                    $sql = ' INSERT INTO acdExploitation (
                                         enrollId,
                                         exploitationType,
                                         exploitationNumberHours,
                                         exploitationCredits,
                                         institutionId,
                                         periodId )
                                  VALUES (?, ?, ?, ?, ?, ?) ';
                                       
                    $args = array($enrollId, $exploitationType, $numberHourExploitation, $creditsExploitation, $exploitationInstitutionId, $periodId);
                    
                    $result2 = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
                }
                
                if ( $result2 != false )
                {
                    echo "$x - $enrollId - ok";
                }
                
                $x++;
            }
        }
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $companyId
     * @return unknown
     */
    public function getCompanyData($companyId)
    {
        $sql = 'SELECT B.personId,
                       B.name as personName,
                       C.cityId,
                       C.name as cityName,
                       C.stateId
                  FROM basCompanyConf A
            INNER JOIN ONLY basLegalPerson B
                    ON (B.personId = A.personId)
            INNER JOIN basCity C
                    ON (C.cityId = B.cityId)
                 WHERE A.companyId = ?';
                 
        $args = array($companyId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        list ( $return->personId,
               $return->personName,
               $return->cityId,
               $return->cityName,
               $return->stateId ) = $result[0];
              
        return $return;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $stampId
     * @return unknown
     */
    public function getStampData($stampId)
    {
        $sql = 'SELECT A.stampId,
                       A.personId,
                       B.name as personName,
                       A.functionDescription,
                       A.register
                  FROM basStamp A
            INNER JOIN ONLY basPhysicalPerson B
                    ON (B.personId = A.personId)
                 WHERE A.stampId = ?';
                 
        $args = array($stampId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        list ( $return->stampId,
               $return->personId,
               $return->personName,
               $return->functionDescription,
               $return->register ) = $result[0];
              
        return $return;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @return unknown
     */
    public function getSavedOptions()
    {
        $sql = 'SELECT value
                  FROM basConfig
                 WHERE parameter = ?';
                 
        $args = array('SCHOLARSHIP_DESCRIPTION_SAVED_OPTIONS');

        $db = $this->getDatabase();
                 
        $result = $db->query(SAGU::prepare($sql, $args, false));

        return $result[0][0];
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $content
     * @return unknown
     */
    public function saveOptions($content)
    {
        $sql = 'UPDATE basConfig
                   SET value = ?
                 WHERE parameter = ?';
                 
        $args = array(
                        $content,
                        'SCHOLARSHIP_DESCRIPTION_SAVED_OPTIONS'
                     );

        $db = $this->getDatabase();
                 
        $result = $db->execute(SAGU::prepare($sql, $args, false));

        return $result;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $contractId
     * @return unknown
     */
    public function testIsListener($contractId)
    {
        $sql = 'SELECT isListener
                  FROM unit_acdContract
                 WHERE contractId = ?';
                 
        $db = $this->getDatabase();
                 
        $result = $db->query(SAGU::prepare($sql, $contractId));

        return $result[0][0];
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $personId
     * @param unknown_type $documentType
     * @return unknown
     */
    public function getPersonDocumentData($personId, $documentType = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business = new BusinessBasicBusDocument();
        
        if ( $documentType != null )
        {
            return $business->getDocument($personId, $documentType);
        }
        else
        {
            $db = $this->getDatabase();
            
            $sql = 'SELECT documentTypeId FROM basDocumentType';
            
            $dTypes = $db->query($sql);
            
            foreach ( $dTypes as $docType )
            {
                $personDocumentData[$docType[0]] = $business->getDocument($personId, $docType[0]);
            }

            return $personDocumentData;
        }
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $courseId
     * @param unknown_type $courseVersion
     * @param unknown_type $turnId
     * @param unknown_type $unitId
     * @return unknown
     */
    public function getCourseOccurrenceData($courseId, $courseVersion, $turnId, $unitId)
    {
        $sql = 'SELECT authorizationDate,
                       authorizationDocument,
                       status,
                       minimumConclusionCourse,
                       maximumConclusionCourse
                  FROM unit_acdcourseoccurrence
                 WHERE courseId = ?
                   AND courseVersion = ?
                   AND turnId = ?
                   AND unitId = ?';
                   
        $args = array($courseId, $courseVersion, $turnId, $unitId);
        
        $db = $this->getDatabase();
        
        $result = $db->query(SAGU::prepare($sql, $args));
        
        list ( $data->authorizationDate,
               $data->authorizationDocument,
               $data->status,
               $data->minimumConclusionCourse,
               $data->maximumConclusionCourse ) = $result[0];

        return $data;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $contractId
     * @return unknown
     */
    public function getCoursedEnrolledData($contractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $busContract  = new BusinessAcademicBusContract();
        $contractData = $busContract->getContract($contractId);
        
        $db = $this->getDatabase();
        
        $sql = '    SELECT sum(academicCredits),
                           sum(academicNumberHours)
                      FROM unit_acdEnroll A 
                INNER JOIN unit_acdcurriculum B 
                        ON (B.curriculumId = A.curriculumId) 
                INNER JOIN acdCurricularComponent C 
                        ON (C.curricularComponentId = B.curricularComponentId) 
                INNER JOIN unit_acdGroup D 
                        ON (D.groupId = A.groupId)
                INNER JOIN unit_acdlearningperiod E 
                        ON (E.learningPeriodId = D.learningPeriodId)
                     WHERE A.contractId = ?
                       AND A.statusId IN ('.SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC').') 
                       AND B.curriculumId IN (SELECT curriculumId 
                                                FROM unit_acdcurriculum
                                               WHERE courseId = ?
                                                 AND courseVersion = ?
                                                 AND turnId = ?
                                                 AND unitId = ?
                                                 AND curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'CURRICULUM_TYPE_NON_OPTIONAL') . '))';
        
        $args = array($contractId,
                      $contractData->courseId,
                      $contractData->courseVersion,
                      $contractData->turnId,
                      $contractData->unitId);
                       
        $resultCoursed = $db->query(SAGU::prepare($sql, $args));
        
        $sql = '    SELECT sum(academicCredits),
                           sum(academicNumberHours)
                      FROM unit_acdEnroll A 
                INNER JOIN unit_acdcurriculum B 
                        ON (B.curriculumId = A.curriculumId)
                INNER JOIN acdCurricularComponent C 
                        ON (C.curricularComponentId = B.curricularComponentId)
                INNER JOIN unit_acdGroup D 
                        ON (D.groupId = A.groupId)
                INNER JOIN unit_acdlearningperiod E 
                        ON (E.learningPeriodId = D.learningPeriodId)
                     WHERE A.contractId = ?
                       AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . ')
                       AND B.curriculumId IN (SELECT curriculumId 
                                                FROM unit_acdcurriculum
                                               WHERE courseId = ?
                                                 AND courseVersion = ?
                                                 AND turnId = ?
                                                 AND unitId = ?
                                                 AND curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'CURRICULUM_TYPE_NON_OPTIONAL') . '))';
                       
        $resultEnrolled = $db->query(SAGU::prepare($sql, $args));
        
        $data->enrollHoursCoursed    = $resultCoursed[0][1];
        $data->enrollHoursEnrolled   = $resultEnrolled[0][1];
        $data->enrollCreditsCoursed  = $resultCoursed[0][0];
        $data->enrollCreditsEnrolled = $resultEnrolled[0][0];
        
        return $data;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $contractId
     * @return unknown
     */
    public function getContractData($contractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business = new BusinessAcademicBusContract();
        
        $return = $business->getContract($contractId);
        
        $db = $this->getDatabase();
        
        $sql = 'SELECT TO_CHAR(statetime, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') 
                  FROM acdmovementcontract 
                 WHERE contractid = ? 
              ORDER BY statetime';
        
        $result = $db->query(SAGU::prepare($sql, $contractId));
        
        $return->contractBeginDate = $result[0][0];
        
        return $return;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $courseId
     * @param unknown_type $courseVersion
     * @param unknown_type $turnId
     * @param unknown_type $unitId
     * @param unknown_type $orderByGroup
     * @param unknown_type $orderByDescription
     * @return unknown
     */
    public function getCourseCurriculumData($courseId, $courseVersion, $turnId, $unitId, $orderByGroup=false, $orderByDescription=true)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $db = $this->getDatabase();

        $sql = 'SELECT A.curriculumId,
                       A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       A.unitId,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.semester,
                       A.showInScholarshipDescription,
                       A.curricularComponentGroupDocumentEndCourseId,
                       D.name AS curricularComponentGroupDocumentEndCourseName,
                       A.curricularComponentGroupElectiveId,
                       E.name AS curricularComponentGroupElectiveName,
                       A.curriculumTypeId,
                       F.description AS curriculumTypeDescription,
                       -- A.isConditionTrainingPeriod,
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.curricularComponentTypeId,
                       C.academicCredits,
                       C.academicNumberHours
                  FROM unit_acdcurriculum A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)
             LEFT JOIN acdCurricularComponentGroup D
                    ON (D.curricularComponentGroupId = A.curricularComponentGroupDocumentEndCourseId)
             LEFT JOIN acdCurricularComponentGroup E
                    ON (E.curricularComponentGroupId = A.curricularComponentGroupElectiveId)
            INNER JOIN acdCurriculumType F
                    ON (F.curriculumTypeId = A.curriculumTypeId)
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?
                   AND A.turnId = ?
                   AND A.unitId = ?
                   AND A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'SCHOLARSHIP_CURRICULUM_TYPE_NON_OPTIONAL') . ')';

        if ( $orderByGroup )
        {
            if ( $orderByDescription == true )
            {
                $sql .= ' ORDER BY A.curricularComponentGroupDocumentEndCourseId, curricularComponentName, A.semester';
            }
            else
            {
                $sql .= ' ORDER BY A.curricularComponentGroupDocumentEndCourseId, A.semester, curricularComponentName';
            }
        }
        else
        {
            if ( $orderByDescription == true )
            {
                $sql .= ' ORDER BY curricularComponentName, A.semester';
            }
            else
            {
                $sql .= ' ORDER BY A.semester, curricularComponentName';
            }
        }

        $args = array($courseId, $courseVersion, $turnId, $unitId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $courseId
     * @return unknown
     */
    public function getLearningPeriodData($courseId)
    {   
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business         = new BusinessAcademicBusMovementContract();
        $movementContract = $business->getLastMovementContract($courseId);

        if ( strlen($movementContract->learningPeriodId) > 0 )
        {
            $business           = new BusinessAcademicBusLearningPeriod();
            $learningPeriodData = $business->getLearningPeriod($movementContract->learningPeriodId);
        
            return $learningPeriodData;
        }
        else
        {
            return null;
        }
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $contractId
     */
    public function getContractStateData($contractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $contractData = $this->getContractData($contractId);
        
        if ( strlen($contractData->conclusionDate) > 0 )
        {
            $return->concluded = true;
            $conclusionDate    = explode('/', $contractData->conclusionDate);
            $return->year      = $conclusionDate[2];
        }
        else
        {
            $db = $this->getDatabase();
            
            $sql = 'SELECT B.isCloseContract
                      FROM acdMovementContract A
                INNER JOIN acdStateContract B
                        ON (B.stateContractId = A.stateContractId)
                     WHERE contractId = ? 
                  ORDER BY A.stateTime DESC';
                  
            $result = $db->query(SAGU::prepare($sql, $contractId));
            
            if ( $result[0][0] == 't' )
            {
                $return->locked = true;
            }
            else
            {
                $return->coursing = true;
            }
        }
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $courseId
     * @param unknown_type $courseVersion
     * @return unknown
     */
    public function getCourseAbilitiesData($courseId, $courseVersion)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $db = $this->getDatabase();
        
        $business = new BusinessAcademicBusCourseAbility();
        
        $filters->courseId        = $courseId;
        $filters->courseVersion   = $courseVersion;
        $filters->type            = 'G';
        $result->generalAbilities = $business->searchCourseAbility($filters);
        
        $filters->type = 'E';
        $result->especificAbilities = $business->searchCourseAbility($filters);
        
        return $result;
    }
}

?>
