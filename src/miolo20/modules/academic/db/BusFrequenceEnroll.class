<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdFrequenceEnroll table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@sois.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 03/11/2005
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessAcademicBusFrequenceEnroll extends sBusiness
{
    const ABSENSE = '0'; // Falta
    const PRESENCE = '1'; // Presenca
    const HALF_PRESENCE = '0.5'; // Meia presenca
    const JUSTIFIED_ABSENSE = '1.1'; // Falta justificada
    const NOT_REGISTERED = '-1';
 
    /**
     * Delete a record
     *
     * @param $enrollId (integer): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteFrequenceEnroll($enrollId)
    {
        $sql = 'DELETE FROM acdFrequenceEnroll
                      WHERE enrollId   = ? ';

        $args[] = $enrollId;

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }


    /**
     *
     * @param int $enrollId
     * @param int $scheduleId
     * @param int $frequencyDate
     * @param int $timeId
     *
     * @return boolean $result
     */
    public function deleteFrequenceEnrollByPk($enrollId, $scheduleId, $frequencyDate, $timeId)
    {
        $sql = 'DELETE FROM acdFrequenceEnroll
                  WHERE enrollId = ?
                    AND scheduleId = ?
                    AND frequencyDate = ?
                    AND timeId = ?';

        $args[] = $enrollId;
        $args[] = $scheduleId;
        $args[] = SAGU::convertDateToDb($frequencyDate);
        $args[] = $timeId;

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    public function getEnrollFrequencyOnDate($enrollId, $scheduleId, $frequencyDate, $timeId)
    {

        $sql = 'SELECT frequency
                  FROM acdFrequenceEnroll
                 WHERE enrollId      = ?
                   AND scheduleId    = ?
                   AND frequencyDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                   AND timeId        = ?';

        $args = array ( $enrollId,
                        $scheduleId,
                        $frequencyDate,
                        $timeId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertFrequenceEnroll($data)
    {
        $sql = 'INSERT INTO acdFrequenceEnroll
                            (enrollId,
                             scheduleId,
                             frequencyDate,
                             timeId,
                             frequency,
                             reasonCancellation,
                             justification,
                             justifiedAbsense,
                             justifiedAbsence)
                     VALUES (?,?,?,?,?,?,?,?,?)';

        $args = array( $data->enrollId,
                       $data->scheduleId,
                       $data->frequencyDate,
                       $data->timeId,
                       $data->frequency,
                       $data->reasonCancellation,
                       $data->justification,
                       MUtil::getBooleanValue($data->justifiedAbsense) ? DB_TRUE : DB_FALSE,
                       MUtil::getBooleanValue($data->justifiedAbsense) ? DB_TRUE : DB_FALSE);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    
    public function searchFrequenceEnrollObject($filters)
    {
        return SAGU::resultToObject($this->searchFrequenceEnroll($filters), array(
            'enrollId',
            'scheduleId',
            'frequencyDate',
            'timeId',
            'frequency',
            'timeHours',
            'reasonCancellation',
            'justification',
            'justifiedAbsense',
        ));
    }
    
    
    /**
     *
     * @param stdClass $filters
     * @param $filters->groupId Filtra pelo groupId da acdSchedule relacionada
     * @return array
     */
    public function searchFrequenceEnroll($filters)
    {
        $sql = 'SELECT  A.enrollId,
                        A.scheduleId,
                        A.frequencyDate,
                        A.timeId,
                        A.frequency,
                        EXTRACT(EPOCH FROM T.endHour - T.beginHour) / 60 / 60 AS timeHours,
                        A.reasonCancellation,
                        A.justification
                   FROM acdFrequenceEnroll A
             INNER JOIN acdTime T
                     ON A.timeId = T.timeId
             INNER JOIN acdSchedule S
                     ON A.scheduleId = S.scheduleId';

        if ( strlen($filters->enrollId) > 0 )
        {
            $where .= ' AND A.enrollId = ? ';
            $args[] = $filters->enrollId;
        }
        if ( strlen($filters->scheduleId) > 0 )
        {
            $where .= ' AND A.scheduleId = ? ';
            $args[] = $filters->scheduleId;
        }
        if ( strlen($filters->frequencyDate) > 0 )
        {
            $where .= ' AND A.frequencyDate = ? ';
            $args[] = $filters->frequencyDate;
        }
        if ( strlen($filters->groupId) > 0 )
        {
            $where .= ' AND S.groupId = ? ';
            $args[] = $filters->groupId;
        }

        if ( $where != '' )
        {
            $sql .= '    WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY A.frequencyDate ';

            $result  = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

   /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateFrequenceEnroll($data)
    {
        $sql = 'UPDATE acdFrequenceEnroll
                   SET frequency     = ?,
                       reasonCancellation = ?,
                       justification = ?,
                       justifiedAbsense = ?,
                       justifiedAbsence = ?
                 WHERE enrollId      = ?
                   AND scheduleId    = ?
                   AND frequencyDate = ?
                   AND timeId        = ? ';

        $args = array( $data->frequency,
                       $data->reasonCancellation,
                       $data->justification,
                       $data->justifiedAbsense,
                       $data->justifiedAbsense,
                       $data->enrollId,
                       $data->scheduleId,
                       $data->frequencyDate,
                       $data->timeId );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Function that insert or update data from a specific record
     *
     * @param $frequenceEnroll (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateOrInsertFrequenceEnroll($data)
    {
        if ( $this->checkFrequenceEnroll($data->enrollId, $data->scheduleId, $data->frequencyDate, $data->timeId) )
        {
            $ok = $this->insertFrequenceEnroll($data);
        }
        else
        {
            $ok = $this->updateFrequenceEnroll($data);
        }

        return $ok;
    }

    /**
     * Function that checks whether the frequency exists
     *
     * @param $frequenceEnroll (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function checkFrequenceEnroll($enrollId, $scheduleId, $frequencyDate, $timeId)
    {
        $sql = 'SELECT count(frequency)
                  FROM acdFrequenceEnroll A
                 WHERE A.enrollId      = ?
                   AND A.scheduleId    = ?
                   AND A.frequencyDate = ?
                   AND A.timeId        = ?';

        $args = array ( $enrollId,
                        $scheduleId,
                        $frequencyDate,
                        $timeId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return ( $result[0][0] == 0 );
    }

    public function getSumFrequency($enrollId)
    {
        $sql = 'SELECT sum(frequency)
                  FROM acdFrequenceEnroll
                 WHERE enrollId      = ? ';

        $args = array ( $enrollId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }
    
    
    /**
     * Obtem carga horaria cursada pelo enrollId passado
     * E opcionalmente filtrando tambem pelo groupId
     *
     * @param int $enrollId
     * @param int $groupId
     */
    public function getSumWorkLoad($enrollId, $groupId = null)
    {
        $sql = 'SELECT ROUND((EXTRACT(EPOCH FROM SUM(T.endHour - T.beginHour)) / 60 / 60)::NUMERIC, 2)
                  FROM acdTime T
            INNER JOIN acdFrequenceEnroll FE
                    ON FE.timeId = T.timeId
                 WHERE FE.enrollId = ?';

        $args = array($enrollId);
    
        if ( strlen($groupId) > 0 )
        {
            $sql .= ' AND EXISTS(SELECT 1
                                   FROM acdSchedule S
                                  WHERE S.groupId = ?
                                    AND S.scheduleId = FE.scheduleId)';
            $args[] = $groupId;
        }
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return MUtil::NVL($result[0][0], 0);
    }
    
    /**
     *
     * @return array
     */
    public static function listFrequencyTypes()
    {
        $module = SAGU::getFileModule(__FILE__);
        
        $opts[self::PRESENCE] = _M('Presença', $module);
        
        if ( SAGU::getParameter('BASIC', 'HALF_PRESENCE') == DB_TRUE )
        {
            $opts[self::HALF_PRESENCE] = _M('Meia presença', $module);
        }
        
        $opts[self::ABSENSE] = _M('Falta', $module);
        $opts[self::JUSTIFIED_ABSENSE] = _M('Falta justificada', $module);
        $opts[self::NOT_REGISTERED] = _M('Não registrada', $module);

        return $opts;
    }
    
    /**
     * Utilizado para tela de registro de frequencia em lote
     *
     * @param stdClass $filters
     * @return array
     */
    public function searchForRegisterInLot($filters)
    {
        // Cria campo (virtual) de frequencia
        $justAbs = self::JUSTIFIED_ABSENSE;
        $notReg = self::NOT_REGISTERED;
        $frequencyExpr = "(CASE
                              WHEN FE.justifiedAbsense THEN '{$justAbs}'::varchar
                              ELSE COALESCE(FE.frequency::varchar, '{$notReg}')
                           END)";
        
        $sql =  "SELECT E.enrollId,
                        S.scheduleId,
                        S.frequencyDate,
                        T.timeId,
                        PP.personId || ' - ' || PP.name AS personName,
                        datetouser(S.frequencyDate),
                        obterDiaExtenso( EXTRACT(DOW FROM S.frequencyDate)::int ) AS diasemana,
                        timeToUser(T.beginHour) || ' - ' || timeToUser(T.endHour) AS horario,
                        {$frequencyExpr} AS frequencia
                            
                   FROM ( SELECT A.occurrenceDates AS frequencyDate,
                                 C.timeId as timeId,
                                 B.scheduleId,
                                 B.groupId
                            FROM acdSchedule B
                      INNER JOIN ( SELECT UNNEST(occurrenceDates) AS occurrenceDates, 
                                          scheduleId 
                                     FROM acdSchedule ) AS A
                              ON ( A.scheduleId = B.scheduleId )
                      INNER JOIN ( SELECT UNNEST(timeIds) AS timeId, 
                                          scheduleId 
                                     FROM acdSchedule ) AS C
                              ON ( C.scheduleId = B.scheduleId )
                        ORDER BY 1 ) S                      
                   
            INNER JOIN unit_acdEnroll E
                    ON E.groupId = S.groupId
            INNER JOIN unit_acdContract C
                    ON C.contractId = E.contractId
       INNER JOIN ONLY basPhysicalPerson PP
                    ON PP.personId = C.personId
            INNER JOIN unit_acdGroup G
                    ON G.groupId = S.groupId
            INNER JOIN unit_acdlearningperiod LP
                    ON LP.learningPeriodId = G.learningPeriodId
            INNER JOIN acdTime T
                    ON T.timeId = S.timeId
             LEFT JOIN acdFrequenceEnroll FE
                    ON FE.enrollId = E.enrollId
                   AND FE.scheduleId = S.scheduleId
                   AND FE.frequencyDate = S.frequencyDate
                   AND FE.timeId = S.timeId";

        $where = '';
        
        // Nao permitir alterar frequencias futuras
        $where .= ' AND S.frequencyDate <= NOW()::date';
                        
        if ( count($filters->frequencyTypes) > 0 )
        {
            $vals = SDatabase::arrayToSQL($filters->frequencyTypes);
            $where .= " AND {$frequencyExpr} IN ({$vals}) ";
        }        
        if(( strlen($filters->existFrequency) > 0 ))
        {
            $where .= " AND {$frequencyExpr} <> ? ";
            $args[] = $filters->existFrequency;
        }
        if ( strlen($filters->groupId) > 0 )
        {
            $where .= ' AND S.groupId = ? ';
            $args[] = $filters->groupId;
        }
        if ( strlen($filters->periodId) > 0 )
        {
            $where .= ' AND LP.periodId = ? ';
            $args[] = $filters->periodId;
        }
        if ( strlen($filters->learningPeriodId) > 0 )
        {
            $where .= ' AND LP.learningPeriodId = ? ';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND E.contractId = ? ';
            $args[] = $filters->contractId;
        }
        if ( strlen($filters->enrollId) > 0 )
        {
            $where .= ' AND E.enrollId = ? ';
            $args[] = $filters->enrollId;
        }
        if ( strlen($filters->scheduleId) > 0 )
        {
            $where .= ' AND S.scheduleId = ? ';
            $args[] = $filters->scheduleId;
        }
        if ( strlen($filters->frequencyDate) > 0 )
        {
            $where .= ' AND S.frequencyDate = ? ';
            $args[] = $filters->frequencyDate;
        }
        if ( strlen($filters->beginDate) > 0 || strlen($filters->endDate) > 0 )
        {
            $where .= " AND S.frequencyDate BETWEEN coalesce(datetodb(?), '1000-01-01') AND coalesce(datetodb(?), '3000-01-01') ";
            $args[] = $filters->beginDate;
            $args[] = $filters->endDate;
        }
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND C.personId = ? ';
            $args[] = $filters->personId;
        }
        
        $result = array();
        
        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY PP.name, S.frequencyDate, T.beginHour';

            $result  = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
}
?>
