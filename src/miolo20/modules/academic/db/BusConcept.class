<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * Este arquivo controla a conexão e ações para a tabela acdConcept
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 *
 * @since
 * Class created on 02/03/2011
 *
 **/

/**
 * Class to manipulate the acdConcept table
 **/
class BusinessAcademicBusConcept extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $conceptId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getConcept($conceptId)
    {
        $sql = 'SELECT conceptId,
                       conceptGroupId,
                       conceptOrder,
                       enrollStatusId,
                       description,
                       subtitle,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM acdConcept
                 WHERE conceptId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $conceptId));

        $concept = new acdConcept();
        list ( $concept->conceptId,
               $concept->conceptGroupId,
               $concept->conceptOrder,
               $concept->enrollStatusId,
               $concept->description,
               $concept->subtitle,
               $concept->userName,
               $concept->dateTime,
               $concept->ipAddress ) = $result[0];

        return $concept;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchConcept($filters)
    {
        $sql= 'SELECT conceptId,
                      conceptGroupId,
                      conceptOrder,
                      enrollStatusId,
                      description,
                      subtitle
                 FROM acdConcept ';

        if ( strlen($filters->conceptId) > 0 )
        {
            $where .= ' AND conceptId = ? ';
            $args[] = $filters->conceptId;
        }
        if ( strlen($filters->conceptGroupId) > 0 )
        {
            $where .= ' AND conceptGroupId = ? ';
            $args[] = $filters->conceptGroupId;
        }
        if ( strlen($filters->conceptOrder) > 0 )
        {
            $where .= ' AND conceptOrder = ? ';
            $args[] = $filters->conceptOrder;
        }
        if ( strlen($filters->enrollStatusId) > 0 )
        {
            $where .= ' AND enrollStatusId = ? ';
            $args[] = $filters->enrollStatusId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->subtitle) > 0 )
        {
            $where .= ' AND subtitle = ? ';
            $args[] = $filters->subtitle;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY description';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (object): An object containing the search results
     **/
    public function searchConceptAsObject($filters)
    {
        $fields = array( 'conceptId',
                         'conceptGroupId',
                         'conceptOrder',
                         'enrollStatusId',
                         'descriptionConcept',
                         'subtitle' );

        return SAGU::resultToObject($this->searchConcept($filters), $fields);
    }


    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return true if succed, otherwise False
     *
     **/
    public function insertConcept($data)
    {
        $sql = 'INSERT INTO acdConcept
                            (conceptGroupId,
                             conceptOrder,
                             enrollStatusId,
                             description,
                             subtitle)
                     VALUES (?,?,?,?,?)';

        $args = array( $data->conceptGroupId,
                       $data->conceptOrder,
                       $data->enrollStatusId,
                       $data->description,
                       $data->subtitle );
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateConcept($data)
    {
        $sql = 'UPDATE acdConcept
                   SET conceptGroupId = ?,
                       conceptOrder = ?,
                       enrollStatusId = ?,
                       description = ?,
                       subtitle = ?
                 WHERE conceptId = ?';

        $args = array( $data->conceptGroupId,
                       $data->conceptOrder,
                       $data->enrollStatusId,
                       $data->description,
                       $data->subtitle,
                       $data->conceptId );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $conceptId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteConcept($conceptId)
    {
        $sql = 'DELETE FROM acdConcept
                      WHERE conceptId = ?';

        $result = $this->getDatabase()->execute( SAGU::prepare($sql, $conceptId) );

        return $result;
    }
    
    /**
     * Lista os conceitos de um grupo de conceitos
     * 
     * @param type $conceptGroupId
     * @return type
     */
    public static function listConceptByGroup($conceptGroupId)
    {
        $sql= ' SELECT description,
                       description
                  FROM acdConcept 
                 WHERE conceptGroupId = ? 
              ORDER BY description';
        
        $args[] = $conceptGroupId;
                
        return SDatabase::query(SAGU::prepare($sql, $args));
    }
}
?>
