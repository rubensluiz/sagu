<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdEvaluation table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * @since
 * Class created on 16/09/2005
 *
 * */

/**
 * Class to manipulate the acdEvaluation table
 * */
class BusinessAcademicBusEvaluation extends sBusiness
{   
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     * @returns (array): Return an array with the entire table
     * */
    public function listEvaluation()
    {
        return 'Not implemented';
    }

    /**
     * Return a specific record from the database
     *
     * @param $evaluationId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     * */
    public function getEvaluation( $evaluationId )
    {
        $sql = 'SELECT A.evaluationId,
                       A.professorId,
                       A.degreeId,
                       A.description,
                       TO_CHAR(A.dateForecast,\'' . SAGU::getParameter( 'BASIC', 'MASK_DATE' ) . '\') AS dateForecast,
                       A.weight,
                       A.groupId,
                       D.learningPeriodId,
                       E.courseId,
                       A.moodleEvaluationId,
                       A.maxPoints,
                       A.podeDigitar,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter( 'BASIC', 'MASK_TIMESTAMP' ) . '\'),
                       A.ipAddress
                  FROM unit_acdEvaluation A
            INNER JOIN unit_acdGroup D
                    ON (A.groupId = D.groupId )
            INNER JOIN unit_acdlearningperiod E
                    ON ( D.learningPeriodId = E.learningPeriodId )
                 WHERE A.evaluationId = ?';

        $args = array (
            $evaluationId
        );

        $db = $this->getDatabase();
        $result = $db->query( SAGU::prepare( $sql, $args ) );

        $evaluation = new AcdEvaluation();

        list ( $evaluation->evaluationId,
            $evaluation->professorId,
            $evaluation->degreeId,
            $evaluation->description,
            $evaluation->dateForecast,
            $evaluation->weight,
            $evaluation->groupId,
            $evaluation->learningPeriodId,
            $evaluation->courseId,
            $evaluation->moodleEvaluationId,
            $evaluation->maxPoints,
            $evaluation->podeDigitar,
            $evaluation->userName,
            $evaluation->dateTime,
            $evaluation->ipAddress ) = $result[0];

        return $evaluation;
    }
    
    /**
     * @return array
     */
    public function searchEvaluationAssoc($filters)
    {
        return SAGU::resultToArray($this->searchEvaluation($filters), array(
            'evaluationId',
            'periodId',
            'description',
            'degreeId',
            'degreeDescription',
            'weight',
            'groupId'
        ));
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     * */
    public function searchEvaluation( $filters )
    {
        $sql = 'SELECT A.evaluationId,
                       F.periodId,
                       A.description,
                       A.degreeId,
                       B.description as degreeDescription,
                       A.weight,
                       A.groupId,
                       E.curricularComponentId,
                       E.curricularComponentVersion,
                       E.curricularComponentId || \'/\' || E.curricularComponentVersion || \' - \' || E.name as curricularComponentDescription,
                       A.professorId,
                       G.name as professorName,
                       TO_CHAR(A.dateForecast,\'' . SAGU::getParameter( 'BASIC', 'MASK_DATE' ) . '\') AS dateForecast,
                       moodleEvaluationId
                  FROM unit_acdEvaluation A
            INNER JOIN acdDegree B
                    ON (B.degreeId = A.degreeId)
            INNER JOIN unit_acdGroup C
                    ON (C.groupId = A.groupId)
            INNER JOIN unit_acdcurriculum D
                    ON (D.curriculumId = C.curriculumId)
            INNER JOIN acdCurricularComponent E
                    ON (E.curricularComponentId = D.curricularComponentId AND
                        E.curricularComponentVersion = D.curricularComponentVersion)
            INNER JOIN unit_acdlearningperiod F
                    ON (F.learningPeriodId = B.learningPeriodId)
            INNER JOIN basPhysicalPersonProfessor G
                    ON (G.personId = A.professorId) ';

        if ( strlen( $filters->evaluationId ) > 0 )
        {
            $where .= ' AND A.evaluationId = ?';
            $args[] = $filters->evaluationId;
        }

        if ( strlen( $filters->professorId ) > 0 )
        {
            $where .= ' AND A.professorId = ?';
            $args[] = $filters->professorId;
        }

        if ( strlen( $filters->professorName ) > 0 )
        {
            $where .= ' AND UNACCENT(G.name) ILIKE UNACCENT(?)';
            $args[] = $filters->professorName . '%';
        }

        if ( strlen( $filters->degreeId ) > 0 )
        {
            $where .= ' AND A.degreeId = ?';
            $args[] = $filters->degreeId;
        }

        if ( strlen( $filters->description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $filters->description . '%';
        }

        if ( strlen( $filters->degreeDescription ) > 0 )
        {
            $where .= ' AND UNACCENT(B.description) ILIKE UNACCENT(?)';
            $args[] = $filters->degreeDescription . '%';
        }

        if ( strlen( $filters->dateForecast ) > 0 )
        {
            $where .= ' AND A.dateForecast = TO_DATE(?,\'' . SAGU::getParameter( 'BASIC', 'MASK_DATE' ) . '\')';
            $args[] = $filters->dateForecast;
        }

        if ( strlen( $filters->weight ) > 0 )
        {
            $where .= ' AND A.weight = ?';
            $args[] = $filters->weight;
        }

        if ( strlen( $filters->groupId ) > 0 )
        {
            $where .= ' AND A.groupId = ?';
            $args[] = $filters->groupId;
        }

        unset( $result );
        if ( strlen( $where ) > 0 )
        {
            $sql .= $where;

            $sql .= ' ORDER BY 2, 3, 11';

            $db = $this->getDatabase();
            $result = $db->query( SAGU::prepare( $sql, $args ) );
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     * */
    public function insertEvaluation( $data )
    {
        $sql = 'INSERT INTO acdEvaluation
                            (professorId,
                             groupId,
                             degreeId,
                             description,
                             dateForecast,
                             weight,
                             moodleEvaluationId,
                             maxPoints, 
                             podeDigitar)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?,\'' . SAGU::getParameter( 'BASIC', 'MASK_DATE' ) . '\'),
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array ( $data->professorId,
            $data->groupId,
            $data->degreeId,
            $data->description,
            $data->dateForecast,
            $data->weight,
            $data->moodleEvaluationId,
            $data->maxPoints,
            strlen($data->podeDigitar) > 0 ? $data->podeDigitar : BusinessServicesBusProfessor::TODOS_OS_PROFESSOR_DA_DISCIPLINA 
        );

        $db = $this->getDatabase();
        $result = $db->execute( SAGU::prepare( $sql, $args ) );

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     * */
    public function updateEvaluation( $data )
    {
        $currentEvaluation = $this->getEvaluation($data->evaluationId);
            
        $sql = 'UPDATE acdEvaluation
                   SET professorId = ?,
                       groupId = ?,
                       degreeId = ?,
                       description = ?,
                       dateForecast = TO_DATE(?,\'' . SAGU::getParameter( 'BASIC', 'MASK_DATE' ) . '\'),
                       weight = ?,
                       moodleEvaluationId = ?,
                       maxPoints = ?,
                       podeDigitar = ?
                 WHERE evaluationId = ?';

        $args = array ( $data->professorId,
            $data->groupId,
            $data->degreeId,
            $data->description,
            $data->dateForecast,
            $data->weight,
            $data->moodleEvaluationId,
            $data->maxPoints,
            strlen($data->podeDigitar) > 0 ? $data->podeDigitar : BusinessServicesBusProfessor::TODOS_OS_PROFESSOR_DA_DISCIPLINA,
            $data->evaluationId
        );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare( $sql, $args );

        for ( $i = 0; $i < count( $sqls ); $i++ )
        {
            $result = $db->execute( $sqls[$i] );
        }
        
        if ( $result && ($currentEvaluation->degreeId != $data->degreeId) )
        {
            $this->clearEvaluations($currentEvaluation->evaluationId);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $evaluationId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     * */
    public function deleteEvaluation( $evaluationId )
    {
        $sql = 'DELETE FROM acdEvaluation
                      WHERE evaluationId = ?';

        $db = $this->getDatabase();
        $result = $db->execute( SAGU::prepare( $sql, $evaluationId ) );

        return $result;
    }

    //FIXME: Verificar esta função
    /** DEPRECATED
     * Obtain the scheduleProfessorId by supplying the groupId and professorId keys
     * as parameters
     *
     * @param $groupId (int): The group id
     * @param $professorId (int): The professor id
     * @return (int): The scheduleProfessorId if it exists, otherwise NULL.
     * */
    public function getScheduleProfessorIdByGroupAndProfessorId( $groupId, $professorId )
    {
        $sql = 'SELECT A.scheduleProfessorId
                  FROM acdScheduleProfessor A
            INNER JOIN acdSchedule B
                    ON B.scheduleId = A.scheduleId
                 WHERE A.professorId = ?
                   AND B.groupId = ?';

        $args = array ( $professorId,
            $groupId );

        $db = $this->getDatabase();
        $result = $db->query( SAGU::prepare( $sql, $args ) );

        unset( $scheduleProfessorId );
        if ( count( $result ) == 1 )
        {
            $scheduleProfessorId = $result[0][0];
        }

        return $scheduleProfessorId;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     * */
    public function searchEvaluationDescription( $professorId, $degreeId, $groupId )
    {
        $sql = "SELECT evaluationId,
                       description
                  FROM unit_acdEvaluation
                 WHERE professorId = ?
                   AND degreeId = ?
                   AND groupId = ?
              ORDER BY description";

        $args = array (
            $professorId,
            $degreeId,
            $groupId );

        $db = $this->getDatabase();
        $result = $db->query( SAGU::prepare( $sql, $args ) );

        return $result;
    }
    
    public function countEvaluations($evaluationId)
    {
        $sql = 'SELECT COUNT(*) FROM acdevaluationenroll WHERE evaluationId = ?';

        $db = $this->getDatabase();
        $result = $db->query( SAGU::prepare( $sql, $evaluationId ) );

        return $result[0][0];
    }
    
    public function clearEvaluations($evaluationId)
    {
        $sql = 'DELETE FROM acdevaluationenroll WHERE evaluationId = ?';

        $db = $this->getDatabase();
        $result = $db->execute( SAGU::prepare( $sql, $evaluationId ) );

        return $result;
    }
}
?>
