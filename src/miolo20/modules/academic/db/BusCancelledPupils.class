<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdStateContract table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 29/08/2006
 *
 **/

/**
 * Class to manipulate the acdMovementContract table
 **/
class BusinessAcademicBusCancelledPupils extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function getPupilsCancelleds($filters)
    {
        $db     = $this->getDatabase();

        $sql = '    SELECT B.stateTime,
                           D.personId,
                           D.name as personName,
                           F.name || \' \' || D.location AS location,
                           D.number,
                           D.complement,
                           D.neighborhood,
                           E.name as cityName,
                           E.stateId,
                           D.zipCode
                      FROM ( SELECT max(B.stateTime) as stateTime,
                                    A.contractId
                               FROM unit_acdContract A
                         INNER JOIN acdMovementContract B
                                 ON (A.contractId = B.contractId)
                         INNER JOIN acdCourse C
                                 ON ( C.courseId = A.courseId AND
                                      C.formationLevelId = '.SAGU::getParameter('ACADEMIC', 'COURSE_FORMATIONLEVELID_GRADUATE').' )
                           GROUP BY  A.contractId ) as lastMovementContract
                INNER JOIN acdMovementContract B
                        ON ( lastMovementContract.stateTime  = B.stateTime AND
                             lastMovementContract.contractId = B.contractId )
                INNER JOIN unit_acdContract C
                        ON ( C.contractId = B.contractId )
           INNER JOIN ONLY basPerson D
                        ON ( D.personId = C.personId )
                INNER JOIN basCity E
                        ON ( E.cityId = D.cityId )
                INNER JOIN basLocationType F
                        ON (D.locationTypeId = F.locationTypeId)
                     WHERE B.learningPeriodId IN ( SELECT learningPeriodId 
                                                     FROM unit_acdlearningperiod
                                                    WHERE periodId ILIKE ?';
        $args = array($filters->lastPeriodOne);

        if ( strlen($filters->lastPeriodTwo) > 0 )
        {
            $sql   .= ' OR periodId ILIKE ?';
            $args[] = $filters->lastPeriodTwo;
        }

        if ( strlen($filters->lastPeriodThree) > 0 )
        {
            $sql   .= ' OR periodId ILIKE ?';
            $args[] = $filters->lastPeriodThree;
        }

        if ( strlen($filters->lastPeriodFour) > 0 )
        {
            $sql   .= ' OR periodId ILIKE ?';
            $args[] = $filters->lastPeriodFour;
        }

        if ( strlen($filters->lastPeriodFive) > 0 )
        {
            $sql   .= ' OR periodId ILIKE ?';
            $args[] = $filters->lastPeriodFive;
        }

        $sql .= '       )
                    AND B.stateContractId = '.SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_LOCKED').'
               ORDER BY B.contractId';

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

}

?>
