<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdMovementContract table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 30/08/2005
 *
 **/

/**
 * Class to manipulate the acdMovementContract table
 **/
class BusinessAcademicBusMovementContract extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     * @param $stateContractId (integer): Primary key of the record to be retrieved
     * @param $stateTime (timestamp): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getMovementContract($contractId, $stateContractId, $stateTime)
    {
        $sql = 'SELECT stateContractId,
                       reasonId,
                       TO_CHAR(stateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       learningPeriodId,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress,
                       disciplinas
                  FROM acdMovementContract A
                 WHERE A.contractId      = ?
                   AND A.stateContractId = ?
                   AND A.stateTime       = TO_TIMESTAMP(?,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')';

        $pk = array($contractId,
                    $stateContractId,
                    $stateTime );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $pk));

        $movementContract = new acdMovementContract();

        list ( $movementContract->stateContractId, 
               $movementContract->reasonId,
               $movementContract->stateTime,
               $movementContract->learningPeriodId,
               $movementContract->userName,
               $movementContract->dateTime,
               $movementContract->ipAddress, 
               $movementContract->disciplinas) = $result[0];

        return $movementContract; 
    }
    
    /**
     * Obtém o maior statetime registrado para o contrato.
     * 
     * @param type $contractId
     * @return type
     */
    public function getMaxStateTime($contractId, $stateContractId = null)
    {
        $sql = "SELECT TO_CHAR(MAX(stateTime), getParameter('BASIC', 'MASK_TIMESTAMP'))
                  FROM acdmovementcontract 
                 WHERE contractid = ?";
        
        $params = array();
        $params[] = $contractId;
        
        if ( strlen($stateContractId) > 0 )
        {
            $sql .= " AND stateContractId = ?";
            $params[] = $stateContractId;
        }
        
        $result = SDatabase::query($sql, $params);
        
        return $result[0][0];
    }
    
    /**
     * Return the last record for a movement contract by contract
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getLastMovementContract($contractId)
    {
        $sql = 'SELECT reasonId,
                       TO_CHAR(stateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       learningPeriodId,
                       stateContractId
                  FROM acdMovementContract A
                 WHERE A.contractId = ?
              ORDER BY stateTime DESC LIMIT 1';

        $pk = array( $contractId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $pk));

        $movementContract = new AcdMovementContract();

        list ( $movementContract->reasonId,
                $movementContract->stateTime,
                $movementContract->learningPeriodId,
                $movementContract->stateContractId) = $result[0];

        return $movementContract; 
    }



    public function getFirstMovementContractDiploma($contractId)
    {
        $sql = 'SELECT B.description,
                       TO_CHAR(MIN(stateTime),\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM acdMovementContract A
            INNER JOIN acdStateContract B
                    ON (B.stateContractId = A.stateContractId)
                 WHERE A.contractId = ? 
              GROUP BY B.description';

        $pk = array( $contractId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $pk));

        return $result; 
    }

    /**
     * Return the first record for a movement contract by contract
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getFirstMovementContract($contractId)
    {
        $sql = 'SELECT A.stateContractId,
                       A.reasonId
                  FROM acdMovementContract A
                 WHERE A.contractId = ?
              ORDER BY A.stateTime';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $contractId));

        $movementContract = new AcdMovementContract();

        list ( $movementContract->stateContractId,
               $movementContract->reasonId ) = $result[0];

        return $movementContract; 
    }
   
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchMovementContract($filters, $returnAsObject = false, $realStateTime = false, $isWebServices = false)
    {
        $stateTime = $realStateTime ? 'A.stateTime' : 'TO_CHAR(A.stateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')';
        
        $acdlearningperiod = "unit_acdlearningperiod";
        $acdContract = "unit_acdContract";
        
        // Para webservices.
        if ( $isWebServices )
        {
            $acdlearningperiod = "acdlearningperiod";
            $acdContract = "acdContract";
        } 
        
        $sql = "SELECT A.contractId,
                       A.stateContractId,
                       B.description,
                       A.reasonId,
                       C.description,
                       {$stateTime},
                       A.learningPeriodId,
                       D.description,
                       D.periodId,
                       disciplinas
                  FROM acdMovementContract A
             LEFT JOIN acdStateContract B
                    ON ( A.stateContractId = B.stateContractId )
             LEFT JOIN acdReason C
                    ON ( A.reasonId = C.reasonId )
             LEFT JOIN {$acdlearningperiod} D
                    ON ( A.learningPeriodId = D.learningPeriodId ) 
            INNER JOIN {$acdContract} E
                    ON ( A.contractId = E.contractId ) ";

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND E.personId = ?';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $filters->contractId;
        }
        if ( strlen($filters->stateContractId) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $filters->stateContractId;
        }
        if ( strlen($filters->reasonId) > 0 )
        {
            $where .= ' AND A.reasonId = ?';
            $args[] = $filters->reasonId;
        }
        if ( strlen($filters->stateTime) > 0 )
        {
            $where .= ' AND (A.stateTime = TO_TIMESTAMP(?,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP'). '\') OR
                             TO_CHAR(A.stateTime, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\') LIKE ? OR
                             TO_CHAR(A.stateTime, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') LIKE ?)';
            $args[] = $filters->stateTime;
            $args[] = $filters->stateTime;
            $args[] = $filters->stateTime;
        }
        if ( strlen($filters->learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen($filters->periodId) > 0 )
        {
            $where .= ' AND (D.periodId = ? AND A.stateTime BETWEEN D.beginDate AND D.endDate) ';
            $args[] = $filters->periodId;
        }
        if (strlen($filters->disciplinas)> 0 )
        {
            $where .= ' AND (A.disciplinas = ?)';
            $args[] = $filters->disciplinas;    
        }
        
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.contractId, A.stateTime DESC';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }
        
        $cols = array(
            'contractId',
            'stateContractId',
            'description',
            'reasonId',
            'description',
            'stateTime',
            'learningPeriodId',
            'description',
            'periodId'
        );
        
        return $returnAsObject ? SAGU::resultToObject($result, $cols) : $result;
    }
    
    public function insertOrUpdateMovementContract($data, $isWebServices = false)
    {
        $MIOLO = MIOLO::getInstance();
        
        $filters = new stdClass();
        $filters->contractId = $data->contractId;
        $filters->stateContractId = $data->stateContractId;
        $filters->stateTime = $data->stateTime;
        $filters->disciplinas = $data->disciplinas;
        
        if ( strlen($data->disciplinas)<= 0 )
        {
            $data->disciplinas = $this->obtemDisciplinasMatriculado($data->contractId, $data->learningPeriodId);
        }
        
        $rows = $this->searchMovementContract($filters, $isWebServices);
        
        if ( count($rows) > 0 )
        {
            $data->_stateTime = $data->stateTime;
            $ok = $this->updateMovementContract($data);
        }
        else
        {
            $ok = $this->insertMovementContract($data);
        }
        
        return $ok;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertMovementContract($data)
    {
        $sql = 'INSERT INTO acdMovementContract
                            (contractId,
                             stateContractId,
                             reasonId,
                             stateTime,
                             learningPeriodId,
                             disciplinas)
                     VALUES (?,
                             ?,
                             ?,
                             TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                             ?,
                             ?)';

        $args = array($data->contractId,
                      $data->stateContractId,
                      $data->reasonId,
                      $data->stateTime,
                      $data->learningPeriodId,
                      $data->disciplinas);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args, false));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateMovementContract($data)
    {
        $sql = 'UPDATE acdMovementContract
                   SET reasonId             = ?,
                       learningPeriodId     = ?,
                       stateTime            = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       disciplinas          = ?
                 WHERE contractId           = ? 
                   AND stateContractId      = ?
                   AND stateTime            = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')';

        $args = array( $data->reasonId,
                       $data->learningPeriodId,
                       $data->stateTime,
                       $data->disciplinas,
                       $data->contractId,
                       $data->stateContractId,
                       $data->_stateTime );

        $sqls = SAGU::prepare($sql, $args, false);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }
    
    /**
     * Update the statetime from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateStateTimeMovementContract($data)
    {
        $sql = 'UPDATE acdMovementContract
                   SET stateTime            = TO_TIMESTAMP(?,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                 WHERE contractId           = ? 
                   AND stateContractId      = ?
                   AND stateTime            = ?';

        $args = array( $data->stateTimeNew,
                       $data->contractId,
                       $data->stateContractId,
                       $data->stateTimeOld );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $contractId (string): Primary key for deletion
     * @param $stateContractId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteMovementContract($contractId, $stateContractId = null, $stateTime = null)
    {
        $pk = is_array($contractId) ? $contractId : array(
            $contractId,
            $stateContractId,
            $stateTime,
        );

        $sql = 'DELETE FROM acdMovementContract
                      WHERE contractId      = ?
                        AND stateContractId = ?
                        AND TO_CHAR(stateTime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')::timestamp = TO_TIMESTAMP(?,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')::timestamp';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $pk));

        return $result;
    }

    public function getMovementContractSummary($contractId)
    {
        $sql = 'SELECT TO_CHAR(A.stateTime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'), 
                       B.description,
                       A.stateContractId 
                  FROM acdMovementContract A 
            INNER JOIN acdStateContract B 
                    ON (A.stateContractId = B.stateContractId) 
                 WHERE A.contractId = ? 
              ORDER BY A.stateTime DESC';

        $args   = array($contractId);
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Check wether the proposed contract movement is allowed for the
     * specified contract at the specified timestamp. A check for consistent
     * insert of the state contract id and reason id pairs is also done.
     *
     * @param $contractId (integer): Contract on which the contract movement will be inserted
     * @param $stateContractId (integer): State to be used for the movement
     * @param $stateTime (timestamp): Timestamp at which the movement will be inserted
     *
     * @return (boolean): True if the movement is allowed. Otherwise, false.
     *
     **/
    public function movementContractInsertionAllowed($contractId, $stateContractId, $stateTime, $reasonId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // primeira movimentacao posterior a que se esta
        // tentando inserir
        $sql = '  SELECT stateContractId
                    FROM acdMovementContract
                   WHERE contractId = ?
                     AND stateTime > TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                ORDER BY stateTime ASC
                   LIMIT 1';

        $args   = array($contractId, $stateTime);
        $nextMovement = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        // primeira movimentacao anterior a que se esta
        // tentando inserir
        $sql = '  SELECT stateContractId
                    FROM acdMovementContract
                   WHERE contractId = ?
                     AND stateTime < TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                ORDER BY stateTime DESC
                   LIMIT 1';

        $args   = array($contractId, $stateTime);
        $prevMovement = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $businessStatesContract = new BusinessAcademicBusStatesContract();
        $stateContract = $businessStatesContract->getStatesContract($stateContractId);

        $ok = true;
        $business = new BusinessAcademicBusStateTransistion();
        $busContract = new BusinessAcademicBusContract();

        // se a movimentacao exige um motivo
        if ( $stateContract->needsReason == DB_TRUE )
        {
            // verifica se foi informado um motivo
            $ok = (strlen($reasonId) > 0);
            if ( ! $ok )
            {
                $this->addError(_M('Este estado contratual requer um motivo.', $module));
            }
            else
            {
                // checar se o par motivo (reasonId) e estado contratual (stateContractId)
                // eh valido
                $sql = 'SELECT COUNT(*)
                          FROM acdReason
                         WHERE reasonId = ?
                           AND stateContractId = ?';
                   
                $args = array ( $reasonId,
                                $stateContractId );
                        
                $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

                // se o par motivo e estado contratual nao existe
                if ( $result[0][0] == 0 )
                {
                    $ok = false;
                    $this->addError(_M('Esta combinação de estado contratual e motivo não é permitida.', $module));
                }
            }
        }

        if ( $ok )
        {
            // se nao ha movimentacoes
            if ( count($nextMovement) == 0 && count($prevMovement) == 0 )
            {
                // movimentacao a ser inserida deve ser de entrada
                $ok = ( $stateContract->inOutTransition == 'i' );
                if ( ! $ok )
                {
                    $this->addError(_M('A primeira movimentação contratual deve ser do tipo "entrada".', $module));
                }
            }
            // se ha movimentacoes anteriores e posteriores
            elseif ( count($nextMovement) > 0 && count($prevMovement) > 0 )
            {
                // movimentacao a ser inserida deve ser de transicao
                $ok = ( $stateContract->inOutTransition == 't' );
                if ( ! $ok )
                {
                    $this->addError(_M('Para inserir uma movimentação contratual entre duas outras, ela deve ser do tipo "transição".', $module));
                }
                else
                {
                    // a movimentacao deve ser permitida
                    $stateTransistion = $business->getStateTransistion($stateContractId, $nextMovement[0][0]);
                    $ok = isset($stateTransistion->beginStateId);
                    if ( ! $ok )
                    {
                        $nextStateContract = $businessStatesContract->getStatesContract($nextMovement[0][0]);
                        $this->addError(_M('O estado contratual @1 não permite o estado @2 como estado seguinte.', $module, $stateContract->stateContractId . ' - ' . $stateContract->description, $nextStateContract->stateContractId . ' - ' . $nextStateContract->description));
                    }
                    else 
                    {
                        $stateTransistion = $business->getStateTransistion($prevMovement[0][0], $stateContractId);
                        $ok = isset($stateTransistion->beginStateId);
                        if ( ! $ok )
                        {
                            $prevStateContract = $businessStatesContract->getStatesContract($prevMovement[0][0]);
                            $this->addError(_M('O estado contratual @1 não permite o estado @2 como estado anterior.', $module, $stateContract->stateContractId . ' - ' . $stateContract->description, $prevStateContract->stateContractId . ' - ' . $prevStateContract->description));
                        }
                    }
                }
            }
            // se somente houver movimentacao posterior a que se esta tentando inserir
            elseif ( count($nextMovement) > 0 )
            {
                // movimentacao a ser inserida deve ser de entrada
                $ok = ( $stateContract->inOutTransition == 'i' );
                if ( ! $ok )
                {
                    $this->addError(_M('A primeira movimentação contratual deve ser do tipo "entrada".', $module));
                }
                else 
                {
                    // a movimentacao deve ser possivel
                    $stateTransistion = $business->getStateTransistion($stateContractId, $nextMovement[0][0]);
                    $ok = isset($stateTransistion->beginStateId);
                    if ( ! $ok )
                    {
                        $nextStateContract = $businessStatesContract->getStatesContract($nextMovement[0][0]);
                        $this->addError(_M('O estado contratual @1 não permite o estado contratual @2 como estado seguinte.', $module, $stateContract->stateContractId . ' - ' . $stateContract->description, $nextStateContract->stateContractId . ' - ' . $nextStateContract->description));
                    }
                }
            }
            // se somente houver movimentacao anterior a que se esta tentando inserir
            elseif ( count($prevMovement) > 0 )
            {
                // movimentacao a ser inserida deve ser de transicao
                $ok = ( $stateContract->inOutTransition == 't' || $stateContract->inOutTransition == 'o' );
                if ( ! $ok )
                {
                    $this->addError(_M('A última movimentação contratual deve ser ou do tipo "transição" ou do tipo "saída".', $module));
                }
                else
                {
                    // a movimentacao devera ser permitida
                    $stateTransistion = $business->getStateTransistion($prevMovement[0][0], $stateContractId);
                    $ok = isset($stateTransistion->beginStateId);
                    if ( ! $ok )
                    {
                        $prevStateContract = $businessStatesContract->getStatesContract($prevMovement[0][0]);
                        $this->addError(_M('O estado contratual @1 não permite o estado @2 como estado anterior.', $module, $stateContract->stateContractId . ' - ' . $stateContract->description, $prevStateContract->stateContractId . ' - ' . $prevStateContract->description));
                    }
                }
            }
        }
        
        // Valida se aluno concluiu todas as disciplinas
        if ( $ok && ( SAGU::getParameter('ACADEMIC', 'VALIDA_CONCLUSAO_DISCIPLINAS') == DB_TRUE ) && $stateContract->stateContractId == SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_CONCLUSION_ALL_CURRICULAR_COMPONENT') )
        {
            $ok = $busContract->concluiuTodasDisciplinas($contractId);
            
            if ( !$ok )
            {
                $this->addError(_M('O aluno não concluiu todas as disciplinas do curso.', $module));
            }
        }

        return $ok;
    }

    /**
     * Obtém a data de desativação do contrtato
     * @param $contractId Código do contrato
     * @return (Date) Data da rescisão do contrato
     *
     */
    public function getContractDisactivationDate($contractId)
    {
        $sql = "SELECT TO_CHAR(getContractDisactivationDate(contractId), 'dd-mm-yyyy hh24:mi:ss')
                  FROM unit_acdContract
                 WHERE contractId = ?;";        
        $args   = array($contractId);
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $return = SAGU::toDefaultDate($result[0][0], SAGU::getParameter('BASIC', 'MASK_TIMESTAMP'));
        return $return;
    }
    
    /**
     * Método estático que retorna em forma de string todas as disciplinas
     * que o aluno está matriculado
     * @param type $contractId
     * @param type $learningPeriodId 
     */
    public static function obtemDisciplinasMatriculado($contractId, $learningPeriodId)
    {
        if ( strlen($contractId)>0 && strlen($learningPeriodId)>0 )
        {
            $sql = "SELECT acdobtemdisciplinasmatriculado($contractId, $learningPeriodId)";
            $result = SDatabase::query($sql);
        }
        
        $return = '';
        foreach($result as $line)
        {
            $return = $return . $line[0] . '<>';
        }
        return $return;
    }
}

?>
