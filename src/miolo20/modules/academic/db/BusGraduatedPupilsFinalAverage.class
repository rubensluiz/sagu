<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 04/08/2006
 *
 **/

/**
 * Class to manipulate the basPupilListing table
 **/
class BusinessAcademicBusGraduatedPupilsFinalAverage extends sBusiness
{
    /**
     *  Return the locked contracts list
     *
     *  @return (array): Array containing the results.
     */
     public function listGraduatedPupilsFinalAverage($filters)
     {
        $module = MIOLO::getCurrentModule();
        
        set_time_limit(0);
        
        $db = $this->getDatabase();
        
        $sql = 'SELECT B.courseId,
                       B.personId, 
                       D.name,
                       ROUND(avg(A.finalNote)::NUMERIC, \'' . SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE') . '\'),
                       getContractCurricularComponents(B.contractId, \'{' . SAGU::getParameter('ACADEMIC', 'CURRICULUM_TYPE_NON_OPTIONAL') . '}\', \'{' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') . '}\')
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdContract B
                    ON (B.contractId = A.contractId)
            INNER JOIN unit_acdcurriculum C
                    ON (C.curriculumId = A.curriculumId)
            INNER JOIN ONLY basPhysicalPersonStudent D
                    ON (D.personId = B.personId) 
                 WHERE C.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'CURRICULUM_TYPE_NON_OPTIONAL') . ')
                   AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED') . ')';
                            
        if (strlen($filters->periodId) > 0)
        {
            $where .= ' AND B.formationPeriodId = ? ';
            $args[] = $filters->periodId;
        }
        if (strlen($filters->courseId) > 0)
        {
            $where .= ' AND B.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if (strlen($filters->courseVersion) > 0)
        {
            $where .= ' AND B.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if (strlen($filters->unitId) > 0)
        {
            $where .= ' AND B.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if (strlen($filters->turnId) > 0)
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $filters->turnId;
        }
                                 
        if (strlen($where) > 0)
        {
            $sql .= $where . ' GROUP BY B.courseId, B.personId, D.name, B.contractId ORDER BY 4 DESC, 5, 3';
            
            $result = $db->query(SAGU::prepare($sql, $args));
             
            return $result;
        }
        return null;
    }
}
?>
