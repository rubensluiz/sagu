<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2006
 *
 **/

/**
 * Class to manipulate tables
 **/
class BusinessAcademicBusConditionUnblockList extends sBusiness
{
    public function listConditionUnblockPupils($periodId, $formationLevelId)
    {
        $module = MIOLO::getCurrentModule();
        
        set_time_limit(0);
        
        $db = $this->getDatabase();
        
        $sql = 'SELECT DISTINCT B.personId,
                       F.name,
                       C.curriculumId,
                       D.curricularComponentId,
                       D.curricularComponentVersion,
                       E.name,
                       B.courseId,
                       B.courseVersion,
                       I.name,
                       B.unitId,
                       J.description,
                       B.turnId,
                       K.description
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdContract B
                    ON (B.contractId = A.contractId)
            INNER JOIN unit_acdGroup C
                    ON (C.groupId = A.groupId)
            INNER JOIN unit_acdcurriculum D
                    ON (D.curriculumId = C.curriculumId)
            INNER JOIN acdCurricularComponent E
                    ON (E.curricularComponentId = D.curricularComponentId AND
                        E.curricularComponentVersion = D.curricularComponentVersion)
            INNER JOIN ONLY basPhysicalPersonStudent F
                    ON (F.personId = B.personId)
            INNER JOIN unit_acdlearningperiod G
                    ON (G.learningPeriodId = C.learningPeriodId)
            INNER JOIN acdCurricularComponentUnblock H
                    ON (H.curriculumId     = C.curriculumId AND
                        H.learningPeriodId = C.learningPeriodId AND
                        H.contractId       = A.contractId)
            INNER JOIN acdCourse I
                    ON (I.courseId = B.courseId)
            INNER JOIN basUnit J
                    ON (J.unitId = B.unitId)
            INNER JOIN basTurn K
                    ON (K.turnId = B.turnId)
                 WHERE G.periodId = ?
                   AND I.formationLevelId = ?
                   AND H.isConditionBreak = true
              ORDER BY B.courseId, B.courseVersion, B.unitId, B.turnId, C.curriculumId, F.name';
              
        $args = array(  $periodId,
                        $formationLevelId
                     );
        $result = $db->query(SAGU::prepare($sql, $args));
            
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                list (  $personId,
                        $personName,
                        $curriculumId,
                        $curricularComponentId,
                        $curricularComponentVersion,
                        $curricularComponentDesc,
                        $courseId,
                        $courseVersion,
                        $courseName,
                        $unitId,
                        $unitDesc,
                        $turnId,
                        $turnDesc) = $res;
                        
                $index = $courseId . '-' . $courseVersion . '-' . $unitId . '-' . $turnId;
                
                $return[$index]->title = $courseId . '(' . $courseVersion . ') - ' . $courseName . ' - ' . $unitDesc . ' - ' . $turnDesc;
                $return[$index]->currComps[$curriculumId]->title  = $curricularComponentId . '(' . $curricularComponentVersion . ') - ' . $curricularComponentDesc;
                $return[$index]->currComps[$curriculumId]->data[] = array($personId, $personName);
                $return[$index]->total++;
            }
            return $return;
        }
        return null;
    }
}
?>
