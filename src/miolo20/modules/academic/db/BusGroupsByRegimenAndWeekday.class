<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2006
 *
 **/

/**
 * Class to manipulate tables
 **/
class BusinessAcademicBusGroupsByRegimenAndWeekday extends sBusiness
{
    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $filters
     * @return unknown
     */
    public function listGroupsByRegimenAndWeekday($filters)
    {
        $module = MIOLO::getCurrentModule();
        
        set_time_limit(0);
        
        $sql = 'SELECT A.groupId,
                       A.totalEnrolled,
                       A.curriculumId,
                       G.curricularComponentId,
                       G.curricularComponentVersion,
                       H.name,
                       B.courseId,
                       B.courseVersion,
                       D.shortName,
                       B.unitId,
                       E.description,
                       B.turnId,
                       F.description
                  FROM unit_acdGroup A
            INNER JOIN unit_acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN unit_acdcurriculum G
                    ON (G.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent H
                    ON (H.curricularComponentId = G.curricularComponentId AND
                        H.curricularComponentVersion = G.curricularComponentVersion)
            INNER JOIN acdSchedule C
                    ON (C.groupId = A.groupId)
            INNER JOIN acdCourse D
                    ON (D.courseId = B.courseId)
            INNER JOIN basUnit E
                    ON (E.unitId = B.unitId)
            INNER JOIN basTurn F
                    ON (F.turnId = B.turnId) ';
              
        if ( strlen($filters->periodId) > 0 )
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $filters->periodId;
        }
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND B.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if ( strlen($filters->unitId) > 0 )
        {
            $where .= ' AND B.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if ( strlen($filters->turnId) > 0 )
        {
            $where .= ' AND B.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if ( strlen($filters->regimenId) > 0 )
        {
            $where .= ' AND A.regimenId = ? ';
            $args[] = $filters->regimenId;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql   .= ' WHERE ' . substr($where, 4) . ' ORDER BY A.groupId ';
            
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            
            return $result;
        }
        
        return null;
    }
}
?>
