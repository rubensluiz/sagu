<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdInterchange table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/09/2005
 *
 **/

/**
 * Class to manipulate the acdInterchange table
 **/
class BusinessAcademicBusInterchange extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listInterchange()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     * @param $beginDate (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getInterchange($interchangeId)
    {
        $sql = 'SELECT A.interchangeId,
                       B.personId,
                       A.contractId,
                       A.interchangeTypeId,
                       H.description AS interchangeTypeDescription,
                       A.interchangeTypeComplement,
                       A.activity,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS beginDate,
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS endDate,
                       A.originCountryId,
                       D.name AS originCountryName,
                       A.originInstitutionId,
                       E.name AS originInstitutionName,
                       A.destinationCountryId,
                       D.name AS destinationCountryName,
                       A.destinationInstitutionId,
                       E.name AS destinationInstitutionName,
                       A.isRemunerated,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdInterchange A
             LEFT JOIN unit_acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON (C.personId = B.personId)
             LEFT JOIN basCountry D
                    ON (D.countryId = A.originCountryId)
        LEFT JOIN ONLY basLegalPerson E
                    ON (E.personId = A.originInstitutionId)
             LEFT JOIN basCountry F
                    ON (F.countryId = A.destinationCountryId)
        LEFT JOIN ONLY basLegalPerson G
                    ON (G.personId = A.destinationInstitutionId)
            INNER JOIN acdInterchangeType H
                    ON (H.interchangeTypeId = A.interchangeTypeId)
                 WHERE A.interchangeId = ?';

        $pk = array($interchangeId);

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));

        $interchange = new AcdInterchange();

        list ( $interchange->interchangeId,
               $interchange->personId,
               $interchange->contractId,
               $interchange->interchangeTypeId,
               $interchagenDescription->interchangeTypeDescription,
               $interchange->interchangeTypeComplement,
               $interchange->activityInterchange,
               $interchange->beginDate,
               $interchange->endDate,
               $interchange->originCountryId,
               $interchange->originCountryName,
               $interchange->originInstitutionId,
               $interchange->originInstitutionName,
               $interchange->destinationCountryId,
               $interchange->destinationCountryName,
               $interchange->destinationInstitutionId,
               $interchange->destinationInstitutionName,
               $interchange->isRemunerated,
               $interchange->userName,
               $interchange->dateTime,
               $interchange->ipAddress ) = $result[0];

        return $interchange; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchInterchange($filters)
    {
        $sql = 'SELECT A.interchangeId,
                       A.contractId,
                       A.personId,
                       C.name AS personName,
                       A.interchangeTypeId,
                       F.description AS interchangeTypeDescription,
                       A.interchangeTypeComplement,
                       A.activity,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS beginDate,
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS endDate,
                       A.originCountryId,
                       D.name AS originCountryName,
                       A.originInstitutionId,
                       E.name AS originInstitutionName,
                       A.destinationCountryId,
                       G.name AS destinationCountryName,
                       A.destinationInstitutionId,
                       H.name AS destinationInstitutionName,
                       A.isRemunerated,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdInterchange A
             LEFT JOIN unit_acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON (C.personId = A.personId)
             LEFT JOIN basCountry D
                    ON (D.countryId = A.originCountryId)
             LEFT JOIN basCountry G
                    ON (G.countryId = A.destinationCountryId)
        LEFT JOIN ONLY basLegalPerson E
                    ON (E.personId = A.originInstitutionId)
        LEFT JOIN ONLY basLegalPerson H
                    ON (H.personId = A.destinationInstitutionId)
            INNER JOIN acdInterchangeType F
                    ON (F.interchangeTypeId = A.interchangeTypeId)';

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $filters->contractId;
        }
        if ( strlen($filters->interchangeId) > 0 )
        {
            $where .= ' AND A.interchangeId = ?';
            $args[] = $filters->interchangeId;
        }
        if ( strlen($filters->interchangeTypeId) > 0 )
        {
            $where .= ' AND A.interchangeTypeId = ?';
            $args[] = $filters->interchangeTypeId;
        }
        if ( strlen($filters->interchangeTypeComplement) > 0 )
        {
            $where .= ' AND A.interchangeTypeComplement ILIKE ?';
            $args[] = $filters->interchangeTypeComplement;
        }
        if ( strlen($filters->activityInterchange) > 0 )
        {
            $where .= ' AND A.activity ILIKE ?';
            $args[] = $filters->activityInterchange;
        }
        if ( strlen($filters->beginDate) > 0 )
        {
            $where .= ' AND A.beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->beginDate;
        }
        if ( strlen($filters->endDate) > 0 )
        {
            $where .= ' AND A.endDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->endDate;
        }
        if ( strlen($filters->originCountryId) > 0 )
        {
            $where .= ' AND A.originCountryId = ?';
            $args[] = $filters->originCountryId;
        }
        if ( strlen($filters->originInstitutionId) > 0 )
        {
            $where .= ' AND A.originInstitutionId = ?';
            $args[] = $filters->originInstitutionId;
        }
        if ( strlen($filters->destinationcountryId) > 0 )
        {
            $where .= ' AND A.destinationCountryId = ?';
            $args[] = $filters->destinationcountryId;
        }
        if ( strlen($filters->destinationInstitutionId) > 0 )
        {
            $where .= ' AND A.destinationInstitutionId = ?';
            $args[] = $filters->destinationInstitutionId;
        }
        if ( strlen($filters->isRemunerated) > 0 )
        {
            $where .= ' AND A.isRemunerated = ?';
            $args[] = $filters->isRemunerated;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.beginDate DESC';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertInterchange($data)
    {
        $sql = 'INSERT INTO acdInterchange
                            (personId,
                             contractId,
                             interchangeTypeId,
                             interchangeTypeComplement,
                             activity,
                             beginDate,
                             endDate,
                             originCountryId,
                             originInstitutionId,
                             destinationCountryId,
                             destinationInstitutionId,
                             isRemunerated)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( 
                       $data->personId,
                       $data->contractId,
                       $data->interchangeTypeId,
                       $data->interchangeTypeComplement,
                       $data->activity,
                       $data->beginDate,
                       $data->endDate,
                       $data->originCountryId,
                       $data->originInstitutionId,
                       $data->destinationCountryId,
                       $data->destinationInstitutionId,
                       $data->isRemunerated
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateInterchange($data)
    {
        $sql = 'UPDATE acdInterchange
                   SET personId = ?,
                       contractId = ?,
                       interchangeTypeId = ?,
                       interchangeTypeComplement = ?,
                       activity = ?,
                       beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       endDate           = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       originCountryId         = ?,
                       originInstitutionId     = ?,
                       destinationCountryId         = ?,
                       destinationInstitutionId     = ?,
                       isRemunerated     = ?
                 WHERE interchangeId = ?';

        $args = array( 
                       $data->personId,
                       $data->contractId,
                       $data->interchangeTypeId,
                       $data->interchangeTypeComplement,
                       $data->activity,
                       $data->beginDate,
                       $data->endDate,
                       $data->originCountryId,
                       $data->originInstitutionId,
                       $data->destinationCountryId,
                       $data->destinationInstitutionId,
                       $data->isRemunerated,
                       $data->interchangeId
                     );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *A.interchangeId,
     * @param $contractId (string): Primary key for deletion
     * @param $beginDate (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteInterchange($interchangeId)
    {
        $sql = 'DELETE FROM acdInterchange
                      WHERE interchangeId = ?';

        $pk = array(
                     $interchangeId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));

        return $result;
    }

}

?>
