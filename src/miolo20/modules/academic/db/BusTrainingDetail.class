<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Este arquivo controla a conexão e ações para a tabela AcdTrainingDetail
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 25/02/2011
 *
 **/

class BusinessAcademicBusTrainingDetail extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $trainingEmphasisId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getTrainingDetail($trainingDetailId)
    {
        $sql = 'SELECT trainingDetailId,
                       trainingemphasisid,
                       enrollid,
                       responsibleid,
                       realizedactivities,
                       place,
                       startdate,
                       enddate,
                       duration,
                       username,
                       dateTime,
                       ipAddress
                  FROM unit_acdTrainingEmphasis
                 WHERE trainingEmphasisId = ?';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $calendarYear));
        
        $object = new AcdTrainingDetail();
        
        list($object->trainingDetailId,
                $object->trainingEmphasisId,
                $object->enrollId,
                $object->responsibleId,
                $object->realizedActivities,
                $object->place,
                $object->startDate,
                $object->endDate,
                $object->duration,
                $object->userName,
                $object->dateTime,
                $object->ipAddress) = $result[0];
        
        return $object;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchTrainingDetail($filters, $toObject = false)
    {
        if ( $filters->isFromGrid )
        {
            $columns = 'E.groupId,
                   TD.enrollId,
                   _PP.personId AS personIdEnroll,
                   _PP.name AS personNameEnroll';

            $groupBy = '1,2,3,4';
            $orderBy = 'personNameEnroll';
        }
        else
        {
            $fields = array(
               'trainingDetailId',
               'trainingEmphasisId',
               'enrollId',
               'responsibleId',
               'realizedActivities',
               'place',
               'startDate',
               'endDate',
               'duration',
               'personId',
               'responsibleName',
               'personIdEnroll',
               'personNameEnroll',
               'groupId',
               'curricularComponentName',
            );

            $columns = 'TD.trainingDetailId,
                       TD.trainingemphasisid,
                       TD.enrollId,
                       TD.responsibleId,
                       TD.realizedActivities,
                       TD.place,
                       TO_CHAR(TD.startDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(TD.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TD.duration,
                       PP.personId,
                       PP.name AS responsibleName,
                       _PP.personId AS personIdEnroll,
                       _PP.name AS personNameEnroll,
                       E.groupId,
                       CC.shortName AS curricularComponentName';

            $orderBy = 'TD.trainingemphasisid';
        }

        $sql = "SELECT {$columns}
                 FROM acdtrainingDetail TD
      INNER JOIN ONLY basphysicalPerson PP
                   ON (PP.personId = TD.responsibleId)
           INNER JOIN unit_acdEnroll E
                   ON (E.enrollId = TD.enrollId)
           INNER JOIN unit_acdContract C
                   ON (C.contractId = E.contractId)
      INNER JOIN ONLY basPhysicalPerson _PP
                   ON (_PP.personId = C.personId)
           INNER JOIN unit_acdGroup G
                   ON (G.groupId = E.groupId)
           INNER JOIN unit_acdcurriculum C1
                   ON (C1.curriculumId = G.curriculumId)
           INNER JOIN acdCurricularComponent CC
                   ON (CC.curricularComponentId = C1.curricularComponentId
                  AND  CC.curricularComponentVersion = C1.curricularComponentVersion)";

        if ( strlen($filters->trainingDetailId) > 0 )
        {
            $where .= ' AND TD.trainingDetailId = ? ';
            $args[] = $filters->trainingDetailId;
        }

        if ( strlen($filters->trainingEmphasisId) > 0 )
        {
            $where .= ' AND TD.trainingEmphasisId = ? ';
            $args[] = $filters->trainingEmphasisId;
        }

        if ( strlen($filters->enrollId) > 0 )
        {
            $where .= ' AND TD.enrollId = ? ';
            $args[] = $filters->enrollId;
        }

        if ( strlen($filters->responsibleId) > 0 )
        {
            $where .= ' AND TD.responsibleId = ? ';
            $args[] = $filters->responsibleId;
        }

        if ( strlen($filters->realizedActivities) > 0 )
        {
            $where .= ' AND TD.realizedActivities = ? ';
            $args[] = $filters->realizedActivities;
        }

        if ( strlen($filters->place) > 0 )
        {
            $where .= ' AND TD.place = ? ';
            $args[] = $filters->place;
        }

        if ( strlen($filters->startDate) > 0 )
        {
            $where .= ' AND TD.startDate = ? ';
            $args[] = $filters->startDate;
        }

        if ( strlen($filters->endDate) > 0 )
        {
            $where .= ' AND TD.endDate = ? ';
            $args[] = $filters->endDate;
        }

        if ( strlen($filters->duration) > 0 )
        {
            $where .= ' AND TD.duration = ? ';
            $args[] = $filters->duration;
        }

        if ( strlen($filters->groupId) > 0 )
        {
            $where .= ' AND E.groupId = ?';
            $args[] = $filters->groupId;
        }

        if ( strlen($filters->personIdEnroll) > 0 )
        {
            $where .= ' AND _PP.personId = ?';
            $args[] = $filters->personIdEnroll;
        }

        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $sql .= MUtil::IfNull($groupBy, '', " GROUP BY {$groupBy}");
            $sql .= MUtil::IfNull($orderBy, '', " ORDER BY {$orderBy}");
            
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }
        
        return $toObject ? SAGU::resultToObject($result, $fields) : $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertTrainingDetail($data)
    {
        $sql = 'INSERT INTO acdtrainingDetail
                              (trainingemphasisid,
                               enrollid,
                               responsibleid,
                               realizedactivities,
                               place,
                               startdate,
                               enddate,
                               duration)
                     VALUES (?, ?, ?, ?, ?,
                     TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                     TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                     ?)';
        
        $args = array(
            $data->trainingEmphasisId,
            $data->enrollId,
            $data->responsibleId,
            $data->realizedActivities,
            $data->place,
            $data->startDate,
            $data->endDate,
            $data->duration,
        );
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateTrainingDetail($data)
    {
        $sql = 'UPDATE acdtrainingDetail
                   SET trainingemphasisid = ?,
                       enrollid = ?,
                       responsibleid = ?,
                       realizedactivities = ?,
                       place = ?,
                       startdate = ?,
                       enddate = ?,
                       duration = ?
                 WHERE trainingDetailId = ?';
        
        $args = array(
            $data->trainingEmphasisId,
            $data->enrollId,
            $data->responsibleId,
            $data->realizedActivities,
            $data->place,
            $data->startDate,
            $data->endDate,
            $data->duration,
            $data->trainingDetailId,
        );
        
        $db = $this->getDatabase();
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $trainingEmphasisId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteTrainingDetail($trainingDetailId)
    {
        $sql = 'DELETE FROM acdtrainingDetail
                      WHERE trainingDetailId = ?';

        $args[] = $trainingDetailId;
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
 
        return $result;
    }
}

?>
