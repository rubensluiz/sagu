<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basCourse table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessAcademicBusCourse extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCourse($somenteAtivos = false)
    {
        if ( $somenteAtivos )
        {
            $sql = "SELECT CO.courseId,
                           CO.name
                      FROM acdCourse CO
                     --Lista somente cursos que tenham alunos ativos.
                     WHERE EXISTS (SELECT C.contractId
                                     FROM acdContract C
                               INNER JOIN acdStateContract SC
                                       ON SC.stateContractId = getContractState(C.contractId)
                                    WHERE C.courseId = CO.courseId
                                      AND SC.inouttransition <> 'O')";
            $ret = SDatabase::query($sql);
        }
        else
        {
            $db  = $this->getDatabase();
            $sql = 'SELECT courseId,
                           name   
                      FROM acdCourse   
                  ORDER BY name ';
            $ret = $db->query($sql);    
        }
        
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCourse($courseId)
    {
        $sql = 'SELECT courseId,
                       formationLevelId,
                       name,
                       shortName,
                       acronym,
                       centerId,
                       to_char(beginDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       moreInfo,
                       to_char(endDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       knowledgeAreaId,
                       requirements,
                       obs,
                       reportOrder,
                       educationAreaId,
                       incomeSourceId, 
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress,
                       degree,
                       enrollbooksequence
                  FROM acdCourse
                 WHERE courseId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $courseId));
        

        $course = new acdCourse();
        list ( $course->courseId,
               $course->formationLevelId,
               $course->name,
               $course->shortName,
               $course->acronym,
               $course->centerId,
               $course->beginDate,
               $course->moreInfo,
               $course->endDate,
               $course->knowledgeAreaId,
               $course->requirements,
               $course->obs,
               $course->reportOrder,
               $course->educationAreaId,
               $course->incomeSourceId,
               $course->userName,
               $course->dateTime,
               $course->ipAddress,
               $course->degree,
               $course->enrollBookSequence ) = $result[0];

        return $course; 
    }

    //FIXME: Verificar esta função. está retornando 2 vezes o código do período letivo. Esta função foi transferida para este arquivo para uma melhor estruturação das informações
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCourses($filters)
    {
        $sql = 'SELECT A.learningPeriodId,
                       A.courseId,
                       A.courseVersion,
                       E.name,
                       C.description,
                       D.description,
                       A.learningPeriodId
                  FROM unit_acdlearningperiod A 
            INNER JOIN unit_acdcourseoccurrence B
                    ON (A.courseId      = B.courseId AND
                        A.courseVersion = B.courseVersion AND
                        A.turnId        = B.turnId AND
                        A.unitId        = B.unitId)
             INNER JOIN basTurn C
                     ON (C.turnId = A.turnId)
             INNER JOIN basUnit D
                     ON (D.unitId = A.unitId)
             INNER JOIN acdCourse E
                     ON (E.courseId = A.courseId)';

        if ( strlen($filters->formationLevelId) > 0 )
        {
            $where .= ' AND E.formationLevelId = ? ';
            $args[] = $filters->formationLevelId;
        }
        if ( strlen($filters->status) > 0 )
        {
            $where .= ' AND B.status = ? ';
            $args[] = $filters->status;
        }
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if ( strlen($filters->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if ( strlen($filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if ( strlen($filters->periodId) > 0 )
        {
            $where .= ' AND A.periodId = ? ';
            $args[] = $filters->periodId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY E.name';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));

        }

        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getCoursesByFormationLevel($filters)
    {
        //Esta funçao e diferente das demais geraçoes em lote
        //devido a pegar cursos por periodo, sem period letivo ainda
        //nas demais, este periodo letivo ja existe
        $sql = 'SELECT A.courseId || \';\' || A.courseVersion || \';\' || A.turnId || \';\' || A.unitId,
                       A.courseId,
                       A.courseVersion,
                       D.name,
                       B.description,
                       C.description,
                       E.learningPeriodId
                  FROM unit_acdcourseoccurrence A
            INNER JOIN basTurn B
                    ON (B.turnId = A.turnId)
            INNER JOIN basUnit C
                    ON (C.unitId = A.unitId)
            INNER JOIN acdCourse D
                    ON (D.courseId = A.courseId)
             LEFT JOIN unit_acdlearningperiod E
                    ON (E.courseId = A.courseId AND
                        E.courseVersion = A.courseVersion AND
                        E.turnId = A.turnId AND 
                        E.unitId = A.unitId AND
                        E.periodId = \''.$filters->periodId.'\')
                 WHERE A.status           = true
                   AND D.formationLevelId = ?';

        $args = array ( 
                $filters->formationLevelId 
        );

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSerialCourse($courseId, $courseVersion, $courseVersionTypeId, $personId)
    {
        $sql = 'SELECT C.name as courseName,
                       E.name as className
                  FROM acdCourseVersion A
            INNER JOIN unit_acdContract B
                    ON (B.courseId           = A.courseId AND
                        B.courseVersion      = A.courseVersion AND
                        B.personId           = \''.$personId.'\')
            INNER JOIN acdCourse C
                    ON (C.courseId = A.courseId)
            INNER JOIN unit_acdclasspupil D
                    ON (D.contractId = B.contractId)
            INNER JOIN unit_acdclass E
                    ON (E.classId = D.classId)
                 WHERE A.courseId            = \''.$courseId.'\'
                   AND A.courseVersion       = \''.$courseVersion.'\'
                   AND A.courseVersionTypeId = \''.$courseVersionTypeId.'\'' ;

        $db     = $this->getDatabase();
        $result = $db->query($sql);

        return $result; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCourse($filters)
    {
        $sql= 'SELECT A.courseId,
                      A.name,
                      A.formationLevelId,
                      B.description,
                      A.shortName,
                      A.acronym,
                      A.centerId,
                      C.name,
                      TO_CHAR(A.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                 FROM acdCourse A
      LEFT OUTER JOIN acdFormationLevel B
                   ON (B.formationLevelId = A.formationLevelId)
      LEFT OUTER JOIN acdCenter C
                   ON (C.centerId = A.centerId)';

        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->name . '%';
        }
        if ( strlen($filters->shortName) > 0 )
        {
            $where .= ' AND UNACCENT(A.shortName) ILIKE UNACCENT(?) ';
            $args[] = $filters->shortName . '%';
        }
        if ( strlen($filters->directorId) > 0 )
        {
            $where .= ' AND A.directorId = ? ';
            $args[] = $filters->directorId;
        }
        if ( strlen($filters->formationLevelId) > 0 && $filters->formationLevelId != 0 )
        {
            $where .= ' AND A.formationLevelId = ? ';
            $args[] = $filters->formationLevelId;
        }
        if ( strlen($filters->centerId) > 0 && $filters->centerId != 0)
        {
            $where .= ' AND A.centerId = ? ';
            $args[] = $filters->centerId;
        }
        if ( $filters->filterPendingCenter == DB_TRUE )
        {
            $where .= ' AND A.centerId <> COALESCE(A.centerIdOld, -1) ';
        }
        
        // filtro centros
        $centros = sMultiCentro::obterCentrosPessoa();
        if ( count($centros) > 0 )
        {
            $where .= ' AND ' . sprintf(' A.centerId IN (%s) ', implode(',', $centros));
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY A.name, A.shortName ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCourse($data)
    {
        $sql = 'INSERT INTO acdCourse
                            (courseId,
                             formationLevelId,
                             name,
                             shortName,
                             acronym,
                             centerId,
                             beginDate,
                             moreInfo,
                             endDate,
                             knowledgeAreaId,
                             requirements,
                             obs,
                             reportOrder,
                             educationAreaId,
                             incomeSourceId,
                             degree,
                             enrollbooksequence)
                     VALUES (?,?,?,?,?,?,to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),?,to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),?,?,?,?,?,?,?,?) ';

        $args = array( $data->courseId,
                       $data->formationLevelId,
                       $data->name,
                       $data->shortName,
                       $data->acronym,
                       $data->centerId,
                       $data->beginDate,
                       $data->moreInfo,
                       $data->endDate,
                       $data->knowledgeAreaId,
                       $data->requirements,
                       $data->obs, 
                       $data->reportOrder,
                       $data->educationAreaId,
                       $data->incomeSourceId,
                       $data->degree,
                       $data->enrollBookSequence );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result ? $data->courseId : false;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateCourse($data)
    {
        $sql = 'UPDATE acdCourse
                   SET formationLevelId          = ?,
                       name                      = ?,
                       shortName                 = ?,
                       acronym                   = ?,
                       centerId                  = ?,
                       beginDate                 = to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       moreInfo                  = ?,
                       endDate                   = to_date(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       knowledgeAreaId           = ?,
                       requirements              = ?,
                       obs                       = ?,
                       reportOrder               = ?,
                       educationAreaId           = ?,
                       incomeSourceId            = ?,
                       degree                    = ?,
                       enrollbooksequence        = ?
                 WHERE courseId                  = ? ';

        $args = array( $data->formationLevelId,
                       $data->name,
                       $data->shortName,
                       $data->acronym,
                       $data->centerId,
                       $data->beginDate,
                       $data->moreInfo,
                       $data->endDate,
                       $data->knowledgeAreaId,
                       $data->requirements,
                       $data->obs,
                       $data->reportOrder,
                       $data->educationAreaId,
                       $data->incomeSourceId,
                       $data->degree,
                       $data->enrollBookSequence,
                       $data->courseId );
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteCourse($courseId)
    {
        $sql = 'DELETE FROM acdCourse
                      WHERE courseId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $courseId));
        
        return $result;
    }
    
    public function obterProfessoresDoCurso($courseId)
    {
        $sql = "SELECT DISTINCT A.professorId,
                       C.name                       
                  FROM acdScheduleProfessor A
            INNER JOIN acdSchedule B
                    ON (B.scheduleId = A.scheduleId)
            INNER JOIN basPhysicalPersonProfessor C
                    ON (C.personId = A.professorId)
                 WHERE C.situacao = 1 AND B.groupId IN ( SELECT groupid FROM acdgroup WHERE curriculumid IN (
                 SELECT curriculumid FROM acdcurriculum WHERE courseid = ?) AND isclosed = false )
              ORDER BY C.name";
        $args[] = $courseId;
        
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
    /**
     * Multicentro
     */
    public static function sincronizaCentro()
    {
        $filters = new stdClass();
        $filters->filterPendingCenter = DB_TRUE;
        
        $busCourse = new BusinessAcademicBusCourse();
        $cursos = (array) $busCourse->searchCourse($filters);

        return count($cursos) > 0 ? self::sincronizaAcademico() : true;
    }
    
    /**
     *
     * @return boolean
     */
    public static function sincronizaAcademico()
    {
        $sqls = array();

        // UPDATE acdclass                        SET centerid=@x@ where centerid=@y@;
        $sqls[] = "alter table acdclass DISABLE TRIGGER maudit_public_acdclass;";
        $sqls[] = "alter table acdclass DISABLE TRIGGER trg_centro_acdclass;";
        $sqls[] = "alter table acdclass DISABLE TRIGGER trg_unidade_acdclass;";
        $sqls[] = "update acdclass set centerid=(select distinct centerid from acdcourse where courseid=(select distinct courseid from acdlearningperiod where learningperiodid=acdclass.initiallearningperiodid));";
        $sqls[] = "alter table acdclass ENABLE TRIGGER maudit_public_acdclass;";
        $sqls[] = "alter table acdclass ENABLE TRIGGER trg_centro_acdclass;";
        $sqls[] = "alter table acdclass ENABLE TRIGGER trg_unidade_acdclass;";

        // UPDATE acdclasspupil                   SET centerid=@x@ where centerid=@y@;
        $sqls[] = "alter table acdclasspupil DISABLE TRIGGER maudit_public_acdclasspupil;";
        $sqls[] = "alter table acdclasspupil DISABLE TRIGGER trg_centro_acdclasspupil;";
        $sqls[] = "alter table acdclasspupil DISABLE TRIGGER trg_unidade_acdclasspupil;";
        $sqls[] = "update acdclasspupil set centerid=(select distinct centerid from acdcourse where courseid=(select distinct courseid from acdlearningperiod where learningperiodid=(select distinct initiallearningperiodid from acdclass where classid=acdclasspupil.classid)));";
        $sqls[] = "alter table acdclasspupil ENABLE TRIGGER maudit_public_acdclasspupil;";
        $sqls[] = "alter table acdclasspupil ENABLE TRIGGER trg_centro_acdclasspupil;";
        $sqls[] = "alter table acdclasspupil ENABLE TRIGGER trg_unidade_acdclasspupil;";

        // UPDATE acdcondition                    SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdcondition set centerid=(select distinct centerid from acdcourse where courseid=(select distinct courseid from acdcurriculum where curriculumid=acdcondition.curriculumid));";

        // UPDATE acdcontract                     SET centerid=@x@ where centerid=@y@;
        $sqls[] = "alter table acdcontract DISABLE TRIGGER maudit_public_acdcontract;";
        $sqls[] = "alter table acdcontract DISABLE TRIGGER trg_centro_acdcontract;";
        $sqls[] = "alter table acdcontract DISABLE TRIGGER trg_unidade_acdcontract;";
        $sqls[] = "alter table acdcontract DISABLE TRIGGER trg_unique_course_occurrence;";
        $sqls[] = "update acdcontract set centerid=(select distinct centerid from acdcourse where acdcontract.courseid = acdcourse.courseid);";
        $sqls[] = "alter table acdcontract ENABLE TRIGGER maudit_public_acdcontract;";
        $sqls[] = "alter table acdcontract ENABLE TRIGGER trg_centro_acdcontract;";
        $sqls[] = "alter table acdcontract ENABLE TRIGGER trg_unidade_acdcontract;";
        $sqls[] = "alter table acdcontract ENABLE TRIGGER trg_unique_course_occurrence;";

        // UPDATE acdcontractexaminingboard       SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdcontractexaminingboard set centerid=(select distinct centerid from acdcourse where courseid=(select distinct courseid from acdcontract where contractid=acdcontractexaminingboard.contractid));";

        // UPDATE acdcourseoccurrence             SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdcourseoccurrence set centerid=(select distinct centerid from acdcourse where acdcourseoccurrence.courseid = acdcourse.courseid);";

        // UPDATE acdcourseparent                 SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdcourseparent set centerid=(select distinct centerid from acdcourse where acdcourseparent.courseid = acdcourse.courseid);";

        // UPDATE acdcurriculum                   SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdcurriculum set centerid=(select distinct centerid from acdcourse where acdcurriculum.courseid = acdcourse.courseid);";

        // UPDATE acdcurriculumconcurrence        SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdcurriculumconcurrence set centerid=(select distinct centerid from acdcourse where courseid=(select distinct courseid from acdcurriculum where curriculumid=acdcurriculumconcurrence.curriculumoutid));";

        // UPDATE acdcurriculumlink               SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdcurriculumlink set centerid=(select distinct centerid from acdcourse where courseid=(select distinct courseid from acdcurriculum where curriculumid=acdcurriculumlink.curriculumid));";

        // UPDATE acdenroll                       SET centerid=@x@ where centerid=@y@;
        $sqls[] = "alter table acdenroll DISABLE TRIGGER maudit_public_acdenroll;";
        $sqls[] = "alter table acdenroll DISABLE TRIGGER settotalenrolled;";
        $sqls[] = "alter table acdenroll DISABLE TRIGGER trg_centro_acdenroll;";
        $sqls[] = "alter table acdenroll DISABLE TRIGGER trg_unidade_acdenroll;";
        $sqls[] = "alter table acdenroll DISABLE TRIGGER valida_data_cancelamento;";
        $sqls[] = "update acdenroll set centerid=(select distinct centerid from acdcourse where courseid=(select distinct courseid from acdcurriculum where curriculumid=acdenroll.curriculumid));";
        $sqls[] = "alter table acdenroll ENABLE TRIGGER maudit_public_acdenroll;";
        $sqls[] = "alter table acdenroll ENABLE TRIGGER settotalenrolled;";
        $sqls[] = "alter table acdenroll ENABLE TRIGGER trg_centro_acdenroll;";
        $sqls[] = "alter table acdenroll ENABLE TRIGGER trg_unidade_acdenroll;";
        $sqls[] = "alter table acdenroll ENABLE TRIGGER valida_data_cancelamento;";

        // UPDATE acdenrollconfig                 SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdenrollconfig set centerid=(select distinct centerid from acdcourse where acdenrollconfig.courseid = acdcourse.courseid);";

        // UPDATE acdevaluation                   SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdevaluation set centerid=(select distinct centerid from acdcourse where courseid=
                        (select distinct courseid from acdcurriculum where curriculumid=
                            (select distinct curriculumid from acdgroup where groupid=acdevaluation.groupid)
                        ));";

        // UPDATE acdexploitation                 SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdexploitation set centerid=
            (select distinct centerid from acdcourse where courseid=
                (select distinct courseid from acdcontract where contractid=
                    (select distinct contractid from acdenroll where enrollid=acdexploitation.enrollid)
                ));";

        // UPDATE acdgroup                        SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdgroup set centerid=(select distinct centerid from acdcourse where courseid=(select distinct courseid from acdlearningperiod where learningperiodid=acdgroup.learningperiodid));";

        // UPDATE acdlearningperiod               SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdlearningperiod set centerid=(select distinct centerid from acdcourse where courseid=acdlearningperiod.courseid);";

        // UPDATE acdmessagecontractrenewal       SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdmessagecontractrenewal set centerid=(select distinct centerid from acdcourse where courseid=(select distinct courseid from acdlearningperiod where learningperiodid=acdmessagecontractrenewal.learningperiodid));";

        // UPDATE acdperiodenrolldate             SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdperiodenrolldate set centerid=(select distinct centerid from acdcourse where courseid=(select distinct courseid from acdlearningperiod where learningperiodid=acdperiodenrolldate.learningperiodid));";

        // UPDATE acdsubclass                     SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdsubclass set centerid=(select distinct centerid from acdcourse where courseid=(select distinct courseid from acdlearningperiod where learningperiodid=(select distinct initiallearningperiodid from acdclass where classid=acdsubclass.classid)));";

        // UPDATE acdtrainingemphasis             SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update acdtrainingemphasis set centerid=
            (select distinct centerid from acdcourse where courseid=
                (select distinct courseid from acdcurriculum where curriculumid=
                    (select distinct curriculumid from acdgroup where groupid=acdtrainingemphasis.groupid)
                ));";

        // Atualiza centeridold ao final do processo
        $sqls[] = "update acdcourse set centeridold=centerid;";

        return SDatabase::getInstance()->Execute($sqls);
    }
}
?>
