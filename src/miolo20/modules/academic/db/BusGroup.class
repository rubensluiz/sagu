<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdGroup table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Luís Felipe Wermann[luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 22/09/2005
 */

/**
 * Class to manipulate the acdGroup table
 */
class BusinessAcademicBusGroup extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @return (array): Return an array with the entire table
     */
    public function listGroup($courseId, $learningPeriodId)
    {
        $sql = 'SELECT DISTINCT
                       C.curricularComponentId AS curriculumCurricularComponentId,
                       E.name AS curriculumCurricularComponentName,
                       C.courseVersion AS curriculumCourseVersion
                  FROM unit_acdGroup A
             LEFT JOIN unit_acdlearningperiod B
                    ON  (B.learningPeriodId = A.learningPeriodId)
             LEFT JOIN unit_acdcurriculum C
                    ON (C.curriculumId = A.curriculumId)
             LEFT JOIN acdCourse D
                    ON (D.courseId = C.courseId)
             LEFT JOIN acdCurricularComponent E
                    ON (E.curricularComponentId = C.curricularComponentId
                        AND E.curricularComponentVersion = C.curricularComponentVersion)
             LEFT JOIN ONLY acdRegimen H
                    ON (H.regimenId = A.regimenId)

		WHERE D.courseId = ?
                  AND B.learningPeriodId = ?';
        
        $args = array ($courseId, $learningPeriodId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return $result;
    }
    
    public function listGroupSimple($courseId, $courseVersion, $unitId)
    {
        $sql = 'SELECT C.curricularComponentId, 
		       C.name AS curricularComponentName,
                       C.curricularcomponentversion
                  FROM acdcurriculum A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                   AND C.curricularComponentVersion = A.curricularComponentVersion)
             LEFT JOIN basUnit D
                    ON (A.unitId = D.unitId)
		 WHERE A.courseId = ?
                   AND A.courseVersion = ?
		   AND A.unitid = ? ';        
        
        $args = array ($courseId, $courseVersion, $unitId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return $result;
    }
    
    /*
     * Lista as disciplinas oferecidas.
     * 
     * @param $courseId, $courseVersion, $unitId, $classId
     * @return groupId, name
     */
    public function listGroupByMatriculaEmLote($courseId, $courseVersion, $unitId, $classId, $isCancellation = DB_FALSE)
    {
        $sql = "SELECT B.groupId,
		       B.groupId || '-' || C.name
		  FROM acdCurriculum A
	    INNER JOIN acdGroup B
		    ON A.curriculumId = B.curriculumId
	     LEFT JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                   AND C.curricularComponentVersion = A.curricularComponentVersion)
		 WHERE A.courseId = ?
                   AND A.courseVersion = ?
		   AND A.unitid = ? 
                   AND B.classId = ?
                   AND B.isCancellation = ?
                ORDER BY B.groupId";
                
        $args = array ($courseId, $courseVersion, $unitId, $classId, $isCancellation);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return $result;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $groupId (integer): Primary key of the record to be retrieved
     *
     * @return AcdGroup
     */
    public function getGroup($groupId, $isWebServices = false)
    {
        $acdGroup = "unit_acdGroup";
        $acdLearningPeriod = "unit_acdlearningperiod";
        $acdCurriculum = "unit_acdCurriculum";
        
        // Para webservices.
//        if ( $isWebServices ) // comentei esta linha pois funces GET nao precisam de multiunidade
        {
            $acdGroup = "acdGroup";
            $acdLearningPeriod = "acdlearningperiod";
            $acdCurriculum = "acdCurriculum";            
        }          
        
        $sql = "SELECT A.groupId,
                       A.learningPeriodId,
                       B.description AS learningPeriodDescription,
                       A.curriculumId,
                       C.courseId AS curriculumCourseId,
                       C.courseVersion AS curriculumCourseVersion,
                       D.name AS curriculumCourseName,
                       C.curricularComponentId AS curriculumCurricularComponentId,
                       C.curricularComponentVersion AS curriculumCurricularComponentVersion,
                       E.name AS curriculumCurricularComponentName,
                       E.shortName AS curriculumCurricularComponentShortName,
                       A.complement,
                       A.vacant,
                       A.isCancellation,
                       A.objectives,
                       A.content,
                       A.methodology,
                       A.evaluation,
                       array_to_string(A.basicBibliography, ', ') AS basicBibliography,
                       array_to_string(A.complementaryBibliography, ', ') AS complementaryBibliography,
                       A.observation,
                       A.regimenId,
                       H.description AS regimenDescription,
                       A.isUseWebDaily,
                       A.isClosed,
                       A.isContentProgrammarian,
                       A.userName,
                       TO_CHAR(A.dateTime,'" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       A.ipAddress,
                       A.basicbibliography,
                       A.complementarybibliography,
                       A.basicbibliographydescription,
                       A.complementarybibliographydescription,
                       COALESCE(A.totalEnrolled, 0) AS totalEnrolled,
                       A.classId,
                       E.lessonNumberHours,
                       E.academiccredits,
                       A.evaluationTypeId,
                       A.useConcept,
                       A.leaderId,
                       getPersonName(A.leaderId) AS leaderName,
                       A.subLeaderId,
                       getPersonName(A.subLeaderId) AS subLeaderName,
                       C.semester,
                       (SELECT TO_CHAR(MIN(X.occurrenceDate), '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS startDate
                          FROM (SELECT UNNEST(Z.occurrenceDates) AS occurrenceDate
                                  FROM acdSchedule Z
                                 WHERE Z.groupId = A.groupId) X) AS startDate,
                       (SELECT TO_CHAR(MAX(X.occurrenceDate), '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS endDate
                          FROM (SELECT UNNEST(Z.occurrenceDates) AS occurrenceDate
                                  FROM acdSchedule Z
                                 WHERE Z.groupId = A.groupId) X) AS endDate,
                       A.professorresponsible,
                       A.frequenceRegisterNotification,
                       A.conceptGroupId,
                       C.turnid,
                       (SELECT description
                          FROM basturn
                         WHERE turnid = c.turnid) AS turndescription,
                       --Obtem a carga horaria realizada desta disciplina, com base nos dias em que houve frequencia realizada
                       --Ex.: Se houve pelo menos uma frequencia (acdFrequenceEnroll) registrada para o dia 21/01/2011, na hora 08:00-09:00 sera contado como 1h de carga horária.
                       --Atentar para o fato de que a hora é extraida do campo numberMinutes (acdTime) e não da hora de inicio até a hora de fim.
                       COALESCE(( SELECT EXTRACT(hours FROM SUM(FREQ.minutes)) FROM (
                                  SELECT _T.timeId AS timeId, --Apenas para agrupar corretamente
                                         _T.numberMinutes AS minutes
                                    FROM acdSchedule _A
                              INNER JOIN acdFrequenceEnroll _B
                                      ON (_A.scheduleId = _B.scheduleId)
                              INNER JOIN acdTime _T
                                      ON (_T.timeId = _B.timeId)
                                   WHERE _A.groupId = A.groupId
                                GROUP BY _B.frequencyDate, 1, 2) FREQ ), 0) AS completedLessonHours,
                       A.gradesTypingFinished,
                       C.unitId,
                       E.academicNumberHours,
                       C.curricularComponentTypeId,
                       (SELECT description
                          FROM basUnit
                         WHERE unitId = C.unitId) AS unitDescription,
                       (SELECT name
                          FROM acdClass
                         WHERE classId = A.classId) AS className,
                       E.academicCredits
                  FROM {$acdGroup} A
             LEFT JOIN {$acdLearningPeriod} B
                    ON (B.learningPeriodId = A.learningPeriodId)
             LEFT JOIN {$acdCurriculum} C
                    ON (C.curriculumId = A.curriculumId)
             LEFT JOIN acdCourse D
                    ON (D.courseId = C.courseId)
             LEFT JOIN acdCurricularComponent E
                    ON (E.curricularComponentId = C.curricularComponentId
                        AND E.curricularComponentVersion = C.curricularComponentVersion)
             LEFT JOIN acdRegimen H
                    ON (H.regimenId = A.regimenId)
                 WHERE A.groupId = ?";
             
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $groupId));
        
        $group = new AcdGroup();

        list ( $group->groupId,
               $group->learningPeriodId,
               $group->learningPeriodDescription,
               $group->curriculumId,
               $group->curriculumCourseId,
               $group->curriculumCourseVersion,
               $group->curriculumCourseName,
               $group->curriculumCurricularComponentId,
               $group->curriculumCurricularComponentVersion,
               $group->curriculumCurricularComponentName,
               $group->curriculumCurricularComponentShortName,
               $group->complement,
               $group->vacant,
               $group->isCancellation,
               $group->objectives,
               $group->content,
               $group->methodology,
               $group->evaluation,
               $group->basicBibliography,
               $group->complementaryBibliography,
               $group->observation,
               $group->regimenId,
               $group->regimenDescription,
               $group->isUseWebDaily,
               $group->isClosed,
               $group->isContentProgrammarian,
               $group->userName,
               $group->dateTime,
               $group->ipAddress,
               $group->basicBibliography,
               $group->complementaryBibliography,
               $group->basicbibliographydescription,
               $group->complementarybibliographydescription,
               $group->totalEnrolled,
               $group->classId,
               $group->lessonNumberHours,
               $group->academiccredits,
               $group->evaluationTypeId,
               $group->useConcept,
               $group->leaderId,
               $group->leaderName,
               $group->subLeaderId,
               $group->subLeaderName,
               $group->semester,
               $group->startDate,
               $group->endDate,
               $group->professorResponsible,
               $group->frequenceRegisterNotification,
               $group->conceptGroupId,
               $group->turnId,
               $group->turnDescription,
               $group->completedLessonHours,
               $group->gradesTypingFinished,
               $group->unitId,
               $group->academicNumberHours,
               $group->curricularComponentTypeId,
               $group->unitDescription,
               $group->className,
               $group->academicCredits) = $result[0];        
        

        $group->basicBibliography = explode(',',str_replace('{','',str_replace('}','',$group->basicBibliography)));
        $group->complementaryBibliography = explode(',',str_replace('{','',str_replace('}','',$group->complementaryBibliography)));
        
        return $group;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     */
    public function searchGroup($filters, $toObject = false, $inverterOrdem = false)
    {
        $MIOLO = MIOLO::getInstance();
        $action = $MIOLO->getCurrentAction();
        
        /**
         * Ajustando desempenho da tela de matrícula do sistema.
         * Ticket #38354
         */
        
        if ( $action == 'main:process:enrollCurricularComponents' )
        {
            //Busca array
            $arraySearchGroup = $MIOLO->session->getValue('arraySearchGroup');
            
            //Cria key
            $string = 'toObject=' . $toObject;
            $string .= 'inverterOrdem=' . $inverterOrdem;
            
            foreach ( $filters as $name => $value )
            {
                $string .= $name . '=' . $value;
            }
            
            //Se key nao existe ainda, deixa passar, senao retorna
            if ( array_key_exists($string, $arraySearchGroup) )
            {
                return $arraySearchGroup[$string];
            }
            
            //Cria variavel para armazenar retorno na sessao depois
            $naSessao = true;
        }
        
        
        $fields = array( 'groupId',
                         'curricularComponentDescription',
                         'isCancellation',
                         'totalEnrolledAndVacant',
                         'regimenDescription',
                         'learningPeriodBeginDate',
                         'learningPeriodEndDate',
                         'learningPeriodId',
                         'curricularComponentName',
                         'curriculumId',
                         'isClosed',
                         'useConcept',
                         'curricularComponentGroupDocumentEndCourseId',
                         'conceptGroupId',
                         'classId',
                         'regimenId',
                         'curriculumCurricularComponentId',
                         'curriculumCurricularComponentVersion',
                         'vacant',
                         'totalEnrolled',
                         'complement'
        );

        $sql = 'SELECT A.groupId,
                       C.curricularComponentId || \'/\' || C.curricularComponentVersion || \' - \' || C.name,
                       A.isCancellation,
                       (SELECT count(enrollId) FROM acdenroll WHERE groupId = A.groupId AND statusid NOT IN (getparameter(\'ACADEMIC\', \'ENROLL_STATUS_CANCELLED\')::int))::text || \'/\' || COALESCE(A.vacant, 0),
                       D.description,
                       TO_CHAR(E.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(E.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       E.learningPeriodId,
                       C.name,
                       B.curriculumId,
                       A.isClosed,
                       A.useConcept,
                       B.curricularcomponentgroupdocumentendcourseid,
                       A.conceptGroupId,
                       A.classId,
                       D.regimenId,
                       B.curricularComponentId AS curriculumCurricularComponentId,
                       B.curricularComponentVersion AS curriculumCurricularComponentVersion,
                       A.vacant,
                       A.totalEnrolled,
                       A.complement
                  FROM unit_acdGroup A
             LEFT JOIN unit_acdcurriculum B
                    ON (B.curriculumId = A.curriculumId)
             LEFT JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = B.curricularComponentId AND
                        C.curricularComponentVersion = B.curricularComponentVersion)
             LEFT JOIN acdRegimen D
                    ON (A.regimenId = D.regimenId)
             LEFT JOIN unit_acdlearningperiod E
                    ON (E.learningPeriodId = A.learningPeriodId)
             LEFT JOIN acdCourse F
                    ON (F.courseId = E.courseId)
             LEFT JOIN unit_acdclass I
                    ON (I.classId = A.classId)';

        if ( strlen($filters->classId) > 0 )
        {
            $where .= ' AND A.classId = ? ';
            $args[] = $filters->classId;
        }

        if ( strlen($filters->className) > 0 )
        {
            $where .= ' AND UNACCENT(I.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->className;
        }

        if (is_array($filters->groupId) && count($filters->groupId) > 0)
        {
            $ofs = implode(',', $filters->groupId);
            $where .= " AND A.groupId IN ( {$ofs} )";
        }
        else
        {
            if (strlen($filters->groupId) > 0)
            {
                $where .= ' AND A.groupId = ?';
                $args[] = $filters->groupId;
            }
        }

        if ( strlen($filters->curricularComponentId) > 0 )
        {
            $where .= ' AND C.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }

        if ( strlen($filters->curricularComponentVersion) > 0 )
        {
            $where .= ' AND C.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }

        if ( strlen($filters->curricularComponentName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curricularComponentName;
        }

        if ( strlen($filters->regimenId) > 0 )
        {
            $where .= ' AND A.regimenId = ?';
            $args[] = $filters->regimenId;
        }

        if ( strlen($filters->learningPeriodId) > 0)
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }

        if ( strlen($filters->periodLearningPeriodId) > 0)
        {
            $where .= ' AND E.periodId = (SELECT periodId FROM unit_acdlearningperiod WHERE learningPeriodId = ?)';
            $args[] = $filters->periodLearningPeriodId;
        }

        if ( strlen($filters->learningPeriodDescription) > 0)
        {
            $where .= ' AND UNACCENT(E.description) ILIKE UNACCENT(?)';
            $args[] = $filters->learningPeriodDescription;
        }

        if ( strlen($filters->periodId) > 0 )
        {
            $where .= ' AND E.periodId = ?';
            $args[] = $filters->periodId;
        }

        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND E.courseId = ?';
            $args[] = $filters->courseId;
        }

        if ( strlen($filters->courseUnitId) > 0 )
        {
            $where .= ' AND E.unitId = ?';
            $args[] = $filters->courseUnitId;
        }

        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND E.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }

        if ( strlen($filters->courseTurnId) > 0 )
        {
            $where .= ' AND E.turnId = ?';
            $args[] = $filters->courseTurnId;
        }

        if ( strlen($filters->courseName) > 0 )
        {
            $where .= ' AND UNACCENT(F.name) ILIKE UNACCENT(?)';
            $args[] = $filters->courseName;
        }
        if ( strlen($filters->professorId) > 0 )
        {
            $where .= ' AND EXISTS (SELECT \'X\'
                                      FROM acdSchedule X
                                INNER JOIN acdScheduleProfessor Y
                                        ON (Y.scheduleId = X.scheduleId)
                                     WHERE X.groupId = A.groupId
                                       AND Y.professorId = ?)';
            $args[] = $filters->professorId;
        }

        if ( strlen($filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }

        if ( strlen($filters->isCancellation) > 0 )
        {
            $where .= ' AND A.isCancellation = ?';
            $args[] = $filters->isCancellation;
        }

        if ( strlen($filters->isClosed) > 0 )
        {
            $where .= ' AND A.isClosed = ?';
            $args[] = $filters->isClosed;
        }

        if ( strlen($filters->evaluationTypeId) > 0 )
        {
            $where .= ' AND A.evaluationTypeId = ?';
            $args[] = $filters->evaluationTypeId;
        }

        if ( strlen($filters->professorResponsible) > 0 )
        {
            $where .= ' AND A.professorResponsible = ?';
            $args[] = $filters->professorResponsible;
        }

        if ( strlen($filters->curricularComponentTypeId) > 0 )
        {
            $where .= ' AND B.curricularComponentTypeId = ? ';
            $args[] = $filters->curricularComponentTypeId;
        }
        
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            
            if ( $filters->orderByGroupId == DB_TRUE )
            {
                $sql .= ' ORDER BY A.groupId';
            }
            else
            {
                $sql .= ' ORDER BY E.learningPeriodId '.($inverterOrdem?'desc':'').', E.courseId, C.name';
            }

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        $return = $toObject ? SAGU::resultToObject($result, $fields) : $result;
        
        //Salva na sessao
        if ( $naSessao )
        {
            $arraySearchGroup[$string] = $return;
            $MIOLO->session->setValue('arraySearchGroup', $arraySearchGroup);
        }
        
        return $return;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return groupId if succed, otherwise False
     */
    public function insertGroup($data)
    {
        if ( strlen($data->groupId) > 0 )
        {
            $args[] = $data->groupId;
        }
        else
        {
            $sql = 'SELECT nextVal(\'seq_groupId\')';

            $query = $this->getDatabase()->query($sql);

            $groupId = $query[0][0];
            $args[] = $groupId;
        }

        $sql = 'INSERT INTO acdGroup (groupId,';

        if ( strlen($data->learningPeriodId) > 0 )
        {
            $sql .= 'learningPeriodId,';
            $args[] = $data->learningPeriodId;
        }
        
        if ( strlen($data->unitId) > 0 )
        {
            $sql .= 'unitId,';
            $args[] = $data->unitId;
        }

        if ( strlen($data->curriculumId) > 0 )
        {
            $sql .= 'curriculumId,';
            $args[] = $data->curriculumId;
        }

        if ( strlen($data->complement) > 0 )
        {
            $sql .= 'complement,';
            $args[] = $data->complement;
        }

        if ( strlen($data->vacant) > 0 )
        {
            $sql .= 'vacant,';
            $args[] = $data->vacant;
        }

        $data->isCancellation = SAGU::NVL($data->isCancellation, DB_FALSE);
        if ( strlen($data->isCancellation) > 0 )
        {
            $sql .= 'isCancellation,';
            $args[] = $data->isCancellation;
        }

        if ( strlen($data->objectives) > 0 )
        {
            $sql .= 'objectives,';
            $args[] = $data->objectives;
        }

        if ( strlen($data->content) > 0 )
        {
            $sql .= 'content,';
            $args[] = $data->content;
        }

        if ( strlen($data->methodology) > 0 )
        {
            $sql .= 'methodology,';
            $args[] = $data->methodology;
        }

        if ( strlen($data->evaluation) > 0 )
        {
            $sql .= 'evaluation,';
            $args[] = $data->evaluation;
        }

        if ( strlen($data->basicBibliography) > 0 )
        {
            $sql .= 'basicBibliography,';
            $args[] = $data->basicBibliography;
        }

        if ( strlen($data->complementaryBibliography) > 0 )
        {
            $sql .= 'complementaryBibliography,';
            $args[] = $data->complementaryBibliography;
        }

        if ( strlen($data->observation) > 0 )
        {
            $sql .= 'observation,';
            $args[] = $data->observation;
        }

        if ( strlen($data->regimenId) > 0 )
        {
            $sql .= 'regimenId,';
            $args[] = $data->regimenId;
        }

        $data->isUseWebDaily = SAGU::NVL($data->isUseWebDaily, DB_TRUE);
        if ( strlen($data->isUseWebDaily) > 0 )
        {
            $sql .= 'isUseWebDaily,';
            $args[] = $data->isUseWebDaily;
        }

        $data->isClosed = SAGU::NVL($data->isClosed, DB_FALSE);
        if ( strlen($data->isClosed) > 0 )
        {
            $sql .= 'isClosed,';
            $args[] = $data->isClosed;
        }

        $data->isContentProgrammarian = SAGU::NVL($data->isContentProgrammarian, DB_FALSE);
        if ( strlen($data->isContentProgrammarian) > 0 )
        {
            $sql .= 'isContentProgrammarian,';
            $args[] = $data->isContentProgrammarian;
        }

        if ( strlen($data->basicbibliographydescription) > 0 )
        {
            $sql .= 'basicbibliographydescription,';
            $args[] = $data->basicbibliographydescription;
        }

        if ( strlen($data->complementarybibliographydescription) > 0 )
        {
            $sql .= 'complementarybibliographydescription,';
            $args[] = $data->complementarybibliographydescription;
        }
        
        if ( strlen($data->classId) > 0 )
        {
            $sql .= 'classId,';
            $args[] = $data->classId;
        }

        $data->useConcept = SAGU::NVL($data->useConcept, DB_FALSE);
        if ( strlen($data->useConcept) > 0 )
        {
            $sql .= 'useConcept,';
            $args[] = $data->useConcept;
        }

        $data->evaluationTypeId = SAGU::NVL($data->evaluationTypeId, 1);
        if ( strlen($data->evaluationTypeId) > 0 )
        {
            $sql .= 'evaluationTypeId,';
            $args[] = $data->evaluationTypeId;
        }

        if ( strlen($data->leaderId) > 0 )
        {
            $sql .= 'leaderId,';
            $args[] = $data->leaderId;
        }

        if ( strlen($data->subLeaderId) > 0 )
        {
            $sql .= 'subLeaderId,';
            $args[] = $data->subLeaderId;
        }

        if ( strlen($data->professorResponsible) > 0 )
        {
            $sql .= 'professorresponsible,';
            $args[] = $data->professorResponsible;
        }

        $data->frequenceRegisterNotification = SAGU::NVL($data->frequenceRegisterNotification, DB_FALSE);
        if ( strlen($data->frequenceRegisterNotification) > 0 )
        {
            $sql .= 'frequenceRegisterNotification,';
            $args[] = $data->frequenceRegisterNotification;
        }

        if ( strlen($data->conceptGroupId) > 0 )
        {
            $sql .= 'conceptGroupId,';
            $args[] = $data->conceptGroupId;
        }

        $data->gradesTypingFinished = SAGU::NVL($data->gradesTypingFinished, DB_FALSE);
        if ( strlen($data->gradesTypingFinished) > 0 )
        {
            $sql .= 'gradesTypingFinished,';
            $args[] = $data->gradesTypingFinished;
        }

        $sql = substr($sql, 0, strlen($sql)-1) . ') VALUES (';
        for ( $i=0; $i<count($args); $i++ )
        {
            $sql .= '?,';
        }

        $sql = substr($sql, 0, strlen($sql)-1) . ')';
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return ($result ? ( strlen($groupId) > 0 ? $groupId : $data->groupId ) : $result);
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateGroup($data)
    {
        if ( isset($data->learningPeriodId) )
        {
            $where[] = 'learningPeriodId = ?';
            $args[] = $data->learningPeriodId;
        }

        if ( isset($data->curriculumId) )
        {
            $where[] = 'curriculumId = ?';
            $args[] = $data->curriculumId;
        }

        if ( isset($data->complement) )
        {
            $where[] = 'complement = ?';
            $args[] = $data->complement;
        }

        if ( isset($data->vacant) )
        {
            $where[] = 'vacant = ?';
            $args[] = $data->vacant;
        }

        if ( isset($data->isCancellation) )
        {
            $where[] = 'isCancellation = ?';
            $args[] = $data->isCancellation;
        }

        if ( isset($data->objectives) )
        {
            $where[] = 'objectives = ?';
            $args[] = $data->objectives;
        }

        if ( isset($data->content) )
        {
            $where[] = 'content = ?';
            $args[] = $data->content;
        }

        if ( isset($data->methodology) )
        {
            $where[] = 'methodology = ?';
            $args[] = $data->methodology;
        }

        if ( isset($data->evaluation) )
        {
            $where[] = 'evaluation = ?';
            $args[] = $data->evaluation;
        }

        if ( isset($data->basicBibliography) )
        {
            $where[] = 'basicBibliography = ?';
            $args[] = $data->basicBibliography;
        }
        elseif( $data->basicBibliographyRemoveAll )
        {
            $where[] = 'basicBibliography = ?';
            $args[] = '{}';
        }

        if ( isset($data->complementaryBibliography) )
        {
            $where[] = 'complementaryBibliography = ?';
            $args[] = $data->complementaryBibliography;
        }
        elseif( $data->complementaryBibliographyRemoveAll )
        {
            $where[] = 'complementaryBibliography = ?';
            $args[] = '{}';
        }

        if ( isset($data->observation) )
        {
            $where[] = 'observation = ?';
            $args[] = $data->observation;
        }

        if ( isset($data->regimenId) )
        {
            $where[] = 'regimenId = ?';
            $args[] = $data->regimenId;
        }

        if ( isset($data->isUseWebDaily) )
        {
            $where[] = 'isUseWebDaily = ?';
            $args[] = $data->isUseWebDaily;
        }

        if ( isset($data->isClosed) )
        {
            $where[] = 'isClosed = ?';
            $args[] = $data->isClosed;
        }

        if ( isset($data->isContentProgrammarian) )
        {
            $where[] = 'isContentProgrammarian = ?';
            $args[] = $data->isContentProgrammarian;
        }

        if ( isset($data->basicbibliographydescription) )
        {
            $where[] = 'basicbibliographydescription = ?';
            $args[] = $data->basicbibliographydescription;
        }
        
        if ( isset($data->complementarybibliographydescription) )
        {
            $where[] = 'complementarybibliographydescription = ?';
            $args[] = $data->complementarybibliographydescription;
        }

        if ( isset($data->classId) )
        {
            $where[] = 'classId = ?';
            $args[] = $data->classId;
        }

        if ( isset($data->useConcept) )
        {
            $where[] = 'useConcept = ?';
            $args[] = $data->useConcept;
        }

        if ( isset($data->evaluationTypeId) )
        {
            $where[] = ' evaluationTypeId = ? ';
            $args[] = $data->evaluationTypeId;
        }

        if ( isset($data->leaderId) )
        {
            $where[] = ' leaderId = ? ';
            $args[] = $data->leaderId;
        }

        if ( isset($data->subLeaderId) )
        {
            $where[] = ' subLeaderId = ? ';
            $args[] = $data->subLeaderId;
        }

        if ( isset($data->professorResponsible) )
        {
            $where[] = ' professorResponsible = ? ';
            $args[] = $data->professorResponsible;
        }

        if ( isset($data->frequenceRegisterNotification) )
        {
            $where[] = ' frequenceRegisterNotification = ? ';
            $args[] = $data->frequenceRegisterNotification;
        }

        if ( isset($data->conceptGroupId) )
        {
            $where[] = ' conceptGroupId = ? ';
            $args[] = $data->conceptGroupId;
        }

        if ( isset($data->gradesTypingFinished) )
        {
            $where[] = ' gradesTypingFinished = ? ';
            $args[] = $data->gradesTypingFinished;
        }

        $args[] = $data->groupId;
        $sql = 'UPDATE acdGroup SET ';

        for ( $i=0; $i<count($where); $i++ )
        {
            $sql .= $where[$i] . ', ';
        }

        $sql = substr($sql, 0, strlen($sql)-2) . ' WHERE groupId = ?';
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $groupId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteGroup($groupId)
    {
        $sql = 'DELETE FROM acdGroup
                      WHERE groupId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, array($groupId)));

        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $periodId (string): Primary key of the record to be retrieved
     * @param $formationLevelId (int): Id for graduate formation level 
     *
     * @return (array): An array containing professor, group, schedule
     */
    public function getProfessorGroupSchedule($periodId, $formationLevelId = null)
    {
        $sql = 'SELECT C.professorId,
                       D.name as professorName,
                       E.courseId,
                       F.shortName as courseName,
                       E.curricularComponentId,
                       G.name as curricularComponentName,
                       trim(substr(CONCAT(L.description || \',\'), 0, length(CONCAT(L.description || \',\')))),
                       I.room || \'/\' || I.building,
                       J.description as turnDescription,
                       A.groupId,
                       TO_CHAR(max(max_date_array(B.occurrenceDates)), \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM unit_acdGroup A
            INNER JOIN acdSchedule B
                    ON ( A.groupId = B.groupId )
            INNER JOIN acdScheduleProfessor C
                    ON ( B.scheduleId = C.scheduleId )
             LEFT JOIN basPhysicalPersonProfessor D
                    ON ( C.professorId = D.personId )
            INNER JOIN unit_acdcurriculum E
                    ON ( A.curriculumId = E.curriculumId )
            INNER JOIN acdCourse F
                    ON ( E.courseId = F.courseId )
            INNER JOIN acdCurricularComponent G
                    ON ( E.curricularComponentId = G.curricularComponentId )
             LEFT JOIN insPhysicalResource I
                    ON ( B.physicalResourceId = I.physicalResourceId
                   AND B.physicalResourceVersion = I.physicalResourceVersion)
             LEFT JOIN basTurn J
                    ON ( E.turnId = J.turnId )
             LEFT JOIN basWeekDay L
                    ON ( B.weekDayId = L.weekDayId )
                 WHERE A.learningPeriodId IN ( SELECT learningPeriodId
                                                 FROM unit_acdlearningperiod
                                                WHERE periodId = ?
                                                  AND formationlevelid = ?)
                     AND A.iscancellation = false
                GROUP BY 1,2,3,4,5,6,8,9,10 ';

        $args = array( $periodId,
                       $formationLevelId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;

    }

    /**
     * Return a specific record from the database
     *
     * @param $periodId (string): Primary key of the record to be retrieved
     *
     * @return (array): An array containing professor, group, schedule
     */
    public function getPupilFolderEnrolled($courseId, $unitId, $stateContractId, $periodId)
    {
        $sql = 'SELECT DISTINCT A.personId,
                                A.name,
                                B.courseId
                      FROM ONLY basPerson A
                     INNER JOIN unit_acdContract B
                             ON (B.personId = A.personId)
                     INNER JOIN acdMovementContract C
                             ON (B.contractId = C.contractId)
                     INNER JOIN unit_acdlearningperiod D
                             ON (C.learningPeriodId = D.learningPeriodId)
                          WHERE B.courseId = ?
                            AND B.unitId = ?';

        $args[] = $courseId;
        $args[] = $unitId;

        if ( $stateContractId != NULL)
        {
            $sql .= ' AND C.stateContractId = ?';
            $args[] = $stateContractId;
        }

        $sql .= ' AND D.periodId = ?
             ORDER BY A.name';

        $args[] = $periodId;
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Function that return professor names of group.
     *
     * @param $groupId (integer): Primary key of the record to be retrieved
     *
     * @return (array): An array containing professor name
     */
    public function getProfessorNamesOfGroup($groupId = null)
    {
        $sql = '   SELECT DISTINCT C.name,
                       A.professorId
                  FROM acdScheduleProfessor A
            INNER JOIN acdSchedule B
                    ON (B.scheduleId = A.scheduleId)
            INNER JOIN basPhysicalPersonProfessor C
                    ON (C.personId = A.professorId)
               ';

        if (!is_null($groupId))
        {
            $sql .= ' WHERE B.groupId = ? ORDER BY C.name ';
            $result = $this->getDatabase()->query(SAGU::prepare($sql, array($groupId)));
        }
        else
        {
            $sql .= ' ORDER BY C.name';
            $result = SDatabase::query($sql);
        }

        unset($return);
        if ( count($result) > 0 )
        {
            foreach ( $result as $res )
            {
                $return[ $res[1] ] = $res[0];
            }
        }

        return $return;
    }

    /**
     * Function that returne-mail of group.
     *
     * @param $groupId (integer): Primary key of the record to be retrieved
     *
     * @return (array): An array containing professor name
     */
    public function getPupilEmailByGroup($groupId=null, $modulo=null)
    {
        
        //Verificar se existe multi-unidade
        $view_email = 'unit_view_email';
        
        $cancelAcp = AcpMatricula::SITUACAO_CANCELAMENTO;
        $cancelAcd = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED');
        
        if ( MIOLO::_REQUEST('allClasses') == DB_TRUE )
        {
            $view_email = 'view_email';
        }
        
        $sql = 'SELECT A.personId,
                       A.name AS personName,
                       A.email
                  FROM basPhysicalPersonStudent A
            INNER JOIN unit_acdContract B
                    ON (A.personId = B.personId)
            INNER JOIN unit_acdEnroll C
                    ON (B.contractId = C.contractId AND C.statusId != \'' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED') . '\')
                 WHERE A.email is not null
                   AND C.groupId = ?
              ORDER BY A.name';

        //Pega dos dois modulos caso n?o foi passado módulo
        is_null($modulo) ? $modulo = "('A', 'P')" : $modulo = "('{$modulo}')";
                
        if ( SAGU::getParameter('BASIC', 'MODULE_PEDAGOGICO_INSTALLED') == 'YES' )
        {
            $sql = "SELECT personId, 
                           personName, 
                           email
                      FROM {$view_email}
                     WHERE email IS NOT NULL
                       AND statusid NOT IN ('{$cancelAcp}', '{$cancelAcd}')
                       AND modulo IN {$modulo}";
            is_null($groupId) ? $sql .= " ORDER BY personName" : $sql .= " AND groupId = ? ORDER BY personName";
        }
        
        $args = array($groupId);
        
        if(!is_null($groupId))
        {
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }
        else
        {
            $result = SDatabase::query($sql);
        }
        
        return $result;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param $courseId
     * @param $unitId
     * @param $stateContractId
     * @param $periodId
     * @param $personId
     */
    public function getPupilFolderByChoicePupil($courseId, $unitId, $stateContractId, $periodId, $personId)
    {
        $sql = 'SELECT DISTINCT A.personId,
                                A.name,
                                B.courseId
                        FROM ONLY basPerson A
                        INNER JOIN unit_acdContract B
                                ON (B.personId = A.personId)
                        INNER JOIN acdMovementContract C
                                ON (B.contractId = C.contractId)
                        INNER JOIN unit_acdlearningperiod D
                                ON (C.learningPeriodId = D.learningPeriodId)
                            WHERE B.courseId = ?
                                AND B.unitId = ?
                                AND C.stateContractId = ?
                                AND D.periodId = ?
                                AND A.personId = ?
                        ORDER BY A.name';

        $args = array( $courseId,
                       $unitId,
                       $stateContractId,
                       $periodId,
                       $personId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Obtém dados para etiqueta da pasta do aluno
     *
     * @param $periodId
     * @param $selectiveProcessId
     * @param $courseId
     * @param $unitId
     */
    public function getPupilFolderBySelectiveProcess($periodId, $selectiveProcessId, $courseId, $unitId)
    {
       $sql = " SELECT DISTINCT A.personId,
                                D.courseId,
                                D.name AS courseName
                           FROM spr.subscription A
                     INNER JOIN spr.subscriptionOption B
                             ON ( A.subscriptionId = B.subscriptionId )
                     INNER JOIN spr.optionCourse C
                             ON (B.optionId = C.optionId)
                     INNER JOIN acdCourse D
                             ON (C.courseId = D.courseId)
                     INNER JOIN unit_acdlearningperiod E
                             ON (E.courseId = C.courseId AND
                                 E.courseVersion = C.courseVersion AND
                                 E.turnId = C.turnId AND
                                 E.unitId = C.unitId AND
                                 E.periodId = ?)
                     INNER JOIN unit_acdContract F
                             ON (F.subscriptionId = A.subscriptionId AND
                                 F.personId = A.personId AND
                                 F.courseId = C.courseId AND
                                 F.courseVersion = C.courseVersion AND
                                 F.turnId = C.turnId AND
                                 F.unitId = C.unitId AND
                                 hasContractualMovement( F.contractId, E.learningPeriodId, 5) = false)
                          WHERE A.selectiveProcessId = ?
                            AND C.courseId = ?
                            AND C.unitId = ?
                       ORDER BY 3";

        $args = array( $periodId,
                       $selectiveProcessId,
                       $courseId,
                       $unitId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql,$args));

        return $result;
    }
    
    /**
     * Remove a ocorrencia da disciplina e todos os dados necessários, como as matrículas, notas, presenças
     *
     * @param integer $groupId
     */
    public function deleteGroupRelatedData($groupId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $busEnroll = new BusinessAcademicBusEnroll();
        $busMoodle = new BusinessAcademicBusMoodle();
        $busSubclass = new BusinessAcademicBusSubclass();
        $busSchedule = new BusinessAcademicBusSchedule();
        $busEvaluation = new BusinessAcademicBusEvaluation();
        $busExploitation = new BusinessAcademicBusExploitation();
        $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();
        $busFrequenceEnroll = new BusinessAcademicBusFrequenceEnroll();
        $busEvaluationEnroll = new BusinessAcademicBusEvaluationEnroll();
        $busScheduleProfessor = new BusinessAcademicBusScheduleProfessor();
        $busComplementaryActivities = new BusinessAcademicBusComplementaryActivities();
        $busScheduleProfessorContent = new BusinessAcademicBusScheduleProfessorContent();
        
        $this->begin();
        try {
            $subClassstd = new stdClass();
            $std->groupId = $groupId;

            $this->begin();
            //enroll
            $enrollData = $busEnroll->searchEnroll($std);

            //evaluation
            $evaluationData = $busEvaluation->searchEvaluation($std);

            if ( is_array($evaluationData) )
            {
                foreach( $evaluationData as $evaluation )
                {
                    $busEvaluation->deleteEvaluation($evaluation[0]);
                }
            }

            if( is_array($enrollData) )
            {
                foreach( $enrollData as $enroll )
                {
                    $sdt2 = new stdClass();
                    $std2->enrollId = $enroll[0];

                    //exclui as atividades complementares
                    $complementaryActivitiesData = $busComplementaryActivities->searchComplementaryActivities($std2);

                    if ( is_array($complementaryActivitiesData) )
                    {
                        foreach( $complementaryActivitiesData as $complementaryActivities )
                        {   
                            $busComplementaryActivities->deleteComplementaryActivities($complementaryActivities[0]);

                        }
                    }
                    //Frequence Enroll
                    $frequenceEnrollData = $busFrequenceEnroll->searchFrequenceEnroll($std2);

                    if ( is_array($frequenceEnrollData) )
                    {
                        foreach( $frequenceEnrollData as $frequenceEnroll )
                        {                     
                            $busFrequenceEnroll->deleteFrequenceEnroll($frequenceEnroll[0]);

                        }
                    }
                    //evaluation enroll
                    $evaluationEnrollData = $busEvaluationEnroll->searchEvaluationEnroll($std2);

                    if ( is_array($evaluationEnrollData) )
                    {
                        foreach( $evaluationEnrollData as $evaluationEnroll )
                        {
                            $busEvaluationEnroll->deleteEvaluationEnroll($evaluationEnroll[0]);

                        }
                    }
                    //degree enroll
                    $degreeEnrollData = $busDegreeEnroll->searchDegreeEnroll($std2);

                    if ( is_array($degreeEnrollData) )
                    {
                        foreach( $degreeEnrollData as $degreeEnroll )
                        {
                            $busDegreeEnroll->deleteDegreeEnroll($degreeEnroll[0]);

                        }
                    }
                    //exloitation
                    $exploitationData = $busExploitation->searchExploitation($std2);

                    if ( is_array($exploitationData) )
                    {
                        foreach($exploitationData as $exploitation)
                        {                    
                            $busExploitation->deleteExploitation($exploitation[0]);

                        }
                    }

                    $busEnroll->deleteEnroll($enroll[0]);

                }
            }
            //schedule
            $scheduleData = $busSchedule->searchSchedule($std);

            if ( is_array($scheduleData) )
            {
                foreach( $scheduleData as $schedule )
                {
                    $std3 = new stdClass();
                    $std3->scheduleId = $schedule[0];

                    //schedule professor
                    $scheduleProfessorData = $busScheduleProfessor->searchScheduleProfessor($std3);

                    if ( is_array($scheduleProfessorData) )
                    {
                        foreach( $scheduleProfessorData as $scheduleProfessor )
                        {
                            $std4 = new stdClass();
                            $std4->scheduleProfessosId = $scheduleProfessor[0];
                            //schedule professor content
                            $scheduleProfessorContentData = $busScheduleProfessorContent->searchScheduleProfessorContent($std4);

                            if ( is_array($scheduleProfessorContentData) )
                            {
                                foreach( $scheduleProfessorContentData as $scheduleProfessorContent )
                                {
                                    $busScheduleProfessorContent->deleteScheduleProfessorContent($scheduleProfessorContent[3], $scheduleProfessorContent[2], $scheduleProfessorContent[0]);
                                }
                            }

                            $busScheduleProfessor->deleteScheduleProfessor($scheduleProfessor[8]);
                        }
                    }

                    $busSchedule->deleteSchedule($schedule[0]);
                }
            }

            //subClass
            $subClassData = $busSubclass->searchSubclass($std);

            if( is_array($subClassData) )
            {
                foreach( $subClassData as $subClass )
                {
                    $busSubclass->deleteSubclass($subClass[0]);
                }
            }

            //Moodle subscription
            $moodleData = $busMoodle->searchMoodleSubscription($std);

            if ( is_array($moodleData) )
            {
                foreach( $moodleData as $moodle )
                {
                    $busMoodle->deleteMoodleSubscription($moodle[0], $moodle[1]);
                }
            }
            $this->commit();
        }
        catch ( Exception $e )
        {
            $this->rollback();
            throw $e;
        }
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param $curricularComponentId
     * @param $curricularComponentVersion
     * @param $periodId
     */
    public function isCurricularComponentBeingOfferredInPeriod($curricularComponentId, $curricularComponentVersion, $periodId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM unit_acdGroup A
            INNER JOIN unit_acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdPeriod C
                    ON (C.periodId = B.periodId)
            INNER JOIN unit_acdcurriculum D
                    ON (D.curriculumId = A.curriculumId)
                 WHERE D.curricularComponentId = ?
                   AND D.curricularComponentVersion = ?
                   AND C.periodId = ?';

        $args = array( $curricularComponentId,
                       $curricularComponentVersion,
                       $periodId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return ($result[0][0] > 0);
    }

    /**
     * Close the specified group id, computing the enroll status for each pupil.
     *
     * @param (integer) $groupId Group id of the group to be closed.
     */
    public function closeGroup($groupId, $isWebServices = false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busGradeTyping = new BusinessAcademicBusGradeTyping();
        $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();
        $busEnroll = new BusinessAcademicBusEnroll();
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $busDegree = new BusinessAcademicBusDegree();
        $busCurrComponent = new BusinessAcademicBusCurricularComponent();

        $groupData = $this->getGroup($groupId, $isWebServices);

        if ( strlen($groupData->groupId) == 0 )
        {
            if ( !$isWebServices)
            {
                $this->addError(_M('Disciplina oferecida @1 não existe.', $module, $groupId));
            }
            throw new Exception();
        }

        $learningPeriodData = $busLearningPeriod->getLearningPeriod($groupData->learningPeriodId, $isWebServices);        
        $currComponentData = $busCurrComponent->getCurricularComponent($groupData->curriculumCurricularComponentId, $groupData->curriculumCurricularComponentVersion);
        $pupils = $busGradeTyping->listGroupEnrolledPupils($groupId, $isWebServices);        
        $degrees = $busGradeTyping->getLearningPeriodDegrees($groupData->learningPeriodId);

        //Verifica se adigitação de notas da disciplina foi finalizada
        if ( SAGU::getParameter('ACADEMIC', 'CHECK_GRADES_TYPING_FINALIZE') == 'YES' )
        {
            //if ( $groupData->gradesTypingFinished == DB_FALSE && in_array($groupData->evaluationTypeId, array(AcdEvaluationType::BY_NOTE, AcdEvaluationType::BY_NOTE_AND_FREQUENCY)) )
            if ( !$this->checkGradesTyping($groupId, $isWebServices) )
            {
                if ( !$isWebServices )
                {
                    $this->addError(_M('A disciplina @1 não pode ser fechada porque o professor ainda não finalizou a digitação de notas.', $module, $currComponentData->name));
                }
                    
                throw new Exception();
            }
        }

        
        // se o tipo de avaliação da disciplina envolver nota e/ou frequência
        if ( $groupData->evaluationTypeId != AcdEvaluationType::NO_EVALUATION )
        {
            // para cada aluno
            for ( $i=0; $i<count($pupils); $i++ )
            {
                $pupil = $pupils[$i];

                $enrollId = $pupil[0];

                // obter a matricula
                $enrollData = $busEnroll->getEnroll($enrollId, $isWebServices);
                
                // efetuar o teste somente se a disciplina não estiver cancelada ou aluno tiver dispensa
                if (!in_array($pupil[4], array(SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED'), SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DESISTING'), SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED'))))
                {
                    // se a disciplina possui avaliação por frequência
                    // e a frequência não foi registrada, impedir fechamento
                    if ( in_array($groupData->evaluationTypeId, array(AcdEvaluationType::BY_FREQUENCY, AcdEvaluationType::BY_NOTE_AND_FREQUENCY))
                         && strlen($enrollData->frequency) == 0 )
                    {
                        if ( !$isWebServices )
                        {
                            $this->addError(_M('Disciplina oferecida @1, aluno @2: frequência não registrada.', $module, $groupId, $pupil[1] . ' - ' . $pupil[2]));                            
                        }
                    }

                    // se a disciplina possui avaliação por nota
                    if ( in_array($groupData->evaluationTypeId, array(AcdEvaluationType::BY_NOTE, AcdEvaluationType::BY_NOTE_AND_FREQUENCY)) )
                    {
                        // percorrer todas as possíveis notas e verificar se todas as que
                        // não podem ser nulas possuem informações registradas
                        for ( $j=0; $j<count($degrees); $j++ )
                        {                            
                            $degree = $degrees[$j];
                            if ( ($degree->mayBeNull == DB_FALSE) && ($degree->isExam == DB_FALSE) )
                            {                                
                                $degreeCurrentGrade = $busDegreeEnroll->getDegreeEnrollCurrentGrade($degree->degreeId, $enrollId, $groupData->useConcept == DB_TRUE);
                                                                
                                if ( strlen($degreeCurrentGrade) == 0 )
                                {
                                    // caso alguma nota que precisasse ser registrada não possui conteúdo, cancelar fechamento
                                    if ( !$isWebServices)
                                    {
                                        $this->addError(_M('Disciplina oferecida @1, aluno @2: nota @3 não registrada.', $module, $groupId, $pupil[1] . ' - ' . $pupil[2], $degree->description));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        // se algum erro detectado, abortar processo
        if ( count($this->getErrors()) > 0 )
        {
            throw new Exception();
        }
                
        // para cada aluno da disciplina
        for ( $i=0; $i<count($pupils); $i++ )
        {
            $pupil = $pupils[$i];
            $enrollId = $pupil[0];
            
            $enrollData = $busEnroll->getEnroll($enrollId, $isWebServices);
            $enrollData->statusId = $busEnroll->getFutureStatusId($enrollId, $isWebServices);
            
            $busEnroll->updateEnroll($enrollData);
        }
                
        $groupData->isClosed = DB_TRUE;
        $this->updateGroup($groupData);

        return true;
    }

    /**
     * Reopen the specified group id, setting the enroll status of every pupil back to ENROLLED.
     *
     * @param (integer) $groupId Group id of the group to be reopened.
     */
    public function reopenGroup($groupId, $isWebServices = false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busGradeTyping = new BusinessAcademicBusGradeTyping();
        $busEnroll = new BusinessAcademicBusEnroll();

        $pupils = $busGradeTyping->listGroupEnrolledPupils($groupId, $isWebServices);

       if ( count($pupils) > 0 )
        {
            // para cada aluno, alterar o status atual para matriculado, a menos
            // que a disciplina tenha sido cancelada
            foreach ( $pupils as $pupil )
            {
                $enrollId = $pupil[0];
                $enrollData = $busEnroll->getEnroll($enrollId);

                if (!in_array($enrollData->statusId, array(SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED'), SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DESISTING'), SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED'))))
                {
                    $enrollData->statusId = SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED');
                    $enrollData->detailEnrollStatusId = null;
                    
                    $busEnroll->updateEnroll($enrollData);
                }
            }
        }

        $groupData = $this->getGroup($groupId);
        $groupData->isClosed = DB_FALSE;
        $this->updateGroup($groupData);

        return true;
    }

    /**
     * Checks if all pupil grades are registered, making possible to finish grades typing process or close the group.
     *
     * @param (integer) $groupId Group id of the group to be checked.
     *
     * @return (boolean): TRUE if all grades are typed, otherwise FALSE
     */
    public function checkGradesTyping($groupId, $isWebServices = false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busGradeTyping = new BusinessAcademicBusGradeTyping();
        $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();
        $busDegree = new BusinessAcademicBusDegree();
        
        if ( strlen($groupId) == 0 )
        {
            throw new Exception(_M('Código de disciplina oferecida inválida.', $module, $groupId));
        }
        else
        {
            $groupData = $this->getGroup($groupId, $isWebServices);
            
            if ( strlen($groupData->groupId) == 0 )
            {
                throw new Exception(_M('Disciplina oferecida @1 não existe.', $module, $groupId));
            }
        }

        $pupils = $busGradeTyping->listGroupEnrolledPupils($groupId, $isWebServices);
        $degrees = $busGradeTyping->getLearningPeriodDegrees($groupData->learningPeriodId);
        $finalDegree = $busDegree->getLearningPeriodFinalDegree($groupData->learningPeriodId);

        // se o tipo de avaliação da disciplina envolver nota e/ou frequência
        if ( $groupData->evaluationTypeId != AcdEvaluationType::NO_EVALUATION )
        {
            // para cada aluno
            for ( $i=0; $i<count($pupils); $i++ )
            {
                $pupil = $pupils[$i];

                $enrollId = $pupil[0];

                // efetuar o teste somente se a disciplina não estiver cancelada ou aluno tiver dispensa
                if (!in_array($pupil[4], array(SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED'), SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_DESISTING'), SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED'))))
                {
                    // se a disciplina possui avaliação por nota
                    if ( in_array($groupData->evaluationTypeId, array(AcdEvaluationType::BY_NOTE, AcdEvaluationType::BY_NOTE_AND_FREQUENCY)) )
                    {
                        // percorrer todas as possíveis notas e verificar se todas as que
                        // não podem ser nulas possuem informações registradas
                        for ( $j=0; $j<count($degrees); $j++ )
                        {
                            $degree = $degrees[$j];
                            if ($degree->mayBeNull == DB_FALSE)
                            {
                                $degreeCurrentGrade = $busDegreeEnroll->getDegreeEnrollCurrentGrade($degree->degreeId, $enrollId, $groupData->useConcept == DB_TRUE);

                                if ( strlen($degreeCurrentGrade) == 0 )
                                {
                                    // caso alguma nota que precisasse ser registrada não possui conteúdo, cancelar fechamento
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }

        return true;
    }
    
    /**
     * Apaga frequencias e notas de uma disciplina oferecida
     *
     * @param int $groupId
     * @return boolean 
     */
    public function deleteFrequencyAndNotes($groupId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $busEnroll = new BusinessAcademicBusEnroll();
        
        $filters = new stdClass();
        $filters->groupId = $groupId;
        $enrollData = $busEnroll->searchEnroll($filters);

        $busDegreeEnroll = new BusinessAcademicBusDegreeEnroll();

        $busFrequenceEnroll = new BusinessAcademicBusFrequenceEnroll();

        $busEvaluationEnroll = new BusinessAcademicBusEvaluationEnroll();

        foreach ( $enrollData as $e )
        {
            $enrollId = $e[0];
            
            $busEnroll->clearFrequency($enrollId);
            $busDegreeEnroll->deleteFromEnrollId($enrollId);
            $busFrequenceEnroll->deleteFrequenceEnroll($enrollId);
            $busEvaluationEnroll->deleteFromEnroll($enrollId);
        }
        
        return true;
    }
    
    public function obterDisciplinasDaPessoaPorPeriodo($personId, $periodId, $contractId = null)
    {
        $MIOLO = MIOLO::getInstance();
        
        $filter = new stdClass();
        $filter->personId = $personId;
        $filter->periodId = $periodId;
        
        $busAcademicConsultation = $MIOLO->getBusiness('services', 'BusAcademicConsultation');
        $busDiverseConsultation = $MIOLO->getBusiness('academic', 'BusDiverseConsultation');
        
        $contracts = $busAcademicConsultation->getPersonContracts($filter->personId);
        $curricularComponents = array();
        
        // Ajustado para consultas diversas do acadêmica, precisa buscar por contrato, não por pessoa
        if ( strlen($contractId) > 0 )
        {
            unset($contracts);
            $contracts[0]->contractId = $contractId;
        }
        
        for ( $i = 0; $i < count($contracts); $i++ )
        {
            $filter->contractId = $contracts[$i]->contractId;
            $filter->notCancelled = true;

            $curricularComponent = $busDiverseConsultation->getCurricularComponentCoursed($filter);

            if ( count($curricularComponent) > 0 )
            {
                if ( count($curricularComponents) > 0 )
                {
                    $curricularComponents = array_merge($curricularComponents, $curricularComponent);
                }
                else
                {
                    $curricularComponents = $curricularComponent;
                }
            }
        }
        
        return $curricularComponents;
    }
    
    
    /**
     * Função para obter o método de avaliação da disciplina oferecida,
     * retorna true se método de avaliação é por conceito e false se 
     * método de avaliação é por nota.
     * 
     * @param int $groupId
     * @return boolean
     */
    public function obterMetodoAvaliacao($groupId)
    { 
        $sql = 'SELECT useConcept
                  FROM unit_acdGroup A
                 WHERE groupId = ?';

        $args = array( $groupId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return ($result[0][0]);
    }
    
    public function obterProfessoresDaDisciplina($courseId)
    {
        $sql = "SELECT DISTINCT A.professorId,
                       C.name                       
                  FROM acdScheduleProfessor A
            INNER JOIN acdSchedule B
                    ON (B.scheduleId = A.scheduleId)
            INNER JOIN basPhysicalPersonProfessor C
                    ON (C.personId = A.professorId)
                 WHERE B.groupId = ? 
                   AND C.situacao = 1
              ORDER BY C.name";
        $args[] = $courseId;
        
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
    /**
     * Verifica se a disciplina oferecida é do tipo final de curso (TCC).
     * 
     * @param int $groupId - Código da disciplina oferecida.
     * @return boolean - Retorna verdadeiro caso a disciplina seja de final de curso.
     */
    public function isFinalExaminationGroup($groupId)
    {
        $sql = " SELECT T.curricularcomponenttypeid 
                   FROM acdgroup G 
              LEFT JOIN acdcurriculum C ON (G.curriculumid = C.curriculumid) 
              LEFT JOIN acdcurricularcomponenttype T ON (C.curricularcomponenttypeid = T.curricularcomponenttypeid) 
                  WHERE G.groupid = ? ";
        
        $args[] = $groupId;
        
        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result[0][0] == SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_FINAL_EXAMINATION');
    }
    
    public function cancelGroup($groupId)
    {
        $sql = "UPDATE acdGroup
                   SET iscancellation = true
                 WHERE groupId = ?";
        
        $params = array(
            $groupId
        );
        
        $result = $this->execute(SAGU::prepare($sql, $params));

        return $result;
    }
    
    public function obterDisciplinasDoProfessor($professorId, $periodId = NULL)
    {
        $db = $this->getDatabase();
        
        $sql = ' SELECT DISTINCT E.beginhour,
                                 E.endhour,
                                 E.description AS turno,
                                 F.description AS unidade,
                                 A.* 
                            FROM acdgroup A
                      INNER JOIN acdSchedule B
                              ON B.groupId = A.groupId
                      INNER JOIN acdScheduleProfessor C
                              ON C.scheduleId = B.scheduleId
                      INNER JOIN acdLearningPeriod D
                              ON D.learningPeriodId = A.learningPeriodId
                      INNER JOIN basTurn E
                              ON E.turnId = D.turnId
                      INNER JOIN basUnit F
                              ON F.unitId = D.unitId
                           WHERE C.professorId = ?
                             AND ( NOW() BETWEEN D.beginDate AND D.endDate )
                        ORDER BY E.beginhour ';
      
        $params = array($professorId);
        
        $result = $db->query(SAGU::prepare($sql, $params));
        return $result;
    }
    
    public function obtemDisciplinasClassificacaoDeMatricula($filters)
    {
        $sql = "SELECT B.courseId || '-' || B.courseVersion || '/' || getturndescription(B.turnId) || '/' || getunitdescription(B.unitId),
		       A.groupId,
		       D.name,
		       A.vacant,
		       (SELECT count(*)
		          FROM acdEnroll AA
		         WHERE AA.groupId = A.groupId
		           AND ( AA.statusId = '" . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . "'::INTEGER 
		            OR AA.statusId = '" . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED') . "'::INTEGER )) as alunos
		  FROM acdGroup A
	    INNER JOIN acdLearningPeriod B
	            ON (A.learningPeriodId = B.learningPeriodId)
	    INNER JOIN acdCurriculum C
	            ON (A.curriculumId = C.curriculumId)
	    INNER JOIN acdCurricularComponent D
	            ON (C.curricularComponentId, C.curricularComponentVersion) = (D.curricularComponentId, D.curricularComponentVersion)
	         WHERE B.periodId = ?
	           AND B.courseId = ? 
              ORDER BY 1,3,2";
        
        $params[] = $filters->periodId;
        $params[] = $filters->courseId;
        
        $result = SDatabase::query(SAGU::prepare($sql, $params));
        
        return $result;
    }
    
    public function obtemAlunosClassificacaoDeMatricula($filters)
    {
        $sql = "SELECT null AS posicao,
		       E.personId || ' - ' || E.name AS aluno,
		       B.courseId || '/' || B.courseVersion || '/' || getturndescription(B.turnId) || '/' || getunitdescription(B.unitId) AS ocorrenciaCurso,
		       F.description AS status,
                       (SELECT CASE WHEN X.curriculumId IS NOT NULL THEN TRUE ELSE FALSE END 
                          FROM acdCurriculum X
			 WHERE X.courseId = D.courseId
			   AND X.courseversion = D.courseVersion
			   AND X.turnId = D.turnId
                           AND X.unitId = D.unitId
                           AND X.curriculumId = a.curriculumId limit 1) AS disciplinaDoCurso,
		       D.coeficienteDeClassificacao,
		       C.dateenroll, --'dd/mm/yyyy'),
		       null AS statusPrevisto
		  FROM acdGroup A
	    INNER JOIN acdLearningPeriod B
	            ON (A.learningPeriodId = B.learningPeriodId)
	    INNER JOIN acdEnroll C
	            ON (A.groupId = C.groupId)
	    INNER JOIN acdEnrollStatus F
	            ON (C.statusId = F.statusId)
	    INNER JOIN acdContract D
		    ON (C.contractId = D.contractId)
       INNER JOIN ONLY basphysicalpersonstudent E
                    ON (D.personId = E.personId)
		 WHERE A.groupId = ?
	           AND ( C.statusId = '" . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . "'::INTEGER 
		    OR   C.statusId = '" . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED') . "'::INTEGER )
	     ORDER BY 4 ASC, 5 DESC, 6 ASC, 7 ASC ";
        
        $params[] = $filters->groupId;
        
        $result = SDatabase::query(SAGU::prepare($sql, $params));
        
        return $result;
    }
    
    /**
     * Obtém disciplinas do aluno, para o envio de e-mail a partir da tarefa agendada BasPendenciaDeEmail::enviarEmailsPendentes
     * 
     * @param type $filters contractId, learningPeriodId, statusid
     * @return type
     */
    public function obtemDisciplinasDoAluno($filters)
    {
        $sql = " SELECT A.groupId,
                        CASE 
                            WHEN A.statusId = '" . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . "'::INTEGER 
                            THEN
                                '<font color=''blue''>' || H.description || '</font> - ' || C.name
                            ELSE
                                '<font color=''red''>' || H.description || '</font> - ' || C.name
                        END,
			(SELECT ARRAY_AGG(DISTINCT GG.name)
			   FROM acdGroup DD
		     INNER JOIN acdSchedule EE
			     ON (DD.groupId = EE.groupId)
		     INNER JOIN acdScheduleProfessor FF
			     ON (EE.scheduleId = FF.scheduleId)
		INNER JOIN ONLY basPerson GG
			     ON (GG.personId = FF.professorId)
			  WHERE A.groupId = DD.groupId) as professor,
                        NULL, 
                        (SELECT ARRAY_AGG(DISTINCT getTurnDescription(turnid))
			   FROM acdGroup DD
		     INNER JOIN acdSchedule EE
			     ON (DD.groupId = EE.groupId) 
		     INNER JOIN acdtime 
			     ON timeid = ANY (EE.timeids)
			  WHERE A.groupId = DD.groupId) as turno,
                        (SELECT ARRAY_AGG(TO_CHAR((SELECT MIN(min_date) FROM UNNEST(BB.occurrenceDates) min_date), getParameter('BASIC', 'MASK_DATE')) || ' - ' || TO_CHAR((SELECT MAX(max_date) FROM UNNEST(BB.occurrenceDates) max_date),getParameter('BASIC', 'MASK_DATE'))) AS datas
		           FROM acdGroup AA
		     INNER JOIN acdSchedule BB
			     ON AA.groupId = BB.groupId
		          WHERE AA.groupId = A.groupId) as datas
                   FROM acdEnroll A
             INNER JOIN acdCurriculum B
                     ON (A.curriculumId = B.curriculumId)
             INNER JOIN acdCurricularComponeNt C
                     ON (B.curricularComponentId, B.curricularComponentVersion) = (C.curricularComponentId, C.curricularComponentVersion)
             INNER JOIN acdGroup D
                     ON (A.groupId = D.groupId)
             INNER JOIN acdEnrollStatus H
	             ON (A.statusId = H.statusId)
             INNER JOIN acdLearningPeriod I
                     ON (D.learningPeriodId = I.learningPeriodId)
	          WHERE A.contractId = ?
                    AND I.periodId IN (SELECT periodId FROM acdlearningPeriod WHERE learningPeriodId = ? )
                    AND A.statusId = ?
	       GROUP BY A.groupId, H.description, C.name, A.statusId 
               ORDER BY C.name ";
        
        $args[] = $filters->contractId;
        $args[] = $filters->learningPeriodId;
        $args[] = $filters->statusId;
                
        $result = SDatabase::query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
    /**
     * Obtém registros da view rptHorarioDias
     * 
     * @param type $groupId
     * @return type
     */
    public function rptHorarioDias($groupId)
    {
        $sql = " SELECT DISTINCT horario,
                                 diasemana
                            FROM rpthorariodias
                           WHERE groupId = ?
                        ORDER BY diasemana ";
        
        $args[] = $groupId;
        $result = SDatabase::query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
}
?>
