<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdClass table
 *
 * @author Flaudizio B. S. Filho [flaudizio@yahoo.com.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 19/12/2006
 *
 **/

/**
 * Class to manipulate the acdClass table
 **/
class BusinessAcademicBusClass extends sBusiness
{
    protected $_modoDePaginacaoPorLimitOffset = true;
    
    /*
     * 
     * LISTA TODAS AS TURMAS DA UNIDADE
     * 
     * @parameter $courseId, $courseVersion, $unitId
     * 
     */
    public function listClass($courseId, $courseVersion, $unitId)
    {
        
        $sql = 'SELECT A.classid,
                       A.name
                  FROM acdclass A
            INNER JOIN acdlearningperiod B
                    ON A.initialLearningPeriodId = B.learningPeriodId
                    
                 WHERE B.courseid = ?
                   AND B.courseversion = ?
                   AND A.unitid = ?
                   ORDER BY 2';
        
       $args = array ($courseId, 
                      $courseVersion,
                      $unitId); 
        
       $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
       return $result;        
        
    }
    
    /*
     * Lista as turmas recebendo como parâmetro a unidade.
     * 
     */   
    public function listClassSimple($unitId)
    {        
        $sql = 'SELECT A.classid,
                       A.name
                  FROM acdclass A
                    
                 WHERE A.unitId = ?
                   ORDER BY 2';
        
       $args = array ($unitId); 
        
       $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
       return $result;        
        
    }
       
    /**
     * Return a specific record from the database
     *
     * @param $professorCurricularComponentId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getClass($classId)
    {
        $sql = 'SELECT A.classId,
                       A.name,
                       A.vacant,
                       A.initialLearningPeriodId,
                       B.description,
                       B.courseId,
                       B.courseVersion,
                       B.turnId,
                       B.unitId,
                       B.periodId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdclass A
            INNER JOIN acdlearningperiod B
                    ON (A.initialLearningPeriodId = B.learningPeriodId)
                 WHERE classId = ? ';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $classId));

        $class = new AcdClass();
        list ( $class->classId,
               $class->className_,
               $class->vacant,
               $class->initialLearningPeriodId,
               $class->description,
               $class->courseId,
               $class->courseVersion,
               $class->turnId,
               $class->unitId,
               $class->periodId,
               $class->userName,
               $class->dateTime,
               $class->ipAddress ) = $result[0];

        return $class;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchClass($filters, $multiUnidade = true)
    {
        $acdClass = 'unit_acdClass';
        $acdLearningPeriod = 'unit_acdLearningPeriod';
        
        if ( !$multiUnidade )
        {
            $acdClass = 'acdClass';
            $acdLearningPeriod = 'acdLearningPeriod';
        }
        
        $sql = 'SELECT A.classId,
                       A.name,
                       A.vacant,
                       A.initialLearningPeriodId,
                       B.courseId || \' / \' || B.courseVersion,
                       getCourseShortName(B.courseId),
                       TO_CHAR(B.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM ' . $acdClass . ' A
            INNER JOIN ' . $acdLearningPeriod . ' B
                    ON (A.initialLearningPeriodId = B.learningPeriodId)';

        if ( strlen($filters->classId) > 0 )
        {
            $where .= ' AND A.classId ILIKE ? ';
            $args[] = $filters->classId.'%';
        }
        if ( strlen($filters->className_) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->className_.'%';
        }
        if ( strlen($filters->vacant) > 0 )
        {
            $where .= ' AND A.vacant = ? ';
            $args[] = $filters->vacant;
        }
        if ( strlen($filters->learningPeriodId) > 0 )
        {
            $where .= ' AND B.learningPeriodId = ? ';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen($filters->periodId) > 0 )
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $filters->periodId;
        }
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND B.courseId = ? ';
            $args[] = $filters->courseId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                     ORDER BY A.name,
                              B.description ';

            $result = SDatabase::query($sql, $args, true, $filters);
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertClass($data)
    {
        $sql = 'INSERT INTO acdClass
                            (classId,
                             name,
                             vacant,
                             initialLearningPeriodId,
                             unitId)
                     VALUES (?,?,?,?,?) ';

        $args = array( $data->classId,
                       SAGU::NVL($data->className_, $data->name),
                       $data->vacant,
                       $data->initialLearningPeriodId,
                       $data->unitId);
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result ? $data->classId : false;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateClass($data)
    {
        $sql = 'UPDATE acdClass
                   SET name                    = ?,
                       vacant                  = ?,
                       initialLearningPeriodId = ?
                 WHERE classId                 = ? ';

        $args = array( $data->className_,
                       $data->vacant,
                       $data->initialLearningPeriodId,
                       $data->classId );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $professorCurricularComponentId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteClass($classId)
    {
        $sql = 'DELETE FROM acdClass
                      WHERE classId = ? ';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $classId));

        return $result;
    }
    
    /**
     * Gets the class current period
     *
     * @param $contractId (int): the contract id
     * 
     * @return (int): the semester period
     *
     **/
    public function getSemesterContract($contractId)
    {
        $sql = 'SELECT get_semester_contract(?)';   
        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($contractId)));
        
        return $result[0][0];
    }
    
    /*
     * Função criada para o caminhos do cuidado
     * Obtém uma turma do campo personalizado cidade sede 
     */
    public function obtemTurmaPeloCampoPersonalizado($stateId, $name, $courseId = null)
    {
        $sql = "SELECT A.classId 
		  FROM acdclass A
	    INNER JOIN miolo_custom_value D
	            ON (UPPER(D.customized_id) = UPPER(A.classid) AND D.custom_field_id = '2') 	    
	    INNER JOIN bascity C
	            ON C.cityid::text = D.value
             LEFT JOIN acdlearningperiod E
                    ON A.initiallearningperiodid = E.learningperiodid
	         WHERE C.stateid = ?
	           AND UPPER(UNACCENT(C.name)) ILIKE UPPER(UNACCENT(?))";
        
        $args[] = $stateId;
        $args[] = $name;
        
        if ( strlen($courseId) > 0 )
        {
            $sql .= ' AND E.courseid = ?';
            $args[] = $courseId;
        }
                
        $sql .= ' LIMIT 1 ';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        return $result[0][0];
    }
}
?>
