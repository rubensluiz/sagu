<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for generic document
 *
 * @author Samuel Koch [samuel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Samuel Koch [samuel@solis.coop.br]
 * 
 * @since
 * Class created on 30/03/2010
 *
 **/

/**
 * Class to manipulate contract documents
 **/
class BusinessAcademicBusGenericDocument extends sBusiness
{
    /**
     * List all registers to generate contract documets
     *
     * @param: $data (object):
     *
     * @returns (array): Return an array with all the matching records
     *
     **/
    public function getGenericDocument($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $db = $this->getDatabase();
        
        $sql = ' SELECT A.personId
                   FROM unit_acdContract A
             INNER JOIN unit_acdclasspupil B 
                     ON (B.contractId = A.contractId) ';

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        
        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }

        if ( strlen($filters->classId) > 0 )
        {
            $where .= ' AND B.classId = ?';
            $args[] = $filters->classId;
        }
        
        unset($resultArrayPerson);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);

            $db = $this->GetDatabase();
            $resultArrayPerson = $db->query(SAGU::prepare($sql, $args));
        }

        $result = $this->getPersonInfo($resultArrayPerson);
        
        return $result;
    }
    
    public function getPersonInfo($arrayPerson)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $db = $this->getDatabase();

        foreach ( $arrayPerson AS $value )
        {
            $sql = 'SELECT A.personId,
                           A.name,
                           (SELECT AA.content
                              FROM basDocument AA
                             WHERE AA.documentTypeId = \'' . SAGU::getParameter('BASIC', 'GENERIC_DOCUMENT_CODE') . '\'
                               AND A.personId = AA.personId) AS genericDocumentNumber,
                           (SELECT BB.content
                              FROM basDocument BB
                             WHERE BB.documentTypeId = \'' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG') . '\'
                               AND A.personId = BB.personId) AS rgNumber,
                           (SELECT CC.content
                              FROM basDocument CC
                             WHERE CC.documentTypeId = \'' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') . '\'
                               AND A.personId = CC.personId) AS cpfNumber,
                           B.name,
                           A.zipCode,
                           C.name || A.location AS location,
                           A.complement,
                           A.neighborhood
                 FROM ONLY basPerson A
                 LEFT JOIN basCity B 
                     USING (cityId) 
                 LEFT JOIN basLocationType C
                        ON (A.locationTypeId = C.locationTypeId)';
    
            if ( strlen($value[0]) > 0 )
            {
                $where .= ' AND A.personId = ? ';
                $args[] = $value[0];
            }
    
            unset($result);
            if ( strlen($where) > 0 )
            {
                $sql   .= ' WHERE ' . substr($where, 4) ;
                $result = $db->query(SAGU::Prepare($sql, $args));
            }
            unset($where);
            unset($args);
            
            $arrayPersonInfo[] = $result[0];
        }
        
        return $arrayPersonInfo;
    }
}

?>
