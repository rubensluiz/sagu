<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCurricularComponent table.
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * This class was created 2005/09/06
 *
 **/

class BusinessAcademicBusCurricularComponent extends sBusiness
{
    /**
     * Obtain the specified curricularComponent id data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $curricularComponentId (int): Identifier of the curriculum component to be retrieved.
     * @param $curricularComponentVersion (int): Identifier of the curriculum component to be retrieved.
     *
     * @return AcdCurricularComponent
     *
     */
    function getCurricularComponent($curricularComponentId, $curricularComponentVersion)
    {
        $select = 'SELECT A.curricularComponentId,
                          A.curricularComponentVersion,
                          A.centerId,
                          A.name,
                          A.shortName,
                          A.summary,
                          A.academicCredits,
                          A.lessonCredits,
                          A.academicNumberHours,
                          A.lessonNumberHours,
                          TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                          TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                          A.educationAreaId,
                          A.userName,
                          TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                          A.ipAddress,
                          A.generalobjectives,
                          A.specificobjectives,
                          array_to_string(A.basicBibliography, \', \'),
                          array_to_string(A.complementaryBibliography, \',\')
                     FROM acdCurricularComponent A
                    WHERE A.curricularComponentId = ? 
                      and A.curricularComponentVersion = ?';

        $args = array(  
                $curricularComponentId,
                $curricularComponentVersion
        );

        $result = $this->getDatabase()->query(SAGU::prepare($select, $args));

        $curricular = new acdCurricularComponent();

        list ( $curricular->curricularComponentId,
               $curricular->curricularComponentVersion,
               $curricular->centerId,
               $curricular->name,
               $curricular->shortName,
               $curricular->summary,
               $curricular->academicCredits,
               $curricular->lessonCredits,
               $curricular->academicNumberHours,
               $curricular->lessonNumberHours,
               $curricular->beginDate,
               $curricular->endDate,
               $curricular->educationAreaId,
               $curricular->userName,
               $curricular->dateTime,
               $curricular->ipAddress,
                $curricular->generalobjectives,
                $curricular->specificobjectives,
                $curricular->basicbibliography,
                $curricular->complementarybibliography ) = $result[0];

        // Carrega categorias
        $filters = new stdClass();
        $filters->curricularComponentId = $curricular->curricularComponentId;
        $filters->curricularComponentVersion = $curricular->curricularComponentVersion;
        $curricular->curricularComponentCategoryCreditList = AcdCurricularComponentCategoryCredit::listCredits($filters);
        
        return $curricular; 
    }

    /**
     * Search for curricularComponent.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchCurricularComponent($data=null)
    {
        $select = 'SELECT A.curricularComponentId,
                          A.curricularComponentVersion,
                          A.name
                     FROM acdCurricularComponent A ';

        $where  = '';
        unset($args);
        if ( strlen($data->curricularComponentId) > 0 )
        {
            $where .= '    AND   A.curricularComponentId = ?';
            $args[] = $data->curricularComponentId;
        }
        if ( strlen($data->curricularComponentVersion) > 0 )
        {
            $where .= '    AND   A.curricularComponentVersion = ?';
            $args[] = $data->curricularComponentVersion;
        }
        if ( strlen($data->name) > 0 )
        {
            $where .= '    AND   UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $data->name.'%';
        }

        if ( $where != '' )
        {
            $select .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY A.name';

            $db      = $this->getDatabase();
            $result  = $this->getDatabase()->query(SAGU::prepare($select,$args));
        }

        return $result;
    }

    /**
     * Insert a new acdCurricularComponent.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Object (curricular) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCurricularComponent($data)
    {
        $sql = 'INSERT INTO acdCurricularComponent
                            ( curricularComponentId,
                              curricularComponentVersion,
                              centerId,
                              name,
                              shortName,
                              summary,
                              academicCredits,
                              lessonCredits,
                              academicNumberHours,
                              lessonNumberHours,
                              beginDate,
                              endDate,
                              educationAreaId,
                              generalobjectives,
                              specificobjectives,
                              basicbibliography,
                              complementarybibliography)
                              VALUES (?,?,?,?,?,?,?,?,?,?,TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),?,?,?,?,?)';

        $args = array(
                $data->curricularComponentId,
                $data->curricularComponentVersion,
                $data->centerId,
                $data->name,
                $data->shortName,
                $data->summary,
                $data->academicCredits,
                $data->lessonCredits,
                $data->academicNumberHours,
                $data->lessonNumberHours,
                $data->beginDate,
                $data->endDate,
                $data->educationAreaId,
                $data->generalobjectives,
                $data->specificobjectives,
                '{'.$data->basicbibliography.'}',
                '{'.$data->complementarybibliography.'}'
        );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        if ( $result )
        {
            $this->saveCurricularComponentCategoryCredit($data);
        }
        
        return $result;
    }

    /**
     * Update the specified curricularComponent data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateCurricularComponent($data)
    {
        $sql = 'UPDATE acdCurricularComponent
                   SET centerId                   = ?,
                       name                       = ?,
                       shortName                  = ?,
                       summary                    = ?,
                       academicCredits            = ?,
                       lessonCredits              = ?,
                       academicNumberHours        = ?,
                       lessonNumberHours          = ?,
                       beginDate                  = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       endDate                    = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       educationAreaId            = ?,
                       generalobjectives          = ?,
                       specificobjectives         = ?,
                       basicbibliography          = ?,
                       complementarybibliography  = ?
                 WHERE curricularComponentId      = ?
                   AND curricularComponentVersion = ?';
        $args = array(
                $data->centerId,
                $data->name,
                $data->shortName,
                $data->summary,
                $data->academicCredits,
                $data->lessonCredits,
                $data->academicNumberHours,
                $data->lessonNumberHours,
                $data->beginDate,
                $data->endDate,
                $data->educationAreaId,
                $data->generalobjectives,
                $data->specificobjectives,
                '{'.$data->basicbibliography.'}',
                '{'.$data->complementarybibliography.'}',
                $data->curricularComponentId,
                $data->curricularComponentVersion
        );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        if ( $result )
        {
            $this->saveCurricularComponentCategoryCredit($data);
        }
        
        return $result;
    }

    /**
     * Delete the specified curricularComponent.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $curricularComponentId (string): Identifier of the curricular component id to be deleted.
     * @param $curricularComponentVersion (int): Identifier of the curricular component version to be deleted.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteCurricularComponent($curricularComponentId, $curricularComponentVersion  = null)
    {
        $this->deleteCurricularComponentCategory($curricularComponentId, $curricularComponentVersion);
        
        $sql = 'DELETE FROM acdCurricularComponent
                      WHERE curricularComponentId = ? 
                        AND curricularComponentVersion = ?';

        $args = is_array($curricularComponentId) ? $curricularComponentId : array( 
            $curricularComponentId, 
            $curricularComponentVersion 
        );

        $result = $this->getDatabase()->Execute(SAGU::prepare($sql,$args));

        return $result;
    }
    
    /**
     * Deleta os créditos da disciplina.
     * 
     * @author Augusto A. Silva [augusto@solis.coop.br]
     * 
     * @param type integer $curricularComponentId
     * @param type string $curricularComponentVersion
     * 
     * @return type boolean
     */
    public function deleteCurricularComponentCategory($curricularComponentId, $curricularComponentVersion  = null)
    {    
        $sql = 'DELETE FROM acdCurricularComponentCategoryCredit
                      WHERE curricularComponentId = ?
                        AND curricularComponentVersion = ?';
        
        $args = is_array($curricularComponentId) ? $curricularComponentId : array( 
            $curricularComponentId, 
            $curricularComponentVersion 
        );
        
        $result = SDatabase::execute($sql, $args);
        
        return $result;
    }
    
    /**
     * Return a list of curricular component by course
     *
     * @author: William Prigol Lopes [william@solis.coop.br]
     *
     * @param: $courseId (int): Id for course
     * @param: $courseVersion (int): Id for course version
     *
     * @return (array): An array containing data information by curricular component
     *
     */    
     public function getCurricularComponentSimpleList($data)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = 'academic';

        //FIXME: Exclusion of scheduleLearningPeriod
        $sql = ' SELECT C.enrollId,
                        F.description,
                        G.unitId,
                        getUnitDescription(G.unitId),
                        A.curricularComponentId||\' - \'||A.curricularComponentVersion,
                        A.name,
                        TO_CHAR(C.dateEnroll, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                        COALESCE(TO_CHAR(dateCancellation, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), \'-\'),
                        A.academicCredits,
                        D.groupId,
                        NULL,
                        NULL,
                        AB.courseId||\' - \'||getCourseName(AB.courseId),
                        AB.curricularComponentId||\' - \'||getCurricularComponentName(AB.curricularComponentId)
                   FROM acdCurricularComponent A
             INNER JOIN unit_acdcurriculum B
                     ON (B.curricularComponentId = A.curricularComponentId)
             INNER JOIN unit_acdEnroll C
                     ON (C.curriculumId = B.curriculumId)
             INNER JOIN unit_acdGroup D
                     ON (D.groupId = C.groupId)
              LEFT JOIN unit_acdcurriculum AB
                     ON (D.curriculumId = AB.curriculumId)
              LEFT JOIN unit_acdlearningperiod E
                     ON (E.learningPeriodId = D.learningPeriodId)
             INNER JOIN acdEnrollStatus F
                     ON ( C.statusId = F.statusId )
              LEFT JOIN acdSchedule G
                     ON ( D.groupId = G.groupId)
              LEFT JOIN insPhysicalResource I
                     ON ( G.physicalResourceId = I.physicalResourceId )
                  WHERE C.contractId = ?
                    AND E.periodId = ? ';

        $args   = array(
                $data->contractId, 
                $data->periodId
        );
        
        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        if ( is_array($return) )
        {
            foreach ( $return as $key => $ret )
            {
                // Verifica qual unidade em que ele está (Padrão ou não).
                $str        = ($return[$key][2] == SAGU::getParameter('BASIC', 'DEFAULT_UNIT_ID')) ? _M('Na unidade padrão - @1', $module, $return[$key][3]) : _M('Fora da unidade padrão - @1', $module, $return[$key][3]);
                $path       = $MIOLO->getActionURL($module, ($return[$x][6] == SAGU::getParameter('BASIC', 'DEFAULT_UNIT_ID')) ? 'html:images:checkOn.png' : 'html:images:checkOff.png');
                $string     = new MImage('imgUnit'.$key, $str, $path);
                $return[$key][2] = $string->generate();
                
                $return[$key][4] = '<b>['.$return[$key][4].']</b>';
                $curricularComponentId = new MSpan('curricularComponent'.$key, '['.SAGU::formatNumber($return[$key][8]).']');
                $curricularComponentId->setColor('red');
                $curricularComponentId->caption = _M('Número de créditos', $module);
                
                $weekDay = new MSpan('weekDay'.$key, $return[$key][10]);
                $weekDay->setColor('blue');
                $weekDay->setJsHint(_M('Dia da semana', $module));
                
                $return[$key][8] = $curricularComponentId->generate().' '.$return[$key][9].' - '.$weekDay->generate().' - '.$return[$key][11];
                unset($return[$key][9], $return[$key][10], $return[$key][11]);
                $str  = strlen($return[$key][12])>0 ? $return[$key][12] : _M('Nenhum curso', $module);
                $path = $MIOLO->getActionURL('finance', 'html:images:obs.png');
                $img  = new MImage('course'.$key, $str, $path);
                
                $str2  = strlen($return[$key][13])>0 ? $return[$key][13] : _M('Nenhuma disciplina', $module);
                $path2 = $MIOLO->getActionURL('finance', 'html:images:obs2.png');
                $img2  = new MImage('curricularComponent'.$key, $str2, $path2);
                
                $return[$key][9] = $img->generate().' '.$img2->generate();
            }
        }
        
        return $return;
     }
    
     
    /**
     * Salva categorias
     *
     * @param stdClass $data 
     */ 
    private function saveCurricularComponentCategoryCredit($data)
    {
        if ( $data->isFromFrmCurricularComponent )
        {
            // Remove
            $filters = new stdClass();
            $filters->curricularComponentId = $data->curricularComponentId;
            $filters->curricularComponentVersion = $data->curricularComponentVersion;
            foreach ( (array) AcdCurricularComponentCategoryCredit::search($filters) as $row )
            {
                $row->delete();
            }
        }
        
        foreach ( (array) $data->curricularComponentCategoryCredit as $row )
        {
            $row->curricularComponentId = $data->curricularComponentId;
            $row->curricularComponentVersion = $data->curricularComponentVersion;
            $row->save();
        }
    }
    
    /**
     * Obtem os grupos de eletivas que estarao oferecidas para o aluno.
     * 
     * @param int $courseid - Código do curso
     * @param String $courseversion - Versao do curso
     * @param int $turnid - Turno do curso
     * @param int $unitid - Unidade do curso
     * @param int $contractId - Contrato do aluno, passar caso necessite retirar eletivas já cursadas
     * e/ou elencar se o aluno está matriculado/pré-matriculado.
     * 
     * @return  $return - Grupos de eletivas
     */
    public function grupoDeEletivas($courseid, $courseversion, $turnid, $unitid, $contractId = NULL)
    {
        $curricularcomponenttypeid = SAGU::getParameter('ACADEMIC', 'CURRICULAR_COMPONENT_TYPE_ELECTIVE');
        
        $sql = "SELECT DISTINCT A.curricularComponentGroupElectiveId,
                                B.curricularComponentId,
                                B.name,
                                A.curriculumId,
                                B.curricularComponentVersion,
                                A.semester,
                                B.name AS curriculrComponentName,
                                B.academicNumberHours,
                                B.academicCredits,
                                CUT.description AS curriculumTypeDescription,
                                CCT.description AS curricularComponentTypeDescription, ";
                                
        if ( strlen($contractId) > 0 )
        {
            $sql .= "EE.statusId AS enrollStatusId ";
        }
        else
        {
            $sql .= "NULL AS enrollStatusId ";
        }
        
        $sql.=        "FROM acdCurriculum A
                 INNER JOIN acdCurricularComponent B
                         ON (A.curricularComponentId, 
                             A.curricularComponentVersion) = (B.curricularComponentId, 
                                                              B.curricularComponentVersion)
                 INNER JOIN acdCurricularComponentType CCT
                         ON (A.curricularComponentTypeId = CCT.curricularComponentTypeId)
                 INNER JOIN acdCurriculumType CUT
                         ON (A.curriculumTypeId = CUT.curriculumTypeId) ";
        
        if ( strlen($contractId) > 0 )
        {
            $sql .= "LEFT JOIN acdEnroll EE
                            ON (EE.contractId,
                                 EE.curriculumId) = (?,
                                                     A.curriculumId)
                           AND EE.statusid IN (getparameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED')::INT,
                                                getparameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED')::INT) ";
            $args[] = $contractId;
        }
        
             $sql .= "WHERE A.curricularComponentTypeId = ?
                        AND A.courseId = ?
                        AND A.courseVersion = ?
                        AND A.turnId = ?
                        AND A.unitId = ? ";
        
        $args[] = $curricularcomponenttypeid;
        $args[] = $courseid;
        $args[] = $courseversion;
        $args[] = $turnid;
        $args[] = $unitid;
        
        if ( strlen($contractId) > 0 )
        {
            $sql .= "AND A.curriculumid NOT IN (SELECT DISTINCT C.curriculumid 
					                   FROM acdenroll E 
                                                      LEFT JOIN acdcurriculum C 
                                                             ON (C.curriculumid = E.curriculumid) 
                                                      LEFT JOIN acdcurricularcomponent CC 
                                                             ON (C.curricularcomponentid, 
                                                                 C.curricularComponentVersion) = (CC.curricularcomponentid, 
                                                                                                  CC.curricularComponentVersion) 
                                                          WHERE E.contractid = ?
                     AND (E.statusid = getparameter('ACADEMIC', 'ENROLL_STATUS_APPROVED')::INT OR E.statusid = getparameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED')::INT))";
            
            $args[] = $contractId;
        }
        
        $sql .= " ORDER BY A.semester ";
        
        $result = SDatabase::query(SAGU::prepare($sql, $args));

        //Transformar em objeto
        if( $result )
        {
            foreach( $result as $r )
            {
                $obj = new stdClass();
                
                list($obj->curricularComponentGroupElectiveId, 
                     $obj->curricularComponentId, 
                     $obj->name, 
                     $obj->curriculumId,
                     $obj->curricularComponentVersion,
                     $obj->semester,
                     $obj->curricularComponentName,
                     $obj->academicNumberHours,
                     $obj->academicCredits,
                     $obj->curriculumTypeDescription,
                     $obj->curricularComponentTypeDescription,
                     $obj->enrollStatusId) = $r;
                
                $data[] = $obj;
            }
        }
        
        return $data;
    }
    
    /**
     * Obtem as disciplinas oferecidas que podem ser cursadas como eletivas no grupo.
     * 
     * @param int $curricularcomponentgroupelectiveid - Código do grupo de eletivas
     * @param int $learningPeriodId - Período letivo para buscar oferecidas
     * @param bollean $naoExibirParaMatriculado - Passar TRUE caso deseje negar oferecidas já cursadas
     * @param stdClass $data - Dados que serao usados para buscar as oferecidas
     * 
     * @return stdClass - Oferecidas que sao parte do grupo da eletiva
     */
    public function eletivasDoGrupo($curricularcomponentgroupelectiveid, $learningPeriodId, $naoExibirParaMatriculado = true, $data = null)
    {   
        //SQL geral para busca
        $sql = "SELECT b.curricularcomponentid, 
                       b.name,
                       g.groupid
                  FROM unit_acdcurriculum cc
            INNER JOIN unit_acdgroup g
                    ON (cc.curriculumid = g.curriculumid)
            INNER JOIN unit_acdlearningperiod ll
                    ON (g.learningperiodid = ll.learningperiodid)
            INNER JOIN acdcurricularcomponent b
                    ON (b.curricularcomponentid = cc.curricularcomponentid)
                   AND (b.curricularcomponentversion = cc.curricularcomponentversion)
                 WHERE (cc.curricularcomponentid, cc.curricularcomponentversion) 
                       IN (SELECT a.curricularcomponentid, 
                                  a.curricularcomponentversion
                             FROM unit_acdcurriculum a 
                            WHERE a.courseid = ?
                              AND a.courseversion = ?
                              AND a.turnid = ?
                              AND a.unitid = ?
                              AND a.curricularComponentGroupDocumentEndCourseId = ? )
                  AND (cc.curricularComponentId || ' - ' || cc.curricularComponentVersion) NOT IN
                       (SELECT (curricularComponentId || ' - ' || curricularComponentVersion)
                          FROM unit_acdCurriculum
                         WHERE curriculumId IN (SELECT curriculumId
                                                  FROM unit_acdGroup
                                                 WHERE groupId IN (SELECT E.groupId
                                                                     FROM unit_acdEnroll E
                                                                    WHERE E.contractId = ?
                                                                      AND E.statusId IN (getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED')::INT,
                                                                                         getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED')::INT))))";

        $args = array(
            $data->courseid,
            $data->courseversion,
            $data->turnid,
            $data->unitid,
            $curricularcomponentgroupelectiveid,
            $data->contractid,
        );

        //Caso permite outros cursos pode buscar oferecidas no período, senao tem que ser no exato
        //período letivo
        if ( !$data->naoPermiteOutrosCursos )
        {
            $sql .= " AND ll.periodid = (SELECT periodid FROM unit_acdlearningperiod WHERE learningperiodid = ? ) ";
        }
        else
        {
            $sql .= " AND g.learningperiodid = ? ";
        }
        
        $args[] = $learningPeriodId;
        
        if($naoExibirParaMatriculado)
	{
            $sql .= " AND cc.curriculumId NOT IN ( SELECT A1.curriculumId
                                                     FROM unit_acdEnroll A1
                                               INNER JOIN unit_acdcurriculum B1
                                                       ON (B1.curriculumId = A1.curriculumId)
                                                    WHERE B1.curricularComponentId = B.curricularComponentId
                                                      AND B1.curricularComponentVersion = B.curricularComponentVersion
                                                      AND A1.statusId IN ( getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') ) ";
	}
        
        $result = SDatabase::query(SAGU::prepare($sql, $args));

        if($result)
        {
            foreach($result as $r)
            {
                $obj = new stdClass();
                list($obj->curricularComponentId, $obj->name, $obj->groupId) = $r;
                $return[] = $obj;
            }
        }

        return $return;
    }
    
     public function getCurricularComponentElective($contractId)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        #FIXME: Verificar como pegar o parametro do tipo eletiva
        //trocar para 3
        $curricularcomponenttypeid = 3;
        
        $sql = ' SELECT A.curricularComponentId,
                        A.name,
                        D.groupId
                   FROM acdCurricularComponent A
             INNER JOIN unit_acdcurriculum B
                     ON (B.curricularComponentId = A.curricularComponentId)
             INNER JOIN unit_acdEnroll C
                     ON (C.curriculumId = B.curriculumId)
             INNER JOIN unit_acdGroup D
                     ON (D.groupId = C.groupId)
              LEFT JOIN unit_acdcurriculum AB
                     ON (D.curriculumId = AB.curriculumId)
              LEFT JOIN unit_acdlearningperiod E
                     ON (E.learningPeriodId = D.learningPeriodId)
             INNER JOIN acdEnrollStatus F
                     ON ( C.statusId = F.statusId )
              LEFT JOIN acdSchedule G
                     ON ( D.groupId = G.groupId)
              LEFT JOIN insPhysicalResource I
                     ON ( G.physicalResourceId = I.physicalResourceId )
                  WHERE C.contractId = ?
                    AND B.curricularcomponenttypeid = ? ';

        $args   = array(
                $contractId,
                $curricularcomponenttypeid
        );
        
        //MIOLO::vd(SAGU::prepare($sql, $args));
        
        //MIOLO::vd(SDatabase::query(SAGU::prepare($sql, $args)));
        
        return SDatabase::query(SAGU::prepare($sql, $args));
     }   
    
}
?>
