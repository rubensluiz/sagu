<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdStateContract table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 29/08/2006
 *
 **/

/**
 * Class to manipulate the acdMovementContract table
 **/
class BusinessAcademicBusAcademicRegisterLayer extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function getPupilsToAcademicRegisterLayer($filters)
    {
        $sql = 'SELECT DISTINCT A.personId,
                            A.name as personName,
                            getPersonName(getFatherId(A.personId)) AS fatherName,
                            getPersonName(getMotherId(A.personId)) AS motherName,
                            TO_CHAR(A.dateBirth, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\' ),
                            D.name as cityIdBirth,
                            D.stateId as stateIdBirth,
                            E.name as institutionIdHs,
                            F.name as cityInstitutionId,
                            F.stateId as stateIdInstitution,
                            A.yearhs,
                            H.courseId,
                            H.name as courseName,
                            J.description as stateContractDescription,
                            K.value as institutionContractDescrition,
                            I.stateContractId as stateContractBegin,
                            M.stateContractId as stateContractCurrent,
                            N.description,
                            L.periodId
                      FROM unit_acdContract G
                INNER JOIN acdCourse H
                        ON (G.courseId = H.courseId)
                INNER JOIN acdMovementContract I
                        ON (I.contractId = G.contractId)
                INNER JOIN acdStateContract J
                        ON (J.stateContractId = I.stateContractId AND
                            j.inOutTransition = \'I\')
                LEFT JOIN acdMovementContractComplement K
                        ON (G.contractId = K.contractId AND
                            K.stateContractId = J.stateContractId)
            INNER JOIN ONLY basPhysicalPersonStudent A
                        ON (A.personId = G.personId)
                INNER JOIN basCity D
                        ON (D.cityId = A.cityIdBirth)
            INNER JOIN ONLY basLegalPerson E
                        ON (E.personId = A.institutionIdHs)
                INNER JOIN basCity F
                        ON (F.cityId = A.cityIdHs)
                INNER JOIN unit_acdlearningperiod L
                        ON (L.courseId      = ? AND
                            L.courseVersion = ? AND
                            L.unitId        = ? AND
                            L.periodId      = ?)
                 LEFT JOIN acdMovementContract M
                        ON (G.contractId = M.contractId AND
                            M.learningPeriodId = L.learningPeriodId AND
                            M.stateTime = (SELECT max(A1.stateTime)
                                             FROM acdMovementContract A1
                                       INNER JOIN unit_acdlearningperiod A2
                                               ON (A2.courseId         = ? AND
                                                   A2.courseVersion    = ? AND
                                                   A2.unitId           = ? AND
                                                   A2.periodId         = ? AND
                                                   A1.learningPeriodId = A2.learningPeriodId)
                                             WHERE A1.contractId = (SELECT contractId 
                                                                      FROM unit_acdContract
                                                                     WHERE courseId      = ? AND
                                       courseVersion = ? AND
                                                                           unitId        = ? AND
                                                                           personId      = ?)))
                INNER JOIN acdStateContract N
                        ON (N.stateContractId = M.stateContractId)
                     WHERE G.courseId      = ? AND
                           G.courseVersion = ? AND
                           G.unitId        = ? AND
                           G.personId      = ?';

        if ( strlen($filters->personId) > 0 )
        {
            $personId = $filters->personId;

            $args = array($filters->courseId,
                            $filters->courseVersion,
                            $filters->unitId,
                            $filters->periodId,
                            $filters->courseId,
                            $filters->courseVersion,
                            $filters->unitId,
                            $filters->periodId,
                            $filters->courseId,
                            $filters->courseVersion,
                            $filters->unitId,
                            $personId,
                            $filters->courseId,
                            $filters->courseVersion,
                            $filters->unitId,
                            $personId);

            if ( strlen($filters->radOption) > 0 )
            {
                $sql .= 'AND H.formationLevelId = ?';

                if ( $filters->radOption == 'G')
                {
                    $args[] = SAGU::getParameter('ACADEMIC', 'COURSE_FORMATIONLEVELID_GRADUATE');
                }
                elseif ( $filters->radOption == 'T')
                {
                    $args[] = SAGU::getParameter('ACADEMIC', 'TECHNICIAN_FORMATION_LEVEL');
                }
            }

            if ($filters->radFileSituation == 'enrolled')
            {
                $sql .= ' AND M.stateContractId = ?';
                $args[] = SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED');
            }
            elseif ($filters->radFileSituation == 'freshmen')
            {
                $sql .= ' AND M.stateContractId = ?';
                $args[] = SAGU::getParameter('BASIC', 'WRITING_STATE_CONTRACT');
            }
            elseif ($filters->radFileSituation == 'locked')
            {
                $sql .= ' AND M.stateContractId = ?';
                $args[] = SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED');
            }
            elseif ($filters->radFileSituation == 'other')
            {
                $sql    .= ' AND M.stateContractId <> ? 
                             AND M.stateContractId <> ? 
                             AND M.stateContractId <> ?';
                $args[] = SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED');
                $args[] = SAGU::getParameter('BASIC', 'WRITING_STATE_CONTRACT');
                $args[] = SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED');
            }

            $sql .= '  ORDER BY A.name ASC';

            $db      = $this->getDatabase();
            $result1 = $db->query(SAGU::prepare($sql, $args));
        }
        else
        {
            $sql1 = 'SELECT personId 
                       FROM unit_acdContract
                      WHERE courseId      = ? AND
                            courseVersion = ? AND
                            unitId        = ?';

            $args1 = array($filters->courseId,
                           $filters->courseVersion,
                           $filters->unitId);

            $db      = $this->getDatabase();

            $resultPersons = $db->query(SAGU::prepare($sql1, $args1));;

            if ( is_array($resultPersons) && (count($resultPersons) > 0) )
            {
                foreach($resultPersons as $key=>$resultPerson1)
                {
                    $persons[$key] = $resultPerson1[0];
                }
            }

            $result1 = array();

            if ( is_array($persons) && (count($persons) > 0) )
            {
                foreach ($persons as $personId)
                {
                    unset($sql2);
                    $sql2 = $sql;
                    unset($args);
                    $args = array(  $filters->courseId,
                                    $filters->courseVersion,
                                    $filters->unitId,
                                    $filters->periodId,
                                    $filters->courseId,
                                    $filters->courseVersion,
                                    $filters->unitId,
                                    $filters->periodId,
                                    $filters->courseId,
                                    $filters->courseVersion,
                                    $filters->unitId,
                                    $personId,
                                    $filters->courseId,
                                    $filters->courseVersion,
                                    $filters->unitId,
                                    $personId);
    
                    if ( strlen($filters->radOption) > 0 )
                    {
                        $sql2 .= 'AND H.formationLevelId = ?';
    
                        if ( $filters->radOption == 'G')
                        {
                            $args[] = SAGU::getParameter('ACADEMIC', 'COURSE_FORMATIONLEVELID_GRADUATE');
                        }
                        elseif ( $filters->radOption == 'T')
                        {
                            $args[] = SAGU::getParameter('ACADEMIC', 'TECHNICIAN_FORMATION_LEVEL');
                        }
                    }
    
                    if ($filters->radFileSituation == 'enrolled')
                    {
                        $sql2 .= ' AND M.stateContractId = ?';
                        $args[] = SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED');
                    }
                    elseif ($filters->radFileSituation == 'freshmen')
                    {
                        $sql2 .= ' AND M.stateContractId = ?';
                        $args[] = SAGU::getParameter('BASIC', 'WRITING_STATE_CONTRACT');
                    }
                    elseif ($filters->radFileSituation == 'locked')
                    {
                        $sql2 .= ' AND M.stateContractId = ?';
                        $args[] = SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_LOCKED');
                    }
                    elseif ($filters->radFileSituation == 'other')
                    {
                        $sql2    .= ' AND M.stateContractId <> ? 
                                    AND M.stateContractId <> ? 
                                    AND M.stateContractId <> ?';
                        $args[] = SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED');
                        $args[] = SAGU::getParameter('BASIC', 'WRITING_STATE_CONTRACT');
                        $args[] = SAGU::getParameter('ACADEMIC', 'STATE_CONTRACT_ID_LOCKED');
                    }
    
                    $sql2 .= '  ORDER BY A.name ASC';
    
                    $db        = $this->getDatabase();
                    $result1[] = $db->query(SAGU::prepare($sql2, $args));
                }
            }

            $auxKeyIndex = 0;

            if ( is_array($result1) && (count($result1) > 0) )
            {
                foreach($result1 as $keyAux => $resultAux1)
                {
                    if ( is_array($resultAux1) )
                    {
                        $personAux[$auxKeyIndex] = $resultAux1[0];
                        $auxKeyIndex++;
                    }
                }
            }

            unset($result1);
            $result1 = $personAux;
        }

        return $result1;
    }
}

?>
