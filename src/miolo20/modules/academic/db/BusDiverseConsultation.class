<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This class contains methods to search
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Cristian Edson Göhl [cristian@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * This class was created 2005/09/06
 *
 **/

class BusinessAcademicBusDiverseConsultation extends sBusiness
{
    /**
     * Obtain many useful information about all curricular components matching
     * the passed filters.
     *
     * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
     *
     * @param $filters (object): Fields to be searched
     *
     * @return (array): array containing the matched curricular components
     *
     */
    public function getCurricularComponentCoursed($filters, $includeSemester = false)
    {
        $module = SAGU::getFileModule(__FILE__);

        // isto foi feito desta forma pois esta funcao esta legada nao permitindo adicionar mais colunas no fim
        // pois ela adiciona informacoes extras depois movendo as posicoes de forma que impactaria no sistema
        if ( $includeSemester )
        {
            $xtraColsFirst = ', C.semester';
            $xtraColsTwo = ', B.semester';
        }
        else
        {
            $xtraColsFirst = '';
            $xtraColsTwo = '';
        }
        
        $sql = 'SELECT * FROM ( (SELECT A.enrollId,
                        A.groupId,
                        F.periodId,                        
                        CASE WHEN C.curricularComponentId <> I.curricularComponentId
                            THEN C.curricularComponentId || \' / \' || C.curricularComponentVersion || \' (\' || I.curricularComponentId ||\' / \'|| I.curricularComponentVersion || \')\'
                            ELSE C.curricularComponentId
                        END,
                        CASE WHEN D.name <> I.name
                            THEN D.name || \' (\' || I.name || \')\'
                            ELSE D.name
                        END,
                        NULL,
                        CASE WHEN D.academicCredits <> I.academicCredits OR D.academicCredits <> I.academicCredits
                            THEN D.academicNumberHours || \'h - \' || D.academicCredits || \' ' . _M('créd', $module) . ' (\' || I.academicNumberHours || \'h - \' || I.academicCredits || \' ' . _M('créd', $module) . ')\'
                            ELSE D.academicNumberHours || \'h - \' || D.academicCredits || \' ' . _M('créd', $module) . '\'
                            END,
                        obterNotaOuConceitoFinal(A.enrollId) AS nota,
                        CASE WHEN D.academicCredits <> I.academicCredits OR D.academicCredits <> I.academicCredits
                        THEN
                            CASE WHEN A.frequency > I.academicNumberHours THEN                            
                                ROUND( ((A.frequency * 100) / D.academicNumberHours)::NUMERIC, \'' . SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE') . '\')::TEXT || \'%\' || \' ( \' || 100.00 || \'%\' || \' ) \'
                            ELSE
                                ROUND( ((A.frequency * 100) / D.academicNumberHours)::NUMERIC, \'' . SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE') . '\')::TEXT || \'%\' || \' ( \' || ROUND( ((A.frequency * 100) / I.academicNumberHours)::NUMERIC, \'' . SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE') . '\')::TEXT || \'%\' || \' ) \'
                            END
                        ELSE
                            CASE WHEN A.frequency > D.academicNumberHours THEN                            
                                \'100.00 %\'
                            ELSE
                                ROUND( ((A.frequency * 100) / D.academicNumberHours)::NUMERIC, \'' . SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE') . '\')::TEXT || \'%\'
                            END
                        END,
                        A.statusId,
                        E.description,
                        DS.shortdescription AS detailedStatus,
                        
CASE WHEN C.curricularComponentId <> I.curricularComponentId
                            THEN ( SELECT AA.classId FROM acdGroup AA 
                                              INNER JOIN acdCurriculum BB
                                                      ON BB.curriculumId = AA.curriculumId
                                                   WHERE BB.curricularComponentId =  I.curricularComponentId  AND AA.groupid = A.groupId ) || \' ( \' || 
                                                   ( COALESCE( ( SELECT AAA.classId FROM acdGroup AAA 
							                INNER JOIN acdCurriculum BBB
								          ON BBB.curriculumId = AAA.curriculumId
								        WHERE BBB.curricularComponentId =  C.curricularComponentId  AND BBB.curricularComponentVersion =  C.curricularComponentVersion limit 1 ), \'\' ) )  || \')\'
                            ELSE ( SELECT AA.classId FROM acdGroup AA 
                                              INNER JOIN acdCurriculum BB
                                                      ON BB.curriculumId = AA.curriculumId
                                                   WHERE BB.curricularComponentId =  I.curricularComponentId  AND AA.groupid = A.groupId ) 
                        END                        
                        '.$xtraColsFirst.'


                   FROM acdEnroll A
              INNER JOIN acdGroup B
                        ON (B.groupId = A.groupId)
              INNER JOIN acdcurriculum C
                       ON (C.curriculumId = COALESCE(A.curriculumId, B.curriculumId))
              INNER JOIN acdCurricularComponent D
                       ON (D.curricularComponentId = C.curricularComponentId AND
                            D.curricularComponentVersion = C.curricularComponentVersion)
              INNER JOIN acdEnrollStatus E
                       ON (E.statusId = A.statusId)
                LEFT JOIN acddetailenrollstatus DS
                       ON DS.detailenrollstatusid = A.detailenrollstatusid
              INNER JOIN acdlearningperiod F
                       ON (F.learningPeriodId = B.learningPeriodId)
              INNER JOIN acdcurriculum H
                       ON (H.curriculumId = B.curriculumId)
              INNER JOIN acdCurricularComponent I
                       ON (I.curricularComponentId = H.curricularComponentId AND
                            I.curricularComponentVersion = H.curricularComponentVersion)
               LEFT JOIN acdclass G
                        ON (G.classId = B.classId)';

        if ( strlen($filters->enrollId) > 0 )
        {
            $where .= ' AND A.enrollId = ? ';
            $args[] = $filters->enrollId;
        }
        
        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ? ';
            $args[] = $filters->contractId;
        }

        if ( strlen($filters->periodId) > 0)
        {
            $where .= ' AND F.periodId = ? ';
            $args[] = $filters->periodId;
        }

        if ( strlen($filters->notInPeriodId) > 0)
        {
            $where .= ' AND F.periodId <> ? ';
            $args[] = $filters->notInPeriodId;
        }

        if ( $filters->proficiency )
        {
            $where .= ' AND C.curriculumTypeId = ? ';
            $args[] = SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_PROFICIENCY');
        }
        else
        {
            $where .= ' AND C.curriculumTypeId != ? ';
            $args[] = SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_PROFICIENCY');
        }

        if ( $filters->notCancelled )
        {
            $where .= ' AND A.statusId NOT IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED') . ')';
        }
        
        if ( $filters->notExcused )
        {
            $where .= ' AND A.statusId NOT IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED') . ')';
        }
        
        if ( $filters->foraDeCurriculo == DB_TRUE )
        {
            $where .= " AND NOT EXISTS (SELECT 1 
                                          FROM acdCurriculum AA
                                    INNER JOIN acdContract BB
                                            ON (BB.courseId, BB.courseVersion, BB.turnId, BB.unitId) = (AA.courseId, AA.courseVersion, AA.turnId, AA.unitId)
                                         WHERE BB.contractId = A.contractId
                                           AND A.curriculumId = AA.curriculumId) ";
        }
        else if ( $filters->foraDeCurriculo == DB_FALSE )
        {
            $where .= " AND EXISTS (SELECT 1 
                                      FROM acdCurriculum AA
                                INNER JOIN acdContract BB
                                        ON (BB.courseId, BB.courseVersion, BB.turnId, BB.unitId) = (AA.courseId, AA.courseVersion, AA.turnId, AA.unitId)
                                     WHERE BB.contractId = A.contractId
                                       AND A.curriculumId = AA.curriculumId) ";
        }
        
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                        AND C.curriculumTypeId NOT IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY') . ')
                   ORDER BY F.periodId DESC,
                            A.statusId,
                            D.name ) ';

            $sql.= ' UNION (SELECT A.enrollId,
                           NULL,
                           E.periodId,
                           C.curricularComponentId || \'/\' || C.curricularComponentVersion,
                           C.name as curricularComponentName,
                           NULL,
                           C.academicNumberHours || \'h - \' || C.academicCredits || \' ' . _M('créd', $module) . '\',
             		   obterNotaOuConceitoFinal(A.enrollId) AS nota,
                           NULL,
                           A.statusId,
                           F.description,
                           DS.description AS detailedStatus,
                           NULL
                           '.$xtraColsTwo.'
                      FROM acdEnroll A
                INNER JOIN acdcurriculum B
                        ON (B.curriculumId = COALESCE(A.curriculumId, B.curriculumId))
                INNER JOIN acdCurricularComponent C
                        ON (C.curricularComponentId      = B.curricularComponentId AND
                            C.curricularComponentVersion = B.curricularComponentVersion)
                INNER JOIN acdContract D
                        ON (D.contractId = A.contractId)
                INNER JOIN acdlearningperiod E
                        ON (E.learningPeriodId = A.learningPeriodId)
                INNER JOIN acdEnrollStatus F
                        ON (F.statusId = A.statusId)
                 LEFT JOIN acddetailenrollstatus DS
                        ON DS.detailenrollstatusid = A.detailenrollstatusid
                INNER JOIN acdCourse G
                        ON (G.courseId = D.courseId)
                INNER JOIN acdExploitation H
                        ON H.enrollId = A.enrollId ';

            if ( strlen($filters->contractId) > 0 )
            {
                $sql .= ' AND A.contractId = ? ';
                $args[] = $filters->contractId;
            }
            if ( strlen($filters->periodId) > 0)
            {
                $sql .= ' AND E.periodId = ? ';
                $args[] = $filters->periodId;
            }

            if ( strlen($filters->notInPeriodId) > 0)
            {
                $sql .= ' AND E.periodId <> ? ';
                $args[] = $filters->notInPeriodId;
            }
            
            if ( $filters->notExcused )
            {
                $sql .= ' AND A.statusId NOT IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED') . ')';
            }
            
            if ( $filters->proficiency )
            {
                $sql .= ' AND B.curriculumTypeId = ? ';
                $args[] = SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_PROFICIENCY');
            }
            else
            {
                $sql .= ' AND B.curriculumTypeId != ? ';
                $args[] = SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_PROFICIENCY');
            }
            
            if ( $filters->foraDeCurriculo == DB_TRUE )
            {
                $sql .= " AND NOT EXISTS (SELECT 1 
                                              FROM acdCurriculum AA
                                        INNER JOIN acdContract BB
                                                ON (BB.courseId, BB.courseVersion, BB.turnId, BB.unitId) = (AA.courseId, AA.courseVersion, AA.turnId, AA.unitId)
                                             WHERE BB.contractId = A.contractId
                                               AND A.curriculumId = AA.curriculumId) ";
            }
            else if ( $filters->foraDeCurriculo == DB_FALSE )
            {
                $sql .= " AND EXISTS (SELECT 1 
                                          FROM acdCurriculum AA
                                    INNER JOIN acdContract BB
                                            ON (BB.courseId, BB.courseVersion, BB.turnId, BB.unitId) = (AA.courseId, AA.courseVersion, AA.turnId, AA.unitId)
                                         WHERE BB.contractId = A.contractId
                                           AND A.curriculumId = AA.curriculumId) ";
            }

            $sql .= ') ) AS sel ORDER BY 3, 10, 5';
            
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
            
            // obter dias e turnos, professores e salas
            $sql = "SELECT array_agg(DISTINCT (SELECT shortDescription
                                                 FROM basWeekDay
                                                WHERE (weekDayId - 1) = EXTRACT(DOW FROM A.occurrenceDate)) || '-' || D.shortDescription) AS daysAndTurns,
                           array_agg(DISTINCT G.name) AS professors,
                           array_agg(DISTINCT H.room || '-' || H.building) AS roomBuilding
                      FROM (SELECT A.groupId, UNNEST(A.occurrenceDates) AS occurrenceDate
                              FROM acdSchedule A
                             WHERE A.groupId = ?) A
                INNER JOIN (SELECT A.groupId, UNNEST(A.timeIds) AS timeId
                              FROM acdSchedule A
                             WHERE A.groupId = ?) B
                        ON (B.groupId = A.groupId)
                INNER JOIN acdTime C
                        ON C.timeId = B.timeId
                INNER JOIN basTurn D
                        ON D.turnId = C.turnId,
                           acdSchedule E
                INNER JOIN acdScheduleProfessor F
                        ON F.scheduleId = E.scheduleId
                INNER JOIN ONLY basPerson G
                        ON G.personId = F.professorId
                 LEFT JOIN insPhysicalResource H
                        ON H.physicalResourceId = E.physicalResourceId
                           AND H.physicalResourceVersion = E.physicalResourceVersion
                     WHERE E.groupId = ?";

            for ( $i=0; $i<count($result); $i++)
            {
                if (strlen($result[$i][1]) > 0)
                {
                    $args = array($result[$i][1], $result[$i][1], $result[$i][1]);
                    $extraData = $this->getDatabase()->query(SAGU::prepare($sql, $args));
                    
                    if ( count($extraData) > 0 )
                    {
                        $result[$i] = array_merge($result[$i], $extraData[0]);
                    }
                }
            }
        }

        if ( strlen($filters->enrollId) > 0 )
        {
            $newResult = array();
            foreach ( $result as $line )
            {
                if ( $line[0] == $filters->enrollId )
                {
                    $newResult[] = $line;
                }
            }
            $result = $newResult;
        }
        
        return $result;
    }

    /**
     * Obtain the curricular component exploited.
     *
     * @author Leovan Tavares da Silva [leovan@solis.coop.br]
     *
     * @param $personId (int): Person wich data will be got
     *
     * @return (array): return curricular component exploited
     *
     */
    public function getCurricularComponentExploited($filters)
    {
        $sql = 'SELECT DISTINCT A.enrollId,
                       E.periodId,
                       C.curricularComponentId || \'/\' || C.curricularComponentVersion,
                       (CASE WHEN EX.electivecurriculumid IS NOT NULL 
		             THEN C.name || \' (\' || (SELECT DISTINCT replace(replace(replace(replace(array_agg(BB.name)::text, \'{\', \'\'), \'}\', \'\'), \'"\', \'\'), \',\', \', \') 
                                                                  FROM acdCurriculum AA
                                                            INNER JOIN acdCurricularComponent BB
                                                                    ON (AA.curricularComponentId = BB.curricularComponentId AND
                                                                        AA.curricularComponentVersion = BB.curricularComponentVersion)
                                                                 WHERE AA.curriculumId = EX.electivecurriculumid) || \')\' 
			     ELSE
			          C.name
			      END) AS curricularComponentName,
                       F.description as status,
                       ROUND(C.academicCredits::NUMERIC, \'' . SAGU::getParameter('BASIC', 'GRADE_ROUND_VALUE') . '\'),
                       C.academicNumberHours,
                       (SELECT sum(XX.exploitationNumberHours)
                          FROM acdExploitation XX
                         WHERE XX.enrollId = A.enrollId) as exploitedNumberHours,
                       D.courseId || \'/\' || D.courseVersion || \' - \' || G.name as course
                  FROM acdEnroll A
            INNER JOIN acdcurriculum B
                    ON (B.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId      = B.curricularComponentId AND
                        C.curricularComponentVersion = B.curricularComponentVersion)
            INNER JOIN acdContract D
                    ON (D.contractId = A.contractId)
            INNER JOIN acdlearningperiod E
                    ON (E.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdEnrollStatus F
                    ON (F.statusId = A.statusId)
            INNER JOIN acdCourse G
                    ON (G.courseId = D.courseId)
             LEFT JOIN acdExploitation EX
	            ON A.enrollId = EX.enrollId
                 WHERE A.enrollId IN (SELECT enrollId FROM acdExploitation) ';

        $args = array();
        if (count($filters->contractId) > 0)
        {
            $sql   .= ' AND A.contractId in (?)';
            $args[] = implode(",", $filters->contractId);
        }
        if (strlen($filters->personId) > 0)
        {
            $sql   .= ' AND D.personId = ?';
            $args[] = $filters->personId;
        }
                
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function getPersonContracts($personId)
    {
        $MIOLO = MIOLO::getInstance();

        $db = SDatabase::getInstance();

        $sql = 'SELECT A.contractId,
                       A.courseId,
                       A.courseVersion,
                       B.shortDescription,
                       C.description,
                       D.name AS nameCourse,
                       B.description,
                       E.description
                  FROM acdContract A
            INNER JOIN basTurn B
                    ON (B.turnId = A.turnId)
            INNER JOIN basUnit C
                    ON (C.unitId = A.unitId)
            INNER JOIN acdCourse D
                    ON (D.courseId = A.courseId)
             LEFT JOIN acdStateContract E
                     ON (E.stateContractId = getContractState(A.contractId))
                 WHERE A.personId = ?
              ORDER BY E.isclosecontract, A.datetime DESC';

        $args = array($personId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    public function getGroupProfessorNames($groupId, $scheduleId = null)
    {
        $sql = 'SELECT DISTINCT C.name
                  FROM acdScheduleProfessor A
            INNER JOIN acdSchedule B
                    ON (B.scheduleId = A.scheduleId)
            INNER JOIN basPhysicalPersonProfessor C
                    ON (C.personId = A.professorId)
                 WHERE B.groupId = ? ';

        $args[] = $groupId;
        if ( strlen($scheduleId) > 0 )
        {
            $sql .= ' AND A.scheduleId = ? ';
       	    $args[] = $scheduleId;
        }

        $sql .= ' ORDER BY C.name';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        unset($return);
        if (count($result) > 0)
        {
            foreach ($result as $res)
            {
                $return[] = $res[0];
            }
        }

        return $return;
    }

    public function getGroupScheduleData($groupId)
    {
        $sql = ' SELECT DISTINCT
                        C.shortDescription,
                        D.shortDescription,
                        E.room,
                        E.building,
                        A.weekdayId,
                        B.turnId,
                        C.description,
                        D.description
                   FROM acdSchedule A
              LEFT JOIN acdScheduleLearningPeriod B
                     ON (B.scheduleLearningPeriodId = A.scheduleLearningPeriodId)
              LEFT JOIN basWeekday C
                        ON (C.weekdayId = A.weekdayId)
              LEFT JOIN basTurn D
                        ON (D.turnId = B.turnId)
              LEFT JOIN insPhysicalResource E
                        ON (E.physicalResourceId      = A.physicalResourceId AND
                            E.physicalResourceVersion = A.physicalResourceVersion)
                  WHERE A.groupId = ?
               ORDER BY A.weekdayId, B.turnId ';

        $schedules = $this->getDatabase()->query(SAGU::prepare($sql, $groupId));

        if ( count($schedules) > 0 )
        {
            unset($scheduleArray);
            unset($roomArray);
            foreach ( $schedules as $scheduleInfo )
            {
                unset($scheduleStr);
                if ( strlen($scheduleInfo[0]) > 0 )
                {
                    $scheduleStr = $scheduleInfo[0];
                }

                if ( strlen($scheduleStr) > 0 )
                {
                    $scheduleStr .= strlen($scheduleInfo[1]) ? '-' . $scheduleInfo[1] : '';
                }
                else
                {
                    $scheduleStr = $scheduleInfo[1];
                }

                if ( strlen($scheduleStr) > 0 )
                {
                    $scheduleArray[] = $scheduleStr;
                }

                unset($roomStr);
                if ( strlen($scheduleInfo[2]) > 0 )
                {
                    $roomStr = $scheduleInfo[2];
                }

                if ( strlen($roomStr) > 0 )
                {
                    $roomStr .= strlen($scheduleInfo[3]) ? '-' . $scheduleInfo[3] : '';
                }
                else
                {
                    $roomStr = $scheduleInfo[3];
                }

                if ( strlen($roomStr) > 0 )
                {
                    $roomArray[] = $roomStr;
                }
            }

            unset($str);
            if ( count($scheduleArray) > 0 )
            {
                $str = implode('/', $scheduleArray);
            }

            if ( count($roomArray) > 0 )
            {
                if ( strlen($str) > 0 )
                {
                    $str .= "\n(" . implode('/', $roomArray) . ')';
                }
                else
                {
                    $str = implode('/', $roomArray);
                }
            }
        }

        return $str;
    }
    
    public function dadosCensoParaExportacao($ano)
    {
        $tempTable = "CREATE TABLE temptable(contrato INT, situacao VARCHAR, turno INT, curso VARCHAR, pessoa INT, periodo VARCHAR )";
        $ok = $this->db->execute($tempTable);
        
        if ( $ok )
        {
            $dataTempTable = "INSERT INTO temptable ( SELECT contrato, situacao, turno, curso, pessoa, periodo FROM view_situacao_do_contrato_no_periodo )";
            $ok = $this->db->execute($dataTempTable);
            
            if ( $ok )
            {
                $sql = "SELECT '0' AS estagioObrigN2,
                               '0' AS estagioObrigN1,
                               NULL AS monitoria2,
                               NULL AS bRemuneracao,
                               '0' AS monitoria1,
                               '0' AS ext2,
                               '0' AS ext1,
                               '0' AS pesquisa2,
                               '0' AS pesquisa1,
                               '0' AS ativiExtra, --Pode exixtir para o contrato, mas n?o posso trazer pois n?o tenho como detalhar.
                               '0' AS bPermanencia,
                               '0' AS bTrabalho,
                               '0' AS didatico,
                               '0' AS transporte,
                               '0' AS moradia,
                               '0' AS alimentacao,
                               '0' AS apoioSocial,
                               NULL AS finanOutrosN,
                               NULL AS govMuniN,
                               NULL AS iesN,
                               NULL AS govEstadN,
                               NULL AS entiExtN,
                               NULL AS prouniPar,
                               NULL AS prouniInt,
                               NULL AS finanOutros,
                               NULL AS entiExt,
                               NULL AS ies,
                               NULL AS govMuni,
                               NULL AS govEstad,
                               NULL AS fies,
                               '0' AS finanEstudant,
                               NULL AS others,
                               NULL AS progResVagas,
                               NULL AS rendafamiliar,
                               NULL AS ensiPublic,
                               NULL AS vagasDefi,
                               NULL AS vagasEtnico,
                               '0' AS programReserVagas,
                               ( CASE WHEN ( SELECT stateContractId
                                               FROM acdMovementContract 
                                              WHERE contractId = A.contrato
                                                AND stateTime = ( SELECT MIN(stateTime) 
                                                                    FROM acdMovementContract 
                                                                   WHERE contractId = A.contrato ) 
                                              LIMIT 1 ) NOT IN (1, 21)
                                           AND
                                           ( SELECT B.inouttransition
                                               FROM acdMovementContract MC
                                         INNER JOIN acdStateContract B
                                                 ON B.stateContractId = MC.stateContractId
                                              WHERE MC.contractId = A.contrato
                                                AND MC.stateTime = ( SELECT MIN(stateTime) 
                                                                       FROM acdMovementContract 
                                                                      WHERE contractId = A.contrato ) 
                                              LIMIT 1 ) = 'I' 
                                      THEN
                                           1
                                      ELSE
                                           0
                                 END ) AS ingressoOutras,
                               NULL AS selecaoPecG,
                               '0' AS selecaoOutros,
                               verificarFormaDeIngressoCursoCenso(A.contrato, 21) AS ingressoEnem,
                               verificarFormaDeIngressoCursoCenso(A.contrato, 1) AS ingressoVestibular,
                               '2' AS conclusaoEnsMed,
                               REPLACE(TO_CHAR(( SELECT stateTime
                                                   FROM acdMovementContract 
                                                  WHERE contractId = A.contrato
                                                    AND stateTime = ( SELECT MIN(stateTime) 
                                                                        FROM acdMovementContract 
                                                                       WHERE contractId = A.contrato ) 
                                                  LIMIT 1 ), getParameter('BASIC', 'MASK_DATE')), '/', '') AS dataIngresso,
                               ( CASE WHEN E.degree = 'LICENCIADO' 
                                      THEN 
                                           1 
                                      ELSE 
                                           NULL 
                                 END ) AS alunoParfor,
                               semestreConclusaoCursoPessoaCenso(A.contrato) AS semesterConclusao,
                               situacaoVinculoCursoPessoaCenso(UNACCENT(A.situacao)) AS vinculo,
                               A.turno AS turno,
                               NULL AS ead,
                               A.curso AS idCurso,
                               '42' AS curso,

                               NULL AS superdotacao,
                               NULL AS transDesintInfancia,
                               NULL AS sindRett,
                               NULL AS sindAsperger,
                               NULL AS autismoInfantil,
                               NULL AS intelectual,
                               NULL AS multipla,
                               NULL AS surdoCegueira,
                               NULL AS defFisica,
                               NULL AS defAuditiva,
                               NULL AS surdez,
                               NULL AS baixaVisao,
                               NULL AS cegueira,
                               ( CASE WHEN B.specialnecessityid != 0 
                                      THEN 
                                           1 
                                      ELSE 
                                           0 
                                 END ) AS necessidadeEspecial,
                               ( CASE WHEN B.countryidbirth = '1' 
                                      THEN 
                                           'BRA' 
                                      ELSE 
                                           NULL 
                                 END ) AS paisOrigem, 
                               B.cityidbirth AS municipioNasci,
                               NULL AS ufNascimento,
                               ( CASE WHEN B.countryidbirth <> '1' 
                                      THEN 
                                           '3' 
                                      ELSE 
                                           B.countryidbirth 
                                 END ) AS nacionalidade,
                               UNACCENT(( CASE WHEN B.mothername IS NOT NULL
                                               THEN 
                                                    B.name
                                               ELSE
                                                    ( SELECT name
                                                   FROM ONLY basPerson
                                                       WHERE personId = D.relativepersonid )
                                          END )) AS nomeMae,
                               verificaOrigemEtnicaPessoaCenso(B.ethnicoriginid) AS origemEtnica,
                               ( CASE WHEN B.sex = 'M' 
                                      THEN 
                                           0 
                                      ELSE 
                                           1 
                                 END ) AS sexo,
                               verificarCampoObrigatorioCenso(REPLACE(TO_CHAR(B.datebirth, getParameter('BASIC', 'MASK_DATE')), '/', '')) AS dataNasci,
                               NULL AS passaporte,
                               REPLACE(REPLACE(C.content, '.', ''), '-', '') AS cpf,
                               UNACCENT(B.name) AS nomeAluno,
                               A.pessoa AS idIes,
                               NULL AS idInep,
                               '41' AS dadosAluno

                          FROM temptable A
               INNER JOIN ONLY basPhysicalPerson B
                            ON B.personId = A.pessoa
                     LEFT JOIN basDocument C
                            ON C.personId = B.personId
                           AND C.documentTypeId = 2 -- hardcode para cpf
                LEFT JOIN ONLY basPhysicalPersonKinship D
                            ON D.personId = B.personId
                           AND D.kinshipId = 2 -- hardcode para m?e
                    INNER JOIN acdCourse E
                            ON E.courseId = A.curso
                         WHERE A.periodo IN ( SELECT periodid
                                                FROM acdLearningPeriod
                                               WHERE TO_CHAR(begindate, 'yyyy' ) = '{$ano}' )
                           AND UNACCENT(A.situacao) NOT IN ('Mudanca de turno/versao', 'Nao matriculado', 'Outros (S)', 'Outros (E)' )
                      GROUP BY  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
                               11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                               21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                               31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                               41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                               51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
                               61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
                               71, 72, 73, 74, 75, 76, 77, 78, 79, 80";

                 $result = $this->db->query($sql);
                 $this->db->execute("DROP TABLE temptable");

                 return $result;
            }
        }
    }
}
?>
