<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCurricularComponentType table.
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * This class was created 2005/09/06
 *
 **/

class BusinessAcademicBusCurricularComponentType extends sBusiness
{
    /**
     * Obtain the specified curricularComponentType id data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $curricularComponentTypeId (int): Identifier of the curriculum component type to be retrieved.
     *
     * @return If the specified courseId exists, returns an object (curricularComponentType) containing its data. 
     * Otherwise, returns null.
     *
     */
    function getCurricularComponentType($curricularComponentTypeId)
    {

        $select = 'SELECT A.description,
                          A.userName,
                          TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                          A.ipAddress
                     FROM acdCurricularComponentType A
                    WHERE A.curricularComponentTypeId = ?';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($select, $curricularComponentTypeId));

        

        $curricular = new acdCurricularComponentType();

        list (  $curricular->curricularComponentTypeDescription,
                $curricular->userName,
                $curricular->dateTime,
                $curricular->ipAddress ) = $result[0];

        return $curricular; 
    }

    /**
     * Search for curricularComponentType.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchCurricularComponentType($data=null)
    {

        $select = 'SELECT A.curricularComponentTypeId,
                          A.description
                     FROM acdCurricularComponentType A ';

        $where  = '';
        unset($args);
        if ( strlen($data->curricularComponentTypeId) > 0 )
        {
            $where .= '    AND   A.curricularComponentTypeId = ?';
            $args[] = $data->curricularComponentTypeId;
        }
        if ( strlen($data->description) > 0 )
        {
            $where .= '    AND   UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $data->description.'%';
        }

        if ( $where != '' )
        {
            $select .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY A.description';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($select,$args));
            
        }

        return $result;
    }

    /**
     * List all curricularComponentTypes.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @return an array containing the select results.
     *
     */
    function listCurricularComponentType()
    {

        $select = 'SELECT A.curricularComponentTypeId,
                          A.description
                     FROM acdCurricularComponentType A
                 ORDER BY A.description';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($select,$args));
        

        return $result;
    }

    /**
     * Insert a new acdCurricularComponentType.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Object (curricular) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCurricularComponentType($data)
    {
        $db = $this->getDatabase();

        $insert = 'INSERT INTO acdCurricularComponentType
                                ( description )
                                VALUES (?)';

        $result = $db->execute(SAGU::prepare($insert, $data->description));
        
        return $result;
    }

    /**
     * Update the specified curricularComponentType data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateCurricularComponentType($data)
    {
        $update = 'UPDATE acdCurricularComponentType
                      SET description               = ?
                    WHERE curricularComponentTypeId = ?';

        $db     = $this->getDatabase();

        $args   = array($data->description,
                        $data->curricularComponentTypeId,
                       );
        $sqls = SAGU::prepare($update, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete the specified curricularComponentType.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $curricularComponentTypeId (int): Identifier of the curricularComponentTypeId to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteCurricularComponentType($curricularComponentTypeId)
    {
        $delete = 'DELETE FROM acdCurricularComponentType
                    WHERE curricularComponentTypeId = ?';


        $db     = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete,$curricularComponentTypeId));

        

        return $result;
    }

}

?>
