<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdEvent table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 06/01/2006
 *
 **/

/**
 * Class to manipulate the acdEvent table
 **/
class BusinessAcademicBusEvent extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listEvent()
    {

    }
    
    /**
     * Return a specific record from the database
     *
     * @param $eventId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEvent($eventId)
    {
        $sql = 'SELECT A.eventId,
                       A.description,
                       TO_CHAR(A.beginDate, \''. SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate, \''. SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.accountSchemeId,
                       A.costCenterId,
                       A.policyId,
                       A.incomeSourceId,
                       TO_CHAR(A.inscriptionFee, \'' . SAGU::getParameter('BASIC', 'MASK_REAL_2') . '\'),
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.numberHours
                  FROM unit_acdEvent A
                 WHERE eventId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $eventId));

        $event = new acdEvent();
        list ( $event->eventId,
               $event->description,
               $event->beginDate,
               $event->endDate,
               $event->accountSchemeId,
               $event->costCenterId,
               $event->policyId,
               $event->incomeSourceId,
               $event->inscriptionFee,
               $event->userName,
               $event->dateTime,
               $event->numberHours) = $result[0];

        return $event; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEvent($filters)
    {
        $sql= 'SELECT  A.eventId,
                       A.description,
                       TO_CHAR(A.beginDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(A.endDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       A.accountSchemeId,
                       B.description,
                       A.costCenterId,
                       C.description,
                       A.policyId,
                       D.description,
                       A.incomeSourceId,
                       E.description,
                       TO_CHAR(A.inscriptionFee, \'' . SAGU::getParameter('BASIC', 'MASK_REAL_2') . '\'),
                       A.numberHours
                FROM unit_acdEvent A
                LEFT JOIN accAccountScheme B
                    ON (A.accountSchemeId = B.accountSchemeId)
                LEFT JOIN accCostCenter C
                    ON (A.costCenterId = C.costCenterId)
                LEFT JOIN finPolicy D
                    ON (A.policyId = D.policyId)
                LEFT JOIN finIncomeSource E
                    ON (A.incomeSourceId = E.incomeSourceId) ';

        if ( strlen($filters->eventId) > 0 )
        {
            $where .= ' AND A.eventId = ? ';
            $args[] = $filters->eventId;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description.'%';
        }

        if ( strlen($filters->accountSchemeId) > 0 )
        {
            $where .= ' AND A.accountSchemeId = ? ';
            $args[] = $filters->accountSchemeId;
        }
        if ( strlen($filters->costCenterId) > 0 )
        {
            $where .= ' AND A.costCenterId = ? ';
            $args[] = $filters->costCenterId;
        }
        if ( strlen($filters->policyId) > 0 )
        {
            $where .= ' AND A.policyId = ? ';
            $args[] = $filters->policyId;
        }
        if ( strlen($filters->incomeSourceId) > 0 )
        {
            $where .= ' AND A.incomeSourceId = ? ';
            $args[] = $filters->incomeSourceId;
        }
        if ( strlen($filters->inscriptionFee) > 0 )
        {
            $where .= ' AND A.inscriptionFee = ? ';
            $args[] = $filters->inscriptionFee;
        }
        if ( strlen($filters->numberHours) > 0 )
        {
            $where .= ' AND A.numberHours = ? ';
            $args[] = $filters->numberHours;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY A.description ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEvent($data)
    {
        $sql = 'INSERT INTO acdEvent
                            (description,
                             beginDate,
                             endDate,
                             accountSchemeId,
                             costCenterId,
                             policyId,
                             incomeSourceId,
                             inscriptionFee,
                             numberHours)
                     VALUES (?,TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),?,?,?,?,?,?) ';

        $args = array($data->description,
                        $data->beginDate,
                        $data->endDate,
                        $data->accountSchemeId,
                        $data->costCenterId,
                        $data->policyId,
                        $data->incomeSourceId,
                        $data->inscriptionFee,
                        $data->numberHours);

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateEvent($data)
    {
        $sql = 'UPDATE acdEvent
                   SET description = ?,
                       beginDate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       endDate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       accountSchemeId = ?,
                       costCenterId = ?,
                       policyId = ?,
                       incomeSourceId = ?,
                       inscriptionFee = ?,
                       numberHours = ?
                 WHERE eventId = ? ';

        $args = array( $data->description,
                        $data->beginDate,
                        $data->endDate,
                        $data->accountSchemeId,
                        $data->costCenterId,
                        $data->policyId,
                        $data->incomeSourceId,
                        $data->inscriptionFee,
                        $data->numberHours,
                        $data->eventId);
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $eventId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteEvent($eventId)
    {
        $sql = 'DELETE FROM acdEvent
                      WHERE eventId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $eventId));
        
        return $result;
    }
}
?>
