<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCondition table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 19/09/2005
 *
 **/

/**
 * Class to manipulate the acdCondition table
 **/
class BusinessAcademicBusCondition extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCondition()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $conditionId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCondition($conditionId)
    {
        $sql = 'SELECT A.conditionId,
                       A.curriculumId,
                       B.courseId                   AS curriculumCourseId,
                       B.courseVersion              AS curriculumCourseVersion,
                       C.name                       AS curriculumCourseName,
                       B.curricularComponentId      AS curriculumCurricularComponentId,
                       B.curricularComponentVersion AS curriculumCurricularComponentVersion,
                       D.name                       AS curriculumCurricularComponentName,
                       A.conditionCurriculumId,
                       E.courseId                   AS conditionalCurriculumCourseId,
                       E.courseVersion              AS conditionalCurriculumCourseVersion, 
                       F.name                       AS conditionalCurriculumCourseName,
                       E.curricularComponentId      AS conditionalCurriculumCurricularComponentId,
                       E.curricularComponentVersion AS conditionalCurriculumCurricularComponentVersion,
                       G.name                       AS conditionalCurriculumCurricularComponentName,
                       A.type,
                       A.credits,
                       A.numberHour,
                       A.educationAreaId,
                       H.description                AS educationAreaDescription,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       I.turnId,
                       I.description as curriculumTurnDescription,
                       J.unitId,
                       J.description as curriculumUnitDescription,
                       A.consideraDiscMatriculadas
                  FROM unit_acdCondition A
             LEFT JOIN unit_acdcurriculum B
                    ON (B.curriculumId = A.curriculumId)
             LEFT JOIN acdCourse C
                    ON (C.courseId = B.courseId)
             LEFT JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = B.curricularComponentId
                        AND D.curricularComponentVersion = B.curricularComponentVersion)
             LEFT JOIN unit_acdcurriculum E
                    ON (E.curriculumId = A.conditionCurriculumId)
             LEFT JOIN acdCourse F
                    ON (F.courseId = B.courseId)
             LEFT JOIN acdCurricularComponent G
                    ON (G.curricularComponentId = B.curricularComponentId
                        AND G.curricularComponentVersion = B.curricularComponentVersion)
             LEFT JOIN acdEducationArea H
                    ON (H.educationAreaId = A.educationAreaId)
            INNER JOIN basTurn I
                    ON (I.turnId = B.turnId)
            INNER JOIN basUnit J
                    ON (J.unitId = B.unitId)
                 WHERE A.conditionId = ?';

        $pk = array(
                     $conditionId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));

        $condition = new AcdCondition();

        list ( $condition->conditionId,
               $condition->curriculumId,
               $condition->curriculumCourseId,
               $condition->curriculumCourseVersion,
               $condition->curriculumCourseName,
               $condition->curriculumCurricularComponentId,
               $condition->curriculumCurricularComponentVersion,
               $condition->curriculumCurricularComponentName,
               $condition->conditionCurriculumId,
               $condition->conditionalCurriculumCourseId,
               $condition->conditionalCurriculumCourseVersion,
               $condition->conditionalCurriculumCourseName,
               $condition->conditionalCurriculumCurricularComponentId,
               $condition->conditionalCurriculumCurricularComponentVersion,
               $condition->conditionalCurriculumCurricularComponentName,
               $condition->type,
               $condition->credits,
               $condition->numberHour,
               $condition->educationAreaId,
               $condition->educationAreaDescription,
               $condition->userName,
               $condition->dateTime,
               $condition->ipAddress,
               $condition->curriculumTurnId,
               $condition->curriculumTurnDescription,
               $condition->curriculumUnitId,
               $condition->curriculumUnitDescription,
               $condition->consideraDiscMatriculadas ) = $result[0];

        return $condition; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCondition($filters)
    {
        $sql = 'SELECT A.conditionId,
                       A.curriculumId,
                       B.courseId                   AS curriculumCourseId,
                       B.courseVersion              AS curriculumCourseVersion,
                       C.name                       AS curriculumCourseName,
                       B.curricularComponentId      AS curriculumCurricularComponentId,
                       B.curricularComponentVersion AS curriculumCurricularComponentVersion,
                       D.name                       AS curriculumCurricularComponentName,
                       A.conditionCurriculumId,
                       E.courseId                   AS conditionalCurriculumCourseId,
                       E.courseVersion              AS conditionalCurriculumCourseVersion, 
                       F.name                       AS conditionalCurriculumCourseName,
                       E.curricularComponentId      AS conditionalCurriculumCurricularComponentId,
                       E.curricularComponentVersion AS conditionalCurriculumCurricularComponentVersion,
                       G.name                       AS conditionalCurriculumCurricularComponentName,
                       A.type,
                       A.credits,
                       A.numberHour,
                       A.educationAreaId,
                       H.description                AS educationAreaDescription,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       A.consideraDiscMatriculadas
                  FROM unit_acdCondition A
             LEFT JOIN unit_acdcurriculum B
                    ON (B.curriculumId = A.curriculumId)
             LEFT JOIN acdCourse C
                    ON (C.courseId = B.courseId)
             LEFT JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = B.curricularComponentId
                        AND D.curricularComponentVersion = B.curricularComponentVersion)
             LEFT JOIN unit_acdcurriculum E
                    ON (E.curriculumId = A.conditionCurriculumId)
             LEFT JOIN acdCourse F
                    ON (F.courseId = E.courseId)
             LEFT JOIN acdCurricularComponent G
                    ON (G.curricularComponentId = E.curricularComponentId
                        AND G.curricularComponentVersion = E.curricularComponentVersion)
             LEFT JOIN acdEducationArea H
                    ON (H.educationAreaId = A.educationAreaId)';

        if ( strlen($filters->conditionId) > 0 )
        {
            $where .= ' AND A.conditionId = ?';
            $args[] = $filters->conditionId;
        }
        if ( strlen($filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen($filters->curriculumCourseId) > 0 )
        {
            $where .= ' AND B.courseId ILIKE ?';
            $args[] = $filters->curriculumCourseId;
        }
        if ( strlen($filters->curriculumCourseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $filters->curriculumCourseVersion;
        }
        if ( strlen($filters->curriculumCourseName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curriculumCourseName . '%';
        }
        if ( strlen($filters->curriculumCurricularComponentId) > 0 )
        {
            $where .= ' AND B.curricularComponentId ILIKE ?';
            $args[] = $filters->curriculumCurricularComponentId;
        }
        if ( strlen($filters->curriculumCurricularComponentVersion) > 0 )
        {
            $where .= ' AND B.curricularComponentVersion = ?';
            $args[] = $filters->curriculumCurricularComponentVersion;
        }
        if ( strlen($filters->curriculumCurricularComponentName) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curriculumCurricularComponentName . '%';
        }
        if ( strlen($filters->conditionCurriculumId) > 0 )
        {
            $where .= ' AND A.conditionCurriculumId = ?';
            $args[] = $filters->conditionCurriculumId;
        }
        if ( strlen($filters->conditionalCurriculumCourseId) > 0 )
        {
            $where .= ' AND E.courseId ILIKE ?';
            $args[] = $filters->conditionalCurriculumCourseId;
        }
        if ( strlen($filters->conditionalCurriculumCourseVersion) > 0 )
        {
            $where .= ' AND E.courseVersion = ?';
            $args[] = $filters->conditionalCurriculumCourseVersion;
        }
        if ( strlen($filters->conditionalCurriculumCourseName) > 0 )
        {
            $where .= ' AND UNACCENT(F.name) ILIKE UNACCENT(?)';
            $args[] = $filters->conditionalCurriculumCourseName . '%';
        }
        if ( strlen($filters->conditionalCurriculumCurricularComponentId) > 0 )
        {
            $where .= ' AND E.curricularComponentId ILIKE ?';
            $args[] = $filters->conditionalCurriculumCurricularComponentId;
        }
        if ( strlen($filters->conditionalCurriculumCurricularComponentVersion) > 0 )
        {
            $where .= ' AND E.curricularComponentVersion = ?';
            $args[] = $filters->conditionalCurriculumCurricularComponentVersion;
        }
        if ( strlen($filters->conditionalCurriculumCurricularComponentName) > 0 )
        {
            $where .= ' AND UNACCENT(F.name) ILIKE UNACCENT(?)';
            $args[] = $filters->conditionalCurriculumCurricularComponentName . '%';
        }
        if ( strlen($filters->type) > 0 )
        {
            $where .= ' AND A.type = ?';
            $args[] = $filters->type;
        }
        if ( strlen($filters->credits) > 0 )
        {
            $where .= ' AND A.credits = ?';
            $args[] = $filters->credits;
        }
        if ( strlen($filters->numberHour) > 0 )
        {
            $where .= ' AND A.numberHour = ?';
            $args[] = $filters->numberHour;
        }
        if ( strlen($filters->educationAreaId) > 0 )
        {
            $where .= ' AND A.educationAreaId = ?';
            $args[] = $filters->educationAreaId;
        }
        if ( strlen($filters->educationAreaDescription) > 0 )
        {
            $where .= ' AND UNACCENT(H.description) ILIKE UNACCENT(?)';
            $args[] = $filters->educationAreaDescription . '%';
        }
        if ( strlen($filters->consideraDiscMatriculadas) > 0 )
        {
            $where .= ' AND A.consideraDiscMatriculadas = ?';
            $args[] = $filters->consideraDiscMatriculadas;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY C.name,
                            D.name,
                            F.name,
                            G.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    //FIXME: Add comment
    public function searchShortCondition($filters)
    {
        $sql = 'SELECT A.conditionId,
                       B.courseId || \'/\' || B.courseVersion,
                       B.curricularComponentId || \'/\' || B.curricularComponentVersion,
                       D.name,
                       E.courseId || \'/\' || E.courseVersion, 
                       E.curricularComponentId || \'/\' || E.curricularComponentVersion,
                       G.name,
                       A.type,
                       A.credits,
                       A.numberHour,
                       A.educationAreaId,
                       H.description
                  FROM unit_acdCondition A
             LEFT JOIN unit_acdcurriculum B
                    ON (B.curriculumId = A.curriculumId)
             LEFT JOIN acdCourse C
                    ON (C.courseId = B.courseId)
             LEFT JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = B.curricularComponentId
                        AND D.curricularComponentVersion = B.curricularComponentVersion)
             LEFT JOIN unit_acdcurriculum E
                    ON (E.curriculumId = A.conditionCurriculumId)
             LEFT JOIN acdCourse F
                    ON (F.courseId = E.courseId)
             LEFT JOIN acdCurricularComponent G
                    ON (G.curricularComponentId = E.curricularComponentId
                        AND G.curricularComponentVersion = E.curricularComponentVersion)
             LEFT JOIN acdEducationArea H
                    ON (H.educationAreaId = A.educationAreaId)';

        if ( strlen($filters->conditionId) > 0 )
        {
            $where .= ' AND A.conditionId = ?';
            $args[] = $filters->conditionId;
        }
        if ( strlen($filters->curriculumId) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen($filters->curriculumCourseId) > 0 )
        {
            $where .= ' AND B.courseId ILIKE ?';
            $args[] = $filters->curriculumCourseId;
        }
        if ( strlen($filters->curriculumCourseVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $filters->curriculumCourseVersion;
        }
        if ( strlen($filters->curriculumCourseName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curriculumCourseName . '%';
        }
        if ( strlen($filters->courseUnitId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $filters->courseUnitId;
        }
        if ( strlen($filters->courseTurnId) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $filters->courseTurnId;
        }
        if ( strlen($filters->curriculumCurricularComponentId) > 0 )
        {
            $where .= ' AND B.curricularComponentId ILIKE ?';
            $args[] = $filters->curriculumCurricularComponentId;
        }
        if ( strlen($filters->curriculumCurricularComponentVersion) > 0 )
        {
            $where .= ' AND B.curricularComponentVersion = ?';
            $args[] = $filters->curriculumCurricularComponentVersion;
        }
        if ( strlen($filters->curriculumCurricularComponentName) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curriculumCurricularComponentName . '%';
        }
        if ( strlen($filters->conditionCurriculumId) > 0 )
        {
            $where .= ' AND A.conditionCurriculumId = ?';
            $args[] = $filters->conditionCurriculumId;
        }
        if ( strlen($filters->conditionalCurriculumCourseId) > 0 )
        {
            $where .= ' AND E.courseId ILIKE ?';
            $args[] = $filters->conditionalCurriculumCourseId;
        }
        if ( strlen($filters->conditionalCurriculumCourseVersion) > 0 )
        {
            $where .= ' AND E.courseVersion = ?';
            $args[] = $filters->conditionalCurriculumCourseVersion;
        }
        if ( strlen($filters->conditionalCurriculumCourseName) > 0 )
        {
            $where .= ' AND UNACCENT(F.name) ILIKE UNACCENT(?)';
            $args[] = $filters->conditionalCurriculumCourseName . '%';
        }
        if ( strlen($filters->conditionalCurriculumCurricularComponentId) > 0 )
        {
            $where .= ' AND E.curricularComponentId ILIKE ?';
            $args[] = $filters->conditionalCurriculumCurricularComponentId;
        }
        if ( strlen($filters->conditionalCurriculumCurricularComponentVersion) > 0 )
        {
            $where .= ' AND E.curricularComponentVersion = ?';
            $args[] = $filters->conditionalCurriculumCurricularComponentVersion;
        }
        if ( strlen($filters->conditionalCurriculumCurricularComponentName) > 0 )
        {
            $where .= ' AND UNACCENT(F.name) ILIKE UNACCENT(?)';
            $args[] = $filters->conditionalCurriculumCurricularComponentName . '%';
        }
        if ( strlen($filters->type) > 0 )
        {
            $where .= ' AND A.type = ?';
            $args[] = $filters->type;
        }
        if ( strlen($filters->credits) > 0 )
        {
            $where .= ' AND A.credits = ?';
            $args[] = $filters->credits;
        }
        if ( strlen($filters->numberHour) > 0 )
        {
            $where .= ' AND A.numberHour = ?';
            $args[] = $filters->numberHour;
        }
        if ( strlen($filters->educationAreaId) > 0 )
        {
            $where .= ' AND A.educationAreaId = ?';
            $args[] = $filters->educationAreaId;
        }
        if ( strlen($filters->educationAreaDescription) > 0 )
        {
            $where .= ' AND UNACCENT(H.description) ILIKE UNACCENT(?)';
            $args[] = $filters->educationAreaDescription . '%';
        }
        if ( strlen($filters->consideraDiscMatriculadas) > 0 )
        {
            $where .= ' AND A.consideraDiscMatriculadas = ?';
            $args[] = $filters->consideraDiscMatriculadas;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.curricularComponentId,
                            E.curricularComponentId';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCondition($data)
    {
        $sql = 'INSERT INTO acdCondition
                            (curriculumId,
                             conditionCurriculumId,
                             type,
                             credits,
                             numberHour,
                             educationAreaId,
                             consideraDiscMatriculadas)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( 
            $data->curriculumId,
            $data->conditionCurriculumId,
            $data->type,
            $data->credits,
            $data->numberHour,
            $data->educationAreaId,
            $data->consideraDiscMatriculadas
        );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCondition($data)
    {
        $sql = 'UPDATE acdCondition
                   SET curriculumId              = ?,
                       conditionCurriculumId     = ?,
                       type                      = ?,
                       credits                   = ?,
                       numberHour                = ?,
                       educationAreaId           = ?,
                       consideraDiscMatriculadas = ?
                 WHERE conditionId = ?';

        $args = array( 
            $data->curriculumId,
            $data->conditionCurriculumId,
            $data->type,
            $data->credits,
            $data->numberHour,
            $data->educationAreaId,
            $data->consideraDiscMatriculadas,
            $data->conditionId
        );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $conditionId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCondition($conditionId)
    {
        $sql = 'DELETE FROM acdCondition
                      WHERE conditionId = ?';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $conditionId));

        return $result;
    }

    /**
     * Check conditions from type 'C'
     *
     * @param $group (array): Array containing all groups
     * @param $contractId (integer): Student course and course version
     *
     * @return (String): True if succeed, otherwise False
     *
     **/
    public function checkGroupCondition($group, $contractId, $learningPeriodId=null, $form=null)
    {

        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $db     = $this->getDatabase();
        
        $busEnroll = new BusinessAcademicBusEnroll();

        $error = false;
        
        if (count($group) > 0)
        {
            foreach ( $group as $groupId )
            {

                $sql    = 'SELECT curriculumId
                             FROM unit_acdGroup
                            WHERE groupId = ?';

                $result = $db->query(SAGU::prepare($sql, $groupId));
                
                $curriculum[] = $result[0][0];

            }

            foreach ( $group as $groupId )
            {

                $sql    = 'SELECT curricularComponentId,
                                  curricularComponentVersion
                             FROM unit_acdcurriculum
                            WHERE curriculumId IN (
                                  SELECT curriculumId
                                    FROM unit_acdGroup
                                  WHERE groupId = ? )';

                $result = $db->query(SAGU::prepare($sql, $groupId));

                list ( $curricularComponentId,
                       $curricularComponentVersion ) = $result[0];

                $sql    = 'SELECT courseId,
                                  courseVersion,
                                  turnId,
                                  unitId
                             FROM unit_acdContract
                            WHERE contractId = ?';

                $result = $db->query(SAGU::prepare($sql, $contractId));

                list ( $courseId,
                       $courseVersion,
                       $turnId,
                       $unitId ) = $result[0];

                $sql    = 'SELECT curriculumId
                             FROM unit_acdcurriculum
                            WHERE courseId      = ?
                              AND courseVersion = ?
                              AND turnId        = ?
                              AND unitId        = ?
                              AND curricularComponentId      = ?
                              AND curricularComponentVersion = ?
                              AND endDate IS NULL';

                $args   = array (
                                  $courseId,
                                  $courseVersion,
                                  $turnId,
                                  $unitId,
                                  $curricularComponentId,
                                  $curricularComponentVersion
                                );

                $result = $db->query(SAGU::prepare($sql, $args));

                $curriculumId = $result[0][0];
                                    
                $filters->curriculumId = $curriculumId;
                $filters->type         = 'C';
                $result                = $this->searchCondition($filters);

                if ( $result == NULL )
                {
                    unset($filters->curriculumId);
                    $filters->conditionCurriculumId = $curriculumId;
                    $result                         = $this->searchCondition($filters);
                }

                unset($msg1);
                if ( count($result)>0 )
                {
                    foreach ( $result as $row2 )
                    {
                        if ( (in_array($row2[1],$curriculum) && !in_array($row2[8],$curriculum)) || 
                             (!in_array($row2[1],$curriculum) && in_array($row2[8],$curriculum)) )
                        {
                            if ($learningPeriodId != null)
                            {
                                if ( !$busEnroll->isUnblocked($contractId, $learningPeriodId, $row2[1]) && 
                                     !$busEnroll->isUnblocked($contractId, $learningPeriodId, $row2[8]) ) 
                                {
                                    $error = true;
                                }
                            }
                            else
                            {
                                $error = true;
                            }
                            
                            if ($error)
                            {
                                $msg1 .= _M('As disciplinas abaixo devem ser cursadas juntas',$module) . '<br>';
                                $msg1 .= $row2[5] . '/' . $row2[6] . ' - ' . $row2[7] . '<br>';
                                $msg1 .= $row2[12] . '/' . $row2[13] . ' - ' . $row2[14] . '<br>';
                                $caption1 = _M('Erro de requisito',$module);
                                
                                if ($form == null)
                                {
                                    $MIOLO->error( $msg1, 'RETURN', $caption1 );
                                }
                                else
                                {
                                    $form->addError( $msg1 );
                                }
                            }
                        }
                    }
                }
            }//foreach
        }    
        return $error;
    }
}

?>
