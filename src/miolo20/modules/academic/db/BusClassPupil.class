<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdClassPupil table
 *
 * @author Bruno Madeiro da Silva [bmsilva@uncisal.edu.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 19/12/2006
 *
 **/

/**
 * Class to manipulate the acdClassPupil table
 **/
class BusinessAcademicBusClassPupil extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $professorCurricularComponentId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getClassPupil($classId, $contractId, $beginDate)
    {
        $sql = 'SELECT A.classId,
                       A.contractId,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       reasonId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM unit_acdclasspupil A
                 WHERE A.classId = ?
                   AND A.contractId = ?
                   AND A.beginDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';

        $args = array( $classId,
                       $contractId,
                       $beginDate );
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $classPupil = new AcdClassPupil();
        list ( $classPupil->classId,
               $classPupil->contractId,
               $classPupil->beginDate,
               $classPupil->endDate,
               $classPupil->reasonId,
               $classPupil->userName,
               $classPupil->dateTime,
               $classPupil->ipAddress ) = $result[0];

        return $classPupil;
    }
    
    /**
     * Obtém turma do aluno no período indicado.
     * 
     * @param int $contractId
     * @param String $periodId
     * @return \AcdClassPupil
     */
    public function obterTurmaDoAlunonoPeriodo($contractId, $periodId)
    {
        $sql = "SELECT *
                  FROM acd_obterTurmaDoAlunoNoPeriodo(?, ?)";
        
        $result = SDatabase::query($sql, array($contractId, $periodId));
        
        $class = new stdClass();
        list ( $class->username,
               $class->datetime,
               $class->ipaddress,
               $class->classId,
               $class->name,
               $class->initialLearningPeriodId,
               $class->vacant,
               $class->unitId,
               $class->centerId ) = $result[0];

        return $class;
    }


    /**
     * Check if the initial learning period course id is the same that the pupil contract course id
     *
     * @param $data (object): Values to be filtered
     *
     * @return (object): Return true or false
     *
     **/
    public function checkCourse($data)
    {
        $sql = 'SELECT CASE WHEN (     B.courseId      = (SELECT courseId      FROM unit_acdContract WHERE contractId = ?)
                                   AND B.courseVersion = (SELECT courseVersion FROM unit_acdContract WHERE contractId = ?)
                                   AND B.turnId        = (SELECT turnId        FROM unit_acdContract WHERE contractId = ?)
                                   AND B.unitId        = (SELECT unitId        FROM unit_acdContract WHERE contractId = ?) )
                            THEN true 
                            ELSE false 
                             END
                  FROM unit_acdclass A
            INNER JOIN unit_acdlearningperiod B
                    ON ( A.initialLearningPeriodId = B.learningPeriodId )
                 WHERE A.classId = ?';

        $args = array( $data->contractId,
                       $data->contractId,
                       $data->contractId,
                       $data->contractId,
                       $data->classId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchClassPupil($filters, $toObject = false)
    {
        $sql = 'SELECT A.classId,
                       A.name,
                       C.contractId,
                       C.courseId,
                       C.courseVersion,
                       getCourseShortName(C.courseId),
                       C.personId,
                       getPersonName(C.personid),
                       TO_CHAR(D.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(B.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(B.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM unit_acdclass A
            INNER JOIN unit_acdclasspupil B
                    ON (A.classId = B.classId)
            INNER JOIN unit_acdContract C
                    ON (C.contractId = B.contractId)
            INNER JOIN unit_acdlearningperiod D
                    ON (A.initialLearningPeriodId = D.learningPeriodId)';

        $vars = array(
            'classId',
            'className',
            'contractId',
            'courseId',
            'courseVersion',
            'courseShortName',
            'personId',
            'personName',
            'learningPeriodBeginDate',
            'classPupilBeginDate',
            'classPupilEndDate'
        );

        if ( strlen($filters->classId ) > 0 )
        {
            $where .= ' AND A.classId ILIKE ? ';
            $args[] = $filters->classId."%";
        }
        if ( strlen($filters->personId ) > 0 )
        {
            $where .= ' AND C.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->contractId ) > 0 )
        {
            $where .= ' AND C.contractId = ? ';
            $args[] = $filters->contractId;
        }
        if ( strlen($filters->beginDate ) > 0 )
        {
            $where .= ' AND B.beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') ';
            $args[] = $filters->beginDate;
        }
        if ( $filters->notHaveEndDate == DB_TRUE )
        {
            $where .= ' AND B.endDate IS NULL ';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                     ORDER BY getPersonName(C.personid) ';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $toObject ? SAGU::resultToObject($result, $vars) : $result;
    }

    public function searchClassPupilFormGrid($filters)
    {
        $sql = 'SELECT A.classId,
                       A.name,
                       C.contractId,
                       C.courseId || \' / \' || C.courseVersion,
                       getCourseShortName(C.courseId),
                       C.personId,
                       getPersonName(C.personid),
                       TO_CHAR(D.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(B.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(B.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM unit_acdclass A
            INNER JOIN unit_acdclasspupil B
                    ON (A.classId = B.classId)
            INNER JOIN unit_acdContract C
                    ON (C.contractId = B.contractId)
            INNER JOIN unit_acdlearningperiod D
                    ON (A.initialLearningPeriodId = D.learningPeriodId)
       INNER JOIN ONLY basPhysicalPerson E
                    ON (E.personId = C.personId)';

        if ( strlen($filters->classId) > 0 )
        {
            $where .= ' AND A.classId ILIKE ? ';
            $args[] = $filters->classId."%";
        }
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND C.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND C.contractId = ? ';
            $args[] = $filters->contractId;
        }
        if ( strlen($filters->beginDate) > 0 )
        {
            $where .= ' AND B.beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') ';
            $args[] = $filters->beginDate;
        }
        if ( $filters->notHaveEndDate == DB_TRUE )
        {
            $where .= ' AND B.endDate IS NULL ';
        }
        if ( strlen($filters->className) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->className;
        }
        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND UNACCENT(E.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->personName;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                     ORDER BY getPersonName(C.personid) ';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
    public function insertOrUpdateClassPupil($data)
    {
        $MIOLO = MIOLO::getInstance();

        $filters = new stdClass();
        $filters->classId = $data->classId;
        $filters->contractId = $data->contractId;
        $filters->beginDate = $data->beginDate;
        $rows = $this->searchClassPupil($filters);
        
        if ( count($rows) <= 0 )
        {
            $this->insertClassPupil($data);
        }
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertClassPupil($data)
    {
        /**
         * Verifica se já existe a turma. Caso exista, retorna true.
         */
        $sql = ' SELECT classId 
                   FROM acdClassPupil 
                  WHERE classId = ? 
                    AND contractId = ?
                    AND (endDate IS NULL OR endDate > NOW()::DATE) ';
        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($data->classId, $data->contractId)));
        
        if ( strlen($result[0][0]) > 0 )
        {
            return true;
        }
        
        /**
         * Fecha todas as turmas do contrato, forçando a deixar apenas a que está sendo inserida como ativa.
         */
        $sql = " UPDATE acdClassPupil SET enddate = (now()::date - interval '1 day')::date WHERE contractid = ? AND enddate IS NULL ";
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, array($data->contractId)));
        
        $sql = 'INSERT INTO acdClassPupil
                            (classId,
                             contractId,
                             beginDate,
                             endDate,
                             reasonId)
                     VALUES (?, ?, TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'), TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),?)';

        $args = array( $data->classId,
                       $data->contractId,
                       $data->beginDate,
                       $data->endDate,
                       $data->reasonId );
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateClassPupil($data)
    {
        $sql = 'UPDATE acdClassPupil
                   SET endDate = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       reasonId = ?
                 WHERE classId = ? 
                   AND contractId = ?
                   AND beginDate  = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';

        $args = array( $data->endDate,
                       $data->reasonId,
                       $data->classId,
                       $data->contractId,
                       $data->beginDate);
        
        $sql = SAGU::prepare($sql, $args);     
        $result = $this->getDatabase()->execute($sql);

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $professorCurricularComponentId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteClassPupil($classId, $contractId, $beginDate)
    {
        $sql = 'DELETE FROM acdClassPupil
                      WHERE classId   = ? 
                        AND contractId = ?
                        AND beginDate  = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';

        $args = array( $classId,
                       $contractId,
                       $beginDate);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Para transfer?ncias de cursos por unidade.
     * 
     * @param stdClass $data
     * @return boolean
     */
    public function updateUnitIdClassUpil($data)
    {
        $sql = "UPDATE acdClassPupil
                   SET unitId = ?
                 WHERE contractId = ?
                   AND classId = ?";
        
        $params = array(
            $data->unitId,
            $data->contractId,
            $data->classId
        );
        
        $sql = SAGU::prepare($sql, $params); 

        return $this->getDatabase()->execute($sql);
    }

    /**
     * Gets the current class for a contract
     *
     * @param $contractId (integer): the id of the contract from wich the class must be searched
     *
     * @return (array): the class found
     *
     **/
     public function getContractCurrentClass($contractId, $isWebServices = false)
     {
        $acdclasspupil = "unit_acdclasspupil";
        $acdclass = "unit_acdclass";
        
        // Para webservices.
        if ( $isWebServices )
        {
            $acdclasspupil = "acdclasspupil";
            $acdclass = "acdclass";
        } 
         
        $sql = "SELECT DISTINCT A.classId,
                                B.name,
                                A.contractId,
                                TO_CHAR(A.beginDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "')
                  FROM {$acdclasspupil} A
            INNER JOIN {$acdclass} B
                    ON B.classId = A.classId
                 WHERE A.contractId = ?
                   AND A.classId = getContractClassId(A.contractId)";

        $args   = array( $contractId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $currentClassPupil = new stdClass();
        list ( $currentClassPupil->classId,
               $currentClassPupil->name,
               $currentClassPupil->contractId,
               $currentClassPupil->beginDate ) = $result[0];

        return $currentClassPupil;
     }

    /**
     * Check the current class for a contract by period
     *
     * @param $contractId (integer): the id of the contract from wich the class must be searched
     * @param $beginDate (date): the begin date of the contract from wich the class must be searched
     *
     * @return (string): the class id found
     *
     **/
     public function getContractByPeriod($contractId, $date, $requestingClassId)
     {
        $sql = 'SELECT classId,
                       TO_CHAR(beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                  FROM unit_acdclasspupil
                 WHERE contractId = ?
                   AND TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') BETWEEN beginDate AND endDate ';

        $args   = array( $contractId,
                         $date );

        if( strlen($requestingClassId) > 0 )
        {
            $sql   .= ' AND classId != ?';
            $args[] = $requestingClassId;
        }

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        list ( $contractByPeriod->classId ,
               $contractByPeriod->beginDate,
               $contractByPeriod->endDate ) = $result[0];

        return $contractByPeriod;
     }

    /**
     * Get free date for insert/update class pupil
     *
     * @param $contractId (integer): the id of the contract from wich the class must be searched
     * @param $freeDate (string): the free date for test
     * @param $operation (string): the operation for date
     *
     * @return (string): the free date found
     *
     **/
     public function getFreeDateFromChanges($contractId, $testDate, $operation = ' + ', $beginDateOpenClass)
     {
        $dateIndentificator = $operation == ' + ' ? 'endDate' : 'beginDate';
        $freeDate->date = $testDate;
        while(true)
        {
            $contractInThePeriod        = $this->getContractByPeriod($contractId, $freeDate->date, null );
            $minorClosedClassOverlapped = $this->getMinorClosedClassOverlapped($contractId,$beginDateOpenClass,$freeDate->date);
            if ( strlen($contractInThePeriod->classId) > 0 )
            {
                $freeDate->date = SAGU::addIntervalInDate($contractInThePeriod->$dateIndentificator, 'd', 1 , $operation);
            }
            elseif ( strlen($minorClosedClassOverlapped->classId) > 0 && $dateIndentificator == 'beginDate' )
            {
                $freeDate->date = SAGU::addIntervalInDate($contractInThePeriod->$dateIndentificator, 'd', 1 , $operation);
            }
            else
            {
                break;
            }
        }

        return $freeDate;
     }

    /**
     * Get minor closed class overlapped period for class pupil
     *
     * @param $contractId (integer): the id of the contract from wich the class must be searched
     * @param $beginDate (string): the begin date for test
     * @param $endDate (string): the end date for test
     *
     * @return (string): the free date found
     *
     **/
     public function getMinorClosedClassOverlapped($contractId, $beginDate, $endDate)
     {
        $sql = 'SELECT classId,
                       TO_CHAR(beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as beginDate,
                       TO_CHAR(endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as endDate
                  FROM unit_acdclasspupil
                 WHERE contractId = ?
                   AND beginDate BETWEEN TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AND TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                   AND endDate IS NOT NULL
              ORDER BY beginDate LIMIT 1';

        $args   = array( $contractId,
                         $beginDate,
                         $endDate );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        list ( $minorClosedClassOverlapped->classId ,
               $minorClosedClassOverlapped->beginDate,
               $minorClosedClassOverlapped->endDate ) = $result[0];

        return $minorClosedClassOverlapped;
     }

     /**
     * Função que retorna o número de alunos ativos de uma turma
     *
     * @param $classId (varchar): código que corresponde ao identificador da turma
     *
     * @return (integer): total de alunos ativos
     *
     **/
     public function getTotalClassPupil($classId)
     {
        $sql = 'SELECT count(contractId)
                  FROM unit_acdclasspupil
                 WHERE classId = ?
                   AND endDate IS NULL';

        $args   = array( $classId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result[0][0];
     }
     
     
     public function getIdClassPupil($classId)
     {
        $sql = 'SELECT *
                  FROM unit_acdclasspupil
                 WHERE classId = ? ';

        $args   = array( $classId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result[0][0];
     }
}
?>
