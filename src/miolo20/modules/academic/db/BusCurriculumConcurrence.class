<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCurriculumConcurrence table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/09/2005
 *
 **/

/**
 * Class to manipulate the acdCurriculumConcurrence table
 **/
class BusinessAcademicBusCurriculumConcurrence extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCurriculumConcurrence()
    {
        return 'Not implemented';
    }
    
    /**
     *
     **/
    public function getCurriculumConcurrence()
    {
        return 'Not implemented'; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCurriculumConcurrence($filters)
    {
        $sql = ' SELECT A.curriculumOutId,
                        B.courseId                          AS courseIdOut,
                        B.courseVersion                     AS courseVersionOut,
                        D.shortName                         AS courseNameOut,
                        B.curricularComponentId             AS curricularComponentIdOut,
                        B.curricularComponentVersion        AS curricularComponentVersionIdOut,
                        E.shortname                         AS curricularComponentNameOut,
                        A.curriculumInId,
                        B2.courseId                         AS courseIdIn,
                        B2.courseVersion                    AS courseVersionIn,
                        D2.shortName                        AS courseNameIn,
                        B2.curricularComponentId            AS curricularComponentIdIn,
                        B2.curricularComponentVersion       AS curricularComponentVersionIdIn,
                        E2.shortname                        AS curricularComponentNameIn
                   FROM unit_acdCurriculumConcurrence A
             INNER JOIN unit_acdcurriculum B
                     ON (A.curriculumOutId = B.curriculumId)
             INNER JOIN acdCourse D
                     ON (D.courseId = B.courseId)
             INNER JOIN acdCurricularComponent E
                     ON (E.curricularComponentId = B.curricularComponentId)
             INNER JOIN unit_acdcurriculum B2
                     ON (A.curriculumInId = B2.curriculumId)
             INNER JOIN acdCourse D2
                     ON (D2.courseId = B2.courseId)
             INNER JOIN acdCurricularComponent E2
                     ON (E2.curricularComponentId = B2.curricularComponentId) ';

        if ( strlen($filters->curriculumOutId) > 0 )
        {
            $where .= ' AND A.curriculumOutId = ?';
            $args[] = $filters->curriculumOutId;
        }
        if ( strlen($filters->curriculumInId) > 0 )
        {
            $where .= ' AND A.curriculumInId = ?';
            $args[] = $filters->curriculumInId;
        }
        //CurriculumOut
        if ( strlen($filters->courseOutId) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $filters->courseOutId;
        }
        if ( strlen($filters->courseOutVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $filters->courseOutVersion;
        }
        if ( strlen($filters->unitOutId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $filters->unitOutId;
        }
        if ( strlen($filters->turnOutId) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $filters->turnOutId;
        }
        if ( strlen($filters->curricularComponentOutId) > 0 )
        {
            $where .= ' AND B.curricularComponentId = ?';
            $args[] = $filters->curricularComponentOutId;
        }
        if ( strlen($filters->curricularComponentOutVersion) > 0 )
        {
            $where .= ' AND B.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentOutVersion;
        }
        //CurriculumIn
        if ( strlen($filters->courseInId) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $filters->courseInId;
        }
        if ( strlen($filters->courseInVersion) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $filters->courseInVersion;
        }
        if ( strlen($filters->unitInId) > 0 )
        {
            $where .= ' AND B2.unitId = ?';
            $args[] = $filters->unitInId;
        }
        if ( strlen($filters->turnInId) > 0 )
        {
            $where .= ' AND B2.turnId = ?';
            $args[] = $filters->turnInId;
        }
        if ( strlen($filters->curricularComponentInId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $filters->curricularComponentInId;
        }
        if ( strlen($filters->curricularComponentInVersion) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentInVersion;
        }

        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND D.courseId ILIKE ?';
            $args[] = $filters->courseId;
        }


        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.curriculumOutId';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    public function searchCurriculumConcurrenceFormGrid($filters)
    {
        $sql = ' SELECT A.curriculumOutId,
                        B.courseId || \' / \' || B.courseVersion as courseId_VersionOut,
                        D.shortName                         AS courseNameOut,
                        B.curricularComponentId || \' / \' || B.curricularComponentVersion as curricularComponentId_VersionOut,
                        E.shortname                         AS curricularComponentNameOut,
                        A.curriculumInId,
                        B2.courseId || \' / \' || B2.courseVersion as courseId_VersionIn,
                        D2.shortName                        AS courseNameIn,
                        B2.curricularComponentId || \' / \' || B2.curricularComponentVersion as curricularComponentId_VersionIn,
                        E2.shortname                        AS curricularComponentNameIn
                   FROM unit_acdCurriculumConcurrence A
             INNER JOIN unit_acdcurriculum B
                     ON (A.curriculumOutId = B.curriculumId)
             INNER JOIN acdCourse D
                     ON (D.courseId = B.courseId)
             INNER JOIN acdCurricularComponent E
                     ON (E.curricularComponentId = B.curricularComponentId)
             INNER JOIN unit_acdcurriculum B2
                     ON (A.curriculumInId = B2.curriculumId)
             INNER JOIN acdCourse D2
                     ON (D2.courseId = B2.courseId)
             INNER JOIN acdCurricularComponent E2
                     ON (E2.curricularComponentId = B2.curricularComponentId) ';

        if ( strlen($filters->curriculumOutId) > 0 )
        {
            $where .= ' AND A.curriculumOutId = ?';
            $args[] = $filters->curriculumOutId;
        }
        if ( strlen($filters->curriculumInId) > 0 )
        {
            $where .= ' AND A.curriculumInId = ?';
            $args[] = $filters->curriculumInId;
        }
        //CurriculumOut
        if ( strlen($filters->courseOutId) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $filters->courseOutId;
        }
        if ( strlen($filters->courseOutVersion) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $filters->courseOutVersion;
        }
        if ( strlen($filters->unitOutId) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $filters->unitOutId;
        }
        if ( strlen($filters->turnOutId) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $filters->turnOutId;
        }
        if ( strlen($filters->curricularComponentOutId) > 0 )
        {
            $where .= ' AND B.curricularComponentId = ?';
            $args[] = $filters->curricularComponentOutId;
        }
        if ( strlen($filters->curricularComponentOutVersion) > 0 )
        {
            $where .= ' AND B.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentOutVersion;
        }
        //CurriculumIn
        if ( strlen($filters->courseInId) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $filters->courseInId;
        }
        if ( strlen($filters->courseInVersion) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $filters->courseInVersion;
        }
        if ( strlen($filters->unitInId) > 0 )
        {
            $where .= ' AND B2.unitId = ?';
            $args[] = $filters->unitInId;
        }
        if ( strlen($filters->turnInId) > 0 )
        {
            $where .= ' AND B2.turnId = ?';
            $args[] = $filters->turnInId;
        }
        if ( strlen($filters->curricularComponentInId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $filters->curricularComponentInId;
        }
        if ( strlen($filters->curricularComponentInVersion) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentInVersion;
        }

        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND D.courseId ILIKE ?';
            $args[] = $filters->courseId;
        }


        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.curriculumOutId';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCurriculumConcurrence($data)
    {
        $sql = 'INSERT INTO acdCurriculumConcurrence
                            (curriculumOutId,
                             curriculumInId)
                     VALUES (?,
                             ?)';

        $args = array( 
                       $data->curriculumOutId,
                       $data->curriculumInId
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCurriculumConcurrence($data)
    {
        return 'Not implemented';
    }

    /**
     * Delete a record
     *
     * @param $curriculumOutId (string): Primary key for deletion
     * @param $curriculumInId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCurriculumConcurrence($curriculumOutId, $curriculumInId)
    {
        $sql = 'DELETE FROM acdCurriculumConcurrence
                      WHERE curriculumOutId = ?
                        AND curriculumInId  = ?';

        $pk = array(
                     $curriculumOutId,
                     $curriculumInId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));

        return $result;
    }
   
    /**
     * Verify if a curriculum have a concurrence
     * 
     * @curriculumInId (int): Curriculum that entered in situation for a other
     * 
     * @return (int): Curriculum that out because the new curriculum.
     */
    public function ifHaveConcurrence($curriculumInId)
    {
        $sql = ' SELECT curriculumOutId
                   FROM unit_acdCurriculumConcurrence
                  WHERE curriculumInId = ? ';

        $db = $this->getDatabase();
    
        $args = array($curriculumInId);
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    public function hasCurriculumConcurrence($curriculumInId, $curriculumOutId)
    {
        $sql = 'SELECT count(*)
                  FROM unit_acdCurriculumConcurrence
                 WHERE (curriculumInId = ? AND curriculumOutId = ?) 
                    OR (curriculumInId = ? AND curriculumOutId = ?)';
                    
        $args = array( $curriculumInId,
                       $curriculumOutId,
                       $curriculumOutId,
                       $curriculumInId );
                       
        $db = $this->getDatabase();
        
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return ($result[0][0] > 0);
    }
}

?>
