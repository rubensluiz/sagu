<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdCourseVersion table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 30/08/2005
 *
 **/

/**
 * Class to manipulate the acdCourseVersion table
 **/
class BusinessAcademicBusCourseVersion extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listCourseVersion()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     * @param $courseVersion (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getCourseVersion($courseId, $courseVersion)
    {
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.periodTotal,
                       A.periodDescription,
                       A.courseVersionTypeId,
                       A.credits,
                       A.hourTotal,
                       A.hourRequired,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdCourseVersion A
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?';

        $pk = array($courseId,
                    $courseVersion);

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $pk));

        $courseVersion = new AcdCourseVersion();

        list ( $courseVersion->courseId,
               $courseVersion->courseVersion,
               $courseVersion->beginDate,
               $courseVersion->endDate,
               $courseVersion->periodTotal,
               $courseVersion->periodDescription,
               $courseVersion->courseVersionTypeId,
               $courseVersion->credits,
               $courseVersion->hourTotal,
               $courseVersion->hourRequired,
               $courseVersion->userName,
               $courseVersion->dateTime,
               $courseVersion->ipAddress ) = $result[0];

        return $courseVersion; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchCourseVersion($filters)
    {
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.periodTotal,
                       A.periodDescription,
                       A.courseVersionTypeId,
                       B.description,
                       A.credits,
                       A.hourTotal,
                       A.hourRequired
                  FROM acdCourseVersion A
             LEFT JOIN acdCourseVersionType B
                    ON (B.courseVersionTypeId = A.courseVersionTypeId)';

        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $filters->courseId;
        }
        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen($filters->beginDate) > 0 )
        {
            $where .= ' AND A.beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->beginDate;
        }
        if ( strlen($filters->endDate) > 0 )
        {
            $where .= ' AND A.endDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->endDate;
        }
        if ( strlen($filters->periodTotal) > 0 )
        {
            $where .= ' AND A.periodTotal = ?';
            $args[] = $filters->periodTotal;
        }
        if ( strlen($filters->periodDescription) > 0 )
        {
            $where .= ' AND A.periodDescription ILIKE ?';
            $args[] = '%' . $filters->periodDescription . '%';
        }
        if ( strlen($filters->courseVersionTypeId) > 0 )
        {
            $where .= ' AND A.courseVersionTypeId = ?';
            $args[] = $filters->courseVersionTypeId;
        }
        if ( strlen($filters->courseVersionTypeDescription) > 0 )
        {
            $where .= ' AND UNACCENT(B.description) ILIKE UNACCENT(?)';
            $args[] = $filters->courseVersionTypeDescription . '%';
        }
        if ( strlen($filters->credits) > 0 )
        {
            $where .= ' AND A.credits = ?';
            $args[] = $filters->credits;
        }
        if ( strlen($filters->hourTotal) > 0 )
        {
            $where .= ' AND A.hourTotal = ?';
            $args[] = $filters->hourTotal;
        }
        if ( strlen($filters->hourRequired) > 0 )
        {
            $where .= ' AND A.hourRequired = ?';
            $args[] = $filters->hourRequired;
        }

        $result = null;
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY description';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertCourseVersion($data)
    {
        $sql = 'INSERT INTO acdCourseVersion
                            (courseId,
                             courseVersion,
                             beginDate,
                             endDate,
                             periodTotal,
                             periodDescription,
                             courseVersionTypeId,
                             credits,
                             hourTotal,
                             hourRequired)
                     VALUES (?,
                             ?,
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( $data->courseId,
                       $data->courseVersion,
                       $data->beginDate,
                       $data->endDate,
                       $data->periodTotal,
                       $data->periodDescription,
                       $data->courseVersionTypeId,
                       $data->credits,
                       $data->hourTotal,
                       $data->hourRequired );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args, false));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateCourseVersion($data)
    {
        $sql = 'UPDATE acdCourseVersion
                   SET beginDate           = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       endDate             = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       periodTotal       = ?,
                       periodDescription   = ?,
                       courseVersionTypeId = ?,
                       credits             = ?,
                       hourTotal           = ?,
                       hourRequired        = ?
                 WHERE courseId      = ?
                   AND courseVersion = ?';

        $args = array( $data->beginDate,
                       $data->endDate,
                       $data->periodTotal,
                       $data->periodDescription,
                       $data->courseVersionTypeId,
                       $data->credits,
                       $data->hourTotal,
                       $data->hourRequired,
                       $data->courseId,
                       $data->courseVersion );

        $sqls = SAGU::prepare($sql, $args, false);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     * @param $courseVersion (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteCourseVersion($courseId, $courseVersion)
    {
        $sql = 'DELETE FROM acdCourseVersion
                      WHERE courseId = ?
                        AND courseVersion = ?';

        $pk = array ( $courseId,
                      $courseVersion );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $pk));
        
        return $result;
    }

   /**
    * Get the total hours for a course
    *
    * @author: William Prigol Lopes [william@solis.coop.br]
    *
    * @param $courseId: Course key
    * @param $courseVersion: Course Version key
    *
    * @return (real): Value containing the total hours for this course
    *
    */
    public function getCourseVersionTotalHours($courseId, $courseVersion) 
    {
        $sql = ' SELECT hourtotal
                   FROM acdCourseVersion
                  WHERE courseId = ?
                    AND courseVersion = ? ';
                    
        $args = array( $courseId,
                       $courseVersion);

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        return $result[0][0];
    }
    
   /**
    * Get the total credits for a course
    *
    * @param $courseId: Course key
    * @param $courseVersion: Course Version key
    *
    * @return (real): Value containing the total hours for this course
    *
    */
    public function getCourseVersionTotalCredits($courseId, $courseVersion) 
    {
        $sql = ' SELECT credits
                   FROM acdCourseVersion
                  WHERE courseId = ?
                    AND courseVersion = ? ';
                    
        $args = array( $courseId,
                       $courseVersion);

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return $result[0][0];
    }
 
       /**
    * Get the total semester for a course
    *
    * @param $courseId: Course key
    * @param $courseVersion: Course Version key
    *
    * @return (real): Value containing the total hours for this course
    *
    */
    public function getCourseVersionTotalSemester($courseId, $courseVersion) 
    {
        $sql = ' SELECT periodTotal
                   FROM acdCourseVersion
                  WHERE courseId = ?
                    AND courseVersion = ? ';
                    
        $args = array( $courseId,
                       $courseVersion);
                       
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        return $result[0][0];
    }
}

?>
