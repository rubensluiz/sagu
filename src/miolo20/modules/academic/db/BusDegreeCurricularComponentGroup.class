<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdDegreeCurricularComponentGroup table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 29/08/2005
 */

class BusinessAcademicBusDegreeCurricularComponentGroup extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @returns (array): Return an array with the entire table
     **/
    public function listDegreeCurricularComponentGroup()
    {
        $sql = 'SELECT degreeCurricularComponentGroupId,
                       learningPeriodId,
                       contractId,
                       curricularComponentGroupId,
                       note,
                       concept,
                       description,
                       enrollStatusId
                  FROM acdDegreeCurricularComponentGroup   
              ORDER BY description';

        $ret = $this->getDatabase()->query($sql);
        
        return $ret;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $degreeCurricularComponentGroupId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     **/
    public function getDegreeCurricularComponentGroup($degreeCurricularComponentGroupId)
    {
        $sql = 'SELECT degreeCurricularComponentGroupId,
                       learningPeriodId,
                       contractId,
                       curricularComponentGroupId,
                       note,
                       concept,
                       description,
                       enrollStatusId,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM acdDegreeCurricularComponentGroup
                 WHERE degreeCurricularComponentGroupId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $degreeCurricularComponentGroupId));
        
        $degreeCurricularComponentGroup = new acdDegreeCurricularComponentGroup();
        list ( $degreeCurricularComponentGroup->degreeCurricularComponentGroupId,
               $degreeCurricularComponentGroup->learningPeriodId,
               $degreeCurricularComponentGroup->contractId,
               $degreeCurricularComponentGroup->curricularComponentGroupId,
               $degreeCurricularComponentGroup->note,
               $degreeCurricularComponentGroup->concept,
               $degreeCurricularComponentGroup->description,
               $degreeCurricularComponentGroup->enrollStatusId,
               $degreeCurricularComponentGroup->userName,
               $degreeCurricularComponentGroup->dateTime,
               $degreeCurricularComponentGroup->ipAddress ) = $result[0];

        return $degreeCurricularComponentGroup; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchDegreeCurricularComponentGroup($filters)
    {
        $sql= 'SELECT A.degreeCurricularComponentGroupId,
                      A.learningPeriodId,
                      A.contractId,
                      A.curricularComponentGroupId,
                      A.note,
                      A.concept,
                      A.description,
                      A.enrollStatusId,
                      B.description,
                      A.userName,
                      TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                 FROM acdDegreeCurricularComponentGroup A
           INNER JOIN acdEnrollStatus B
                   ON (B.statusId = A.enrollStatusId)';

        if ( strlen($filters->degreeCurricularComponentGroupId) > 0 )
        {
            $where .= ' AND A.degreeCurricularComponentGroupId = ? ';
            $args[] = $filters->degreeCurricularComponentGroupId;
        }

        if ( strlen($filters->learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ? ';
            $args[] = $filters->learningPeriodId;
        }

        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ? ';
            $args[] = $filters->contractId;
        }

        if ( strlen($filters->curricularComponentGroupId) > 0 )
        {
            $where .= ' AND A.curricularComponentGroupId = ? ';
            $args[] = $filters->curricularComponentGroupId;
        }

        if ( strlen($filters->note) > 0 )
        {
            $where .= ' AND A.note = ? ';
            $args[] = $filters->note;
        }

        if ( strlen($filters->concept) > 0 )
        {
            $where .= ' AND A.concept = ? ';
            $args[] = $filters->concept;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND ND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description;
        }

        if ( strlen($filters->enrollStatusId) > 0 )
        {
            $where .= ' AND A.enrollStatusId = ? ';
            $args[] = $filters->enrollStatusId;
        }
        
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.description';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     **/
    public function insertDegreeCurricularComponentGroup($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //Insert degree curricular component group
        $sql = 'INSERT INTO acddegreeCurricularComponentGroup
                            (learningPeriodId,
                             contractId,
                             curricularComponentGroupId,
                             note,
                             concept,
                             description,
                             enrollStatusId)
                      VALUES (?,?,?,?,?,?,?)';

        $args = array( $data->learningPeriodId,
                       $data->contractId,
                       $data->curricularComponentGroupId,
                       $data->note,
                       $data->concept,
                       $data->description,
                       $data->enrollStatusId );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     **/
    public function updateDegreeCurricularComponentGroup($data)
    {
        $sql = 'UPDATE acdDegreeCurricularComponentGroup
                   SET learningPeriodId = ?,
                       contractId = ?,
                       curricularComponentGroupId = ?,
                       note = ?,
                       concept = ?,
                       description = ?,
                       enrollStatusId = ?
                 WHERE degreeCurricularComponentGroupId = ?';

        $args = array( $data->learningPeriodId,
                       $data->contractId,
                       $data->curricularComponentGroupId,
                       $data->note,
                       $data->concept,
                       $data->description,
                       $data->enrollStatusId,
                       $data->degreeCurricularComponentGroupId );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $degreeCurricularComponentGroupId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     **/
    public function deleteDegreeCurricularComponentGroup($degreeCurricularComponentGroupId)
    {
        $sql = 'DELETE FROM acdDegreeCurricularComponentGroup
                      WHERE degreeCurricularComponentGroupId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $degreeCurricularComponentGroupId));
        
        return $result;
    }

    /**
     * Search for enrolled pupils of discipline group.
     *
     * @return an array containing the select results.
     */
    public function searchEnrolledPupilsOfDisciplineGroup($filters)
    {
        $sql= 'SELECT A.learningPeriodId,
                      B.contractId,
                      A.description,
                      D.personId,
                      D.name,
                      A.gradesByConcept
                 FROM unit_acdlearningperiod A
           INNER JOIN unit_acdContract B
                   ON B.courseId = A.courseId
                  AND B.courseVersion = A.courseVersion
                  AND B.turnId = A.turnId
                  AND B.unitId = A.unitId
      INNER JOIN ONLY basphysicalperson D
                   ON B.personId = D.personId';

        if ( strlen($filters->periodId) > 0 )
        {
            $where .= ' AND  A.periodId = ? ';
            $args[] = $filters->periodId;
        }

        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND  A.courseId = ? ';
            $args[] = $filters->courseId;
        }

        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND  A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }

        if ( strlen($filters->turnId) > 0 )
        {
            $where .= ' AND  A.turnId = ? ';
            $args[] = $filters->turnId;
        }

        if ( strlen($filters->unitId) > 0 )
        {
            $where .= ' AND  A.unitId = ? ';
            $args[] = $filters->unitId;
        }

        if ( strlen($filters->classId) > 0 )
        {
            $where .= ' AND  C.classId = ? ';
            $args[] = $filters->classId;
        }

        //Contrato selecionado deve possuir matricula em todas as disciplinas do grupo de disciplinas
        if ( strlen($filters->existingContractInDisciplines) > 0 )
        {
            $where .= ' -- se existir alguma disciplina do grupo na qual o contrato nao esteja
                        -- matriculado, nao retornar o registro
                        AND NOT EXISTS (SELECT \'x\'
                                          FROM unit_acdcurriculum N
                                         WHERE N.curricularComponentGroupDocumentEndCourseId = ?
                                           AND N.courseId = A.courseId
                                           AND N.courseVersion = A.courseVersion
                                           AND N.turnId = A.turnId
                                           AND N.unitId = A.unitId
                                           -- nao existe matricula na disciplina e periodo para o
                                           -- contrato selecionado
                                           AND NOT EXISTS (SELECT \'y\'
                                                             FROM unit_acdEnroll X
                                                       INNER JOIN unit_acdGroup Y
                                                               ON Y.groupId = X.groupId
                                                       INNER JOIN unit_acdcurriculum Z
                                                               ON Z.curriculumId = Y.curriculumId
                                                       INNER JOIN unit_acdlearningperiod Z1
                                                               ON Z1.learningPeriodId = Y.learningPeriodId
                                                            WHERE X.contractId = B.contractId
                                                              AND Z.curricularComponentId = N.curricularComponentId
                                                              AND Z.curricularComponentVersion = N.curricularComponentVersion
                                                              AND Z1.periodId = A.periodId))';

            $args[] = $filters->curricularComponentGroupId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' AND ' . substr($where, 4);
        }
        $sql .= 'ORDER BY D.name';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Retorna a nota e o status no grupo de disciplinas para o período e contrato informado
     *
     * @param $learningPeriodId
     * @param $contractId
     * @param $concept
     */
    public function getDegreeEnrollCurrentGrade($learningPeriodId, $contractId, $curricularComponentGroupId, $concept = false)
    {
        if ($concept)
        {
            $field = 'concept';
        }
        else
        {
            $field = 'note';
        }

        $sql = "SELECT $field,
                       enrollStatusId
                  FROM acdDegreeCurricularComponentGroup
                 WHERE learningPeriodId = ?
                   AND contractId = ?
                   AND curricularComponentGroupId = ?
              ORDER BY dateTime DESC LIMIT 1";

        $args = array( $learningPeriodId,
                       $contractId,
                       $curricularComponentGroupId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $return = new stdClass();
        list( $return->evaluation,
              $return->enrollStatusId ) = $result[0];

        return $return;
    }
}
?>
