<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdMovementContractComplement table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 26/09/2005
 */

/**
 * Class to manipulate the acdMovementContractComplement table
 */
class BusinessAcademicBusMovementContractComplement extends sBusiness
{
    /**
     * Return the first record from the database
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     */
    public function getFirstMovementContractComplement($contractId)
    {
        $sql = 'SELECT A.contractId,
                       B.personId AS contractPersonId,
                       C.name AS contractPersonName,
                       A.stateContractId,
                       D.description AS stateDescription,
                       A.stateContractFieldId,
                       E.description AS stateContractFieldDescription,
                       TO_CHAR(A.stateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\') as stateTime,
                       A.value,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdMovementContractComplement A
             LEFT JOIN unit_acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON (C.personId = B.personId)
             LEFT JOIN acdStateContract D
                    ON (D.stateContractId = A.stateContractId)
             LEFT JOIN acdStateContractField E
                    ON (E.stateContractFieldId = A.stateContractFieldId)
                 WHERE A.contractId = ?
              ORDER BY A.stateTime
                 LIMIT 1';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $contractId));
        $movementContractComplement = new AcdMovementContractComplement();

        list ( $movementContractComplement->contractId,
               $movementContractComplement->contractPersonId,
               $movementContractComplement->contractPersonName,
               $movementContractComplement->stateContractId,
               $movementContractComplement->stateDescription,
               $movementContractComplement->stateContractFieldId,
               $movementContractComplement->stateContractFieldDescription,
               $movementContractComplement->stateTime,
               $movementContractComplement->value,
               $movementContractComplement->userName,
               $movementContractComplement->dateTime,
               $movementContractComplement->ipAddress ) = $result[0];

        return $movementContractComplement; 
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     * @param $stateContractId (integer): Primary key of the record to be retrieved
     * @param $stateContractFieldId (integer): Primary key of the record to be retrieved
     * @param $stateTime (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     */
    public function getMovementContractComplement($contractId, $stateContractId, $stateContractFieldId, $stateTime)
    {
        $sql = 'SELECT A.contractId,
                       B.personId AS contractPersonId,
                       C.name AS contractPersonName,
                       A.stateContractId,
                       D.description AS stateDescription,
                       A.stateContractFieldId,
                       E.description AS stateContractFieldDescription,
                       TO_CHAR(A.stateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\') as stateTime,
                       A.value,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdMovementContractComplement A
             LEFT JOIN unit_acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON (C.personId = B.personId)
             LEFT JOIN acdStateContract D
                    ON (D.stateContractId = A.stateContractId)
             LEFT JOIN acdStateContractField E
                    ON (E.stateContractFieldId = A.stateContractFieldId)
                 WHERE A.contractId = ?
                   AND A.stateContractId = ?
                   AND A.stateContractFieldId = ?
                   AND TO_CHAR(stateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\') = ?';

        $pk = array( $contractId,
                     $stateContractId,
                     $stateContractFieldId,
                     $stateTime );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $pk));

        $movementContractComplement = new AcdMovementContractComplement();

        list ( $movementContractComplement->contractId,
               $movementContractComplement->contractPersonId,
               $movementContractComplement->contractPersonName,
               $movementContractComplement->stateContractId,
               $movementContractComplement->stateDescription,
               $movementContractComplement->stateContractFieldId,
               $movementContractComplement->stateContractFieldDescription,
               $movementContractComplement->stateTime,
               $movementContractComplement->value,
               $movementContractComplement->userName,
               $movementContractComplement->dateTime,
               $movementContractComplement->ipAddress ) = $result[0];

        return $movementContractComplement; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     */
    public function searchMovementContractComplement($filters)
    {
        $sql = 'SELECT A.contractId,
                       B.personId AS contractPersonId,
                       C.name AS contractPersonName,
                       A.stateContractId,
                       D.description AS stateDescription,
                       A.stateContractFieldId,
                       E.description AS stateContractFieldDescription,
                       TO_CHAR(A.stateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\') as stateTime,
                       A.value,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdMovementContractComplement A
             LEFT JOIN unit_acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON (C.personId = B.personId)
             LEFT JOIN acdStateContract D
                    ON (D.stateContractId = A.stateContractId)
             LEFT JOIN acdStateContractField E
                    ON (E.stateContractFieldId = A.stateContractFieldId)';

        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $filters->contractId;
        }
        
        if ( strlen($filters->contractPersonId) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $filters->contractPersonId;
        }

        if ( strlen($filters->contractPersonName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $filters->contractPersonName . '%';
        }

        if ( strlen($filters->stateContractId) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $filters->stateContractId;
        }

        if ( strlen($filters->stateDescription) > 0 )
        {
            $where .= ' AND UNACCENT(D.description) ILIKE UNACCENT(?)';
            $args[] = $filters->stateDescription . '%';
        }

        if ( strlen($filters->stateContractFieldId) > 0 )
        {
            $where .= ' AND A.stateContractFieldId = ?';
            $args[] = $filters->stateContractFieldId;
        }

        if ( strlen($filters->stateContractFieldDescription) > 0 )
        {
            $where .= ' AND UNACCENT(E.description) ILIKE UNACCENT(?)';
            $args[] = $filters->stateContractFieldDescription . '%';
        }
        
        if ( strlen($filters->stateTime) > 0 )
        {
            $where .= ' AND A.stateTime = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')';
            $args[] = $filters->stateTime;
        }

        if ( strlen($filters->value) > 0 )
        {
            $where .= ' AND A.value ILIKE ?';
            $args[] = $filters->value . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY C.name,
                            D.description';
            
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     */
    public function insertMovementContractComplement($data)
    {
        $sql = 'INSERT INTO acdMovementContractComplement
                            (contractId,
                             stateContractId,
                             stateContractFieldId,
                             stateTime,
                             value)
                     VALUES (?, ?, ?, TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'), ?)';

        $args = array( $data->contractId,
                       $data->stateContractId,
                       $data->stateContractFieldId,
                       $data->stateTime,
                       $data->value );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateMovementContractComplement($data)
    {
        $sql = 'UPDATE acdMovementContractComplement
                   SET value = ?
                 WHERE contractId = ?
                   AND stateContractId = ?
                   AND stateContractFieldId = ?
                   AND stateTime = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')';

        $args = array( $data->value,
                       $data->contractId,
                       $data->stateContractId,
                       $data->stateContractFieldId,
                       $data->stateTime );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $contractId (string): Primary key for deletion
     * @param $stateContractId (string): Primary key for deletion
     * @param $stateContractFieldId (string): Primary key for deletion
     * @param $stateTime (integer): Primary key of the record to be retrieved
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteMovementContractComplement($pk)
    {
        $sql = 'DELETE FROM acdMovementContractComplement
                      WHERE contractId = ?
                        AND stateContractId = ?
                        AND TO_CHAR(stateTime, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\') = ?
                        AND stateContractFieldId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $pk));

        return $result;
    }
}
?>
