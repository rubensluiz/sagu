<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdDegree table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 15/09/2005
 *
 */

/**
 * Class to manipulate the acdDegree table
 */
class BusinessAcademicBusDegree extends sBusiness
{
    const CALCULO_SOMA = 'SOM';
    const CALCULO_MEDIA_SIMPLES = 'MAS';
    const CALCULO_MEDIA_PONDERADA = 'MAP';
    
    const EXAME_SUBSTITUI_GRAU_PAI = 'S';
    const EXAME_MEDIA_GRAU_PAI = 'M';
    const TROCA_MENOR_NOTA_OBRIGATORIA = 'T';

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     * @returns (array): Return an array with the entire table
     */
    public function listDegree()
    {
        return 'Not implemented';
    }
    
    public function getDegreeCache($degreeId)
    {
        static $cache = array();
        
        if ( !isset($cache[$degreeId]) )
        {
            $cache[$degreeId] = $this->getDegree($degreeId);
        }
        
        return $cache[$degreeId];
    }

    /**
     * Return a specific record from the database
     *
     * @param $degreeId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     */
    public function getDegree( $degreeId )
    {
        $sql = 'SELECT A.degreeId,
                       A.learningPeriodId,
                       A.description,
                       TO_CHAR(A.limitDate,\'' . SAGU::getParameter( 'BASIC', 'MASK_DATE' ) . '\') AS limitDate,
                       A.degreeNumber,
                       A.weight,
                       A.parentDegreeId,
                       A.mayBeNull,
                       A.methodCalculating,
                       A.isExam,
                       A.examCalcMethod,
                       A.examMinimumNote,
                       A.examMaximumNote,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter( 'BASIC', 'MASK_TIMESTAMP' ) . '\'),
                       A.ipAddress
                  FROM acdDegree A
                 WHERE A.degreeId = ?';

        $pk = array ( $degreeId );

        $result = $this->getDatabase()->query( SAGU::prepare( $sql, $pk ) );

        $degree = new AcdDegree();

        list ( $degree->degreeId,
            $degree->learningPeriodId,
            $degree->description,
            $degree->limitDate,
            $degree->degreeNumber,
            $degree->weight,
            $degree->parentDegreeId,
            $degree->mayBeNull,
            $degree->methodCalculating,
            $degree->isExam,
            $degree->examCalcMethod,
            $degree->examMinimumNote,
            $degree->examMaximumNote,
            $degree->userName,
            $degree->dateTime,
            $degree->ipAddress ) = $result[0];

        return $degree;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @isNotUnit boolean : Se não utiliza _unit na consulta defaut false
     * @return (array): An array containing the search results
     */
    public function searchDegree( $filters, $isNotUnit = false )
    {
        $acdlearningperiod = ($isNotUnit == true) ? 'acdlearningperiod' : 'unit_acdlearningperiod';
        
        $sql = 'SELECT A.degreeId,
                       B.periodId,
                       B.courseId,
                       B.courseVersion,
                       B.turnId,
                       B.unitId,
                       B.courseId || \'/\' || B.courseVersion || \' - \' || C.name as course,
                       D.description as unit,
                       E.description as turn,
                       A.degreeNumber,
                       A.description,
                       A.weight,
                       A.parentDegreeId,
                       (SELECT AA.description FROM acdDegree AA WHERE AA.degreeId = A.parentDegreeId),
                       TO_CHAR(A.limitDate,\'' . SAGU::getParameter( 'BASIC', 'MASK_DATE' ) . '\') AS limitDate,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter( 'BASIC', 'MASK_TIMESTAMP' ) . '\'),
                       A.ipAddress
                  FROM acdDegree A
            INNER JOIN ' . $acdlearningperiod . ' B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdCourse C
                    ON (C.courseId = B.courseId)
            INNER JOIN basUnit D
                    ON (D.unitId = B.unitId)
            INNER JOIN basTurn E
                    ON (E.turnId = B.turnId)';

        if ( strlen( $filters->degreeId ) > 0 )
        {
            $where .= ' AND A.degreeId = ?';
            $args[] = $filters->degreeId;
        }

        if ( strlen( $filters->learningPeriodId ) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }

        if ( strlen( $filters->learningPeriodDescription ) > 0 )
        {
            $where .= ' AND UNACCENT(B.description) ILIKE UNACCENT(?)';
            $args[] = $filters->learningPeriodDescription . '%';
        }

        if ( strlen( $filters->description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $filters->description . '%';
        }

        if ( strlen( $filters->limitDate ) > 0 )
        {
            $where .= ' AND A.limitDate = TO_DATE(?,\'' . SAGU::getParameter( 'BASIC', 'MASK_DATE' ) . '\')';
            $args[] = $filters->limitDate;
        }

        if ( strlen( $filters->degreeNumber ) > 0 )
        {
            $where .= ' AND A.degreeNumber = ?';
            $args[] = $filters->degreeNumber;
        }

        if ( strlen( $filters->parentDegreeId ) > 0 )
        {
            $where .= ' AND A.parentDegreeId = ?';
            $args[] = $filters->parentDegreeId;
        }

        if ( strlen( $filters->periodId ) > 0 )
        {
            $where .= ' AND B.periodId = ?';
            $args[] = $filters->periodId;
        }

        if ( strlen( $filters->notDegreeNumber ) > 0 )
        {
            $where .= 'AND A.degreeNumber <> ?';
            $args[] = $filters->notDegreeNumber;
        }

        if ( strlen( $filters->parentDegreeIdIsNull ) > 0 )
        {
            $where .= ' AND A.parentDegreeId IS NULL';
        }

        unset( $result );
        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 4 ) . '
                   ORDER BY B.periodId, B.courseId, B.courseVersion, B.unitId, B.turnId, A.degreeNumber';

            $result = $this->getDatabase()->query( SAGU::prepare( $sql, $args ) );
        }

        return $result;
    }
    
    /**
     * Trata dados da subdetail
     *
     * @param stdClass $data
     * @return stdClass
     */
    private function parseSubDetailData($data)
    {
        $data->degreeId = SAGU::NVL($data->degreeIdSub, $data->degreeId);
        $data->description = SAGU::NVL($data->descriptionSub, $data->description);
        $data->limitDate = SAGU::NVL($data->limitDateSub, $data->limitDate);
        
        // Quando calculo for media aritmetica simples, salvar peso como 1
        if ( strlen($data->parentDegreeId) > 0 )
        {
            $parentDegree = $this->getDegree($data->parentDegreeId);
            $data->weight = ( in_array($parentDegree->methodCalculating, array(self::CALCULO_MEDIA_SIMPLES, self::CALCULO_SOMA)) ) ? 1 : $data->weight;
        }
        
        return $data;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     */
    public function insertDegree( $data )
    {
        $result = true;
        
        // Subdetail
        $data = $this->parseSubDetailData($data);
        
        if ( !$data->removeData )
        {
            // Obtem id da sequencia
            $query = SDatabase::query("SELECT nextval('seq_degreeid'::regclass)");
            $degreeId = $query[0][0];

            $sql = 'INSERT INTO acdDegree
                                (degreeId,
                                learningPeriodId,
                                description,
                                limitDate,
                                degreeNumber,
                                weight,
                                parentDegreeId,
                                mayBeNull,
                                methodCalculating,
                                isExam,
                                examCalcMethod,
                                examMinimumNote,
                                examMaximumNote)
                        VALUES (?,
                                ?,
                                ?,
                                TO_DATE(?,\'' . SAGU::getParameter( 'BASIC', 'MASK_DATE' ) . '\'),
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?)';

            $args = array (
                $degreeId,
                $data->learningPeriodId,
                $data->description,
                $data->limitDate,
                $data->degreeNumber,
                SAGU::NVL($data->weight, 1),
                $data->parentDegreeId,
                SAGU::NVL($data->mayBeNull, DB_FALSE),
                $data->methodCalculating,
                SAGU::NVL($data->isExam, DB_FALSE),
                $data->examCalcMethod,
                $data->examMinimumNote,
                $data->examMaximumNote,
            );

            $result = $this->getDatabase()->execute( SAGU::prepare( $sql, $args ) );
            $result = $result ? $degreeId : false;
        }

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateDegree( $data )
    {
        $result = true;
        
        // Subdetail
        $data = $this->parseSubDetailData($data);

        // Quando indica que registro deve ser excluido na subdetail
        if ( $data->removeData )
        {
            $this->deleteDegree($data->degreeId);
        }
        else
        {
            $sql = 'UPDATE acdDegree
                    SET learningPeriodId = ?,
                        description = ?,
                        limitDate = TO_DATE(?,\'' . SAGU::getParameter( 'BASIC', 'MASK_DATE' ) . '\'),
                        degreeNumber = ?,
                        weight = ?,
                        parentDegreeId = ?,
                        mayBeNull = ?,
                        methodCalculating = ?,
                        isExam = ?,
                        examCalcMethod = ?,
                        examMinimumNote = ?,
                        examMaximumNote = ?
                    WHERE degreeId = ?';

            $args = array ( $data->learningPeriodId,
                $data->description,
                $data->limitDate,
                $data->degreeNumber,
                $data->weight,
                $data->parentDegreeId,
                $data->mayBeNull,
                $data->methodCalculating,
                SAGU::NVL($data->isExam, DB_FALSE),
                $data->examCalcMethod,
                $data->examMinimumNote,
                $data->examMaximumNote,
                $data->degreeId );

            $sqls = SAGU::prepare($sql, $args);
            for ( $i=0; $i<count($sqls); $i++ )
            {
                $result = $this->getDatabase()->execute($sqls[$i]);
            }
        }
        
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $degreeId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteDegree( $degreeId )
    {
        if (is_array($degreeId) )
        {
            $degreeId = $degreeId[0];
        }
        
        $sql = 'DELETE FROM acdDegree
                      WHERE degreeId = ?';

        $result = $this->getDatabase()->execute( SAGU::prepare( $sql, array($degreeId) ) );

        return $result;
    }

    /**
     * @return AcdDegree
     */
    public function getLearningPeriodFinalDegree( $learningPeriodId )
    {
        $sql = 'SELECT degreeId
                  FROM acdDegree
                 WHERE learningPeriodId = ?
                   AND degreeNumber IN (0, 1)
                   AND parentDegreeId IS NULL';

        $args = array ( $learningPeriodId );
        $result = $this->getDatabase()->query( SAGU::prepare( $sql, $args ) );
        
        if ( strlen( $result[0][0] ) > 0 )
        {
            return $this->getDegree( $result[0][0] );
        }
        else
        {
            return null;
        }
    }
    
    public function getChildDegrees( $parentDegreeId )
    {
        $sql = 'SELECT degreeId,
                       learningPeriodId,
                       description,
                       TO_CHAR(limitDate,\'' . SAGU::getParameter( 'BASIC', 'MASK_DATE' ) . '\'),
                       degreeNumber,
                       weight,
                       parentDegreeId,
                       mayBeNull,
                       isExam,
                       examCalcMethod,
                       examMinimumNote,
                       examMaximumNote
                  FROM acdDegree
                 WHERE parentDegreeId = ?
              ORDER BY degreeNumber';

        $args[] = $parentDegreeId;
        $result = $this->getDatabase()->query( SAGU::prepare( $sql, $args ) );

        if ( count( $result ) > 0 )
        {
            $return = array ( );
            foreach ( $result as $res )
            {
                $degreeData = new AcdDegree();

                list( $degreeData->degreeId,
                    $degreeData->learningPeriodId,
                    $degreeData->description,
                    $degreeData->limitDate,
                    $degreeData->degreeNumber,
                    $degreeData->weight,
                    $degreeData->parentDegreeId,
                    $degreeData->mayBeNull,
                    $degreeData->isExam,
                    $degreeData->examCalcMethod,
                    $degreeData->examMinimumNote,
                    $degreeData->examMaximumNote) = $res;
                
                $degreeData->degreeIdSub = $degreeData->degreeId;
                $degreeData->descriptionSub = $degreeData->description;
                $degreeData->limitDateSub = $degreeData->limitDate;
                $degreeData->parentDegreeIdSub = $degreeData->parentDegreeId;

                $childDegrees = $this->getChildDegrees( $degreeData->degreeId );

                if ( is_array( $childDegrees ) )
                {
                    $return = array_merge( $return, $childDegrees );
                }

                $return[] = clone($degreeData);
            }

            return $return;
        }

        return null;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $enrollId (integer): Search degrees of the enroll
     * @return (array): An array containing the search results
     */
    public function searchEnrollDegree( $enrollId, $parentDegreeId = null, $degreeId = null )
    {
        $sql = 'SELECT A.degreeId,
                       C.enrollId,
                       B.periodId,
                       A.description,
                       A.degreeNumber,
                       A.weight,
                       C.note,
                       C.concept,
                       A.parentDegreeId
                  FROM acdDegree A
            INNER JOIN unit_acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdDegreeEnroll C
                    ON (A.degreeId = C.degreeId) ';

        if ( strlen( $enrollId ) > 0 )
        {
            $where .= 'AND C.enrollId = ?';
            $args[] = $enrollId;
        }

        if ( strlen( $degreeId ) > 0 )
        {
            $where .= 'AND A.degreeId = ?';
            $args[] = $degreeId;
        }
        else
        {
            if ( strlen( $parentDegreeId ) > 0 )
            {
                $where .= 'AND A.parentDegreeId = ?';
                $args[] = $parentDegreeId;
            }
            else
            {
                $where .= 'AND A.parentDegreeId IS NULL';
            }
        }

        unset( $result );
        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 4 ) . '
                   ORDER BY A.degreeNumber';

            $db = $this->getDatabase();
            $result = $this->getDatabase()->query( SAGU::prepare( $sql, $args ) );
        }

        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $enrollId (integer): Search degrees of the enroll
     * @return (array): An array containing the search results
     */
    public function getEnrollDegree( $groupId )
    {
        $sql = 'SELECT A.degreeId,
                       A.degreeNumber,
                       COALESCE(A.limitDate, now()) >= now() AS enableGradeTyping,
                       A.weight,
                       A.parentdegreeid,
                       A.mayBeNull,
                       B.finalAverage
                  FROM acdDegree A
             LEFT JOIN unit_acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)
             LEFT JOIN unit_acdGroup C
                    ON (B.learningPeriodId = C.learningPeriodId)
                 WHERE C.groupId = ?
              ORDER BY A.degreeNumber';

        $args = array ( $groupId );

        $db = $this->getDatabase();
        $result = $this->getDatabase()->query( SAGU::prepare( $sql, $args ) );

        for ( $count = 1; $count < count( $result ); $count++ )
        {
            // Testa se o parentdegree não é nulo e é igual ao degreeid, não adiciona ao retorno, pois está errado.
            if ( !($result[$count][4] != NULL && $result[$count][0] == $result[$count][4]) )
            {
                $retun[] = array ( $result[$count][0],
                                   $result[$count][1],
                                   $result[$count][2],
                                   $result[$count][3],
                                   $result[$count][4],
                                   $result[$count][5],
                                   $result[$count][6] );
            }
        }

        $retun[] = array ( $result[0][0],
                           $result[0][1],
                           $result[0][2],
                           $result[0][3],
                           $result[0][4],
                           $result[0][5],
                           $result[0][6] );

        return $retun;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $groupId (integer): Search degrees of the group
     * @return (array): An array containing the search results
     */
    public function searchDegreeDescription( $groupId )
    {
        $sql = 'SELECT A.degreeId,
                       A.description,
                       A.degreeNumber,
                       A.parentDegreeId
                  FROM acdDegree A
            INNER JOIN unit_acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN unit_acdGroup D
                    ON (B.learningPeriodId = D.learningPeriodId)
                 WHERE D.groupId = ?
              ORDER BY A.degreeNumber ';

        $args = array ( $groupId );
        $db = $this->getDatabase();
        $result = $db->query( SAGU::prepare( $sql, $args ) );

        return $result;
    }
    
    public function listaMetodosCalculoNota()
    {
        $module = SAGU::getFileModule(__FILE__);
        
        return array(
            self::CALCULO_SOMA => _M('Soma', $module),
            self::CALCULO_MEDIA_SIMPLES => _M('Média aritmética simples', $module),
            self::CALCULO_MEDIA_PONDERADA => _M('Média aritmética ponderada', $module),
        );
    }
    
    public static function listaCalculos()
    {
        $module = SAGU::getFileModule(__FILE__);
        
        $options = array(
            BusinessAcademicBusDegree::EXAME_SUBSTITUI_GRAU_PAI => _M('Substitui grau pai', $module),
            BusinessAcademicBusDegree::EXAME_MEDIA_GRAU_PAI => _M('Média com grau pai', $module),
            BusinessAcademicBusDegree::TROCA_MENOR_NOTA_OBRIGATORIA => _M('Troca a menor nota obrigatória', $module)
        );
        
        return $options;
    }
    
    /**
     * Lista notas compostas
     *
     * @return array
     */
    public function listCompositeDegrees()
    {
        $sql = 'SELECT A.degreeId,
                       A.degreeId
                  FROM acdDegree A
                 WHERE EXISTS(
                    SELECT 1 FROM acdDegree WHERE parentDegreeId = A.degreeId
                 )';

        $args = array ();
        $db = $this->getDatabase();
        $result = $db->query( SAGU::prepare( $sql, $args ) );

        return SAGU::convertListToAssociative($result);
    }
    
    /**
     * Método utilizado no portal para obter as notas que podem ter avaliações cadastradas.
     * 
     * @author Bruno E. Fuhr <bruno@solis.com.br>
     * @since 22/11/2013
     * @version 3.9
     * @ticket 23364
     * 
     * @param integer $groupId - Código da disciplina.
     * @return Array - Retorna um array com código e descrição das notas que podem ter avaliação.
     */
    public function obterNotasPassiveisDeAvaliacao( $groupId )
    {
        $degrees = $this->searchDegreeDescription($groupId);
        $parentDegreeIds = array();
        foreach( $degrees as $degree )
        {
            if ( strlen($degree[3]) > 0 )
            {
                $parentDegreeIds[] = $degree[3];
            }
        }

        $result = array();
        if ( count($parentDegreeIds) > 0 )
        {
            $parentDegreeIds = implode("','", $parentDegreeIds);

            $sql = 'SELECT A.degreeId,
                           A.description
                      FROM acdDegree A
                INNER JOIN unit_acdlearningperiod B
                        ON (B.learningPeriodId = A.learningPeriodId)
                INNER JOIN unit_acdGroup D
                        ON (B.learningPeriodId = D.learningPeriodId)
                     WHERE D.groupId = ? AND CASE WHEN D.useconcept IS FALSE THEN A.degreeId NOT IN (\'' . $parentDegreeIds . '\') ELSE true END
                  ORDER BY A.degreeNumber ';

            $args = array ( $groupId );
            $db = $this->getDatabase();
            $result = $db->query( SAGU::prepare( $sql, $args ) );
        }
        else
        {
            $sql = 'SELECT A.degreeId,
                           A.description
                      FROM acdDegree A
                INNER JOIN unit_acdlearningperiod B
                        ON (B.learningPeriodId = A.learningPeriodId)
                INNER JOIN unit_acdGroup D
                        ON (B.learningPeriodId = D.learningPeriodId)
                     WHERE D.groupId = ? 
                  ORDER BY A.degreeNumber ';

            $args = array ( $groupId );
            $db = $this->getDatabase();
            $result = $db->query( SAGU::prepare( $sql, $args ) );
        }

        return $result;
    }
    
}
?>
