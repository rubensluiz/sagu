<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Este arquivo controla a conexão e ações para a tabela AcdTrainingEmphasis
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 25/02/2011
 *
 **/

class BusinessAcademicBusTrainingEmphasis extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listTrainingEmphasis($mode = null)
    {
        $sql = 'SELECT trainingemphasisid,
                       description   
                  FROM unit_acdTrainingEmphasis
              ORDER BY description';
        
        $return = $this->getDatabase()->query($sql);

        if ($mode == 'ASSOCIATIVE')
        {
            $_return = array();

            foreach ((array)$return as $key => $val)
            {
                $_return[$val[0]] = $val[1];
            }

            return $_return;
        }

        return $return;
    }

    /**
     * Return a specific record from the database
     *
     * @param $trainingEmphasisId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getTrainingEmphasis($trainingEmphasisId)
    {
        $sql = 'SELECT trainingemphasisid,
                       groupid,
                       description,
                       responsibleid,
                       summary,
                       place,
                       username,
                       dateTime,
                       ipAddress
                  FROM unit_acdTrainingEmphasis
                 WHERE trainingEmphasisId = ?';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $trainingEmphasisId));
        
        $trainingEmphasis = new AcdTrainingEmphasis();
        
        list ( $trainingEmphasis->trainingEmphasisId,
               $trainingEmphasis->groupId,
               $trainingEmphasis->description,
               $trainingEmphasis->responsibleId,
               $trainingEmphasis->summary,
               $trainingEmphasis->place,
               $trainingEmphasis->userName,
               $trainingEmphasis->dateTime,
               $trainingEmphasis->ipAddress ) = $result[0];
        
        return $trainingEmphasis;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchTrainingEmphasis($filters, $toObject = false)
    {
        $fields = array( 'trainingEmphasisId',
                         'groupId',
                         'description',
                         'responsibleId',
                         'summary',
                         'place',
                         'responsibleName');

        $sql = 'SELECT A.trainingemphasisid,
                       A.groupid,
                       A.description,
                       A.responsibleid,
                       A.summary,
                       A.place,
                       B.name
                 FROM unit_acdTrainingEmphasis A
      INNER JOIN ONLY basphysicalPerson B
                   ON (B.personId = A.responsibleId)';
        
        if ( strlen($filters->trainingEmphasisId) > 0 )
        {
            $where .= ' AND A.trainingEmphasisId = ? ';
            $args[] = $filters->trainingEmphasisId;
        }

        if ( strlen($filters->groupId) > 0 )
        {
            $where .= ' AND A.groupId = ? ';
            $args[] = $filters->groupId;
        }

        if ( strlen($filters->responsibleId) > 0 )
        {
            $where .= ' AND A.responsibleId = ? ';
            $args[] = $filters->responsibleId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $sql .= ' ORDER BY description';
            
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }
        
        return $toObject ? SAGU::resultToObject($result, $fields) : $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertTrainingEmphasis($data)
    {
        $sql = 'INSERT INTO acdtrainingemphasis
                            (groupId,
                             description,
                             responsibleId,
                             summary,
                             place)
                     VALUES (?,?,?,?,?)';
        
        $args = array( $data->groupId,
                       $data->description,
                       $data->responsibleId,
                       $data->summary,
                       $data->place);
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateTrainingEmphasis($data)
    {
        $sql = 'UPDATE acdtrainingemphasis
                   SET groupId = ?,
                       description = ?,
                       responsibleId = ?,
                       summary = ?,
                       place = ?
                 WHERE trainingEmphasisId = ?';
        
        $args = array( $data->groupId,
                       $data->description,
                       $data->responsibleId,
                       $data->summary,
                       $data->place,
                       $data->trainingEmphasisId);
        
        $db = $this->getDatabase();
        
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $trainingEmphasisId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteTrainingEmphasis($trainingEmphasisId)
    {
        $sql = 'DELETE FROM acdtrainingemphasis
                      WHERE trainingEmphasisId = ?';

        $args[] = $trainingEmphasisId;
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
 
        return $result;
    }
}

?>
