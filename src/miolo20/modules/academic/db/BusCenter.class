<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * Class to manipulate the basCenter table
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 07/08/2005
 */
class BusinessAcademicBusCenter extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @return (array): Return an array with the entire table
     */
    public function listCenter()
    {
        $sql = 'SELECT centerId,
                       name
                  FROM acdCenter
              ORDER BY name';

        $db = $this->getDatabase();
        $ret = $db->query($sql);

        return $ret;
    }
    
    public function listCenterAssoc()
    {
        return SAGU::convertListToAssociative($this->listCenter());
    }

    /**
     * Return a specific record from the database
     *
     * @param $centerId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     */
    public function getCenter($centerId)
    {
        $sql = 'SELECT A.centerId,
                       A.name,
                       A.shortName,
                       A.directorId,
                       B.name AS directorName,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdCenter A
        LEFT JOIN ONLY basPerson B
                    ON (B.personId = A.directorId)
                 WHERE centerId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $centerId));

        $center = new acdCenter();
        list ( $center->centerId,
               $center->name,
               $center->shortName,
               $center->directorId,
               $center->directorName,
               $center->userName,
               $center->dateTime,
               $center->ipAddress ) = $result[0];

        return $center;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     */
    public function searchCenter($filters)
    {
        $sql = 'SELECT A.centerId,
                      A.name,
                      A.shortName,
                      A.directorId,
                      B.name AS directorName
                 FROM acdCenter A
       LEFT JOIN ONLY basPerson B
                   ON (B.personId = A.directorId)';

        if ( strlen($filters->centerId) > 0 )
        {
            $where .= ' AND A.centerId = ?';
            $args[] = $filters->centerId;
        }

        if ( strlen($filters->name) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $filters->name . '%';
        }

        if ( strlen($filters->shortName) > 0 )
        {
            $where .= ' AND UNACCENT(A.shortName) ILIKE UNACCENT(?)';
            $args[] = $filters->shortName . '%';
        }

        if ( strlen($filters->directorId) > 0 )
        {
            $where .= ' AND A.directorId = ?';
            $args[] = $filters->directorId;
        }

        if ( strlen($filters->directorName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $filters->directorName . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                  ORDER BY A.name,
                           A.shortName';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     */
    public function insertCenter($data)
    {
        $sql = 'INSERT INTO acdCenter
                            (name,
                             shortName,
                             directorId)
                     VALUES (?,?,?)';

        $args = array(
            $data->name,
            $data->shortName,
            $data->directorId);

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateCenter($data)
    {
        $sql = 'UPDATE acdCenter
                   SET name = ?,
                       shortName = ?,
                       directorId = ?
                 WHERE centerId = ?';

        $args = array(
            $data->name,
            $data->shortName,
            $data->directorId,
            $data->centerId);

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i = 0; $i < count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $centerId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteCenter($centerId)
    {
        $sql = 'DELETE FROM acdCenter
                      WHERE centerId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $centerId));

        return $result;
    }

    /**
     * Verifica se o professor é diretor de algum centro.
     *
     * @param $professorId: Código do professor
     * @return boolean
     */
    public function isCenterDirector($professorId)
    {
        // Verifica se há dados na tabela acdCenter para tal professor
        $sql = 'SELECT COUNT(*)
                  FROM acdCenter
                 WHERE directorId = ?';

        $params = array();
        $params[] = $professorId;

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $params));

        // Retorna somente um boolean
        return $result[0][0] > 0;
    }
}
?>
