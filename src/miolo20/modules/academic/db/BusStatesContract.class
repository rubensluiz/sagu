<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basStatesContract table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 07/08/2005
 *
 **/

/**
 * Class to manipulate the basStatesContract table
 **/
class BusinessAcademicBusStatesContract extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listStatesContract()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT stateContractId,
                       description   
                  FROM acdStateContract
              ORDER BY description ';
        $ret = $db->query($sql);
        
        return $ret;
    }

    /**
     * Adicionado filtro opcional para trazer apenas movimentações contratuais ativas, caso ele seja informado
     * 
     * @param type $stateContractIsActive
     * @return type
     */
    public function listStatesContractIn($stateContractIsActive = false)
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT stateContractId,
                       description   
                  FROM acdStateContract
                 WHERE inouttransition  = \'I\'';
        
        if ( $stateContractIsActive )
        {
            $sql .= ' AND stateContractIsActive IS TRUE ';
        }
        
        
        $sql .= ' ORDER BY description ';
        $ret = $db->query($sql);
        
        return $ret;
    }
    
    /**
     * Lista estados contratuais de saida
     * 
     * @return array
     **/
    public function listStatesContractWhereIsCloseContract($stateContractIsActive = false)
    {
        $sql = 'SELECT stateContractId,
                       description
                  FROM acdStateContract
                 WHERE isclosecontract = TRUE';
        
        if ( $stateContractIsActive )
        {
            $sql .= ' AND stateContractIsActive IS TRUE ';
        }
        
        $sql .= ' ORDER BY description ';

        $result = SDatabase::query($sql);
//        $result = SDatabase::convertSearchToList($result);
        
        return $result;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $stateContractId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getStatesContract($stateContractId)
    {
        $sql = 'SELECT A.stateContractId,
                       A.description,
                       lower(A.inOutTransition),
                       A.needsReason,
                       A.isCloseContract,
                       A.stateContractIsActive,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP'). '\'),
                       A.ipAddress
                  FROM acdStateContract A
                 WHERE A.stateContractId = ? ';

        $db     = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $stateContractId));
        

        $statesContract = new acdStatesContract();
        list ( $statesContract->stateContractId,
               $statesContract->description,
               $statesContract->inOutTransition,
               $statesContract->needsReason,
               $statesContract->isCloseContract,
               $statesContract->stateContractIsActive,
               $statesContract->userName,
               $statesContract->dateTime,
               $statesContract->ipAddress ) = $result[0];

        return $statesContract; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchStatesContract($filters)
    {
        $sql= 'SELECT stateContractId,
                      description,
                      inOutTransition,
                      needsReason,
                      isCloseContract,
                      stateContractIsActive
                 FROM acdStateContract ';

        if ( strlen($filters->stateContractId) > 0 )
        {
            $where .= ' AND stateContractId = ? ';
            $args[] = $filters->stateContractId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description.'%';
        }
        if ( strlen($filters->needsReason) > 0 )
        {
            $where .= ' AND needsReason = ? ';
            $args[] = $filters->needsReason;
        }
        if ( strlen($filters->isCloseContract) > 0 )
        {
            $where .= ' AND isCloseContract = ? ';
            $args[] = $filters->isCloseContract;
        }
        if ( strlen($filters->inOutTransition) > 0 )
        {
            $where .= ' AND inOutTransition = ? ';
            $args[] = $filters->inOutTransition;
        }
        
        if ( strlen($filters->stateContractIsActive) > 0 )
        {
            $where .= ' AND stateContractIsActive = ? ';
            $args[] = $filters->stateContractIsActive;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= '    WHERE ' . substr($where, 4) . '
                      ORDER BY description ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));

            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertStatesContract($data)
    {
        $sql = 'INSERT INTO acdStateContract
                            (description,
                             inOutTransition,
                             needsReason,
                             isCloseContract)
                     VALUES (?, ?, ?, ?) ';

        $args = array( $data->description,
                       $data->inOutTransition,
                       $data->needsReason,
                       $data->isCloseContract );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateStatesContract($data)
    {
        $sql = 'UPDATE acdStateContract
                   SET description = ?,
                       inOutTransition = ?,
                       needsReason = ?,
                       isCloseContract = ?,
                       stateContractIsActive = ?
                 WHERE stateContractId = ? ';

        $args = array( $data->description,
                       $data->inOutTransition,
                       $data->needsReason,
                       $data->isCloseContract,
                       $data->stateContractIsActive,
                       $data->stateContractId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $stateContractId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteStatesContract($stateContractId)
    {
        $sql = 'DELETE FROM acdStateContract
                      WHERE stateContractId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $stateContractId));
        
        return $result;
    }
}
?>
