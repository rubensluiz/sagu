<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdPeriod table
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 25/08/2005
 *
 **/

/**
 * Class to manipulate the acdPeriod table
 **/
class BusinessAcademicBusPeriod extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @return (array): Return an array with the entire table
     **/
    public function listPeriod($orderBy = NULL)
    {
        $db = $this->getDatabase();
        
        if ( !$orderBy )
        {
            $orderBy = 'description DESC';
        }

        $sql = 'SELECT periodId,
                       description   
                  FROM acdPeriod   
              ORDER BY ' . $orderBy;
        
        $ret = $db->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $periodId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     **/
    public function getPeriod($periodId)
    {

        $sql = 'SELECT periodId,
                       description,
                       username,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress,
                       prevPeriodId
                  FROM acdPeriod
                 WHERE periodId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $periodId));

        $period = new acdPeriod();

        list ( $period->periodId,
               $period->description,
               $period->userName,
               $period->dateTime,
               $period->ipAddress,
               $period->prevPeriodId ) = $result[0];

        return $period; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchPeriod($filters)
    {
        $sql= 'SELECT periodId,
                      description,
                      prevPeriodId
                 FROM acdPeriod ';

        if ( strlen($filters->periodId) > 0 )
        {
            $where .= ' AND periodId = ? ';
            $args[] = $filters->periodId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->prevPeriodId) > 0 )
        {
            $where .= ' AND prevPeriodId = ? ';
            $args[] = $filters->prevPeriodId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY description';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     **/
    public function insertPeriod($data)
    {
        $sql = 'INSERT INTO acdPeriod
                            (periodId,
                             description,
                             prevPeriodId)
                     VALUES (?,?,?)';

        $args = array( $data->periodId,
                       $data->description,
                       $data->prevPeriodId );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result ? $data->periodId : false;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     **/
    public function updatePeriod($data)
    {
        $sql = 'UPDATE acdPeriod
                   SET description = ?,
                       prevPeriodId = ?
                 WHERE periodId = ?';

        $args = array( $data->description,
                       $data->prevPeriodId,
                       $data->periodId );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $periodId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     **/
    public function deletePeriod($periodId)
    {
        $sql = 'DELETE FROM acdPeriod
                      WHERE periodId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $periodId));

        return $result;
    }

    //FIZME: Add comment
    /**
     * Enter description here...
     *
     * @param $enrollBookDate
     * @param $periodId
     * 
     * @return boolean
     */
    public function setPeriodEnrollBookDate($enrollBookDate, $periodId)
    {
        $sql = 'UPDATE acdPeriod SET enrollBookDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') WHERE periodId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, array($enrollBookDate, $periodId)));

        return $result;
    }

    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param $periodId
     * @return unknown
     */
    public function getPeriodEnrollBookDate($periodId)
    {
        $sql = 'SELECT TO_CHAR(enrollBookDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') FROM acdPeriod WHERE periodId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $periodId));

        return $result[0][0];
    }
    
    /**
     * A list containing all periods the professor has curricular components
     *
     * @param $professorId (integer): Primary key for query
     *
     * @return (array): An array containing all the periods the professor has ministered curricular components
     **/
    public function listPupilsPeriods($personId, $orderBy = NULL)
    {       
        $sql = 'SELECT A.periodId,
                       A.description
                  FROM acdPeriod A
                 WHERE A.periodId IN (SELECT DISTINCT D.periodId
                                        FROM acdSchedule B
                                  INNER JOIN unit_acdGroup C
                                          ON (C.groupId = B.groupId)
                                  INNER JOIN unit_acdlearningperiod D
                                          ON (D.learningPeriodId = C.learningPeriodId)
                                  INNER JOIN unit_acdEnroll E
                                          ON (C.groupId = E.groupId)
                                  INNER JOIN unit_acdContract F
                                          ON (E.contractId = F.contractId)
                                       WHERE F.personId = ?)';
        if ( strlen($orderBy) > 0 )
        {
            $sql .= ' ORDER BY ' . $orderBy;
        }
        else
        {
            $sql .= ' ORDER BY A.description';
        }

        $db = $this->getDatabase();
        $args = array($personId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Retorna o semestre atual do contrato.
     * 
     * @param int $contractId
     * @return array
     */
    public function getCurrentSemester($contractId)
    {
        
        if ( SAGU::getParameter('ACADEMIC', 'DEFINE_SEMESTRE_POR_CARGA_HORARIA') == DB_TRUE )
        {
            $args = new stdClass();
            $args->contractId = $contractId;
            
            $acdSemesterContractPeriod = new AcdSemesterContractPeriod();
            $acdSemesterContractPeriod->contractId = $contractId;
            $acdSemesterContractPeriod->periodId   = $acdSemesterContractPeriod->obterPeriodoDoContrato($args, true);
            
            $result = array(array($acdSemesterContractPeriod->obterSemestrePeloContratoEPeriodo()));
        }
        else
        {
            $sql = "SELECT COUNT(periodId)
                      FROM acdPeriod
                     WHERE periodId IN ( SELECT A.periodId
                                           FROM acdLearningPeriod A
                                     INNER JOIN acdGroup B
                                             ON (A.learningPeriodId = B.learningPeriodId)
                                     INNER JOIN acdEnroll C
                                             ON (B.groupId = C.groupId)
                                          WHERE C.contractId = ? )";

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, array($contractId)));
        }
        
        return $result;
    }
    
    /**
     *
     * @param int $contractId
     * @return int
     */
    public function getCurrentSemesterNumber($contractId)
    {
        $result = $this->getCurrentSemester($contractId);
        
        return $result[0][0];
    }
    
    public function obterPeriodosParticipacaoBanca($personId)
    {
        $db = $this->getDatabase();
        
        $sql = '
            SELECT DISTINCT P.periodId, P.description
              FROM acdfinalexaminationexaminingboard F
         LEFT JOIN acdenroll E ON (F.enrollid = E.enrollid)
         LEFT JOIN acdgroup G ON (E.groupid = G.groupid)
         LEFT JOIN acdlearningperiod L ON (G.learningperiodid = L.learningperiodid)
         LEFT JOIN acdperiod P ON (L.periodid = P.periodid)
             WHERE F.personid = ?
          ORDER BY P.description DESC
        ';
        
        $args[] = $personId;
        
        $ret = $db->query(SAGU::prepare($sql, $args));

        return $ret;
    }
}
?>
