<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basTimeSheet table
 *
 * @author Andre Chagas Dias [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 01/10/2008
 *
 **/

/**
 * Class to manipulate the basCenter table
 **/
class BusinessAcademicBusTimeSheet extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $centerId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getTimeSheet($timeSheetId)
    {
        $sql = 'SELECT timeSheetId,
                       description,
                       TO_CHAR(beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM unit_acdTimeSheet
                 WHERE timeSheetId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $timeSheetId));

        $timeSheet = new acdTimeSheet();
        list ( $timeSheet->timeSheetId,
               $timeSheet->description,
               $timeSheet->beginDate,
               $timeSheet->endDate,
               $timeSheet->userName,
               $timeSheet->dateTime,
               $timeSheet->ipAddress ) = $result[0];

        return $timeSheet; 
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchTimeSheet($filters)
    {
        $sql= 'SELECT timeSheetId,
                      description,
                      TO_CHAR(beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                      TO_CHAR(endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                 FROM unit_acdTimeSheet ';

        if ( strlen($filters->timeSheetId) > 0 )
        {
            $where .= ' AND timeSheetId = ? ';
            $args[] = $filters->timeSheetId;
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description.'%';
        }
        if ( strlen($filters->beginDate) > 0 )
        {
            $where .= ' AND beginDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') ';
            $args[] = $filters->beginDate;
        }
        if ( strlen($filters->endDate) > 0 )
        {
            $where .= ' AND endDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') ';
            $args[] = $filters->endDate;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                  ORDER BY description ';

            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertTimeSheet($data)
    {
        $sql = 'INSERT INTO acdTimeSheet
                            ( description,
                              beginDate )
                     VALUES ( ?, 
                              TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\') ) ';

        $args = array( $data->description,
                       $data->beginDate );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateTimeSheet($data)
    {
        $sql = 'UPDATE acdTimeSheet
                   SET description  = ?,
                       beginDate    = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),
                       endDate      = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\')
                 WHERE timeSheetId  = ? ';

        $args = array( $data->description,
                       $data->beginDate,
                       $data->endDate,
                       $data->timeSheetId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $centerId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteTimeSheet($timeSheetId)
    {
        $sql = 'DELETE FROM acdTimeSheet
                      WHERE timeSheetId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $timeSheetId));

        return $result;
    }

    public function getLastTimeSheetId()
    {
        $sql = 'SELECT last_value 
                  FROM seq_acdtimesheet_timesheetid';

        $db     = $this->getDatabase();
        $result = $db->query($sql);

        return $result;
    }

    /**
     * Do a search Time on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchTime($filters)
    {
        $sql= 'SELECT A.timeId,
                      A.turnId || \' - \' || B.description,
                      TO_CHAR(A.beginHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') .'\'),
                      TO_CHAR(A.endHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') .'\'),
                      extract( epoch from A.numberMinutes::interval)/60
                 FROM acdTime A
            LEFT JOIN basTurn B 
                   ON ( A.turnId = B.turnId )';

        if ( strlen($filters->timeId) > 0 )
        {
            $where .= ' AND A.timeId = ? ';
            $args[] = $filters->timeId;
        }
        if ( strlen($filters->timeSheetId) > 0 )
        {
            $where .= ' AND A.timeSheetId = ? ';
            $args[] = $filters->timeSheetId;
        }
        if ( strlen($filters->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if ( strlen($filters->beginHour) > 0 )
        {
            $where .= ' AND A.beginHour = ? ';
            $args[] = $filters->beginHour;
        }
        if ( strlen($filters->endHour) > 0 )
        {
            $where .= ' AND A.endHour = ? ';
            $args[] = $filters->endHour;
        }
        if ( strlen($filters->numberMinutes) > 0 )
        {
            $where .= ' AND A.numberMinutes = ? ';
            $args[] = $filters->numberMinutes;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                  ORDER BY A.beginHour,
                           A.endHour ';

            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertTime($data)
    {
        $sql = 'INSERT INTO acdTime
                            ( timeSheetId,
                              turnId,
                              beginHour,
                              endHour,
                              numberMinutes )
                     VALUES ( ?,
                              ?,
                              ?,
                              ?,
                              ?::interval )';

        $args = array( $data->timeSheetId,
                       $data->turnId,
                       $data->beginHour,
                       $data->endHour,
                       $data->numberMinutes.' minutes' );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $centerId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getTime($timeId)
    {
        $sql = 'SELECT timeId,
                       timeSheetId,
                       turnId,
                       TO_CHAR(beginHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       TO_CHAR(endHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       extract( epoch from numberMinutes::interval)/60,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress,
                       TO_CHAR(beginHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\') || \' \' || TO_CHAR(endHour,\'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\') AS beginEndHour
                  FROM acdTime
                 WHERE timeId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $timeId));

        $time = new acdTime();
        list ( $time->timeId,
               $time->timeSheetId,
               $time->turnId,
               $time->beginHour,
               $time->endHour,
               $time->numberMinutes,
               $time->userName,
               $time->dateTime,
               $time->ipAddress,
               $time->beginEndHour) = $result[0];

        return $time;
    }

        /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateTime($data)
    {
        $sql = 'UPDATE acdTime
                   SET timeSheetId      = ?,
                       turnId           = ?,
                       beginHour        = ?,
                       endHour          = ?,
                       numberMinutes    = ?::interval
                 WHERE timeId  = ? ';

        $args = array( $data->timeSheetId,
                       $data->turnId,
                       $data->beginHour,
                       $data->endHour,
                       $data->numberMinutes . ' minutes',
                       $data->timeId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

     /**
     * Delete a record
     *
     * @param $centerId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteTime($timeId)
    {
        $sql = 'DELETE FROM acdTime
                      WHERE timeId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $timeId));

        return $result;
    }
    
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns $retTimeSheet (array): Return an array with the entire table
     *
     **/
    public function listTimeSheet()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT timeSheetId,
                       description
                  FROM unit_acdTimeSheet
                 WHERE now()::date BETWEEN beginDate AND COALESCE(endDate, now()::date)
              ORDER BY description ';

        $retTimeSheet = $db->query($sql);

        return $retTimeSheet;
    }
    
    public function listActiveTimeSheet()
    {
        $db  = $this->getDatabase();
        $sql = 'SELECT timeSheetId,
                       description
                  FROM acdTimeSheet
                 WHERE now()::date BETWEEN beginDate AND COALESCE(endDate, now()::date)
              ORDER BY description ';

        $result = $db->query($sql);

        return $result;
    }
    
    public function getTimeSheetByDescription($description)
    {
        $result = NULL;
        if ( strlen($description) > 0 )
        {
            $db  = $this->getDatabase();

            $sql = "SELECT timeSheetId,
                           description
                      FROM acdTimeSheet
                     WHERE lower(UNACCENT(description)) LIKE lower(UNACCENT('%$description%'))
                       AND enddate IS NULL
                  ORDER BY description ";

            $result = $db->query($sql);
        }

        return $result[0];
    }
    
    /**
     * Obtem os horarios do turno em um array compativel com os codigos do Urania
     * 
     * @param int $timeSheetId - Codigo do turno
     */
    public function getTimesForUrania($timeSheetId)
    {
        $times = NULL;
        
        $db  = $this->getDatabase();

        $sql = " SELECT timeid FROM acdtime WHERE timesheetid = $timeSheetId ORDER BY beginhour ASC ";

        $result = $db->query($sql);
        
        $count = 1;
        foreach ( $result as $line )
        {
            $times[$count] = $line[0];
            $count++;
        }
        
        return $times;
    }
    
    public function getTimeSheetByUnit($unitId)
    {
        $db  = $this->getDatabase();
        $sql = "SELECT timeSheetId,
                       description
                  FROM acdTimeSheet
                 WHERE unitid = '{$unitId}'";

        $retTimeSheet = $db->query($sql);

        return $retTimeSheet;
    }
    
    public function getTimesByTimeSheet($timeSheetId)
    {
        $db  = $this->getDatabase();
        $sql = "SELECT timeId
                  FROM acdTime
                 WHERE timesheetid = '{$timeSheetId}'";

        $times = $db->query($sql);
        
        $retTimes = array();
        
        foreach ( $times as $time )
        {
            $retTimes[] = $time[0];
        }

        return $retTimes;
    }
}
?>
