<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCourseOccurrence table.
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * This class was created 2004/03/05
 *
 **/

class BusinessAcademicBusCourseOccurrence extends sBusiness
{
    public $columns;
    public $sql;
    
    /**
     * Class constructor
     **/
    public function __construct($ignoreMultiUnidade = false)
    {
        $tabela = $ignoreMultiUnidade ? 'acdcourseoccurrence' : 'unit_acdcourseoccurrence';
        
        $this->columns = array( 'courseId',
                                'course',
                                'courseVersion',
                                'turnId',
                                'turn',
                                'unitId',
                                'unit',
                                'authorizationDate',
                                'status',
                                'minimumConclusionCourse',
                                'maximumConclusionCourse',
                                'authorizationDocument',
                                'userName',
                                'dateTime',
                                'ipAddress',
                                'costCenterId',
                                'daysToFrequenceNotification',
                                'idCursoInep',
                                'vagasInep',
                                'cursoBloqueado',
        );

        $this->sql = 'SELECT A.courseId,
                             C.shortName,
                             A.courseVersion,
                             A.turnId,
                             D.description,
                             A.unitId,
                             E.description,
                             TO_CHAR(A.authorizationDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             A.status,
                             A.minimumConclusionCourse,
                             A.maximumConclusionCourse,
                             A.authorizationDocument,
                             A.userName,
                             TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                             A.ipAddress,
                             A.costCenterId,
                             A.daysToFrequenceNotification,
                             A.idCursoInep,
                             A.vagasInep,
                             A.cursoBloqueado
                        FROM ' . $tabela . ' A
                   LEFT JOIN acdCourseVersion B
                          ON (A.courseId = B.courseId
                         AND  A.courseVersion = B.courseVersion)
                   LEFT JOIN acdCourse C
                          ON (A.courseId = C.courseId
                         AND  B.courseId = C.courseId)
                   LEFT JOIN basTurn D
                          ON (A.turnId = D.turnId)
                   LEFT JOIN basUnit E
                          ON (A.unitId = E.unitId) ';
        
        parent::__construct();
    }

    /**
     * Obtain the specified courseOccurrence id data.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @param $courseId (int): Identifier of the course to be retrieved.
     * @param $courseVersion (int): Identifier of the course to be retrieved.
     * @param $turnId (int): Identifier of the course to be retrieved.
     * @param $unitId (int): Identifier of the course to be retrieved.
     *
     * @return If the specified courseId exists, returns an object (courseOccurrence) containing its data. 
     * Otherwise, returns null.
     */
    public function getCourseOccurrence($courseId, $courseVersion, $turnId, $unitId)
    {
        $select = $this->sql;
        $select .= ' WHERE A.courseId = ?
                       AND A.courseVersion = ?
                       AND A.turnId = ?
                       AND A.unitId = ?';

        $args = array( $courseId,
                       $courseVersion,
                       $turnId,
                       $unitId );

        $result = $this->getDatabase()->Query(SAGU::Prepare($select,$args));

        return SAGU::resultToObject($result[0], $this->columns, new acdCourseOccurrence());
    }
    
    /**
     * Obtain the specified courseOccurrence id data.
     *
     * @author Nataniel Ingor da Silva [nataniel@solis.coop.br]
     *
     * 
     * @param $unitId (int): Identifier of the course to be retrieved.
     *
     * @return If the specified courseId exists, returns an object (courseOccurrence) containing its data. 
     * Otherwise, returns null.
     */
    public function getCourseOccurrenceUnit($unitId)
    {
        $sql =       'SELECT A.courseId,
                             C.shortName,
                             A.courseVersion,
                             A.turnId,
                             D.description,
                             A.unitId,
                             E.description,
                             TO_CHAR(A.authorizationDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             A.status,
                             A.minimumConclusionCourse,
                             A.maximumConclusionCourse,
                             A.authorizationDocument,
                             A.userName,
                             TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                             A.ipAddress,
                             A.costCenterId,
                             A.daysToFrequenceNotification
                        FROM unit_acdcourseoccurrence A
                   LEFT JOIN acdCourseVersion B
                          ON (A.courseId = B.courseId
                         AND  A.courseVersion = B.courseVersion)
                   LEFT JOIN acdCourse C
                          ON (A.courseId = C.courseId
                         AND  B.courseId = C.courseId)
                   LEFT JOIN basTurn D
                          ON (A.turnId = D.turnId)
                   LEFT JOIN basUnit E
                          ON (A.unitId = E.unitId) 
                       WHERE A.unitId = ?
                       ';
        
        $args = array($unitId);
        
        
        $result = $this->getDatabase()->Query(SAGU::Prepare($sql,$args));
        
        return $result;
    }

    /**
     * Search for course Occurrences.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @param &$range Object containing the listing bounds. Used by the PageNavigator component.
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     */
    public function searchCourseOccurrence($data=null, $returnAsObject = false)
    {
        $args = array();
        if ( strlen($data->courseId) > 0 )
        {
            $args['A.courseId = ?'] = $data->courseId;
        }
        if ( strlen($data->courseVersion) > 0 )
        {
            $args['A.courseVersion = ?'] = $data->courseVersion;
        }
        if ( strlen($data->turnId) > 0 )
        {
            $args['A.turnId = ?'] = $data->turnId;
        }
        if ( strlen($data->unitId) > 0 )
        {
            $args['A.unitId = ?'] = $data->unitId;
        }
        if ( strlen($data->courseOccurrenceId) > 0 )
        {
            $args['A.courseOccurrenceId = ?'] = $data->courseOccurrenceId;
        }
        if ( strlen($data->formationLevelId) > 0 )
        {
            $args['C.formationLevelId = ?'] = $data->formationLevelId;
        }
        if ( strlen($data->costCenterId) > 0 )
        {
            $args['A.costCenterId = ?'] = $data->costCenterId;
        }
        if ( strlen($data->courseName) > 0 )
        {
            $args['UNACCENT(C.name) ILIKE UNACCENT(?)'] = $data->courseName;
        }
        if ( strlen($data->getAll) > 0 )
        {
            $args['CASE WHEN B.endDate IS NOT NULL THEN B.endDate > COALESCE(NOW()::DATE, ?) ELSE true END'] = SAGU::getDateNow();
        }
        if ( strlen($data->cursoBloqueado) > 0 )
        {
            $args['A.cursoBloqueado = ?::BOOLEAN'] = $data->cursoBloqueado;
        }

        if ( (count($args) > 0) || ($data->getAll) )
        {
            $select = $this->sql;
            if ( count($args) > 0 )
            {
                $select .= ' WHERE ' . implode(' AND ', array_keys($args));
            }
            $select .= ' ORDER BY A.courseId, A.courseVersion, A.turnId, A.unitId ';
            
            $result = $this->getDatabase()->query(SAGU::prepare($select, array_values($args)));
        }

        return $returnAsObject ? SAGU::resultToObject($result, $this->columns) : $result;
    }

    /**
     * List all courseOccurrencess.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @return an array containing the select results.
     */
    public function listCourseOccurrence($filters = NULL)
    {
        $select = 'SELECT A.courseId,
                          A.courseVersion,
                          A.turnId,
                          A.unitId,
                          TO_CHAR(A.authorizationDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                          A.status,
                          A.minimumConclusionCourse,
                          A.maximumConclusionCourse,
                          A.authorizationDocument,
                          A.userName,
                          TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                          A.ipAddress,
                          A.costCenterId,
                          B.name AS courseName,
                          B.shortname AS shortCourseName,
                          C.description AS unit,
                          E.name AS coordinator
                     FROM unit_acdcourseoccurrence A
                LEFT JOIN acdcourse B ON (A.courseId = B.courseId)
                LEFT JOIN basunit C ON (A.unitId = C.unitId)
                LEFT JOIN acdcoursecoordinator D ON (A.courseId, A.courseVersion, A.turnId, A.unitId) = (D.courseId, D.courseVersion, D.turnId, D.unitId)
                LEFT JOIN basphysicalpersonprofessor E ON (D.coordinatorid = E.personid) ';
        
        if ( strlen($filters->alunoId) )
        {
            $select .= ' 
                 WHERE B.courseid IN (
                SELECT DISTINCT CO.courseid 
                  FROM acdenroll EN 
             LEFT JOIN acdcontract CT ON (CT.contractid = EN.contractid) 
             LEFT JOIN acdcourse CO ON (CO.courseid = CT.courseid) 
                 WHERE CT.personid = ?)';
            $args[] = $filters->alunoId;
        }
        
        if ( strlen($filters->coordinatorId) > 0 )
        {
            $select .= ' WHERE D.coordinatorid = ? ';
            $args[] = $filters->coordinatorId;
        }
        
        if ( strlen($filters->notIn) > 0 )
        {
            $select .= ' WHERE D.coordinatorid NOT IN (?) ';
            $args[] = $filters->notIn;
        }
        
        $select .= ' ORDER BY B.shortname,
                              A.courseId,
                              A.courseVersion,
                              A.turnId,
                              A.unitId ';

        $result = $this->getDatabase()->Query(SAGU::Prepare($select,$args));
        
        return $result;        
    }
    
    public function listCourseOccurrenceSimple($unitId)
    {
        $select = '   SELECT A.courseId,
                             C.name AS courseName, 
                             A.courseVersion,
                             A.turnId,
                             A.unitId
                        FROM acdcourseoccurrence A
                   LEFT JOIN acdCourseVersion B
                          ON (A.courseId = B.courseId
                         AND  A.courseVersion = B.courseVersion)
                   LEFT JOIN acdCourse C
                          ON (A.courseId = C.courseId
                         AND  B.courseId = C.courseId)
                   LEFT JOIN basTurn D
                          ON (A.turnId = D.turnId)
                   LEFT JOIN basUnit E
                          ON (A.unitId = E.unitId)

                       WHERE A.unitId = ?
            
                 ORDER BY courseName,
                          A.courseId';
        
        
        $args = array($unitId);

        $result = $this->getDatabase()->Query(SAGU::Prepare($select,$args));

        return $result; 
    }
    
    

    /**
     * Insert a new acdCourseOccurrence.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @param $data (object): Object (course) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     */
    public function insertCourseOccurrence($data)
    {
        $result = false;
        
        if ( isset($data->courseId) && isset($data->courseVersion) && isset($data->unitId) && isset($data->turnId) )
        {
            $insert = 'INSERT INTO acdCourseOccurrence
                                   (courseId,
                                    courseVersion,
                                    turnId,
                                    unitId,
                                    authorizationDate,
                                    status,
                                    minimumConclusionCourse,
                                    maximumConclusionCourse,
                                    authorizationDocument,
                                    costCenterId,
                                    daysToFrequenceNotification,
                                    idCursoInep,
                                    vagasInep,
                                    cursoBloqueado)
                             VALUES (?,?,?,?,TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),?,?,?,?,?,?,?,?,?)';
                            
            $args = array( $data->courseId,
                           $data->courseVersion,
                           $data->turnId,
                           $data->unitId,
                           $data->authorizationDate,
                           $data->status,
                           $data->minimumConclusionCourse,
                           $data->maximumConclusionCourse,
                           $data->authorizationDocument,
                           $data->costCenterId,
                           $data->daysToFrequenceNotification,
                           $data->idCursoInep,
                           $data->vagasInep,
                           $data->cursoBloqueado
                );

            $result = $this->getDatabase()->execute(SAGU::prepare($insert,$args));
        }
        
        return $result;
    }

    /**
     * Update the specified courseOccurence data.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     */
    public function updateCourseOccurrence($data)
    {
        $update = 'UPDATE acdCourseOccurrence
                      SET authorizationDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),
                          status = ?,
                          minimumConclusionCourse = ?,
                          maximumConclusionCourse = ?,
                          authorizationDocument = ?,
                          costCenterId = ?,
                          daysToFrequenceNotification = ?,
                          idCursoInep = ?,
                          vagasInep = ?,
                          cursoBloqueado = ?
                    WHERE courseId = ?
                      AND courseVersion = ?
                      AND turnId = ?
                      AND unitId = ? ';

        $args = array( $data->authorizationDate,
                       $data->status,
                       $data->minimumConclusionCourse,
                       $data->maximumConclusionCourse,
                       $data->authorizationDocument,
                       $data->costCenterId,
                       $data->daysToFrequenceNotification,
                       $data->idCursoInep,
                       $data->vagasInep,
                       $data->cursoBloqueado,
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId );

        $sqls = SAGU::prepare($update, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete the specified courseOccurrence.
     *
     * @author Daniel Afonso Heisler [daniel@solis.coop.br]
     *
     * @param $courseId (int): Identifier of the course to be retrieved.
     * @param $courseVersion (int): Identifier of the course to be retrieved.
     * @param $turnId (int): Identifier of the course to be retrieved.
     * @param $unitId (int): Identifier of the course to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     */
    public function deleteCourseOccurrence($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        $action = $MIOLO->getCurrentAction();
        
        // Verifica se existem reconhecimentos de curso para a ocerrência, caso sim, não permite a exclusão.
        $filters = new stdClass();
        $filters->courseId      = $data->courseId;
        $filters->courseVersion = $data->courseVersion;
        $filters->turnId        = $data->turnId;
        $filters->unitId        = $data->unitId;
        
        $acdReconhecimentoCurso = new AcdReconhecimentoDeCurso();
        $reconhecimentos = $acdReconhecimentoCurso->search($filters);
        
        $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
        $periodLetivo = $busLearningPeriod->searchLearningPeriod($filters);
        
        if ( count($periodLetivo) > 0 )
        {
            $msg = _M('Ops! Não consigo excluir, existe o período letivo @1 cadastrado para esta ocorrência. Se tu quiser excluir está ocorrência, acesse o período letivo e o exclua primeiro.', $module, $periodLetivo[0][0]);
            $goto = $MIOLO->getActionURL($module, $action);
            $caption = _M('Se liga!', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
        
        if ( count($reconhecimentos) == 0 )
        {
            $sql = 'DELETE FROM acdCourseOccurrence
                          WHERE courseId = ?
                            AND courseVersion = ?
                            AND turnId = ?
                            AND unitId = ?';

            $args = array( $data->courseId,
                           $data->courseVersion,
                           $data->turnId,
                           $data->unitId );

            $result = $this->getDatabase()->Execute(SAGU::prepare($sql, $args));
        }
        else
        {
            $msg = _M('Ops! Não consigo excluir, existem reconhecimentos para esta ocorrência. Se tu quiser excluir, acesse esta ocorrência e exclua os reconhecimentos.', $module);
            $goto = $MIOLO->getActionURL($module, $action);
            $caption = _M('Se liga!', $module);
            $MIOLO->error($msg, $goto, $caption);
        }

        return $result;
    }
    
    /**
     * Retorna array de todas as verões do curso conforme parâmetros.
     * 
     * @param stdClass $filters
     * @return array
     */
    public function listCourseVersions($filters = null)
    {
        $sql = "SELECT courseVersion,
                       'Versão ' || courseVersion
                  FROM acdCourseOccurrence";
        
        $params = array();
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= " AND courseId = ?";
            $params[] = $filters->courseId;
        }
        if ( strlen($filters->unitId) > 0 )
        {
            $where .= " AND unitId = ?";
            $params[] = $filters->unitId;
        }
        if ( strlen($filters->turnId) > 0 )
        {
            $where .= " AND turnId = ?";
            $params[] = $filters->turnId;
        }
        
        if ( count($params) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
        }
        
        $sql .= ' ORDER BY courseVersion';

        return $this->getDatabase()->query(SAGU::prepare($sql, $params));
    }
}
?>
