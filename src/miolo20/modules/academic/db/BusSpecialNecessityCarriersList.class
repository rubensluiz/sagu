<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 04/08/2006
 *
 **/

/**
 * Class to manipulate the basPupilListing table
 **/
class BusinessAcademicBusSpecialNecessityCarriersList extends sBusiness
{
    /**
     *  Return the locked contracts list
     *
     *  @return (array): Array containing the results.
     */
     public function listSpecialNecessityCarriers($filters)
     {
        $module = MIOLO::getCurrentModule();
        
        set_time_limit(0);
        
        $db = $this->getDatabase();
        
        $res   = '<font color=red>' . _M('Fone resid.', $module) . '</font>';
        $wrk   = '<font color=red>' . _M('Telefone comercial', $module) . '</font>';
        $cel   = '<font color=red>' . _M('Fone celular', $module) . '</font>';
        $email = '<font color=red>' . _M('E-mail', $module) . '</font>';
        
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       G.shortName,
                       A.unitId,
                       A.turnId,
                       A.personId,
                       B.name,
                       H.name || \' \' ||B.location || CASE WHEN B.number IS NOT NULL 
                                                            THEN \', \' || B.number 
                                                            ELSE \'\' END ||
                                                       CASE WHEN B.neighborhood IS NOT NULL
                                                            THEN \' - \' || B.neighborhood 
                                                            ELSE \'\' END ||
                                                       CASE WHEN B.zipCode IS NOT NULL
                                                            THEN \' - \' || B.zipCode 
                                                            ELSE \'\' END,
                       B.cityId,
                       C.name || \'-\' || C.stateId,
                       \'' . $res . ' \' || B.residentialPhone ||
                       \' ' . $wrk . ' \' || B.workPhone ||
                       \' ' . $cel . ' \' || B.cellPhone || 
                       \' ' . $email . ' \' || B.email,
                       D.content,
                       B.specialNecessityId,
                       F.description,
                       B.specialNecessityDescription,
                       E.description
                  FROM unit_acdContract A
            INNER JOIN ONLY basPhysicalPersonStudent B
                    ON (B.personId = A.personId)
             LEFT JOIN basCity C
                    ON (C.cityId = B.cityId)
             LEFT JOIN basDocument D
                    ON (D.personId = A.personId AND
                        D.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG') . ')
            INNER JOIN acdStateContract E
                    ON (E.stateContractId = getContractState(A.contractId))
             LEFT JOIN basSpecialNecessity F
                    ON (F.specialNecessityId = B.specialNecessityId)
            INNER JOIN acdCourse G
                    ON (G.courseId = A.courseId)
            INNER JOIN basLocationType H
                    ON (B.locationTypeId = H.locationTypeId)';
                            
        if (strlen($filters->courseId) > 0)
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if (strlen($filters->courseVersion) > 0)
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if (strlen($filters->unitId) > 0)
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if (strlen($filters->turnId) > 0)
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if (strlen($filters->specialNecessityId) > 0)
        {
            $where .= ' AND B.specialNecessityId = ? ';
            $args[] = $filters->specialNecessityId;
        }
        else
        {
            $where .= ' AND B.specialNecessityId <> ' . SAGU::getParameter('BASIC', 'NO_SPECIAL_NECESSITY_ID');
        }
        if ($filters->onlyEnrolled == 1)
        {
            $where .= ' AND E.stateContractId = ' . SAGU::getParameter('BASIC', 'STATE_CONTRACT_ID_ENROLLED');
        }
                                 
        if (strlen($where) > 0)
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY B.specialNecessityId, A.courseId, B.name ';
            
            $result = $db->query(SAGU::prepare($sql, $args));
            
            if (count($result) > 0)
            {
                foreach ($result as $res)
                {
                    $return[$res[12]]->title  = $res[13];
                    $return[$res[12]]->data[] = $res;
                }
                return $return;
            }
        }
        return null;
    }
}
?>
