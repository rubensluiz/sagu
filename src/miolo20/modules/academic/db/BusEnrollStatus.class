<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Leovan Tavares da Silva [leovan] [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 02/08/2006
 *
 **/

/**
 * Class to manipulate the basPupilListing table
 **/
class BusinessAcademicBusEnrollStatus extends sBusiness
{
    /**
     * Retorna uma lista de status de inscrição
     * 
     * @param (integer) $type: Tipo de listagem 0 array de array, 1 array associativo
     * @return (array): $result: conteudo do resultado.
     */
     public function listEnrollStatus($type = 0)
     {
         static $enrollStatus = array();
         
         // Cache dos dados para melhorar performance
         if ( count($enrollStatus[$type]) > 0 )
         {
             return $enrollStatus[$type];
         }
         
        $module = MIOLO::getCurrentModule();
        
        set_time_limit(0);
        
        $sql = 'SELECT statusId,
                       description
                  FROM acdEnrollStatus';
                    
        $result = $this->getDatabase()->query($sql);

        // retorna um array associativo ex:(1=>matriculado)
        if ( $type == 1 )
        {
            for ( $i=0; $i<count($result); $i++ )
            {
                $return[$result[$i][0]] = $result[$i][1];
            }
        }
        // retorna array de array
        elseif ( $type == 0 )
        {
            $return = $result;
        }
        
        // Cache
        $enrollStatus[$type] = $return;
        
        return $return;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $statusId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEnrollStatus($statusId)
    {
        $sql = 'SELECT statusId,
                       description,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM acdEnrollStatus
                 WHERE statusId = ?';
                 
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $statusId));
        
        list ($data->statusId,
              $data->description,
              $data->userName,
              $data->dateTime,
              $data->ipAddress) = $result[0];

        // Detalhes
        $filters = new stdClass();
        $filters->parentStatus = $data->statusId;
        $data->detailEnrollStatus = AcdDetailedEnrollStatus::search($filters);
        
        return $data;
    }
    
    public function searchEnrollStatus($filters)
    {
        $sql = "SELECT A.statusId,
                       A.description
                  FROM acdEnrollStatus A";

        $where = '';
        $params = array();
        
        if ( strlen($filters->statusId) > 0 )
        {
            $where .= ' AND A.statusId = ?';
            $params[] = $filters->statusId;
        }
        
        if ( strlen($filters->description) > 0 )
        {
            $where.= ' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $params[] = $filters->description . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 4) . ' ORDER BY A.description';
            $result = SDatabase::query($sql, $params);
        }
        
        return $result;
    }
    
    public function insertEnrollStatus($data)
    {
        //Not implemented yet
        return null;
    }
    
    public function updateEnrollStatus($data)
    {
        foreach ( (array) $data->detailEnrollStatus as $row )
        {
            $row->parentStatus = $data->statusId;
            $row->save();
        }
        
        return true;
    }
    
    public function deleteEnrollStatus($enrollStatusId)
    {
        
        
        //Not implemented yet
        return null;
    }
    
    public function getExam($filters, $isexam)
    {
        $sql = 'SELECT A.detailenrollstatusid
                  FROM acddetailenrollstatus A ';
        
        $sql .= ' WHERE  A.parentstatus = '. $filters->parentstatus;
        
        if ( $isexam == 't' )
        {
            $sql .= ' AND A.isexam = TRUE '; 
        }
        else
        {
            $sql .= ' AND ( A.isexam is null OR A.isexam = FALSE ) ';    
        }
        
        $result = SDatabase::query($sql);

        return $result;
    }
}
?>
