<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdMessageContractRenewal table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/09/2005
 *
 **/

/**
 * Class to manipulate the acdMessageContractRenewal table
 **/
class BusinessAcademicBusMessageContractRenewal extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listMessageContractRenewal()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $messageContractRenewalId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getMessageContractRenewal($messageContractRenewalId)
    {
        $sql = 'SELECT A.messageContractRenewalId,
                       A.learningPeriodId,
                       B.description AS learningPeriodDescription,
                       A.message,
                       A.font,
                       A.sequence,
                       A.length,
                       A.isListener,
                       A.status,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM unit_acdMessageContractRenewal A
             LEFT JOIN unit_acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)
                 WHERE A.messageContractRenewalId = ?';

        $pk = array(
                     $messageContractRenewalId
                   );

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $pk));
        

        $messageContractRenewal = new AcdMessageContractRenewal();

        list ( $messageContractRenewal->messageContractRenewalId,
               $messageContractRenewal->learningPeriodId,
               $messageContractRenewal->description,
               $messageContractRenewal->message,
               $messageContractRenewal->font,
               $messageContractRenewal->sequence,
               $messageContractRenewal->length,
               $messageContractRenewal->isListener,
               $messageContractRenewal->status,
               $messageContractRenewal->userName,
               $messageContractRenewal->dateTime,
               $messageContractRenewal->ipAddress ) = $result[0];

        return $messageContractRenewal; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchMessageContractRenewal($filters)
    {
        $sql = 'SELECT A.messageContractRenewalId,
                       A.learningPeriodId,
                       B.description AS learningPeriodDescription,
                       A.message,
                       A.font,
                       A.sequence,
                       A.length,
                       A.isListener,
                       A.status,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM unit_acdMessageContractRenewal A
             LEFT JOIN unit_acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)';

        if ( strlen($filters->messageContractRenewalId) > 0 )
        {
            $where .= ' AND A.messageContractRenewalId = ?';
            $args[] = $filters->messageContractRenewalId;
        }
        if ( strlen($filters->learningPeriodId) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }
        if ( strlen($filters->periodId) > 0 )
        {
            $where .= ' AND B.periodId = ?';
            $args[] = $filters->periodId;
        }
        if ( strlen($filters->learningPeriodDescription) > 0 )
        {
            $where .= ' AND UNACCENT(B.description) ILIKE UNACCENT(?)';
            $args[] = $filters->learningPeriodDescription . '%' ;
        }
        if ( strlen($filters->message) > 0 )
        {
            $where .= ' AND A.message ILIKE ?';
            $args[] = $filters->message  . '%' ;
        }
        if ( strlen($filters->font) > 0 )
        {
            $where .= ' AND A.font ILIKE ?';
            $args[] = $filters->font  . '%' ;
        }
        if ( strlen($filters->sequence) > 0 )
        {
            $where .= ' AND A.sequence = ?';
            $args[] = $filters->sequence;
        }
        if ( strlen($filters->length) > 0 )
        {
            $where .= ' AND A.length = ?';
            $args[] = $filters->length;
        }
        if ( strlen($filters->isListener) > 0 )
        {
            $where .= ' AND A.isListener = ?';
            $args[] = $filters->isListener;
        }
        if ( strlen($filters->status) > 0 )
        {
            $where .= ' AND A.status = ?';
            $args[] = $filters->status;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.description';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));

            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertMessageContractRenewal($data)
    {
        $sql = 'INSERT INTO acdMessageContractRenewal
                            (learningPeriodId,
                             message,
                             font,
                             sequence,
                             length,
                             isListener,
                             status)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $args = array( 
                       $data->learningPeriodId,
                       $data->message,
                       $data->font,
                       $data->sequence,
                       $data->length,
                       $data->isListener,
                       $data->status
                     );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateMessageContractRenewal($data)
    {
        $sql = 'UPDATE acdMessageContractRenewal
                   SET learningPeriodId = ?,
                       message          = ?,
                       font             = ?,
                       sequence         = ?,
                       length           = ?,
                       isListener       = ?,
                       status           = ?
                 WHERE messageContractRenewalId = ?';

        $args = array( 
                       $data->learningPeriodId,
                       $data->message,
                       $data->font,
                       $data->sequence,
                       $data->length,
                       $data->isListener,
                       $data->status,
                       $data->messageContractRenewalId
                     );
                       
        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $messageContractRenewalId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteMessageContractRenewal($messageContractRenewalId)
    {
        $sql = 'DELETE FROM acdMessageContractRenewal
                      WHERE messageContractRenewalId = ?';

        $pk = array(
                     $messageContractRenewalId
                   );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));
        

        return $result;
    }


    public function listStatus()
    {
        return array(
            'E' => _M('Matriculado',$module),
            'F' => _M('Calouro',$module),
            'O' => _M('Outros',$module)
        );
    }
}
?>
