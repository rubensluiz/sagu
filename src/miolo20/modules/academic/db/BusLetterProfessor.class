<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for letter professor
 *
 * @author Guilherme Gregory [guilherme@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 04/07/2006
 *
 **/

/**
 * Class to manipulate letter professor
 **/
class BusinessAcademicBusLetterProfessor extends sBusiness
{
    /**
     * List all registers to generate contract documets
     *
     * @param: $professorId (int): Is code of professor
     * @param: $periodId (string): Is code of period
     *
     * @returns (array): Return an array with all the matching records
     */
    public function getCurricularComponentByProfessor($professorId, $periodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $db     = $this->getDatabase();

        $sql = 'SELECT DISTINCT D.groupId,
                       G.periodId,
                       F.name,
                       I.room || \' - \' || I.building,
                       D.totalEnrolled,
                       K.description,
                       L.courseId,
                       TO_CHAR(G.begindatelessons, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       B.name
                  FROM acdscheduleprofessor A 
            INNER JOIN basphysicalpersonprofessor B 
                    ON (A.professorid = B.personid) 
            INNER JOIN acdschedule C 
                    ON (A.scheduleid = C.scheduleid) 
            INNER JOIN unit_acdGroup D 
                    ON (C.groupid = D.groupid) 
            INNER JOIN unit_acdcurriculum E 
                    ON (D.curriculumid = E.curriculumid) 
            INNER JOIN acdCurricularComponent F 
                    ON (E.curricularcomponentid = F.curricularcomponentid AND 
                        E.curricularcomponentversion = F.curricularcomponentversion) 
            INNER JOIN unit_acdlearningperiod G
                    ON (D.learningperiodid = G.learningperiodid)
            INNER JOIN basturn H
                    ON (H.turnid = G.turnId)
             LEFT JOIN insPhysicalResource I
                    ON (I.physicalresourceid = C.physicalresourceid)
            INNER JOIN bascity J
                    ON (B.cityId = J.cityId)
            INNER JOIN basUnit K
                    ON (C.unitid = K.unitid )
            INNER JOIN unit_acdcurriculum L
                    ON (L.curriculumId = D.curriculumId)
                 WHERE G.periodid = ?
                   AND D.iscancellation = false ';

        $args[] = $periodId;

        if ( strlen($professorId) > 0 )
        {
            $sql .= ' AND A.professorId = ? ';
            $args[] = $professorId;
        }

        $sql .= ' ORDER BY F.name ';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Function which returns information from the teacher in a given period.
     *
     * @param $periodId (varchar): Is code of period
     * @param $formationLevelId (integer): Is code of formation level of professor
     * @param $professorId (integer): Is code of professor
     *
     * @return $result (array): Is an array containing information of professor
     */
    public function getProfessorFromPeriod($periodId, $formationLevelId, $professorId=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $db     = $this->getDatabase();

        $sql = 'SELECT DISTINCT D.professorId,
                                E.name,
                                J.name || \' \' || E.location AS location,
                                E.neighborhood,
                                F.name as cityName,
                                F.stateId,
                                E.number,
                                E.complement,
                                E.zipCode
                           FROM unit_acdlearningperiod A
                     INNER JOIN unit_acdGroup B
                             ON (A.learningPeriodId = B.learningPeriodId)
                     INNER JOIN acdSchedule C
                             ON (C.groupId = B.groupId)
                     INNER JOIN acdScheduleProfessor D
                             ON (D.scheduleId = C.scheduleId)
                INNER JOIN ONLY basPhysicalPersonProfessor E
                             ON (E.personId = D.professorId)
                     INNER JOIN basCity F
                             ON (F.cityId = E.cityId)
                     INNER JOIN unit_acdcurriculum H
                             ON (H.curriculumId = B.curriculumId)
                     INNER JOIN acdCourse I
                             ON (I.courseId = H.courseId)
                     INNER JOIN basLocationType J
                             ON (E.locationTypeId = J.locationTypeId)
                          WHERE A.periodId = ?
                            AND I.formationLevelId = ? ';

        $args[] = $periodId;
        $args[] = $formationLevelId;

        if ( strlen($professorId) > 0 )
        {
            $sql .= ' AND D.professorId = ?';
            $args[] = $professorId;
        }

        $sql .= ' ORDER BY F.name';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
}

?>
