<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basCenter table
 *
 * @author Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 21/08/2006
 *
 **/

/**
 * Class to manipulate the basCenter table
 **/
class BusinessAcademicBusPossibilitiesAndMaterialOfEnrollAfterGraduation extends sBusiness
{
    public function possibilitiesOfEnroll($dataPos)
    {
       $MIOLO = MIOLO::getInstance();
       $module = MIOLO::getCurrentModule();

       $db  = $this->getDatabase();

       $sql = '   SELECT A.curricularComponentId,
                         B.name as curricularComponentName,
                         B.academicNumberHours
                    FROM unit_acdcurriculum A
              INNER JOIN acdCurricularComponent B
                      ON (A.curricularComponentId = B.curricularComponentId)
                   WHERE A.courseId = ? AND
                         A.courseVersion = ?
                ORDER BY A.curricularComponentId';

        $args = array( $dataPos->courseId,
                       $dataPos->courseVersion);

        $result = $db->query( SAGU::prepare($sql, $args) );

        return $result;
    }

    public function contractPersonsCourse($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $db  = $this->getDatabase();

        $sql = 'SELECT personId
                  FROM unit_acdContract 
                 WHERE courseId = ? AND 
                       courseVersion = ?';

        $args = array( $filters->courseId,
                       $filters->courseVersion);

        $result = $db->query( SAGU::prepare($sql, $args) );

        return $result;
    }
}
?>
