<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 01/02/2005
 */

include_once('BusEnroll.class');

/**
 * Class containing necessary methods for the enroll cancelation process
 */
class BusinessAcademicBusEnrollCancelation extends BusinessAcademicBusEnroll
{
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Cancell a enroll
     *
     * @param $enrollId (integer): the enroll id
     *
     * @return (boolean): TRUE if enroll is canceled sucessfull. Otherwise FALSE
     */
    public function cancellEnroll($enrollId, $reasonCancellationId, $learningPeriodId = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $busGroup = new BusinessAcademicBusGroup();
        
        // Define como cancelado
        $ok = $this->setCanceled($enrollId, $reasonCancellationId);
        if ( ! $ok )
        {
            throw new Exception(_M('Não foi possível definir estado da matrícula para cancelado.', $module));
        }

        // get data to update enroll after cancelation
        $enrollData = $this->getEnroll($enrollId);
        $group = $busGroup->getGroup($enrollData->groupId);
        $contractId = $enrollData->contractId;
        
        if ( !$learningPeriodId )
        {
            $learningPeriodId = $group->learningPeriodId;
        }
        
        // Caso exista matriculas, reprocessa
        $enrolls = $this->getEnrollByLearningPeriod($contractId, $learningPeriodId);
        
        if ( count($enrolls) > 0 )
        {
            // edit the enroll to reflect all changes, including fincance, where applicable
            $this->updateLearningPeriodEnroll($contractId, $learningPeriodId, true, true, $enrolls);
        }
        
        return $result;
    }
    
    /**
     * Define uma matricula como cancelada
     *
     * @param int $enrollId
     * @param int $reasonCancellationId
     * @return boolean
     */
    private function setCanceled($enrollId, $reasonCancellationId)
    {
       // Atualiza estado para CANCELADO
        $dateCancellation = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
        $hourCancellation = date(SAGU::getParameter('BASIC', 'MASK_TIME_PHP'));

        $sql = 'UPDATE acdenroll
                   SET statusId = ' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED') . ',
                       dateCancellation = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       hourCancellation = TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                       reasonCancellationId = ?,
                       detailenrollstatusid = (SELECT detailenrollstatusid
                                                 FROM acdDetailEnrollStatus
                                                WHERE parentStatus = ' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED') . ')
                 WHERE enrollId = ?';

        $params = array( $dateCancellation,
                       $hourCancellation,
                       $reasonCancellationId,
                       $enrollId );

        $sqls = SAGU::prepare($sql, $params);
        $result = true;
        for ( $i=0; $i<count($sqls) && $result; $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }
        
        return $result;
    }
    
    public function cancelarDisciplina($enrollId, $reasonCancelationId, $learningPeriodId)
    {
        $ok = $this->setCanceled($enrollId, $reasonCancellationId);
        
        if ( $ok && (SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES') )
        {
            $busLearningPeriod = new BusinessAcademicBusLearningPeriod();
            $busReceivableInvoice = new BusinessFinanceBusReceivableInvoicePupil();
            $lp = $busLearningPeriod->getLearningPeriod($learningPeriodId);            
            
            if ( MUtil::getBooleanValue($lp->isFinanceGenerate) )
            {
                if( SAGU::getParameter('BASIC', 'ENABLE_BUSINESS_USER') > '0' )
                {
                    $busReceivableInvoice = new BusinessFinanceBusReceivableInvoicePupilUser();
                }

                $busEnroll = new BusinessAcademicBusEnroll();
                $enroll = $busEnroll->getEnroll($enrollId);
                $ok = $busReceivableInvoice->generateReceivableInvoicesFromEnrollSummaries($enroll->contractId, $learningPeriodId);
            }
        }
        
        return $ok;
    }
}
?>