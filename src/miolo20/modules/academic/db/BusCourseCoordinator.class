<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * Class to manipulate the acdCourseCoordinator table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 31/08/2005
 */
class BusinessAcademicBusCourseCoordinator extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @return (array): Return an array with the entire table
     */
    public function listCourseCoordinator()
    {
        return 'Not implemented';
    }

    /**
     * Return a specific record from the database
     *
     * @param $courseId (integer): Primary key of the record to be retrieved
     * @param $courseVersion (integer): Primary key of the record to be retrieved
     * @param $turnId (integer): Primary key of the record to be retrieved
     * @param $unitId (integer): Primary key of the record to be retrieved
     * @param $coordinatorId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     */
    public function getCourseCoordinator($courseId, $courseVersion, $turnId, $unitId, $coordinatorId)
    {
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       C.description AS turnDescription,
                       A.unitId,
                       D.description AS turnDescription,
                       A.coordinatorId,
                       E.name AS coordinatorName,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.level,
                       A.isSendEmail,
                       A.email,
                       A.expirationLevel,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdCourseCoordinator A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN basTurn C
                    ON (C.turnId = A.turnId)
             LEFT JOIN basUnit D
                    ON (D.unitId = A.unitId)
        LEFT JOIN ONLY basPerson E
                    ON (E.personId = A.coordinatorId)
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?
                   AND A.turnId = ?
                   AND A.unitId = ?
                   AND A.coordinatorId = ?';

        $params = array();
        $params[] = $courseId;
        $params[] = $courseVersion;
        $params[] = $turnId;
        $params[] = $unitId;
        $params[] = $coordinatorId;

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $params));

        $courseCoordinator = new acdCourseCoordinator();
        list ( $courseCoordinator->courseId,
               $courseCoordinator->courseVersion,
               $courseCoordinator->courseName,
               $courseCoordinator->turnId,
               $courseCoordinator->turnDescription,
               $courseCoordinator->unitId,
               $courseCoordinator->unitDescription,
               $courseCoordinator->coordinatorId,
               $courseCoordinator->coordinatorName,
               $courseCoordinator->beginDate,
               $courseCoordinator->endDate,
               $courseCoordinator->level,
               $courseCoordinator->isSendEmail,
               $courseCoordinator->email,
               $courseCoordinator->expirationLevel,
               $courseCoordinator->userName,
               $courseCoordinator->dateTime,
               $courseCoordinator->ipAddress ) = $result[0];

        return $courseCoordinator;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     */
    public function searchCourseCoordinator($filters)
    {
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       A.courseId || \' / \' || A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       C.description AS turnDescription,
                       A.unitId,
                       D.description AS unitDescription,
                       A.coordinatorId,
                       E.name AS coordinatorName,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.level,
                       A.isSendEmail,
                       A.email,
                       A.expirationLevel
                  FROM acdCourseCoordinator A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN basTurn C
                    ON (C.turnId = A.turnId)
             LEFT JOIN basUnit D
                    ON (D.unitId = A.unitId)
        LEFT JOIN ONLY basPerson E
                    ON (E.personId = A.coordinatorId)';

        $where = '';
        $params = array();
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $params[] = $filters->courseId;
        }

        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $params[] = $filters->courseVersion;
        }

        if ( strlen($filters->courseName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $params[] = $filters->courseName . '%';
        }

        if ( strlen($filters->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $params[] = $filters->turnId;
        }

        if ( strlen($filters->turnDescription) > 0 )
        {
            $where .= ' AND UNACCENT(C.description) ILIKE UNACCENT(?)';
            $params[] = $filters->turnDescription . '%';
        }

        if ( strlen($filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $params[] = $filters->unitId;
        }

        if ( strlen($filters->unitDescription) > 0 )
        {
            $where .= ' AND UNACCENT(D.description) ILIKE UNACCENT(?)';
            $params[] = $filters->unitDescription . '%';
        }

        if ( strlen($filters->coordinatorId) > 0 )
        {
            $where .= ' AND A.coordinatorId = ?';
            $params[] = $filters->coordinatorId;
        }

        if ( strlen($filters->coordinatorName) > 0 )
        {
            $where .= ' AND UNACCENT(E.name) ILIKE UNACCENT(?)';
            $params[] = $filters->coordinatorName . '%';
        }

        if ( strlen($filters->beginDate) > 0 )
        {
            $where .= ' AND A.beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $params[] = $filters->beginDate;
        }

        if ( strlen($filters->endDate) > 0 )
        {
            $where .= ' AND A.endDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $params[] = $filters->endDate;
        }

        if ( strlen($filters->level) > 0 )
        {
            $where .= ' AND A.level = ?';
            $params[] = $filters->level;
        }

        if ( strlen($filters->isSendEmail) > 0 )
        {
            $where .= ' AND A.isSendEmail = ?';
            $params[] = $filters->isSendEmail;
        }

        if ( strlen($filters->email) > 0 )
        {
            $where .= ' AND A.email ILIKE ?';
            $params[] = $filters->email;
        }

        if ( strlen($filters->expirationLevel) > 0 )
        {
            $where .= ' AND A.expirationLevel = ?';
            $params[] = $filters->expirationLevel;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $params));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     */
    public function insertCourseCoordinator($data)
    {
        $sql = 'INSERT INTO acdCourseCoordinator
                            (courseId,
                             courseVersion,
                             turnId,
                             unitId,
                             coordinatorId,
                             beginDate,
                             endDate,
                             level,
                             isSendEmail,
                             email,
                             expirationLevel)
                     VALUES (?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             ?,
                             ?,
                             ?,
                             ?)';

        $params = array();
        $params[] = $data->courseId;
        $params[] = $data->courseVersion;
        $params[] = $data->turnId;
        $params[] = $data->unitId;
        $params[] = $data->coordinatorId;
        $params[] = $data->beginDate;
        $params[] = $data->endDate;
        $params[] = $data->level;
        $params[] = $data->isSendEmail;
        $params[] = $data->email;
        $params[] = $data->expirationLevel;

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $params));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateCourseCoordinator($data)
    {
        $sql = 'UPDATE acdCourseCoordinator
                   SET beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       endDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       level = ?,
                       isSendEmail = ?,
                       email = ?,
                       expirationLevel = ?
                 WHERE courseId = ?
                   AND courseVersion = ?
                   AND turnId = ?
                   AND unitId = ?
                   AND coordinatorId = ?';

        $params = array();
        $params[] = $data->beginDate;
        $params[] = $data->endDate;
        $params[] = $data->level;
        $params[] = $data->isSendEmail;
        $params[] = $data->email;
        $params[] = $data->expirationLevel;
        $params[] = $data->courseId;
        $params[] = $data->courseVersion;
        $params[] = $data->turnId;
        $params[] = $data->unitId;
        $params[] = $data->coordinatorId;

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $params);

        for ( $i = 0; $i < count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $courseId (string): Primary key for deletion
     * @param $courseVersion (string): Primary key for deletion
     * @param $turnId (string): Primary key for deletion
     * @param $unitId (string): Primary key for deletion
     * @param $coordinatorId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteCourseCoordinator($courseId, $courseVersion, $turnId, $unitId, $coordinatorId)
    {
        $sql = 'DELETE FROM acdCourseCoordinator
                      WHERE courseId = ?
                        AND courseVersion = ?
                        AND turnId = ?
                        AND unitId = ?
                        AND coordinatorId = ?';

        $params = array();
        $params[] = $courseId;
        $params[] = $courseVersion;
        $params[] = $turnId;
        $params[] = $unitId;
        $params[] = $coordinatorId;

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $params));

        return $result;
    }

    /**
     * Verifica se o professor atualmente é coordenador de algum curso.
     *
     * @param $professorId: Código do professor
     * @return boolean
     */
    public function isCourseCoordinator($professorId)
    {
        /*
         * Verifica se há dados na tabela acdCourseCoordinator para tal professor
         * e se não há data de fim, caso haja data de fim verifica se já não
         * expirou.
         */
        $sql = 'SELECT COUNT(*)
                  FROM acdCourseCoordinator
                 WHERE coordinatorId = ?
                   AND (endDate IS NULL OR
                        endDate > NOW())';

        $params = array();
        $params[] = $professorId;

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $params));

        // Retorna somente um boolean
        return $result[0][0] > 0;
    }
    
    public function obterCursosDoCoordenador($coordenadorId, $listForSelection = false, $noPeriodId = false)
    {
        if ( $listForSelection )
        {
            $sql = " SELECT DISTINCT CC.courseid, C.name
                       FROM acdcoursecoordinator CC 
                  LEFT JOIN acdcourse C 
                         ON (C.courseid = CC.courseid)                   
                      WHERE CC.coordinatorid = ? ";
        }
        else if ( !$noPeriodId )
        {
            $sql = " SELECT CC.courseid, CC.courseversion, CC.turnid, T.description, CC.unitid, U.description, C.name, LP.periodid 
                       FROM acdcoursecoordinator CC 
                  LEFT JOIN acdcourse C 
                         ON (C.courseid = CC.courseid) 
                  LEFT JOIN basturn T 
                         ON (T.turnid = CC.turnid)
                  LEFT JOIN basunit U 
                         ON (U.unitid = CC.unitid)
                  LEFT JOIN acdlearningperiod LP 
                         ON (CC.courseid = LP.courseid and CC.courseversion = LP.courseversion and CC.turnid = LP.turnid and CC.unitid = LP.unitid) 
                      WHERE coordinatorid = ? 
                   ORDER BY LP.periodid DESC";
        }
	else
	{
		$sql = " SELECT DISTINCT CC.courseid, CC.courseversion, CC.turnid, T.description, CC.unitid, U.description, C.name 
                       		    FROM acdcoursecoordinator CC 
	                       LEFT JOIN acdcourse C 
                         	      ON (C.courseid = CC.courseid) 
	                       LEFT JOIN basturn T 
                                      ON (T.turnid = CC.turnid)
	                       LEFT JOIN basunit U 
             	                      ON (U.unitid = CC.unitid)
	                           WHERE coordinatorid = ? ";		
	}
        
        $params = array();
        $params[] = $coordenadorId;

        $db = $this->getDatabase();
        return $db->query(SAGU::prepare($sql, $params));
    }
    
    public function obterPeriodosDoCoordenador($coordenadorId)
    {
        $busPeriod = new BusinessAcademicBusPeriod();
        $periodos = array();
        $idPeriods = array();
        
        $cursos = $this->obterCursosDoCoordenador($coordenadorId);
        foreach( $cursos as $key => $curso )
        {
            $periodId = $curso[7];
            if ( $periodId )
            {
                $periodo = $busPeriod->getPeriod($periodId);

                if ( !in_array($periodo->periodId, $idPeriods) )
                {
                    $periodos[$key][0] = $periodo->periodId;
                    $periodos[$key][1] = $periodo->description;
                    
                    $idPeriods[] = $periodo->periodId;
                }
            }
        }
        
        return $periodos;
    }
    
    public function obterPreferenciasDoCoordenador($personId)
    {
        $sql = " SELECT notificacaonovamensagem, 
                        notificacaoconviteatividade,
                        notificacaosolicitacaoreposicao
                   FROM prtpreferenciascoordenador
                  WHERE personid = ? ";
        
        $params = array();
        $params[] = $personId;

        $db = $this->getDatabase();
        
        $result = $db->query(SAGU::prepare($sql, $params));        
        
        return $result[0];
    }
    
    public function obterCoordenadoresPeloContrato($contractId)
    {
        $sql = ' SELECT CC.coordinatorid 
                   FROM acdcoursecoordinator CC 
              LEFT JOIN acdcontract C 
                     ON (CC.courseid = C.courseid 
                    AND CC.courseversion = C.courseversion 
                    AND CC.turnid = C.turnid 
                    AND CC.unitid = C.unitid) 
                  WHERE C.contractid = ?
                    AND begindate <= now()::date 
                    AND (enddate >= now()::date OR enddate IS NULL) ';
        
        $params = array();
        $params[] = $contractId;

        $db = $this->getDatabase();
        
        $result = $db->query(SAGU::prepare($sql, $params));        
        
        return $result;
    }
    
    /**
     * Verifica se o professor atualmente é coordenador de um curso em questao.
     *
     * @param $personId: Código do professor
     * @param $courseId: Código do curso
     * @return boolean
     */
    public function isCourseCoordinatorInCourse($personId, $courseId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM acdCourseCoordinator
                 WHERE coordinatorId = ?
                   AND (endDate IS NULL OR
                        endDate >= NOW()::DATE)
                   AND courseId = ? ';

        $params[] = $personId;
        $params[] = $courseId;

        $result = SDatabase::query($sql, $params);
        
        return $result[0][0] > 0;
    }
}
?>
