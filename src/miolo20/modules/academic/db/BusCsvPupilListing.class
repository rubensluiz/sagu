<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Leovan Tavares da Silva [leovan@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 04/08/2006
 *
 **/

/**
 **/
class BusinessAcademicBusCsvPupilListing extends sBusiness
{
    /**
     * List the courses for a specified period
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function listCourse($filters)
    {
        $MIOLO = MIOLO::getInstance();

        $sql = 'SELECT DISTINCT A.courseId,
                       A.courseId || \' - \' || A.shortname
                  FROM acdCourse A
            INNER JOIN unit_acdlearningperiod B
                    ON (B.courseId = A.courseId)
            INNER JOIN finPrice C
                    ON (C.learningPeriodId = B.learningPeriodId)
                 WHERE B.periodid = ?
              ORDER BY A.courseId';

        if ( strlen($filters->periodId) > 0 )
        {
            $args[] = $filters->periodId;
        }

        unset($result);
        if ( strlen($sql) > 0 )
        {
            $db     = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
    /**
     * Get the information about pupils
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getPupilData($filters)
    {
        $sql = '    SELECT UNACCENT(UPPER(A.name)),
                           A.personId,
                           TO_CHAR(A.dateBirth, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                           D.content,
                           C.shortName
                 FROM ONLY basPhysicalPerson A
                INNER JOIN unit_acdContract B
                        ON (B.personId = A.personId)
                INNER JOIN acdCourse C
                        ON (C.courseId = B.courseId)
                 LEFT JOIN basDocument D
                        ON (D.personId = A.personId
                            AND D.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG') . ')
                     WHERE NOT isContractClosed(B.contractId)';

        if ( strlen($filters->unitId) > 0 )
        {
            $sql .= ' AND B.unitId = ?';
            $args[] = $filters->unitId;
        }
        
        $sql .= '        AND EXISTS (SELECT \'x\'
                                     FROM unit_acdEnroll X
                               INNER JOIN unit_acdGroup Y
                                       ON (Y.groupId = X.groupId)
                               INNER JOIN unit_acdlearningperiod Z
                                       ON (Z.learningPeriodId = Y.learningPeriodId';

        if ( strlen($filters->periodId) > 0 )
        {
            $sql .= ' AND Z.periodId = ?';
            $args[] = $filters->periodId;
        }

        $sql .= ')
                                    WHERE X.dateCancellation IS NULL
                                      AND X.contractId = B.contractId)';
        
        if ( strlen($filters->courseId) > 0 )
        {
            $sql .= ' AND C.courseId = ?';
            $args[] = $filters->courseId;
        }

        if ( strlen($filters->personId) > 0 )
        {
            $sql .= ' AND A.personId IN (' . $filters->personId . ') ';
        }

        $db     = $this->getDatabase();
        $sql   .= ' ORDER BY 1';
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Get the information about professor
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getProfessorData($filters)
    {
        $sql = 'SELECT DISTINCT A.name,
                       A.personId,
                       TO_CHAR(A.dateBirth, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       F.content
             FROM ONLY basPhysicalPerson A
            INNER JOIN acdScheduleProfessor B
                    ON (A.personId = B.professorId)
            INNER JOIN acdSchedule C
                    ON (C.scheduleId = B.scheduleId)
            INNER JOIN unit_acdGroup D
                    ON (D.groupId = C.groupId)
            INNER JOIN unit_acdlearningperiod E
                    ON (E.learningPeriodId = D.learningPeriodId)
             LEFT JOIN basDocument F
                       ON (F.personId = A.personId
                           AND F.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG') . ')
                WHERE D.isCancellation IS FALSE' ;

        if ( strlen($filters->periodId) > 0 )
        {
            $where .= ' AND E.periodId = ? ';
            $args[] = $filters->periodId;
        }
        
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND E.courseId = ? ';
            $args[] = $filters->courseId;
        }

        if ( strlen($filters->unitId) > 0 )
        {
            $where .= ' AND E.unitId = ? ';
            $args[] = $filters->unitId;
        }
        
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId IN (' . $filters->personId . ') ';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $db     = $this->getDatabase();
            
            $sql   .= $where . ' ORDER BY 1';
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Get the information about comunity
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getComunityData($filters)
    {
        $sql = 'SELECT DISTINCT A.name,
                       A.personId,
                       TO_CHAR(A.dateBirth, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       B.content
                  FROM ONLY basPhysicalPerson A
            LEFT JOIN basDocument B
                   ON (B.personId = A.personId
                       AND B.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG') . ')';

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' WHERE A.personId IN (' . $filters->personId . ') ';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $db     = $this->getDatabase();
            
            $sql   .= $where . ' ORDER BY 1';
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
}
?>
