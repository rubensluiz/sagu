<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * Handles external exploitation data
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 23/09/2005
 *
 **/
$MIOLO = MIOLO::getInstance();
$MIOLO->uses('db/BusExploitation.class', 'academic');

/**
 * Class to manipulate the acdExternalExploitation table
 **/
class BusinessAcademicBusInternalExploitation extends BusinessAcademicBusExploitation
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct();
    }
    
    /**
     * Gets an object that represents the internal exploitation data
     *
     * @param $exploitationId: Primary key of the desired register
     *
     * @return (object): An object containing the data
     **/
    public function getInternalExploitation($exploitationId)
    {
        $sql = 'SELECT A.exploitationId,
                       A.enrollId,
                       A.exploitationType,
                       A.exploitationEnrollId,
                       ( CASE WHEN B.statusid <> ' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED') . '
                              THEN
                                   A.exploitationNumberHours
                              ELSE
                                   0
                         END ),
                       A.exploitationCredits,
                       A.finalNote
                  FROM unit_acdExploitation A
            INNER JOIN unit_acdEnroll B
                    ON B.enrollId = A.enrollId
                 WHERE exploitationId = ?';
                 
        $args = array($exploitationId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        list ($exploitationData->exploitationId,
              $exploitationData->enrollId,
              $exploitationData->exploitationType,
              $exploitationData->exploitationEnrollId,
              $exploitationData->exploitationNumberHours,
              $exploitationData->exploitationCredits,
              $exploitationData->finalNote) = $result[0];
              
        return $exploitationData;
    }
    
    /**
     * Searches for internal exploitation data on acdExploitation table
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchInternalExploitation($filters)
    {
        $sql = 'SELECT A.exploitationId,
                       A.exploitationType,
                       A.enrollId,
                       D.curricularComponentId || \'/\' || D.curricularComponentVersion,
                       D.name,
                       A.exploitationEnrollId,
                       H.courseId || \'/\' || H.courseVersion,
                       G.curricularComponentId || \'/\' || G.curricularComponentVersion,
                       G.name,
                       A.exploitationNumberHours,
                       A.exploitationCredits
                  FROM unit_acdExploitation A
            INNER JOIN unit_acdEnroll B
                    ON (B.enrollId = A.enrollId)
            INNER JOIN unit_acdcurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent D
                    ON (D.curricularComponentId      = C.curricularComponentId AND
                        D.curricularComponentVersion = C.curricularComponentVersion)
            INNER JOIN unit_acdEnroll E
                    ON (E.enrollId = A.exploitationEnrollId)
            INNER JOIN unit_acdcurriculum F
                    ON (F.curriculumId = E.curriculumId)
            INNER JOIN acdCurricularComponent G
                    ON (G.curricularComponentId      = F.curricularComponentId AND
                        G.curricularComponentVersion = F.curricularComponentVersion)
            INNER JOIN unit_acdContract H
                    ON (H.contractId = E.contractId)
            INNER JOIN unit_acdGroup I
                    ON (I.groupId = E.groupId)
            INNER JOIN unit_acdlearningperiod J
                    ON (J.learningPeriodId = I.learningPeriodId)';
                    
        unset($where);
        if (strlen($filters->exploitationId) > 0)
        {
            $where .= ' AND A.exploitationId = ?';
            $args[] = $filters->exploitationId;
        }
        if (strlen($filters->enrollId) > 0)
        {
            $where .= ' AND A.enrollId = ?';
            $args[] = $filters->enrollId;
        }
        if (strlen($filters->curricularComponentId) > 0)
        {
            $where .= ' AND D.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if (strlen($filters->curricularComponentVersion) > 0)
        {
            $where .= ' AND D.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }
        if (strlen($filters->curricularComponentName) > 0)
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curricularComponentName;
        }
        if (strlen($filters->periodId) > 0)
        {
            $where .= ' AND J.periodId = ?';
            $args[] = $filters->period;
        }
        if (strlen($filters->learningPeriodId) > 0)
        {
            $where .= ' AND I.learningPeriodId = ?';
            $args[] = $filters->learningPeriodId;
        }
        if (strlen($filters->contractId) > 0)
        {
            $where .= ' AND B.contractId = ?';
            $args[] = $filters->contractId;
        }
        
        $where .= ' AND A.exploitationType = \'I\'';
        
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY J.periodId, D.name';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
    /**
     * Inserts a internal exploitation register on the exploitations table
     *
     * @param $data (object): Object with the data to be inserted
     *
     * @return True if succed, otherwise False
     **/
    public function insertInternalExploitation($data)
    {
        /**
         * Atributos do objeto $data
         * $data->contractId: código do contrato
         * $data->curriculumId: código da disciplina na matriz curricular
         * $data->exploitationEnrollId: código da matrícula da disciplina que está 
         *                              sendo aproveitada
         * $data->exploitationNumberHours: número de horas aproveitadas
         * $data->exploitationCredits: número de créditos aproveitados
         * $data->learningPeriodId: código do período letivo do aproveitamento
         **/
                
        $data->exploitationType = 'I';
        if( strlen($data->enrollId) == 0 )
        {
            $data->enrollId = $this->getOrInsertEnrollForExploitation($data->contractId, $data->curriculumId, $data->learningPeriodId);   
        }        

        $sql = 'INSERT INTO acdExploitation
                           (enrollId,
                            exploitationType,
                            exploitationEnrollId,
                            exploitationNumberHours,
                            exploitationCredits,
                            finalnote,
                            electiveCurriculumId)
                     VALUES (?, ?, ?, ?, ?, ?, ?)';
                     
        $args = array($data->enrollId,
                      $data->exploitationType,
                      $data->exploitationEnrollId,
                      $data->exploitationNumberHours,
                      $data->exploitationCredits,
                      $data->finalnote,
                      $data->electiveCurriculumId);
                      

        return $this->getDatabase()->execute(SAGU::prepare($sql, $args));
    }
    
    /**
     * Updates a internal exploitation register of the exploitations table
     *
     * @param $data (object): Object with the data to be updated
     *
     * @return True if succed, otherwise False
     **/
    public function updateInternalExploitation($data)
    {
        /**
         * Atributos do objeto $data
         * $data->exploitationId: código do aproveitamento
         * $data->exploitationNumberHours: número de horas aproveitadas
         * $data->exploitationCredits: número de créditos aproveitados
         **/
        
        $sql = 'UPDATE acdExploitation
                   SET exploitationNumberHours = ?,
                       exploitationCredits = ?,
                       finalnote = ?,
                       electiveCurriculumId = ?
                 WHERE exploitationId = ?';
                 
        $args = array($data->exploitationNumberHours,
                      $data->exploitationCredits,
                      $data->finalnote,
                      $data->electiveCurriculumId,
                      $data->exploitationId);

        return $this->getDatabase()->execute(SAGU::prepare($sql, $args));
    }
    
    /**
     * Searches for enrolls that can be exploited by a contract, i.e. curricular components where the
     * pupil got approved or is excused in contracts other than this one
     *
     * @param $contractId: Contract code
     *
     * @return (array): Array with the search results
     **/
    public function searchContractExploitableEnroll($contractId)
    {
        $sql = 'SELECT A.enrollId,
                       A.contractId,
                       CASE WHEN (SELECT count(*) 
                                    FROM unit_acdExploitation XX 
                                   WHERE XX.enrollId = A.enrollId) > 0
                       THEN 1
                       ELSE 0 END AS hasExploitation,
                       C.curricularComponentId || \'/\' || C.curricularComponentVersion,
                       C.name,
                       D.courseId || \'/\' || D.courseVersion,
                       C.academicNumberHours,
                       (SELECT COALESCE(SUM(YY.exploitationNumberHours), 0)
                          FROM unit_acdExploitation YY
                         WHERE YY.exploitationEnrollId = A.enrollId) AS exploitedNumberHours
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdcurriculum B
                    ON (B.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = B.curricularComponentId AND
                        C.curricularComponentVersion = B.curricularComponentVersion)
            INNER JOIN unit_acdContract D    
                    ON (D.contractId = A.contractId)
            INNER JOIN acdCourse E
                    ON (E.courseId = D.courseId)
                 WHERE D.personId IN (SELECT personId 
                                        FROM unit_acdContract 
                                       WHERE contractId = ?)
                   AND D.contractId != ?
                   AND B.curriculumTypeId NOT IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY') . ', ' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_PROFICIENCY') . ')
                   AND E.formationLevelId IN (SELECT BB.formationLevelId
                                                FROM unit_acdContract AA
                                          INNER JOIN acdCourse BB
                                                  ON (BB.courseId = AA.courseId)
                                               WHERE AA.contractId = ?)
                   AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED') . ',
                                      ' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED') . ')
                   AND C.academicNumberHours > ( SELECT ( CASE WHEN sum(XY.exploitationNumberHours) > 0
							       THEN
                                                                    sum(XY.exploitationNumberHours)
                                                               ELSE
                                                                    0
                                                          END )
                                                   FROM unit_acdExploitation XY
                                             /**
                                              * Para buscar a matrícula atual do aproveitamento.
                                              * Se a matrícula estiver cancelada então a disciplina para aproveitar pode ser listada.
                                              */
                                             INNER JOIN unit_acdEnroll AE 
					             ON AE.enrollid = XY.enrollid
					          WHERE XY.exploitationEnrollId = A.enrollId
					            AND AE.statusid <> ' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED') . ' )
              ORDER BY name';
                   
        $args = array($contractId, $contractId, $contractId);
                
        return $this->getDatabase()->query(SAGU::prepare($sql, $args));
    }
    
    /**
     * Gets an exploitation data summary of an exploitable enroll
     *
     * @param $exploitationEnrollId: Primary key of the desired enroll
     *
     * @return (object): Object with the data
     **/
    public function getEnrollExploitableSummary($exploitableEnrollId)
    {
        $sql = 'SELECT C.academicNumberHours
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdcurriculum B
                    ON (B.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = B.curricularComponentId AND
                        C.curricularComponentVersion = B.curricularComponentVersion)
                 WHERE A.enrollId = ?';
                 
        $args = array($exploitableEnrollId);
        
        $result1 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        $sql = 'SELECT sum(exploitationNumberHours)
                  FROM unit_acdExploitation
                 WHERE exploitationEnrollId = ?';
                 
        $result2 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        $exploitableSumm->totalNumberHours     = $result1[0][0];
        $exploitableSumm->exploitedNumberHours = $result2[0][0] > 0 ? $result2[0][0] : 0;
        $exploitableSumm->remainingNumberHours = $exploitableSumm->totalNumberHours - $exploitableSumm->exploitedNumberHours;
        
        return $exploitableSumm;
    }
    
    /**
     * Searches for enrolls that can be exploited by a contract, i.e. curricular components where the
     * pupil got approved or is excused in same contract
     *
     * @param $contractId: Contract code
     *
     * @return (array): Array with the search results
     **/
    public function searchContractExploitableEnrollInSameContract($contractId)
    {
        $sql = 'SELECT A.enrollId,
                       A.contractId,
                       CASE WHEN (SELECT count(*) 
                                    FROM unit_acdExploitation XX 
                                   WHERE XX.enrollId = A.enrollId) > 0
                       THEN 1
                       ELSE 0 END AS hasExploitation,
                       C.curricularComponentId || \'/\' || C.curricularComponentVersion,
                       C.name,
                       D.courseId || \'/\' || D.courseVersion,
                       C.academicNumberHours,
                       (SELECT COALESCE(SUM(YY.exploitationNumberHours), 0)
                          FROM unit_acdExploitation YY
                         WHERE YY.exploitationEnrollId = A.enrollId) AS exploitedNumberHours
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdcurriculum B
                    ON (B.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = B.curricularComponentId AND
                        C.curricularComponentVersion = B.curricularComponentVersion)
            INNER JOIN unit_acdContract D    
                    ON (D.contractId = A.contractId)
            INNER JOIN acdCourse E
                    ON (E.courseId = D.courseId)
                 WHERE D.personId IN (SELECT personId 
                                        FROM unit_acdContract 
                                       WHERE contractId = ?)
                   AND D.contractId = ?
                   AND B.curriculumTypeId NOT IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY') . ', ' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_PROFICIENCY') . ')
                   AND E.formationLevelId IN (SELECT BB.formationLevelId
                                                FROM unit_acdContract AA
                                          INNER JOIN acdCourse BB
                                                  ON (BB.courseId = AA.courseId)
                                               WHERE AA.contractId = ?)
                   AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED') . ',
                                      ' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED') . ')
                   AND C.academicNumberHours > ( SELECT ( CASE WHEN sum(XY.exploitationNumberHours) > 0
							       THEN
                                                                    sum(XY.exploitationNumberHours)
                                                               ELSE
                                                                    0
                                                          END )
                                                   FROM unit_acdExploitation XY
                                             /**
                                              * Para buscar a matrícula atual do aproveitamento.
                                              * Se a matrícula estiver cancelada então a disciplina para aproveitar pode ser listada.
                                              */
                                             INNER JOIN unit_acdEnroll AE 
					             ON AE.enrollid = XY.enrollid
					          WHERE XY.exploitationEnrollId = A.enrollId
					            AND AE.statusid <> ' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED') . ' )
              ORDER BY name';
                   
        $args = array($contractId, $contractId, $contractId);
        
        return $this->getDatabase()->query(SAGU::prepare($sql, $args));
    }
}

?>
