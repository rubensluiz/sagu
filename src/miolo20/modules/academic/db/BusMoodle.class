<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class to manipulate the acdMoodleSubscription table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 12/08/2010
 *
 * */
class BusinessAcademicBusMoodle extends sBusiness
{

    /**
     * Synchronize acdmoodlesubscription data with sagu
     *
     * @param $groupId (string): The groupId
     *
     * @return (null)
     * */
    public function synchronize($groupId, $idmodule = 'academic')
    {
        $MIOLO = MIOLO::getInstance();
        $db = $this->getDatabase();

        if ( $idmodule == 'pedagogico' )
        {
// $groupId = ofertaComponenteCurricularId

            $sql = "SELECT DISTINCT D.miolousername,
                                    A.ofertacomponentecurricularid,
                                    'f' as isteacher,
                                    null as processed,
                                    D.personId,
                                    'pedagogico'
                               FROM acpMatricula A
                    INNER JOIN ONLY basphysicalperson D
                                 ON (A.personId = D.personId)
                              WHERE A.ofertacomponentecurricularid = ?
                                AND D.personId NOT IN(SELECT personId FROM acdMoodleSubscription WHERE groupId = ? AND idmodule = 'pedagogico')
                                AND A.situacao <> 'C'";
        }
        elseif ( $idmodule == 'resmedica' ) // -1- trás as pessoas que são "isteacher FALSE" SE CASO NÃO FORAM INSCRITOS AINDA
        {
            $sql = "SELECT DISTINCT D.miolousername,
                                    A.ofertadeunidadetematicaid,
                                    'f' as isteacher,
                                    null as processed,
                                    D.personId,
                                    'resmedica'
                               FROM med.ofertadoresidente A
                         INNER JOIN med.residente B
                                 ON A.residenteid = B.residenteid
                         INNER JOIN ONLY basphysicalperson D
                                 ON (B.personId = D.personId)
                         INNER JOIN med.ocorrenciadecontrato E 
                                 ON med.ultimaocorrenciadecontratoid(b.residenteid) = E.ocorrenciadecontratoid
                         INNER JOIN med.statusdaocorrenciadecontrato F
                                 ON E.statusdaocorrenciadecontratoid = F.statusdaocorrenciadecontratoid 
                         INNER JOIN med.ocorrenciadeoferta G
                                 ON (G.ocorrenciadeofertaid = (SELECT X.ocorrenciadeofertaid 
                                                                 FROM med.ocorrenciadeoferta X 
                                                                WHERE X.ofertadoresidenteid = A.ofertadoresidenteid 
                                                             ORDER BY datahora DESC LIMIT 1))
                              WHERE A.ofertadeunidadetematicaid = ?
                                -- contrato ativo
                                AND bloqueiaresidencia = 'f'
                                --status matriculado
                                AND G.status = 1
                                AND D.personId NOT IN(SELECT personId FROM acdMoodleSubscription WHERE groupId = ? AND idmodule = 'resmedica');";
        }
        
        elseif ( $idmodule == 'residency' ) // -1- trás as pessoas que são "isteacher FALSE" SE CASO NÃO FORAM INSCRITOS AINDA
        {
            $sql = "SELECT DISTINCT D.miolousername,
                                    A.ofertadeunidadetematicaid,
                                    'f' as isteacher,
                                    null as processed,
                                    D.personId,
                                    'residency'
                               FROM res.ofertadoresidente A
                         INNER JOIN res.residente B
                                 ON A.residenteid = B.residenteid
                         INNER JOIN ONLY basphysicalperson D
                                 ON (B.personId = D.personId)
                         INNER JOIN res.ocorrenciadecontrato E 
                                 ON res.ultimaocorrenciadecontratoid(b.residenteid) = E.ocorrenciadecontratoid
                         INNER JOIN res.statusdaocorrenciadecontrato F
                                 ON E.statusdaocorrenciadecontratoid = F.statusdaocorrenciadecontratoid 
                         INNER JOIN res.ocorrenciadeoferta G
                                 ON (G.ocorrenciadeofertaid = (SELECT X.ocorrenciadeofertaid 
                                                                 FROM res.ocorrenciadeoferta X 
                                                                WHERE X.ofertadoresidenteid = A.ofertadoresidenteid 
                                                             ORDER BY datahora DESC LIMIT 1))
                              WHERE A.ofertadeunidadetematicaid = ?
                                -- contrato ativo
                                AND bloqueiaresidencia = 'f'
                                --status matriculado
                                AND G.status = 1
                                AND D.personId NOT IN(SELECT personId FROM acdMoodleSubscription WHERE groupId = ? AND idmodule = 'residency');";
        }
        
        else
        {
                        $sql = "SELECT DISTINCT D.miolousername,
                                    A.groupId,
                                    'f' as isteacher,
                                    null as processed,
                                    D.personId,
                                    'academic'
                               FROM unit_acdEnroll A
                         INNER JOIN unit_acdContract B
                                 ON (A.contractId = B.contractId)
                         INNER JOIN acdEnrollStatus C
                                 ON (C.statusId = A.statusId)
                    INNER JOIN ONLY basphysicalperson D
                                 ON (B.personId = D.personId)
                              WHERE A.groupId = ?
                                AND D.personId NOT IN(SELECT personId FROM acdMoodleSubscription WHERE groupId = ? AND idmodule NOT IN ('pedagogico', 'resmedica', 'residency'))
                                AND C.statusId != getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED')::INT;";

        }

        $args = array( $groupId, $groupId );
        $result = $db->query(SAGU::prepare($sql, $args, false));

        foreach ( (array) $result as $line )
        {
            $data = new stdClass();
            $data->login = $line[0];
            $data->groupId = $line[1];
            $data->isteacher = $line[2];
            $data->processed = $line[3];
            $data->personId = $line[4];
            $data->idmodule = $line[5];

            $this->insertMoodleSubscription($data);
        }

        if ( $idmodule == 'pedagogico' )
        {
            $sql = "SELECT DISTINCT C.miolousername,
                                    OHO.ofertacomponentecurricularid,
                                    't' as isteacher,
                                    null as processed,
                                    C.personId,
                                    'pedagogico'
                               FROM acpocorrenciahorariooferta OHO
                    INNER JOIN ONLY basPhysicalPersonProfessor C
                                 ON (OHO.professorId = C.personId)
                              WHERE OHO.ofertacomponentecurricularid = ?
                                AND C.personId NOT IN(SELECT personId FROM acdMoodleSubscription WHERE groupId = ? AND idmodule='pedagogico')
                           ORDER BY C.miolousername ;";
        }
        elseif ( $idmodule == 'resmedica' )// -2- traz as pessoas que sao "is teacher TRUE"
        {
            $sql = "SELECT DISTINCT C.miolousername,
                                    OHO.ofertadeunidadetematicaid,
                                    't' as isteacher,
                                    null as processed,
                                    C.personId,
                                    'resmedica'
                               FROM med.ofertadeunidadetematica OHO
                    INNER JOIN ONLY basPhysicalPerson C
                                 ON (OHO.personId = C.personId)
                              WHERE OHO.ofertadeunidadetematicaid = ?
                                AND C.personId NOT IN(SELECT personId FROM acdMoodleSubscription WHERE groupId = ? AND idmodule='resmedica')
                           ORDER BY C.miolousername ;";
        }
        
         elseif ( $idmodule == 'residency' )// -2- traz as pessoas que sao "is teacher TRUE"
        {
            $sql = "SELECT DISTINCT C.miolousername,
                                    OHO.ofertadeunidadetematicaid,
                                    't' as isteacher,
                                    null as processed,
                                    C.personId,
                                    'residency'
                               FROM res.ofertadeunidadetematica OHO
                    INNER JOIN ONLY basPhysicalPerson C
                                 ON (OHO.personId = C.personId)
                              WHERE OHO.ofertadeunidadetematicaid = ?
                                AND C.personId NOT IN(SELECT personId FROM acdMoodleSubscription WHERE groupId = ? AND idmodule='residency')
                           ORDER BY C.miolousername ;";
        }
        
        else
        {
            $sql = "SELECT DISTINCT C.miolousername,
                                    B.groupId,
                                    't' as isteacher,
                                    null as processed,
                                    C.personId,
                                    'academic'
                               FROM acdScheduleProfessor A
                         INNER JOIN acdSchedule B
                                 ON (B.scheduleId = A.scheduleId)
                         INNER JOIN basPhysicalPersonProfessor C
                                 ON (C.personId = A.professorId)
                              WHERE B.groupId = ?
                                AND C.personId NOT IN(SELECT personId FROM acdMoodleSubscription WHERE groupId = ? AND idmodule NOT IN ('resmedica', 'pedagogico', 'residency'))
                           ORDER BY C.miolousername ;";
        }

        $args = array( $groupId, $groupId );
        $result = $db->query(SAGU::prepare($sql, $args, false));


        foreach ( (array) $result as $line )
        {
            $data = new stdClass();
            $data->login = $line[0];
            $data->groupId = $line[1];
            $data->isteacher = $line[2];
            $data->processed = $line[3];
            $data->personId = $line[4];
            $data->idmodule = $line[5];

            $this->insertMoodleSubscription($data);
        }
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     * */
    public function listStudentMoodleSubscription($groupid, $idmodule = 'academic')
    {
        $module = MIOLO::getCurrentModule();
        $db = $this->getDatabase();

        if ( $idmodule == 'pedagogico' )
        {
            $sql = "SELECT DISTINCT p.personid,
                                    p.name,
                                    CASE WHEN s.processed THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_REGISTERED') . "' ELSE '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_NOT_REGISTERED') . "' END,

                                    -- Mensagens de status
                                    CASE WHEN s.login IS NULL THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_MESSAGE_USER_LOGIN_FAILURE') . " '  ELSE '' END ||
                                        (CASE WHEN p.cityId IS NULL THEN 'Usuário não possui cidade cadastrada. ' ELSE '' END) ||
                                        (CASE WHEN p.email IS NULL THEN 'Usuário não possui e-mail cadastrado. ' ELSE '' END) AS statusMessage

                               FROM acdMoodleSubscription s
                         INNER JOIN basphysicalpersonstudent p --estudante
                                 ON (s.personid = p.personId)
                              WHERE s.groupid = ?
                                AND s.isteacher IS FALSE
                                AND s.idmodule = 'pedagogico'";
        }
        elseif ( $idmodule == 'resmedica' ) // -3- --antes do click no botão INSCREVER adiciona os dados na table acdMoodleSubs das pessoas que são "IS TEACHER FALSE" (os alunos)
        {
            $sql = "SELECT DISTINCT p.personid,
                                    p.name,
                                    CASE WHEN s.processed THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_REGISTERED') . "' ELSE '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_NOT_REGISTERED') . "' END,

                                    -- Mensagens de status
                                    CASE WHEN s.login IS NULL THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_MESSAGE_USER_LOGIN_FAILURE') . " '  ELSE '' END ||
                                        (CASE WHEN p.cityId IS NULL THEN 'Usuário não possui cidade cadastrada. ' ELSE '' END) ||
                                        (CASE WHEN p.email IS NULL THEN 'Usuário não possui e-mail cadastrado. ' ELSE '' END) AS statusMessage

                               FROM acdMoodleSubscription s
                         INNER JOIN basphysicalperson p --residente
                                 ON (s.personid = p.personId)
                              WHERE s.groupid = ?
                                AND s.isteacher IS FALSE
                                AND s.idmodule = 'resmedica'";
        }
        
                elseif ( $idmodule == 'residency' ) // -3- --antes do click no botão INSCREVER adiciona os dados na table acdMoodleSubs das pessoas que são "IS TEACHER FALSE" (os alunos)
        {
            $sql = "SELECT DISTINCT p.personid,
                                    p.name,
                                    CASE WHEN s.processed THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_REGISTERED') . "' ELSE '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_NOT_REGISTERED') . "' END,

                                    -- Mensagens de status
                                    CASE WHEN s.login IS NULL THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_MESSAGE_USER_LOGIN_FAILURE') . " '  ELSE '' END ||
                                        (CASE WHEN p.cityId IS NULL THEN 'Usuário não possui cidade cadastrada. ' ELSE '' END) ||
                                        (CASE WHEN p.email IS NULL THEN 'Usuário não possui e-mail cadastrado. ' ELSE '' END) AS statusMessage

                               FROM acdMoodleSubscription s
                         INNER JOIN basphysicalperson p --residente
                                 ON (s.personid = p.personId)
                              WHERE s.groupid = ?
                                AND s.isteacher IS FALSE
                                AND s.idmodule = 'residency'";
        }
        
        else
        {
            $sql = "SELECT DISTINCT p.personid,
                                    p.name,
                                    CASE WHEN s.processed THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_REGISTERED') . "' ELSE '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_NOT_REGISTERED') . "' END,

                                    -- Mensagens de status
                                    CASE WHEN s.login IS NULL THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_MESSAGE_USER_LOGIN_FAILURE') . " '  ELSE '' END ||
                                        (CASE WHEN p.cityId IS NULL THEN 'Usuário não possui cidade cadastrada. ' ELSE '' END) ||
                                        (CASE WHEN p.email IS NULL THEN 'Usuário não possui e-mail cadastrado. ' ELSE '' END) AS statusMessage

                               FROM acdMoodleSubscription s
                         INNER JOIN unit_acdEnroll e
                                 ON (e.groupid = s.groupid)
                         INNER JOIN unit_acdContract c --contrato
                                 ON (c.contractid = e.contractid)
                         INNER JOIN basphysicalpersonstudent p --estudante
                                 ON (s.personid = p.personId)
                              WHERE s.isteacher IS FALSE
                                AND s.groupid = ?
                                AND s.idmodule NOT IN ('pedagogico', 'resmedica', 'residency')";
        }

        $args = array( $groupid );
        $sql .= ' ORDER BY 2;';
        $result = $db->query(SAGU::prepare($sql, $args));

//After making a search without logging deletes the users table acdmoodlesubscription
        $sql = "DELETE FROM acdmoodlesubscription WHERE login IS NULL";
        $db->execute(SAGU::prepare($sql, null));

        return $result;
    }

    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     * */
    public function listTeacherMoodleSubscription($groupid, $idmodule)
    {
        $module = MIOLO::getCurrentModule();
        $db = $this->getDatabase();

        if ( $idmodule == 'pedagogico' )
        {
            $sql = "SELECT DISTINCT p.personid,
                                    p.name,
                                    CASE WHEN s.processed THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_REGISTERED') . "' ELSE '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_NOT_REGISTERED') . "' END
                               FROM acdMoodleSubscription s
                         INNER JOIN acpofertacomponentecurricular OCC
                                 ON s.groupId = OCC.ofertacomponentecurricularid
                         INNER JOIN basphysicalpersonprofessor p --professor
                                 ON (s.personid = p.personId)
                              WHERE s.isteacher IS TRUE
                                AND s.groupid = ?
                                AND s.idmodule = 'pedagogico'";
        }
        else if ( $idmodule == 'resmedica' ) // -4- --antes do click no botão INSCREVER adiciona os dados na table acdMoodleSubs das pessoas que são "IS TEACHER TRUE"
        {
            $sql = "SELECT DISTINCT p.personid,
                                    p.name,
                                    CASE WHEN s.processed THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_REGISTERED') . "' ELSE '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_NOT_REGISTERED') . "' END,

                                    -- Mensagens de status
                                    CASE WHEN s.login IS NULL THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_MESSAGE_USER_LOGIN_FAILURE') . " '  ELSE '' END ||
                                        (CASE WHEN p.cityId IS NULL THEN 'Usuário não possui cidade cadastrada. ' ELSE '' END) ||
                                        (CASE WHEN p.email IS NULL THEN 'Usuário não possui e-mail cadastrado. ' ELSE '' END) AS statusMessage

                               FROM acdMoodleSubscription s
                         INNER JOIN basphysicalperson p --residente
                                 ON (s.personid = p.personId)
                              WHERE s.groupid = ?
                                AND s.isteacher IS TRUE
                                AND s.idmodule = 'resmedica'";
        }
        
         else if ( $idmodule == 'residency' ) // -4- --antes do click no botão INSCREVER adiciona os dados na table acdMoodleSubs das pessoas que são "IS TEACHER TRUE"
        {
            $sql = "SELECT DISTINCT p.personid,
                                    p.name,
                                    CASE WHEN s.processed THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_REGISTERED') . "' ELSE '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_NOT_REGISTERED') . "' END,

                                    -- Mensagens de status
                                    CASE WHEN s.login IS NULL THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_MESSAGE_USER_LOGIN_FAILURE') . " '  ELSE '' END ||
                                        (CASE WHEN p.cityId IS NULL THEN 'Usuário não possui cidade cadastrada. ' ELSE '' END) ||
                                        (CASE WHEN p.email IS NULL THEN 'Usuário não possui e-mail cadastrado. ' ELSE '' END) AS statusMessage

                               FROM acdMoodleSubscription s
                         INNER JOIN basphysicalperson p --residente
                                 ON (s.personid = p.personId)
                              WHERE s.groupid = ?
                                AND s.isteacher IS TRUE
                                AND s.idmodule = 'residency'";
        }
        
        else // academic
        {
            $sql = "SELECT DISTINCT p.personid,
                                    p.name,
                                    CASE WHEN s.processed THEN '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_REGISTERED') . "' ELSE '" . SAGU::getParameter('academic', 'MOODLE_SUBSCRIPTION_STATUS_NOT_REGISTERED') . "' END
                               FROM acdMoodleSubscription s
                         INNER JOIN acdSchedule B
                                 ON (B.groupId = s.groupId)
                         INNER JOIN acdScheduleProfessor A
                                 ON (B.scheduleId = A.scheduleId)
                         INNER JOIN basphysicalpersonprofessor p --professor
                                 ON (A.professorId = p.personId)
                              WHERE s.isteacher IS TRUE
                                AND s.groupid = ?
                                AND s.idmodule NOT IN ('pedagogico', 'resmedica', 'residency')";
        }

        $args = array( $groupid );
        $sql .= ' ORDER BY 2;';
        $result = $db->query(SAGU::prepare($sql, $args));



        return $result;
    }

    /**
     * Seacrh a Moodle Subscription
     * @param $filters (Object)
     * @return array
     */
    public function searchMoodleSubscription($filters)
    {
        $db = $this->getDatabase();
        $sql = 'SELECT  personId,
                        groupId,
                        login,
                        isteacher,
                        processed
                        FROM acdMoodleSubscription';

        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->groupId) > 0 )
        {
            $where .= ' AND groupId = ? ';
            $args[] = $filters->groupId;
        }
        if ( strlen($filters->isteacher) > 0 )
        {
            $where .= ' AND isteacher = ? ';
            $args[] = $filters->isteacher;
        }

        if ( $where != '' )
        {
            $sql .= '    WHERE ' . substr($where, 5);

            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Delete a record
     * @param $personId (integer): Primary key for deletion
     * @param $groupId (integer): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteMoodleSubscription($personId, $groupId)
    {
        $sql = 'DELETE FROM acdMoodleSubscription
                      WHERE personId = ? AND groupId = ?';

        $args[] = $personId;
        $args[] = $groupId;

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     * */
    public function insertMoodleSubscription($data)
    {
        $module = MIOLO::getCurrentModule();
        $db = $this->getDatabase();

        if ( (strlen($data->personId) > 0) && (strlen($data->groupId) > 0) )
        {
            $sql = 'INSERT INTO acdMoodleSubscription(login, groupid, isteacher, processed, personid, idmodule)
                       VALUES (?,?,?,?,?,?)';

            $args = array( $data->login, $data->groupId, $data->isteacher, $data->processed, $data->personId, $data->idmodule );
            $result = $db->execute(SAGU::prepare($sql, $args, false));
        }
    }

    /**
     * Get moodle course fullname
     *
     * @param $groupId (integer)
     *
     * @return $fullName (string)
     *
     * */
    public function getMoodleCourseFullName($groupId)
    {
        $module = MIOLO::getCurrentModule();
        $db = $this->getDatabase();
        $courseFullName = null;

        $sql = "SELECT DISTINCT (u.name|| ' - REF' || g.groupid)
                           FROM unit_acdGroup g
                     INNER JOIN unit_acdcurriculum r
                             ON (r.curriculumId = g.curriculumId)
                     INNER JOIN acdCurricularComponent u
                             ON (u.curricularcomponentid = r.curricularcomponentid
                            AND u.curricularcomponentversion = r.curricularcomponentversion)
                          WHERE g.groupId = ?";

        $args = array( $groupId );
        $result = $db->query(SAGU::prepare($sql, $args));

        if ( is_array($result) )
        {
            list ( $courseFullName ) = $result[0];
        }

        return $courseFullName;
    }

    /**
     * Get moodle assignment
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return $data (object)
     *
     * */
    public function getMoodleAssignment($data, $returnList = false)
    {
        $courseFullName = $this->getMoodleCourseFullName($data->groupId);

        if ( strlen($courseFullName) > 0 )
        {
//Moodle database
            $dbMoodle = $this->getDbMoodle();

            $sql = "SELECT B.id,
                           B.name,
                           B.description
                      FROM mdl_course A
                INNER JOIN mdl_assignment B
                        ON (A.id = B.course)
                     WHERE fullname = ?";

            $args[] = utf8_encode($courseFullName);

            if ( strlen($data->moodleEvaluationId) > 0 )
            {
                $where .= ' AND B.id = ?';
                $args[] = utf8_encode($data->moodleEvaluationId);
            }
            if ( strlen($data->name) > 0 )
            {
                $where .= ' AND B.name = ?';
                $args[] = utf8_encode($data->name);
            }

            if ( strlen($where) > 0 )
            {
                $sql .= ' AND ' . substr($where, 4);
            }

            $resultMoodleAssignment = $dbMoodle->query(SAGU::prepare($sql, $args, false));


            if ( $returnList )
            {
                foreach ( $resultMoodleAssignment as $list )
                {
                    $resultList[$list[0]] = $list[1];
                }
                $resultMoodleAssignment = $resultList;
            }
//return array('1'=>'tarefa moodle');

            return $resultMoodleAssignment;
        }
    }

    /**
     * Get assignment note to student
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return $data (object)
     *
     * */
    public function getMoodleAssignmentNoteToStudent($data)
    {
        $courseFullName = $this->getMoodleCourseFullName($data->groupId);
        $return = null;

        if ( strlen($courseFullName) > 0 )
        {
//Moodle database
            $dbMoodle = $this->getDbMoodle();

            $sql = " SELECT a.rawgrade
                       FROM mdl_grade_grades A
                 INNER JOIN mdl_grade_items B
                         ON (B.itemmodule = 'assignment'
                        AND B.id = A.itemId)
                 INNER JOIN mdl_course C
                         ON (B.courseid = C.id)
                 INNER JOIN mdl_user D
                         ON (D.id = A.userId)
                      WHERE C.fullname = ?
                        AND B.iteminstance = ?
                        AND D.userName = ?";

            $args = array( utf8_encode($courseFullName), utf8_encode($data->moodleEvaluationId), utf8_encode($data->userName) );

            $note = $dbMoodle->query(SAGU::prepare($sql, $args, false));

            if ( is_array($note) )
            {
                $return = (is_numeric($note[0][0]) ? round($note[0][0], 2) : $note);
            }

            return $return;
        }
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     * */
    public function updateMoodleSubscription($data)
    {
        $module = MIOLO::getCurrentModule();
        $db = $this->getDatabase();
        $dbMoodle = $this->getDbMoodle();

        $sql = "UPDATE acdMoodleSubscription
                   SET processed = ?
                 WHERE groupId = ?
                   AND login IS NOT NULL";

        $args = array( $data->processed, $data->groupId );
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Insert data a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * */
    public function insertDetailsOfTheDiscipline($groupId, $idmodule = 'academic')
    {
//Miolo instance
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

//Sagu database
        $db = $this->getDatabase();

        if ( $idmodule == 'pedagogico' )
        {
            $sql = "SELECT (CC.nome|| ' - REF' || CC.codigo),
                            CC.objetivos AS objectives,
                            CC.conteudo AS content,
                            CC.ementa AS methodology,
                            '' AS evaluation,
                            CC.descricao AS observation,
                            '' AS complement,
                            '' AS basicbibliographydescription
                       FROM acpofertacomponentecurricular OCC
                 INNER JOIN acpcomponentecurricularmatriz CCM
                         ON OCC.componentecurricularmatrizid = CCM.componentecurricularid
                 INNER JOIN acpcomponentecurricular CC
                         ON CC.componentecurricularid = CCM.componentecurricularid
                      WHERE OCC.ofertacomponentecurricularid = ?";
        }
        else
        {
            $sql = "SELECT (u.name|| ' - REF' || g.groupid),
                           g.objectives,
                           g.content,
                           g.methodology,
                           g.evaluation,
                           g.observation,
                           g.complement,
                           g.basicbibliographydescription
                      FROM unit_acdGroup g
                INNER JOIN unit_acdcurriculum r
                        ON (r.curriculumId = g.curriculumId)
                INNER JOIN acdCurricularComponent u
                        ON (u.curricularcomponentid = r.curricularcomponentid
                       AND u.curricularcomponentversion = r.curricularcomponentversion)
                     WHERE g.groupId = ?";
        }

        $args = array( $groupId );
        $result = $db->query(SAGU::prepare($sql, $args));

        if ( is_array($result) )
        {
            list ( $courseFullName, $objectives, $content, $methodology, $evaluation, $observation, $complement, $basicbibliographydescription ) = $result[0];

//Moodle database
            $dbMoodle = $this->getDbMoodle();

//Get data of the moodle course with full name
            $sql = 'SELECT A.id,
                           C.id
                      FROM mdl_course A
                INNER JOIN mdl_course_sections C
                        ON (A.id = C.course
                       AND C.section = 0 )
                     WHERE fullname = ?';

            unset($args);
            $args[] = utf8_encode($courseFullName);
            $resultMoodleCourseId = $dbMoodle->query(SAGU::prepare($sql, $args));

            if ( is_array($resultMoodleCourseId) )
            {
                list ( $moodleCourseId, $sectionId ) = $resultMoodleCourseId[0];

//Insert moodle section
//$summary =
                $tagTitleBegin = '<h3> ';
                $tagTitleEnd = ' </h3>';
                $paragraphBegin = '<p>';
                $paragraphEnd = '</p>';

//If the course have objectives
                if ( strlen($objectives) > 0 )
                {
                    $summary = $tagTitleBegin . _M('Objetivos', 'academic') . $tagTitleEnd;
                    $summary .= $paragraphBegin . $objectives . $paragraphEnd;
                }

//If the course have content
                if ( strlen($content) > 0 )
                {
                    $summary .= $tagTitleBegin . _M('Conteúdo', 'academic') . $tagTitleEnd;
                    $summary .= $paragraphBegin . $content . $paragraphEnd;
                }

//If the course have methodology
                if ( strlen($methodology) > 0 )
                {
                    $summary .= $tagTitleBegin . _M('Metodologia', 'academic') . $tagTitleEnd;
                    $summary .= $paragraphBegin . $methodology . $paragraphEnd;
                }

//If the course have evaluation
                if ( strlen($evaluation) > 0 )
                {
                    $summary .= $tagTitleBegin . _M('Avaliação', 'academic') . $tagTitleEnd;
                    $summary .= $paragraphBegin . $evaluation . $paragraphEnd;
                }

//If the course have observation
                if ( strlen($observation) > 0 )
                {
                    $summary .= $tagTitleBegin . _M('Observação', 'academic') . $tagTitleEnd;
                    $summary .= $paragraphBegin . $observation . $paragraphEnd;
                }

//If the course have complement
                if ( strlen($complement) > 0 )
                {
                    $summary .= $tagTitleBegin . _M('Complemento', 'academic') . $tagTitleEnd;
                    $summary .= $paragraphBegin . $complement . $paragraphEnd;
                }

//If the course have basicbibliographydescription
                if ( strlen($basicbibliographydescription) > 0 )
                {
                    $summary .= $tagTitleBegin . _M('Descrição bibliográfica', 'academic') . $tagTitleEnd;
                    $summary .= $basicbibliographydescription . $paragraphEnd;
                }

                if ( strlen($summary) > 0 )
                {
                    $summary = utf8_encode($summary);
                }

//Set summary in course section
                $sql = 'UPDATE mdl_course_sections
                           SET course = ?,
                               summary = ?
                         WHERE id = ?';

                $args = array( $moodleCourseId, $summary, $sectionId );

                $instructionSql = SAGU::prepare($sql, $args, false);

                $resultInsertSection = $dbMoodle->execute($instructionSql[0]);
            }
        }
    }

    /**
     * Make integration with moodle
     *
     * @param $groupId (string): id group
     *
     * @return (boolean): True if succeed, otherwise False
     *
     * */
    public function makeIntegrationWithMoodle($groupId, $idmodule = 'academic')
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $db = $this->getDatabase();
        $usingLDAP = strtolower($MIOLO->getConf('login.class')) == 'mauthldap';

        
        SDatabase::execute("UPDATE acdMoodleSubscription SET processed = false WHERE groupId = ? AND idmodule = ?", array( $groupId, $idmodule ));

// Isto e necessario pois o script do moodle nao insere usuarios com sucesso quando auth != db
        if ( $usingLDAP )
        {
            $dbMoodle = $this->getDbMoodle();
            $dbMoodle->execute("UPDATE mdl_user SET auth='db' WHERE auth='ldap'");
        }

        $result = false;
//Performs integration script users        
        if ( (int) SAGU::getParameter('BASIC', 'MOODLE_VERSION') > (int) '1.9.9' )
        {
//Aplica o script de sincronização de usuários da versão 2.X
            $commandInsertUser = "php " . SAGU::getParameter('academic', 'MOODLE_DIRECTORY') . "/auth/db/cli/sync_users.php";
        }
        else
        {
//Aplica o script de sincronização de usuários da versão 1.9.X
            $commandInsertUser = "php " . SAGU::getParameter('academic', 'MOODLE_DIRECTORY') . "/auth/db/auth_db_sync_users.php";
        }

        exec($commandInsertUser, $var, $resultUser);

// Caso esteja utilizando LDAP, força verificacao de login do moodle para este tipo de autenticacao
        if ( $usingLDAP )
        {
            $dbMoodle = $this->getDbMoodle();
            $dbMoodle->execute("UPDATE mdl_user SET auth='ldap' WHERE auth='db'");
        }

        if ( $resultUser == 0 )
        {
//Performs integration script subscripton

            if ( (int) SAGU::getParameter('BASIC', 'MOODLE_VERSION') > (int) '1.9.9' )
            {
//Aplica o script de sincronização de usuários da versão 2.X
                $commandInsertSubscription = "php " . SAGU::getParameter('academic', 'MOODLE_DIRECTORY') . "/enrol/database/cli/sync.php";
            }
            else
            {
//Aplica o script de sincronização de usuários da versão 1.9.X
                $commandInsertSubscription = "php " . SAGU::getParameter('academic', 'MOODLE_DIRECTORY') . "/enrol/database/enrol_database_sync.php";
            }



            exec($commandInsertSubscription, $var, $resultSubscription);


            if ( $resultSubscription == 0 )
            {
//Insert Details of the discipline
                $this->insertDetailsOfTheDiscipline($groupId, $idmodule);
            }
        }

        $result = $this->updateProcessedStatus();


        return $result;
    }

    /**
     * Define como processed = TRUE para todos alunos que estao presentes na tabela de usuarios do moodle
     * 
     * @return boolean Status
     */
    public function updateProcessedStatus()
    {
        $MIOLO = MIOLO::getInstance();
        $ok = false;
        $db = $this->getDatabase();

        $dbname = $MIOLO->getConf('db.moodle.name');
        $host = $MIOLO->getConf('db.moodle.host');
        $port = $MIOLO->getConf('db.moodle.port');
        $user = $MIOLO->getConf('db.moodle.user');
        $password = $MIOLO->getConf('db.moodle.password');

        $connMoodle = 'dbname=' . $dbname;

        if ( $host )
        {
            if ( strpos($host, ':') )
            {
                $host = explode(':', $host);
                $host = $host[0];
            }

            $connMoodle .= ' host=' . $host;
        }

        if ( $port )
        {
            $connMoodle .= ' port=' . $port;
        }

        if ( $user )
        {
            $connMoodle .= ' user=' . $user;
        }

        if ( $password )
        {
            $connMoodle .= ' password=' . $password;
        }

        $db->execute("ALTER TABLE acdMoodleSubscription DISABLE TRIGGER ALL");

        $sql = "UPDATE acdMoodleSubscription
                   SET processed = EXISTS(
                        SELECT 1
                          FROM dblink('{$connMoodle}', 'SELECT username FROM mdl_user') AS t1(username varchar)
                         WHERE t1.username = acdMoodleSubscription.login)";
        $ok = $db->execute($sql);

        $db->execute("ALTER TABLE acdMoodleSubscription ENABLE TRIGGER ALL");

        return $ok;
    }

}

?>