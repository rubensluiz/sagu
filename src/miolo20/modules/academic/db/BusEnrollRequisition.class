<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search and list data from the
 * tables used by the enroll requisition report.
 *
 * @author Andre Chagas Dias [andre@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * This class was created 19/11/2008
 *
 **/

class BusinessAcademicBusEnrollRequisition extends sBusiness
{
    public function getPersonData($contractId)
    {
        $sql = 'SELECT DISTINCT     C.personId,
                                    C.name,
                                    B.courseId,
                                    B.name,
                                    (SELECT classId 
                                       FROM unit_acdclasspupil X
                                      WHERE X.contractId = A.contractId
                                          AND endDate IS NULL
                                      LIMIT 1) as classId,
                                    C.sex,
                                    (SELECT description 
                                       FROM basEthnicOrigin Y 
                                      WHERE Y.ethnicOriginId = C.ethnicOriginId
                                      LIMIT 1) as ethnicOrigin,
                                    C.location,
                                    C.number,
                                    C.neighborhood,
                                    D.name,
                                    D.stateId,
                                    C.zipCode,
                                    COALESCE(C.cellPhone, C.residentialPhone, C.workPhone),
                                    TO_CHAR(C.dateBirth,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                    I.nationality,
                                    (SELECT basCity.name 
                                       FROM basCity 
                                      WHERE C.cityIdBirth = basCity.cityId 
                                      LIMIT 1) as cityNameBirth,
                                    getPersonName(getFatherId(C.personId)) AS fatherName,                                    
                                    (SELECT COALESCE(cellPhone, residentialPhone, workPhone)
                                       FROM basPhysicalPerson
                                      WHERE basPhysicalPerson.personId = getFatherId(C.personId)
                                      LIMIT 1) as fatherCell,
                                    (SELECT basProfessionalActivity.description 
                                       FROM basProfessionalActivityPeople
                                 INNER JOIN basProfessionalActivity
                                         ON (basProfessionalActivityPeople.personId = getFatherId(C.personId)
                                             AND basProfessionalActivityPeople.professionalActivityId = basProfessionalActivity.professionalActivityId)) AS fatherProfessionalActivity,
                                    getPersonName(getMotherId(C.personId)) AS motherName,
                                    (SELECT COALESCE(cellPhone, residentialPhone, workPhone) 
                                       FROM basPhysicalPerson
                                      WHERE basPhysicalPerson.personId = getMotherId(C.personId)
                                      LIMIT 1) as motherCell,
                                    (SELECT basProfessionalActivity.description 
                                       FROM basProfessionalActivityPeople
                                 INNER JOIN basProfessionalActivity
                                         ON (basProfessionalActivityPeople.personId = getMotherId(C.personId)
                                             AND basProfessionalActivityPeople.professionalActivityId = basProfessionalActivity.professionalActivityId)) AS motherProfessionalActivity,
                                    C.responsableLegalId,
                                    F.content as rg,
                                    G.content as cpf,
                                    (        SELECT basProfessionalActivity.description 
                                               FROM basProfessionalActivityPeople
                                         INNER JOIN basProfessionalActivity
                                                   ON (     basProfessionalActivityPeople.personId = C.personId
                                                         AND basProfessionalActivityPeople.professionalActivityId = basProfessionalActivity.professionalActivityId )
                                    ) as professionalActivity,                                    
                                    C.email
                               FROM unit_acdContract A
                         INNER JOIN unit_acdcourseoccurrence M
                                 ON ( A.courseId = M.courseId AND A.courseVersion = M.courseVersion AND      A.unitId = M.unitId AND A.turnId = M.turnId )
                         INNER JOIN acdCourse B
                                 ON ( M.courseId = B.courseId )
                     LEFT JOIN ONLY basPhysicalPerson C
                                 ON ( A.personId = C.personId )
                          LEFT JOIN basCity D
                                 ON ( C.cityId = D.cityId )
                          LEFT JOIN basCountry I
                                 ON ( C.countryidbirth = I.countryid )
                          LEFT JOIN basTurn L
                                 ON ( A.turnId = L.turnId )
                          LEFT JOIN basdocument as F 
                                 ON (A.personid = F.personid and F.documenttypeid=(SELECT value::integer FROM basconfig WHERE parameter=\'DEFAULT_DOCUMENT_TYPE_ID_RG\'))
                          LEFT JOIN basdocument as G 
                                 ON (A.personid = G.personid and G.documenttypeid=(SELECT value::integer FROM basconfig WHERE parameter=\'DEFAULT_DOCUMENT_TYPE_ID_CPF\'))
                              WHERE  A.contractId = ?';

        $args = array( $contractId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    public function getResponsableLegalData( $responsableLegalId )
    {
        $sql = ' SELECT A.name,
                        (SELECT basDocument.content 
                             FROM basDocument 
                            WHERE basDocument.personId = A.personId
                              AND basDocument.documenttypeid = ? ) as responsableRg,
                          (SELECT basDocument.content 
                             FROM basDocument 
                            WHERE basDocument.personId = A.personId
                              AND basDocument.documenttypeid = ? ) as responsableCpf,
                          C.description,
                          COALESCE(A.cellPhone, A.residentialPhone, A.workPhone),
                          A.email
                   FROM basPhysicalPerson A
             LEFT JOIN basProfessionalActivityPeople B
                       ON ( B.personId = A.personId )
             LEFT JOIN basProfessionalActivity C
                       ON (  B.professionalActivityId = C.professionalActivityId )
                  WHERE A.personId = ?'; 
                                
        $args = array( SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_RG'),
                             SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF'),
                             $responsableLegalId );

          $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
          
          return $result;
        
    }

    public function getCreditValueForCourse($companyId, $contractId, $learningPeriodId)
    {
        $sql = 'SELECT DISTINCT B.periodId,                                
                                (SELECT M.currencysymbol
                                         FROM basCompanyConf I
                               LEFT JOIN ONLY basLegalPerson J
                                           ON ( I.personId = J.personId AND I.companyId = ?)
                                    LEFT JOIN basCity L 
                                           ON ( J.cityId = L.cityId )
                                    LEFT JOIN basCountry M
                                           ON ( L.countryId = M.countryId )) as currencySymbol,
                                CASE WHEN A.parcelsNumber > 0 THEN A.parcelsNumber ELSE
                                B.parcelsNumber END as parcels,
                                round( C.value, \'' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '\') as creditValue,
                               (SELECT M.currency
                                         FROM basCompanyConf I
                               LEFT JOIN ONLY basLegalPerson J
                                           ON ( I.personId = J.personId AND I.companyId = ?)
                                    LEFT JOIN basCity L 
                                           ON ( J.cityId = L.cityId )
                                    LEFT JOIN basCountry M
                                           ON ( L.countryId = M.countryId )) as currency,
                                 (SELECT M.pluralCurrency
                                         FROM basCompanyConf I
                               LEFT JOIN ONLY basLegalPerson J
                                           ON ( I.personId = J.personId AND I.companyId = ?)
                                    LEFT JOIN basCity L 
                                           ON ( J.cityId = L.cityId )
                                    LEFT JOIN basCountry M
                                           ON ( L.countryId = M.countryId )) as pluralCurrency
                           FROM unit_acdContract A
                      LEFT JOIN unit_acdlearningperiod B
                                ON (    A.courseId = B.courseId 
                                    AND A.courseVersion = B.courseVersion )
                      LEFT JOIN finPrice C
                                  ON (C.courseId = B.courseId AND C.courseVersion = B.courseVersion AND C.turnid = B.turnid AND C.unitid = B.unitid)
                          WHERE A.contractId = ?
                              AND B.learningPeriodId = ?' ;

        $args = array(   $companyId,
                         $companyId,
                         $companyId,                         
                         $contractId,
                         $learningPeriodId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql,$args));
        
        // get Extensive Number
        if( strlen($result[0][3]) > 0 )
        {
            $extensiveNumber = SAGU::getExtensiveNumber($result[0][3], $result[0][4], $result[0][5]);
            array_pop($result[0]);
            array_pop($result[0]);
            $result[0] = array_merge($result[0],array($extensiveNumber));
        }

        return $result;
    }

    public function getCompanyInformation($companyId)
    {

       $sql = 'SELECT  A.name,
                       A.acronym,
                       C.name
                  FROM basCompanyConf A
        LEFT JOIN ONLY basLegalPerson B
                 USING ( personId )
        LEFT JOIN ONLY basCity C
                    ON ( B.cityId = C.cityId)
                 WHERE A.companyId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $companyId));
        
        list( $companyData->companyName,
              $companyData->companyAcronym,
              $companyData->cityName                ) = $result[0];

        return $companyData;

    }

    public function contractExists($contractId, $courseId)
    {
        $sql = 'SELECT courseId
                  FROM unit_acdContract
                 WHERE contractId = ?
                   AND courseId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($contractId,$courseId)));

        return $result;
    }

}

?>
