<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdProfessorCurricularComponent table
 *
 * @author Flaudizio B. S. Filho [flaudizio@yahoo.com.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coo.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 18/12/2006
 *
 **/

/**
 * Class to manipulate the acdProfessorCurricularComponent table
 **/
class BusinessAcademicBusProfessorCurricularComponent extends sBusiness
{    
    /**
     * Return a specific record from the database
     *
     * @param $professorCurricularComponentId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getProfessorCurricularComponent($professorCurricularComponentId)
    {
        $sql = 'SELECT A.professorCurricularComponentId,
                       A.professorId,
                       B.name,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.name,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdProfessorCurricularComponent A
       INNER JOIN ONLY basPhysicalPersonProfessor B
                    ON (B.personId = A.professorId)
       INNER JOIN ONLY acdCurricularComponent C
                    ON (    A.curricularComponentId = C.curricularComponentId
                        AND A.curricularComponentVersion = C.curricularComponentVersion ) 
                 WHERE professorCurricularComponentId = ? ';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $professorCurricularComponentId));
        

        $professorCurricularComponent = new acdProfessorCurricularComponent();
        list ( $professorCurricularComponent->professorCurricularComponentId,
               $professorCurricularComponent->professorId,
               $professorCurricularComponent->professorName,
               $professorCurricularComponent->curricularComponentId,
               $professorCurricularComponent->curricularComponentVersion,
               $professorCurricularComponent->curricularComponentName,
               $professorCurricularComponent->userName,
               $professorCurricularComponent->dateTime,
               $professorCurricularComponent->ipAddress ) = $result[0];

        return $professorCurricularComponent; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchProfessorCurricularComponent($filters)
    {
        $sql = 'SELECT A.professorCurricularComponentId,
                       A.professorId,
                       B.name,
                       A.curricularComponentId || \' / \' || A.curricularComponentVersion,
                       C.name
                  FROM acdProfessorCurricularComponent A
       INNER JOIN ONLY basPhysicalPersonProfessor B
                    ON (B.personId = A.professorId)
       INNER JOIN ONLY acdCurricularComponent C
                    ON (    A.curricularComponentId = C.curricularComponentId
                        AND A.curricularComponentVersion = C.curricularComponentVersion )';
        
        if ( strlen($filters->professorCurricularComponentId) > 0 )
        {
            $where .= ' AND A.professorCurricularComponentId = ? ';
            $args[] = $filters->professorCurricularComponentId;
        }
        if ( strlen($filters->professorId) > 0 )
        {
            $where .= ' AND A.professorId = ? ';
            $args[] = $filters->professorId;
        }
        if ( strlen($filters->professorName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->professorName.'%';
        }
        if ( strlen($filters->curricularComponentId) > 0 )
        {
            $where .= ' AND A.curricularComponentId = ? ';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen($filters->curricularComponentVersion) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $filters->curricularComponentVersion;
        }
        if ( strlen($filters->curricularComponentName) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curricularComponentName .'%';
        }        

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                  ORDER BY B.name,
                           C.name ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertProfessorCurricularComponent($data)
    {
        $sql = 'INSERT INTO acdProfessorCurricularComponent
                            (professorId,
                             curricularComponentid,
                             curricularComponentVersion)
                     VALUES (?,?,?) ';

        $args = array( $data->professorId,
                       $data->curricularComponentId,
                       $data->curricularComponentVersion );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateProfessorCurricularComponent($data)
    {
        $sql = 'UPDATE acdProfessorCurricularComponent
                   SET professorId                   = ?,
                       curricularComponentId         = ?,
                       curricularComponentVersion    = ?
                 WHERE professorCurricularComponentId = ? ';

        $args = array( $data->professorId,
                       $data->curricularComponentId,
                       $data->curricularComponentVersion,
                       $data->professorCurricularComponentId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $professorCurricularComponentId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function deleteProfessorCurricularComponent($professorCurricularComponentId)
    {
        $sql = 'DELETE FROM acdProfessorCurricularComponent
                      WHERE professorCurricularComponentId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $professorCurricularComponentId));

        return $result;
    }

    /**
     * A list containing all periods the professor has curricular components
     *
     * @param $professorId (integer): Primary key for query
     *
     * @return (array): An array containing all the periods the professor has ministered curricular components
     *
     **/
    public function listProfessorPeriods($professorId)
    {
        $sql = 'SELECT A.periodId,
                       A.description
                  FROM acdPeriod A
                 WHERE A.periodId IN (SELECT DD.periodId
                                        FROM acdSchedule AA
                                  INNER JOIN acdScheduleProfessor BB
                                          ON (AA.scheduleId = BB.scheduleId)
                                  INNER JOIN unit_acdGroup CC
                                          ON (AA.groupId = CC.groupId)
                                  INNER JOIN unit_acdlearningperiod DD
                                          ON (CC.learningPeriodId = DD.learningPeriodId)
                                       WHERE BB.professorId = ?)
              ORDER BY A.description';

        $db  = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $professorId));

        return $result;
    }
    
    /**
     * A list containing all periods the professor has curricular components
     *
     * @param $professorId (integer): Primary key for query
     *
     * @return (array): An array containing all the periods the professor has ministered curricular components
     *
     **/
    public function listProfessorCurricularComponents($professorId, $periodId, $groupId = null)
    {
        $sql = 'SELECT DISTINCT A.groupId,
                                G.curricularComponentId || \'/\' || G.curricularComponentVersion,
                                G.name,
                                H.courseId || \'/\' || H.courseVersion,
                                I.name,
                                H.turnId,
                                J.description,
                                H.unitId,
                                K.description,
                                A.isCancellation
                           FROM unit_acdGroup A
                     INNER JOIN acdSchedule B
                             ON (B.groupId = A.groupId)
                     INNER JOIN acdScheduleProfessor C
                             ON (C.scheduleId = B.scheduleId)
                     INNER JOIN unit_acdlearningperiod E
                             ON (E.learningPeriodId = A.learningPeriodId)
                     INNER JOIN unit_acdcurriculum F
                             ON (F.curriculumId = A.curriculumId)
                     INNER JOIN acdCurricularComponent G
                             ON (G.curricularComponentId = F.curricularComponentId
                                 AND G.curricularComponentVersion = F.curricularComponentVersion)
                     INNER JOIN unit_acdcourseoccurrence H
                             ON (H.courseId = F.courseId
                                 AND H.courseVersion = F.courseVersion
                                 AND H.turnId = F.turnId
                                 AND H.unitId = F.unitId)
                     INNER JOIN acdCourse I
                             ON (I.courseId = H.courseId)
                     INNER JOIN basTurn J
                             ON (J.turnId = F.turnId)
                     INNER JOIN basUnit K
                             ON (K.unitId = F.unitId)';

        if ( strlen($professorId) > 0 )
        {
            $where .= ' AND C.professorId = ? ';
            $args[] = $professorId;
        }
        if ( strlen($periodId) > 0 )
        {
            $where .= ' AND E.periodId = ? ';
            $args[] = $periodId;
        }
        if ( strlen($groupId) > 0 )
        {
            $where .= ' AND A.groupId = ? ';
            $args[] = $groupId;
        }
                
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                  ORDER BY 1,2,3,4,5,6,7,8,9,10 ';
            
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
}
?>
