<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for basCenter table
 *
 * @author Hélio H. R. Guimarães [helio@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 08/11/2006
 *
 **/

/**
 * Class to manipulate the basCenter table
 **/
class BusinessAcademicBusPupilSituation extends sBusiness
{
    /**
     * Invoice from person
     *
     * @param $centerId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function invoiceFromPerson($personId)
    {
                        
        $sql = 'SELECT DISTINCT A.InvoiceId,
                                TO_CHAR(A.emissionDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                                TO_CHAR(A.maturityDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                                ROUND(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ' ),
                                ROUND(balance(A.invoiceId), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ' ),
                                ROUND(balanceWithPoliciesDated(A.invoiceId, now()::date), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ' ),
                                C.periodId,
                                A.maturityDate,
                                A.personId
                      FROM ONLY finReceivableInvoice A
                      INNER JOIN ONLY unit_acdlearningperiod C
                             ON (C.courseId = A.courseId AND
                                 C.courseVersion = A.courseVersion AND
                                 C.unitId = A.unitId)
                           WHERE A.personId = ? AND
                                 A.maturityDate BETWEEN C.beginDate AND C.endDate
                        ORDER BY A.maturityDate DESC';


        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $personId));

        
        return $result;
    }

    /**
     * Payment
     *
     * @param $centerId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function paymentsFromPerson($personId)
    {
        $sql = 'SELECT DISTINCT A.invoiceId,
                                TO_CHAR(B.maturityDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                B.courseId || \' - \' || (SELECT shortName from acdCourse where courseId = B.courseId),
                                C.operationId || \' - \' ||C.description,
                                TO_CHAR(A.entryDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                ROUND(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                                ROUND((SELECT bankTaxValue FROM finPolicy WHERE policyId = B.policyId ), ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                                A.entryDate,
                                A.operationId
                      FROM ONLY finEntry A
                INNER JOIN ONLY  finReceivableInvoice B
                             ON (A.invoiceId = B.invoiceId)
                INNER JOIN ONLY finOperation C
                             ON (C.operationId = A.operationId)
                          WHERE B.personId = ? AND
                                C.operationId IN (' . SAGU::getParameter('BASIC', 'PUPIL_PAYMENT_OPERATIONS') . ')
                       ORDER BY A.entryDate DESC';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $personId));

        return $result;
    }

    /**
     * Incentives
     *
     * @param $centerId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function incentivesFromPerson($personId)
    {
        $sql = 'SELECT DISTINCT A.incentiveId,
                                A.contractId,
                                TO_CHAR(A.startDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                                C.description,
                                ROUND(A.value, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '),
                                A.endDate
                           FROM finIncentive A
                     INNER JOIN unit_acdContract B
                             ON (A.contractId = B.contractId)
                     INNER JOIN finIncentiveType C
                             ON (C.incentiveTypeId = A.incentiveTypeId)
                          WHERE B.personId = ?
                          ORDER BY A.endDate DESC';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $personId));

        return $result;
    }


    /**
     * Trainning
     *
     * @param $centerId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function trainingFromPerson($personId)
    {
        $sql = 'SELECT B.professionalActivityPeopleId,
                       B.beginDate,
                       B.endDate,
                       C.name,
                       D.professionalActivityAgentId || \' - \' || D.description
                  FROM basEmployee A
            INNER JOIN basProfessionalActivityPeople B
                    ON (A.personId = B.personId)
       INNER JOIN ONLY basLegalPerson C
                    ON (C.personId = B.legalPersonId)
            INNER JOIN basProfessionalActivityAgent D
                    ON (D.professionalActivityAgentId = B.professionalActivityAgentId)
                 WHERE A.personId = ? AND
                       A.employeeTypeId = '.SAGU::getParameter('BASIC', 'EMPLOYEE_TYPE_ID_TRAINNING').'';

        $db     = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $personId));

        return $result;
    }


    /**
     * Penalty
     *
     * @param $personId (string): person id
     *
     * @return (boolean): An array with data
     *
     **/
    public function penaltiesFromPerson($personId)
    {
        $sql = 'SELECT codigodamulta, 
                       codigodoemprestimo, 
                       TO_CHAR(datahora,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       foipaga,
                       ROUND(valor, ' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . ')
                FROM gtc_multa 
                WHERE codigodapessoa = ? and 
                      foipaga is false and 
                      foiabonada is false and 
                      valor < 1000000';

        $db     = $this->getDbGnuteca();
        $result = $db->query(SAGU::prepare($sql, $personId));
        
        return $result;
    }


    /**
     * Loan
     *
     * @param $personId (string): person id
     *
     * @return (boolean): An array with data
     *
     **/
    public function loansFromPerson($personId)
    {
        $sql = 'SELECT A.numeroDoTombo, 
                       get_etiqueta(B.numeroDeControle, \'245\', \'a\'), 
                       get_etiqueta(B.numeroDeControle, \'100\', \'a\'), 
                       TO_CHAR(a.datahoraprevisaodevolucao, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
               FROM gtc_emprestimo A
               INNER JOIN gtc_exemplar B
                       ON (B.numeroDoTombo = A.numeroDoTombo)
               WHERE A.codigoDaPessoa = ? AND
                     A.dataHoraDaDevolucao IS NULL
               ORDER BY date(a.datahoraprevisaodevolucao)';

        $db     = $this->getDbGnuteca();
        $result = $db->query(SAGU::prepare($sql, $personId));

        return $result;
    }



}
?>
