<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file manipulate the lookups for the academic module
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/05/2005
 */

$MIOLO = MIOLO::getInstance();
$MIOLO->getClass('basic', 'lookupFields');

/**
 * Class to manipulate the Lookups
 */
class BusinessAcademicLookup
{
    /**
     * Auto complete for external course
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteExternalCourse($context)
    {
        $sql = 'SELECT name
                  FROM acdExternalCourse
                 WHERE externalCourseId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for external course
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupExternalCourse($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $externalCourseId = $lookup->getFilterValue( 'externalCourseId' );
        $externalCourseName = $lookup->getFilterValue( 'externalCourseName' );

        $lookup->addFilterField( new MTextField( 'externalCourseId', $externalCourseId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'externalCourseName', $name, _M('Curso externo', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'externalCourseId', _M('Código', $module ), 'right', true, null, true ),
            new DataGridColumn( 'externalCourseName', _M('Curso externo', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT externalCourseId,
                       name as externalCourseName
                  FROM acdExternalCourse ';

        if ( strlen( $externalCourseId ) > 0 )
        {
            $where .= ' AND externalCourseId = ? ';
            $args[] = $externalCourseId;
        }

        if ( strlen( $externalCourseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(name) ILIKE UNACCENT(?) OR UNACCENT(shortName) ILIKE UNACCENT(?) )';
            $args[] = $externalCourseName . '%';
            $args[] = $externalCourseName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY name';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar curso externo', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for course version type
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteCourseVersionType($context)
    {
        $sql = 'SELECT A.description
                  FROM acdCourseVersionType A
                 WHERE A.courseVersionTypeId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for coures version type
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupCourseVersionType($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $courseVersionTypeId = $lookup->getFilterValue( 'courseVersionTypeId' );
        $description = $lookup->getFilterValue( 'description' );

        $lookup->addFilterField( new MTextField( 'courseVersionTypeId', $courseVersionTypeId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'description', $locationName, _M('Modalidade de curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'courseVersionTypeId', _M('Código', $module ), 'right', true, null, true ),
            new DataGridColumn( 'description', _M('Modalidade de curso', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.courseVersionTypeId,
                       A.description
                  FROM acdCourseVersionType A';

        if ( strlen( $courseVersionTypeId ) > 0 )
        {
            $where .= ' AND A.courseVersionTypeId = ?';
            $args[] = $courseVersionTypeId;
        }

        if ( strlen( $description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar modalidade de curso', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for course
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteCourse($context)
    {
        $sql = 'SELECT A.name
                  FROM acdCourse A
                 WHERE A.courseId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for course
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupCourse($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $formationLevelId = $lookup->getFilterValue( 'formationLevelId' );

        $lookup->addFilterField( new MTextField( 'courseId', $courseVersionTypeId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $business = new BusinessAcademicBusFormationLevel();
        $lookup->addFilterField( new MSelection( 'formationLevelId', $formationLevelId, _M('Código do grau de formação', $module ), $business->listFormationLevel() ) );

        $columns = array(
            new DataGridColumn( 'courseId', _M('Código', $module ), 'right', true, null, true ),
            new DataGridColumn( 'name', _M('Curso', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.courseId,
                       A.name
                  FROM acdCourse A';

        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $courseId;
        }

        if ( strlen( $formationLevelId ) > 0 )
        {
            $where .= ' AND A.formationLevelId = ?';
            $args[] = $formationLevelId;
        }

        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(A.name) ILIKE UNACCENT(?) OR UNACCENT(A.shortName) ILIKE UNACCENT(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar curso', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for course version
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteCourseVersion($context)
    {
        $sql = 'SELECT C.courseVersion AS courseVersion,
                       B.name
                  FROM acdCourseVersion A
             LEFT JOIN acdCourse B
                    ON ( B.courseId = A.courseId AND
                         (SELECT COUNT(*)
                            FROM acdCourseVersion X
                           WHERE X.courseId = A.courseId) = 1
                       )
            INNER JOIN acdCourseVersion C
                    ON (C.courseId = B.courseId)
                 WHERE A.courseId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupCourseVersion($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $formationLevelId = $lookup->getFilterValue( 'formationLevelId' );

        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $business = new BusinessAcademicBusFormationLevel();
        $lookup->addFilterField( new MSelection( 'formationLevelId', $formationLevelId, _M('Grau de formação', $module ), $business->listFormationLevel() ) );

        global $page;
        $page->onLoad( 'document.' . $page->name . '.courseName.focus()' );

        $columns = array(
            new DataGridColumn( 'courseId', _M('Código', $module ), 'left', true, null, true ),
            new DataGridColumn( 'courseVersion', _M('Versão', $module ), 'right', true, null, true ),
            new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
            new DataGridColumn( 'formationLevelId', _M('Código do grau de formação', $module ), 'right', true, null, false )
        );

        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       B.formationLevelId
                  FROM acdCourseVersion A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)';

        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $courseId;
        }

        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }

        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(B.name) ILIKE UNACCENT(?) OR UNACCENT(B.shortName) ILIKE UNACCENT(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }

        if ( strlen( $formationLevelId ) > 0 )
        {
            $where .= ' AND B.formationLevelId = ?';
            $args[] = $formationLevelId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY B.name,
                           A.courseVersion DESC';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar versão de curso', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for period
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePeriodByLearningPeriod($context)
    {
        $sql = 'SELECT A.description
              FROM unit_acdlearningperiod A
        INNER JOIN acdPeriod B
             USING (periodId)
             WHERE A.periodId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for period
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPeriodByLearningPeriod($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $periodId = $lookup->getFilterValue( 'periodId' );
        $periodDescription = $lookup->getFilterValue( 'periodDescription' );

        $lookup->addFilterField( new MTextField( 'periodId', $periodId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'periodDescription', $periodDescription, _M('Período', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns[] = new DataGridColumn( 'periodId', _M('Código', $module ), 'left', true, null, true );
        $columns[] = new DataGridColumn( 'periodDescription', _M('Período', $module ), 'left', true, null, true );

        $sql = 'SELECT A.periodId,
                   A.description AS periodDescription
              FROM unit_acdlearningperiod A
        INNER JOIN acdPeriod B
             USING (periodId)';

        if ( strlen( $periodId ) > 0 )
        {
            $where['A.periodId ILIKE ?'] = $periodId . '%';
        }
        if ( strlen( $periodDescription ) > 0 )
        {
            $where['UNACCENT(A.description) ILIKE UNACCENT(?)'] = $periodDescription . '%';
        }

        if ( count($where) == 0 )
        {
            $where['1 = ?'] = '2'; //SQL for result nothing
        }

        $sql .= ' WHERE ' . implode(' AND ', array_keys($where)) . ' ORDER BY A.description DESC';

        $sqlObject = new sql( );

        $sqlObject->createFrom( SAGU::prepare( $sql, array_values($where) ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar período', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for period
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePeriod($context)
    {
        $sql = 'SELECT A.description
                  FROM acdPeriod A
                 WHERE A.periodId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for period
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPeriod($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $periodId = $lookup->getFilterValue( 'periodId' );
        $periodDescription = $lookup->getFilterValue( 'periodDescription' );

        $lookup->addFilterField( new MTextField( 'periodId', $periodId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'periodDescription', $periodDescription, _M('Período', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'periodId', _M('Código', $module ), 'left', true, null, true ),
            new DataGridColumn( 'periodDescription', _M('Período', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.periodId,
                       A.description AS periodDescription
                  FROM acdPeriod A';

        if ( strlen( $periodId ) > 0 )
        {
            $where .= ' AND A.periodId ILIKE ?';
            $args[] = $periodId . '%';
        }

        if ( strlen( $periodDescription ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $periodDescription . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description DESC';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar período', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }
    
    public function lookupLearningPeriodFixed($lookup)
    {
        $this->lookupLearningPeriod($lookup);
    }
    
    public function autoCompleteLearningPeriodFixed($lookup)
    {
        $lookup->firstColumn = 'A.learningPeriodid,';
        $this->autoCompleteLearningPeriod($lookup);
    }

    /**
     * Auto complete for learning period
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteLearningPeriod($context)
    {
        $isClosed = MIOLO::_REQUEST('isClosed');
        
        $sql = 'SELECT  ' . $context->firstColumn . '
                        A.periodId,
                        A.courseId,
                        A.courseVersion,
                        A.turnId,
                        A.unitId,
                        A.description,
                        A.formationLevelId,
                        TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        TO_CHAR(A.beginDateLessons,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        TO_CHAR(A.weekEndExamsBegin,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        A.finalAverage,
                        A.minimumFrequency,
                        A.parcelsNumber,
                        B.shortName,
                        B.name,
                        getTurnDescription(A.turnId) as turnDescription,
                        getUnitDescription(A.unitId) as unitDescription,
                        C.description
                   FROM unit_acdlearningperiod A
             INNER JOIN acdPeriod C
                     ON ( C.periodId = A.periodId )
              LEFT JOIN acdCourse B
                     ON (B.courseId = A.courseId)
                   WHERE A.learningPeriodId = ?';
        
        if ( strlen($isClosed) > 0 )
        {
            $sql .= ' AND A.isClosed = FALSE ';
        }

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupLearningPeriod($lookup)
    {
        global $MIOLO;
        
        $page = $MIOLO->page;
        
        $page->onLoad('document.' . $page->name . '.courseName.focus()');
        
        $module = MIOLO::_request( 'lmodule' );
        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );
        
        $learningPeriodId = $lookup->getFilterValue( 'learningPeriodId' );
        $periodId = $lookup->getFilterValue( 'periodId' ) ? $lookup->getFilterValue( 'periodId' ) : null;
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $turnId = $lookup->getFilterValue( 'turnId' );
        $unitId = $lookup->getFilterValue( 'unitId' );
        $description = $lookup->getFilterValue( 'description' );
        $formationLevelId = $lookup->getFilterValue( 'formationLevelId' );
        $beginDate = $lookup->getFilterValue( 'beginDate' );
        $endDate = $lookup->getFilterValue( 'endDate' );
        $beginDateLessons = $lookup->getFilterValue( 'beginDateLessons' );
        $weekEndExamsBegin = $lookup->getFilterValue( 'weekEndExamsBegin' );
        $finalAverage = $lookup->getFilterValue( 'finalAverage' );
        $minimumFrequency = $lookup->getFilterValue( 'minimumFrequency' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $isClosed = $lookup->getFilterValue( 'isClosed' );

        $lookup->addFilterField( new MTextField( 'learningPeriodId', $learningPeriodId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'description', $learningPeriodId, _M('Descrição', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'periodId', $periodId, _M('Período', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( fields::turn( $turnId ) );
        $lookup->addFilterField( fields::unit( $unitId ) );
        $business = new BusinessAcademicBusFormationLevel();
        $lookup->addFilterField( new MSelection( 'formationLevelId', $formationLevelId, _M('Grau de formação', $module ), $business->listFormationLevel() ) );
        $lookup->addFilterField( new MTextField( 'beginDate', $beginDate, _M('Data inicial', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'endDate', $endDate, _M('Data final', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'finalAverage', $finalAverage, _M('Média final', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'learningPeriodId', _M('Código', $module ), 'left', true, null, true ),
            new DataGridColumn( 'description', _M('Período letivo', $module ), 'left', true, null, true ),
            new DataGridColumn( 'periodId', _M('Período', $module ), 'left', true, null, true ),
            new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
            new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'right', true, null, true ),
            new DataGridColumn( 'courseShortName', _M('Curso', $module ), 'left', true, null, true ),
            new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'right', true, null, false ),
            new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
            new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'right', true, null, false ),
            new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
            new DataGridColumn( 'formationLevelId', _M('Código do grau de formação', $module ), 'right', true, null, false ),
            new DataGridColumn( 'beginDate', _M('Data inicial', $module ), 'left', true, null, true ),
            new DataGridColumn( 'endDate', _M('Data final', $module ), 'left', true, null, true ),
            new DataGridColumn( 'beginDateLessons', _M('Data inicial das aulas', $module ), 'left', true, null, false ),
            new DataGridColumn( 'weekEndExamsBegin', _M('Data dos exames finais', $module ), 'left', true, null, false ),
            new DataGridColumn( 'finalAverage', _M('Média final', $module ), 'right', true, null, true ),
            new DataGridColumn( 'minimumFrequency', _M('Frequência mínima', $module ), 'right', true, null, false ),
            new DataGridColumn( 'parcelsNumber', _M('Número de parcelas', $module ), 'right', true, null, true )
        );

        $sql = 'SELECT A.learningPeriodId,
                       A.periodId,
                       A.courseId,
                       A.courseVersion,
                       A.turnId,
                       A.unitId,
                       A.description,
                       A.formationLevelId,
                       TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.beginDateLessons,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.weekEndExamsBegin,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.finalAverage,
                       A.minimumFrequency,
                       A.parcelsNumber,
                       getCourseShortName(A.courseId) as courseShortName,
                       getCourseName(A.courseId) as courseName,
                       getTurnDescription(A.turnId) as turnDescription,
                       getUnitDescription(A.unitId) as unitDescription,
                       B.description
                  FROM unit_acdlearningperiod A
            INNER JOIN acdPeriod B
                    ON (A.periodId = B.periodId)';

        if ( strlen( $learningPeriodId ) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $learningPeriodId;
        }
        if ( strlen( $periodId ) > 0 )
        {
            $where .= ' AND A.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( getCourseName(A.courseId) ILIKE ? OR getCourseShortName(A.courseId) ILIKE ? )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen( $description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description;
        }
        if ( strlen( $formationLevelId ) > 0 )
        {
            $where .= ' AND A.formationLevelId = ?';
            $args[] = $formationLevelId;
        }
        if ( strlen( $beginDate ) > 0 )
        {
            $where .= ' AND A.beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $beginDate;
        }
        if ( strlen( $endDate ) > 0 )
        {
            $where .= ' AND A.endDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $endDate;
        }
        if ( strlen( $beginDateLessons ) > 0 )
        {
            $where .= ' AND A.beginDateLessons = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $beginDateLessons;
        }
        if ( strlen( $weekEndExamsBegin ) > 0 )
        {
            $where .= ' AND A.weekEndExamsBegin = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $weekEndExamsBegin;
        }
        if ( strlen( $finalAverage ) > 0 )
        {
            $where .= ' AND A.finalAverage = ?';
            $args[] = $finalAverage;
        }
        if ( strlen( $minimumFrequency ) > 0 )
        {
            $where .= ' AND A.minimumFrequency = ?';
            $args[] = $minimumFrequency;
        }
        if ( strlen($isClosed) > 0 )
        {
            $where .= ' AND A.isClosed = FALSE';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar período letivo', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for curricularComponentGroup
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteCurricularComponentGroup($context)
    {
        $sql = 'SELECT A.name as groupDescription
                  FROM acdCurricularComponentGroup A
                 WHERE A.curricularComponentGroupId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for curricularComponentGroup
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupCurricularComponentGroup($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $curricularComponentGroupId = $lookup->getFilterValue( 'curricularComponentGroupId' );
        $curricularComponentGroupName = $lookup->getFilterValue( 'curricularComponentGroupName' );

        $lookup->addFilterField( new MTextField( 'curricularComponentGroupId', $curricularComponentGroupId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentGroupName', $curricularComponentGroupName, _M('Grupo da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'curricularComponentGroupId', _M('Código', $module ), 'left', true, null, true ),
            new DataGridColumn( 'name', _M('Grupo da disciplina', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.curricularComponentGroupId,
                       A.name
                  FROM acdCurricularComponentGroup A';

        if ( strlen( $curricularComponentGroupId ) > 0 )
        {
            $where .= ' AND A.curricularComponentGroupId = ?';
            $args[] = $curricularComponentGroupId;
        }

        if ( strlen( $curricularComponentGroupName ) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $curricularComponentGroupName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar grupo de disciplina', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for center
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteCenter($context)
    {
        $sql = 'SELECT A.name
                  FROM acdCenter A
                 WHERE A.centerId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for center
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupCenter($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $centerId = $lookup->getFilterValue( 'centerId' );
        $centerName = $lookup->getFilterValue( 'centerName' );

        $lookup->addFilterField( new MTextField( 'centerId', $centerId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'centerName', $centerName, _M('Centro', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'centerId', _M('Código', $module ), 'left', true, null, true ),
            new DataGridColumn( 'name', _M('Centro', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.centerId,
                       A.name
                  FROM acdCenter A';

        if ( strlen( $centerId ) > 0 )
        {
            $where .= ' AND A.centerId = ?';
            $args[] = $centerId;
        }

        if ( strlen( $centerName ) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $centerName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar centro', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for educationArea
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteEducationArea($context)
    {
        $sql = 'SELECT A.description
                  FROM acdEducationArea A
                 WHERE A.educationAreaId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for center
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupEducationArea($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $educationAreaId = $lookup->getFilterValue( 'educationAreaId' );
        $educationAreaDescription = $lookup->getFilterValue( 'educationAreaDescription' );

        $lookup->addFilterField( new MTextField( 'educationAreaId', $centerId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'educationAreaDescription', $centerName, _M('Área de ensino', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'educationAreaId', _M('Código', $module ), 'left', true, null, true ),
            new DataGridColumn( 'description', _M('Área de ensino', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.educationAreaId,
                       A.description
                  FROM acdEducationArea A';

        if ( strlen( $educationAreaId ) > 0 )
        {
            $where .= ' AND A.educationAreaId = ?';
            $args[] = $educationAreaId;
        }

        if ( strlen( $educationAreaDescription ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $educationAreaDescription . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar área de ensino', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for formation level
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteFormationLevel($context)
    {
        $sql = 'SELECT A.description,
                       A.shortDescription
                  FROM acdFormationLevel A
                 WHERE A.formationLevelId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupFormationLevel($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $formationLevelId = $lookup->getFilterValue( 'formationLevelId' );
        $description = $lookup->getFilterValue( 'description' );
        $shortDescription = $lookup->getFilterValue( 'shortDescription' );

        $lookup->addFilterField( new MTextField( 'formationLevelId', $formationLevelId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'description', $description, _M('Grau de formação', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'shortDescription', $shortDescription, _M('Abreviatura', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'formationLevelId', _M('Código', $module ), 'right', true, null, true ),
            new DataGridColumn( 'description', _M('Grau de formação', $module ), 'left', true, null, true ),
            new DataGridColumn( 'shortDescription', _M('Abreviatura', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.formationLevelId,
                       A.description,
                       A.shortDescription
                  FROM acdFormationLevel A';

        if ( strlen( $formationLevelId ) > 0 )
        {
            $where .= ' AND A.formationLevelId = ?';
            $args[] = $formationLevelId;
        }
        if ( strlen( $description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }
        if ( strlen( $shortDescription ) > 0 )
        {
            $where .= ' AND UNACCENT(A.shortDescription) ILIKE UNACCENT(?)';
            $args[] = $shortDescription . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar grau de formação', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for course occurrence
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteCourseOccurrence($context)
    {        
        // Recebe DB_TRUE caso solicitaç?o seja para exibir todas ocorr?ncias de curso independente a unidade.
        $acdCourseOccurrence = ( MIOLO::_REQUEST('allCourseOccurrence') == DB_TRUE ) ? 'acdcourseoccurrence' : 'unit_acdcourseoccurrence';
        
        $sql = "SELECT A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       C.description AS turnDescription,
                       A.unitId,
                       D.description AS unitDescription,
                       B.formationLevelId,
                       E.description AS formationLevelDescription
                  FROM {$acdCourseOccurrence} A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN basTurn C
                    ON (C.turnId = A.turnId)
             LEFT JOIN basUnit D
                    ON (D.unitId = A.unitId)
             LEFT JOIN acdFormationLevel E
                    ON (E.formationLevelId = B.formationLevelId)";

        // Obtém os filtros do form
        if ( $context->usingMultipleFilters() )
        {
            $context->filters = $context->value;

            $sql .= ' WHERE A.courseId = ?
                        AND A.courseVersion = ?
                        AND A.turnId = ?
                        AND A.unitId = ?';
        }
        else
        {
            // Traz somente se não retornar mais de um registro
            $sql .= " WHERE A.courseId = ?
                        AND (SELECT COUNT(AA.*) = 1
                               FROM {$acdCourseOccurrence} AA
                              WHERE AA.courseId = A.courseId)";
        }

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupCourseOccurrence($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);

        $courseId = $lookup->getFilterValue('courseId');
        $courseVersion = $lookup->getFilterValue('courseVersion');
        $courseName = $lookup->getFilterValue('courseName');
        $unitId = $lookup->getFilterValue('unitId');
        $unitDescription = $lookup->getFilterValue('unitDescription');
        $turnId = $lookup->getFilterValue('turnId');
        $turnDescription = $lookup->getFilterValue('turnDescription');
        $authorizationDate = $lookup->getFilterValue('authorizationDate');
        $authorizationDocument = $lookup->getFilterValue('authorizationDocument');
        $status = SAGU::NVL($lookup->getFilterValue('status'), DB_TRUE);
        $minimumConclusionCourse = $lookup->getFilterValue('minimumConclusionCourse');
        $maximumConclusionCourse = $lookup->getFilterValue('maximumConclusionCourse');
        $formationLevelId = $lookup->getFilterValue('formationLevelId');        
        
        // Recebe DB_TRUE caso solicitaç?o seja para exibir todas ocorr?ncias de curso independente a unidade.
        $allCourseOccurrence = $lookup->getFilterValue('allCourseOccurrence');

        $lookup->addFilterField(new MTextField('courseId', $courseId, _M('Código do curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('courseVersion', $courseVersion, _M('Versão do curso', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('courseName', $courseName, _M('Nome do curso', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(fields::unit($unitId));
        $lookup->addFilterField(fields::turn($turnId));
        $lookup->addFilterField(new MSelection('status', $status, _M('Está ativo', $module) . '?', SAGU::listYesNo()));
        $business = new BusinessAcademicBusFormationLevel();
        $lookup->addFilterField(new MSelection('formationLevelId', $formationLevelId, _M('Grau de formação', $module), $business->listFormationLevel()));
        $lookup->addFilterField(new SHiddenField('allCourseOccurrence', $allCourseOccurrence));

        global $page;
        $page->onLoad('document.' . $page->name . '.courseName.focus()');

        $columns = array();
        $columns[] = new DataGridColumn('courseId', _M('Código do curso', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('courseVersion', _M('Versão do curso', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('courseName', _M('Curso', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('unitId', _M('Código da unidade', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('unitDescription', _M('Unidade', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('turnId', _M('Código do turno', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('turnDescription', _M('Turno', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('authorizationDate', _M('Data de autorização', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('authorizationDocument', _M('Documento de autorização', $module), 'left', true, null, false);
        $columns[] = new DataGridColumn('status', _M('Está ativo', $module), 'left', true, null, true, array(DB_TRUE => _M('Sim', $module), DB_FALSE => _M('Não', $module)));
        $columns[] = new DataGridColumn('minimumConclusionCourse', _M('Tempo mínimo de conclusão', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('maximumConclusionCourse', _M('Tempo máximo de conclusão', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('formationLevelId', _M('Código do grau de formação', $module), 'right', true, null, false);
        $columns[] = new DataGridColumn('formationLevelDescription', _M('Grau de formação', $module), 'left', true, null, true);

        $from = ( $allCourseOccurrence == DB_TRUE ) ? 'acdcourseoccurrence' : 'unit_acdcourseoccurrence';
        
        $sql = "SELECT A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       C.description AS turnDescription,
                       A.unitId,
                       D.description AS unitDescription,
                       B.formationLevelId,
                       E.description AS formationLevelDescription,
                       A.authorizationDate,
                       A.authorizationDocument,
                       A.status,
                       A.minimumConclusionCourse,
                       A.maximumConclusionCourse
                  FROM {$from} A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN basTurn C
                    ON (C.turnId = A.turnId)
             LEFT JOIN basUnit D
                    ON (D.unitId = A.unitId)
             LEFT JOIN acdFormationLevel E
                    ON (E.formationLevelId = B.formationLevelId)";

        if ( strlen($courseId) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $params[] = $courseId;
        }
        if ( strlen($courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $params[] = $courseVersion;
        }
        if ( strlen($courseName) > 0 )
        {
            $where .= ' AND ( UNACCENT(B.name) ILIKE UNACCENT(?) OR UNACCENT(B.shortName) ILIKE UNACCENT(?) )';
            $params[] = $courseName . '%';
            $params[] = $courseName . '%';
        }
        if ( strlen($turnId) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $params[] = $turnId;
        }
        if ( strlen($turnDescription) > 0 )
        {
            $where .= ' AND UNACCENT(C.description) ILIKE UNACCENT(?)';
            $params[] = $turnDescription . '%';
        }
        if ( strlen($unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $params[] = $unitId;
        }
        if ( strlen($unitDescription) > 0 )
        {
            $where .= ' AND UNACCENT(D.description) ILIKE UNACCENT(?)';
            $params[] = $unitDescription . '%';
        }
        if ( strlen($authorizationDate) > 0 )
        {
            $where .= ' AND A.authorizationDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $params[] = $authorizationDate;
        }
        if ( strlen($authorizationDocument) > 0 )
        {
            $where .= ' AND A.authorizationDocument ILIKE ?';
            $params[] = $authorizationDocument;
        }
        if ( strlen($status) > 0 )
        {
            $where .= ' AND A.status = ?';
            $params[] = $status;
        }
        if ( strlen($minimumConclusionCourse) > 0 )
        {
            $where .= ' AND A.minimumConclusionCourse = ?';
            $params[] = $minimumConclusionCourse;
        }
        if ( strlen($maximumConclusionCourse) > 0 )
        {
            $where .= ' AND A.maximumConclusionCourse = ?';
            $params[] = $maximumConclusionCourse;
        }

        if ( strlen($formationLevelId) > 0 )
        {
            $where .= ' AND B.formationLevelId = ?';
            $params[] = $formationLevelId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY B.name,
                           A.courseVersion DESC';

        $sqlObject = new sql( );
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom(SAGU::prepare($sql, $params));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar ocorrência de curso', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for certified level
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteCertifiedType($context)
    {
        $sql = 'SELECT A.description
                  FROM acdCertifiedType A
                 WHERE A.certifiedTypeId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for certified type
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupCertifiedType($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $certifiedTypeId = $lookup->getFilterValue( 'certifiedTypeId' );
        $certifiedTypeDescription = $lookup->getFilterValue( 'certifiedTypeDescription' );

        $lookup->addFilterField( new MTextField( 'certifiedTypeId', $certifiedTypeId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'certifiedTypeDescription', $certifiedTypeDescription, _M('Tipo de atestado', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        global $page;
        $page->onLoad( 'document.' . $page->name . '.certifiedTypeDescription.focus()' );

        $columns = array(
                new DataGridColumn( 'certifiedTypeId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'certifiedTypeDescription', _M('Tipo de atestado', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.certifiedTypeId,
                       A.description AS certifiedTypeDescription
                  FROM acdCertifiedType A';

        if ( strlen( $certifiedTypeId ) > 0 )
        {
            $where .= ' AND A.certifiedTypeId = ?';
            $args[] = $certifiedTypeId;
        }
        if ( strlen( $certifiedTypeDescription ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $certifiedTypeDescription . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar tipo de atestado', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for states contract
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteStatesContract($context)
    {
        $sql = 'SELECT A.description,
                       A.inOutTransition,
                       A.needsReason
                  FROM acdStateContract A
                 WHERE A.stateContractId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupStatesContract($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $stateContractId = $lookup->getFilterValue( 'stateContractId' );
        $description = $lookup->getFilterValue( 'description' );
        $inOutTransition = $lookup->getFilterValue( 'inOutTransition' );
        $needsReason = $lookup->getFilterValue( 'needsReason' );
        $stateContractIsActive = $lookup->getFilterValue( 'stateContractIsActive' );

        $lookup->addFilterField( new MTextField( 'stateContractId', $stateContractId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'description', $description, _M('Estado contratual', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MSelection( 'inOutTransition', $inOutTransition, _M('Transição de entrada e saída', $module ), array(
                'I' => _M('Entrada', $module ),
                'O' => _M('Saída', $module ),
                'T' => _M('Transição', $module )
        ) ) );
        $lookup->addFilterField( new MSelection( 'needsReason', $needsReason, _M('Necessita motivo', $module ), SAGU::listTrueFalse() ) );
        $lookup->addFilterField( new SHiddenField('stateContractIsActive', $stateContractIsActive) );

        global $page;
        $page->onLoad( 'document.' . $page->name . '.description.focus()' );

        $columns = array(
                new DataGridColumn( 'stateContractId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'description', _M('Estado contratual', $module ), 'left', true, null, true ),
                new DataGridColumn( 'inOutTransition', _M('Transição de entrada e saída', $module ), 'left', true, null, true, array(
                        'I' => _M('Entrada', $module ),
                        'O' => _M('Saída', $module ),
                        'T' => _M('Transição', $module )
                ) ),
                new DataGridColumn( 'needsReason', _M('Necessita motivo', $module ), 'left', true, null, true, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) )
        );

        $sql = 'SELECT A.stateContractId,
                       A.description,
                       A.inOutTransition,
                       A.needsReason
                  FROM acdStateContract A';

        if ( strlen( $stateContractId ) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $stateContractId;
        }
        if ( strlen( $description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }
        if ( strlen( $inOutTransition ) > 0 )
        {
            $where .= ' AND A.inOutTransition ILIKE ?';
            $args[] = $inOutTransition;
        }
        if ( strlen( $needsReason ) > 0 )
        {
            $where .= ' AND A.needsReason = ?';
            $args[] = $needsReason;
        }
        if ( strlen($stateContractIsActive) > 0 )
        {
            $where .= ' AND A.stateContractIsActive = ?';
            $args[] = $stateContractIsActive;
        }
        
        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar estado de contrato', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for contract level
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteContract($context, $mode = null)
    {
        $sql = 'SELECT ';

        if ( $mode == 'SIMPLEMODE' )
        {
            $sql .= 'B.name AS personName,';
        }
        else
        {
            $sql .= 'B.personId as personId,
                     B.name as personName,';
        }
        
        $sql .=       'A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       C.formationLevelId,
                       B.cityId,
                       F.name as cityName,
                       G.name as countryName,
                       B.zipCode,
                       H.name || \' \' || B.location AS location,
                       B.number,
                       B.complement,
                       B.neighborhood,
                       S.name AS stateName
                  FROM unit_acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
             LEFT JOIN basCity F
                    ON (F.cityId = B.cityId)
             LEFT JOIN basCountry G
                    ON (G.countryId = F.countryId)
             LEFT JOIN basState S
                    ON S.stateId = F.stateId
            INNER JOIN basLocationType H
                    ON (B.locationTypeId = H.locationTypeId)
                 WHERE A.contractId = ?';
        
        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupContract($lookup, $mode = null)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );
        
        $contractId = $lookup->getFilterValue( 'contractId' );
        $personId = $lookup->getFilterValue( 'personId' );
        $personName = $lookup->getFilterValue( 'personName' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $turnId = $lookup->getFilterValue( 'turnId' );
        $unitId = $lookup->getFilterValue( 'unitId' );        
        $formationLevelId = $lookup->getFilterValue( 'formationLevelId' );

        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código do contrato', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( fields::turn( $turnId ) );
        $lookup->addFilterField( fields::unit( $unitId ) );
        $lookup->addFilterField( fields::formationLevel($formationLevelId) );

        global $page;
        $page->onLoad( 'document.' . $page->name . '.personName.focus()' );
               
        $columns = array(
                new DataGridColumn( 'contractId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personName', _M('Pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'left', true, null, false ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'left', true, null, false ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'formationDate', _M('Data de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'formationPeriodId', _M('Período de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'conclusionDate', _M('Data de conclusão', $module ), 'left', true, null, false ),
                new DataGridColumn( 'emendsDate', _M('Data da apostila', $module ), 'left', true, null, false ),
                new DataGridColumn( 'diplomaDate', _M('Data do diploma', $module ), 'left', true, null, false ),
                new DataGridColumn( 'maturityDay', _M('Dia de vencimento', $module ), 'left', true, null, true ),
                new DataGridColumn( 'isListener', _M('É ouvinte', $module ), 'left', true, null, false, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) ),
                new DataGridColumn( 'isRequestAcademicDegree', _M('Requer grau acadêmico', $module ), 'left', true, null, false, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) ),
                new DataGridColumn( 'globalAverage', _M('Média global', $module ), 'left', true, null, false ),
                new DataGridColumn( 'contractNumber', _M('Número do contrato', $module ), 'left', true, null, false ),
                new DataGridColumn( 'obs', _M('Obs', $module ), 'left', true, null, false ),
                new DataGridColumn( 'parcelsNumber', _M('Número de parcelas', $module ), 'left', true, null, true ),
                new DataGridColumn( 'class', _M('Turma', $module ), 'left', true, null, true ),
        );

        $sql = 'SELECT DISTINCT A.contractId,';
        
        // Se for modo simples, retorna apenas "cod. pessoa - nome"
        if ( $mode == 'SIMPLEMODE' )
        {
            $sql .= 'A.personId || \' - \' || B.name AS personName,';
            
            $order = ' ORDER BY C.name, A.contractId';
        }
        else
        {
            $sql .= 'A.personId,
                     B.name AS personName,';
            
            $order = ' ORDER BY B.name, C.name, A.contractId';
        }
        
        $sql .=       'A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       C.formationLevelId,
                       B.cityId,
                       F.name as cityName,
                       G.name as countryName,
                       B.zipCode,
                       H.name || \' \' || B.location AS location,
                       B.number,
                       B.complement,
                       B.neighborhood,
                       getcontractclassid(A.contractId) AS class
                  FROM unit_acdContract A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
             LEFT JOIN basCity F
                    ON (F.cityId = B.cityId)
             LEFT JOIN basCountry G
                    ON (G.countryId = F.countryId)
             LEFT JOIN basState S
                    ON S.stateId = F.stateId
            INNER JOIN basLocationType H
                    ON (B.locationTypeId = H.locationTypeId) ';

        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(C.name) ILIKE UNACCENT(?) OR UNACCENT(C.shortName) ILIKE UNACCENT(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        
        if ( strlen( $formationLevelId ) > 0 )
        {
            $where .= ' AND C.formationLevelId = ?';
            $args[] = $formationLevelId;
        }
        
        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= $order;
        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );        
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar contrato', $module ), 15, 0 );
        $lookup->grid->setIsScrollable(); 
    }
    
    
    /**
     * Lookup de contrato identico ao lookupContract() , porem suportado para ser utilizado
     *  em lookup's padrao, com id e descricao.
     * 
     * Pode ser utilizado em relatorios etc.
     */
    public function lookupContractSimple($lookup)
    {
        self::lookupContract($lookup, 'SIMPLEMODE');
    }
    

    /**
     * Lookup de contrato identico ao autoCompleteContract() , porem suportado para ser utilizado
     *  em lookup's padrao, com id e descricao.
     * 
     * Pode ser utilizado em relatorios etc.
     */
    public function autoCompleteContractSimple($context)
    {
        self::autoCompleteContract($context, 'SIMPLEMODE');
    }
    

    /**
     * Auto complete for active contracts
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteActiveContract($context)
    {
        $sql = 'SELECT A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       getContractClassId(A.contractId) AS pupilClassId,
                       getClassName(getContractClassId(A.contractId)) AS pupilClassName
                  FROM unit_acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
                 WHERE A.contractId = ?
                   AND (    A.conclusionDate IS NULL
                         OR A.conclusionDate > date(now()) )
                   AND (    getContractDisactivationDate(A.contractId) IS NULL )';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupActiveContract($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $contractId = $lookup->getFilterValue( 'contractId' );
        $personId = $lookup->getFilterValue( 'personId' );
        $personName = $lookup->getFilterValue( 'personName' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $turnId = $lookup->getFilterValue( 'turnId' );
        $unitId = $lookup->getFilterValue( 'unitId' );

        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( fields::turn( $turnId ) );
        $lookup->addFilterField( fields::unit( $unitId ) );

        global $page;
        $page->onLoad( 'document.' . $page->name . '.personName.focus()' );

        $columns = array(
                new DataGridColumn( 'contractId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personName', _M('Pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'left', true, null, false ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'left', true, null, false ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'formationDate', _M('Data de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'formationPeriodId', _M('Período de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'conclusionDate', _M('Data de conclusão', $module ), 'left', true, null, false ),
                new DataGridColumn( 'emendsDate', _M('Data da apostila', $module ), 'left', true, null, false ),
                new DataGridColumn( 'diplomaDate', _M('Data do diploma', $module ), 'left', true, null, false ),
                new DataGridColumn( 'maturityDay', _M('Dia de vencimento', $module ), 'left', true, null, true ),
                new DataGridColumn( 'isListener', _M('É ouvinte', $module ), 'left', true, null, false, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) ),
                new DataGridColumn( 'isRequestAcademicDegree', _M('Requer grau acadêmico', $module ), 'left', true, null, false, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) ),
                new DataGridColumn( 'globalAverage', _M('Média global', $module ), 'left', true, null, false ),
                new DataGridColumn( 'contractNumber', _M('Número do contrato', $module ), 'left', true, null, false ),
                new DataGridColumn( 'obs', _M('Obs', $module ), 'left', true, null, false ),
                new DataGridColumn( 'parcelsNumber', _M('Número de parcelas', $module ), 'left', true, null, true ),
                new DataGridColumn( 'class', _M('Turma', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.contractId,
                       A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       getContractClassId(A.contractId) AS pupilClassId,
                       getClassName(getContractClassId(A.contractId)) AS pupilClassName,
                       getcontractclassid(A.contractId) AS class
                  FROM unit_acdContract A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
                 WHERE (    A.conclusionDate IS NULL
                         OR A.conclusionDate > date(now()) )
                   AND (    getContractDisactivationDate(A.contractId) IS NULL )';

        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(C.name) ILIKE UNACCENT(?) OR UNACCENT(C.shortName) ILIKE UNACCENT(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY A.contractId';
        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar contrato ativo', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for contract level
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteContractAccountScheme($context)
    {
        $sql = 'SELECT A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       G.accountSchemeId,
                       G.description,
                       H.costCenterId,
                       H.description
                  FROM unit_acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN accCourseAccount F
                    ON (F.courseId = A.courseId AND
                        F.courseVersion = A.courseVersion AND
                        F.unitId = A.unitId)
            INNER JOIN accAccountScheme G
                    ON (F.accountSchemeId = G.accountSchemeId)
            INNER JOIN accCostCenter H
                    ON (F.costCenterId = H.costCenterId)
                 WHERE A.contractId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupContractAccountScheme($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $contractId = $lookup->getFilterValue( 'contractId' );
        $personId = $lookup->getFilterValue( 'personId' );
        $personName = $lookup->getFilterValue( 'personName' );

        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'contractId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personName', _M('Pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'class', _M('Turma', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.contractId,
                       A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       G.accountSchemeId,
                       G.description,
                       H.costCenterId,
                       H.description,
                       getcontractclassid(A.contractId) AS class
                  FROM unit_acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN accCourseAccount F
                    ON (F.courseId = A.courseId AND
                        F.courseVersion = A.courseVersion AND
                        F.unitId = A.unitId)
            INNER JOIN accAccountScheme G
                    ON (F.accountSchemeId = G.accountSchemeId)
            INNER JOIN accCostCenter H
                    ON (F.costCenterId = H.costCenterId)';

        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.contractId';
        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar contrato', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for contract level to contract lock
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteContractLock($context)
    {
        $sql = 'SELECT A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels
                  FROM unit_acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN (       SELECT AA.stateContractId,
                                      AA.contractId
                                 FROM acdMovementContract AA
                           INNER JOIN (  SELECT max(AB.stateTime) AS stateTime,
                                                AB.contractId
                                           FROM acdMovementContract AB
                                       GROUP BY 2) AS AB
                                   ON (AA.contractId = AB.contractId AND
                                       AA.stateTime = AB.stateTime)
                        ) AS F
                     ON (F.contractId = A.contractId)
                  WHERE A.contractId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupContractLock($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $contractId = $lookup->getFilterValue( 'contractId' );
        $personId = $lookup->getFilterValue( 'personId' );
        $personName = $lookup->getFilterValue( 'personName' );

        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'contractId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personName', _M('Pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'formationDate', _M('Data de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'formationPeriodId', _M('Período de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'conclusionDate', _M('Data de conclusão', $module ), 'left', true, null, false ),
                new DataGridColumn( 'emendsDate', _M('Data da apostila', $module ), 'left', true, null, false ),
                new DataGridColumn( 'diplomaDate', _M('Data do diploma', $module ), 'left', true, null, false ),
                new DataGridColumn( 'maturityDay', _M('Dia de vencimento', $module ), 'left', true, null, true ),
                new DataGridColumn( 'isListener', _M('É ouvinte', $module ), 'left', true, null, false, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) ),
                new DataGridColumn( 'isRequestAcademicDegree', _M('Requer grau acadêmico', $module ), 'left', true, null, false, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) ),
                new DataGridColumn( 'globalAverage', _M('Média global', $module ), 'left', true, null, false ),
                new DataGridColumn( 'contractNumber', _M('Número do contrato', $module ), 'left', true, null, false ),
                new DataGridColumn( 'obs', _M('Obs', $module ), 'left', true, null, false ),
                new DataGridColumn( 'parcelsNumber', _M('Número de parcelas', $module ), 'left', true, null, true ),
                new DataGridColumn( 'class', _M('Turma', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.contractId,
                       A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       getcontractclassid(A.contractId) AS class
                  FROM unit_acdContract A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN (       SELECT AA.stateContractId,
                                      AA.contractId
                                 FROM acdMovementContract AA
                           INNER JOIN (  SELECT max(AB.stateTime) AS stateTime,
                                                AB.contractId
                                           FROM acdMovementContract AB
                                       GROUP BY 2) AS AB
                                   ON (AA.contractId = AB.contractId AND
                                       AA.stateTime = AB.stateTime)
                        ) AS F
                     ON (F.contractId = A.contractId) ';

        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.contractId';
        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar contrato', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for contract level to contract lock
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteContractLockReport($context)
    {
        $sql = "SELECT A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       datetouser(F.stateTime::date) AS stateTime,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels
                  FROM unit_acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN (       SELECT AA.stateContractId,
                                      AA.contractId,
                                      AA.stateTime
                                 FROM acdMovementContract AA
                        ) AS F
                     ON (F.contractId = A.contractId)
             INNER JOIN acdStateTransition G
                     ON (G.beginStateId = F.stateContractId AND
                         G.endStateId = GETPARAMETER('ACADEMIC', 'STATE_CONTRACT_ID_LOCKED')::int )
                 WHERE A.contractId = ?";

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupContractLockReport($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $contractId = $lookup->getFilterValue( 'contractId' );
        $personId = $lookup->getFilterValue( 'personId' );
        $personName = $lookup->getFilterValue( 'personName' );

        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'contractId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personName', _M('Pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'stateTime', _M('Data trancamento', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'formationDate', _M('Data de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'formationPeriodId', _M('Período de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'conclusionDate', _M('Data de conclusão', $module ), 'left', true, null, false ),
                new DataGridColumn( 'emendsDate', _M('Data da apostila', $module ), 'left', true, null, false ),
                new DataGridColumn( 'diplomaDate', _M('Data do diploma', $module ), 'left', true, null, false ),
                new DataGridColumn( 'isListener', _M('É ouvinte', $module ), 'left', true, null, false, SAGU::listYesNo()),
                new DataGridColumn( 'isRequestAcademicDegree', _M('Requer grau acadêmico', $module ), 'left', true, null, false, SAGU::listYesNo()),
                new DataGridColumn( 'globalAverage', _M('Média global', $module ), 'left', true, null, false ),
                new DataGridColumn( 'contractNumber', _M('Número do contrato', $module ), 'left', true, null, false ),
                new DataGridColumn( 'obs', _M('Obs', $module ), 'left', true, null, false ),
                new DataGridColumn( 'class', _M('Turma', $module ), 'left', true, null, false ),
        );

        $sql = "SELECT A.contractId,
                       A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       datetouser(F.stateTime::date) AS stateTime,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getcontractclassid(A.contractId) AS class
                  FROM unit_acdContract A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
            INNER JOIN (       SELECT AA.stateContractId,
                                      AA.contractId,
                                      AA.stateTime
                                 FROM acdMovementContract AA
                        ) AS F
                     ON (F.contractId = A.contractId)
             INNER JOIN acdStateTransition G
                     ON (G.beginStateId = F.stateContractId AND
                         G.endStateId = GETPARAMETER('ACADEMIC', 'STATE_CONTRACT_ID_LOCKED')::int )";

        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.contractId';
        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        else
        {
            $sql .= ' LIMIT 5000';
        }

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar contrato', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }
    
    /**
     * Auto complete for contract level to contract lock
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteContractUnlock($context)
    {
        $sql = 'SELECT A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels
                  FROM unit_acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
                 WHERE A.contractId = ?
                   AND EXISTS ( SELECT 1 
                                  FROM acdMovementContract AA
                            INNER JOIN acdStateContract BB
                                    ON (AA.stateContractId = BB.stateContractId)
                                 WHERE AA.contractId = A.contractId
                                   AND ( BB.inOutTransition = \'O\' OR BB.isclosecontract IS TRUE )
                              ORDER BY stateTime DESC LIMIT 1 )  
            ';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupContractUnlock($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $contractId = $lookup->getFilterValue( 'contractId' );
        $personId = $lookup->getFilterValue( 'personId' );
        $personName = $lookup->getFilterValue( 'personName' );

        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'contractId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personName', _M('Pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'formationDate', _M('Data de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'formationPeriodId', _M('Período de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'conclusionDate', _M('Data de conclusão', $module ), 'left', true, null, false ),
                new DataGridColumn( 'emendsDate', _M('Data da apostila', $module ), 'left', true, null, false ),
                new DataGridColumn( 'diplomaDate', _M('Data do diploma', $module ), 'left', true, null, false ),
                new DataGridColumn( 'maturityDay', _M('Dia de vencimento', $module ), 'left', true, null, true ),
                new DataGridColumn( 'isListener', _M('É ouvinte', $module ), 'left', true, null, false, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) ),
                new DataGridColumn( 'isRequestAcademicDegree', _M('Requer grau acadêmico', $module ), 'left', true, null, false, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) ),
                new DataGridColumn( 'globalAverage', _M('Média global', $module ), 'left', true, null, false ),
                new DataGridColumn( 'contractNumber', _M('Número do contrato', $module ), 'left', true, null, false ),
                new DataGridColumn( 'obs', _M('Obs', $module ), 'left', true, null, false ),
                new DataGridColumn( 'parcelsNumber', _M('Número de parcelas', $module ), 'left', true, null, true ),
                new DataGridColumn( 'class', _M('Turma', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.contractId,
                       A.personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       getcontractclassid(A.contractId) AS class
                  FROM acdContract A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )';

        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $where .= ' AND EXISTS ( SELECT 1 
                                  FROM acdMovementContract AA
                            INNER JOIN acdStateContract BB
                                    ON (AA.stateContractId = BB.stateContractId)
                                 WHERE AA.contractId = A.contractId
                                   AND ( BB.inOutTransition = \'O\' OR BB.isclosecontract IS TRUE )
                              ORDER BY stateTime DESC LIMIT 1 ) ';

            $sql .= ' WHERE ' . substr( $where, 5 );
        }
        
        $sql .= ' ORDER BY A.contractId';
        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar contrato', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for all person contract
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompletePersonContract($context)
    {
        $MIOLO = MIOLO::getInstance();
        $isActiveContract = $MIOLO->_REQUEST('isActiveContract');
        
        $sql = 'SELECT C.contractId,
                       A.personId,
                       A.name,
                       D.courseId,
                       E.name,
                       D.courseVersion,
                       C.turnId,
                       F.description,
                       C.unitId,
                       G.description,
                       E.formationLevelId,
                       A.cityId,
                       H.name as cityName,
                       I.name as countryName,
                       A.zipCode,
                       J.name || \' \' || A.location AS location,
                       A.number,
                       A.complement,
                       A.neighborhood,
                       S.name AS stateName
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON (A.cityId = B.cityId)
             LEFT JOIN unit_acdContract C
                    ON (C.personId = A.personId
                        AND (C.conclusionDate IS NULL
                             OR C.conclusionDate > date(now()))
                        AND (SELECT COUNT(*)
                               FROM unit_acdContract X
                              WHERE X.personId = A.personId
                                AND (X.conclusionDate IS NULL
                                     OR X.conclusionDate > date(now())) ) = 1 )
             LEFT JOIN acdCourseVersion D
                    ON (C.courseId = D.courseId
                        AND C.courseVersion = D.courseVersion)
             LEFT JOIN acdCourse E
                    ON (D.courseId = E.courseId)
             LEFT JOIN basTurn F
                    ON (F.turnId = C.turnId)
             LEFT JOIN basUnit G
                    ON (G.unitId = C.unitId)
             LEFT JOIN basCity H
                    ON (H.cityId = A.cityId)
             LEFT JOIN basState S
                    ON S.stateId = H.stateId
             LEFT JOIN basCountry I
                    ON (I.countryId = H.countryId)
            INNER JOIN basLocationType J
                    ON (A.locationTypeId = J.locationTypeId)
                 WHERE A.personId = ?';
        
        if ( $isActiveContract == DB_TRUE )
        {
            $sql .= ' AND EXISTS ( SELECT 1 
                                  FROM acdMovementContract AA
                            INNER JOIN acdStateContract BB
                                    ON (AA.stateContractId = BB.stateContractId)
                                 WHERE AA.contractId = C.contractId
                                   AND ( BB.inOutTransition = \'O\' OR BB.isclosecontract IS TRUE )
                              ORDER BY stateTime DESC LIMIT 1 ) ';
        }

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for all person contracts
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupPersonContract($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $personId = $lookup->getFilterValue( 'personId' );
        $personName = $lookup->getFilterValue( 'personName' );
        $contractId = $lookup->getFilterValue( 'contractId' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $formationLevel = $lookup->getFilterValue( 'formationLevelId' );
        $isActiveContract = $lookup->getFilterValue( 'isActiveContract' );
        $contratosEncerrados = $lookup->getFilterValue( 'contratosEncerradosS' );

        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código do contrato', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Nome', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'courseId', $courseId, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'formationLevelId', $formationLevel, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'isActiveContract', $isActiveContract, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'contratosEncerradosS', $contratosEncerrados ) );

        global $page;
        $page->onLoad( 'document.' . $page->name . '.personName.focus()' );

        $columns = array(
                new DataGridColumn( 'contractId', _M('Código do contrato', $module ), 'right', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personName', _M('Pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'left', true, null, false ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'left', true, null, false ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'formationLevelId', _M('Código do grau de formação', $module ), 'left', true, null, true ),
                new DataGridColumn( 'class', _M('Turma', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT DISTINCT A.contractId,
                       A.personId as personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       F.description AS turnDescription,
                       A.unitId,
                       G.description AS unitDescription,
                       C.formationLevelId,
                       B.cityId,
                       H.name as cityName,
                       I.name as countryName,
                       B.zipCode,
                       J.name || \' \' || B.location AS location,
                       B.number,
                       B.complement,
                       B.neighborhood,
                       getcontractclassid(A.contractId) AS class
                  FROM unit_acdContract A
        LEFT JOIN ONLY basPhysicalPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn F
                    ON (F.turnId = A.turnId)
             LEFT JOIN basUnit G
                    ON (G.unitId = A.unitId)
             LEFT JOIN basCity H
                    ON (H.cityId = B.cityId)
             LEFT JOIN basCountry I
                    ON (I.countryId = H.countryId)
             LEFT JOIN basState S
                    ON S.stateId = H.stateId
            INNER JOIN basLocationType J
                    ON (B.locationTypeId = J.locationTypeId) ';
        
        if ( $MIOLO->_REQUEST('contratosEncerradosS') == DB_TRUE )
        {
            $sql .= ' WHERE 1=1 ';
        }
        else
        {
            $sql .= ' WHERE ( A.conclusionDate IS NULL
                         OR A.conclusionDate > date(now()) ) ';
        }

        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $personId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) ';
            $args[] = $personName . '%';
        }
        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ? ';
            $args[] = $contractId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $courseId;
        }
        if ( strlen( $formationLevel ) > 0 )
        {
            $where .= ' AND C.formationlevelid = ? ';
            $args[] = $formationLevel;
        }
        if ( $isActiveContract == DB_TRUE )
        {
            $where .= ' AND EXISTS ( SELECT 1 
                                  FROM acdMovementContract AA
                            INNER JOIN acdStateContract BB
                                    ON (AA.stateContractId = BB.stateContractId)
                                 WHERE AA.contractId = A.contractId
                                   AND ( BB.inOutTransition = \'O\' OR BB.isclosecontract IS TRUE )
                              ORDER BY stateTime DESC LIMIT 1 ) ';
        }
        if ( strlen( $where ) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY B.name,
                           C.name,
                           A.contractId ';

        if ( strlen( $personId ) == 0 && strlen( $personName ) == 0 && strlen( $contractId ) == 0 && strlen( $courseId ) == 0 && strlen( $formationLevel ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql( );
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar contrato da pessoa', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for all actives person contracts
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteActivePersonContract($context)
    {
        $sql = 'SELECT C.contractId,
                       A.personId,
                       A.name,
                       D.courseId,
                       E.name,
                       D.courseVersion,
                       C.turnId,
                       F.description,
                       C.unitId,
                       G.description,
                       getContractClassId(C.contractId) AS pupilClassId,
                       getClassName(getContractClassId(C.contractId)) AS pupilClassName
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON (A.cityId = B.cityId)
             LEFT JOIN unit_acdContract C
                    ON (    C.personId = A.personId
                        AND (   C.conclusionDate IS NULL
                             OR C.conclusionDate > date(now()) )
                        AND (    getContractDisactivationDate(C.contractId) IS NULL )
                        AND (SELECT COUNT(*)
                               FROM unit_acdContract X
                              WHERE X.personId = A.personId
                                AND (   getContractDisactivationDate(X.contractId) IS NULL )
                                AND (X.conclusionDate IS NULL
                                     OR X.conclusionDate > date(now())) ) = 1 )


             LEFT JOIN acdCourseVersion D
                    ON (C.courseId = D.courseId
                        AND C.courseVersion = D.courseVersion)
             LEFT JOIN acdCourse E
                    ON (D.courseId = E.courseId)
             LEFT JOIN basTurn F
                    ON (F.turnId = C.turnId)
             LEFT JOIN basUnit G
                    ON (G.unitId = C.unitId)
                 WHERE A.personId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for all actives person contracts
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupActivePersonContract($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $personId = $lookup->getFilterValue( 'personId' );
        $personName = $lookup->getFilterValue( 'personName' );
        $contractId = $lookup->getFilterValue( 'contractId' );

        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        global $page;
        $page->onLoad( 'document.' . $page->name . '.personName.focus()' );

        $columns = array(
                new DataGridColumn( 'contractId', _M('Código do contrato', $module ), 'right', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personName', _M('Pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'left', true, null, false ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'left', true, null, false ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'class', _M('Turma', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT DISTINCT A.contractId,
                       A.personId as personId,
                       B.name as personName,
                       A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       F.description AS turnDescription,
                       A.unitId,
                       G.description AS unitDescription,
                       getContractClassId(A.contractId) AS pupilClassId,
                       getClassName(getContractClassId(A.contractId)) AS pupilClassName,
                       getcontractclassid(A.contractId) AS class
                  FROM unit_acdContract A
        LEFT JOIN ONLY basPhysicalPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn F
                    ON (F.turnId = A.turnId)
             LEFT JOIN basUnit G
                    ON (G.unitId = A.unitId)
                 WHERE (    A.conclusionDate IS NULL
                         OR A.conclusionDate > date(now()) )
                   AND (    getContractDisactivationDate(A.contractId) IS NULL )';

        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $personId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) ';
            $args[] = $personName . '%';
        }
        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ? ';
            $args[] = $contractId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY A.contractId ';

        if ( strlen( $personId ) == 0 && strlen( $personName ) == 0 && strlen( $contractId ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql( );
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar contrato da pessoa', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for test end course type
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteTestEndCourseType($context)
    {
        $sql = 'SELECT A.description
                  FROM acdTestEndCourseType A
                 WHERE A.testEndCourseTypeId = ? ';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for certified type
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupTestEndCourseType($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $testEndCourseTypeId = $lookup->getFilterValue( 'testEndCourseTypeId' );
        $description = $lookup->getFilterValue( 'testEndCourseTypeDescription' );

        $lookup->addFilterField( new MTextField( 'testEndCourseTypeId', $testEndCourseTypeId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'testEndCourseTypeDescription', $testEndCourseTypeDescription, _M('Tipo de avaliação do MEC', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'testEndCourseTypeId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'description', _M('Tipo de avaliação do MEC', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.testEndCourseTypeId,
                       A.description
                  FROM acdTestEndCourseType A';

        if ( strlen( $testEndCourseTypeId ) > 0 )
        {
            $where .= ' AND A.testEndCourseTypeId = ?';
            $args[] = $testEndCourseTypeId;
        }
        if ( strlen( $description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar tipo da avaliação do MEC', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for degree
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteDegree($context)
    {
        $sql = 'SELECT B.periodId,
                       B.courseId,
                       B.courseVersion,
                       B.turnId,
                       B.unitId,
                       B.courseId || \'/\' || B.courseVersion || \' - \' || C.name as courseDescription,
                       D.description as unitDescription,
                       E.description as turnDescription,
                       A.degreeNumber,
                       A.description,
                       A.weight,
                       A.parentDegreeId,
                       (SELECT AA.description FROM acdDegree AA WHERE AA.degreeId = A.parentDegreeId) as parentDescription,
                       TO_CHAR(A.limitDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS limitDate,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdDegree A
            INNER JOIN unit_acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdCourse C
                    ON (C.courseId = B.courseId)
            INNER JOIN basUnit D
                    ON (D.unitId = B.unitId)
            INNER JOIN basTurn E
                    ON (E.turnId = B.turnId)
                 WHERE A.degreeId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for degree
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupDegree($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $degreeId = $lookup->getFilterValue( 'degreeId' );
        $learningPeriodId = $lookup->getFilterValue( 'learningPeriodId' );
        $periodId = $lookup->getFilterValue( 'periodId' );
        $description = $lookup->getFilterValue( 'description' );
        $degreeNumber = $lookup->getFilterValue( 'degreeNumber' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $unitId = $lookup->getFilterValue( 'unitId' );
        $turnId = $lookup->getFilterValue( 'turnId' );

        $lookup->addFilterField( new MTextField( 'degreeId', $degreeId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'description', $description, _M('Grau acadêmico', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'periodId', $learningPeriodId, _M('Período', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( fields::turn( $turnId ) );
        $lookup->addFilterField( fields::unit( $unitId ) );
        $lookup->addFilterField( new MTextField( 'learningPeriodId', $learningPeriodId, _M('Período letivo', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );

        $columns = array(
                new MDataGridColumn( 'degreeId', _M('Código do grau acadêmico', $module ), 'right', true, null, false, null, true ),
                new MDataGridColumn( 'periodId', _M('Período', $module ), 'right', true, null, true, null, true ),
                new MDataGridColumn( 'courseId', _M('Código do curso', $module ), 'right', true, null, false, null, true ),
                new MDataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'right', true, null, false, null, true ),
                new MDataGridColumn( 'turnId', _M('Código do turno', $module ), 'right', true, null, false, null, true ),
                new MDataGridColumn( 'unitId', _M('Código da unidade', $module ), 'right', true, null, false, null, true ),
                new MDataGridColumn( 'courseDescription', _M('Curso', $module ), 'left', false, null, true, null, true ),
                new MDataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true, null, true ),
                new MDataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true, null, true ),
                new MDataGridColumn( 'degreeNumber', _M('Número', $module ), 'right', true, null, true, null, true ),
                new MDataGridColumn( 'description', _M('Descrição', $module ), 'left', false, null, true, null, true ),
                new MDataGridColumn( 'weight', _M('Peso', $module ), 'right', true, null, true, null, true ),
                new MDataGridColumn( 'parentDegreeId', _M('Código do grau pai', $module ), 'right', true, null, false, null, true ),
                new MDataGridColumn( 'parentDescription', _M('Grau pai', $module ), 'left', true, null, true, null, true ),
                new MDataGridColumn( 'limitDate', _M('Data limite', $module ), 'left', true, null, true, null, true )
        );

        $sql = 'SELECT A.degreeId,
                       B.periodId,
                       B.courseId,
                       B.courseVersion,
                       B.turnId,
                       B.unitId,
                       B.courseId || \'/\' || B.courseVersion || \' - \' || C.name as courseDescription,
                       D.description as unitDescription,
                       E.description as turnDescription,
                       A.degreeNumber,
                       A.description,
                       A.weight,
                       A.parentDegreeId,
                       (SELECT AA.description FROM acdDegree AA WHERE AA.degreeId = A.parentDegreeId) as parentDescription,
                       TO_CHAR(A.limitDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS limitDate,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdDegree A
            INNER JOIN unit_acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdCourse C
                    ON (C.courseId = B.courseId)
            INNER JOIN basUnit D
                    ON (D.unitId = B.unitId)
            INNER JOIN basTurn E
                    ON (E.turnId = B.turnId)';

        if ( strlen( $degreeId ) > 0 )
        {
            $where .= ' AND A.degreeId = ?';
            $args[] = $degreeId;
        }
        if ( strlen( $learningPeriodId ) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $learningPeriodId;
        }
        if ( strlen( $description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }
        if ( strlen( $degreeNumber ) > 0 )
        {
            $where .= ' AND A.degreeNumber = ?';
            $args[] = $degreeNumber;
        }
        if ( strlen( $periodId ) > 0 )
        {
            $where .= ' AND B.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND B.courseId ILIKE ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(C.name) ILIKE UNACCENT(?) OR UNACCENT(C.shortName) ILIKE UNACCENT(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY B.periodId, B.courseId, B.courseVersion, B.unitId, B.turnId, A.degreeNumber';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar grau acadêmico', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    
    }
    
    /**
     * Auto complete for degree
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     **/
    public function autoCompleteEvaluation($context)
    {
        $sql = 'SELECT F.evaluationid, B.periodId || \' - \' || B.courseId
                  FROM acdDegree A
            INNER JOIN unit_acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdCourse C
                    ON (C.courseId = B.courseId)
            INNER JOIN basUnit D
                    ON (D.unitId = B.unitId)
            INNER JOIN basTurn E
                    ON (E.turnId = B.turnId)
            INNER JOIN unit_acdEvaluation F
                    ON (F.degreeid = A.degreeid)
                 WHERE F.evaluationid = ?';
        
        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for degree
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     **/
    public function lookupEvaluation($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );
        
        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );
        
        $degreeId = $lookup->getFilterValue( 'degreeId' );
        $learningPeriodId = $lookup->getFilterValue( 'learningPeriodId' );
        $periodId = $lookup->getFilterValue( 'periodId' );
        $description = $lookup->getFilterValue( 'description' );
        $degreeNumber = $lookup->getFilterValue( 'degreeNumber' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $unitId = $lookup->getFilterValue( 'unitId' );
        $turnId = $lookup->getFilterValue( 'turnId' );
        
        $lookup->addFilterField( new MTextField( 'degreeId', $degreeId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'description', $description, _M('Grau acadêmico', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'periodId', $learningPeriodId, _M('Período', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( fields::turn( $turnId ) );
        $lookup->addFilterField( fields::unit( $unitId ) );
        $lookup->addFilterField( new MTextField( 'learningPeriodId', $learningPeriodId, _M('Período letivo', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        
        $columns = array( 
                new MDataGridColumn( 'degreeId', _M('Código do grau acadêmico', $module ), 'right', true, null, false, null, true ), 
                new MDataGridColumn( 'periodId', _M('Período', $module ), 'right', true, null, true, null, true ), 
                new MDataGridColumn( 'courseId', _M('Código do curso', $module ), 'right', true, null, false, null, true ), 
                new MDataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'right', true, null, false, null, true ), 
                new MDataGridColumn( 'turnId', _M('Código do turno', $module ), 'right', true, null, false, null, true ), 
                new MDataGridColumn( 'unitId', _M('Código da unidade', $module ), 'right', true, null, false, null, true ), 
                new MDataGridColumn( 'courseDescription', _M('Curso', $module ), 'left', false, null, true, null, true ), 
                new MDataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true, null, true ), 
                new MDataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true, null, true ), 
                new MDataGridColumn( 'degreeNumber', _M('Número', $module ), 'right', true, null, true, null, true ), 
                new MDataGridColumn( 'description', _M('Descrição', $module ), 'left', false, null, true, null, true ), 
                new MDataGridColumn( 'weight', _M('Peso', $module ), 'right', true, null, true, null, true ), 
                new MDataGridColumn( 'parentDegreeId', _M('Código do grau pai', $module ), 'right', true, null, false, null, true ), 
                new MDataGridColumn( 'parentDescription', _M('Grau pai', $module ), 'left', true, null, true, null, true ), 
                new MDataGridColumn( 'limitDate', _M('Data limite', $module ), 'left', true, null, true, null, true ) 
        );
        
        $sql = 'SELECT F.evaluationid,
                       B.periodId || \' - \' || B.courseId,
                       B.courseVersion,
                       B.turnId,
                       B.unitId,
                       B.courseId || \'/\' || B.courseVersion || \' - \' || C.name as courseDescription,
                       D.description as unitDescription,
                       E.description as turnDescription,
                       A.degreeNumber,
                       A.description,
                       A.weight,
                       A.parentDegreeId
                  FROM acdDegree A
            INNER JOIN unit_acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdCourse C
                    ON (C.courseId = B.courseId)
            INNER JOIN basUnit D
                    ON (D.unitId = B.unitId)
            INNER JOIN basTurn E
                    ON (E.turnId = B.turnId)
            INNER JOIN unit_acdEvaluation F
                    ON (F.degreeid = A.degreeid)';
        
        if ( strlen( $degreeId ) > 0 )
        {
            $where .= ' AND A.degreeId = ?';
            $args[] = $degreeId;
        }
        if ( strlen( $learningPeriodId ) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $learningPeriodId;
        }
        if ( strlen( $description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }
        if ( strlen( $degreeNumber ) > 0 )
        {
            $where .= ' AND A.degreeNumber = ?';
            $args[] = $degreeNumber;
        }
        if ( strlen( $periodId ) > 0 )
        {
            $where .= ' AND B.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND B.courseId ILIKE ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(C.name) ILIKE UNACCENT(?) OR UNACCENT(C.shortName) ILIKE UNACCENT(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $unitId;
        }
        
        if ( strlen( $where ) > 0 )
        {
            $sql .= $where;
        }
        
        $sql .= ' ORDER BY B.periodId, B.courseId, B.courseVersion, B.unitId, B.turnId, A.degreeNumber';
        
        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar Avaliação', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    
    }

    /**
     * Auto complete for states contract
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteReason($context)
    {
        $sql = 'SELECT A.description,
                       A.stateContractId
                  FROM acdReason A
                 WHERE A.reasonId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupReason($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $reasonId = $lookup->getFilterValue( 'reasonId' );
        $description = $lookup->getFilterValue( 'description' );
        $stateContractId = $lookup->getFilterValue( 'stateContractId' );

        $lookup->addFilterField( new MTextField( 'reasonId', $reasonId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'description', $description, _M('Motivo', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $business = new BusinessAcademicBusStateContract();
        $lookup->addFilterField( new MComboBox( 'stateContractId', $stateContractId, _M('Código dos estados contratuais', $module ), $business->listStateContract() ) );

        global $page;
        $page->onLoad( 'document.' . $page->name . '.description.focus()' );

        $columns = array(
                new DataGridColumn( 'reasonId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'description', _M('Motivo', $module ), 'left', true, null, true ),
                new DataGridColumn( 'stateContractId', _M('Código dos estados contratuais', $module ), 'right', true, null, true ),
                new DataGridColumn( 'stateContract', _M('Estados do contrato', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.reasonId,
                       A.description,
                       A.stateContractId,
                       B.description as stateContract
                  FROM acdReason A
             LEFT JOIN acdStateContract B
                    ON ( A.stateContractId = B.stateContractid ) ';

        if ( strlen( $reasonId ) > 0 )
        {
            $where .= ' AND A.reasonId = ?';
            $args[] = $reasonId;
        }
        if ( strlen( $description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }
        if ( strlen( $stateContractId ) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $stateContractId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar motivo', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for interchange type
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteInterchangeType($context)
    {
        $sql = 'SELECT A.interchangeTypeId,
                       A.description AS interchangeTypeDescription
                     FROM acdInterchangeType A
                 WHERE A.interchangeTypeId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for interchange type
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupInterchangeType($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $interchangeTypeId = $lookup->getFilterValue( 'interchangeTypeId' );
        $description = $lookup->getFilterValue( 'description' );

        $lookup->addFilterField( new MTextField( 'interchangeTypeId', $interchangeTypeId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'description', $description, _M('Tipo de intercâmbio', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'interchangeTypeId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'description', _M('Tipo de intercâmbio', $module ), 'left', true, null, true )
        );

        $sql = ' SELECT A.interchangeTypeId,
                       A.description
                  FROM acdInterchangeType A';

        if ( strlen( $interchangeTypeId ) > 0 )
        {
            $where .= ' AND A.interchangeTypeId = ?';
            $args[] = $interchangeTypeId;
        }
        if ( strlen( $description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar tipo de intercâmbio', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for knowledge area
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteKnowledgeArea($context)
    {
        $sql = 'SELECT A.name AS knowledgeAreaName
                  FROM acdKnowledgeArea A
                 WHERE A.knowledgeAreaId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for knowledge area
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupKnowledgeArea($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $knowledgeAreaId = $lookup->getFilterValue( 'knowledgeAreaId' );
        $knowledgeAreaName = $lookup->getFilterValue( 'knowledgeAreaName' );

        $lookup->addFilterField( new MTextField( 'knowledgeAreaId', $knowledgeAreaId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'knowledgeAreaName', $knowledgeAreaName, _M('Área de conhecimento', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'knowledgeAreaId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'knowledgeAreaName', _M('Área de conhecimento', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.knowledgeAreaId,
                       A.name AS knowledgeAreaName
                  FROM acdKnowledgeArea A';

        if ( strlen( $knowledgeAreaId ) > 0 )
        {
            $where .= ' AND A.knowledgeAreaId = ?';
            $args[] = $knowledgeAreaId;
        }
        if ( strlen( $knowledgeAreaName ) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $knowledgeAreaName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.name';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar área de conhecimento', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }
    
    /**
     * Auto complete for curricular component (ignoring version)
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteCurricularComponentSimple($context)
    {
        $sql = 'SELECT X.curricularComponentId AS curricularComponentId,
                       X.name AS curricularComponentName
                  FROM acdCurricularComponent X
                 WHERE X.curricularComponentId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for curricular component (ignoring version)
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupCurricularComponentSimple($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $curricularComponentId = $lookup->getFilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getFilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getFilterValue( 'curricularComponentName' );

        $lookup->addFilterField( new MTextField( 'curricularComponentId', $curricularComponentId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $curricularComponentVersion, _M('Versão', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $curricularComponentName, _M('Disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'curricularComponentId', _M('Código', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentVersion', _M('Versão', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Cursos atrelados', $module ), 'left', true, null, true )
        );

        $sql = "SELECT A.curricularComponentId,
                       A.name AS curricularComponentName,
                       ARRAY_TO_STRING( ARRAY( SELECT B.courseId
                                                 FROM unit_acdcurriculum B
                                                WHERE A.curricularComponentId = B.curricularComponentId 
                                             GROUP BY 1 ), ', ') 
                       AS courseId
                  FROM acdCurricularComponent A ";

        if ( strlen( $curricularComponentId ) > 0 )
        {
            $where .= ' AND A.curricularComponentId ILIKE ?';
            $args[] = $curricularComponentId;
        }

        if ( strlen( $curricularComponentVersion ) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }

        if ( strlen( $curricularComponentName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(A.name) ILIKE UNACCENT(?) OR UNACCENT(A.shortName) ILIKE UNACCENT(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.name,
                           A.curricularComponentVersion DESC';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar disciplina', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }
    

    /**
     * Auto complete for curricular component
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteCurricularComponent($context)
    {
        $sql = 'SELECT A.curricularComponentVersion AS curricularComponentVersion,
                       A.name AS curricularComponentName
                  FROM acdCurricularComponent X
             LEFT JOIN acdCurricularComponent A
                    ON ( X.curricularComponentId = A.curricularComponentId AND
                         ( SELECT COUNT(*)
                             FROM acdCurricularComponent Y
                            WHERE Y.curricularComponentId = X.curricularComponentId ) = 1 )
                 WHERE X.curricularComponentId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for curricular component
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupCurricularComponent($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );
        
        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $curricularComponentId = $lookup->getFilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getFilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getFilterValue( 'curricularComponentName' );

        $lookup->addFilterField( new MTextField( 'curricularComponentId', $curricularComponentId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $curricularComponentVersion, _M('Versão', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $curricularComponentName, _M('Disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        
        $columns = array(
                new DataGridColumn( 'curricularComponentId', _M('Código', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentVersion', _M('Versão', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Cursos atrelados', $module ), 'left', true, null, true )
        );

        $sql = "SELECT A.curricularComponentId,
                       A.curricularComponentVersion,
                       A.name AS curricularComponentName,
                       ARRAY_TO_STRING( ARRAY( SELECT B.courseId
                                                 FROM unit_acdcurriculum B
                                                WHERE A.curricularComponentId = B.curricularComponentId 
                                             GROUP BY 1 ), ', ') 
                       AS courseId
                  FROM acdCurricularComponent A ";

        if ( strlen( $curricularComponentId ) > 0 )
        {
            $where .= ' AND A.curricularComponentId ILIKE ?';
            $args[] = $curricularComponentId;
        }

        if ( strlen( $curricularComponentVersion ) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }

        if ( strlen( $curricularComponentName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(A.name) ILIKE UNACCENT(?) OR UNACCENT(A.shortName) ILIKE UNACCENT(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.name,
                           A.curricularComponentVersion DESC';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar disciplina', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }
    

    /**
     * Auto complete for curricular component
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteCurricularComponentNew($context)
    {
        $sql = "SELECT A.curricularComponentVersion || ' - ' || A.name AS curricularComponentName
                  FROM acdCurricularComponent X
             LEFT JOIN acdCurricularComponent A
                    ON ( X.curricularComponentId = A.curricularComponentId AND
                         ( SELECT COUNT(*)
                             FROM acdCurricularComponent Y
                            WHERE Y.curricularComponentId = X.curricularComponentId ) = 1 )
                 WHERE X.curricularComponentId = ?";

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for curricular component
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupCurricularComponentNew($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );
        
        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $MIOLO->page->onLoad( 'document.' . $MIOLO->page->name . '.curricularComponentName.focus()' );
        
        $curricularComponentId = $lookup->getFilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getFilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getFilterValue( 'curricularComponentName' );

        $lookup->addFilterField( new MTextField( 'curricularComponentId', $curricularComponentId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $curricularComponentVersion, _M('Versão', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $curricularComponentName, _M('Disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'curricularComponentId', _M('Código', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentVersion', _M('Versão', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Cursos atrelados', $module ), 'left', true, null, true )
        );

        $sql = "SELECT A.curricularComponentId,
                       A.curricularComponentVersion || ' - ' || A.name AS curricularComponentName,
                       ARRAY_TO_STRING( ARRAY( SELECT B.courseId
                                                 FROM unit_acdcurriculum B
                                                WHERE A.curricularComponentId = B.curricularComponentId 
                                             GROUP BY 1 ), ', ') 
                       AS courseId
                  FROM acdCurricularComponent A ";

        if ( strlen( $curricularComponentId ) > 0 )
        {
            $where .= ' AND A.curricularComponentId ILIKE ?';
            $args[] = $curricularComponentId;
        }

        if ( strlen( $curricularComponentVersion ) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }

        if ( strlen( $curricularComponentName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(A.name) ILIKE UNACCENT(?) OR UNACCENT(A.shortName) ILIKE UNACCENT(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.name,
                           A.curricularComponentVersion DESC';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar disciplina', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for curriculum
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteCurriculum($context)
    {
        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.shortname AS courseName,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.unitId,
                       D.description  AS unitDescription
                  FROM unit_acdcurriculum A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)
             LEFT JOIN basUnit D
                    ON (A.unitId = D.unitId)
                 WHERE A.curriculumId = ?
                   AND C.endDate IS NULL';
        
        // Ignorar multi-unidade
        if ( MIOLO::_REQUEST('ignorarUnidade') == DB_TRUE )
        {
            $sql = str_replace('unit_', '', $sql);
        }
        
        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for curriculum
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupCurriculum($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $curriculumId = $lookup->getfilterValue( 'curriculumId' );
        $courseId = $lookup->getfilterValue( 'courseId' );
        $courseId = strlen( $courseId ) > 0 ? $courseId : $learningPeriod->courseId;
        $courseVersion = $lookup->getfilterValue( 'courseVersion' );
        $courseVersion = strlen( $courseVersion ) > 0 ? $courseVersion : $learningPeriod->courseVersion;
        $courseName = $lookup->getfilterValue( 'courseName' );
        $curricularComponentId = $lookup->getfilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getfilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getfilterValue( 'curricularComponentName' );
        $semester = $lookup->getfilterValue( 'semester' );
        $turnId = $lookup->getfilterValue( 'turnId' );
        $unitId = $lookup->getfilterValue( 'unitId' );
        $ignorarUnidade = $lookup->getFilterValue( 'ignorarUnidade' );

        $lookup->addFilterField( new MTextField( 'curriculumId', $curriculumId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'turnId', $turnId, _M('Turno', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'unitId', $unitId, _M('Unidade', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentId', $curricularComponentId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $curricularComponentVersion, _M('Versão da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $curricularComponentName, _M('Disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'semester', $semester, _M('Semestre', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new SHiddenField( 'ignorarUnidade', $ignorarUnidade, _M('Ignorar Multi-Unidade', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        
        $columns = array(
                new DataGridColumn( 'curriculumId', _M('Código do currículo', $module ), 'right', true, null, false ),
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentVersion', _M('Versão da disciplina', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'semester', _M('Semestre', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'right', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'right', true, null, false ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'right', true, null, false ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'ignorarUnidade', _M('Ignorar Multi-Unidade'), 'left', true, null, false )
        );
        
        $sql = 'SELECT A.curriculumId,
                       A.courseId,
                       A.courseVersion,
                       B.shortName AS courseName,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.shortName AS curricularComponentName,
                       A.unitId,
                       getUnitDescription(A.unitId) as unitDescription,
                       A.turnId,
                       getTurnDescription(A.turnId) as turnDescription,
                       A.semester
                  FROM unit_acdcurriculum A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)';

        if ( strlen( $curriculumId ) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $curriculumId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(B.name) ILIKE UNACCENT(?) OR UNACCENT(B.shortName) ILIKE UNACCENT(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $curricularComponentId ) > 0 )
        {
            $where .= ' AND A.curricularComponentId ILIKE ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen( $curricularComponentVersion ) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen( $curricularComponentName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(C.name) ILIKE UNACCENT(?) OR UNACCENT(C.shortName) ILIKE UNACCENT(?) )';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }
        if ( strlen( $semester ) > 0 )
        {
            $where .= ' AND A.semester = ?';
            $args[] = $semester;
        }
        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }

        $where .= ' AND C.endDate IS NULL';

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY B.name,
                           C.name';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        
        // Ignorar multi-unidade
        if ( $ignorarUnidade == DB_TRUE )
        {
            $sql = str_replace('unit_', '', $sql);
        }
        
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar currículo', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }
    
    /**
     * Utilizado inicialmente no FrmEnroll.class
     *
     */
    public function autoCompleteCurriculumSimple($context)
    {        
        $sql = 'SELECT C.curricularComponentId || \' - \' || C.name AS curricularComponentName
                  FROM unit_acdcurriculum A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)
             LEFT JOIN basUnit D
                    ON (A.unitId = D.unitId)
                 WHERE A.curriculumId = ? ';

        // Filtros obrigatorios - a tela que utiliza este lookup deve permitir apenas registros com os filtros passados
        $passFilters = array(
            MIOLO::_REQUEST('courseId'),
            MIOLO::_REQUEST('courseVersion'),
            MIOLO::_REQUEST('turnId'),
            MIOLO::_REQUEST('unitId'),
        );
        
        // Verifica se valores estao presentes e caso positivo aplica os filtros..
        if ( count(array_filter($passFilters)) == count($passFilters) )
        {
            $passFilters[0] = "'{$passFilters[0]}'";
            $passFilters = implode(',', $passFilters);
            
            $sql .= ' AND (A.courseId, A.courseVersion, A.turnId, A.unitId) = (' . $passFilters . ') ';
        }
        
        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Utilizado inicialmente no FrmEnroll.class
     *
     */
    public function lookupCurriculumSimple($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $curriculumId = $lookup->getfilterValue( 'curriculumId' );
        $courseId = $lookup->getfilterValue( 'courseId' );
        $courseId = strlen( $courseId ) > 0 ? $courseId : $learningPeriod->courseId;
        $courseVersion = $lookup->getfilterValue( 'courseVersion' );
        $courseVersion = strlen( $courseVersion ) > 0 ? $courseVersion : $learningPeriod->courseVersion;
        $courseName = $lookup->getfilterValue( 'courseName' );
        $curricularComponentId = $lookup->getfilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getfilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getfilterValue( 'curricularComponentName' );
        $semester = $lookup->getfilterValue( 'semester' );
        $turnId = $lookup->getfilterValue( 'turnId' );
        $unitId = $lookup->getfilterValue( 'unitId' );
        $curriculumTypeId = $lookup->getfilterValue( 'curriculumTypeId' );

        $lookup->addFilterField( new MTextField( 'curriculumId', $curriculumId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentId', $curricularComponentId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $curricularComponentVersion, _M('Versão da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $curricularComponentName, _M('Disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'semester', $semester, _M('Semestre', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'unitId', $unitId, _M('Unidade', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'turnId', $semester, _M('Turno', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'curriculumTypeId', $curriculumTypeId, _M('Categoria do currículo', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
      
        $columns = array(
                new DataGridColumn( 'curriculumId', _M('Código do currículo', $module ), 'right', true, null, true ),
                new DataGridColumn( 'description', _M('Código da disciplina', $module ), 'left', true, null, false ),
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentVersion', _M('Versão da disciplina', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'semester', _M('Semestre', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'right', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'right', true, null, false ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'right', true, null, false ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true )
            
        );

        $sql = 'SELECT A.curriculumId,
                       C.curricularComponentId || \' - \' || C.name AS description,
                       A.curricularComponentId AS curricularComponentId,
                       A.courseId,
                       A.courseVersion,
                       B.shortName AS courseName,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.unitId,
                       getUnitDescription(A.unitId) as unitDescription,
                       A.turnId,
                       getTurnDescription(A.turnId) as turnDescription,
                       A.semester
                  FROM unit_acdcurriculum A
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)';

        if ( strlen( $curriculumId ) > 0 )
        {
            $where .= ' AND A.curriculumId = ?';
            $args[] = $curriculumId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(B.name) ILIKE UNACCENT(?) OR UNACCENT(B.shortName) ILIKE UNACCENT(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $curricularComponentId ) > 0 )
        {
            $where .= ' AND A.curricularComponentId ILIKE ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen( $curricularComponentVersion ) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen( $curricularComponentName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(C.name) ILIKE UNACCENT(?) OR UNACCENT(C.shortName) ILIKE UNACCENT(?) )';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }
        if ( strlen( $semester ) > 0 )
        {
            $where .= ' AND A.semester = ?';
            $args[] = $semester;
        }
        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }

        $where .= ' AND C.endDate IS NULL';
        
        if ( strlen( $curriculumTypeId ) > 0 )
        {
            $where .= ' AND A.curriculumTypeId = ?';
            $args[] = $curriculumTypeId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY B.name,
                           C.name';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar currículo', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for group
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteGroup($context)
    {
        $sql = 'SELECT B3.shortName AS groupGroupName,                       
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName as courseName,
                       B2.curricularComponentVersion,
                       B5.periodId,                       
                       B3.shortName as curricularComponentName,
                       B5.learningPeriodId,
                       B2.curricularComponentId,
                       B.classId as classId,
                       B.totalEnrolled || \'/\' || B.vacant,
                       B2.turnId,
                       getturndescription(B2.turnId) as turnDescription,
                       B2.unitId,
                       getunitdescription(B2.unitId) as unitDescription
                  FROM unit_acdGroup B
            INNER JOIN unit_acdcurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN unit_acdlearningperiod B5
                    ON ( B.learningPeriodId = B5.learningPeriodId )
                 WHERE B.groupId = ? ';


        $curricularComponentTypeId = MIOLO::_REQUEST('_curricularComponentTypeId');
        if ( strlen($curricularComponentTypeId) > 0 )
        {
            $sql .= " AND B2.curricularComponentTypeId = '{$curricularComponentTypeId}' ";
        }

        $sql .= ' ORDER BY B2.curricularComponentVersion DESC
                 LIMIT 1';
        
        // Ignorar multi-unidade
        if ( MIOLO::_REQUEST('ignorarUnidade') == DB_TRUE )
        {
            $sql = str_replace('unit_', '', $sql);
        }

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for group
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupGroup($lookup, $prefixCode = false)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );
        
        $MIOLO->page->onLoad( 'document.' . $MIOLO->page->name . '.curricularComponentName.focus()' );

        $groupId = $lookup->getfilterValue( 'groupId' );
        $periodId = $lookup->getfilterValue( 'periodId' );
        $learningPeriodId = $lookup->getfilterValue( 'learningPeriodId' );
        $courseId = $lookup->getfilterValue( 'courseId' );
        $courseVersion = $lookup->getfilterValue( 'courseVersion' );
        $courseName = $lookup->getfilterValue( 'courseName' );
        $curricularComponentId = $lookup->getfilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getfilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getfilterValue( 'curricularComponentName' );
        $curriculumTypeId = $lookup->getfilterValue( 'curriculumTypeId' );
        $className = $lookup->getfilterValue( 'className' );
        $professorId = $lookup->getFilterValue( 'professorId' );
        $curriculumId = $lookup->getFilterValue( 'curriculumId' );
        $_curricularComponentTypeId = $lookup->getFilterValue( '_curricularComponentTypeId' );
        $turnId = $lookup->getfilterValue( 'turnId' );
        $unitId = $lookup->getfilterValue( 'unitId' );
        $ignorarUnidade = $lookup->getFilterValue('ignorarUnidade');
                
        $busPeriod = new BusinessAcademicBusPeriod();
        
        $lookup->addFilterField( new MHiddenField('_curricularComponentTypeId',  $_curricularComponentTypeId) );
        $lookup->addFilterField( new MTextField( 'groupId', $groupId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MSelection( 'periodId', $periodId, _M('Período', $module ), $busPeriod->listPeriod() ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'turnId', $turnId, _M('Turno', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'unitId', $unitId, _M('Unidade', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentId', $curricularComponentId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $curricularComponentVersion, _M('Versão da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $curricularComponentName, _M('Disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $lookup->addFilterField( new MTextField( 'learningPeriodId', $learningPeriodId, _M('Período letivo', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );

        $business = new BusinessAcademicBusCurriculumType();

        $lookup->addFilterField( new MSelection( 'curriculumTypeId', $curriculumTypeId, _M('Categoria do currículo', $module ), $business->listCurriculumType() ) );

        $lookup->addFilterField( new MTextField( 'className', $className, _M('Nome da turma', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );

        $lookup->addFilterField( new MHiddenField( 'professorId', $professorId ) );

        // Ignorar multi-unidade
        $lookup->addFilterField( new SHiddenField( 'ignorarUnidade'), $ignorarUnidade );
        
        $columns = array(
                new DataGridColumn( 'groupId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'groupGroupName', _M('Nome da disciplina oferecida', $module ), 'left', false, null, true ),
                new DataGridColumn( 'periodId', _M('Período', $module ), 'left', true, null, true ),
                new DataGridColumn( 'learningPeriodId', _M('Período letivo', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentVersion', _M('Versão da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'classId', _M('Turma', $module ), 'left', true, null, true ),
                new DataGridColumn( 'vacant', _M('Vagas', $module ), 'left', true, null, true ),
                new DataGridColumn( 'ignorarUnidade', _M('Ignorar Multi-Unidade', $module ), 'left', true, null, false ),
        );
        
        $colDesc = $prefixCode ? 'B3.curricularComponentId || \' - \' || B3.shortName' : 'B3.shortName';

        $sql = 'SELECT DISTINCT B.groupId,
                       ' . $colDesc . ' AS groupGroupName,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName as courseName,
                       B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.name as curricularComponentName,
                       B5.periodId,
                       B5.learningPeriodId,
                       B.classId as classId,
                       B.totalEnrolled || \'/\' || B.vacant,
                       B2.turnId,
                       getturndescription(B2.turnId) as turnDescription,
                       B2.unitId,
                       getunitdescription(B2.unitId) as unitDescription
                  FROM unit_acdGroup B
            INNER JOIN unit_acdcurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN unit_acdlearningperiod B5
                    ON ( B.learningPeriodId = B5.learningPeriodId )
             LEFT JOIN unit_acdclass B6
                    ON (B6.classId = B.classId)
             LEFT JOIN acdSchedule B7
                     ON (B7.groupId = B.groupId)
             LEFT JOIN acdScheduleProfessor B8
                     ON (B8.scheduleId = B7.scheduleId)';

        if ( strlen( $groupId ) > 0 )
        {
            $where .= ' AND B.groupId = ?';
            $args[] = $groupId;
        }
        if ( strlen( $periodId ) > 0 )
        {
            $where .= ' AND B5.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND B2.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND B2.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(B4.name) ILIKE UNACCENT(?) OR UNACCENT(B4.shortName) ILIKE UNACCENT(?) ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $curricularComponentId ) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen( $curricularComponentVersion ) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen($_curricularComponentTypeId) > 0 )
        {
            $where .= ' AND B2.curricularComponentTypeId = ? ';
            $args[] = $_curricularComponentTypeId;
        }
        if ( strlen( $curricularComponentName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(B3.name) ILIKE UNACCENT(?) OR UNACCENT(B3.shortName) ILIKE UNACCENT(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }

        if ( strlen( $curriculumTypeId ) > 0 )
        {
            $where .= ' AND B2.curriculumTypeId = ?';
            $args[] = $curriculumTypeId;
        }

        if ( strlen( $className ) > 0 )
        {
            $where .= ' AND UNACCENT(B6.name) ILIKE UNACCENT(?)';
            $args[] = $className;
        }

        if ( strlen( $professorId ) > 0 )
        {
            $where .= ' AND B8.professorId = ?';
            $args[] = $professorId;
        }

        if ( strlen( $learningPeriodId ) > 0 )
        {
            $where .= ' AND B.learningPeriodId = ?';
            $args[] = $learningPeriodId;
        }

        if ( strlen($curriculumId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId IN (SELECT curricularComponentId FROM unit_acdcurriculum WHERE curriculumId = ?)
                        AND B2.curricularComponentVersion IN (SELECT curricularComponentVersion FROM unit_acdcurriculum WHERE curriculumId = ?)';
            $args[] = $curriculumId;
            $args[] = $curriculumId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY B.groupId';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }       
        
        // Ignorar multi-unidade
        if ( $ignorarUnidade == DB_TRUE )
        {
            $sql = str_replace('unit_', '', $sql);
        }
        
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar disciplina oferecida', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
        
        $_GET['module'] = 'academic';
        $_GET['action'] = 'groupLookup';

        $lookup->grid->header[] = '<b><center><a href="' . $MIOLO->getActionURL( 'academic', 'groupLookup', '', $_GET ) . '">' . _M('Inserir novo', 'basic' ) . '</a></center></b><br>';
    }
    
    public function autoCompleteGroupFixed($context)
    {
        $sql = 'SELECT B.groupId,
                       B3.shortName AS groupGroupName,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName as courseName,
                       B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.shortName as curricularComponentName,
                       B5.periodId,
                       B5.learningPeriodId
                  FROM unit_acdGroup B
            INNER JOIN unit_acdcurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN unit_acdlearningperiod B5
                    ON ( B.learningPeriodId = B5.learningPeriodId )
                 WHERE B.groupId = ? ';

        $sql .= ' ORDER BY B2.curricularComponentVersion DESC
                 LIMIT 1';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }
    
    public function lookupGroupFixed($lookup)
    {
        $this->lookupGroup($lookup);
    }
    
    /**
     * Lookup com "codigo - nome da disciplina" na sua descricao, diferente da original, que tem apenas nome da disciplina.
     */
    public function lookupGroupWithPrefix($lookup)
    {
        $this->lookupGroup($lookup, true);
    }

    /**
     * Lookup com "codigo - nome da disciplina" na sua descricao, diferente da original, que tem apenas nome da disciplina.
     */
    public function autoCompleteGroupWithPrefix($context)
    {
        $sql = 'SELECT B3.curricularComponentId || \' - \' || B3.name AS groupGroupName,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName as courseName,
                       B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.shortName as curricularComponentName,
                       B5.periodId,
                       B5.learningPeriodId
                  FROM unit_acdGroup B
            INNER JOIN unit_acdcurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN unit_acdlearningperiod B5
                    ON ( B.learningPeriodId = B5.learningPeriodId )
                 WHERE B.groupId = ? ';

        $sql .= ' ORDER BY B2.curricularComponentVersion DESC
                 LIMIT 1';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }
    

    /**
     * Auto complete for contract state field
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteContractStateField($context)
    {
        $sql = 'SELECT A.stateContractId,
                       B.description AS stateDescription,
                       A.description,
                       A.rows,
                       A.columns,
                       A.isLookup,
                       A.lookupName,
                       A.lookupModule,
                       A.fieldValidator,
                       A.isRequired
                  FROM acdStateContractField A
             LEFT JOIN acdStateContract B
                    ON (B.stateContractId = A.stateContractId)
                 WHERE A.stateContractFieldId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for contract state field
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupContractStateField($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $hideOptions = $lookup->getfilterValue( 'hideOptions' );
        $stateContractFieldId = $lookup->getfilterValue( 'stateContractFieldId' );
        $stateContractId = $lookup->getfilterValue( 'stateContractId' );
        $stateContractDescription = $lookup->getfilterValue( 'stateContractDescription' );
        $isRequired = $lookup->getfilterValue( 'isRequired' );
        $stateContractFieldDescription = $lookup->getfilterValue( 'stateContractFieldDescription' );

        $lookup->addFilterField( new MHiddenField( 'hideOptions', $hideOptions ) );

        if ( $hideOptions == DB_TRUE )
        {
            $lookup->addFilterField( new MHiddenField( 'stateContractId', $stateContractId ) );
        }
        else
        {
            $lookup->addFilterField( new MTextField( 'stateContractFieldId', $stateContractFieldId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
            $lookup->addFilterField( new MTextField( 'stateContractFieldDescription', $stateContractFieldDescription, _M('Campo do estado contratual', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
            $lookup->addFilterField( new MTextField( 'stateContractId', $stateContractId, _M('Código do estado contratual', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
            $lookup->addFilterField( new MTextField( 'stateContractDescription', $stateDescription, _M('Estado contratual', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
            $lookup->addFilterField( new MSelection( 'isRequired', $isRequired, _M('É obrigatório', $module ), SAGU::listYesNo() ) );
        }

        $gridColumns = array(
                new DataGridColumn( 'stateContractFieldId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'stateContractFieldDescription', _M('Campo do estado contratual', $module ), 'left', true, null, true ),
                new DataGridColumn( 'stateContractId', _M('Código do estado contratual', $module ), 'right', true, null, true ),
                new DataGridColumn( 'stateContractDescription', _M('Estado contratual', $module ), 'left', true, null, true ),
                new DataGridColumn( 'isRequired', _M('É obrigatório', $module ), 'left', true, null, true, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) )
        );

        $sql = 'SELECT A.stateContractFieldId,
                       A.stateContractId,
                       A.description as stateContractFieldDescription,
                       B.description as stateContractDescription,
                       A.rows,
                       A.columns,
                       A.isLookup,
                       A.lookupName,
                       A.lookupModule,
                       A.fieldValidator,
                       A.isRequired
                  FROM acdStateContractField A
            INNER JOIN acdStateContract B
                    ON (B.stateContractId = A.stateContractId)';

        if ( strlen( $stateContractFieldId ) > 0 )
        {
            $where .= ' AND A.stateContractFieldId = ?';
            $args[] = $stateContractFieldId;
        }
        if ( strlen( $stateContractId ) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $stateContractId;
        }
        if ( strlen( $stateContractFieldDescription ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $stateContractFieldDescription . '%';
        }
        if ( strlen( $stateContractDescription ) > 0 )
        {
            $where .= ' AND UNACCENT(B.description) ILIKE UNACCENT(?)';
            $args[] = $stateContractDescription . '%';
        }
        if ( strlen( $isRequired ) > 0 )
        {
            $where .= ' AND A.isRequired = ?';
            $args[] = $isRequired;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $gridColumns, _M('Localizar campo do estado do contrato', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    public function autoCompleteEnrollContractPerson($context)
    {

        $sql = 'SELECT A.enrollId,
                       A.groupId,
                       E.shortName AS curricularComponentName,
                       A.contractId,
                       B.courseId,
                       B.courseVersion,
                       F.shortName AS courseName,
                       B.personId,
                       G.name AS personName,
                       E.academicnumberhours,
                       E.academiccredits,
                       A.finalNote,
                       A.concept
                  FROM unit_acdEnroll A
             LEFT JOIN unit_acdContract B
                    ON (A.contractId = B.contractId)
            INNER JOIN acdCourse F
                    ON (F.courseId = B.courseId)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (G.personId = B.personId)
       INNER JOIN ONLY unit_acdGroup C
                    ON (C.groupId= A.groupId)
             LEFT JOIN unit_acdcurriculum D
                    ON (A.curriculumId = D.curriculumId)
             LEFT JOIN acdCurricularComponent E
                    ON (D.curricularComponentId= E.curricularComponentId)
                 WHERE A.enrollId = ? ';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for contract state field
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupEnrollContractPerson($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $enrollId = $lookup->getfilterValue( 'enrollId' );
        $curricularComponentId = $lookup->getfilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getfilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getfilterValue( 'curricularComponentName' );
        $contractId = $lookup->getfilterValue( 'contractId' );
        $courseId = $lookup->getfilterValue( 'courseId' );
        $courseVersion = $lookup->getfilterValue( 'courseVersion' );
        $courseName = $lookup->getfilterValue( 'courseName' );
        $personId = $lookup->getfilterValue( 'personId' );
        $personName = $lookup->getfilterValue( 'personName' );
        $notCurriculumTypeId = $lookup->getfilterValue( 'notCurriculumTypeId' );

        $lookup->addFilterField( new MTextField( 'enrollId', $enrollId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentId', $curricularComponentId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $curricularComponentVersion, _M('Versão da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $curricularComponentName, _M('Nome da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código do contrato', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Nome do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'notCurriculumTypeId', $notCurriculumTypeId, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $gridColumns = array(
                new DataGridColumn( 'enrollId', _M('Código da matrícula', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Nome da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'contractId', _M('Código do contrato', $module ), 'right', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personName', _M('Pessoa', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.enrollId,
                       E.curricularComponentId,
                       E.shortName AS curricularComponentName,
                       A.contractId,
                       B.courseId,
                       B.courseVersion,
                       F.shortName AS courseName,
                       B.personId,
                       G.name AS personName,
                       E.academicnumberhours,
                       E.academiccredits,
                       A.finalNote,
                       A.concept
                  FROM unit_acdEnroll A
             LEFT JOIN unit_acdContract B
                    ON (A.contractId = B.contractId)
            INNER JOIN acdCourse F
                    ON (F.courseId = B.courseId)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (G.personId = B.personId)
       INNER JOIN ONLY unit_acdGroup C
                    ON (C.groupId= A.groupId)
             LEFT JOIN unit_acdcurriculum D
                    ON (A.curriculumId = D.curriculumId)
             LEFT JOIN acdCurricularComponent E
                    ON (D.curricularComponentId= E.curricularComponentId)';

        if ( strlen( $enrollId ) > 0 )
        {
            $where .= ' AND A.enrollId = ?';
            $args[] = $enrollId;
        }
        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $personId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(F.name) ilike UNACCENT(?) OR UNACCENT(F.shortName) ilike UNACCENT(?) ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND G.personId = ?';
            $args[] = $personId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(G.name) ilike UNACCENT(?)';
            $args[] = $personName . '%';
        }
        if ( strlen( $curricularComponentId ) > 0 )
        {
            $where .= ' AND E.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen( $curricularComponentName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(E.name) ILIKE UNACCENT(?) OR UNACCENT(E.shortName) ILIKE UNACCENT(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }
        if ( strlen( $notCurriculumTypeId ) > 0 )
        {
            $where .= ' AND D.curriculumTypeId NOT IN (' . $notCurriculumTypeId . ')';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }
        else
        {
            $where .= ' AND A.enrollId = 0';
            $sql .= ' WHERE ' . substr( $where, 5 );
            $sql .= ' ORDER BY A.enrollId';
        }

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $gridColumns, _M('Localizar matrícula', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for contract state field
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteMovementContract($context)
    {

        $sql = 'SELECT A.contractId,
                       B.personId,
                       C.name as personName,
                       A.stateContractId,
                       D.description,
                       A.stateTime,
                       A.reasonId,
                       A.learningPeriodId
                  FROM acdMovementContract A
             LEFT JOIN unit_acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON ( B.personId = C.personId )
             LEFT JOIN acdStateContract D
                    ON (D.stateContractId = A.stateContractId)
                 WHERE A.contractId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for contract state field
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupMovementContract($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $contractId = $lookup->getfilterValue( 'contractId' );
        $personId = $lookup->getfilterValue( 'personId' );
        $stateContractId = $lookup->getfilterValue( 'stateContractId' );

        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código do contrato', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'stateContractId', $stateContractId, _M('Código do estado', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );

        $gridColumns = array(
                new DataGridColumn( 'contractId', _M('Código do contrato', $module ), 'right', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'right', true, null, true ),
                new DataGridColumn( 'personName', _M('Nome da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'stateContractId', _M('Código do estado', $module ), 'right', true, null, true ),
                new DataGridColumn( 'stateDescription', _M('Descrição do estado', $module ), 'left', true, null, true ),
                new DataGridColumn( 'stateTime', _M('Horário', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.contractId,
                       B.personId,
                       C.name as personName,
                       A.stateContractId,
                       D.description as stateDescription,
                       TO_CHAR(A.stateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\') as stateTime,
                       A.reasonId,
                       A.learningPeriodId
                  FROM acdMovementContract A
             LEFT JOIN unit_acdContract B
                    ON (B.contractId = A.contractId)
        LEFT JOIN ONLY basPerson C
                    ON (B.personId = C.personId)
             LEFT JOIN acdStateContract D
                    ON (D.stateContractId = A.stateContractId)';

        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND B.personId = ?';
            $args[] = $personId;
        }
        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen( $stateContractId ) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $stateContractId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.contractId, stateTime DESC';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $gridColumns, _M('Localizar movimentação contratual', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for event type
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteEvent($context)
    {
        $sql = 'SELECT A.description
                  FROM unit_acdEvent A
                 WHERE A.eventId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for event type
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupEvent($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $eventId = $lookup->getFilterValue( 'eventId' );
        $description = $lookup->getFilterValue( 'description' );

        $lookup->addFilterField( new MTextField( 'eventId', $eventId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'description', $description, _M('Evento', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'eventId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'description', _M('Evento', $module ), 'left', true, null, true ),
                new DataGridColumn( 'beginDate', _M('Início', $module ), 'left', true, null, true ),
                new DataGridColumn( 'endDate', _M('Fim', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.eventId,
                       A.description,
                        TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as beginDate,
                        TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as endDate
                  FROM unit_acdEvent A ';

        if ( strlen( $eventId ) > 0 )
        {
            $where .= ' AND A.eventId = ?';
            $args[] = $eventId;
        }

        if ( strlen( $description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar evento', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for state contract
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteStateContract($context)
    {
        $sql = 'SELECT A.description
                  FROM acdStateContract A
                 WHERE A.stateContractId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for state contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupStateContract($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $stateContractId = $lookup->getFilterValue( 'stateContractId' );
        $description = $lookup->getFilterValue( 'description' );

        $lookup->addFilterField( new MTextField( 'stateContractId', $stateContractId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'description', $description, _M('Estado contratual', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'stateContractId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'description', _M('Estado contratual', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.stateContractId,
                       A.description
                  FROM acdStateContract A ';

        if ( strlen( $stateContractId ) > 0 )
        {
            $where .= ' AND A.stateContractId = ?';
            $args[] = $stateContractId;
        }

        if ( strlen( $description ) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $description . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY A.description';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar estado de contrato', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Lookup for elective curricular component
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupElective($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );
        
        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $business = new BusinessAcademicBusEnroll();
        $busClass = new BusinessAcademicBusClass();
        $busTime = new BusinessAcademicBusTimeSheet();
        $busUnit = new BusinessBasicBusUnit();
        $busSchedule = new BusinessAcademicBusSchedule();

        $curricularComponentGroupElectiveId = $lookup->getFilterValue( 'curricularComponentGroupElectiveId' );
        $curricularComponentId = $lookup->getFilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getFilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getFilterValue( 'curricularComponentName' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $turnId = $lookup->getFilterValue( 'turnId' );
        $unitId = $lookup->getFilterValue( 'unitId' );
        $learningPeriodId = $lookup->getFilterValue( 'learningPeriodId' );
        $contractId = $lookup->getFilterValue( 'contractId' );
        
        $lookup->addFilterField( new MTextField( 'curricularComponentId', $curricularComponentId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $curricularComponentVersion, _M('Versão da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $curricularComponentName, _M('Nome da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'courseId', $courseId ) );
        $lookup->addFilterField( new MHiddenField( 'courseVersion', $courseVersion ) );
        $lookup->addFilterField( new MHiddenField( 'turnId', $turnId ) );
        $lookup->addFilterField( new MHiddenField( 'unitId', $unitId ) );
        $lookup->addFilterField( new MHiddenField( 'learningPeriodId', $learningPeriodId ) );
        $lookup->addFilterField( new MHiddenField( 'contractId', $contractId ) );
        $lookup->addFilterField( new MHiddenField( 'curricularComponentGroupElectiveId', $curricularComponentGroupElectiveId ) );

        $gridColumns = array(
                new DataGridColumn( 'id', _M('Código da disciplina oferecida', $module ), 'right', true, null, false ),
                new DataGridColumn( 'groupId', _M('Código da disciplina oferecida', $module ), 'right', true, null, false ),
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponent', _M('Nome da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unit', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'class', _M('Turma', $module ), 'left', true, null, true )
        );
        
        $sql = "SELECT g.groupid as id,
                       g.groupid as groupId,
                       cc.curricularcomponentid || '/' || cc.curricularcomponentversion as curricularComponentId,
                       b.name as curricularComponent,
                       u.description as unit,
                       cl.name as class
                  FROM unit_acdcurriculum cc
            INNER JOIN unit_acdgroup g
                    ON (cc.curriculumid = g.curriculumid)
            INNER JOIN unit_acdlearningperiod ll
                    ON (g.learningperiodid = ll.learningperiodid)
            INNER JOIN acdcurricularcomponent b
                    ON (b.curricularcomponentid = cc.curricularcomponentid)
                   AND (b.curricularcomponentversion = cc.curricularcomponentversion)
            INNER JOIN basunit u
                    ON (cc.unitid = u.unitid)
            INNER JOIN unit_acdclass cl
                    ON (g.classid = cl.classid)
                 WHERE (cc.curricularcomponentid, cc.curricularcomponentversion) 
                       IN (SELECT a.curricularcomponentid, 
                                  a.curricularcomponentversion
                             FROM unit_acdcurriculum a 
                            WHERE (a.courseid,
                                   a.courseversion,
                                   a.turnid,
                                   a.unitid) = (SELECT courseid,
                                                       courseversion,
                                                       turnid,
                                                       unitid
                                                  FROM unit_acdContract
                                                 WHERE contractid = ?)";
        
        unset( $where );
        $args[] = $contractId;
        
        if ( $curricularComponentGroupElectiveId != SAGU::getParameter('ACADEMIC', 'NO_GROUP_ELECTIVE_ID') )
        {
            $sql .= " AND a.curricularComponentGroupDocumentEndCourseId = ?  ";
            $args[] = $curricularComponentGroupElectiveId;
            $where .= ' ';
        }
        
        $sql .=                    " )
                   AND ll.periodid = (SELECT periodid 
                                        FROM unit_acdlearningperiod 
                                       WHERE learningperiodid = ? )
                   AND (cc.curricularComponentId || ' - ' || cc.curricularComponentVersion) NOT IN
                       (SELECT (curricularComponentId || ' - ' || curricularComponentVersion)
                          FROM unit_acdCurriculum
                         WHERE curriculumId IN (SELECT curriculumId
                                                  FROM unit_acdGroup
                                                 WHERE groupId IN (SELECT E.groupId
                                                                     FROM unit_acdEnroll E
                                                                    WHERE E.contractId = ?
                                                                      AND E.statusId IN (getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED')::INT,
                                                                                         getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED')::INT))))";
        
        $args[] = $learningPeriodId;
        $args[] = $contractId;
        
        

        if ( strlen( $curricularComponentName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(b.name) ILIKE UNACCENT(?) OR UNACCENT(b.shortName) ILIKE UNACCENT(?) ) ';
            $args[] = $curricularComponentName;
            $args[] = $curricularComponentName;
        }

        if ( strlen( $curricularComponentId ) > 0 )
        {
            $where .= ' AND cc.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        
        if ( strlen( $curricularComponentVersion ) > 0 )
        {
            $where .= ' AND cc.curricularComponentversion = ?';
            $args[] = $curricularComponentVersion;
        }
        
        if ( strlen( $where ) > 0 )
        {
            $sql .= $where;
        }

        $db = SDatabase::getInstance();
        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );        
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $gridColumns, _M('Localizar disciplina eletiva', $module ), 30, 0 );
        $lookup->grid->setIsScrollable();
    }

    /**
     * Lookup Gnuteca Bibliography
     * @global type $MIOLO
     * @param type $lookup
     */
    public function lookupGnutecaBibliography($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf( $module );

        $filters->controlNumber = $lookup->getFilterValue('controlNumber');
        $filters->content = $lookup->getFilterValue('content');

        $lookup->addFilterField(new MTextField('controlNumber', $filters->controlNumber, _M('Número de controle', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('content', $filters->content, _M('Conteúdo', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $business = new BusinessGnutecaBusGnutecaToSagu2();

        $columns = array();
        $columns[] = new DataGridColumn('controlNumber', _M('Número de controle', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('title', _M('Título', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('author', _M('Autor', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('issue', _M('Edição', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('local', _M('Local', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('publisher', _M('Editora', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('year', _M('Ano', $module), 'left', true, null, true);

        $gridData = $business->searchBibliographyData($filters);

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $gridData, $columns, _M('Pesquisar bibliografia no Gnuteca', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for disciplines not routed
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteCurriculumFaultToConclue($context)
    {
        $sql = 'SELECT DISTINCT A.curricularComponentVersion,
                                C.name AS curricularComponentName
                           FROM unit_acdcurriculum AX
                     INNER JOIN unit_acdcurriculum A
                             ON ( AX.curriculumId = A.curriculumId AND
                                  (SELECT COUNT(*)
                                     FROM acdCurricularComponent AY
                                    WHERE AY.curricularComponentId = AX.curricularComponentId) = 1
                                )
                     INNER JOIN acdCurricularComponent C
                             ON (C.curricularComponentId = A.curricularComponentId
                                 AND C.curricularComponentVersion = A.curricularComponentVersion)
                          WHERE A.curriculumTypeId NOT IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_OPTATIVE') . ')
                            AND AX.curricularComponentId = ?
                            AND C.endDate IS NULL';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for disciplines not routed
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupCurriculumFaultToConclue($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $hideContractIdField = $lookup->getFilterValue( 'hideContractIdField' );
        $checkNumberHours = $lookup->getFilterValue( 'checkNumberHours' );
        $contractId = $lookup->getFilterValue( 'contractId' );
        $specificTypeCurriculum = $lookup->getFilterValue( 'specificTypeCurriculum' ) == DB_FALSE ? DB_FALSE : DB_TRUE;
        $filters->curricularComponentId = $lookup->getFilterValue( 'curricularComponentId' );
        $filters->curricularComponentName = $lookup->getFilterValue( 'curricularComponentName' );
        $statusEnrolled = $lookup->getFilterValue( 'statusEnrolled' ) == DB_FALSE ? DB_FALSE : DB_TRUE;

        //Status of the enroll in the contract
        $statusEnrollOfTheContract = ($statusEnrolled == DB_TRUE ? SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') . ', ' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED'): SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC'));

        if ( $hideContractIdField == DB_TRUE )
        {
            $lookup->addFilterField( new MHiddenField( 'contractId', $contractId ) );
        }
        else
        {
            $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código do contrato', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        }

        $lookup->addFilterField( new MHiddenField( 'hideContractIdField', $hideContractIdField ) );
        $lookup->addFilterField( new MHiddenField( 'checkNumberHours', $checkNumberHours ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentId', $filters->curricularComponentId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $filters->curricularComponentName, _M('Nome da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'specificTypeCurriculum', $specificTypeCurriculum ) );

        $columns = array(
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponentVersion', _M('Versão da disciplina', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Nome da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curriculumId', _M('Código do currículo', $module ), 'right', true, null, false ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'right', true, null, false ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'right', true, null, false ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'right', true, null, false ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'semester', _M('Semestre', $module ), 'right', true, null, true )
        );

        $sql = 'SELECT DISTINCT
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       B.name AS curricularComponentName,
                       A.curriculumId,
                       A.courseId,
                       A.courseVersion,
                       C.name AS courseName,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.semester
                  FROM unit_acdcurriculum A
            INNER JOIN acdCurricularComponent B
                    ON (B.curricularComponentId = A.curricularComponentId AND
                        B.curricularComponentVersion = A.curricularComponentVersion)
            INNER JOIN acdCourse C
                    ON (C.courseId = A.courseId)
            INNER JOIN basTurn D
                    ON (D.turnId = A.turnId)
            INNER JOIN basUnit E
                    ON (E.unitId = A.unitId)';

        unset( $where, $args );
        //Se existe um filtro por contrato
        if ( strlen( $contractId ) > 0 )
        {
            $sql .= ' INNER JOIN unit_acdContract F
                             ON (F.courseId = A.courseId AND
                                 F.courseVersion = A.courseVersion AND
                                 F.turnId = A.turnId AND
                                 F.unitId = A.unitId)';

            $where .= ' AND F.contractId = ?';
            $args[] = $contractId;

            //Verifica se já foi cursada
            $where .= 'AND \'f\' = ';

            $where .= '(';

            $where .= ' SELECT count(AA.curriculumId) > 0
                          FROM unit_acdEnroll AA
                    INNER JOIN unit_acdcurriculum BB
                            ON ( AA.curriculumId = BB.curriculumId )
                    INNER JOIN acdCurricularComponent CC
                            ON (BB.curricularComponentId = CC.curricularComponentId AND
                                BB.curricularComponentVersion = CC.curricularComponentVersion )
                         WHERE AA.contractId   = ?
                           AND BB.curriculumId = A.curriculumId
                   AND ( (AA.statusId IN (' . $statusEnrollOfTheContract . ') ';

            $args[] = $contractId;

            //verificação de horas em aproveitamentos
            if ( $checkNumberHours == DB_TRUE )
            {
                $where .= ' AND CC.academicNumberHours = (SELECT CASE WHEN
                                                                  sum(XY.exploitationNumberHours) > 0
                                                               THEN
                                                                  sum(XY.exploitationNumberHours)
                                                               ELSE
                                                                  CC.academicNumberHours
                                                               END
                                                          FROM unit_acdExploitation XY
                                                         WHERE XY.enrollId = AA.enrollId)';
            }

            $where .= ') ';

            //verificação de concorrências
            $where .= ' OR AA.curriculumId
                        IN (SELECT CD.curriculumId
                              FROM unit_acdcurriculum CD
                             WHERE CD.courseId = A.courseId
                               AND (CD.curriculumId
                                IN (SELECT CR.curriculumInId
                                      FROM unit_acdCurriculumConcurrence CR
                                     WHERE CR.curriculumOutId
                                        IN (SELECT CE.curriculumId
                                              FROM unit_acdEnroll CE
                                             WHERE CE.contractId = ?
                                               AND CE.statusId
                                                IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') . ')))
                                                OR CD.curriculumId
                                                IN (SELECT CS.curriculumOutId
                                                      FROM unit_acdCurriculumConcurrence CS
                                                     WHERE CS.curriculumInId
                                                        IN (SELECT CF.curriculumId
                                                              FROM unit_acdEnroll CF
                                                             WHERE CF.contractId = \'' . $contractId . '\'
                                                               AND CF.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') . ')))
               ))';

            $where .= ') )';

            $args[] = $contractId;
        }

        if ( $specificTypeCurriculum == DB_TRUE )
        {
            $where .= ' AND A.curriculumTypeId NOT IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_OPTATIVE') . ', ' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY') . ',' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_PROFICIENCY') . ') ';
        }
        if ( strlen( $filters->curricularComponentId ) > 0 )
        {
            $where .= ' AND B.curricularComponentId = ? ';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen( $filters->curricularComponentName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->curricularComponentName . '%';
        }

        $where .= ' AND B.endDate IS NULL ';

        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        else
        {
            $sql .= ' WHERE ' . substr( $where, 4 ) . '
                   ORDER BY B.name ASC';
        }

        $sqlObject = new sql( );

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );

        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar disciplina', $module ), 15, 0 );

        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteCurricularComponentInCurriculum($context)
    {
        $sql = 'SELECT DISTINCT A.curricularComponentVersion,
                                C.name AS curricularComponentName,
                                X.curriculumId
                           FROM unit_acdcurriculum X
                     INNER JOIN unit_acdcurriculum A
                             ON (A.curriculumId = X.curriculumId AND
                                 (SELECT COUNT(*)
                                    FROM acdCurricularComponent XA
                                   WHERE XA.curricularComponentId = X.curricularComponentId) = 1
                                )
                     INNER JOIN acdCurricularComponent C
                             ON (C.curricularComponentId = A.curricularComponentId
                                 AND C.curricularComponentVersion = A.curricularComponentVersion)
                          WHERE X.curricularComponentId = ?';

        // Ignorar multi-unidade
        if ( MIOLO::_REQUEST('ignorarUnidade') == DB_TRUE )
        {
            $sql = str_replace('unit_', '', $sql);
        }
        
        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    public function lookupCurricularComponentInCurriculum($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $filters->curricularComponentId = $lookup->getFilterValue( 'curricularComponentId' );
        $filters->curricularComponentName = $lookup->getFilterValue( 'curricularComponentName' );
        $filters->courseId = $lookup->getFilterValue( 'courseId' );
        $filters->courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $filters->courseName = $lookup->getFilterValue( 'courseName' );
        $filters->courseDescription = $lookup->getFilterValue( 'courseDescription' );
        $filters->turnId = $lookup->getFilterValue( 'turnId' );
        $filters->unitId = $lookup->getFilterValue( 'unitId' );
        $filters->curriculumTypeId = $lookup->getFilterValue( 'curriculumTypeId' );
        $filters->learningPeriodId = $lookup->getFilterValue( 'learningPeriodId' );
        $filters->isUseLearningPeriodId = $lookup->getFilterValue( 'isUseLearningPeriodId' );
        $filters->isUnShowEndDate = $lookup->getFilterValue( 'isUnShowEndDate' );
        $filters->courseIdJustOptionalCurricularComponent = $lookup->getFilterValue( 'courseIdJustOptionalCurricularComponent' );
        $filters->formationLevelId = $lookup->getFilterValue( 'formationLevelId' );
        $filters->semester = $lookup->getFilterValue('semester');
        $filters->ignorarUnidade = $lookup->getFilterValue( 'ignorarUnidade' );

        $lookup->addFilterField( new MTextField( 'curricularComponentId', $filters->curricularComponentId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $filters->curricularComponentName, _M('Nome da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $filters->courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $filters->courseName, _M('Nome do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        
        // Quando multi-unidade for ignorada monta uma seleção, já com a unidade
        // logada setada - ticket #38575
        if ( $filters->ignorarUnidade == DB_TRUE )
        {
            $unidadeLogada = sMultiUnidade::obterObjetoUnidade();
            $busUnit = new BusinessBasicBusUnit();
            
            $unit = new MSelection('unitId', $unidadeLogada->unitId, _M('Unidade', $module), $busUnit->listUnit());
        }
        else
        {
            $unit = new MTextField( 'unitId', $filters->unitId, _M('Código da unidade', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'));
        }
        
        $lookup->addFilterField( $unit );
        $lookup->addFilterField( new MTextField( 'turnId', $filters->turnId, _M('Código do turno', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new MHiddenField( 'curriculumTypeId', $filters->curriculumTypeId ) );
        $lookup->addFilterField( new MHiddenField( 'isUseLearningPeriodId', $filters->isUseLearningPeriodId ) );
        $lookup->addFilterField( new MHiddenField( 'courseDescription', $filters->isUseLearningPeriodId ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $filters->courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'courseIdJustOptionalCurricularComponent', $filters->courseIdJustOptionalCurricularComponent ) );
        $lookup->addFilterField( new MHiddenField( 'isUnShowEndDate', $filters->isUnShowEndDate ) );
        $lookup->addFilterField( new MHiddenField( 'formationLevelId', $filters->formationLevelId ) );
        $lookup->addFilterField( new MTextField( 'semester', $filters->semester, _M('Período', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField( new SHiddenField( 'ignorarUnidade', $filters->ignorarUnidade, _M('Ignorar Multi-Unidade', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        
        $columns = array(
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentVersion', _M('Versão da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curriculumId', _M('Código do currículo', $module ), 'right', true, null, false ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'right', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'right', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseDescription', _M('Modalidade do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'right', true, null, true ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'right', true, null, true ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'semester', _M('Semestre', $module ), 'center', true, null, true ),
                new DataGridColumn( 'ignorarUnidade', _M('Ignorar Multi-Unidade'), 'left', true, null, false )  
        );

        if ( strlen( $filters->isUseLearningPeriodId ) > 0 )
        {
            //utilizara periodo letivo
            $lookup->addFilterField( new MTextField( 'learningPeriodId', $filters->learningPeriodId, _M('Código do período letivo', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );

            $columns[] = new DataGridColumn( 'learningPeriodId', _M('Código do período letivo', $module ), 'center', true, null, true );
        }

        $sql = 'SELECT DISTINCT
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       F.description AS courseDescription,
                       A.turnId,
                       A.unitId,
                       A.curriculumId,
                       getTurnDescription(A.turnId) as turnDescription,
                       getUnitDescription(A.unitId) as unitDescription,
                       A.semester';

        if ( strlen( $filters->isUseLearningPeriodId ) > 0 )
        {
            if ( strlen( $filters->learningPeriodId ) > 0 )
            {
                $sql .= ' , D.learningPeriodId ';
            }
        }

        $sql .= ' FROM unit_acdcurriculum A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                   AND C.curricularComponentVersion = A.curricularComponentVersion)
            INNER JOIN acdCourseVersion E
                    ON E.courseId = A.courseId
            INNER JOIN acdCourseVersionType F
                    ON F.courseVersionTypeId = E.courseVersionTypeId';

        if ( strlen( $filters->isUseLearningPeriodId ) > 0 )
        {
            $sql .= ' INNER JOIN unit_acdGroup D
                              ON (D.curriculumId = A.curriculumId)';
        }

        if ( strlen( $filters->curriculumTypeId ) > 0 )
        {
            $where .= ' AND A.curriculumTypeId = ?::INT ';
            $args[] = $filters->curriculumTypeId;
        }
        if ( strlen( $filters->curricularComponentId ) > 0 )
        {
            $where .= ' AND C.curricularComponentId = ? ';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen( $filters->curricularComponentName ) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->curricularComponentName . '%';
        }
        if ( strlen( $filters->courseId ) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }
        if ( strlen( $filters->courseVersion ) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }
        if ( strlen( $filters->unitId ) > 0 )
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $filters->unitId;
        }
        if ( strlen( $filters->turnId ) > 0 )
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $filters->turnId;
        }
        if ( strlen( $filters->courseName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->courseName . '%';
        }
        if ( strlen( $filters->isUseLearningPeriodId ) > 0 )
        {
            if ( strlen( $filters->learningPeriodId ) > 0 )
            {
                $where .= ' AND D.learningPeriodId = ? ';
                $args[] = $filters->learningPeriodId;
            }
        }
        if ( strlen( $filters->courseIdJustOptionalCurricularComponent ) > 0 )
        {
            if ( (strlen( $filters->courseId ) > 0) && ($filters->courseId == $filters->courseIdJustOptionalCurricularComponent) )
            {
                $where .= ' AND A.curriculumTypeId NOT IN (' . SAGU::getParameter('ACADEMIC', 'SCHOLARSHIP_CURRICULUM_TYPE_NON_OPTIONAL') . ', ' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY') . ', ' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_PROFICIENCY') . ' )';
            }
        }
        if ( $filters->isUnShowEndDate == DB_TRUE )
        {
            $where .= ' AND C.endDate IS NULL ';
        }
        if ( strlen( $filters->formationLevelId ) > 0 )
        {
            $where .= ' AND B.formationLevelId = ? ';
            $args[] = $filters->formationLevelId;
        }
        if ( strlen( $filters->semester ) > 0 )
        {
            $where .= ' AND A.semester = ? ';
            $args[] = $filters->semester;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 4 );
        }

        $sql .= ' ORDER BY A.semester, B.name, C.name ASC';

        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        
        // Ignorar multi-unidade
        if ( $filters->ignorarUnidade == DB_TRUE )
        {
            $sql = str_replace('unit_', '', $sql);
        }
        
        $sqlObject = new sql( );
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );

        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar disciplina', $module ), 15, 0 );

        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteClass($context)
    {
        $acdClass          = 'unit_acdClass';
        $acdLearningPeriod = 'unit_acdLearningPeriod';
        $optionId = MIOLO::_REQUEST('optionId');
        $selectiveProcessId = MIOLO::_REQUEST('selectiveProcessId');
            
        // Recebe DB_TRUE caso solicitaç?o seja para exibir todas as turmas independente a unidade.
        if ( MIOLO::_REQUEST('allClasses') == DB_TRUE )
        {
            $acdClass          = 'acdClass';
            $acdLearningPeriod = 'acdLearningPeriod';
        }
        
        $sql = "SELECT C.name AS className,
                       C.initialLearningPeriodId,
                       LP.description
                  FROM {$acdClass} C
             LEFT JOIN {$acdLearningPeriod} LP
                    ON (C.initialLearningPeriodId = LP.learningPeriodId)
                 WHERE classId = ?";
             
        if ( strlen($optionId) > 0 )
        {
            $sql .= " AND (LP.courseId, LP.courseVersion, LP.unitId, LP.turnId) = (SELECT courseId, 
                                                                                            courseVersion, 
                                                                                            unitId, 
                                                                                            turnId 
                                                                                       FROM spr.optioncourse 
                                                                                      WHERE optionId = {$optionId}) ";
        }
        
        if ( strlen($selectiveProcessId) > 0 )
        {
            $sql .= " AND LP.periodId = (SELECT periodId FROM spr.selectiveProcess WHERE selectiveProcessId = {$selectiveProcessId}) ";
        }

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    public function lookupClass($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );
        
        $MIOLO->page->onLoad( 'document.' . $MIOLO->page->name . '.className.focus()' );

        $classId = $lookup->getFilterValue( 'classId' );
        $className = $lookup->getFilterValue( 'className' );
        $periodId = $lookup->getFilterValue( 'periodId' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $optionId = $lookup->getFilterValue('optionId');

        // Recebe DB_TRUE caso solicitaç?o seja para exibir todas as turmas independente a unidade.
        $allClasses = $lookup->getFilterValue('allClasses');

        $lookup->addFilterField( new MTextField( 'classId', $classId, _M('Código da turma', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'className', $className, _M('Nome da turma', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'periodId', $periodId, _M('Código do período', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Nome do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new SHiddenField('allClasses', $allClasses) );
        $lookup->addFilterField(new SHiddenField('optionId', $optionId));
        
        $columns = array(
                new DataGridColumn( 'classId', _M('Código da turma', $module ), 'left', true, null, true ),
                new DataGridColumn( 'className', _M('Nome da turma', $module ), 'left', true, null, true ),
                new DataGridColumn( 'periodId', _M('Código do período', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Nome do curso', $module ), 'left', true, null, true )
        );
        
        $acdClass          = 'unit_acdClass';
        $acdLearningPeriod = 'unit_acdLearningPeriod';
        
        if ( $allClasses == DB_TRUE )
        {
            $acdClass          = 'acdClass';
            $acdLearningPeriod = 'acdLearningPeriod';
        }

        $sql = "SELECT A.classId,
                       A.name AS className,
                       B.periodId,
                       B.courseId,
                       B.courseVersion,
                       getCourseShortName(B.courseId) AS courseName
                  FROM {$acdClass} A
            INNER JOIN {$acdLearningPeriod} B
                    ON (A.initialLearningPeriodId = B.learningPeriodId)";

        if ( strlen( $classId ) > 0 )
        {
            $where .= ' AND A.classId ILIKE ? ';
            $args[] = $classId . '%';
        }
        if ( strlen( $className ) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $className . '%';
        }
        if ( strlen( $periodId ) > 0 )
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $periodId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND B.courseId = ? ';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND B.courseVersion = ? ';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( getCourseShortName(B.courseId) ILIKE ? OR getCourseName(B.courseId) ILIKE ? )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        
        if ( strlen($optionId) > 0 )
        {
            $where .= ' AND (B.courseId, B.courseVersion, B.unitId, B.turnId) = (SELECT courseId, 
                                                                                        courseVersion, 
                                                                                        unitId, 
                                                                                        turnId 
                                                                                   FROM spr.optioncourse 
                                                                                  WHERE optionId = ?) ';
            $args[] = $optionId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 4 );

        }

        $sql .= ' ORDER BY A.name';

        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql( );

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );

        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por turma', $module ), 15, 0 );

        $lookup->grid->setIsScrollable();
    }

    public function autoCompletePersonByClass($context)
    {
        $sql = 'SELECT A.classId,
                       D.name AS className,
                       C.personId,
                       C.name AS personName
                  FROM unit_acdclasspupil A
            INNER JOIN unit_acdContract B
                    ON (A.contractId = B.contractId)
       INNER JOIN ONLY basPerson C
                    ON (B.personId = C.personId)
            INNER JOIN unit_acdclass D
                    ON (A.classId = D.classId)
                 WHERE B.personId = ? ';
        
        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    public function lookupPersonByClass($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $classId = $lookup->getFilterValue( 'classId' );
        $className = $lookup->getFilterValue( 'className' );
        $personId = $lookup->getFilterValue( 'personId' );
        $personName = $lookup->getFilterValue( 'personName' );

        $lookup->addFilterField( new MTextField( 'classId', $classId, _M('Código da turma', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'className', $className, _M('Nome da turma', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Nome', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'classId', _M('Código da turma', $module ), 'left', true, null, true ),
                new DataGridColumn( 'className', _M('Nome da turma', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personName', _M('Nome', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.classId,
                       D.name AS className,
                       C.personId,
                       C.name AS personName
                  FROM unit_acdclasspupil A
            INNER JOIN unit_acdContract B
                    ON (A.contractId = B.contractId)
       INNER JOIN ONLY basPerson C
                    ON (B.personId = C.personId)
            INNER JOIN unit_acdclass D
                    ON (A.classId = D.classId)';

        if ( strlen( $classId ) > 0 )
        {
            $where .= ' AND A.classId ILIKE ? ';
            $args[] = $classId . '%';
        }
        if ( strlen( $className ) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?) ';
            $args[] = $className . '%';
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND B.personId = ? ';
            $args[] = $periodId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?) ';
            $args[] = $personName;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 4 );

        }

        $sql .= ' ORDER BY D.name, C.name';

        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql( );
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por turma', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }
    
    public function autoCompleteClassCourse($context)
    {
        $sql = 'SELECT A.name AS className,
                       B.courseId,
                       B.courseVersion,
                       getCourseName(B.courseId) AS courseName,
                       B.turnId,
                       getTurnDescription(B.turnId),
                       B.unitId,
                       getUnitDescription(B.unitId)
                  FROM unit_acdclass A
            INNER JOIN unit_acdlearningperiod B
                    ON ( A.initialLearningPeriodId = B.learningPeriodId )
                 WHERE A.classId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    public function lookupClassCourse($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $classId = $lookup->getFilterValue( 'classId' );
        $className = $lookup->getFilterValue( 'className' );
        $periodId = $lookup->getFilterValue( 'periodId' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $courseName = $lookup->getFilterValue( 'courseName' );

        $lookup->addFilterField( new MTextField( 'classId', $curricularComponentId, _M('Código da turma', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'className', $className, _M('Nome da turma', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'periodId', $periodId, _M('Código do período', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Nome do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'classId', _M('Código da turma', $module ), 'left', true, null, true ),
                new DataGridColumn( 'className', _M('Nome da turma', $module ), 'left', true, null, true ),
                new DataGridColumn( 'periodId', _M('Código do período', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Nome do curso', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.classId,
                       A.name AS className,
                       B.courseId,
                       B.courseVersion,
                       getCourseName(B.courseId) AS courseName,
                       B.turnId,
                       getTurnDescription(B.turnId),
                       B.unitId,
                       getUnitDescription(B.unitId)
                  FROM unit_acdclass A
            INNER JOIN unit_acdlearningperiod B
                    ON ( A.initialLearningPeriodId = B.learningPeriodId )';

        if ( strlen( $classId ) > 0 )
        {
            $where .= ' AND A.classId ILIKE ? ';
            $args[] = $classId . '%';
        }
        if ( strlen( $className ) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?) ';
            $args[] = $className . '%';
        }
        if ( strlen( $periodId ) > 0 )
        {
            $where .= ' AND B.periodId = ? ';
            $args[] = $periodId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND B.courseId = ? ';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND B.courseVersion = ? ';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( getCourseShortName(B.courseId) ILIKE ? OR getCourseName(B.courseId) ILIKE ? )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 4 );

        }

        $sql .= ' ORDER BY A.name';

        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql( );

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );

        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por turma', $module ), 15, 0 );

        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for course occurrence to serial courses
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteCourseOccurrenceSerial($context)
    {
        $sql = 'SELECT B.courseVersion,
                       C.name AS courseName,
                       B.unitId,
                       E.description AS unitDescription,
                       B.turnId,
                       D.description AS turnDescription,
                       B.authorizationDate,
                       B.authorizationDocument,
                       B.status,
                       B.minimumConclusionCourse,
                       B.maximumConclusionCourse,
                       C.formationLevelId,
                       F.description AS formationLevelDescription
                  FROM (  SELECT courseId, MAX(courseVersion) AS courseVersion
                            FROM unit_acdcourseoccurrence
                           WHERE courseId = ?
                        GROUP BY courseId) A,
                       unit_acdCourseOccurrence B
             LEFT JOIN acdCourse C
                    ON (C.courseId = B.courseId)
             LEFT JOIN basTurn D
                    ON (D.turnId = B.turnId)
             LEFT JOIN basUnit E
                    ON (E.unitId = B.unitId)
             LEFT JOIN acdFormationLevel F
                    ON (F.formationLevelId = C.formationLevelId)
            INNER JOIN acdCourseVersion G
                    ON (G.courseVersion = B.courseVersion AND
                        G.courseId      = B.courseId)
                 WHERE B.courseId = A.courseId
                   AND B.courseVersion = A.courseVersion
                   AND G.courseVersionTypeId IN (' . SAGU::getParameter('ACADEMIC', 'ACD_COURSE_TYPE_ID_SERIAL') . ') ';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for course version
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupCourseOccurrenceSerial($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $unitId = $lookup->getFilterValue( 'unitId' );
        $unitDescription = $lookup->getFilterValue( 'unitDescription' );
        $turnId = $lookup->getFilterValue( 'turnId' );
        $turnDescription = $lookup->getFilterValue( 'turnDescription' );
        $authorizationDate = $lookup->getFilterValue( 'authorizationDate' );
        $authorizationDocument = $lookup->getFilterValue( 'authorizationDocument' );
        $status = $lookup->getFilterValue( 'status' );
        $minimumConclusionCourse = $lookup->getFilterValue( 'minimumConclusionCourse' );
        $maximumConclusionCourse = $lookup->getFilterValue( 'maximumConclusionCourse' );
        $formationLevelId = $lookup->getFilterValue( 'formationLevelId' );

        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Nome do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( fields::unit( $unitId ) );
        $lookup->addFilterField( fields::turn( $turnId ) );
        $lookup->addFilterField( new MSelection( 'status', $status, _M('Está ativo', $module ) . '?', SAGU::listYesNo() ) );
        $business = new BusinessAcademicBusFormationLevel();
        $lookup->addFilterField( new MSelection( 'formationLevelId', $formationLevelId, _M('Grau de formação', $module ), $business->listFormationLevel() ) );

        $columns = array(
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'right', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'right', true, null, true ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'right', true, null, true ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'authorizationDate', _M('Data de autorização', $module ), 'left', true, null, false ),
                new DataGridColumn( 'authorizationDocument', _M('Documento de autorização', $module ), 'left', true, null, false ),
                new DataGridColumn( 'status', _M('Está ativo', $module ), 'left', true, null, true, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) ),
                new DataGridColumn( 'minimumConclusionCourse', _M('Tempo mínimo de conclusão', $module ), 'right', true, null, true ),
                new DataGridColumn( 'maximumConclusionCourse', _M('Tempo máximo de conclusão', $module ), 'right', true, null, true ),
                new DataGridColumn( 'formationLevelId', _M('Código do grau de formação', $module ), 'right', true, null, false ),
                new DataGridColumn( 'formationLevelDescription', _M('Grau de formação', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.unitId,
                       D.description AS unitDescription,
                       A.turnId,
                       C.description AS turnDescription,
                       A.authorizationDate,
                       A.authorizationDocument,
                       A.status,
                       A.minimumConclusionCourse,
                       A.maximumConclusionCourse,
                       B.formationLevelId,
                       E.description AS formationLevelDescription
                  FROM unit_acdcourseoccurrence A
            INNER JOIN acdCourseVersion F
                    ON (F.courseVersion = A.courseVersion AND
                        F.courseId      = A.courseId)
             LEFT JOIN acdCourse B
                    ON (B.courseId = A.courseId)
             LEFT JOIN basTurn C
                    ON (C.turnId = A.turnId)
             LEFT JOIN basUnit D
                    ON (D.unitId = A.unitId)
             LEFT JOIN acdFormationLevel E
                    ON (E.formationLevelId = B.formationLevelId)';

        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND A.courseId ILIKE ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(B.name) ILIKE UNACCENT(?) OR UNACCENT(B.shortName) ILIKE UNACCENT(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen( $turnDescription ) > 0 )
        {
            $where .= ' AND UNACCENT(C.description) ILIKE UNACCENT(?)';
            $args[] = $turnDescription . '%';
        }
        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        if ( strlen( $unitDescription ) > 0 )
        {
            $where .= ' AND UNACCENT(D.description) ILIKE UNACCENT(?)';
            $args[] = $unitDescription . '%';
        }
        if ( strlen( $authorizationDate ) > 0 )
        {
            $where .= ' AND A.authorizationDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $authorizationDate;
        }
        if ( strlen( $authorizationDocument ) > 0 )
        {
            $where .= ' AND A.authorizationDocument ILIKE ?';
            $args[] = $authorizationDocument;
        }
        if ( strlen( $status ) > 0 )
        {
            $where .= ' AND A.status = ?';
            $args[] = $status;
        }
        if ( strlen( $minimumConclusionCourse ) > 0 )
        {
            $where .= ' AND A.minimumConclusionCourse = ?';
            $args[] = $minimumConclusionCourse;
        }
        if ( strlen( $maximumConclusionCourse ) > 0 )
        {
            $where .= ' AND A.maximumConclusionCourse = ?';
            $args[] = $maximumConclusionCourse;
        }

        if ( strlen( $formationLevelId ) > 0 )
        {
            $where .= ' AND B.formationLevelId = ?';
            $args[] = $formationLevelId;
        }

        $sql .= ' WHERE F.courseVersionTypeId IN (' . SAGU::getParameter('ACADEMIC', 'ACD_COURSE_TYPE_ID_SERIAL') . ')' . $where;

        $sql .= ' ORDER BY B.name,
                           A.courseVersion DESC';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }        
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar ocorrência de curso', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteEnrollContractOptionalCurriculum($context)
    {
        $sql = 'SELECT A.enrollId,
                       A.groupId,
                       E.shortName AS curricularComponentName,
                       A.contractId,
                       B.courseId,
                       B.courseVersion,
                       F.shortName AS courseName,
                       B.personId,
                       G.name AS personName,
                       E.academicnumberhours,
                       E.academiccredits,
                       A.finalNote,
                       A.concept
                  FROM unit_acdEnroll A
             LEFT JOIN unit_acdContract B
                    ON (A.contractId = B.contractId)
            INNER JOIN acdCourse F
                    ON (F.courseId = B.courseId)
        LEFT JOIN ONLY basPhysicalPersonStudent G
                    ON (G.personId = B.personId)
       INNER JOIN ONLY unit_acdGroup C
                    ON (C.groupId= A.groupId)
             LEFT JOIN unit_acdcurriculum D
                    ON (A.curriculumId = D.curriculumId)
             LEFT JOIN acdCurricularComponent E
                    ON (D.curricularComponentId= E.curricularComponentId)
                 WHERE A.enrollId = ? ';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for contract state field
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupEnrollContractOptionalCurriculum($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $enrollId = $lookup->getfilterValue( 'enrollId' );
        $curricularComponentId = $lookup->getfilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getfilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getfilterValue( 'curricularComponentName' );
        $contractId = $lookup->getfilterValue( 'contractId' );
        $courseId = $lookup->getfilterValue( 'courseId' );
        $courseVersion = $lookup->getfilterValue( 'courseVersion' );
        $courseName = $lookup->getfilterValue( 'courseName' );
        $personId = $lookup->getfilterValue( 'personId' );
        $personName = $lookup->getfilterValue( 'personName' );
        $notCurriculumTypeId = $lookup->getfilterValue( 'notCurriculumTypeId' );

        $lookup->addFilterField( new MTextField( 'enrollId', $enrollId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentId', $curricularComponentId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $curricularComponentVersion, _M('Versão da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $curricularComponentName, _M('Nome da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código do contrato', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Nome do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código da pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'notCurriculumTypeId', $notCurriculumTypeId, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $gridColumns = array(
                new DataGridColumn( 'enrollId', _M('Código da matrícula', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Nome da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'contractId', _M('Código do contrato', $module ), 'right', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personId', _M('Código da pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'personName', _M('Pessoa', $module ), 'left', true, null, true )
        );

        $sql = ' SELECT A.enrollId,
                        A.groupId,
                        C.name || \' - \' || F.name AS curricularComponentName,
                        A.contractId,
                        G.courseId,
                        G.courseVersion,
                        H.name as courseName,
                        G.personId,
                        I.name,
                        F.academicnumberhours,
                        F.academiccredits,
                        A.finalNote,
                        A.concept
                   FROM acdEnroll A
             INNER JOIN acdcurriculum B
                     ON (A.curriculumId = B.curriculumId)
             INNER JOIN acdCurricularComponent C
                     ON (C.curricularComponentId = B.curricularComponentID)
             INNER JOIN acdGroup D
                     ON (A.groupId = d.groupId)
             INNER JOIN acdcurriculum E
                     ON (E.curriculumId = D.curriculumId)
             INNER JOIN acdCurricularComponent F
                     ON (F.curricularComponentId = E.curricularComponentID)
             INNER JOIN acdContract G
                     ON (A.contractId = G.contractId)
             INNER JOIN acdCourse H
                     ON (G.courseId = H.courseId)
        INNER JOIN ONLY basPhysicalPersonStudent I
                     ON (I.personId = G.personId)';

        if ( strlen( $enrollId ) > 0 )
        {
            $where .= ' AND A.enrollId = ?';
            $args[] = $enrollId;
        }
        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND G.personId = ?';
            $args[] = $personId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND G.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND G.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(H.name) ilike UNACCENT(?) OR UNACCENT(H.shortName) ilike UNACCENT(?) ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(I.name) ilike UNACCENT(?)';
            $args[] = $personName . '%';
        }
        if ( strlen( $curricularComponentId ) > 0 )
        {
            $where .= ' AND C.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen( $curricularComponentName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(C.name) ILIKE UNACCENT(?) OR UNACCENT(C.shortName) ILIKE UNACCENT(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }
        
        // Só faz checagem se for uma disciplina fora de currículo - ticket #37983
        if ( strlen( $notCurriculumTypeId ) > 0 )
        {
            $where .= ' AND (CASE WHEN G.courseId = B.courseId 
                                   AND G.courseVersion = B.courseVersion
                                   AND G.turnId = B.turnId
                                   AND G.unitId = B.unitId
                                  THEN
                                      B.curriculumTypeId NOT IN (' . $notCurriculumTypeId . ')
                                  ELSE
                                      TRUE
                             END)';
        }

        /** 
         * Alterações documentadas no ticket #37983
         */
        
        $where .= ' AND A.dateCancellation IS NULL';
        $where .= ' AND B.curriculumTypeId NOT IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY') . ', ' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_PROFICIENCY') . ')';
        $where .= ' AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED') . ')';

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }
        else
        {
            $where .= ' AND A.enrollId = 0';

            $sql .= ' WHERE ' . substr( $where, 5 );
            //$sql .= ' ORDER BY A.enrollId';
        }

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $gridColumns, _M('Localizar matrícula', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }

    public function lookupOptionalCurricularComponentsGroups($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $business = new BusinessAcademicBusEnroll();
        $busClass = new BusinessAcademicBusClass();
        $busTime = new BusinessAcademicBusTimeSheet();
        $busUnit = new BusinessBasicBusUnit();
        $busSchedule = new BusinessAcademicBusSchedule();

        $curricularComponentId = $lookup->getFilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getFilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getFilterValue( 'curricularComponentName' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $turnId = $lookup->getFilterValue( 'turnId' );
        $unitId = $lookup->getFilterValue( 'unitId' );
        $learningPeriodId = $lookup->getFilterValue( 'learningPeriodId' );
        $optionalType = $lookup->getFilterValue( 'optionalType' );

        $lookup->addFilterField( new MTextField( 'curricularComponentId', $curricularComponentId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $curricularComponentVersion, _M('Versão da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $curricularComponentName, _M('Nome da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'courseId', $courseId ) );
        $lookup->addFilterField( new MHiddenField( 'courseVersion', $courseVersion ) );
        $lookup->addFilterField( new MHiddenField( 'turnId', $turnId ) );
        $lookup->addFilterField( new MHiddenField( 'unitId', $unitId ) );
        $lookup->addFilterField( new MHiddenField( 'learningPeriodId', $learningPeriodId ) );
        $lookup->addFilterField( new MHiddenField( 'optionalType', $optionalType ) );

        $gridColumns = array(
                new DataGridColumn( 'id', _M('Código da disciplina oferecida', $module ), 'right', true, null, false ),
                new DataGridColumn( 'groupId', _M('Código da disciplina oferecida', $module ), 'right', true, null, false ),
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponent', _M('Nome da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unit', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'day', _M('Dia', $module ), 'left', true, null, true ),
                new DataGridColumn( 'schedule', _M('Horário', $module ), 'left', true, null, true ),
                new DataGridColumn( 'professor', _M('Professor', $module ), 'left', true, null, true ),
                new DataGridColumn( 'class', _M('Turma', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT DISTINCT A.curricularComponentId,
                       A.curricularComponentVersion,
                       B.name
                  FROM unit_acdcurriculum A
            INNER JOIN acdCurricularComponent B
                    ON (B.curricularComponentId = A.curricularComponentId AND
                        B.curricularComponentVersion = A.curricularComponentVersion)';

        unset( $where );
        unset( $args );
        switch ( $optionalType )
        {
            case 'I' :
                $where .= ' AND A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_OPTATIVE_INTRA') . ')
                        AND A.courseId = ?
                        AND A.courseVersion = ?
                        AND A.unitId = ?
                        AND A.turnId = ? ';

                $args[] = $courseId;
                $args[] = $courseVersion;
                $args[] = $unitId;
                $args[] = $turnId;
            break;
            case 'O' :
                $where .= ' AND A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_OPTATIVE_INTER') . ') ';
            break;
            case 'E' :
                $where .= ' AND A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_EQUALIZATION') . ') ';
            break;
            case 'A' :
                $where .= ' AND ((A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_OPTATIVE_INTRA') . ')
                        AND A.courseId = ?
                        AND A.courseVersion = ?
                        AND A.unitId = ?
                        AND A.turnId = ?) ';

                $args[] = $courseId;
                $args[] = $courseVersion;
                $args[] = $unitId;
                $args[] = $turnId;

                $where .= ' OR (A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_OPTATIVE_INTER') . ') ) )';
            break;
            case 'Z' :
                $where .= ' AND ((A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_OPTATIVE_INTRA') . ')
                        AND A.courseId = ?
                        AND A.courseVersion = ?
                        AND A.unitId = ?
                        AND A.turnId = ?) ';

                $args[] = $courseId;
                $args[] = $courseVersion;
                $args[] = $unitId;
                $args[] = $turnId;

                $where .= ' OR (A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_OPTATIVE_INTER') . ', ' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_EQUALIZATION') . ') ) )';
            break;
        }

        if ( strlen( $curricularComponentId ) > 0 )
        {
            $where .= ' AND A.curricularComponentId ILIKE ? ';
            $args[] = $curricularComponentId;
        }

        if ( strlen( $curricularComponentVersion ) > 0 )
        {
            $where .= ' AND A.curricularComponentVersion = ? ';
            $args[] = $curricularComponentVersion;
        }

        if ( strlen( $curricularComponentName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?) OR UNACCENT(B.shortName) ILIKE UNACCENT(?) ';
            $args[] = '%' . $curricularComponentId . '%';
            $args[] = '%' . $curricularComponentId . '%';
        }

        unset( $result );
        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );

            $sql .= ' ORDER BY B.name ';

            $db = SDatabase::getInstance();

            $result = $db->query( SAGU::prepare( $sql, $args ) );
        }

        unset( $groupsData );
        if ( count( $result ) > 0 )
        {
            foreach ( $result as $res )
            {
                unset( $curriculumData );

                $curriculumData->curricularComponentId = $res[0];
                $curriculumData->curricularComponentVersion = $res[1];

                $groups = $business->getCurriculumFreeGroups( $curriculumData, $learningPeriodId );

                if ( count( $groups ) > 0 )
                {
                    foreach ( $groups as $groupId => $group )
                    {
                        $classData = $busClass->getClass( $group->classId );

                        $units = $busSchedule->getGroupUnits( $groupId );
                        $weekDays = $busSchedule->getGroupWeekDays( $groupId );
                        $professors = $busSchedule->getGroupProfessors( $groupId );
                        $times = $busSchedule->getGroupTimes( $groupId );

                        if ( is_array( $weekDays ) )
                        {
                            ksort( $weekDays );
                            $weekDays = implode( ' / ', $weekDays );
                        }

                        if ( is_array( $professors ) )
                        {
                            $professors = implode( ' / ', $professors );
                        }

                        unset( $groupUnits );
                        if ( count( $units ) > 0 )
                        {
                            foreach ( $units as $unitId )
                            {
                                $unitData = $busUnit->getUnit( $unitId );

                                $groupUnits[] = $unitData->description;
                            }

                            $units = implode( ' / ', $groupUnits );
                        }

                        unset( $groupTimes );
                        if ( count( $times ) > 0 )
                        {
                            foreach ( $times as $timeId )
                            {
                                $timeData = $busTime->getTime( $timeId );

                                $groupTimes[] = $timeData->beginHour . ' - ' . $timeData->endHour;
                            }

                            $times = implode( ' / ', $groupTimes );
                        }

                        $row = array(
                                $groupId,
                                $groupId,
                                $res[0] . '/' . $res[1],
                                $res[2],
                                $units,
                                $weekDays,
                                $times,
                                $professors,
                                $group->classId . ' - ' . $classData->description
                        );
                        $groupsData[] = $row;
                    }
                }
            }
        }

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $groupsData, $gridColumns, _M('Localizar disciplina oferecida', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }

    public function lookupCurricularComponentOtherGroups($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $business = new BusinessAcademicBusEnroll();
        $busClassPupil = new BusinessAcademicBusClassPupil();
        $busClass = new BusinessAcademicBusClass();
        $busTime = new BusinessAcademicBusTimeSheet();
        $busUnit = new BusinessBasicBusUnit();
        $busSchedule = new BusinessAcademicBusSchedule();

        $curriculumId = $lookup->getFilterValue( 'curriculumId' );
        $curricularComponentId = $lookup->getFilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getFilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getFilterValue( 'curricularComponentName' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $turnId = $lookup->getFilterValue( 'turnId' );
        $unitId = $lookup->getFilterValue( 'unitId' );
        $learningPeriodId = $lookup->getFilterValue( 'learningPeriodId' );
        $contractId = $lookup->getFilterValue( 'contractId' );

        $lookup->addFilterField( new MHiddenField( 'curriculumId', $curriculumId ) );
        $lookup->addFilterField( new MHiddenField( 'curricularComponentId', $curricularComponentId ) );
        $lookup->addFilterField( new MHiddenField( 'curricularComponentVersion', $curricularComponentVersion ) );
        $lookup->addFilterField( new MHiddenField( 'curricularComponentName', $curricularComponentName ) );
        $lookup->addFilterField( new MHiddenField( 'courseId', $courseId ) );
        $lookup->addFilterField( new MHiddenField( 'courseVersion', $courseVersion ) );
        $lookup->addFilterField( new MHiddenField( 'turnId', $turnId ) );
        $lookup->addFilterField( new MHiddenField( 'unitId', $unitId ) );
        $lookup->addFilterField( new MHiddenField( 'learningPeriodId', $learningPeriodId ) );
        $lookup->addFilterField( new MHiddenField( 'contractId', $contractId ) );

        $classId = $busClassPupil->getContractCurrentClass( $contractId );

        $gridColumns = array(
                new DataGridColumn( 'id', _M('Código da disciplina oferecida', $module ), 'right', true, null, false ),
                new DataGridColumn( 'groupId', _M('Código da disciplina oferecida', $module ), 'right', true, null, false ),
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'right', true, null, true ),
                new DataGridColumn( 'curricularComponent', _M('Nome da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unit', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'day', _M('Dia', $module ), 'left', true, null, true ),
                new DataGridColumn( 'schedule', _M('Horário', $module ), 'left', true, null, true ),
                new DataGridColumn( 'professor', _M('Professor', $module ), 'left', true, null, true ),
                new DataGridColumn( 'class', _M('Turma', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT DISTINCT A.curricularComponentId,
                       A.curricularComponentVersion,
                       B.name
                  FROM unit_acdcurriculum A
            INNER JOIN acdCurricularComponent B
                    ON (B.curricularComponentId = A.curricularComponentId AND
                        B.curricularComponentVersion = A.curricularComponentVersion)
                 WHERE B.endDate IS NULL
                   AND (A.curriculumId = ? OR (A.curricularComponentId = ? AND A.curricularComponentVersion = ?))
              ORDER BY B.name';

        $args = array(
                $curriculumId,
                $curricularComponentId,
                $curricularComponentVersion
        );

        $db = SDatabase::getInstance();
        $result = $db->query( SAGU::prepare( $sql, $args ) );

        unset( $groupsData );
        if ( count( $result ) > 0 )
        {
            foreach ( $result as $res )
            {
                unset( $curriculumData );

                $curriculumData->curricularComponentId = $res[0];
                $curriculumData->curricularComponentVersion = $res[1];

                $groups = $business->getCurriculumFreeGroups( $curriculumData, $learningPeriodId );

                $displayedGroups = $business->getCurriculumGroups( $curriculumData, $contractId, $learningPeriodId, $classId->classId );

                if ( count( $groups ) > 0 )
                {
                    foreach ( $groups as $groupId => $group )
                    {
                        if ( ! array_key_exists( $groupId, is_array( $displayedGroups ) ? $displayedGroups : array() ) )
                        {
                            $classData = $busClass->getClass( $group->classId );

                            $units = $busSchedule->getGroupUnits( $groupId );
                            $weekDays = $busSchedule->getGroupWeekDays( $groupId );
                            $professors = $busSchedule->getGroupProfessors( $groupId );
                            $times = $busSchedule->getGroupTimes( $groupId );

                            if ( is_array( $weekDays ) )
                            {
                                ksort( $weekDays );
                                $weekDays = implode( ' / ', $weekDays );
                            }

                            if ( is_array( $professors ) )
                            {
                                $professors = implode( ' / ', $professors );
                            }

                            unset( $groupUnits );
                            if ( count( $units ) > 0 )
                            {
                                foreach ( $units as $unitId )
                                {
                                    $unitData = $busUnit->getUnit( $unitId );

                                    $groupUnits[] = $unitData->description;
                                }

                                $units = implode( ' / ', $groupUnits );
                            }

                            unset( $groupTimes );
                            if ( count( $times ) > 0 )
                            {
                                foreach ( $times as $timeId )
                                {
                                    $timeData = $busTime->getTime( $timeId );

                                    $groupTimes[] = $timeData->beginHour . ' - ' . $timeData->endHour;
                                }

                                $times = implode( ' / ', $groupTimes );
                            }

                            $row = array(
                                    $groupId,
                                    $groupId,
                                    $res[0] . '/' . $res[1],
                                    $res[2],
                                    $units,
                                    $weekDays,
                                    $times,
                                    $professors,
                                    $group->classId . ' - ' . $classData->description
                            );
                            $groupsData[] = $row;
                        }
                    }
                }
            }
        }

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $groupsData, $gridColumns, _M('Localizar disciplina oferecida', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for MessageContractRenewal
     * Lookup for Form Evaluation
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteMessageContractRenewal($context)
    {
        $sql = 'SELECT messageContractRenewalId,
                       learningPeriodId,
                       message,
                       font,
                       sequence,
                       length,
                       isListener,
                       status
                  FROM unit_acdMessageContractRenewal
                 WHERE messageContractRenewalId = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for message contract renewal
     * Lookup for Form Evaluation
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupMessageContractRenewal($lookup)
    {
        global $MIOLO;

        $module = MIOLO::_request( 'lmodule' );
        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $messageContractRenewalId = $lookup->getFilterValue( 'messageContractRenewalId' );
        $learningPeriodId = $lookup->getFilterValue( 'learningPeriodId' );
        $periodId = $lookup->getFilterValue( 'periodId' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $turnId = $lookup->getFilterValue( 'turnId' );
        $unitId = $lookup->getFilterValue( 'unitId' );
        $message = $lookup->getFilterValue( 'message' );
        $sequence = $lookup->getFilterValue( 'sequence' );

        $lookup->addFilterField( new MTextField( 'messageContractRenewalId', $messageContractRenewalId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'learningPeriodId', $learningPeriodId, _M('Período letivo', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'periodId', $periodId, _M('Período', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( fields::turn( $turnId ) );
        $lookup->addFilterField( fields::unit( $unitId ) );
        $lookup->addFilterField( new MTextField( 'message', $message, _M('Mensagem', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'sequence', $sequence, _M('Sequência', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );

        $columns = array(
                new DataGridColumn( 'messageContractRenewalId', _M('Código', $module ), 'right', true, null, false ),
                new DataGridColumn( 'learningPeriodId', _M('Período letivo', $module ), 'right', true, null, true ),
                new DataGridColumn( 'periodId', _M('Período', $module ), 'right', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'right', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'right', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'right', true, null, false ),
                new DataGridColumn( 'turn', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'right', true, null, false ),
                new DataGridColumn( 'unit', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'sequence', _M('Sequência', $module ), 'right', true, null, true ),
                new DataGridColumn( 'message', _M('Mensagem', $module ), 'left', true, null, true ),
                new DataGridColumn( 'font', _M('Fonte', $module ), 'left', true, null, false ),
                new DataGridColumn( 'length', _M('Comprimento', $module ), 'right', true, null, false ),
                new DataGridColumn( 'isListener', _M('É ouvinte', $module ), 'right', true, null, false ),
                new DataGridColumn( 'status', _M('Estado', $module ), 'right', true, null, true )
        );

        $sql = ' SELECT A.messageContractRenewalId,
                        A.learningPeriodId,
                        B.periodId,
                        B.courseId,
                        B.courseVersion,
                        B.turnId,
                        B.unitId,
                        A.message,
                        A.font,
                        A.sequence,
                        A.length,
                        A.isListener,
                        A.status,
                        getTurnDescription(B.turnId) as turn,
                        getUnitDescription(B.unitId) as unit,
                        getCourseShortName(B.courseId) as courseName
                   FROM unit_acdMessageContractRenewal A,
                        unit_acdLearningPeriod B
                  WHERE A.learningPeriodId = B.learningPeriodId';

        if ( strlen( $messageContractRenewalId ) > 0 )
        {
            $where .= ' AND A.messageContractRenewalId = ?';
            $args[] = $messageContractRenewalId;
        }

        if ( strlen( $learningPeriodId ) > 0 )
        {
            $where .= ' AND A.learningPeriodId = ?';
            $args[] = $learningPeriodId;
        }

        if ( strlen( $periodId ) > 0 )
        {
            $where .= ' AND B.periodId ILIKE ?';
            $args[] = $periodId;
        }

        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND B.courseId = ?';
            $args[] = $courseId;
        }

        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND B.courseVersion = ?';
            $args[] = $courseVersion;
        }

        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( getCourseShortName(B.courseId) ILIKE ? OR getCourseName(B.courseId) ILIKE ? ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }

        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND B.turnId = ?';
            $args[] = $turnId;
        }

        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND B.unitId = ?';
            $args[] = $unitId;
        }

        if ( strlen( $message ) > 0 )
        {
            $where .= ' AND A.message ILIKE ?';
            $args[] = $message . '%';
        }

        if ( strlen( $sequence ) > 0 )
        {
            $where .= ' AND A.sequence = ?';
            $args[] = $sequence;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= $where;
        }

        $sql .= ' ORDER BY 2';
        $sqlObject = new sql( );

        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa de mensagem de renovação contratual', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();

    }

    /**
     * Auto complete for FinalExaminationEnroll
     * Lookup for Form Final evaluation Enroll
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteFinalExaminationDirectorsEnroll($context)
    {
        $sql =       'SELECT PERSONPUPIL.personId AS personId,
                       PERSONPUPIL.name AS personName,
                       PERSONDIRECTOR.personId AS personIdDirector,
                       PERSONDIRECTOR.name AS personDirector,
                       C.contractId,
                       CO.courseId || \'/\' || C.courseVersion,
                       CO.name,
                       U.unitId,
                       U.description,
                       T.turnId,
                       T.description,
                       P.periodId,
                       P.description,
                       CC.curricularComponentId || \'/\' || CC.curricularComponentVersion,
                       CC.name
                  FROM acdFinalExaminationDirectors FED
            INNER JOIN unit_acdEnroll E
                    ON ( E.enrollId = FED.enrollId )
            INNER JOIN unit_acdContract C
                    ON ( C.contractid = E.contractid )
       INNER JOIN ONLY basperson PERSONPUPIL
                    ON ( C.personId = PERSONPUPIL.personId )
       INNER JOIN ONLY basperson PERSONDIRECTOR
                    ON ( FED.personId = PERSONDIRECTOR.personId )
            INNER JOIN acdCourse CO
                    ON CO.courseId = C.courseId
            INNER JOIN basUnit U
                    ON U.unitId = C.unitId
            INNER JOIN basTurn T
                    ON T.turnId = C.turnId
            INNER JOIN unit_acdGroup G
                    ON G.groupId = E.groupId
            INNER JOIN unit_acdlearningperiod LP
                    ON LP.learningPeriodId = G.learningPeriodId
            INNER JOIN acdPeriod P
                    ON P.periodId = LP.periodId
            INNER JOIN unit_acdcurriculum CU
                    ON CU.curriculumId = G.curriculumId
            INNER JOIN acdCurricularComponent CC
                    ON ( CC.curricularComponentId = CU.curricularComponentId
                   AND CC.curricularComponentVersion = CU.curricularComponentVersion )
                 WHERE FED.enrollId = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup para Maricula de Exame final (TCC)
     */
    public function lookupFinalExaminationDirectorsEnroll($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $enrollId = $lookup->getFilterValue( 'enrollId' );
        $pupilName = $lookup->getFilterValue( 'pupilName' );
        $personId = $lookup->getFilterValue( 'personId' );
        $personName = $lookup->getFilterValue( 'personName' );
        $groupId = $lookup->getFilterValue( 'groupId' );
        $periodId = $lookup->getFilterValue( 'periodId' );

        $busPeriod = new BusinessAcademicBusPeriod();
        
        $lookup->addFilterField( new MTextField( 'enrollId', $enrollId, _M('Código da matrícula', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'groupId', $groupId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código do orientador', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MSelection( 'periodId', $periodId, _M('Período', $module ), $busPeriod->listPeriod() ) );
        $lookup->addFilterField( new MTextField( 'pupilName', $pupilName, _M('Nome do aluno', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Nome do orientador', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'enrollId', _M('Matrícula', $module ), 'right', true, null, true ),
            new DataGridColumn( 'pupilName', _M('Aluno', $module ), 'left', true, null, true ),
            new DataGridColumn( 'personId', _M('Orientador', $module ), 'right', true, null, true ),
            new DataGridColumn( 'personName', _M('Nome', $module ), 'left', true, null, true ),
            new DataGridColumn( 'period', _M('Período', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.enrollId,
                       E.personId AS pupilId,
                       E.name as pupilName,
                       A.personId AS personId,
                       F.name as personName,
                       C.contractId AS contractId,
                       CR.courseId || \'/\' || CO.courseVersion AS courseId,
                       CR.name,
                       U.unitId,
                       U.description,
                       T.turnId,
                       T.description,                       
                       P.periodId,
                       P.description AS period,
                       CC.curricularComponentId || \'/\' || CC.curricularComponentVersion,
                       CC.name
                  FROM acdFinalExaminationDirectors A
            INNER JOIN unit_acdEnroll C
                    ON ( A.enrollId = C.enrollId )
            INNER JOIN unit_acdContract D
                    ON ( C.contractid = D.contractid )
       INNER JOIN ONLY basperson E
                    ON ( D.personId = E.personId )
       INNER JOIN ONLY basperson F
                    ON A.personId = F.personId
            INNER JOIN unit_acdGroup G
                    ON G.groupId = C.groupId
            INNER JOIN unit_acdlearningperiod LP
                    ON LP.learningPeriodId = G.learningPeriodId
            INNER JOIN acdPeriod P
                    ON P.periodId = LP.periodId
            INNER JOIN unit_acdContract CO
                    ON CO.contractId = C.contractId
            INNER JOIN acdCourse CR
                    ON CR.courseId = CO.courseId
            INNER JOIN basUnit U
                    ON U.unitId = CO.unitId
            INNER JOIN basTurn T
                    ON T.turnId = CO.turnId
            INNER JOIN unit_acdCurriculum CU
                    ON CU.curriculumId = G.curriculumId
            INNER JOIN acdCurricularComponent CC
                    ON ( CC.curricularComponentId = CU.curricularComponentId
                   AND CC.curricularComponentVersion = CU.curricularComponentVersion )';

        if ( strlen( $enrollId ) > 0 )
        {
            $where .= ' AND A.enrollId = ? ';
            $args[] = $enrollId;
        }
        if ( strlen( $pupilName ) > 0 )
        {
            $where .= ' AND UNACCENT(E.name) ILIKE UNACCENT(?) ';
            $args[] = $pupilName . '%';
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $personId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(F.name) ILIKE UNACCENT(?) ';
            $args[] = $personName . '%';
        }
        if ( strlen($periodId) > 0 )
        {
            $where .= ' AND LP.periodId = ? ';
            $args[] = $periodId;
        }
        if ( strlen($groupId) > 0 )
        {
            $where .= ' AND G.groupId = ?';
            $args[] = $groupId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 4 );

        }

        $sql .= ' ORDER BY F.name';

        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql( );

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );

        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por orientador de banca', $module ), 15, 0 );

        $lookup->grid->setIsScrollable();
    }


    /**
     * Auto complete for FinalExaminationExaminingBoardEnroll
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteFinalExaminationExaminingBoardEnroll($context)
    {
        $sql =       'SELECT PERSONPUPIL.personId AS personId,
                       PERSONPUPIL.name AS personName,
                       PERSONDIRECTOR.personId AS personIdDirector,
                       PERSONDIRECTOR.name AS personDirector,
                       C.contractId,
                       CO.courseId || \'/\' || C.courseVersion,
                       CO.name,
                       U.unitId,
                       U.description,
                       T.turnId,
                       T.description,
                       P.periodId,
                       P.description,
                       CC.curricularComponentId || \'/\' || CC.curricularComponentVersion,
                       CC.name
                  FROM acdFinalExaminationDirectors FED
            INNER JOIN unit_acdEnroll E
                    ON ( E.enrollId = FED.enrollId )
            INNER JOIN unit_acdContract C
                    ON ( C.contractid = E.contractid )
       INNER JOIN ONLY basperson PERSONPUPIL
                    ON ( C.personId = PERSONPUPIL.personId )
       INNER JOIN ONLY basperson PERSONDIRECTOR
                    ON ( FED.personId = PERSONDIRECTOR.personId )
            INNER JOIN acdCourse CO
                    ON CO.courseId = C.courseId
            INNER JOIN basUnit U
                    ON U.unitId = C.unitId
            INNER JOIN basTurn T
                    ON T.turnId = C.turnId
            INNER JOIN unit_acdGroup G
                    ON G.groupId = E.groupId
            INNER JOIN unit_acdlearningperiod LP
                    ON LP.learningPeriodId = G.learningPeriodId
            INNER JOIN acdPeriod P
                    ON P.periodId = LP.periodId
            INNER JOIN unit_acdcurriculum CU
                    ON CU.curriculumId = G.curriculumId
            INNER JOIN acdCurricularComponent CC
                    ON ( CC.curricularComponentId = CU.curricularComponentId
                   AND CC.curricularComponentVersion = CU.curricularComponentVersion )
                 WHERE FED.enrollId = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup para Maricula de participação em Exame final (TCC)
     */
    public function lookupFinalExaminationExaminingBoardEnroll($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $enrollId = $lookup->getFilterValue( 'enrollId' );
        $pupilName = $lookup->getFilterValue( 'pupilName' );
        $personId = $lookup->getFilterValue( 'personId' );
        $personName = $lookup->getFilterValue( 'personName' );
        $groupId = $lookup->getFilterValue( 'groupId' );
        $periodId = $lookup->getFilterValue( 'periodId' );
        
        $busPeriod = new BusinessAcademicBusPeriod();

        $lookup->addFilterField( new MTextField( 'enrollId', $enrollId, _M('Código da matrícula', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'groupId', $groupId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personId', $personId, _M('Código do orientador', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MSelection( 'periodId', $periodId, _M('Período', $module ), $busPeriod->listPeriod() ) );
        $lookup->addFilterField( new MTextField( 'pupilName', $pupilName, _M('Nome do aluno', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Nome do orientador', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'enrollId', _M('Matrícula', $module ), 'left', true, null, true ),
            new DataGridColumn( 'pupilName', _M('Aluno', $module ), 'left', true, null, true ),
            new DataGridColumn( 'personId', _M('Pessoa', $module ), 'left', true, null, true ),
            new DataGridColumn( 'personName', _M('Nome', $module ), 'left', true, null, true ),
            new DataGridColumn( 'period', _M('Período', $module ), 'left', true, null, true ),
        );

        $sql =       'SELECT A.enrollId,
                       E.personId as personId,
                       E.name as pupilName,
                       A.personId,
                       F.name as personName,
                       C.contractId                       
                  FROM acdFinalExaminationDirectors A
            INNER JOIN unit_acdEnroll C
                    ON A.enrollId = C.enrollId
            INNER JOIN unit_acdContract D
                    ON C.contractid = D.contractid
       INNER JOIN ONLY basperson E
                    ON D.personId = E.personId
       INNER JOIN ONLY basperson F
                    ON A.personId = F.personId
            INNER JOIN unit_acdGroup G
                    ON G.groupId = C.groupId
            INNER JOIN unit_acdlearningperiod LP
                    ON LP.learningPeriodId = G.learningPeriodId
            INNER JOIN acdPeriod P
                    ON P.periodId = LP.periodId';

        if ( strlen( $enrollId ) > 0 )
        {
            $where .= ' AND A.enrollId = ? ';
            $args[] = $enrollId;
        }
        if ( strlen( $pupilName ) > 0 )
        {
            $where .= ' AND UNACCENT(E.name) ILIKE UNACCENT(?) ';
            $args[] = $pupilName . '%';
        }
        if ( strlen( $personId ) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $personId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(F.name) ILIKE UNACCENT(?) ';
            $args[] = $personName . '%';
        }
        if ( strlen($periodId) > 0 )
        {
            $where .= ' AND LP.periodId = ? ';
            $args[] = $periodId;
        }
        if ( strlen($groupId) > 0 )
        {
            $where .= ' AND G.groupId = ?';
            $args[] = $groupId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 4 );

        }

        $sql .= ' ORDER BY F.name';

        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql( );

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );

        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por participação em banca', $module ), 15, 0 );

        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto completa lookup de grupo de conceitos
     * @param <type> $context
     */
    public function autoCompleteConceptGroup($context)
    {
        $sql =  'SELECT A.description,
                    B.conceptId,
                    B.description
               FROM acdConceptGroup A
         INNER JOIN acdConcept B
                 ON (A.conceptGroupId = B.conceptGroupId)
              WHERE A.conceptGroupId = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }


    /**
     * Lookup de grupo de conceitos
     * @global <type> $MIOLO
     * @param <type> $lookup
     */
    public function lookupConceptGroup($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $MIOLO->page->onLoad( 'document.' . $MIOLO->page->name . '.conceptGroupDescription.focus()' );

        $conceptGroupId = $lookup->getFilterValue( 'conceptGroupId' );
        $conceptGroupDescription = $lookup->getFilterValue( 'conceptGroupDescription' );
        $conceptId = $lookup->getFilterValue( 'conceptId' );
        $conceptDescription = $lookup->getFilterValue( 'conceptDescription' );

        $lookup->addFilterField( new MTextField( 'conceptGroupId', $conceptGroupId, _M('Código do grupo de conceito', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'conceptGroupDescription', $conceptGroupDescription, _M('Descrição do grupo de conceito', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'conceptId', $conceptId, _M('Código do conceito', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'conceptDescription', $conceptDescription, _M('Descrição do conceito', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array( new DataGridColumn( 'conceptGroupId', _M('Código do grupo de conceito', $module ), 'right', true, null, true ),
                          new DataGridColumn( 'conceptGroupDescription', _M('Descrição do grupo de conceito', $module ), 'left', true, null, true ),
                        );

        $sql =  'SELECT DISTINCT A.conceptGroupId,
                                 A.description AS conceptGroupDescription
                            FROM acdConceptGroup A
                      INNER JOIN acdConcept B
                              ON (A.conceptGroupId = B.conceptGroupId)';

        if ( strlen( $conceptGroupId ) > 0 )
        {
            $where .= ' AND A.conceptGroupId = ? ';
            $args[] = $conceptGroupId;
        }

        if ( strlen( $conceptGroupDescription ) > 0 )
        {
            $where .= ' AND A.description ILIKE ? ';
            $args[] = '%' . $conceptGroupDescription . '%';
        }

        if ( strlen( $conceptId ) > 0 )
        {
            $where .= ' AND A.conceptId = ? ';
            $args[] = $conceptId;
        }

        if ( strlen( $conceptDescription ) > 0 )
        {
            $where .= ' AND B.description ILIKE ? ';
            $args[] = '%' . $conceptDescription . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 4 );
        }

        $sql .= ' ORDER BY A.conceptGroupId';

        if ( strlen($where) <= 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql( );
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa por grupo de conceitos', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }
    
    public function autoCompleteHorarios($context)
    {
        $sql = 'SELECT H.horarioidunique,
                       B.groupId || \' - \' || B3.shortName AS groupGroupName,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName as courseName,
                       B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.shortName as curricularComponentName,
                       B5.periodId,
                       B5.learningPeriodId
                  FROM rptHorarios H
            INNER JOIN unit_acdGroup B
                    ON b.groupid = h.groupid
            INNER JOIN unit_acdcurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN unit_acdlearningperiod B5
                    ON ( B.learningPeriodId = B5.learningPeriodId )
                 WHERE H.horarioidunique = ? ';

        $sql .= ' LIMIT 1';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }
    
    /**
     * Lookup for group
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupHorarios($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $groupId = $lookup->getfilterValue( 'groupId' );
        $periodId = $lookup->getfilterValue( 'periodId' );
        $learningPeriodId = $lookup->getfilterValue( 'learningPeriodId' );
        $courseId = $lookup->getfilterValue( 'courseId' );
        $courseVersion = $lookup->getfilterValue( 'courseVersion' );
        $courseName = $lookup->getfilterValue( 'courseName' );
        $curricularComponentId = $lookup->getfilterValue( 'curricularComponentId' );
        $curricularComponentVersion = $lookup->getfilterValue( 'curricularComponentVersion' );
        $curricularComponentName = $lookup->getfilterValue( 'curricularComponentName' );
        $curriculumTypeId = $lookup->getfilterValue( 'curriculumTypeId' );
        $className = $lookup->getfilterValue( 'className' );
        $professorId = $lookup->getFilterValue( 'professorId' );
        $curriculumId = $lookup->getFilterValue( 'curriculumId' );
        $occurrenceDate = $lookup->getFilterValue( 'occurrenceDate' );

        $lookup->addFilterField( new MTextField( 'groupId', $groupId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'periodId', $periodId, _M('Período', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentId', $curricularComponentId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $curricularComponentVersion, _M('Versão da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $curricularComponentName, _M('Disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'learningPeriodId', $learningPeriodId, _M('Período letivo', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MCalendarField( 'occurrenceDate', $occurrenceDate, _M('Data da aula', $module ), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE') ) );

        $business = new BusinessAcademicBusCurriculumType();
        $lookup->addFilterField( new MSelection( 'curriculumTypeId', $curriculumTypeId, _M('Categoria do currículo', $module ), $business->listCurriculumType() ) );
        $lookup->addFilterField( new MTextField( 'className', $className, _M('Nome da turma', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MHiddenField( 'professorId', $professorId ) );

        $columns = array(
                new DataGridColumn( 'horarioidunique', _M('Id', $module ), 'right', true, null, false ),
                new DataGridColumn( 'groupId', _M('Código da disc. oferecida', $module ), 'right', true, null, false ),
                new DataGridColumn( 'groupGroupName', _M('Disciplina oferecida', $module ), 'left', false, null, true ),
                new DataGridColumn( 'occurrencedate', _M('Data', $module ), 'left', false, null, true ),
                new DataGridColumn( 'beginhour', _M('Hora início', $module ), 'left', false, null, true ),
                new DataGridColumn( 'endhour', _M('Hora fim', $module ), 'left', false, null, true ),
                new DataGridColumn( 'periodId', _M('Período', $module ), 'left', true, null, true ),
                new DataGridColumn( 'learningPeriodId', _M('Período letivo', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentVersion', _M('Versão da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'classId', _M('Turma', $module ), 'left', true, null, true ),
                new DataGridColumn( 'vacant', _M('Vagas', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT H.horarioidunique,
                       B.groupId || \' - \' || B3.shortName AS groupGroupName,
                       datetouser(H.occurrenceDate) AS occurrencedate,
                       H.beginhour,
                       H.endhour,
                       B2.courseId,
                       B2.courseVersion,
                       B4.shortName as courseName,
                       B2.curricularComponentId,
                       B2.curricularComponentVersion,
                       B3.name as curricularComponentName,
                       B5.periodId,
                       B5.learningPeriodId,
                       B.classId as classId,
                       B.totalEnrolled || \'/\' || B.vacant
                  FROM rptHorarios H
            INNER JOIN unit_acdGroup B
                    ON B.groupId = H.groupid
            INNER JOIN unit_acdcurriculum B2
                    ON (B.curriculumId = B2.curriculumId)
            INNER JOIN acdCurricularComponent B3
                    ON (     B2.curricularComponentId      = B3.curricularComponentId
                         AND B2.curricularComponentVersion = B3.curricularComponentVersion)
            INNER JOIN acdCourse B4
                    ON ( B2.courseId = B4.courseId)
             LEFT JOIN unit_acdlearningperiod B5
                    ON ( B.learningPeriodId = B5.learningPeriodId )
             LEFT JOIN unit_acdclass B6
                    ON (B6.initialLearningPeriodId = B.learningPeriodId)
             LEFT JOIN acdSchedule B7
                     ON (B7.scheduleid = H.scheduleid)
             LEFT JOIN acdScheduleProfessor B8
                     ON (B8.scheduleId = B7.scheduleId)';

        if ( strlen( $groupId ) > 0 )
        {
            $where .= ' AND B.groupId = ?';
            $args[] = $groupId;
        }
        if ( strlen( $periodId ) > 0 )
        {
            $where .= ' AND B5.periodId ILIKE ?';
            $args[] = $periodId;
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND B2.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND B2.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(B4.name) ILIKE UNACCENT(?) OR UNACCENT(B4.shortName) ILIKE UNACCENT(?) ) ';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $curricularComponentId ) > 0 )
        {
            $where .= ' AND B2.curricularComponentId = ?';
            $args[] = $curricularComponentId;
        }
        if ( strlen( $curricularComponentVersion ) > 0 )
        {
            $where .= ' AND B2.curricularComponentVersion = ?';
            $args[] = $curricularComponentVersion;
        }
        if ( strlen( $curricularComponentName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(B3.name) ILIKE UNACCENT(?) OR UNACCENT(B3.shortName) ILIKE UNACCENT(?) ) ';
            $args[] = $curricularComponentName . '%';
            $args[] = $curricularComponentName . '%';
        }

        if ( strlen( $curriculumTypeId ) > 0 )
        {
            $where .= ' AND B2.curriculumTypeId = ?';
            $args[] = $curriculumTypeId;
        }

        if ( strlen( $className ) > 0 )
        {
            $where .= ' AND UNACCENT(B6.name) ILIKE UNACCENT(?)';
            $args[] = $className;
        }

        if ( strlen( $professorId ) > 0 )
        {
            $where .= ' AND B8.professorId = ?';
            $args[] = $professorId;
        }

        if ( strlen( $learningPeriodId ) > 0 )
        {
            $where .= ' AND B.learningPeriodId = ?';
            $args[] = $learningPeriodId;
        }

        if ( strlen($curriculumId) > 0 )
        {
            $where .= ' AND B2.curricularComponentId IN (SELECT curricularComponentId FROM unit_acdcurriculum WHERE curriculumId = ?)
                        AND B2.curricularComponentVersion IN (SELECT curricularComponentVersion FROM unit_acdcurriculum WHERE curriculumId = ?)';
            $args[] = $curriculumId;
            $args[] = $curriculumId;
        }
        
        if ( strlen( $occurrenceDate ) > 0 )
        {
            $where .= ' AND H.occurrenceDate = dateToDb(?)';
            $args[] = $occurrenceDate;
        }
        
        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY B.groupId, H.occurrenceDate, H.beginhour, H.endhour';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        else
        {
            $sql .= ' LIMIT 5000 ';
        }
        
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar horário de disciplina oferecida', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }
    
    /**
     * Auto complete
     *
     * @param $context (object): MIOLO Context object
     *
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     *
     */
    public function autoCompleteTimeSheet($context)
    {
        $sql = 'SELECT A.description,
                       A.beginDate,
                       A.endDate
                  FROM unit_acdTimeSheet A
                 WHERE A.timeSheetId = ?';
        
        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Grade de horarios
     */
    public function lookupTimeSheet($lookup)
    {
        global $MIOLO, $page;
        $module = MIOLO::_request( 'lmodule' );

        $page->onLoad( 'document.' . $page->name . '.description.focus()' );
        
        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $timesheetid = $lookup->getFilterValue( 'timeSheetId' );
        $begindate = $lookup->getFilterValue( 'beginDate' );
        $description = $lookup->getFilterValue( 'description' );
        $enddate = $lookup->getFilterValue( 'endDate' );

        $lookup->addFilterField( new MTextField( 'timeSheetId', $timesheetid, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'description', $description, _M('Descrição', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MCalendarField( 'beginDate', $begindate, _M('Data inicial', $module ), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE') ) );
        $lookup->addFilterField( new MCalendarField( 'endDate', $enddate, _M('Data final', $module ), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'timeSheetId', _M('Código', $module ), 'left', true, null, true ),
            new DataGridColumn( 'description', _M('Descrição', $module ), 'left', true, null, true ),
            new DataGridColumn( 'beginDate', _M('Data inicial', $module ), 'left', true, null, true ),
            new DataGridColumn( 'endDate', _M('Data final', $module ), 'left', true, null, true ),
        );

        $sql = 'SELECT A.timeSheetId,
                       A.description,
                       A.beginDate,
                       A.endDate
                  FROM unit_acdTimeSheet A';

        if ( strlen( $timesheetid ) > 0 )
        {
            $where .= ' AND A.timeSheetId = ? ';
            $args[] = $timesheetid;
        }
        if ( strlen( $begindate ) > 0 )
        {
            $where .= ' AND A.beginDate = datetodb(?) ';
            $args[] = $begindate;
        }
        if ( strlen($enddate) > 0 )
        {
            $where .= ' AND A.endDate = datetodb(?) ';
            $args[] = $enddate;
        }
        if ( strlen($description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $args[] = $description . '%';
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 4 );

        }

        $sql .= ' ORDER BY A.description';

        if ( strlen( $where ) == 0 )
        {
//            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql( );
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisa grade de horário', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }
    
    
    public function autoCompleteContractWithName($context, $mode = null)
    {
        $sql = 'SELECT ';

        if ( $mode == 'SIMPLEMODE' )
        {
            $sql .= 'B.name AS personName,';
        }
        else
        {
            $sql .= 'B.name as personName,';
        }
        
        $sql .=       'A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       C.formationLevelId,
                       B.cityId,
                       F.name as cityName,
                       G.name as countryName,
                       B.zipCode,
                       H.name || \' \' || B.location AS location,
                       B.number,
                       B.complement,
                       B.neighborhood,
                       S.name AS stateName
                  FROM unit_acdContract A
        LEFT JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
             LEFT JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
             LEFT JOIN basCity F
                    ON (F.cityId = B.cityId)
             LEFT JOIN basCountry G
                    ON (G.countryId = F.countryId)
             LEFT JOIN basState S
                    ON S.stateId = F.stateId
            INNER JOIN basLocationType H
                    ON (B.locationTypeId = H.locationTypeId)
                 WHERE A.contractId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for contract
     *
     * @param $lookup: Lookup Object used by MIOLO
     *
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     *
     */
    public function lookupContractWithName($lookup, $mode = null)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $contractId = $lookup->getFilterValue( 'contractId' );
        $personName = $lookup->getFilterValue( 'personName' );
        $courseId = $lookup->getFilterValue( 'courseId' );
        $courseVersion = $lookup->getFilterValue( 'courseVersion' );
        $courseName = $lookup->getFilterValue( 'courseName' );
        $turnId = $lookup->getFilterValue( 'turnId' );
        $unitId = $lookup->getFilterValue( 'unitId' );        
        $formationLevelId = $lookup->getFilterValue( 'formationLevelId' );

        $lookup->addFilterField( new MTextField( 'contractId', $contractId, _M('Código do contrato', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'personName', $personName, _M('Pessoa', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseId', $courseId, _M('Código do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseVersion', $courseVersion, _M('Versão do curso', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'courseName', $courseName, _M('Curso', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( fields::turn( $turnId ) );
        $lookup->addFilterField( fields::unit( $unitId ) );
        $lookup->addFilterField( fields::formationLevel($formationLevelId) );

        global $page;
        $page->onLoad( 'document.' . $page->name . '.personName.focus()' );

        $columns = array(
                new DataGridColumn( 'contractId', _M('Código', $module ), 'right', true, null, true ),
                new DataGridColumn( 'personName', _M('Pessoa', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseId', _M('Código do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseVersion', _M('Versão do curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'courseName', _M('Curso', $module ), 'left', true, null, true ),
                new DataGridColumn( 'turnId', _M('Código do turno', $module ), 'left', true, null, false ),
                new DataGridColumn( 'turnDescription', _M('Turno', $module ), 'left', true, null, true ),
                new DataGridColumn( 'unitId', _M('Código da unidade', $module ), 'left', true, null, false ),
                new DataGridColumn( 'unitDescription', _M('Unidade', $module ), 'left', true, null, true ),
                new DataGridColumn( 'formationDate', _M('Data de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'formationPeriodId', _M('Período de formatura', $module ), 'left', true, null, false ),
                new DataGridColumn( 'conclusionDate', _M('Data de conclusão', $module ), 'left', true, null, false ),
                new DataGridColumn( 'emendsDate', _M('Data da apostila', $module ), 'left', true, null, false ),
                new DataGridColumn( 'diplomaDate', _M('Data do diploma', $module ), 'left', true, null, false ),
                new DataGridColumn( 'maturityDay', _M('Dia de vencimento', $module ), 'left', true, null, true ),
                new DataGridColumn( 'isListener', _M('É ouvinte', $module ), 'left', true, null, false, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) ),
                new DataGridColumn( 'isRequestAcademicDegree', _M('Requer grau acadêmico', $module ), 'left', true, null, false, array(
                        DB_TRUE => _M('Sim', $module ),
                        DB_FALSE => _M('Não', $module )
                ) ),
                new DataGridColumn( 'globalAverage', _M('Média global', $module ), 'left', true, null, false ),
                new DataGridColumn( 'contractNumber', _M('Número do contrato', $module ), 'left', true, null, false ),
                new DataGridColumn( 'obs', _M('Obs', $module ), 'left', true, null, false ),
                new DataGridColumn( 'parcelsNumber', _M('Número de parcelas', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT A.contractId,';
        
        // Se for modo simples, retorna apenas "cod. pessoa - nome"
        if ( $mode == 'SIMPLEMODE' )
        {
            $sql .= 'B.name AS personName,';
        }
        else
        {
            $sql .= 'B.name AS personName,';
        }
        
        $sql .=       'A.courseId,
                       C.name as courseName,
                       A.courseVersion,
                       A.turnId,
                       D.description as turnDescription,
                       A.unitId,
                       E.description as unitDescription,
                       A.formationDate,
                       A.formationPeriodId,
                       A.conclusionDate,
                       A.emendsDate,
                       A.diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       getRestantParcels(A.contractId) AS restantParcels,
                       C.formationLevelId,
                       B.cityId,
                       F.name as cityName,
                       G.name as countryName,
                       B.zipCode,
                       H.name || \' \' || B.location AS location,
                       B.number,
                       B.complement,
                       B.neighborhood,
                       S.name AS stateName
                  FROM unit_acdContract A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
             LEFT JOIN basCity F
                    ON (F.cityId = B.cityId)
             LEFT JOIN basCountry G
                    ON (G.countryId = F.countryId)
             LEFT JOIN basState S
                    ON S.stateId = F.stateId
            INNER JOIN basLocationType H
                    ON (B.locationTypeId = H.locationTypeId) ';

        if ( strlen( $contractId ) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $contractId;
        }
        if ( strlen( $personName ) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }
        if ( strlen( $courseId ) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $courseId;
        }
        if ( strlen( $courseVersion ) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $courseVersion;
        }
        if ( strlen( $courseName ) > 0 )
        {
            $where .= ' AND ( UNACCENT(C.name) ILIKE UNACCENT(?) OR UNACCENT(C.shortName) ILIKE UNACCENT(?) )';
            $args[] = $courseName . '%';
            $args[] = $courseName . '%';
        }
        if ( strlen( $turnId ) > 0 )
        {
            $where .= ' AND A.turnId = ?';
            $args[] = $turnId;
        }
        if ( strlen( $unitId ) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $unitId;
        }
        
        if ( strlen( $formationLevelId ) > 0 )
        {
            $where .= ' AND C.formationLevelId = ?';
            $args[] = $formationLevelId;
        }

        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        
        $sql .= ' ORDER BY B.name,
                           C.name,
                           A.contractId';
        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar contrato', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }
    
    /**
     * Auto complete for avaliacao institucional
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompleteAvaliacaoInstitucional($context)
    {
        $sql = 'SELECT id_avaliacao, nome
                  FROM ava_avaliacao
                 WHERE id_avaliacao = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup for avaliação institucional
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupAvaliacaoInstitucional($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $avaliacaoId = $lookup->getFilterValue( 'id_avaliacao' );
        $nome = $lookup->getFilterValue( 'nome' );

        $lookup->addFilterField( new MTextField( 'id_avaliacao', $avaliacaoId, _M('Código', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'nome', $nome, _M('Avaliação Institucional', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );

        $columns = array(
            new DataGridColumn( 'id_avaliacao', _M('Código', $module ), 'right', true, null, true ),
            new DataGridColumn( 'nome', _M('Avaliação Institucional', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT id_avaliacao,
                       nome 
                  FROM ava_avaliacao ';

        if ( strlen( $avaliacaoId ) > 0 )
        {
            $where .= ' AND id_avaliacao = ? ';
            $args[] = $avaliacaoId;
        }

        if ( strlen( $nome ) > 0 )
        {
            $where .= ' AND ( UNACCENT(nome) ILIKE UNACCENT(?) )';
            $args[] = $nome . '%';
        }
        
        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 5 );
        }

        $sql .= ' ORDER BY nome';

        $sqlObject = new sql( );
        if ( strlen( $where ) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );
        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar avaliacão institucional', $module ), 15, 0 );
        $lookup->grid->setIsScrollable();
    }
    
    /**
     * Autocomplete da lookup de atividade complementar (sem considerar ocorrência de curso).
     * 
     * @param type $context
     */
    public function autoCompleteCurricularComponentComplementaryActivity($context)
    {
        $sql = 'SELECT DISTINCT A.curricularComponentVersion,
                                C.name AS curricularComponentName
                           FROM unit_acdcurriculum A
                     INNER JOIN acdCurricularComponent C
                             ON (C.curricularComponentId,
                                 C.curricularComponentVersion) = (A.curricularComponentId,
                                                                  A.curricularComponentVersion)
                          WHERE C.curricularComponentId = ?
                            AND A.curriculumTypeId = getParameter(\'ACADEMIC\', \'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY\')::INT';

        $context->setContext(SDatabase::getDefaultDb(), $sql );
    }

    /**
     * Lookup de atividades complementares (sem considerar ocorrência de curso).
     * 
     * @global type $MIOLO
     * @param type $lookup
     */
    public function lookupCurricularComponentComplementaryActivity($lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request( 'lmodule' );

        $MIOLO->uses( 'classes/sagu.class', 'basic' );
        $MIOLO->conf->loadConf( $module );

        $filters->curricularComponentId = $lookup->getFilterValue( 'curricularComponentId' );
        $filters->curricularComponentName = $lookup->getFilterValue( 'curricularComponentName' );
        $filters->curricularComponentVersion = $lookup->getFilterValue( 'curricularComponentVersion' );

        $lookup->addFilterField( new MTextField( 'curricularComponentId', $filters->curricularComponentId, _M('Código da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentName', $filters->curricularComponentName, _M('Nome da disciplina', $module ), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE') ) );
        $lookup->addFilterField( new MTextField( 'curricularComponentVersion', $filters->curricularComponentVersion, _M('Versão da disciplina', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE') ) );
        
        $columns = array(
                new DataGridColumn( 'curricularComponentId', _M('Código da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentVersion', _M('Versão da disciplina', $module ), 'left', true, null, true ),
                new DataGridColumn( 'curricularComponentName', _M('Disciplina', $module ), 'left', true, null, true )
        );

        $sql = 'SELECT C.curricularComponentId,
                       C.curricularComponentVersion,
                       C.name AS curricularComponentName
                  FROM unit_acdcurriculum A
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                   AND C.curricularComponentVersion = A.curricularComponentVersion)';

        // Código do componente curricular
        if ( strlen( $filters->curricularComponentId ) > 0 )
        {
            $where .= ' AND C.curricularComponentId = ? ';
            $args[] = $filters->curricularComponentId;
        }
        
        // Nome do componente curricular
        if ( strlen( $filters->curricularComponentName ) > 0 )
        {
            $where .= ' AND UNACCENT(C.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->curricularComponentName . '%';
        }
        
        // Versão do componente curricular
        if ( strlen( $filters->curricularComponentVersion) > 0 )
        {
            $where .= ' AND C.curricularComponentVersion = ? ';
            $args[] = $filters->curricularComponentVersion;
        }
        
        if ( strlen( $where ) > 0 )
        {
            $sql .= ' WHERE ' . substr( $where, 4 ) . ' AND ';
        }
        else
        {
            $sql .= ' WHERE ';
        }

        $sql .= ' A.curriculumTypeId = getParameter(\'ACADEMIC\', \'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY\')::INT';
        $sql .= ' GROUP BY C.curricularComponentId, C.curricularComponentVersion, C.name';
        $sql .= ' ORDER BY C.name';

        $sqlObject = new sql( );
        $sqlObject->createFrom( SAGU::prepare( $sql, $args ) );

        $lookup->setFilterColumns( SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS') );

        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar atividade complementar', $module ), 15, 0 );

        $lookup->grid->setIsScrollable();
    }
    
}
?>
