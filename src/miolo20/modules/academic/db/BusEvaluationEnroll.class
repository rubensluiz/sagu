<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdEvaluationEnroll table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 10/01/2006
 *
 **/

/**
 * Class to manipulate the acdEvaluationEnroll table
 **/
class BusinessAcademicBusEvaluationEnroll extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listEvaluationEnroll()
    {
        return 'Not implemented';
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $evaluationEnrollId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getEvaluationEnroll($evaluationEnrollId)
    {
        $sql = 'SELECT A.evaluationEnrollId,
                       A.evaluationId,
                       A.enrollId,
                       A.note,
                       A.concept,
                       A.description,
                       A.isNotAppear,
                       TO_CHAR(A.recordDate, \'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\');
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdEvaluationEnroll A
                 WHERE A.evaluationEnrollId = ?
                   AND A.enrollId = ?';

        $args = array($evaluationEnrollId);

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $evaluationEnroll = new acdEvaluationEnroll();

        list ( $evaluationEnroll->evaluationEnrollId,
               $evaluationEnroll->evaluationId,
               $evaluationEnroll->enrollId,
               $evaluationEnroll->note,
               $evaluationEnroll->concept,
               $evaluationEnroll->description,
               $evaluationEnroll->isNotAppear,
               $evaluationEnroll->recordDate,
               $evaluationEnroll->userName,
               $evaluationEnroll->dateTime,
               $evaluationEnroll->ipAddress ) = $result[0];

        return $evaluationEnroll; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchEvaluationEnroll($filters)
    {
        $sql = 'SELECT  A.evaluationEnrollId,
                        A.evaluationId,
                        B.description,
                        A.enrollId,
                        A.note,
                        A.concept,
                        A.description,
                        A.isNotAppear,                        
                        B.professorId,
                        D.name AS professorName
                   FROM acdEvaluationEnroll A
             INNER JOIN unit_acdEvaluation B
                     ON (A.evaluationId = B.evaluationId) 
         LEFT JOIN ONLY basPhysicalPersonProfessor D
                     ON (D.personId = B.professorId)';

        if ( strlen($filters->evaluationEnrollId) > 0 )
        {
            $where .= ' AND A.evaluationEnrollId = ?';
            $args[] = $filters->evaluationEnrollId;
        }
        if ( strlen($filters->evaluationId) > 0 )
        {
            $where .= ' AND A.evaluationId = ?';
            $args[] = $filters->evaluationId;
        }
        if ( strlen($filters->enrollId) > 0 )
        {
            $where .= ' AND A.enrollId = ?';
            $args[] = $filters->enrollId;
        }
        if ( strlen($filters->note) > 0 )
        {
            $where .= ' AND A.note = ?';
            $args[] = $filters->note;
        }
        if ( strlen($filters->concept) > 0 )
        {
            $where .= ' AND UNACCENT(A.concept) ILIKE ?';
            $args[] = $filters->concept . '%';
        }
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $filters->description . '%';
        }
        if ( strlen($filters->isNotAppear) > 0 )
        {
            $where .= ' AND A.isNotAppear = ?';
            $args[] = $filters->isNotAppear;
        }
        if ( strlen($filters->professorId) > 0 )
        {
            $where .= ' AND B.professorId = ?';
            $args[] = $filters->professorId;
        }
        if ( strlen($filters->professorName) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = $filters->professorName . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.description';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertEvaluationEnroll($data)
    {
        $field = strlen($data->concept) > 0 ? 'concept' : 'note';

        $sql = "INSERT INTO acdEvaluationEnroll
                            (evaluationId,
                             enrollId,
                             {$field},
                             description,
                             isNotAppear,
                             recordDate)
                      VALUES (?,
                              ?,
                              ?,
                              ?,
                              ?,
                              TO_TIMESTAMP(?, '" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'))";
        
        $args = array( $data->evaluationId,
                       $data->enrollId,
                       $data->{$field},
                       $data->description,
                       $data->isNotAppear = strlen($data->isNotAppear) > 0 ? $data->isNotAppear : 'false',
                       $data->recordDate );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateEvaluationEnroll($data, $concept)
    {
        if ( $concept )
        {
            $field = 'concept';
        }
        else
        {
            $field = 'note';
        }
        
        $sql = "UPDATE acdEvaluationEnroll
                   SET evaluationId  = ?,
                       enrollId      = ?,
                       {$field}      = ?,
                       description   = ?,
                       isNotAppear   = ?,
                       recordDate    = TO_TIMESTAMP(?, '" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "')
                 WHERE evaluationEnrollId = ? ";

        $args = array( $data->evaluationId,
                       $data->enrollId,
                        ( $concept ? $data->concept : $data->note ),
                       $data->description,
                       $data->isNotAppear = strlen($data->isNotAppear) > 0 ? $data->isNotAppear : 'false',
                       $data->recordDate,
                       $data->evaluationEnrollId );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $evaluationEnrollId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteEvaluationEnroll($evaluationEnrollId)
    {
        $sql = 'DELETE FROM acdEvaluationEnroll
                      WHERE evaluationEnrollId = ?';

        $args = array($evaluationEnrollId);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }
    
    public function deleteFromEnroll($enrollId)
    {
        $sql = 'DELETE FROM acdEvaluationEnroll
                      WHERE enrollId = ?';

        $args = array($enrollId);

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }
    
    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $evaluationId
     * @param unknown_type $enrollId
     * @param unknown_type $concept
     * @return unknown
     */
    public function getEvaluationEnrollCurrentGrade($evaluationId, $enrollId, $concept = false)
    {
        if ( $concept )
        {
            $field = 'concept';
        }
        else
        {
            $field = 'note';
        }
        
        $sql = "SELECT $field
                  FROM acdEvaluationEnroll
                 WHERE evaluationId = ?
                   AND enrollId = ?
              ORDER BY recordDate DESC LIMIT 1";
              
        $args = array($evaluationId,
                      $enrollId);
                      
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        return $result[0][0];
    }
    
    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param unknown_type $evaluationId
     * @param unknown_type $enrollId
     * @param unknown_type $concept
     * @return unknown
     */
    public function getEvaluationEnrollHistory($evaluationId, $enrollId, $concept = false)
    {
        if ( $concept )
        {
            $field = 'concept';
        }
        else
        {
            $field = 'note';
        }
        
        $sql = "SELECT " . $field . ",
                       description,
                       TO_CHAR(recordDate, '" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       username
                  FROM acdEvaluationEnroll
                 WHERE evaluationId = ?
                   AND enrollId = ?
              ORDER BY recordDate DESC";
                       
        $args = array($evaluationId,
                      $enrollId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
    //FIXME: Add comment
    /**
     * Enter description here...
     *
     * @param $evaluationId
     * @param $enrollId
     * @param $concept
     * @return unknown
     */
    public function getEvaluationEnrollByGroup($enrollId, $degreeId)
    {
        $sql = "SELECT A.evaluationId,
                       A.weight,
                       ( SELECT AA.note
                           FROM acdEvaluationEnroll AA
                          WHERE AA.enrollId = ?
                            AND AA.evaluationId = A.evaluationId
                       ) AS note,
                       COALESCE(A.dateforecast, now()) >= now() AS enableGradeTyping
                  FROM unit_acdEvaluation A
                 WHERE A.degreeId = ?";
              
        $args = array( $enrollId,
                       $degreeId );
                      
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        return $result;
    }
    
    /**
     * Function that insert or update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function insertOrUpdateEvaluationEnroll($data, $useConcept = false)
    {
        $data->evaluationEnrollId = $this->checkEvaluationEnroll($data->enrollId, $data->evaluationId);

        if ( strlen($data->evaluationEnrollId) > 0 )
        {
            $ok = $this->updateEvaluationEnroll($data, $useConcept);
        }
        else 
        {
            $ok = $this->insertEvaluationEnroll($data);
        }

        return $ok;
    }
    
    /**
     * Function that checks whether the degree exists
     *
     * @param $degreeEnroll (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function checkEvaluationEnroll($enrollId, $evaluationId)
    {
        $sql = 'SELECT evaluationEnrollId
                  FROM acdEvaluationEnroll
                 WHERE enrollId = ?
                   AND evaluationId = ?';
                           
        $args = array ( $enrollId,
                        $evaluationId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        if ( strlen($result[0][0]) == 0 )
        {
            return null;
        }
        else 
        {
            return $result[0][0];
        }
    }
}

?>
