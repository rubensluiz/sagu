<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for academicCalendarEvent table
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 14/10/2010
 *
 **/

class BusinessAcademicBusAcademicCalendarEvent extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listAcademicCalendarEvent()
    {
        $sql = 'SELECT eventDate,
                       description,
                       haveClass
                  FROM acdacademiccalendarevent   
              ORDER BY description';

        $db = $this->getDatabase();
        $return = $db->query($sql);
        
        return $return;
    }
    
    /**
     * Return a specific record from the database
     *
     * @param $situationId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getAcademicCalendarEvent($academicCalendarEventId)
    {
        $sql = 'SELECT TO_CHAR(eventDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       calendarYear,
                       description,
                       haveClass,
                       academicCalendarEventId,
                       courseId,
                       courseVersion,
                       turnId,
                       unitId,
                       ocorrenciacursoid
                  FROM acdacademiccalendarevent
                 WHERE academicCalendarEventId = ?';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $academicCalendarEventId));

        $academicCalendarEvent = new AcdAcademicCalendarEvent();
        list ( $academicCalendarEvent->eventDate,
               $academicCalendarEvent->calendarYear,
               $academicCalendarEvent->description,
               $academicCalendarEvent->haveClass,
               $academicCalendarEvent->academicCalendarEventId,
               $academicCalendarEvent->courseId,
               $academicCalendarEvent->courseVersion,
               $academicCalendarEvent->turnId,
               $academicCalendarEvent->unitId,
               $academicCalendarEvent->ocorrenciacursoid,
               $academicCalendarEvent->userName,
               $academicCalendarEvent->dateTime,
               $academicCalendarEvent->ipAddress ) = $result[0];

        return $academicCalendarEvent; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchAcademicCalendarEvent($filters, $toObject = false)
    {
        $cols = array(
            'eventDate',
            'calendarYear',
            'description',
            'haveClass',
            'academicCalendarEventId',
            'courseId',
            'courseName',
            'courseVersion',
            'turnId',
            'turnDescription',
            'unitId',
            'unitDescription',
            'ocorrenciacursoid'
        );

        $sql= 'SELECT TO_CHAR(A.eventDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                      A.calendarYear,
                      A.description,
                      A.haveClass,
                      A.academicCalendarEventId,
                      A.courseId,
                      COALESCE(D.nome, C.name) AS courseName,
                      A.courseVersion,
                      A.turnId,
                      T.description AS turnDescription,
                      A.unitId,
                      U.description AS unitDescription,
                      A.ocorrenciacursoid
                 FROM acdacademiccalendarevent A
            LEFT JOIN acpocorrenciacurso B
                   ON (A.ocorrenciacursoid = B.ocorrenciacursoid)
            LEFT JOIN acdCourse C
                   ON (C.courseId = A.courseId)
            LEFT JOIN basTurn T
                   ON (T.turnId = COALESCE(B.turnid, A.turnId))
            LEFT JOIN basUnit U
                   ON (U.unitId = COALESCE(B.turnid, A.unitId))
            LEFT JOIN acpcurso D
                   ON (D.cursoid = B.cursoid)';

        if ( strlen($filters->eventDate) > 0 )
        {
            $where .= ' AND A.eventDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE'). '\') ';
            $args[] = $filters->eventDate;
        }
        
        if ( strlen($filters->calendarYear) > 0 )
        {
            $where .= ' AND calendarYear = ? ';
            $args[] = $filters->calendarYear;
        }
        
        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }
        
        if ( strlen($filters->haveClass) > 0 )
        {
            $where .= ' AND haveClass = ? ';
            $args[] = $filters->haveClass;
        }

        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ? ';
            $args[] = $filters->courseId;
        }

        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ? ';
            $args[] = $filters->courseVersion;
        }

        if ( strlen($filters->turnId) > 0 )
        {
            $where .= ' AND A.turnId = ? ';
            $args[] = $filters->turnId;
        }

        if ( strlen($filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ? ';
            $args[] = $filters->unitId;
        }
        
        if ( strlen($filters->ocorrenciacursoid) > 0 )
        {
            $where .= ' AND A.ocorrenciacursoid = ? ';
            $args[] = $filters->ocorrenciacursoid;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
            $sql .= ' ORDER BY A.eventDate';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $toObject ? SAGU::resultToObject($result, $cols) : $result;
    }

    
    /**
     * Events of the Year get dates that there will be no class
     *
     * @param $year (string): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function getDatesThatThereWillBeNoClass($year, $courseId = null, $courseVersion = null, $turnId = null, $unitId = null)
    {
        $sql= 'SELECT academicCalendarEventId
              FROM acdacademiccalendarevent A
             WHERE haveClass = \'f\'
               AND calendarYear >= ? ';

        $args[] = $year;

        if ( strlen($courseId) > 0 && strlen($courseVersion) > 0 && strlen($turnId) > 0 && strlen($unitId) > 0 )
        {
            $args[] = $courseId;
            $args[] = $courseVersion;
            $args[] = $turnId;
            $args[] = $unitId;

            //Caso ocorrencia de curso nao existir, o evento vale para todos os cursos
            $cond = ' courseId = ?
                 AND courseVersion = ?
                 AND turnId = ?
                 AND unitId = ?';

            $sql .= "AND (CASE WHEN courseId IS NULL THEN 1=1 ELSE ({$cond}) END)";
        }

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        $out = array();
        foreach ( (array) $result as $r )
        {
            $out[] = $this->getAcademicCalendarEvent( $r[0] );
        }

        return $out;
    }
    
    
    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertAcademicCalendarEvent($data)
    {
        $sql = 'INSERT INTO acdacademiccalendarevent
                            (eventDate,
                             calendarYear,
                             description,
                             haveClass,
                             courseId,
                             courseVersion,
                             turnId,
                             unitId,
                             ocorrenciacursoid)
                     VALUES (TO_DATE(?, \'dd/mm/yyyy\'), ?, ?, ?, ?, ?, ?, ?,?)';

        $args = array(
            $data->eventDate,
            $data->calendarYear,
            $data->description,
            $data->haveClass,
            $data->courseId,
            $data->courseVersion,
            $data->turnId,
            $data->unitId,
            $data->ocorrenciacursoid
        );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateAcademicCalendarEvent($data)
    {
        $sql = 'UPDATE acdacademiccalendarevent
                   SET description = ?,
                       calendarYear = ?,
                       haveClass = ?,
                       academicCalendarEventId = ?,
                       courseId = ?,
                       courseVersion = ?,
                       turnId = ?,
                       unitId = ?,
                       ocorrenciacursoid = ?
                 WHERE eventDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE'). '\') ';

        $args = array(
            $data->description,
            $data->calendarYear,
            $data->haveClass,
            $data->academicCalendarEventId,
            $data->courseId,
            $data->courseVersion,
            $data->turnId,
            $data->unitId,
            $data->ocorrenciacursoid
        );

        $db = $this->getDatabase();
        $sql = SAGU::prepare($sql, $args);

        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $eventDate (date): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteAcademicCalendarEvent($academicCalendarEventId)
    {
        $sql = 'DELETE FROM acdacademiccalendarevent
                      WHERE academicCalendarEventId = ?';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, array($academicCalendarEventId)));
        
        return $result;
    }
}

?>

