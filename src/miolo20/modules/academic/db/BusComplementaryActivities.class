<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Class to manipulate the acdComplementaryActivities table data.
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Creation date 2005/03/10
 *
 **/

class BusinessAcademicBusComplementaryActivities extends sBusiness
{
   /**
    * Insert a new learning period
    * 
    * @param $data (object): acdPeriod object
    *
    * @return (boolean): True if succed otherwise fails
    *
    */
    function insertComplementaryActivities($data)
    {        
        $sql = 'INSERT INTO acdComplementaryActivities
                            (enrollId,
                             description,
                             totalHours,
                             totalCredits,
                             degree,
                             concept,
                             periodId,
                             complementaryActivitiesCategoryId'; 

        $sql2 = 'VALUES (?,?,?,?,?,?,?,?';

        $args = array($data->enrollId,
                      $data->description,
                      $data->totalHours,
                      $data->totalCredits,
                      $data->degree,
                      $data->concept,
                      $data->periodId,
                      $data->complementaryActivitiesCategoryId);

        if ( strlen($data->curriculumIdOld) > 0 )
        {
            $sql   .= ', curriculumIdOld';
            $sql2  .= ', ?';
            $args[] = $data->curriculumIdOld;
        }

        $sql2 .= ' )';
        $sql  .= ' )';
        $sql  .= $sql2;

        $db = $this->getDatabase();        
        $result = $db->Execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * List the available periods for enroll for a specific contractId
     * 
     * @param $data (object): acdPeriod object
     *
     * @return If the specified complementaryActivitiesId exists, returns an object (period) containing its data. 
     * Otherwise, returns null.
     *
     **/
    public function listComplementaryActivities($complementaryActivitiesId)
    {
        $sql = 'SELECT A.complementaryActivitiesId
                       A.enrollId,
                       A.description,
                       A.totalHours,
                       A.totalCredits,
                       A.degree,
                       A.consept,
                       A.periodId,
                       A.complementaryActivitiesCategoryId
                  FROM acdComplementaryActivities A
                 WHERE A.complementaryActivitiesId = ? 
              ORDER BY A.complementaryActivitiesId ';
    
        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql,$complementaryActivitiesId));
       
        return $result; 
    }


    /**
    * Obtain the specified learning period id data.
    * 
    * @param $data (object): acdPeriod object
    *
    * @return If the specified complementaryActivitiesId exists, returns an object (period) containing its data. 
    * Otherwise, returns null.
    *
    */
    function getComplementaryActivities($complementaryActivitiesId)
    {
        $sql = '      SELECT A.enrollId,                       
                             A.description,                         
                             A.totalHours,                                
                             A.totalCredits, 
                             A.degree,   
                             A.concept,
                             A.periodId,                               
                             A.complementaryActivitiesCategoryId,
                             A.userName,
                             TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                             A.ipAddress,
                             A.curriculumIdOld
                       FROM  acdComplementaryActivities A  
                      WHERE  A.complementaryActivitiesId = ?  ';
    
        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql,$complementaryActivitiesId));

        $period = new acdComplementaryActivities();
        
        $period->complementaryActivitiesId = $complementaryActivitiesId;

        list ( $period->enrollId,
               $period->description,
               $period->totalHours,
               $period->totalCredits,
               $period->degree,
               $period->concept,
               $period->periodId,
               $period->complementaryActivitiesCategoryId,
               $period->userName,
               $period->dateTime,
               $period->ipAddress,
               $period->curriculumIdOld) = $result[0];

        return $period; 
    }

    /**
     * Search for learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the syarch results.
     *
     */
    function searchComplementaryActivities($data)
    {
            $sql = '  SELECT A.complementaryActivitiesId,
                             A.enrollId,
                             A.description,
                             A.totalHours,
                             A.totalCredits, 
                             A.degree,
                             A.concept,
                             A.periodId,
                             A.complementaryActivitiesCategoryId,
                             D.description
                       FROM  acdComplementaryActivities A
                       LEFT JOIN unit_acdEnroll B
                           ON (A.enrollId = B.enrollId)
                       LEFT JOIN unit_acdContract C
                           ON (B.contractId = C.contractId)
                       LEFT JOIN acdComplementaryActivitiesCategory D
                           ON (D.complementaryActivitiesCategoryId = A.complementaryActivitiesCategoryId) ';

        if ( strlen($data->complementaryActivitiesId) > 0 )
        {
            $where .= '     AND A.complementaryActivitiesId = ?';
            $args[] = $data->complementaryActivitiesId;
        }

        if ( strlen($data->enrollId) > 0 )
        {
            $where .= '     AND A.enrollId = ?';
            $args[] = $data->enrollId;
        }
        
        if ( strlen($data->groupId) > 0 )
        {
            $where .= '     AND B.groupId = ?';
            $args[] = $data->groupId;
        }

        if ( strlen($data->description) > 0 )
        {
            $where .= '     AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $data->description . '%';
        }

        if ( strlen($data->totalHours) > 0 )
        {
            $where .= '     AND A.totalHours = ?';
            $args[] = $data->totalHours;
        }

        if ( strlen($data->totalCredits) > 0 )
        {
            $where .= '     AND A.totalCredits = ?';
            $args[] = $data->totalCredits;
        }

        if ( strlen($data->degree) > 0 )
        {
            $where .= '     AND A.degree = ?';
            $args[] = $data->degree;
        }

        if ( strlen($data->periodId) > 0 )
        {
            $where .= '     AND A.periodId = ?';
            $args[] = $data->periodId;
        }

        if ( strlen($data->concept) > 0 )
        {
            $where .= '     AND A.concept = ?';
            $args[] = $data->concept;
        }

        if ( strlen($data->complementaryActivitiesCategoryId) > 0 )
        {
            $where .= '     AND A.complementaryActivitiesCategoryId = ?';
            $args[] = $data->complementaryActivitiesCategoryId;
        }

        if ( strlen($data->personId) > 0 )
        {
            $where .= '     AND C.personId = ?';
            $args[] = $data->personId;
        }

        if ( strlen($data->contractId) > 0 )
        {
            $where .= '     AND C.contractId = ?';
            $args[] = $data->contractId;
        }

        if ( $where != '' )
        {
            $sql     .= '    WHERE ' . substr($where,8) .
                       ' ORDER BY A.complementaryActivitiesCategoryId, A.description';
            $db      = $this->getDatabase();

            $result  = $db->query(SAGU::prepare($sql,$args));
        }
        
        return $result;
    }

    /**
     * Update the specified learning period data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the learning period and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateComplementaryActivities($data)
    {
        $sql = 'UPDATE acdComplementaryActivities                             
                       SET enrollId        = ?,                       
                           description     = ?,                                
                           totalHours      = ?,  
                           totalCredits    = ?,   
                           degree          = ?,                                 
                           concept         = ?,
                           periodId        = ?,                               
                           complementaryActivitiesCategoryId = ?                             
                       WHERE  complementaryActivitiesId      = ?  ';


        $args = array($data->enrollId,
                      $data->description,
                      $data->totalHours,
                      $data->totalCredits,
                      $data->degree,
                      $data->concept,
                      $data->periodId,
                      $data->complementaryActivitiesCategoryId,
                      $data->complementaryActivitiesId );

        $db = $this->getDatabase();

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete the specified learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $complementaryActivitiesId (int): Identifier of the learning period to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteComplementaryActivities($complementaryActivitiesId)
    {
        $database      = $this->getDatabase();
        $result = NULL;
        
        $delete = 'DELETE FROM acdComplementaryActivities WHERE complementaryActivitiesId = ?';
        $result = $database->Execute(SAGU::prepare($delete, $complementaryActivitiesId));        
        return $result;
    }

    function getPupilGroupEnroll($groupId, $contractId)
    {
        $sql = 'SELECT enrollId
                  FROM unit_acdEnroll
                 WHERE groupId = ?
                   AND contractId = ?';

        $args = array( $groupId,
                       $contractId );

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }

    function insertPupilGroupEnroll($data)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $busContract  = new BusinessAcademicBusContract();
        $contractData = $busContract->getContract($data->contractId);

        $sql = 'SELECT curriculumId
                  FROM unit_acdcurriculum
                 WHERE courseId = ?
                   AND courseVersion = ?
                   AND unitId = ?
                   AND turnId = ?
                   AND curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY') . ')';

        $args = array( $contractData->courseId,
                       $contractData->courseVersion,
                       $contractData->unitId,
                       $contractData->turnId);

        $db = $this->getDatabase();
        
        $curriculum   = $db->query(SAGU::prepare($sql, $args));
        $curriculumId = $curriculum[0][0];
        
        if (strlen($curriculumId) > 0)
        {
            $sql = 'SELECT nextval(\'seq_enrollid\')'; 

            $enroll   = $db->query($sql);
            $enrollId = $enroll[0][0];
            
            $sql = 'INSERT INTO acdEnroll
                                (enrollId,
                                 curriculumId,
                                 groupId,
                                 contractId,
                                 dateEnroll,
                                 hourEnroll,
                                 concept,
                                 statusId)
                          VALUES (?,
                                  ?,
                                  ?,
                                  ?,
                                  now(),
                                  now(),
                                  ?,' .
                                  SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED') . ')';

            $args = array( $enrollId,
                           $curriculumId,
                           $data->groupId,
                           $data->contractId,
                           $data->concept );

            $result = $db->execute(SAGU::prepare($sql, $args));

            if (count($this->getErrors()) > 0) 
            {
                return null;
            }
            else
            {
                return $enrollId;
            }
        }

        return null;
    }
}

   
?>
