<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdStateContractField table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 09/01/2006
 *
 **/

/**
 * Class to manipulate the acdStateContractField table
 **/
class BusinessAcademicBusStateContractField extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     *
     * @returns (array): Return an array with the entire table
     *
     **/
    public function listStateContractField()
    {


    }
    
    /**
     * Return a specific record from the database
     *
     * @param $stateContractFieldId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getStateContractField($stateContractFieldId)
    {
        $sql = 'SELECT A.stateContractFieldId,
                       A.stateContractId,
                       A.description,
                       A.rows,
                       A.columns,
                       A.isLookup,
                       A.lookupName,
                       A.lookupModule,
                       A.fieldValidator,
                       A.isRequired,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM acdStateContractField A
                 WHERE stateContractFieldId = ? ';

        //$db     = $this->getDatabase();

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $stateContractFieldId));
        

        $data = new acdStateContractField();
        list ( $data->stateContractFieldId,
               $data->stateContractId,
               $data->description,
               $data->rows,
               $data->columns,
               $data->isLookup,
               $data->lookupName,
               $data->lookupModule,
               $data->fieldValidator,
               $data->isRequired,
               $data->userName,
               $data->dateTime) = $result[0];

        return $data;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchStateContractField($filters, $returnAsObject = false)
    {
        $sql= 'SELECT A.stateContractFieldId,
                      A.stateContractId,
                      B.description,
                      A.description,
                      A.rows,
                      A.columns,
                      A.isLookup,
                      A.lookupName,
                      A.lookupModule,
                      A.fieldValidator,
                      A.isRequired
                 FROM acdStateContractField A
           INNER JOIN acdStateContract B
                   ON (A.stateContractId = B.stateContractId) ';

        if ( strlen($filters->stateContractFieldId) > 0 )
        {
            $where .= ' AND A.stateContractFieldId = ? ';
            $args[] = $filters->stateContractFieldId;
        }

        if ( strlen($filters->stateContractId) > 0 )
        {
            $where .= ' AND A.stateContractId = ? ';
            $args[] = $filters->stateContractId;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }
        
        if ( strlen($filters->rows) > 0 )
        {
            $where .= ' AND A.rows = ? ';
            $args[] = $filters->rows;
        }
        
        if ( strlen($filters->columns) > 0 )
        {
            $where .= ' AND A.columns = ? ';
            $args[] = $filters->columns;
        }
        
        if ( strlen($filters->isLookup) > 0 )
        {
            $where .= ' AND A.isLookup = ? ';
            $args[] = $filters->isLookup;
        }

        if ( strlen($filters->lookupName) > 0 )
        {
            $where .= ' AND A.lookupName ILIKE ? ';
            $args[] = $filters->lookupName . '%';
        }
        
        if ( strlen($filters->lookupModule) > 0 )
        {
            $where .= ' AND A.lookupModule ILIKE ? ';
            $args[] = $filters->lookupModule . '%';
        }
        
        if ( strlen($filters->fieldValidator) > 0 )
        {
            $where .= ' AND A.fieldValidator ILIKE ? ';
            $args[] = $filters->fieldValidator . '%';
        }
        
        if ( strlen($filters->isRequired) > 0 )
        {
            $where .= ' AND A.isRequired = ? ';
            $args[] = $filters->isRequired;
        }
                
        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY A.description ';
            //$db = $this->getDatabase();
            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
            
        }
        
        $cols = array(
            'stateContractFieldId',
            'stateContractId',
            'description',
            'description',
            'rows',
            'columns',
            'isLookup',
            'lookupName',
            'lookupModule',
            'fieldValidator',
            'isRequired'
        );
        
        return $returnAsObject ? SAGU::resultToObject($result, $cols) : $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertStateContractField($data)
    {
        $sql = 'INSERT INTO acdStateContractField
                            (stateContractId,
                             description,
                             rows,
                             columns,
                             isLookup,
                             lookupName,
                             lookupModule,
                             fieldValidator,
                             isRequired)
                     VALUES (?,?,?,?,?,?,?,?,?) ';

        $args = array(
                        $data->stateContractId,
                        $data->description,
                        $data->rows,
                        $data->columns,
                        $data->isLookup,
                        $data->lookupName,
                        $data->lookupModule,
                        $data->fieldValidator,
                        $data->isRequired
                       );

        //$db     = $this->getDatabase();
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args, false));
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
   public function updateStateContractField($data)
    {
        $sql = 'UPDATE acdStateContractField
                   SET stateContractId = ?,
                       description = ?,
                       rows = ?,
                       columns = ?,
                       isLookup = ?,
                       lookupName = ?,
                       lookupModule = ?,
                       fieldValidator = ?,
                       isRequired = ?
                 WHERE stateContractFieldId = ? ';

        $args = array(
                        $data->stateContractId,
                        $data->description,
                        $data->rows,
                        $data->columns,
                        $data->isLookup,
                        $data->lookupName,
                        $data->lookupModule,
                        $data->fieldValidator,
                        $data->isRequired,
                        $data->stateContractFieldId
                        );
        //$db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args, false);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        

        return $result;

    }

    /**
     * Delete a record
     *
     * @param $stateContractFieldId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteStateContractField($stateContractFieldId)
    {
        $sql = 'DELETE FROM acdStateContractField
                      WHERE stateContractFieldId = ?';
                        
        //$db     = $this->getDatabase();
        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $stateContractFieldId));
        
        return $result;
    }
}
?>
