<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class to manipulate the acdPeriodEnrollDate table data.
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Creation date 2005/03/10
 *
 **/

class BusinessAcademicBusPeriodEnrollDate extends sBusiness
{
   /**
    * Insert a new learning period
    *
    * @param $data (object): acdPeriod object
    * @return (boolean): True if succed otherwise fails
    */
    public function insertPeriodEnrollDate($data)
    {
        $sql = 'INSERT INTO acdPeriodEnrollDate
                            (learningPeriodId,
                             description,
                             beginDate,
                             endDate,
                             isInternet,
                             isAdjustment,
                             isSelectiveProc)
                     VALUES (?,?,TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),?,?,?)                           ' ;

        $args = array( $data->learningPeriodId,
                       $data->description,
                       $data->beginDate,
                       $data->endDate,
                       $data->isInternet,
                       $data->isAdjustment,
                       $data->isSelectiveProc );

        $result = $this->getDatabase()->Execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * List the available periods for enroll for a specific contractId
     *
     * @param $data (object): acdPeriod object
     * @return If the specified periodEnrollDateId exists, returns an object (period) containing its data.
     * Otherwise, returns null.
     **/
    public function listPeriodEnrollDate($contractId, $isFreshman=false, $isEnrollWeb=false)
    {
        $isEnrollWeb ? $unit = 'unit_' : $unit = '';
        
        $sql = 'SELECT A.learningPeriodId,
                       C.description
                  FROM ' . $unit . 'acdPeriodEnrollDate A
            INNER JOIN ' . $unit . 'acdlearningperiod B
                    ON (B.learningPeriodId = A.learningPeriodId)
            INNER JOIN acdPeriod C
                    ON (C.periodId = B.periodId)
            INNER JOIN ' . $unit . 'acdContract D
                    ON (D.courseId = B.courseId
                        AND D.courseVersion = B.courseVersion
                        AND D.turnId = B.turnId
                        AND D.unitId = B.unitId)
                 WHERE D.contractId = ?
                   AND date(now()) BETWEEN A.beginDate AND A.endDate ';

        if ($isFreshman)
        {
            $sql .= ' AND (A.isSelectiveProc = \'' . DB_TRUE . '\' OR A.isAdjustment = \'' . DB_TRUE . '\') ';
        }
        else
        {
            $sql .= ' AND A.isSelectiveProc = \'' . DB_FALSE . '\' ';
        }
        
        if($isEnrollWeb)
        {
            $sql .= ' AND A.isInternet is TRUE ';
        }

        $sql .= ' ORDER BY A.beginDate DESC,
                           C.description';

        $result = $this->getDatabase()->query(SAGU::prepare($sql,$contractId));

        return $result;
    }

   /**
     * List all records from the table handled by the class
     *
     * @param: None
     * @returns (array): Return an array with the entire table
     **/
    public function listPeriodEnrollDateSearch()
    {
        $sql = ' SELECT DISTINCT C.periodId,
                                 C.description
                            FROM unit_acdPeriodEnrollDate A
                      INNER JOIN unit_acdlearningperiod B
                              ON (B.learningPeriodId = A.learningPeriodId)
                      INNER JOIN acdPeriod C
                              ON (C.periodId = B.periodId)
                        ORDER BY C.description DESC';

        $result = $this->getDatabase()->query($sql);

        return $result;
    }

    /**
    * Obtain the specified learning period id data.
    *
    * @param $data (object): acdPeriod object
    * @return If the specified periodEnrollDateId exists, returns an object (period) containing its data.
    * Otherwise, returns null.
    */
    public function getPeriodEnrollDate($periodEnrollDateId)
    {
        $sql = 'SELECT A.learningPeriodId,
                       A.description,
                       TO_CHAR(A.beginDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(A.endDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.isInternet,
                       A.isAdjustment,
                       A.isSelectiveProc,
                       B.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                       FROM unit_acdPeriodEnrollDate A
                       LEFT JOIN unit_acdlearningperiod B
                       ON (A.learningPeriodId = B.learningPeriodId)
                       WHERE A.periodEnrollDateId = ?';

        $result = $this->getDatabase()->query(SAGU::prepare($sql,$periodEnrollDateId));
        $period = new AcdPeriodEnrollDate();
        $period->periodEnrollDateId = $periodEnrollDateId;

        list ( $period->learningPeriodId,
               $period->periodEnrollDateDescription,
               $period->beginDate,
               $period->endDate,
               $period->isInternet,
               $period->isAdjustment,
               $period->isSelectiveProc,
               $period->learningPeriodDescription,
               $period->userName,
               $period->dateTime,
               $period->ipAddress ) = $result[0];

        return $period;
    }

    /**
    * Obtain the specified type from a learning period id data.
    *
    * @param $data (integer): acdLearningPeriod primary key
    * @return If the specified periodEnrollDate exists, returns an object (periodEnrollDate) containing its data.
    * Otherwise, returns null.
    */
    public function getCurrentPeriodEnrollDate($learningPeriodId, $isWebServices = false)
    {
        $acdlearningperiod = "unit_acdlearningperiod";
        $acdPeriodEnrollDate = "unit_acdPeriodEnrollDate";
        
        // Para webservices.
        if ( $isWebServices )
        {
            $acdlearningperiod = "acdlearningperiod";
            $acdPeriodEnrollDate = "acdPeriodEnrollDate";
        } 
        
        
        $sql = "SELECT A.periodEnrollDateId,
                       A.learningPeriodId,
                       A.description,
                       TO_CHAR(A.beginDate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "'),
                       TO_CHAR(A.endDate, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "'),
                       A.isInternet,
                       A.isAdjustment,
                       A.isSelectiveProc,
                       B.description
                  FROM {$acdPeriodEnrollDate} A
            INNER JOIN {$acdlearningperiod} B
                    ON ( A.learningPeriodId = B.learningPeriodId )
                 WHERE A.learningPeriodId = ?
                   AND date(now()) BETWEEN A.beginDate AND A.endDate";

        $result = $this->getDatabase()->query(SAGU::prepare($sql,$learningPeriodId));

        $period = new AcdPeriodEnrollDate();

        list ( $period->periodEnrollDateId,
               $period->learningPeriodId,
               $period->periodEnrollDateDescription,
               $period->beginDate,
               $period->endDate,
               $period->isInternet,
               $period->isAdjustment,
               $period->isSelectiveProc,
               $period->learningPeriodDescription ) = $result[0];

        return $period;
    }

    /**
     * Search for learning period.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     * @param $data Object containing data to filter the listing.
     * @return An array containing the search results.
     */
    public function searchPeriodEnrollDate($data)
    {
            $sql = '  SELECT A.periodEnrollDateId,
                             A.learningPeriodId,
                             A.description,
                             TO_CHAR(A.beginDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                             A.isInternet,
                             A.isAdjustment,
                             A.isSelectiveProc
                        FROM unit_acdPeriodEnrollDate A
                   LEFT JOIN unit_acdlearningperiod B
                          ON (A.learningPeriodId = B.learningPeriodId)';

        if ( strlen($data->periodEnrollDateId) > 0 )
        {
            $where .= '     AND A.periodEnrollDateId = ?';
            $args[] = $data->periodEnrollDateId;
        }

        if ( strlen($data->learningPeriodId) > 0 )
        {
            $where .= '     AND A.learningPeriodId = ?';
            $args[] = $data->learningPeriodId;
        }

        if ( strlen($data->periodEnrollDateDescription) > 0 )
        {
            $where .= '     AND UNACCENT(A.description) ILIKE UNACCENT(?)';
            $args[] = $data->periodEnrollDateDescription.'%';
        }

        if ( strlen($data->beginDateLessons) > 0 )
        {
            $where .= '     AND A.beginDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->beginDateLessons;
        }

        if ( strlen($data->endDateLessons) > 0 )
        {
            $where .= '     AND A.endDate = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->endDateLessons;
        }

        if ( strlen($data->isInternet) > 0 )
        {
            $where .= '     AND A.isInternet = ?';
            $args[] = $data->isInternet;
        }

        if ( strlen($data->isAdjustment) > 0 )
        {
            $where .= '     AND A.isAdjustment = ?';
            $args[] = $data->isAdjustment;
        }

        if ( strlen($data->isSelectiveProc) > 0 )
        {
            $where .= '     AND A.isSelectiveProc = ?';
            $args[] = $data->isSelectiveProc;
        }

        if ( strlen($data->formationLevelId) > 0 )
        {
            $where .= '     AND B.formationLevelId = ?';
            $args[] = $data->formationLevelId;
        }

        if ( strlen($data->periodId) > 0 )
        {
            $where .= '     AND B.periodId = ?';
            $args[] = $data->periodId;
        }

        if ( strlen($data->courseId) > 0 )
        {
            $where .= '     AND B.courseId = ?';
            $args[] = $data->courseId;
        }

        if ( strlen($data->courseVersion) > 0 )
        {
            $where .= '     AND B.courseVersion = ?';
            $args[] = $data->courseVersion;
        }
        
        if ( strlen($data->turnId) > 0 )
        {
            $where .= '     AND B.turnId = ?';
            $args[] = $data->turnId;
        }
        
        if ( strlen($data->unitId) > 0 )
        {
            $where .= '     AND B.unitId = ?';
            $args[] = $data->unitId;
        }

        if ( $where != '' )
        {
            $sql .= '    WHERE ' . substr($where,8);
        }
        
        $sql .= ' ORDER BY A.description';

        $result = $this->getDatabase()->query(SAGU::prepare($sql,$args));

        return $result;
    }

    /**
     * Update the specified learning period data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     * @param $data (object): Data identifying the learning period and its new data.
     * @return On succeed, returns true. Otherwise, false.
     */
    public function updatePeriodEnrollDate($data)
    {
        $sql = 'UPDATE acdPeriodEnrollDate
                       SET learningPeriodId = ?,
                       description = ?,
                       beginDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       endDate = TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       isInternet = ?,
                       isAdjustment = ?,
                       isSelectiveProc = ?
                       WHERE  periodEnrollDateId = ?';

        $args = array( $data->learningPeriodId,
                       $data->description,
                       $data->beginDate,
                       $data->endDate,
                       $data->isInternet,
                       $data->isAdjustment,
                       $data->isSelectiveProc,
                       $data->periodEnrollDateId );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete the specified peirod enroll date.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     * @param $periodEnrollDateId (int): Identifier of the period enroll date to be retrieved.
     * @return On succeed, returns true. Otherwise, false.
     */
    public function deletePeriodEnrollDate($periodEnrollDateId)
    {
        $delete = 'DELETE FROM acdPeriodEnrollDate
                    WHERE periodEnrollDateId = ?';


        $db = $this->getDatabase();
        $result = $db->Execute(SAGU::prepare($delete,$periodEnrollDateId));

        return $result;
    }
}
?>
