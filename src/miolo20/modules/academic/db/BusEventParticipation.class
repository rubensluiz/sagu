<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdEventParticipation table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 09/01/2006
 */

/**
 * Class to manipulate the acdEventParticipation table
 */
class BusinessAcademicBusEventParticipation extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @returns (array): Return an array with the entire table
     */
    public function listEventParticipation()
    {
        $sql= 'SELECT A.eventId,
                      B.description,
                      A.personId,
                      C.name
                 FROM unit_acdEventParticipation A
                INNER JOIN unit_acdEvent B
                   ON (A.eventId = B.eventId)
                INNER JOIN ONLY basPhysicalPerson C
                   ON (A.personId = C.personId)';

        $db = $this->getDatabase();
        $result = $db->query($sql);

        return $result;
    }
    
    /**
     * Retorna todos os inscritos de um evento
     *
     * @param $eventId (integer): Código do evento
     *
     * @return (array): Retorna um array com o código e nome das pessoas que participaram ou participarão
     */
    public function getEventParticipation($eventId)
    {
        $sql= 'SELECT A.personId,
                      C.name
                 FROM unit_acdEventParticipation A
                INNER JOIN unit_acdEvent B
                   ON (A.eventId = B.eventId)
                INNER JOIN ONLY basPhysicalPerson C
                   ON (A.personId = C.personId)
                WHERE A.eventId = ?';

        $args[] = $eventId;
        
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     */
    public function searchEventParticipation($filters)
    {
        $sql= 'SELECT A.eventId,
                      B.description,
                      A.personId,
                      C.name
                 FROM unit_acdEventParticipation A
                INNER JOIN unit_acdEvent B
                   ON (A.eventId = B.eventId)
                INNER JOIN ONLY basPhysicalPerson C
                   ON (A.personId = C.personId) ';

        if ( strlen($filters->eventId) > 0 )
        {
            $where .= ' AND A.eventId = ? ';
            $args[] = $filters->eventId;
        }
        elseif ( strlen($filters->eventDescription) > 0 )
        {
            $where .= " AND B.description ILIKE '%".$filters->eventDescription."%' ";
        }
        
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        elseif ( strlen($filters->personName) > 0 )
        {
            $where .= " AND C.name ILIKE '%".$filters->personName."%' ";
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE '.substr($where, 4).' ORDER BY B.description ';
            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     */
    public function insertEventParticipation($data)
    {
        $sql = 'INSERT INTO acdEventParticipation
                            (eventId,
                             personId)
                     VALUES (?,?) ';

        $args = array( $data->eventId,
                       $data->personId );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateEventParticipation($data)
    {
        $sql = 'UPDATE acdEventParticipation
                   SET eventId = ?,
                       personId = ?
                 WHERE eventId = ?
                   AND personId = ?';

        $args[] = $data->eventId;
        $args[] = $data->personId;
        $args[] = $data->eventIdOld;
        $args[] = $data->personIdOld;

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        return $result;
    }

    /**
     * Delete a record
     *
     * @param $eventParticipationId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteEventParticipation($args)
    {
        $sql = 'DELETE FROM acdEventParticipation
                      WHERE eventId = ? 
                        AND personId = ?';
                        
        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }
}
?>
