<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdSubclass table
 *
 * @author Andre Chagas Dias [andre@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 25/08/2008
 *
 **/

/**
 * Class to manipulate the acdClass table
 **/
class BusinessAcademicBusSubclass extends sBusiness
{

    /**
     * Return a specific record from the database
     *
     * @param $subclassId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getSubclass($subclassId)
    {
        $sql = 'SELECT A.subclassId,
                       A.classId,
                       A.description,
                       A.personId,
                       A.groupId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM unit_acdsubclass A
                 WHERE subclassId = ? ';

        $db     = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $subclassId));
        

        $class = new acdSubclass();
        list ( $class->subclassId,
               $class->classId,
               $class->subclassDescription_,
               $class->personId,
               $class->groupId,
               $class->userName,
               $class->dateTime,
               $class->ipAddress ) = $result[0];

        return $class;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchSubclass($filters)
    {
        $sql = 'SELECT A.subclassId,
                       B.name,
                       A.description,
                       C.personId || \' - \' || C.name,
                       D.groupId
                  FROM unit_acdsubclass A
            INNER JOIN unit_acdclass B
                    ON (A.classId = B.classId)
            LEFT JOIN ONLY basPerson C
                    ON (A.personId = C.personId)
            LEFT JOIN ONLY unit_acdGroup D
                    ON (A.groupId = D.groupId)';

        if ( strlen($filters->subclassId) > 0 )
        {
            $where .= ' AND A.subclassId ILIKE ? ';
            $args[] = $filters->subclassId.'%';
        }
        if ( strlen($filters->classId) > 0 )
        {
            $where .= ' AND A.classId ILIKE ? ';
            $args[] = $filters->classId.'%';
        }
        if ( strlen($filters->subclassDescription_) > 0 )
        {
            $where .= ' AND UNACCENT(A.description) ILIKE UNACCENT(?) ';
            $args[] = $filters->subclassDescription_.'%';
        }
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ? ';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->groupId) > 0 )
        {
            $where .= ' AND A.groupId = ? ';
            $args[] = $filters->groupId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                     ORDER BY A.description ';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertSubclass($data)
    {
        $sql = 'INSERT INTO acdSubclass
                            (subclassId,
                             classId,
                             description,
                             personId,
                             groupId)
                     VALUES (?,?,?,?,?) ';

        $args = array( $data->subclassId,
                       $data->classId,
                       $data->subclassDescription_,
                       $data->personId,
                       $data->groupId );

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));
        
        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateSubclass($data)
    {
        $sql = 'UPDATE acdSubclass
                   SET classId                 = ?,
                       description             = ?,
                       personId                = ?,
                       groupId                 = ?
                 WHERE subclassId              = ? ';

        $args = array( $data->classId,
                       $data->subclassDescription_,
                       $data->personId,
                       $data->groupId,
                       $data->subclassId );

        $db   = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $subclassId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteSubclass($subclassId)
    {
        $sql = 'DELETE FROM acdSubclass
                      WHERE subclassId = ? ';

        $db     = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $subclassId));
        
        return $result;
    }
    
    public function listSubclass($filters=null)
    {
        $db     = $this->getDatabase();
    
        $sql = 'SELECT subclassId,
                        description
                  FROM unit_acdsubclass ';
        
        $where = '';
        
        if (strlen($filters->classId) > 0)
        {
            $where .= ' AND classId = ? ';
            $args[] = $filters->classId;
        }
        
        if ($filters->onlyClass)
        {
            $where .= ' AND groupId IS NULL';
        }
        elseif (strlen($filters->groupId) > 0)
        {
            $where .= ' AND groupId = ? ';
            $args[] = $filters->groupId;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4) . '
                     ORDER BY description ';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));
        }
        else
        {
            $result = $db->query($sql);
        }
        
        return $result;
    }

}
?>
