<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for acdScheduleProfessor table
 *
 * @author Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 26/09/2005
 */

/**
 * Class to manipulate the acdScheduleProfessor table
 */
class BusinessAcademicBusScheduleProfessor extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @returns (array): Return an array with the entire table
     */
    public function listScheduleProfessor()
    {
        return 'Not implemented';
    }

    /**
     * Return a specific record from the database
     *
     * @param $scheduleId (integer): Primary key of the record to be retrieved
     * @param $professorId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     */
    public function getScheduleProfessor($scheduleId, $professorId)
    {
        $sql = 'SELECT A.scheduleId,
                       A.professorId,
                       B.name AS professorName,
                       A.isInstitutionalEvaluation,
                       A.weight,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       A.scheduleProfessorId
                  FROM acdScheduleProfessor A
        LEFT JOIN ONLY basPhysicalPersonProfessor B
                    ON (B.personId = A.professorId)
                 WHERE A.scheduleId = ?
                   AND A.professorId = ?';

        $args = array( $scheduleId,
                       $professorId );

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));
        $scheduleProfessor = new AcdScheduleProfessor();

        list ( $scheduleProfessor->scheduleId,
               $scheduleProfessor->professorId,
               $scheduleProfessor->professorName,
               $scheduleProfessor->isInstitutionalEvaluation,
               $scheduleProfessor->weight,
               $scheduleProfessor->userName,
               $scheduleProfessor->dateTime,
               $scheduleProfessor->ipAddress,
               $scheduleProfessor->scheduleProfessorId ) = $result[0];

        return $scheduleProfessor;
    }

    public function searchScheduleProfessorObject($filters)
    {
        return SAGU::resultToObject($this->searchScheduleProfessor($filters), array(
            'scheduleId',
            'professorId',
            'professorName',
            'isInstitutionalEvaluation',
            'weight',
            'userName',
            'dateTime',
            'ipAddress',
            'scheduleProfessorId',
        ));
    }
    
    public function searchScheduleProfessorSimple($filters)
    {
        $sql = 'SELECT A.scheduleId,
                       A.professorId,
                       B.name AS professorName,
                       A.isInstitutionalEvaluation,
                       A.weight,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       A.scheduleProfessorId
                  FROM acdScheduleProfessor A
        LEFT JOIN ONLY basPhysicalPersonProfessor B
                    ON (B.personId = A.professorId)
        LEFT JOIN ONLY basDocument C
                   ON (B.personId = C.personId
                   AND C.documenttypeid = \''. SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF').'\'::INT  )';

        if ( strlen($filters->scheduleId) > 0 )
        {
            $where .= ' AND A.scheduleId = ?';
            $args[] = $filters->scheduleId;
        }

        if ( strlen($filters->professorId) > 0 )
        {
            $where .= ' AND A.professorId = ?';
            $args[] = $filters->professorId;
        }

        if ( strlen($filters->professorName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $filters->professorName . '%';
        }

        if ( strlen($filters->isInstitutionalEvaluation) > 0 )
        {
            $where .= ' AND A.isInstitutionalEvaluation = ?';
            $args[] = $filters->isInstitutionalEvaluation;
        }

        if ( strlen($filters->weight) > 0 )
        {
            $where .= ' AND A.weight = ?';
            $args[] = $filters->weight;
        }

        if ( strlen($filters->scheduleProfessorId) > 0 )
        {
            $where .= ' AND A.scheduleProfessorId = ?';
            $args[] = $filters->scheduleProfessorId;
        }
        if ( strlen($filters->content) > 0 )
        {
            $where .= ' AND C.content = ?';
            $args[] = $filters->content;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     */
    public function searchScheduleProfessor($filters)
    {
        $sql = 'SELECT A.scheduleId,
                       A.professorId,
                       B.name AS professorName,
                       A.isInstitutionalEvaluation,
                       A.weight,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress,
                       A.scheduleProfessorId
                  FROM acdScheduleProfessor A
        LEFT JOIN ONLY basPhysicalPersonProfessor B
                    ON (B.personId = A.professorId)';

        if ( strlen($filters->scheduleId) > 0 )
        {
            $where .= ' AND A.scheduleId = ?';
            $args[] = $filters->scheduleId;
        }

        if ( strlen($filters->professorId) > 0 )
        {
            $where .= ' AND A.professorId = ?';
            $args[] = $filters->professorId;
        }

        if ( strlen($filters->professorName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $filters->professorName . '%';
        }

        if ( strlen($filters->isInstitutionalEvaluation) > 0 )
        {
            $where .= ' AND A.isInstitutionalEvaluation = ?';
            $args[] = $filters->isInstitutionalEvaluation;
        }

        if ( strlen($filters->weight) > 0 )
        {
            $where .= ' AND A.weight = ?';
            $args[] = $filters->weight;
        }

        if ( strlen($filters->scheduleProfessorId) > 0 )
        {
            $where .= ' AND A.scheduleProfessorId = ?';
            $args[] = $filters->scheduleProfessorId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY B.name';

            $db = $this->getDatabase();
            $result = $db->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     */
    public function insertScheduleProfessor($data)
    {
        $sql = 'INSERT INTO acdScheduleProfessor
                            ( scheduleId,
                              professorId,
                              isInstitutionalEvaluation,
                              weight )
                     VALUES ( ?,
                              ?,
                              ?,
                              ? )';

        $args = array( $data->scheduleId,
                       $data->professorId,
                       $data->isInstitutionalEvaluation ? $data->isInstitutionalEvaluation : 't',
                       $data->weight ? $data->weight : 1 );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateScheduleProfessor($data)
    {
        $sql = 'UPDATE acdScheduleProfessor
                   SET isInstitutionalEvaluation = ?,
                       weight = ?,
                       scheduleId = ?,
                       professorId = ?
                 WHERE scheduleProfessorId = ?';

        $args = array();
        $args[] = $data->isInstitutionalEvaluation;
        $args[] = $data->weight;
        $args[] = $data->scheduleId;
        $args[] = $data->professorId;
        $args[] = $data->scheduleProfessorId;

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $scheduleId (string): Primary key for deletion
     * @param $professorId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteScheduleProfessor($scheduleProfessorId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $busScheduleProfessorContent = new BusinessAcademicBusScheduleProfessorContent();
        $busScheduleProfessorContent->deleteByScheduleProfessor($scheduleProfessorId);
        
        $sql = 'DELETE FROM acdScheduleProfessor
                      WHERE scheduleProfessorId = ?';

        $pk = array();
        $pk = $scheduleProfessorId;

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $pk));

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $scheduleId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteProfessorBySchedule($scheduleId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $busScheduleProfessorContent = new BusinessAcademicBusScheduleProfessorContent();
        $busScheduleProfessorContent->deleteBySchedule($scheduleId);
        
        $sql = 'DELETE FROM acdScheduleProfessor
                      WHERE scheduleId = ?';

        $args = array();
        $args[] = $scheduleId;

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Function that checks if there is schedule for the professor
     *
     * @param $scheduleId (integer): Is code of professor
     * @return $result (integer): Returns zero if there is a schedule, otherwise returns the number of hours that the has professor
     */
    public function isExistScheduleForProfessor($scheduleId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM acdScheduleProfessor
                 WHERE scheduleId = ?';

        $args = array();
        $args[] = $scheduleId;

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }
    
    public function obterDisciplinasDoProfessor($professorId)
    {
        $sql = 'SELECT DISTINCT(groupid)
                  FROM acdschedule 
                 WHERE scheduleid IN (SELECT scheduleid 
                                        FROM acdscheduleprofessor 
                                        WHERE professorid = ?)';

        $args = array();
        $args[] = $professorId;

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        $data = array();
        foreach ( $result as $line )
        {
            $data[] = $line[0];
        }

        return $data;
    }
       
    /**
     * Obtém total de horas alocadas para o professor em determinada disciplina
     *
     * @param $scheduleId (integer): Is code of professor
     * @return $result (integer): Total de horas
     */
    public function totalHorasAlocadasAteHoje($groupId, $professorId)
    {
        
    	$sql = "SELECT SUM(x.total)
                  FROM (SELECT (B.endHour - B.beginHour) total,
                                A.groupId,
                                UNNEST (A.occurrenceDates) as occurrenceDate,
                                B.timeId,
                                B.beginHour,
                                B.endHour
                           FROM acdSchedule A
                     INNER JOIN acdTime B
                             ON B.timeId = ANY(A.timeIds)
                     INNER JOIN acdscheduleprofessor C
                             ON C.scheduleid = A.scheduleid
                          WHERE c.professorid = ?) X
                          WHERE X.groupid = ?
                            AND x.occurrenceDate <=now()::date ";

    	$args = array($professorId,$groupId);
        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $args));

        return $result[0][0];
    }
    
}
?>
