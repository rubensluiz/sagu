<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdCertified table.
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * This class was created 2005/09/06
 * This class was edited 16-12-2005
 *
 **/

class BusinessAcademicBusCertified extends sBusiness
{
    /**
     * Obtain the specified certified id data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     * @author Rudi Uhrig Neto [rudi@solis.coop.br]
     * @author Daniel Afonso Heisler [rudi@solis.coop.br]
     *
     * @param $certifiedId (int): Identifier of the certified type to be retrieved.
     * @param $dateIssue (int): Identifier of the dateIssue to be retrieved.
     *
     * @return If the specified courseId exists, returns an object (certified) containing its data. 
     * Otherwise, returns null.
     *
     */
    function getCertified($certifiedId, $dateIssue, $certifiedTypeId)
    {
        $sql  = 'SELECT A.certifiedId,
                        TO_CHAR(A.dateIssue,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        A.certifiedTypeId,
                        B.description,
                        A.personId,
                        A.courseId,
                        A.courseVersion,
                        A.unitId,
                        A.turnId,
                        C.contractId,
                        A.userName,
                        TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                        A.ipAddress
                   FROM acdCertified A
             INNER JOIN acdCertifiedType B
                     ON ( A.certifiedTypeId = B.certifiedTypeId )
              LEFT JOIN unit_acdContract C
                     ON ( A.courseId          = C.courseId
                          AND A.courseVersion = C.courseVersion 
                          AND A.unitId        = C.unitId
                          AND A.turnId        = C.turnId 
                          AND A.personId      = C.personId )
                  WHERE A.certifiedId         = ?
                    AND A.dateIssue           = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\')
                    AND A.certifiedTypeId     = ?';

        $db   = $this->getDatabase();

        $args = array( 
                       $certifiedId,
                       $dateIssue,
                       $certifiedTypeId
                     );

        $result = $db->query(SAGU::prepare($sql, $args));

        $certified = new acdCertified();

        list ( $certified->certifiedId,
               $certified->dateIssue,
               $certified->certifiedTypeId,
               $certified->certifiedTypeDescription,
               $certified->contractPersonId,
               $certified->contractCourseId,
               $certified->contractCourseVersion,
               $certified->contractUnitId,
               $certified->contractTurnId,
               $certified->contractId,
               $certified->userName,
               $certified->dateTime,
               $certified->ipAddress ) = $result[0];

        return $certified;
    }

    /**
     * Search for certified.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     * @author Rudi Uhrig Neto [rudi@solis.coop.br]
     *     * @param $data Object containing data to filter the listing.
     *     * @return An array containing the search results.
     *
     */
    function searchCertified($data=null)
    {
        $db      = $this->getDatabase();

        $sql  = 'SELECT A.certifiedId,
                        A.certifiedTypeId,
                        B.description,
                        TO_CHAR(A.dateIssue,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        D.courseId,
                        E.name,
                        D.courseVersion,
                        D.unitId,
                        D.turnId,
                        A.personId,
                        C.name
                   FROM acdCertified A
             INNER JOIN acdCertifiedType B
                     ON ( A.certifiedTypeId = B.certifiedTypeId )
        INNER JOIN ONLY basPhysicalPerson C
                     ON ( A.personId = C.personId )
              LEFT JOIN unit_acdcourseoccurrence D
                     ON ( A.courseId      = D.courseId
                    AND   A.courseVersion = D.courseVersion
                    AND   A.unitId        = D.unitId
                    AND   A.turnId        = D.turnId )
             LEFT JOIN acdCourse E
                     ON ( D.courseId = E.courseId)';

        $where  = '';
        unset($args);
        if ( strlen($data->certifiedId) > 0 )
        {
            $where .= '    AND   A.certifiedId = ?';
            $args[] = $data->certifiedId;
        }
        if ( strlen($data->certifiedTypeId) > 0 )
        {
            $where .= '    AND   A.certifiedTypeId = ?';
            $args[] = $data->certifiedTypeId;
        }

        if ( strlen($data->dateIssue) > 0 )
        {
            $where .= '    AND   A.dateIssue = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\')';
            $args[] = $data->dateIssue;
        }
        if ( strlen($data->personId) > 0 )
        {
            $where .= '    AND   A.personId = ?';
            $args[] = $data->personId;
        }

        if ( $where != '' )
        {
            $sql .= '    WHERE ' . substr($where,8) ;
                    ' ORDER BY A.dateIssue, A.certifiedId';

            $result  = $db->query(SAGU::prepare($sql,$args));

        }

        return $result;
    }

    /**
     * Get sequence id to acdCertified table
     *
     * @author Rudi Uhrig Neto [rudi@solis.coop.br]
     *
     * @param $data (object): Object (certified) containing the data to be inserted.
     *
     * @return On success, the sequence id of the inserted record.
     *
     */
    public function getSequence($data)
    {
        /*
        Quanto aos certificados, possuem uma seqüência (certifiedNumber) que é inicializada em 1 a cada início de ano.
        
        Ex.:
        Ano 2005
        1,2,3,4,5...

        Ano 2006
        1,2,3,4,5...
       
        E assim por diante...
        
        */
        
        /* Regra
        --> quando inserir, devemos buscar na tabela, atraves dos novos dados informados (ano e certificado),
        
        --> se encontrarmos registros onde o ano e certificado sejam iguais ao que está sendo inserido.
        --> então retornar o valor da sequencia acrescido de mais 1.
        
        --> se não encontrou o certificado dentro do mesmo ano, isto quer dizer que é um certificado novo dentro do ano,
        --> então a sequencia vai receber 1
        
        --> se não encontro o ano nem o certificado, quer dizer que temos um ano novo,
        --> então a sequenia será iniciada em 1
        */

        $db = $this->getDatabase();

        $sqlDate = 'SELECT EXTRACT(' . year . '
                      FROM TO_DATE(\'' . $data->dateIssue . '\', \'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'))';

        $retDate = $db->query($sqlDate);

        if ( isset($retDate) )
        {
            $dateIssue = $retDate[0][0];
        }

        $sql = 'SELECT CASE WHEN max(certifiednumber) IS NOT NULL THEN max(certifiednumber)+1 ELSE 1 END
                       FROM acdCertified
                       WHERE EXTRACT(' . year . '
                               FROM dateIssue ) = ?';

        $args = array( $dateIssue );

        $sqls = SAGU::prepare($sql, $args);

        $retval = $db->query($sqls);

        return $retval[0][0];
    }

    /**
     * Insert a new acdCertified.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     * @author Rudi Uhrig Neto [rudi@solis.coop.br]
     *
     * @param $data (object): Object (certified) containing the data to be inserted.
     *
     * @return On success, the course id of the inserted record. Otherwise, returns null.
     *
     */
    function insertCertified($data)
    {
        $db = $this->getDatabase();

        $sql = 'INSERT INTO acdCertified (certifiedTypeId,
                                          dateIssue,
                                          personId,
                                          courseId,
                                          courseVersion,
                                          unitId,
                                          turnId )
                     VALUES (   ?,
                                TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),
                                ?,
                                ?,
                                ?,
                                ?,
                                ?) ';

        $args = array ( $data->certifiedTypeId,
                        $data->dateIssue,
                        $data->personId,
                        $data->courseId,
                        $data->courseVersion,
                        $data->unitId,
                        $data->turnId );

        $sqls = SAGU::prepare($sql, $args);

        $result = $db->execute($sqls);

        return $result;
    }

    /**
     * Update the specified certified data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     * @author Rudi Uhrig Neto [rudi@solis.coop.br]
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updateCertified($data)
    {
        $update = 'UPDATE acdCertified
                      SET personId          = ?,
                          courseId          = ?,
                          courseVersion     = ?,
                          unitId            = ?,
                          turnId            = ?
                    WHERE certifiedId       = ?
                      AND dateIssue         = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\')
                      AND certifiedTypeId   = ?';

        $db     = $this->getDatabase();

        $args   = array($data->personId,
                        $data->courseId,
                        $data->courseVersion,
                        $data->unitId,
                        $data->turnId,
                        $data->certifiedId,
                        $data->dateIssue,
                        $data->certifiedTypeId
                       );

        $sqls = SAGU::prepare($update, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete the specified certified.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     * @author Rudi Uhrig Neto [rudi@solis.coop.br]
     *
     * @param $certifiedId (int): Identifier of the certifiedId to be retrieved.
     * @param $dateIssue (int): Identifier of the dateIssue to be retrieved.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function deleteCertified($certifiedId, $dateIssue = null, $certifiedTypeId = null)
    {
        if (is_array($certifiedId))
        {
            $args = $certifiedId;
        }
        else
        {
            $args = array(
                $certifiedId,
                $dateIssue,
                $certifiedTypeId
            );
        }

        $delete = 'DELETE FROM acdCertified
                    WHERE certifiedId     = ?
                      AND dateIssue       = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\')
                      AND certifiedTypeId = ?';

        $db = $this->getDatabase();

        $result = $db->Execute(SAGU::prepare($delete, $args));

        return $result;
    }
}
?>
