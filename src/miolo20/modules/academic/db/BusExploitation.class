<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * Handles exploitation data
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Cristian Edson Göhl [cristian@solis.coop.br]
 * Hélio Henrique Rodrigues Guimarães [helio@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 16/08/2007
 *
 **/

/**
 * Class to manipulate the acdExploitation table
 **/
class BusinessAcademicBusExploitation extends sBusiness
{
    /**
     * Get an object that represents the register data
     * 
     * @param $exploitationId: Primary key of the desired register
     *
     * @return (object): An object containing the register data
     **/
    public function getExploitation($exploitationId)
    {
        $sql = 'SELECT exploitationId,
                       enrollId,
                       exploitationType,
                       exploitationEnrollId,
                       exploitationNumberHours,
                       exploitationCredits,
                       institutionId,
                       courseName,
                       curricularComponentName,
                       finalNote,
                       numberHours,
                       credits,
                       period,
                       userName,
                       dateTime,
                       ipAddress
                  FROM unit_acdExploitation
                 WHERE exploitationId = ?';
                 
        $args = array($exploitationId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        list ($exploitationData->exploitationId,
              $exploitationData->enrollId,
              $exploitationData->exploitationType,
              $exploitationData->exploitationEnrollId,
              $exploitationData->exploitationNumberHours,
              $exploitationData->exploitationCredits,
              $exploitationData->institutionId,
              $exploitationData->courseName,
              $exploitationData->curricularComponentName,
              $exploitationData->finalNote,
              $exploitationData->numberHours,
              $exploitationData->credits,
              $exploitationData->period,
              $exploitationData->userName,
              $exploitationData->dateTime,
              $exploitationData->ipAddress) = $result[0];
        
        return $exploitationData; 
    }
    
    /**
     * Do a search on the exploitations table
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchExploitation($filters)
    {
        $sql = 'SELECT A.exploitationId,
                       E.contractId,
                       F.personId,
                       F.name,
                       A.exploitationType,
                       A.enrollId,
                       E.courseId || \'/\' || E.courseVersion,
                       D.curricularComponentId || \'/\' || D.curricularComponentVersion,
                       D.name,
                       A.exploitationEnrollId,
                       J.curricularComponentId || \'/\' || J.curricularComponentVersion,
                       J.name,
                       A.exploitationNumberHours,
                       A.exploitationCredits,
                       A.institutionId,
                       K.name,
                       A.courseName,
                       A.curricularComponentName,
                       A.finalNote,
                       A.numberHours,
                       A.credits,
                       A.period
                  FROM unit_acdExploitation A
            INNER JOIN unit_acdEnroll B
                    ON (B.enrollId = A.enrollId)
            INNER JOIN unit_acdcurriculum C
                    ON (C.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent D
                    ON (D.curricularComponentId      = C.curricularComponentId AND
                        D.curricularComponentVersion = C.curricularComponentVersion)
            INNER JOIN unit_acdContract E
                    ON (E.contractId = B.contractId)
            INNER JOIN ONLY basPhysicalPerson F
                    ON (F.personId = E.personId)
             LEFT JOIN unit_acdEnroll G
                    ON (G.enrollId = A.exploitationEnrollId)
             LEFT JOIN unit_acdContract H
                    ON (H.contractId = G.contractId)
             LEFT JOIN unit_acdcurriculum I
                    ON (I.curriculumId = G.curriculumId)
             LEFT JOIN acdCurricularComponent J
                    ON (J.curricularComponentId      = I.curricularComponentId AND
                        J.curricularComponentVersion = I.curricularComponentVersion)
             LEFT JOIN basLegalPerson K
                    ON (K.personId = A.institutionId)';
                 
        if ( strlen($filters->exploitationId) > 0 )
        {
            $where .= ' AND A.exploitationId = ?';
            $args[] = $filters->exploitationId;
        }
        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND B.contractId = ?';
            $args[] = $filters->contractId;
        }
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND F.personId = ?';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND UNACCENT(F.name) ILIKE UNACCENT(?)';
            $args[] = $filters->personName . '%';
        }
        if ( strlen($filters->curriculumId) > 0 )
        {
            $where .= ' AND B.curriculumId = ?';
            $args[] = $filters->curriculumId;
        }
        if ( strlen($filters->curricularComponentId) > 0 )
        {
            $where .= ' AND D.curricularComponentId = ?';
            $args[] = $filters->curricularComponentId;
        }
        if ( strlen($filters->curricularComponentName) > 0 )
        {
            $where .= ' AND UNACCENT(D.name) ILIKE UNACCENT(?)';
            $args[] = $filters->curricularComponentName;
        }
        if ( strlen($filters->exploitationType) > 0 )
        {
            $where .= ' AND A.exploitation = ?';
            $args[] = $filters->exploitationType;
        }
        if ( strlen($filters->enrollId) > 0 )
        {
            $where .= ' AND A.enrollId = ?';
            $args[] = $filters->enrollId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY F.name, A.period, D.name';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
    /**
     * Gets the current enroll id for exploitations, if it exists, or inserts a new one.
     *
     * @param $contractId: Contract code to be checked
     * @param $curriculumId: Curriculum code to be checked
     *
     * @return $enrollId: Code of the enroll got or inserted
     **/
    public function getOrInsertEnrollForExploitation($contractId, $curriculumId, $learningPeriodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // See if there is already an existing enroll id or if the creation of a new one is needed.
        // We look for an enrollId where there is already an exploit or an enrollId where the pupil
        // is already enrolled. In the later case, the enroll will be deleted.
        $sql = 'SELECT A.enrollId,
                       A.learningPeriodId AS exploitationLearningPeriod,
                       A.statusId,
                       B.learningPeriodId
                  FROM unit_acdEnroll A
             LEFT JOIN unit_acdGroup B
                    ON B.groupId = A.groupId
                 WHERE A.contractId = ?
                   AND A.curriculumId = ?
                   AND ((A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED') . ')
                         AND A.enrollId IN (SELECT distinct enrollId
                                              FROM unit_acdExploitation))
                        OR
                        (A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . '))
                       )';
        
        $args = array($contractId, $curriculumId);
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        // Se o aluno estiver matriculado na disciplina, gera exceção.
        // Para facilitar ao usuário, mesmo fugindo da estrutura, é passado um link na exceção.
        if ( $result[0][2] == SAGU::getParameter('BASIC', 'ENROLL_STATUS_ENROLLED') )
        {
            // Caminho do cancelamento de disciplina.
            $actionEnrollCancellation = 'main:process:cancellation:enrollCancellation';

            // Parâmetros para cancelamento de disciplina.
            $params = array('contractId' => $contractId, 'learningPeriodId' => $learningPeriodId);

            // Href do cancelamento de disciplina.
            $gotoEnrollCancellation = $MIOLO->getActionURL($module, $actionEnrollCancellation, null, $params);

            // MLINK para navegar até o cancelamento de disciplina, utilizado na exceção.
            $mLEnrollCancellation = new MLink("cancelar_disciplina", "", $gotoEnrollCancellation, "Clique aqui");
            
            // Mensagem de Erro, com link para o cancelamento de disciplina.
            $msg = _M('O aluno não pode estar matriculado na disciplina em questão, para prosseguir cancele a mesma!', $module) .
                   _M('<li> @1 para ir ao formulário "Cancelamento de disciplina".</li>', $module, $mLEnrollCancellation->generate());

            throw new Exception ( $msg );
        }
        
        $sql = 'SELECT A.learningPeriodId
                  FROM unit_acdlearningperiod A
            INNER JOIN unit_acdContract B
                    ON (B.courseId = A.courseId AND
                        B.courseVersion = A.courseVersion AND
                        B.turnId = A.turnId AND
                        B.unitId = A.unitId)
                  WHERE B.contractId = ?
                    AND A.learningPeriodId = ?';
                    
        $args = array($contractId, $learningPeriodId);

        $resultLearning = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        // Invalid learning period information
        if ( count($resultLearning) != 1 )
        {
            throw new Exception(_M('Período letivo @1 não existe ou dados não correspondem ao contrato @2.', $module, $learningPeriodId, $contractId));
        }
        
        if ( count($result) == 1 )
        {
            if ($resultLearning[0][0] != $result[0][1])
            {
                $sql = 'UPDATE acdEnroll SET learningPeriodId = ? WHERE enrollId = ?';
                
                $args = array($resultLearning[0][0], $result[0][0]);
                
                $this->getDatabase()->execute(SAGU::prepare($sql, $args));
            }
            
            return $result[0][0];
        }
        elseif ( count($result) > 1 )
        {
            throw new Exception(_M('Há múltiplos registros de matrícula para a disciplina selecionada. Consulte o aluno para verificar o problema.', $module));
        }
        else
        {
            $sql = 'SELECT nextval(\'seq_enrollid\')';
                
            $enrollId = $this->getDatabase()->query($sql);
            
            $sql = 'INSERT INTO acdEnroll
                                (enrollId,
                                contractId,
                                curriculumId,
                                statusId,
                                learningPeriodId,
                                isExploitation)
                            VALUES (?, ?, ?, ' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED') . ', ?, \'' . DB_TRUE . '\')';

            $args = array($enrollId[0][0], $contractId, $curriculumId, $resultLearning[0][0]);
            
            if ( !$this->getDatabase()->execute(SAGU::prepare($sql, $args)) )
            {
                throw new Exception(_M('Não foi possível inserir uma matrícula na disciplina selecionada.', $module));
            }
            
            return $enrollId[0][0];
        }
    }

    /**
     * Insert a new exploitation
     *
     * @param $data (object): An object containing the data to insert
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertExploitation($data)
    {
        

        return 'not implemented';
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateExternalExploitation($data)
    {
        
        return 'not implemented';
    }

    /**
     * Deletes a exploitation register of the exploitations table
     *
     * @param $exploitationId: Primary key of the desired register
     *
     * @return True if succed, otherwise False
     **/
    public function deleteExploitation($exploitationId)
    {
        $transaction = $this->getDatabase()->getTransaction();
        $transaction->_beginTransaction();
        
        $sql = 'SELECT enrollId
                  FROM unit_acdExploitation
                 WHERE exploitationId = ?';
                 
        $args = array($exploitationId);
        
        $enroll = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        $sql = 'DELETE FROM acdExploitation
                      WHERE exploitationId = ?';
        
        $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        
        $sql = 'SELECT exploitationId
                  FROM unit_acdExploitation
                 WHERE enrollId = ?';
                 
        $args = array($enroll[0][0]);
        
        if (count($this->getDatabase()->query(SAGU::prepare($sql, $args))) == 0)
        {
            /**
             * Se for deletar a enroll necessário deletar antes as dependências.
             */
            
            // Deleta as freqências registradas para a enroll.
            $sql = 'DELETE FROM acdFrequenceEnroll
                          WHERE enrollId = ?';
            $this->getDatabase()->execute(SAGU::prepare($sql, $args));
            
            // Deleta as notas registradas para a enroll.
            $sql = 'DELETE FROM acdDegreeEnroll
                          WHERE enrollId = ?';
            $this->getDatabase()->execute(SAGU::prepare($sql, $args));
            
            // Deleta a enroll.
            $sql = 'DELETE FROM acdEnroll
                          WHERE enrollId = ?';
                          
            $this->getDatabase()->execute(SAGU::prepare($sql, $args));
        }
        
        return $transaction->_commit();
    }
    
    /**
     * Gets a summary of an enroll exploitation data
     *
     * @param $enrollId: Primary key of the desired enroll
     *
     * @return (object): Object with the data
     **/
    public function getEnrollExploitationSummary($enrollId)
    {
        $sql = 'SELECT C.academicNumberHours
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdcurriculum B
                    ON (B.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = B.curricularComponentId AND
                        C.curricularComponentVersion = B.curricularComponentVersion)
                 WHERE A.enrollId = ?';
                 
        $args = array($enrollId);
        
        $result1 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        $sql = 'SELECT sum(exploitationNumberHours)
                  FROM unit_acdExploitation
                 WHERE enrollId = ?';
                 
        $result2 = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        $exploitationSumm->totalNumberHours     = $result1[0][0];
        $exploitationSumm->exploitedNumberHours = $result2[0][0] > 0 ? $result2[0][0] : 0;
        $exploitationSumm->remainingNumberHours = $exploitationSumm->totalNumberHours - $exploitationSumm->exploitedNumberHours;
        
        return $exploitationSumm;
    }
    
    /**
     * Gets enroll exploitation data
     *
     * @param $enrollId: Primary key of the desired enroll
     *
     * @return (array): Search results
     **/
    public function getEnrollExploitationData($enrollId)
    {
        $sql = 'SELECT A.exploitationId,
                       A.exploitationType,
                       E.name as curricularComponentName,
                       I.name as courseName,
                       CASE WHEN B.groupId IS NOT NULL
                       THEN G.periodId
                       ELSE H.periodId END,
                       A.exploitationNumberHours,
                       CASE WHEN B.concept IS NOT NULL
                       THEN B.concept
                       ELSE B.finalNote::TEXT END,
                       A.electivecurriculumid
                  FROM unit_acdExploitation A
            INNER JOIN unit_acdEnroll B
                    ON (B.enrollId = A.exploitationEnrollId)
            INNER JOIN unit_acdContract C
                    ON (C.contractId = B.contractId)
            INNER JOIN acdCourse I
                    ON (I.courseId = C.courseId)
            INNER JOIN unit_acdcurriculum D
                    ON (D.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent E
                    ON (E.curricularComponentId = D.curricularComponentId AND
                        E.curricularComponentVersion = D.curricularComponentVersion)
             LEFT JOIN unit_acdGroup F
                    ON (F.groupId = B.groupId)
             LEFT JOIN unit_acdlearningperiod G
                    ON (G.learningPeriodId = F.learningPeriodId)
             LEFT JOIN unit_acdlearningperiod H
                    ON (H.learningPeriodId = B.learningPeriodId)
                 WHERE A.enrollId = ?
                   AND A.exploitationType = \'I\'
                 UNION 
                SELECT exploitationId,
                       exploitationType,
                       curricularComponentName,
                       courseName,
                       period,
                       exploitationNumberHours,
                       finalNote::TEXT, 
                       electivecurriculumid
                  FROM unit_acdExploitation 
                 WHERE enrollId = ?
                   AND exploitationType = \'E\'';
                 
        $args = array($enrollId, $enrollId);
        
        return $this->getDatabase()->query(SAGU::prepare($sql, $args));
    }
    
    public function getGroupIdFromExploitation($enrollId)
    {
        $sql = " SELECT groupid
                   FROM acdenroll A
              LEFT JOIN acdexploitation B ON (A.enrollid = B.enrollid)
                  WHERE B.enrollid = ? ";
        
        $args = array($enrollId);
        
        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        return $return[0][0];
    }
    
    /**
     * Obtém o curriculumid e o periodid da expoitaition
     * 
     * @param type $enrollId
     * @return type
     */
    public function getCurriculumIdAndPeriodIdFromExploitation($enrollId)
    {
        $sql = " SELECT A.curriculumId,
                        B.period
                   FROM acdenroll A
              LEFT JOIN acdexploitation B ON (A.enrollid = B.enrollid)
                  WHERE B.enrollid = ? ";
        
        $args = array($enrollId);
        
        $return = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        
        return $return[0];
    }
}

?>
