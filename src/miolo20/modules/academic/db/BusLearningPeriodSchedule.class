<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdEnroll table
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Andre Chagas Dias [andre@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 08/02/2006
 *
 **/


/**
 * Class to manipulate the acdEnroll table
 **/
class BusinessAcademicBusLearningPeriodSchedule extends sBusiness
{
    public function getSchedulesCourse($data)
    {
        $sql = '    SELECT D.name,
                           G.room || \'-\' || G.building,
                           I.name,
                           A.groupId
                      FROM unit_acdGroup A
                INNER JOIN acdSchedule B
                        ON (B.groupId = A.groupId)
                INNER JOIN unit_acdcurriculum C
                        ON (C.curriculumId = A.curriculumId)
                INNER JOIN acdCurricularComponent D
                        ON (D.curricularComponentId = C.curricularComponentId AND
                            D.curricularComponentVersion = C.curricularComponentVersion)
                 LEFT JOIN insPhysicalResource G
                        ON (G.physicalResourceId = B.physicalResourceId AND
                            G.physicalResourceVersion = B.physicalResourceVersion)
                INNER JOIN acdScheduleProfessor H
                        ON (H.scheduleId = B.scheduleId)
                INNER JOIN basPhysicalPersonProfessor I
                        ON (I.personId = H.professorId)
                INNER JOIN unit_acdlearningperiod L
                        ON (L.learningPeriodId = A.learningPeriodId)';

        if ( strlen($data->periodId) > 0 )
        {
                $where .= ' AND L.periodId = ? ';
                $args[] = $data->periodId;
        }
        if ( strlen($data->courseId) > 0 )
        {
                $where .= ' AND C.courseId = ? ';
                $args[] = $data->courseId;
        }
        if ( strlen($data->courseVersion) > 0 )
        {
                $where .= ' AND C.courseVersion = ? ';
                $args[] = $data->courseVersion;
        }
        if ( strlen($data->turnId) > 0 )
        {
                $where .= ' AND C.turnId = ? ';
                $args[] = $data->turnId;
        }
        if ( strlen($data->unitId) > 0 )
        {
                $where .= ' AND C.unitId = ? ';
                $args[] = $data->unitId;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) ;
        }
    
        $sql .= ' GROUP BY 1, 2, 3, 4 ORDER BY D.name';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql,$args));
    
        return $result;
        
    }
    
    public function getCoursesData($data)
    {
        $sql    = 'SELECT A.courseId,
                          C.shortName,
                          A.courseVersion,
                          A.turnId,
                          D.description,
                          A.unitId,
                          E.description
                     FROM unit_acdcourseoccurrence A
                LEFT JOIN acdCourseVersion B
                       ON (A.courseId = B.courseId 
                      AND  A.courseVersion = B.courseVersion)
                LEFT JOIN acdCourse C
                       ON (A.courseId = C.courseId 
                      AND  B.courseId = C.courseId)
                LEFT JOIN basTurn D
                       ON (A.turnId = D.turnId)
                LEFT JOIN basUnit E
                       ON (A.unitId = E.unitId)';

        unset($args);
        if ( strlen($data->courseId) > 0 )
        {
            $where .= '    AND   A.courseId = ?';
            $args[] = $data->courseId;
        }
        if ( strlen($data->courseVersion) > 0 )
        {
            $where .= '    AND   A.courseVersion = ?';
            $args[] = $data->courseVersion;
        }
        if ( strlen($data->turnId) > 0 )
        {
            $where .= '    AND   A.turnId = ?';
            $args[] = $data->turnId;
        }
        if ( strlen($data->unitId) > 0 )
        {
            $where .= '    AND   A.unitId = ?';
            $args[] = $data->unitId;
        }
        
        if ( $where != '' )
        {
            $sql .= '    WHERE ' . substr($where,8) .
                       ' LIMIT 1';

        }
        
        $result  = $this->getDatabase()->query(SAGU::prepare($sql,$args));
        
        if( count($result) > 0 )
        {
           foreach( $result as $key => $course )
           {
             $dataCourse = new AcdCourseReport();                  
                                                
             $dataCourse->courseId        = $course[0];
             $dataCourse->courseName      = $course[1];
             $dataCourse->courseVersion   = $course[2];
             $dataCourse->turnId          = $course[3];
             $dataCourse->turnDescription = $course[4];
             $dataCourse->unitId          = $course[5];
             $dataCourse->unitDescription = $course[6];
             
             $returnData[] = $dataCourse;
             
           }           
        }

        return $returnData;
    }
}

/**
 * Object for report
 * 
 */
class AcdCourseReport 
{
    public $courseId;
    public $courseName;
    public $courseVersion;
    public $turnId;
    public $turnDescription;
    public $unitId;
    public $unitDescription;
}

?>
