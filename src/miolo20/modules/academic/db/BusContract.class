<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluï¿½ï¿½es Livres Ltda.
 *
 * Este arquivo ï¿½ parte do programa Sagu.
 *
 * O Sagu ï¿½ um software livre; vocï¿½ pode redistribuï¿½-lo e/ou modificï¿½-lo
 * dentro dos termos da Licenï¿½a Pï¿½blica Geral GNU como publicada pela Fundaï¿½ï¿½o
 * do Software Livre (FSF); na versï¿½o 2 da Licenï¿½a.
 *
 * Este programa ï¿½ distribuï¿½do na esperanï¿½a que possa ser ï¿½til, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implï¿½cita de ADEQUAï¿½ï¿½O a qualquer MERCADO
 * ou APLICAï¿½ï¿½O EM PARTICULAR. Veja a Licenï¿½a Pï¿½blica Geral GNU/GPL em
 * portuguï¿½s para maiores detalhes.
 *
 * Vocï¿½ deve ter recebido uma cï¿½pia da Licenï¿½a Pï¿½blica Geral GNU, sob o tï¿½tulo
 * "LICENCA.txt", junto com este programa, se nï¿½o, acesse o Portal do Software
 * Pï¿½blico Brasileiro no endereï¿½o www.softwarepublico.gov.br ou escreva para a
 * Fundaï¿½ï¿½o do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * Class to manipulate the acdContract table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 30/08/2005
 */
class BusinessAcademicBusContract extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @return (array): Return an array with the entire table
     */
    public function listContracts($personId, $ordernarAtivos = false)
    {
        $sql = "SELECT A.contractId,
                       A.courseId || '/' || A.courseVersion || ' - ' || B.name
                  FROM acdContract A
            INNER JOIN acdCourse B
                    ON B.courseId = A.courseId
                 WHERE A.personId = ?
              ORDER BY ";
        
        if ( $ordernarAtivos )
        {
            $sql .= " (SELECT MAX(stateTime)
                               FROM acdMovementContract
                              WHERE contractId = A.contractId) DESC, ";
        }
        
        $sql .= " A.courseId ";
        
        return $this->getDatabase()->query(SAGU::prepare($sql, array($personId)));
    }

    /**
     * List all contracts that can be used for enroll
     *
     * @return (array): Return an array with all the matching records
     */
    public function listAvailableContractsForEnroll($personId)
    {
        $sql = 'SELECT A.contractId,
                       A.courseId,
                       A.courseVersion,
                       B.shortName AS courseShortName,
                       A.turnId,
                       A.unitId,
                       B.name
                  FROM unit_acdContract A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
            INNER JOIN acdStateContract C
                    ON (C.stateContractId = getContractState(A.contractId))
                 WHERE A.personId = ?
                   AND C.isCloseContract = false
                   AND A.isListener = false
                   AND B.formationLevelId IN (' . SAGU::getParameter('ACADEMIC', 'COURSE_FORMATIONLEVELID_GRADUATE') . ',' . SAGU::getParameter('ACADEMIC', 'TECHNICIAN_FORMATION_LEVEL') . ',' . SAGU::getParameter('ACADEMIC', 'ACD_SEQUENTIAL_FORMATION_LEVEL_ID') . ')
              ORDER BY B.name';

        $args = array ( $personId );
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Return a specific record from the database
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     * @return AcdContract
     */
    public function getContract($contractId, $isWebServices = false)
    {
        $MIOLO = MIOLO::getInstance();
        $action = $MIOLO->getCurrentAction();

        /**
         * Para melhorar o desempenho em telas (principalmente nas telas de matrícula)
         * estamos adicionando retornos que sejam repetidos em um array na sessao,
         * caso precise usar esse método em outra tela, adicionar a acao que leva a ela
         * no if abaixo, nao esquecer tambem de setar NULL ao array sempre que qualquer
         * processo/registro for terminado.
         */
        if ( $action == 'main:process:enrollContract' ||
             $action == 'main:process:enrollCurricularComponents' ||
             $action == 'main:pupil:enrollWeb')
        {
            //Busca array
            $arrayGetContract = $MIOLO->session->getValue('arrayGetContract');
            
            //Cria key
            $string = 'contractId=' . $contractId;
            $string .= 'isWebServices=' . $isWebServices;
            
            //Se key nao existe ainda, deixa passar, senao retorna
            if ( array_key_exists($string, $arrayGetContract) )
            {
                return $arrayGetContract[$string];
            }
            
            //Cria variavel para armazenar retorno na sessao depois
            $naSessao = true;
        }
        
        $sql = "SELECT A.contractId,
                       A.personId,
                       B.name AS personName,
                       A.courseId,
                       A.courseVersion,
                       C.name AS courseName,
                       A.turnId,
                       A.unitId,
                       TO_CHAR(A.formationDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS formationDate,
                       A.formationPeriodId,
                       TO_CHAR(A.conclusionDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS conclusionDate,
                       TO_CHAR(A.emendsDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS emendsDate,
                       TO_CHAR(A.diplomaDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       D.employeeId,
                       D.isPayrollDiscount,
                       A.userName,
                       TO_CHAR(A.dateTime,'" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "') AS dateTime,
                       A.ipAddress,
                       A.enadeStatusId,
                       A.internalContractId,
                       A.internalCourseOccurrenceId,
                       A.internalCourseOccurrenceVersion,
                       A.externalCourseId,
                       A.internalUnitId,
                       A.internalTurnId,
                       A.externalConclusionPeriod,
                       A.cityId,
                       A.externalConclusionInstitutionId,
                       TO_CHAR(A.externalConclusionDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS externalConclusionDate,
                       A.exploitEnrollsInTransfer,
                       subscriptionId,
                       E.periodid,
                       E.learningperiodid
                  FROM acdContract A
        LEFT JOIN ONLY basPerson B
                    ON (B.personId = A.personId)
             LEFT JOIN acdCourse C
                    ON (C.courseId = A.courseId)
             LEFT JOIN finPayrollDiscountTarget D
                    ON (A.contractId = D.contractId)
             LEFT JOIN acdlearningperiod E
                ON (A.courseid = E.courseid AND A.courseversion = E.courseversion AND A.turnid = E.turnid AND A.unitid = E.unitid)
                 WHERE A.contractId = ?";

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $contractId));

        //Quando é na sessao classes do SAGU nao funcionam
        $contract = new AcdContract();
        
        if ( $naSessao )
        {
            $contract = new stdClass();
        }

        list ( $contract->contractId,
               $contract->personId,
               $contract->personName,
               $contract->courseId,
               $contract->courseVersion,
               $contract->courseName,
               $contract->turnId,
               $contract->unitId,
               $contract->formationDate,
               $contract->formationPeriodId,
               $contract->conclusionDate,
               $contract->emendsDate,
               $contract->diplomaDate,
               $contract->maturityDay,
               $contract->isListener,
               $contract->isRequestAcademicDegree,
               $contract->globalAverage,
               $contract->contractNumber,
               $contract->obs,
               $contract->parcelsNumber,
               $contract->employeeId,
               $contract->isPayrollDiscount,
               $contract->userName,
               $contract->dateTime,
               $contract->ipAddress,
               $contract->enadeStatusId,
               $contract->internalContractId,
               $contract->internalCourseOccurrenceId,
               $contract->internalCourseOccurrenceVersion,
               $contract->externalCourseId,
               $contract->internalUnitId,
               $contract->internalTurnId,
               $contract->externalConclusionPeriod,
               $contract->cityId,
               $contract->externalConclusionInstitutionId,
               $contract->externalConclusionDate,
               $contract->exploitEnrollsInTransfer,
               $contract->subscriptionId,
               $contract->periodId,
               $contract->learningPeriodId) = $result[0];

        //Salva na sessao
        if ( $naSessao )
        {
            $arrayGetContract[$string] = $contract;
            $MIOLO->session->setValue('arrayGetContract', $arrayGetContract);
        }
        
        return $contract;
    }

    /**
     * Return the global average from the respective contract code
     *
     * @param $contractId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     */
    public function getGlobalAverageContract($contractId)
    {
        $sql = 'SELECT obterMediaGlobal(?, ?)';
        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($contractId, SAGU::getParameter('ACADEMIC', 'CONSIDERAR_REPROVACOES_PARA_MEDIA_GLOBAL'))));

        return $result[0][0];   
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     */
    public function searchContract($filters, $returnCourseOccurrence = false, $isWebServices = false)
    {
        $acdContract = "unit_acdContract";
        $acdcourseoccurrence = "unit_acdcourseoccurrence";
        
        // Para webservices.
        if ( $isWebServices )
        {
            $acdContract = "acdContract";
            $acdcourseoccurrence = "acdcourseoccurrence";    
        }          
        
        $coulumnsCourse = ($returnCourseOccurrence) ? ', A.courseId, A.courseVersion, A.turnId, A.unitId' : '';
        
        $sql = "SELECT A.contractId,
                       A.personId,
                       B.name,
                       A.courseId || ' / ' || A.courseVersion,
                       C.name,
                       A.courseVersion,
                       D.description,
                       E.description,
                       null,
                       G.employeeId,
                       G.isPayrollDiscount
                       {$coulumnsCourse}
                  FROM {$acdContract} A
       INNER JOIN ONLY basPerson B
                    ON ( A.personId = B.personId )
            INNER JOIN {$acdcourseoccurrence} F
                    ON (       A.courseId      = F.courseId
                         AND   A.courseVersion = F.courseVersion
                         AND   A.turnId        = F.turnId
                         AND   A.unitId        = F.unitId )
            INNER JOIN acdCourse C
                    ON ( A.courseId = C.courseId )
             LEFT JOIN basTurn D
                    ON ( A.turnId = D.turnId )
             LEFT JOIN basUnit E
                    ON ( A.unitId = E.unitId )
             LEFT JOIN finPayrollDiscountTarget G
                    ON ( A.contractId = G.contractId )";

        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $filters->contractId;
        }
        if ( strlen($filters->courseId) > 0 )
        {
            $where .= ' AND A.courseId = ?';
            $args[] = $filters->courseId;
        }
        if ( strlen($filters->courseVersion) > 0 )
        {
            $where .= ' AND A.courseVersion = ?';
            $args[] = $filters->courseVersion;
        }
        if ( strlen($filters->turnId) > 0 )
        {
            $where .= ' AND A.turnid = ?';
            $args[] = $filters->turnId;
        }
        if ( strlen($filters->unitId) > 0 )
        {
            $where .= ' AND A.unitId = ?';
            $args[] = $filters->unitId;
        }
        if ( strlen($filters->personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $filters->personId;
        }
        if ( strlen($filters->personName) > 0 )
        {
            $where .= ' AND UNACCENT(B.name) ILIKE UNACCENT(?)';
            $args[] = $filters->personName . '%';
        }
        if ( strlen($filters->subscriptionId) > 0 )
        {
            $where .= ' AND A.subscriptionId = ?';
            $args[] = $filters->subscriptionId;
        }
        if ( strlen($filters->isClosed) > 0 )
        {
            $where .= ' AND isContractClosed(A.contractId) = ?';
            $args[] = $filters->isClosed;
        }        

        $result = null;
        if ( strlen($where) > 0 )
        {
            // O SQL dentro do order by serve para ordenar os contratos por
            // ordem decrescente de data da ultima movimentacao contratual
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY (SELECT MAX(stateTime)
                               FROM acdMovementContract
                              WHERE contractId = A.contractId) DESC,
                            B.name ';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
            if ( count($result)>0 )
            {
                $x = 0;
                foreach ( $result as $row )
                {
                    $result[$x++][8] = $this->getGlobalAverageContract($row[0]);
                }
            }
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     */
    public function insertContract($data)
    {
        if ( strlen($data->courseId) == 0 )
        {
            throw new Exception(_M('É necessário informar o curso.'));
        }
        
        $sql        = 'SELECT NEXTVAL(\'seq_contractId\')';
        $retVal     = $this->getDatabase()->query($sql);
        $contractId = false;

        if ( strlen($retVal[0][0]) > 0 )
        {
            $contractId = $retVal[0][0];
            
            $sql = 'INSERT INTO acdContract
                                (contractId,
                                 personId,
                                 courseId,
                                 courseVersion,
                                 turnId,
                                 unitId,
                                 formationDate,
                                 formationPeriodId,
                                 conclusionDate,
                                 emendsDate,
                                 diplomaDate,
                                 maturityDay,
                                 isListener,
                                 isRequestAcademicDegree,
                                 globalAverage,
                                 obs,
                                 parcelsNumber,
                                 enadeStatusId,
                                 internalContractId,
                                 internalCourseOccurrenceId,
                                 internalCourseOccurrenceVersion,
                                 externalCourseId,
                                 internalUnitId,
                                 internalTurnId,
                                 externalConclusionPeriod,
                                 cityId,
                                 externalConclusionInstitutionId,
                                 externalConclusionDate,
                                 exploitEnrollsInTransfer,
                                 subscriptionId)
                         VALUES ( ?, ?, ?, ?, ?, ?,
                                 TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),
                                 ?,
                                 TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),
                                 TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),
                                 TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'),
                                 ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                                 TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') .'\'), ?, ? )';

            $args = array( $contractId,
                           $data->personId,
                           $data->courseId,
                           $data->courseVersion,
                           $data->turnId,
                           $data->unitId,
                           $data->formationDate,
                           $data->formationPeriodId,
                           $data->conclusionDate,
                           $data->emendsDate,
                           $data->diplomaDate,
                           $data->maturityDay,
                           $data->isListener,
                           $data->isRequestAcademicDegree,
                           $data->globalAverage,
                           $data->obs,
                           $data->parcelsNumber,
                           $data->enadeStatusId,
                           strlen($data->internalContractId)>0 ? $data->internalContractId : '',
                           strlen($data->internalCourseOccurrenceId)>0 ? $data->internalCourseOccurrenceId : '',
                           strlen($data->internalCourseOccurrenceVersion)>0 ? $data->externalCourseOccurrenceVersion : '',
                           strlen($data->externalCourseId)>0 ? $data->externalCourseId : '',
                           strlen($data->internalUnitId)>0 ? $data->internalUnitId : '',
                           strlen($data->internalTurnId)>0 ? $data->internalTurnId : '',
                           $data->externalConclusionPeriod,
                           $data->cityId,
                           $data->externalConclusionPeriodInstitutionId,
                           $data->externalConclusionDate,
                           SAGU::NVL($data->exploitEnrollsInTransfer, DB_FALSE),
                           $data->subscriptionId);
                        
            if ( ! $this->getDatabase()->execute(SAGU::prepare($sql, $args)) )
            {
                $contratId = false;
            }
        }

        return $contractId;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     */
    public function updateContract($data)
    {
        $sql = 'UPDATE acdContract
                   SET personId                        = ?,
                       courseId                        = ?,
                       courseVersion                   = ?,
                       turnId                          = ?,
                       unitId                          = ?,
                       formationDate                   = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       formationPeriodId               = ?,
                       conclusionDate                  = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       emendsDate                      = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       diplomaDate                     = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       maturityDay                     = ?,
                       isListener                      = ?,
                       isRequestAcademicDegree         = ?,
                       globalAverage                   = ?,
                       obs                             = ?,
                       parcelsNumber                   = ?,
                       contractNumber                  = ?,
                       enadeStatusId                   = ?,
                       internalContractId              = ?,
                       internalCourseOccurrenceId      = ?,
                       internalCourseOccurrenceVersion = ?,
                       externalCourseId                = ?,
                       internalUnitId                  = ?,
                       internalTurnId                  = ?,
                       externalConclusionPeriod        = ?,
                       cityId                          = ?,
                       externalConclusionInstitutionId = ?,
                       externalConclusionDate          = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       exploitEnrollsInTransfer        = ?,
                       subscriptionId                  = ?
                 WHERE contractId                      = ?';

        $args = array( $data->personId,
                       $data->courseId,
                       $data->courseVersion,
                       $data->turnId,
                       $data->unitId,
                       $data->formationDate,
                       $data->formationPeriodId,
                       $data->conclusionDate,
                       $data->emendsDate,
                       $data->diplomaDate,
                       $data->maturityDay,
                       $data->isListener,
                       $data->isRequestAcademicDegree,
                       $data->globalAverage,
                       $data->obs,
                       $data->parcelsNumber,
                       $data->contractNumber,
                       $data->enadeStatusId,
                       strlen($data->internalContractId)>0 ? $data->internalContractId : '',
                       strlen($data->internalCourseOccurrenceId)>0 ? $data->internalCourseOccurrenceId : '',
                       strlen($data->internalCourseOccurrenceVersion)>0 ? $data->internalCourseOccurrenceVersion : '',
                       strlen($data->externalCourseId)>0 ? $data->externalCourseId : '',
                       strlen($data->internalUnitId)>0 ? $data->internalUnitId : '',
                       strlen($data->internalTurnId)>0 ? $data->internalTurnId : '',
                       $data->externalConclusionPeriod,
                       $data->cityId,
                       $data->externalConclusionInstitutionId,
                       $data->externalConclusionDate,
                       SAGU::NVL($data->exploitEnrollsInTransfer, DB_FALSE),
                       $data->subscriptionId,
                       $data->contractId );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $contractId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     */
    public function deleteContract($contractId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $ok = FALSE;
        
        try
        {
            $lastMovement = $this->getContractLastMovementStatus($contractId);
            if ( strlen($lastMovement->stateContract) > 0 )
            {
                $url = $MIOLO->GetActionURL($module, 'main:register:contract:movementContract', NULL, array('contractIdS' => $contractId));
                $link = new MLink('lnkMovimentacaoContratual', NULL, $url, _M('clicando aqui.'), '_blank');
                
                throw new Exception(_M('Existem movimentações contratuais para este contrato.<br>
                Para excluí-las, acesse a tela de movimentações contratuais ') . $link->generate());
            }

            $sql = 'DELETE FROM acdsemestercontractperiod WHERE contractid = ?';
            $ok = $this->getDatabase()->execute(SAGU::prepare($sql, $contractId));

            $sql = 'DELETE FROM acdcontract WHERE contractid = ?';
            $ok = $this->getDatabase()->execute(SAGU::prepare($sql, $contractId)) && $ok;
        }
        catch ( Exception $e )
        {
            throw new Exception(_M('Não foi possivel excluir contrato. Contrato ativo está vinculado a matricula.'));
        }
            
        return $ok;
    }
    
    public function getContractLastMovementStatus($contractId)
    {
        $sql = 'SELECT B.statecontractid,
                       B.inouttransition,
                       B.isclosecontract
                  FROM acdMovementContract A
            INNER JOIN acdstatecontract B
                    ON (A.statecontractid = B.statecontractid)
                 WHERE A.contractid = ?
              ORDER BY A.statetime DESC
                 LIMIT 1';

        $args = array( $contractId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $return = new stdClass();
        $return->stateContract = $result[0][0];
        $return->inOutTransition = $result[0][1];
        $return->isCloseContract = $result[0][2];

        return $return;
    }

    public function getPeriod()
    {
        $sql ="SELECT A.periodid,
                      A.description
                 FROM acdperiod A
             ORDER BY A.periodid DESC ";

        $result = $this->getDatabase()->query($sql);

        return $result;

    }

    /**
     * Get all curricular components coursed
     *
     * @param $contractId (int or array): Primary key for contracts
     * @param $regimenId (string): Regimen from curricular components
     * @return (array): Array with data
     */
    public function getCurricularComponentsByRegimen($contractId, $regimenId)
    {
        if ( is_array($contractId) )
        {
            $contractId = implode(',', $contractId);
        }

        $sql = 'SELECT A.curricularComponentId,
                       A.shortName,
                       A.academicCredits,
                       A.academicNumberHours,
                       B.groupId
                  FROM acdCurricularComponent A,
                       unit_acdGroup B,
                       unit_acdCurriculum C,
                       acdContract D,
                       unit_acdEnroll E
                 WHERE A.curricularComponentId      = C.curricularComponentId
                   AND A.curricularComponentVersion = C.curricularComponentVersion
                   AND B.curriculumId               = C.curriculumId
                   AND D.contractId                 = E.contractId
                   AND E.groupId                    = B.groupId
                   AND B.regimenId IN (' . $regimenId . ')
                   AND D.contractId IN (' . $contractId . ')
              ORDER BY 2';

        $result = $this->getDatabase()->query($sql);

        return $result;
    }

   /**
    *
    * Get all contracts for a person
    *
    * @param $personId (int): Primary key for a person to get the contrats
    * @return: Array containing contracts.
    */
    public function getPersonContracts($personId)
    {
        $sql = ' SELECT contractId,
                        courseId||\' - \'||courseVersion,
                        (SELECT name
                           FROM acdCourse
                          WHERE acdCourse.courseId = acdContract.courseId) as courseName,
                        unitId,
                        (SELECT description
                           FROM basUnit
                          WHERE basUnit.unitId = acdContract.unitId ) as unitDescription,
                        TO_CHAR(getContractActivationDate(acdContract.contractId),\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\') as activationDate,
                        TO_CHAR(getContractDisactivationDate(acdContract.contractId),\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\') as deactivationDate,
                        (SELECT learningPeriodId
                           FROM acdMovementContract
                          WHERE acdMovementContract.contractId = acdContract.contractId
                       ORDER BY stateTime DESC LIMIT 1) as learningPeriodId
                   FROM acdContract
                  WHERE personId = ? ';

       $args = array($personId);
       $ret  = $this->getDatabase()->query(SAGU::prepare($sql, $args));
       return $ret;
    }

   /**
    * Get personId by contractId
    *
    * @param $contractId: Contract id primary key
    * @return (int): Person id primary key
    */
    public function getPersonIdByContract($contractId)
    {
        $sql = ' SELECT personId
                   FROM unit_acdContract
                  WHERE contractId = ? ';

        $args = array($contractId);
        $return  = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $return[0][0];
    }

    /**
     * Verify if contract is closed
     *
     * @param $contractId: Contract id primary key
     * @return (boolean): TRUE if the contract is closed, FALSE otherwise
     */
    public function isClosed($contractId)
    {
        $sql = ' SELECT isCloseContract
                   FROM acdStateContract
                  WHERE getcontractstate(?) = stateContractId ';

        $args = array($contractId);
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return ( $result[0][0] == DB_TRUE );
    }


    /**
     * Obtem todos contratos ativos.
     * Funcao inicialmente criada para utilizar no formulario FrmBatchEnrollment (matricula em lote)
     * Caso alterï¿½-la, verifique o impacto que pode causar neste formulario.
     *
     * @param <type> $filters
     * @param <type> $toObject
     * @return <type>
     */
    public function getActiveContract($filters = null, $toObject = false)
    {
        $sql = 'SELECT A.contractId,
                       D.personId,
                       D.name,
                       B.periodId,
                       getContractClassId(A.contractId),
                       get_semester_contract(A.contractId),
                       A.courseId
                  FROM unit_acdContract A
            INNER JOIN unit_acdlearningperiod B
                    ON B.courseId = A.courseId
                   AND B.courseVersion = A.courseVersion
                   AND B.turnId = A.turnId
                   AND B.unitId = A.unitId
            INNER JOIN acdStateContract C
                    ON C.stateContractId = getContractState(A.contractId)
            INNER JOIN ONLY basPerson D
                    ON D.personId = A.personId
                 WHERE C.inOutTransition != \'O\'
                   AND C.stateContractId <> GETPARAMETER(\'ACADEMIC\', \'STATE_CONTRACT_ID_LOCKED\')::int

                    --Ignorar na listagem os contratos que ja possuem matricula
                   AND (SELECT COUNT(*)
                          FROM acdEnroll AA
                    INNER JOIN acdGroup BB
                            ON (AA.groupId = BB.groupId)
                         WHERE contractId = A.contractId
                           AND BB.learningPeriodId = ?
                           AND statusId IN ( \'' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . '\',\''  . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_PRE_ENROLLED') . '\')
                        ) <= 0';

        $fields = array(
            'contractId',
            'personId',
            'personName',
            'periodDescription',
            'classId',
            'classPeriod',
            'courseId',
        );

        $args = array();
        $args[] = $filters->learningPeriodId;
        if ( strlen($filters->learningPeriodId) > 0 )
        {
            $sql .= " AND B.learningPeriodId = ?";
            $args[] = $filters->learningPeriodId;
        }

        if ( strlen($filters->classId) > 0 )
        {
            $sql .= " AND getContractClassId(A.contractId) = ?";
            $args[] = $filters->classId;
        }
        
        if ( strlen($filters->contractId) > 0 )
        {
            $sql .= " AND A.contractId = ? ";
            $args[] = $filters->contractId;
        }
        
        if ( strlen($filters->courseId) > 0 )
        {
            $sql .= " AND A.courseId = ? ";
            $args[] = $filters->courseId;
        }
        
        if ( strlen($filters->personId) > 0 )
        {
            $sql .= " AND D.personId = ?";
            $args[] = $filters->personId;
        }
        
        if ( strlen($filters->semestre) > 0 )
        {
            $sql .= " AND get_semester_contract(A.contractId) = ?";
            $args[] = $filters->semestre;
        }
        
        if ( count($filters->curriculComponentIds) > 0 )
        {
            foreach ( $filters->curriculComponentIds as $curricularComponent )
            {
                $curricularComponents = explode('|', $curricularComponent);
                
                $sql .= ' AND (( SELECT COUNT(AA.*)
                                   FROM acdEnroll AA
                             INNER JOIN acdCurriculum BB
                                     ON (AA.curriculumId = BB.curriculumId)
                             INNER JOIN acdCurricularComponent CC
                                     ON (BB.curricularComponentId, BB.curricularComponentVersion) = (CC.curricularComponentId, CC.curricularComponentVersion)
                                  WHERE AA.contractId = A.contractId
                                    AND AA.statusId IN ( \'' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_EXCUSED') . '\',\''  . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPROVED') . '\')
                                    AND (CC.curricularComponentId = ? AND CC.curricularComponentVersion = ?)
                                 ) <= 0) ';
                $args[] = $curricularComponents[0];
                $args[] = $curricularComponents[1];
            }
        }

        $sql .= ' ORDER BY D.name';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        if ( $toObject )
        {
            $result = SAGU::resultToObject($result, $fields);
        }

        return $result;
    }

    /**
     * Obtï¿½m o cï¿½digo e a descriï¿½ï¿½o do estado do contrato
     *
     * @param type $contractId
     * @return stdClass
     */
    public function getContractState($contractId)
    {
        $sql = 'SELECT stateContractId,
                       description
                  FROM acdStateContract
                 WHERE getcontractstate(?) = stateContractId ';

        $args   = array($contractId);
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $return = new stdClass();
        list ( $return->stateContractId,
               $return->description ) = $result[0];

        return $return;
    }
    
    /**
     * @return int
     */
    public function getContractStateId($contractId)
    {
        return $this->getContractState($contractId)->stateContractId;
    }

    /**
     * See if the specified contract belongs to a freshman or not
     *
     * @param $contractId (int): The contract to query
     * @return TRUE if the contract belongs to a freshman. Otherwise, FALSE.
     */
    public function isFreshman($contractId)
    {
        $sql = 'SELECT isFreshMan(?)';

        $res = $this->getDatabase()->query(SAGU::prepare($sql, $contractId));

        return ($res[0][0] == DB_TRUE);
    }
    
    /**
     * See if the specified contract belongs to a freshman or not
     *
     * @param $contractId (int): The contract to query
     * @return TRUE if the contract belongs to a freshman. Otherwise, FALSE.
     */
    public function isFreshmanByPeriod($contractId, $periodId)
    {
        $sql = "select isfreshmanbyperiod(?, ?)";
        $res = $this->getDatabase()->query(SAGU::prepare($sql, array($contractId, $periodId)));
        
        return ($res[0][0] == DB_TRUE || is_null($res));
    }

    /**
     * Get contract number
     * @param <integer> $contractId
     * @param <boolean> $forceNewContractNumber
     * @return <integer>
     */
    public function getContractNumber($contractId, $forceNewContractNumber = false)
    {
        $MIOLO = MIOLO::getInstance();
        $contract = $this->getContract($contractId);

        if ( (strlen($contract->contractNumber) == 0) || $forceNewContractNumber == true )
        {
            // Business movement contract
            $businessMovementContract = new BusinessAcademicBusMovementContract();
            // Last movement contract
            $lastMovementContract = $businessMovementContract->getLastMovementContract($contractId);

            // New contract number
            $contractNumber = $contract->personId .'-'. SAGU::formatDate($lastMovementContract->stateTime, 'mm/yy');

            // Update contract
            $contract->contractNumber = $contractNumber;
            $this->updateContract($contract);
        }
        else
        {
            $contractNumber = $contract->contractNumber;
        }

        return $contractNumber;
    }

    /**
     * Verifica se o usuario logado (estudante) possui contrato ativo para poder acessar a pagina
     */
    public function checkStudentActiveContract($returnMessageError = true)
    {
        $module = SAGU::getFileModule(__FILE__);
        $MIOLO = MIOLO::getInstance();

        $busUser = new BusinessAdminUser();
        $busPerson = new BusinessBasicBusPerson();
        $busGroupUser = new BusinessAdminGroupUser();

        $mioloUserName = $MIOLO->getLogin()->id;
        $person = $busPerson->getPersonByMioloUserName($mioloUserName);

        $user = $busUser->getByLogin($mioloUserName);

        $filters = new stdClass();
        $filters->idUser = $user->idUser;

        if ( count($busGroupUser->search($filters)) <= 0 )
        {
            $MIOLO->error( _M('Vocï¿½ nï¿½o possui nenhum grupo de usuï¿½rio.', $module) );
        }

        $filters = new stdClass();
        $filters->personId = $person->personId;

        $contracts = $this->searchContract($filters);
        $dbOut = SAGU::getParameter('BASIC', 'DB_OUT');

        $foundActive = false;
        foreach ( (array) $contracts as $contract )
        {
            list($contractId) = $contract;

            $lastMovement = $this->getContractLastMovementStatus($contractId);
            if ( $lastMovement->isOutTransition != $dbOut )
            {
                $foundActive = true;
                break;
            }
        }

        if ( (!$foundActive) && ($returnMessageError) )
        {
            $MIOLO->error( _M('Vocï¿½ nï¿½o possui um contrato ativo para visualizar esta pï¿½gina.', $module) );
        }

        return $foundActive;
    }
    
    /**
     * Verifica se o contrato recebido por parâmetro está cancelado.
     * 
     * @param int $contractId
     * @return boolean
     */
    public function isCancelled($contractId)
    {
        $sql = "SELECT COUNT(A.*) > 0
                  FROM acdContract A 
            INNER JOIN acdMovementContract B 
                    ON B.contractId = A.contractId 
                   AND stateContractId = getContractState(A.contractId) 
            INNER JOIN acdStateContract C 
                    ON C.stateContractId = B.stateContractId 
                 WHERE A.contractId = ? 
                   AND C.inouttransition = 'O'";

        $result = $this->getDatabase()->query(SAGU::prepare($sql, array($contractId)));

        return ($result[0][0] == DB_TRUE);        
    }

    /**
     * Verifica se o usuario logado (estudante) possui contrato ativo para poder acessar a pagina
     * 
     * @param int $contractId
     * @return boolean
     */
    public function isLock($contractId)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT COUNT(*) > 0
                  FROM unit_acdContract
                 WHERE getContractState(?) = ?
                   AND contractid = ?";

        $params = array();
        $params[] = $contractId;
        $params[] = SAGU::getParameter($module, 'STATE_CONTRACT_ID_LOCKED');
        $params[] = $contractId;

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $params));

        return ($result[0][0] == DB_TRUE);
    }
    
    /**
     * Verifica se aluno concluiu todas as disciplinas minimas do curso.
     * 
     * @return boolean
     */
    public function concluiuTodasDisciplinas($contractId)
    {
        $busCurriculum = new BusinessAcademicBusCurriculum();
        $busContract = new BusinessAcademicBusContract();
        $busEnroll = new BusinessAcademicBusEnroll();
        
        $contract = $busContract->getContract($contractId);
        $status = array();
        
        $filters = new stdClass();
        $filters->courseId = $contract->courseId;
        $filters->courseVersion = $contract->courseVersion;
        $filters->turnId = $contract->turnId;
        $filters->unitId = $contract->unitId;
        $filters->curriculumTypeId = SAGU::getParameter('ACADEMIC', 'ACD_CURRICULUM_TYPE_MINIMUM');

        foreach ( $busCurriculum->searchCurriculumComponent($filters) as $row )
        {
            $curriculumId = $row[0];
            $curriculumData = $busEnroll->getCurriculumData($curriculumId);

            $status[] = $busEnroll->isCoursed($curriculumData, $contractId);
        }

        return count($status) > 0 && !in_array(false, $status);
    }
    
    /**
     * Processo de unificação de contrato.
     * 
     * @param int $contratoQueFica
     * @param int $contratoQueSai
     * @return boolean
     */
    public function unificarContrato($contratoQueSai, $contratoQueFica)
    {   
        $sql = "SELECT * FROM unificarContrato(?, ?);";
        $return = $this->getDatabase()->execute(SAGU::prepare($sql, array($contratoQueSai, $contratoQueFica)));

        return $return;
    }
    
    /**
     * Obtém contratos ativos 
     * 
     * @param type $data
     * @return type
     */
    public function obtemContratosAtivos($data, $gridData = false)
    {
        $sql = 'SELECT DISTINCT A.contractId,
                                A.personId,
                                B.name AS personName,
                                A.courseId,
                                A.courseVersion,
                                getCourseName(A.courseId) AS courseName,
                                A.turnId,
                                A.unitId,
                                D.classId
                           FROM acdContract A
                 LEFT JOIN ONLY basPerson B
                             ON (B.personId = A.personId)
                      LEFT JOIN acdCourseOccurrence C
                             ON (A.courseId, A.courseVersion, A.turnId, A.unitId) = (C.courseId, C.courseVersion, C.turnId, C.unitId) 
                      LEFT JOIN acdClassPupil D
                             ON (A.contractId = D.contractId)
                          WHERE A.courseId = ?
                            AND A.courseVersion = ? 
                            AND A.turnId = ?
                            AND A.unitId = ?
                            AND CASE WHEN iscontractclosed(A.contractId) THEN FALSE ELSE TRUE END';
        
        $args[] = $data->courseId;
        $args[] = $data->courseVersion;
        $args[] = $data->turnId;
        $args[] = $data->unitId;
        
        if ( strlen($data->contractId) > 0 )
        {
            $sql .= ' AND A.contractId = ? ';
            $args[] = $data->contractId;
        }
        
        if ( strlen($data->pupilClassId) > 0 )
        {
            $sql .= ' AND D.classId = ? ';
            $args[] = $data->pupilClassId;
        }
        
        $sql .= ' ORDER BY B.name, A.personId, A.contractId ';
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
             
        if ( $gridData == true )
        {
            foreach ( $result as $contrato )
            {
                $dados = array();
                $dados[] = $contrato[0];
                $dados[] = $contrato[1];
                $dados[] = $contrato[2];
                $dados[] = $contrato[8];
                
                $contratos[] = $dados;
            }
        }
        else
        {
            foreach ( $result as $contrato )
            {
                $dados = new stdClass();
                list($dados->contractId,
                     $dados->personId,
                     $dados->personName,
                     $dados->courseId,
                     $dados->courseVersion,
                     $dados->courseName,
                     $dados->turnId,
                     $dados->unitId,
                     $dados->classId) = $contrato;

                $contratos[] = $dados;
            }
        }
                
        return $contratos;
    }
    
    public function obterResumoMatricula($contractid)
    {
        $result = SDatabase::query("SELECT contractid, learningperiodid from finresumomatricula where contractid = ?", array($contractid));
           
        return $result;
    }
    
    public function obterContratoPessoa($personId)
    {
        $dadosContract = new stdClass();
        $dadosContract->personId = $personId;
        $verificaContract = $this->searchContract($dadosContract, true);

        return $verificaContract;
    }

    /**
     * Obtém contrato para ser utilizado para matrícula (pode ser utilizado em outros lugares caso necessário)
     * 
     * @param int $contractId
     * @return \stdClass
     */
    public function obterContratoParaMatricula($contractId)
    {
        $sql = "SELECT A.contractId,
                       A.personId,
                       B.name AS personName,
                       A.courseId,
                       A.courseVersion,
                       C.name AS courseName,
                       A.turnId,
                       A.unitId,
                       TO_CHAR(A.formationDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS formationDate,
                       A.formationPeriodId,
                       TO_CHAR(A.conclusionDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS conclusionDate,
                       TO_CHAR(A.emendsDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS emendsDate,
                       TO_CHAR(A.diplomaDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS diplomaDate,
                       A.maturityDay,
                       A.isListener,
                       A.isRequestAcademicDegree,
                       A.globalAverage,
                       A.contractNumber,
                       A.obs,
                       A.parcelsNumber,
                       D.employeeId,
                       D.isPayrollDiscount,
                       A.userName,
                       TO_CHAR(A.dateTime,'" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "') AS dateTime,
                       A.ipAddress,
                       A.enadeStatusId,
                       A.internalContractId,
                       A.internalCourseOccurrenceId,
                       A.internalCourseOccurrenceVersion,
                       A.externalCourseId,
                       A.internalUnitId,
                       A.internalTurnId,
                       A.externalConclusionPeriod,
                       A.cityId,
                       A.externalConclusionInstitutionId,
                       TO_CHAR(A.externalConclusionDate,'" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS externalConclusionDate,
                       A.exploitEnrollsInTransfer,
                       subscriptionId,
                       E.periodid,
                       E.learningperiodid,
                       E.description,
                       getContractClassId(A.contractId),
                       E.isFinanceGenerate AS periodoGeraFinanceiro,
                       isFreshManByPeriod(A.contractId, E.periodId) AS isFreshman,
                       CVT.regimen AS regimen,
                       (CASE WHEN CVT.regimen = ?
                             THEN
                                 get_semester_contract(A.contractId)
                             ELSE
                                 NULL
                        END) AS semestreSeriadoRigido,
                       getTurnDescription(A.turnId) AS turnDescription,
                       getUnitDescription(A.unitId) AS unitDescription
                  FROM acdContract A
       INNER JOIN ONLY basPerson B
                    ON (B.personId = A.personId)
            INNER JOIN acdCourse C
                    ON (C.courseId = A.courseId)
            INNER JOIN acdCourseVersion CV
                    ON (A.courseVersion = CV.courseVersion)
                   AND (A.courseId = CV.courseId)
             LEFT JOIN acdCourseVersionType CVT
                    ON (CV.courseVersionTypeId = CVT.courseVersionTypeId)
             LEFT JOIN finPayrollDiscountTarget D
                    ON (A.contractId = D.contractId)
            INNER JOIN acdlearningperiod E
                ON (A.courseid = E.courseid AND A.courseversion = E.courseversion AND A.turnid = E.turnid AND A.unitid = E.unitid)
            INNER JOIN acdPeriodEnrollDate G
                    ON G.learningPeriodId = E.learningPeriodId
                 WHERE NOW()::DATE BETWEEN G.beginDate AND G.endDate
                   AND A.contractId = ?";

        $result = SDatabase::query($sql, array(BusinessAcademicBusCourseVersionType::REGIME_SERIADO_RIGIDO, $contractId));

        //Quando é na sessao classes do SAGU nao funcionam
        $contract = new stdClass();

        list ( $contract->contractId,
               $contract->personId,
               $contract->personName,
               $contract->courseId,
               $contract->courseVersion,
               $contract->courseName,
               $contract->turnId,
               $contract->unitId,
               $contract->formationDate,
               $contract->formationPeriodId,
               $contract->conclusionDate,
               $contract->emendsDate,
               $contract->diplomaDate,
               $contract->maturityDay,
               $contract->isListener,
               $contract->isRequestAcademicDegree,
               $contract->globalAverage,
               $contract->contractNumber,
               $contract->obs,
               $contract->parcelsNumber,
               $contract->employeeId,
               $contract->isPayrollDiscount,
               $contract->userName,
               $contract->dateTime,
               $contract->ipAddress,
               $contract->enadeStatusId,
               $contract->internalContractId,
               $contract->internalCourseOccurrenceId,
               $contract->internalCourseOccurrenceVersion,
               $contract->externalCourseId,
               $contract->internalUnitId,
               $contract->internalTurnId,
               $contract->externalConclusionPeriod,
               $contract->cityId,
               $contract->externalConclusionInstitutionId,
               $contract->externalConclusionDate,
               $contract->exploitEnrollsInTransfer,
               $contract->subscriptionId,
               $contract->periodId,
               $contract->learningPeriodId,
               $contract->learningPeriodDescription,
               $contract->classId,
               $contract->periodoGeraFinanceiro,
               $contract->isFreshman,
               $contract->regimen,
               $contract->semestreSeriadoRigido,
               $contract->turnDescription,
               $contract->unitDescription ) = $result[0];
        
        if ( SAGU::getParameter('BASIC', 'MODULE_FINANCE_INSTALLED') == 'YES' && $contract->periodoGeraFinanceiro == DB_TRUE )
        {
            $contract->periodoGeraFinanceiro = true;
        }
        else
        {
            $contract->periodoGeraFinanceiro = false;
        }

        return $contract;
    }
}
?>
