<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search, list, insert,
 * update and delete register into acdPostEnrollConditionUnblock table.
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * @since
 * This class was created 19/12/2005
 *
 **/

class BusinessAcademicBusPostEnrollConditionUnblock extends sBusiness
{
    /**
     * Search for curricularComponentUnblock.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data Object containing data to filter the listing.
     *
     * @return An array containing the search results.
     *
     */
    function searchPostEnrollConditionUnblock($data)
    {

        $sql = 'SELECT J.isConditionBreak,
                       A.personId,
                       A.name,
                       F.curriculumId,
                       G.curricularComponentId || \' / \' || G.curricularComponentVersion,
                       G.name
             FROM ONLY basPhysicalPerson A
            INNER JOIN unit_acdContract B
                    ON (A.personId     = B.personId)
            INNER JOIN unit_acdEnroll E
                    ON (B.contractId   = E.contractId)
            INNER JOIN unit_acdcurriculum F
                    ON (E.curriculumId = F.curriculumId)
            INNER JOIN acdCurricularComponent G
                    ON (F.curricularComponentId      = G.curricularComponentId AND
                        F.curricularComponentVersion = G.curricularComponentVersion) 
            INNER JOIN unit_acdGroup H
                    ON (E.groupId      = H.groupId)
            INNER JOIN unit_acdlearningperiod I
                    ON (H.learningPeriodId = I.learningPeriodId)
             LEFT JOIN acdCurricularComponentUnblock J
                    ON (B.contractId = J.contractId
                        AND I.learningPeriodId = J.learningPeriodId
                        AND F.curriculumId = J.curriculumId)';

        $where  = '';
        unset($args);

        if ( strlen($data->personId) > 0 )
        {
            $where .= '    AND   A.personId = ?';
            $args[] = $data->personId;
        }

        if ( strlen($data->contractId) > 0 )
        {
            $where .= '    AND   B.contractId = ?';
            $args[] = $data->contractId;
        }

        if ( strlen($data->learningPeriodId) > 0 )
        {
            $where .= '    AND   H.learningPeriodId = ?';
            $args[] = $data->learningPeriodId;
        }

        if ( $where != '' )
        {
            $sql .= ' WHERE ' . substr($where, 8) .
                       ' ORDER BY A.name';

            $db      = $this->getDatabase();
            $result  = $db->query(SAGU::prepare($sql,$args));
        }

        for ( $x=0; $x<count($result); $x++ )
        {
            if ( strlen($result[$x][0]) == 0 )
            {
                $result[$x][0] = 'f';
            }
        }

        return $result;
    }

    /**
     * Update the specified curricularComponentUnblock data.
     *
     * @author Jamiel Spezia [jamiel@solis.coop.br]
     *
     * @param $data (object): Data identifying the course and its new data.
     *
     * @return On succeed, returns true. Otherwise, false.
     *
     */
    function updatePostEnrollConditionUnblock($data)
    {
        $sql    = 'SELECT isConditionBreak
                     FROM acdCurricularComponentUnblock
                    WHERE curriculumId     = ? 
                      AND contractId       = ?
                      AND learningPeriodId = ?';

        $args   = array( $data->curriculumId,
                         $data->contractId,
                         $data->learningPeriodId );

        $db     = $this->getDatabase();
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        if ( strlen($result[0][0]) == 0 )
        {
            $sql = 'SELECT NEXTVAL(\'seq_curricularcomponentunblockid\')';
            $ret = $this->getDatabase()->query(SAGU::prepare($sql,null));
            $data->curricularComponentUnblockId = $ret[0][0];

            $sql = 'INSERT INTO acdCurricularComponentUnblock (
                                curricularComponentUnblockId,
                                learningPeriodId,
                                contractId,
                                curriculumId,
                                isConditionBreak)
                         VALUES (?,?,?,?,?)';
            $args = array(
                       $data->curricularComponentUnblockId,
                       $data->learningPeriodId,
                       $data->contractId,
                       $data->curriculumId,
                       DB_TRUE
                     );

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

            if ( $result && strlen($data->curricularComponentUnblockId)>0 )
            {
                return $result;
            }
            return false;
        }
        elseif ( $result[0][0] == 'f' )
        {
            $sql = 'UPDATE acdCurricularComponentUnblock
                       SET isConditionBreak = TRUE
                     WHERE learningPeriodId = ?
                       AND contractId       = ?
                       AND curriculumId     = ?';

            $db     = $this->getDatabase();

            $args   = array($data->learningPeriodId,
                            $data->contractId,
                            $data->curriculumId
                           );

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));
            return $result;
        }
        else
        {
            $sql = 'UPDATE acdCurricularComponentUnblock
                       SET isConditionBreak = FALSE
                     WHERE learningPeriodId = ?
                       AND contractId = ?
                       AND curriculumId = ?';

            $db     = $this->getDatabase();

            $args   = array($data->learningPeriodId,
                            $data->contractId,
                            $data->curriculumId
                           );

            $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

            return $result;
        }
        return $result;
    }

}

?>
