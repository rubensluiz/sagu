<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * This class contains methods to get, search and list data from the
 * tables used by the scholarship description report.
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * This class was created 31/05/2006
 *
 **/

class BusinessAcademicBusScholarshipDescriptionTech extends sBusiness
{
    public function getPhysicalPersonData($personId)    
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business = new BusinessBasicBusPhysicalPerson();
    
        if ( strlen($personId) > 0 )
        {
            return $business->getPhysicalPerson($personId);
        }
        else
        {
            return null;
        }
    }
    

    public function getCompanyData($companyId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business = new BusinessBasicBusCompany();

        return $business->getCompany($companyId);
    }


    public function getPersonDocumentData($personId, $documentType = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business = new BusinessBasicBusDocument();
        
        if ( $documentType != null )
        {
            return $business->getDocument($personId, $documentType);
        }
        else
        {
            $db = $this->getDatabase();
            
            $sql = 'SELECT documentTypeId FROM basDocumentType';
            
            $dTypes = $db->query($sql);
            
            foreach ( $dTypes as $docType )
            {
                $personDocumentData[$docType[0]] = $business->getDocument($personId, $docType[0]);
            }

            return $personDocumentData;
        }
    }


    public function getPhysicalPersonStudentData($personId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business = new BusinessBasicBusPhysicalPersonStudent();

        return $business->getPhysicalPersonStudent($personId);
    }


    public function getCourseData($courseId, $courseVersion, $turnId=null, $unitId=null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business   = new BusinessAcademicBusCourse();
        $courseData = $business->getCourse($courseId);
        
        $business   = new BusinessAcademicBusCourseVersion();
        $courseVersionData = $business->getCourseVersion($courseId, $courseVersion);
        
        if ( is_object($courseData) )
        {
            $attrs = get_object_vars($courseData);
            
            foreach ( $attrs as $key=>$value )
            {
                $result->$key = $value;
            }
        }
        if ( is_object($courseVersionData) )
        {
            $attrs = get_object_vars($courseVersionData);
            
            foreach ( $attrs as $key=>$value )
            {
                $result->$key = $value ;
            }
        }
        
        $business = new BusinessAcademicBusEducationArea();
        if ( strlen($result->educationAreaId) > 0 )
        {
            $educationArea         = $business->getEducationArea($result->educationAreaId);
            $result->educationArea = $educationArea->description;
        }
        //$result = array_merge($courseData, $courseVersionData);

        if ( (strlen($unitId)>0) && (strlen($turnId)>0) )
        {
            $business         = new BusinessAcademicBusCourseOccurrence();
            $courseOccurrence = $business->getCourseOccurrence($courseId, $courseVersion, $turnId, $unitId);
            $result->authorizationDocument = $courseOccurrence->authorizationDocument;
        }

        return $result;
    }


    public function getCourseOccurrenceData($courseId, $courseVersion, $turnId, $unitId)
    {
        $sql = 'SELECT authorizationDate,
                       authorizationDocument,
                       status,
                       minimumConclusionCourse,
                       maximumConclusionCourse
                  FROM unit_acdcourseoccurrence
                 WHERE courseId = ?
                   AND courseVersion = ?
                   AND turnId = ?
                   AND unitId = ?';
                   
        $args = array($courseId, $courseVersion, $turnId, $unitId);

        $db = $this->getDatabase();

        $result = $db->query(SAGU::prepare($sql, $args));
        
        list ( $data->authorizationDate,
               $data->authorizationDocument,
               $data->status,
               $data->minimumConclusionCourse,
               $data->maximumConclusionCourse ) = $result[0];

        return $data;
    }


    public function getStampData($stampId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business = new BusinessBasicBusStamp();

        return $business->getStamp($stampId);
    }


    public function getCoursedEnrolledData($contractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $busContract  = new BusinessAcademicBusContract();
        $contractData = $busContract->getContract($contractId);
        
        $db = $this->getDatabase();
        
        $sql = '    SELECT SUM(C.academicCredits),
                           SUM(C.academicNumberHours)
                      FROM unit_acdEnroll A 
                INNER JOIN unit_acdcurriculum B 
                        ON (B.curriculumId = A.curriculumId) 
                INNER JOIN acdCurricularComponent C 
                        ON (C.curricularComponentId = B.curricularComponentId) 
                INNER JOIN unit_acdGroup D 
                        ON (D.groupId = A.groupId) 
                INNER JOIN unit_acdlearningperiod E 
                        ON (E.learningPeriodId = D.learningPeriodId)
                     WHERE A.contractId = ?
                       AND A.statusId IN ('.SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC').') 
                       AND B.curriculumId IN (SELECT curriculumId 
                                                FROM unit_acdcurriculum
                                               WHERE courseId = ?
                                                 AND courseVersion = ?
                                                 AND turnId = ?
                                                 AND unitId = ?
                                                 AND curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'CURRICULUM_TYPE_NON_OPTIONAL') . '))';
        
        $args = array($contractId,
                      $contractData->courseId,
                      $contractData->courseVersion,
                      $contractData->turnId,
                      $contractData->unitId);
                       
        $resultCoursed = $db->query(SAGU::prepare($sql, $args));
        
        $sql = '    SELECT SUM(C.academicCredits),
                           SUM(C.academicNumberHours)
                      FROM unit_acdEnroll A 
                INNER JOIN unit_acdcurriculum B 
                        ON (B.curriculumId = A.curriculumId) 
                INNER JOIN acdCurricularComponent C 
                        ON (C.curricularComponentId = B.curricularComponentId)
                INNER JOIN unit_acdGroup D
                        ON (D.groupId = A.groupId)
                INNER JOIN unit_acdlearningperiod E
                        ON (E.learningPeriodId = D.learningPeriodId)
                     WHERE A.contractId = ?
                       AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . ')
                       AND B.curriculumId IN (SELECT curriculumId 
                                                FROM unit_acdcurriculum
                                               WHERE courseId = ?
                                                 AND courseVersion = ?
                                                 AND turnId = ?
                                                 AND unitId = ?
                                                 AND curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'CURRICULUM_TYPE_NON_OPTIONAL') . '))';
                       
        $resultEnrolled = $db->query(SAGU::prepare($sql, $args));
        
        $data->enrollHoursCoursed    = $resultCoursed[0][1];
        $data->enrollHoursEnrolled   = $resultEnrolled[0][1];
        $data->enrollCreditsCoursed  = $resultCoursed[0][0];
        $data->enrollCreditsEnrolled = $resultEnrolled[0][0];
        
        return $data;
    }


    public function getContractData($contractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business = new BusinessAcademicBusContract();
        
        $return = $business->getContract($contractId);
        
        $db = $this->getDatabase();
        
        $sql = 'SELECT TO_CHAR(statetime, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') 
                  FROM acdmovementcontract 
                 WHERE contractid = ? 
              ORDER BY statetime';
        
        $result = $db->query(SAGU::prepare($sql, $contractId));
        
        $return->contractBeginDate = $result[0][0];
        
        return $return;
    }
    
    public function getCourseCurriculumData($courseId, $courseVersion, $turnId, $unitId, $orderByGroup=false, $orderByDescription=true)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $db = $this->getDatabase();
        
        $sql = 'SELECT A.curriculumId,
                       A.courseId,
                       A.courseVersion,
                       B.name AS courseName,
                       A.turnId,
                       A.unitId,
                       A.curricularComponentId,
                       A.curricularComponentVersion,
                       C.name AS curricularComponentName,
                       A.semester,
                       A.showInScholarshipDescription,
                       A.curricularComponentGroupDocumentEndCourseId,
                       D.name AS curricularComponentGroupDocumentEndCourseName,
                       A.curricularComponentGroupElectiveId,
                       E.name AS curricularComponentGroupElectiveName,
                       A.curriculumTypeId,
                       F.description AS curriculumTypeDescription,
                       TO_CHAR(A.endDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.curricularComponentTypeId,
                       C.academicCredits,
                       C.academicNumberHours
                  FROM unit_acdcurriculum A
            INNER JOIN acdCourse B
                    ON (B.courseId = A.courseId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId = A.curricularComponentId
                        AND C.curricularComponentVersion = A.curricularComponentVersion)
             LEFT JOIN acdCurricularComponentGroup D
                    ON (D.curricularComponentGroupId = A.curricularComponentGroupDocumentEndCourseId)
             LEFT JOIN acdCurricularComponentGroup E
                    ON (E.curricularComponentGroupId = A.curricularComponentGroupElectiveId)
            INNER JOIN acdCurriculumType F
                    ON (F.curriculumTypeId = A.curriculumTypeId)
                 WHERE A.courseId = ?
                   AND A.courseVersion = ?
                   AND A.turnId = ?
                   AND A.unitId = ?
                   AND A.curriculumTypeId IN (' . SAGU::getParameter('ACADEMIC', 'SCHOLARSHIP_CURRICULUM_TYPE_NON_OPTIONAL') . ')';

        if ( $orderByGroup )
        {
            if ( $orderByDescription == true )
            {
                $sql .= ' ORDER BY A.curricularComponentGroupDocumentEndCourseId, curricularComponentName, A.semester';
            }
            else
            {
                $sql .= ' ORDER BY A.curricularComponentGroupDocumentEndCourseId, A.semester, curricularComponentName';
            }
        }
        else
        {
            if ( $orderByDescription == true )
            {
                $sql .= ' ORDER BY curricularComponentName, A.semester';
            }
            else
            {
                $sql .= ' ORDER BY A.semester, curricularComponentName';
            }
        }

        $args = array($courseId, $courseVersion, $turnId, $unitId);

        $result = $db->query(SAGU::prepare($sql, $args));

        return $result;
    }


    public function getCourseCurricularComponentGroupData($curricularComponentGroupId, $courseId, $courseVersion, $type=0)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db = $this->getDatabase();
        
        if ( $type == 0 )
        {
            $sql = 'SELECT A.curriculumId,
                           B.curricularComponentId,
                           B.curricularComponentVersion,
                           B.name
                      FROM unit_acdcurriculum A
                INNER JOIN acdCurricularComponent B
                        ON (B.curricularComponentId = A.curricularComponentId)
                     WHERE B.curricularComponentGroupDocumentEndCourseId = ?
                       AND A.courseId = ?
                       AND A.courseVersion = ?';
        }
        elseif ( $type == 1 )
        {
            $sql = 'SELECT A.curriculumId,
                           B.curricularComponentId,
                           B.curricularComponentVersion,
                           B.name
                      FROM unit_acdcurriculum A
                INNER JOIN acdCurricularComponent B
                        ON (B.curricularComponentId = A.curricularComponentId)
                     WHERE B.curricularComponentGroupElectiveId = ?
                       AND A.courseId = ?
                       AND A.courseVersion = ?';
        }
        
        $args = array ( $curricularComponentGroupId,
                        $courseId,
                        $courseVersion);
        
        if ( strlen($sql) > 0 )
        {                
            $result = $db->query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }


    public function getEnrollData($contractId, $curriculumId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db = $this->getDatabase();
        
        $sql = 'SELECT A.curriculumId AS curriculumId,                     
                       A.finalNote,
                       E.periodId,
                       A.obsExploitation,
                       A.statusId,
                       A.concept,
                       B.curriculumTypeId,
                       D.curriculumId AS groupCurriculumId
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdcurriculum B
                    ON (B.curriculumId = A.curriculumId)
            INNER JOIN acdCurricularComponent C
                    ON (C.curricularComponentId      = B.curricularComponentId AND
                        C.curricularComponentVersion = B.curricularComponentVersion)
            INNER JOIN unit_acdGroup D
                    ON (D.groupId = A.groupId)
            INNER JOIN unit_acdlearningperiod E
                    ON (E.learningPeriodId = D.learningPeriodId)
                 WHERE A.contractId = ?
                   AND A.curriculumId = ?
                   AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') . ', ' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . ')';
              
        $args = array(  $contractId,
                        $curriculumId );
        
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }


    public function getCurriculumData($curriculumId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business = new BusinessAcademicBusCurriculum();

        return $business->getCurriculum($curriculumId);
    }


    public function getCurriculumComplementaryActivitiesEnroll($contractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db = $this->getDatabase();
        
        $sql = 'SELECT A.enrollId,
                       B.curriculumId,
                       C.curricularComponentId,
                       C.name as curricularComponentName,
                       C.academicNumberHours,
                       C.academicCredits,
                       A.concept,
                       B.curricularComponentGroupDocumentEndCourseId
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdcurriculum B
                    ON (A.curriculumId = B.curriculumId)
            INNER JOIN acdCurricularComponent C
                    ON (B.curricularComponentId = C.curricularComponentId AND
                        B.curricularComponentVersion = C.curricularComponentVersion)
                 WHERE A.contractId = ?
                   AND B.curriculumTypeId = ' . CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY_ID;
        
        $args = array($contractId);
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }


    public function getComplementaryActivitiesTotals($enrollId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db = $this->getDatabase();
        
        $sql = 'SELECT sum(totalHours) FROM acdComplementaryActivities WHERE enrollId = ?';
        
        $result = $db->query(SAGU::prepare($sql, $enrollId));
        
        $return->totalHours = $result[0][0];
        
        $sql = 'SELECT sum(totalCredits) FROM acdComplementaryActivities WHERE enrollId = ?';
        
        $result = $db->query(SAGU::prepare($sql, $enrollId));
        
        $return->totalCredits = $result[0][0];
        
        return $return;
    }


    public function getComplementaryActivitiesData($contractId)    
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $db = $this->getDatabase();
        
        $sql = 'SELECT E.periodId,
                        C.curricularComponentId,
                        C.curricularComponentVersion,
                        C.shortName,
                        C.academicNumberHours,
                        C.academicCredits,
                        A.finalNote,
                        A.statusId,
                        D2.curricularComponentId,
                        D2.curricularComponentVersion,
                        F.description,
                        F.degree,
                        F.totalHours,
                        F.totalCredits,
                        F.concept,
                        B.curricularComponentGroupDocumentEndCourseId,
                        G.name
                   FROM unit_acdEnroll A
             INNER JOIN unit_acdcurriculum B
                     ON ( A.curriculumId = B.curriculumId )
             INNER JOIN acdCurricularComponent C
                     ON ( B.curricularComponentId = C.curricularComponentId
                    AND B.curricularComponentVersion = C.curricularComponentVersion )
              LEFT JOIN unit_acdGroup D
                     ON ( A.groupId = D.groupId )
             INNER JOIN unit_acdcurriculum D2
                     ON ( D.curriculumId = D2.curriculumId )
             INNER JOIN acdCurricularComponent D3
                     ON ( D2.curricularComponentId = D3.curricularComponentId
                    AND D2.curricularComponentVersion = D3.curricularComponentVersion )
             INNER JOIN unit_acdlearningperiod E
                     ON ( D.learningPeriodId = E.learningPeriodId )
             INNER JOIN acdComplementaryActivities F
                     ON (F.enrollId = A.enrollId)
             INNER JOIN acdCurricularComponentGroup G
                     ON (G.curricularComponentGroupId = B.curricularComponentGroupDocumentEndCourseId)
                  WHERE A.contractId = ?
                    AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_ENROLLED') . ',' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') . ')
                    AND B.curriculumTypeId IN (' . CURRICULUM_TYPE_COMPLEMENTARY_ACTIVITY_ID . ')
               ORDER BY E.beginDate ASC,
                        B.semester,
                        C.shortName';
      
        $args = array($contractId);
        
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }


    public function getLearningPeriodData($courseId)
    {   
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $business         = new BusinessAcademicBusMovementContract();
        $movementContract = $business->getLastMovementContract($courseId);

        if ( strlen($movementContract->learningPeriodId) > 0 )
        {
            $business           = new BusinessAcademicBusLearningPeriod();
            $learningPeriodData = $business->getLearningPeriod($movementContract->learningPeriodId);
        
            return $learningPeriodData;
        }
        else
        {
            return null;
        }
    }


    public function getOtherCurricularComponentsCoursedData($contractId, $concludedCourses = '')
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $contractData = $this->getContractData($contractId);
        
        $db = $this->getDatabase();
        
        $sql = 'SELECT  A.enrollId, 
                        E.curriculumId,
                        C.curricularComponentId,
                        C.curricularComponentVersion,
                        C.name as curricularComponentName,
                        C.academicCredits,
                        C.academicNumberHours,
                        A.finalNote,
                        A.concept,
                        A.obsExploitation,
                        A.showInScholarshipDescription,
                        F.periodId
                   FROM unit_acdEnroll A
             INNER JOIN unit_acdcurriculum B
                     ON (B.curriculumId = A.curriculumId)
             INNER JOIN acdCurricularComponent C
                     ON (C.curricularComponentId = B.curricularComponentId AND
                         C.curricularComponentVersion = B.curricularComponentVersion)
             INNER JOIN unit_acdContract D
                     ON (D.contractId = A.contractId)
             INNER JOIN unit_acdGroup E
                     ON (E.groupId = A.groupId)
             INNER JOIN unit_acdlearningperiod F
                     ON (F.learningPeriodId = E.learningPeriodId)
                  WHERE D.personId = ?
                    AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') . ')
                    AND A.enrollId NOT IN (SELECT A.enrollId 
                                             FROM unit_acdEnroll A 
                                       INNER JOIN unit_acdcurriculum B 
                                               ON (B.curriculumId = A.curriculumId)
                                            WHERE A.contractId = ?
                                              AND A.statusId IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_APPR_OR_EXC') . ')
                                              AND B.courseId = ?
                                              AND B.courseVersion = ?)';
        if ( strlen($concludedCourses) > 0 )
        {
            $sql .= ' AND D.courseId NOT IN (' . $concludedCourses . ')';
        }
                                              
        $args   = array($contractData->personId, $contractId, $contractData->courseId, $contractData->courseVersion);
        
        $result = $db->query(SAGU::prepare($sql, $args));
        
        return $result;
    }

    public function getContractStateData($contractId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $contractData = $this->getContractData($contractId);
        
        if ( strlen($contractData->conclusionDate) > 0 )
        {
            $return->concluded = true;
            $conclusionDate    = explode('/', $contractData->conclusionDate);
            $return->year      = $conclusionDate[2];
        }
        else
        {
            $db = $this->getDatabase();
            
            $sql = 'SELECT B.isCloseContract
                      FROM acdMovementContract A
                INNER JOIN acdStateContract B
                        ON (B.stateContractId = A.stateContractId)
                     WHERE contractId = ? 
                  ORDER BY A.stateTime DESC';
                  
            $result = $db->query(SAGU::prepare($sql, $contractId));
            
            if ( $result[0][0] == 't' )
            {
                $return->locked = true;
            }
            else
            {
                $return->coursing = true;
            }
        }
    }


    public function getCourseAbilitiesData($courseId, $courseVersion)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $db = $this->getDatabase();
        
        $business = new BusinessAcademicBusCourseAbility();
        
        $filters->courseId        = $courseId;
        $filters->courseVersion   = $courseVersion;
        $filters->type            = 'G';
        $result->generalAbilities = $business->searchCourseAbility($filters);
        
        $filters->type = 'E';
        $result->especificAbilities = $business->searchCourseAbility($filters);
        
        return $result;
    }


    public function testIsListener($contractId)
    {
        $sql = 'SELECT isListener
                  FROM unit_acdContract
                 WHERE contractId = ?';
                 
        $db = $this->getDatabase();
                 
        $result = $db->query(SAGU::prepare($sql, $contractId));

        return $result[0][0];
    }


    public function getSavedOptions()
    {
        $sql = 'SELECT value
                  FROM basConfig
                 WHERE parameter = ?';
                 
        $args = array('SCHOLARSHIP_DESCRIPTION_SAVED_OPTIONS'
                     );

        $db = $this->getDatabase();
                 
        $result = $db->query(SAGU::prepare($sql, $args, false));

        return $result[0][0];
    }


    public function saveOptions($content)
    {
        $sql = 'UPDATE basConfig
                   SET value = ?
                 WHERE parameter = ?';
                 
        $args = array(
                        $content,
                        'SCHOLARSHIP_DESCRIPTION_SAVED_OPTIONS'
                     );

        $db = $this->getDatabase();
                 
        $result = $db->execute(SAGU::prepare($sql, $args, false));

        return $result;
    }
}

?>
