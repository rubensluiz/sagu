<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * This file handles the connection and actions for acdStateTransistion table
 *
 * @author Jamiel Spezia [jamiel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 21/09/2005
 *
 **/

/**
 * Class to manipulate the acdStateTransistion table
 **/
class BusinessAcademicBusStateTransistion extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $beginStateId (integer): Primary key of the record to be retrieved
     * @param $endStateId (integer): Primary key of the record to be retrieved
     *
     * @return (object): Return an object of the type handled by the class
     *
     **/
    public function getStateTransistion($beginStateId, $endStateId)
    {
        $sql = 'SELECT A.beginStateId,
                       A.endStateId,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdStateTransition A
                 WHERE A.beginStateId   = ?
                   AND A.endStateId     = ?';

        $pk = array(
                     $beginStateId,
                     $endStateId
                   );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $pk));
        
        $stateTransistion = new AcdStateTransistion();

        list ( $stateTransistion->beginStateId,
               $stateTransistion->endStateId,
               $stateTransistion->userName,
               $stateTransistion->dateTime,
               $stateTransistion->ipAddress ) = $result[0];

        return $stateTransistion; 
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchStateTransistion($filters)
    {
        $sql = 'SELECT A.beginStateId,
                       B.description,
                       A.endStateId,
                       C.description,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM acdStateTransition A
             LEFT JOIN acdStateContract B
                    ON (A.beginStateId = B.stateContractId)
             LEFT JOIN acdStateContract C
                    ON (A.endStateId = C.stateContractId)';

        if ( strlen($filters->beginStateId) > 0 )
        {
            $where .= ' AND A.beginStateId = ?';
            $args[] = $filters->beginStateId;
        }
        if ( strlen($filters->endStateId) > 0 )
        {
            $where .= ' AND A.endStateId = ?';
            $args[] = $filters->endStateId;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY A.beginStateId';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
            
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     *
     * @return True if succed, otherwise False
     *
     **/
    public function insertStateTransistion($data)
    {
        $sql = 'INSERT INTO acdStateTransition
                            (beginStateId,
                             endStateId)
                     VALUES (?,
                             ?)';

        $args = array( 
                       $data->beginStateId,
                       $data->endStateId
                     );

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $beginStateId (string): Primary key for deletion
     * @param $endStateId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteStateTransistion($beginStateId, $endStateId = null)
    {
        $pk = is_array($beginStateId) ? $beginStateId : array(
             $beginStateId,
             $endStateId
        );

        $sql = 'DELETE FROM acdStateTransition
                      WHERE beginStateId = ?
                        AND endStateId   = ? ';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $pk));

        return $result;
    }

}

?>
