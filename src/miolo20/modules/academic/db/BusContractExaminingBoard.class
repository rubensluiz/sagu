<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for acdContractExaminingBoard table
 *
 * @author Andre Chagas Dias [andre@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 18/11/2008
 *
 **/

/**
 * Class to manipulate the acdContractExaminingBoard table
 **/
class BusinessAcademicBusContractExaminingBoard extends sBusiness
{
    /**
     * Return a specific record from the database
     *
     * @param $contractExaminingBoardId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     **/
    public function getContractExaminingBoard($contractExaminingBoardId)
    {

        $sql = 'SELECT A.contractExaminingBoardId,
                       A.contractId,
                       TO_CHAR(A.examiningBoardDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.title,
                       A.professorIds,
                       A.userName,
                       TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       A.ipAddress
                  FROM unit_acdContractExaminingBoard A
                 WHERE A.contractExaminingBoardId = ?';

        $args = array( $contractExaminingBoardId );

        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        $contractExaminingBoard = new AcdContractExaminingBoard();

        list ( $contractExaminingBoard->contractExaminingBoardId,
               $contractExaminingBoard->contractId,
               $contractExaminingBoard->examiningBoardDate,
               $contractExaminingBoard->titleExaminingBoard,
               $contractExaminingBoard->professorIds,
               $contractExaminingBoard->userName,
               $contractExaminingBoard->dateTime,
               $contractExaminingBoard->ipAddress ) = $result[0];

        if( strlen($contractExaminingBoard->professorIds) > 0 )
        {
            $sql = ' SELECT DISTINCT \'[\'||personId||\'] [\'||COALESCE(name,\'\')||\']\' as name
                       FROM basPerson
                      WHERE personId = ANY(?)
                   ORDER BY name';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $contractExaminingBoard->professorIds));

            if( count($result) > 0 )
            {
                unset($contractExaminingBoard->professorIds);
                foreach($result as $professor)
                {
                    $contractExaminingBoard->professorIds [] = $professor[0];
                }
            }
        }

        return $contractExaminingBoard;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     **/
    public function searchContractExaminingBoard($filters)
    {

        $sql = 'SELECT DISTINCT A.contractExaminingBoardId,
                                A.contractId,
                                C.name,
                                E.shortName,
                                TO_CHAR(A.examiningBoardDate,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') as date,
                                A.title,
                                A.professorIds,
                                A.userName,
                                TO_CHAR(A.dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                                A.ipAddress
                        FROM unit_acdContractExaminingBoard A
                   LEFT JOIN unit_acdContract B
                             ON( A.contractId = B.contractId )
                   LEFT JOIN basPhysicalPerson C
                             ON( B.personId = C.personId )
                   LEFT JOIN unit_acdcourseoccurrence D
                             ON(     B.courseId = D.courseId
                                 AND B.courseVersion = D.courseVersion
                                 AND B.turnId = D.turnId
                                 AND B.unitId = D.unitId               )
                   LEFT JOIN acdCourse E
                             ON( D.courseId = E.courseId )';

        if ( strlen($filters->contractExaminingBoardId) > 0 )
        {
            $where .= ' AND A.contractExaminingBoardId = ?';
            $args[] = $filters->contractExaminingBoardId;
        }

        if ( strlen($filters->contractId) > 0 )
        {
            $where .= ' AND A.contractId = ?';
            $args[] = $filters->contractId;
        }

        if ( strlen($filters->title) > 0 )
        {
            $where .= ' AND UNACCENT(A.title) ILIKE UNACCENT(?)';
            $args[] = $filters->title . '%';
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . '
                   ORDER BY 1,2,3,4,5,6,7';

            $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     **/
    public function insertContractExaminingBoard($data)
    {
        $sql = 'INSERT INTO acdContractExaminingBoard
                            (contractId,
                             examiningBoardDate,
                             title,
                             professorIds)
                     VALUES (?, TO_DATE(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), ?, ?)';

        $args = array( $data->contractId,
                       $data->examiningBoardDate,
                       $data->title,
                       $data->professorIds );

       $result = $this->getDatabase()->execute(SAGU::prepare($sql, $args));

       return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     **/
    public function updateContractExaminingBoard($data)
    {

        $sql = 'UPDATE acdContractExaminingBoard
                   SET contractId = ?,
                       examiningBoardDate = TO_DATE( ? ,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       title = ?,
                       professorIds = ?
                 WHERE contractExaminingBoardId = ?';

        $args = array( $data->contractId,
                       $data->examiningBoardDate,
                       $data->title,
                       $data->professorIds,
                       $data->contractExaminingBoardId );

        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $this->getDatabase()->execute($sqls[$i]);
        }

        return $result;
    }

    /**
     * Delete a record
     *
     * @param $contractExaminingBoardId (string): Primary key for deletion
     * @return (boolean): True if succeed, otherwise False
     **/
    public function deleteContractExaminingBoard($contractExaminingBoardId)
    {
        $sql = 'DELETE FROM acdContractExaminingBoard
                 WHERE contractExaminingBoardId = ?';

        $result = $this->getDatabase()->execute(SAGU::prepare($sql, $contractExaminingBoardId));

        return $result;
    }

}
?>
