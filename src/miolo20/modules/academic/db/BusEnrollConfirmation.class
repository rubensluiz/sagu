<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for acdEnroll table
 *
 * @author Leovan Tavares da Silva [leovan@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 06/02/2006
 *
 **/


/**
 * Class to manipulate the acdEnroll table
 **/
class BusinessAcademicBusEnrollConfirmation extends sBusiness
{
    /**
     * Function that returns the contracts that are enroll
     *
     * @param $courseId (varchar): Is code of course
     * @param $courseVersion (integer): Is code of cource version
     * @param $turnId (integer): Is code of turn
     * @param $unitId (integer): Is code of unit
     * @param $learningPeriodId (integer): Is code of learning period
     * 
     * @return $result (Array): Return an array of the contracts
     */
    function getEnrolledContracts($courseId, $courseVersion, $turnId, $unitId, $learningPeriodId)
    {
        $sql = 'SELECT DISTINCT A.contractId 
                           FROM unit_acdEnroll A 
                     INNER JOIN unit_acdContract B 
                             ON (A.contractid = B.contractid)
                     INNER JOIN unit_acdGroup C
                             ON (C.groupId = A.groupId)
                          WHERE B.courseid = ? 
                            AND B.courseversion = ? 
                            AND B.turnid = ? 
                            AND B.unitid = ?
                            AND C.learningPeriodId = ? 
                            AND A.statusid NOT IN (' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED') . ')';
        
        $args = array(
                $courseId,
                $courseVersion,
                $turnId,
                $unitId,
                $learningPeriodId
        );
        
        $result = $this->getDatabase()->query(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Function that returns the enrolled in a given learning period
     * 
     * @param $contractId (integer): Id id that contract of person
     * @param $learningPeriodId (integer): Id id that learning period
     *
     * @return $result (array): Return info that person
     **/
    function getEnrollConfirmationByPeriod($contractId, $learningPeriodId)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $busLearningPeriod  = new BusinessAcademicBusLearningPeriod();
        $learningPeriodData = $busLearningPeriod->getLearningPeriod($learningPeriodId);

        $sql = 'SELECT D.curricularComponentId,
                       D.curricularComponentVersion,
                       trim(D.name) AS curricularComponentName,
                       ARRAY_TO_STRING(ARRAY(SELECT PROF.name FROM basPhysicalPersonProfessor PROF WHERE PROF.personId = H.professorId ORDER BY PROF.name), \',\') AS professorName,
                       B.groupId,
                       C.curriculumId,
                       trim(substr(CONCAT(J.room || \' - \' || J.building || \',\'), 0, length(CONCAT(J.room || \' - \' || J.building || \',\')))),
                       trim(substr(CONCAT(L.description || \',\'), 0, length(CONCAT(L.description || \',\'))))
                  FROM unit_acdEnroll A
            INNER JOIN unit_acdGroup B
                    ON (B.groupId = A.groupId)
             LEFT JOIN unit_acdcurriculum C
                    ON (C.curriculumId = B.curriculumId)
             LEFT JOIN acdCurricularComponent D
                    ON (D.curricularComponentId = C.curricularComponentId
                        AND D.curricularComponentVersion = C.curricularComponentVersion)
             LEFT JOIN acdSchedule E
                    ON (E.groupId = B.groupId)
             LEFT JOIN acdScheduleProfessor H
                    ON (H.scheduleId = E.scheduleId)
             LEFT JOIN insPhysicalResource J
                    ON (J.physicalResourceId = E.physicalResourceId
                        AND J.physicalResourceVersion = E.physicalResourceVersion )
             LEFT JOIN basUnit L
                    ON (L.unitId = E.unitId)
                 WHERE A.contractId = ?
                   AND B.learningPeriodId IN (SELECT learningperiodid FROM unit_acdlearningperiod WHERE periodid = ?)
                   AND A.statusId NOT IN(' . SAGU::getParameter('ACADEMIC', 'ENROLL_STATUS_CANCELLED') . ')
              GROUP BY D.curricularcomponentid,
                       D.curricularcomponentversion,
                       curricularcomponentname,
                       B.groupid,
                       C.curriculumId,
                       H.professorId
              ORDER BY curricularComponentName';

        $args = array (
                        $contractId,
                        $learningPeriodData->periodId
                      );

        $result = $this->getDatabase()->query(SAGU::prepare($sql,$args));

        return $result;
    }
}

?>
