<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for basCountry table
 *
 * @author William Prigol Lopes [william] [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 07/08/2005
 *
 **/

/**
 * Class to manipulate the basCountry table
 **/
class BusinessAcademicBusFormationLevel extends sBusiness
{
    /**
     * List all records from the table handled by the class
     *
     * @param: None
     * @returns (array): Return an array with the entire table
     **/
    public function listFormationLevel()
    {
        $db = $this->getDatabase();
        $sql = 'SELECT formationLevelId,
                       description
                  FROM acdFormationLevel
              ORDER BY description ';
        $ret = $db->query($sql);

        return $ret;
    }

    /**
     * Return a specific record from the database
     *
     * @param $formationLevelId (integer): Primary key of the record to be retrieved
     * @return (object): Return an object of the type handled by the class
     **/
    public function getFormationLevel($formationLevelId)
    {
        $sql = 'SELECT formationLevelId,
                       description,
                       shortDescription,
                       reportName,
                       userName,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\'),
                       ipAddress
                  FROM acdFormationLevel
                 WHERE formationLevelId = ? ';

        $db = $this->getDatabase();
        $result = $db->query(SAGU::prepare($sql, $formationLevelId));

        $formationLevel = new acdFormationLevel();
        list ( $formationLevel->formationLevelId,
               $formationLevel->description,
               $formationLevel->shortDescription,
               $formationLevel->reportName,
               $formationLevel->userName,
               $formationLevel->dateTime,
               $formationLevel->ipAddress ) = $result[0];

        return $formationLevel;
    }

    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     * @return (array): An array containing the search results
     **/
    public function searchFormationLevel($filters)
    {
        $sql= 'SELECT formationLevelId,
                      description,
                      shortDescription,
                      reportName
                 FROM acdFormationLevel ';

        if ( strlen($filters->formationLevelId) > 0 )
        {
            $where .= ' AND formationLevelId = ? ';
            $args[] = $filters->formationLevelId;
        }

        if ( strlen($filters->description) > 0 )
        {
            $where .= ' AND UNACCENT(description) ILIKE UNACCENT(?) ';
            $args[] = $filters->description . '%';
        }

        if ( strlen($filters->shortDescription) > 0 )
        {
            $where .= ' AND UNACCENT(shortDescription) ILIKE UNACCENT(?) ';
            $args[] = $filters->shortDescription . '%';
        }
        
        if ( strlen($filters->reportName) > 0 )
        {
            $where .= ' AND UNACCENT(reportName) ILIKE UNACCENT(?) ';
            $args[] = $filters->reportName;
        }

        unset($result);
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4) . ' ORDER BY description, shortDescription';
            $db = $this->getDatabase();

            $result = $db->query(SAGU::prepare($sql, $args));

        }

        return $result;
    }

    /**
     * Insert a new record
     *
     * @param $data (object): An object of the type handled by the class
     * @return True if succed, otherwise False
     **/
    public function insertFormationLevel($data)
    {
        $sql = 'INSERT INTO acdFormationLevel
                            (description,
                             shortDescription,
                             reportName)
                     VALUES (?,?,lower(?))';

        $args = array( $data->description,
                       $data->shortDescription,
                       $data->reportName );

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $args));

        return $result;
    }

    /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     * @return (boolean): True if succeed, otherwise False
     **/
   public function updateFormationLevel($data)
    {
        $sql = 'UPDATE acdFormationLevel
                   SET description = ?,
                       shortDescription = ?,
                       reportName = lower(?)
                 WHERE formationLevelId = ? ';

        $args = array( $data->description,
                       $data->shortDescription,
                       $data->reportName,
                       $data->formationLevelId );

        $db = $this->getDatabase();
        $sqls = SAGU::prepare($sql, $args);

        for ( $i=0; $i<count($sqls); $i++ )
        {
            $result = $db->execute($sqls[$i]);
        }

        return $result;
    }

   /**
    * Delete a record
    *
    * @param $formationLevelId (string): Primary key for deletion
    * @return (boolean): True if succeed, otherwise False
    **/
   public function deleteFormationLevel($formationLevelId)
    {
        $sql = 'DELETE FROM acdFormationLevel
                      WHERE formationLevelId = ? ';

        $db = $this->getDatabase();
        $result = $db->execute(SAGU::prepare($sql, $formationLevelId));

        return $result;
    }
    
    
    /**
     * Obtem lista de relatorios do tipo CONTRATO
     * 
     * @return array
     */
    public function listReports()
    {
        $list = array();
        
        $sreport = new SReport();
        foreach ( $sreport->listAllReports(SReport::TYPE_CONTRACT) as $report )
        {
            $list[ $report['name'] ] = $report['title'];
        }
        
        return $list;
    }
}
?>
