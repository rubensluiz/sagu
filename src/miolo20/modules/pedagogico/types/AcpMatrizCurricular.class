<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpMatrizCurricular extends SType
{
    protected $_utilizaMultiUnidade = true;
    
    protected $_utilizaMultiCentro = true;
    
    protected $_utilizaNovoPadrao = true;
    
    /**
     * Situações da matriz curricular
     */
    const SITUACAO_ATIVO = 'A';
    const SITUACAO_INATIVO = 'I';
    const SITUACAO_EM_EXTINCAO = 'E';
    
    /**
     * Código da matriz curricular
     */
    public $matrizcurricularid;
    
    /**
     * Descrição da matriz curricular
     */
    public $descricao;
    
    /**
     * Series
     */
    public $series = 0;
    
    /**
     * Código do curso
     */
    public $cursoid;
    
    /*
     * Código da situação
     */
    public $situacao;
    
    /**
     * Data inicial
     */
    public $datainicial;
    /**
     * Data final
     */
    public $datafinal;
    
//    public $componentesCurriculares;
    
    
    /**
     * @return AcpCurso
     */
    public function obterCurso()
    {
        return new AcpCurso($this->cursoid);
    }
    
    public static function listarSituacoes()
    {
        $module = MIOLO::getCurrentModule();
        
        return array( self::SITUACAO_ATIVO => _M('Ativo', $module),
                      self::SITUACAO_INATIVO=> _M('Inativo', $module),
                      self::SITUACAO_EM_EXTINCAO => _M('Em extinção', $module));
    }
    
    public static function obterMatrizesCurricularesDoCurso($cursoId)
    {
        $matrizCurricular = new AcpMatrizCurricular();
        $msql = $matrizCurricular->msql();
        $msql->setColumns('matrizcurricularid');
        $msql->addEqualCondition('cursoid', $cursoId);
        $searchMatrizCurricular = $matrizCurricular->findList($msql);

        if( count($searchMatrizCurricular) > 0 )
        {
            foreach($searchMatrizCurricular as $cod=>$linha)
            {
                $return[] = new AcpMatrizCurricular($cod);
            }
        }

        return $return;
    }
    
    /**
     * Funcao criada para pegar apenas matrizes vigentes do curso
     * 
     * @return array - Matrizes que estao vigentes
     */
    public static function obterMatrizesCurricularesVigentesDoCurso($cursoId)
    {
        $matrizes = self::obterMatrizesCurricularesDoCurso($cursoId);
        
        foreach( $matrizes as $cod => $matriz )
        {
            if ( strlen($matriz->datafinal) > 0 )
            {
                SAGU::validaData($matriz->datafinal) ? $matrizFinal = $matriz->datafinal : $matrizFinal = SAGU::dateToUser($matriz->datafinal);
                if ( SAGU::compareTimestamp($matrizFinal, '<', SAGU::getDateNow(), SAGU::getParameter('BASIC', 'MASK_DATE')))
                {
                    unset($matrizes[$cod]);
                }
            }
        }
        
        return $matrizes;
    }
    
    public function delete() 
    {
        $grupos = AcpMatrizCurricularGrupo::obterGruposDaMatrizCurricular($this->matrizcurricularid);
        if( count($grupos) > 0 )
        {
            foreach ($grupos as $cod=>$grupo)
            {
                $grupo->delete();
            }
        }
        
        return parent::delete();
    }
    
    public function save()
    {
        if ( strlen($this->cursoid) > 0 )
        {
            $curso = new AcpCurso($this->cursoid);
            $dataFim = strlen($this->datafinal) > 0 ? $this->datafinal : $this->datainicial;
            
            // ( SAGU::dateOverlaps($curso->datainicio, $curso->datafim, $this->datainicial, $dataFim) != true )
            // Valida intervalo de datas, true é erro
            $checkDataInicial = (SAGU::dateDiff($this->datainicial, $curso->datainicio) < 0 );

            //Se algum o curso ou a matriz nao tem data final, nao checa data final
            $dataFim == SType::NULL_VALUE ?  $dataFim = NULL : null;
            
            if ( strlen($dataFim) > 0 && strlen($curso->datafim) > 0 )
            {
                $checkDataFinal = (SAGU::dateDiff($curso->datafim, $dataFim) < 0 );
            }
            else
            {
                $checkDataFinal = false;
            }
            
            if ( $checkDataFinal || $checkDataInicial )
            {
                throw new Exception(_M('O intervalo informado está fora do intervalo do curso, que é de @1 até @2.', null, $curso->datainicio, $curso->datafim));
            }
        }
        
        return parent::save();
    }
}
?>
