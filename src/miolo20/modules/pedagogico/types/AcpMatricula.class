<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 13/11/2013
 */
class AcpMatricula extends SType
{
    const SITUACAO_INSCRICAO = 'I';
    const SITUACAO_MATRICULA = 'M';
    const SITUACAO_TRANCAMENTO = 'T';
    const SITUACAO_CANCELAMENTO = 'C';
    const SITUACAO_REATIVACAO = 'V';
    const SITUACAO_APROVADO = 'A';
    const SITUACAO_REPROVADO = 'R';
    const SITUACAO_REPROVADO_POR_FALTAS = 'F';
    const SITUACAO_APROVEITAMENTO_INTERNO = 'P';
    const SITUACAO_APROVEITAMENTO_OUTRA_INSTITUICAO = 'E';
    
    const ORIGEM_SITE = 'S';
    const ORIGEM_ADMIN = 'I';
    const ORIGEM_PROCESSO_SELETIVO = 'P';
    
    const TIPO_INSCRICAO = 'I';
    const TIPO_MATRICULA = 'M';
    
    const APROV_OUTRA_INSTITUICAO = 'E';
    const APROV_INTERNO = 'I';
    
    protected $_utilizaNovoPadrao = true;
    
    protected $_utilizaMultiUnidade = true;
    
    protected $_utilizaMultiCentro = true;
    
    protected $_defaultOrder = 'aluno.name';
    
    protected $_virtualColumns = array(
        '_pessoa' => 'aluno.personid || \' - \' || aluno.name',
        '_ofertaturma' => '(select ot.descricao from acpinscricaoturmagrupo itg inner join acpofertaturma ot on ot.ofertaturmaid = itg.ofertaturmaid where itg.inscricaoturmagrupoid = acpmatricula.inscricaoturmagrupoid)',
        '_nomecurso' => 'ofertacurso.descricao || \' (\' || curso.nome || \')\''
    );
    
    protected $_associations = array(
        'aluno' => array(
            'mode' => 'one',
            'typeClass' => 'BasPessoaAluno',
            'joinColumnLeft' => 'personid',
            'joinColumnRight' => 'personid',
            'joinOnly' => true,
        ),
        'inscricaoturmagrupo' => array(
            'mode' => 'one',
            'typeClass' => 'AcpInscricaoTurmaGrupo',
            'joinColumnLeft' => 'inscricaoturmagrupoid',
            'joinColumnRight' => 'inscricaoturmagrupoid',
        ),
    );
    
    /**
     * @var BasPessoaAluno
     */
    public $aluno;
        
    /**
     * @var AcpInscricaoTurmaGrupo
     */
    public $inscricaoturmagrupo;
   
    public $inscricaoturmagrupoid;
    public $matriculaid;
    public $personid;
    public $ofertaturmaid;
    public $datamatricula;
    public $ofertacomponentecurricularid;
    public $situacao;
    public $origem;
    public $tipo;
    public $parecerfinal;
    public $precocondicaoid;
    public $buscaocorrenciacursoid;
    public $buscaofertacursoid;
    public $buscaofertaturmaid;
    public $buscanome;
    public $situacaoMatricula;
    public $aproveitamento;
    public $aproveitamento_interno;
    public $obs_aproveitamento;
    public $notafinal;
    public $conceitofinal;
    public $frequencia;
    public $estadodematriculaid;
    public $obs;
    public $gridmatriculacurso = false;
    public $retroativa = 'f';
    
    public function beforeFind(MSQL $sql)
    {
//        $sql->setColumns('(SELECT apcofertaturma.descricao FROM acpofertaturma WHERE acpinscricaoturmagrupo.inscricaoturmagrupoid = acpmatricula.inscricaoturmagrupoid) AS ofertaturmadesc');
//        $sql->addLeftJoin('acpinscricaoturmagrupo inscricaoturmagrupo', 'inscricaoturmagrupo.inscricaoid = acpinscricao.inscricaoid');
//        $sql->addLeftJoin('acpofertaturma', 'inscricaoturmagrupo.ofertaturmaid = acpofertaturma.ofertaturmaid');
        
//        $sql->setColumns('ofertaturma.descricao AS ofertaturmadesc');
        
//        select acpofertaturma.descricao
//from acpofertaturma
//left join acpinscricaoturmagrupo 
//on (acpinscricaoturmagrupo.ofertaturmaid = acpofertaturma.ofertaturmaid)
//where acpinscricaoturmagrupo.inscricaoturmagrupoid = 79
        
        
        $sql->addInnerJoin('acpofertaturma ofertaturma', 'inscricaoturmagrupo.ofertaturmaid = ofertaturma.ofertaturmaid');
        
        if ( strlen($this->buscaocorrenciacursoid) > 0 )
        {
            $sql->addEqualCondition('ocorrenciacurso.ocorrenciacursoid', $this->buscaocorrenciacursoid);
        }
        
        if ( strlen($this->buscaofertacursoid) > 0 )
        {
            $sql->addEqualCondition('ofertaturma.ofertacursoid', $this->buscaofertacursoid);
        }
        
        if ( strlen($this->buscaofertaturmaid) > 0 )
        {
            $sql->addEqualCondition('inscricaoturmagrupo.ofertaturmaid', $this->buscaofertaturmaid);
        }
        
        $sql->setOrderBy('ofertaturma.descricao, ofertacurso.descricao, aluno.name');
        
        // Para os relatórios que possuem o componente sescolha, e necessitam apenas matriculas ativas
        $args = $this->getAjaxArgs();
        
        if ( $args->apenasInscritos == DB_TRUE )
        {
            $sql->addEqualCondition('AcpMatricula.situacao', AcpMatricula::SITUACAO_INSCRICAO);
        }
        
        return $sql;
    }
    
    /*
     * Método de busca padrão da grid de matrículas e rematrículas.
     * 
     * Para agrupar por inscricao e não por matricula, pode-se passar no filters
     * o argumento 'agruparmatriculas' como DB_TRUE.
     */
    public function searchGrid($filters)
    {
        $cols[] = 'inscricao.personid';
        $cols[] = 'inscricao.inscricaoid';
        $cols[] = '_pessoa';
        $cols[] = 'ofertaturma.descricao';
        $cols[] = '_nomecurso';
        $cols[] = 'acpmatricula.situacao';
        $cols[] = 'acpmatricula.datamatricula';
        $cols[] = 'curso.gratuito';
        $cols[] = 'acpmatricula.matriculaid';
           
        
        $matriculaId = 'acpmatricula.matriculaid';
        if ( $this->gridmatriculacurso ) 
        {
            $sql = " SELECT DISTINCT inscricao.personid,";
            $matriculaId = 'NULL';
        }
        else
        {
            $sql = " SELECT inscricao.personid,";
            
            if ( $filters->agruparmatriculas == DB_TRUE )
            {
                $matriculaId = 'NULL';
            }
        }
                
        $sql .= "inscricao.inscricaoid,
                 aluno.personid || ' - ' || aluno.name as _pessoa, 
                 ofertaturma.descricao,
                 ofertacurso.descricao || ' (' || curso.nome || ')',
                 (CASE WHEN acpmatricula.situacao = 'I' 
                       THEN 
                           'Pendente' 
                       ELSE 
                           CASE WHEN inscricao.situacao = 'C' 
                           THEN 
                               'Cancelado' 
                           ELSE 
                               'Confirmado' 
                           END 
                   END) as _situacao,
                 (
                    SELECT MAX(datamatricula) FROM acpmatricula
                    WHERE acpmatricula.personid = aluno.personid
                    AND acpmatricula.inscricaoturmagrupoid in (SELECT inscricaoturmagrupoid FROM acpinscricaoturmagrupo WHERE inscricaoid = inscricao.inscricaoid)
                 ),
                 curso.gratuito,
                 {$matriculaId},
                 aluno.name as nomeAluno
            FROM acpmatricula
        INNER JOIN AcpInscricaoTurmaGrupo inscricaoturmagrupo on inscricaoturmagrupo.inscricaoturmagrupoid = AcpMatricula.inscricaoturmagrupoid
        INNER JOIN ONLY acpinscricao inscricao ON inscricaoturmagrupo.inscricaoid = inscricao.inscricaoid
        INNER JOIN ONLY basphysicalpersonstudent aluno ON aluno.personid = inscricao.personid
        INNER JOIN Acpofertaturma ofertaturma ON inscricaoturmagrupo.ofertaturmaid = ofertaturma.ofertaturmaid
        INNER JOIN Acpofertacurso ofertacurso ON ofertacurso.ofertacursoid = ofertaturma.ofertacursoid
        INNER JOIN AcpOcorrenciaCurso ocorrenciacurso ON ocorrenciacurso.ocorrenciacursoid = ofertacurso.ocorrenciacursoid
        INNER JOIN acpcurso curso ON curso.cursoid = ocorrenciacurso.cursoid
        INNER JOIN acpperfilcurso perfilcurso ON curso.perfilcursoid = perfilcurso.perfilcursoid";
        
         if ( strlen($filters->matriculaid) > 0 )
        {
            $where[] = "acpmatricula.matriculaid = ?";
            $args[] = $filters->matriculaid;
        }  
        if ( strlen($filters->buscaocorrenciacursoid) > 0 )
        {
            $where[] = "ocorrenciacurso.ocorrenciacursoid = ?";
            $args[] = $filters->buscaocorrenciacursoid;
        }      
        if ( strlen($filters->buscaofertacursoid) > 0 )
        {
            $where[] = 'ofertaturma.ofertacursoid = ?';
            $args[] = $filters->buscaofertacursoid;
        }
        if ( strlen($filters->buscaofertaturmaid) > 0 )
        {
            $where[] = 'inscricaoturmagrupo.ofertaturmaid = ?';
            $args[] = $filters->buscaofertaturmaid;
        }
        
        //Filtro de situacao
        if ( $filters->situacaoMatricula == 'c' ) //Cancelado
        {
            $where[] = "inscricao.situacao = '" . AcpInscricao::SITUACAO_CANCELADO . "'" ;
        }
        elseif( $filters->situacaoMatricula == 'p' ) //Pendente
        {
            $where[] = "acpmatricula.situacao = '" . self::SITUACAO_INSCRICAO . "'";
        }
        elseif( $filters->situacaoMatricula == 'o' ) //Confirmado
        {
            $where[] = "acpmatricula.situacao != '" . self::SITUACAO_INSCRICAO . "' and inscricao.situacao != '" . AcpInscricao::SITUACAO_CANCELADO . "'";        
        }
        
        if ( strlen($filters->buscanome) > 0 )
        {
            $where[] = 'UNACCENT(aluno.name) ILIKE UNACCENT(?)';
            $args[] = '%'.$filters->buscanome.'%';
        }
        
        if ( strlen($filters->personid) > 0 )
        {
            $where[] = 'inscricao.personid = ?';
            $args[] = $filters->personid;
        }
        
        if ( strlen($filters->ofertacomponentecurricularid) > 0 )
        {
            $where[] = 'acpmatricula.ofertacomponentecurricularid = ?';
            $args[] = $filters->ofertacomponentecurricularid;
        }
        
        // filtro centros
        $centros = sMultiCentro::obterCentrosPessoa();
        if ( count($centros) > 0 )
        {
            $where[] = sprintf(' acpmatricula.centerId IN (%s) ', implode(',', $centros));
        }

        if((count($centros) > 0 && count($where) > 1) || (count($centros) == 0 && count($where) > 0))
        {
            $sql  .= ' WHERE ';
            $sql  .= implode(' AND ', $where);


            if ( $filters->agruparmatriculas == DB_TRUE )
            {
                $sql .= " GROUP BY 1,2,3,4,5,6,7,8, aluno.name"
                    . " ORDER BY aluno.name ";
            }
            elseif(!$this->gridmatriculacurso)
            {
                $sql .= " GROUP BY 1,2,3,4,5,6,7,8, aluno.name, acpmatricula.matriculaid, acpmatricula.matriculaid ORDER BY aluno.name,5,6,4";
            }
            else
            {
                $sql .= " ORDER BY nomeAluno , _situacao";
            }

            return SAGU::resultToArray(SDatabase::query($sql, $args), $cols);
        }


    }
    
    /**
     * @return array
     */
    public static function listarSituacao($aproveitamentosComoMatriculado = false)
    {
        $situacoes = array(
            self::SITUACAO_INSCRICAO => _M('Inscrito'),
            self::SITUACAO_MATRICULA => _M('Matriculado'),
            self::SITUACAO_CANCELAMENTO => _M('Cancelado'),
            self::SITUACAO_TRANCAMENTO => _M('Trancado'),
            self::SITUACAO_REATIVACAO => _M('Reativado'),
            self::SITUACAO_APROVADO => _M('Aprovado'),
            self::SITUACAO_APROVEITAMENTO_INTERNO => _M('Aproveitamento interno'),
            self::SITUACAO_APROVEITAMENTO_OUTRA_INSTITUICAO => _M('Aproveitamento de outra instituição'),
            self::SITUACAO_REPROVADO => _M('Reprovado'),
            self::SITUACAO_REPROVADO_POR_FALTAS => _M('Reprovado por faltas'),
        );
        
        if( $aproveitamentosComoMatriculado )
        {
            $situacoes = array_merge($situacoes, array(self::SITUACAO_APROVEITAMENTO_INTERNO => _M('Matriculado'), self::SITUACAO_APROVEITAMENTO_OUTRA_INSTITUICAO => _M('Matriculado')));
        }
        
        return $situacoes;
    }
    
    /**
     * @return array
     */
    public static function listarOrigem()
    {
        return array(
            self::ORIGEM_SITE => _M('Site da instituição'),
            self::ORIGEM_ADMIN => _M('Interface administrativa'),
            self::ORIGEM_PROCESSO_SELETIVO => _M('Processo seletivo'),
        );
    }
     
    /**
     * @return array
     */
    public static function listarTipos()
    {
        return array(
            self::TIPO_INSCRICAO => _M('Inscrição'),
            self::TIPO_MATRICULA => _M('Matrícula'),
        );
    }
    
    public function inserirDaInscricao($inscricaoId)
    {
        $inscricao = new AcpInscricao($inscricaoId, true);
        
        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        $busStudent = new BusinessBasicBusPhysicalPersonStudent();
        
        $data = $busPhysicalPerson->getPhysicalPerson($inscricao->personid);
        $busStudent->insertOrUpdatePhysicalPersonStudent($data);
        
        // inserir convênio selecionado
        if( strlen($inscricao->convenantid) > 0 )
        {
            $MIOLO = MIOLO::getInstance();
            
            $busConvenantPerson = $MIOLO->GetBusiness('finance', 'BusConvenantPerson');
            $filters = new stdClass();
            $filters->personId = $this->personid;
            $searchConvenantPerson = $busConvenantPerson->searchConvenantPerson($filters);
            
            $convenant = new BusinessFinanceBusConvenantPerson($searchConvenantPerson[0][0]);
            $convenant->convenantId = $inscricao->convenantid;
            $convenant->personId = $inscricao->personid;
            $convenant->beginDate = $inscricao->datasituacao;
            $convenant->inscricaoId = $inscricaoId;
            
            if( strlen($searchConvenantPerson[0][0]) > 0 )
            {
                $convenant->updateConvenantPerson($convenant);
            }
            else
            {
                $convenant->insertConvenantPerson($convenant);
            }
        }
        
        // se nao houver registros na inscricaoturmagrupo, dar throw
        $turmaGrupos = $inscricao->obterInscricaoTurmaGrupos();
        
//        if ( count($turmaGrupos) == 0 )
//        {
//            throw new Exception(_M('Nenhuma turma foi encontrada para esta inscrição.'));
//        }
        
        foreach ( $turmaGrupos as $turmaGrupo )
        {
            $turmaGrupo instanceof AcpInscricaoTurmaGrupo;
            
            $this->inserirMatricula($inscricao, $turmaGrupo);
        }
    }
    
    public function inserirMatricula(AcpInscricao $inscricao, AcpInscricaoTurmaGrupo $itg)
    {
        $permiteInscricaoPorGrupo = AcpOfertaTurma::permiteInscricaoPorGrupo($itg->ofertaturmaid);

        // busca os componentes curriculares ofertados da turma
        $ofertas = AcpOfertaComponenteCurricular::obterInformacaoOferta($itg->ofertaturmaid);

        if ( count($ofertas) == 0 )
        {
            throw new Exception(_M('Nenhum oferecimento encontrado para esta turma. Verifique a oferta de componentes curriculares.'));
        }

        $infoInscricao = AcpInscricao::obterInformacoes($inscricao->inscricaoid);
        
        foreach ( $ofertas as $oferta )
        {
            // filtra pelo grupo, caso necessario
            if ( $permiteInscricaoPorGrupo && ( $oferta['matrizcurriculargrupoid'] != $itg->matrizcurriculargrupoid ) )
            {
                continue;
            }
            
            $matricula = new AcpMatricula();
            $matricula->personid = $inscricao->personid;
            $matricula->inscricaoturmagrupoid = $itg->inscricaoturmagrupoid;
            $matricula->situacao = AcpMatricula::SITUACAO_INSCRICAO;
            $matricula->ofertacomponentecurricularid = $oferta['ofertacomponentecurricularid'];
            $matricula->datamatricula = SAGU::getDateNow();
            $matricula->save();
            
                // Sem confirmacao: Ja muda o status automaticamente para confirmado                
            if ( $infoInscricao['formadeconfirmacaomatricula'] == AcpRegrasMatriculaPerfilCurso::CONFIRMACAO_MATRICULA_NENHUM )
            {
                $matricula->confirmarMatricula();
            }
        }
        
        if ( in_array($infoInscricao['formadeconfirmacaomatricula'], array(AcpRegrasMatriculaPerfilCurso::CONFIRMACAO_MATRICULA_NENHUM, AcpRegrasMatriculaPerfilCurso::CONFIRMACAO_MATRICULA_PGTO_PRIMEIRA_PARCELA)) && ( $matricula ) )
        {
            $matricula->gerarTitulosMatricula();
        }
    }
    
    public function confirmarMatricula()
    {
        // altera status
        $this->situacao = AcpMatricula::SITUACAO_MATRICULA;
        return $this->save();
    }
    
    public function efetuarRematricula($ofertaTurmaId, $personId = null, $inscricaoId = null)
    {
        $occ = new AcpOfertaComponenteCurricular();
        $ofertas = $occ->buscarPorOfertaTurma( $ofertaTurmaId );
        $contador = 0;
        
        foreach ( $ofertas as $oferta )
        {
            $oferta instanceof AcpOfertaComponenteCurricular;
            
            $matricula = new AcpMatricula();
            $matricula->personid = $personId;
            
            $inscricaoTurmaGrupo = AcpInscricaoTurmaGrupo::obterInscricaoTurmaGrupo($inscricaoId, $ofertaTurmaId);
            $matricula->inscricaoturmagrupoid = $inscricaoTurmaGrupo[0]->inscricaoturmagrupoid;
            
            $matricula->situacao = AcpMatricula::SITUACAO_MATRICULA;
            $matricula->ofertacomponentecurricularid = $oferta->ofertaComponenteCurricularId;
            $matricula->datamatricula = SAGU::getDateNow();
            
            $matricula->save();
            
            $contador ++;
        }
        
        return $contador;
    }
    
    public function cancelarMatricula()
    {
        
        SDatabase::beginTransaction();
        try
        {
            $this->estadodematriculaid = SType::NULL_VALUE;
            $this->situacao = AcpMatricula::SITUACAO_CANCELAMENTO;
            $this->save();
            
            SDatabase::commit();
        } 
        catch (Exception $error) 
        {
            SDatabase::rollback();
            throw new Exception($error->getMessage());
        }
    }
    
    public function gerarTitulosMatricula()
    {
        $info = self::obterInformacoes($this->matriculaid);
        
        // Verifica se já existem títulos gerados de matrícula
        $titulos = PrcTituloInscricao::obterTitulosDaMatricula($info['inscricaoid']);
                
        //Somente gera titulos para cursos não gratuitos
        if( $info['gratuito'] == DB_FALSE && !count($titulos) > 0 )
        {
            $tituloInscricao = new PrcTituloInscricao();
            $tituloInscricao->gerarTitulosMatricula($info['inscricaoid'], $info['ofertaturmaid']);
        }
    }
    
    /**
     * Lista todos alunos inscritos na oferta de componente curricular
     * @param type $ofertacomponentecurricularid
     * @return type
     */
    public static function obterMatriculasNaOfertaDeComponenteCurricular($ofertacomponentecurricularid, $matriculasRetroativas = true)
    {
        $type = new AcpMatricula();
        
        $sql = $type->msql();
        $sql->addEqualCondition('AcpMatricula.ofertacomponentecurricularid', $ofertacomponentecurricularid);
        $sql->addWhereNotIn('AcpMatricula.situacao', array(self::SITUACAO_INSCRICAO, self::SITUACAO_CANCELAMENTO));
        
        if ( !$matriculasRetroativas )
        {
            $sql->setWhere(' AcpMatricula.retroativa IS FALSE ');
        }

        return $type->findMany($sql);
    }
    
    public static function obterMatriculaDaInscricaoTurmaGrupo($inscricaoturmagrupoid)
    {
        $type = new AcpMatricula();
        $sql = $type->msql();
        $sql->addEqualCondition('AcpMatricula.inscricaoturmagrupoid', $inscricaoturmagrupoid);
        return $type->findMany($sql);
    }
    
    /**
     * @return array
     */
    public static function buscarMatriculas($filters)
    {   
        $matricula = new AcpMatricula();
        $sql = $matricula->msql();
        
        if ( strlen($filters->personId) > 0 )
        {
            $sql->addEqualCondition('acpmatricula.personid', $filters->personId);
        }
        
        if ( strlen($filters->matriculaid) > 0 )
        {
            $sql->addEqualCondition('acpmatricula.matriculaid', $filters->matriculaid);
        }
        
        if ( strlen($filters->situacao) > 0 )
        {
            $sql->addEqualCondition('acpmatricula.situacao', $filters->situacao);
        }
        
        if ( strlen($filters->formadeconfirmacaomatricula) > 0 )
        {
            $sql->addEqualCondition('regras.formadeconfirmacaomatricula', $filters->formadeconfirmacaomatricula);
        }
        
        if ( strlen($filters->invoiceId) > 0 )
        {
            $sql->addInnerJoin('acpinscricaoturmagrupo', 'acpmatricula.inscricaoturmagrupoid = acpinscricaoturmagrupo.inscricaoturmagrupoid');
            $sql->addInnerJoin('prctituloinscricao titulo', "
                    titulo.inscricaoid = acpinscricaoturmagrupo.inscricaoid
                and titulo.invoiceid = '{$filters->invoiceId}'
                and titulo.tipo = '" . PrcTituloInscricao::TIPO_MATRICULA . "'");
        }
        
        if ( strlen($filters->ofertaTurmaId) > 0 )
        {
            $sql->addInnerJoin('acpinscricaoturmagrupo', 'acpmatricula.inscricaoturmagrupoid = acpinscricaoturmagrupo.inscricaoturmagrupoid');
            $sql->addEqualCondition('AcpInscricaoTurmaGrupo.ofertaTurmaId', $filters->ofertaTurmaId);
        }
        
        if ( strlen($filters->apenasMatriculados) > 0 )
        {
            $sql->addWhereNotIn('acpmatricula.situacao', array(AcpMatricula::SITUACAO_CANCELAMENTO, AcpMatricula::SITUACAO_INSCRICAO)); 
        }
        
        if ( strlen($filters->ofertaComponenteCurricularId) > 0 )
        {
            $sql->addEqualCondition('acpmatricula.ofertacomponentecurricularid', $filters->ofertaComponenteCurricularId);
        }
        
        if ( strlen($filters->inscricaoId) > 0 )
        {
            $sql->addInnerJoin('acpinscricaoturmagrupo', 'acpmatricula.inscricaoturmagrupoid = acpinscricaoturmagrupo.inscricaoturmagrupoid');
            $sql->addEqualCondition('acpinscricaoturmagrupo.inscricaoid', $filters->inscricaoId);
        }
        
        return $matricula->findMany( $sql );
    }
    
    public function buscaPorPessoa($personId, $cancelados = false, $turmaOrigem = NULL)
    {
        $sql = $this->msql();
        $sql->addEqualCondition('acpmatricula.personid', $personId);
        if ( strlen($turmaOrigem) > 0 )
        {
            $sql->addEqualCondition('inscricaoturmagrupo.ofertaturmaid', $turmaOrigem);
        }
        
        if ( $cancelados )
        {
            $sql->setWhere('acpmatricula.situacao !=  \'' . AcpMatricula::SITUACAO_CANCELAMENTO . '\'');
        }
        
        return $this->findMany($sql);
    }
    
    public function totalMatriculas($personId)
    {
        $result = SDatabase::query('SELECT COUNT(*) FROM acpmatricula WHERE personId = ?', array($personId));
        
        return $result[0][0];
    }
    
    public function totalPorOferta($ofertacomponentecurricularid)
    {
        $result = SDatabase::query('SELECT COUNT(*) FROM acpmatricula WHERE ofertacomponentecurricularid = ?', array($ofertacomponentecurricularid));
        
        return $result[0][0];
    }
    
    public function possuiMatricula($personId)
    {
        return $this->totalMatriculas($personId) > 0;
    }
    
    public function buscarParaConsultaDiversa($args = null)
    {
        $sql = $this->msql();
        $sql->setColumns("
            matricula.matriculaid,
            ofertacurso.descricao as ofertacurso,
            componentecurricular.codigo || ' - ' || componentecurricular.nome as componente,
            COALESCE(matricula.notafinal::text, matricula.conceitofinal::text, ' - ') as notafinal,
            COALESCE((SELECT acp_obternotafinal_daunidade_pormatricula(matricula.matriculaid, false))::TEXT, ' - ') AS notafinal,
            COALESCE(matricula.frequencia::text || ' %', ' - ') as frequencia,
            acp_obtersituacaomatricula(matricula.matriculaid) as situacao,
            ofertaturma.descricao || ' - ' || matrizgrupo.descricao as turma,
            matricula.situacao,
            ofertaturma.codigo || ' - ' || ofertaturma.descricao as turma,
            estadomatricula.descricao as estadomat,
            tipocomponentecurricular.tipo as tipocomponentecurricular,
            matricula.parecerfinal as parecer,
            ofertacomponente.ofertacomponentecurricularid as ofertacomponentecurricularid,
            COALESCE((SELECT acp_obternotarecuperacao_daunidade_pormatricula(matricula.matriculaid))::TEXT, ' - ') AS notarecuperacao" );
        
        $sql->setTables('acpmatricula matricula');        
        $sql->addInnerJoin("acpInscricaoTurmaGrupo inscricaoturmagrupo", "inscricaoturmagrupo.inscricaoturmagrupoid = matricula.inscricaoturmagrupoid");
        $sql->addInnerJoin("acpInscricao inscricao", "inscricao.inscricaoid = inscricaoturmagrupo.inscricaoid");
        $sql->addInnerJoin("acpOfertaTurma ofertaturma", "ofertaturma.ofertaturmaid = inscricaoturmagrupo.ofertaturmaid");
        $sql->addInnerJoin("acpOfertaCurso ofertacurso", "ofertacurso.ofertacursoid = inscricao.ofertacursoid");
        $sql->addInnerJoin("acpOfertaComponenteCurricular ofertacomponente", "ofertacomponente.ofertacomponentecurricularid = matricula.ofertacomponentecurricularid");
        $sql->addInnerJoin("acpcomponentecurricularmatriz componentematriz", "componentematriz.componentecurricularmatrizid = ofertacomponente.componentecurricularmatrizid");
        $sql->addInnerJoin("acpmatrizcurriculargrupo matrizgrupo", "matrizgrupo.matrizcurriculargrupoid = componentematriz.matrizcurriculargrupoid");
        $sql->addInnerJoin("acpComponentecurricular componentecurricular", "componentecurricular.componentecurricularid = componentematriz.componentecurricularid");
        $sql->addInnerJoin("acpTipoComponenteCurricular tipocomponentecurricular", "componentecurricular.tipocomponentecurricularid = tipocomponentecurricular.tipocomponentecurricularid");
        $sql->addLeftJoin("acpestadodematricula estadomatricula", "estadomatricula.estadodematriculaid = matricula.estadodematriculaid");
        
        if ( strlen($args->personId) > 0 )
        {
            $sql->addEqualCondition('inscricao.personid', $args->personId);
        }
        
        $sql->setOrderBy('ofertaturma.situacao, ofertaturma.descricao, matricula.matriculaid, componentecurricular.nome');

        return SDatabase::queryAssociative($sql);
    }
    
    public static function listarAproveitamentos()
    {
        return array(
            self::APROV_OUTRA_INSTITUICAO => _M('Aproveitamento de Outra Instituição'),
            self::APROV_INTERNO => _M('Aproveitamento Interno'),
        );
    }
    
    public function obterTipoAproveitamento()
    {
        if ( $this->aproveitamento == DB_TRUE && $this->aproveitamento_interno == DB_FALSE )
        {
            return self::APROV_OUTRA_INSTITUICAO;
        }
        
        if ( $this->aproveitamento == DB_TRUE && $this->aproveitamento_interno == DB_TRUE )
        {
            return self::APROV_INTERNO;
        }
        
        return '';
    }
    
    /**
     * Utilizado no evento salvar do formulario
     */
    public function defineAproveitamento($tipo)
    {
        if ( $tipo == AcpMatricula::APROV_OUTRA_INSTITUICAO )
        {
            $this->aproveitamento = DB_TRUE;
            $this->aproveitamento_interno = DB_FALSE;
            
            $this->situacao = self::SITUACAO_APROVEITAMENTO_OUTRA_INSTITUICAO;
        }
        else if ( $tipo == AcpMatricula::APROV_INTERNO )
        {
            $this->aproveitamento = DB_TRUE;
            $this->aproveitamento_interno = DB_TRUE;
            
            $this->situacao = self::SITUACAO_APROVEITAMENTO_INTERNO;
        }
        else
        {
            $this->aproveitamento = SType::NULL_VALUE;
            $this->aproveitamento_interno = SType::NULL_VALUE;
            $this->obs_aproveitamento = SType::NULL_VALUE;
        }
    }
    
    public static function obterInformacoes($matriculaId)
    {
        $sql = new MSQL();
        $sql->setColumns('c.gratuito,
                          itg.inscricaoid,
                          itg.ofertaturmaid');
        $sql->setTables('acpmatricula m');
        $sql->addInnerJoin('acpinscricaoturmagrupo itg', 'itg.inscricaoturmagrupoid = m.inscricaoturmagrupoid');
        $sql->addInnerJoin('acpinscricao i', 'i.inscricaoid = itg.inscricaoid');
        $sql->addInnerJoin('acpofertaturma ot', 'ot.ofertaturmaid = itg.ofertaturmaid');
        $sql->addInnerJoin('acpofertacurso oc', 'oc.ofertacursoid = ot.ofertacursoid');
        $sql->addInnerJoin('acpocorrenciacurso o', 'o.ocorrenciacursoid = oc.ocorrenciacursoid');
        $sql->addInnerJoin('acpcurso c', 'c.cursoid = o.cursoid');
        $sql->addEqualCondition('m.matriculaId', $matriculaId);
        
        $rows = SDatabase::queryAssociative($sql);
        
        return $rows[0];
    }
    
    /**
     * Reabre, reprocessa e fecha novamente as matrículas de uma oferta do comonente curricular.
     * Neste processo, se matrículas ficarem com suas situações diferentes das iniciais, seus códigos
     * são retornados.
     * 
     * @param type $ofertaComponenteCurricularId
     * @return type
     */
    public function rebrirMatriculasEncerradasNaOfertaDoComponenteCurricular($ofertaComponenteCurricularId)
    {
        $sql = "SELECT acp_reprocessaMatriculasEncerradasNaOfertaDoComponenteCurricular(?)";
        $results = SDatabase::query($sql, array($ofertaComponenteCurricularId));
        $return = array();
        
        foreach ( $results as $result )
        {
            $return[] = $result[0];
        }
        
        return $return;
    }
    
    /**
     * Feito este método para melhorias no desempenho do processo de divisão
     * de horários.
     * 
     * @param int $matriculaId
     * @return string
     */
    public function obterSituacaoDaMatricula($matriculaId)
    {
        $sql = "SELECT situacao
                  FROM acpMatricula
                 WHERE matriculaid = ?";
        $result = SDatabase::query($sql, array($matriculaId));
        
        return $result[0][0];
    }
}
?>