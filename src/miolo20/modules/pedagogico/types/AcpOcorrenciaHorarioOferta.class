<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class created on 11/12/2013
 */

class AcpOcorrenciaHorarioOferta extends SType
{
    protected $_utilizaMultiUnidade = true;
    
    protected $_utilizaNovoPadrao = true;
    
    public $ocorrenciahorarioofertaid;
    public $ofertacomponentecurricularid;    
    public $professorid;
    public $physicalresourceid;
    public $physicalresourceversion;
    public $dataaula;
    public $possuifrequencia;
    public $cancelada;
    public $motivo_cancelamento;
    public $horarioid;
    public $conteudo;
    public $assunto;
    public $ocorrenciaid;
    public $repete;
    public $tipodedocenteid;
    
    public static function obterProfessores($ofertacomponentecurricularid)
    {
        $professores = array();
        
        $sql = " SELECT name 
                   FROM basphysicalpersonprofessor 
                  WHERE personid IN (SELECT DISTINCT professorid 
                                                FROM acpocorrenciahorariooferta
                                               WHERE ofertacomponentecurricularid = ?)";
        
     
        $query = SDatabase::query(SDatabase::prepareSQL($sql, array($ofertacomponentecurricularid)));
        foreach ( $query as $row )
        {
            $professores[] = $row[0];
        }
        
        return $professores;
    }


    /**
     * Obtém a lista dos horários das ocorrências das ofertas de determinado horario de componente curricular
     * @param type $ofertacomponentecurricularid
     * @return \AcpOcorrenciaHorarioOferta
     */
    public static function obterOcorrenciasHorarioOferta($ofertacomponentecurricularid)
    {
        $ocorrenciahorariooferta = new AcpOcorrenciaHorarioOferta();
        $msql = $ocorrenciahorariooferta->msql();
        $msql->setColumns('ocorrenciahorarioofertaid');
        $msql->addEqualCondition('ofertacomponentecurricularid', $ofertacomponentecurricularid);
        $searchocorrenciahorariooferta = $ocorrenciahorariooferta->findList($msql);                

        if( count($searchocorrenciahorariooferta) > 0 )
        {
            foreach($searchocorrenciahorariooferta as $cod=>$linha)
            {
                $return[] = new AcpOcorrenciaHorarioOferta($cod);
            }
        }

        return $return;
    }
    
    public static function listarOcorrenciasHorarioOferta($ofertacomponentecurricularid)
    {
        $searchocorrenciahorariooferta = self::obterOcorrenciasHorarioOferta($ofertacomponentecurricularid);
        foreach( $searchocorrenciahorariooferta as $cod=>$ocorrenciahorariooferta )
        {
            $horario = new AcpHorario($ocorrenciahorariooferta->horarioid);

            $data = new stdClass();
            $data->ocorrenciahorarioofertaid = $ocorrenciahorariooferta->ocorrenciahorarioofertaid;
            $data->data = $ocorrenciahorariooferta->dataaula;
            $data->horainicio = $horario->horainicio;
            $data->horafim = $horario->horafim;
            $data->cancelada = $ocorrenciahorariooferta->cancelada;
            $data->possuifrequencia = $ocorrenciahorariooferta->possuifrequencia;
            $data->ocorrenciaid = $ocorrenciahorariooferta->ocorrenciaid;
            
            $return[] = $data;
        }
        
        return $return;
    }
     
    public static function listarOcorrenciasDaOfertaDeComponente($ofertacomponentecurricularid, $datainicial, $datafinal)
    {
        $ocorrenciahorariooferta = new AcpOcorrenciaHorarioOferta();

        $sql = $ocorrenciahorariooferta->msql();
        $sql->setColumns("ocorrenciaHorario.ocorrenciahorarioofertaid, TO_CHAR(ocorrenciaHorario.dataaula, 'dd/mm/yyyy'), obterdiaextenso(EXTRACT('DOW' FROM ocorrenciaHorario.dataaula)::INT) as diasemana, TO_CHAR(horario.horainicio, 'HH24:MI'), TO_CHAR(horario.horafim, 'HH24:MI'), ocorrenciaHorario.cancelada, ocorrenciaHorario.possuifrequencia");
        $sql->setTables("acpOcorrenciaHorarioOferta ocorrenciaHorario");
        $sql->addLeftJoin("acpHorario horario", "horario.horarioid = ocorrenciaHorario.horarioid");
        $sql->addInnerJoin("acpOfertaComponenteCurricular ofertaComponente", "ofertaComponente.ofertacomponentecurricularid = ocorrenciaHorario.ofertaComponenteCurricularId");
        $sql->addEqualCondition("ofertaComponente.ofertacomponentecurricularid", $ofertacomponentecurricularid);
        
        if( strlen($datainicial) > 0 )
        {
            $sql->addGreaterEqualCondition("ocorrenciaHorario.dataaula", $datainicial);
        }
        if( strlen($datafinal) > 0 )
        {
            $sql->addSmallerEqualCondition("ocorrenciaHorario.dataaula", $datafinal);
        }
                
        $sql->setOrderBy("ocorrenciaHorario.dataaula, horario.horainicio, horario.horafim");

        $searchocorrenciahorariooferta = SDatabase::query($sql->select());
        
        if( count($searchocorrenciahorariooferta) > 0 )
        {
            foreach($searchocorrenciahorariooferta as $cod=>$linha)
            {
                $data = new stdClass();
                $data->ocorrenciahorarioofertaid = $linha[0];
                $data->data = $linha[1];
                $data->diasemana = $linha[2];
                $data->horainicio = $linha[3];
                $data->horafim = $linha[4];
                $data->cancelada = $linha[5];
                $data->possuifrequencia = $linha[6];
                $return[] = $data;
            }
        }
        
        return $return;
    }
    
    public function procurarAssuntoAulaHorario($data, $horaInicio, $horaFim, $inscricaoId, $professor = null)
    {
         $sql = "SELECT A.assunto
                   FROM acpocorrenciahorariooferta A
             INNER JOIN acphorario B 
                     ON (A.horarioid = B.horarioid)
             INNER JOIN acpOfertaComponenteCurricular C
                     ON (C.ofertaComponenteCurricularId = A.ofertaComponenteCurricularId)
             INNER JOIN acpInscricaoTurmaGrupo D
                     ON (D.ofertaTurmaId = C.ofertaTurmaId)
                  WHERE A.dataaula = datetodb(?) 
                    AND B.horainicio = ?
                    AND B.horafim = ?
                    AND D.inscricaoId = ? ";
         
         $args = array($data, $horaInicio, $horaFim, $inscricaoId);
         
         if ( strlen($professor) > 0 )
         {
            $sql .= " AND A.professorid = ? ";
            $args[] = $professor;
         }
         
         $assunto =  SDatabase::query($sql, $args, false);
         
         return $assunto;
    }
    
    public static function listarOcorrenciasDaTurma($ofertaturmaid)
    {
        $sql = "SELECT A.ocorrenciahorarioofertaid,
                        A.dataaula,
                        A.possuifrequencia,
                        A.cancelada,
                        A.motivo_cancelamento,
                        A.horarioid,
                        A.ofertacomponentecurricularid,
                        D.codigo ||' - '||D.nome as _descricao,
                        A.professorid,
                        A.physicalresourceid,
                        A.physicalresourceversion,
                        A.unitid,
                        A.ocorrenciaid,
                        A.repete,
                        E.horainicio,
                        E.horafim,
                        E.minutosfrequencia
                        FROM acpocorrenciahorariooferta A
                        INNER JOIN acpofertacomponentecurricular B ON (A.ofertacomponentecurricularid = B.ofertacomponentecurricularid)
                        INNER JOIN acpcomponentecurricularmatriz C ON (B.componentecurricularmatrizid = C.componentecurricularmatrizid)
                        INNER JOIN acpcomponentecurricular D ON (C.componentecurricularid = D.componentecurricularid)
                        INNER JOIN acphorario E ON (A.horarioid = E.horarioid)
                        WHERE B.ofertaturmaid = ?;";
        
        $data =  SDatabase::query($sql, array($ofertaturmaid));
        
        $return = array();
        foreach( $data as $cod=>$linha )
        {
            $std = new stdClass();
            $std->ocorrenciahorarioofertaid = $linha[0];
            $std->dataaula = $linha[1];
            $std->possuifrequencia = $linha[2];
            $std->cancelada = $linha[3];
            $std->motivo_cancelamento = $linha[4];
            $std->horarioid = $linha[5];
            $std->ofertacomponentecurricularid = $linha[6];
            $std->_descricao = $linha[7];
            $std->professorid = $linha[8];
            $std->physicalresourceid = $linha[9];
            $std->physicalresourceversion = $linha[10];
            $std->unitid = $linha[11];
            $std->ocorrenciaid = $linha[12];
            $std->repete = $linha[13];
            $std->horainicio = $linha[14];
            $std->horafim = $linha[15];
            $std->minutosfrequencia = $linha[16];
            $return[] = $std;
        }
        
        return $return;
    }
    
    
    
    public static function obterPorHorarioOfertaComponenteCurricular($horarioofertacomponentecurricularid)
    {
        $obj = new AcpOcorrenciaHorarioOferta();
        $sql = $obj->msql()->addEqualCondition('AcpOcorrenciaHorarioOferta.horarioofertacomponentecurricularid', $horarioofertacomponentecurricularid);
        
        return $obj->findMany( $sql );
    }
    
    /**
     * Verifica se ja existe uma ocorrencia de aula no horario
     * @param type $horarioid
     * @param type $dataaula
     * @param type $ofertacomponentecurricularid
     * @return boolean
     */
    public static function verificaOcorrenciaRegistrada($horarioid, $dataaula, $ofertacomponentecurricularid, $ocorrenciahorarioofertaid)
    {
        $type = new AcpOcorrenciaHorarioOferta();
        $sql = $type->msql();
        $sql->addEqualCondition('AcpOcorrenciaHorarioOferta.ofertacomponentecurricularid', $ofertacomponentecurricularid);
        $sql->addEqualCondition('AcpOcorrenciaHorarioOferta.horarioid', $horarioid);
        $sql->addEqualCondition('AcpOcorrenciaHorarioOferta.dataaula', SAGU::dateToDb($dataaula));
        
        if( strlen($ocorrenciahorarioofertaid) > 0 )
        {
            $sql->addNotEqualCondition('AcpOcorrenciaHorarioOferta.ocorrenciahorarioofertaid', $ocorrenciahorarioofertaid);
        }
        
        
        return ($type->findCount($sql) > 0);
    }
    
    public static function obterOcorrenciasHorarioDaOcorrenciaId($ocorrenciaid)
    {
        $type = new AcpOcorrenciaHorarioOferta();
        $sql = $type->msql();
        $sql->addEqualCondition('AcpOcorrenciaHorarioOferta.ocorrenciaid', $ocorrenciaid);
        return $type->findMany( $sql );
    }
    
    public static function obterCargaHorariaOferecida($ofertacomponentecurricularid)
    {
        $sql = " SELECT COALESCE(sum(B.minutosfrequencia)/60, 0) as total
                        FROM
                        acpOcorrenciahorariooferta A
                        INNER JOIN acphorario B on (A.horarioid = B.horarioid)
                        WHERE A.ofertacomponentecurricularid = ?
                          AND A.cancelada IS FALSE";
        
        $return = SDatabase::query($sql, array($ofertacomponentecurricularid));
        return $return[0][0];
    }
    
    /**
     * Obtém o próximo valor da sequencia
     * @return type
     */
    public function obterProximaOcorrenciaId()
    {
        $sql = "SELECT nextval('seq_ocorrenciaid'::regclass);";
        $return = SDatabase::query($sql);
        return $return[0][0];
    }
    
    public function save($validar = true) 
    {
        if ( $validar )
        {
            //Verifica o choque de horários
            $this->validaOcorrencia($this->horarioid, $this->dataaula, $this->professorid, $this->ofertacomponentecurricularid, $this->ocorrenciahorarioofertaid, $this->physicalresourceid, $this->physicalresourceversion);
        }
        
        return parent::save();
    }
    
    
    /**
     * Verifica o choque de horarios para a aula
     * @param type $horarioid - Horário
     * @param type $dataaula - Data da aula
     * @param type $professorid - Professor
     */
    public function validaOcorrencia($horarioid, $dataaula, $professorid, $ofertacomponentecurricularid, $ocorrenciahorarioofertaid, $physicalresourceid, $physicalresourceversion)
    {
        $module = MIOLO::getCurrentModule();
        
        //Valida se ocorre aula na data selecionada
        $info = AcpOfertaComponenteCurricular::obterInformacaoOfertaCC($ofertacomponentecurricularid);

        if( !AcpCalendarioAcademicoEvento::temAula($dataaula, $info['ocorrenciacursoid'] ) )
        {
            $error .= _M('Segundo o calendário acadêmico, na data selecionada não ocorre aula, verifique a data.')."<br>";
        }

        //Valida se a mesma disciplina ja não está oferecida neste horário
        if( self::verificaOcorrenciaRegistrada($horarioid, $dataaula, $ofertacomponentecurricularid, $ocorrenciahorarioofertaid) )
        {
            $error .= _M('Já existe um encontro para esta disciplina registrado neste horário.')."<br>";
        }
        
        //Valida se a data está dentro do período de ocorrência da turma
        if( SAGU::compareTimestamp($info['datainicialoferta'], '>', SAGU::dateToDb($dataaula), 'yyyy-mm-dd') || SAGU::compareTimestamp($info['datafinaloferta'], '<', SAGU::dateToDb($dataaula), 'yyyy-mm-dd') )
        {
            $error .= _M('A data da aula não está dentro do período de oferta da turma (@1 à @2).', $module, SAGU::dateToUser($info['datainicialoferta']), SAGU::dateToUser($info['datafinaloferta']))."<br>";
        }
        
        
        //Valida choque de horário do professor
        if( strlen($professorid) > 0 && $professorid != SType::NULL_VALUE )
        {
            $module = MIOLO::getCurrentModule();
            
            $oho = new AcpOcorrenciaHorarioOferta();
            $acpOfertaComponenteCurricular = new AcpOfertaComponenteCurricular($ofertacomponentecurricularid);
            
            /**
             * Necessário efetuar  a verificação com a oferta de turma, pois alguns clientes juntam as turmas,
             * ou seja, possuiram ofertas diferentes de um mesmo componente curricular, em um mesmo horário de
             * uma mesma data para um mesmo professor, porém, em ofertas de turmas diferentes.
             */
            $query = "SELECT COUNT(A.*)
                        FROM acpOcorrenciaHorarioOferta A
                  INNER JOIN acpofertacomponentecurricular B
                       USING (ofertacomponentecurricularid)
                       WHERE A.professorid = ?
                         AND A.horarioid = ?
                         AND A.dataaula = datetodb(?)
                         AND B.ofertaTurmaId = ?
                         AND CASE WHEN ? IS NOT NULL THEN A.ocorrenciahorarioofertaid != ? ELSE TRUE END";
            
            $findCount = SDatabase::query($query, array($professorid, $horarioid, $dataaula, $acpOfertaComponenteCurricular->ofertaTurmaId, $ocorrenciahorarioofertaid, $ocorrenciahorarioofertaid));

            if ( $findCount[0][0] > 0 )
            { 
                $sql = $oho->msql();
                $sql->addEqualCondition('professorid', $professorid);
                $sql->addEqualCondition('horarioid', $horarioid);
                $sql->setWhere('dataaula = datetodb(?)', array($dataaula));
            
                $ocorrencia = $oho->findOne($sql);
                $ofertacomponentecurricular = new AcpOfertaComponenteCurricular($ocorrencia->ofertacomponentecurricularid);
                $professor = new BasPessoaFisica($ocorrencia->professorid);
                
                $error .= _M('O professor @1 já está confirmado na disciplina @2 nesta DATA e HORÁRIO', $module, $professor->name, $ofertacomponentecurricular->_descritivo);
            }
        }
        
        //Valida choque de sala
        if( strlen($physicalresourceid) > 0 && strlen($physicalresourceversion) > 0 && $physicalresourceid != SType::NULL_VALUE && $physicalresourceversion != SType::NULL_VALUE )
        {
            $module = MIOLO::getCurrentModule();
            $sql = $this->msql();
            $sql->addEqualCondition('horarioid', $horarioid);
            $sql->addEqualCondition('dataaula', $dataaula);
            $sql->addEqualCondition('physicalresourceid', $physicalresourceid);
            $sql->addEqualCondition('physicalresourceversion', $physicalresourceversion);
            
            if( $this->findCount($sql) > 0 )
            {
                $ocorrencia = $this->findOne($sql);
                $ofertacomponentecurricular = new AcpOfertaComponenteCurricular($ocorrencia->ofertacomponentecurricularid);
                $error .= _M('A sala selecionada já está confirmada na disciplina @1 nesta DATA e HORÁRIO', $module, $ofertacomponentecurricular->_descritivo);
            }
        }

        if( strlen($error) > 0 )
        {
            throw new Exception($error);
        }
        
        return true;
    }
    
    /**
     * Retorna todas as ofertas de componentes curriculares, que serão afetados pela
     * divisão do horário recebido por parâmetro.
     * 
     * @param int $horarioId
     * @param int $ofertaComponenteCurricularId
     * @return \stdClass
     */
    public function obterOfertasDeComponentesCurricularesPeloHorario($horarioId, $ofertaComponenteCurricularId = null)
    {
        // Não passado para msql por questões de desempenho.
        $sql = "SELECT DISTINCT B.ofertacomponentecurricularid,
                                A.horarioid,
                                A.ocorrenciahorarioofertaid,
                                D.nome AS componenteCurricular,
		                E.descricao AS turma,
		                H.nome AS curso,
                                (SELECT COALESCE(sum(BB.minutosfrequencia)/60, 0)
                                   FROM acpOcorrenciahorariooferta AA
                             INNER JOIN acphorario BB on (AA.horarioid = BB.horarioid)
                                  WHERE AA.ofertacomponentecurricularid = B.ofertacomponentecurricularid
                                    AND AA.cancelada IS FALSE ) AS cargahoraria,
                                NULL AS cargahorariaaposdivisao,
                                (SELECT COUNT(M.matriculaId) 
                                   FROM acpMatricula M
                             INNER JOIN acpFrequencia FF
                                  USING (matriculaId)
                                  WHERE FF.ocorrenciahorarioofertaid = A.ocorrenciahorarioofertaid
                                    AND M.situacao <> ?) AS numroDeAlunosMatriculados,
                                NULL AS numeroDeAlunosComSituacaoAlterada,
                                NULL AS matriculasQueMudaramDeSituacao
                           FROM acpocorrenciahorariooferta A
                     INNER JOIN acpOfertaComponenteCurricular B
                          USING (ofertacomponentecurricularid)
                     INNER JOIN acpComponenteCurricularMatriz C
                          USING (componenteCurricularMatrizId)
                     INNER JOIN acpComponenteCurricular D
                          USING (componenteCurricularId)
                     INNER JOIN acpOfertaTurma E
                          USING (ofertaTurmaId)
                     INNER JOIN acpOfertaCurso F
                          USING (ofertaCursoId)
                     INNER JOIN acpOcorrenciaCurso G
                          USING (ocorrenciaCursoId)
                     INNER JOIN acpCurso H
                          USING (cursoid)";
        
        $args = array();
        $args[] = AcpMatricula::SITUACAO_CANCELAMENTO;
        
        if ( strlen($ofertaComponenteCurricularId) > 0 )
        {
            $where .= ' AND B.ofertacomponentecurricularid = ?';
            $args[] = $ofertaComponenteCurricularId;
        }
        
        $where .= ' AND A.horarioid = ?';
        $args[] = $horarioId;
        
        $sql .= ' WHERE ' . substr($where, 4) . ' 
               ORDER BY D.nome, H.nome';        
        
        $results = SDatabase::query($sql, $args);
        $return = array();
        
        foreach ( $results as $result )
        {
            $dados = new stdClass();
            list ( $dados->ofertacomponentecurricularid,
                   $dados->horarioid,
                   $dados->ocorrenciahorarioofertaid,
                   $dados->componentecurricular,
                   $dados->turma,
                   $dados->curso,
                   $dados->cargahoraria,
                   $dados->cargahorariaaposdivisao,
                   $dados->numrodealunosmatriculados,
                   $dados->numerodealunoscomsituacaoalterada,
                   $dados->matriculasquemudaramdesituacao ) = $result;
            
            $return[] = $dados;
        }
        
        return $return;
    }
    
    /**
     * No processo de divisão de horários, ao ser regitrado uma nova ocorrência
     * de horário ofertada, deve ser registrados os mesmos registros de frequência
     * da ocorrência de horário ofertada antiga, porém referenciando a nova.
     * 
     * @return boolean
     */
    public function registraNovasFrequenciasParaAOcorrenciaHorarioOfertaNova($ocorrenciaHorarioOfertaIdVelha, $ocorrenciaHorarioOfertaNova)
    {
        $sql = "INSERT INTO acpFrequencia
	               (horarioofertacomponentecurricularid, matriculaid, datalancamento, justificativa,
	                ocorrenciahorarioofertaid, frequencia, unitid, centerid)
	         SELECT horarioofertacomponentecurricularid, matriculaid, datalancamento, justificativa,
	                {$ocorrenciaHorarioOfertaNova}, frequencia, unitid, centerid
		   FROM acpFrequencia
	          WHERE ocorrenciahorarioofertaid = {$ocorrenciaHorarioOfertaIdVelha}";
        
        $sDataBase = SDatabase::getInstance();
        return $sDataBase->execute($sql);
    }
    
    /**
     * Altera data de frequencias de uma respectiva ocorrencia de horario
     *  
     * @return boolean
     */
    public function atualizaFrequencias($ocorrenciahorarioofertaid, $paraData)
    {
        $sql = "UPDATE acpfrequencia SET datalancamento = TO_DATE(?, 'dd/mm/yyyy') WHERE ocorrenciahorarioofertaid = ?";
        $args = array($paraData, $ocorrenciahorarioofertaid);
        $ok = SDatabase::execute($sql, $args);
        
        return $ok;
    }
    
    /**
     * @return boolean
     */
    public function removerFrequencias($ocorrenciahorarioofertaid)
    {
        $sql = "DELETE FROM acpfrequencia WHERE ocorrenciahorarioofertaid = ?";
        $args = array($ocorrenciahorarioofertaid);

        $ok = SDatabase::execute($sql, $args);
        
        return $ok;
    }
    
    /**
     * Retorna TRUE se o dia da semana da data passada bate com o do horario
     * 
     * @return boolean
     */
    public static function verificaDiaDaData($horarioId, $data)
    {
        $sql = "SELECT COUNT(*)
                  FROM acphorario
                 WHERE horarioid = ?
                   AND diasemana = EXTRACT(dow FROM datetodb(?))";
        
        $result = SDatabase::query($sql, array($horarioId, $data));
        
        return $result[0][0] > 0;
    }
    
    /**
     * Retorna ID da ocorrencia de horario de acordo com filtros passados
     * 
     * @return int
     */
    public static function buscarExistente($ofertacomponentecurricularid, $horarioId, $data)
    {
        $sql = "SELECT ocorrenciahorarioofertaid
                  FROM acpocorrenciahorariooferta
                 WHERE ofertacomponentecurricularid = ?
                   AND horarioid = ?
                   AND dataaula = TO_DATE(?, 'dd/mm/yyyy')";
        
        $result = SDatabase::query($sql, array($ofertacomponentecurricularid, $horarioId, $data));
        
        return $result[0][0];
    }
    
    public static function excluirParaTela($ofertacomponentecurricularid, $professorid, $diasemana)
    {
        $sql  = "SELECT COUNT(*)
                   FROM public.acpocorrenciahorariooferta
             INNER JOIN acpfrequencia
                  USING (ocorrenciahorarioofertaid)
                  WHERE ofertacomponentecurricularid = ?
                    AND (CASE WHEN ? IS NULL THEN professorid IS NULL ELSE professorid = ? END)
                    AND EXISTS(SELECT 1 FROM acphorario h WHERE h.horarioid = horarioid AND h.diasemana = ?)";

        $result = SDatabase::query($sql, array($ofertacomponentecurricularid, $professorid, $professorid, $diasemana));
        
        if ( $result[0][0] > 0 )
        {
            throw new Exception(_M('Existe @1 frequência(s) que já foram registradas para este horário.', null, $result[0][0]));
        }
        
        $sql = "DELETE FROM public.acpocorrenciahorariooferta
                      WHERE ofertacomponentecurricularid = ?
                        AND ( CASE WHEN ? IS NULL THEN professorid IS NULL ELSE professorid = ? END )
                        AND EXISTS(SELECT 1 
                                     FROM acpocorrenciahorariooferta O 
                                LEFT JOIN acphorario H 
                                    USING (horarioid) 
                                    WHERE O.ocorrenciahorarioofertaid = acpocorrenciahorariooferta.ocorrenciahorarioofertaid 
                                      AND H.horarioid = horarioid 
                                      AND H.diasemana = ?)";
        
        $ok = SDatabase::execute($sql, array($ofertacomponentecurricularid, $professorid, $professorid, $diasemana));
        
        return $ok;
    }
    
    public static function atualizarProfessor($ofertacomponentecurricularid, $professorid, $datasDb, $ocorrenciahorarioofertaid, $tipodocenteid = null)
    {
        $sql =  "UPDATE AcpOcorrenciaHorarioOferta
                    SET professorid = ?, tipodedocenteid = ?
                  WHERE ofertacomponentecurricularid = ?
                    AND dataaula IN (" . implode(',', $datasDb) . ")
                    AND ocorrenciahorarioofertaid = " . $ocorrenciahorarioofertaid;

        $ok = SDatabase::execute($sql, array($professorid, $tipodocenteid , $ofertacomponentecurricularid));

        return $ok;
    }
    
    public static function removerCancelamento($ofertacomponentecurricularid, $professorid, $data)
    {
        $sql =  'UPDATE AcpOcorrenciaHorarioOferta
                    SET cancelada = FALSE,
                        motivo_cancelamento = NULL
                  WHERE ofertacomponentecurricularid = ?
                    AND professorid = ?
                    AND dataaula = datetodb(?)';

        $ok = SDatabase::execute($sql, array($ofertacomponentecurricularid, $professorid, $data));
        
        return $ok;
    }
}