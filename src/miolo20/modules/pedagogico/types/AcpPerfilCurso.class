<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpPerfilCurso extends SType
{
    const OFERTA_POR_PERIODO = 'P';
    const OFERTA_TURMA = 'T';
    const OFERTA_LIVRE = 'L';

    const SITUACAO_ATIVO = 't';
    const SITUACAO_INATIVO = 'f';

    const ORGANIZACAO_SERIADO = 'S';
    const ORGANIZACAO_CONTINUO = 'C';

    const FORMA_CURSAR_COMPONENTES_CONCOMITANTE = 'C';
    const FORMA_CURSAR_COMPONENTES_SEQUENCIAL = 'S';

    protected $_utilizaNovoPadrao = true;

    protected $_defaultOrder = 'acpperfilcurso.descricao';

    protected $_descriptionColumn = 'acpperfilcurso.descricao';

    protected $_associations = array(
       'componentescurriculares' => array(
           'mode' => 'many',
           'typeClass' => 'AcpPerfilCursoComponenteCurricular',
           'joinColumn' => 'perfilcursoid',
           'dependent' => true,
           'saveRelateds' => true,
       ),
       'tiposdocumento' => array(
           'mode' => 'many',
           'typeClass' => 'AcpTipoDocumento',
           'joinColumnLeft' => 'perfilcursoid',
           'joinColumnRight' => 'perfilcursoid',
           'dependent' => true,
           'saveRelateds' => true,
       ),
       'camposadicionais' => array(
           'mode' => 'many',
           'typeClass' => 'AcpPerfilCursoCamposAdicionais',
           'joinColumnLeft' => 'perfilcursoid',
           'joinColumnRight' => 'perfilcursoid',
           'dependent' => true,
           'saveRelateds' => true,
       ),
       'regras' => array(
           'mode' => 'one',
           'typeClass' => 'AcpRegrasMatriculaPerfilCurso',
           'joinColumnLeft' => 'perfilcursoid',
           'joinColumnRight' => 'perfilcursoid',
           'dependent' => true,
           'saveRelateds' => true
       ),
     );

    /**
     * @var array
     */
    public $componentescurriculares = array();

    /**
     * @var AcpRegrasMatriculaPerfilCurso
     */
    public $regras;

    /**
     * @var array
     */
    public $tiposdocumento = array();

    /**
     * @var array
     */
    public $camposadicionais = array();

    /**
     * @var array
     */
    protected $documentosExigidos = array();

    protected $salvarDocExigidos = false;

    protected $listaCamposAdicionais = array();

    protected $salvarCamposAdicionais = false;

    /**
     * @var array
     */
    protected $tiposComponentesCurriculares = array();

    /**
     * @var integer
     */
    public $perfilcursoid;

    /**
     * @var string
     */
    public $formadeoferta;

    /**
     * @var string
     */
    public $ativo;

    /**
     * @var string
     */
    public $organizacao;

    /**
     * @var integer
     */
    public $percentualconclusaoingressante;

    /**
     * @var integer
     */
    public $percentualconclusaoconcluinte;

    /**
     * @var integer
     */
    public $modelodeavaliacaogeral;

    /**
     * @var integer
     */
    public $modelodeavaliacaomodulo;

    /**
     * @var integer
     */
    public $modelodeavaliacaoseriado;

    public $cadastrocorpodocente;
    public $cadastrocoordenadores;
    public $cadastromatrizcurricular;
    public $formacursarcomponentescurriculares;
    public $permiteinscricaoporgrupo;
    public $mensageminscricaogrupo;
    public $descricao;

    public $permiteregistrarfrequenciaportal;
    public $permiteregistrarfrequenciabiometria;
    public $limitetemporegistrobiometria;
    public $acaoregistroparcial;
    public $justificativaregistroparcial;
    public $alternativaacaomeiapresenca;
    public $alternativaacaofaltajustificada;

    /**
     * @return array
     */
    public static function listarPerfis()
    {
        $pc = new AcpPerfilCurso();
        $sql = $pc->msql();
        $sql->addEqualCondition('acpperfilcurso.ativo', DB_TRUE);
        return $pc->findList($sql);
    }

    /**
     *
     * @return array
     */
    public static function listarFormaDeOferta()
    {
        return array(
//            self::OFERTA_POR_PERIODO => _M('Por período'),
            self::OFERTA_TURMA => _M('Por turma'),
            self::OFERTA_LIVRE => _M('Livre'),
        );
    }

    /**
     *
     * @return array
     */
    public static function listarOrganizacao()
    {
        return array(
            self::ORGANIZACAO_CONTINUO => _M('Contínuo'),
            self::ORGANIZACAO_SERIADO => _M('Seriado'),
        );
    }

    /**
     *
     * @return array
     */
    public static function listarSituacao()
    {
        return array(
            self::SITUACAO_ATIVO => _M('Ativo'),
            self::SITUACAO_INATIVO => _M('Inativo'),
        );
    }

    /**
     *
     * @return array
     */
    public static function listarTiposComponentesCurriculares()
    {
//@TODO percorrer arquivos classes

        return array(
            'X' => 'Teste 1',
            'Y' => 'Teste 2',
        );
    }

    public static function listarFormasDeCursarComponentesCurriculares()
    {
        return array( self::FORMA_CURSAR_COMPONENTES_CONCOMITANTE => _M('Concomitante'),
                      self::FORMA_CURSAR_COMPONENTES_SEQUENCIAL => _M('Sequencial') );
    }


    /**
     * Retorna marcados na interface
     *
     * @return array
     */
    public function getTiposComponentesCurriculares()
    {
        return (array) $this->tiposComponentesCurriculares;
    }

    public function setTiposComponentesCurriculares($tiposComponentesCurriculares)
    {
        $this->tiposComponentesCurriculares = $tiposComponentesCurriculares;
    }

    public function obterTiposComponenteCurricularLista()
    {
        $lista = array();

        foreach ( $this->componentescurriculares as $pccc )
        {
            $pccc instanceof AcpPerfilCursoComponenteCurricular;
            $lista[] = $pccc->obterTipo()->tipocomponentecurricularid;
        }

        return $lista;
    }

    public function getDocumentosExigidos() {
        return $this->documentosExigidos;
    }

    public function setDocumentosExigidos($documentosExigidos) {
        $this->documentosExigidos = $documentosExigidos;
    }

    public function getSalvarDocExigidos() {
        return $this->salvarDocExigidos;
    }

    public function setSalvarDocExigidos($salvarDocExigidos) {
        $this->salvarDocExigidos = $salvarDocExigidos;
    }

    /**
     * @return array
     */
    public function obterDocExigidos()
    {
        $lista = array();

        foreach ( $this->tiposdocumento as $doc )
        {
            $doc instanceof AcpTipoDocumento;

            $lista[] = $doc->documenttypeid;
        }

        return $lista;
    }

    public function getListaCamposAdicionais() {
        return $this->listaCamposAdicionais;
    }

    public function setListaCamposAdicionais($listaCamposAdicionais) {
        $this->listaCamposAdicionais = $listaCamposAdicionais;
    }

    public function getSalvarCamposAdicionais() {
        return $this->salvarCamposAdicionais;
    }

    public function setSalvarCamposAdicionais($salvarCamposAdicionais) {
        $this->salvarCamposAdicionais = $salvarCamposAdicionais;
    }

    /**
     * @return array
     */
    public function obterListaCamposAdicionais()
    {
        $lista = array();

        foreach ( $this->camposadicionais as $ca )
        {
            $ca instanceof AcpPerfilCursoCamposAdicionais;

            $lista[] = $ca->nomecampo;
        }

        return $lista;
    }

    /**
     *
     * @return boolean
     */
    public function possuiRegra()
    {
        return strlen($this->regras->tipoinscricao) > 0;
    }

    public function save()
    {
        // protecao. estava causando erro ao inserir sem ter regras ainda. pois o type ja popula o objeto (vazio)
        if ( !$this->possuiRegra() )
        {
            $this->regras = null;
        }

        if ($this->modelodeavaliacaomodulo == null) {
            $this->modelodeavaliacaomodulo = SType::NULL_VALUE;
        }

        $ok = parent::save();

        if ( $ok )
        {
            if ( count($this->getTiposComponentesCurriculares()) > 0 )
            {
                $this->salvaCC();
            }

            if ( $this->getSalvarDocExigidos() )
            {
                $this->salvaDocExigidos();
            }

            if ( $this->getSalvarCamposAdicionais() )
            {
                $this->salvaCamposAdicionais();
            }
        }

        return $ok;
    }

    private function salvaCamposAdicionais()
    {
        $selecionados = $this->getListaCamposAdicionais();

        if ( $this->hasPkeyValue() )
        {
            foreach ( $this->camposadicionais as $ca )
            {
                $ca instanceof AcpPerfilCursoCamposAdicionais;

                if ( !in_array($ca->nomecampo, $selecionados) )
                {
                    $ca->delete();
                }
            }
        }

        foreach ( $selecionados as $nomecampo )
        {
            if ( $this->jaExisteCampo($nomecampo) )
            {
                continue;
            }

            $row = new AcpPerfilCursoCamposAdicionais();
            $row->nomecampo = $nomecampo;
            $row->perfilcursoid = $this->perfilcursoid;
            $row->habilitado = DB_TRUE;
            $row->save();
        }
    }

    /**
     * @return boolean
     */
    private function jaExisteCampo($nomecampo)
    {
        foreach ( $this->camposadicionais as $ca )
        {
            $ca instanceof AcpPerfilCursoCamposAdicionais;

            if ( $ca->nomecampo == $nomecampo )
            {
                return true;
            }
        }

        return false;
    }

    private function salvaDocExigidos()
    {
        $selecionados = $this->getDocumentosExigidos();

        if ( $this->hasPkeyValue() )
        {
            foreach ( $this->tiposdocumento as $ca )
            {
                $ca instanceof AcpTipoDocumento;
                $ca->delete();
            }
        }

        foreach ( $selecionados as $nomecampo )
        {
            $row = new AcpTipoDocumento();
            $row->documenttypeid = $nomecampo;
            $row->perfilcursoid = $this->perfilcursoid;
            $row->exigido = DB_TRUE;
            $row->save();
        }
    }

    private function salvaCC()
    {
        $tipoCC = new AcpTipoComponenteCurricular();

        // exclui desmarcados na interface
        if ( $this->hasPkeyValue() )
        {
            foreach ( $this->componentescurriculares as $pccc )
            {
                $pccc instanceof AcpPerfilCursoComponenteCurricular;

                if ( !in_array($pccc->obterTipo()->tipocomponentecurricularid,  $this->getTiposComponentesCurriculares()) )
                {
                    $pccc->delete();
                }
            }
        }

        // Adiciona ao array novos marcados na interface
        foreach ( $this->getTiposComponentesCurriculares() as $tipo )
        {
            if ( !in_array($tipo, $this->obterTiposComponenteCurricularLista()) )
            {
                $row = $tipoCC->findOne( $tipoCC->msql()->addEqualCondition('tipocomponentecurricularid', $tipo) );
                $row instanceof AcpTipoComponenteCurricular;

                $pccc = new AcpPerfilCursoComponenteCurricular();
                $pccc->perfilcursoid = $this->perfilcursoid;
                $pccc->tipocomponentecurricularid = $row->tipocomponentecurricularid;
                $pccc->save();
            }
        }
    }

    /**
     * @return array
     */
    public static function perfisQueUtilizamModelo($modeloDeAvaliacaoId)
    {
        $perfil = new AcpPerfilCurso();

        $sql = $perfil->msql();
        $sql->setColumns('acpperfilcurso.perfilcursoid,
                          acpperfilcurso.perfilcursoid || \' - \' || acpperfilcurso.descricao');

        $sql->setWhere('acpperfilcurso.ativo IS TRUE
                    AND ( acpperfilcurso.modelodeavaliacaogeral = ?
                       OR acpperfilcurso.modelodeavaliacaoseriado = ? )', array($modeloDeAvaliacaoId, $modeloDeAvaliacaoId));

        $sql->setOrderBy('acpperfilcurso.descricao');

        return $perfil->findList($sql);
    }
}
?>
