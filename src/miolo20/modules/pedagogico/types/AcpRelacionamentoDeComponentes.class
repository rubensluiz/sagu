<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela AcpRelacionamentoDeComponentes
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpRelacionamentoDeComponentes extends SType
{    
    protected $_utilizaNovoPadrao = true;
     
    public $componenteDeAvaliacaoPai;
    
    public $componenteDeAvaliacaoFilho;    
        
    public function save()
    {
        $sql = $this->msql()->setColumns('*')->addEqualCondition('componenteDeAvaliacaoPai', $this->componenteDeAvaliacaoPai)->addEqualCondition('componenteDeAvaliacaoFilho', $this->componenteDeAvaliacaoFilho);                     
        $consulta = $this->findCount($sql);    
        
        if( $consulta == '0' )
        {
            $data['componenteDeAvaliacaoPai'] = $this->componenteDeAvaliacaoPai;
            $data['componenteDeAvaliacaoFilho'] = $this->componenteDeAvaliacaoFilho;            
            $sql = MSQL::insertTable('acpRelacionamentoDeComponentes', $data);            
            $ok = SDatabase::getInstance()->execute($sql);
        }
        
        return $ok;
    }
    
    /**
     * Retorna o componente de avaliação pai do componente de avaliação filho
     * @param type $componenteDeAvaliacaoFilho
     * @return \AcpComponenteDeAvaliacao
     */
    public static function obterComponentePai($componenteDeAvaliacaoFilho)
    {
       //Busca e popula o componente pai
        $relacionamentoDeComponentes = new AcpRelacionamentoDeComponentes();        
        $msql = $relacionamentoDeComponentes->msql();
        $msql->addEqualCondition('componenteDeAvaliacaoFilho', $componenteDeAvaliacaoFilho);
        $searchComponentesPai = $relacionamentoDeComponentes->findList($msql);        
        
        if( count($searchComponentesPai) > 0 )
        {
            foreach($searchComponentesPai as $cod=>$linha)
            {
                $componente = new AcpComponenteDeAvaliacao($cod);                
                $componenteDeAvaliacaoPai = $componente;
            }
        }
        
        return $componenteDeAvaliacaoPai;
    }
    
    /**
     * Retorna um array de componentes de avaliação filhos do componente pai
     * @param type $componenteDeAvaliacaoPai
     * @return \AcpComponenteDeAvaliacao
     */
    public static function obterComponentesDeAvaliacaoFilhos($componenteDeAvaliacaoPai, $excluirRecuperacoes = false)
    {
        $relacionamentoDeComponentes = new AcpRelacionamentoDeComponentes();
        $msql = $relacionamentoDeComponentes->msql();
        $msql->setColumns('componenteDeAvaliacaoFilho');
        $msql->addEqualCondition('componenteDeAvaliacaoPai', $componenteDeAvaliacaoPai);
        
        if ( $excluirRecuperacoes )
        {
            $msql->addLeftJoin('acpcomponentedeavaliacao', 'acpcomponentedeavaliacao.componentedeavaliacaoid = AcpRelacionamentoDeComponentes.componentedeavaliacaofilho');
            $msql->addNotEqualCondition('acpcomponentedeavaliacao.classedecomponente', AcpComponenteDeAvaliacao::CLASSE_RECUPERACAO);
        }
        
        $searchComponentesFilhos = $relacionamentoDeComponentes->findList($msql);
        
        if( count($searchComponentesFilhos) > 0 )
        {
            foreach($searchComponentesFilhos as $cod=>$linha)
            {
                $componente = new AcpComponenteDeAvaliacao($cod);
                $componentesDeAvaliacaoFilhos[] = $componente;
            }
        }
        
        return $componentesDeAvaliacaoFilhos;
    }
    
    /**
     * Verifica se o componente possui componentes filhos
     * @param type $componenteDeAvaliacaoid
     * @return boolean
     */
    public static function possuiComponentesFilhos($componenteDeAvaliacaoid)
    {
        $return = false;
        $relacionamentoDeComponentes = new AcpRelacionamentoDeComponentes();
        $msql = $relacionamentoDeComponentes->msql();
        $msql->setColumns('componenteDeAvaliacaoFilho');
        $msql->addEqualCondition('componenteDeAvaliacaoPai', $componenteDeAvaliacaoid);
        $searchComponentesFilhos = $relacionamentoDeComponentes->findList($msql);
        if( count($searchComponentesFilhos) > 0 )
        {
            $return = true;
        }
        
        return $return;
    }
}
?>
