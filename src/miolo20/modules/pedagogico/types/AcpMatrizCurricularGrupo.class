<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpMatrizCurricularGrupo extends SType
{
    protected $_utilizaMultiUnidade = true;
    
    protected $_utilizaNovoPadrao = true;
    
    protected $_defaultOrder = 'AcpMatrizCurricularGrupo.ordem';
    
    public $matrizcurriculargrupoid;
    
    public $matrizcurricularid;
    
    public $descricao;
        
    public $ordem;
    
    public $serie;
    
    /**
     *
     * @return AcpMatrizCurricular 
     */
    public function obterMatrizCurricular()
    {
        return new AcpMatrizCurricular($this->matrizcurricularid);
    }
    
    /**
     * @return AcpPerfilCurso
     */
    public function obterPerfil()
    {
        $perfil = null;
        $matriz = $this->obterMatrizCurricular();
        
        if ( $matriz )
        {
            $curso = $matriz->obterCurso();
            
            if ( $curso )
            {
                $perfil = $curso->perfilcurso;
            }
        }
        
        return $perfil;
    }
    
    public static function obterGruposDaMatrizCurricular($matrizCurricularId)
    {
        $matrizCurricularGrupo = new AcpMatrizCurricularGrupo();
        $msql = $matrizCurricularGrupo->msql();
        $msql->setColumns('matrizCurricularGrupoId');
        $msql->addEqualCondition('matrizCurricularId', $matrizCurricularId);
        $searchGrupos = $matrizCurricularGrupo->findList($msql);
        
        if( count($searchGrupos) > 0 )
        {
            foreach($searchGrupos as $cod=>$linha)
            {
                $return[] = new AcpMatrizCurricularGrupo($cod);
            }
        }

        return $return;
    }
    
    public function delete() 
    {
        $componentes = AcpComponenteCurricularMatriz::obterComponentesCurricularesMatrizDoGrupo($this->matrizcurriculargrupoid);
        if( count($componentes) > 0 )
        {
            foreach($componentes as $cod=>$componente)
            {
                $componente->delete();
            }
        }
        return parent::delete();
    }
    
    public function getChoiceComponentSQL($argument = null, $id = null)
    {        
        $sql = parent::getChoiceComponentSQL($argument, $id);
                
        $args = $this->getAjaxArgs();
        
        if(strlen($args->ocorrenciacursoid)>0)
        {
            $ocorrenciacurso = new AcpOcorrenciaCurso($args->ocorrenciacursoid);
            $sql->addInnerJoin('acpmatrizcurricular', 'acpmatrizcurricular.matrizcurricularid = AcpMatrizCurricularGrupo.matrizcurricularid');
            $sql->addEqualCondition('acpmatrizcurricular.cursoid ', $ocorrenciacurso->cursoid);
        }
        
        return $sql;
    }
    
    /*
     * Valida se matrizes repetidas n?o s?o iguais.
     * 
     * @param matrizcurriculargrupoid
     * 
     * @return matriz com os resultados
     */
    public static function validaMatrizNaInscricao($matriz1, $matriz2)
    {
        $sql = "SELECT COUNT(*)
                    FROM
                      (SELECT HR.horainicio,
                              HR.horafim,
                              CC.dataaula,
                              MG.matrizcurriculargrupoid
                       FROM acphorario HR
                       INNER JOIN acpocorrenciahorariooferta CC ON CC.horarioid=HR.horarioid
                       INNER JOIN acpofertacomponentecurricular OC ON CC.ofertacomponentecurricularid=OC.ofertacomponentecurricularid
                       INNER JOIN acpcomponentecurricularmatriz CM ON OC.componentecurricularmatrizid=CM.componentecurricularmatrizid
                       INNER JOIN acpmatrizcurriculargrupo MG ON CM.matrizcurriculargrupoid=MG.matrizcurriculargrupoid
                       WHERE MG.matrizcurriculargrupoid = ? ) MATRIZ1 ,
                      (SELECT HR2.horainicio,
                              HR2.horafim,
                              CC2.dataaula,
                              MG2.matrizcurriculargrupoid
                       FROM acphorario HR2
                       INNER JOIN acpocorrenciahorariooferta CC2 ON CC2.horarioid=HR2.horarioid
                       INNER JOIN acpofertacomponentecurricular OC2 ON CC2.ofertacomponentecurricularid=OC2.ofertacomponentecurricularid
                       INNER JOIN acpcomponentecurricularmatriz CM2 ON OC2.componentecurricularmatrizid=CM2.componentecurricularmatrizid
                       INNER JOIN acpmatrizcurriculargrupo MG2 ON CM2.matrizcurriculargrupoid=MG2.matrizcurriculargrupoid
                       WHERE MG2.matrizcurriculargrupoid = ? ) MATRIZ2
                    WHERE MATRIZ1.dataaula = MATRIZ2.dataaula
                      AND (MATRIZ1.horainicio,
                           MATRIZ1.horafim) OVERLAPS (MATRIZ2.horainicio,
                                                   MATRIZ2.horafim)";
        $params[] = $matriz1;
        $params[] = $matriz2;
        
        $return = SDatabase::query($sql, $params);
        
        return $return[0][0];
    }



    public function searchGrid($filters)
    {
        $cols[] = 'ofertaturmaid';
        $cols[] = 'moduloid';
        $cols[] = 'ofertadecurso';
        $cols[] = 'turma';
        $cols[] = 'modulo';
        $cols[] = 'matriculados';
        $cols[] = 'aprovados';
        $cols[] = 'reprovados';
        $cols[] = 'cancelados';
        $cols[] = 'possui_notas_pendentes';
        $cols[] = 'situacao';
        $cols[] = 'cursoid';

        $sql = "
                SELECT DISTINCT
                A.ofertaturmaid as ofertaturmaid,
                F.matrizcurriculargrupoid as moduloid,
                B.descricao as curso,
                A.descricao as turma,
                F.descricao as modulo,
                (
                    SELECT COUNT(DISTINCT GG.inscricaoid)
                       FROM acpmatricula MM
                    INNER JOIN acpinscricaoturmagrupo GG ON (MM.inscricaoturmagrupoid = GG.inscricaoturmagrupoid)
                    INNER JOIN acpofertaturma TT ON (GG.ofertaturmaid = TT.ofertaturmaid)
                    WHERE TT.ofertaturmaid = A.ofertaturmaid AND
                          GG.matrizcurriculargrupoid = F.matrizcurriculargrupoid AND
                          acp_obtersituacaopedagogicadanomodulo(GG.matrizcurriculargrupoid, GG.inscricaoid) = 'Matriculado'

                ) as qtdMatriculados,
                (
                    SELECT COUNT(DISTINCT GG.inscricaoid)
                       FROM acpmatricula MM
                    INNER JOIN acpinscricaoturmagrupo GG ON (MM.inscricaoturmagrupoid = GG.inscricaoturmagrupoid)
                    INNER JOIN acpofertaturma TT ON (GG.ofertaturmaid = TT.ofertaturmaid)
                    WHERE TT.ofertaturmaid = A.ofertaturmaid AND
                          GG.matrizcurriculargrupoid = F.matrizcurriculargrupoid AND
                          acp_obtersituacaopedagogicadanomodulo(GG.matrizcurriculargrupoid, GG.inscricaoid) = 'Aprovado'
                ) as qtdAprovados,
                (
                    SELECT COUNT(DISTINCT GG.inscricaoid)
                       FROM acpmatricula MM
                    INNER JOIN acpinscricaoturmagrupo GG ON (MM.inscricaoturmagrupoid = GG.inscricaoturmagrupoid)
                    INNER JOIN acpofertaturma TT ON (GG.ofertaturmaid = TT.ofertaturmaid)
                    WHERE TT.ofertaturmaid = A.ofertaturmaid AND
                          GG.matrizcurriculargrupoid = F.matrizcurriculargrupoid AND
                          acp_obtersituacaopedagogicadanomodulo(GG.matrizcurriculargrupoid, GG.inscricaoid) = 'Reprovado'
                ) as qtdReprovados,
                (
                    SELECT COUNT(DISTINCT GG.inscricaoid)
                       FROM acpmatricula MM
                    INNER JOIN acpinscricaoturmagrupo GG ON (MM.inscricaoturmagrupoid = GG.inscricaoturmagrupoid)
                    INNER JOIN acpofertaturma TT ON (GG.ofertaturmaid = TT.ofertaturmaid)
                    WHERE TT.ofertaturmaid = A.ofertaturmaid AND
                          GG.matrizcurriculargrupoid = F.matrizcurriculargrupoid AND
                          acp_obtersituacaopedagogicadanomodulo(GG.matrizcurriculargrupoid, GG.inscricaoid) = 'Cancelado'
                ) as qtdCancelados,
                (
                    SELECT CASE WHEN COUNT(ofertacomponentecurricularid) > 0 THEN 't' ELSE 'f' END AS possui_notas_pendentes
                    FROM acpofertacomponentecurricular AA
                    INNER JOIN AcpComponenteCurricularMatriz BB ON AA.componentecurricularmatrizid = BB.componentecurricularmatrizid
                    WHERE BB.obrigatorio IS TRUE AND
                    AA.ofertaturmaid = A.ofertaturmaid AND
                    BB.matrizcurriculargrupoid = F.matrizcurriculargrupoid AND
                    (select count(*) > 0 from acp_obternotaspendentes(AA.ofertacomponentecurricularid)) = 't'
                ) as possui_notas_pendentes,
                ( 	-- verificando se o módulo já foi fechado ou aberto,  caso esteja alguém matriculado então está aberto
                    SELECT CASE WHEN COUNT(matriculaid) > 0 THEN 'A' ELSE 'F' END AS modulofechado
                    FROM acpmatricula
                    INNER JOIN acpinscricaoturmagrupo ON (acpmatricula.inscricaoturmagrupoid = acpinscricaoturmagrupo.inscricaoturmagrupoid)
                    WHERE ofertacomponentecurricularid in (
                        SELECT
                            AA.ofertacomponentecurricularid
                        FROM acpofertacomponentecurricular AA
                        INNER JOIN AcpComponenteCurricularMatriz BB ON AA.componentecurricularmatrizid = BB.componentecurricularmatrizid
                        WHERE BB.obrigatorio IS TRUE AND
                        AA.ofertaturmaid = A.ofertaturmaid AND
                        BB.matrizcurriculargrupoid = F.matrizcurriculargrupoid
                    ) AND acpinscricaoturmagrupo.situacao IS NULL
                      AND acpinscricaoturmagrupo.ofertaturmaid = A.ofertaturmaid
                      AND acpmatricula.situacao <> 'C'
                ) as situacao,
                D.cursoid as cursoid
                FROM acpofertaturma A
                INNER JOIN acpOfertaCurso B ON (A.ofertaCursoId = B.ofertaCursoId)
                INNER JOIN acpOcorrenciaCurso C ON (B.ocorrenciacursoid = C.ocorrenciacursoid)
                INNER JOIN acpCurso D ON (C.cursoid = D.cursoid)
                INNER JOIN acpMatrizCurricular E ON (D.cursoid = E.cursoid)
                INNER JOIN acpMatrizCurricularGrupo F ON (E.matrizcurricularid = F.matrizcurricularid)
        ";

        $where = array();

        if ( strlen($filters->buscaocorrenciacursoid) > 0 )
        {
            $where[] = 'B.ocorrenciacursoid = ?';
            $args[] = $filters->buscaocorrenciacursoid;
        }

        if ( strlen($filters->buscaofertacurso) > 0 )
        {
            $where[] = 'B.ofertacursoid = ?';
            $args[] = $filters->buscaofertacurso;
        }

        if ( strlen($filters->buscaturmaid) > 0 )
        {
            $where[] = 'A.ofertaturmaid = ?';
            $args[] = $filters->buscaturmaid;
        }

        //Filtro pela situacao da turma
        if ( $filters->encerradas == 'N' || (MIOLO::_REQUEST('action') == 'main:process:ofertaturma') )
        {
            $where[] = '(
                        ( A.dataencerramento IS NULL )
                        )';
        }
        else if ( $filters->encerradas == 'X' )
        {
            $where[] = ' (
                ( A.dataencerramento IS NOT NULL )
                AND ( NOW()::date > A.dataencerramento )
                    )';
        }

        if( count($where) > 0 )
        {
            $sql  .= ' WHERE ';
            $sql  .= implode(' AND ', $where);
        }

        $sql .= 'ORDER BY moduloid';

        if( count($where) > 0 )
        {
            return SAGU::resultToArray(SDatabase::query($sql, $args), $cols);
        }

    }


    /**
     * Realiza o fechamentos de todas disciplinas do módulo e todos as suas ofertas
     */
    public function fecharModulo($ofertaTurmaid, $moduloid)
    {
        $return = true;
        $ofertacomponentecurricularsearch = AcpOfertaComponenteCurricular::obterOfertaComponenteCurricularDoModuloeOfertaTurma($ofertaTurmaid, $moduloid);

        //Se possui comp. curriculares passa por eles primeiro
        $i = 0;
        $count = count($ofertacomponentecurricularsearch);

        if( count($ofertacomponentecurricularsearch) > 0 )
        {
            foreach ($ofertacomponentecurricularsearch as $cod => $ofertacomponentecurricular)
            {
                $calculaMediasDoModulo = DB_FALSE;
                $i ++; //Numero da linha
                if( $i == $count ) //Caso for o ultimo componente do modulo
                {
                    $calculaMediasDoModulo = DB_TRUE;
                }

               $return = $ofertacomponentecurricular->fecharOfertaComponenteCurricular(DB_FALSE, $calculaMediasDoModulo);
            }
        }

        return $return;
    }

    public function reabrirModulo($ofertaTurmaid, $moduloid)
    {
        $return = true;
        $ofertacomponentecurricularsearch = AcpOfertaComponenteCurricular::obterOfertaComponenteCurricularDoModuloeOfertaTurma($ofertaTurmaid, $moduloid);

        //Se possui comp. curriculares passa por eles primeiro
        $i = 0;
        $count = count($ofertacomponentecurricularsearch);

        if( count($ofertacomponentecurricularsearch) > 0 )
        {
            foreach ($ofertacomponentecurricularsearch as $cod => $ofertacomponentecurricular)
            {
                $calculaMediasDoModulo = DB_FALSE;
                $i ++; //Numero da linha
                if( $i == $count ) //Caso for o ultimo componente do modulo
                {
                    $calculaMediasDoModulo = DB_TRUE;
                }

                $return = $ofertacomponentecurricular->reabrirOfertaComponenteCurricular(DB_FALSE, $calculaMediasDoModulo);
            }
        }

        return $return;
    }


}
?>
