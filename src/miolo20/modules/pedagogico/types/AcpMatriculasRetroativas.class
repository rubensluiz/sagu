<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpMatriculasRetroativas extends SType
{
    public $inscricaoid;
    
    public $ofertaturmaid;
    
    public $componentecurricularmatrizid;
    
    public $inscricaoturmagrupoid;
    
    public $notafinal;
    
    public $conceitofinal;
    
    public $parecerfinal;
    
    public $estadodematriculaid;
    
    public $frequencia;
    
    public $situacao;
    
    public $professores;
    
    public $retroativa = true;

    public function __construct($disableAssociations = false)
    {
        if ( $disableAssociations )
        {
            $this->_associations = array();
        }
        
        if ( is_numeric($disableAssociations) )
        {
            $id = $disableAssociations;
        }
        
        parent::__construct($id);
    }
    public function gerarMatriculaRetroativa()
    {
        $ofertacomponentecurricular = AcpOfertaComponenteCurricular::obterOfertaComponenteCurricular($this->ofertaturmaid, $this->componentecurricularmatrizid);
        if( !strlen($ofertacomponentecurricular->ofertacomponentecurricularid) > 0 )
        {
            //Cria oferta de componente curricular
            $ofertacomponentecurricular = new AcpOfertaComponenteCurricular();
            $ofertacomponentecurricular->ofertaTurmaId = $this->ofertaturmaid;
            $ofertacomponentecurricular->dataInicio = date(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP'));
            $ofertacomponentecurricular->componenteCurricularMatrizId = $this->componentecurricularmatrizid;
            $ofertacomponentecurricular->dataFechamento = date(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP'));
            $ofertacomponentecurricular->save();
            
        }
        
        if ( count($this->professores) > 0 )
        {
            $ofertaturma = new AcpOfertaTurma($this->ofertaturmaid);
            
            foreach ( $this->professores as $cod => $item)
                        {
                            $professorId[$cod] = $item->professor;

                            $acpocorrenciaHorarioOferta = new AcpOcorrenciaHorarioOferta();
                            
                            $acpocorrenciaHorarioOferta->professorid = $professorId;
                            $acpocorrenciaHorarioOferta->dataaula = $ofertaturma->datafinaloferta; //passa a primeira aula da turma
                            $acpocorrenciaHorarioOferta->ofertacomponentecurricularid = $ofertacomponentecurricular->ofertaComponenteCurricularId;

                        }
        }
        

        $inscricao = new AcpInscricao($this->inscricaoid);
        
        
        $estadomatricula = new AcpEstadoDeMatricula($this->estadodematriculaid);
        if( $estadomatricula->aprovado == DB_TRUE )
        {
            $situacao = AcpMatricula::SITUACAO_APROVADO;
        }
        else
        {
            $situacao = AcpMatricula::SITUACAO_REPROVADO;
        }
        
        //Realiza matricula na oferta do componente curricular
        $matricula = new AcpMatricula();
        $matricula->personid = $inscricao->personid;
        $matricula->situacao = $situacao;
        $matricula->datamatricula = date(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP'));
        $matricula->inscricaoturmagrupoid = $this->inscricaoturmagrupoid;
        $matricula->notafinal = $this->notafinal;
        $matricula->parecerfinal = $this->parecerfinal;
        $matricula->conceitofinal = $this->conceitofinal;
        $matricula->estadodematriculaid = $this->estadodematriculaid;
        $matricula->frequencia = $this->frequencia;
        $matricula->ofertacomponentecurricularid = $ofertacomponentecurricular->ofertaComponenteCurricularId;
        $matricula->retroativa = 't';

        $matricula->save();

    }
    
    public static function obterDisciplinasDaMatriz($ofertacursoid = null, $inscricaoid = null, $ofertaturmaid = null)
    {
        $ofertacurso = new AcpOfertaCurso($ofertacursoid);
        $cursoid = $ofertacurso->ocorrenciacurso->cursoid;

        //Garatindo o código da oferta de turma no $_REQUEST
        !(strlen(MIOLO::_REQUEST('ofertaturmaid') > 0)) && strlen($ofertaturmaid) > 0? $_REQUEST['ofertaturmaid'] = $ofertaturmaid : null;
        
        $perfilcursoid = $ofertacurso->ocorrenciacurso->curso->perfilcursoid;
        
        $matrizescurriculares = AcpMatrizCurricular::obterMatrizesCurricularesDoCurso($cursoid);
        foreach( $matrizescurriculares as $codmatriz=>$matrizcurricular)
        {
            //Situacao da disciplina na matriz
            $situacao = AcpComponenteCurricularMatriz::listarSituacao();
            
            $gruposdamatriz = AcpMatrizCurricularGrupo::obterGruposDaMatrizCurricular($matrizcurricular->matrizcurricularid);
            foreach( $gruposdamatriz as $codgrupo => $grupodamatriz )
            {
                //Busca as disciplinas da matriz do curso
                $componenteCurricularMatriz = new AcpComponenteCurricularMatriz();
                $sql = $componenteCurricularMatriz->msql();
                if( strlen($inscricaoid) > 0 )
                {
                    $sql->setWhere("NOT EXISTS (SELECT 1 FROM acpmatricula 
                                        INNER JOIN acpofertacomponentecurricular ofertacomponente ON acpmatricula.ofertacomponentecurricularid = ofertacomponente.ofertacomponentecurricularid
                                        INNER JOIN acpinscricaoturmagrupo ON acpinscricaoturmagrupo.inscricaoturmagrupoid = acpmatricula.inscricaoturmagrupoid
                                        INNER JOIN acpcomponentecurricularmatriz componentematriz ON componentematriz.componentecurricularmatrizid = ofertacomponente.componentecurricularmatrizid
                                             WHERE acpinscricaoturmagrupo.inscricaoid = ?
                                               AND acpmatricula.situacao IN ('M', 'I', 'A', 'R', 'F', 'P', 'E')
                                               AND acpcomponentecurricularmatriz.componentecurricularmatrizid = componentematriz.componentecurricularmatrizid)", array($inscricaoid));
                }

                $sql->addEqualCondition('AcpComponenteCurricularMatriz.matrizcurriculargrupoid', $grupodamatriz->matrizcurriculargrupoid);

                foreach( $componenteCurricularMatriz->findManyAsArray($sql) as $codComponente => $componente )
                {
                    $data[$codComponente]['acpmatriculasretroativas.codigo'] = $componente['componentecurricular.codigo'];
                    $data[$codComponente]['acpmatriculasretroativas.nome'] = $componente['componentecurricular.nome'];
                    $data[$codComponente]['acpmatriculasretroativas.descricao'] = $componente['componentecurricular.descricao'];
                    $data[$codComponente]['acpmatriculasretroativas.grupo'] = $componente['matrizcurriculargrupo.descricao'];
                    $data[$codComponente]['acpmatriculasretroativas.obrigatorio'] = SAGU::getYesNo($componente['acpcomponentecurricularmatriz.obrigatorio']);
                    $data[$codComponente]['acpmatriculasretroativas.tipo'] = $componente['tipocomponentecurricular.descricao'];
                    $data[$codComponente]['acpmatriculasretroativas.situacaodisciplina'] = $situacao[$componente['acpcomponentecurricularmatriz.situacao']];
                    $data[$codComponente]['acpmatriculasretroativas.tipocomponentecurricularid'] = $componente['tipocomponentecurricular.tipocomponentecurricularid'];
                    $data[$codComponente]['acpmatriculasretroativas.componentecurricularmatrizid'] = $componente['acpcomponentecurricularmatriz.componentecurricularmatrizid'];
                    $data[$codComponente]['acpmatriculasretroativas.perfilcursoid'] = $perfilcursoid;
                    $data[$codComponente]['acpmatriculasretroativas.notaconceito'] = '';
                    $data[$codComponente]['acpmatriculasretroativas.parecer'] = '';
                    $data[$codComponente]['acpmatriculasretroativas.frequencia'] = '';
                    $data[$codComponente]['acpmatriculasretroativas.situacao'] = '';
                }
            }
        }

        return $data;
    }
}
?>
