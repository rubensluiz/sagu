<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela acpModeloDeAvaliacao
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpComponenteDeAvaliacaoConceito extends Stype
{
    //Define que utiliza novo padrão
    protected $_utilizaNovoPadrao = true;
    
    protected $_tableName = 'AcpComponenteDeAvaliacaoConceito';
    
    public $componenteDeAvaliacaoConceitoId;
    
    public $conjuntoDeConceitosId;
    
    public $componenteDeAvaliacaoId;
    
    public $formaDeCalculo;
    
    public $componenteDeAvaliacao;
    
    public function __construct($id = null)
    {
        if ( strlen($id) > 0 )
        {
            parent::__construct($id);
            $this->componenteDeAvaliacao = new AcpComponenteDeAvaliacao($this->componenteDeAvaliacaoId);
        }
    }
    
    public function save()
    {
        $this->componenteDeAvaliacao->save();
        
        $data = array();
        $data['componenteDeAvaliacaoId'] = $this->componenteDeAvaliacao->componenteDeAvaliacaoId;
        $data['conjuntoDeConceitosId'] = $this->conjuntoDeConceitosId;
        $data['formaDeCalculo'] = $this->formaDeCalculo;
        
        // Multiunidade
        if ( $this->utilizaMultiUnidade() && strlen(sMultiUnidade::obterUnidadeLogada()) > 0 && !$this->getAttribute('unitid') )
        {
            $data['unitid'] = sMultiUnidade::obterUnidadeLogada();
        }
        
        if ( strlen($this->componenteDeAvaliacaoConceitoId) > 0 )
        {
            $sql = MSQL::updateTable('AcpComponenteDeAvaliacaoConceito', $data, array('componenteDeAvaliacaoConceitoId'=>$this->componenteDeAvaliacaoConceitoId) );            
            $ok = SDatabase::getInstance()->execute($sql);
        }
        else
        {
            $sql = MSQL::insertTable('AcpComponenteDeAvaliacaoConceito', $data);
            $ok = SDatabase::getInstance()->execute($sql);
            
            if ( $ok )
            {
                $id = SDatabase::getLastInsertId('AcpComponenteDeAvaliacaoConceito');
                $this->componenteDeAvaliacaoConceitoId = $id;
            }
        }
        
        return $ok;
    }
    
    /**
     * Lista os conceitos do componente de avaliação
     * @return type
     */
    public function listarConceitosDoModelo($modeloDeAvaliacaoId)
    {
        $sql = "WITH RECURSIVE data(node, path, linha) 
                    AS (
                     SELECT componentedeavaliacaoid, 
                            ARRAY[componentedeavaliacaoid],
                            ARRAY[(row_number() OVER(PARTITION BY componentedeavaliacaopai ORDER BY componentedeavaliacaoid asc))]
                            FROM acpcomponentedeavaliacao 
                  LEFT JOIN acprelacionamentodecomponentes
                         ON (acpcomponentedeavaliacao.componentedeavaliacaoid = acprelacionamentodecomponentes.componentedeavaliacaofilho)
                      WHERE componentedeavaliacaopai IS NULL
                        AND modelodeavaliacaoid = ?
                  UNION ALL
                     SELECT C1.componentedeavaliacaoid,
                            data.path||ARRAY[C1.componenteDeAvaliacaoid],
                            data.linha||ARRAY[(row_number() OVER(PARTITION BY C2.componentedeavaliacaopai ORDER BY C1.componentedeavaliacaoid asc))]
                       FROM acpcomponentedeavaliacao C1 
                  LEFT JOIN acprelacionamentodecomponentes C2
                         ON (C1.componentedeavaliacaoid = C2.componentedeavaliacaofilho)
                       JOIN data 
                         ON (C2.componentedeavaliacaopai=data.node)
                      WHERE NOT (ARRAY[C2.componentedeavaliacaofilho] && data.path) )

                     SELECT ARRAY_TO_STRING(data.linha,'.'),
                            cc.componenteDeAvaliacaoConceitoId,
                            ca.descricao,
                            ca.detalhes,
                            ca.classedecomponente,
                            ccc.descricao
                       FROM data
                  LEFT JOIN acprelacionamentodecomponentes rc
                         ON (data.node = rc.componentedeavaliacaofilho)
                 INNER JOIN acpComponenteDeAvaliacaoConceito cc
                         ON cc.componentedeavaliacaoid = data.node
                 INNER JOIN acpComponenteDeAvaliacao ca
                         ON ca.componenteDeAvaliacaoid = cc.componentedeavaliacaoid
                 INNER JOIN acpConjuntoDeConceitos ccc
                         ON ccc.conjuntoDeConceitosId = cc.conjuntoDeConceitosId
                      WHERE ca.modelodeavaliacaoid = ?
                   ORDER BY path;";
        
        $resultado = SDatabase::query(SAGU::prepare($sql, array($modeloDeAvaliacaoId, $modeloDeAvaliacaoId)));
        
        if( count($resultado) > 0 )
        {
            $classesDeComponente = AcpComponenteDeAvaliacao::listarClassesDeComponente();
            foreach( $resultado as $cod=>$linha )
            {
                $linha[4] = $classesDeComponente[$linha[4]];
                $resultado[$cod] = $linha;
            }
        }
        
        return $resultado;
    }
    
    public function delete()
    {
        $ok &= SDatabase::execute(MSQL::deleteTable('AcpComponenteDeAvaliacaoConceito', array('componenteDeAvaliacaoConceitoId'=>$this->componenteDeAvaliacaoConceitoId) ));
        return $ok;
    }
    
    public static function obterComponenteConceitoDoComponente($componenteDeAvaliacaoId)
    {
        $componenteDeAvaliacaoConceito = new AcpComponenteDeAvaliacaoConceito();
        $msql = $componenteDeAvaliacaoConceito->msql();
        $msql->addEqualCondition('componenteDeAvaliacaoId', $componenteDeAvaliacaoId);        
        $searchComponenteDeAvaliacaoConceito = $componenteDeAvaliacaoConceito->findList($msql);                

        if( count($searchComponenteDeAvaliacaoConceito) > 0 )
        {
            foreach($searchComponenteDeAvaliacaoConceito as $cod=>$linha)
            {
                $return = new AcpComponenteDeAvaliacaoConceito($cod);                                
            }
        }
        
        return $return;
    }
}
?>
