<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */
class AcpCurso extends SType
{
    protected $_utilizaNovoPadrao = true;
    protected $_utilizaMultiCentro = true;

    protected $_tableViewName = 'acpcurso';
    protected $_descriptionColumn = 'acpcurso.nome';

    protected $_associations = array(
        'docentes' => array(
            'mode' => 'many',
            'typeClass' => 'AcpCursoDocente',
            'joinColumnLeft' => 'cursoid',
            'joinColumnRight' => 'cursoid',
            'saveRelateds' => true,
        ),
        'camposadicionais' => array(
            'mode' => 'many',
            'typeClass' => 'AcpCamposAdicionaisCurso',
            'joinColumnLeft' => 'cursoid',
            'joinColumnRight' => 'cursoid',
            'saveRelateds' => true,
        ),
        'perfilcurso' => array(
            'mode' => 'one',
            'typeClass' => 'AcpPerfilCurso',
            'joinColumnLeft' => 'perfilcursoid',
            'joinColumnRight' => 'perfilcursoid',
        ),
    );

    const MODALIDADE_PRESENCIAL = 'P';
    const MODALIDADE_ENSINO_DISTANCIA = 'D';

    const SITUACAO_ATIVO = 'A';
    const SITUACAO_INATIVO = 'I';
    const SITUACAO_EM_EXTINCAO = 'E';
    const SITUACAO_SUSPENSO = 'S';
    const SITUACAO_ESPERA = 'W';
    const SITUACAO_REPRESENTADO_POR_OUTRO_CURSO = 'R';

    //cancelamento financeiro
    const CALCULAR_VALOR_PROPORCIONAL = 'P';
    const CANCELAR_TITULOS_NAO_VENCIDOS = 'C';

    /**
     * @var array AcpCursoDocente
     */
    public $docentes = array();

    /**
     * @var array AcpCamposAdicionaisCurso
     */
    public $camposadicionais = array();

    /**
     * @var AcpPerfilCurso
     */
    public $perfilcurso;

    public $cursoid;
    public $descricao;
    public $cursorepresentanteid;
    public $grauacademicoid;
    public $perfilcursoid;
    public $codigo;
    public $nome;
    public $nomeparadocumentos;
    public $modalidade;
    public $disciplinasadistancia;
    public $percentualcargahorariadistancia;
    public $titulacao;
    public $numeroformalvagas;
    public $situacao;
    public $datainicio;
    public $datafim;
    public $gratuito;
    public $percentualmultadesistencia;
    public $centerid;
    public $busca;
    public $lancarvalordecancelamento;
    public $cancelamentofinanceiro;

    public function __construct($id = null, $disableAssociations = false)
    {
        if ( in_array(MIOLO::_REQUEST('action'), array('main:process:inscricaoturmaexterna', 'main:process:inscricaopagamentoexterna', 'main:process:inscricaoexterna', 'main:process:termodeinscricao')) )
        {
            $this->_utilizaMultiCentro = false;
            $this->_tableViewName = null;
        }

        if ( $disableAssociations )
        {
            $this->_associations = array();
        }

        parent::__construct($id);
    }

    public function searchGrid($filters)
    {
       $cols[] = 'acpcurso.cursoid';
       $cols[] = 'acpcurso.codigo';
       $cols[] = 'acpcurso.perfilcursoid';
       $cols[] = 'acpcurso.nome';
       $cols[] = 'acpcurso.modalidade';
       $cols[] = 'acpcurso.situacao';
       $cols[] = 'acpcurso.datainicio';
       $cols[] = 'acpcurso.datafim';
       $cols[] = 'perfilcurso.cadastromatrizcurricular';
       $cols[] = 'perfilcurso.cadastrocoordenadores';

       $sql = "SELECT acpcurso.cursoid, 
              acpcurso.codigo,
              acpcurso.perfilcursoid,
              acpcurso.nome,
              acpcurso.modalidade,
              acpcurso.situacao,
              TO_CHAR(acpcurso.datainicio, '" . SAGU::getParameter('BASIC', 'MASK_DATE') ."'),
              TO_CHAR(acpcurso.datafim, '" . SAGU::getParameter('BASIC', 'MASK_DATE') ."'),
              perfilcurso.cadastromatrizcurricular,
              perfilcurso.cadastrocoordenadores
              FROM unit_acpcurso acpcurso
        INNER JOIN acpperfilcurso perfilcurso
                ON perfilcurso.perfilcursoid = acpcurso.perfilcursoid";

       $where = '';

       if ( strlen($filters->situacao) > 0 )
        {
            $where[] = "acpcurso.situacao = ?";
            $args[] = $filters->situacao;
        }
        if ( strlen($filters->modalidade) > 0 )
        {
            $where[] = 'acpcurso.modalidade = ?';
            $args[] = $filters->modalidade;
        }
        if ( strlen($filters->perfilcursoid) > 0 )
        {
            $where[] = 'acpcurso.perfilcursoid = ?';
            $args[] = $filters->perfilcursoid;
        }
        if ( strlen($filters->busca) > 0 )
        {
            $where[] = "(acpcurso.nome ILIKE '".'%'.$filters->busca.'%'."' OR acpcurso.codigo ILIKE ?)";
            $args[] = '%'.$filters->busca.'%';
        }
        if( count($args) > 0 )
        {
            $sql  .= ' WHERE ';
            $sql  .= implode(' AND ', $where);
        }
        return SAGU::resultToArray(SDatabase::query($sql, $args), $cols);
    }
    /**
     * @return array
     */
    public static function listarModalidades()
    {
        return array(
            self::MODALIDADE_PRESENCIAL => _M('Presencial'),
            self::MODALIDADE_ENSINO_DISTANCIA => _M('Ensino a distância'),
        );
    }

    /**
     * @return array
     */
    public static function listarSituacao()
    {
        return array(
            self::SITUACAO_ATIVO => _M('Ativo'),
            self::SITUACAO_INATIVO => _M('Inativo'),
            self::SITUACAO_EM_EXTINCAO => _M('Em extinção'),
            self::SITUACAO_SUSPENSO => _M('Suspenso'),
            self::SITUACAO_ESPERA => _M('Em espera'),
            self::SITUACAO_REPRESENTADO_POR_OUTRO_CURSO => _M('Representado por outro curso'),
        );
    }

    public function save() {
        $this->perfilcurso = null;

        $ok = parent::save();

        if( $ok )
        {
            $perfilCurso = new AcpPerfilCurso($this->perfilcursoid);
            if( $perfilCurso->cadastromatrizcurricular == DB_FALSE )
            {
                $this->atualizarMatrizEComponente();
            }
        }

        return $ok;
    }

    public static function obterPerfilIdDoCurso($cursoId)
    {
        $rows = SDatabase::query("SELECT perfilcursoid FROM acpcurso WHERE cursoid = ?", array($cursoId));

        return $rows[0][0];
    }

    public static function verificarCursoExiste($cursoId)
    {
        $sql = "SELECT cursoId
                  FROM acpCurso
                 WHERE cursoId = ?";

        $args[] = $cursoId;

        $return = SDatabase::query($sql, $args);

        if( strlen($return[0][0]) > 0 )
        {
            $result = true;
        }
        else
        {
            $result = false;
        }

        return $result;
    }

    /**
     * Caso o perfil do curso definir que NÃO UTILIZA CADASTRO DE MATRIZ CURRICULAR
     * cadastra automaticamente uma matriz, grupo e componente para o curso.
     */
    public function atualizarMatrizEComponente()
    {
        $situacao = $this->situacao;
        $situacaoComponente = DB_TRUE;

        //Faz a equivalência das situações do
        if( $situacao != self::SITUACAO_ATIVO && $situacao != self::SITUACAO_INATIVO && $situacao != self::SITUACAO_EM_EXTINCAO )
        {
            $situacao = self::SITUACAO_INATIVO;
            $situacaoComponente = DB_FALSE;
        }

        $searchMatrizCurricular = AcpMatrizCurricular::obterMatrizesCurricularesDoCurso($this->cursoid);

        if( count($searchMatrizCurricular) > 0 )
        {
            //Atualiza a matriz curricular
            $matrizCurricular = $searchMatrizCurricular[0];
        }
        else
        {
            //Insere a matriz curricular
            $matrizCurricular = new AcpMatrizCurricular();
        }
        $matrizCurricular->cursoid = $this->cursoid;
        $matrizCurricular->descricao = $this->nome;
        $matrizCurricular->situacao = $situacao;
        $matrizCurricular->series = '0';
        $matrizCurricular->datainicial = $this->datainicio;
        $matrizCurricular->datafinal = $this->datafim;

        $ok = $matrizCurricular->save();

        if( $ok )
        {
            $searchComponenteCurricular = AcpComponenteCurricular::obterComponentesCurricularesDaMatriz($matrizCurricular->matrizcurricularid);

            if( count($searchComponenteCurricular) > 0 )
            {
                $componenteCurricular = $searchComponenteCurricular[0];
            }
            else
            {
                $grupo = new AcpMatrizCurricularGrupo();
                $grupo->matrizcurricularid = $matrizCurricular->matrizcurricularid;
                $grupo->descricao = $this->nome;
                $grupo->ordem = '1';
                $grupo->serie = '1';
                $ok &= $grupo->save();

                $componenteCurricular = new AcpComponenteCurricular();
            }

            if( $ok )
            {
                $componenteCurricular->componentedisciplina = new AcpComponenteCurricularDisciplina();
                $componenteCurricular->codigo = $this->codigo;
                $componenteCurricular->nome = $this->nome;
                $componenteCurricular->descricao = $this->nome;
                $componenteCurricular->conteudo = $this->nome;
                $componenteCurricular->obrigatorio = DB_TRUE;
                $componenteCurricular->situacao = $situacaoComponente;

                //Obtém a lista com o tipo do componente curricular do perfil
                $perfilcurso = new AcpPerfilCurso($this->perfilcursoid);
                $tipocomponentecurricular = $perfilcurso->obterTiposComponenteCurricularLista();

                if ( $tipocomponentecurricular[0] )
                {
                    $componenteCurricular->tipocomponentecurricularid = $tipocomponentecurricular[0];
                    $componenteCurricular->tipo = AcpTipoComponenteCurricular::TIPO_DISCIPLINA;
                    $ok &= $componenteCurricular->save();

                    $serachComponenteCurricularMatriz = AcpComponenteCurricularMatriz::obterComponenteCurricularMatriz($componenteCurricular);

                    if( count($serachComponenteCurricularMatriz) > 0 )
                    {
                        $ok = true;
                    }
                    else
                    {
                        $componentecurricularmatriz = new AcpComponenteCurricularMatriz();
                        $componentecurricularmatriz->matrizcurriculargrupoid = $grupo->matrizcurriculargrupoid;
                        $componentecurricularmatriz->componentecurricularid = $componenteCurricular->componentecurricularid;
                        $componentecurricularmatriz->obrigatorio = DB_TRUE;
                        $componentecurricularmatriz->situacao = DB_TRUE;
                        $ok &= $componentecurricularmatriz->save();
                    }
                }
            }
        }

        return $ok;
    }

    public function delete()
    {
        $ocorrencias = new AcpOcorrenciaCurso();
        $sql = $ocorrencias->msql();
        $sql->addEqualCondition('AcpOcorrenciaCurso.cursoid', $this->cursoid);
        $searchOcorrencias = $ocorrencias->findMany($sql);
        if( count($searchOcorrencias) > 0 )
        {
            foreach($searchOcorrencias as $cod=>$ocorrencia)
            {
                $ocorrencia->delete();
            }
        }

        $matrizCurricular = new AcpMatrizCurricular();
        $sql = $matrizCurricular->msql();
        $sql->addEqualCondition('AcpMatrizCurricular.cursoid', $this->cursoid);
        $searchMatriz = $matrizCurricular->findMany($sql);
        if( count($searchMatriz) > 0 )
        {
            foreach($searchMatriz as $cod=>$matriz)
            {
                $matriz->delete();
            }
        }

        return parent::delete();
    }

    /**
     * Multicentro
     */
    public static function sincronizaCentro()
    {
        $curso = new AcpCurso(null, true);

        $cursos = $curso->findMany( $curso->msql()
            ->setWhere('acpcurso.centerid <> COALESCE(acpcurso.centeridold, -1)')
        );
//$cursos = array(1);
        return count($cursos) > 0 ? self::sincronizaPedagogico() : true;
    }

    public static function sincronizaPedagogico()
    {
        $sqls = array();

        // UPDATE AcpComponenteCurricular SET centerid=@x@ where centerid=@y@;
        /*$sqls[] = "update AcpComponenteCurricular set centerid=
        (select distinct centerid from acpcurso where cursoid=
            (select distinct cursoid from acpmatrizcurricular where AcpComponenteCurricular.matrizcurricularid=matrizcurricularid));";

        // UPDATE AcpComponenteCurricularDisciplina SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpComponenteCurricularDisciplina set centerid=
        (select distinct centerid from acpcurso where cursoid=
            (select distinct cursoid from acpmatrizcurricular where acpmatrizcurricular.componentecurricularid=componentecurricularid));";

        // UPDATE AcpComponenteCurricularTrabalhoConclusao SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpComponenteCurricularTrabalhoConclusao set centerid=
        (select distinct centerid from acpcurso where cursoid=
            (select distinct cursoid from acpmatrizcurricular where acpmatrizcurricular.componentecurricularid=componentecurricularid));";

        // UPDATE AcpCoordenadores SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpCoordenadores set centerid=(select distinct centerid from acpcurso where acpcoordenadores.cursoid = acpcurso.cursoid);";

        // UPDATE AcpCursoDocente SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpCursoDocente set centerid=(select distinct centerid from acpcurso where acpcursodocente.cursoid = acpcurso.cursoid);";

        // UPDATE AcpFrequencia SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpFrequencia set centerid=
        (Select distinct acpcurso.centerid
        From
           acpcurso
           Left Join acpocorrenciacurso on acpocorrenciacurso.cursoid=acpcurso.cursoid
           Left Join acpofertacurso on acpofertacurso.ocorrenciacursoid=acpocorrenciacurso.ocorrenciacursoid
           Left Join acpinscricao on acpinscricao.ofertacursoid=acpofertacurso.ofertacursoid
           Left Join acpinscricaoturmagrupo on acpinscricaoturmagrupo.inscricaoid=acpinscricao.inscricaoid
           Left Join acpmatricula on acpmatricula.inscricaoturmagrupoid=acpinscricaoturmagrupo.inscricaoturmagrupoid
        Where acpfrequencia.matriculaid = acpmatricula.matriculaid
        Limit 1);";

        // UPDATE AcpInscricao SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpInscricao set centerid= (Select c.centerid
        From acpinscricaoturmagrupo itg
        Left Join acpofertaturma ot ON ot.ofertaturmaid = itg.ofertaturmaid
        Left Join acpofertacurso oc ON oc.ofertacursoid = ot.ofertacursoid
        Left Join acpocorrenciacurso ocorrencia ON ocorrencia.ocorrenciacursoid = oc.ocorrenciacursoid
        Left Join acpcurso c ON c.cursoid = ocorrencia.cursoid
        Where itg.inscricaoid = acpinscricao.inscricaoid);";

        // UPDATE AcpInscricaoTurmaGrupo SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpInscricaoTurmaGrupo set centerid=
        (Select distinct acpcurso.centerid
        From
           acpcurso
           Left Join acpocorrenciacurso on acpocorrenciacurso.cursoid=acpcurso.cursoid
           Left Join acpofertacurso on acpofertacurso.ocorrenciacursoid=acpocorrenciacurso.ocorrenciacursoid
           Left Join acpinscricao on acpinscricao.ofertacursoid=acpofertacurso.ofertacursoid
           Left Join acpmatricula on acpmatricula.inscricaoturmagrupoid=acpinscricaoturmagrupo.inscricaoturmagrupoid
        Where AcpInscricaoTurmaGrupo.inscricaoid = acpmatricula.inscricaoid
        Limit 1);";

        // UPDATE AcpMatricula SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpMatricula set centerid=
        (Select distinct acpcurso.centerid
        From
           acpcurso
           Left Join acpocorrenciacurso on acpocorrenciacurso.cursoid=acpcurso.cursoid
           Left Join acpofertacurso on acpofertacurso.ocorrenciacursoid=acpocorrenciacurso.ocorrenciacursoid
           Left Join acpinscricao on acpinscricao.ofertacursoid=acpofertacurso.ofertacursoid
           Left Join acpinscricaoturmagrupo on acpinscricaoturmagrupo.inscricaoid=acpinscricao.inscricaoid
        Where acpmatricula.inscricaoturmagrupoid = acpinscricaoturmagrupo.inscricaoturmagrupoid
        Limit 1);";

        // UPDATE AcpMatrizCurricular SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpMatrizCurricular set centerid=(select distinct centerid from acpcurso WHERE AcpMatrizCurricular.cursoid = acpcurso.cursoid);";

        // UPDATE AcpMatrizCurricularGrupo SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpMatrizCurricularGrupo set centerid=
            (select distinct centerid from acpcurso where cursoid=
                (select distinct cursoid from acpmatrizcurricular where AcpMatrizCurricularGrupo.matrizcurricularid=matrizcurricularid
                 limit 1)
             limit 1);";

        // UPDATE AcpOcorrenciaHorarioOferta SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpOcorrenciaHorarioOferta set centerid=
        (Select distinct acpcurso.centerid
          From
               acpcurso
               Left Join acpocorrenciacurso on acpocorrenciacurso.cursoid=acpcurso.cursoid
               Left Join acpofertacurso on acpofertacurso.ocorrenciacursoid=acpocorrenciacurso.ocorrenciacursoid
               Left Join acpinscricao on acpinscricao.ofertacursoid=acpofertacurso.ofertacursoid
               Left Join acpinscricaoturmagrupo on acpinscricaoturmagrupo.inscricaoid=acpinscricao.inscricaoid
               Left Join acpmatricula on acpmatricula.inscricaoturmagrupoid=acpinscricaoturmagrupo.inscricaoturmagrupoid
               Left Join acpfrequencia on acpfrequencia.matriculaid=acpmatricula.matriculaid
               Left Join acpocorrenciahorariooferta on acpfrequencia.ocorrenciahorarioofertaid=acpocorrenciahorariooferta.ocorrenciahorarioofertaid
               Left Join acpofertacomponentecurricular on acpocorrenciahorariooferta.ofertacomponentecurricularid=acpofertacomponentecurricular.ofertacomponentecurricularid
         Where acpfrequencia.ocorrenciahorarioofertaid=AcpOcorrenciaHorarioOferta.ocorrenciahorarioofertaid
         Limit 1);";

        // UPDATE AcpOfertaComponenteCurricular SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpOfertaComponenteCurricular set centerid = (
        select c.centerid
        from acpofertacomponentecurricular occ
        left join acpofertaturma ot on ot.ofertaturmaid = occ.ofertaturmaid
        left join acpofertacurso oc on ot.ofertacursoid = oc.ofertacursoid
        left join acpocorrenciacurso ocorrencia on ocorrencia.ocorrenciacursoid = oc.ocorrenciacursoid
        left join acpcurso c on c.cursoid = ocorrencia.cursoid
        where occ.ofertacomponentecurricularid = AcpOfertaComponenteCurricular.ofertacomponentecurricularid );";

        // UPDATE AcpOfertaCurso SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpOfertaCurso set centerid = (
        select c.centerid
        from acpocorrenciacurso ocorrencia
        left join acpcurso c on c.cursoid = ocorrencia.cursoid
        where AcpOfertaCurso.ocorrenciacursoid = ocorrencia.ocorrenciacursoid );";

        // UPDATE AcpOfertaTurma SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpOfertaTurma set centerid = (
        Select c.centerid
        from acpofertacurso oc
        left join acpocorrenciacurso ocorrencia on ocorrencia.ocorrenciacursoid = oc.ocorrenciacursoid
        left join acpcurso c on c.cursoid = ocorrencia.cursoid
        where oc.ofertacursoid = acpofertaturma.ofertacursoid );";
*/

        // UPDATE AcpMatrizCurricular SET centerid=@x@ where centerid=@y@;
        $sqls[] = "update AcpMatrizCurricular set centerid=(select distinct centerid from acpcurso WHERE AcpMatrizCurricular.cursoid = acpcurso.cursoid);";

        $sqls[] = "update acpocorrenciacurso OC set centerid=
        (Select distinct acpcurso.centerid
          From 
               acpcurso
               Left Join acpocorrenciacurso on acpocorrenciacurso.cursoid=acpcurso.cursoid
               Left Join acpofertacurso on acpofertacurso.ocorrenciacursoid=acpocorrenciacurso.ocorrenciacursoid
               Left Join acpinscricao on acpinscricao.ofertacursoid=acpofertacurso.ofertacursoid
               Left Join acpinscricaoturmagrupo on acpinscricaoturmagrupo.inscricaoid=acpinscricao.inscricaoid
               Left Join acpmatricula on acpmatricula.inscricaoturmagrupoid=acpinscricaoturmagrupo.inscricaoturmagrupoid
               Left Join acpfrequencia on acpfrequencia.matriculaid=acpmatricula.matriculaid
               Left Join acpocorrenciahorariooferta on acpfrequencia.ocorrenciahorarioofertaid=acpocorrenciahorariooferta.ocorrenciahorarioofertaid
               Left Join acpofertacomponentecurricular on acpocorrenciahorariooferta.ofertacomponentecurricularid=acpofertacomponentecurricular.ofertacomponentecurricularid
         Where OC.cursoid=acpcurso.cursoid);";

        // Atualiza centeridold ao final do processo
        $sqls[] = "update acpcurso set centeridold=centerid;";

        return SDatabase::getInstance()->Execute($sqls);
    }

    public function obterCargaHorariaTotalDoCurso($cursoId)
    {
        $sql = " SELECT acp_obtercargahorariatotaldocurso(?) ";

        $args[] = $cursoId;

        $return = SDatabase::query($sql, $args);

        return $return[0][0];
    }

    public static function obterOfertasDeCursoId($cursoid)
    {
        $sql = "SELECT A.ofertaCursoId
                  FROM acpOfertaCurso A
            INNER JOIN acpOcorrenciaCurso B
                    ON (A.ocorrenciaCursoId = B.ocorrenciaCursoId)
                 WHERE B.cursoId = ?";
        $args[] = $cursoid;

        $result = SDatabase::query($sql, $args);

        foreach ($result as $row)
        {
            $return[] = $row[0];
        }

        return $return;
    }

    public function getChoiceComponentSQL($argument = null, $id = null)
    {
        $sql = parent::getChoiceComponentSQL($argument, $id);

        $args = $this->getAjaxArgs();

        $centro = SAGU::NVL($args->buscacentroidS, $args->centroid);

        if ( strlen($centro) > 0 )
        {
            $sql->addEqualCondition('acpcurso.centerid ', $centro);
        }

        return $sql;
    }
}
?>
