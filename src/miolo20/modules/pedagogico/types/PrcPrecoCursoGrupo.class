<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class PrcPrecoCursoGrupo extends SType
{
    protected $_utilizaNovoPadrao = true;
    
    public $precocursogrupoid;
    public $matrizcurriculargrupoid;
    public $precocursoid;
    public $valoravista;
    public $valoraprazo;
    
    public static function listarPrecoCursoGrupoDoPreco($precocursoid)
    {
        $type = new PrcPrecoCursoGrupo();
        $sql = $type->msql();
        $sql->addEqualCondition('PrcPrecoCursoGrupo.precocursoid', $precocursoid);
        return $type->findManyAsArray($sql);
    }
    
    public static function obterPrecoCursoGrupoDoPreco($precocursoid)
    {
        $type = new PrcPrecoCursoGrupo();
        $sql = $type->msql();
        $sql->addEqualCondition('PrcPrecoCursoGrupo.precocursoid', $precocursoid);
        return $type->findMany($sql);
    }
    
    public static function obterPrecoCursoGrupo($precocursoid, $matrizcurriculargrupoid)
    {
        $type = new PrcPrecoCursoGrupo();
        $sql = $type->msql();
        $sql->addEqualCondition('PrcPrecoCursoGrupo.precocursoid', $precocursoid);
        $sql->addEqualCondition('PrcPrecoCursoGrupo.matrizcurriculargrupoid', $matrizcurriculargrupoid);
        $precocursogrupo = $type->findOne($sql);
        return $precocursogrupo;
    }
    
    public function delete()
    {
        //Remove Preços condição do preço
        $type = new PrcPrecoCondicao();
        $sql = $type->msql();
        $sql->addEqualCondition('PrcPrecoCondicao.precocursogrupoid', $this->precocursogrupoid);
        $precocondicoes = $type->findMany($sql);
        
        if( count($precocondicoes) > 0 )
        {
            foreach ($precocondicoes as $cod=>$precocondicao)
            {
                $precocondicao instanceof PrcPrecoCondicao;
                $precocondicao->delete();
            }
        }
        
        return parent::delete();
    }
}
?>
