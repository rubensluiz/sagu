<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class PrcPrecoCurso extends SType
{
    protected $_utilizaMultiUnidade = true;
    
    protected $_utilizaNovoPadrao = true;
    
    protected $_tableAlias = 'preco';
      
    protected $_virtualColumns = array(
        '_ofertadaturma' => 'ofertadeturma.codigo || \' - \' || ofertadeturma.descricao',
        '_ocorrenciacurso' => '(SELECT B.nome || \' - \' || C.description || \' - \' || D.description FROM acpocorrenciacurso A LEFT JOIN acpcurso B on B.cursoid = A.cursoid LEFT JOIN basturn C ON C.turnid = A.turnid LEFT JOIN basunit D ON D.unitid = A.unitid WHERE A.ocorrenciacursoid = PrcPrecoCurso.ocorrenciacursoid)',
        '_ofertacurso' => '(SELECT A.ofertacursoid || \' - \' || A.descricao FROM acpofertacurso A WHERE A.ofertacursoid = PrcPrecoCurso.ofertacursoid)',
    );
//
    protected $_associations = array(
        'ofertadeturma' => array(
            'mode' => 'one',
            'typeClass' => 'AcpOfertaTurma',
            'joinColumnLeft' => 'ofertaturmaid',
            'joinColumnRight' => 'ofertaturmaid',
        ),
        'diadevencimento' => array(
            'mode' => 'many',
            'typeClass' => 'PrcDiaDeVencimento',
            'joinColumnLeft' => 'precocursoid',
            'joinColumnRight' => 'precocursoid',
        ),
    );
    
    /**
     *
     * @var AcpOfertaTurma
     */
    public $ofertaturma;
    /**
     *
     * @var AcpOcorrenciaCurso
     */
    public $ocorrenciacurso;
    /**
     *
     * @var AcpOfertaCurso
     */
    public $ofertacurso;
    
    public $gerarmensalidadeinicioaulas;
    
    /**
     * Tipo de preço para inscrição
     */
    const TIPO_INSCRICAO = 'I';
    
    /**
     * Tipo de preço para matrícula
     */
    const TIPO_MATRICULA = 'M';
    
    public $precocursoid;
    public $incomesourceid;
    public $ofertaturmaid;
    public $ocorrenciacursoid;
    public $ofertacursoid;
    public $bankaccountid;
    public $operationid;
    public $policyid;
    public $valoravista;
    public $valoraprazo;
    public $diasvencimentoentrada;
    public $datainicial;
    public $datafinal;
    public $tipo;
    public $prcprecocurso;
    public $habilitaconvenio;
    
    /**
     * Condição de pagamento para preço do tipo inscrição que é salvo automaticamente
     * @var int
     */
    public $condicaodepagamentoid;
    
    public $ativos;
    
    public function __construct($id = null, $disableAssociations = false)
    {
        if ( $disableAssociations )
        {
            $this->_associations = array();
            $this->_virtualColumns = array();
        }
        
        parent::__construct($id);
    }
    
    public static function obterTiposDeInscricao()
    {
        return array(self::TIPO_INSCRICAO => 'Inscrição',
                     self::TIPO_MATRICULA => 'Mensalidade');
    }
    
    
    /**
     * Obtém o preço da inscrição de uma oferta de curso
     * @param type $ofertacursoid
     * @return \PrcPrecoCurso
     */
    public static function obterPrecoInscricao($ofertacursoid, $datainicial = null, $datafinal = null)
    {
        $searchPreco = SDatabase::query(SAGU::prepare('SELECT * FROM prc_obterprecoinscricao(?, ?, ?)', array($ofertacursoid, $datainicial, $datafinal)));
        $precocursoid = $searchPreco[0][0];
        $preco = new PrcPrecoCurso($precocursoid);
        return $preco;
    }
    
    /**
     * Obtém os preços de inscrição de uma oferta de curso
     * @param int $ocorrenciacursoid
     * @return Array PrcPrecoCurso
     */
    public static function obterPrecosInscricao($ocorrenciacursoid, $datainicial = null, $datafinal = null)
    {
        $prcPrecoCursos= array();
        
        $sql = "SELECT precocursoid 
                  FROM prcprecocurso 
                 WHERE ocorrenciacursoid = ? 
                   AND tipo = 'I' 
                   AND datainicial <= COALESCE(?, now()::date) 
                   AND ( datafinal IS NULL OR datafinal  >= COALESCE(?, now()::date) )";
        
        $parameters = array();
        $parameters[] = $ocorrenciacursoid;
        $parameters[] = $datainicial;
        $parameters[] = $datafinal;
        
        $precos = SDatabase::query(SAGU::prepare($sql, $parameters));
        
        foreach ( $precos as $preco )
        {
            $precocursoid = $preco[0];
            $prcPrecoCursos[] = new PrcPrecoCurso($precocursoid);
        }
        
        return $prcPrecoCursos;
    }
    
    /**
     * Obtém o objeto PrcPrecoCurso da oferta de turma
     * @param int $ofertaturmaid - Código da oferta da turma
     * @return \PrcPrecoCurso
     */
    public static function obterPrecoDaOfertaDaTurma($ofertaturmaid, $tipo = null)
    {
        if ( !$tipo )
        {
            $tipo = PrcPrecoCurso::TIPO_INSCRICAO;
        }
        
       $searchPreco = SDatabase::query(SAGU::prepare('SELECT * FROM prc_obterprecodaofertadeturma(?, ?)', array($ofertaturmaid, $tipo)));
       $precocursoid = $searchPreco[0][0];
       
       $preco = new PrcPrecoCurso($precocursoid);
       return $preco;
    }
    
    /**
     * Obtém o objeto PrcPrecoCurso da oferta de curso
     * @param int $ofertaturmaid - Código da oferta da turma
     * @return \PrcPrecoCurso
     */
    public static function obterPrecoDaOfertaDoCurso($ofertacursoid, $tipo = null)
    {
        if ( !$tipo )
        {
            $tipo = PrcPrecoCurso::TIPO_INSCRICAO;
        }
        
       $searchPreco = SDatabase::query(SAGU::prepare('SELECT * FROM prc_obterprecodaofertadecurso(?, ?)', array($ofertacursoid, $tipo)));
       $precocursoid = $searchPreco[0][0];
       
       $preco = new PrcPrecoCurso($precocursoid);
       return $preco;
    }
    
    public function beforeFind(MSQL $sql)
    {
        // busca filtros extras para tela de busca Frequencias e notas
        if ( $this->ativos == DB_TRUE )
        {
            $sql->setWhereAnd( " (prcprecocurso.datainicial is null OR '".date("d/m/Y")."' >= prcprecocurso.datainicial   and  prcprecocurso.datafinal is null OR '".date("d/m/Y")."' <= prcprecocurso.datafinal) AND prcprecocurso.tipo = '".$this->tipo."'");
        }
        elseif ( strlen($this->tipo) > 0 )
        {
            $sql->setWhereAnd("prcprecocurso.tipo = '".$this->tipo."'");
        }
    }
    
    
    public function delete() 
    {
        //Remove grupos do preço
        $precocursogrupo = new PrcPrecoCursoGrupo();
        $gruposql = $precocursogrupo->msql();
        $gruposql->addEqualCondition('PrcPrecoCursoGrupo.precocursoid', $this->precocursoid);
        $precoscursogrupo = $precocursogrupo->findMany($gruposql);
        if( count($precoscursogrupo) > 0 )
        {
            foreach($precoscursogrupo as $codgrupo=>$grupo)
            {
                $grupo instanceof PrcPrecoCursoGrupo;
                $grupo->delete();
            }
        }
        
        //Remove Preços condição do preço
        $type = new PrcPrecoCondicao();
        $sql = $type->msql();
        $sql->addEqualCondition('PrcPrecoCondicao.precocursoid', $this->precocursoid);
        $precocondicoes = $type->findMany($sql);
        
        if( count($precocondicoes) > 0 )
        {
            foreach ($precocondicoes as $cod=>$precocondicao)
            {
                $precocondicao instanceof PrcPrecoCondicao;
                $precocondicao->delete();
            }
        }
        
        return parent::delete();
    }
    
    
    public function save() 
    {
        $ok = parent::save();
        
        //Caso o tipo for inscrição gera automaticamente o preco da condição
        if( $this->tipo == self::TIPO_INSCRICAO )
        {
            $searchPrecocondicao = PrcPrecoCondicao::obterPrecosCondicaoDoPreco($this->precocursoid);
            if( $searchPrecocondicao[0] instanceof PrcPrecoCondicao )
            {
                $precocondicao = $searchPrecocondicao[0];
                $precocondicao->precocursoid = $this->precocursoid;
                $precocondicao->condicaodepagamentoid = $this->condicaodepagamentoid;
                $precocondicao->operationid = $this->operationid;
                $precocondicao->valorparcela = $this->valoravista;
                $precocondicao->valortotal = $this->valoravista;
            }
            else
            {
                $precocondicao = new PrcPrecoCondicao();
                $precocondicao->precocursoid = $this->precocursoid;
                $precocondicao->condicaodepagamentoid = $this->condicaodepagamentoid;
                $precocondicao->operationid = $this->operationid;
                $precocondicao->valorparcela = $this->valoravista;
                $precocondicao->valortotal = $this->valoravista;
            }
            
            $precocondicao->save();
        }
        
        return $ok;
    }
    
    /**
     * Obtém o valor e a condição utilizada pelo aluno para geração do financeiro
     * 
     * @param type $inscricaoId
     * @return type
     */
    public static function obtemValorECondicaoDoCursoUtilizadoPeloAluno($inscricaoId)
    {
        $sql = " SELECT B.valorTotal,
                        C.numerodeparcelas
                   FROM AcpInscricaoTurmaGrupo A
             INNER JOIN PrcPrecoCondicao B
                     ON (A.precocondicaomatriculaid = B.precocondicaoid)
             INNER JOIN PrcCondicaoDePagamento C
                     ON (B.condicaodepagamentoid = C.condicaodepagamentoid)
                  WHERE A.inscricaoId = ? ";
        
        $args[] = $inscricaoId;
        
        $result = SDatabase::query($sql, $args);
        
        return $result[0];
    }
    
}
?>
