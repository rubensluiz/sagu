<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela acpModeloDeAvaliacao
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpComponenteDeAvaliacaoNotaRecuperacao extends Stype
{
    //Define que utiliza novo padrão
    protected $_utilizaNovoPadrao = true;
    
    protected $_tableName = 'AcpComponenteDeAvaliacaoNotaRecuperacao';
    
    public $componenteDeAvaliacaoNotaRecuperacaoId;
    
    public $componenteDeAvaliacaoNotaId;
    
    public $notaDeDispensa;
    
    public $pesoDoComponente;
    
    public $pesoDaRecuperacao;
    
    public $componenteDeAvaliacaoNota;
    
    const FORMA_CALCULO_SUBSTITUIR_SE_MAIOR = 'A';
    const FORMA_CALCULO_SUBSTITUIR_SEMPRE = 'E';
    
    public function __construct($id = null)
    {
        if ( strlen($id) > 0 )
        {
            parent::__construct($id);
            $this->componenteDeAvaliacaoNota = new AcpComponenteDeAvaliacaoNota($this->componenteDeAvaliacaoNotaId);
        }
    }
    
    public function getTableAlias()
    {
        return 'Recuperacao';
    }
    
    public function save()
    {
        
        $this->componenteDeAvaliacaoNota->save();
        
        $data = array();
        $data['componenteDeAvaliacaoNotaId'] = $this->componenteDeAvaliacaoNota->componenteDeAvaliacaoNotaId;
        $data['notaDeDispensa'] = $this->notaDeDispensa;
        $data['pesoDoComponente'] = $this->pesoDoComponente;
        $data['pesoDaRecuperacao'] = $this->pesoDaRecuperacao;        
        
        // Multiunidade
        if ( $this->utilizaMultiUnidade() && strlen(sMultiUnidade::obterUnidadeLogada()) > 0 && !$this->getAttribute('unitid') )
        {
            $data['unitid'] = sMultiUnidade::obterUnidadeLogada();
        }
        
        if ( strlen($this->componenteDeAvaliacaoNotaRecuperacaoId) > 0 )
        {
            $sql = MSQL::updateTable('AcpComponenteDeAvaliacaoNotaRecuperacao', $data, array('componenteDeAvaliacaoNotaRecuperacaoId'=>$this->componenteDeAvaliacaoNotaRecuperacaoId) );            
            $ok = SDatabase::getInstance()->execute($sql);
        }
        else
        {
            $sql = MSQL::insertTable('AcpComponenteDeAvaliacaoNotaRecuperacao', $data);            
            $ok = SDatabase::getInstance()->execute($sql);
            
            if ( $ok )
            {
                $id = SDatabase::getLastInsertId('AcpComponenteDeAvaliacaoNotaRecuperacao');
                $this->componenteDeAvaliacaoNotaRecuperacaoId = $id;
            }
        }
        
        return $ok;
    }
    
    public function listarFormasDeCalculo()
    {
        $module = MIOLO::getCurrentModule();
        $formas[self::FORMA_CALCULO_SUBSTITUIR_SEMPRE] = _M('Substituir sempre', $module);
        $formas[self::FORMA_CALCULO_SUBSTITUIR_SE_MAIOR] = _M('Substituir se for maior', $module);
        
        return $formas;
    }
    
    public static function obterComponenteRecuperacaoDaNota($componenteDeAvaliacaoNotaId)
    {
        $componenteDeAvaliacaoNotaRecuperacao = new AcpComponenteDeAvaliacaoNotaRecuperacao();        
        $msql = $componenteDeAvaliacaoNotaRecuperacao->msql();
        $msql->addEqualCondition('componenteDeAvaliacaoNotaId', $componenteDeAvaliacaoNotaId);        
        $searchComponenteDeAvaliacaoNotaRecuperacao = $componenteDeAvaliacaoNotaRecuperacao->findList($msql);        
        
        if( count($searchComponenteDeAvaliacaoNotaRecuperacao) > 0 )
        {
            foreach($searchComponenteDeAvaliacaoNotaRecuperacao as $cod=>$linha)
            {
                
                $componenteNotaRecuperacao = new AcpComponenteDeAvaliacaoNotaRecuperacao($cod);                                
            }
        }
        
        return $componenteNotaRecuperacao;
    }
}
?>
