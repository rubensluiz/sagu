<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela acpModeloDeAvaliacao
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpComponenteDeAvaliacao extends SType
{    
    //Define que utiliza novo padrão
    protected $_utilizaNovoPadrao = true;
    
    protected $_tableName = 'AcpComponenteDeAvaliacao';
    
    public $componenteDeAvaliacaoId;
    
    public $modeloDeAvaliacaoId;
    
    public $descricao;
    
    public $detalhes;
        
    public $exigeAvaliacoesParciais;
    
    public $permiteAlteracoes;
    
    public $classeDeComponente;
    
    public $ordem;
    
    public $componenteDeAvaliacaoPai;
    
    public $componentesDeAvaliacaoFilhos;
    
    const CLASSE_RECUPERACAO = 'R';
    const CLASSE_NORMAL = 'N';    
    const CLASSE_FINAL = 'F';    
    
    public function __construct($id = null)
    {
        if ( strlen($id) > 0 )
        {
            parent::__construct($id);
        }
    }
    
    /**
     * @return AcpComponenteDeAvaliacao
     */
    public function obterComponenteDeAvaliacaoPai()
    {
        if( !strlen($this->componenteDeAvaliacaoPai) > 0 )
        {
            $this->componenteDeAvaliacaoPai = AcpRelacionamentoDeComponentes::obterComponentePai($this->componenteDeAvaliacaoId);
        }
        
        return $this->componenteDeAvaliacaoPai;
    }
    
    public function obterComponentesDeAvaliacaoFilhos()
    {
        if( !strlen($this->componenteDeAvaliacaoFilhos) > 0 )
        {
            $this->componenteDeAvaliacaoFilhos = AcpRelacionamentoDeComponentes::obterComponentesDeAvaliacaoFilhos($this->componenteDeAvaliacaoId);
        }
        
        return $this->componenteDeAvaliacaoFilhos;
    }
    
    public function listarClassesDeComponente()
    {
        return array( self::CLASSE_NORMAL => 'Normal',
                      self::CLASSE_RECUPERACAO => 'Recuperação',
                      self::CLASSE_FINAL => 'Final');
    }
    
    public function save()
    {             
        $data = array();        
        $data['modeloDeAvaliacaoId'] = $this->modeloDeAvaliacaoId;
        $data['descricao'] = $this->descricao;
        $data['detalhes'] = $this->detalhes;
        
        if( strlen($this->exigeAvaliacoesParciais) > 0 )
        {
            $data['exigeAvaliacoesParciais'] = $this->exigeAvaliacoesParciais;
        }
        if( strlen($this->permiteAlteracoes) > 0 )
        {
            $data['permiteAlteracoes'] = $this->permiteAlteracoes;
        }
        $data['classeDeComponente'] = $this->classeDeComponente;
        $data['ordem'] = '1';
        
        // Multiunidade
        if ( $this->utilizaMultiUnidade() && strlen(sMultiUnidade::obterUnidadeLogada()) > 0 && !$this->getAttribute('unitid') )
        {
            $data['unitid'] = sMultiUnidade::obterUnidadeLogada();
        }

        if ( strlen($this->componenteDeAvaliacaoId) > 0 )
        {            
            $sql = MSQL::updateTable('AcpComponenteDeAvaliacao', $data, array('componenteDeAvaliacaoId'=>$this->componenteDeAvaliacaoId) );
            $ok = SDatabase::getInstance()->execute($sql);
        }
        else
        {
            $sql = MSQL::insertTable('AcpComponenteDeAvaliacao', $data);
            $ok = SDatabase::getInstance()->execute($sql);
            
            if ( $ok )
            {   
                $id = SDatabase::getLastInsertId('AcpComponenteDeAvaliacao');
                $this->componenteDeAvaliacaoId = $id;
                
                //Se possuir componente de avaliação pai insere
                if( strlen($this->componenteDeAvaliacaoPai) > 0 )
                {
                    $relacionamentoDeComponentes = new AcpRelacionamentoDeComponentes();
                    $relacionamentoDeComponentes->componenteDeAvaliacaoFilho = $this->componenteDeAvaliacaoId;
                    $relacionamentoDeComponentes->componenteDeAvaliacaoPai = $this->componenteDeAvaliacaoPai;
                    $relacionamentoDeComponentes->save();
                }
            }
        }
        
        return $ok;
    }
    
    public function listarComponentesDoModelo($modeloDeAvaliacaoId)
    {
        $sql = "WITH RECURSIVE data(node, path, linha) 
                    AS (
                     SELECT componentedeavaliacaoid, 
                            ARRAY[componentedeavaliacaoid],
                            ARRAY[(row_number() OVER(PARTITION BY componentedeavaliacaopai ORDER BY componentedeavaliacaoid asc))]
                            FROM acpcomponentedeavaliacao 
                  LEFT JOIN acprelacionamentodecomponentes
                         ON (acpcomponentedeavaliacao.componentedeavaliacaoid = acprelacionamentodecomponentes.componentedeavaliacaofilho)
                      WHERE componentedeavaliacaopai IS NULL
                        AND modelodeavaliacaoid = ?
                  UNION ALL
                     SELECT C1.componentedeavaliacaoid,
                            data.path||ARRAY[C1.componenteDeAvaliacaoid],
                            data.linha||ARRAY[(row_number() OVER(PARTITION BY C2.componentedeavaliacaopai ORDER BY C1.componentedeavaliacaoid asc))]
                       FROM acpcomponentedeavaliacao C1 
                  LEFT JOIN acprelacionamentodecomponentes C2
                         ON (C1.componentedeavaliacaoid = C2.componentedeavaliacaofilho)
                       JOIN data 
                         ON (C2.componentedeavaliacaopai=data.node)
                      WHERE NOT (ARRAY[C2.componentedeavaliacaofilho] && data.path) )

                     SELECT ARRAY_TO_STRING(data.linha,'.'),
                            ca.componenteDeAvaliacaoId,
                            ca.descricao,
                            ca.detalhes,
                            ca.classedecomponente
                       FROM data
                  LEFT JOIN acprelacionamentodecomponentes rc
                         ON (data.node = rc.componentedeavaliacaofilho)                 
                 INNER JOIN acpComponenteDeAvaliacao ca
                         ON ca.componenteDeAvaliacaoid = data.node
                      WHERE ca.modelodeavaliacaoid = ?
                   ORDER BY path;";
        
        $resultado = SDatabase::query(SAGU::prepare($sql, array($modeloDeAvaliacaoId, $modeloDeAvaliacaoId)));
        
        if( count($resultado) > 0 )
        {
            $classesDeComponente = AcpComponenteDeAvaliacao::listarClassesDeComponente();
            foreach( $resultado as $cod=>$linha )
            {
                $linha[4] = $classesDeComponente[$linha[4]];
                $resultado[$cod] = $linha;
            }
        }
        
        return $resultado;
    }
    
    public function delete() 
    {        
        //Remove componente Nota        
        $componenteDeAvaliacaoNota = AcpComponenteDeAvaliacaoNota::obterComponenteNotaDoComponente($this->componenteDeAvaliacaoId);
        if( $componenteDeAvaliacaoNota )
        {
            $ok = $componenteDeAvaliacaoNota->delete();
        }            
         
        //Remove componente Conceito
        $componenteDeAvaliacaoConceito = AcpComponenteDeAvaliacaoConceito::obterComponenteConceitoDoComponente($this->componenteDeAvaliacaoId);
        if( $componenteDeAvaliacaoConceito )
        {
            $ok &= $componenteDeAvaliacaoConceito->delete();
        }
        
        //Remove o relacionamento de componente pai
        $ok &= SDatabase::execute(MSQL::deleteTable('AcpRelacionamentoDeComponentes', array('componenteDeAvaliacaoFilho'=>$this->componenteDeAvaliacaoId) ));
        
        //Remove os componentes de avaliacao filhos
        $componentesDeAvaliacaoFilhos = $this->obterComponentesDeAvaliacaoFilhos();
        if( count($componentesDeAvaliacaoFilhos) > 0 )
        {
            foreach($componentesDeAvaliacaoFilhos as $cod => $componenteFilho)
            {
                //Remove o relacionamento filho                
                if( AcpRelacionamentoDeComponentes::possuiComponentesFilhos($componenteFilho->componenteDeAvaliacaoId) )
                {
                    $relacionamentoFilho = new AcpRelacionamentoDeComponentes($componenteFilho->componenteDeAvaliacaoId);                
                    $relacionamentoFilho->delete();
                }
                //Remove o componente filho
                $componenteFilho->delete();
            }
        }
        
        // Verifica avaliacoes
        $avaliacao = new AcpAvaliacao();
        $count = $avaliacao->findCount( $avaliacao->msql()->addEqualCondition('AcpAvaliacao.componenteDeAvaliacaoId', $this->componenteDeAvaliacaoId) );

        if ( $count > 0 )
        {
            throw new Exception( _M('Existem avaliações que estão registradas para este componente, portanto, não pode ser removido.') );
        }
        
        //Remove o componente de avaliação
        $sql = MSQL::deleteTable('AcpComponenteDeAvaliacao', array('componenteDeAvaliacaoId'=>$this->componenteDeAvaliacaoId) );
        $ok &= SDatabase::execute($sql);
             
        return $ok;
    }
    
    /**
     * Busca os componentes de avaliação de determinado Modelo de avaliação
     * @param type $modeloDeAvaliacaoId
     * @return \AcpComponenteDeAvaliacao
     */
    public static function obterComponentesDeAvaliacaoDoModelo($modeloDeAvaliacaoId)
    {
        $componenteDeAvaliacao = new AcpComponenteDeAvaliacao();
        $msql = $componenteDeAvaliacao->msql();
        $msql->setColumns('componenteDeAvaliacaoId');
        $msql->addEqualCondition('modeloDeAvaliacaoId', $modeloDeAvaliacaoId);
        $searchComponenteDeAvaliacao = $componenteDeAvaliacao->findList($msql);                

        if( count($searchComponenteDeAvaliacao) > 0 )
        {
            foreach($searchComponenteDeAvaliacao as $cod=>$linha)
            {
                $return[] = new AcpComponenteDeAvaliacao($cod);
            }
        }
        
        return $return;
    }
}
?>
