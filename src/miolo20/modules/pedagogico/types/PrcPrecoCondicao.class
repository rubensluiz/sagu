<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class created on 31/01/2014
 */

class PrcPrecoCondicao extends SType
{
    protected $_utilizaMultiUnidade = true;
    
    protected $_utilizaNovoPadrao = true;
    
    protected $_associations = array(
        'condicaodepagamento' => array(
            'mode' => 'one',
            'typeClass' => 'PrcCondicaoDePagamento',
            'joinColumnLeft' => 'condicaodepagamentoid',
            'joinColumnRight' => 'condicaodepagamentoid',
        ) );
    
    public $precocondicaoid;
    public $precocursoid;
    public $precocursogrupoid;
    public $condicaodepagamentoid;
    public $valortotal;    
    public $valorparcela;  
    public $condicaodepagamento;
    public $operationid;
    
    public function __construct($id = null, $disableAssociations = false)
    {
        if ( $disableAssociations )
        {
            $this->_associations = array();
        }
        
        parent::__construct($id);
    }
    
    /**
     * Obtém o(s) precos condição do preço
     * @param type $precocursoid
     * @return type
     */
    public static function obterPrecosCondicaoDoPreco($precocursoid)
    {
        $type = new PrcPrecoCondicao();
        $sql = $type->msql();
        $sql->addEqualCondition('PrcPrecoCondicao.precocursoid', $precocursoid);
        return $type->findMany($sql);
    }
    
    /**
     * Obtém o PrcPrecoCondicao da condição de pagamento e preco do curso
     * @param type $condicaodepagamentoid
     * @param type $precocursoid
     * @return type
     */
    public static function obterPrecoCondicao($condicaodepagamentoid, $precocursoid, $precocursogrupoid)
    {
        $type = new PrcPrecoCondicao();
        $sql = $type->msql();
        $sql->addEqualCondition('PrcPrecoCondicao.condicaodepagamentoid', $condicaodepagamentoid);
        $sql->addEqualCondition('PrcPrecoCondicao.precocursoid', $precocursoid);
        if( strlen($precocursogrupoid) > 0 )
        {
            $sql->addEqualCondition('PrcPrecoCondicao.precocursogrupoid', $precocursogrupoid);
        }
        return $type->findOne($sql);
    }
    
    
    /**
     * Lista as condições de pagamento de determinado preço de curso
     * @param type $precocursoid
     * @return type
     */
    public static function listarCondicoesDePagamentoDoPreco($precocursoid)
    {
        $type = new PrcPrecoCondicao();
        $sql = $type->msql();
        $sql->setColumns('*');
        $sql->addEqualCondition('PrcPrecoCondicao.precocursoid', $precocursoid);
        $searchPrecoCondicoes = $type->findMany($sql);
        if( count($searchPrecoCondicoes) > 0 )
        {
            foreach( $searchPrecoCondicoes as $cod=>$linha)
            {
                $condicao = new PrcCondicaoDePagamento($linha->condicaodepagamentoid);
                $return[$linha->condicaodepagamentoid] = $condicao->descricao;
            }
        }
        
        return $return;
    }
    
    /**
     * Obtém os valores da condição de pagamento selecionada
     * @param type $precocursoid
     * @param type $condicaodepagamentoid
     * @param type $matrizcurriculargrupoid
     */
    public static function obterValoresDaCondicao($precocursoid, $condicaodepagamentoid, $matrizcurriculargrupoid = null, $precocursogrupoid = null)
    {
        $precocurso = new PrcPrecoCurso($precocursoid);

        if ( AcpOcorrenciaCurso::permiteInscricaoPorGrupo($precocurso->ocorrenciacursoid) )
        {
            $data = self::obterValoresDaCondicaoPorGrupo($precocursoid, $condicaodepagamentoid, $matrizcurriculargrupoid, $precocursogrupoid);
        }
        else
        {
            $data = self::obterValoresDaCondicaoPorTurma($precocursoid, $condicaodepagamentoid);
        }
        
        foreach($data as $cod => $linha)
        {
            $return[] = new PrcPrecoCondicao($linha[0]);
        }
        
        return $return;
    }
    
    /**
     * Obtém os valores das condições de pagamento para inscricoes por grupo para o curso/condicao de pagamento
     * @param type $precocursoid
     * @param type $condicaodepagamentoid
     * @param type $matrizcurriculargrupoid
     * @return type
     */
    public static function obterValoresDaCondicaoPorGrupo($precocursoid, $condicaodepagamentoid, $matrizcurriculargrupoid = null, $precocursogrupoid = null)
    {
        //Obter valores da condição por grupo
        $sql = "SELECT precocondicao.precocondicaoid
                  FROM prccondicaodepagamento condicaodepagamento
            INNER JOIN prcprecocondicao precocondicao on precocondicao.condicaodepagamentoid=condicaodepagamento.condicaodepagamentoid
            INNER JOIN prcprecocursogrupo precocursogrupo on precocondicao.precocursogrupoid=precocursogrupo.precocursogrupoid
            INNER JOIN prcprecocurso precocurso on precocursogrupo.precocursoid=precocurso.precocursoid
                WHERE precocurso.precocursoid = ?
                  AND precocondicao.condicaodepagamentoid = ?";
        
        $args[] = $precocursoid;
        $args[] = $condicaodepagamentoid;
        
        if( strlen($matrizcurriculargrupoid) > 0 )
        {
            $sql .= " AND precocursogrupo.matrizcurriculargrupoid = ?";
            $args[] = $matrizcurriculargrupoid;
        }
        
        if( strlen($precocursogrupoid) > 0 )
        {
            $sql .= " AND precocondicao.precocursogrupoid = ?";
            $args[] = $precocursogrupoid;
        }
        
        return SDatabase::query($sql, $args);
    }
    
    /**
     * Obtém os valores das condições de pagamento para inscrições por turma para o preco do curso/condição de pagamento selecionada
     * @param type $precocursoid
     * @param type $condicaodepagamentoid
     * @return type
     */
    public static function obterValoresDaCondicaoPorTurma($precocursoid, $condicaodepagamentoid)
    {
        $sql = "SELECT precocondicao.precocondicaoid
                FROM prcprecocondicao precocondicao
          INNER JOIN prcprecocurso precocurso on precocondicao.precocursoid=precocurso.precocursoid
           LEFT JOIN prccondicaodepagamento condicaodepagamento on precocondicao.condicaodepagamentoid=condicaodepagamento.condicaodepagamentoid
               WHERE precocurso.precocursoid = ?
                 AND condicaodepagamento.condicaodepagamentoid = ?";
        
        $args[] = $precocursoid;
        $args[] = $condicaodepagamentoid;
        
        return SDatabase::query($sql, $args);
    }
    
    public function delete()
    {
        // Validacao de referencia
        $itg = new AcpInscricaoTurmaGrupo();
        $count = $itg->findCount( $itg->msql()->addEqualCondition('AcpInscricaoTurmaGrupo.precocondicaomatriculaid', $this->precocondicaoid) );
        
        if ( $count > 0 )
        {
            throw new Exception(_M('Ops! Existe @1 matrícula(s) que utilizam esta condição de preço, e por este motivo, não pode ser removido.', null, $count));
        }
        
        return parent::delete();
    }
}
?>
