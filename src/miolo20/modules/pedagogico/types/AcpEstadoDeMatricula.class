<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela acpEstadoDeMatricula
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpEstadoDeMatricula extends SType
{
    const SITUACAO_APROVADO = 't'; // quando coluna estiver como TRUE na tabela
    const SITUACAO_REPROVADO = 'f'; // quando coluna estiver como FALSE na tabela
    const SITUACAO_PENDENTE = ''; // quando coluna aprovado estiver como NULL na tabela
    
    protected $_utilizaNovoPadrao = true;
    
    protected $_defaultOrder = 'AcpEstadoDeMatricula.descricao';
    
    protected $_virtualColumns = array(
        '_situacao' => 'AcpEstadoDeMatricula.aprovado', // utilizado na GrdEstadoDeMatriculaSearch
    );
    
    /**
     * Código do estado de marícula
     * @var integer
     */
    public $estadoDeMatriculaId;
    
    /**
     * Descrição do estado de matrícula
     * @var text
     */
    public $descricao;
    
    
    /**
     * Se a situação aprova ou reprova
     * @var type 
     */
    public $aprovado;


    /**
     *
     * @return array
     */
    public static function listarParaCombo($aprovados = null)
    {
        $type = new AcpEstadoDeMatricula();
        $sql = $type->msql();
        
        if( !is_null($aprovados) )
        {
            if( $aprovados )
            {
                $sql->addEqualCondition('aprovado', DB_TRUE);
            }
            else
            {
                $sql->addEqualCondition('aprovado', DB_FALSE);
            }
        }
        
        // estados pendentes nao devem aparecer na maioria dos casos
        $sql->setWhere('aprovado IS NOT NULL');
        
        return $type->findList($sql);
    }
    
    /**
     * @return array
     */
    public static function listarEstados()
    {
        $lista = array();
        $lista[self::SITUACAO_APROVADO] = _M('Aprovado');
        $lista[self::SITUACAO_REPROVADO] = _M('Reprovado');
        $lista[self::SITUACAO_PENDENTE] = _M('Pendente');
        
        return $lista;
    }
    
    /**
     * @return boolean
     */
    public static function existeEstadoPendente()
    {
        $sql = "SELECT COUNT(*) FROM acpestadodematricula WHERE aprovado IS NULL";
        $result = SDatabase::query($sql);
        
        return $result[0][0] > 0;
    }
       
    public function delete()
    {
        $matricula = new AcpMatricula();
        $msql = $matricula->msql();
        $msql->addEqualCondition('estadodematriculaid', $this->estadoDeMatriculaId);
        $countMatriculas = $matricula->findCount($msql);
        if( $countMatriculas > 0 )
        {    
           throw new Exception(_M('Não é possível remover este estado de matrícula pois já existem matrículas que o utilizam')); 
        }      
        return parent::delete();  
    }   
}