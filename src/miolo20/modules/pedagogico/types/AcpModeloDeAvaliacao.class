<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela acpModeloDeAvaliacao
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpModeloDeAvaliacao extends SType
{   
    //Define que utiliza novo padrão
    protected $_utilizaNovoPadrao = true;
    
    /**
     * Código do modelo de avaliação
     * @var integer
     */
    public $modeloDeAvaliacaoId;
    
    /**
     * Descrição do modelo de avaliação
     * @var text
     */
    public $descricao;
    
    /**
     * Quais dados serão utilizados. Valores possíveis são Nota, Conceito e Parecer
     * @var char
     */
    public $tipoDeDados;
    
    /**
     * Onde o modelo poderá ser usado. Valores possíveis são Componente curricular, Série, Curso
     * @var char
     */
    public $aplicacao;
    
    /**
     * Situação do modelo.
     * @var boolean
     */
    public $ativo;
    
    /**
     * Informações relacionadas ao resultado final, como orientações, documentos (leis, portarias), etc.
     * @var char
     */
    public $detalhesDoResultadoFinal;
    
    /**
     * Define o grau de precisão dos arredondamentos.
     * @var float 
     */
    public $grauDePrecisao;
    
    /**
     * Habilita/desabilita o controle por frequência.
     * @var boolean 
     */
    public $habilitaControleDeFrequencia;
    
    /**
     * Habilita o registro de componentes de avaliação.
     * @var boolean 
     */
    public $habilitaComponenteDeAvaliacao;
    
    /**
     * Habilita o registro de recuperações.
     * @var boolean 
     */
    public $habilitarRecuperacoes;
    
    /**
     * Estado de matrícula utilizado para aprovação sem necessidade de recuperação.
     * @var int 
     */
    public $estadoDeAprovacao;
    
    /**
     * Estado de matrícula utilizado para reprovação sem realização de recuperação.
     * @var int 
     */
    public $estadoDeReprovacao;
    
    /**
     * Estado de matrícula utilizado para aprovação com necessidade de recuperação. 
     * @var int 
     */
    public $estadoDeMatriculaAprovacaoRecuperacaoId;
    
    /**
     * Estado de matrícula utilizado para reprovação com realização de recuperação.
     * @var int
     */
    public $estadoDeMatriculaReprovacaoRecuperacaoId;
    
    /**
     * Valor esperado para aprovação
     * @var type 
     */
    public $resultadoDeAprovacao;
    
    /**
     * Componente de frequência
     * @var AcpControleDeFrequencia 
     */
    public $controleDeFrequencia;
    
    /**
     * Constante referente aos tipos de aplicação
     */
    const APLICACAO_COMPONENTE_CURRICULAR = '1';
    const APLICACAO_MODULO = '2';
    const APLICACAO_CURSO = '3';
    
    
    /**
     * Constantes referente aos tipo de dados
     */
    const TIPO_NOTA = 'N';
    const TIPO_CONCEITO = 'C';
    const TIPO_PARECER = 'P';
    const TIPO_NENHUM = '-';

    public function __construct($id = null)
    {
        if ( strlen($id) > 0 )
        {
            parent::__construct($id);
            
            $controleDeFrequencia = AcpControleDeFrequencia::obterControleDeFrequenciaDoModelo($id);
            if( !$controleDeFrequencia )
            {
                $controleDeFrequencia = new AcpControleDeFrequencia();
            }
            
            $this->controleDeFrequencia = $controleDeFrequencia;
        }
    }

    /**
     * Lista os tipos de estado disponíveis
     * @return array
     */
    public static function listarTiposDeDados()
    {
        $module = MIOLO::getCurrentModule();
        
        return array( self::TIPO_NOTA => _M('Nota', $module),
                      self::TIPO_CONCEITO=> _M('Conceito', $module),
                      self::TIPO_PARECER => _M('Parecer', $module),
                      self::TIPO_NENHUM => _M('Nenhum', $module));
    }

    /**
     * Lista os tipos de aplicações disponíveis
     * @return array
     */
    public static function listarAplicacoes()
    {
        $module = MIOLO::getCurrentModule();
        
        return array( self::APLICACAO_COMPONENTE_CURRICULAR => _M('Componente curricular', $module),
                      self::APLICACAO_MODULO => _M('Módulo', $module),
                      self::APLICACAO_CURSO => _M('Curso', $module)
        );
    }
    
    public function save()
    {
        $this->validaModeloEmUso();
        
        $ok = parent::save();        
        if( $this->controleDeFrequencia && $this->habilitaControleDeFrequencia == DB_TRUE )
        {
            $this->controleDeFrequencia->modeloDeAvaliacaoId = $this->getPkeyValue();
            $ok &= $this->controleDeFrequencia->save();
        }

        return $ok;
    }
    
    public function delete()
    {
        if( $this->controleDeFrequencia )
        {
            $ok = $this->controleDeFrequencia->delete();
        }
        
        //Remover componentes de avaliação
        $componenteDeAvaliacao = AcpComponenteDeAvaliacao::obterComponentesDeAvaliacaoDoModelo($this->modeloDeAvaliacaoId);
        if( count($componenteDeAvaliacao) > 0 )
        {
            foreach($componenteDeAvaliacao as $cod=>$componente)
            {   
                $ok &= $componente->delete();
            }
        }
        
        //Verifica perfis de curso utilizando
        $perfil = new AcpPerfilCurso();
        $count = $perfil->findCount( $perfil->msql()->setWhere('
                acpperfilcurso.modelodeavaliacaogeral = ?
             OR acpperfilcurso.modelodeavaliacaoseriado = ?', array($this->modeloDeAvaliacaoId, $this->modeloDeAvaliacaoId)) );
        
        if ( $count > 0 )
        {
            throw new Exception(_M('Existe @1 perfi(s) de curso utilizando este modelo de avaliação, portanto, não pode ser removido.', null, $count));
        }
        
        $ok &= parent::delete();
        return true;
    }
    
    /**
     * Obtém o modelo de avaliação da oferta de componente curricular
     * @param type $ofertacomponentecurricularid
     * @return \AcpModeloDeAvaliacao
     */
    public static function obterModeloDaOfertaDeComponenteCurricular($ofertacomponentecurricularid)
    {
        $result = SDatabase::query("SELECT modelodeavaliacaoid FROM acp_obtermodelodaofertadecomponentecurricular(?);", array($ofertacomponentecurricularid));
        $modelodeavaliacaoid = $result[0][0];
        
        return new AcpModeloDeAvaliacao($modelodeavaliacaoid);
    }
    
    /**
     * Obtém o modelo de avaliação a partir do perfil de curso
     * @param type $perfilcursoid
     * @return \AcpModeloDeAvaliacao
     */
    public static function obterModeloDoPerfilDeCurso($perfilcursoid, $tipocomponentecurricularid)
    {
        $perfilcurso = new AcpPerfilCurso($perfilcursoid);
        $perfilcursocomponentecurricularsearch = new AcpPerfilCursoComponenteCurricular();
        $sqlperfil = $perfilcursocomponentecurricularsearch->msql();
        $sqlperfil->addEqualCondition('componentecurricular.perfilcursoid', $perfilcursoid);
        $sqlperfil->addEqualCondition('componentecurricular.tipocomponentecurricularid', $tipocomponentecurricularid);
        $perfilcursocomponentecurricular = $perfilcursocomponentecurricularsearch->findOne($sqlperfil);
        if( strlen($perfilcursocomponentecurricular->modelodeavaliacaoid) > 0 )
        {
            $modelodeavaliacao = new AcpModeloDeAvaliacao($perfilcursocomponentecurricular->modelodeavaliacaoid);
        }
        else
        {
            $modelodeavaliacao = new AcpModeloDeAvaliacao($perfilcurso->modelodeavaliacaogeral);
        }
        
        return $modelodeavaliacao;
    }
    
    public function getChoiceComponentSQL($argument = null, $id = null)
    {
        $sql = parent::getChoiceComponentSQL($argument, $id);
        $sql->addEqualCondition('acpmodelodeavaliacao.ativo', DB_TRUE);
        return $sql;
    }
    
    public function validaModeloEmUso()
    {
        if ( (strlen($this->modeloDeAvaliacaoId) > 0 ) && ( $this->ativo == DB_FALSE ) )
        {
            $perfis = AcpPerfilCurso::perfisQueUtilizamModelo($this->modeloDeAvaliacaoId);
            
            if ( count($perfis) > 0 )
            {
                $lista = implode('<br>', $perfis);
                
                throw new Exception(_M('Não é possível desabilitar este modelo de avaliação, pois os seguintes perfis de cursos ativos já o estão utilizando:<br/><br/>@1<br/><br/>Caso queira prosseguir com o modelo desabilitado, é necessário antes desativar os perfis listados.', null, $lista));
            }
        }
    }
}
?>
