<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpCoordenadores extends SType
{
    protected $_utilizaNovoPadrao = true;
    
    protected $_utilizaMultiUnidade = true;
    
    protected $_utilizaMultiCentro = true;
    
    protected $_defaultOrder = 'pessoa.name';
    
    protected $_virtualColumns = array(
        '_ocorrenciadesc' => 'ocorrencia.ocorrenciacursoid || \' - \' || turn.description || \' - \' || unit.description',
    );

    protected $_associations = array(
        'pessoa' => array(
            'mode' => 'one',
            'typeClass' => 'BasPessoaFisica',
            'joinColumnLeft' => 'personid',
            'joinColumnRight' => 'personid',
            'joinOnly' => true,
        ),
        'ocorrencia' => array(
            'mode' => 'one',
            'typeClass' => 'AcpOcorrenciaCurso',
            'joinColumnLeft' => 'ocorrenciacursoid',
            'joinColumnRight' => 'ocorrenciacursoid',
        ),
        'tipo' => array(
            'mode' => 'one',
            'typeClass' => 'AcpTipoDeCoordenador',
            'joinColumnLeft' => 'tipodecoordenadorid',
            'joinColumnRight' => 'tipodecoordenadorid',
        ),
    );
    
    /**
     *
     * @var BasPessoaFisica
     */
    public $pessoa;
    
    /**
     *
     * @var AcpOcorrenciaCurso
     */
    public $ocorrencia;
    
    public $coordenadorcursoid;
    public $personid;
    public $ocorrenciacursoid;
    public $enddate;
    public $tipodecoordenadorid;
    
    
    public function beforeFind(\MSQL $sql)
    {
        $sql->setColumns('tipocoordenador.descricao AS tipocoordenador');
        $sql->addLeftJoin('acptipodecoordenador tipocoordenador', 'tipocoordenador.tipodecoordenadorid = acpcoordenadores.tipodecoordenadorid');
        
        return $sql;
    }
    
    public function save()
    {
        if ( strlen($this->personid) > 0 && is_numeric($this->ocorrenciacursoid) )
        {
            $coord = new AcpCoordenadores();
            
            $sql = $coord->msql()
                ->addEqualCondition('AcpCoordenadores.personid', $this->personid);

            if ( is_numeric($this->ocorrenciacursoid) )
            {
                $sql->addEqualCondition('AcpCoordenadores.ocorrenciacursoid', $this->ocorrenciacursoid);
            }
            
            if ( is_numeric($this->coordenadorcursoid) )
            {
                $sql->addNotEqualCondition('AcpCoordenadores.coordenadorcursoid', $this->coordenadorcursoid);
            }

            if ( $coord->findCount($sql) > 0 )
            {
                throw new Exception(_M('A pessoa informada já é coordenador(a) deste curso.'));
            }
        }
        
        return parent::save();
    }
    
    /**
     * @return array Array com personid's
     */
    public static function obterCoordenadoresPorInscricao($inscricaoid)
    {
        $inscricao = new AcpInscricao($inscricaoid);
        $persons = array();
        
        $ocorrenciacursoid = $inscricao->ofertaturma->ofertacurso->ocorrenciacursoid;
        
        if ( strlen($ocorrenciacursoid) > 0 )
        {
            $coord = new AcpCoordenadores();
            
            $rows = $coord->findMany( $coord->msql()
                ->addEqualCondition('acpcoordenadores.ocorrenciacursoid', $ocorrenciacursoid)
            );

            foreach ( $rows as $row )
            {
                $row instanceof AcpCoordenadores;
                $persons[] = $row->personid;
            }
        }
        
        return $persons;
    }
    
    /**
     * Verifica se pessoa é coordenadora de curso específico.
     * 
     * @param string cursoId
     * @param integer personId
     * 
     * @return boolean
     */
    public static function verificaCoordenadorDeCurso($personId, $cursoId)
    {
        $sql = "SELECT 1
                  FROM acpCoordenadores
                 WHERE cursoId = ?
                   AND personId = ? 
                   AND (endDate IS NULL OR
                        endDate >= NOW()::DATE)";
        
        $args[] = $cursoId;
        $args[] = $personId;
        
        $result = SDatabase::query($sql, $args);

        if (strlen($result[0][0]) > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    public static function verificaPessoaECoordenador($personId)
    {
        $sql = " SELECT COUNT(*) > 0
                   FROM acpCoordenadores 
                  WHERE personId = ?
                    AND (endDate >= NOW()::DATE 
                     OR endDate IS NULL)";
        
        $args[] = $personId;
        
        $result = SDatabase::query($sql, $args);
        
        return $result[0][0] == DB_TRUE;
    }
    
    public static function verificaCoordenadorMaisDeUmCurso($personId)
    {
        $sql = " SELECT DISTINCT
                        cursoid
                   FROM acpCoordenadores 
                  WHERE personId = ?
                    AND (endDate >= NOW()::DATE 
                     OR endDate IS NULL)";
        
        $args[] = $personId;
        
        $result = SDatabase::query($sql, $args);
        
        return count($result) > 1 ? DB_TRUE : DB_FALSE;
    }
}
?>
