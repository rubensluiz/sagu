<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 11/11/2013
 */

class AcpOfertaComponenteCurricular extends SType
{
    protected $_utilizaNovoPadrao = true;
    
//    protected $_defaultOrder = 'acpofertacurso.ocorrenciacursoid, acpofertacurso.descricao';
    
    protected $_utilizaMultiUnidade = true;
    protected $_utilizaMultiCentro = true;
    protected $_tableViewName = 'unit_acpofertacomponentecurricular';
    public $busca;
    protected $_associations = array(
        'ofertaturma' => array(
            'mode' => 'one',
            'typeClass' => 'AcpOfertaTurma',
            'joinColumnLeft' => 'ofertaturmaid',
            'joinColumnRight' => 'ofertaturmaid',
            'joinOnly' => true,
        ),
        'componentecurricularmatriz' => array(
            'mode' => 'one',
            'typeClass' => 'AcpComponenteCurricularMatriz',
            'joinColumnLeft' => 'componentecurricularmatrizid',
            'joinColumnRight' => 'componentecurricularmatrizid',
            'joinOnly' => true,
        ),
    );
    
    protected $_virtualColumns = array(
        '_descritivo' => 'componentecurricular.codigo || \' - \' || componentecurricular.nome',
    );
    
    protected $_descriptionColumn = '_descritivo';
    
    protected $_defaultOrder = 'ofertacurso.descricao, ofertaturma.descricao, componentecurricular.nome';
    
    /**
     *
     * @var AcpComponenteCurricular
     */
    public $componentecurricular;

    /**
     *
     * @var AcpComponenteCurricularMatriz
     */
    public $componentecurricularmatriz;
    
    /**
     *
     * @var AcpOfertaTurma
     */
    public $ofertaturma;
    
    public $componenteCurricularMatrizId;
    public $ofertaCursoId;
    public $componenteCurricularId;
    public $dataInicio;
    public $dataFechamento;
    public $ofertaTurmaId;
    public $ofertaComponenteCurricularId;
    public $planoaulas;
    public $metodologia;
    public $avaliacao;
    
    public $buscaocorrenciacursoid;
    public $buscaturmaid;
    public $ativos;
    public $encerradas;
    
    public $buscaFrequenciasENotas = false;
    
    public function __construct($id = null, $disableAssociations = false)
    {
        if ( $disableAssociations )
        {
            $this->_associations = array();
            $this->_virtualColumns = array();
            $this->_defaultOrder = null;
        }
        
        parent::__construct($id);
    }
    
    public function beforeFind(MSQL $sql)
    {
        //Caso seja diretamente da tela de Frequência e Notas do Pedagógico
        if ( $this->buscaFrequenciasENotas )
        {
            $matriculados = AcpMatricula::SITUACAO_MATRICULA;
            $cancelados = AcpMatricula::SITUACAO_CANCELAMENTO;
            $aprovados = AcpMatricula::SITUACAO_APROVADO;
            $reprovados = AcpMatricula::SITUACAO_REPROVADO;
            $reprovadoporfalta = AcpMatricula::SITUACAO_REPROVADO_POR_FALTAS;
            
            $sql->addLeftJoin('acpmodelodeavaliacao mda', 'mda.modelodeavaliacaoid = perfilcurso.modelodeavaliacaogeral');
            $sql->setColumns('mda.tipodedados');
            
            $sql->setColumns('(SELECT to_char(MIN(dataaula), \'dd/mm/yyyy\') FROM acpocorrenciahorariooferta WHERE ofertacomponentecurricularid = acpofertacomponentecurricular.ofertacomponentecurricularid) AS datainicial');
            $sql->setColumns('(SELECT to_char(MAX(dataaula), \'dd/mm/yyyy\') FROM acpocorrenciahorariooferta WHERE ofertacomponentecurricularid = acpofertacomponentecurricular.ofertacomponentecurricularid) AS datafinal');
            $sql->setColumns("(SELECT COUNT(DISTINCT acpmatricula.personid)
                                FROM acpmatricula
                               WHERE acpmatricula.situacao NOT IN ('{$cancelados}')
                                 AND acpofertacomponentecurricular.ofertacomponentecurricularid = acpmatricula.ofertacomponentecurricularid
                                 ) AS matriculados");
            $sql->setColumns("(SELECT COUNT(DISTINCT acpmatricula.personid)
                                FROM acpmatricula
                               WHERE acpofertacomponentecurricular.ofertacomponentecurricularid = acpmatricula.ofertacomponentecurricularid
                                 AND acpmatricula.situacao = '{$cancelados}') AS cancelados");
            $sql->setColumns("(SELECT COUNT(DISTINCT acpmatricula.personid)
                                FROM acpmatricula
                               WHERE acpofertacomponentecurricular.ofertacomponentecurricularid = acpmatricula.ofertacomponentecurricularid
                                 AND acpmatricula.situacao = '{$aprovados}') AS aprovados");
            $sql->setColumns("(SELECT COUNT(DISTINCT acpmatricula.personid)
                                FROM acpmatricula
                               WHERE acpofertacomponentecurricular.ofertacomponentecurricularid = acpmatricula.ofertacomponentecurricularid
                                 AND acpmatricula.situacao IN ('{$reprovados}', '{$reprovadoporfalta}') ) AS reprovados");          
        }
        
        if ( strlen($this->buscaocorrenciacursoid) > 0 )
        {
            $sql->addEqualCondition('ofertacurso.ocorrenciacursoid', $this->buscaocorrenciacursoid);
        }
        
        if ( strlen($this->buscaturmaid) > 0 )
        {
            $sql->addEqualCondition('AcpOfertaComponenteCurricular.ofertaturmaid', $this->buscaturmaid);
        }

        // filtro da tela FrmFrequenciasENotas
        if ( isset($this->_associations['ofertaturma']) )
        {
            if ( $this->ativos == 'E' )
            {
                $sql->setWhere(' (
                    ( ofertaturma.datainicialoferta IS NULL AND ofertaturma.datafinaloferta IS NULL )
                 OR ( NOW()::date BETWEEN ofertaturma.datainicialoferta AND ofertaturma.datafinaloferta )
                ) ');
            }
            else if ( $this->ativos == 'P' )
            {
                $sql->setWhere(' (
                    ( ofertaturma.datainicialoferta IS NOT NULL AND ofertaturma.datafinaloferta IS NOT NULL )
                AND ( NOW()::date < ofertaturma.datainicialoferta )
                ) ');
            }
            else if ( $this->ativos == 'C')
            {
                $sql->setWhere(' (
                    ( ofertaturma.datainicialoferta IS NOT NULL AND ofertaturma.datafinaloferta IS NOT NULL )
                AND ( NOW()::date > ofertaturma.datafinaloferta )
                ) '); 
            }
            

            if ( $this->encerradas == 'N' )
            {
                $sql->setWhere('(
                            ( acpofertacomponentecurricular.datafechamento IS NULL )
                            )');
            }
            else if ( $this->encerradas == 'X' )
            {
                $sql->setWhere(' (
                    ( acpofertacomponentecurricular.datafechamento IS NOT NULL )
                    )');
            }
        }
    }
    
    public function addDefaultColumnConditionBusca(MSQL $sql, $column, $value)
    {
        // busca filtros extras para tela de busca Frequencias e notas
        if ( !$sql->adicionouFiltrosExtras && strlen($value) > 0 )
        {
            $sql->adicionouFiltrosExtras = true;
            
            $sql->setWhereOr('componentecurricular.nome ILIKE ?', array('%'.$value.'%'));
            $sql->setWhereOr('ofertacurso.descricao ILIKE ?', array('%'.$value.'%'));
        }
        
        parent::addDefaultColumnConditionBusca($sql, $column, $value);
    }
    
    /**
     * Obtém array com lista de horários da disciplina oferecida
     * @return array
     */
    public function listarHorariosDaOferta()
    {
        $horariosOfertaComponenteCurricular = $this->obterHorariosDaOfertaDoComponenteCurricular();

        if( count($horariosOfertaComponenteCurricular) > 0 )
        {
            $data = array();
            foreach($horariosOfertaComponenteCurricular as $cod=>$horarioOferta)
            {
                $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                if( strlen($horarioOferta->personid) > 0 )
                {
                    $professor = $busPhysicalPerson->getPhysicalPerson($horarioOferta->personid);
                }

                $horario = new AcpHorario($horarioOferta->horarioid);

                $data[$cod]['datainicio'] = $this->dataInicio;
                $data[$cod]['diasemana'] = $horarioOferta->diasemana;
                $data[$cod]['horario'] = $horario->horainicio.' - '.$horario->horafim;
                $data[$cod]['professor'] = $professor->name;
                $data[$cod]['sala'] = $horarioOferta->physicalResourceId;                
            }
        }
        
        return $data;
    }
    
    /**
     * Obtém horários da oferta do componente curricular
     * 
     * @param type $ofertaComponenteCurricularId
     * @param (boolean) $ordemCrescente - Ordena os registros pela data da aula crescentemente.
     * 
     * @return \AcpOcorrenciaHorarioOferta
     */
    public function obterHorariosDaOfertaDoComponenteCurricular($ordemCrescente = false)
    {
        $ocorrenciaHorarioOferta = new AcpOcorrenciaHorarioOferta();
        $msql = $ocorrenciaHorarioOferta->msql();
        $msql->setColumns('AcpOcorrenciaHorarioOferta.ocorrenciahorarioofertaid');
        $msql->addEqualCondition('AcpOcorrenciaHorarioOferta.ofertacomponentecurricularid', $this->ofertaComponenteCurricularId);
        $ordemCrescente ? $msql->setOrderBy('AcpOcorrenciaHorarioOferta.dataaula') : null;
        $searchHorariosOferta = $ocorrenciaHorarioOferta->findList($msql);                

        if( count($searchHorariosOferta) > 0 )
        {
            foreach($searchHorariosOferta as $cod=>$linha)
            {
                $return[] = new AcpOcorrenciaHorarioOferta($cod);
            }
        }

        return $return;
    }
    
    public static function obterOfertaComponenteCurricularDaOfertaTurma($ofertaturmaid, $descriptionOrder = false)
    {
        $ofertaComponenteCurricular = new AcpOfertaComponenteCurricular();
        
        $msql = $ofertaComponenteCurricular->msql();
        $msql->addEqualCondition('AcpOfertaComponenteCurricular.ofertaturmaid', $ofertaturmaid);
        
        if ( $descriptionOrder )
        {
            $msql->addInnerJoin('acpcomponentecurricularmatriz', 'acpcomponentecurricularmatriz.componentecurricularmatrizid = AcpOfertaComponenteCurricular.componentecurricularmatrizid');
            $msql->addInnerJoin('acpcomponentecurricular', 'acpcomponentecurricular.componentecurricularid = acpcomponentecurricularmatriz.componentecurricularid');
            $msql->setOrderBy('acpcomponentecurricular.nome');
        }
        else
        {
            $msql->setOrderBy('matrizcurriculargrupo.ordem');
        }
        
        $rows = $ofertaComponenteCurricular->findMany($msql);
        
        return $rows;
    }
    
    public static function obterOfertaComponenteCurricular($ofertaturmaid, $componentecurricularmatrizid)
    {
        $ofertaComponenteCurricular = new AcpOfertaComponenteCurricular();
        $msql = $ofertaComponenteCurricular->msql();
        $msql->setColumns('ofertacomponentecurricularid');
        $msql->addEqualCondition('AcpOfertaComponenteCurricular.ofertaturmaid', $ofertaturmaid);
        $msql->addEqualCondition('AcpOfertaComponenteCurricular.componentecurricularmatrizid', $componentecurricularmatrizid);
        $return = $ofertaComponenteCurricular->findOne($msql);                
        
        return $return;
    }
    
    /**
     * @return array
     */
    public function buscarPorOfertaTurma($ofertaTurmaId)
    {
        return $this->findMany( $this->msql()->addEqualCondition('AcpOfertaComponenteCurricular.ofertaturmaid', $ofertaTurmaId) );
    }
    
    /**
     * @return array
     */
    public static function obterInformacaoOferta($ofertaTurmaId)
    {
        $sql = new MSQL();
        $sql->setColumns('occ.ofertaComponenteCurricularId,
                          m.matrizcurriculargrupoid,
                          ot.gradehorarioid,
                          oc.ocorrenciacursoid');
        $sql->setTables('AcpOfertaComponenteCurricular occ');
        $sql->addLeftJoin('acpcomponentecurricularmatriz m', 'm.componentecurricularmatrizid = occ.componentecurricularmatrizid');
        $sql->addLeftJoin('acpofertaturma ot', 'ot.ofertaturmaid = occ.ofertaturmaid');
        $sql->addLeftJoin('acpofertacurso oc', 'oc.ofertacursoid = ot.ofertacursoid');
        $sql->addEqualCondition('occ.ofertaTurmaId', $ofertaTurmaId);
        
        $rows = SDatabase::queryAssociative($sql);
        
        return $rows;
    }
    
    /**
     * @return array
     */
    public static function obterInformacaoOfertaCC($ofertaComponenteCurricularId)
    {
        $sql = new MSQL();
        $sql->setColumns('occ.ofertaComponenteCurricularId,
                          m.matrizcurriculargrupoid,
                          ot.gradehorarioid,
                          ot.datainicialoferta,
                          ot.datafinaloferta,
                          oc.ocorrenciacursoid,
                          cc.nome AS nomecomponente,
                          cc.codigo AS codcomponente');
        $sql->setTables('AcpOfertaComponenteCurricular occ');
        $sql->addLeftJoin('acpcomponentecurricularmatriz m', 'm.componentecurricularmatrizid = occ.componentecurricularmatrizid');
        $sql->addLeftJoin('acpofertaturma ot', 'ot.ofertaturmaid = occ.ofertaturmaid');
        $sql->addLeftJoin('acpofertacurso oc', 'oc.ofertacursoid = ot.ofertacursoid');
        $sql->addLeftJoin('acpcomponentecurricular cc', 'cc.componentecurricularid = m.componentecurricularid');
        $sql->addEqualCondition('occ.ofertaComponenteCurricularId', $ofertaComponenteCurricularId);
        
        $rows = SDatabase::queryAssociative($sql);
        
        return $rows[0];
    }
    
    public function delete() 
    {
        $module = MIOLO::getCurrentModule();
        $ocorrenciaHorarioOferta = AcpOcorrenciaHorarioOferta::obterOcorrenciasHorarioOferta($this->ofertaComponenteCurricularId);
        if( count($ocorrenciaHorarioOferta) > 0 )
        {
            foreach($ocorrenciaHorarioOferta as $cod=>$ocorrenciaHorarioOferta)
            {
                //Se possui frequencias cadastradas nao é possível excluir o componente curricular.
                if ( $ocorrenciaHorarioOferta->possuifrequencia == DB_TRUE )
                {
                    $sql = "SELECT DISTINCT ON (matriculaId) COUNT(*)
                              FROM acpFrequencia
                             WHERE ocorrenciaHorarioOfertaId = ?
                          GROUP BY matriculaId";
                    $args[] = $ocorrenciaHorarioOferta->ocorrenciahorarioofertaid;

                    $result = SDatabase::query($sql, $args);
                    
                    if ( count($result) > 0 )
                    {
                        $ofertacomponentecurricular = new AcpOfertaComponenteCurricular($this->ofertaComponenteCurricularId);
                        
                        throw new Exception (_M("Não é possível remover a oferta de componente curricular @1, pois ela já possui frequências registradas para @2 aluno(s).", null, $ofertacomponentecurricular->componentecurricularmatriz->componentecurricular->nome, count($result)));
                    }
                    else
                    {
                        $ocorrenciaHorarioOferta->delete();
                    }
                }
                else
                {
                    $ocorrenciaHorarioOferta->delete();
                }
            }
        }        

        return parent::delete();
    }
    
    public function findForChoiceComponent($argument = null, $id = null)
    {
        
        $sql = $this->getChoiceComponentSQL($argument, $id);
        $sql->setLimit(15);
        
        $args = $this->getAjaxArgs();
        $args->ofertaturmaid = SAGU::NVL($args->ofertaturmaid, MIOLO::_REQUEST('ofertaturmaid'));

        if(strlen($args->ofertaturmaid) > 0 )
        {
            $sql->addEqualCondition('AcpOfertaComponenteCurricular.ofertaturmaid', $args->ofertaturmaid);
        }
        
        return $this->findList( $sql );
    }
    
    /**
     * @return AcpComponenteCurricularMatriz
     */
    public function obterComponenteCurricularMatriz()
    {
        return new AcpComponenteCurricularMatriz($this->componenteCurricularMatrizId);
    }
    
    public function obterComponenteCurricularMatrizId($componentecurricular)
    {
        $sql = SDatabase::query('SELECT componentecurricularmatrizid FROM acpofertacomponentecurricular WHERE ofertacomponentecurricularid = ?',$componentecurricular);
        return $sql;
    }
    
    public function obterComponenteCurricularId($matrizid)
    {
        $sql = SDatabase::query('SELECT componentecurricularid FROM acpcomponentecurricularmatriz WHERE componentecurricularmatrizid = ?',$matrizid);
        return $sql;
    }
    
     public function obterComponenteCurricularNome($curricularid)
    {
        $sql = SDatabase::query('SELECT nome FROM acpcomponentecurricular WHERE componentecurricularid = ?',$curricularid);
        return $sql;
    }
    /**
     * @return array
     */
    public static function buscarHorarioDasDisciplinas($filters = null)
    {
        $sql = new MSQL();
        $sql->setColumns('occ.ofertacomponentecurricularid,
                          cc.codigo AS componentecodigo,
                          cc.descricao AS componentedesc,
                          
                          (SELECT TO_CHAR(MIN(oho.dataaula), \'dd/mm/yyyy\')
                             FROM acpocorrenciahorariooferta oho
                            WHERE oho.ofertacomponentecurricularid = occ.ofertacomponentecurricularid) AS datainicio,

                          (SELECT ARRAY_TO_STRING(ARRAY(SELECT DISTINCT obterdiaextenso(h.diasemana) || \' (\' || to_char(h.horainicio, \'hh24:mi\') || \' - \' || to_char(h.horafim, \'hh24:mi\') || \')\'
                                                          FROM acpocorrenciahorariooferta oho
                                                    INNER JOIN acphorario h
                                                            ON h.horarioid = oho.horarioid
                                                         WHERE oho.ofertacomponentecurricularid = occ.ofertacomponentecurricularid
                                                      ORDER BY 1), \'<br/>\')) AS horario,

                          (SELECT ARRAY_TO_STRING(ARRAY(SELECT DISTINCT p.personid || \' - \' || p.name
                                                          FROM acpocorrenciahorariooferta oho
                                               INNER JOIN ONLY basphysicalpersonprofessor p
                                                            ON p.personid = oho.professorid
                                                         WHERE oho.ofertacomponentecurricularid = occ.ofertacomponentecurricularid
                                                      ORDER BY 1), \'<br/>\')) AS professor,

                          ot.ofertaturmaid');
        $sql->setTables('AcpOfertaComponenteCurricular occ
            LEFT JOIN acpcomponentecurricularmatriz ccm ON ccm.componentecurricularmatrizid = occ.componentecurricularmatrizid
            LEFT JOIN acpcomponentecurricular cc ON cc.componentecurricularid = ccm.componentecurricularid
            LEFT JOIN acpmatrizcurriculargrupo grupo ON grupo.matrizcurriculargrupoid = ccm.matrizcurriculargrupoid
            LEFT JOIN acpofertaturma ot ON ot.ofertaturmaid = occ.ofertaturmaid
            LEFT JOIN acpmatrizcurricular mc ON mc.matrizcurricularid = grupo.matrizcurricularid
            LEFT JOIN acpofertacurso oc ON oc.ofertacursoid = ot.ofertacursoid
            LEFT JOIN acpocorrenciacurso oco ON oco.ocorrenciacursoid = oc.ocorrenciacursoid');

        if ( strlen($filters->ofertaTurmaId) > 0 )
        {
            $sql->addEqualCondition('occ.ofertaturmaid', $filters->ofertaTurmaId);
        }
        
        $sql->setWhere('oco.cursoid = mc.cursoid');        
        $sql->setOrderBy('(SELECT MIN(oho.dataaula)
                             FROM acpocorrenciahorariooferta oho
                            WHERE oho.ofertacomponentecurricularid = occ.ofertacomponentecurricularid)');

        return SDatabase::queryAssociative($sql);
    }
    
    /**
     * @return array
     */
    public static function buscarParaTelaDefinirAulas($filters = null)
    {
        $sql = "
            SELECT  ocorrenciahorario.ofertacomponentecurricularid,
                    professor.personid,
                    professor.personid || ' - ' || professor.name AS professor,
                    
                    (SELECT ARRAY_TO_STRING(ARRAY(SELECT DISTINCT to_char(h.horainicio, 'hh24:mi') || ' - ' || to_char(h.horafim, 'hh24:mi')
                                                    FROM acpocorrenciahorariooferta oho
                                              INNER JOIN acphorario h
                                                      ON h.horarioid = oho.horarioid
                                                   WHERE oho.ofertacomponentecurricularid = ocorrenciahorario.ofertacomponentecurricularid
                                                     AND h.diasemana = horario.diasemana
                                                     AND ( oho.professorid = professor.personid OR oho.professorid IS NULL )
                                                ORDER BY 1), '<br/>')) AS horario,
                                                
                    (SELECT ARRAY_TO_STRING(ARRAY(SELECT DISTINCT h.horarioid
                                                    FROM acpocorrenciahorariooferta oho
                                              INNER JOIN acphorario h
                                                      ON h.horarioid = oho.horarioid
                                                   WHERE oho.ofertacomponentecurricularid = ocorrenciahorario.ofertacomponentecurricularid
                                                     AND h.diasemana = horario.diasemana
                                                     AND ( oho.professorid = professor.personid OR oho.professorid IS NULL )
                                                ORDER BY 1), ',')) AS horarioIdsEdicao,
                                                
                    horario.diasemana AS diasemana,
                    TO_CHAR(MIN(ocorrenciahorario.dataaula),'DD/MM/YYYY'),
                    TO_CHAR(MAX(dataaula),'DD/MM/YYYY')
            FROM acpocorrenciahorariooferta ocorrenciahorario
            LEFT JOIN acphorario horario ON horario.horarioid = ocorrenciahorario.horarioid
            LEFT JOIN ONLY basphysicalpersonprofessor professor ON professor.personid = ocorrenciahorario.professorid
            WHERE 1=1";

        if ( strlen($filters->ofertacomponentecurricularid) > 0 )
        {
            $sql .= " AND ocorrenciahorario.ofertacomponentecurricularid = " . $filters->ofertacomponentecurricularid;
        }
        
        // filtra para buscar apenas com pelo menos um horarioId
//        $sql . = " AND EXISTS(SELECT 1 FROM acpocorrenciahorariooferta WHERE )";
        
        $sql .= " GROUP BY ocorrenciahorario.ofertacomponentecurricularid, horario.diasemana, professor.personid, professor.name";
        $sql .= " ORDER BY horario.diasemana";

        return SDatabase::query($sql);
    }
    
    /**
     * Fecha a oferta do componente curricular, verificando notas e frequencias e atribuindo um status para os matriculados
     * @param $calculaMediasDoCurso - Ao fim de fechar o componente curricular processa as medias gerais dos alunos no curso
     */
    public function fecharOfertaComponenteCurricular($calculaMediasDoCurso = DB_TRUE)
    {
        $return = SDatabase::execute("SELECT * FROM acp_fecharcomponentecurricular(?, ?);", array($this->ofertaComponenteCurricularId, $calculaMediasDoCurso));
        return $return;
    }
    
    /**
     * Reabre a oferta do componente curricular
     */
    public function reabrirOfertaComponenteCurricular($calculaMediasDoCurso = DB_TRUE)
    {
        $return = SDatabase::execute("SELECT * FROM acp_reabrircomponentecurricular(?, ?);", array($this->ofertaComponenteCurricularId, $calculaMediasDoCurso));
        return $return;
    }
    
        
    //utilizado na grid action
    public static function possuiPendenciaFrequencia($ofertacomponentecurricularid)
    {
        $result = SDatabase::query("SELECT * FROM acp_verificafrequenciasregistradascomponentecurricular(?)", array($ofertacomponentecurricularid));

        return $result[0][0];
    }
    //utilizado na grid action
    public static function possuiPendenciaNota($ofertacomponentecuricularid)
    {
        $result = SDatabase::query("SELECT COUNT(*) FROM acp_obternotaspendentes(?)", array($ofertacomponentecuricularid));

        return $result[0][0] > 0;
    }
    
    //obter email dos professores
    public static function obterEmailProfessorPendenteNota($turmaid)
    {
        $result = SDatabase::query("SELECT DISTINCT email FROM acp_obternotaspendentes(?)", array($turmaid));

        return $result;
    }
    
     public static function obterEmailProfessorPendenteFrequencia($turmaid)
    {
        $result = SDatabase::query("SELECT DISTINCT email FROM acp_obterfrequenciaspendentes(?)", array($turmaid));

        return $result;
    }
    
    public static function obterNomeProfessorPendentePorEmailNota($turmaid, $email)
    {
        $params[] = $turmaid;
        $params[] = $email;
        
        $result = SDatabase::query("SELECT DISTINCT professorname FROM acp_obternotaspendentes(?) WHERE email ilike ?", $params);
        
        return $result[0][0];
    }
    
     public static function obterNomeProfessorPendentePorEmailFrequencia($turmaid, $email)
    {
        $params[] = $turmaid;
        $params[] = $email;
        
        $result = SDatabase::query("SELECT DISTINCT professorname FROM acp_obterfrequenciaspendentes(?) WHERE email ilike ?", $params);
        
        return $result[0][0];
    }
    
     public static function obterDisciplinaPendentePorEmailFrequencia($turmaid, $email)
    {
        $params[] = $turmaid;
        $params[] = $email;
        
        $result = SDatabase::query("SELECT DISTINCT disciplina FROM acp_obterfrequenciaspendentes(?) WHERE email ilike ?", $params);
        
        return $result[0][0];
    }
    
     public static function obterDisciplinaPendentePorEmailNota($turmaid, $email)
    {
        $params[] = $turmaid;
        $params[] = $email;
        
        $result = SDatabase::query("SELECT DISTINCT disciplina FROM acp_obternotaspendentes(?) WHERE email ilike ?", $params);
        
        return $result[0][0];
    }
    
    public static function obterPendenciasFrequencia($turmaid)
    {
        $result = SDatabase::query("SELECT * FROM acp_obterfrequenciaspendentes(?)", array($turmaid));
        
        return $result;
    }
    
    public static function obterPendenciasNotas($turmaid)
    {
        $result = SDatabase::query("SELECT * FROM acp_obternotaspendentes(?)", array($turmaid));
        
        return $result;
    }
    
    /**
     * Obtem os professores
     * 
     * @param type $ofertacomponentecurricularid
     * @return array
     */
    public static function obterProfessores($ofertacomponentecurricularid)
    {
        $sql = "SELECT DISTINCT p.personid,
                                p.name
                        FROM acpocorrenciahorariooferta oho
             INNER JOIN ONLY basphysicalpersonprofessor p
                          ON p.personid = oho.professorid
                       WHERE oho.ofertacomponentecurricularid = ?
                    ORDER BY 1";
        
        $rows = SDatabase::query($sql, array($ofertacomponentecurricularid));
        
        $list = array();
        
        foreach ( $rows as $row )
        {
            $list[$row[0]] = $row[1];
        }
        
        return $list;
    }
    
    
    public function searchGrid($filters)
    {
       $cols[] = 'acpofertacomponentecurricular.ofertacomponentecurricularid';
       $cols[] = 'componentecurricular.nome';
       $cols[] = 'ofertaturma.descricao';
       $cols[] = 'ofertacurso.descricao';
       $cols[] = 'acpofertacomponentecurricular.datafechamento';
       $cols[] = 'datainicial';
       $cols[] = 'datafinal';
       $cols[] = 'matriculados';
       $cols[] = 'cancelados';
       $cols[] = 'aprovados';
       $cols[] = 'reprovados';
       $cols[] = 'professores';
       $cols[] = 'possui_ocorrencia_horario';
       $cols[] = 'possui_frequencias_pendentes';
       $cols[] = 'possui_notas_pendentes';
       $cols[] = 'professoresEAD';

       $sql = " SELECT acpofertacomponentecurricular.ofertacomponentecurricularid,
                componentecurricular.nome,
                ofertaturma.descricao,
                ofertacurso.descricao,
                acpofertacomponentecurricular.datafechamento,
                (SELECT to_char(MIN(dataaula), 'dd/mm/yyyy')
                FROM acpocorrenciahorariooferta
                WHERE ofertacomponentecurricularid = acpofertacomponentecurricular.ofertacomponentecurricularid) AS datainicial,

                (SELECT to_char(MAX(dataaula), 'dd/mm/yyyy')
                FROM acpocorrenciahorariooferta
                WHERE ofertacomponentecurricularid = acpofertacomponentecurricular.ofertacomponentecurricularid) AS datafinal,

                (SELECT COUNT(DISTINCT acpmatricula.personid)
                FROM acpmatricula
                WHERE acpmatricula.situacao NOT IN ('C')
                    AND acpofertacomponentecurricular.ofertacomponentecurricularid = acpmatricula.ofertacomponentecurricularid ) AS matriculados,

                (SELECT COUNT(DISTINCT acpmatricula.personid)
                FROM acpmatricula
                WHERE acpofertacomponentecurricular.ofertacomponentecurricularid = acpmatricula.ofertacomponentecurricularid
                    AND acpmatricula.situacao = 'C') AS cancelados,
                
                -- Não mostra aprovados quando o tipoDeDados for PARECER - ticket #38283
                (CASE WHEN (SELECT tipoDeDados FROM acp_obterModeloDaOfertaDeComponenteCurricular(acpofertacomponentecurricular.ofertacomponentecurricularid)) = '" . AcpModeloDeAvaliacao::TIPO_PARECER . "'
                       AND dataFechamento IS NULL
                      THEN
                          0
                      ELSE
                          (SELECT COUNT(DISTINCT acpmatricula.personid)
                             FROM acpmatricula
                            WHERE acpofertacomponentecurricular.ofertacomponentecurricularid = acpmatricula.ofertacomponentecurricularid
                              AND acpmatricula.situacao = 'A')
                 END) AS aprovados,

                -- Não mostra reprovados quando o tipoDeDados for PARECER - ticket #38283
                (CASE WHEN (SELECT tipoDeDados FROM acp_obterModeloDaOfertaDeComponenteCurricular(acpofertacomponentecurricular.ofertacomponentecurricularid)) = '" . AcpModeloDeAvaliacao::TIPO_PARECER . "'
                       AND dataFechamento IS NULL
                      THEN
                          0
                      ELSE
                          (SELECT COUNT(DISTINCT acpmatricula.personid)
                             FROM acpmatricula
                            WHERE acpofertacomponentecurricular.ofertacomponentecurricularid = acpmatricula.ofertacomponentecurricularid
                              AND acpmatricula.situacao IN ('R','F'))
                 END) AS reprovados,
                 
                ( SELECT array_to_string(array_agg(name), ', ') FROM basphysicalpersonprofessor WHERE personid IN (SELECT DISTINCT professorid FROM acpocorrenciahorariooferta WHERE ofertacomponentecurricularid = acpofertacomponentecurricular.ofertacomponentecurricularid) ) as professores,
                ( SELECT COUNT(*) > 0  FROM acpocorrenciahorariooferta where ofertacomponentecurricularid = acpofertacomponentecurricular.ofertacomponentecurricularid) as possui_ocorrencia_horario,
                (select * from acp_verificafrequenciasregistradascomponentecurricular(acpofertacomponentecurricular.ofertacomponentecurricularid)) as possui_frequencias_pendentes,
                (select count(*) > 0 from acp_obternotaspendentes(acpofertacomponentecurricular.ofertacomponentecurricularid)) as possui_notas_pendentes,
                ( SELECT array_to_string(array_agg(name), ', ') FROM basphysicalpersonprofessor LEFT JOIN acpdocentesead ead ON (personid = ead.professorid) WHERE acpofertacomponentecurricular.ofertacomponentecurricularid = ead.ofertacomponentecurricularid) as professoresEAD

                 FROM unit_acpofertacomponentecurricular acpofertacomponentecurricular
            LEFT JOIN ONLY unit_AcpOfertaTurma ofertaturma ON acpofertacomponentecurricular.ofertaturmaid = ofertaturma.ofertaturmaid
            LEFT JOIN unit_AcpOfertaCurso ofertacurso ON ofertaturma.ofertacursoid = ofertacurso.ofertacursoid
            LEFT JOIN unit_AcpOcorrenciaCurso ocorrenciacurso ON ofertacurso.ocorrenciacursoid = ocorrenciacurso.ocorrenciacursoid
            LEFT JOIN basturn turn ON ocorrenciacurso.turnid = turn.turnid
            LEFT JOIN basunit unit ON ocorrenciacurso.unitid = unit.unitid
            LEFT JOIN unit_AcpCurso curso ON ocorrenciacurso.cursoid = curso.cursoid
            LEFT JOIN AcpPerfilCurso perfilcurso ON curso.perfilcursoid = perfilcurso.perfilcursoid
            LEFT JOIN AcpRegrasMatriculaPerfilCurso regras ON perfilcurso.perfilcursoid = regras.perfilcursoid
            LEFT JOIN AcpGradeHorario gradehorario ON ofertaturma.gradehorarioid = gradehorario.gradehorarioid
            LEFT JOIN ONLY AcpComponenteCurricularMatriz componentecurricularmatriz ON acpofertacomponentecurricular.componentecurricularmatrizid = componentecurricularmatriz.componentecurricularmatrizid
            LEFT JOIN AcpComponenteCurricular componentecurricular ON componentecurricularmatriz.componentecurricularid = componentecurricular.componentecurricularid";

        if( strlen($filters->busca) > 0 )
        {
            $where[] =  '( ( acpofertacomponentecurricular.ofertacomponentecurricularid::text = ? ) OR ( componentecurricular.nome ILIKE ? ) OR ( ofertaturma.descricao ILIKE ? ) OR ( curso.nome ILIKE ? ) )';
            $args[] = $filters->busca;
            $args[] = '%'.$filters->busca.'%';
            $args[] = '%'.$filters->busca.'%';
            $args[] = '%'.$filters->busca.'%';
        }
       
        if ( strlen($filters->matriculaid) > 0 )
        {
            $where[] =  'acpmatricula.matriculaid = ?';
            $args[] = $filters->matriculaid;
        }
        if ( strlen($filters->buscaocorrenciacursoid) > 0 )
        {
            $where[] =  'ofertacurso.ocorrenciacursoid = ?';
            $args[] = $filters->buscaocorrenciacursoid;
        }
        
        if ( strlen($filters->buscaturmaid) > 0 )
        {
            $where[] =  'ofertaturma.ofertaturmaid = ?';
            $args[] = $filters->buscaturmaid;
        }

        if ( $filters->ativos == 'E' )
        {
            $where[] = '(( ofertaturma.datainicialoferta IS NULL AND ofertaturma.datafinaloferta IS NULL )
                      OR ( NOW()::date BETWEEN ofertaturma.datainicialoferta AND ofertaturma.datafinaloferta )) ';
        }
        else if ( $filters->ativos == 'P' )
        {
            $where[] = '(( ofertaturma.datainicialoferta IS NOT NULL AND ofertaturma.datafinaloferta IS NOT NULL )
                      AND ( NOW()::date < ofertaturma.datainicialoferta )) ';
        }
        else if ( $filters->ativos == 'C')
        {
            $where[] = '(( ofertaturma.datainicialoferta IS NOT NULL AND ofertaturma.datafinaloferta IS NOT NULL )
                     AND ( NOW()::date > ofertaturma.datafinaloferta )) '; 
        }

        if ( $filters->encerradas == 'N' )
        {
            $where[] = '(acpofertacomponentecurricular.datafechamento IS NULL)';
        }
        else if ( $filters->encerradas == 'X' )
        {
            $where[] = '(acpofertacomponentecurricular.datafechamento IS NOT NULL)';
        }
        
        if( count($where) > 0 )
        {
            $sql  .= ' WHERE ';
            $sql  .= implode(' AND ', $where);
        }
        
        return SAGU::resultToArray(SDatabase::query($sql, $args), $cols);
    }
    
    /**
     * Retorna data da primeira aula da oferta de componente curricular.
     * 
     * @return (string) - $dataAula - Data da primeira aula da oferta.
     */
    public function obterPrimeiroHorarioDaOferta()
    {
        $horarios = $this->obterHorariosDaOfertaDoComponenteCurricular(true);
        
        return $horarios[0]->dataaula;
    }
    
    /**
     * Retorna data da última aula da oferta de componente curricular.
     * 
     * @return (string) - $dataAula - Data da última aula da oferta.
     */
    public function obterUltimoHorarioDaOferta()
    {
        $horarios = $this->obterHorariosDaOfertaDoComponenteCurricular(true);
        end($horarios);
        
        $key = key($horarios);  
        
        return $horarios[$key]->dataaula;
    }
    
    public function obterDiasDaSemanaDaOferta($mostraSala = false)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('types/InsRecursoFisico.class', 'institutional');
        
        $horarios = $this->obterHorariosDaOfertaDoComponenteCurricular(true);
        $dias = SAGU::listarDiasDaSemana();
        
        $diasSemana = array();
        foreach ( $horarios as $dia )
        {
            $sala = '';
            if ( $mostraSala )
            {
                if ( strlen($dia->physicalresourceid) > 0 )
                {
                    $recursoFisico = new InsRecursoFisico($dia->physicalresourceid);
                    $sala = ' (' . $recursoFisico->description . ') ';
                }
            }
            
            $data = explode('/', $dia->dataaula);
            $diasSemana[] = $dias[ date('w',strtotime("$data[2]-$data[1]-$data[0]")) ] . $sala;
        }
        
        return utf8_encode(implode(', ', array_unique($diasSemana)));
    }
    
    public static function obterHorarioIdsParaEdicao($ofertacomponentecurricularid, $diasemana, $professorid)
    {
        $sql = "SELECT horarioid, horarioid
                  FROM public.acpocorrenciahorariooferta
            INNER JOIN acphorario USING (horarioid)
                 WHERE ofertacomponentecurricularid = ?
                   AND acphorario.diasemana = ?
                   AND professorid = ?";
        
        $result = SDatabase::query($sql, array($ofertacomponentecurricularid, $diasemana, $professorid));
        
        return SAGU::convertListToAssociative($result);
    }

    public static function obterDatasParaEdicao($ofertacomponentecurricularid, $diaSemana, $professorid)
    {
        // o motivo de usar este CONCAT extraindo por partes, foi que o componente SCalendar nao aceita datas
        // no formato 01/01/2014, e sim 1/01/2014
        
        $sql = "SELECT CONCAT(EXTRACT(day FROM dataaula), '/', LPAD(EXTRACT(month FROM dataaula)::text, 2, '0'), '/', EXTRACT(year FROM dataaula)),
                       CONCAT(EXTRACT(day FROM dataaula), '/', LPAD(EXTRACT(month FROM dataaula)::text, 2, '0'), '/', EXTRACT(year FROM dataaula))
                  FROM acpocorrenciahorariooferta oho
            INNER JOIN acphorario h
                 USING (horarioid)
                 WHERE oho.ofertacomponentecurricularid = ?
                   AND h.diasemana = ?
                   AND ( CASE WHEN ? IS NULL THEN oho.professorid IS NULL ELSE oho.professorid = ? END )
                   AND oho.cancelada IS NOT TRUE
              GROUP BY 1, 2";
        
        $sql = SAGU::prepare($sql, array($ofertacomponentecurricularid, $diaSemana, $professorid, $professorid));

        $result = SDatabase::query($sql);
        return SAGU::convertListToAssociative($result);
    }
    
    public static function obterDatasCanceladas($ofertacomponentecurricularid, $diaSemana, $professorid)
    {
        $sql = "SELECT TO_CHAR(dataaula, 'dd/mm/yyyy'),
                       TO_CHAR(dataaula, 'dd/mm/yyyy')
                  FROM acpocorrenciahorariooferta oho
            INNER JOIN acphorario h
                 USING (horarioid)
                 WHERE oho.ofertacomponentecurricularid = ?
                   AND h.diasemana = ?
                   AND ( CASE WHEN ? IS NULL THEN oho.professorid IS NULL ELSE oho.professorid = ? END )
                   AND oho.cancelada IS TRUE
              GROUP BY 1, 2";
        
        $sql = SAGU::prepare($sql, array($ofertacomponentecurricularid, $diaSemana, $professorid, $professorid));
        $result = SDatabase::query($sql);
        
        return SAGU::convertListToAssociative($result);
    }
    
    public static function obterDatasComFrequenciaRegistrada($ofertacomponentecurricularid, $diaSemana, $professorid)
    {
        $sql = "SELECT TO_CHAR(dataaula, 'dd/mm/yyyy'),
                       TO_CHAR(dataaula, 'dd/mm/yyyy')
                  FROM acpocorrenciahorariooferta oho
            INNER JOIN acphorario h
                 USING (horarioid)
                 WHERE oho.ofertacomponentecurricularid = ?
                   AND h.diasemana = ?
                   AND ( CASE WHEN ? IS NULL THEN oho.professorid IS NULL ELSE oho.professorid = ? END )
                   AND possuifrequencia IS TRUE
              GROUP BY 1, 2";
        
        $sql = SAGU::prepare($sql, array($ofertacomponentecurricularid, $diaSemana, $professorid, $professorid));
        $result = SDatabase::query($sql);
        
        return SAGU::convertListToAssociative($result);
    }
    
    public static function obterDatasAntes($ofertacomponentecurricularid, $horarioId, $professorid)
    {
        $sql = "SELECT oho.ocorrenciahorarioofertaid,
                       TO_CHAR(dataaula, 'dd/mm/yyyy')
                  FROM acpocorrenciahorariooferta oho
            INNER JOIN acphorario h
                 USING (horarioid)
                 WHERE oho.ofertacomponentecurricularid = ?
                   AND h.horarioId = ?
                   AND ( CASE WHEN ? IS NULL THEN oho.professorid IS NULL ELSE oho.professorid = ? END )";
        
        $result = SDatabase::query($sql, array($ofertacomponentecurricularid, $horarioId, $professorid, $professorid));

        return SAGU::convertListToAssociative($result);
    }
    
    /**
     * Sobrescreve filtros do sescolha.
     */
    public function getChoiceComponentSQL($argument = null, $id = null)
    {
        $sql = parent::getChoiceComponentSQL($argument, $id);

        $args = $this->getAjaxArgs();
                
        $ofertacursoid = SAGU::NVL($args->ofertacursoid, $args->ofertaCursoId, $args->buscaofertacursoidS);
        $ofertaturmaid = SAGU::NVL($args->ofertaturmaid, $args->ofertaTurmaId, $args->buscaofertaturmaidS);        
        
        if (strlen($ofertaturmaid) > 0)
        {
            $sql->addEqualCondition('ofertaturma.ofertaturmaid ', $ofertaturmaid);
        }
        
        if (strlen($ofertacursoid) > 0)
        {
            $sql->addEqualCondition('ofertaturma.ofertacursoid ', $ofertacursoid);
        }
        
        return $sql;
    }
}