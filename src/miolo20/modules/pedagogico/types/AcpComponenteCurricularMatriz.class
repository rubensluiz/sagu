<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class created on 07/01/2013
 */
class AcpComponenteCurricularMatriz extends SType
{
    protected $_utilizaNovoPadrao = true;
    
    public $componentecurricularmatrizid;
    public $componentecurricularid;
    public $matrizcurriculargrupoid;
    public $serie;
    public $obrigatorio;
    public $situacao;
    public $ordem;
    
    /**
     * @var AcpComponenteCurricular
     */
    public $componentecurricular;
        
    protected $_associations = array(
        'componentecurricular' => array(
            'mode' => 'one',
            'typeClass' => 'AcpComponenteCurricular',
            'joinColumnLeft' => 'componentecurricularid',
            'joinColumnRight' => 'componentecurricularid',
            
        ),
            'matrizcurriculargrupo' => array(
            'mode' => 'one',
            'typeClass' => 'AcpMatrizCurricularGrupo',
            'joinColumnLeft' => 'matrizcurriculargrupoid',
            'joinColumnRight' => 'matrizcurriculargrupoid',
            
        )
        );
    
    public function beforeFind(\MSQL $sql)
    {                   
        // oferta turma
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        
        if ( strlen($ofertaturmaid) > 0 )
        {
            $sql->setColumns('( SELECT array_to_string(array_agg(name), \', \') FROM basphysicalpersonprofessor  LEFT JOIN acpdocentesead ead ON (personid = ead.professorid) WHERE 
            personid IN (SELECT DISTINCT professorid FROM AcpOfertaComponenteCurricular OCC 
            LEFT JOIN acpocorrenciahorariooferta OHO ON OCC.ofertacomponentecurricularid = OHO.ofertacomponentecurricularid  
            WHERE OCC.componentecurricularmatrizid = acpcomponentecurricularmatriz.componentecurricularmatrizid AND OCC.ofertaturmaid = '.$ofertaturmaid.') )
            AS _professores');
            
            $sql->setColumns('( SELECT array_to_string(array_agg(name), \', \') FROM basphysicalpersonprofessor WHERE 
            personid IN (SELECT DISTINCT ead.professorid FROM AcpOfertaComponenteCurricular OCC 
            LEFT JOIN acpocorrenciahorariooferta OHO ON OCC.ofertacomponentecurricularid = OHO.ofertacomponentecurricularid
            LEFT JOIN acpdocentesead ead ON (OCC.ofertacomponentecurricularid = ead.ofertacomponentecurricularid)  
            WHERE OCC.componentecurricularmatrizid = acpcomponentecurricularmatriz.componentecurricularmatrizid AND OCC.ofertaturmaid = '.$ofertaturmaid.') ) as _professoresEAD');
            //Coluna data inicial
            $sql->setColumns('(SELECT to_char(MIN(HP.dataaula), \'dd/mm/yyyy\') 
                                 FROM acpofertacomponentecurricular X
                            LEFT JOIN acpocorrenciahorariooferta HP
                                   ON (HP.ofertacomponentecurricularid = X.ofertacomponentecurricularid)
                                WHERE HP.cancelada IS FALSE
                                  AND X.componentecurricularmatrizid = AcpComponenteCurricularMatriz.componentecurricularmatrizid
                                  AND X.ofertaturmaid = ' . $ofertaturmaid . '
                ) AS _datainicial');

            //Coluna data final
            $sql->setColumns('( SELECT to_char(MAX(HP.dataaula), \'dd/mm/yyyy\') 
                                  FROM acpofertacomponentecurricular X
                             LEFT JOIN acpocorrenciahorariooferta HP
                                    ON (HP.ofertacomponentecurricularid = X.ofertacomponentecurricularid)
                                 WHERE HP.cancelada IS FALSE
                                   AND X.componentecurricularmatrizid = AcpComponenteCurricularMatriz.componentecurricularmatrizid
                                   AND X.ofertaturmaid = ' . $ofertaturmaid . '
                ) AS _datafinal');

            $sql->setColumns('(SELECT MIN(HP.dataaula) 
                                 FROM acpofertacomponentecurricular X
                            LEFT JOIN acpocorrenciahorariooferta HP
                                   ON (HP.ofertacomponentecurricularid = X.ofertacomponentecurricularid)
                                WHERE HP.cancelada IS FALSE
                                  AND X.componentecurricularmatrizid = AcpComponenteCurricularMatriz.componentecurricularmatrizid
                                  AND X.ofertaturmaid = ' . $ofertaturmaid . '
                ) AS _datainicialordem');

            $sql->setColumns("(SELECT ofertacomponentecurricularid
                                 FROM acpofertacomponentecurricular X
                                WHERE X.componentecurricularmatrizid = AcpComponenteCurricularMatriz.componentecurricularmatrizid
                                  AND X.ofertaturmaid = {$ofertaturmaid}
                                LIMIT 1) AS _ofertacomponentecurricularid");


            $sql->setOrderBy("_datainicialordem ASC, componentecurricular.codigo ASC, tipocomponentecurricular.descricao ASC, componentecurricular.nome ASC, acpcomponentecurricularmatriz.situacao");

        }
        else
        {
            $sql->setColumns('(SELECT ARRAY_TO_STRING(ARRAY(
                    SELECT P.name
                      FROM acpofertacomponentecurricular OCC
                 LEFT JOIN acpocorrenciahorariooferta OHO
                     USING ( ofertacomponentecurricularid )
            LEFT JOIN ONLY basphysicalpersonprofessor P
                        ON ( P.personid = OHO.professorid )
                     WHERE OCC.componentecurricularmatrizid = AcpComponenteCurricularMatriz.componentecurricularmatrizid
                  GROUP BY P.name
                  ORDER BY P.name
            ), \', \')) AS _professores');

            $sql->setOrderBy("tipocomponentecurricular.descricao ASC, componentecurricular.nome ASC, acpcomponentecurricularmatriz.situacao");

        }


        return $sql;
    }
    
    public static function obterComponentesCurricularesMatrizDoGrupo($matrizCurricularGrupoId)
    {
        $componenteCurricularMatriz = new AcpComponenteCurricularMatriz();
        $msql = $componenteCurricularMatriz->msql();
        $msql->setColumns('AcpComponenteCurricularMatriz.componentecurricularmatrizid');
        $msql->addEqualCondition('AcpComponenteCurricularMatriz.matrizcurriculargrupoid', $matrizCurricularGrupoId);
        $searchComponentesCurricularesMatriz = $componenteCurricularMatriz->findList($msql);                

        if( count($searchComponentesCurricularesMatriz) > 0 )
        {
            foreach($searchComponentesCurricularesMatriz as $cod=>$linha)
            {
                $return[] = new AcpComponenteCurricularMatriz($cod);
            }
        }

        return $return;
    }
    
    
    public static function listarSituacao()
    {
        $module = MIOLO::getCurrentModule();
        
        return array( DB_TRUE => _M('Ativo', $module), 
                      DB_FALSE => _M('Inativo', $module) );
    }
    
    public function delete()
    {
        $oferta = new AcpOfertaComponenteCurricular();
        $rows = $oferta->findMany( $oferta->msql()->addEqualCondition('AcpOfertaComponenteCurricular.componentecurricularmatrizid', $this->componentecurricularmatrizid) );

        foreach ( $rows as $row )
        {
            $row instanceof AcpOfertaComponenteCurricular;
            $row->delete();
        }
        
        parent::delete();
    }
    
    public function save()
    {
        // Valida duplicados
        if ( strlen($this->matrizcurriculargrupoid) > 0 && strlen($this->componentecurricularid) > 0 && strlen($this->componentecurricularmatrizid) > 0 )
        {
            $componente = new AcpComponenteCurricularMatriz();

            $sql = $componente->msql()
                ->addEqualCondition('AcpComponenteCurricularMatriz.matrizcurriculargrupoid', $this->matrizcurriculargrupoid)
                ->addEqualCondition('AcpComponenteCurricularMatriz.componentecurricularid', $this->componentecurricularid)
                ->addNotEqualCondition('AcpComponenteCurricularMatriz.componentecurricularmatrizid', $this->componentecurricularmatrizid);

            if ( $componente->findCount($sql) > 0 )
            {
                throw new Exception(_M('Este componente já foi adicionado para o grupo.'));
            }
        }
        
        return parent::save();
    }
    
    
    public static function obterComponenteCurricularMatriz( $componenteCurricular )
    {
        $sql = "SELECT A.componenteCurricularMatrizId 
                  FROM acpComponenteCurricularMatriz A
                 WHERE componenteCurricularId = ?";
        
        $return = SDatabase::query($sql, array($componenteCurricular->componenteCurricularId));
        
        if ( count($return) > 0 )
        {
            foreach ( $return as $r )
            {
                $result[] = new AcpComponenteCurricularMatriz($r[0]);
            }
        }
        
        return $result;
    }
}
?>