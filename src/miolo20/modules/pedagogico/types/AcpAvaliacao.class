<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class created on 07/01/2013
 */
class AcpAvaliacao extends SType
{
    protected $_utilizaNovoPadrao = true;
    
    public $avaliacaoid;
    public $matriculaid;
    public $nota;
    public $conceitodeavaliacaoid;
    public $parecer;
    public $dataaula;
    public $datalancamento;
    public $componentedeavaliacaoid;
    public $tccbancaid;
    
    public static function obterAvaliacao($matriculaid, $componentedeavaliacaoid, $tccbancaid = NULL)
    {
        $avaliacao = new AcpAvaliacao();
        $msql = $avaliacao->msql();
        $msql->addEqualCondition('AcpAvaliacao.matriculaid', $matriculaid);
        $msql->addEqualCondition('AcpAvaliacao.componentedeavaliacaoid', $componentedeavaliacaoid);
        
        if( strlen($tccbancaid) > 0 )
        {
            $msql->addEqualCondition('AcpAvaliacao.tccbancaid', $tccbancaid);
        }
        
        return $avaliacao->findOne($msql);
    }
    
    /**
     * Caso o componente de avaliação possua recuperação verifica se o aluno deve fazela
     * @param type $matriculaid
     * @param type $componentedeavaliacaoid
     * @return type
     */
    public static function deveFazerRecuperacao($matriculaid, $componentedeavaliacaoid)
    {
        //Obtém o componente de avaliação da recuperação
        $componenterecuperacao = new AcpComponenteDeAvaliacao($componentedeavaliacaoid);
        $componentedeavaliacao = $componenterecuperacao->obterComponenteDeAvaliacaoPai();
        
        //Obtem a avaliação no componente
        $avaliacao = AcpAvaliacao::obterAvaliacao($matriculaid, $componentedeavaliacao->componenteDeAvaliacaoId);
        
        $componentedeavaliacaonota = AcpComponenteDeAvaliacaoNota::obterComponenteNotaDoComponente($componentedeavaliacao->componenteDeAvaliacaoId);
        $componentedeavaliacaoconceito = AcpComponenteDeAvaliacaoConceito::obterComponenteConceitoDoComponente($componentedeavaliacao->componenteDeAvaliacaoId);
        
        $return = false;

        //Componente Nota
        if( strlen($componentedeavaliacaonota->componenteDeAvaliacaoNotaId) > 0 )
        {
            if( strlen($avaliacao->nota) > 0 )
            {
                //Não alcançou o valor minimo de aprovação
                if( $avaliacao->nota < $componentedeavaliacaonota->valorMinimoAprovacao )
                {
                    $return = true;
                }
            }
        }
        //Componente Conceito
        elseif( strlen($componentedeavaliacaoconceito->componenteDeAvaliacaoConceitoId) > 0 ) 
        {
            if( strlen($avaliacao->conceitodeavaliacaoid) > 0 )
            {
                $conceitodeavaliacao = new AcpConceitosDeAvaliacao($avaliacao->conceitodeavaliacaoid);
                //Não alcançou o valor minimo de aprovação
                if( $conceitodeavaliacao->aprova == DB_FALSE )
                {
                    $return = true;
                }
            }
        }
        
        return $return;
    }
    
    public static function verficarNotasCadastradas($componenteDeAvaliacaId, $modeloDeAvaliacaoId)
    {
        $sql = "SELECT COUNT(*)
                  FROM acpAvaliacao AV
            INNER JOIN acpComponenteDeAvaliacao CA
                    ON (CA.componenteDeAvaliacaoId = AV.componenteDeAvaliacaoId)
                 WHERE AV.componenteDeAvaliacaoId = ?
                   AND CA.modeloDeAvaliacaoId = ?";
        
        $result = SDatabase::query($sql, array($componenteDeAvaliacaId, $modeloDeAvaliacaoId));
        
        return $result[0][0];
    }
}
?>
