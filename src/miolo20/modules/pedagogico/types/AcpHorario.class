<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpHorario extends SType
{
    protected $_utilizaNovoPadrao = true;
    
    protected $_defaultOrder = 'acphorario.diasemana+1, acphorario.horainicio, acphorario.horafim';
    
    protected $_descriptionColumn = '_horario';
    
    protected $_virtualColumns = array(
        '_horario' => 'obterdiaextenso(acphorario.diasemana) || \' \' || acphorario.horainicio || \' - \' || acphorario.horafim',
        '_iniciofim' => 'to_char(acphorario.horainicio, \'hh24:mi\') || \' - \' || to_char(acphorario.horafim, \'hh24:mi\')',
    );

    protected $_associations = array(
        'gradehorario' => array(
            'mode' => 'one',
            'typeClass' => 'AcpGradeHorario',
            'joinColumnLeft' => 'gradehorarioid',
            'joinColumnRight' => 'gradehorarioid',
        ),
    );

    /**
     *
     * @var AcpGradeHorario 
     */
    public $gradehorario;
    
    public $_horario;
    public $_iniciofim;
    
    public $horarioid;
    public $gradehorarioid;
    public $horainicio;
    public $horafim;
    public $minutosfrequencia;
    public $diasemana;
    
    public function getChoiceComponentSQL($argument = null, $id = null)
    {
        $sql = parent::getChoiceComponentSQL($argument, $id);
        
        $args = $this->getAjaxArgs();
        $ofertacursoid = MIOLO::_REQUEST('ofertacursoid');
        $gradehorarioid = $args->gradehorarioid;
        $dataaula = $args->dataaula;
        
        if ( strlen($ofertacursoid) > 0 )
        {
            $sql->addLeftJoin('AcpOfertaCurso ofertacurso', 'ofertacurso.gradehorarioid = AcpHorario.gradehorarioid');
            $sql->addEqualCondition('ofertacurso.ofertacursoid', $ofertacursoid);
        }
        if ( strlen($gradehorarioid) > 0 )
        {
            $sql->addEqualCondition('AcpHorario.gradehorarioid', $gradehorarioid);
        }
        if ( strlen($dataaula) > 0 )
        {
            $sql->addEqualCondition('AcpHorario.diasemana', SAGU::getDatePart($dataaula, 'DOW'));
        }
        if( strlen($args->diasemana) > 0 )
        {
            $sql->addEqualCondition('AcpHorario.diasemana', $args->diasemana);
        }
        
        return $sql;
    }
    
    public static function obterHorariosDaGrade($gradehorarioid, $diasemana = null)
    {
        $horario = new AcpHorario();
        $sql = $horario->msql();
        $sql->setColumns('AcpHorario.horarioid');
        $sql->addEqualCondition('AcpHorario.gradehorarioid', $gradehorarioid);
        if( strlen($diasemana) > 0 )
        {
            $sql->addEqualCondition('AcpHorario.diasemana', $diasemana);
        }
        $horarios = $horario->findList($sql);
        if( count($horarios) > 0 )
        {
            foreach( $horarios as $cod=>$linha )
            {
                $data[] = new AcpHorario($cod);
            }
        }
        
        return $data;
    }
    
    public static function listarHorariosDaGrade($gradehorarioid, $diasemana = null)
    {
        foreach(self::obterHorariosDaGrade($gradehorarioid, $diasemana) as $cod=>$horario)
        {
            $return[$horario->horarioid] = $horario->horainicio._M(' ás ').$horario->horafim;
        }
        return $return;
    }
    
    /**
     * Obtém o próximo horario disponível
     * @param type $horainicio
     * @param type $gradehorarioid
     * @return type
     */
    public static function obterProximoHorario($horainicio, $diasemana, $gradehorarioid)
    {
        $horario = new AcpHorario();
        $sql = $horario->msql();
        $sql->setColumns('AcpHorario.horarioid');
        $sql->addEqualCondition('AcpHorario.gradehorarioid', $gradehorarioid);
        $sql->addEqualCondition('AcpHorario.diasemana', $diasemana);
        $sql->addGreaterEqualCondition('AcpHorario.horainicio', $horainicio);
        $sql->setOrderBy('AcpHorario.horainicio ASC');
        $return = $horario->findOneAsArray($sql);
        return new AcpHorario($return['horarioid']);
    }
    
    public static function obterHorariosNumPeriodo($datainicio, $horainicio, $datafim, $horafim, $gradehorarioid)
    {
        $data = $datainicio;
        
        $_horainicio = $horainicio;
        $_horafim = $horafim;
                
        $countdias = SAGU::dateDiff($datafim, $datainicio);
        //Percorre dia a dia
        for( $i = '0'; $i<= $countdias; $i++)
        {
            if( count($countdias) > 1 )
            {
                if( $i > '0' && $i < $countdias )
                {
                    $_horainicio = '00:00';
                    $_horafim = '24:00';
                }
                elseif( $i == 0 )
                {
                    $_horainicio = $horainicio;
                    $_horafim = '24:00';
                }
                else
                {
                    $_horainicio = '00:00';
                    $_horafim = $horafim;
                }
            }
            
            $diasemana = SAGU::getDatePart($data, 'DOW');
            
            $horario = new AcpHorario();
            $sql = $horario->msql();
            $sql->setColumns('AcpHorario.horarioid');
            $sql->addEqualCondition('AcpHorario.gradehorarioid', $gradehorarioid);
            $sql->addEqualCondition('AcpHorario.diasemana', $diasemana);
            $sql->addGreaterEqualCondition('AcpHorario.horainicio', $_horainicio);
            $sql->addSmallerEqualCondition('AcpHorario.horainicio', $_horafim);
            
            $horarios[$data] = $horario->findMany($sql);
            $data = SAGU::addIntervalInDate($data, 'd', 1);
        }
        return $horarios;
    }
}
?>
