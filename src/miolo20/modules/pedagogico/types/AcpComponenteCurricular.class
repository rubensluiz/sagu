<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Type pedagogico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class AcpComponenteCurricular extends SType
{
    protected $_associations = array(
        'componentedisciplina' => array(
            'mode' => 'one',
            'typeClass' => 'AcpComponenteCurricularDisciplina',
            'joinColumnLeft' => 'componentecurricularid',
            'joinColumnRight' => 'componentecurricularid',
        ),
        'componentetcc' => array(
            'mode' => 'one',
            'typeClass' => 'AcpComponenteCurricularTrabalhoConclusao',
            'joinColumnLeft' => 'componentecurricularid',
            'joinColumnRight' => 'componentecurricularid',
        ),
        'tipocomponentecurricular' => array(
            'mode' => 'one',
            'typeClass' => 'AcpTipoComponenteCurricular',
            'joinColumnLeft' => 'tipocomponentecurricularid',
            'joinColumnRight' => 'tipocomponentecurricularid',
        ),
    );
    
    protected $_utilizaNovoPadrao = true;
    
    protected $_virtualColumns = array(
        '_tipo' => 'tipocomponentecurricular.descricao',
    );
    
    protected $_descriptionColumn = 'AcpComponenteCurricular.codigo || \' - \' || AcpComponenteCurricular.nome';
    
    /**
     * Código do componente curricular
     * @var int
     */
    public $componentecurricularid;
    
    /**
     * tipocomponentecurricularid
     * @var text
     */
    public $tipocomponentecurricularid;
    
    /**
     * Código do componente
     * @var text
     */
    public $codigo;
    
    /**
     * Nome
     * @var text
     */
    public $nome;
    
    /**
     * Descricao
     * @var text 
     */
    public $descricao;
    
    /**
     * Conteútdo
     * @var text
     */
    public $conteudo;
    
    /**
     * ementa
     * @var type 
     */
    public $ementa;

    /**
     * objetivos
     * @var type 
     */
    public $objetivos;
    
    /**
     * professorresponsavelid
     * @var type 
     */
    public $professorresponsavelid;
    
    
    /**
     * @var AcpComponenteCurricularDisciplina
     */
    protected $componentedisciplina;
    
    /**
     * @var AcpComponenteCurricularTCC
     */
    protected $componentetcc;
    
    public $matrizcurriculargrupoid;
    
    public function findForChoiceComponent($argument = null, $id = null)
    {
        return parent::findForChoiceComponent('%' . $argument, $id);
    }
    
    /**
     * Retorna a classe populada com o componente adequado (Disciplina, TCC, etc..)
     */
    public function obterComponente()
    {
        switch ( $this->tipocomponentecurricular->tipo )
        {
            case AcpTipoComponenteCurricular::TIPO_DISCIPLINA:
                $comp = $this->componentedisciplina;
                break;
            
            case AcpTipoComponenteCurricular::TIPO_TCC:
                $comp = $this->componentetcc;
                break;
            
            default:
                $comp = null;
                break;
        }
        
        return $comp;
    }
    
    /**
     * @return boolean
     */
    public function temComponente()
    {
        return $this->obterComponente() != null;
    }
    
    public static function obterComponentesCurricularesDaMatriz($matrizCurricularId)
    {
        $sql = "SELECT A.componenteCurricularId
                  FROM acpComponenteCurricular A
            INNER JOIN acpComponenteCurricularMatriz B
                    ON A.componenteCurricularId = B.componenteCurricularId
            INNER JOIN acpMatrizCurricularGrupo C
                    ON C.matrizCurricularGrupoId = B.matrizCurricularGrupoId
            INNER JOIN acpMatrizCurricular D
                    ON C.matrizCurricularId = D.matrizCurricularId
                 WHERE D.matrizCurricularId = ? ";

        $return = SDatabase::query($sql, array($matrizCurricularId));
        
        if( count($return) > 0 )
        {
            foreach ( $return as $r )
            {
                $result[] = new AcpComponenteCurricular($r[0]);
            }
        }

        return $result;
    }
    
    public static function obterComponentesCurricularesDoGrupo($matrizCurricularGrupoId)
    {
        $componenteCurricular = new AcpComponenteCurricular();
        $msql = $componenteCurricular->msql();
        $msql->setColumns('acpcomponentecurricular.componentecurricularid');
        $msql->addEqualCondition('matrizcurriculargrupoid', $matrizCurricularGrupoId);
        $searchComponentesCurriculares = $componenteCurricular->findList($msql);                

        if( count($searchComponentesCurriculares) > 0 )
        {
            foreach($searchComponentesCurriculares as $cod=>$linha)
            {
                $return[] = new AcpComponenteCurricular($cod);
            }
        }

        return $return;
    }
    
    public function delete() 
    {
        //Remove as bibliografias do componente curricular
        $bibliografias = AcpComponenteCurricularBibliografia::obterBibliografiasDoComponenteCurricular($this->componentecurricularid);
        if( count($bibliografias) > 0 )
        {
            foreach($bibliografias as $cod=>$bibliografia)
            {
                $bibliografia->delete();
            }
        }
        
        if( $this->tipocomponentecurricular->tipo == AcpTipoComponenteCurricular::TIPO_DISCIPLINA )
        {
            $disciplinas = AcpComponenteCurricularDisciplina::obterComponenteCurricularDisciplinaDoComponente($this->componentecurricularid);
            if( count($disciplinas) > 0 )
            {
                foreach( $disciplinas as $cod=>$disciplina)
                {
                    $disciplina->delete();
                }
            }
        }
        else
        {
            $disciplinasTcc = AcpComponenteCurricularTrabalhoConclusao::obterComponenteCurricularTccDoComponente($this->componentecurricularid);
            if( count($disciplinasTcc) > 0 )
            {
                foreach( $disciplinasTcc as $cod=>$disciplinaTcc)
                {
                    $disciplinaTcc->delete();
                }
            }
        }
        
        // Remove componente curricular matriz
        $ccm = new AcpComponenteCurricularMatriz();
        $rows = $ccm->findMany( $ccm->msql()->addEqualCondition('AcpComponenteCurricularMatriz.componentecurricularid', $this->componentecurricularid) );
        
        foreach ( $rows as $row )
        {
            $row instanceof AcpComponenteCurricularMatriz;
            $row->delete();
        }
        
        return parent::delete();
    }
    
     /*
     * Funcao que retorna o id de todos os professores de uma turma.
     */
    public function obterIdProfessoresTurma($codigo_turma = null)
    {
        $sql = "SELECT DISTINCT acpocorrenciahorariooferta.professorid
                           FROM acpofertaturma
                      LEFT JOIN acpofertacomponentecurricular 
                             ON acpofertacomponentecurricular.ofertaturmaid=acpofertaturma.ofertaturmaid
                      LEFT JOIN acpocorrenciahorariooferta 
                             ON acpocorrenciahorariooferta.ofertacomponentecurricularid=acpofertacomponentecurricular.ofertacomponentecurricularid";
        
        is_null($codigo_turma) ? null : $sql .= " WHERE (acpofertaturma.ofertaturmaid =  {$codigo_turma})";
        
        $return = SDatabase::query($sql);
        
        return $return;
    }
    
    public function obterTipoComponenteCurricular($ofertaComponente)
    {
        $sql = "SELECT DISTINCT TCC.tipo
                   FROM acpofertacomponentecurricular OCC
              LEFT JOIN acpcomponentecurricularmatriz CCM 
                     ON OCC.componentecurricularmatrizid = CCM.componentecurricularmatrizid
              LEFT JOIN acpcomponentecurricular CC 
                     ON CC.componentecurricularid = CCM.componentecurricularid
              LEFT JOIN acptipocomponentecurricular TCC
                     ON TCC.tipocomponentecurricularid = CC.tipocomponentecurricularid
                WHERE (OCC.ofertacomponentecurricularid =  {$ofertaComponente})";
        
        $return = SDatabase::query($sql);
        
        return $return[0][0];
    }
}
?>
