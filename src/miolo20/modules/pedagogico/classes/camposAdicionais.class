<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Campos adicionais
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */

class camposAdicionais
{
    private $cursoId;
    
    private $perfilCursoCamposAdicionaisId;
    
    private $temReferencia = false;
    
    private $estaGravando = false;
    
    /**
     * @return string
     */
    public function getLabel()
    {
        return 'No label';
    }
    
    /**
     * @return string
     */
    public function getId()
    {
        $id = get_class($this);
        $id = str_replace('sCampo', '', $id);
        $id = strtolower($id);
        
        return $id;
    }
    
    public function getFieldSize()
    {
        return 20;
    }
    
    /**
     * @return array
     */
    public function getCampos()
    {
        $fields[] = $this->getTextField();
        
        return $fields;
    }
        
    public function getTextField()
    {
        return new MTextField($this->getId(), $this->getDados(), $this->getLabel(), $this->getFieldSize());
    }
    
    public function getMultiLineField()
    {
        return new sMultiLineField($this->getId(), array('label' => $this->getLabel(), 'value' => $this->getDados()));
    }
    
    public function getHtmlField()
    {
        $gf = new sGenericFields();
        return $gf->textoHtml($this->getId(), $this->getLabel(), null, $this->getDados());
    }
    
    public function getCalendarField()
    {
        return new MCalendarField($this->getId(), $this->getDados(), $this->getLabel());
    }
    
    public function getRequestValue()
    {
        return MIOLO::_REQUEST( $this->getId() );
    }
    
    public function hasRequestValue()
    {
        return isset($_REQUEST[$this->getId()]);
    }
    
    public function possuiDados()
    {
        $dados = $this->getDados();
        
        return !empty($dados);
    }
    
    public function getDados()
    {
        $value = $this->getRequestValue();

        if ( !$this->hasRequestValue() && $this->temReferencia )
        {
            $campo = AcpCamposAdicionaisCurso::obterInstanciaCampo($this->cursoId, $this->perfilCursoCamposAdicionaisId);
            
            $value = $campo->dados;     
            
//            flog('b:'.$value);
            
            $value = json_decode( $value );
            
//            flog('a:'.$value);
        }
        
        return $value;
    }
    
    public function gravaDados()
    {
        if ( $this->temReferencia && $this->possuiDados() )
        {
            $this->setEstaGravando(true);
            
            $value = $this->getDados();
            
            $this->setEstaGravando(false);
            
            $value = str_replace("\r\n", "\\n", $value);
            $value = str_replace("\n", "\\n", $value);
            $value = str_replace("	", "\\n", $value);
            $value = json_encode($value);
            
            $campo = AcpCamposAdicionaisCurso::obterInstanciaCampo($this->cursoId, $this->perfilCursoCamposAdicionaisId);
            $campo->dados = $value;
            $campo->save();
        }
        
        return true;
    }
    
    public function setReferencia($cursoId, $perfilCursoCamposAdicionaisId)
    {
        $this->temReferencia = true;
        
        $this->cursoId = $cursoId;
        $this->perfilCursoCamposAdicionaisId = $perfilCursoCamposAdicionaisId;
    }
    
    public function estaGravando() {
        return $this->estaGravando;
    }

    public function setEstaGravando($estaGravando) {
        $this->estaGravando = $estaGravando;
    }

        
    /**
     *
     * @return camposAdicionais 
     */
    public static function instanciarPeloId($id)
    {
        $className = self::obterClassePeloId($id);
        
        return self::instanciarClasse($className);
    }
    
    /**
     *
     * @return camposAdicionais 
     */
    public static function instanciarPeloIdNaBase($cursoId, $perfilCursoCamposAdicionaisId)
    {
        $pcca = new AcpPerfilCursoCamposAdicionais($perfilCursoCamposAdicionaisId);
        
        $obj = self::instanciarPeloId($pcca->nomecampo);
        $obj->setReferencia($cursoId, $perfilCursoCamposAdicionaisId);
        
        return $obj;
    }
    
    /**
     *
     * @return camposAdicionais 
     */
    public static function instanciarClasse($className)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        try
        {
            $MIOLO->uses( 'classes/campos/' . $className . '.class', $module );

            $campo = new $className();
            $campo instanceof camposAdicionais;
        }
        catch (Exception $e)
        {
            $campo = new camposAdicionaisHidden();
        }

        return $campo;
    }
    
    /**
     *
     * @return array
     */
    public static function listarCamposAdicionais()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        static $lista = array();
        
        if ( !$lista )
        {
            $files = SAGU::findFiles( $MIOLO->getModulePath($module, 'classes/campos/'), '/(.*).class/i' );

            foreach ( $files as $file )
            {
                list($className, $ext) = explode('.', basename($file));

                $campo = camposAdicionais::instanciarClasse($className);

                $lista[ $campo->getId() ] = $campo->getLabel();
            }
        }
        
        return $lista;
    }
    
    
    /**
     *
     * @return string
     */
    public static function obterClassePeloId($id)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $files = SAGU::findFiles( $MIOLO->getModulePath($module, 'classes/campos/'), '/(.*).class/i' );

        foreach ( $files as $file )
        {
            list($className, $ext) = explode('.', basename($file));
            
            $campo = camposAdicionais::instanciarClasse($className);

            if ( $campo->getId() == $id )
            {
                return $className;
            }
        }
        
        return null;
    }
}
?>
