<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Fechamento de turma
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class Created on 30/08/2013
 *
 **/
class GrdFechamentoDeTurma extends SGrid
{
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $columns = array(
            'ofertacurso.descricao' => new MGridColumn( _M('Curso', $module)),
            'acpofertaturma.descricao' => new MGridColumn( _M('Turma', $module)),
            'acpofertaturma.datainicialaulas' => new MGridColumn( _M('Data inicial', $module), 'center'),
            'acpofertaturma.datafinalaulas' => new MGridColumn( _M('Data final', $module), 'center'),            
            'matriculados' => new MGridColumn( _M('Alunos matriculados', $module), 'right'),
            'cancelados' => new MGridColumn ( _M('Alunos cancelados', $module), 'right'),
            'aprovados' => new MGridColumn( _M('Alunos aprovados', $module), 'right'),
            'reprovados' => new MGridColumn ( _M('Alunos reprovados', $module), 'right'),
            'pendenciafrequencia' => new MGridColumn ( _M('Pendências', $module), 'right'),
            'frequencias_pendentes' => new MGridColumn ( _M('Pendências', $module), 'right', false, null, false),
            'acpofertaturma.ofertaturmaid' => new MGridColumn( _M('Código', $module), 'left', false, 0, false),
            'acpofertaturma.situacao' => new MGridColumn( _M('Situacao', $module), 'left', false, 0, false)
            );

        parent::__construct($filters, $columns, __CLASS__, array('acpofertacomponentecurricularid' => '%acpofertacomponentecurricular.ofertacomponentecurricularid%'));

        //Ordenaç?es       
        $columns['datafinal']->order = true;
        $columns['datainicial']->order = true;
                
        $this->setRowMethod('GrdFechamentoDeTurma', 'myRowMethod');
        $this->setPageLength(50);
        $this->clearActions();
        
        $urlFechar = $MIOLO->GetActionURL($module, 'main:process:fechamentodeturma', '', array('ofertaturmaid' => '%acpofertaturma.ofertaturmaid%', 'event' => 'fecharTurma_click'));
        $this->addActionIcon(_M('Fechar turma', $module), 'unlock.png', $urlFechar);

        $urlDisciplinas = $MIOLO->GetActionURL($module, 'main:process:frequenciasenotas', '', array('buscaturmaids' => '%acpofertaturma.ofertaturmaid%'));
        $this->addActionIcon(_M('Componentes curriculares', $module), 'notas-16x16.png', $urlDisciplinas);        
    }
    
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $urlPendenciaFreq = $MIOLO->GetActionURL($module, 'main:process:fechamentodeturma', '', array('ofertaturmaid' => '%acpofertaturma.ofertaturmaid%', 'event' => 'enviamailfrequencias_confirm'));
        $id = 'lnk_'.$columns['acpofertaturma.ofertaturmaid']->control[$i]->getValue();
        $iconFreq = new MImageLink($id, null, $urlPendenciaFreq, $MIOLO->getUI()->getImage('', 'table-edit.png'));

        //Ação de fechar ou reabrir turma
        if ( $row['acpofertaturma.situacao'] == AcpOfertaTurma::SITUACAO_FECHADA )
        {
            $urlReabrir = $MIOLO->GetActionURL($module, 'main:process:fechamentodeturma', '', array('ofertaturmaid' => '%acpofertaturma.ofertaturmaid%', 'event' => 'reabrirTurma_click'));
            $actions[0]->enable();            
            $actions[0]->alt = _M('Reabrir turma');
            $actions[0]->value = 'lock.png';
            $actions[0]->href = $urlReabrir;
        }
        else
        {          
            $urlFechar = $MIOLO->GetActionURL($module, 'main:process:fechamentodeturma', '', array('ofertaturmaid' => '%acpofertaturma.ofertaturmaid%', 'event' => 'fecharTurma_click'));
            $actions[0]->enable();
            $actions[0]->alt = _M('Fechar turma');
            $actions[0]->value = 'unlock.png';
            $actions[0]->href = $urlFechar;
        }

        //Desabilita a ação Registrar frequências caso a disciplina nao possua ocorrencia de aulas
        if ( AcpOfertaTurma::possuiPendenciaFrequencia($row['acpofertaturma.ofertaturmaid']) == DB_TRUE )
        {
             $actions[0]->disable();
             $actions[0]->alt = _M('Esta turma não pode ser fechada pois existem pendências de frequências');
             $imgFreq = $MIOLO->getUI()->getImageTheme('smodern','frequency-on.png').'" ';  
             $hrefFreq = $MIOLO->GetActionURL($module, 'main:process:fechamentodeturma', '', array('ofertaturmaid' => $columns['acpofertaturma.ofertaturmaid']->control[$i]->getValue(), 'event' => 'enviamailfrequencias_confirm'));
             $altFreq = _M('O(s) professore(s) desta turma não digitaram todas as frequência. Clique aqui para enviar um e-mail de notificação');
             $naoPossuiPendenciaFrequencia = false;
        }
        else
        {
             $naoPossuiPendenciaFrequencia = true;
             $altFreq = _M('Nenhuma pendência encontrada');
        }
        
        if ( AcpOfertaTurma::possuiPendenciaNota($row['acpofertaturma.ofertaturmaid']) && !AcpEstadoDeMatricula::existeEstadoPendente() )
        {
             $actions[0]->disable();
             $actions[0]->alt = _M('Esta turma não pode ser fechada pois existem pendências de notas');
             $imgNota = $MIOLO->getUI()->getImage('controlCopies', 'table-edit.png').'"';
             $hrefNota = $MIOLO->GetActionURL($module, 'main:process:fechamentodeturma', '', array('ofertaturmaid' => $columns['acpofertaturma.ofertaturmaid']->control[$i]->getValue(), 'event' => 'enviamailnotas_confirm'));
             $altNota = _M('O(s) professore(s) desta turma não digitaram todas as notas. Clique para enviar um e-mail de notificação');
             $naoPossuiPendenciaNota = false;
        }
        else
        {
             $naoPossuiPendenciaNota = true;
             $altNota = _M('Nenhuma pendência encontrada');
        }
        
        //Nao precisa checar pendencias se turma já está fechada
        if( ($naoPossuiPendenciaFrequencia && $naoPossuiPendenciaNota) || $acpOfertaTurma->situacao == AcpOfertaTurma::SITUACAO_FECHADA )
        {
            $actions[0]->enable();
            
            //Mudar nome do "cadeado" conforme situacao da turma
            if ( $row['acpofertaturma.situacao'] == AcpOfertaTurma::SITUACAO_FECHADA )
            {
                $actions[0]->alt = _M('Reabrir turma');
            }
            else
            {
                $actions[0]->alt = _M('Fechar turma');
            }
        }
        elseif( !$naoPossuiPendenciaFrequencia && !$naoPossuiPendenciaNota )
        {
            $actions[0]->disable();
            $actions[0]->alt = _M('Esta turma não pode ser fechada pois existem pendências de frequências e notas');
        }
        
        if( isset($imgFreq) && isset($imgNota) )
        {
             $iconFreq = new MImageLink('lnkFreq', $altFreq, $hrefFreq, $imgFreq);      
             $iconNotas = new MImageLink('lnkNota', $altNota, $hrefNota, $imgNota);    
             $columns['pendenciafrequencia']->control[$i]->setValue('<center>'.$iconFreq->generate() . '&nbsp;' . $iconNotas->generate().'</center>');
             
        }
        elseif( isset($imgFreq) && !isset($imgNota) )
        {
             $iconFreq = new MImageLink('lnkFreq', $altFreq, $hrefFreq, $imgFreq);      
             $columns['pendenciafrequencia']->control[$i]->setValue('<center>'.$iconFreq->generate().'</center>');            
        }
        elseif( !isset($imgFreq) && isset($imgNota) )
        {
             $iconNotas = new MImageLink('lnkNota', $altNota, $hrefNota, $imgNota);    
             $columns['pendenciafrequencia']->control[$i]->setValue('<center>'.$iconNotas->generate().'</center>');                          
        }
    }
}
?>