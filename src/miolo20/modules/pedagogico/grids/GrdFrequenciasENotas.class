<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Frequências e notas
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class Created on 30/08/2013
 *
 **/
class GrdFrequenciasENotas extends SGrid
{
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $columns = array(
            'componentecurricular.nome' => new MGridColumn( _M('Componente curricular', $module)),
            'ofertaturma.descricao' => new MGridColumn( _M('Turma', $module)),
            'ofertacurso.descricao' => new MGridColumn( _M('Curso', $module), 'left', false, null, true, null, true),
            'datainicial' => new MGridColumn( _M('Data inicial', $module), 'center'),
            'datafinal' => new MGridColumn( _M('Data final', $module), 'center'),
            'matriculados' => new MGridColumn( _M('Alunos matriculados', $module), 'right'),
            'cancelados' => new MGridColumn ( _M('Alunos cancelados', $module), 'right'),
            'aprovados' => new MGridColumn( _M('Alunos aprovados', $module), 'right'),
            'reprovados' => new MGridColumn ( _M('Alunos reprovados', $module), 'right'),
            'pendenciafrequencia' => new MGridColumn ( _M('Pendências', $module), 'right'),
            'acpofertacomponentecurricular.ofertacomponentecurricularid' => new MGridColumn( _M('Código', $module),'left',false,null,false),
            'tipocomponentecurricular.tipo' => new MGridColumn( _M('Código', $module),'left',false,null,false),
        );

        parent::__construct($filters, $columns, __CLASS__, array('acpofertacomponentecurricularid' => '%acpofertacomponentecurricular.ofertacomponentecurricularid%'));

        //Ordenaç?es
        $columns['datafinal']->order = true;
        $columns['datainicial']->order = true;
        $columns['matriculados']->order = true;
        $columns['cancelados']->order = true;
        $columns['aprovados']->order = true;
        $columns['reprovados']->order = true;

        $this->setPageLength(50);
        $this->clearActions();

        $this->setRowMethod('GrdFrequenciasENotas', 'myRowMethod');

        $urlFrequencias = str_replace( 'miolo20', 'miolo26',$MIOLO->getConf('home.url')).'/index.php?module=portal&action=main:frequenciasProfessorPedagogico&isAdmin=t&ofertacomponentecurricularid=%acpofertacomponentecurricular.ofertacomponentecurricularid%&modulo=academic';
        $iconFrequencias = new MGridActionIcon($this, 'frequency-on.png', $urlFrequencias, _M('Registrar frequências', $module));
        $iconFrequencias->setTarget('_blank');
        $this->actions[] = $iconFrequencias;

        $urlNotas = str_replace( 'miolo20', 'miolo26',$MIOLO->getConf('home.url')).'/index.php?module=portal&action=main:notasProfessorPedagogico&isAdmin=t&ofertacomponentecurricularid=%acpofertacomponentecurricular.ofertacomponentecurricularid%&modulo=academic';
        $iconNotas = new MGridActionIcon($this, 'table-edit.png', $urlNotas, _M('Registrar notas', $module));
        $iconNotas->setTarget('_blank');
        $this->actions[] = $iconNotas;

        $urlCaderno = $MIOLO->GetActionURL($module, 'main:report:generateReport', '', array('report' => 'attendanceReportPedagogico', 'str_group_id' => '%acpofertacomponentecurricular.ofertacomponentecurricularid%', 'event' => 'btnGenerate:click'));
        $this->addActionIcon(_M('Caderno de chamada', $module), 'attendanceList.png', $urlCaderno);

        $urlDiario = $MIOLO->GetActionURL($module, 'main:report:generateReport', '', array('report' => 'attachedLeafPedagogico', 'str_groupid' => '%acpofertacomponentecurricular.ofertacomponentecurricularid%', 'event' => 'btnGenerate:click'));
        $this->addActionIcon(_M('Diário de classe', $module), 'attachedLeaf.png', $urlDiario);

        $urlPlano = $MIOLO->GetActionURL($module, 'main:register:planoensino', '', array('ofertacomponentecurricularid' => '%acpofertacomponentecurricular.ofertacomponentecurricularid%'));
        $this->addActionIcon(_M('Plano de ensino', $module), 'register-16x16.png', $urlPlano);

        $urlFechar = $MIOLO->GetActionURL($module, 'main:process:frequenciasenotas', '', array('ofertacomponentecurricularid' => '%acpofertacomponentecurricular.ofertacomponentecurricularid%', 'event' => 'fecharOfertaComponenteCurricular_click'));
        $this->addActionIcon(_M('Fechar componente curricular', $module), 'unlock.png', $urlFechar);
    }

    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        // trunca o tamanho do campo disciplina para N caracteres
        $disciplina = $columns['componentecurricular.nome']->control[$i]->value;

        //Adiciona nome da disciplina e nome dos professores
        $professores  = array_merge(explode(',', $row['professores']),  explode(',', $row['professoresEAD']));
        $professores = array_unique($professores);
        $professores = implode(',', $professores);
        if(substr($professores,0,1) == ',')
        {
            $professores = substr($professores, 1);
        }
        if(substr($professores,-1,  strlen($professores)) == ',')
        {
            $professores = substr($professores, 0, -1);
        }
        $columns['componentecurricular.nome']->control[$i]->setValue('<b>' . $disciplina . '</b><br><i>'.$professores.'</i>');

        $urlPendenciaFreq = $MIOLO->GetActionURL($module, 'main:process:fechamentodeturma', '', array('ofertaturmaid' => '%acpofertaturma.ofertaturmaid%', 'event' => 'enviamailfrequencias_confirm'));
        $id = 'lnk_'.$columns['acpofertacomponentecurricular.ofertacomponentecurricularid']->control[$i]->getValue();
        $iconFreq = new MImageLink($id, null, $urlPendenciaFreq, $MIOLO->getUI()->getImage('', 'table-edit.png'));

        //Desabilita a ação Registrar frequências caso a disciplina nao possua ocorrencia de aulas
        if ( $row['possui_ocorrencia_horario'] == DB_TRUE )
        {
            $actions[0]->enable();
            $actions[0]->alt = _M('Registrar frequência');
        }
        else
        {
            $actions[0]->disable();
            $actions[0]->alt = _M('Nenhum encontro registrado');
        }

        if( ( $row['tipodedados'] != AcpModeloDeAvaliacao::TIPO_NENHUM ) )
        {
            $actions[1]->enable();
        }
        else
        {
            $actions[1]->disable();
        }

        if( strlen($row['acpofertacomponentecurricular.datafechamento']) > 0 )
        {
            //Ação de reabrir componente curricular
            $urlReabrir = $MIOLO->GetActionURL($module, 'main:process:frequenciasenotas', '', array('ofertacomponentecurricularid' => '%acpofertacomponentecurricular.ofertacomponentecurricularid%', 'event' => 'reabrirOfertaComponenteCurricular_click'));
            $actions[5]->enable();
            $actions[5]->alt = _M('Reabrir componente curricular');
            $actions[5]->value = 'lock.png';
            $actions[5]->href = $urlReabrir;

            //Ação de registro de frequencias
            $actions[0]->disable();
            $actions[0]->alt = _M('Não é possível registrar frequências pois o componente curricular está encerrado');

            //Ação de registro de notas
            $actions[1]->enable();
            $actions[1]->alt = _M('Visualizar notas');
        }
        else
        {
            //Ação de fechar componente curricular
            $urlFechar = $MIOLO->GetActionURL($module, 'main:process:frequenciasenotas', '', array('ofertacomponentecurricularid' => '%acpofertacomponentecurricular.ofertacomponentecurricularid%', 'event' => 'fecharOfertaComponenteCurricular_click'));
            $actions[5]->enable();
            $actions[5]->alt = _M('Fechar componente curricular');
            $actions[5]->value = 'unlock.png';
            $actions[5]->href = $urlFechar;

            //Ação de registro de frequencias
            $actions[0]->enable();
            $actions[0]->alt = _M('Registrar frequência');

            //Ação de registro de notas
            $actions[1]->enable();
            if( ( $row['tipodedados'] == AcpModeloDeAvaliacao::TIPO_PARECER ) ) {
                $actions[1]->alt = _M('Registrar parecer');
            } else {
                $actions[1]->alt = _M('Registrar notas');
            }
        }

         //Desabilita a ação Registrar frequências caso a disciplina nao possua ocorrencia de aulas
        if ( $row['possui_frequencias_pendentes'] == DB_TRUE )
        {
             $actions[5]->disable();
             $actions[5]->alt = _M('Este componente curricular não pode ser fechado por que existe pendência de frequência');
             $imgFreq = $MIOLO->getUI()->getImageTheme('smodern','frequency-on.png').'" ';
             $hrefFreq = $MIOLO->GetActionURL($module, 'main:process:frequenciasenotas', '', array('ofertacomponentecurricularid' => $columns['acpofertacomponentecurricular.ofertacomponentecurricularid']->control[$i]->getValue(), 'event' => 'enviamailfrequencias_confirm'));
             $altFreq = _M('O(s) professore(s) deste componente curricular não digitaram todas as frequência. Clique aqui para enviar um e-mail de notificação');
             $naoPossuiPendenciaFrequencia=false;
        }
        else
        {
             $naoPossuiPendenciaFrequencia=true;
             $altFreq = _M('Nenhuma pendência encontrada');
        }

        if ( $row['possui_notas_pendentes'] == DB_TRUE && !AcpEstadoDeMatricula::existeEstadoPendente() )
        {
             $actions[5]->disable();
             $actions[5]->alt = _M('Este componente curricular não pode ser fechado por que existe pendência de notas');
             $imgNota = $MIOLO->getUI()->getImage('controlCopies', 'table-edit.png').'"';
             $hrefNota = $MIOLO->GetActionURL($module, 'main:process:frequenciasenotas', '', array('ofertacomponentecurricularid' => $columns['acpofertacomponentecurricular.ofertacomponentecurricularid']->control[$i]->getValue(), 'event' => 'enviamailnotas_confirm'));
             $altNota = _M('O(s) professore(s) deste componente curricular não digitaram todas as notas. Clique aqui para enviar um e-mail de notificação');
             $naoPossuiPendenciaNota = false;
        }
        else
        {
             $naoPossuiPendenciaNota = true;
             $altNota = _M('Nenhuma pendência encontrada');
        }

        //Se componente nao tem pendencias, pode reabrir, se estiver fechado pode reabir sempre
        if( ($naoPossuiPendenciaFrequencia && $naoPossuiPendenciaNota) || strlen($row['acpofertacomponentecurricular.datafechamento']) > 0 )
        {
            $actions[5]->enable();

            //Muda nome do "cadeado" conforme data de fechamento
            if( strlen($row['acpofertacomponentecurricular.datafechamento']) > 0 )
            {
                $actions[5]->alt = _M('Reabrir componente curricular');

                //Ação de registro de frequencias
                $actions[0]->disable();
                $actions[0]->alt = _M('Não é possível registrar frequências pois o componente curricular está encerrado');

                //Ação de registro de notas
                $actions[1]->enable();
                $actions[1]->alt = _M('Visualizar notas');
            }
            else
            {
                $actions[5]->alt = _M('Fechar componente curricular');

                //Ação de registro de frequencias
                $actions[0]->enable();
                $actions[0]->alt = _M('Registrar frequência');

                //Ação de registro de notas
                $actions[1]->enable();

                if( ( $row['tipodedados'] == AcpModeloDeAvaliacao::TIPO_PARECER ) ) {
                    $actions[1]->alt = _M('Registrar parecer');
                } else {
                    $actions[1]->alt = _M('Registrar notas');
                }

            }
        }
        elseif( !$naoPossuiPendenciaFrequencia && !$naoPossuiPendenciaNota )
        {
            $actions[5]->disable();
            $actions[5]->alt = _M('Este componente curricular não pode ser fechado pois existem pendências de frequência e notas');
        }

        if( isset($imgFreq) && isset($imgNota) )
        {
             $iconFreq = new MImageLink('lnkFreq', $altFreq, $hrefFreq, $imgFreq);
             $iconNotas = new MImageLink('lnkNota', $altNota, $hrefNota, $imgNota);
             $columns['pendenciafrequencia']->control[$i]->setValue('<center>'.$iconFreq->generate() . '&nbsp;' . $iconNotas->generate().'</center>');
        }
        elseif( isset($imgFreq) && !isset($imgNota) )
        {
             $iconFreq = new MImageLink('lnkFreq', $altFreq, $hrefFreq, $imgFreq);
             $columns['pendenciafrequencia']->control[$i]->setValue('<center>'.$iconFreq->generate().'</center>');
        }
        elseif( !isset($imgFreq) && isset($imgNota) )
        {
             $iconNotas = new MImageLink('lnkNota', $altNota, $hrefNota, $imgNota);
             $columns['pendenciafrequencia']->control[$i]->setValue('<center>'.$iconNotas->generate().'</center>');
        }

        //Verifica se tem aulas, pra poder registrar as frequencias
        if ( !(strlen($row['datainicial']) > 0) &&
             !(strlen($row['datafinal']) > 0) &&
             $actions[0]->enabled )
        {
            $actions[0]->alt = _M('Nenhum encontro cadastrado.');
            $actions[0]->disable();
        }
        
        //disciplina EAD -- frequencias
        $search = new AcpComponenteCurricular();
        if($search->obterTipoComponenteCurricular($columns['acpofertacomponentecurricular.ofertacomponentecurricularid']->control[$i]->getValue()) == AcpTipoComponenteCurricular::TIPO_EAD)
        {
            $actions[0]->enable();
            $actions[0]->alt = _M('Registrar frequências.');
        }
    }
}
?>
