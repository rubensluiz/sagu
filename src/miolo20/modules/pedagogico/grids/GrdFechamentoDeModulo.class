<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Fechamento de turma
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class Created on 30/08/2013
 *
 **/
class GrdFechamentoDeModulo extends SGrid
{
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $columns = array(
            'ofertadecurso' => new MGridColumn( _M('Oferta de curso', $module)),
            'turma' => new MGridColumn( _M('Turma', $module)),
            'modulo' => new MGridColumn( _M('Módulo', $module)),
            'matriculados' => new MGridColumn( _M('Matriculados', $module)),
            'aprovados' => new MGridColumn( _M('Aprovados', $module)),
            'reprovados' => new MGridColumn( _M('Reprovados', $module)),
            'cancelados' => new MGridColumn( _M('Cancelados', $module)),
            'pendencias_' => new MGridColumn( _M('Pendências', $module))
        );

        parent::__construct($filters, $columns, __CLASS__, array('acpofertacomponentecurricularid' => '%acpofertacomponentecurricular.ofertacomponentecurricularid%'));

        $this->setRowMethod('GrdFechamentoDeModulo', 'myRowMethod');
        $this->setPageLength(50);
        $this->clearActions();

        $urlFechar = $MIOLO->GetActionURL($module, 'main:process:fechamentodemodulo', '', array('ofertaturmaid' => '%ofertaturmaid%', 'moduloid' => '%moduloid%', 'event' => 'fecharModulo_click'));
        $iconFecharModulo = new MGridActionIcon($this, 'unlock.png', $urlFechar, _M('Fechar Módulo', $module));
        $iconFecharModulo->setTarget('_blank');
        $this->actions[] = $iconFecharModulo;


        $urlFrequenciaModulo = $MIOLO->GetActionURL($module, 'main:report:generateReport', '', array('report' => 'frequenciaModulo', 'int_cursoid' => '%cursoid%', 'int_ofertaturmaid' => '%ofertaturmaid%', 'int_grupoid' => '%moduloid%',  'event' => 'btnGenerate:click'));
        $iconFrequenciaModulo = new MGridActionIcon($this, 'attendanceList.png', $urlFrequenciaModulo, _M('Relatório de frequência no módulo', $module));
        $iconFrequenciaModulo->setTarget('_blank');
        $this->actions[] = $iconFrequenciaModulo;


        $urlNotaModulo = $MIOLO->GetActionURL($module, 'main:report:generateReport', '', array('report' => 'relatorioNotasModulo', 'int_ofertaturmaid' => '%ofertaturmaid%', 'int_moduloid' => '%moduloid%',  'event' => 'btnGenerate:click'));
        $iconNotaModulo = new MGridActionIcon($this, 'doc.png', $urlNotaModulo, _M('Relatório de notas no módulo', $module));
        $iconNotaModulo->setTarget('_blank');
        $this->actions[] = $iconNotaModulo;

        $urlSituacaoDeAlunosNoModulo = $MIOLO->GetActionURL($module, 'main:report:generateReport', '', array('report' => 'situacaoDeAlunosNoModulo', 'str_ofertaturmaid' => '%ofertaturmaid%', 'int_moduloid' => '%moduloid%',  'event' => 'btnGenerate:click'));
        $iconSituacaoDeAlunosNoModulo = new MGridActionIcon($this, 'login-user.png', $urlSituacaoDeAlunosNoModulo, _M('Situação dos alunos no módulo', $module));
        $iconSituacaoDeAlunosNoModulo->setTarget('_blank');
        $this->actions[] = $iconSituacaoDeAlunosNoModulo;
    }

    public function myRowMethod($i, $row, $actions, $columns )
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        //Ação de fechar ou reabrir turma
        if ( $row['situacao'] == 'F' )
        {
            $urlReabrir = $MIOLO->GetActionURL($module, 'main:process:fechamentodemodulo', '', array('ofertaturmaid' => '%ofertaturmaid%', 'moduloid' => '%moduloid%', 'event' => 'reabrirModulo_click'));
            $actions[0]->enable();
            $actions[0]->alt = _M('Reabrir módulo');
            $actions[0]->value = 'lock.png';
            $actions[0]->href = $urlReabrir;
        } else {
            $urlFechar = $MIOLO->GetActionURL($module, 'main:process:fechamentodemodulo', '', array('ofertaturmaid' => '%ofertaturmaid%', 'moduloid' => '%moduloid%', 'event' => 'fecharModulo_click'));
            $actions[0]->enable();
            $actions[0]->alt = _M('Fechar módulo');
            $actions[0]->value = 'unlock.png';
            $actions[0]->href = $urlFechar;
        }

        if ( $row['possui_notas_pendentes'] == DB_TRUE ) {
            $actions[0]->disable();
            $actions[0]->alt = _M('Esta turma não pode ser fechada pois existem pendências de notas');
            $imgNota = $MIOLO->getUI()->getImage('controlCopies', 'table-edit.png').'"';
            $hrefNota = $MIOLO->GetActionURL($module, 'main:process:frequenciasenotas', '', array());
            $altNota = _M('O(s) professore(s) deste módulo não digitaram todas as notas. Clique para digitar as notas');
            $naoPossuiPendenciaNota = false;
        } else {
            $naoPossuiPendenciaNota = true;
        }

        if ($naoPossuiPendenciaNota) {
            $actions[0]->enable();
        } else {
            $actions[0]->disable();
        }

        $iconNotas = new MImageLink('lnkNota', $altNota, $hrefNota, $imgNota);
        $columns['pendencias_']->control[$i]->setValue('<center>'.$iconNotas->generate().'</center>');
    }
}
?>