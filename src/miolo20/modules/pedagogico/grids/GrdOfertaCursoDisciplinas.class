<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Grid Modelo de Avaliacao
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class Created on 30/08/2013
 *
 **/
class GrdOfertaCursoDisciplinas extends SGrid
{
    public $selecionados = array();
    
    public function __construct($filters, $name)
    {
        $module = MIOLO::getCurrentModule();

        $columns = array(
            'componentecurricular.codigo' => new MGridColumn( _M('Código', $module)),
            'componentecurricular.nome' => new MGridColumn( _M('Nome', $module)),
            'componentecurricular.descricao' => new MGridColumn( _M('Descrição', $module), 'left'),
            'acpcomponentecurricularmatriz.obrigatorio' => new MGridColumn( _M('Obrigatório', $module), 'center', false, 0, true, SAGU::listYesNo()),
            'tipocomponentecurricular.descricao' => new MGridColumn( _M('Tipo', $module)),
            'acpcomponentecurricularmatriz.situacao' => new MGridColumn( _M('Situação', $module), 'center', false, 0, true, AcpComponenteCurricularMatriz::listarSituacao()),
            '_professores' => new MGridColumn( _M('Professores', $module)),
            '_datainicial' => new MGridColumn( _M('Data inicial', $module)),
            '_datafinal' => new MGridColumn( _M('Data final', $module)),
        );

        parent::__construct($filters, $columns, SAGU::NVL($name, __CLASS__), array('componentecurricularmatrizid' => '%acpcomponentecurricularmatriz.componentecurricularmatrizid%'));
        
        $this->setRowMethod(__CLASS__, 'myRowMethod');
    }
    
    public function setDefaultGridActions($primaryKey = array())
    {
        $module = MIOLO::getCurrentModule();

        // define acao Definir calendario de aulas
        $href = MIOLO::getInstance()->GetActionURL($module, 'main:process:definiraulas', null, array('ofertacomponentecurricularid' => '%_ofertacomponentecurricularid%'));
        $this->addActionIcon(_M('Definir calendário de aulas'), 'cal.gif', $href);
        $this->actions['calendar'] = $this->actions[0];
        unset($this->actions[0]);

        // define acao Definir calendario de aulas
        $href = MIOLO::getInstance()->GetActionURL($module, 'main:process:docentesead', null, array('ofertacomponentecurricularid' => '%_ofertacomponentecurricularid%'));
        $this->addActionIcon(_M('Definir professores da disciplina EAD'), 'button_properties.png', $href);
        $this->actions['docentesead'] = $this->actions[1];
        unset($this->actions[1]);
    }
    
    public function myRowMethod($i, $row, $actions, $columns)
    {
        //Adiciona nome da disciplina e nome dos professores
        $professores  = array_merge(explode(',', $row['_professores']),  explode(',', $row['_professoresead']));
        $professores = array_unique($professores);
        $professores = implode(',', $professores);
        if(substr($professores,0,1) == ',')
        {
            $professores = substr($professores, 1);
        }
        if(substr($professores,-1,  strlen($professores)) == ',')
        {
            $professores = substr($professores, 0, -1);
        }
        $columns['_professores']->control[$i]->setValue('<i>'.$professores.'</i>');

        // habilita acao apenas para registros selecionados na grid (disciplinas oferecidas)
        if ( $actions['calendar'] )
        {

            $modeloDeAvaliacao = AcpModeloDeAvaliacao::obterModeloDaOfertaDeComponenteCurricular($row['_ofertacomponentecurricularid']);
            if ($modeloDeAvaliacao->tipoDeDados != 'P') {
                $actions['calendar']->enabled = in_array($i, $this->selecionados);
            } else {
                $actions['calendar']->enabled = false;
            }

        }

        if( !in_array($i, $this->selecionados) )
        {
            $actions['calendar']->alt = _M('Definir calendário de aulas: Selecione e salve a oferta do componente antes');
        }
        else
        {
            $actions['calendar']->alt = _M('Definir calendário de aulas');
        }
        $tipoComponente = new AcpTipoComponenteCurricular($row['componentecurricular.tipocomponentecurricularid']);
        if($tipoComponente->tipo == AcpTipoComponenteCurricular::TIPO_EAD)
        {
            if(strlen($row['_ofertacomponentecurricularid'] > 0))
            {
                $actions['docentesead']->enabled = true;
            }
            else
            {
                $actions['docentesead']->enabled = false;
                $actions['docentesead']->alt = _M('Definir professor: Selecione e salve a oferta do componente antes');
            }
        }
        else
        {
            $actions['docentesead']->enabled = false;
            $actions['docentesead']->alt = _M('Definir professor: Apenas para disciplinas EAD');
        }
    }
}
?>