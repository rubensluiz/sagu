<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file manipulate the lookups for the basic module of sagu
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 26/09/2013
 */

//$MIOLO = MIOLO::getInstance();
//$MIOLO->getClass('basic', 'lookupFields');

/**
 * Class to manipulate the Lookups
 */
class BusinessPedagogicoLookup extends sLookup
{
    public function autoCompleteModeloDeAvaliacao(&$context)
    {
        $sql = 'SELECT descricao
                  FROM acpModeloDeAvaliacao
                 WHERE modelodeavaliacaoid = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

        public function lookupModeloDeAvaliacao(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $modelodeavaliacaoid = $lookup->getFilterValue('modelodeavaliacaoid');
        $descricao = $lookup->getFilterValue('descricao');
        $tipodedados = $lookup->getFilterValue('tipodedados');
        $aplicacao = $lookup->getFilterValue('aplicacao');
        $ativo = $lookup->getFilterValue('ativo');
        
        $lookup->addFilterField(new MTextField('modelodeavaliacaoid', $modelodeavaliacaoid, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('descricao', $descricao, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MSelection('tipodedados', $tipodedados, _M('Tipo de dados',$module), AcpModeloDeAvaliacao::listarTiposDeDados()));
        $lookup->addFilterField(new MSelection('aplicacao', $aplicacao, _M('Aplicação',$module), AcpModeloDeAvaliacao::listarAplicacoes()));
        $lookup->addFilterField(new MSelection('ativo', $ativo, _M('Ativo',$module), SAGU::listYesNo()));

        global $page;
        $page->onLoad('document.' . $page->name . '.descricao.focus()');


        $columns[] = new DataGridColumn('modelodeavaliacaoid', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('descricao', _M('Descrição', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('tipodedados', _M('Tipo de dados', $module), 'left', true, null, true, AcpModeloDeAvaliacao::listarTiposDeDados());
        $columns[] = new DataGridColumn('aplicacao', _M('Aplicação', $module), 'left', true, null, true, AcpModeloDeAvaliacao::listarAplicacoes());
        $columns[] = new DataGridColumn('ativo', _M('Ativo', $module), 'center', true, null, true, SAGU::listYesNo());

        $sql = 'SELECT A.modelodeavaliacaoid,
                       A.descricao,
                       A.tipodedados,
                       A.aplicacao,
                       A.ativo
                  FROM acpModeloDeAvaliacao A';

        if ( strlen($modelodeavaliacaoid) > 0 )
        {
            $where .= ' AND A.modelodeavaliacaoid = ?';
            $args[] = $modelodeavaliacaoid;
        }

        if ( strlen($descricao) > 0 )
        {
            $where .= ' AND UNACCENT(A.descricao) ILIKE UNACCENT(?)';
            $args[] = $descricao . '%';
        }

        if ( strlen($tipodedados) > 0 )
        {
            $where .= ' AND A.tipodedados = ?';
            $args[] = $tipodedados;
        }
        
        if ( strlen($aplicacao) > 0 )
        {
            $where .= ' AND A.aplicacao = ?';
            $args[] = $aplicacao;
        }
        
        if ( strlen($ativo) > 0 )
        {
            $where .= ' AND A.ativo = ?';
            $args[] = $ativo;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.descricao';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom($sql,$args);
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar Modelo de avaliação',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
    
    
    public function autoCompleteEstadoDeMatricula(&$context)
    {
        $sql = 'SELECT descricao
                  FROM acpEstadoDeMatricula
                 WHERE estadoDeMatriculaId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupEstadoDeMatricula(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $estadodematriculaid = $lookup->getFilterValue('estadodematriculaid');
        $descricao = $lookup->getFilterValue('descricao');
        
        $lookup->addFilterField(new MTextField('estadodematriculaid', $estadodematriculaid, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('descricao', $descricao, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.' . $page->name . '.descricao.focus()');


        $columns[] = new DataGridColumn('estadodematriculaid', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('descricao', _M('Descrição', $module), 'left', true, null, true);

        $sql = 'SELECT A.estadodematriculaid,
                       A.descricao
                  FROM acpEstadoDeMatricula A';

        if ( strlen($estadodematriculaid) > 0 )
        {
            $where .= ' AND A.estadodematriculaid = ?';
            $args[] = $estadodematriculaid;
        }

        if ( strlen($descricao) > 0 )
        {
            $where .= ' AND UNACCENT(A.descricao) ILIKE UNACCENT(?)';
            $args[] = $descricao . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.descricao';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom($sql,$args);
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar Estado de matrícula',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
    
    public function autoCompleteCurso(&$context)
    {
        $sql = 'SELECT nome
                  FROM acpcurso
                 WHERE cursoid = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupCurso(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $codigo = $lookup->getFilterValue('codigo');
        $nome = $lookup->getFilterValue('nome');
        $modalidade = $lookup->getFilterValue('modalidade');
        $situacao = $lookup->getFilterValue('situacao');
        
        $lookup->addFilterField(new MTextField('codigo', $codigo, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('nome', $nome, _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MSelection('modalidade', $modalidade, _M('Modalidade',$module), AcpCurso::listarModalidades()));
        $lookup->addFilterField(new MSelection('situacao', $situacao, _M('Aplicação',$module), AcpCurso::listarSituacao()));

        global $page;
        $page->onLoad('document.' . $page->name . '.nome.focus()');

        $columns[] = new DataGridColumn('codigo', _M('Código', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('nome', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('modalidade', _M('Modalidade', $module), 'left', true, null, true, AcpCurso::listarModalidades());
        $columns[] = new DataGridColumn('situacao', _M('Situação', $module), 'left', true, null, true, AcpCurso::listarSituacao());
        $columns[] = new DataGridColumn('datainicio', _M('Data início', $module), 'center', true, null, true);
        $columns[] = new DataGridColumn('datafim', _M('Data fim', $module), 'center', true, null, true);

        $sql = 'SELECT A.cursoid,
                       A.codigo,
                       A.nome,
                       A.modalidade,
                       A.situacao,
                       datetouser(A.datainicio) AS datainicio,
                       datetouser(A.datafim) AS datafim
                  FROM acpcurso A';

        if ( strlen($codigo) > 0 )
        {
            $where .= ' AND A.codigo = ?';
            $args[] = $codigo;
        }

        if ( strlen($nome) > 0 )
        {
            $where .= ' AND UNACCENT(A.nome) ILIKE UNACCENT(?)';
            $args[] = $nome . '%';
        }

        if ( strlen($modalidade) > 0 )
        {
            $where .= ' AND A.modalidade = ?';
            $args[] = $modalidade;
        }
        
        if ( strlen($situacao) > 0 )
        {
            $where .= ' AND A.situacao = ?';
            $args[] = $situacao;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.nome';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom($sql, $args);
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar Curso',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
    
    
    public function autoCompletePerfilCurso(&$context)
    {
        $sql = 'SELECT descricao
                  FROM acpperfilcurso
                 WHERE perfilcursoid = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupPerfilCurso(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class','basic');
        $MIOLO->conf->loadConf($module);

        $perfilcursoid = $lookup->getFilterValue('perfilcursoid');
        $descricao = $lookup->getFilterValue('descricao');
        $formadeoferta = $lookup->getFilterValue('formadeoferta');
        $organizacao = $lookup->getFilterValue('organizacao');

        $lookup->addFilterField(new MTextField('perfilcursoid', $perfilcursoid, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('descricao', $descricao, _M('Descrição',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MSelection('formadeoferta', $modalidade, _M('Forma de oferta',$module), AcpPerfilCurso::listarFormaDeOferta()));
        $lookup->addFilterField(new MSelection('organizacao', $situacao, _M('Organização',$module), AcpPerfilCurso::listarOrganizacao()));

        global $page;
        $page->onLoad('document.' . $page->name . '.descricao.focus()');

        $columns[] = new DataGridColumn('perfilcursoid', _M('Código', $module), 'right', true, null, true);
        $columns[] = new DataGridColumn('descricao', _M('Descrição', $module), 'left', true, null, true);
        $columns[] = new DataGridColumn('formadeoferta', _M('Modalidade', $module), 'left', true, null, true, AcpPerfilCurso::listarFormaDeOferta());
        $columns[] = new DataGridColumn('organizacao', _M('Situação', $module), 'left', true, null, true, AcpPerfilCurso::listarOrganizacao());

        $sql = 'SELECT A.perfilcursoid,
                       A.descricao,
                       A.formadeoferta,
                       A.organizacao
                  FROM acpperfilcurso A';

        if ( strlen($perfilcursoid) > 0 )
        {
            $where .= ' AND A.perfilcursoid = ?';
            $args[] = $perfilcursoid;
        }

        if ( strlen($descricao) > 0 )
        {
            $where .= ' AND UNACCENT(A.descricao) ILIKE UNACCENT(?)';
            $args[] = $descricao . '%';
        }

        if ( strlen($formadeoferta) > 0 )
        {
            $where .= ' AND A.formadeoferta = ?';
            $args[] = $formadeoferta;
        }
        
        if ( strlen($organizacao) > 0 )
        {
            $where .= ' AND A.organizacao = ?';
            $args[] = $organizacao;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.descricao';

        $sqlObject = new sql();
        if ( strlen($where) == 0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject->createFrom($sql, $args);
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar Perfil de curso',$module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
    
    public function autoCompleteDocente(MAutoComplete $context)
    {
        $sql = 'SELECT nome
                  FROM acpdocente
                 WHERE docenteid = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupDocente(MLookup $lookup)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $this->setFocus('nome');
        
        $filters = array();
        $filters['docenteid'] = $lookup->getFilterValue('docenteid');
        $filters['nome'] = $lookup->getFilterValue('nome');
        
        $lookup->addFilterField(new MTextField('docenteid', null, _M('Código',$module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('nome', null, _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        
        $columns[] = new sDataGridColumn('acpdocente.docenteid', _M('Código', $module), 'right', true, null, true);
        $columns[] = new sDataGridColumn('acpdocente.nome', _M('Nome', $module), 'left', true, null, true);

        $object = new AcpDocente();
        $object->setValuesFromArray($filters);
        
        $sql = $object->getSQLForLookup();

        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sql, $columns, _M('Localizar Docente', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
}
?>