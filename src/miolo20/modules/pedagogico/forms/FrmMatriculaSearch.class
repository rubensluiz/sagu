<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Inscricoes
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */
class FrmMatriculaSearch extends SSearchForm
{
    protected $campoBuscaGenerica = false;
    
    public $_columns;
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', 'basic'), new AcpMatricula(), array('matriculaid'));
        
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $this->object->gridmatriculacurso = true;
        $fields[] = new MDiv('divLimbo', null);
        $fields[] = new MTextField('buscanomeS', null, _M('Nome',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fields[] = new sEscolha('buscaocorrenciacursoidS', null, _M('Ocorrência de curso'), new AcpOcorrenciaCursoLookup());
        $fields[] = new sEscolha('buscaofertacursoidS', null, _M('Oferta de curso'), new AcpOfertaCurso());
        $fields[] = new sEscolha('buscaofertaturmaidS', null, _M('Oferta de turma'), new AcpOfertaTurma());
        
        $fields[] = $this->genericFields()->radioButtonGroup('situacaoMatriculaS', $this->getRequestValue('situacaoMatriculaS', 'i'), _M('Exibir'), array('o' => 'Confirmados', 'p' => 'Pendentes', 'c' => 'Cancelados', 'i' => 'Indiferente'));
        
        $fields[] = new MDiv('divPopup');
        
        parent::defineFields($fields, $module, 'GrdMatriculaSearch', $validators);
    }
    
    public function cancelaMatricula()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $this->_columns = array(
        _M('Origem', $module),
        _M('Valor', $module));
        
        $inscricaoid = MIOLO::_REQUEST('inscricaoid');
        $matriculaid = MIOLO::_REQUEST('matriculaid');
        
        $inscricao = new AcpInscricao($inscricaoid);
        $matricula = new AcpMatricula();
        $filters = new stdClass();
        $filters->buscaofertacursoid = $inscricao->ofertacurso->ofertacursoid;
        $filters->personid = $inscricao->personid;
        $matricula = $matricula->searchGrid($filters);

        $inscricaoturmagruposearch = AcpInscricaoTurmaGrupo::obterInscricaoTurmaGrupo($inscricaoid);
        $ofertaTurma = NULL;
        
        $valorcontrato = '0.00';
        $custodoaluno = '0.00';
        $valordamulta = '0.00';

        foreach( $inscricaoturmagruposearch as $cod=>$inscricaoturmagrupo )
        {
            $ofertaturmaid = $inscricaoturmagrupo->ofertaturmaid;
            $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
            
            $cargahorariaateadata = AcpInscricao::obterCargaHorariaTotalAteAData($inscricaoid, $inscricaoturmagrupo->ofertaturmaid);
            $cargahorariatotal = AcpInscricao::obterCargaHorariaTotal($inscricaoid, $inscricaoturmagrupo->ofertaturmaid);
            $precocondicao = new PrcPrecoCondicao($inscricaoturmagrupo->precocondicaomatriculaid, true);
            $precocursoid = $precocondicao->precocursoid;
            $condicaodepagamentoid = $precocondicao->condicaodepagamentoid;

            $valortotal = SAGU::calcNumber($valortotal.'+'.SAGU::NVL($precocondicao->valortotal,'0.00'), true, 2);
            $valorparcela = SAGU::calcNumber($valorparcela.'+'.SAGU::NVL($precocondicao->valorparcela,'0.00'), true, 2);
            
            $ofertaTurma = new AcpOfertaTurma($inscricaoturmagrupo->ofertaturmaid);

            //Valor do contrato
            $precocondicao = new PrcPrecoCondicao($inscricaoturmagrupo->precocondicaomatriculaid);

            $valorcontrato = SAGU::calcNumber($valorcontrato.'+'.SAGU::NVL($precocondicao->valortotal,'0.00'), true, 2);

            if( $cargahorariatotal > 0 && $valorcontrato > 0 && $cargahorariaateadata > 0 )
            {
                $custodoaluno = SAGU::calcNumber("(($valorcontrato/$cargahorariatotal)*$cargahorariaateadata)", true, 2);
                $percentualmulta = $ofertaturma->ofertacurso->ocorrenciacurso->curso->percentualmultadesistencia;

                if( $percentualmulta > 0 && ( $custodoaluno < $valorcontrato ) )
                {
                    //Calcula o valor da multa
                    $valordamulta = SAGU::calcNumber("$valordamulta+(($valorcontrato-$custodoaluno)*($percentualmulta/100))", true, 2);
                }
            }
        }
        //Valor total pago pela inscrição
        $valorpago = PrcTituloInscricao::obterValorTotalPago($inscricaoid);
        
        //Calcula a diferença de valores a ser acertado
        $valor = SAGU::calcNumber(SAGU::NVL($custodoaluno,'0.00')." - ".SAGU::NVL($valorpago,'0.00')." + $valordamulta");
      
        $flds[] =  new MText('assuntoLabel','<strong>ATENÇÃO: O cancelamento da matrícula implica no cancelamento de todas as disciplinas matriculadas ( apenas situação MATRICULADA ) e o cancelamento da inscrição do aluno.</strong><br>');

        //DADOS ALUNOS
        $dlgFieldsD[] =  new MSeparator(); 
        $dlgFieldsD[] =  new MText('assuntoLabel','<strong>Aluno: </strong>'.$matricula[0]['_pessoa']);
        $dlgFieldsD[] =  new MSeparator(); 
        $dlgFieldsD[] =  new MText('assuntoLabel','<strong>Oferta de curso (Curso): </strong>'.$matricula[0]['_nomecurso']);
        $dlgFieldsD[] =  new MSeparator(); 
        $dlgFieldsD[] =  new MText('assuntoLabel','<strong>Turma: </strong>'.$inscricao->ofertaturmadesc.'<br>');
        
        $contAlu = new MHContainer('contFin',$dlgFieldsD);
        $divAlu = new MDiv('divFin',array($contAlu));
        $flds[] = $bsgAlu = new MBaseGroup('bsgAlu', _M('Dados do aluno', $module), array($divAlu));

        $curso = new AcpCurso($inscricao->ofertacurso->ocorrenciacurso->cursoid);
        if($curso->cancelamentofinanceiro != AcpCurso::CANCELAR_TITULOS_NAO_VENCIDOS)
        {
            //AJUSTE FINANCEIRO
            $dlgFields[] =  new MText('assuntoLabel','<strong>O ajuste dos títulos é calculado proporcional ao preço e a carga horária do curso até o presente momento subtraída</strong><br>');
            $dlgFields[] =  new MText('assuntoLabel','<strong> dos valores já pagos pelo aluno. Caso exista multa de cancelamento configurada é acrescido o valor referente a multa.</strong><br><br><br>');
            $dlgFields[] =  new MSeparator();
            $dlgFields[] =  new MText('assuntoLabel','<strong>Preço do curso:</strong> R$ '.str_replace('.',',',$valortotal));
            $dlgFields[] =  new MSeparator();
            $dlgFields[] =  new MText('assuntoLabel','<strong>Condição de pagamento: </strong>'.$inscricao->condicaopagamento.' de '.str_replace('.',',',$valorparcela));
            $dlgFields[] =  new MSeparator();
            $dlgFields[] =  new MText('assuntoLabel','<strong>Percentual da carga horária do curso que aluno já cursou: </strong>'. SAGU::calcNumber(($cargahorariaateadata/$cargahorariatotal)*100,true,2).'%');
            $dlgFields[] =  new MSeparator();
            $dlgFields[] =  new MText('assuntoLabel','<strong>Total a ser pago para esta carga horária: </strong>R$ '.str_replace('.',',',$custodoaluno));
            $dlgFields[] =  new MSeparator();
            $dlgFields[] =  new MText('assuntoLabel','<strong>Multa pelo cancelamento('.SAGU::NVL($percentualmulta,'0.00').'% sobre o saldo a ser pago): </strong>R$ '.str_replace('.',',',$valordamulta));
            $dlgFields[] =  new MSeparator();

            $dataTable[0][0] = 'Valor total do curso';
            $dataTable[1][0] = 'Valor a ser pago pela carga horária já cursada';
            $dataTable[2][0] = 'Saldo';
            $dataTable[3][0] = 'Multa pelo cancelamento';

            $dataTable[0][1] = 'R$ '.str_replace('.',',',$valortotal);
            $dataTable[1][1] = 'R$ '.str_replace('.',',',$custodoaluno);
            $dataTable[2][1] = 'R$ '.str_replace('.',',',SAGU::calcNumber($valortotal-$custodoaluno,true,2));
            $dataTable[3][1] = 'R$ '.str_replace('.',',',$valordamulta).' (R$ '.str_replace('.',',',SAGU::calcNumber($valortotal-$custodoaluno,true,2)).' * '.str_replace('.',',',SAGU::NVL($percentualmulta,'0.00')).'%)';

            $dlgFields[] = new MTableRaw('', $dataTable,  $this->_columns);
            $dlgFields[] =  new MText('assuntoLabel','<br><strong>Valor já pago pelo aluno: </strong>R$ '.  str_replace('.',',',$valorpago));
            $dlgFields[] =  new MSeparator();
            if($valor < 0)
            {
                $dlgFields[] =  new MText('assuntoLabel','<strong>Valor a receber:</strong> R$ '.str_replace('.',',',SAGU::calcNumber($valor*-1,true,2)).' (R$ '.str_replace('.',',',$custodoaluno).' - R$ '.str_replace('.',',',$valorpago).' + R$ '.str_replace('.',',',$valordamulta).')');        
            }
            else
            {
                $dlgFields[] =  new MText('assuntoLabel','<strong>Valor a pagar:</strong> R$ '.str_replace('.',',',$valor).' (R$ '.str_replace('.',',',$custodoaluno).' - R$ '.str_replace('.',',',$valorpago).' + R$ '.str_replace('.',',',$valordamulta).')');        
            }
            $contFin = new MHContainer('contFin',$dlgFields);
            $divFin = new MDiv('divFin',array($contFin));

            $flds[] = $bsgFin = new MBaseGroup('bsgFin', _M('Ajustes financeiros', $module), array($divFin));
        }
  
        $btn1 = new MDiv('divAjusta',array(new MButton('btnFecharDialogo', _M('Fechar'))));
        $btn2 = new MDiv('divCancel',array(new MButton('cancelaMatriculaOption', _M('Cancelar matrícula'))));
        $cont = new MHContainer('divBtns',array($btn2,$btn1));
        $div =  new MDiv('btns',array($cont));
        $div->addBoxStyle('width', '50%');
        $div->addBoxStyle('margin', '10px auto');
        
        $flds[] = $div;
        $popup = new MPopup("popupCancelaMatricula", $flds, _M('Cancelar matrícula', $module));
        $popup->addBoxStyle('width', '50%');
        $popup->addBoxStyle('margin', '0px auto');
        $this->AddField($popup);
    }
    
    public function btnFecharDialogo_click()
    {
        $MIOLO = MIOLO::getInstance();
        $url = $MIOLO->getCurrentURL();
        $url = str_replace('cancelaMatricula', 'btnSearch_click', $url);
        $this->page->redirect($url);
    }
    
    public function cancelaMatriculaOption_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $inscricaoid = MIOLO::_REQUEST('inscricaoid');
        
        $inscricao = new AcpInscricao($inscricaoid);
        
        $gotoYes = $MIOLO->GetActionURL($module, 'main:process:matricula', '', array('inscricaoid' => $inscricaoid, 'event' => 'cancelaMatricula_confirm'));
        $gotoNo = $MIOLO->GetActionURL($module, 'main:process:matricula', '', array('event' => 'btnSearch_click'));
        $MIOLO->question('Tem certeza que deseja cancelar a matrícula de '.$inscricao->_pessoa.' do curso '.$inscricao->ofertacurso->descricao, $gotoYes, $gotoNo);
    }
        
    public function cancelaMatricula_confirm()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $inscricaoid = MIOLO::_REQUEST('inscricaoid');
        $cancelaFinanceiro = true;
          
        SDatabase::beginTransaction();
        try
        {
            $inscricaoturmagruposearch = AcpInscricaoTurmaGrupo::obterInscricaoTurmaGrupo($inscricaoid);
            
            foreach ( $inscricaoturmagruposearch as $cod => $inscricaoturmagrupo )
            {
                $matriculas = AcpMatricula::obterMatriculaDaInscricaoTurmaGrupo($inscricaoturmagrupo->inscricaoturmagrupoid);
                
                foreach ( $matriculas as $cod => $matricula )
                {
                    $matricula instanceof AcpMatricula;

                    $matricula->cancelarMatricula();
                }
            }

            $inscricaoturmagrupo = new AcpInscricaoTurmaGrupo($matricula->inscricaoturmagrupoid);
            //Caso o curso não for gratuito recalcula os titulos
            if( $inscricaoturmagrupo->inscricao->ofertacurso->ocorrenciacurso->curso->gratuito == DB_FALSE )
            {
                $cancelaFinanceiro = PrcTituloInscricao::cancelamentoFinanceiro($inscricaoid); 
            }
            
            $inscricao = new AcpInscricao($inscricaoid);
            $inscricao->cancelarInscricao(true, $cancelaFinanceiro);
            
            SDatabase::commit();
            
            $MIOLO->information(_M('Matrícula cancelada com sucesso.'), $MIOLO->GetActionURL($module, 'main:process:matricula'));
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            $this->AddError($e->getMessage());
        }
    }
}
?>