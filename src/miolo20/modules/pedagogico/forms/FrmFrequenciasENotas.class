<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Frequências e notas
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 29/08/2013
 */
class FrmFrequenciasENotas extends SSearchForm
{
    protected $campoBuscaGenerica = true;
    
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', 'basic'), new AcpOfertaComponenteCurricular(), array('ofertacomponentecurricularid'));
        SMainMenu::setOverrideMenuNav('main:process:frequenciasenotas');
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $this->object->buscaFrequenciasENotas = true;
        
        $module = MIOLO::getCurrentModule();
        $fields[] = new MDiv('divLimbo', null);
        $fields[] = new sEscolha('buscaocorrenciacursoidS', null, _M('Ocorrência de curso'), new AcpOcorrenciaCursoLookup());
        $fields[] = new sEscolha('buscaturmaidS', null, _M('Turma'), new AcpOfertaTurma());
        $fields[] = $this->genericFields()->radioButtonGroup('ativosS', SAGU::NVL(MIOLO::_REQUEST('ativosS'), 'E'), _M('Vigência'), array('E' => _M('Em andamento'), 'C' => _M('Cursadas'), 'P'=>_M('Previstas'),'T' => _M('Todas')));
        $fields[] = $this->genericFields()->radioButtonGroup('encerradasS', SAGU::NVL(MIOLO::_REQUEST('encerradasS'), 'S'), _M('Mostrar componentes curriculares'), array('S' => _M('Todos'), 'X' => _M('Somente fechados'), 'N' => _M('Somente abertos')));
        
        parent::defineFields($fields, $module, 'GrdFrequenciasENotas', $validators);
    }    
    
    public function getRequestValues()
    {
        $values = parent::getRequestValues();
        $values['ativos'] = isset($_REQUEST['ativosS']) ? $_REQUEST['ativosS'] : DB_TRUE;
        $values['encerradas'] = isset ($_RESQUEST['encerradasS']) ? DB_TRUE : $_REQUEST['encerradasS'];

        return $values;
    }
    
    public function fecharOfertaComponenteCurricular_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertacomponentecurricularid = MIOLO::_REQUEST('ofertacomponentecurricularid');
        $ofertacomponentecurricular = new AcpOfertaComponenteCurricular($ofertacomponentecurricularid);
        $urlSim = $MIOLO->GetActionURL($module, $action, '', array('event' => 'fecharOfertaComponenteCurricular_confirm', 'ofertacomponentecurricularid' => $ofertacomponentecurricularid));
        $urlNao = $MIOLO->GetActionURL($module, $action);
        $MIOLO->question(_M('Tem certeza que deseja fechar o componente curricular @1?', $module, $ofertacomponentecurricular->componentecurricularmatriz->componentecurricular->nome), $urlSim, $urlNao);
    }
    
    public function fecharOfertaComponenteCurricular_confirm()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertacomponentecurricularid = MIOLO::_REQUEST('ofertacomponentecurricularid');
        $ofertacomponentecurricular = new AcpOfertaComponenteCurricular($ofertacomponentecurricularid);
        try
        {
            $ok = $ofertacomponentecurricular->fecharOfertaComponenteCurricular();
        } 
        catch (Exception $e) 
        {
            $msg = "Não foi possível fechar o componente curricular:<br><br>";
            $msg .= $e->getMessage();
            $this->addAlert($msg);
        }
        if ( $ok )
        {
            $msg = _M('Componente curricular @1 fechado com sucesso!', $module, $ofertacomponentecurricular->componentecurricularmatriz->componentecurricular->nome);
            
            if ( AcpOfertaComponenteCurricular::possuiPendenciaNota($ofertacomponentecurricularid) )
            {
                $msg .= '<br/>';
                $msg .= _M('OBS: Existem uma ou mais matrículas com notas pendentes');
            }
            
            $url = $MIOLO->GetActionURL($module, $action);
            $this->messageSuccess($msg, $url);
        }
    }
    
    public function reabrirOfertaComponenteCurricular_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertacomponentecurricularid = MIOLO::_REQUEST('ofertacomponentecurricularid');
        $ofertacomponentecurricular = new AcpOfertaComponenteCurricular($ofertacomponentecurricularid);
        $urlSim = $MIOLO->GetActionURL($module, $action, '', array('event' => 'reabrirOfertaComponenteCurricular_confirm', 'ofertacomponentecurricularid' => $ofertacomponentecurricularid));
        $urlNao = $MIOLO->GetActionURL($module, $action);
        $MIOLO->question(_M('Tem certeza que deseja reabrir o componente curricular @1?', $module, $ofertacomponentecurricular->componentecurricularmatriz->componentecurricular->nome), $urlSim, $urlNao);
    }
    
    public function reabrirOfertaComponenteCurricular_confirm()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertacomponentecurricularid = MIOLO::_REQUEST('ofertacomponentecurricularid');
        $ofertacomponentecurricular = new AcpOfertaComponenteCurricular($ofertacomponentecurricularid);
        try
        {
            $ok = $ofertacomponentecurricular->reabrirOfertaComponenteCurricular();
        } 
        catch (Exception $e) 
        {
            $msg = "Não foi possível reabrir o componente curricular:<br><br>";
            $msg .= $e->getMessage();
            $this->addAlert($msg);
        }
        if ( $ok )
        {
            $url = $MIOLO->GetActionURL($module, $action);
            $this->messageSuccess(_M('Componente curricular @1 reaberto com sucesso!', $module, $ofertacomponentecurricular->componentecurricularmatriz->componentecurricular->nome), $url);
        }
    }
    
      public function enviamailfrequencias_confirm()
    {
       $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertaturmaid = MIOLO::_REQUEST('ofertacomponentecurricularid');
        $ofertaturma = new AcpOfertaComponenteCurricular($ofertaturmaid);

        $email = AcpOfertaComponenteCurricular::obterEmailProfessorPendenteFrequencia($ofertaturmaid);
        $from = SAGU::getParameter('PEDAGOGICO', 'EMAIL_FROM_DEFAULT');
        $fromName = $dataCompany->acronym;
        $pendencias = AcpOfertaComponenteCurricular::obterPendenciasFrequencia($ofertaturmaid);
   
        //pega email professor $emailprofessor
        foreach ($email as $f)
        { 
            $nomeProfessor = AcpOfertaComponenteCurricular::obterNomeProfessorPendentePorEmailFrequencia($ofertaturmaid, $f[0]);
            
            if($f[0] != null)
            {
                //obter corpo mensagem
                $msg = "Ola ".$nomeProfessor.".<br> Solicitamos que registre as seguintes pendências, para o fechamento da turma: <br><br><br>";
    
                foreach ( $pendencias as $pend )
                {
                    foreach (array($pend) as $g)
                    {
                        if($g[6] == $f[0])
                        {
                            $msg .= "Componente curricular {$g[1]}: {$g[7]} não registrado para o(a) aluno(a) {$g[3]}";   
                            $urlFecha = $MIOLO->GetActionURL('portal', 'main:process:frequenciasProfessorPedagogico', null, array('ofertacomponentecurricularid' => $g[0]));        
                            $msg .= "<p><a href='{$urlFecha}' target='_blank'>Clique aqui para registrar esta pendencia.</a><br><br><br><br>";
                        }
                    }
                }
                $mail = new sendEmail($from, 'Professor', $f[0], 'Solicitacao Pendencias Notas', $msg, array());
                 try 
                 {
                     $ok = $mail->sendEmail();
                 } 
                 catch (Exception $e) 
                 {
                      $msg = "Não foi possível enviar email:<br><br>";
                      $msg .= $e->getMessage();   
                      $this->addAlert($msg);
                 }
                 if ( $ok )
                 {
                     $url = $MIOLO->GetActionURL($module, $action);
                     $this->messageSuccess(_M('Email enviado com sucesso!', $module, $ofertaturma->descricao), $url);
                 }
            }
            else
            {
                $disciplina[] = AcpOfertaComponenteCurricular::obterDisciplinaPendentePorEmailFrequencia($ofertaturmaid, $f[0]);               
            }
        }
         foreach ($disciplina as $nulo)
        { 
         $msgnulo = "Nao foi encontrado professor desta disciplina: ".$nulo."<br>";
         $this->addAlert($msgnulo);
        }
    }
    
/*     public function pendenciaNota_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
        $urlSim = $MIOLO->GetActionURL($module, $action, '', array('event' => 'enviamailnotas_confirm', 'ofertaturmaid' => $ofertaturmaid));
        $urlNao = $MIOLO->GetActionURL($module, $action);
        $MIOLO->question(_M('Deseja enviar email para o professor responsável pelas pendências, soclicitando as notas não registradas?', $module, $ofertaturma->descricao), $urlSim, $urlNao);
    }
*/ 
      public function enviamailnotas_confirm()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertacomponentecurricularid = MIOLO::_REQUEST('ofertacomponentecurricularid');
        $ofertacomponentecurricular = new AcpOfertaComponenteCurricular($ofertacomponentecurricularid);

        $email = AcpOfertaComponenteCurricular::obterEmailProfessorPendenteNota($ofertacomponentecurricularid);
        $from = SAGU::getParameter('PEDAGOGICO', 'EMAIL_FROM_DEFAULT');
        $fromName = $dataCompany->acronym;
        $pendencias = AcpOfertaComponenteCurricular::obterPendenciasNotas($ofertacomponentecurricularid);
        //pega email professor $emailprofessor
        foreach ($email as $f)
        { 
            $nomeProfessor = AcpOfertaComponenteCurricular::obterNomeProfessorPendentePorEmailNota($ofertacomponentecurricularid, $f[0]);
            
            if($f[0] != null)
            {
                //obter corpo mensagem
                $msg = "Ola ".$nomeProfessor.".<br> Solicitamos que registre as seguintes pendências, para o fechamento da turma: <br><br><br>";
    
                foreach ( $pendencias as $pend )
                {
                    foreach (array($pend) as $g)
                    {
                        if($g[6] == $f[0])
                        {
                            $msg .= "Componente curricular {$g[1]}: {$g[7]} não registrado para o(a) aluno(a) {$g[3]}";   
                            $urlFecha = $MIOLO->GetActionURL('portal', 'main:process:notasProfessorPedagogico', null, array('ofertacomponentecurricularid' => $g[0]));        
                            $msg .= "<p><a href='{$urlFecha}' target='_blank'>Clique aqui para registrar esta pendencia.</a><br><br><br><br>";
                        }
                    }
                }
                $mail = new sendEmail($from,'Professor', $f[0], 'Solicitacao Pendencias Notas', $msg, array());
                 try 
                 {
                     $ok = $mail->sendEmail();
                 } 
                 catch (Exception $e) 
                 {
                      $msg = "Não foi possível enviar email:<br><br>";
                      $msg .= $e->getMessage();   
                      $this->addAlert($msg);
                 }
                 if ( $ok )
                 {
                     $url = $MIOLO->GetActionURL($module, $action);
                     $this->messageSuccess(_M('Email enviado com sucesso!', $module, $ofertaturma->descricao), $url);
                 }
            }
            else
            {
                $disciplina = AcpOfertaComponenteCurricular::obterDisciplinaPendentePorEmailFrequencia($ofertacomponentecurricularid, $f[0]);               
                
                $msgnulo = "<br>Nao foi encontrado professor desta disciplina: {$disciplina}<br>";
                $this->addAlert($msgnulo);
            }
        }
    }
}
?>