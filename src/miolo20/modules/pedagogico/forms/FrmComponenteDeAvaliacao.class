<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 05/07/2013
 *
 **/
class FrmComponenteDeAvaliacao extends FrmModeloDeAvaliacaoPai
{
    /**
     * Objeto SType
     * @var type 
     */
    public $type;
    
    /**
     * Colunas
     */
    public $colunas;
    
    /**
     * Dados
     */
    public $dados;
    
    /**
     * Grid Buttons
     */
    public $btnUpd;
    
    public $btnDel;
            
    public $btnAdd;
    
    public $btnRec;
    
    /**
     * Disable buttons
     */
    public $disableButtonAdd;
    
    /**
     * Class constructor
     **/
    public function __construct($type)
    {
        //Define os objeto do componente de avaliação
        $this->type = $type;
        
        parent::__construct(new AcpModeloDeAvaliacao(), array('modeloDeAvaliacaoId'));
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $module = MIOLO::getCurrentModule();
      
        $modelodeavaliacaoid = MIOLO::_REQUEST('modeloDeAvaliacaoId');
        $fields[] = new MHiddenField('modeloDeAvaliacaoId', $modelodeavaliacaoid);
        $fields[] = $this->obterTabelaDeModelos();
        
        $modelodeavaliacao = new AcpModeloDeAvaliacao($modelodeavaliacaoid);
        
        if( count($this->dados) == 0 && ( $modelodeavaliacao->tipoDeDados != AcpModeloDeAvaliacao::TIPO_PARECER && $modelodeavaliacao->tipoDeDados != AcpModeloDeAvaliacao::TIPO_NENHUM ) )
        {
            $this->page->onLoad(SForm::getAjaxAction('obterCampos', 'divComponentePrincipal', false));
        }
        $fields[] = new MDiv('divComponentePrincipal');
        
        parent::defineFields($fields);        
    }
    
    protected function obterTabelaDeModelos()
    {
        //Adiciona coluna de ações no início
        $this->colunas = array_merge(array(_M('Ações')), $this->colunas);        
        
        foreach( $this->dados as $cod=>$linha )
        {
            $id = $linha[1];            
            
            // Se existirem avaliações com notas cadastradas, deve bloquear o remover
            $avaliacoes = AcpAvaliacao::verficarNotasCadastradas($id, MIOLO::_REQUEST('modeloDeAvaliacaoId'));
            
            if ( $avaliacoes > 0 )
            {
                $this->btnDel[$id] = new MImage('imgDel', _M('Não é possível remover este componente de avaliação deste modelo de avaliação, pois já possui ' . $avaliacoes . ' avaliações com notas cadastradas'), 'images/close.png');
            }
            else
            {
                $this->btnDel[$id] = new MImageLink('imgDel', _M('Remover componente'), SForm::getAjaxAction('remover_componente', 'divComponentePrincipal', false, array('primaryKey' => $id), true, false),'images/close.png');                
            }
            
            $this->btnUpd[$id] = new MImageLink('imgUpd', _M('Editar componente'), SForm::getAjaxAction('obterCampos', 'divComponentePrincipal', false, array('pkValue' => $id, 'componenteDeAvaliacaoPai' => $id, 'function' => 'update'), true, false),'images/table-edit.png');
            
            
            if( $this->disableButtonAdd[$id] )
            {
                $this->btnAdd[$id] = new MImage('imgAdd', _M('Não é possível adicionar sub componentes pelo seguinte motivo: @1', null, $this->disableButtonAdd[$id]), 'images/modules/academic/add-off.png');
            }
            else
            {
                $this->btnAdd[$id] = new MImageLink('imgAdd', _M('Adicionar sub componente'), SForm::getAjaxAction('obterCampos', 'divComponentePrincipal', false, array('componenteDeAvaliacaoPai' => $id, 'function' => 'insert', 'classeDeComponente' => AcpComponenteDeAvaliacao::CLASSE_NORMAL), true, false),'images/modules/academic/add-on.png');
            }            
            
            $this->btnRec[$id] = new MImageLink('imgAddRec', _M('Adicionar recuperação'), SForm::getAjaxAction('obterCampos', 'divComponentePrincipal', false, array('componenteDeAvaliacaoPai' => $id,'function' => 'insert', 'classeDeComponente' => AcpComponenteDeAvaliacao::CLASSE_RECUPERACAO), true, false),'images/update.gif');
            $container = new MHContainer('divActions', array($this->btnUpd[$id], $this->btnDel[$id], $this->btnAdd[$id], $this->btnRec[$id]) , '');
            
            $linha = array_merge(array($container), $linha);
            $this->dados[$cod] = $linha;
        }
        
        $table =  new MTableRaw(_M('Componentes de avaliação', $module), $this->dados, $this->colunas);
        $table->SetAlternate(true);
        
        return $table;
    }

    protected function definirColunas($colunas)
    {
        $this->colunas = $colunas;
    }
    
    protected function definirDados($data)
    {
        $this->dados = $data;        
    }
    
    /**
     * Confirmação da exclusão do componente
     */
    public function remover_componente($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        
        $optYes = SForm::getAjaxAction('remover_componente_confirmacao', 'divComponentePrincipal', true, array('primaryKey'=>$args->primaryKey));
        $goto = SAGU::getStackBackUrl();
        $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, array('modeloDeAvaliacaoId' => MIOLO::_REQUEST('modeloDeAvaliacaoId')));
        
        $MIOLO->question(_M('Tem certeza que deseja remover o componente e seus sub-ítens?', $module), $optYes, $goto);
    }
    
    /**
     * Efetua a exclusão do componente
     */
    public function remover_componente_confirmacao($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        try
        {
            SDatabase::beginTransaction();
            $object = new $this->type($args->primaryKey);
            $componenteDeAvaliacao = new AcpComponenteDeAvaliacao($object->componenteDeAvaliacaoId);
            $componenteDeAvaliacao->delete();
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            $MIOLO->error(_M('Ocorreu um erro ao remover o componente: @1', $module, $e->getMessage()));
        }
        SDatabase::commit();
        $MIOLO->information(_M('Componente de avaliação removido com sucesso!', $module));        
    }

    public function obterCampos($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $pkValue = $args->pkValue;
        if( strlen($pkValue) > 0 )
        {
            //Edição
            $title = _M('Atualizar componente');
            $data = new $this->type($pkValue);            
            $flds[] = new MTextField('componenteDeAvaliacaoId', $data->componenteDeAvaliacaoId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '', null, true);
        }
        else
        {
            //Inserção
            $title = _M('Adicionar componente');
            if( strlen($args->function) == 0 )
            {
                $title = _M('Adicione um  componente principal para continuar');
            }
            if( $args->classeDeComponente == AcpComponenteDeAvaliacao::CLASSE_RECUPERACAO )
            {
                $title = _M('Adicionar componente de recuperação');
            }
        }

        //Obtém os campos específicos de cada modelo
        $data->classeDeComponente = SAGU::NVL($args->classeDeComponente, $data->componenteDeAvaliacao->classeDeComponente);
        $data->componenteDeAvaliacaoPai = SAGU::NVL($args->componenteDeAvaliacaoPai, $data->componenteDeAvaliacao->componenteDeAvaliacaoPai);
        
        $classe = new MTextField('classeDeComponente', $data->classeDeComponente, _M('ClasseDeComponente', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '', null, true);
        $classe->addBoxStyle('display', 'none');
        $flds[] = $classe;
        
        $flds[] = new MTextField('descricao', $data->componenteDeAvaliacao->descricao, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $flds[] = new MMultiLineField('detalhes', $data->componenteDeAvaliacao->detalhes, _M('Detalhes', $module), 40, 4, 40);
        $flds[] = new MSelection('permiteAlteracoes', $this->getFormValue('permiteAlteracoes',$data->componenteDeAvaliacao->permiteAlteracoes), _M('Permite alterações', $module), SAGU::listYesNo());
 
        $flds = array_merge($flds, $this->obterCamposEspecificos($data));

        //Carrega o componente de avaliação pai
        if( $args->componenteDeAvaliacaoPai )
        {
            $object = new $this->type($args->componenteDeAvaliacaoPai);
            $componenteDeAvaliacaoPai = $object->componenteDeAvaliacaoId;
        }
        else
        {
            $componenteDeAvaliacaoPai = $data->componenteDeAvaliacao->componenteDeAvaliacaoPai;
        }

        $btnSalvar = new MButton('btnSave', _M('Salvar', $module), SForm::getAjaxAction('salvarComponente', 'divComponentePrincipal', true, array('componenteDeAvaliacaoPai' => $componenteDeAvaliacaoPai, 'classeDeComponente', $args->classeDeComponente)));
        if( strlen($args->function) > 0 )
        {
            $btnCancelar = new MButton('btnCancel', _M('Cancelar', $module), 'mpopup.remove();');
            $flds[] = new MHContainer('ctnButtons', array($btnSalvar, $btnCancelar));
        }
        else
        {
            $btnVoltar = new MButton('btnVoltar', _M('Voltar', $module), $MIOLO->getActionURL($module, 'main:config:modelodeavaliacao', null, array('modeloDeAvaliacaoId' => MIOLO::_REQUEST('modeloDeAvaliacaoId'), 'function' => 'update')));
            $flds[] = new MHContainer('ctnButtons', array($btnVoltar, $btnSalvar));
        }

        //Obtém os validadores
        $this->setValidators($this->obterValidadores());        
        $popup = new MPopup('popupCampos', $flds, $title);
        
        if( strlen($args->function) == 0 )
        {
            //Remove ação de fechar o popup, obrigando o usuário a inserir o componente principal
            $popup->setShowCloseButton(false);
            $popup->addBoxStyle('left', '322px');
            $popup->addBoxStyle('top', '122px');
        }
        $fields[] = $popup;
        
        return $fields;
    }
    
    /**
     * Adiciona campos específicos da classe
     * @return type
     */
    public function obterCamposEspecificos()
    {
        return array();
    }
    
    /**
     * 
     */
    public function obterValidadores()
    {
        $validators[] = new MRequiredValidator('descricao', _M('Descrição', $module));
        $validators[] = new MRequiredValidator('detalhes', _M('Detalhes', $module));
        $validators[] = new MRequiredValidator('permiteAlteracoes', _M('Permite alterações', $module));
        return $validators;
    }
    
    
    /**
     * Adiciona um componente de avaliação
     * @param type $args
     */
    public function salvarComponente($args)
    {  
        $MIOLO = MIOLO::getInstance();

        //Percorre os atributos do componente e define os valores                                        
        $data = $this->getTypesData($args);          
        $vars = $this->type->getObjectVars();        
        foreach( $vars as $var => $value )
        {
        $fieldValue = $data->componenteDeAvaliacao->$var;
            if( strlen($fieldValue) > 0 )
            {
                $this->type->$var = $fieldValue;
            }
        }        
        if( $this->type->save() )
        {            
            $MIOLO->information(_M('Componente salvo com sucesso'));
        }
    }
    
    public function getTypesData($args)
    {
        $data = new stdClass();
        $data->componenteDeAvaliacaoId = $args->componenteDeAvaliacaoId;
        $data->modeloDeAvaliacaoId = $args->modeloDeAvaliacaoId;
        $data->descricao = $args->descricao;
        $data->detalhes = $args->detalhes;
        $data->classeDeComponente = ( strlen($args->classeDeComponente) > 0 ? $args->classeDeComponente : AcpComponenteDeAvaliacao::CLASSE_FINAL);
        $data->permiteAlteracoes = $args->permiteAlteracoes;
        $data->componenteDeAvaliacaoPai = $args->componenteDeAvaliacaoPai;        

        return $data;
    }
    
    public function beforeSave(AcpModeloDeAvaliacao $modeloDeAvaliacao) 
    {
        $modeloDeAvaliacao->habilitarRecuperacoes = DB_FALSE;
        
        //Percorre todos componentes de avaliação e verifica se existem componentes de recuperação para setar atributo
        //habilitaRecuperacoes do modelo de avaliação
        $componentes = AcpComponenteDeAvaliacao::obterComponentesDeAvaliacaoDoModelo($modeloDeAvaliacao->modeloDeAvaliacaoId);        
        if( count($componentes) > 0 )
        {
            foreach( $componentes as $cod=>$componente )
            {
                if( $componente->classeDeComponente == AcpComponenteDeAvaliacao::CLASSE_RECUPERACAO )
                {
                    $modeloDeAvaliacao->habilitarRecuperacoes = DB_TRUE;
                }
            }
        }
        
        return $modeloDeAvaliacao;
    }
    
}
?>
