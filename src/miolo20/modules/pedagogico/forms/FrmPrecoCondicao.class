<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class Created on 04/11/2013
 *
 **/
class FrmPrecoCondicao extends FrmPrecoDoCursoPai
{
    public $grid;
    public $table;
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $this->setLimparCamposVazios(true);
        parent::__construct(new PrcPrecoCondicao(), array('precocondicaoid') );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $fields[] = new MTextLabel('info', _M('Selecione abaixo as condições de pagamento desejadas para o preço do curso. Somente condições selecionadas serão salvas com seu valor ajustado.'));
        $fields[] = new MTextLabel('info', _M('OBS: Somente as condições selecionadas terão os respectivos valores salvos'));
        $fields[] = new MSpacer();
        
        $precocursoid = MIOLO::_REQUEST('precocursoid');
        $precocurso = new PrcPrecoCurso($precocursoid);
        $ocorrenciacurso = new AcpOcorrenciaCurso($precocurso->ocorrenciacursoid);
        
        //Carrega todas condições de pagamento
        if( $ocorrenciacurso->curso->perfilcurso->permiteinscricaoporgrupo != DB_FALSE && ( $precocurso->tipo != PrcPrecoCurso::TIPO_INSCRICAO ) )
        {
            //Blocos de condições por grupo
            $fields = array_merge($fields, $this->obterCondicoesDePagamento());
        }
        else
        {
            //Unico bloco de condições para o preço
            $fields = array_merge($fields, $this->obterGridPrecoCondicao());
        }
        
        parent::defineFields($fields);
    }
    
    /**
     * Carrega todas grids com condições de pagamento por grupo
     * @param type $args
     */
    public function obterCondicoesDePagamento()
    {
        $colunas = $this->obterColunas();
        $linhas = $this->obterLinhas();
        
        $table = new MTableRaw(_M('Condições de pagamento'), $linhas, $colunas);
        $table->SetAlternate(true);
        
        //Alinha as colunas
        foreach($linhas as $clinha => $linha)
        {
            foreach($linha as $ccoluna => $coluna)
            {
                $table->setCellAttribute($clinha, 2+$ccoluna, 'align', 'center');
            }
        }

        $fields[] = $table;
        
        return $fields;
    }
    
    /**
     * Obtém as colunas da tableraw
     * @return type
     */
    public function obterColunas()
    {
        $precocursoid = MIOLO::_REQUEST('precocursoid');
        
        $colunas[] = '';
        $colunas[] = _M('Condição de pagamento');
        
        $precocursogrupos = PrcPrecoCursoGrupo::obterPrecoCursoGrupoDoPreco($precocursoid);
        foreach( $precocursogrupos as $c => $precocursogrupo)
        {
            $matrizcurriculargrupo = new AcpMatrizCurricularGrupo($precocursogrupo->matrizcurriculargrupoid);
            $colunas[] = $matrizcurriculargrupo->descricao."<br><br>".'Valor total'.'  -  '.'Valor parcela';
        }
            
        return $colunas;
    }
    
    public function obterLinhas()
    {
        $precocursoid = MIOLO::_REQUEST('precocursoid');
        $condicoesdepagamento = PrcCondicaoDePagamento::listarCondicoesDePagamento();
        
        $linhas = array();
        
        foreach($condicoesdepagamento as $condicaopagamentoid => $descricao)
        {
            $linhas[$condicaopagamentoid][] = new MCheckBox('check_'.$condicaopagamentoid, DB_TRUE);
            $linhas[$condicaopagamentoid][] = $descricao;
            
            $condicaopagamento = new PrcCondicaoDePagamento($condicaopagamentoid);
            
            $precocursogrupos = PrcPrecoCursoGrupo::obterPrecoCursoGrupoDoPreco($precocursoid);
            foreach( $precocursogrupos as $c => $precocursogrupo)
            {
                
                $precocondicao = PrcPrecoCondicao::obterPrecoCondicao($condicaopagamentoid, $precocursoid, $precocursogrupo->precocursogrupoid);
                if( $precocondicao instanceof PrcPrecoCondicao )
                {
                    $this->page->onLoad("document.getElementById('check_".$condicaopagamentoid."').checked = true;");
                }
                
                $valortotal = $precocursogrupo->valoraprazo;
                
                if ( $condicaopagamento->numerodeparcelas == 1 && $condicaopagamento->exigeentrada == DB_TRUE )
                {
                    $valortotal = $precocursogrupo->valoravista;
                }
                
                $valortotal = SAGU::NVL($precocondicao->valortotal, $valortotal);
                
                if ( $valortotal > 0 )
                {
                    $valorparcela = SAGU::NVL($precocondicao->valorparcela, SAGU::calcNumber($valortotal.'/'.$condicaopagamento->numerodeparcelas, true));
                }
                else
                {
                    $valorparcela = 0;
                }
                
                $fields = array();
                $fields[] = new MFloatField('valortotal_'.$condicaopagamentoid.'_'.$precocursogrupo->precocursogrupoid, $valortotal);
                $fields[] = new MLabel(' - ');
                $fields[] = new MFloatField('valorparcela_'.$condicaopagamentoid.'_'.$precocursogrupo->precocursogrupoid, $valorparcela);
                $flds = array();
                $flds[] = $div = new MDiv('', $fields);
                $container = new MVContainer('', $flds);
                $container->addBoxStyle('align', 'center');
                $linhas[$condicaopagamentoid][] = $container;
            }
        }
        
        return $linhas;
    }
    
    /**
     * Obtém a grid com as condições de pagamento
     * @param type $args
     * @return \SGrid
     */
    public function obterGridPrecoCondicao()
    {   
        $precocursoid = MIOLO::_REQUEST('precocursoid');
        $precocurso = new PrcPrecoCurso($precocursoid);
        
        $colunas[] = '';
        $colunas[] = _M('Condição de pagamento');
        $colunas[] = _M('Valor total');
        $colunas[] = _M('Valor parcela');
        
        $condicoesdepagamento = PrcCondicaoDePagamento::listarCondicoesDePagamento();
        $count = 0;
        
        foreach( $condicoesdepagamento as $condicaodepagamentoid => $condicao )
        {
            $condicaodepagamento = new PrcCondicaoDePagamento($condicaodepagamentoid);
            $precocondicao = PrcPrecoCondicao::obterPrecoCondicao($condicaodepagamentoid, $precocursoid);
            
            if( $precocondicao instanceof PrcPrecoCondicao )
            {
                $this->page->onLoad("document.getElementById('check_".$condicaodepagamentoid."').checked = true;");
            }

            $linhas[$count][] = new MCheckBox('check_'.$condicaodepagamentoid, DB_TRUE);
            $linhas[$count][] = $condicao;
            $linhas[$count][] = new MFloatField('valortotal_'.$condicaodepagamentoid, $this->obterValorTotal($precocondicao->valortotal, $condicaodepagamento->numerodeparcelas, $precocurso->valoraprazo, $precocurso->valoravista));
            $linhas[$count][] = new MFloatField('valorparcela_'.$condicaodepagamentoid, $this->obterValorParcela($precocondicao->valorparcela, $condicaodepagamento->numerodeparcelas, $precocurso->valoraprazo, $precocurso->valoravista));
            
            $count ++;
        }
        
        $table = new MTableRaw(_M('Condições de pagamento'), $linhas, $colunas);
        $table->SetAlternate(true);
        
        //Alinha as colunas
        $count = 0;
        
        foreach($linhas as $clinha => $linha)
        {
            foreach($linha as $ccoluna => $coluna)
            {
                $table->setCellAttribute($count, 2+$ccoluna, 'align', 'center');
            }
            
            $count ++;
        }
        
        $fields[] = $table;
        
        return $fields;
    }
    
    /**
     * Obtém ou o valor total da condição do preço ou se não existir calcula o valor
     * @param type $valortotal
     * @param type $numerodeparcelas
     * @param type $valoraprazo
     * @param type $valoravista
     * @return valor
     */
    public function obterValorTotal($valortotal, $numerodeparcelas, $valoraprazo, $valoravista)
    {
        if( strlen($valortotal) > 0 )
        {
            return $valortotal;
        }
        else
        {
            if( $numerodeparcelas > 1 )
            {
                return $valoraprazo;
            }
            else
            {
                return $valoravista;
            }
        }
    }
    
    /**
     * Obtém ou o valor da parcela da condição do preço ou se não existir calcula o valor
     * @param type $valorparcela
     * @param type $numerodeparcelas
     * @param type $valoraprazo
     * @param type $valoravista
     * @return valor
     */
    public function obterValorParcela($valorparcela, $numerodeparcelas, $valoraprazo, $valoravista)
    {
        if( strlen($valorparcela) > 0 )
        {
            return $valorparcela;
        }
        else
        {
            if( $numerodeparcelas > 1 )
            {
                return SAGU::calcNumber($valoraprazo.'/'.$numerodeparcelas, true);
            }
            else
            {
                return $valoravista;
            }
        }
    }
    
    /**
     * Recalcula e atualiza o valor do campo valor parcela quando o valor total for alterado
     * @param type $args
     * @return \MTextField
     */
    public static function atualizaValorParcela($args)
    {
        $condicaodepagamento = new PrcCondicaoDePagamento($args->condicaodepagamentoid);
        $valortotalid = 'valortotal_'.$args->condicaodepagamentoid;
        $valorParcela = new MTextField('valorparcela_'.$args->condicaodepagamentoid);
        $valorParcela->setValue(self::obterValorParcela(null, $condicaodepagamento->numerodeparcelas, $args->$valortotalid, $args->$valortotalid));
        $fields[] = $valorParcela;
        return $fields;
    }
    
    public function btnSaveAndFinish_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);   
        $this->afterSave();
    }

    /**
     * Salva as condições de pagamento
     */
    public function afterSave()
    {
        $precocursoid = MIOLO::_REQUEST('precocursoid');
        
        SDatabase::beginTransaction();
        try
        {
            $precocurso = new PrcPrecoCurso($precocursoid);
            $ocorrenciacurso = new AcpOcorrenciaCurso($precocurso->ocorrenciacursoid);

            if( $ocorrenciacurso->curso->perfilcurso->permiteinscricaoporgrupo != DB_FALSE && ( $precocurso->tipo != PrcPrecoCurso::TIPO_INSCRICAO ) )
            {
                $condicoesdepagamento = PrcCondicaoDePagamento::listarCondicoesDePagamento();
                foreach($condicoesdepagamento as $condicaopagamentoid => $descricao)
                {
                    $precocursogrupos = PrcPrecoCursoGrupo::obterPrecoCursoGrupoDoPreco($precocursoid);
                    foreach( $precocursogrupos as $c => $precocursogrupo)
                    {
                        //Verifica se condição de pagamento foi marcada
                        if( MIOLO::_REQUEST('check_'.$condicaopagamentoid) == DB_TRUE )
                        {
                            //Salva a condição do preço marcada
                            $precocondicao = PrcPrecoCondicao::obterPrecoCondicao($condicaopagamentoid, $precocursoid, $precocursogrupo->precocursogrupoid);

                            if( !$precocondicao instanceof PrcPrecoCondicao )
                            {
                                $precocondicao = new PrcPrecoCondicao();
                            }
                            $precocondicao->condicaodepagamentoid = $condicaopagamentoid;
                            $precocondicao->precocursoid = MIOLO::_REQUEST('precocursoid');
                            $precocondicao->precocursogrupoid = $precocursogrupo->precocursogrupoid;
                            $precocondicao->valortotal = MIOLO::_REQUEST('valortotal_'.$condicaopagamentoid.'_'.$precocursogrupo->precocursogrupoid);
                            $precocondicao->valorparcela = MIOLO::_REQUEST('valorparcela_'.$condicaopagamentoid.'_'.$precocursogrupo->precocursogrupoid);
                            $precocondicao->save();
                        }
                        else
                        {
                            //Remove a condição do preço desmarcada
                            $precocondicao = PrcPrecoCondicao::obterPrecoCondicao($condicaopagamentoid, $precocursoid, $precocursogrupo->precocursogrupoid);
                            if( $precocondicao instanceof PrcPrecoCondicao )
                            {
                                $precocondicao->delete();
                            }
                        }
                    }
                }
            }
            else
            {
                $condicoesdepagamento = PrcCondicaoDePagamento::listarCondicoesDePagamento();
                foreach($condicoesdepagamento as $condicaopagamentoid => $descricao)
                {
                    if( MIOLO::_REQUEST('check_'.$condicaopagamentoid) == DB_TRUE )
                    {
                        //Salva a condição do preço marcada
                        $precocondicao = PrcPrecoCondicao::obterPrecoCondicao($condicaopagamentoid, $precocursoid);
                        if( !$precocondicao instanceof PrcPrecoCondicao )
                        {
                            $precocondicao = new PrcPrecoCondicao();
                        }
                        $precocondicao->condicaodepagamentoid = $condicaopagamentoid;
                        $precocondicao->precocursoid = $precocursoid;
                        $precocondicao->valortotal = MIOLO::_REQUEST('valortotal_'.$condicaopagamentoid);
                        $precocondicao->valorparcela = MIOLO::_REQUEST('valorparcela_'.$condicaopagamentoid);
                        $precocondicao->save();
                    }
                    else
                    {
                        //Remove a condição do preço desmarcada
                        $precocondicao = PrcPrecoCondicao::obterPrecoCondicao($condicaopagamentoid, $precocursoid);
                        if( $precocondicao instanceof PrcPrecoCondicao )
                        {
                            $precocondicao->delete();
                        }
                    }
                    $c ++;
                }
            }
            
            SDatabase::commit();
        } 
        catch (Exception $ex) 
        {
            SDatabase::rollback();
            
            $MIOLO = MIOLO::getInstance();
            $MIOLO->error($ex->getMessage());
        }
        
        parent::afterSave();
    }
}
?>
