<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 19/07/2011
 *
 */


class FrmDocentesEad extends SManagementForm
{
    private $docente;
    private $allowUpdate;
    private $allowInsert;
    private $isReadOnlyMode;

    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/ui/controls/msubdetail.class');
        
        parent::__construct(new AcpDocentesEad(), array('docenteeadid'));

        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
               
        if ( !SAGU::userHasAccessAny('FrmDocentesEad', array(A_UPDATE, A_INSERT)) )
        {
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
        }
        
        SMainMenu::setOverrideMenuNav('main:process:ofertacurso');
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $docenteeadid = $this->getRequestValue('docenteeadid');
        $this->docente = $docentes = new AcpDocentesEad( $docenteeadid );

        $ofertacomponentecurricularid = MIOLO::_REQUEST('ofertacomponentecurricularid');
        $componente = new AcpOfertaComponenteCurricular($ofertacomponentecurricularid);
        if(!$docenteeadid)
        {
            $docenteeadid = 0;
        }
        
        $data = $this->docente->getDocentesAsObject($ofertacomponentecurricularid);
        $fields[] = new MDiv('divLimbo', null, null, array('style' => 'display: none'));
        // Campos da subdetail
        //codigo
        $sdtFields[] = new SHiddenField('docenteeadid');
        $sdtFields[] = new MHiddenField('idprofessorDescription');
        //descricao
        $sdtFields[] = $sIdentifier = new sEscolha('idprofessor',null,'Professor',new BasProfessor());
        $subValidators[] = new MRequiredValidator('idprofessor', _M('Professor', $module));
        $subValidators[] = new MSubDetailUniqueValidator('idprofessor', _M('Professor', $module));//nao permitir que seja adicionado mais de uma vez o mesmo professor (unique)
        //carga
        $sdtFields[] = $carga = new MTextField('cargahoraria', null, _M('Carga horária', $module),10,'h');
        $carga->addAttribute('onBlur', 'validaCampoDouble(\'cargahoraria\')');
                        
        // Colunas da grid da Subdetail
        $sdtFieldsColumns[] = new MGridColumn('Código', 'left', true, 0, false, 'docenteeadid');    
        $sdtFieldsColumns[] = new MGridColumn('Código', 'left', true, 0, false, 'idprofessor');        
        $sdtFieldsColumns[] = new MGridColumn('Professor', 'left', true, '70%', true, 'idprofessorDescription');
        $sdtFieldsColumns[] = new MGridColumn('Carga horária', 'right', true, '30%', true, 'cargahoraria');

        $sdt = new MSubDetail('detailProf', _M('PROFESSORES DA DISCIPLINA EAD - '.$componente->componentecurricularmatriz->componentecurricular->nome), $sdtFieldsColumns, $sdtFields,true);
        $sdt->setWidth('50%');
        $sdt->setValidators($subValidators);
        
        //Necessario para rodar as opcoes de salvamento e edicao corretamente
        $sdt->addActionEvent(MSubDetail::EVENT_ADD, 'subDetailEventAdd', __CLASS__);
        
        $fields[] = $sdt;
        
        if( MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click' && strlen($data[0]->professorid) == 0)
        {
            MSubDetail::clearData('detailProf');
        }
        // set data dos dados da subdetail (edição)
        if ( $data && MIOLO::_REQUEST('__EVENTTARGETVALUE') != 'tbBtnSave:click' )
        {   
            //descricao
            foreach($data as $dat)
            {
                $dat->idprofessor = $dat->professorid;
                $busProf = new BusinessBasicBusPhysicalPersonProfessor();
                $filter = new stdClass();
                $filter->personId = $dat->professorid;
                $desc = $busProf->searchPhysicalPersonProfessor($filter);
                $dat->idprofessorDescription = $desc[0][3];
            }
            if(strlen($data[0]->professorid) > 0 )
            {
                MSubDetail::setData($data, 'detailProf');
            }
        }

        $btns[] = new MButton('btnBack', _M('<< Voltar', $module), $this->getPreviousURL());
        $btns[] = new MButton('tbBtnSave', _M('Salvar', $module));

        $fields[] = $cont = new MHContainer('cntButtons', $btns);
        $cont->addBoxStyle('width', '100%');
        $cont->addBoxStyle('margin', '10px auto');
        parent::defineFields($fields, $validators, $data);
    }
    
    //Sem essa function vai apresentar problemas ao salvar os dados
    public function subDetailEventAdd($args)
    {
        return $args;
    }

    public function  tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $data = $this->getData();
        $ofertacomponentecurricularid = MIOLO::_REQUEST('ofertacomponentecurricularid');

        try
        {
            SDatabase::beginTransaction();
            
            // insert ativdades praticas
            if ( count($data->detailProf) > 0 )
            {
                foreach ( $data->detailProf as $dataSub )
                {
                    // Update
                    if ( !$dataSub->removeData && (strlen($dataSub->docenteeadid) > 0)  )
                    {
                        $dataSub->professorid = $dataSub->idprofessor;
                        $dataSub->ofertacomponentecurricularid = $ofertacomponentecurricularid;
                        $docente = new AcpDocentesEad();
                        $dataOld = $docente->getDocentesAsObject($ofertacomponentecurricularid,$dataSub->docenteeadid);
                        if(
                            $dataOld[0]->professorid != $dataSub->idprofessor ||
                            $dataOld[0]->cargahoraria != $dataSub->cargahoraria
                          )
                        {
                            $this->docente->updateDocente($dataSub);
                        }
                    }
                   // Insert
                    if ( !$dataSub->removeData && (strlen($dataSub->docenteeadid) == 0) )
                    {
                        $dataSub->professorid = $dataSub->idprofessor;
                        $dataSub->ofertacomponentecurricularid = $ofertacomponentecurricularid;
                        $this->docente->insertDocente($dataSub);
                    }
                    // Delete
                    elseif ( $dataSub->removeData && (strlen($dataSub->docenteeadid) > 0) )
                    {
                        $this->docente->deleteDocente($dataSub->docenteeadid);
                    }
                }
            }

            SDatabase::commit();
            
            SAGU::information(_M('Dados salvos com sucesso.', $module), $this->getPreviousURL());
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }

    /**
     * Calcula media dos valores inseridos e exibe na tela
     *
     * @param stdClass $args
     * @return null
     */
    public function calculaMedia($args)
    {
        $nota1 = $args->{"notaPeriodo{$args->_periodo}Semestre1"};
        $nota2 = $args->{"notaPeriodo{$args->_periodo}Semestre2"};
        $mediaId = "mediaPeriodo{$args->_periodo}";

        //So calcula medias quando possuir os 2 valores de notas
        if ( (strlen($nota1) > 0) && (strlen($nota2) > 0) )
        {
            //Altera valor de campo Média do semestre
            $media = SAGU::calcNumber("({$nota1} + {$nota2} + 0.0) / 2", true);
            $this->page->addAJAXJsCode(" xGetElementById('{$mediaId}').value = '{$media}'");

            //Altera valor de média final
            $args->$mediaId = $media;
            $this->calculaMediaFinal($args);
        }

        return '';
    }

    /**
     * Calcula media final dos valores inseridos e exibe na tela
     *
     * @param stdClass $args
     */
    public function calculaMediaFinal($args)
    {
        if (property_exists($args, 'mediaPeriodo3'))
        {
            if ( ( strlen($args->mediaPeriodo1) > 0 ) && ( strlen($args->mediaPeriodo2) > 0 ) && strlen($args->mediaPeriodo3) > 0 )
            {   
                $mediaFinal = SAGU::calcNumber("({$args->mediaPeriodo1} + {$args->mediaPeriodo2} + {$args->mediaPeriodo3} + 0.0) / 3", true);
                $this->page->addAJAXJsCode(" xGetElementById('notaFinal').value = '{$mediaFinal}'");
            }
        }
        else
        {
            if ( ( strlen($args->mediaPeriodo1) > 0 ) && ( strlen($args->mediaPeriodo2) > 0 ) )
            {   
                $mediaFinal = SAGU::calcNumber("({$args->mediaPeriodo1} + {$args->mediaPeriodo2} + 0.0) / 2", true);
                $this->page->addAJAXJsCode(" xGetElementById('notaFinal').value = '{$mediaFinal}'");
            }
        }
    }
}
?>