<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Perfil de curso
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 25/09/2013
 *
 **/
class FrmRequisitos extends FrmPerfilDeCursoPai
{
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $pc = $this->getTypeObjectPopulated();
        $pc instanceof AcpPerfilCurso;
        
        if ( !$pc->possuiRegra() )
        {
            $fields[] = new MSeparator();
            $this->AddError(_M('Ainda não foi configurado dados do passo "Regras e inscrição de matrícula".'));
        }
        else
        {
            $fields = array();

            if ( $pc->organizacao == AcpPerfilCurso::ORGANIZACAO_SERIADO )
            {
                $fields = array_merge($fields, $this->confPendencias());
            }

            $fields = array_merge($fields, $this->opcoesBooleanas());
            $fields = array_merge($fields, $this->confRequisitosContratacao());
            $fields = array_merge($fields, $this->confLimites());
        }
        
        parent::defineFields($fields, $validators);
    }
    
    public function opcoesBooleanas()
    {
        $opcoes = array(
            'regras.checardebitosavencer' => _M('Verificar se o aluno está com débitos a vencer'),
            'regras.checardebitosvencidos' => _M('Verificar se o aluno está com débitos vencidos'),
            'regras.checarnegociacoesabertas' => _M('Verificar se o aluno está com negociações abertas'),
            'regras.checarmultasbiblioteca' => _M('Verificar se o aluno está com multas pendentes'),
            'regras.checardevolucoesbiblioteca' => _M('Verificar se o aluno está com devoluções pendentes'),
        );
        
        $campos = $this->genericFields()->camposBooleanos($opcoes);
        $fields = array( new sBaseGroup('bsgOpts', _M('Requisitos de situação financeira'), $campos) );

        return $fields;
    }
    
    public function confRequisitosContratacao()
    {
        $controls[] = new MSelection('regras.tipodecontrolerequisitos', null, _M('Forma de controle dos requisitos', $module), AcpRegrasMatriculaPerfilCurso::listarFormaDeControleRequisitos());
        
        $fields[] = new sBaseGroup('bsgReqCont', _M('Requisitos de contratação'), $controls);
        
        return $fields;
    }

    public function confLimites()
    {
        $controls[] = $this->genericFields()->minAndMax('regras.quantidademinimatotal', 'regras.quantidademaximatotal', _M('Quantidade total para contratação na matrícula'));
        $controls[] = $this->genericFields()->minAndMax('regras.quantidademinimaoutroscursos', 'regras.quantidademaximaoutroscursos', _M('Quantidade para cursar opções em outros cursos'));
        $controls[] = $this->genericFields()->minAndMax('regras.quantidademinimaoutrasunidades', 'regras.quantidademaximaoutrasunidades', _M('Quantidade para cursar opções em outras unidades'));
        $controls[] = $this->genericFields()->minAndMax('regras.quantidademinimaoutrosturnos', 'regras.quantidademaximaoutrosturnos', _M('Quantidade para cursar opções em outros turnos'));
        
        $fields[] = new sBaseGroup('bsgLimites', _M('Limites'), $controls);
        
        return $fields;
    }
    
    public function confPendencias()
    {
        $controls[] = $carencia = new MIntegerField('regras.carenciaparapendencias', null, _M('Carência para pendências'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $carencia->setIsRequired(true);

        $controls[] = $numero = new MIntegerField('regras.numerodependencias', null, _M('Número de pendências'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $numero->setIsRequired(true);
        
        $controls[] = $this->genericFields()->quantidadeComUnidade('regras.minimoaprovacaoperiodoanterior', 'regras.unidademinimoaprovacaoperiodoanterior', AcpRegrasMatriculaPerfilCurso::listarUnidadeMinimoAprovacao(), _M('Mínimo de aprovação necessária no período anterior'));
                
        $fields[] = new sBaseGroup('bsgConf', _M('Pendências seriado'), $controls);
        
        return $fields;
    }
}
?>
