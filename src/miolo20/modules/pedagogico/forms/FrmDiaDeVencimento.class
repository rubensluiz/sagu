<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário do módulo pedagógico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class Created on 12/12/2013
 *
 **/
class FrmDiaDeVencimento extends FrmPrecoDoCursoPai
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $this->setLimparCamposVazios(true);
        parent::__construct(new PrcDiaDeVencimento(), array('diadevencimentoid') );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $checkboxes = array();
        $lista = array();
        $diasSelecionados = (array) MIOLO::_REQUEST('dias');
        $diasNaBase = PrcDiaDeVencimento::listarDiasDeVencimento(MIOLO::_REQUEST('precocursoid'));
        
        for ( $dia=1; $dia <= 30; $dia++ )
        {
            $name = 'dias[' . $dia . ']';
            
            $checked = $MIOLO->page->isPostBack() ? array_key_exists($dia, $diasSelecionados) : in_array($dia, $diasNaBase);
            
            $checkbox = new MCheckBox($name, DB_TRUE, null, $checked);
            $label = new MLabel($dia);
            
            $checkboxes[] = new MHContainer('cb' . $dia, array($checkbox, $label));
            
            if ( ( $dia % 7 ) == 0 )
            {
                $lista[] = $checkboxes;
                
                $checkboxes = array();
            }
            
            if ( $dia == 30 )
            {
                $lista[] = $checkboxes;
            }
        }
        
        $table = new MTableRaw(_M('Selecione os possíveis dias de vencimento'), $lista, array('', '', '', '', '', '', ''));
        $fields[] = $table;
        
        $fields[] = new MSeparator();
        
        parent::defineFields($fields, $validators);
    }
    
    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function btnSaveAndGo_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');
        
        $diasNaBase = PrcDiaDeVencimento::listarDiasDeVencimento(MIOLO::_REQUEST('precocursoid'), false);
        $diasSelecionados = (array) MIOLO::_REQUEST('dias');
        
        $validate = true;
        if( count($diasSelecionados) == 0 )
        {
            $validate = false;
            $goto = $MIOLO->GetActionURL($module, 'main:precific:register:diadevencimento', '', array('function' => $function, 'precocursoid' => MIOLO::_REQUEST('precocursoid')));
            $this->messageError(_M('Selecione ao menos um dia de vencimento', $module), $goto);
        }
        
        try
        {
            SDatabase::beginTransaction();

            for ( $dia=1; $dia <= 30; $dia++ )
            {
                $existeNaBase = in_array($dia, $diasNaBase);
                $foiMarcado = array_key_exists($dia, $diasSelecionados);

                if ( $foiMarcado && !$existeNaBase )
                {
                    $diaVenc = new PrcDiaDeVencimento();
                    $diaVenc->dia = $dia;
                    $diaVenc->precocursoid = MIOLO::_REQUEST('precocursoid');
                    $diaVenc->save();
                }
                elseif ( $foiMarcado && $existeNaBase )
                {
                    $diadevencimentoid = array_search($dia, $diasNaBase);
                    $diaVenc = new PrcDiaDeVencimento($diadevencimentoid);
                    $diaVenc->ativo = DB_TRUE;
                    $diaVenc->save();
                }
                else if ( !$foiMarcado && $existeNaBase )
                {
                    $diadevencimentoid = array_search($dia, $diasNaBase);

                    $diaVenc = new PrcDiaDeVencimento($diadevencimentoid);
                    $diaVenc->ativo = DB_FALSE;
                    $diaVenc->save();
                }
            }

            SDatabase::commit();
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            
            $this->messageError(_M('Ops... Houve algum erro ao salvar... É possível que algum registro desmarcado tenha dependência em algum lugar do sistema.'), $MIOLO->getCurrentURL());
        }
        
        // Cria url para proximo "passo"
        $form = $this->obterFormSeguinteDoAtual();
        $url = $this->obterURLForm($form);

        if( $validate )
        {
            $MIOLO->page->Redirect( $url );
        }
    }
}
?>
