<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário do módulo pedagógico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Joao Francisco Padilha Souza
 *
 * @since
 * Class Created on 19/09/2014
 *
 **/
$MIOLO->uses('ui/controls/msubdetailvalidators.class');
$MIOLO->uses('/ui/controls/msubdetail.class');

class FrmMatriculasRetroativas extends SStepByStepForm
{
    public $grid;
    private $business;
    private $busObject;
    
    /**
     * Class constructor
     **/
    public function __construct($steps)
    {
        parent::__construct(_M('Matrículas retroativas'), $steps, __CLASS__, new AcpMatriculasRetroativas(), array('matriculasretroativasid'));
//        parent::__construct(_M('Lançamento de matrículas retroativas'), $steps, __CLASS__,new AcpMatriculasRetroativas(), array('matriculasretroativasid') );

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event    = MIOLO::_REQUEST('event');
        
        $session = $MIOLO->GetSession();        
        $session->setValue('matRetroativas_dataStep1', null);
        $session->setValue('infGrd', null);
        
        $alldata = $this->getStepData();

        if ( $this->isFirstAccess() )
        {
            $this->cleanStepData();
        }
        
        //Dados da inscrição
        $fields[] = $inscricao = new MRadioButtonGroup('radio_inscricao', _M('Inscrição', $module), array('E' => _M('Existente', $module), 'N' => _M('Nova inscrição', $module)), $this->getFormValue('radio_inscricao', SAGU::NVL($alldata->radio_inscricao, 'E')), '', 'horizontal');
        $inscricao->setAutoPostBack(true);        
        
        //Criar nova inscrição
        if( $this->getFormValue('radio_inscricao') == 'N' || $alldata->radio_inscricao == 'N' )
        {
            $personId = new sEscolha('personid', $alldata->personid, _M('Pessoa', $module), new BasPessoaFisica());
            $ofertacursoid = new sEscolha('ofertacursoid', $alldata->ofertacursoid, _M('Oferta de curso', $module), new AcpOfertaCurso());
            $fields[] = $personId;
            $fields[] = $ofertacursoid;

            $validators[] = new MRequiredValidator('personid', _M('Pessoa', $module));
            $validators[] = new MRequiredValidator('ofertacursoid', _M('Oferta de curso', $module));
            
        }
        else
        {
            //Selecionar inscrição existente
            $fields[] = new sEscolha('inscricaoid', $alldata->inscricaoid, _M('Código da inscrição', $module), new AcpInscricao());       
            $validators[] = new MRequiredValidator('inscricaoid', _M('Código da inscricao', $module));
        }
        
        $fields[] = new MSpacer();
        
        //Dados da turma
        $fields[] = $turma = new MRadioButtonGroup('radio_turma', _M('Turma', $module), array('E' => _M('Existente', $module), 'N' => _M('Nova turma', $module)), $this->getFormValue('radio_turma', SAGU::NVL($alldata->radio_turma, 'E')), '(Somente encerrada)', 'horizontal');
        $turma->setAutoPostBack(true);
        
        //Criar nova turma
        if( $this->getFormValue('radio_turma') == 'N' || radio_turma == 'N')
        {
            $fields[] = new MTextField('codigo_turma', $alldata->codigo_turma, _M('Código da turma', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), 'Informe o código da nova turma');
            $fields[] = new MTextField('nome_turma', $alldata->nome_turma, _M('Nome da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), 'Informe o nome da nova turma');
            $fields[] = new sEscolha('gradehorarioid', $alldata->gradehorarioid, _M('Grade de horários'), new AcpGradeHorario());
            $fields[] = new MCalendarField('datainicialoferta', $alldata->datainicialoferta, _M('Data inicial da oferta'), 20, _M('Datas inicial e final da oferta da turma'));
            $fields[] = new MCalendarField('datafinaloferta', $alldata->datafinaloferta, _M('Data final da oferta'));

            $validators[] = new MRequiredValidator('codigo_turma', _M('Código da turma', $module));
            $validators[] = new MRequiredValidator('nome_turma', _M('Nome da turma', $module));
            $validators[] = new MRequiredValidator('datainicialoferta', _M('Data inicial da oferta', $module));
            $validators[] = new MRequiredValidator('datafinaloferta', _M('Data final da oferta', $module));
            $validators[] = new MRequiredValidator('gradehorarioid', _M('Grade de horários', $module));
        }
        else
        {
            //Filtra somente turmas fechadas
            $fields[] = new SHiddenField('situacao', AcpOfertaTurma::SITUACAO_FECHADA);
            $fields[] = new SHiddenField($name, $value);

            //Selecionar inscrição existente
            $ofertaturma = new AcpOfertaTurma();
            $ofertaturma->encerradas = 'X';
            $fields[] = new sEscolha('nova_ofertaturmaid', $alldata->nova_ofertaturmaid, _M('Código da turma'), $ofertaturma);
            $validators[] = new MRequiredValidator('nova_ofertaturmaid', _M('Código da turma', $module));
        }

        $fields[] = new MSpacer();
        
        $this->setFields($fields);
        $this->SetValidators($validators);
        $this->setStepData($alldata);
    }
    
    public function nextStepButton_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event    = MIOLO::_REQUEST('event');

         $alldata = $this->getData();

        $inscricaoid = $alldata->inscricaoid;
        $ofertacursoid = $alldata->ofertacursoid;
        $ofertaturmaid = $alldata->nova_ofertaturmaid;

        //Verificacao se a inscricao e a turma existentes sao existentes
        $inscricaoExistente = FALSE;
        $turmaExistente = FALSE;
        
        if( $alldata->radio_inscricao == 'E' )
        {
            $inscricaoExistente = TRUE;
        }
        
        if( $alldata->radio_turma == 'E' )
        {
            $turmaExistente = TRUE;
        }
        
        //Se ainda não tiver OFERTADECURSOID
        if ( !strlen($ofertacursoid) > 0 )
        {
            $inscricao = new AcpInscricao($inscricaoid);
            $fldOfertacursoid = new MHiddenField('ofertacursoid', $inscricao->ofertacursoid);
            $ofertacursoid = $fldOfertacursoid->value;
        }

        //Se ainda não tiver INSCRICAOID
        if( !strlen($inscricaoid) > 0 )
        {
            //Cria inscrição e obtem o inscricaoID
            $inscricao = new AcpInscricao();
            $inscricao->personid = $alldata->personid;
            $inscricao->ofertacursoid = $ofertacursoid;
            $inscricao->origem = AcpInscricao::ORIGEM_ADMINISTRATIVA;
            $inscricao->situacao = AcpInscricao::SITUACAO_INSCRITO;
            $inscricao->datasituacao = date(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP'));
            $inscricao->save();
            $fldInscricao = new MHiddenField('inscricaoid', $inscricao->inscricaoid);
            $inscricaoid = $fldInscricao->value;
        }
        
        // "dados" e o que vai ser mostrado na grid da proxima etapa
        $dados = AcpMatriculasRetroativas::obterDisciplinasDaMatriz($ofertacursoid, $inscricaoid);
        $ofertaTurma = new AcpOfertaTurma($ofertaturmaid);
        $cursosDiferentes = false;
        
        if ( $alldata->radio_inscricao == 'E' && $ofertacursoid != $ofertaTurma->ofertacursoid)
        {
            $cursosDiferentes = true;
        }
        
        $session = $MIOLO->GetSession();
        $session->setValue('matRetroativas_dataStep1', $this->getData());
        $this->setStepData($this->getStepData());

        //Permitir passar pra próxima etapa somente se encontrada uma oferta de curso
        //Se tiver dados para serem mostrados na grid da proxima etapa
        //E SE o curso selecionado NAO FOR diferente do curso disponivel para inscricao   
        if ( $cursosDiferentes && $inscricaoExistente && $turmaExistente)
        {
            $this->AddAlert(_M('O curso da turma selecionada não corresponde ao curso de inscrição!'));
        }
         else if ( ! strlen($ofertacursoid) > 0 || !count($dados[0]) > 0 )
        {
            $this->AddAlert(_M('Nenhuma oferta de componente curricular pendente para a inscrição na turma ou curso selecionados, por favor, verifique se o aluno(a) já cursou ou está inscrito nos componentes curriculares!'));
        }
        else
            {
                //Se nao passar para a próxima fase
                parent::nextStepButton_click();
            }
    }
}
?>
