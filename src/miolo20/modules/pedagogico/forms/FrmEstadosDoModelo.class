<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class Created on 05/07/2013
 *
 **/
class FrmEstadosDoModelo extends FrmModeloDeAvaliacaoPai
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcpModeloDeAvaliacao(), array('modeloDeAvaliacaoId'));
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $modeloDeAvaliacaoId = MIOLO::_REQUEST('modeloDeAvaliacaoId');
        if( strlen($modeloDeAvaliacaoId) > 0 )
        {
            $data = new AcpModeloDeAvaliacao($modeloDeAvaliacaoId);
        }
        
        // Estado de aprovação
        $fields[] = new MSelection('estadoDeMatriculaAprovacaoId', null, _M('Estado de aprovação', $module), AcpEstadoDeMatricula::listarParaCombo(true));
        $validators[] = new MRequiredValidator('estadoDeMatriculaAprovacaoId', _M('Estado de aprovação', $module));
        
        // Estado de reprovação
        $fields[] = new MSelection('estadoDeMatriculaReprovacaoId', null, _M('Estado de reprovação', $module), AcpEstadoDeMatricula::listarParaCombo(false));
        $validators[] = new MRequiredValidator('estadoDeMatriculaReprovacaoId', _M('Estado de reprovação', $module));
        
        if( $data->tipoDeDados != AcpModeloDeAvaliacao::TIPO_PARECER )
        {
            if( $data->habilitarRecuperacoes == DB_TRUE )
            {
                // Estado de aprovação em recuperação
                $fields[] = new MSelection('estadoDeMatriculaAprovacaoRecuperacaoId', null, _M('Estado de aprovação em recuperação', $module), AcpEstadoDeMatricula::listarParaCombo(true));
                $validators[] = new MRequiredValidator('estadoDeMatriculaAprovacaoRecuperacaoId', _M('Estado de aprovação em recuperação', $module));

                // Estado de reprovação em recuperação
                $fields[] = new MSelection('estadoDeMatriculaReprovacaoRecuperacaoId', null, _M('Estado de reprovação em recuperação', $module), AcpEstadoDeMatricula::listarParaCombo(false));
                $validators[] = new MRequiredValidator('estadoDeMatriculaReprovacaoRecuperacaoId', _M('Estado de reprovação em recuperação', $module));
            }
        }
        
        //Adiciona reprovação por frequência
        if( $data->habilitaControleDeFrequencia == DB_TRUE )
        {
            // Estado de reprovação em recuperação
            $fields[] = new MSelection('estadoDeReprovacao', $data->controleDeFrequencia->estadoDeReprovacao, _M('Estado de reprovação por frequência', $module), AcpEstadoDeMatricula::listarParaCombo(false));
            $validators[] = new MRequiredValidator('estadoDeReprovacao', _M('Estado de reprovação por frequência', $module));
        }
        
        parent::defineFields($fields, $validators);
    }
    
    public function beforeSave(AcpModeloDeAvaliacao $modeloDeAvaliacao) 
    {
        $modeloDeAvaliacao->estadoDeAprovacao = MIOLO::_REQUEST('estadoDeMatriculaAprovacaoId');
        $modeloDeAvaliacao->estadoDeReprovacao = MIOLO::_REQUEST('estadoDeMatriculaReprovacaoId');
        $modeloDeAvaliacao->estadoDeMatriculaAprovacaoRecuperacaoId = MIOLO::_REQUEST('estadoDeMatriculaAprovacaoRecuperacaoId');
        $modeloDeAvaliacao->estadoDeMatriculaReprovacaoRecuperacaoId = MIOLO::_REQUEST('estadoDeMatriculaReprovacaoRecuperacaoId');
        
        if( $modeloDeAvaliacao->habilitaControleDeFrequencia == DB_TRUE )
        {
            $modeloDeAvaliacao->controleDeFrequencia->estadoDeReprovacao = MIOLO::_REQUEST('estadoDeReprovacao');
        }
        
        
        return $modeloDeAvaliacao;
    }
}
?>
