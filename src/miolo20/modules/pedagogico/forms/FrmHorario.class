<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 04/11/2013
 *
 **/
class FrmHorario extends FrmGradeDeHorarioPai
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcpHorario(), array('horarioid') );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');
        
        if( $function != SForm::FUNCTION_INSERT )
        {
            $fields[] = new MSelection('diasemana', NULL, _M('Dia da semana', $module), SAGU::listarDiasDaSemana());
        }
        else
        {
            $fields[] = new MCheckBoxGroup('diasemana', _M('Dia da semana'), SAGU::listarDiasDaSemana());
        }
        
        $fields[] = new MFormContainer(rand(), array(new MTextField('horainicio', null, _M('Horário inicial'), SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'))));
        $validators[] = new MTIMEValidator('horainicio', _M('Horário inicial'), 'required');

        $fields[] = new MFormContainer(rand(), array(new MTextField('horafim', null, _M('Horário final'), SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'))));
        $validators[] = new MTIMEValidator('horafim', _M('Horário final'), 'required');
                
        $fields[] = $minutos = new MIntegerField('minutosfrequencia', null, _M('Tempo para frequência'), SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'));
        $minutos->hint = _M('Minutos considerados para contabilização da frequência durante o horário');
        $validators[] = new MRequiredValidator('minutosfrequencia', _M('Tempo para frequência'));

        parent::defineFields($fields, $validators);
    }
    
    public function btnSalvarRegistroContextual_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        if( $this->getPassFunction() != SForm::FUNCTION_INSERT )
        {
            $ok = $this->saveTypeData($sender);
        }
        else
        {
            foreach( SAGU::listarDiasDaSemana() as $dia=>$descricao )
            {
                if( strlen(MIOLO::_REQUEST('diasemana_'.$dia)) > 0 )
                {
                    $dias[] = SAGU::NVL($dia, '0');
                }
            }    
            
            if( count($dias) > 0 )
            {
                foreach( $dias as $cod=>$diaDaSemana )
                {
                    $ok &= $this->saveTypeData($sender, $diaDaSemana);
                }
            }
            else
            {
                $this->addError(_M('Selecione no mínimo um dia da semana', $module));
            }
            
        }
        
        $url = $this->isInsertFunction() ? MIOLO::getCurrentURL() : SAGU::NVL(SForm::getReturnTo(), MIOLO::getCurrentURL());
        $MIOLO->page->Redirect( $url );
    }
    
    public function saveTypeData($sender, $diaDaSemana) 
    {
        if( $this->getPassFunction() != SForm::FUNCTION_INSERT )
        {
            $ok = parent::saveTypeData($sender);
        }
        else
        {
            $this->typeObject = $typeObj = $this->getTypeObjectPopulated();
            $dataObj = $this->getRequestValues();
            $dataObj['diasemana'] = strval($diaDaSemana);
            $dataObj['horarioid'] = null;            
            $typeObj->setValuesFromArray( $dataObj );                    
            $ok = $this->beforeSave($typeObj)->save();
            $this->afterSave();
        }

        return $ok;
    }
}
?>
