<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Perfil de curso
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 25/09/2013
 *
 **/
class FrmRegrasMatricula extends FrmPerfilDeCursoPai
{
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $fields = array();
        $fields = array_merge($fields, $this->confInscricao());
        $fields = array_merge($fields, $this->confMat());
        $fields = array_merge($fields, $this->confMensagens());
        
        parent::defineFields($fields, $validators);
    }
    
    public function confMensagens()
    {
        $controls = array();        
        if ( $this->getRequestOrTypeValue('regras.tipoinscricao') == AcpRegrasMatriculaPerfilCurso::TIPO_MATRICULA_ATENDIMENTO_E_INTERNET )
        {
            $label = new MText('TermoDeInscricaoLabel', _M('Termo de inscrição') . ':');
            $label->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
            
            $leftText = new MText('txtFinalMessageInfo', mensagensDoPerfilDeCurso::obterLegendaDosCampos('regras.termoinscricao'));
            $leftText->setClass('m-left-text');
            $controls = array_merge($controls, array(new MExpandDiv('Expandtermoinscricao', array($leftText))));
            
            $message = new MEditor('regras.termoinscricao');
            $message->disableElementsPath();
            $message->setWidth( SAGU::getParameter('BASIC', 'FIELD_EDITOR_SIZE') );
            $controls = array_merge($controls, array(new MHContainer('hctTermoDeInscricao', array($label, $message))));
            
            $controls = array_merge($controls, $this->mensagensPasso( _M('Utilizar mensagem inicial?'), 'regras.utilizarmensageminicial', _M('Mensagem Inicial'), 'regras.mensageminicial' ));
            $controls = array_merge($controls, $this->mensagensPasso( _M('Utilizar mensagem final?'), 'regras.utilizarmensagemfinal', _M('Mensagem Final'), 'regras.mensagemfinal' ));
        }        
        return $controls;
    }
    
    public function mensagensPasso($label, $fieldBool, $labelText, $fieldText)
    {
        $boolValue = SAGU::NVL($this->getRequestOrTypeValue($fieldBool), DB_FALSE);
   
        $ctrl[] = $bool = $this->genericFields()->radioButtonGroup($fieldBool, $boolValue, '', SAGU::listYesNo());
        $bool->setAutoPostBack(true);
        
        $fields[] = new sBaseGroup('bsg'.$fieldBool, $label, $ctrl);
        
        if ( $boolValue == DB_TRUE )
        {
            $label = new MText($fieldText.'Label', $labelText . ':');
            
            $leftText = new MText('txtFinalMessageInfo', mensagensDoPerfilDeCurso::obterLegendaDosCampos($fieldText));
            $leftText->setClass('m-left-text');
            $fields[] = new MExpandDiv('Expand'.$fieldText, array($leftText));
            
            $label->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
            $message = new MEditor($fieldText);
            $message->disableElementsPath();
            $message->setWidth( SAGU::getParameter('BASIC', 'FIELD_EDITOR_SIZE') );
            $fields[] = new MHContainer('hct'.$fieldText, array($label, $message));            
            $this->addValidator(new MRequiredValidator($fieldText, $labelText));
        }
        
        return $fields;
    }
    
    public function confMat()
    {
        $controls[] = new SHiddenField('regras.tipomatricula', AcpRegrasMatriculaPerfilCurso::TIPO_MATRICULA_ATENDIMENTO);
        $controls[] = new MSelection('regras.formadeconfirmacaomatricula', null, _M('Forma de confirmação de matrícula', $module), AcpRegrasMatriculaPerfilCurso::listarFormaConfirmacaoMatricula());
        
        $fields[] = new sBaseGroup('bsgConfMat', _M('Configurações de matrícula'), $controls);
        
        return $fields;
    }
    
    public function confInscricao()
    {
        $controls[] = $tipoinscr = new MSelection('regras.tipoinscricao', null, _M('Tipo de inscrição', $module), AcpRegrasMatriculaPerfilCurso::listarTipoInscricao());
        $controls[] = new MSelection('regras.formadeconfirmacaoinscricao', null, _M('Forma de confirmação da inscrição', $module), AcpRegrasMatriculaPerfilCurso::listarFormaConfirmacaoInscricao());
        $tipoinscr->setAutoPostBack(true);
        $fields[] = new sBaseGroup('bsgConf', _M('Configurações de inscrição'), $controls);
        
        return $fields;
    }
    
    public function beforeSave(AcpPerfilCurso $pc)
    {
        $pc->regras->termoinscricao = SAGU::NVL(trim(MIOLO::_REQUEST('regras.termoinscricao')), SType::NULL_VALUE);
        
        return $pc;
    }
}
?>
