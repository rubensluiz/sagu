<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Curso
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 25/09/2013
 *
 **/
class FrmEditarRetroativa extends SForm
{
    public function __construct()
    {
        parent::__construct('Editar matricula', new AcpMatricula(), array('matriculaid'));
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $matriculaId = MIOLO::_REQUEST('matriculaid');
        $acpMatricula = new AcpMatricula();
        
        $filters = new stdClass();
        $filters->matriculaid = $matriculaId;
        $return = $acpMatricula->searchGrid($filters);
        $matricula = new MText('matricula', _M('Matricula:', $module));
        $matricula->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $matriculaid = new MTextLabel('matriculaid', $matriculaId);
        $fields[] = new MHContainer('div', array($matricula, $matriculaid));
        $fields[] = new MSeparator();
        
        $basPerson = new BusinessBasicBusPhysicalPerson();
        $nome = $basPerson->getPerson($return[0]['inscricao.personid']);
        $aluno = new MText('aluno', _M('Aluno:', $module));
        $aluno->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $nomeLabel = new MTextLabel('nome', $return[0]['inscricao.personid'].' - '.$nome->personName);
        $fields[] = new MHContainer('div', array($aluno, $nomeLabel));
        $fields[] = new MSeparator();
        
        $ofertacursoT = new MText('ofertacursoT', _M('Oferta de curso:', $module));
        $ofertacursoT->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $ofertacurso = new MTextLabel('ofertacurso', $return[0]['_nomecurso']);
        $fields[] = new MHContainer('div', array($ofertacursoT, $ofertacurso));
        $fields[] = new MSeparator();

        $ofertaturmaT = new MText('ofertaturmaT', _M('Oferta de turma:', $module));
        $ofertaturmaT->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $ofertaturma = new MTextLabel('ofertaturma', $return[0]['ofertaturma.descricao']);
        $fields[] = new MHContainer('div', array($ofertaturmaT, $ofertaturma));
        $fields[] = new MSeparator();
        
        $filters = new stdClass();
        $filters->matriculaid = $matriculaId;
        $return = $acpMatricula->buscarMatriculas($filters);
        $acpComponente = new AcpOfertaComponenteCurricular();
        $ofertaComponenteCurricularId = $return[0]->ofertacomponentecurricularid;
        $notafinal = $return[0]->notafinal;
        $conceitofinal = $return[0]->conceitofinal;
        $frequencia = $return[0]->frequencia;
        $estadoMat = $return[0]->estadodematriculaid;
        
        $filters = new stdClass();
        $filters->ofertacomponentecurricularid = $ofertaComponenteCurricularId;
        $return = $acpComponente->searchGrid($filters);

        $componentecurricularT = new MText('componentecurricularT', _M('Componente curricular:', $module));
        $componentecurricularT->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $componentecurricular = new MTextLabel('componentecurricular', $return[0]['componentecurricular.nome']);
        $fields[] = new MHContainer('div', array($componentecurricularT, $componentecurricular));
        $fields[] = new MSeparator();

        $acpmodelo = new AcpModeloDeAvaliacao();
        $acpModeloAval = $acpmodelo->obterModeloDaOfertaDeComponenteCurricular($ofertaComponenteCurricularId);

        if($acpModeloAval->tipodedados == $acpmodelo::TIPO_NOTA)
        {
            $fields[] = $nota = new MTextField('notafinal', $notafinal, _M('Nota final', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $nota->addAttribute('onChange', SForm::getAjaxAction('validaNota', 'divValidacao', false, array('modeloavaliacao' => $acpModeloAval->modelodeavaliacaoid)));
        }
        else if( $acpModeloAval->tipoDeDados == AcpModeloDeAvaliacao::TIPO_CONCEITO )
        {
            $componentedeavaliacao = new AcpComponenteDeAvaliacao($acpModeloAval->modelodeavaliacaoid);
            if( $componentedeavaliacao->classeDeComponente == AcpComponenteDeAvaliacao::CLASSE_FINAL )
            {
                $type = new AcpAvaliacao();
                $msql = $type->msql();            
                $msql->setWhere('AcpAvaliacao.matriculaid = ? AND AcpAvaliacao.componentedeavaliacaoid = ? AND AcpAvaliacao.tccbancaid IS NULL', array($matriculaId, $acpModeloAval->modelodeavaliacaoid));
                $avaliacao = $type->findOne($msql);

                $componenteConceito = AcpComponenteDeAvaliacaoConceito::obterComponenteConceitoDoComponente($componentedeavaliacao->componenteDeAvaliacaoId);
                $conceitos = AcpConceitosDeAvaliacao::listarConceitosDoConjunto($componenteConceito->conjuntoDeConceitosId);
                $fields[] = new MSelection('conceitoFinalId', $conceitofinal, _M('Conceito', $module), $conceitos);
            }
       }
        $fields[] = $frequencia = new MTextField('frequencia', $frequencia, _M('Frequencia', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $frequencia->addAttribute('onChange', SForm::getAjaxAction('validaFrequencia', 'divValidacao', false, array('componentecurricularmatrizid' => $row['acpmatriculasretroativas.componentecurricularmatrizid'], 'codigo_disciplina' => $row['acpmatriculasretroativas.codigo'], 'cod' => $i)));

        $fields[] = new MSelection('estadodematriculaid', $estadoMat, _M('Estado de matrícula'), AcpEstadoDeMatricula::listarParaCombo());
        
        $fields[] = new MDiv('divValidacao');
        
        $fields[] = new MSeparator();
        $ultimaModT = new MText('ultimaModT', _M('Última modificação:', $module));
        $ultimaModT->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        
        $filters = new stdClass();
        $filters->matriculaid = $matriculaId;
        $return = $acpMatricula->buscarMatriculas($filters);
        $datatime = explode('.',$return[0]->datetime);      
        $ultimaMod = new MTextLabel('ultimaMod', $return[0]->username.' - '.$datatime[0]);
        $fields[] = new MHContainer('div', array($ultimaModT, $ultimaMod));
        $fields[] = new MSeparator();
        
        $buttonSave = new MButton('btnsalvar','Salvar');
        $buttonVoltar = new MButton('btnvoltar','Voltar');
        $fields[] = new MDiv('dibButton', array($buttonSave,$buttonVoltar));
        
        $this->SetFields($fields);
    }
    
    public function validaNota($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event    = MIOLO::_REQUEST('event');
        
        $id = 'notafinal';
        $valor = $args->notafinal;

        $componenteNota = AcpComponenteDeAvaliacaoNota::obterComponenteNotaDoComponente($args->modeloavaliacao);
        $componenteDeAvaliacaoNotaId = $componenteNota->componenteDeAvaliacaoNotaId;
        $componenteDeAvaliacaoNota = new AcpComponenteDeAvaliacaoNota($componenteDeAvaliacaoNotaId);

        $valorMaximo = $componenteDeAvaliacaoNota->valorMaximo;
        $valorMinimo = $componenteDeAvaliacaoNota->valorMinimo;

        if ( strlen($valor) > 0 )
        {
            if ( $valor > $valorMaximo || $valor < $valorMinimo || !is_numeric(trim($valor)) )
            {
                $this->page->addAJAXJsCode("document.getElementById('$id').value = '';");
                $this->addError(_M('A nota deve estar entre '.$valorMinimo.' e '.$valorMaximo.'.', $module), '');
            }
        }
    }
    
     public function validaFrequencia($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event    = MIOLO::_REQUEST('event');
        
        $id = 'frequencia';
        $valor = $args->$id;

        if ( strlen($valor) > 0 )
        {
            if ( $valor > 100 || $valor < 0 || !is_numeric(trim($valor)) )
            {
                $this->page->addAJAXJsCode("document.getElementById('$id').value = '';");

                $this->addError(_M('A frequência deve estar entre 0 e 100.', $module), '');
            }
        }
    }
    
    public function beforeSave($typeObject)
    {
        $typeObject->datafim = SAGU::NVL($this->getRequestValue('datafim'), SType::NULL_VALUE);
        
        return $typeObject;
    }
    
    public function btnsalvar_click($sender = null)
    {
        $module = MIOLO::getCurrentModule();
        $acpMatricula = new AcpMatricula(MIOLO::_REQUEST('matriculaid'));
        
        $acpMatricula->notafinal = MIOLO::_REQUEST('notafinal');
        $acpMatricula->conceitofinal = MIOLO::_REQUEST('conceitofinal');
        $acpMatricula->frequencia = MIOLO::_REQUEST('frequencia');
        $acpMatricula->estadodematriculaid = MIOLO::_REQUEST('estadodematriculaid');
        try
        {
            SDatabase::beginTransaction();

            $acpMatricula->save();

            SDatabase::commit();
            
            SAGU::information(_M('Dados salvos com sucesso.', $module));
        }
         catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
        
    }
    
    public function btnvoltar_click($args)
    {
        $module = MIOLO::getCurrentModule();
        $MIOLO = MIOLO::getInstance();
        
        $acpMatricula = new AcpMatricula();
        
        $filters = new stdClass();
        $filters->matriculaid = MIOLO::_REQUEST('matriculaid');
        $return = $acpMatricula->searchGrid($filters);

        $urlSim = $MIOLO->GetActionURL($module, 'main:diverseConsultation', '', array('event' => 'redirecionaAba3','personid' => $return[0]['inscricao.personid']));
        $this->page->redirect($urlSim);
    }
}
?>
