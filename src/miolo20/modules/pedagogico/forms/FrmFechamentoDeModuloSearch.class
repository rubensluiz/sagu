<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Frequências e notas
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.com.br]
 * Felipe Ferreira [felipe_ferreira@solis.com.br]
 * 
 * @since
 * Class created on 29/08/2013
 */
class FrmFechamentoDeModuloSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', 'basic'), new AcpMatrizCurricularGrupo(), array('matrizcurriculargrupoid'));
        SMainMenu::setOverrideMenuNav('main:process:fechamentodemodulo');
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $this->object->buscaFechamentoModulo = true;
     
        $module = MIOLO::getCurrentModule();
        $fields[] = new MDiv('divLimbo', null);
        $fields[] = new sEscolha('buscaocorrenciacursoidS', null, _M('Ocorrência de curso'), new AcpOcorrenciaCursoLookup());
        $fields[] = new sEscolha('buscaturmaidS', null, _M('Turma'), new AcpOfertaTurma());
        $fields[] = $this->genericFields()->radioButtonGroup('encerradasS', SAGU::NVL(MIOLO::_REQUEST('encerradasS'), 'S'), _M('Situação da turma'), array( 'X' => _M('Fechada'), 'N' => _M('Aberta'), 'S' => _M('Indiferente')));

        parent::defineFields($fields, $module, 'GrdFechamentoDeModulo');
    }
    
    public function searchObject($filters)
    {
        $filters->buscaocorrenciacursoid = MIOLO::_REQUEST('buscaocorrenciacursoidS');
        $filters->buscaturmaid = MIOLO::_REQUEST('buscaturmaidS');
        $filters->ativos = MIOLO::_REQUEST('ativosS');
        $filters->encerradas = MIOLO::_REQUEST('encerradasS');

        return parent::searchObject($filters);
    }
    
    public function fecharModulo_click()
    {
       $MIOLO = MIOLO::getInstance();
       $module = MIOLO::getCurrentModule();
       $action = MIOLO::getCurrentAction();
       $moduloid = MIOLO::_REQUEST('moduloid');
       $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
       $urlSim = $MIOLO->GetActionURL($module, $action, '', array('event' => 'fecharModulo_confirm', 'moduloid' => $moduloid, 'ofertaturmaid' => $ofertaturmaid));
       $urlNao = $MIOLO->GetActionURL($module, $action);
       $MIOLO->question(_M('Tem certeza que deseja fechar o módulo?', $module), $urlSim, $urlNao);
   }
    
    public function fecharModulo_confirm()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $moduloid = MIOLO::_REQUEST('moduloid');
        $ofertaTurmaid = MIOLO::_REQUEST('ofertaturmaid');
        $modulo = new AcpMatrizCurricularGrupo();
        try 
        {
            $ok = $modulo->fecharModulo($ofertaTurmaid, $moduloid);
        } 
        catch (Exception $e) 
        {
            $msg = "Não foi possível fechar o módulo:<br><br>";
            $removesql = explode('Consulta: ',$e->getMessage());
            $removeid = explode(':', $removesql[0]);
            $msg.=$removeid[1];
            $msg.=':';
            $msg.=$removeid[2];
            

            $this->addAlert($e->getMessage());
        }
        if ( $ok )
        {
            $msg = _M('Módulo fechado com sucesso!', $module);
            
            $url = $MIOLO->GetActionURL($module, $action);
            $this->messageSuccess($msg, $url);
        }
    }

    public function reabrirModulo_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $moduloid = MIOLO::_REQUEST('moduloid');
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        $urlSim = $MIOLO->GetActionURL($module, $action, '', array('event' => 'reabrirModulo_confirm', 'moduloid' => $moduloid, 'ofertaturmaid' => $ofertaturmaid));
        $urlNao = $MIOLO->GetActionURL($module, $action);
        $MIOLO->question(_M('Tem certeza que deseja reabrir o módulo?'), $urlSim, $urlNao);
    }

    public function reabrirModulo_confirm()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $moduloid = MIOLO::_REQUEST('moduloid');
        $ofertaTurmaid = MIOLO::_REQUEST('ofertaturmaid');
        $modulo = new AcpMatrizCurricularGrupo();
        try
        {
            $ok = $modulo->reabrirModulo($ofertaTurmaid, $moduloid);
        }
        catch (Exception $e)
        {
            $msg = "Não foi possível reabrir o módulo:<br><br>";
            $msg .= $e->getMessage();
            $this->addAlert($msg);
        }
        if ( $ok )
        {
            $url = $MIOLO->GetActionURL($module, $action);
            $this->messageSuccess(_M('Módulo reaberto com sucesso!', $module), $url);
        }
    }
}
?>

