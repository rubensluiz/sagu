<?php

/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Frequências e notas
 *
 * @author Nataniel I. da Silva [nataniel@solis.com.br]
 *
 * @version $Id$
 *
 * @since
 * Class created on 17/11/2014
 */

set_time_limit(0);
ini_set('memory_limit', '2048M');

class FrmTransferenciaDeTurmaComponentes extends FrmTransferenciaDeTurmaPai
{
    public function __construct()
    {
        //$this->setLiberarNavegacao(true);
        
        parent::__construct(null, null, null, _M('Transferência de turma'));
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance(); 
        $module = MIOLO::getCurrentModule();
        
        $turmaOrigem = MIOLO::_REQUEST('turmaOrigem');
        $turmaDestino = MIOLO::_REQUEST('turmaDestino');
        $personId = MIOLO::_REQUEST('personId');
        $aproveitarFrequencias = MIOLO::_REQUEST('aproveitarFrequencias');
        
        $aluno = new BasPessoaFisica($personId);
        $turma = new AcpOfertaTurma($turmaOrigem);
        $turmaNova = new AcpOfertaTurma($turmaDestino);
        
        // Mensagem
        $fields[] = MMessage::getStaticMessage('msgInfo', _M("Componentes curriculares que não estiverem ofertados na turma de destino não serão transferidos.", $module), MMessage::TYPE_INFORMATION);
        
        $alunoLabel = new MText('',_M('<b>Aluno:</b> '));
        $alunoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $aluno = new MText('',$aluno->personid . ' - ' . $aluno->name);
        $fields[] = new MHContainer('hctAluno', array($alunoLabel,$aluno));
        
        $turmaLabel = new MText('',_M('<b>Turma de origem:</b> '));
        $turmaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $turmaId = new MText('',$turma->codigo . ' - ' . $turma->descricao);
        $fields[] = new MHContainer('hctTurma', array($turmaLabel,$turmaId));
        
        // Obtém informações das disciplinas da turma de origem
        $dataOrigem = $this->obtemInformacaoGrid($turmaOrigem);
        
        $fields[] = $grdOrigem= $MIOLO->getUI()->getGrid($module, 'GrdComponentesTransferenciaDeTurma');
        $grdOrigem->setData($dataOrigem);
        
        $href = $MIOLO->GetActionURL($module, 'main:diverseConsultation', null, array('personId' => $personId, 'abaDisciplinas' => DB_TRUE));
        $link = new MLink('link', 'aqui', $href);
        $fields[] = $cliqueAqui = new MText('',_M('<b>Clique ' . $link->generate() . ' para consultar a situação atual das disciplinas do aluno.</b> '));
        $cliqueAqui->setJsHint(_M('Consulta diversas'));
        $fields[] = new MSeparator();
        
        $turmaLabel = new MText('', _M('<b>Turma de destino:</b> '));
        $turmaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $turmaId = new MText('', $turmaNova->codigo . ' - ' . $turmaNova->descricao);
        $fields[] = new MHContainer('hctTurmaNova', array($turmaLabel,$turmaId));
        
        // Obtém informações da turma de destino
        $dataDestino = $this->obtemInformacaoGrid($turmaDestino, true);
        
        $fields[] = $grdDestino = $MIOLO->getUI()->getGrid($module, 'GrdComponentesTransferenciaDeTurma');
        $grdDestino->setData($dataDestino);
        
        if ( MIOLO::_REQUEST("cargaHoraria_$turmaOrigem") < MIOLO::_REQUEST("cargaHoraria_$turmaDestino") )
        {
            $this->AddAlert(_M('A carga horária registrada para a disciplina de destino é superior que a de origem, sendo assim o aluno iniciará em atraso.'));
            
            $_SESSION["cargaHoraria_$turmaOrigem"] = null;
            $_SESSION["cargaHoraria_$turmaDestino"] = null;
        }
                                    
        parent::defineFields($fields, $validators, $data);
    }
    
    public function obtemInformacaoGrid($turmaId, $matricular = false)
    {
        $MIOLO = MIOLO::getInstance();
        
        SDatabase::beginTransaction();
        
        try
        {
            $personId = MIOLO::_REQUEST('personId');
        
            if ( $matricular )
            {
                $this->matricularNasOfertasDaTurma($personId, $turmaId, MIOLO::_REQUEST('turmaOrigem'));
            }
            else
            {
                $turmaDestino = MIOLO::_REQUEST('turmaDestino');
                $disciplinasTurmaDestino = AcpOfertaComponenteCurricular::obterOfertaComponenteCurricularDaOfertaTurma($turmaDestino);
                foreach ( $disciplinasTurmaDestino as $destino )
                {
                    $componenteDestino = new AcpComponenteCurricularMatriz($destino->componenteCurricularMatrizId);
                    $disciplinasDestino[] = $componenteDestino->componentecurricularid; 
                }
            }

            $disciplinasTurma = AcpOfertaComponenteCurricular::obterOfertaComponenteCurricularDaOfertaTurma($turmaId, true);

            $situacoes = AcpMatricula::listarSituacao();     

            $dataGrid = array();

            foreach ( $disciplinasTurma as $diciplinas )
            {
                $componenteMatriz = new AcpComponenteCurricularMatriz($diciplinas->componenteCurricularMatrizId);
                $componente = new AcpComponenteCurricular($componenteMatriz->componentecurricularid);

                $acpMatricula = new AcpMatricula();

                // Obtém informações da matrícula da pessoa
                $filters = new stdClass();
                $filters->personid = $personId;
                $filters->ofertacomponentecurricularid = $diciplinas->ofertaComponenteCurricularId;
                $infoMatricula = $acpMatricula->searchGrid($filters);
                $matricula = new AcpMatricula($infoMatricula[0]['acpmatricula.matriculaid']);

                $situacao = null;

                // Situação das disciplinas de origem
                if ( !$matricular )
                {
                    $situacao = ($matricula->situacao == AcpMatricula::SITUACAO_MATRICULA) ? AcpMatricula::SITUACAO_CANCELAMENTO : $matricula->situacao; 
                }
                else
                {
                    $situacao = $matricula->situacao;                
                }

                $dadosGrid = array();
                $dadosGrid['codigo'] = $componente->codigo;
                $dadosGrid['descricao'] = $componente->nome;
                $dadosGrid['nota'] = SAGU::NVL($matricula->notafinal, '-');
                $dadosGrid['frequencia'] = SAGU::NVL(AcpFrequencia::obterPercentualDePresenca($matricula->matriculaid), '-'); 
                $dadosGrid['situacao'] = $situacoes[$situacao];

                $dataGrid[] = $dadosGrid;
            }

            $cargaHoraria = AcpInscricao::obterCargaHorariaTotalAteAData($infoMatricula[0]['inscricao.inscricaoid'], $turmaId);

            $_SESSION["cargaHoraria_{$turmaId}"] = $cargaHoraria;
            
            // Aqui é só simulação
            SDatabase::rollback();
        }
        catch (Exception $ex) 
        {
            SDatabase::rollback();
            
            $MIOLO->error($ex->getMessage());
        }
        
        return $dataGrid;
    }
    
    public function obterLabelSalvarEContinuar()
    {
        return _M('Continuar');
    }
    
    public function btnSaveAndGo_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $turmaOrigem = MIOLO::_REQUEST('turmaOrigem');
        $turmaDestino = MIOLO::_REQUEST('turmaDestino');
        $personId = MIOLO::_REQUEST('personId');
        $aproveitarFrequencias = MIOLO::_REQUEST('aproveitarFrequencias');
        
        $action = 'main:process:transferenciaDeTurmaFinanceiro';
        $args['function'] = SForm::FUNCTION_INSERT;
        $args['turmaOrigem'] = $turmaOrigem;
        $args['turmaDestino'] = $turmaDestino;
        $args['personId'] = $personId;
        $args['aproveitarFrequencias'] = $aproveitarFrequencias == DB_TRUE ? DB_TRUE : DB_FALSE;

        $url = $MIOLO->GetActionURL($module, $action, null, $args);
        
        $MIOLO->page->Redirect($url);
    }
}