<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Manage form
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 25/09/2013
 *
 **/
class FrmOfertaTurma extends FrmOfertaDeCursoPai
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        parent::__construct(new AcpOfertaTurma(), array('ofertaturmaid'));
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $data = $this->getTypeObjectPopulated();
        
        $ofertaCursoId = MIOLO::_REQUEST('ofertacursoid');
        $ofertaTurmaId = MIOLO::_REQUEST('ofertaturmaid');        
        $function = MIOLO::_REQUEST('function');
        if($function == 'insert')
        {
            //codigo curso
            $acpOfertaCurso = new AcpOfertaCurso($ofertaCursoId);
            $acpOcorrenciaCurso = new AcpOcorrenciaCurso($acpOfertaCurso->ocorrenciacursoid);
            $acpCurso = new AcpCurso($acpOcorrenciaCurso->cursoid);
            $acpOfertaTurma = new AcpOfertaTurma();

            //numeroTurmas
            $filters = new stdClass();
            $filters->buscaofertacurso = $ofertaCursoId;
            $numeroTurmas = $acpOfertaTurma->searchGrid($filters);
            
            //Verifica codigo padrao 
            $maior = 0;
            foreach($numeroTurmas as $turmas)
            {
                if(is_numeric(substr($turmas['codigo'], strlen($turmas['codigo'])-4, 3))  && substr($turmas['codigo'], 0, strlen($turmas['codigo'])-4) == $acpCurso->codigo)
                {
                    if(substr($turmas['codigo'], strlen($turmas['codigo'])-4, 3) > $maior)
                    {
                        $maior = substr($turmas['codigo'], strlen($turmas['codigo'])-4, 3);
                    }
                }
            }
            //turno ocorrencia curso
            $basTurn = new BusinessBasicBusTurn();
            $turno = $basTurn->getTurn($acpOcorrenciaCurso->turnId);
            $codigoTurma = $acpCurso->codigo.str_pad(($maior+1), 3, "0", STR_PAD_LEFT).$turno->charId;
            
            $fields[] = new SHiddenField('ofertaturmaid');
            $fields[] = $campo = new MTextField('codigo', $codigoTurma, _M('Código'));
            $campo->hint = _M('Código sugerido automaticamente pelo sistema', $module);
        }
//        #36064 - motivo por ser comentado
//        if($function == 'insert')
//        {
//            //Descricao + Combo
//            $labelFld = new MText('contractPersonLabel', _M('Descrição:',$module));
//            $labelFld->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
//            $labelFld->setClass('m-caption');
//
//            $flds = new MTextField('descricao', $acpCurso->nome);        
//            $list = array(
//                        'A' => _M('Antes', 'basic'),
//                        'D' => _M('Depois', 'basic'),
//                        'N' => _M('Não concatenar','basic')
//                         );         
//            $modulo = new MRadioButtonGroup('statusA', null, $list, 'N', null, true);
//            $label = new MText('contractPersonLabel', _M('Concatenar nome do grupo:',$module));
//            $label->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
//            $label->setClass('m-caption');
//            $fields[] = new MHContainer('mhcontainers',array( $labelFld, $flds, $label, $modulo )); 
//        }
//        else
//        {
//            $fields[] = new MTextField('descricao', null , _M('Descrição'));        
//        }
        else
        {
            $fields[] = new MTextField('codigo', null, _M('Código'));
        }
        $fields[] = new MTextField('descricao', null , _M('Descrição')); 
        
        $fields[] = new MIntegerField('minimoalunos', null, _M('Mínimo de alunos'));
        $fields[] = new MIntegerField('maximoalunos', null, _M('Máximo de alunos'));
        $fields[] = new sEscolha('ofertaturmaanteriorid', null, _M('Turma anterior'), new AcpOfertaTurma());
        $fields[] = new sEscolha('gradehorarioid', null, _M('Grade de horários'), new AcpGradeHorario());
        $fields[] = new SHiddenField('ofertacursoid', $ofertaCursoId);
        
        // local
        $fieldRelatedId = array();
        $fieldRelatedId['countryId'] = 'countryId';
        $fieldRelatedId['stateId'] = 'stateId';
        $fieldRelatedId['cityId'] = 'cityId';
        $fieldRelatedId['neighborhoodId'] = 'neighborhoodId';

        $fields[] = new SLocationField('localid', $data->localid, _M('Local',$module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),'', null, '', true, true, $fieldRelatedId);
        
        $dateFields[] = $this->genericFields()->minAndMaxDate('datainicialoferta', 'datafinaloferta', _M('Oferta'), 200, true);
        $dateFields[] = $this->genericFields()->minAndMaxDate('datainicialaulas', 'datafinalaulas', _M('Aulas'), 200);
        $dateFields[] = $this->genericFields()->minAndMaxDate('datainicialinscricao', 'datafinalinscricao', _M('Inscrição'), 200);
        $dateFields[] = $this->genericFields()->minAndMaxDate('datainicialmatricula', 'datafinalmatricula', _M('Matrícula'), 200);

        $fields[] = new MSeparator();
        $fields[] = new sBaseGroup('bsgDatas', _M('Períodos'), $dateFields);
        
        $validators[] = new MRequiredValidator('codigo', _M('Código', $module));
        $validators[] = new MRequiredValidator('descricao', _M('Descrição', $module));
        $validators[] = new MRequiredValidator('localid', _M('Local', $module));
        $validators[] = new MRequiredValidator('gradehorarioid', _M('Grade de horários', $module));        $fields = array_merge($fields, $this->getCustomFields('FrmOfertaTurma', $ofertaTurmaId));

        $fields[] = new MDiv('divconcatenarAntesDepois');

        parent::defineFields($fields, $validators);
    }
    
    public function afterSave()
    {
        $type = $this->getTypeObjectPopulated();
        $ofertaTurmaId = $type->getPkeyValue();
        
        $this->saveCustomFields($ofertaTurmaId, null, 'FrmOfertaTurma');
    }
    
    public function beforeSave(AcpOfertaTurma $ot)
    {
        $ot->datainicialoferta = SAGU::NVL(MIOLO::_REQUEST('datainicialoferta'), SType::NULL_VALUE);
        $ot->datafinaloferta = SAGU::NVL(MIOLO::_REQUEST('datafinaloferta'), SType::NULL_VALUE);
        
        $ot->datainicialaulas = SAGU::NVL(MIOLO::_REQUEST('datainicialaulas'), SType::NULL_VALUE);
        $ot->datafinalaulas = SAGU::NVL(MIOLO::_REQUEST('datafinalaulas'), SType::NULL_VALUE);
        
        $ot->datainicialinscricao = SAGU::NVL(MIOLO::_REQUEST('datainicialinscricao'), SType::NULL_VALUE);
        $ot->datafinalinscricao = SAGU::NVL(MIOLO::_REQUEST('datafinalinscricao'), SType::NULL_VALUE);

        $ot->datainicialmatricula = SAGU::NVL(MIOLO::_REQUEST('datainicialmatricula'), SType::NULL_VALUE);
        $ot->datafinalmatricula = SAGU::NVL(MIOLO::_REQUEST('datafinalmatricula'), SType::NULL_VALUE);
        $ot->habilitada = DB_TRUE;
        
        $ot->localid = SAGU::NVL(MIOLO::_REQUEST('localid'), SType::NULL_VALUE);
//        $ot->concatenardescricaogrupo = SAGU::NVL(MIOLO::_REQUEST('statusA'), SType::NULL_VALUE);
        
        return $ot;
    }
    
    public function obterFiltrosContextuais()
    {
        $filters = parent::obterFiltrosContextuais();
        $filters['situacao'] = AcpOfertaTurma::SITUACAO_ABERTA;

        return $filters;
    }
}
?>
