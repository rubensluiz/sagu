<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Oferta de Componente Curricular
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class Created on 11/11/2013
 *
 **/
$MIOLO->uses('grids/GrdOfertaCursoDisciplinas.class', $module);
class FrmOfertarComponentesCurriculares extends SManagementForm
{
    public $grids;
    
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(new AcpOfertaComponenteCurricular(), array('ofertaComponenteCurricularId'), null, _M('Ofertar componentes curriculares'));
        
        $this->defaultDisabledButtonsToolbar();
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        
        SMainMenu::setOverrideMenuNav('main:process:ofertacurso');
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $ofertaDeCursoId = MIOLO::_REQUEST('ofertacursoid');
        $ofertaTurmaId = MIOLO::_REQUEST('ofertaturmaid');
        if( !strlen($ofertaDeCursoId) > 0 )
        {
            $MIOLO->error(_M('Nenhuma oferta de curso selecionada!', $module));
        }
        
        //Listar grupos
        $ofertaDeCurso = new AcpOfertaCurso($ofertaDeCursoId);
        $ocorrenciaDeCurso = new AcpOcorrenciaCurso($ofertaDeCurso->ocorrenciacursoid);                
        $matrizesCurriculares = AcpMatrizCurricular::obterMatrizesCurricularesVigentesDoCurso($ocorrenciaDeCurso->cursoid);          
        $grupos = AcpMatrizCurricularGrupo::obterGruposDaMatrizCurricular($matrizesCurriculares[0]->matrizcurricularid);        
        $turma = new AcpOfertaTurma($ofertaTurmaId);

        try
        {
            $curso = new AcpCurso($ocorrenciaDeCurso->cursoid);

            $fields[] = new MTextLabel('labelCurso', $curso->codigo.' - '.$curso->nome,_M('Curso', $module));
        }
        catch (Exception $e)
        {
        }
        
        $fields[] = new MTextLabel('labelTurno', $ocorrenciaDeCurso->turn->description,_M('Turno', $module));
        $fields[] = new MTextLabel('labelUnidade', $ocorrenciaDeCurso->unit->description,_M('Unidade', $module));
        $fields[] = new MTextLabel('labelDescricao', $ofertaDeCurso->descricao,_M('Descrição', $module));
        $fields[] = new MTextLabel('labelTurma', $turma->codigo.' - '.$turma->descricao,_M('Turma', $module));
        $fields[] = new MSpacer();
        
        $fields[] = $this->genericFields()->labelDica('Para definir o calendário de aulas primeiro você deve marcar e salvar o componente curricular oferecendo-o.');
        
        if( count($grupos) > 0 )
        {
            foreach( $grupos as $cod=>$grupo )
            {
                $grid = new GrdOfertaCursoDisciplinas(null, 'GrdOfertaCursoDisciplinas'.$grupo->matrizcurriculargrupoid);
                $grid->disablePagination();
                $grid->disableColumnSorting();
                $grid->disableExports();
                $grid->addActionSelect();
                $grid->setTitle($grupo->descricao); 
                $grid instanceof GrdOfertaCursoDisciplinas;
                $grid->setPageLength(999999999);
                
                $componente = new AcpComponenteCurricularMatriz();
                $sql = $componente->msql();
                $sql->addEqualCondition('AcpComponenteCurricularMatriz.matrizcurriculargrupoid', $grupo->matrizcurriculargrupoid);                
                
                $rows = $componente->findManyAsArray($sql);
                $grid->setData( $rows );
                
                foreach( $rows as $cod2 => $data )
                {
                    $ofertacomponente = AcpOfertaComponenteCurricular::obterOfertaComponenteCurricular($ofertaTurmaId, $data['acpcomponentecurricularmatriz.componentecurricularmatrizid']);
                    if( $ofertacomponente instanceof AcpOfertaComponenteCurricular )
                    {
                        $id = 'selectGrdOfertaCursoDisciplinas'.$grupo->matrizcurriculargrupoid.'['.$cod2.']';
                        $this->page->onload("document.getElementById('$id').checked = true");
                        
                        $grid->selecionados[] = $cod2;
                    }
                }
                
                $this->grids[] = $grid;
                $fields[] = $grid;
            }
        }
        else
        {
            $this->addError("Não foi encontrada nenhuma matriz curricular vigente para o curso. Para poder ofertar os componentes curriculares, cadastre uma matriz curricular vigente no cadastro de curso.");
        }
        
        $image = 'images/button_finalize.png';
        $btnSaveFinish = new MButton('btnSaveAndFinish', _M('Salvar e voltar', $module), null, $image);
        $btnSave = new MButton('btnSave', _M('Salvar', $module), null, $image);
        
        $fields[] = new MSeparator();
        $fields[] = new MDiv(null, array($btnSave, $btnSaveFinish), null, 'align="center"');
        
        parent::defineFields($fields);        
    }
    
    /**
     * Salva o oferecimento dos componentes selecionados
     */
    public function btnSaveAndFinish_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $ofertaDeCursoId = MIOLO::_REQUEST('ofertacursoid');
        $ofertaTurmaId = MIOLO::_REQUEST('ofertaturmaid');
        
        SDatabase::beginTransaction();
        try
        {
            $cont = 0;
            $valor = null;
            
            //Existe oferta
            $acpOfertaComp = new AcpOfertaComponenteCurricular();
            $existOferta = $acpOfertaComp->obterOfertaComponenteCurricularDaOfertaTurma($ofertaTurmaId);
  
            foreach( $this->grids as $codGrid=>$grid )
            {
                $selecionados = $grid->getSelecteds();
                $gridData = $grid->getData();
                for ( $i = count($gridData); $i >= 0; $i-- )
                {
                    $componentecurricularmatrizid = $gridData[$i]['acpcomponentecurricularmatriz.componentecurricularmatrizid'];
                    $componenteDescricao = $gridData[$i]['componentecurricular.descricao'];
                    $ofertacomponente = AcpOfertaComponenteCurricular::obterOfertaComponenteCurricular($ofertaTurmaId, $componentecurricularmatrizid);

                    if( in_array($i, $selecionados) )
                    {
                        $ofertacomponente = new AcpOfertaComponenteCurricular($ofertacomponente->ofertaComponenteCurricularId);
                        $ofertacomponente->componenteCurricularMatrizId = $componentecurricularmatrizid;
                        $ofertacomponente->ofertaTurmaId = $ofertaTurmaId;
                        $ofertacomponente->save();
                          
//                        //concatenar descricao - #36064
//                        if(($cont+1) == count($gridData))
//                        {
//                            $acpOfertaTurma = new AcpOfertaTurma($ofertaTurmaId);
//                            if($cont != 0)
//                            {
//                                $grupo .= ',';
//                            }
//                            $grupo .= $grid->title;
//                        }
//                       $cont++;
                    }
                    else
                    {
                         //Verifica e remove
                        if( $ofertacomponente instanceof AcpOfertaComponenteCurricular)
                        {
                            $ofertacomponente->delete();
                        }
                    }
                }
                $cont = 0;
            }
        //salvando nova descricar  
        //Foi preenchido concatenar
        $acpOfertaTurmaC = new AcpOfertaTurma($ofertaTurmaId);
//#36064 - motivo que foi comentado
//        if(count($existOferta) == 0 && strlen($acpOfertaTurmaC->concatenardescricaogrupo) != 'N')
//        {
//            if($acpOfertaTurmaC->concatenardescricaogrupo == 'D')
//            {
//                $valorFinal = $acpOfertaTurmaC->descricao.' - '.substr($grupo, 1);
//            }
//            if($acpOfertaTurmaC->concatenardescricaogrupo == 'A')
//            {
//                $valorFinal = substr($grupo, 1).' - '.$acpOfertaTurmaC->descricao;
//            }
//            $acpOfertaTurma->descricao = $valorFinal;
//            $acpOfertaTurma->save();
//        }
        SDatabase::commit();
        } 
        catch (Exception $e) 
        {
            SDatabase::rollback();
            $MIOLO->error($e->getMessage());
        }
        
        $url = $MIOLO->GetActionURL($module, 'main:process:ofertaturma', '', array('ofertacursoid' => $ofertaDeCursoId, 'function' => 'insert'));
        $MIOLO->page->Redirect( $url );
    }
    
     public function btnSave_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $ofertaDeCursoId = MIOLO::_REQUEST('ofertacursoid');
        $ofertaTurmaId = MIOLO::_REQUEST('ofertaturmaid');
        
        SDatabase::beginTransaction();
        try
        {
            $cont = 0;
            $valor = null;
            
            //Existe oferta
            $acpOfertaComp = new AcpOfertaComponenteCurricular();
            $existOferta = $acpOfertaComp->obterOfertaComponenteCurricularDaOfertaTurma($ofertaTurmaId);
            
            foreach( $this->grids as $codGrid=>$grid )
            {
                $selecionados = $grid->getSelecteds();
                $gridData = $grid->getData();
                for ( $i = count($gridData); $i >= 0; $i-- )
                {
                    $componentecurricularmatrizid = $gridData[$i]['acpcomponentecurricularmatriz.componentecurricularmatrizid'];
                    $componenteDescricao = $gridData[$i]['componentecurricular.descricao'];
                    $ofertacomponente = AcpOfertaComponenteCurricular::obterOfertaComponenteCurricular($ofertaTurmaId, $componentecurricularmatrizid);

                    if( in_array($i, $selecionados) )
                    {
                        $ofertacomponente = new AcpOfertaComponenteCurricular($ofertacomponente->ofertaComponenteCurricularId);
                        $ofertacomponente->componenteCurricularMatrizId = $componentecurricularmatrizid;
                        $ofertacomponente->ofertaTurmaId = $ofertaTurmaId;
                        $ofertacomponente->save();
                        
                         //concatenar descricao
//                        if(($cont+1) == count($gridData))
//                        {
//                            $acpOfertaTurma = new AcpOfertaTurma($ofertaTurmaId);
//                            if($cont != 0)
//                            {
//                                $grupo .= ',';
//                            }
//                            $grupo .= $grid->title;
//                       }
//                       $cont++;
                    }
                    else
                    {
                         //Verifica e remove
                        if( $ofertacomponente instanceof AcpOfertaComponenteCurricular)
                        {
                            $ofertacomponente->delete();
                        }
                    }
                }
                $cont = 0;
            }
//        //salvando nova descricar  
//        //Foi preenchido concatenar
//        $acpOfertaTurmaC = new AcpOfertaTurma($ofertaTurmaId);
//
//          if(count($existOferta) == 0 && strlen($acpOfertaTurmaC->concatenardescricaogrupo) != 'N')
//        {
//            if($acpOfertaTurmaC->concatenardescricaogrupo == 'D')
//            {
//                $valorFinal = $acpOfertaTurmaC->descricao.' - '.substr($grupo, 1);
//            }
//            if($acpOfertaTurmaC->concatenardescricaogrupo == 'A')
//            {
//                $valorFinal = substr($grupo, 1).' - '.$acpOfertaTurmaC->descricao;
//            }
//            $acpOfertaTurma->descricao = $valorFinal;
//            $acpOfertaTurma->save();
//        }
            SDatabase::commit();
        } 
        catch (Exception $e) 
        {
            SDatabase::rollback();
            $MIOLO->error($e->getMessage());
        }
         
        $this->page->redirect(MIOLO::getCurrentURL().'&event=onlySave');
    }
    
    public function onlySave()
    {
        return new MMessageSuccess('Dados salvos com sucesso.');
    }
}
?>
