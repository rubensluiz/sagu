<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 04/11/2013
 *
 **/
class FrmEstadoDeMatricula extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcpEstadoDeMatricula(), array('estadodematriculaid') );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $fields[] = new MTextField('descricao', null, _M('Descrição',$module));
        
        $data = $this->getTypeObjectPopulated();
        
        // situacao
        if ( $this->isUpdateFunction() && ( strlen($data->aprovado) == 0 ) )
        {
            $data->aprovado = 'P';
        }
        
        $estados = AcpEstadoDeMatricula::listarEstados();
        $estados['P'] = $estados[''];
        unset($estados['']);
        
        $fields[] = $this->genericFields()->radioButtonGroup('aprovado', $data->aprovado, _M('Situação',$module), $estados, 'vertical');

        $fields[] = new MSeparator();
        $fields[] = $this->genericFields()->labelDica(_M('<b>Aprovado:</b> Define a situação do aluno como <b>APROVADO</b> no componente curricular'));
        $fields[] = $this->genericFields()->labelDica(_M('<b>Reprovado:</b> Define a situação do aluno como <b>REPROVADO</b> no componente curricular'));
        $ajuda  = _M('<b>Pendente:</b> Define a situação do aluno como <b>PENDENTE</b> no componente curricular') . '<br/>';
        $ajuda .= '<br/>';
        $ajuda .= _M('<b>OBS:</b> Quando utilizada a situação <b>PENDENTE</b> automaticamente o sistema <b>DESABILITA</b> a <b>VERIFICAÇÃO DE PENDENCIAS DE NOTAS</b> no fechamento do componente curricular, porém, mantendo a turma aberta até que a situação seja resolvida.');
        $fields[] = $this->genericFields()->labelDica($ajuda);
        
        parent::defineFields($fields, $validators);
    }
    
    public function beforeSave(AcpEstadoDeMatricula $edm)
    {
        $edm->aprovado = $this->getRequestValue('aprovado') == 'P' ? SType::NULL_VALUE : $this->getRequestValue('aprovado');
        
        return $edm;
    }
    
    public function tbBtnSave_click($sender = NULL)
    {
        try
        {
            // realiza validacoes
            $estMat = new AcpEstadoDeMatricula();
            $situacao = MIOLO::_REQUEST('aprovado');

            if ( $situacao == 'P' )
            {
                if ( $this->isUpdateFunction() )
                {
                    $estadodematriculaid = MIOLO::_REQUEST('acpestadodematricula_estadodematriculaid');
                    $conta = $estMat->findCount( $estMat->msql()->setWhere('aprovado IS NULL AND estadodematriculaid <> ?', array($estadodematriculaid)) );
                    $bloqueia = $conta > 0;
                }
                else
                {
                    $conta = $estMat->findCount( $estMat->msql()->setWhere('aprovado IS NULL') );
                    $bloqueia = $conta > 0;                
                }

                if ( $bloqueia )
                {
                    throw new Exception( _M('Somente é permitido cadastrar um estado com a situação "Pendente"') );
                }
            }
            
            parent::tbBtnSave_click($sender);
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }
}