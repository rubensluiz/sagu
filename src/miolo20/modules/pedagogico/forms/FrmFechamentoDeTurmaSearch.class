<?php
/**
 * <--- Copyright 2005-2013 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Frequências e notas
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.com.br]
 * Felipe Ferreira [felipe_ferreira@solis.com.br]
 * 
 * @since
 * Class created on 29/08/2013
 */
class FrmFechamentoDeTurmaSearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar', 'basic'), new AcpOfertaTurma(), array('ofertaturmaid'));
        SMainMenu::setOverrideMenuNav('main:process:fechamentodeturma');
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $this->object->buscaFechamentoTurma = true;
     
        $module = MIOLO::getCurrentModule();
        $fields[] = new MDiv('divLimbo', null);
        $fields[] = new sEscolha('buscaocorrenciacursoidS', null, _M('Ocorrência de curso'), new AcpOcorrenciaCursoLookup());
        $fields[] = new sEscolha('buscaturmaidS', null, _M('Turma'), new AcpOfertaTurma());
        $fields[] = $this->genericFields()->radioButtonGroup('encerradasS', SAGU::NVL(MIOLO::_REQUEST('encerradasS'), 'S'), _M('Situação da turma'), array( 'X' => _M('Fechada'), 'N' => _M('Aberta'), 'S' => _M('Indiferente')));

        parent::defineFields($fields, $module, 'GrdFechamentoDeTurma', $validators);
    }
    
    public function searchObject($filters)
    {
        $filters->buscaocorrenciacursoid = MIOLO::_REQUEST('buscaocorrenciacursoidS');
        $filters->buscaturmaid = MIOLO::_REQUEST('buscaturmaidS');
        $filters->ativos = MIOLO::_REQUEST('ativosS');
        $filters->encerradas = MIOLO::_REQUEST('encerradasS');

        return parent::searchObject($filters);
    }
    
    public function fecharTurma_click()
    {
       $MIOLO = MIOLO::getInstance();
       $module = MIOLO::getCurrentModule();
       $action = MIOLO::getCurrentAction();
       $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
       $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
       $urlSim = $MIOLO->GetActionURL($module, $action, '', array('event' => 'fecharTurma_confirm', 'ofertaturmaid' => $ofertaturmaid));
       $urlNao = $MIOLO->GetActionURL($module, $action);
       $MIOLO->question(_M('Tem certeza que deseja fechar a turma @1?', $module, $ofertaturma->descricao), $urlSim, $urlNao);
   }
    
    public function fecharTurma_confirm()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
        try 
        {            
            $ok = $ofertaturma->fecharTurma();
        } 
        catch (Exception $e) 
        {
            $msg = "Não foi possível fechar a turma:<br><br>";
            $removesql = explode('Consulta: ',$e->getMessage());
            $removeid = explode(':', $removesql[0]);
            $msg.=$removeid[1];
            $msg.=':';
            $msg.=$removeid[2];
            
            //pegando idcomponentecurrilar
            $disciplina=explode(":",$e->getMessage());   
           // $componentecurricular = AcpOfertaComponenteCurricular::obterOfertaComponenteCurricularId($ofertaturmaid, $disciplina[0]);
           
            if(preg_match("/freq/i", $disciplina[2]))
            {
                 $urlFecha = $MIOLO->GetActionURL($module, 'main:process:frequenciasenotas', null, array('ofertaturmaid' => $ofertaturmaid));        
                 $msg .= "<p><a href='{$urlFecha}' target='_blank' >Clique aqui para registrar a frequência pendente.</a>";  
            }
            else
            {
                 $urlFecha = $MIOLO->GetActionURL($module, 'main:process:frequenciasenotas', null, array('ofertaturmaid' => $ofertaturmaid));        
                 $msg .= "<p><a href='{$urlFecha}' target='_blank'>Clique aqui para registrar a pendencia.</a>";  
            }
            $this->addAlert($e->getMessage());
        }
        if ( $ok )
        {
            $msg = _M('Turma @1 fechada com sucesso!', $module, $ofertaturma->descricao);

            if ( AcpOfertaTurma::possuiPendenciaNota($ofertaturmaid) )
            {
                $msg .= '<br/>';
                $msg .= _M('OBS: Como existem uma ou mais matrículas com nota pendente, a turma não pode ser fechada, e apenas as notas foram processadas.');
            }
            
            $url = $MIOLO->GetActionURL($module, $action);
            $this->messageSuccess($msg, $url);
        }
    }
    
    public function reabrirTurma_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
        $urlSim = $MIOLO->GetActionURL($module, $action, '', array('event' => 'reabrirTurma_confirm', 'ofertaturmaid' => $ofertaturmaid));
        $urlNao = $MIOLO->GetActionURL($module, $action);
        $MIOLO->question(_M('Tem certeza que deseja reabrir a turma @1?', $module, $ofertaturma->descricao), $urlSim, $urlNao);
    }
    
    public function reabrirTurma_confirm()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
        try 
        {
            $ok = $ofertaturma->reabrirTurma();
        } 
        catch (Exception $e) 
        {
            $msg = "Não foi possível reabrir a turma:<br><br>";
            $msg .= $e->getMessage();
            $this->addAlert($msg);
        }
        if ( $ok )
        {
            $url = $MIOLO->GetActionURL($module, $action);
            $this->messageSuccess(_M('Turma @1 reaberta com sucesso!', $module, $ofertaturma->descricao), $url);
        }
    }
    
/**    public function pendenciaFrequencia_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
        $urlSim = $MIOLO->GetActionURL($module, $action, '', array('event' => 'enviamailfrequencias_confirm', 'ofertaturmaid' => $ofertaturmaid));
        $urlNao = $MIOLO->GetActionURL($module, $action);
        $MIOLO->question(_M('Deseja enviar email para o professor responsável pelas pendências, soclicitando as frequências não registradas?', $module, $ofertaturma->descricao), $urlSim, $urlNao);
    }
*/  
      public function enviamailfrequencias_confirm()
    {
       $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);

        $email = AcpOfertaTurma::obterEmailProfessorPendenteFrequencia($ofertaturmaid);
        $from = SAGU::getParameter('PEDAGOGICO', 'EMAIL_FROM_DEFAULT');
        $fromName = $dataCompany->acronym;
        $pendencias = AcpOfertaTurma::obterPendenciasFrequencia($ofertaturmaid);
   
        //pega email professor $emailprofessor
        foreach ($email as $f)
        { 
            $nomeProfessor = AcpOfertaTurma::obterNomeProfessorPendentePorEmailFrequencia($ofertaturmaid, $f[0]);
            
            if($f[0] != null)
            {
                //obter corpo mensagem
                $msg = "Ola ".$nomeProfessor.".<br> Solicitamos que registre as seguintes pendências, para o fechamento da turma: <br><br><br>";
    
                foreach ( $pendencias as $pend )
                {
                    foreach (array($pend) as $g)
                    {
                        if($g[6] == $f[0])
                        {
                            $msg .= "Componente curricular {$g[1]}: {$g[7]} não registrado para o(a) aluno(a) {$g[3]}";   
                            $urlFecha = $MIOLO->GetActionURL('portal', 'main:process:frequenciasProfessorPedagogico', null, array('ofertacomponentecurricularid' => $g[0]));        
                            $msg .= "<p><a href='{$urlFecha}' target='_blank'>Clique aqui para registrar esta pendencia.</a><br><br><br><br>";
                        }
                    }
                }
                $mail = new sendEmail($from, 'Professor', $f[0], 'Solicitacao Pendencias Frequencias', $msg, array());
                 try 
                 {
                     $ok = $mail->sendEmail();
                 } 
                 catch (Exception $e) 
                 {
                      $msg = "Não foi possível enviar email:<br><br>";
                      $msg .= $e->getMessage();   
                      $this->addAlert($msg);
                 }
                 if ( $ok )
                 {
                     $url = $MIOLO->GetActionURL($module, $action);
                     $this->messageSuccess(_M('Email enviado com sucesso!', $module, $ofertaturma->descricao), $url);
                 }
            }
            else
            {
                $disciplina[] = AcpOfertaTurma::obterPendenciasFrequencia($ofertaturmaid);
            }
        }
         foreach ($disciplina as $nulo)
        { 
             if ( strlen($nulo[0][1]) > 0 )
             {
                 $msgnulo = "Nao foi encontrado professor desta disciplina: ".$nulo[0][1].".<br>";
             }
             else
             {
                 $msgnulo = "Nao foi encontrado professor para disciplina.";
             }
         
            $this->addAlert($msgnulo);
        }
    }
    
/*     public function pendenciaNota_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
        $urlSim = $MIOLO->GetActionURL($module, $action, '', array('event' => 'enviamailnotas_confirm', 'ofertaturmaid' => $ofertaturmaid));
        $urlNao = $MIOLO->GetActionURL($module, $action);
        $MIOLO->question(_M('Deseja enviar email para o professor responsável pelas pendências, soclicitando as notas não registradas?', $module, $ofertaturma->descricao), $urlSim, $urlNao);
    }
*/ 
      public function enviamailnotas_confirm()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);

        $email = AcpOfertaTurma::obterEmailProfessorPendenteNota($ofertaturmaid);
        $from = SAGU::getParameter('PEDAGOGICO', 'EMAIL_FROM_DEFAULT');
        $fromName = $dataCompany->acronym;
        $pendencias = AcpOfertaTurma::obterPendenciasNotas($ofertaturmaid);
        //pega email professor $emailprofessor
        foreach ($email as $f)
        { 
            $nomeProfessor = AcpOfertaTurma::obterNomeProfessorPendentePorEmailNota($ofertaturmaid, $f[0]);
            
            if($f[0] != null)
            {
                //obter corpo mensagem
                $msg = "Ola ".$nomeProfessor.".<br> Solicitamos que registre as seguintes pendências, para o fechamento da turma: <br><br><br>";
    
                foreach ( $pendencias as $pend )
                {
                    foreach (array($pend) as $g)
                    {
                        if($g[6] == $f[0])
                        {
                            $msg .= "Componente curricular {$g[1]}: {$g[7]} não registrado para o(a) aluno(a) {$g[3]}";   
                            $urlFecha = $MIOLO->GetActionURL('portal', 'main:process:notasProfessorPedagogico', null, array('ofertacomponentecurricularid' => $g[0]));        
                            $msg .= "<p><a href='{$urlFecha}' target='_blank'>Clique aqui para registrar esta pendencia.</a><br><br><br><br>";
                        }
                    }
                }
                $mail = new sendEmail($from,'Professor', $f[0], 'Solicitacao Pendencias Notas', $msg, array());
                 try 
                 {
                     $ok = $mail->sendEmail();
                 } 
                 catch (Exception $e) 
                 {
                      $msg = "Não foi possível enviar email:<br><br>";
                      $msg .= $e->getMessage();   
                      $this->addAlert($msg);
                 }
                 if ( $ok )
                 {
                     $url = $MIOLO->GetActionURL($module, $action);
                     $this->messageSuccess(_M('Email enviado com sucesso!', $module, $ofertaturma->descricao), $url);
                 }
            }
            else
            {
                $disciplina[] = AcpOfertaTurma::obterPendenciasFrequencia($ofertaturmaid);
            }
        }
         foreach ($disciplina as $nulo)
        { 
             if ( strlen($nulo[0][1]) > 0 )
             {
                 $msgnulo = "Nao foi encontrado professor desta disciplina: ".$nulo[0][1].".<br>";
             }
             else
             {
                 $msgnulo = "Nao foi encontrado professor para disciplina.";
             }
         
            $this->addAlert($msgnulo);
        }
    }
}
?>

