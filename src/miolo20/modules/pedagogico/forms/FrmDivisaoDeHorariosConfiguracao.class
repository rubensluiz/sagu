<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Augusto Alves da Silva [augusto@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Augusto Alves da Silva [augusto@solis.coop.br]
 *
 * @since
 * Class Created on 27/11/2014
 *
 **/
class FrmDivisaoDeHorariosConfiguracao extends FrmDivisaoDeHorariosDaGradeDeHorariosPai
{
    const MSG_REQUERIMENTO = "Os campos com (<font color='red'>*</font>) são requeridos, e devem ser todos preenchidos";
    const MSG_HORAFIM1_MENOR_HORAINI1 = "A hora final do 1º horário não pode ser menor que sua hora inicial";
    const MSG_HORAFIM1_MAIOR_HORAFIM2 = "A hora final do 1º horário não pode ser maior que a hora final do 2º";
    const MSG_HORAINI2_MENOR_HORAFIM1 = "A hora inicial do 2º horário não pode ser menor que a hora final do 1º";
    const MSG_HORAINI2_MAIOR_HORAFIM2 = "A hora inicial do 2º horário não pode ser maior que sua hora final";
    
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcpHorario(), array('horarioid') );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $horarioId = $MIOLO->_REQUEST('horarioid');
        
        $diasDaSemana = SAGU::listarDiasDaSemana();
        $acpHorario = new AcpHorario($horarioId);
        
        $fields[] = new MTextLabel('diaDaSemana', _M($diasDaSemana[$acpHorario->diasemana]), _M('Dia da semana'));
        $fields[] = new MTextLabel('horaInicial', _M($acpHorario->horainicio), _M('Horário inicial'));
        $fields[] = new MTextLabel('horaFinal', _M($acpHorario->horafim), _M('Horário final'));
        $fields[] = new MTextLabel('tempoFrequencia', _M($acpHorario->minutosfrequencia), _M('Tempo para frequência'));
        $fields[] = new MSeparator();
        
        $messages = array(
            self::MSG_REQUERIMENTO,
            self::MSG_HORAFIM1_MENOR_HORAINI1,
            self::MSG_HORAFIM1_MAIOR_HORAFIM2,
            self::MSG_HORAINI2_MENOR_HORAFIM1,
            self::MSG_HORAINI2_MAIOR_HORAFIM2
        );        
        $fields[] = MMessage::getStaticMessage('msgInfo', implode($messages, ';<br/>'), MMessage::TYPE_INFORMATION);
        $fields[] = $this->tabelaDeHorariosDivididos($acpHorario);

        
        parent::defineFields($fields);
    }
    
    /**
     * Retorna tabela de configuração para a divisão do horário.
     * 
     * @param AcpHorario $acpHorario
     * @return \MTableRaw
     */
    private function tabelaDeHorariosDivididos(AcpHorario $acpHorario)
    {
        $colunas = array(
            _M('Horário'),
            _M('Hora inicial'),
            _M('Hora final'),
            _M('Tempo para frequência')
        );
        
        $dados = $this->obterDados();
        
        $labelRequerido = new MTextLabel('requerido', '*');
        $labelRequerido->addAttribute('style', 'color:red');
        
        $horarioInicial2 = new MTextField('horarioInicial2', $dados->horarioInicial2);
        $horarioInicial2->addAttribute('onkeyup', "MIOLO_Apply_Mask(new objValidate(this, '99:99'), event)");
        
        $horarioFinal1 = new MTextField('horarioFinal1', $dados->horarioFinal1);
        $horarioFinal1->addAttribute('onkeyup', "MIOLO_Apply_Mask(new objValidate(this, '99:99'), event)");
        
        $tempoFrequencia1 = new MIntegerField('tempoFrequencia1', $dados->tempoFrequencia1);
        $tempoFrequencia2 = new MIntegerField('tempoFrequencia2', $dados->tempoFrequencia2);
        
        $linhas = array();
        $linhas[] = array(
            _M('1º Horário novo'),
            $acpHorario->horainicio,
            $horarioFinal1->generate() . $labelRequerido->generate(),
            $tempoFrequencia1->generate() . $labelRequerido->generate()
        );
        
        $linhas[] = array(
            _M('2º Horário novo'),
            $horarioInicial2->generate() . $labelRequerido->generate(),
            $acpHorario->horafim,
            $tempoFrequencia2->generate() . $labelRequerido->generate()
        );    
        
        return new MTableRaw(_M('Configuração'), $linhas, $colunas);
    }
    
    public function obterLabelSalvarEContinuar()
    {
        return _M("Continuar");
    }
    
    public function btnSaveAndGo_click($sender = null)
    {
        if ( $this->validaRegistros() )
        {
            $this->vaiParaOProximoPasso($this->obterDados());
        }
    }
    
    /**
     * Efetua as validações necessárias, acusando os erros caso seja preciso.
     * 
     * @return boolean
     */
    private function validaRegistros()
    {
        $dados = $this->obterDados();
        $return = true;
        
        // Verifica se os valores requeridos foram preenchidos.
        if ( !( strlen($dados->horarioInicial2) > 0 ) ||
             !( strlen($dados->horarioFinal1) > 0 ) ||
             !( strlen($dados->tempoFrequencia1) > 0 ) ||
             !( strlen($dados->tempoFrequencia2) > 0 ) )
        {
            $this->Error(_M(self::MSG_REQUERIMENTO));
            $return = false;
        }
        
        // Hora final 1 não pode ser menor que a hora inicial 1
        if ( $dados->horarioFinal1 < $dados->horarioInicial1 )
        {
            $this->Error(_M(self::MSG_HORAFIM1_MENOR_HORAINI1));
            $return = false;
        }
        
        // Hora final 1 não pode ser maior que a hora final 2
        if ( $dados->horarioFinal1 > $dados->horarioFinal2 )
        {
            $this->Error(_M(self::MSG_HORAFIM1_MAIOR_HORAFIM2));
            $return = false;
        }
        
        // Hora inicial 2 não pode ser menor que a hora final 1
        if ( $dados->horarioInicial2 < $dados->horarioFinal1 )
        {
            $this->Error(_M(self::MSG_HORAINI2_MENOR_HORAFIM1));
            $return = false;
        }        
        
        // Hora inicial 2 não pode ser maior que a hora final 2
        if ( $dados->horarioInicial2 > $dados->horarioFinal2 )
        {
            $this->Error(_M(self::MSG_HORAINI2_MAIOR_HORAFIM2));
            $return = false;
        }
        
        return $return;
    }
    
    public function obterDados()
    {
        $MIOLO = MIOLO::getInstance();
        $horarioId = $MIOLO->_REQUEST('horarioid');
        $acpHorario = new AcpHorario($horarioId);
        
        $dadosSessao = $MIOLO->session->getValue(parent::VAR_DADOS_SESSAO);
        
        $dados = new stdClass();
        $dados->horarioid = SAGU::NVL($acpHorario->horarioid, $dadosSessao->horarioid);
        $dados->gradehorarioid = SAGU::NVL($acpHorario->gradehorarioid, $dadosSessao->gradehorarioid);
        $dados->horarioInicial1 = SAGU::NVL($acpHorario->horainicio, $dadosSessao->horainicio);
        $dados->horarioFinal1 = SAGU::NVL($this->GetFormValue('horarioFinal1'), $dadosSessao->horarioFinal1);
        $dados->tempoFrequencia1 = SAGU::NVL($this->GetFormValue('tempoFrequencia1'), $dadosSessao->tempoFrequencia1);
        $dados->horarioInicial2 = SAGU::NVL($this->GetFormValue('horarioInicial2'), $dadosSessao->horarioInicial2);
        $dados->horarioFinal2 = SAGU::NVL($acpHorario->horafim, $dadosSessao->horafim);
        $dados->tempoFrequencia2 = SAGU::NVL($this->GetFormValue('tempoFrequencia2'), $dadosSessao->tempoFrequencia2);
        $dados->minutosfrequencia = SAGU::NVL($acpHorario->minutosfrequencia, $dadosSessao->minutosfrequencia);
        
        return $dados;
    }
}
?>
