<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Curso
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 25/09/2013
 *
 **/
class FrmCurso extends FrmCursoPai
{
    public function __construct()
    {
        parent::__construct(new AcpCurso(), array('cursoid'));
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        if ( $this->isInsertFunction() && !$this->getPerfilIdSelecionado() )
        {
            $perfis = AcpPerfilCurso::listarPerfis();
            
            if ( count($perfis) > 0 )
            {
                $flds[] = $perfil = new MSelection('perfilSelecionado', null, _M('Perfil de curso'), $perfis);
                $perfil->setAutoPostBack(true);

                $fields[] = $pop = new MPopup('popX', $flds, _M('Selecione o tipo de perfil'));
                $pop->setShowCloseButton(false);
                $pop->addBoxStyle('left', '25%');
                $pop->addBoxStyle('top', '20%');
            }
            else
            {
                $goto = $MIOLO->GetActionURL($module, 'main:config:perfildecurso', null, array('function' => 'insert'));
                
                $MIOLO->information(_M('Nenhum perfil de curso foi encontrado. Clique em OK para ser redirecionado para o cadastro de Perfil de curso.'), $goto);
            }
        }
        else
        {
            $pk = $this->getPkeyValues();
            $cursoid = $pk[0];
            $data = new AcpCurso($cursoid);
            if ( $this->isUpdateFunction() )
            {
                $fields[] = $esc = new sEscolha('perfilcursoid', null, _M('Perfil'), new AcpPerfilCurso());
                $esc->setReadOnly(true);
            }

            $fields[] = new SHiddenField('perfilcursoid', $this->getPerfilIdSelecionado());

            $fields[] = new MTextField('codigo', NULL, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $validators[] = new MRequiredValidator('codigo', _M('Código'));

            $fields[] = new MTextField('nome', NULL, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));

            $fields[] = new MTextField('nomeparadocumentos', NULL, _M('Nome em documentos', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));

            $fields[] = $this->genericFields()->textoHtml('descricao', _M('Descrição'));

            $fields[] = $modalidade = new MSelection('modalidade', NULL, _M('Modalidade'), AcpCurso::listarModalidades());
            $modalidade->setAutoPostBack(true);

            $fields[] = $ofereceDist = $this->genericFields()->radioButtonGroup('disciplinasadistancia', $this->getFormValue('disciplinasadistancia', DB_FALSE), _M('Oferece disciplinas a distância'), SAGU::listYesNo());
            $ofereceDist->setAutoPostBack(true);
            
            if( $this->getFormValue('disciplinasadistancia') == DB_TRUE )
            {
                $fields[] = new MTextField('percentualcargahorariadistancia', NULL, _M('Percentual de carga horária a distância', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), _M('%'));
            }
            else
            {
                $fields[] = new SHiddenField('percentualcargahorariadistancia', '00');
            }

            $grauAcademico = new AcpGrauAcademico();
            $fields[] = new MSelection('grauacademicoid', NULL, _M('Grau acadêmico', $module), $grauAcademico->listarGrausAcademicos());

            $fields[] = new MTextField('titulacao', NULL, _M('Título', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));

            $fields[] = $situacao = new MSelection('situacao', NULL, _M('Situação', $module), AcpCurso::listarSituacao());
            $situacao->setAutoPostBack(true);

            // Centro
            $centrosPessoa = sMultiCentro::listarCentros(true);
            $fields[] = new MSelection('centerId', null, _M("Centro", $module), (count($centrosPessoa) > 0 ) ? $centrosPessoa : sMultiCentro::listarCentros());
            
            // Centro antigo. utilizado para validacao
            $fields[] = new SHiddenField('_centerOld', $this->getRequestValue('_centerOld', $data->centerid));
            
            // lookup
            if ( $this->getRequestOrTypeValue('situacao') == AcpCurso::SITUACAO_REPRESENTADO_POR_OUTRO_CURSO )
            {
                $fields[] = new SLookupContainer('cursorepresentanteid', null, array(
                    'item' => 'Curso',
                    'module' => 'pedagogico',
                    'label' => _M('Curso que o representa'),
                ));
            }

            $fields[] = $dt = new SBeginEndPeriod(array(
                'title' => _M('Período de funcionamento'),
                'begin' => array(
                    'dateId' => 'datainicio',
                    'required' => true,
                ),
                'end' => array(
                    'dateId' => 'datafim',
                    'required' => false,
                )
            ));

            $fields[] = new MTextField('numeroformalvagas', NULL, _M('Número formal de vagas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            
            if ( AcpRegrasMatriculaPerfilCurso::obterRegrasDoPerfilDeCurso($this->getPerfilIdSelecionado())->formadeconfirmacaomatricula == AcpRegrasMatriculaPerfilCurso::CONFIRMACAO_MATRICULA_PGTO_PRIMEIRA_PARCELA )
            {
                $fields[] = $_gratuito = new MTextField('_gratuito', _M('Sim', $module), _M('Há cobrança de mensalidades', $module),SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                $_gratuito->setReadOnly(true);
                $_gratuito->hint = _M('Para alterar essa opção, deve ser alterado as configurações do perfil de curso quanto a "Forma de confirmação de matrícula" ou selecionar outro perfil de curso.', $module);
                $fields[] = new SHiddenField('gratuito', DB_TRUE);
                $this->setFormValue('gratuito', DB_TRUE);
            }
            else
            {
                $fields[] = $gratuito = new MSelection('gratuito', SAGU::NVL($this->getFormValue('gratuito', $data->gratuito), DB_TRUE), _M('Há cobrança de mensalidades', $module), _M('Referente apenas a cobrança de mensalidades.'), SAGU::getTrueFalse());
                $gratuito->setAutoPostBack(true);
            }
            
            if ( $this->getFormValue('gratuito') != DB_FALSE || $data->gratuito != DB_FALSE)
            {
                $opcoes = array(
                AcpCurso::CALCULAR_VALOR_PROPORCIONAL => _M('Calcular valor proporcional a carga horária cursada', 'basic'),
                AcpCurso::CANCELAR_TITULOS_NAO_VENCIDOS => _M('Cancelar todos os títulos não vencidos', 'basic') );
                
                $fields[] = $cancelarFinanceiro = $this->genericFields()->radioButtonGroup('cancelamentofinanceiro', SAGU::NVL($this->getFormValue('cancelamentofinanceiro', $data->cancelamentofinanceiro), AcpCurso::CALCULAR_VALOR_PROPORCIONAL), _M('O que fazer com o financeiro em caso de cancelamento?', $module), $opcoes); 
                $cancelarFinanceiro->setAutoPostBack(true);
     
                if( $this->getFormValue('cancelamentofinanceiro', $data->cancelamentofinanceiro) == AcpCurso::CALCULAR_VALOR_PROPORCIONAL )
                {
                    $hint = "Se SIM, ao realizar o cancelamento de matrícula lança o valor de acerto do aluno no ato do cancelamento (Custo do aluno até a data - Valor pago + Valor da multa por desistência).";
                    $fields[] = $lancarValorDeCancelamento = $this->genericFields()->radioButtonGroup('lancarvalordecancelamento', SAGU::NVL($this->getFormValue('lancarvalordecancelamento', $data->lancarvalordecancelamento), DB_TRUE), _M('Lançar valor credor ou devedor no cancelamento de matricula?', $module), SAGU::listYesNo(), null, $hint); 
                    $fields[] = $multa = new MFloatField('percentualmultadesistencia', null, _M('Multa por desistencia (%)'));
                }
            }
        }
        
        parent::defineFields($fields, $validators);
        
        // exibe ou nao campo
        if ( $modalidade && $ofereceDist )
        {
            $modalidadeValue = SAGU::NVL($modalidade->getValue(), AcpCurso::MODALIDADE_PRESENCIAL);

            if ( $modalidadeValue != AcpCurso::MODALIDADE_PRESENCIAL )
            {
                $ofereceDist->addBoxStyle('display', 'none');
            }
        }

        if ( is_null($this->getFormValue('gratuito')) && $data->gratuito == DB_FALSE )
        {
            $this->SetFormValue('gratuito', DB_TRUE);
        }
        else if ( is_null($this->getFormValue('gratuito')) && $data->gratuito == DB_TRUE )  
        {
            $this->SetFormValue('gratuito', DB_FALSE);
        }
    }
    
    public function beforeSave($typeObject)
    {
        $typeObject->datafim = SAGU::NVL($this->getRequestValue('datafim'), SType::NULL_VALUE);
        
        // Feito validação devido a alteração do label do campo de "Gratuito" para "Há cobrança de mensalidades"
        $typeObject->gratuito = $this->getRequestValue('gratuito') == DB_TRUE ? DB_FALSE : DB_TRUE;
        
        return $typeObject;
    }
    
    public function btnSaveAndGo_click($sender = null)
    {
        $ok = true;
        $perfilcursoid = MIOLO::_REQUEST('perfilcursoid');
        $perfilcurso = new AcpPerfilCurso($perfilcursoid);
        $gratuito = MIOLO::_REQUEST('gratuito') == DB_TRUE ? DB_FALSE : DB_TRUE;
        
        $ofertas = AcpCurso::obterOfertasDeCursoId(MIOLO::_REQUEST('cursoid'));
        $turmas = AcpOfertaTurma::obterTurmasDaOfertaDeCurso($ofertas);
        
        //Se possui alguma turma com data de encerramento, nao pode deixar a data do curso ser menor
        foreach($turmas as $turma)
        {
            if ( strlen($turma->dataencerramento) > 0 )
            {
                if ( SAGU::compareTimestamp(MIOLO::_REQUEST('datafim'), '<', $turma->dataencerramento , SAGU::getParameter('BASIC', 'MASK_DATE')) )
                {
                    $ok = false;
                    $this->addError(_M('Não é possível alterar a data final do curso para @1, pois a turma @2 foi encerrada em @3.', null, MIOLO::_REQUEST('datafim'), $turma->descricao, $turma->dataencerramento));
                }
            }
        }
        
        //Se possui taxa de matrícula, não pode ser gratuito
        if( $perfilcurso->regras->formadeconfirmacaomatricula == AcpRegrasMatriculaPerfilCurso::CONFIRMACAO_MATRICULA_PGTO_PRIMEIRA_PARCELA && $gratuito == DB_TRUE)
        {
            $ok = false;
            $this->addError(_M('As regras de matricula do o perfil de curso selecionado definem a confirmação da matricula como o PAGAMENTO DA PRIMEIRA PARCELA, assim o curso não pode ser GRATUITO. Altere o campo gratuito para NÃO.'));
        }
        
        $lancarMulta = MIOLO::_REQUEST('lancarvalordecancelamento');
        $valorMulta = MIOLO::_REQUEST('percentualmultadesistenciauser');
        
        //Se quiser lançar multa na desistência, precisa do percentual da multa
        if ( $lancarMulta == DB_TRUE && $valorMulta <= 0 )
        {
           $ok = false;
           $this->addError(_M("Se quiser lançar uma multa ao aluno que desistir da matrícula, é preciso informar também um percentual da multa.", $module));
        }
        
        $ok ? parent::btnSaveAndGo_click($sender) : null;
        AcpCurso::sincronizaCentro();
    }
}
?>
