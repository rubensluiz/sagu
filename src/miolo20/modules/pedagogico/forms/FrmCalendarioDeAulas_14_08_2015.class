<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Calendário de aulas
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class Created on 25/09/2013
 *
 **/
class FrmCalendarioDeAulas extends SManagementForm
{
    const COR_PERMITE_ALTERACAO = 'blue';
    const COR_AULA_CANCELADA = 'gray';
    const COR_FREQUENCIA_REGISTRADA = 'teal';
    const COR_CALENDARIO_AULA = 'green';
    const COR_CALENDARIO_SEMAULA = 'red';
    
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(new AcpOfertaComponenteCurricular(), null, null, _M('Calendário de aulas'));
        
        SMainMenu::setOverrideMenuNav('main:process:ofertacurso');
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        
        //Exibe as mesmas informações do cabeçalho
        $fields[] = $this->informacoesDaTurma($ofertaturmaid);
        
        $ofertascomponentecurriculares = AcpOfertaComponenteCurricular::obterOfertaComponenteCurricularDaOfertaTurma($ofertaturmaid);
        foreach( $ofertascomponentecurriculares as $cod=>$ofertacomponente )
        {
            $ofertacomponente->componentecurricularmatriz = new AcpComponenteCurricularMatriz($ofertacomponente->componentecurricularmatrizid);
            if( strlen($ofertacomponente->componentecurricularmatriz->componentecurricular->componentecurricularid) > 0 )
            {
                if( $idgrupo != $ofertacomponente->componentecurricularmatriz->matrizcurriculargrupoid )
                {
                    $idgrupo = $ofertacomponente->componentecurricularmatriz->matrizcurriculargrupoid;
                    $disp[] = new MDiv('grupo_'.$idgrupo, $ofertacomponente->componentecurricularmatriz->matrizcurriculargrupo->descricao.':');
                    $disp[] = new MSpacer();
                }
                $cargahorariaoferecida = AcpOcorrenciaHorarioOferta::obterCargaHorariaOferecida($ofertacomponente->ofertaComponenteCurricularId);
                $componentecurricular = $ofertacomponente->componentecurricularmatriz->componentecurricular->obterComponente(); 
                $descricao = $ofertacomponente->componentecurricularmatriz->componentecurricular->codigo.' - '.$ofertacomponente->componentecurricularmatriz->componentecurricular->descricao;
                $disp[] = $div = new MDiv($ofertacomponente->ofertaComponenteCurricularId, $descricao."<big>".' ('.$cargahorariaoferecida.'/'.$componentecurricular->cargahoraria.'h)'."</big>", 'external-event');
            }
        }
        if( count($disp) == 0 )
        {
            $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
            $url = $MIOLO->GetActionURL($module, 'main:process:ofertarcomponentescurriculares', '', array('ofertaturmaid' => $ofertaturmaid, 'ofertacursoid' => $ofertaturma->ofertacursoid));
            $link = new MLink('lnkOfertar', _M('aqui'), $url);
            $this->addError(_M("Nenhuma disciplina oferecida para definir o calendário de aulas da turma. Clique ".$link->generate()." para oferecer as disciplinas"), $module);
        }
        $disciplinas = new MBaseGroup('external-events', _M('Componentes'), $disp, 'vertical');
        $baseLegendas = new MBaseGroup('bsgLegenda', _M('Legendas'), array(new MDiv('divLeg', $this->obterLegendas())), 'vertical');
        $fields[] = new MBaseGroup('bsgCalendario', _M('Calendário de aulas'), array($disciplinas, $this->obterCalendario($ofertaturmaid), $baseLegendas), 'horizontal');
        $fields[] = new MDiv('divEvento');
        

        $urlClose = $MIOLO->GetActionURL($module, 'main:process:ofertaturma', '', array('ofertacursoid' => MIOLO::_REQUEST('ofertacursoid')));
        $image = 'images/button_finalize.png';
        $btn = new MButton('btnClose', _M('Fechar', $module), $urlClose, $image);

        $fields[] = new MSeparator();
        $fields[] = new MDiv(null, array($btn), null, 'align="center"');

        parent::defineFields($fields, $validators, $data);
    }
    
    /**
     * Cabeçalho com informações da disciplina
     * @return \SInformationField
     */
    public static function informacoesDaTurma($ofertaturmaid)
    {
        $module = MIOLO::getCurrentModule();
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
        
        // BaseGroup de informações da disciplina
        $info = array(
            _M('Turma', $module) => $ofertaturma->descricao,
            _M('Curso', $module) => $ofertaturma->ofertacurso->descricao,
            _M('Turno', $module) => $ofertaturma->ofertacurso->ocorrenciacurso->turn->description,
            _M('Unidade', $module) => $ofertaturma->ofertacurso->ocorrenciacurso->unit->description,
            _M('Código da oferta', $module) => $ofertaturmaid,
        );
        $field = new SInformationField(array( 'title' => _M('Informações da turma', $module), 'value' => $info ));
        return $field;
    }
    
    public function obterLegendas()
    {
        $legendaPermiteAlteracao = new MLabel('<b><li type=square>Permite alteração</li></b>');
        $legendaPermiteAlteracao->addStyle('color', self::COR_PERMITE_ALTERACAO);
        
        $legendaAulaCancelada = new MLabel('<b><li type=square>Aula cancelada</li></b>');
        $legendaAulaCancelada->addStyle('color', self::COR_AULA_CANCELADA);
        
        $legendaPossuiFrequencias = new MLabel('<b><li type=square>Possui frequências registradas</li></b>');
        $legendaPossuiFrequencias->addStyle('color', self::COR_FREQUENCIA_REGISTRADA);
        
        $legendaCalendarioAula = new MLabel('<b><li type=square>Ocorre aula</li></b>');
        $legendaCalendarioAula->addStyle('color', self::COR_CALENDARIO_AULA);
        
        $legendaCalendarioSemAula = new MLabel('<b><li type=square>Não ocorre aula</li></b>');
        $legendaCalendarioSemAula->addStyle('color', self::COR_CALENDARIO_SEMAULA);
        
        return new MVContainer('divLegenda', array($legendaPermiteAlteracao, $legendaAulaCancelada, $legendaPossuiFrequencias, $legendaCalendarioAula, $legendaCalendarioSemAula));
    }
    
    public function obterCalendario($ofertaturmaid)
    {
        $MIOLO = MIOLO::getInstance();
        
        $calendario = new MFullCalendar('calendar');
        $calendario->setAjaxDayClick('adicionarAula', 'divEvento', true);
        $calendario->setAjaxExternalDrop('adicionarAula', 'divEvento', true);
        $calendario->setAjaxEventDrop('movimentarEvento', 'divEvento', true);
        $calendario->setAjaxEventResize('expandeEvento', 'divEvento', true);
        $calendario->setAllDaySlot(false);
        
        // Define a data atual do calendario
        if ( $MIOLO->session->isRegistered('calendario.data') )
        {
            $calendario->setCurrentDate( $MIOLO->session->get('calendario.data') );
            
            $MIOLO->session->unregister('calendario.data');
        }

        $eventos = AcpOcorrenciaHorarioOferta::listarOcorrenciasDaTurma($ofertaturmaid);
        foreach( $eventos as $c=>$evento )
        {
            //O id do evento, usado para cópia, movimentação unitária ou múltipla é o código da ocorrência e o horárioid
            $url = SForm::getAjaxAction('editarEvento', 'divEvento', true, array('ocorrenciahorarioofertaid' => $evento->ocorrenciahorarioofertaid), true, false);

            $color = self::COR_PERMITE_ALTERACAO;
            if( $evento->cancelada == DB_TRUE )
            {
                $color = self::COR_AULA_CANCELADA;
            }
            elseif( $evento->possuifrequencia == DB_TRUE )
            {
                $color = self::COR_FREQUENCIA_REGISTRADA;
            }
            $dataaula = explode('-', $evento->dataaula);
            $horaaula = explode(':', $evento->horainicio);
            $horaaulafim = explode(':', $evento->horafim);
            $timestamp = mktime($horaaula[0], $horaaula[1], $horaaula[2], $dataaula[1], $dataaula[2], $dataaula[0]);
            $timestampfim = mktime($horaaulafim[0], $horaaulafim[1], $horaaulafim[2], $dataaula[1], $dataaula[2], $dataaula[0]);
            
            $descricaoEvento = str_replace(array("\r\n", "\n", "\r"), '', $evento->_descricao);
            $calendario->addEvent($descricaoEvento, $timestamp, $timestampfim, $url, true, null, true, $color, null, $evento->ocorrenciahorarioofertaid);
        }
        
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
        $datainicial = $ofertaturma->ofertacurso->datainicialaulas;
        $datafinal = $ofertaturma->ofertacurso->datafinalaulas;
        
        //Define limites de horários e dias da semana segundo a grade do curso
        $menorhorario = $ofertaturma->gradehorario->obterMenorHoraInicio();
        $calendario->setMinTime($menorhorario->horainicio);
        $maiorhorario = $ofertaturma->gradehorario->obterMaiorHoraInicio();
        $calendario->setMaxTime($maiorhorario->horafim);
        
        $diassemana = $ofertaturma->gradehorario->obterDiasDaSemana();
        foreach( $diassemana as $cod => $linha )
        {
            $diassemana[] = $linha[0];
        }
        foreach( SAGU::listarDiasDaSemana() as $cod => $dia )
        {
            if( !in_array($cod, $diassemana) )
            {
                $hiddenDays[] = $cod;
            }    
        }
        $calendario->setHiddenDays($hiddenDays);
        
        
        //Adiciona Eventos do calendário acadêmico
        $searchEventos = AcpCalendarioAcademicoEvento::listarEventos($datainicial, $datafinal, $ofertaturma->ofertacurso->ocorrenciacursoid);

        if( count($searchEventos) > 0 )
        {
            foreach( $searchEventos as $codC=>$eventoCalendario )
            {
                if( $eventoCalendario->haveclass == DB_FALSE )
                {
                    $color = self::COR_CALENDARIO_SEMAULA;
                    $data = explode('/', $eventoCalendario->eventdate);
                    
                    $timestamp = mktime(0, 0, 0, $data[1], $data[0], $data[2]);
                    $timestampEnd = mktime(23, 59, 0, $data[1], $data[0], $data[2]);
                    
                    $descricaoEvento = str_replace(array("\r\n", "\n", "\r"), '', $eventoCalendario->description);
                    $calendario->addEvent($descricaoEvento, $timestamp, $timestampEnd, null, null, false, null, $color);
                }
            }            
        }
        
        return $calendario;
    }

    /**
     * Cria popup com opções para multiplos eventos ou único
     */
    public function editarEvento($args)
    {
        $ocorrenciahorariooferta = new AcpOcorrenciaHorarioOferta($args->ocorrenciahorarioofertaid);
        if( $ocorrenciahorariooferta->repete == DB_TRUE )
        {
            $btnUnico = new MButton('btnTodos', _M('Somente este evento'), SForm::getAjaxAction('atualizarAula', 'divEvento', true, array('ocorrenciahorarioofertaid' => $args->ocorrenciahorarioofertaid, 'todoseventos' => DB_FALSE)));
            $btnTodos = new MButton('btnUnico', _M('Todos eventos'), SForm::getAjaxAction('atualizarAula', 'divEvento', true, array('ocorrenciahorarioofertaid' => $args->ocorrenciahorarioofertaid, 'todoseventos' => DB_TRUE)));
            $btnCancelar = new MButton('btnCancel', _M('Cancelar'), 'mpopup.remove();');
            $content[] = new MHContainer('ctnButtons', array($btnUnico, $btnTodos, $btnCancelar));
            
            $pop = new MPopup('popupEvento', $content, _M('Quais eventos deseja editar?'));
            $pop->setShowCloseButton(false);
            $pop->addBoxStyle('left', '25%');
            $pop->addBoxStyle('top', '20%');
            $fields[] = $pop;
            
            return $fields;
        }
        else
        {
            return $this->atualizarAula($args);
        }
    }
    
    /**
     * Cria popup para atualizar evento
     * @param type $args
     * @return \MPopup
     */
    public function atualizarAula($args)
    {   
        $MIOLO = MIOLO::getInstance();
        $ocorrenciahorariooferta = new AcpOcorrenciaHorarioOferta($args->ocorrenciahorarioofertaid);   
        
        $removeLink = new MLink('lnkRemove', _M('Remover'), SForm::getAjaxAction('removerEvento', 'divMotivo', false, array('ocorrenciahorarioofertaid' => $args->ocorrenciahorarioofertaid), true, false), _M('clique para remover'));
        
        //Verifica se possui encontros registrados
        if( $ocorrenciahorariooferta->possuifrequencia != DB_TRUE )
        {
            $content[] = new SHiddenField('ocorrenciahorarioofertaid', $args->ocorrenciahorarioofertaid);
            
            //Cria campo data
            $fldData[] = $lblDataaula = new MTextLabel('lblDataaula',_M('Data da aula:'));
            $width = SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE');
            $lblDataaula->setClass('mLabel m-caption m-caption-required');
            $lblDataaula->addAttribute('style', "font-weight: normal; width: {$width}px;");
            $fldData[] = $data = new MCalendarField('dataaula', $ocorrenciahorariooferta->dataaula);
            if( $args->todoseventos == DB_TRUE )
            {
                $data->setReadOnly(true);
            }
            else
            {
                $content[] = new SHiddenField('ocorrenciaid', null);
                $content[] = new SHiddenField('repete', DB_FALSE);
            }
            $content[] = new MHcontainer('ctnDataaula', $fldData);
            

            //Campo de hora
            $horario = new AcpHorario($ocorrenciahorariooferta->horarioid);
            $content[] = new SHiddenField('horarioid', $horario->horarioid);
            $content[] = new MTextField("horainicio", $horario->horainicio, _M('Início'), 10, '', null, true);
            $content[] = new MTextField("horafim", $horario->horafim, _M('Fim'), 10, '', null, true);
            $content[] = new SHiddenField('todoseventos', $args->todoseventos);

            //Disciplina oferecida
            $content[] = new sEscolha('ofertacomponentecurricularid', $ocorrenciahorariooferta->ofertacomponentecurricularid, _M('Disciplina oferecida'), new AcpOfertaComponenteCurricular());

            //Cria campo professor
            $content[] = new sEscolha('professorid', $ocorrenciahorariooferta->professorid, _M('Professor'), new BasProfessor());

            //Cria campo sala
            $sala = new InsRecursoFisico();
            $content[] = new sEscolha('physicalresourceid', $ocorrenciahorariooferta->physicalresourceid, _M('Sala'), $sala);
            
            //Campo assunto
            $content[] = new MMultiLineField('assunto', $ocorrenciahorariooferta->assunto, _M('Assunto'), 25, 5, 40);

            $this->addValidator(new MTimeValidator('horainicio', _M('Início'), 'required'));
            $this->addValidator(new MTimeValidator('horafim', _M('Fim'), 'required'));
            $this->addValidator(new MRequiredValidator('dataaula', _M('Data da aula')));
            $this->addValidator(new MRequiredValidator('ofertacomponentecurricularid', _M('Disciplina oferecida')));
            $this->addValidator(new MRequiredValidator('horarioofertacomponentecurricularid', _M('Sala/Professor')));
            
            $content[] = $check = new MCheckBox('cancelada', DB_TRUE, _M('Cancelada'), SAGU::NVL($ocorrenciahorariooferta->cancelada == DB_TRUE ? TRUE : FALSE));
            $check->addAttribute('onChange', SForm::getAjaxAction('motivo_cancelamento', 'divMotivo', false));
            $content[] = new MDiv('divMotivo', $this->motivo_cancelamento($ocorrenciahorariooferta));
            $content[] = $removeLink;
            $btnSave = new MButton('btnSave', _M('Salvar'), SForm::getAjaxAction('btnSave_click', 'divEvento'));
            $btnCancel = new MButton('btnCancel', _M('Cancelar'), 'mpopup.remove();');
            $content[] = new MHContainer('ctnButtons', array($btnSave, $btnCancel));
            
            $pop = new MPopup('popupEvento', $content, _M('Alterar ocorrência(s) de aula'));
            $pop->setShowCloseButton(false);
            $pop->addBoxStyle('left', '25%');
            $pop->addBoxStyle('top', '20%');
            $fields[] = $pop;
        }
        else
        {
            $isAdmin = $MIOLO->checkAccess('FrmOfertaDeCurso', A_ADMIN, false, true);
            
            if ( $isAdmin )
            {
                $content[] = MPrompt::Alert(_M('Este encontro já possui frequências registradas, porém, como você é Administrador(a) do sistema, é possível realizar algumas ações limitadas.'), 'NONE');
                
                $content[] = $removeLink;
                $content[] = $this->genericFields()->labelDica(_M('<b>ATENÇÃO:</b> Ao remover esta ocorrência, será removido também suas frequências registradas.'));

                $pop = new MPopup('popupEvento', $content, _M('Alterar ocorrência(s) de aula'));
                $pop->addBoxStyle('left', '25%');
                $pop->addBoxStyle('top', '20%');
                $fields[] = $pop;
            }
            else
            {
                $this->addInfo(_M('Este encontro já possui frequências registradas, não é possível alterar a ocorrência'));
            }
        }
        
        
        return $fields;
    }
    
    public function removerEvento($args)
    {
        $MIOLO = MIOLO::getInstance();
        $gotoNo = $MIOLO->getCurrentURL();
        if( $args->todoseventos == DB_TRUE )
        {
            $msg = _M('Tem certeza que deseja remover todos os eventos da sequência?');
        }
        else
        {
            $msg = _M('Tem certeza que deseja remover o evento?');
        }
        
        $MIOLO->question($msg, SForm::getAjaxAction('removerEvento_confirm', 'divMotivo', false, $args), $gotoNo);
    }
    
    public function removerEvento_confirm($args)
    {
        $MIOLO = MIOLO::getInstance();
        $ocorrenciahorariooferta = new AcpOcorrenciaHorarioOferta($args->ocorrenciahorarioofertaid);
        try
        {
            $ok = true;
            if( $args->todoseventos == DB_TRUE )
            {
                //Salva todos eventos repetidos
                $ocorrencias = AcpOcorrenciaHorarioOferta::obterOcorrenciasHorarioDaOcorrenciaId($ocorrenciahorariooferta->ocorrenciaid);
                foreach($ocorrencias as $cod => $ocorrencia)
                {
                    if ( $ocorrencia->possuifrequencia == DB_TRUE )
                    {
                        $ocorrenciahorariooferta->removerFrequencias($ocorrencia->ocorrenciahorarioofertaid);
                    }
                    
                    $ok &= $ocorrencia->delete();
                }
            }
            else
            {
                if ( $ocorrenciahorariooferta->possuifrequencia == DB_TRUE )
                {
                    $ocorrenciahorariooferta->removerFrequencias($args->ocorrenciahorarioofertaid);
                }
                
                $ok &= $ocorrenciahorariooferta->delete();
            }
            
        } catch (Exception $e) 
        {
            $MIOLO->error($e->getMessage());
        }
        
        $MIOLO->page->AddAJAXJsCode("window.location = window.location.href;");
    }
    
    public function expandeEvento($args)
    {
        $MIOLO = MIOLO::getInstance();
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
        
        $ocorrenciahorarioofertaid = $args->pk;
        $ocorrenciahorariooferta = new AcpOcorrenciaHorarioOferta($ocorrenciahorarioofertaid);
        
        $datainicio = $args->dateStart;
        $datafim = $args->dateEnd;
        $horainicio = $args->timeStart;
        $horafim = $args->timeEnd;
        $gradehorarioid = $ofertaturma->gradehorarioid;
        $horariosnoperiodo = AcpHorario::obterHorariosNumPeriodo($datainicio, $horainicio, $datafim, $horafim, $gradehorarioid);
        
        try
        {
            //Percorre todos os dias selecionados
            foreach( $horariosnoperiodo as $data => $horarios )
            {
                //Percorre cada horario dos dias selecionados
                foreach( $horarios as $cod => $horario )
                {
                    if( !AcpCalendarioAcademicoEvento::temAula($data, $ofertaturma->ofertacurso->ocorrenciacursoid ) )
                    {
                        $MIOLO->error(_M('Segundo o calendário acadêmico, na data selecionada não ocorre aula, verifique a data.'));
                    }

                    if( !AcpOcorrenciaHorarioOferta::verificaOcorrenciaRegistrada($horario->horarioid, $data, $ocorrenciahorariooferta->ofertacomponentecurricularid) )
                    {
                        //Cria a cópia da ocorrencia de horário
                        $novaocorrenciahorariooferta = $ocorrenciahorariooferta;
                        $novaocorrenciahorariooferta->ocorrenciahorarioofertaid = null;
                        $novaocorrenciahorariooferta->dataaula = $data;
                        $novaocorrenciahorariooferta->horarioid = $horario->horarioid;
                        $novaocorrenciahorariooferta->ocorrenciaid = '';
                        $novaocorrenciahorariooferta->save();
                    }
                }
            }
            
            $this->recarregar($args);
        } 
        catch (Exception $e) 
        {
            $MIOLO->error($e->getMessage());
        }
        
        return '';
    }
    
    /**
     * Ação para mover eventos no calendário, questionando
     * @param type $args
     * @return null
     */
    public function movimentarEvento($args)
    {
        $MIOLO = MIOLO::getInstance();
        $ocorrenciahorarioofertaid = $args->pk;
        $ocorrenciahorariooferta = new AcpOcorrenciaHorarioOferta($ocorrenciahorarioofertaid);
        
        if( $ocorrenciahorariooferta->possuifrequencia == DB_TRUE )
        {
            $isAdmin = $MIOLO->checkAccess('FrmOfertaDeCurso', A_ADMIN, false, true);
            
            if ( $isAdmin )
            {
                $content[] = MPrompt::Alert(_M('A disciplina selecionada já possui frequências registradas na data. Como você é um administrador, esta operação foi autorizada, e as frequências serão atualizadas para o novo horário.'), 'NONE');
            }
            else
            {
                $MIOLO->information(_M('A disciplina selecionada já possui frequências registradas na data. Não pode ser alterada'));
            }
        }
        
        $ajaxArgs = array('pk' => $args->pk, 'date' => $args->date, 'time' => $args->time);
        $btnCopiar = new MButton('btnTodos', _M('Copiar'), SForm::getAjaxAction('copiarEvento', 'divEvento', true, $ajaxArgs));
        $btnMover = new MButton('btnUnico', _M('Mover'), SForm::getAjaxAction('moverEvento', 'divEvento', true, $ajaxArgs));
        $btnCancelar = new MButton('btnCancel', _M('Cancelar'), SForm::getAjaxAction('cancelarEvento', 'divEvento', true, $ajaxArgs));
        $content[] = new MHContainer('ctnButtons', array($btnCopiar, $btnMover, $btnCancelar));

        $pop = new MPopup('popupEvento', $content, _M('O que deseja fazer com o evento?'));
        $pop->setShowCloseButton(false);
        $pop->addBoxStyle('left', '25%');
        $pop->addBoxStyle('top', '20%');
        $fields[] = $pop;
        
        return $fields;
    }
    
    public function moverEvento($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $ocorrenciahorarioofertaid = $args->pk;
        $ocorrenciahorariooferta = new AcpOcorrenciaHorarioOferta($ocorrenciahorarioofertaid);

        //Obtém a oferta do componente
        $ofertacomponentecurricular = new AcpOfertaComponenteCurricular($ocorrenciahorariooferta->ofertacomponentecurricularid);

        $horario = AcpHorario::obterProximoHorario($args->time, SAGU::getDatePart($args->date, 'DOW'), $ofertacomponentecurricular->ofertaturma->gradehorarioid);
        if( !strlen($horario->horarioid) )
        {
            $MIOLO->information(_M('Nenhum horário disponível para a data selecionada'));
        }
        $ocorrenciahorariooferta->dataaula = $args->date;
        $ocorrenciahorariooferta->horarioid = $horario->horarioid;
        $ocorrenciahorariooferta->ocorrenciaid = '';
        $ocorrenciahorariooferta->repete = DB_FALSE;
        
        // Se tiver frequencias, devemos move-las junto
        if ( $ocorrenciahorariooferta->possuifrequencia == DB_TRUE && ( strlen($args->date) > 0 ) )
        {
            $ocorrenciahorariooferta->atualizaFrequencias($ocorrenciahorarioofertaid, $args->date);
        }

        //Salva a ocorrencia horario oferta
        $this->btnSave_click($ocorrenciahorariooferta);
    }
    
    public function copiarEvento($args)
    {
        $MIOLO = MIOLO::getInstance();

        $ocorrenciahorarioofertaid = $args->pk;
        $ocorrenciahorariooferta = new AcpOcorrenciaHorarioOferta($ocorrenciahorarioofertaid);
        
        //Obtém a oferta do componente
        $ofertacomponentecurricular = new AcpOfertaComponenteCurricular($ocorrenciahorariooferta->ofertacomponentecurricularid);
        
        $horario = AcpHorario::obterProximoHorario($args->time, SAGU::getDatePart($args->date, 'DOW'), $ofertacomponentecurricular->ofertaturma->gradehorarioid);
        if( !strlen($horario->horarioid) )
        {
            $MIOLO->information(_M('Nenhum horário disponível para a data selecionada'));
        }
        
        //Cria a cópia da ocorrencia de horário
        $novaocorrenciahorariooferta = $ocorrenciahorariooferta;
        $novaocorrenciahorariooferta->ocorrenciahorarioofertaid = null;
        $novaocorrenciahorariooferta->dataaula = $args->date;
        $novaocorrenciahorariooferta->horarioid = $horario->horarioid;
        $novaocorrenciahorariooferta->ocorrenciaid = '';
        $novaocorrenciahorariooferta->repete = DB_FALSE;
        
        //Salva a nova oferta de horario
        $this->btnSave_click($novaocorrenciahorariooferta);
    }
    
    /**
     * Cria popup para adicionar um novo evento
     * @param type $args
     */
    public function adicionarAula($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
        $content[] = new SHiddenField('ofertaturmaid', $ofertaturmaid);
        
        //Cria campo data
        $fldData[] = $lblDataaula = new MTextLabel('lblDataaula',_M('Data da aula:'));
        $width = SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE');
        $lblDataaula->setClass('mLabel m-caption m-caption-required');
        $lblDataaula->addAttribute('style', "font-weight: normal; width: {$width}px;");
        $fldData[] = $data = new MCalendarField('dataaula', $args->date);
        $content[] = new MHcontainer('ctnDataaula', $fldData);
        
        //Campo de hora
        $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
        $horario = AcpHorario::obterProximoHorario($args->time, SAGU::getDatePart($args->date, 'DOW'), $ofertaturma->gradehorarioid);
        if( !$horario->horarioid )
        {
            $this->addInfo(_M('Nenhum horário disponível na grade para data selecionada.'), '');
            return null;
        }
        $content[] = new SHiddenField('horarioid', $horario->horarioid);
        $content[] = new MTextField("horainicio", $horario->horainicio, _M('Início'), 10, '', null, true);
        $content[] = new MTextField("horafim", $horario->horafim, _M('Fim'), 10, '', null, true);
        
        //Disciplina oferecida
        $content[] = new sEscolha('ofertacomponentecurricularid', $args->ofertacomponentecurricularid, _M('Disciplina oferecida'), new AcpOfertaComponenteCurricular());
        
        //Cria campo professor
        $typeProfessores = new BasProfessor();
        if ( AcpCursoDocente::possuiProfessoresNoCurso($ofertaturma->ofertacurso->ocorrenciacurso->cursoid) )
        {
            $typeProfessores = new AcpCursoDocente();
            $typeProfessores->cursoid = $ofertaturma->ofertacurso->ocorrenciacurso->cursoid;
        }
        
        $content[] = new sEscolha('professorid', null, _M('Professor'), $typeProfessores);
        
        //Cria campo sala
        $sala = new InsRecursoFisico();
        $content[] = new sEscolha('physicalresourceid', null, _M('Sala'), $sala);
        
        //Campo assunto
        $content[] = new MMultiLineField('assunto', $args->assunto, _M('Assunto'), 25, 5, 40);
        
        //Adiciona múltiplos eventos
        $content[] = $repetir = new MCheckBox('repetir', DB_TRUE, _M('Repetir'));
        $repetir->addAttribute('onChange', SForm::getAjaxAction('repetirOpcoes', 'repetirOpcoes', false));
        $content[] = new MDiv('repetirOpcoes');
        
        $btnSave = new MButton('btnSave', _M('Salvar'), SForm::getAjaxAction('btnSave_click', 'divEvento'));
        $btnCancel = new MButton('btnCancel', _M('Cancelar'), 'mpopup.remove();');
        $content[] = new MHContainer('ctnButtons', array($btnSave, $btnCancel));

        $pop = new MPopup('popupEvento', $content, _M('Adicionar ocorrência de aula'));
        $pop->setShowCloseButton(false);
        $pop->addBoxStyle('left', '25%');
        $pop->addBoxStyle('top', '20%');
        $fields[] = $pop;
        
        $this->addValidator(new MTimeValidator('horainicio', _M('Início'), 'required'));
        $this->addValidator(new MTimeValidator('horafim', _M('Fim'), 'required'));
        $this->addValidator(new MRequiredValidator('dataaula', _M('Data da aula')));
        $this->addValidator(new MRequiredValidator('ofertacomponentecurricularid', _M('Disciplina oferecida')));
        $this->addValidator(new MRequiredValidator('horarioofertacomponentecurricularid', _M('Sala/Professor')));
        
        return $fields;
    }
    
    public function repetirOpcoes($args)
    {
        if( $args->repetir )
        {
            // Repete a cada
            $opcoes = array(
                '0' => '1',
                '1' => '2',
                '2' => '3',
                '3' => '4',
                '4' => '5'
            );
            $flds[] = new MTextLabel('lblRepete', _M('Repete a cada (semanas)'));            
            $flds[] = new MSelection('repeteacada', null, null, $opcoes);
            
            $ofertaturma = new AcpOfertaTurma(MIOLO::_REQUEST('ofertaturmaid'));
            $diassemana = $ofertaturma->gradehorario->obterDiasDaSemana();
            $diasdasemana = SAGU::listarDiasDaSemana();
            
            $diaselecionado = SAGU::getDatePart($args->dataaula, 'DOW');
            foreach( $diassemana as $cod => $linha )
            {
                $checked = false;
                if( $linha[0] == $diaselecionado )
                {
                    $checked = true;
                }
                $options[$cod] = new MCheckBox('dias_'.$linha[0], DB_TRUE, $diasdasemana[$linha[0]], $checked, $diasdasemana[$linha[0]]);
            }
            
            //Dias da semana
            $flds[] = new MTextLabel('lblDias', _M('Dias da semana:'));
            $flds[] = new MCheckBoxGroup('dias', _M('Dias da semana'), $options, '');
              
            //Termina
            $flds[] = new MTextLabel('lblTermina', _M('Termina em:'));
            $flds[] = $termina = new MSelection('termina', null, null, array('ocorrencias' => _M('Número de ocorrências'), 'data' => _M('Data')));
            $termina->addAttribute('onChange', SForm::getAjaxAction('alterarTermina', 'divTermina', false));
            $flds[] = new MDiv('divTermina');

            $this->addValidator(new MRequiredValidator('repeteacada', _M('Repete a cada (semanas)')));
            $this->addValidator(new MRequiredValidator('termina', _M('Termina em')));
            
            
            $fields[] = new MBaseGroup('bsgRepeticao', _M('Repetir'), $flds, 'vertical');
        }
        
        return $fields;
    }
    
    
    public function alterarTermina($args)
    {
        if( $args->termina == 'ocorrencias' )
        {
            $fields[] = new MTextField('numeroocorrencia', null, NULL, 10, 'ocorrências');
            $this->addValidator(new MRequiredValidator('numeroocorrencia', _M('Número de ocorrências')));
        }
        else
        {
            $fields[] = new MCalendarField('datafinal');
            $this->addValidator(new MRequiredValidator('datafinal', _M('Data final')));
        }
        
        return $fields;
    }


    /**
     * Cria o campo motivo do cancelamento
     * @param type $args
     * @return \MHContainer
     */
    public function motivo_cancelamento($args)
    {
        if( $args->cancelada == DB_TRUE )
        {
            $label = new MLabel(_M('Motivo do cancelamento', $this->module) . ':');
            $label->setClass('m-caption m-caption-required');
            $field = new MMultilinefield('motivo_cancelamento', $args->motivo_cancelamento, '', 20, 5);  
            $fields[] = new MHContainer('ctnMotivo', array($label, $field));
            $this->addValidator(new MRequiredValidator('motivo_cancelamento', _M('Motivo do cancelamento')));
        }        
        return $fields;
    }
    
    /**
     * Salva a edição de um evento
     * @param type $args
     */
    public function btnSave_click($args)
    {
        $MIOLO = MIOLO::getInstance();

        //Salva um único evento
        if( !$args->repetir )
        {
            $ocorrenciahorariooferta = $this->salvar($args);
            if( $ocorrenciahorariooferta )
            {
                $ok = true;
            }
        }
        else
        {
            SDatabase::beginTransaction();
            
            //Sava multiplos eventos
            $ok = $this->salvarRepeticoes($args);
            
            SDatabase::commit();
        }
        
        if( $ok )
        {            
            $this->recarregar($args);
        }
    }
    
    public function salvarRepeticoes($args)
    {
        $ofertacomponentecurricular = new AcpOfertaComponenteCurricular($args->ofertacomponentecurricularid, true);
        
        $infos = AcpOfertaComponenteCurricular::obterInformacaoOferta($ofertacomponentecurricular->ofertaTurmaId);
        $info = $infos[0];
        
        $gradeHorarioId = $info['gradehorarioid'];
        $ocorrenciaCursoId = $info['ocorrenciacursoid'];
        
        if( $args->termina == 'ocorrencias' )
        {
            $count = $args->numeroocorrencia;
        }
        else
        {
            $count = SAGU::dateDiff($args->datafinal, SAGU::getDateNow());
        }

        $selecionado = false;
        $dow = SAGU::getDatePart($args->dataaula, 'DOW');
        for( $d=$dow; $d <= 6; $d ++)
        {
            $ocorreaula = true;
            $id = 'dias_'.$d;
            if( strlen($args->$id) > 0 )
            {
                $selecionado = true;
            }
        }
        if( !$selecionado )
        {
            $MIOLO = MIOLO::getInstance();
            $MIOLO->error(_M('Nenhum dia da semana selecionado'));
        }

        //Percorre cada ocorrência
        $ocorrenciahorariooferta = true;
        $i = 1;
        
        while( $i <= $count )
        {
            //Verifica próximo dia da semana selecionado
            $dow = SAGU::getDatePart($args->dataaula, 'DOW');
            
            if( $i > 1 )
            {
                if( $args->repeteacada > 0 )
                {
                    $args->dataaula = SAGU::addIntervalInDate($args->dataaula, 'd', 7*$args->repeteacada);
                }
            }
            
            for( $d=$dow; $d <= 6; $d ++)
            {
                $ocorreaula = true;
                $id = 'dias_'.$d;
                if( strlen($args->$id) > 0 )
                {
                    //Valida se ocorre aula na data
                    if( AcpCalendarioAcademicoEvento::temAula($args->dataaula, $ocorrenciaCursoId) == false )
                    {
                        $ocorreaula = false;
                    }
                    
                    $horario =  AcpHorario::obterProximoHorario($args->horainicio, $d, $gradeHorarioId);
                    $args->horarioid = $horario->horarioid;
                    
                    if( $ocorreaula )
                    {
                        $args->repete = DB_TRUE;
                        $ocorrenciahorariooferta = $this->salvar($args);
                        $ocorrenciahorariooferta->populateData();
                        $args->ocorrenciaid = $ocorrenciahorariooferta->ocorrenciaid;
                        
                        if( $ocorrenciahorariooferta )
                        {
                            $ok = true;
                        }
                    }

                    $i ++;
                }
                $args->dataaula = SAGU::addIntervalInDate($args->dataaula, 'd', 1);
                
                if( $args->datafinal )
                {
                    if( SAGU::compareTimestamp($args->dataaula, '>' ,$args->datafinal) )
                    {
                        return $ok;
                    }
                }
            }
        }
        
        return $ok;
    }
    
    public function salvar($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        try
        {
            $ok = true;
            if( $args->todoseventos == DB_TRUE )
            {
                //Salva todos eventos repetidos
                $type = new AcpOcorrenciaHorarioOferta($args->ocorrenciahorarioofertaid);
                $ocorrencias = AcpOcorrenciaHorarioOferta::obterOcorrenciasHorarioDaOcorrenciaId($type->ocorrenciaid);
                foreach($ocorrencias as $cod => $ocorrenciahorariooferta)
                {
                    $ocorrenciahorariooferta->cancelada = SAGU::NVL($args->cancelada, DB_FALSE);
                    $ocorrenciahorariooferta->motivo_cancelamento = $args->motivo_cancelamento;
                    $ocorrenciahorariooferta->professorid = $args->professorid;
                    $ocorrenciahorariooferta->physicalresourceid = $args->physicalresourceid;
                    $ocorrenciahorariooferta->physicalresourceversion = $args->physicalresourceversion;
                    $ocorrenciahorariooferta->ofertacomponentecurricularid = $args->ofertacomponentecurricularid;
                    $ocorrenciahorariooferta->assunto = $args->assunto;
                    $ok &= $ocorrenciahorariooferta->save();
                }
            }
            else
            {
                //Salva evento único
                $ocorrenciahorariooferta = new AcpOcorrenciaHorarioOferta($args->ocorrenciahorarioofertaid);
                $ocorrenciahorariooferta->dataaula = $args->dataaula;
                $ocorrenciahorariooferta->cancelada = SAGU::NVL($args->cancelada, DB_FALSE);
                $ocorrenciahorariooferta->motivo_cancelamento = $args->motivo_cancelamento;
                $ocorrenciahorariooferta->horarioid = $args->horarioid;
                $ocorrenciahorariooferta->professorid = SAGU::NVL($args->professorid, SType::NULL_VALUE);
                $ocorrenciahorariooferta->physicalresourceid = SAGU::NVL($args->physicalresourceid, SType::NULL_VALUE);
                $ocorrenciahorariooferta->physicalresourceversion = SAGU::NVL($args->physicalresourceversion, SType::NULL_VALUE);
                $ocorrenciahorariooferta->ofertacomponentecurricularid = $args->ofertacomponentecurricularid;
                $ocorrenciahorariooferta->ocorrenciaid = $args->ocorrenciaid;
                $ocorrenciahorariooferta->repete = $args->repete;
                $ocorrenciahorariooferta->assunto = SAGU::NVL($args->assunto, SType::NULL_VALUE);
                $ok &= $ocorrenciahorariooferta->save();
            }
            
            if( !$ok )
            {
                return false;
            }
        }
        catch (Exception $e)
        {
            $MIOLO->error($e->getMessage(), "document.getElementById('divSaguMessages').style.display='none';");
        }
        
        return $ocorrenciahorariooferta;
    }
    
    public function cancelarEvento($args)
    {
        $this->recarregar($args);
    }
    
    public function recarregar($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $dataCalendario = SAGU::NVL($args->dataaula, $args->date, $args->dateStart);

        if ( strlen($dataCalendario) > 0 )
        {
            $MIOLO->session->set('calendario.data', $dataCalendario);
        }
        
        $MIOLO->page->AddAJAXJsCode("window.location = window.location.href;");
    }
}
?>