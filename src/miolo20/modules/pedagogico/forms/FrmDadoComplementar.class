<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 25/09/2013
 *
 **/
class FrmDadoComplementar extends FrmCursoPai
{
    public function __construct()
    {
        parent::__construct(new AcpCurso(), array('cursoid'));
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $cursoId = $this->obterValorDaChave();
        $campos = AcpPerfilCursoCamposAdicionais::buscarPorCurso($cursoId);

        if ( count($campos) == 0 )
        {
            $this->AddAlert(_M('Não existe nenhum campo adicional cadastrado para o perfil deste curso (selecionado no passo 1). Portanto, não é necessário o preenchimento dos campos.'));
            $fields[] = new MLabel();
        }
        else
        {
            $fields = array();

            foreach ( $campos as $ca )
            {
                $ca instanceof AcpPerfilCursoCamposAdicionais;

                $campoBase = camposAdicionais::instanciarPeloIdNaBase($cursoId, $ca->perfilcursocamposadicionaisid);

                if ( $campoBase instanceof camposAdicionais )
                {
                    $fields = array_merge($fields, $campoBase->getCampos());
                }
            }
        }

        parent::defineFields($fields, $validators);
    }
    
    public function afterSave()
    {
        $cursoId = $this->obterValorDaChave();
        
        $curso = $this->getTypeObjectPopulated();
        $curso instanceof AcpCurso;
        
        $perfilCurso = new AcpPerfilCurso($curso->perfilcursoid);
        
        foreach ( $perfilCurso->camposadicionais as $ca )
        {
            $ca instanceof AcpPerfilCursoCamposAdicionais;
            
            $campoBase = camposAdicionais::instanciarPeloIdNaBase($cursoId, $ca->perfilcursocamposadicionaisid);
            
            if ( $campoBase instanceof camposAdicionais )
            {
                $campoBase->gravaDados();
            }
        }
    }
}
?>
