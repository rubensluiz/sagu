<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class Created on 04/11/2013
 *
 **/
class FrmPrecoDoCurso extends FrmPrecoDoCursoPai
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        $this->setLimparCamposVazios(true);
        parent::__construct(new PrcPrecoCurso(), array('precocursoid') );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        
        if ( $this->isInsertFunction() && !strlen(MIOLO::_REQUEST('ocorrenciacursoid')) > 0 )
        {
            $ocorrenciadecurso = new AcpOcorrenciaCurso();
            $sql = $ocorrenciadecurso->msql();
            $sql->addEqualCondition('acpocorrenciacurso.situacao', AcpOcorrenciaCurso::SITUACAO_ATIVO);
            $sql->addNotEqualCondition('curso.situacao', AcpCurso::SITUACAO_INATIVO);
            $sql->addEqualCondition('curso.gratuito', DB_FALSE);
            
            $flds[] = $fldocorrenciadecurso = new MSelection('ocorrenciacursoid', null, _M('Ocorrência de curso'), $ocorrenciadecurso->findList($sql));
            $fldocorrenciadecurso->setAutoPostBack(true);

            $fields[] = $pop = new MPopup('popX', $flds, _M('Selecione a ocorrência de curso'));
            $pop->setShowCloseButton(false);
            $pop->addBoxStyle('left', '25%');
            $pop->addBoxStyle('top', '20%');
        }
        else
        {
            $precocursoid = MIOLO::_REQUEST('precocursoid');
            $precocurso = new PrcPrecoCurso($precocursoid);
            $ocorrenciadecursoid = SAGU::NVL(MIOLO::_REQUEST('ocorrenciacursoid'), $precocurso->ocorrenciacursoid);
            
            $ocorrenciadecurso = new AcpOcorrenciaCurso($ocorrenciadecursoid);
            
            //Validade do preço
            $fields[] = new MCalendarField('datainicial', null, _M('Data inicial'));
            $validators[] = new MRequiredValidator('datainicial', _M('Data inicial'));
            
            $fields[] = new MCalendarField('datafinal', null, _M('Data final'));

            //Valor
            if ( $ocorrenciadecurso->curso->perfilcurso->permiteinscricaoporgrupo == DB_FALSE )
            {
                $fields[] = new MFloatField('valoravista', null, _M('Valor à vista'));
                $validators[] = new MRequiredValidator('valoravista', _M('Valor à vista'));
                
                $fields[] = new MFloatField('valoraprazo', null, _M('Valor total a prazo'));
                $validators[] = new MRequiredValidator('valoraprazo', _M('Valor total a prazo'));
            }
            else
            {
                $precocurso = new PrcPrecoCurso(MIOLO::_REQUEST('precocursoid'));
                $fields = array_merge($fields, $this->obterPrecosPorGrupo(SAGU::NVL($ocorrenciadecursoid, $precocurso->ocorrenciacursoid)));
            }
            
            $fields[] = new MSelection('gerarmensalidadeinicioaulas', strlen($precocurso->gerarmensalidadeinicioaulas) > 0 ? $precocurso->gerarmensalidadeinicioaulas : DB_FALSE, _M('Gerar mensalidades a partir do início das aulas?'), SAGU::listYesNo(), false, _M(
                    'Se selecionada a opção \'Sim\', ao confirmar a inscrição o sistema irá gerar a primeira parcela no mês em que se iniciam as aulas.
                     <br>Obs.: Caso esta data não esteja informada na oferta da turma, o sistema irá considerar como início da mensalidade a data da confirmação da inscrição.'));
            $validators[] = new MRequiredValidator('gerarmensalidadeinicioaulas');
            
            //Abrangência do preço        
            $fields[] = new MTextLabel('',_M('Abrangência do preço:'));
            $fields[] = $ocorrencia = new sEscolha('ocorrenciacursoid', null, _M('Ocorrência de curso'), new AcpOcorrenciaCursoLookup());
            $ocorrencia->setReadOnly(true);
            $fields[] = new sEscolha('ofertacursoid', null, _M('Oferta de curso'), new AcpOfertaCurso());

            $ofertaturma = new sEscolha('ofertaturmaid', null, _M('Oferta de turma'), new AcpOfertaTurma());
            $fields[] = $ofertaturma;

            //Vencimento
            $fields[] = new MTextLabel('',_M('Dias para vencimento:'));
            $fields[] = new MIntegerField('diasvencimentoentrada', null, _M('Número de dias para vencimento da 1ª parcela'));

            //Dados financeiros
            $fields[] = new MTextLabel('',_M('Dados financeiros:'));
            $fields[] = new sEscolha('bankaccountid', null, _M('Conta bancária'), new FinBankAccount());
            $fields[] = new sEscolha('operationid', null, _M('Operação'), new FinOperation());
            $fields[] = new sEscolha('policyid', null, _M('Política'), new FinPolicy());
            $fields[] = new sEscolha('incomesourceid', null, _M('Origem'), new FinIncomeSource());
            $fields[] = $habilitaConvenio = new MSelection('habilitaconvenio', $precocurso->habilitaconvenio, _M('Habilita convênio'), SAGU::listYesNo());
            $habilitaConvenio->setAllowNullValue(false);
        }
        
        parent::defineFields($fields, $validators);
    }
    
    public function beforeSave(PrcPrecoCurso $preco)
    {
        $preco->tipo = PrcPrecoCurso::TIPO_MATRICULA;
        
        return $preco;
    }
    
    public function btnSaveAndGo_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        
        $ocorrenciacursoid = MIOLO::_REQUEST('ocorrenciacursoid');
        $ocorrenciacurso = new AcpOcorrenciaCurso($ocorrenciacursoid);

        if ( $ocorrenciacurso->curso->gratuito == DB_TRUE )
        {
            $this->addError(_M('O curso selecionado esta definido como gratuito, desta forma, não é possível cadastrar um preço.'));
        }
        else
        {
            //Salvar preco curso
            $this->typeObject = $typeObj = $this->getTypeObjectPopulated();

            if ( $this->object->utilizaNovoPadrao() )
            {
                $typeObj->setValuesFromArray( $this->getRequestValues() );
            }
            
            $ok = $this->beforeSave($typeObj)->save();
            
            if ( $ok )
            {
                // Atribui chave no MIOLO::_REQUEST
                if ( $this->isInsertFunction() )
                {
                    $_REQUEST[ $this->obterChave() ] = $this->getTypeObjectPopulated()->getPkeyValue();
                }
            }

            //Salva os valores por grupo
            if( $ocorrenciacurso->curso->perfilcurso->permiteinscricaoporgrupo != DB_FALSE )
            {
                $matrizes = AcpMatrizCurricular::obterMatrizesCurricularesDoCurso($ocorrenciacurso->cursoid);

                //Percorre as matrizes do curso
                foreach( $matrizes as $cod => $matriz )
                {
                    $grupos = AcpMatrizCurricularGrupo::obterGruposDaMatrizCurricular($matriz->matrizcurricularid);
                    foreach( $grupos as $c => $grupo)
                    {
                        $precocursoid = $this->obterValorDaChave();
                        $precocursogrupo = PrcPrecoCursoGrupo::obterPrecoCursoGrupo($precocursoid, $grupo->matrizcurriculargrupoid);
                        if( !$precocursogrupo )
                        {
                            $precocursogrupo = new PrcPrecoCursoGrupo();
                        }
                        $precocursogrupo->matrizcurriculargrupoid = $grupo->matrizcurriculargrupoid;
                        $precocursogrupo->precocursoid = $precocursoid;
                        $precocursogrupo->valoravista  = MIOLO::_REQUEST('avista_'.$grupo->matrizcurriculargrupoid);
                        $precocursogrupo->valoraprazo = MIOLO::_REQUEST('aprazo_'.$grupo->matrizcurriculargrupoid);
                        $precocursogrupo->save();
                    }
                }
            }
            
            // Cria url para proximo "passo"
            $form = $this->obterFormSeguinteDoAtual();
            $url = $this->obterURLForm($form);

            $MIOLO->page->Redirect( $url );
        }
    }
    
    public function obterPrecosPorGrupo($ocorrenciacursoid)
    {
        $ocorrenciacurso = new AcpOcorrenciaCurso($ocorrenciacursoid);
        $matrizes = AcpMatrizCurricular::obterMatrizesCurricularesDoCurso($ocorrenciacurso->cursoid);
        //Percorre as matrizes do curso
        foreach( $matrizes as $cod => $matriz )
        {
            $grupos = AcpMatrizCurricularGrupo::obterGruposDaMatrizCurricular($matriz->matrizcurricularid);
    
            foreach( $grupos as $c => $grupo)
            {
                if( strlen(MIOLO::_REQUEST('precocursoid')) > 0 )
                {
                    $precocursogrupo = PrcPrecoCursoGrupo::obterPrecoCursoGrupo(MIOLO::_REQUEST('precocursoid'), $grupo->matrizcurriculargrupoid);
                }
                
                $labelAvista = new MLabel(_M('Valor a vista:'));
                $avista = new MFloatField('avista_'.$grupo->matrizcurriculargrupoid, $precocursogrupo->valoravista);
                $avista->addAttribute('onChange', Sform::getAjaxAction('calculaTotalGrupo', 'divValorTotal', false, array('ocorrenciacursoid' => $ocorrenciacursoid)));
                $labelAprazo = new MLabel(_M('Valor a prazo:'));
                $aprazo = new MFloatField('aprazo_'.$grupo->matrizcurriculargrupoid, $precocursogrupo->valoraprazo);
                $aprazo->addAttribute('onChange', Sform::getAjaxAction('calculaTotalGrupo', 'divValorTotal', false, array('ocorrenciacursoid' => $ocorrenciacursoid)));
                $fields[] = new MTextLabel('', $grupo->descricao.': ');
                $fields[] = new MSpacer();
                $fields[] = new MHContainer('ctn_'.$c, array($labelAvista, $avista, $labelAprazo, $aprazo));
                $fields[] = new MSpacer();
            }
        }
        
        //Adiciona os valores totais dos grupos
        $fields[] = new MSpacer();
        $fields[] = new MSpacer();
        $fields[] = new MTextLabel('', 'Valores totais dos grupos: ');
        $fields[] = new MSpacer();
        $fields = array_merge($fields, $this->calculaTotalGrupo());
        
        return array(new MBaseGroup('bsgValores', _M('Valores dos grupos'), $fields));
    }
    
    /**
     * Calcula o valor total dos grupos sempre que um valor for alterado
     * @param type $args
     */
    public function calculaTotalGrupo($args)
    {
        $precocursoid = MIOLO::_REQUEST('precocursoid');
        $precocurso = new PrcPrecoCurso($precocursoid);
        
        $ocorrenciacurso = new AcpOcorrenciaCurso($args->ocorrenciacursoid);
        $matrizes = AcpMatrizCurricular::obterMatrizesCurricularesDoCurso($ocorrenciacurso->cursoid);
        
        //Percorre as matrizes do curso
        foreach( $matrizes as $cod => $matriz )
        {
            $grupos = AcpMatrizCurricularGrupo::obterGruposDaMatrizCurricular($matriz->matrizcurricularid);
    
            //Percorre os grupos e calcula os valores totais
            $totalavista = '0';
            $totalaprazo = '0';
            foreach( $grupos as $c => $grupo)
            {
                $idavista = 'avista_'.$grupo->matrizcurriculargrupoid;
                $totalavista = SAGU::calcNumber($totalavista.'+'.SAGU::NVL($args->$idavista, '0'));
                $idaprazo = 'aprazo_'.$grupo->matrizcurriculargrupoid;
                $totalaprazo = SAGU::calcNumber($totalaprazo.'+'.SAGU::NVL($args->$idaprazo, '0'));
            }
        }
        
        //Adiciona valores totais das disciplinas
        $labelTotalAVista = new MLabel(_M('Total a vista:'));
        $totalAVista = new MFloatField('valoravista', SAGU::NVL($totalavista, $precocurso->valoravista));
        $labelTotalAPrazo = new MLabel(_M('Total a prazo:'));
        $totalAPrazo = new MFloatField('valoraprazo',  SAGU::NVL($totalaprazo, $precocurso->valoraprazo));
        $fields[] = new MDiv('divValorTotal', array(new MHContainer('ctn_'.$c, array($labelTotalAVista, $totalAVista, $labelTotalAPrazo, $totalAPrazo))));
        
        return $fields;
    }
}
?>
