<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário do módulo pedagógico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * @author Joao Francisco Padilha Souza [joao@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Joao Francisco Padilha Souza
 *
 * @since
 * Class Created on 19/03/2015
 *
 **/
$MIOLO->uses('ui/controls/msubdetailvalidators.class');
$MIOLO->uses('/ui/controls/msubdetail.class');

class FrmMatriculasRetroativasFase3 extends SStepByStepForm
{
    public $grid;
    private $business;
    private $busObject;
    
    /**
     * Class constructor
     **/
    public function __construct($steps)
    {
        parent::__construct(_M('Matrículas retroativas'), $steps, __CLASS__, null, array('matriculasretroativasid'));
//        parent::__construct(_M('Lançamento de matrículas retroativas'), $steps, __CLASS__,new AcpMatriculasRetroativas(), array('matriculasretroativasid') );

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);        
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event    = MIOLO::_REQUEST('event');
        
        $session = $MIOLO->GetSession();
        $infoGrd = $session->getValue('matRet_infoGrd');
        $selectedsData = $session->getValue('matRetroativas_selectedsData');

        $alldata = $this->getStepData();
        $componentesSelecionados = $session->getValue('componenteSelecionado');

        //Verificar professores do curso
        $inscricaoid = $alldata->inscricaoid;
        $inscricao = new AcpInscricao($inscricaoid);
        $ofertacursoid = SAGU::NVL($inscricao->ofertacursoid, MIOLO::_REQUEST('ofertacursoid'));

        $ofertaCurso = new AcpOfertaCurso($ofertacursoid);
        $cursoId = $ofertaCurso->ocorrenciacurso->cursoid;
        
        $type = new BasProfessor();
        if ( AcpCursoDocente::possuiProfessoresNoCurso($cursoId) )
        {
            $type = new AcpCursoDocente();
            $type->cursoId = $cursoId;
        }

        //Tela
         //se for primeiro acesso limpar dados da subdetail
        if( $this->isFirstAccess())
        {
            MSubDetail::clearData('sbProf');
        }
        $flds [] = new MSelection('componente', null, _M('Componente curricular'), $this->obterOptions());
        $flds [] = new sEscolha('professor', null, _M('Professor'), $type);
        //descrição não apagava apos adicionar professor
        $flds [] = new SHiddenField('professorDescription',null); 

        $stdValidators = array();
        $stdValidators[] = new MRequiredValidator('componente', null, 1,'O campo componente curricular é requerido.');
        $stdValidators[] = new MRequiredValidator('professorDescription', null,1,'O campo professor é requerido.');
        
        $cols[] = new MGridColumn(_M('Componente Curricular', $module), 'left', true, '', true, 'componente', null, $this->obterOptions());
        $cols[] = new MGridColumn(_M('Professor', $module), 'left', true, '', true, 'professorDescription');
        
        $fields[] = $subProf = new MSubDetail('sbProf', _M('Professores', $module), $cols, $flds, TRUE);        
        
        $subProf->setValidators($stdValidators);
        
        $fields[] = new MSpacer();
        $this->setFields($fields);
        $this->SetValidators($validators);
        
        //obter somente os códigos dos componentes selecionados e setar na sessao
        foreach ( $selectedsData as $key => $value )
        {
            $componentSelected[$key] = $value['acpmatriculasretroativas.componentecurricularmatrizid'];
        }
        $session->setValue('componentSelected', $componentSelected);

    }
    
//     public function previousStepButton_click($args)
//    {
//        $MIOLO = MIOLO::getInstance();
//        $module = MIOLO::getCurrentModule();
//        $action = MIOLO::getCurrentAction();
//        $function = MIOLO::_REQUEST('function');
//        $event    = MIOLO::_REQUEST('event');
//        
//        $session = $MIOLO->GetSession();        
//        
//        $alldata = $this->getStepData();
//        $selectedsData = $session->getValue('componentesSelecionados');
//        
//        parent::previousStepButton_click($args);
//    }
    /**
     * 
     * @retornar a lista para o MSelection
     * 
     */    
    public function obterOptions()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $session = $MIOLO->GetSession();
        
        //Carregar os componentes selecionadas na grid da fase anterior
        $componentesSelecionados = $session->getValue('componenteSelecionado');

        return $componentesSelecionados;
    }
    
    public function finalizeButton_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event    = MIOLO::_REQUEST('event');
        
        $this->tbBtnSave_click($sender);
    }
    /*
     * Evento chamado na ação do botão carregar disciplinas
     */
    public function btnCarregarDisciplinas_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $session = $MIOLO->GetSession();
        $alldata = $this->getStepData();
     
        $inscricaoid = $alldata->inscricaoid;
        $ofertaturmaid = $alldata->ofertaturmaid;
        $inscricao = new AcpInscricao($inscricaoid);
        $ofertacursoid = SAGU::NVL($inscricao->ofertacursoid, MIOLO::_REQUEST('ofertacursoid'));

        if( strlen($ofertacursoid) > 0 )
        {
            $fields[] = new MText('', _M('Selecione as disciplinas desejadas e informe os dados relacionados.'));

            $data = AcpMatriculasRetroativas::obterDisciplinasDaMatriz($ofertacursoid, $inscricaoid, $ofertaturmaid);
        
            $this->grid = $MIOLO->getUI()->getGrid($module, 'GrdMatriculasRetroativas');
            $this->grid->setData($data);
            $fields[] = $this->grid;

            $fields[] = new MButton('tbBtnSave', _M('Salvar matrícula'));

            $fields[] = new MDiv('divValidacao');
            
            $this->addFields($fields);
        }
    }
    
    
    /**
     * Event triggered when user chooses Save from the toolbar
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event    = MIOLO::_REQUEST('event');
        
        $alldata = $this->getStepData();
        $session = $MIOLO->GetSession();        
        $dadosSd = MSubDetail::getdata('sbProf');        
        $dataStep2Grid = $session->getValue('matRetroativas_dataStep2Grid');               

        try
        {
            SDatabase::beginTransaction();

            $inscricaoid = $alldata->inscricaoid;
            $inscricao = new AcpInscricao($inscricaoid);
            $ofertacursoid = $alldata->ofertacursoid;
            $personid = $alldata->personid;

          //Carregar as disciplinas selecionadas na grid da fase anterior
        $selectedsData = $session->getValue('matRetroativas_selectedsData');
        foreach($selectedsData as $codSelect => $selectedInfo)
        {
            $selecteds[] = $codSelect;
        }

            foreach($selectedsData as $codSelect => $selectedInfo)
            {
                $selecteds[] = $codSelect;
            }
            
            if( strlen($inscricaoid) > 0 )
            {             
                $inscricao = new AcpInscricao($inscricaoid);
                $ofertacursoid = $inscricao->ofertacursoid;
            }
            else
            {
                //Cria inscrição
                $inscricao = new AcpInscricao();
                $inscricao->personid = $personid;
                $inscricao->ofertacursoid = $ofertacursoid;
                $inscricao->origem = AcpInscricao::ORIGEM_ADMINISTRATIVA;
                $inscricao->situacao = AcpInscricao::SITUACAO_INSCRITO;
                $inscricao->datasituacao = date(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP'));
                $inscricao->save();
                $inscricaoid = $inscricao->inscricaoid;
            }

            //Obtem dados
            $ofertaturmaid = $alldata->ofertaturmaid;
            if ( $ofertaturmaid == NULL )
            {
                $ofertaturmaid = $alldata->nova_ofertaturmaid;
            }

            $codigo_turma = $alldata->codigo_turma;
            $nometurma = $alldata->nome_turma;
            $datainicialoferta = $alldata->datainicialoferta;
            $datafinaloferta = $alldata->datafinaloferta;
            $gradehorarioid = $alldata->gradehorarioid;
            
            //Se tiver turma
            if(strlen($ofertaturmaid) > 0 )
            {
                $ofertaturma = new AcpOfertaTurma($ofertaturmaid);
            }
            else
            {
                //Se nao criar a turma
                $ofertaturma = new AcpOfertaTurma();
                $ofertaturma->codigo = $codigo_turma;
                $ofertaturma->descricao = $nometurma;
                $ofertaturma->datainicialoferta = $datainicialoferta;
                $ofertaturma->datafinaloferta = $datafinaloferta;
                $ofertaturma->gradehorarioid = $gradehorarioid;
                $ofertaturma->situacao = AcpOfertaTurma::SITUACAO_FECHADA;
                $ofertaturma->habilitada = DB_TRUE;
                $ofertaturma->ofertacursoid = $inscricao->ofertacursoid;
                $ofertaturma->dataencerramento = SAGU::dateToDb(SAGU::getDateNow());
                $ofertaturma->save();
                $ofertaturmaid = $ofertaturma->ofertaturmaid;
            }
            $searchInscricaoTurma = AcpInscricaoTurmaGrupo::obterInscricaoTurmaGrupo($inscricaoid, $ofertaturmaid);
            $inscricaoturmagrupoid = $searchInscricaoTurma[0]->inscricaoturmagrupoid;
            if( count($searchInscricaoTurma) == 0 )
            {
                //Insere inscrição turma grupo
                $inscricaoturmagrupo = new AcpInscricaoTurmaGrupo();
                $inscricaoturmagrupo->inscricaoid = $inscricaoid;
                $inscricaoturmagrupo->ofertaturmaid = $ofertaturmaid;
                $inscricaoturmagrupo->save();
                $inscricaoturmagrupoid = $inscricaoturmagrupo->inscricaoturmagrupoid;
            }
            $datasearch = AcpMatriculasRetroativas::obterDisciplinasDaMatriz($ofertacursoid, $inscricaoid, $ofertaturmaid);
            
            $componentesSelecionados = $session->getValue('componentSelected');                        
                //Percorre disciplina e salva matriculas das selecionadas
                foreach($datasearch as $cod=>$data)
                {
                    //Se a disciplina foi selecionada
                    if( in_array($cod, $selecteds) )
                    {
                        //Cria array com os professores adicionados ao componente
                            if ( count($dadosSd)> 0 )
                            {
                                $dadosSd = MSubDetail::getdata('sbProf');
                                foreach ( $dadosSd as $item)
                                {
                                    $professores[] = $item->professor;                                        
                                }
                            }
                        
                        $infoGrd = $session->getValue('matRet_infoGrd['.$cod.']');                        
                        $codigo_disciplina = $data['acpmatriculasretroativas.codigo'];
                        $componentecurricularmatrizid = $data['acpmatriculasretroativas.componentecurricularmatrizid'];
                        $notafinal = $infoGrd['notafinal']; 
                        $conceitofinal = $infoGrd['conceitofinal']; 
                        $parecerfinal = $infoGrd['parecerfinal']; 
                        $frequencia = $infoGrd['frequencia']; 
                        $estadomatriculaid = $infoGrd['estadomatriculaid'];

                        // verificacao de pessoa (estava ocorrendo bug)
                        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                        $busStudent = new BusinessBasicBusPhysicalPersonStudent();

                        $dataPerson = $busPhysicalPerson->getPhysicalPerson($inscricao->personid);
                        $busStudent->insertOrUpdatePhysicalPersonStudent($dataPerson);

                        // insere matricula retroativa
                        $matricularetroativa = new AcpMatriculasRetroativas();
                        $matricularetroativa->inscricaoid = $inscricaoid;
                        $matricularetroativa->ofertaturmaid = $ofertaturmaid;
                        $matricularetroativa->componentecurricularmatrizid = $data['acpmatriculasretroativas.componentecurricularmatrizid'];
                        $matricularetroativa->inscricaoturmagrupoid = $inscricaoturmagrupoid;
                        $matricularetroativa->notafinal = $notafinal;
                        $matricularetroativa->conceitofinal = $conceitofinal;
                        $matricularetroativa->frequencia = $frequencia;
                        $matricularetroativa->parecerfinal = $parecerfinal;
                        $matricularetroativa->estadodematriculaid = $estadomatriculaid;

                        $matricularetroativa->professores = $professores;
                        
                        $matricularetroativa->gerarMatriculaRetroativa();
                    }
                }
                SDatabase::commit();
                $this->messageSuccess(_M('Matrículas salvas com sucesso!'), $MIOLO->getCurrentURL());      
                $session->setValue('componentesSelecionados', null);
                        //limpar dados da sessao
                $session->setValue('matRetroativas_selectedsData', NULL);
                $session->setValue('componentesSelecionados', NULL);
                $session->setValue('matRet_infoGrd', null);
                $session->setValue('componenteSelecionado', null);
                $session->setValue('infGrd', NULL);
                $session->setValue('componentSelected', null);
        }
        catch (Exception $e)
        {
            SDatabase::rollback();
            $this->messageError(_M('Não foi possível salvar a matricula: @1', $module, $e->getMessage()), $MIOLO->getCurrentURL());
        }
        if ( !$this->HasErrors() )
        {
            parent::tbBtnSave_click($sender);
        }
    }
    
    /**
     * Valida o conteúdo do campo frequencia
     * @param type $args
     */
    public function validaFrequencia($args)
    {
        $module = MIOLO::getCurrentModule();

        $cod = $args->cod;
        $codigo = $args->codigo_disciplina;
        $componentecurricularmatrizid = $args->componentecurricularmatrizid;
        $id = 'frequencia_'.$componentecurricularmatrizid;
        $valor = $args->$id;
        
        if( strlen($valor) > 0 )
        {
            if( $valor > 100 || $valor < 0 || !is_numeric(trim($valor)) )
            {
                $this->page->addAJAXJsCode("document.getElementById('$id').value = '';");
                
                $this->addError(_M('A frequência para o componente @1 deve estar entre 0 e 100.', $module, $codigo), '');
            }
            //Seleciona registro na grid
            $this->page->addAJAXJsCode("var check = this.document.getElementById('selectGrdMatriculasRetroativas[$cod]'); if( check.checked == false ) { check.click(); }");
        }
    }
    
    /**
     * Valida o conteúdo do campo nota
     * @param type $args
     */
    public function validaNota($args)
    {
        $module = MIOLO::getCurrentModule();
        $cod = $args->cod;
        $codigo = $args->codigo_disciplina;
        $componentecurricularmatrizid = $args->componentecurricularmatrizid;
        $id = 'notafinal_'.$componentecurricularmatrizid;
        $valor = $args->$id;
        
        $componenteDeAvaliacaoNotaId = $args->componenteDeAvaliacaoNotaId;
        $componenteDeAvaliacaoNota = new AcpComponenteDeAvaliacaoNota($componenteDeAvaliacaoNotaId);
        
        $valorMaximo = $componenteDeAvaliacaoNota->valorMaximo;
        $valorMinimo = $componenteDeAvaliacaoNota->valorMinimo;
        
        if( strlen($valor) > 0 )
        {
            if( $valor > $valorMaximo || $valor < $valorMinimo || !is_numeric(trim($valor)) )
            {
                $this->page->addAJAXJsCode("document.getElementById('$id').value = '';");
                $this->addError(_M('A nota para o componente @1 deve estar entre @2 e @3.', $module, $codigo, $valorMinimo, $valorMaximo), '');
            }
            
            //Seleciona registro na grid
            $this->page->addAJAXJsCode("var check = this.document.getElementById('selectGrdMatriculasRetroativas[$cod]'); if( check.checked == false ) { check.click(); }");
        }
        
    }
}
?>
