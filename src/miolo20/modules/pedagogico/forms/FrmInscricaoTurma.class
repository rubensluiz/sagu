<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Curso
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 13/11/2013
 *
 * */
ini_set("memory_limit", -1);
ini_set('max_execution_time', 3000);
class FrmInscricaoTurma extends FrmInscricaoPai {

    public $matrizcurriculargrupoid;

    /**
     * @var AcpOfertaCurso
     */
    public $ofertaCurso;

    public function __construct()
    {
        parent::__construct(new AcpInscricao(), array('inscricaoid'), null, _M('Turma'));
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $ofertaCursoId = MIOLO::_REQUEST('ofertacursoid');
        $turmas = $this->obterTurmas($ofertaCursoId);

        $ofertacurso = $this->ofertaCurso = new AcpOfertaCurso($ofertaCursoId);
        
        if ($ofertacurso->ocorrenciacurso->curso->perfilcurso->permiteinscricaoporgrupo == DB_FALSE)
        {
            $fields[] = $selection = new MSelection('ofertaturmaid', null, _M('Turma', $module), $turmas);
            //$selection->setAutoSubmit(true);
            //$selection->setAllowNullValue(false);
            //$fields[] = new MDiv('horarios', $this->obterHorarios());
        }
        else
        {
            $fields[] = new MDiv('grupos', $this->obterGrupos($ofertaCursoId));
        }

        parent::defineFields($fields, $validators);
    }

    /**
     * Obtém a lista de turmas da oferta de curso selecionada
     */
    public function obterTurmas($ofertaCursoId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $turmas = $this->obterTurmasDaOfertaDeCurso($ofertaCursoId);
        if (count($turmas) > 0)
        {
            foreach ($turmas as $cod => $turma)
            {
                if ($turma->habilitada == DB_TRUE)
                {
                    $return[$turma->ofertaturmaid] = $turma->codigo . ' - ' . $turma->descricao;
                }
            }
        }
        else
        {
            $MIOLO->error(_M('Não existe turma vigente para o curso selecionado. Verifique o processo de oferta de curso.'), $MIOLO->GetActionURL($module, 'main:process:inscricao', '', array('function' => 'insert')));
        }

        return $return;
    }

    public function obterTurmasDaOfertaDeCurso($ofertaCursoId)
    {
        return AcpOfertaTurma::retornaTurmasDaOfertaDeCurso($ofertaCursoId, false);
    }

    /**
     * Obtém os grupos com as turmas para optar na inscrição
     */
    public function obterGrupos($ofertaCursoId)
    {
        $funcion = MIOLO::_REQUEST('function');

        if (strlen(MIOLO::_REQUEST('turmas')) > 0)
        {
            $turmas = explode('|', MIOLO::_REQUEST('turmas'));
            foreach ($turmas as $cod => $id)
            {
                $this->page->AddJsCode("document.getElementById('$id').checked = true");
            }
        }
        else
        {
            if ($funcion == SForm::FUNCTION_UPDATE)
            {
                $inscricaoid = MIOLO::_REQUEST('inscricaoid');

                $inscricaoturmagruposearch = AcpInscricaoTurmaGrupo::obterInscricaoTurmaGrupo($inscricaoid);
                if (count($inscricaoturmagruposearch) > 0)
                {
                    foreach ($inscricaoturmagruposearch as $codturmagrupo => $inscricaoturmagrupo)
                    {
                        $id = $inscricaoturmagrupo->matrizcurriculargrupoid . '_' . $inscricaoturmagrupo->ofertaturmaid;
                        $this->page->AddJsCode("document.getElementById('" . $id . "').checked = true;");
                    }
                }
            }
        }

        $ofertacurso = new AcpOfertaCurso($ofertaCursoId);
        $searchmatrizcurricular = AcpMatrizCurricular::obterMatrizesCurricularesDoCurso($ofertacurso->ocorrenciacurso->cursoid);
        foreach ($searchmatrizcurricular as $cod => $matrizcurricular)
        {
            $gruposMatriz = AcpMatrizCurricularGrupo::obterGruposDaMatrizCurricular($matrizcurricular->matrizcurricularid);
            foreach ($gruposMatriz as $codgrupo => $matrizcurriculargrupo)
            {
                $optsturma = array();
                $ofertaturma = AcpOfertaTurma::listarTurmasDoGrupo($matrizcurriculargrupo->matrizcurriculargrupoid);
                foreach ($ofertaturma as $codturma => $turma)
                {
                    //Cria descrição da turma
                    $optsturma[] = $radio = new MRadioButton($matrizcurriculargrupo->matrizcurriculargrupoid, $turma['ofertaturmaid'], null, false, $turma['descricao'] . ' - ' . $turma['gradehorario']);
                    $radio->id = $matrizcurriculargrupo->matrizcurriculargrupoid . '_' . $turma['ofertaturmaid'];
                }

                //Salva grupos obtidos
                $this->matrizcurriculargrupoid[] = $matrizcurriculargrupo->matrizcurriculargrupoid;

                //Cria grupo com opções das turmas
                $turmas = new MVContainer($matrizcurriculargrupo->matrizcurriculargrupoid, $optsturma);

                //Botão limpar
                $btnLimpar = new MButton('btnLimpar', _M('Nenhum'), "document.getElementsByName('" . $matrizcurriculargrupo->matrizcurriculargrupoid . "')[0].checked = true; document.getElementsByName('" . $matrizcurriculargrupo->matrizcurriculargrupoid . "')[0].checked = false;");
                $grupos[] = new MBaseGroup('group_' . $codgrupo, $matrizcurriculargrupo->descricao, array($turmas, $btnLimpar), 'vertical');
            }
        }

        $fields[] = new MHContainer('ctnGrupos', $grupos);
        return $fields;
    }

    /**
     * Obtém a lista dos horários da turma selecionada
     */
    public function obterHorarios()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $ofertaCursoId = MIOLO::_REQUEST('ofertaCursoId');
        $turmas = $this->obterTurmas($ofertaCursoId);
        $ofertaturmaid = current(array_keys($turmas));
        $ofertaturmaid = $this->getFormValue('ofertaturmaid', $ofertaturmaid);

        $filters = new stdClass();
        $filters->ofertaTurmaId = $ofertaturmaid;

        $ofertaComponentes = AcpOfertaComponenteCurricular::buscarHorarioDasDisciplinas($filters);

        if (count($ofertaComponentes) > 0)
        {
            $grid = $MIOLO->getUI()->getGrid($module, 'GrdInscricaoHorarios');
            $grid instanceof SGrid;
            $grid->setPageLength(999999999);
            $grid->setData($ofertaComponentes);
            $grid->disablePagination();
            $grid->disableColumnSorting();

            $flds[] = $div = new MDiv('divGrd' . $cod, $grid);
            $div->addBoxStyle('width', '100%');

            if (count($flds) > 0)
            {
                $fields[] = new MSpacer();
                $fields[] = new MBaseGroup('bsgHorarios', _M('Horário das disciplinas'), $flds);
            }
        }

        return $fields;
    }

    public function btnSaveAndGo_click($sender = null)
    {
        $this->validaDados();
    }

    public function btnSaveAndFinish_click($sender = null)
    {
        if ($this->validaDados())
        {
            parent::btnSaveAndFinish_click($sender);
        }
    }

    /**
     * Define origem e situação da inscrição como interface administrativa
     * @return stdClass
     */
    public function beforeSave(AcpInscricao $inscricao)
    {
        if (is_null($inscricao->situaca) && is_null($inscricao->situacao) && is_null($inscricao->datasituacao))
        {
            if (in_array(MIOLO::_REQUEST('action'), array('main:process:inscricaoturmaexterna', 'main:process:inscricaopagamentoexterna', 'main:process:inscricaoexterna', 'main:process:termodeinscricao')))
            {
                $inscricao->origem = AcpInscricao::ORIGEM_SITE;
            }
            else
            {
                $inscricao->origem = AcpInscricao::ORIGEM_ADMINISTRATIVA;
            }
            $inscricao->situacao = AcpInscricao::SITUACAO_PENDENTE;
            $inscricao->datasituacao = SAGU::getDateNow(SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP'));
        }
        
        // Criado lógica para excluir registro da inscricaoturmagrupo para não duplicar em caso de atualização
        $ofertaCursoId = MIOLO::_REQUEST('ofertacursoid');
        $ofertacurso = new AcpOfertaCurso($ofertaCursoId);
        
        if ( ($ofertacurso->ocorrenciacurso->curso->perfilcurso->permiteinscricaoporgrupo == DB_FALSE) && (MIOLO::_REQUEST('function') == SForm::FUNCTION_UPDATE) && ($inscricao->situacao != AcpInscricao::SITUACAO_INSCRITO) )
        {
            $inscricaoTurma = AcpInscricaoTurmaGrupo::obterInscricaoTurmaGrupo($inscricao->inscricaoid);
            
            foreach ( $inscricaoTurma as $inscricaoTurmaGrupo )
            {
                $turmaGrupo = new AcpInscricaoTurmaGrupo($inscricaoTurmaGrupo->inscricaoturmagrupoid);
                $turmaGrupo->delete();
            }
        }

        return $inscricao;
    }

    public function afterSave()
    {
        $MIOLO = MIOLO::getInstance();
        $function = MIOLO::_REQUEST('function');

        $selected = false;
        foreach ($this->matrizcurriculargrupoid as $cod => $matrizcurriculargrupoid)
        {
            $ofertaturmaid = MIOLO::_REQUEST($matrizcurriculargrupoid);
            if (strlen($ofertaturmaid) > 0)
            {
                $selected = true;
            }
        }
        if (!$selected)
        {
            $this->addAlert(_M('Selecione ao menos um grupo'));
        }


        $inscricaoid = $this->getTypeObjectPopulated()->getPkeyValue();

        // Rotina emergencial para corrigir caso especifico
        if (!$this->matrizcurriculargrupoid)
        {
            $this->buscarMatrizCurricularGrupos();
        }

        $ofertaCursoId = MIOLO::_REQUEST('ofertacursoid');
        $ofertacurso = new AcpOfertaCurso($ofertaCursoId);
        
        //Salva as informações da inscrição turma grupo
        if( $ofertacurso->ocorrenciacurso->curso->perfilcurso->permiteinscricaoporgrupo == DB_TRUE ) 
        {
            //Salva as informações da inscrição turma grupo
            foreach ($this->matrizcurriculargrupoid as $cod => $matrizcurriculargrupoid)
            {
                $ofertaturmaid = MIOLO::_REQUEST($matrizcurriculargrupoid);

                if (strlen($ofertaturmaid) == 0)
                {
                    $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
                }

                $searchofertaturma = AcpOfertaTurma::listarTurmasDoGrupo($matrizcurriculargrupoid);
                foreach ($searchofertaturma as $codturma => $turma)
                {
                    if ($ofertaturmaid == $turma['ofertaturmaid'])
                    {
                        $inscricaoturmagruposearch = AcpInscricaoTurmaGrupo::obterInscricaoTurmaGrupo($inscricaoid, null, $matrizcurriculargrupoid);

                        if (count($inscricaoturmagruposearch) > 0)
                        {
                            $inscricaoturmagrupo = $inscricaoturmagruposearch[0];
                        }
                        else
                        {
                            $inscricaoturmagrupo = new AcpInscricaoTurmaGrupo();
                        }

                        $inscricaoturmagrupo->inscricaoid = $inscricaoid;
                        $inscricaoturmagrupo->ofertaturmaid = $ofertaturmaid;
                        $inscricaoturmagrupo->matrizcurriculargrupoid = $matrizcurriculargrupoid;
                        $inscricaoturmagrupo->salvarTurmaGrupo();
                    }
                }
            }
        }
        else
        {
            $ofertaturmaid = MIOLO::_REQUEST('ofertaturmaid');
            
            $inscricaoturmagruposearch = AcpInscricaoTurmaGrupo::obterInscricaoTurmaGrupo($inscricaoid, $ofertaturmaid);
            $inscricaoturmagrupo = $inscricaoturmagruposearch[0];
            
            if( !$inscricaoturmagrupo instanceof AcpInscricaoTurmaGrupo )
            {
                $inscricaoturmagrupo = new AcpInscricaoTurmaGrupo();
            }
            
            $inscricaoturmagrupo->inscricaoid = $inscricaoid;
            $inscricaoturmagrupo->precocondicaomatriculaid = $this->obterPrecoCondicaoId($ofertaturmaid);;
            $inscricaoturmagrupo->ofertaturmaid = $ofertaturmaid;
            $inscricaoturmagrupo->salvarTurmaGrupo();
        }

        //Envia e-mail de confirmação da inscrição
        if ($function == SForm::FUNCTION_INSERT)
        {
            $this->enviarEmail($inscricaoid, $ofertaturmaid);
        }

        $this->exibeTelaFinal($inscricaoid);
    }

    public function buscarMatrizCurricularGrupos()
    {
        $ofertacurso = $this->ofertaCurso;
        $searchmatrizcurricular = AcpMatrizCurricular::obterMatrizesCurricularesDoCurso($ofertacurso->ocorrenciacurso->cursoid);

        foreach ($searchmatrizcurricular as $cod => $matrizcurricular)
        {
            $gruposMatriz = AcpMatrizCurricularGrupo::obterGruposDaMatrizCurricular($matrizcurricular->matrizcurricularid);

            foreach ($gruposMatriz as $codgrupo => $matrizcurriculargrupo)
            {
                //Salva grupos obtidos
                $this->matrizcurriculargrupoid[] = $matrizcurriculargrupo->matrizcurriculargrupoid;
            }
        }
    }

    /**
     * Valida se o aluno ja não está inscrito na turma
     * Valida se as turmas selecionadas não ocorrem em mesmos horários
     * Caso existir um terceiro passo avança.
     * 
     * @return boolean
     */
    public function validaDados()
    {
        $MIOLO = MIOLO::getInstance();
        $data = $this->getTypesData();

        $ok = true;

        $ofertaCursoId = MIOLO::_REQUEST('ofertacursoid');
        $ofertacurso = new AcpOfertaCurso($ofertaCursoId);
        if ($ofertacurso->ocorrenciacurso->curso->perfilcurso->permiteinscricaoporgrupo == DB_FALSE)
        {
            //Verifica se o aluno já não está inscrito na turma
            //(verificar o status, caso cancelado pode se inscrever novamente)
            if (MIOLO::_REQUEST('function') != 'update' && AcpInscricao::possuiInscricaoAtiva($data->personid, $data->ofertaturmaid))
            {
                $ok = false;
                $this->addError(_M('O aluno já está inscrito na turma selecionada'));
            }
        }
        else
        {
            $argumentos = array();

            foreach ($this->matrizcurriculargrupoid as $cod => $matrizcurriculargrupoid)
            {
                $ofertaturmaid = MIOLO::_REQUEST($matrizcurriculargrupoid); //WTF?? FIXME verificar

                if (MIOLO::_REQUEST('function') != 'update' && AcpInscricao::possuiInscricaoAtiva($data->personid, $ofertaturmaid))
                {
                    $ok = false;
                    $this->addError(_M('O aluno já está inscrito na turma do módulo selecionado'));
                    break;
                }

                $ofertaturma = new AcpOfertaTurma($ofertaturmaid);

                $searchofertaturma = AcpOfertaTurma::listarTurmasDoGrupo($matrizcurriculargrupoid);
                foreach ($searchofertaturma as $codturma => $turma)
                {
                    if ($ofertaturmaid == $turma['ofertaturmaid'])
                    {
                        $argumentos[] = $matrizcurriculargrupoid . '_' . $ofertaturmaid;

                        $gradeshorario[] = $ofertaturma->gradehorarioid;
                    }
                }
            }

            if ($ok) {
                $args['turmas'] = implode('|', $argumentos);

                //Valida se nao houve conflito de horários
                /*
                $argumentos2 = $argumentos;
                $acpMatrizCurricularGrupo = new AcpMatrizCurricularGrupo();
                $sql = new MSQL();
                foreach ($argumentos as $pos => $arg) {
                    foreach ($argumentos2 as $pos2 => $arg2) {
                        $matriz = explode('_', $arg);
                        $matrizNext = explode('_', $argumentos2[$pos2 + 1]);

                        if (count($argumentos2) > 1 && $matrizNext[0] != '') {
                            $choque = AcpMatrizCurricularGrupo::validaMatrizNaInscricao($matriz[0], $matrizNext[0]);

                            if ($choque > 0) {
                                $sql->setWhere('matrizcurriculargrupoid IN ( ? , ? )', array($matriz[0], $matrizNext[0]));
                                $matrizes = $acpMatrizCurricularGrupo->findManyAsArray($sql);
                                $msg = _M("Ocorreu um choque de horários entre as turmas dos grupos @1 e @2. Por favor, selecione outra turma.", $module, $matrizes[0]['acpmatrizcurriculargrupo.descricao'], $matrizes[1]['acpmatrizcurriculargrupo.descricao']);
                                $this->addError($msg);
                                $ok = false;
                            }

                        }
                        unset($argumentos2[$pos]);
                    }
                }*/

                // Valida se pelo menos um grupo foi selecionado
                if (count($argumentos) == 0) {
                    $ok = false;
                    $this->addError(_M('Opa! Pelo menos uma turma deve ser selecionada para ser possível prosseguir com a inscrição.'));
                }
            }
        }

        // Cria url para proximo "passo"
        $form = $this->obterFormSeguinteDoAtual();

        //Se existir o terceiro passo
        if ($form)
        {
            $args['ofertacursoid'] = MIOLO::_REQUEST('ofertacursoid');
            $args['personid'] = MIOLO::_REQUEST('personid');
            $args['ofertaturmaid'] = MIOLO::_REQUEST('ofertaturmaid');
            $args['function'] = MIOLO::_REQUEST('function');

            $url = $this->obterURLForm($form, $args);

            //Só avança se nao ocorrer erros
            if (count($this->errors) == 0 && count($this->alerts) == 0)
            {
                $MIOLO->page->Redirect($url);
            }
        }

        return $ok;
    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->ofertaturmaid = $this->getRequestValue('ofertaturmaid');

        return $data;
    }

}

?>