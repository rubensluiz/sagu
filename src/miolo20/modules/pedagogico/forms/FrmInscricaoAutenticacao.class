<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Curso
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 21/11/2013
 *
 **/
class FrmInscricaoAutenticacao extends SForm
{
    public function __construct()
    {
        parent::__construct(_M('Identificação para inscrição'), null, null);
        
        $this->toolbar->disableButton('tbBtnPrint');
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnSave');
        $this->toolbar->disableButton('tbBtnSearch');
        $this->toolbar->disableButton('tbBtnClose');
        $this->toolbar->disableButton('tbBtnNew');
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $pessoa = $this->getPhysicalPersonLogged();
        $personId = $pessoa->personId;

        // Quando usuario ja estiver logado ...
        if ( strlen($personId) > 0 )
        {
            $bfields[] = new MTextLabel('lblA', $pessoa->name, _M('Nome'));
            $bfields[] = new MTextLabel('lblY', $pessoa->dateBirth, _M('Data de nascimento'));
            $bfields[] = new MTextLabel('lblX', $pessoa->personCpf, _M('CPF'));
            
            $bfields[] = new MButton('btnGo', _M('Efetuar inscrição'), $this->obterURLInscricao());
        }
        else
        {
            $pessoa = $this->obterPessoaProcurada();
            
            if ( $pessoa )
            {
                $bfields[] = new SHiddenField('dateBirth', $this->getRequestValue('dateBirth'));
                $bfields[] = new SHiddenField('cpf', $this->getRequestValue('cpf'));
                
                $bfields[] = new MTextLabel('lblA', $pessoa->name, _M('Nome'));
                $bfields[] = new MTextLabel('lblY', $pessoa->dateBirth, _M('Data de nascimento'));
                $bfields[] = new MTextLabel('lblX', $pessoa->personCpf, _M('CPF'));
                
                // Field miolo userpassword
                $mioloUserPasswdLabel = new MText('mioloUserPasswdLabel', _M('Senha',$module) . ':');
                $mioloUserPasswdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $mioloUserPasswdLabel->setClass('m-caption m-caption-required');
                $mioloUserPasswd = new MPasswordField('mioloUserPasswd', $this->getFormValue('mioloUserPasswd'), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M("Informe sua senha para prosseguir com a inscrição."));
                $mioloUserPasswd->setJsHint(_M('Informe o nome de usuário da pessoa',$module));
                $bfields[] = new MHContainer('hctMioloUserName', array($mioloUserPasswdLabel, $mioloUserPasswd));

                $validators[] = new MRequiredValidator('mioloUserPasswd', _M('Senha', $module));
                
                $bfields[] = $btn = new MButton('btnAuthenticate', _M('Autenticar'));
                
                $bfields[] = new MLink('forgottenPassword', NULL, $MIOLO->GetActionURL('admin','forgottenPassword'), _M('Esqueci minha senha',$module));
                
                $btn->label = '';
            }
            else
            {
                $bfields[] = new MSeparator();
                // Field date birth
                $dateBirthLabel = new MText('dateBirthLabel', _M('Data de nascimento',$module) . ':');
                $dateBirthLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $dateBirthLabel->setClass('m-caption m-caption-required');
                $dateBirth = new MCalendarField('dateBirth', $this->getFormValue('dateBirth',$allData->dateBirth), _M("Data de nascimento", $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
                $dateBirth->addAttribute('autocomplete', 'off');
                $validators[] = new MDateDMYValidator('dateBirth',_M('Data de nascimento',$module), 'required');
                $validators[] = new MRequiredValidator('dateBirth', _M("Data de nascimento", $module));
                $dateBirth->setJsHint(_M('Informe a data de nascimento',$module));
                $bfields[] = new MHContainer('hctDateBirth', array($dateBirthLabel, $dateBirth));

                // Field cpf
                $cpfLabel = new MText('cpfLabel', _M('CPF',$module) . ':');
                $cpfLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $cpfLabel->setClass('m-caption m-caption-required');
                $cpf = new MTextField('cpf', $this->getFormValue('cpf',$allData->cpf), NULL, SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
                $cpf->setJsHint(_M('Informe seu CPF',$module));
                $cpf->addAttribute('autocomplete', 'off');
                $validators[]  = new MCPFValidator('cpf', _M('CPF',$module), 'required');
                $hctCpf = new MHContainer('hctPerson', array($cpfLabel, $cpf));
                $hctCpf->setShowLabel(true);
                $bfields[] = $hctCpf;
                
                $bfields[] = $btn = new MButton('btnFindUser', _M('Localizar'), $action);
                $btn->label = '';
            }
        }
        
        $bfields[] = new MSeparator();
        
        parent::defineFields(array('fields' => SAGU::alignFields($bfields), 'validators' => $validators));
    }
    
    public function obterURLInscricao()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        return $MIOLO->GetActionURL('pedagogico', 'main:process:inscricaoexterna');
    }

    /**
     * Ação do botão autenticar (quando já encontrou a pessoa).
     * 
     * @param args $sender
     */
    public function btnAuthenticate_click($sender)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        if ( $this->autenticarPessoaProcurada() )
        {
            $MIOLO->page->Redirect( $this->obterURLInscricao() );
        }
        else
        {
            $this->AddError( _M('Não foi possível autenticar. Verifique se a senha digitada está correta.') );
        }
    }
            
    /**
     * Ação do botão Enviar.
     * 
     * @param args $sender
     */
    public function btnFindUser_click($sender)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        // Garante que vai ter uma data de nascimento digitada - ticket #39381
        if ( !(strlen($this->getRequestValue('dateBirth')) > 0) )
        {
            $this->addError(_M("Por favor, preencha a sua data de nascimento.", $module));
        }
        else
        {
            $pessoa = $this->obterPessoaProcurada();
        
            // Senão encontrar a pessoa, já segue para o registro de aluno
            if ( !$pessoa )
            {
                $urlRedirect = $MIOLO->GetActionURL($module, 'main:registroaluno', null, array( SForm::getReturnToKey() => SForm::createReturnToCurrentURL(), 'cpf' => $this->getRequestValue('cpf'), 'dateBirth' => $this->getRequestValue('dateBirth'), 'event' => 'showInfoMessage'));
                $MIOLO->page->Redirect($urlRedirect);
            }
        }
    }
    
    /**
     * @return basPhysicalPerson
     */
    public function obterPessoaProcurada()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
        
        $cpf = $this->getRequestValue('cpf');
        $dateBirth = $this->getRequestValue('dateBirth');
        
        if ( strlen($cpf) > 0 && strlen($dateBirth) > 0 )
        {
            return $busPhysicalPerson->procurarPeloNascimentoMaisCPF($cpf, $dateBirth);
        }
        
        return null;
    }
    
    /**
     * @return boolean
     */
    public function autenticarPessoaProcurada()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // efetua autenticacao no sistema
        $pessoa = $this->obterPessoaProcurada();
        return $MIOLO->auth->Authenticate($pessoa->mioloUserName, $this->getRequestValue('mioloUserPasswd'));
    }
}
?>
