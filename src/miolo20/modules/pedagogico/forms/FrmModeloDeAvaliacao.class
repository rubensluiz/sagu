<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 05/07/2013
 *
 **/
class FrmModeloDeAvaliacao extends FrmModeloDeAvaliacaoPai
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcpModeloDeAvaliacao(), array('modeloDeAvaliacaoId'));
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');
        
        $fields[] = new MHiddenField('modeloDeAvaliacaoId', $this->getFormValue('aplicacao', $data->aplicacao));
        $fields[] = new MTextField('descricao', NULL, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $validators[] = new MRequiredValidator('descricao', _M('Descrição'));

        $fields[] = new MSelection('aplicacao', $this->getFormValue('aplicacao', $data->aplicacao), _M('Aplicação', $module), AcpModeloDeAvaliacao::listarAplicacoes());
        $validators[] = new MRequiredValidator('aplicacao', _M('Aplicação'));
        $fields[] = new MRadioButtonGroup('ativo', _M('Situação'), array(DB_TRUE => _M('Ativo'), DB_FALSE => _M('Inativo')), SAGU::NVL($this->getFormValue('aplicacao', $data->aplicacao), DB_TRUE), null, 'horizontal');
        $fields[] = new MMultiLineField('detalhesDoResultadoFinal', $this->getFormValue('detalhesDoResultadoFinal', $data->detalhesDoResultadoFinal), _M('Detalhes do resultado final', $module), 40, 4, 40);

        $tipoDeDados = new MSelection('tipoDeDados', $this->getFormValue('tipoDeDados', $data->tipoDeDados), _M('Tipo de dados', $module), AcpModeloDeAvaliacao::listarTiposDeDados());
        $validators[] = new MRequiredValidator('tipoDeDados', _M('Tipo de dados'));

        //Se estiver atualizando não pode mudar o tipo de dados, detalhes #35426
        if ( $function == SForm::FUNCTION_UPDATE )
        {
             $tipoDeDados->setReadOnly(true);
             $tipoDeDados->setJsHint(_M("Não é possível editar os tipos de dados, cadastre um novo modelo de avaliação.", $module));
        }
        $fields[] = $tipoDeDados;
        
        $checked = false;
        if( strlen( MIOLO::_REQUEST('modeloDeAvaliacaoId') ) > 0 )
        {
            $data = new AcpModeloDeAvaliacao(MIOLO::_REQUEST('modeloDeAvaliacaoId'));
            if( $data->habilitaControleDeFrequencia == DB_TRUE )
            {
                $checked = true;
            }   
        }
        
        $fldControleDeFrequencia[] = $controleDeFrequencia = new MCheckBox('habilitaControleDeFrequencia', DB_TRUE, _M('Habilitar controle de frequência', $module), $this->getFormValue('habilitaControleDeFrequencia', $data->habilitaControleDeFrequencia));        
        $controleDeFrequencia->setChecked($checked);
        $controleDeFrequencia->addAttribute('onChange', SForm::getAjaxAction('camposControleDeFrequencia', 'divFrequencia', false));
        
        $fldControleDeFrequencia[] = new MDiv('divFrequencia', $this->camposControleDeFrequencia($data));

        $fields[] = new MBaseGroup('bsgControleDeFrequencia', _M('Controle de frequência'), $fldControleDeFrequencia, 'vertical');

        parent::defineFields($fields, $validators);
    }

    /**
     * Exibe ou nãp os campos de controle de frequência conforme checkbox habilitaControleDeFrequencia
     * @param type $args
     * @return array
     */
    public function camposControleDeFrequencia($args)
    {       
        $module = MIOLO::getCurrentModule();        
        if( $args->habilitaControleDeFrequencia == DB_TRUE )
        {  
            $permiteJustificativa = ( $args->controleDeFrequencia->permiteJustificativa == DB_TRUE ? true : false );
            $permiteRecuperacao = ( $args->controleDeFrequencia->permiteRecuperacao == DB_TRUE ? true : false );
            $permiteMeiaPresenca = ( $args->controleDeFrequencia->permiteMeiaPresenca == DB_TRUE ? true : false );
            
            $flds[] = new MCheckBox('permiteJustificativa', DB_TRUE, _M('Permite substituir falta por justificativa', $module), $permiteJustificativa);
            $flds[] = new MCheckBox('permiteMeiaPresenca', DB_TRUE, _M('Permite meia presença', $module), $permiteMeiaPresenca);
            $flds[] = new MCheckBox('permiteRecuperacao', DB_TRUE, _M('Permite recuperação', $module), $permiteRecuperacao);
            $flds[] = new MSelection('tipoDeLimite', $this->getFormValue('tipoDeLimite', $args->controleDeFrequencia->tipoDeLimite), _M('Tipo de limite', $module), array('1' => _M('Percentual (%)', $module)));
            $flds[] = new MIntegerField('limiteDeFrequencia', $this->getFormValue('limiteDeFrequencia', $args->controleDeFrequencia->limiteDeFrequencia), _M('Limite de Frequência', $module));            
            $flds = SAGU::alignFields($flds);
            $fields[] = $flds;
            
            $this->addValidator(new MRequiredValidator('tipoDeLimite', _M('Tipo de limite', $module)));
            $this->addValidator(new MRequiredValidator('limiteDeFrequencia', _M('Limite de frequência', $module)));            
        }
        
        if( strlen($args->phpFunction) > 0 )
        {
            $js = "window.mintegerfield = {
                    validate: function(input)
                    {
                        // TODO: negative numbers
                        if ( input.value.match( /[^\d]/g ) )
                        {
                            input.value = input.value.replace( /[^\d]/g, '' );
                        }
                    }
                };";
            $this->page->addAJAXJsCode($js);
        }
        
        return $fields;
    }
        
    public function beforeSave(AcpModeloDeAvaliacao $modeloDeAvaliacao) 
    {
        if( MIOLO::_REQUEST('habilitaControleDeFrequencia') == DB_TRUE )
        {
            if( strlen($modeloDeAvaliacao->modeloDeAvaliacaoId) > 0 )
            {
                $controleDeFrequencia = AcpControleDeFrequencia::obterControleDeFrequenciaDoModelo($modeloDeAvaliacao->modeloDeAvaliacaoId);
            }
            
            if( !$controleDeFrequencia )
            {
                $controleDeFrequencia = new AcpControleDeFrequencia();
            }
            
            $modeloDeAvaliacao->controleDeFrequencia = $controleDeFrequencia;
            $modeloDeAvaliacao->controleDeFrequencia->permiteJustificativa = isset($_REQUEST['permiteJustificativa']) ? DB_TRUE : DB_FALSE;
            $modeloDeAvaliacao->controleDeFrequencia->permiteRecuperacao = isset($_REQUEST['permiteRecuperacao']) ? DB_TRUE : DB_FALSE;
            $modeloDeAvaliacao->controleDeFrequencia->permiteMeiaPresenca = isset($_REQUEST['permiteMeiaPresenca']) ? DB_TRUE : DB_FALSE;
            $modeloDeAvaliacao->controleDeFrequencia->tipoDeLimite = MIOLO::_REQUEST('tipoDeLimite');
            $modeloDeAvaliacao->controleDeFrequencia->limiteDeFrequencia = MIOLO::_REQUEST('limiteDeFrequencia');            
        }
        else
        {
            $modeloDeAvaliacao->habilitaControleDeFrequencia = DB_FALSE;            
            if( strlen($modeloDeAvaliacao->modeloDeAvaliacaoId) > 0 )
            {
                $controleDeFrequencia = AcpControleDeFrequencia::obterControleDeFrequenciaDoModelo($modeloDeAvaliacao->modeloDeAvaliacaoId);
                if( $controleDeFrequencia )
                {
                    $controleDeFrequencia->delete();
                }
            }
        }
        
        return $modeloDeAvaliacao;
    }
}
?>
