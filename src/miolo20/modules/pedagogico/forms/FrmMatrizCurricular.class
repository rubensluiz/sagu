<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Curso
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 25/09/2013
 *
 **/
class FrmMatrizCurricular extends FrmCursoPai
{
    public function __construct()
    {
        parent::__construct(new AcpMatrizCurricular(), array('matrizCurricularId'));
    }
    
    public function defineFields()
    {
        $module = MIOLO::getCurrentModule();
        
        $cursoId = MIOLO::_REQUEST('cursoid');

        $fields = array();
        $validators = array();
        
        if( strlen($cursoId) > 0 )
        {
            if( count(AcpMatrizCurricular::obterMatrizesCurricularesDoCurso($cursoId)) == 0 || strlen(MIOLO::_REQUEST('matrizcurricularid')) > 0 )
            {
                $fields[] = new MTextField('descricao', NULL, _M('Descrição', $module));        
                $fields[] = new MHiddenField('series', 0);
                $fields[] = new MHiddenField('situacao', AcpMatrizCurricular::SITUACAO_ATIVO);
                $fields[] = new MCalendarField('dataInicial', NULL, _M('Data inicial', $module));        
                $fields[] = new MCalendarField('dataFinal', NULL, _M('Data final', $module));

                $validators[] = new MRequiredValidator('descricao', _M('Descrição', $module));
                $validators[] = new MRequiredValidator('dataInicial', _M('Data inicial', $module));
//                $validators[] = new MRequiredValidator('dataFinal', _M('Data final', $module));
            }
        }
        
        parent::defineFields($fields, $validators);
    }
    
    public function beforeSave($typeObject)
    {
        $typeObject->datafinal = SAGU::NVL($this->getRequestValue('dataFinal'), SType::NULL_VALUE);
        
        return $typeObject;
    }
    
    public function obterBotoesContextuais()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        if ( $this->isUpdateFunction() )
        {
            $label = _M('Atualizar registro', $module);
        }
        else
        {
            $label = _M('Adicionar registro', $module);
        }
        
        $cursoId = MIOLO::_REQUEST('cursoid');

        if( strlen($cursoId) > 0 )
        {
            if( count(AcpMatrizCurricular::obterMatrizesCurricularesDoCurso($cursoId)) == 0 || strlen(MIOLO::_REQUEST('matrizcurricularid')) > 0 )
            {
                $fields[] = new MButton('btnSalvarRegistroContextual', $label);
                
                if ( $this->isUpdateFunction() )
                {
                    $fields[] = $btn = new MButton('btnCancelarAtualizacaoRegistro', _M('Cancelar', $module));
                }
            }
        }
        
        return new MDiv('divBotoesContextuais', $fields);
    }
    
    public function btnSalvarRegistroContextual_click($sender = null)
    {
        $ok = true;
        
        $ofertas = AcpCurso::obterOfertasDeCursoId(MIOLO::_REQUEST('cursoid'));
        $turmas = AcpOfertaTurma::obterTurmasDaOfertaDeCurso($ofertas);
        
        //Se possui alguma turma com data de encerramento, nao pode deixar a data do curso ser menor
        foreach($turmas as $turma)
        {
            if ( strlen($turma->dataencerramento) > 0 )
            {
                if ( SAGU::compareTimestamp(SAGU::dateToUser(MIOLO::_REQUEST('dataFinal')), '<', $turma->dataencerramento , SAGU::getParameter('BASIC', 'MASK_DATE')) )
                {
                    $ok = false;
                    $this->addError(_M('Não é possível alterar a data final da matriz para @1, pois a turma @2 foi encerrada em @3.', null, SAGU::dateToUser(MIOLO::_REQUEST('dataFinal')), $turma->descricao, $turma->dataencerramento));
                }
            }
        }
        
        $ok ? parent::btnSalvarRegistroContextual_click($sender) : null;
    }
}
?>
