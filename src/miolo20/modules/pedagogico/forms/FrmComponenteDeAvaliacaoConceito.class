<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class Created on 05/07/2013
 *
 **/
$MIOLO->uses('forms/FrmComponenteDeAvaliacao.class', 'pedagogico');
class FrmComponenteDeAvaliacaoConceito extends FrmComponenteDeAvaliacao
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcpComponenteDeAvaliacaoConceito());
    }
    
    public function defineFields() 
    {
        
        //Cria colunas
        $columns[] = _M('Nível');
        $columns[] = _M('Código');        
        $columns[] = _M('Descricao');
        $columns[] = _M('Detalhes');       
        $columns[] = _M('Classe de componente');
        $columns[] = _M('Conjunto de conceitos');
        
        $this->definirColunas($columns);
        
        //Obtém os dados        
        $data = $this->type->listarConceitosDoModelo(MIOLO::_REQUEST('modeloDeAvaliacaoId'));
        $this->definirDados($data);
        
        parent::defineFields();
    }

     /**
     * Define os campos específicos referentes ao componente de nota
     * @return \MIntegerField
     */
    public function obterCamposEspecificos($data) 
    {
        $module = MIOLO::getCurrentModule();
        
        $codigo = new MTextField('componenteDeAvaliacaoConceitoId', $data->componenteDeAvaliacaoConceitoId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '', null, true);
        $codigo->addBoxStyle('display', 'none');
        $flds[] = $codigo;
        
        if( $data->classeDeComponente == AcpComponenteDeAvaliacao::CLASSE_RECUPERACAO )
        {
            $componentedeavaliacaoconceito = new AcpComponenteDeAvaliacaoConceito($data->componenteDeAvaliacaoConceitoId);
            $formasComponente = AcpComponenteDeAvaliacaoNotaRecuperacao::listarFormasDeCalculo();
            $flds[] = new MSelection('formaDeCalculo', $this->getFormValue('formaDeCalculo',$componentedeavaliacaoconceito->formaDeCalculo), _M('Forma de recuperação', $module), $formasComponente);
            $this->addValidator(new MRequiredValidator('formaDeCalculo', _M('Forma de recuperação', $module)));
        }
        
        $flds[] = new MSelection('conjuntoDeConceitosId', $data->conjuntoDeConceitosId, _M('Conjunto de conceitos', $module), AcpConjuntoDeConceitos::listarConjuntoDeConceitos());
        return $flds;
    }
    
    /**
     * Adiciona novos validadores aos campos criados na tela
     * @return \MRequiredValidator
     */
    public function obterValidadores()
    {
        $module = MIOLO::getCurrentModule();
        $validators = parent::obterValidadores();        
        $validators[] = new MRequiredValidator('conjuntoDeConceitosId', _M('Conjunto de conceitos', $module));
        
        return $validators;
    }
    
    public function getTypesData($args) 
    {
        $data->componenteDeAvaliacaoConceitoId = $args->componenteDeAvaliacaoConceitoId;
        $data->componenteDeAvaliacaoId = $args->componenteDeAvaliacaoId;
        $data->conjuntoDeConceitosId = $args->conjuntoDeConceitosId;
        $data->formaDeCalculo = $args->formaDeCalculo;
        $data->componenteDeAvaliacao = parent::getTypesData($args);
        return $data;
    }
    
    public function salvarComponente($args) 
    {
        $MIOLO = MIOLO::getInstance();
        $data = $this->getTypesData($args);  
        
        foreach( $data as $var1=>$value1 )
        {
            if ($value1 instanceOf stdClass)
            {
                $this->type->componenteDeAvaliacao = new AcpComponenteDeAvaliacao();                
                foreach ($value1 as $var2 => $value2)
                {
                    $this->type->componenteDeAvaliacao->$var2 = $value2;
                }
            }
            else
            {
                $this->type->$var1 = $value1;
            }
        }

        if( $this->type->save() )
        {            
            $MIOLO->information(_M('Componente salvo com sucesso'));
        }
    }
}
?>
