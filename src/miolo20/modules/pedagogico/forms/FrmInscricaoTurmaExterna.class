<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Curso
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 13/11/2013
 *
 **/
class FrmInscricaoTurmaExterna extends FrmInscricaoTurma
{
    public function __construct()
    {
        $this->setEnableToolbar(false);
        parent::__construct(new AcpInscricao(), array('inscricaoid'), null, _M('Turma'));
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        
        //Define a unidade logada como a da oferta da turma a ser inscrita
        $ofertaCursoId = MIOLO::_REQUEST('ofertacursoid');
        $ofertacurso = new AcpOfertaCurso($ofertaCursoId);
        sMultiUnidade::definirUnidadeLogada($ofertacurso->unitid);
        
        SMainMenu::esconderMenu(true);
    }
    
    public function getLinkedDefs()
    {
        if ( !$this->defs )
        {
            $ofertacursoid = MIOLO::_REQUEST('ofertacursoid');
            if( strlen($ofertacursoid) > 0 )
            {
                $regras = $this->obterRegrasDaOfertaDeCurso($ofertacursoid);
            }
            
            $defs = $this->newDef()
                    ->setChave('inscricaoid')
                    ->addForm( $this->newFormDef()->setLabel('Curso')->setModule('pedagogico')->setAction('main:process:inscricaoexterna')->setTipo(self::TIPO_UM_PARA_UM) )                    
                    ->addForm( $this->newFormDef()->setLabel('Termo de inscrição')->setModule('pedagogico')->setAction('main:process:termodeinscricao')->setTipo(self::TIPO_UM_PARA_UM));
            
                    if( $regras->utilizarmensageminicial == DB_TRUE )
                    {
                        $defs->addForm( $this->newFormDef()->setLabel('Informações')->setModule('pedagogico')->setAction('main:process:mensageminicial')->setTipo(self::TIPO_UM_PARA_UM) );
                    }                    
                    $defs->addForm( $this->newFormDef()->setLabel('Turma')->setModule('pedagogico')->setAction('main:process:inscricaoturmaexterna')->setTipo(self::TIPO_UM_PARA_UM) );
                    
                    //Verifica se o curso não é gratuito ou possui taxa de inscrição
                    if( strlen($ofertacursoid) > 0 )
                    {
                        $ofertacurso = new AcpOfertaCurso($ofertacursoid);
                        if( $ofertacurso->ocorrenciacurso->curso->gratuito == DB_FALSE || $ofertacurso->taxainscricao == DB_TRUE )
                        {
                            $defs->addForm( $this->newFormDef()->setLabel('Condições de pagamento')->setModule('pedagogico')->setAction('main:process:inscricaopagamentoexterna')->setTipo(self::TIPO_UM_PARA_UM) );
                        }
                        
                        if( $regras->utilizarmensagemfinal == DB_TRUE )
                        {
                            $defs->addForm( $this->newFormDef()->setLabel('Fim')->setModule('pedagogico')->setAction('main:process:mensagemfinal')->setTipo(self::TIPO_UM_PARA_UM) );
                        }
                    }
                    
            $this->defs = $defs;
        }
        
        return $this->defs;
    }
    
    public function obterTurmasDaOfertaDeCurso($ofertaCursoId)
    {
         return AcpOfertaTurma::obterTurmasDaOfertaDeCurso($ofertaCursoId, true);
    }
        
    public function btnSaveAndGo_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
                
        //Verifica se o aluno já não está inscrito na turma
        //(verificar o status, caso cancelado pode se inscrever novamente)
        $data = $this->getTypesData();
        if( MIOLO::_REQUEST('function') != 'update' && AcpInscricao::possuiInscricaoAtiva($data->personid, $data->ofertaturmaid) )
        {
            $this->addAlert(_M('Você já está inscrito na turma selecionada. Para realizar ajustes ou cancelamentos entre em contato com a secretaria.'));
        }
        else
        {
            $this->validaDados();
        }
    }  
    
    public function btnSaveAndFinish_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
                
        //Verifica se o aluno já não está inscrito na turma
        //(verificar o status, caso cancelado pode se inscrever novamente)
        $data = $this->getTypesData();
        
        if( MIOLO::_REQUEST('function') != 'update' && AcpInscricao::possuiInscricaoAtiva($data->personid, $data->ofertaturmaid) )
        {
            $this->addAlert(_M('Você já está inscrito na turma selecionada. Para realizar ajustes ou cancelamentos entre em contato com a secretaria.'));
        }
        else
        {
            $ok = $this->validaDados();
            
            if ( $ok )
            {
                parent::btnSaveAndFinish_click();
            }
        }
    }
}
?>
