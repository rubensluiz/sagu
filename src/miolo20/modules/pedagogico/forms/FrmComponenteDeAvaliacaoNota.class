<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Unit form
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.com.br]
 *
 * @since
 * Class Created on 05/07/2013
 *
 **/
$MIOLO->uses('forms/FrmComponenteDeAvaliacao.class', 'pedagogico');
class FrmComponenteDeAvaliacaoNota extends FrmComponenteDeAvaliacao
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new AcpComponenteDeAvaliacaoNota());
    }
    
    public function defineFields() {
        
        //Cria colunas
        $columns[] = _M('Nível');
        $columns[] = _M('Código');        
        $columns[] = _M('Descrição');
        $columns[] = _M('Detalhes');       
        $columns[] = _M('Peso');
        $columns[] = _M('Forma de cálculo');
        $columns[] = _M('Classe de componente');
        $columns[] = _M('Valor mínimo');
        $columns[] = _M('Valor máximo');
        $columns[] = _M('Valor mínimo para aprovação');
        $columns[] = _M('Grau de precisão');
        
        $this->definirColunas($columns);
        
        //Obtém os dados        
        $data = $this->type->listarNotasDoModelo(MIOLO::_REQUEST('modeloDeAvaliacaoId'));
        foreach( $data as $cod=>$linha)
        {
            $id = $linha[1];
            $formasDeCalculo = AcpComponenteDeAvaliacaoNota::listarFormasDeCalculo();
            
            //Caso a forma de cálculo for valor nao permite adicionar filhos
            if( $linha[5] == $formasDeCalculo[AcpComponenteDeAvaliacaoNota::FORMA_CALCULO_VALOR] )
            {
                $this->disableButtonAdd[$id] = _M('A forma de cálculo está definida como Valor.');
            }
        }
        $this->definirDados($data);
        
        parent::defineFields();
    }

     /**
     * Define os campos específicos referentes ao componente de nota
     * @return \MIntegerField
     */
    public function obterCamposEspecificos($data) 
    {
        $module = MIOLO::getCurrentModule();
        
        $componenteDeAvaliacao = $data->componenteDeAvaliacao;        
        $componenteDeAvaliacaoNota = $data;
        
        //Caso o componente for recuperação carrega os valores de recuperação
        if( $data->componenteDeAvaliacao->classeDeComponente == AcpComponenteDeAvaliacao::CLASSE_RECUPERACAO )
        {
            $componenteNotaRecuperacao = AcpComponenteDeAvaliacaoNotaRecuperacao::obterComponenteRecuperacaoDaNota($data->componenteDeAvaliacaoNotaId);
            $componenteDeAvaliacaoNotaRecuperacao = new AcpComponenteDeAvaliacaoNotaRecuperacao($componenteNotaRecuperacao->componenteDeAvaliacaoNotaRecuperacaoId);
            
            $componenteDeAvaliacao = $componenteDeAvaliacaoNotaRecuperacao->componenteDeAvaliacaoNota->componenteDeAvaliacao;
            $componenteDeAvaliacaoNota = $componenteDeAvaliacaoNotaRecuperacao->componenteDeAvaliacaoNota;
        }
        
        if( strlen($componenteDeAvaliacaoNota->componenteDeAvaliacaoNotaId) > 0 )
        {
            $codigo = new MTextField('componenteDeAvaliacaoNotaId', $componenteDeAvaliacaoNota->componenteDeAvaliacaoNotaId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '', null, true);
            $codigo->addBoxStyle('display', 'none');
            $flds[] = $codigo;
        }        
        if( strlen($componenteDeAvaliacaoNotaRecuperacao->componenteDeAvaliacaoNotaRecuperacaoId) > 0 )
        {
            $codigo = new MTextField('componenteDeAvaliacaoNotaRecuperacaoId', $componenteDeAvaliacaoNotaRecuperacao->componenteDeAvaliacaoNotaRecuperacaoId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), '', null, true);
            $codigo->addBoxStyle('display', 'none');
            $flds[] = $codigo;
        }
        
        if( strlen($data->componenteDeAvaliacaoPai) > 0 )
        {
            $componenteDeAvaliacaoNotaId = $data->componenteDeAvaliacaoPai;
        }
        elseif( $componenteDeAvaliacao )
        {
            $componenteDeAvaliacaoPai = $componenteDeAvaliacao->obterComponenteDeAvaliacaoPai();
            $componentePaiNotaId = AcpComponenteDeAvaliacaoNota::obterComponenteNotaDoComponente($componenteDeAvaliacaoPai->componenteDeAvaliacaoId);
            $componenteDeAvaliacaoNotaId = $componentePaiNotaId->componenteDeAvaliacaoNotaId;
        }
        
        if( strlen($componenteDeAvaliacaoNotaId) > 0 )
        {
            $componenteNotaPai = new AcpComponenteDeAvaliacaoNota($componenteDeAvaliacaoNotaId);
            //Atribui valor para edição, caso for inserção adiciona valor padrão do componente pai como default
            $data->peso = SAGU::NVL($componenteDeAvaliacaoNota->peso, 1);
            $data->formaDeCalculo = SAGU::NVL($componenteDeAvaliacaoNota->formaDeCalculo, AcpComponenteDeAvaliacaoNota::FORMA_CALCULO_VALOR);
            $data->valorMinimo = SAGU::NVL($componenteDeAvaliacaoNota->valorMinimo, $componenteNotaPai->valorMinimo);
            $data->valorMaximo = SAGU::NVL($componenteDeAvaliacaoNota->valorMaximo, $componenteNotaPai->valorMaximo);
            $data->valorMinimoAprovacao = SAGU::NVL($componenteDeAvaliacaoNota->valorMinimoAprovacao, $componenteNotaPai->valorMinimoAprovacao);
            $data->grauDePrecisao = SAGU::NVL($componenteDeAvaliacaoNota->grauDePrecisao, $componenteNotaPai->grauDePrecisao);
            
            $data->pesoDoComponente = SAGU::NVL($componenteDeAvaliacaoNotaRecuperacao->pesoDoComponente, 1);
            $data->pesoDaRecuperacao = SAGU::NVL($componenteDeAvaliacaoNotaRecuperacao->pesoDaRecuperacao, 1);
        }        

        //Campos específicos da recuperação
        $formasComponente = AcpComponenteDeAvaliacaoNota::listarFormasDeCalculo();        
        if( SAGU::NVL($componenteDeAvaliacao->classeDeComponente, $data->classeDeComponente) == AcpComponenteDeAvaliacao::CLASSE_RECUPERACAO ) 
        {
            $formasComponente = AcpComponenteDeAvaliacaoNotaRecuperacao::listarFormasDeCalculo();
            $flds[] = new MIntegerField('notaDeDispensa', $this->getFormValue('notaDeDispensa', $componenteDeAvaliacaoNotaRecuperacao->notaDeDispensa), _M('Nota de dispensa', $module));
            $this->addValidator(new MRequiredValidator('notaDeDispensa', _M('Nota de dispensa', $module)));
            $flds[] = $fdc = new MSelection('formaDeCalculo', $this->getFormValue('formaDeCalculo',$componenteDeAvaliacaoNota->formaDeCalculo), _M('Forma de recuperação', $module), $formasComponente);
            $fdc->addAttribute('onchange', SForm::getAjaxAction('ajaxCamposPeso', 'divPeso', false));
        }
        else
        {
            $flds[] = $fdc = new MSelection('formaDeCalculo', $this->getFormValue('formaDeCalculo',$componenteDeAvaliacaoNota->formaDeCalculo), _M('Forma de cálculo', $module), $formasComponente);
            $fdc->addAttribute('onchange', SForm::getAjaxAction('ajaxCamposPeso', 'divPeso', false));
        }
        

        // Campos relativos a PESO
        $args = new stdClass();
        $args->classeDeComponente = $data->classeDeComponente;
        $args->formaDeCalculo = $data->formaDeCalculo;
        $args->peso = $data->peso;
        $args->pesoDoComponente = $data->pesoDoComponente;
        $args->pesoDaRecuperacao = $data->pesoDaRecuperacao;
        $args->componenteDeAvaliacaoId = $data->componenteDeAvaliacaoId;
        $args->componenteDeAvaliacaoPai = $data->componenteDeAvaliacaoPai;
        
        $flds[] = new MDiv('divPeso', $this->ajaxCamposPeso($args, true));
        
        $js = "window.mintegerfield = {
                validate: function(input)
                {
                    // TODO: negative numbers
                    if ( input.value.match( /[^\d]/g ) )
                    {
                        input.value = input.value.replace( /[^\d]/g, '' );
                    }
                }
            };";
        $this->page->addAJAXJsCode($js);

        $flds[] = new MIntegerField('valorMinimo', $this->getFormValue('valorMinimo',$data->valorMinimo), _M('Valor mínimo', $module));        
        $flds[] = new MIntegerField('valorMaximo', $this->getFormValue('valorMaximo',$data->valorMaximo), _M('Valor máximo', $module));
        $flds[] = new MIntegerField('valorMinimoAprovacao', $this->getFormValue('valorMinimoAprovacao',$data->valorMinimoAprovacao), _M('Valor mínimo aprovação', $module));
        $flds[] = new MIntegerField('grauDePrecisao', $this->getFormValue('grauDePrecisao',$data->grauDePrecisao), _M('Grau de precisão', $module));

        return $flds;
    }
    
    /**
     * Adiciona novos validadores aos campos criados na tela
     * @return \MRequiredValidator
     */
    public function obterValidadores()
    {
        $module = MIOLO::getCurrentModule();
        $validators = parent::obterValidadores();        
        $validators[] = new MRequiredValidator('formaDeCalculo', _M('Forma de cálculo', $module));
        $validators[] = new MRequiredValidator('valorMinimo', _M('Valor mínimo', $module));
        $validators[] = new MRequiredValidator('valorMaximo', _M('Valor máximo', $module));
        $validators[] = new MRequiredValidator('grauDePrecisao', _M('Grau de precisão', $module));
        
        return $validators;
    }
    
    public function getTypesData($args)
    {
        $data = new stdClass();
        if( $args->classeDeComponente == AcpComponenteDeAvaliacao::CLASSE_RECUPERACAO )
        {  
            //Se for recuperação
            $data->componenteDeAvaliacaoRecuperacao = new stdClass();
            $data->componenteDeAvaliacaoRecuperacao->componenteDeAvaliacaoNotaRecuperacaoId = $args->componenteDeAvaliacaoNotaRecuperacaoId;
            $data->componenteDeAvaliacaoRecuperacao->pesoDoComponente = $args->pesoDoComponente;
            $data->componenteDeAvaliacaoRecuperacao->pesoDaRecuperacao = $args->pesoDaRecuperacao;
            $data->componenteDeAvaliacaoRecuperacao->notaDeDispensa = $args->notaDeDispensa;
            $data->componenteDeAvaliacaoRecuperacao->componenteDeAvaliacaoNota = new stdClass();
            $data->componenteDeAvaliacaoRecuperacao->componenteDeAvaliacaoNota->componenteDeAvaliacaoNotaId = $args->componenteDeAvaliacaoNotaId;
            $data->componenteDeAvaliacaoRecuperacao->componenteDeAvaliacaoNota->peso = $args->peso;
            $data->componenteDeAvaliacaoRecuperacao->componenteDeAvaliacaoNota->formaDeCalculo = $args->formaDeCalculo;
            $data->componenteDeAvaliacaoRecuperacao->componenteDeAvaliacaoNota->valorMinimo = $args->valorMinimo;
            $data->componenteDeAvaliacaoRecuperacao->componenteDeAvaliacaoNota->valorMaximo = $args->valorMaximo;
            $data->componenteDeAvaliacaoRecuperacao->componenteDeAvaliacaoNota->valorMinimoAprovacao = $args->valorMinimoAprovacao;
            $data->componenteDeAvaliacaoRecuperacao->componenteDeAvaliacaoNota->grauDePrecisao = $args->grauDePrecisao;
            $data->componenteDeAvaliacaoRecuperacao->componenteDeAvaliacaoNota->componenteDeAvaliacao = parent::getTypesData($args);
        }
        else
        {
            $data->componenteDeAvaliacaoNota->componenteDeAvaliacaoNotaId = $args->componenteDeAvaliacaoNotaId;
            $data->componenteDeAvaliacaoNota->peso = $args->peso;
            $data->componenteDeAvaliacaoNota->formaDeCalculo = $args->formaDeCalculo;
            $data->componenteDeAvaliacaoNota->valorMinimo = $args->valorMinimo;
            $data->componenteDeAvaliacaoNota->valorMaximo = $args->valorMaximo;
            $data->componenteDeAvaliacaoNota->valorMinimoAprovacao = $args->valorMinimoAprovacao;
            $data->componenteDeAvaliacaoNota->grauDePrecisao = $args->grauDePrecisao;
            $data->componenteDeAvaliacaoNota->componenteDeAvaliacao = parent::getTypesData($args);
        }        
        return $data;
    }
    
    public function salvarComponente($args)
    { 
        $MIOLO = MIOLO::getInstance();        
        $data = $this->getTypesData($args);  
        $vars = $this->type->getObjectVars();   
        if( $args->classeDeComponente == AcpComponenteDeAvaliacao::CLASSE_RECUPERACAO )
        {
            $this->type = new AcpComponenteDeAvaliacaoNotaRecuperacao();
            foreach( $data->componenteDeAvaliacaoRecuperacao as $var => $value )
            {
                if( $value instanceof stdClass )
                {
                    $this->type->componenteDeAvaliacaoNota = new AcpComponenteDeAvaliacaoNota();                
                    foreach( $value as $var1=>$value1 )
                    {

                        if ($value1 instanceOf stdClass)
                        {
                            $this->type->componenteDeAvaliacaoNota->componenteDeAvaliacao = new AcpComponenteDeAvaliacao();                
                            foreach ($value1 as $var2 => $value2)
                            {
                                $this->type->componenteDeAvaliacaoNota->componenteDeAvaliacao->$var2 = $value2;
                            }
                        }
                        else
                        {
                            $this->type->componenteDeAvaliacaoNota->$var1 = $value1;
                        }
                    }
                } 
                else
                {
                    $this->type->$var = $value;
                }
            }
        }
        else
        {
            foreach( $data->componenteDeAvaliacaoNota as $var1=>$value1 )
            {
                if ($value1 instanceOf stdClass)
                {
                    $this->type->componenteDeAvaliacao = new AcpComponenteDeAvaliacao();                
                    foreach ($value1 as $var2 => $value2)
                    {
                        $this->type->componenteDeAvaliacao->$var2 = $value2;
                    }
                }
                else
                {
                    $this->type->$var1 = $value1;
                }
            }
        }
        
        if ($data->componenteDeAvaliacaoNota->grauDePrecisao < 0 ||
                $data->componenteDeAvaliacaoNota->grauDePrecisao > 2)
        {
            $this->AddError( _M("Por favor, o campo Grau de precisão precisa estar entre 0 e 2.") );
        }
        
        if(  $this->type->save() )
        {            
            $MIOLO->information(_M('Componente salvo com sucesso'));
        }
    }
    
    public function btnSaveAndGo_click($sender = null)
    {
        $componentesDeAvaliacao = new AcpComponenteDeAvaliacao();
        $componentes = $componentesDeAvaliacao->obterComponentesDeAvaliacaoDoModelo(MIOLO::_REQUEST('modeloDeAvaliacaoId'));
        
        $erro = false;
        if( count($componentes) > 0 )
        {
            foreach( $componentes as $cod=>$componente)
            {
                $componenteNota = $this->type->obterComponenteNotaDoComponente($componente->componenteDeAvaliacaoId);
                
                //Se o componente for de um tipo composto por outros componentes
                if( in_array($componenteNota->formaDeCalculo, array(AcpComponenteDeAvaliacaoNota::FORMA_CALCULO_MEDIA, AcpComponenteDeAvaliacaoNota::FORMA_CALCULO_MEDIA_PONDERADA, AcpComponenteDeAvaliacaoNota::FORMA_CALCULO_SOMA)) )
                {
                    //Não possuir filhos para compor
                    if( count($componente->obterComponentesDeAvaliacaoFilhos()) == 0 )
                    {
                        $erro = true;
                        $this->addError(_M('A forma de cálculo do componente @1 exige que pelo menos um subcomponente seja adicionado para que sua nota possa ser calculada.', $module, $componente->descricao));
                    }
                }
            }
        }
        
        if( !$erro )
        {
            parent::btnSaveAndGo_click($sender = null);
        }
    }
    
    public function ajaxCamposPeso($args)
    {        
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $validators[] = new MRequiredValidator('peso', _M('Peso'));
        
        // Obtem o AcpComponenteDeAvaliacaoNota pai do atual
        // Apenas exibe e requere o campo PESO caso o tipo de calculo do PAI seja = MEDIA PONDERADA
        
        $componenteNotaPai = null;

        if ( strlen($args->componenteDeAvaliacaoId) > 0 )
        {
            $componente = new AcpComponenteDeAvaliacao( $args->componenteDeAvaliacaoId );
            
            $pai = $componente->obterComponenteDeAvaliacaoPai();

            if ( $pai )
            {
                $componenteNotaPai = AcpComponenteDeAvaliacaoNota::obterComponenteNotaDoComponente($pai->componenteDeAvaliacaoId);
            }
        }
        else if ( strlen($args->componenteDeAvaliacaoPai) > 0 )
        {
            $componenteNotaPai = new AcpComponenteDeAvaliacaoNota($args->componenteDeAvaliacaoPai);
        }
        
        $diferenteDeRecuperacao = ( $args->classeDeComponente != AcpComponenteDeAvaliacao::CLASSE_RECUPERACAO );
        
        if ( ( $componenteNotaPai->formaDeCalculo == AcpComponenteDeAvaliacaoNota::FORMA_CALCULO_MEDIA_PONDERADA ) && $diferenteDeRecuperacao )
        {
            $flds[] = new MIntegerField('peso', $this->getFormValue('peso', $args->peso), _M('Peso', $module));
            
            $content = new sBaseGroup('bgrXX', _M('Peso'), $flds);
            
            $this->SetValidators($validators);
        }
        else
        {
            $content = new MDiv('contentx', null);
        }

        return $content;
    }
}
?>
