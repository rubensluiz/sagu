<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário do módulo pedagógico
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class Created on 12/12/2013
 *
 **/
class FrmCentroCustoOcorrenciaCurso extends SManagementForm
{
    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new PrcCentroCustoOcorrenciaCurso(), array('centrocustoocorrenciacursoid') );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $module = MIOLO::getCurrentModule();
        
        $fields[] = new sEscolha('ocorrenciacursoid', null, _M('Ocorrência de curso', $module), new AcpOcorrenciaCursoLookup());
        $fields[] = new sEscolha('costcenterid', null, _M('Centro de custo', $module), new AccCostCenter());
        
        $fields[] = new MSeparator();
        
        $validators[] = new MRequiredValidator('ocorrenciacursoid', _M('Ocorrência de curso', $module));
        $validators[] = new MRequiredValidator('costcenterid', _M('Centro de custo', $module));
        
        parent::defineFields($fields, $validators);
    }
    
    public function tbBtnSave_click($sender = NULL) 
    {
        try 
        {
            $data = $this->getTypesData();
            if( MIOLO::_REQUEST('function') == SForm::FUNCTION_INSERT )
            {
                $centrocustoocorrenciacurso = new PrcCentroCustoOcorrenciaCurso();
                $sql = $centrocustoocorrenciacurso->msql();
                $sql->addEqualCondition('PrcCentroCustoOcorrenciaCurso.ocorrenciacursoid', $data->ocorrenciacursoid);
                if( $centrocustoocorrenciacurso->findCount($sql) > 0 )
                {
                    throw new Exception("A ocorrência de curso selecionada já possui um centro de custo cadastrado.");
                }
            }
            parent::tbBtnSave_click($sender);
        } 
        catch (Exception $e) 
        {
            $this->addError($e->getMessage());
        }
    }
}
?>
