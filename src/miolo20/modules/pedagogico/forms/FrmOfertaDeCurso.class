<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Curso
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class Created on 25/09/2013
 *
 **/
class FrmOfertaDeCurso extends FrmOfertaDeCursoPai
{
    public function __construct()
    {
        $this->setLimparCamposVazios(true);
        
        parent::__construct(new AcpOfertaCurso(), array('ofertacursoid'));
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        if ( $this->isInsertFunction() && !$this->getOcorrenciaIdSelecionado() )
        {
            $ocorrencias = AcpOcorrenciaCurso::listarAtivos();
            
            if ( count($ocorrencias) > 0 )
            {
                $flds[] = $ocorrenciaDeCurso = new MSelection('ocorrenciacursoidSelecionado', null, _M('Ocorrência de curso', $module), $ocorrencias);
                $ocorrenciaDeCurso->setAutoPostBack(true);

                $fields[] = $pop = new MPopup('popX', $flds, _M('Selecione uma ocorrência de curso'));
                $pop->setShowCloseButton(false);
                $pop->addBoxStyle('left', '25%');
                $pop->addBoxStyle('top', '20%');
            }
            else
            {
                $goto = $MIOLO->GetActionURL($module, 'main:register:curso', null, array('function' => 'search'));
                
                $MIOLO->information(_M('Nenhuma ocorrência ativa foi encontrada. Clique em OK para ser redirecionado para a tela de Cursos. A ocorrência é definida no passo "Ocorrências de curso".'), $goto);
            }
        }
        else
        {
            $label = new MText('label', _M('Curso:', $module));
            $label->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $txfCursoId = new MTextField('cursoid', $this->obterOcorrencia()->curso->cursoid, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'),'',null,true);
            $acpCurso = new AcpCurso($this->obterOcorrencia()->curso->cursoid);
            $txfCursoNome = new MTextField('cursoid', $acpCurso->nome, '', 50,'',null,true);
            $fields[] = new MHContainer('divCurso', array($label,$txfCursoId, $txfCursoNome));
            
            $fields[] = $escolha = new sEscolha('ocorrenciacursoid', $this->ocorrenciadecursoid, _M('Ocorrência de curso'), new AcpOcorrenciaCursoLookup());
            $escolha->setReadOnly(true);
            
            $fields[] = new MTextField('descricao', null, _M('Descrição'));

            $fields[] = $this->genericFields()->radioButtonGroup('situacao', AcpOfertaCurso::SITUACAO_ATIVO, _M('Situação'), AcpOfertaCurso::listarSituacao());
            
            if ( $this->obterOcorrencia()->curso->perfilcurso->regras->formadeconfirmacaoinscricao == AcpRegrasMatriculaPerfilCurso::CONFIRMACAO_INSCRICAO_PGTO_TAXA )
            {
                $fields[] = $taxa = new MSelection('taxainscricao', DB_TRUE, _M('Possui taxa de inscrição?'), SAGU::listYesNo());
                $taxa->setReadOnly(true);
                $taxa->setJsHint( _M('Este campo não pode ser modificado porque a Forma de confirmação de inscrição foi configurada como `Pagamento de taxa de inscrição` nas regras do Perfil de curso.') );
            }
            else
            {
                $fields[] = $this->genericFields()->radioButtonGroup('taxainscricao', DB_FALSE, _M('Possui taxa de inscrição?'), SAGU::listYesNo());
            }
        }
        
        parent::defineFields($fields, $validators);
    }
    
    /**
     * Gerar automaticamente os encontros da oferta do curso
     * @param type $args
     */
    public function gerarencontros()
    {
        $MIOLO = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        $ofertacursoid = MIOLO::_REQUEST('ofertacursoid');
        $ofertaCurso = new AcpOfertaCurso($ofertacursoid);
        
        $urlSim = $MIOLO->getActionURL( $module, $action, null, array('ofertacursoid' => $ofertacursoid, 'function'=> $function, 'event' => 'gerarencontros_confirmacao'));
        $urlNao = $MIOLO->getActionURL( $module, $action, null, array('ofertacursoidS' => $ofertacursoid, 'function'=> 'search'));
        
        if( !AcpOfertaCurso::possuiHorarioOferta($ofertacursoid) )
        {
            $url = $MIOLO->getActionURL( $module, 'main:process:ofertacurso', null, array('ofertacursoid'=>$ofertacursoid, 'function' => 'update'));
            $MIOLO->information(_M('Nenhum horário definido para o curso, clique <a href=@1>aqui</a> para editar a oferta de curso e definir os horários ou clique em OK para voltar a tela de busca.', $module, $url), $urlNao);
        }
        else if ( strlen($ofertaCurso->datainicialaulas) == 0 || strlen($ofertaCurso->datafinalaulas) == 0 )
        {
            $MIOLO->information(_M('Não foi definido a data inicial/final de aulas, o que impossibilita a geração dos encontros. Configure em Pedagógico :: Processo :: Oferta de curso'), $urlNao);
        }
        else
        {
            $MIOLO->question(_M('Tem certeza que deseja gerar automaticamente os encontros para as disciplinas do curso?', $module), $urlSim, $urlNao);   
        }
    }
    
    /**
     * Efetua a geração dos encontros da oferta de curso
     * @param type $args
     */
    public function gerarencontros_confirmacao()
    {
        $MIOLO = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();

        $ofertacursoid = MIOLO::_REQUEST('ofertacursoid');        
        try
        {
            $ok = AcpOfertaCurso::gerarOcorrenciaHorarioOferta($ofertacursoid);
        }
        catch(Exception $e)
        {
            $MIOLO->error($e->getMessage());
        }
        
        if( $ok )
        {
            $url = $MIOLO->getActionURL( $module, $action, null, array('function'=> 'search'));
            $msg[] = _M('Os encontros foram gerados com sucesso!', $module);
            $msg[] = _M('Podem ser modificados em Pedagógico > Processo > Frequências e notas na opção Calendário de aulas para cada disciplina.', $module);
            $MIOLO->information($msg, $url);
        }
    }
    
    public function btnSaveAndGo_click($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        
        try
        {
            $situacao = $this->getRequestValue('situacao');
            $ofertaCursoId = $this->getRequestValue('ofertacursoid');
            
            if ( in_array($situacao, array(AcpOfertaCurso::SITUACAO_ENCERRADO, AcpOfertaCurso::SITUACAO_CANCELADO)) &&
                 strlen($ofertaCursoId) > 0 &&
                 AcpOfertaTurma::possuiTurmasAbertas($ofertaCursoId) )
            {
                throw new Exception(_M('Não é possível encerrar/cancelar uma oferta de curso que possui turmas ativas'));
            }
            
            $acpOcorrencia = new AcpOcorrenciaCurso(MIOLO::_REQUEST('ocorrenciacursoid'));
            $acpCurso = new AcpCurso($acpOcorrencia->cursoid);
            $matrizes = AcpMatrizCurricular::obterMatrizesCurricularesVigentesDoCurso($acpOcorrencia->cursoid);
            
            //Nao deixa cadastrar turmas porque o curso expirou
            if ( strlen($acpCurso->datafim) > 0 )
            {
                if ( SAGU::compareTimestamp(SAGU::dateToUser($acpCurso->datafim), '<', SAGU::getDateNow(), SAGU::getParameter('BASIC', 'MASK_DATE')) )
                {
                    throw new Exception(_M('Opa! Este curso expirou em @1 e não é mais possível cadastrar turmas nele, por favor, verifique a data final do Curso.', null, SAGU::dateToUser($acpCurso->datafim)));
                }
            }
            
            //Nao deixa cadastrar turmas porque nao tem matriz curricular vigente
            if ( !(count($matrizes) > 0) && $situacao == AcpOfertaCurso::SITUACAO_ATIVO )
            {
                $url = $MIOLO->getActionURL('pedagogico', 'main:register:matriz', null, array('cursoid' => $acpOcorrencia->cursoid, 'function' => SForm::FUNCTION_INSERT));
                $msg = _M('Não é possível cadastrar ofertas de turma para esta oferta de curso, pois não existe uma matriz curricular vigente cadastrada para o curso. Por favor, ');
                $link = new MLink('link',  _M('clique aqui'), $url);
                $msg .= $link->generate() . _M(' para ser redirecionado ao cadastrado da matriz curricular.');
                throw new Exception($msg);
            }
            
            parent::btnSaveAndGo_click($sender);
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }
}
?>
