<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Bibliografia
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class Created on 14/10/2013
 *
 **/
class FrmBibliografia extends FrmComponenteCurricularPai
{
    public function __construct()
    {
        parent::__construct(new AcpComponenteCurricularBibliografia(), array('componentecurricularbibliografiaid'));
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $fields = array();
        
        if( SAGU::getParameter('BASIC', 'MODULE_GNUTECA_INSTALLED') == 'YES' )
        {
            $fields += $this->genericFields()->bibliografiaGnuteca();
        }    
        
        $fields[] = new SHiddenField('bibliografia.componentecurricularid', MIOLO::_REQUEST('componentecurricularid'));
        $fields[] = new MMultiLineField('bibliografia.descricao', NULL, _M('Descrição', $module), 20, 5, 40);
        $fields[] = new MDiv('divResult');
                
        $validators[] = new MRequiredValidator('bibliografia.descricao', _M('Descriçao', $module));
        $this->page->onload("document.getElementById('bibliografia.descricao').focus();");
        
        parent::defineFields(SAGU::alignFields($fields), $validators);
    }
    
    public function obterFiltrosContextuais()
    {
        $data = parent::obterFiltrosContextuais();
        $data['tipoBibliografia'] = MIOLO::_REQUEST('tipoBibliografia');        
        return $data;
    }
    
    public function obterBibliografiaGnuteca($args)
    {
        $value = $args->bibliografia_descricao;
        if( strlen($args->bibliografia_bibliografiaid) > 0 && is_numeric($args->bibliografia_bibliografiaid) )
        {
            $value = sGenericFields::bibliografiaGnutecaResposta($args->bibliografia_bibliografiaid);
        }
        
        $this->setValidators(new MRequiredValidator('bibliografia.descricao', _M('Descrição', $module)));
        $this->page->addAJAXJsCode("document.getElementById('bibliografia.descricao').value = '{$value}'");
    }
}
?>
