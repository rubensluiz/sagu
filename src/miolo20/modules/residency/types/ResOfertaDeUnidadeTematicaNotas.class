<?php

class ResOfertaDeUnidadeTematicaNotas extends SType
{

    const PESO_NOTA_ASSIDUIDADE = 0.4;
    const PESO_NOTA_PRODUTO = 0.3;
    const PESO_NOTA_DESEMPENHO = 0.3;

    const NOTA_MEDIA = 7;

    protected $_utilizaNovoPadrao = true;
    
    /**
     * @AttributeType integer
     * 
     */
    public $ofertadeunidadetematicanotasid;
    /**
     * @AttributeType character varying
     * 
     */
    public $residenteid;
    
    public $ofertadeunidadetematicaid;
    
    public $semestre;
    
    public $notadeassiduidade;
    
    public $notadeatividadedeproduto;
    
    public $notadeavaliacaodedesempenho;
    
    public $notageral;


    public function __construct($ofertaDeUnidadeTematicaId = null, $residenteId = null)
    {
        if ( (strlen($ofertaDeUnidadeTematicaId)  >  0) &&  (strlen($residenteId)  >  0))
        {
            $this->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
            $this->residenteid = $residenteId;
            $this->populate();
        }
    }


    public function getTableName()
    {
        return 'res.ofertadeunidadetematicanotas';
    }
    /**
     * Obtém pedio do residente
     * 
     * @param int $residenteid
     * @return array
     */
    public function periodoResidente($residenteId)
    {
       $sql = 'SELECT inicio,
                 fimprevisto,
                     turmaid
            FROM res.residente
            WHERE res.residente.residenteid = ?';

        $args[] = $residenteId;
        
        $periodo = SDatabase::query($sql, $args);
        
        return $periodo[0];
    }
    /**
     * Obtem modulos do residente
     * 
     * @param int $residenteid
     * @return array
     */
    public function ofertasSemestre($residenteId)
    {
        $sql = 'SELECT res.ofertadeunidadetematica.inicio,
                             res.ofertadeunidadetematica.fim,
                             res.unidadetematica.periodo,
                             (res.modulo.nome || \' - \' || res.ofertadeunidadetematica.nome),
                             res.ofertadoresidente.ofertadoresidenteid,
                             res.ofertadeunidadetematica.ofertadeunidadetematicaid,
                             res.modulo.moduloid,
                             res.ofertadeunidadetematica.semestre
                        FROM res.ofertadoresidente
                  INNER JOIN res.ofertadeunidadetematica ON res.ofertadeunidadetematica.ofertadeunidadetematicaid = res.ofertadoresidente.ofertadeunidadetematicaid
                  INNER JOIN res.unidadetematica ON res.unidadetematica.unidadetematicaid = res.ofertadeunidadetematica.unidadetematicaid
                  INNER JOIN res.modulo ON res.modulo.moduloid = res.unidadetematica.moduloid
                  WHERE res.ofertadoresidente.residenteid = ? 
                  ORDER BY res.ofertadeunidadetematica.inicio, res.modulo.tipo DESC, res.modulo.nome ';
        
        $args[] = $residenteId;

        $modulo = SDatabase::query($sql, $args);
        
        return $modulo;
    }
    
      public static function search($filters)
    {
        $sql = 'SELECT A.ofertadeunidadetematicaid,
                        A.semestre,
                        A.residenteid,
                        A.notadeassiduidade,
                        A.notadeatividadedeproduto,
                        A.notadeavaliacaodedesempenho,
                        A.ofertadeunidadetematicanotasid,
                        A.notageral
                  FROM res.ofertadeunidadetematicanotas A';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY A.ofertadeunidadetematicanotasid ';

        $result = SDatabase::query($sql);

        return $result;
    }


    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT A.ofertadeunidadetematicaid,
                        A.semestre,
                        A.residenteid,
                        A.notadeassiduidade,
                        A.notadeatividadedeproduto,
                        A.notadeavaliacaodedesempenho,
                        A.ofertadeunidadetematicanotasid,
                        A.notageral
                  FROM res.ofertadeunidadetematicanotas A
                 WHERE A.residenteid = ? AND A.ofertadeunidadetematicaid = ?';

        $result = SDatabase::query($sql, array($this->residenteid, $this->ofertadeunidadetematicaid));

        if ( $result[0][0] < 0 )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->ofertadeunidadetematicaid,
            $this->semestre,
            $this->residenteid,
            $this->notadeassiduidade,
            $this->notadeatividadedeproduto,
            $this->notadeavaliacaodedesempenho,
            $this->ofertadeunidadetematicanotasid,
            $this->notageral
            ) = $result[0];
    }
}
?>