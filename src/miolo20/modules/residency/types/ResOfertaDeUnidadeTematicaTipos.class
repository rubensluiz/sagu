<?php

class ResOfertaDeUnidadeTematicaTipos extends SType
{
    /**
     * @AttributeType integer
     */
    protected $ofertaDeUnidadeTematicaTipoId;

    protected $ofertaDeunidadeTematicaId;
    protected $tipo;

    /**
     * @AttributeType real
     */
    protected $cargaHoraria;


    public function __construct($ofertaDeUnidadeTematicaTipoId = NULL)
    {
        if ( (strlen($ofertaDeUnidadeTematicaTipoId) > 0))
        {
            $this->ofertaDeUnidadeTematicaTipoId = $ofertaDeUnidadeTematicaTipoId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT ofertadeunidadetematicatipoid
                  FROM res.ofertadeunidadeTematicaTipos';

        $where = '';
        foreach ( (array)$filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where .= " AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE '.substr($where, 5);
        }

        $sql .= ' ORDER BY ofertadeunidadetematicatipoid ';
        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new ResOfertaDeUnidadeTematicaTipos($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Popula essa classe
     */
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT ofertadeunidadetematicatipoid,
                       ofertadeunidadetematicaid,
                       tipo,
                       cargaHoraria
                  FROM res.ofertadeunidadeTematicaTipos
                 WHERE ofertadeunidadetematicatipoid = ?';


        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaTipoId;

        $result = SDatabase::query($sql, $params);

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->ofertaDeUnidadeTematicaTipoId,
            $this->ofertaDeunidadeTematicaId,
            $this->tipo,
            $this->cargaHoraria) = $result[0];
    }

    /**
     * Salva os dados
     *
     * @return integer - Código do registro inserido/atualizado
     */
    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $retVal = $this->insert();

        return $retVal;
    }

    /**
     * Insere os dados na base
     *
     * @return boolean
     */
    private function insert()
    {
        $sql = 'INSERT INTO res.ofertadeunidadetematicatipos
                            ( ofertadeunidadetematicaid,
                              tipo,
                              cargaHoraria)
                     VALUES ( ?, ?, ?)';

        $params = array();
        $params[] = $this->ofertaDeunidadeTematicaId;
        $params[] = $this->tipo;
        $params[] = $this->cargaHoraria;

        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    public function delete()
    {
        $module = SAGU::getFileModule(__FILE__);

        if (strlen($this->ofertaDeunidadeTematicaId) == 0) {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        // Deleta a unidade temática
        $sql = 'DELETE FROM res.ofertadeunidadetematicatipos
                      WHERE ofertadeunidadetematicaid = ?';

        $result = SDatabase::execute($sql, array($this->ofertaDeunidadeTematicaId));

        if ($result) {
            $this->ofertaDeunidadeTematicaId = null;
        }

        return $result;
    }
}