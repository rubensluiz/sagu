<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Joao Francisco Padilha Souza [joao@solis.com.br]
 *
 * @since
 * Class created on 18/07/2011
 *
 */
class ResOcorrenciaDeContrato extends SType
{

    /**
     * @AttributeType integer
     * 
     */
    protected $ocorrenciaDeContratoId;

    /**
     * @AttributeType integer
     * 
     */
    protected $statusDaOcorrenciaDeContratoId;

    /**
     * @AttributeType integer
     * 
     */
    protected $residenteId;


    protected $dataInicio;

    protected $dataFim;

    /**
     * @AttributeType text
     * 
     */
    protected $observacoes;

    /**
     * @AttributeType text
     * 
     */
    protected $descricao;

    /**
     * @AttributeType text
     * 
     */
    protected $fileId;


    protected $emailenviadocnrms;

    const EMAIL_ENVIADO_CNRMS = 1;
    const EMAIL_NAO_ENVIADO_CNRMS = 0;

    public function __construct($ocorrenciaDeContratoId = NULL)
    {
        if ( (strlen($ocorrenciaDeContratoId) > 0 ) )
        {
            $this->ocorrenciaDeContratoId = $ocorrenciaDeContratoId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT ocorrenciadecontratoid
                  FROM res.ocorrenciadecontrato';
        $where = '';

        foreach ( $filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 5);
        }

        $sql.=' ORDER BY datainicio DESC';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new ResOcorrenciaDeContrato($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters = null)
    {
        $sql = 'SELECT ocorrenciadecontratoid,
                       statusdaocorrenciadecontratoid,
                       residenteid,
                       TO_CHAR(datainicio, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       TO_CHAR(datafim, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . ' \'),
                       observacoes,
                       fileId,
                       emailenviadocnrms
                  FROM res.ocorrenciadecontrato';
        $args = array();

        if ( strlen($filters->ocorrenciaDeContratoId) > 0 )
        {
            $where.=' AND ocorrenciadecontratoid = ?';
            $args[] = $filters->ocorrenciaDeContratoId;
        }

        if ( strlen($filters->statusDaOcorrenciaDeContratoId) > 0 )
        {
            $where.=' AND statusdaocorrenciadecontratoid = ?';
            $args[] = $filters->statusDaOcorrenciaDeContratoId;
        }

        if ( strlen($filters->residenteId) > 0 )
        {
            $where.=' AND residenteid = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->observacoes) > 0 )
        {
            $where.=' AND UNACCENT(observacoes) ILIKE UNACCENT(?) ';
            $args[] = $filters->observacoes . '%';
        }

        if ( strlen($filters->fileId) > 0 )
        {
            $where.=' AND fileId = ?';
            $args[] = $filters->fileId;
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 5) . '
                   ORDER BY ocorrenciadecontratoid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    public static function searchGridOcorrencia($filters = null)
    {
        $sql = 'SELECT a.ocorrenciadecontratoId,
                       a.residenteId,
                       TO_CHAR(dataInicio, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS datainicio,
                       TO_CHAR(dataFim, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS datafim,
                       \'#\' || a.ocorrenciadecontratoId || \' - \' || b.descricao, 
                       a.observacoes, 
                       a.fileId,
                       emailenviadocnrms
                  FROM res.ocorrenciadecontrato a 
            INNER JOIN res.statusdaocorrenciadecontrato b 
                 USING (statusdaocorrenciadecontratoid)';
        $args = array();


        if ( strlen($filters->descricao) > 0 )
        {
            $where.=' AND UNACCENT(b.descricao) ILIKE UNACCENT(?) ';
            $args[] = $filters->descricao . '%';
        }

        if ( strlen($filters->observacoes) > 0 )
        {
            $where.=' AND UNACCENT(a.observacoes) ILIKE UNACCENT(?) ';
            $args[] = $filters->observacoes . '%';
        }

        if ( strlen($filters->fileId) > 0 )
        {
            $where.=' AND a.fileId = ?';
            $args[] = $filters->fileId;
        }

        if ( strlen($filters->residenteId) > 0 )
        {
            $where.=' AND a.residenteId = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->ocorrenciaDeContratoId) > 0 )
        {
            $where.=' AND b.ocorrenciaDeContratoId = ?';
            $args[] = $filters->ocorrenciaDeContratoId;
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE ' . substr($where, 7) . '
                   ORDER BY a.ocorrenciaDeContratoId DESC';
        }

        $result = SDatabase::query(SAGU::prepare($sql, $args));

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT a.username,
                       TO_CHAR(datainicio, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS datainicio,
                       TO_CHAR(datafim, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\') AS datafim,
                       a.ipaddress,
                       a.statusdaocorrenciadecontratoid,
                       a.residenteId,                       
                       b.descricao, 
                       a.observacoes, 
                       a.fileId,
                       emailenviadocnrms
                  FROM res.ocorrenciadecontrato a 
            INNER JOIN res.statusdaocorrenciadecontrato b 
                 USING (statusdaocorrenciadecontratoid)                  
                 WHERE a.ocorrenciadecontratoid = ?';

        $result = SDatabase::query($sql, array( $this->ocorrenciaDeContratoId ));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }
        list($this->userName,
                $this->datainicio,
                $this->datafim,
                $this->ipAddress,
                $this->statusdaocorrenciadecontratoid,
                $this->residenteId,
                $this->descricao,
                $this->observacoes,
                $this->fileId,
                $this->emailenviadocnrms
                ) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->ocorrenciaDeContratoId) == 0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO res.ocorrenciadecontrato
                            (ocorrenciadecontratoid, statusdaocorrenciadecontratoid, residenteid, datainicio, datafim, observacoes, fileId, emailenviadocnrms)
                     VALUES (?, ?, ?, TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), TO_TIMESTAMP(?, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'), ? ,?, ?)';
        $sqlPK = "SELECT nextval('res.ocorrenciadecontrato_ocorrenciadecontratoid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $ocorrenciaDeContratoId = $result[0][0];
        $args = array( $ocorrenciaDeContratoId, $this->statusDaOcorrenciaDeContratoId, $this->residenteId, $this->datainicio, $this->datafim, $this->observacoes, $this->fileId, $this->emailenviadocnrms );

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ocorrenciaDeContratoId = $ocorrenciaDeContratoId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE res.ocorrenciadecontrato
                   SET username = ?,
                       ipaddress = ?,
                       datainicio = TO_TIMESTAMP(?, GETPARAMETER(\'BASIC\', \'MASK_DATE\')),
                       datafim = TO_TIMESTAMP(?, GETPARAMETER(\'BASIC\', \'MASK_DATE\')),
                       statusdaocorrenciadecontratoid = ?,
                       residenteId = ?,                       
                       observacoes = ?, 
                       fileId = ?,
                       emailenviadocnrms = ?
                 WHERE ocorrenciadecontratoid = ?';

        $args = array( $this->userName,
            $this->ipAddress,
            $this->datainicio,
            $this->datafim,
            $this->statusdaocorrenciadecontratoid,
            $this->residenteId,
            $this->observacoes,
            $this->fileId,
            $this->emailenviadocnrms,
            $this->ocorrenciaDeContratoId
        );
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->ocorrenciaDeContratoId) == 0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM res.ocorrenciadecontrato
                      WHERE ocorrenciadecontratoid = ?';
        $args = array( $this->ocorrenciaDeContratoId );
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ocorrenciaDeContratoId = null;
        }

        return $result;
    }

    public static function listaOpcoesEnvioEmail()
    {
        return array(
            ResOcorrenciaDeContrato::EMAIL_NAO_ENVIADO_CNRMS => 'Não enviado',
            ResOcorrenciaDeContrato::EMAIL_ENVIADO_CNRMS => 'Enviado',
        );
    }

}

?>