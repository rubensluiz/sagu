<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers: \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class ResResidente extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $residenteId;
    /**
     * @AttributeType integer
     * 
     */
    protected $enfaseId;
    /**
     * @AttributeType integer
     * 
     */
    protected $nucleoProfissionalId;
    /**
     * @AttributeType date
     * 
     */
    protected $inicio;
    /**
     * @AttributeType date
     * 
     */
    protected $fimPrevisto;

    /**
     * @AttributeType real
     * 
     */
    protected $mediaPeriodo1;
    /**
     * @AttributeType text
     * 
     */
    protected $parecerMediaPeriodo1;


    /**
     * @AttributeType real
     * 
     */
    protected $mediaPeriodo2;
    /**
     * @AttributeType text
     * 
     */
    protected $parecerMediaPeriodo2;

    /**
     * @AttributeType real
     * 
     */
    protected $mediaPeriodo3;
    /**
     * @AttributeType text
     * 
     */
    protected $parecerMediaPeriodo3;
    /**
     * @AttributeType real
     * 
     */
    protected $notaFinal;
    /**
     * @AttributeType text
     * 
     */
    protected $parecerFinal;
    
    /**
     *
     * @var int
     */
    protected $personId;


    /**
     *
     * @var BasPhysicalPerson
     */
    protected $physicalPerson;

    /**
     *
     * @var ResEnfase
     */
    protected $enfase;

    /**
     *
     * @var ResNucleoProfissional
     */
    protected $nucleoProfissional;


    /**
     *
     * @var ResCargaHorariaComplementar
     */
    protected $cargaHorariaComplementar;
    
    /**
     * @var ResCargaHorariaComplementar
     */
    protected $ocorrenciaDeContrato;

    /**
     *
     * @var ResTrabalhoDeConclusao
     */
    protected $trabalhoDeConclusao;

    /**
     * @var int
     */
    protected $subscriptionId;
    
    protected $trabalhoDeConclusaoPopulated = false;
    
    /**
     * Indica se residente esta ativo (ver metodo self::getSQLExpressionIsActive() )
     *
     * @var boolean
     */
    protected $isActive;
    
    /**
     * Id do ultimo estado contratual
     *
     * @var int
     */
    protected $ultimaOcorrenciaDeContratoId;
    
    /**
     * Status do ultimo estado contratual
     * 
     * @var int
     */
    protected $ultimoStatusDaOcorrenciaDeContratoId;
    
    /**
     *
     * @var ResStatusDaOcorrenciaDeContrato
     */
    protected $ultimoStatusDaOcorrenciaDeContrato;
    
    /*
     * 
     * Descrição do estágio
     */
    protected $descricao;
    
    /*
     * Id da turma
     * 
     * @var int
     */
    protected $turmaId;
    
    /**
     *
     * @var type 
     */
    public $instituicaoFormadora;
    
    /**
     *
     * @var type 
     */
    public $instituicaoExecutora;
    
    public function __construct($residenteId = NULL)
    {
        if ( (strlen($residenteId)  >  0) )
        {
            $this->residenteId = $residenteId;
            $this->populate();
        }
    }

    public function  __get($name)
    {
        if ( $name == 'physicalPerson' && !$this->physicalPerson && ( strlen($this->personId) > 0 ) )
        {
            $MIOLO = MIOLO::getInstance();
            $busPP = new BusinessBasicBusPhysicalPerson();
            $this->physicalPerson = $busPP->getPhysicalPerson($this->personId);
        }

        if ( $name == 'enfase' && !$this->enfase )
        {
            $this->enfase = new ResEnfase($this->enfaseId);
        }

        if ( $name == 'nucleoProfissional' && !$this->nucleoProfissional )
        {
            $this->nucleoProfissional = new ResNucleoProfissional($this->nucleoProfissionalId);
        }

        if ( $name == 'cargaHorariaComplementar' && !$this->cargaHorariaComplementar )
        {
            $filters = new stdClass();
            $filters->residenteId = $this->residenteId;
            $this->cargaHorariaComplementar = ResCargaHorariaComplementar::search($filters);
        }
        
        if ( $name == 'ocorrenciaDeContrato' && !$this->ocorrenciaDeContrato )
        {
            $filters = new stdClass();
            $filters->residenteId = $this->residenteId;
            $this->ocorrenciaDeContrato = ResOcorrenciaDeContrato::search($filters);
        }

        if ( $name == 'trabalhoDeConclusao' && !$this->trabalhoDeConclusaoPopulated && !$this->trabalhoDeConclusao )
        {
            $this->trabalhoDeConclusaoPopulated = true;
            $filters = new stdClass();
            $filters->residenteId = $this->residenteId;
            $find = ResTrabalhoDeConclusao::search($filters);
            if ( $find[0] )
            {
                $this->trabalhoDeConclusao = $find[0];
            }
        }
        
        if ( $name == 'ultimoStatusDaOcorrenciaDeContrato' && $this->needCheckPopulate('ultimoStatusDaOcorrenciaDeContrato') )
        {
            $this->ultimoStatusDaOcorrenciaDeContrato = new ResStatusDaOcorrenciaDeContrato($this->ultimoStatusDaOcorrenciaDeContratoId);
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT A.residenteid
                  FROM res.residente A';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY A.residenteid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ResResidente($result[$i][0]);
        }

        return $retVal;
    }

    public static function getSearchGridSQL($filters  =  null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = '    SELECT PP.photoId,
                       A.residenteid,
                       PP.personId,
                       PP.name,
                       (SELECT AA.personId || \' - \' || AA.name FROM basLegalPerson AA where AA.personId = A.instituicaoexecutora) AS instituicaoExecutora,
                       TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(A.fimprevisto, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       NP.descricao,
                       E.descricao,
                       G.descricao as status,
                       (G.statusdaocorrenciadecontratoid IN ( ' . implode(',', array(ResStatusDaOcorrenciaDeContrato::STATUS_SUSPENSO, ResStatusDaOcorrenciaDeContrato::STATUS_DESLIGADO)) .' )) AS trancadoOuCancelado,
                       resturma.descricao
                  FROM res.residente A
       INNER JOIN ONLY basPhysicalPerson PP
                    ON PP.personId = A.personId
            INNER JOIN res.nucleoProfissional NP
                    ON NP.nucleoProfissionalId = A.nucleoProfissionalId
            INNER JOIN res.enfase E
                    ON E.enfaseId = A.enfaseId
             LEFT JOIN res.ocorrenciadecontrato F
                    ON F.ocorrenciadecontratoid = res.ultimaOcorrenciaDeContratoId(A.residenteid)
             LEFT JOIN res.statusdaocorrenciadecontrato G
                    ON G.statusdaocorrenciadecontratoid = F.statusdaocorrenciadecontratoid
             LEFT JOIN res.turma resturma
                    ON A.turmaId = resturma.turmaId
             LEFT JOIN res.desbloqueiodigitacaonotas DN
                    ON DN.residenteid = A.residenteid';
        $args = array();

        // Quando for da tela via SERVICES, filtra apenas por residentes em que o preceptor é responsavel.
        if ( SAGU::userIsFromServices() && $filters->residente != DB_TRUE )
        {
            $busPerson = new BusinessBasicBusPerson();
            $person = $busPerson->getCurrentLoginPerson();

            $sqlVigencia = ResPreceptoria::SQL_VIGENCIA;

            $filtersPreceptor = new stdClass();
            $filtersPreceptor->personid = $person->personId;
            $preceptor = ResPreceptoria::search($filtersPreceptor);
            $preceptor = $preceptor[0];

            $whereReferencia = null;
            if ($preceptor->referencia != DB_TRUE) {
                $whereReferencia = 'AND P.instituicaoexecutora = A.instituicaoexecutora';
            }

            $where .= " AND EXISTS(SELECT 1
                                  FROM res.preceptoria P INNER JOIN res.preceptoriaenfases PE ON P.preceptorid = PE.preceptorid
                                 WHERE {$sqlVigencia}
                                   AND P.personId = ?
                                   AND PE.enfaseId = A.enfaseId
                                   AND P.responsavel IS TRUE
                                   {$whereReferencia}) ";
            $args[] = $person->personId;

            // Filtra apenas residentes com contrato ativo
            //$where .= " AND NOW()::date BETWEEN A.inicio AND COALESCE(DN.datadesbloqueio, A.fimPrevisto)";
        }

        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND A.residenteid = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->enfaseId)  >  0 )
        {
            $where.=' AND A.enfaseid = ?';
            $args[] = $filters->enfaseId;
        }

        if ( strlen($filters->nucleoProfissionalId)  >  0 )
        {
            $where.=' AND A.nucleoprofissionalid = ?';
            $args[] = $filters->nucleoProfissionalId;
        }

        if ( strlen($filters->inicio)  >  0 )
        {
            $where.=' AND A.inicio = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->inicio;
        }

        if ( strlen($filters->fimPrevisto)  >  0 )
        {
            $where.=' AND A.fimprevisto = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->fimPrevisto;
        }

        if ( strlen($filters->mediaPeriodo1)  >  0 )
        {
            $where.=' AND A.mediaperiodo1 = ?';
            $args[] = $filters->mediaPeriodo1;
        }

        if ( strlen($filters->parecerMediaPeriodo1)  >  0 )
        {
            $where.=' AND UNACCENT(A.parecermediaperiodo1) ILIKE UNACCENT(?) ';
            $args[] = $filters->parecerMediaPeriodo1.'%';
        }

        if ( strlen($filters->mediaPeriodo2)  >  0 )
        {
            $where.=' AND A.mediaperiodo2 = ?';
            $args[] = $filters->mediaPeriodo2;
        }

        if ( strlen($filters->parecerMediaPeriodo2)  >  0 )
        {
            $where.=' AND UNACCENT(A.parecerMediaPeriodo2) ILIKE UNACCENT(?) ';
            $args[] = $filters->parecerMediaPeriodo2.'%';
        }

        if ( strlen($filters->notaFinal)  >  0 )
        {
            $where.=' AND A.notafinal = ?';
            $args[] = $filters->notaFinal;
        }

        if ( strlen($filters->parecerFinal)  >  0 )
        {
            $where.=' AND UNACCENT(A.parecerfinal) ILIKE UNACCENT(?) ';
            $args[] = $filters->parecerFinal.'%';
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $where.=' AND A.personId = ?';
            $args[] = $filters->personId;
        }

        if ( ( strlen($filters->betweenInicio) > 0 ) && ( strlen($filters->betweenFim) > 0 ) )
        {
            $where .= ' AND A.inicio BETWEEN 
                            TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') 
                        AND TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') ';

            $args[] = $filters->betweenInicio;
            $args[] = $filters->betweenFim;
        }

        if ( count($filters->nucleosProfissionais) > 0 )
        {
            $list = implode(', ', $filters->nucleosProfissionais);
            $where .= " AND A.nucleoProfissionalId IN ({$list})";
        }

        if ( count($filters->enfases) > 0 )
        {
            $list = implode(', ', $filters->enfases);
            $where .= " AND A.enfaseId IN ({$list})";
        }

        if ( strlen($filters->personName)  >  0 )
        {
            $where.=' AND UNACCENT(PP.name) ILIKE UNACCENT(?) ';
            $args[] = $filters->personName . '%';
        }

        if ( strlen($filters->instituicaoFormadora) >  0 )
        {
            $where.=' AND A.instituicaoFormadora = ?';
            $args[] = $filters->instituicaoFormadora;
        }
        if ( strlen($filters->instituicaoExecutora) >  0 )
        {
            $where.=' AND A.instituicaoexecutora = ?';
            $args[] = $filters->instituicaoExecutora;
        }
        if ( strlen($filters->codigoTurma) >  0 )
        {
            $turma = ResTurma::obtemTurma($filters->codigoTurma);

            $where.=' AND A.turmaId = ?';
            $args[] = $turma->turmaId;
        }

        if ( strlen($where)  >  0 || SAGU::userIsFromServices() )
        {
            $sql .= ' WHERE '.substr($where, 4);
        }

        $sql .= ' ORDER BY PP.name ';

        return SAGU::prepare($sql, $args);
    }
    
    /**
     * Mantem codigo legado funcionando
     * 
     * @param stdClass $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = self::getSearchGridSQL($filters);
        
        return preg_match('/ WHERE /', $sql) ? SDatabase::query($sql) : array();
    }
    
    public static function searchMatriculaEmLote($filters = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT A.residenteid,
                       PP.personId,
                       PP.name
                  FROM res.residente A
       INNER JOIN ONLY basPhysicalPerson PP
                    ON PP.personId = A.personId
            INNER JOIN res.nucleoProfissional NP
                    ON NP.nucleoProfissionalId = A.nucleoProfissionalId
            INNER JOIN res.enfase E
                    ON E.enfaseId = A.enfaseId
             LEFT JOIN res.turma resturma
                    ON A.turmaId = resturma.turmaId';
        
        $args = array();

        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND A.residenteid = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->enfaseId)  >  0 )
        {
            $where.=' AND A.enfaseid = ?';
            $args[] = $filters->enfaseId;
        }

        if ( strlen($filters->nucleoProfissionalId)  >  0 )
        {
            $where.=' AND A.nucleoprofissionalid = ?';
            $args[] = $filters->nucleoProfissionalId;
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $where.=' AND A.personId = ?';
            $args[] = $filters->personId;
        }

        if ( strlen($filters->codigoTurma) >  0 )
        {
            $turma = MedTurma::obtemTurma($filters->codigoTurma);
            
            $where.=' AND A.turmaId = ?';
            $args[] = $turma->turmaId;
        }

        if ( strlen($filters->instituicaoExecutora)  >  0 )
        {
            $where.=' AND A.instituicaoExecutora = ?';
            $args[] = $filters->instituicaoExecutora;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY PP.name';

            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }
        
        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT A.username,
                       TO_CHAR(A.datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       A.ipaddress,
                       A.residenteid,
                       A.enfaseid,
                       A.nucleoprofissionalid,
                       TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(A.fimprevisto, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       A.mediaperiodo1,
                       A.parecermediaperiodo1,
                       A.mediaperiodo2,
                       A.parecerMediaPeriodo2,
                       A.notafinal,
                       A.parecerfinal,
                       A.personId,
                       A.subscriptionId,
                       A.descricao,
                       ' . self::getSQLExpressionIsActive() . ' AS isActive,
                       res.ultimaocorrenciadecontratoid(A.residenteId) AS ultimaOcorrenciaDeContratoId,
                       (SELECT statusDaOcorrenciaDeContratoId FROM res.ocorrenciaDeContrato WHERE ocorrenciaDeContratoId = res.ultimaocorrenciadecontratoid(A.residenteId)) AS ultimoStatusDaOcorrenciaDeContratoId,
                       A.turmaId,
                       A.mediaperiodo3,
                       A.parecerMediaPeriodo3,
                       A.instituicaoFormadora,
                       A.instituicaoexecutora
                  FROM res.residente A
                  LEFT JOIN res.atividadepratica B
                  ON(B.residenteId = A.residenteId)
                 WHERE A.residenteid = ?';
        $result = SDatabase::query($sql, array($this->residenteId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName,
                $this->dateTime,
                $this->ipAddress,
                $this->residenteId,
                $this->enfaseId,
                $this->nucleoProfissionalId,
                $this->inicio,
                $this->fimPrevisto,
                $this->mediaPeriodo1,
                $this->parecerMediaPeriodo1,
                $this->mediaPeriodo2,
                $this->parecerMediaPeriodo2,
                $this->notaFinal,
                $this->parecerFinal,
                $this->personId,
                $this->subscriptionId,
                $this->descricao,
                $this->isActive,
                $this->ultimaOcorrenciaDeContratoId,
                $this->ultimoStatusDaOcorrenciaDeContratoId,
                $this->turmaId,
                $this->mediaPeriodo3,
                $this->parecerMediaPeriodo3,
                $this->instituicaoFormadora,
                $this->instituicaoExecutora) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        
        
        if ( strlen($this->residenteId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        foreach ( (array) $this->cargaHorariaComplementar as $row )
        {
            $row->residenteId = $this->residenteId;
            $row->save();
        }
        
        foreach ( (array) $this->ocorrenciaDeContrato as $ocorrencia )
        {
            $ocorrencia->residenteId = $this->residenteId;
            $ocorrencia->save();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO res.residente 
                            (residenteid,
                             enfaseid,
                             nucleoprofissionalid,
                             inicio,
                             fimprevisto,
                             
                             mediaperiodo1,
                             parecermediaperiodo1,
                             mediaperiodo2,
                             parecerMediaPeriodo2,
                             notafinal,
                             parecerfinal,
                             personId,
                             subscriptionId,
                             descricao,
                             turmaId,
                             mediaperiodo3,
                             parecerMediaPeriodo3,
                             instituicaoFormadora,
                             instituicaoExecutora,
                             
                             inicioAtivPraticas,
                             fimAtivPraticas,
                             localAtivPraticas,
                             notaAtivPraticas,
                             carhaHorariaAtivPraticas
                             )
                     VALUES (?,
                             ?,
                             ?,
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             ?,
                             ?,
                             ?)';
        $sqlPK = "SELECT nextval('res.residente_residenteid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $residenteId = $result[0][0];
        $args = array(
            $residenteId,
            $this->enfaseId,
            $this->nucleoProfissionalId,
            $this->inicio,
            $this->fimPrevisto,
            $this->mediaPeriodo1,
            $this->parecerMediaPeriodo1,
            $this->mediaPeriodo2,
            $this->parecerMediaPeriodo2,
            $this->notaFinal,
            $this->parecerFinal,
            $this->personId,
            $this->subscriptionId,
            $this->descricao,
            $this->turmaId,
            $this->mediaPeriodo3,
            $this->parecerMediaPeriodo3,
            $this->instituicaoFormadora,
            $this->instituicaoExecutora,
            $this->inicioAtivPraticas,
            $this->fimAtivPraticas,
            $this->localAtivPraticas,
            str_replace(',', '.', $this->notaAtivPraticas),
            $this->carhaHorariaAtivPraticas);
        
        $result = SDatabase::execute($sql, $args);
        
        if ( $result )
        {
            $this->residenteId = $residenteId;
        }

        // Insere uma ocorrencia de contrato ATIVA
        $ocorrenciaDeContrato = new ResOcorrenciaDeContrato();
        $ocorrenciaDeContrato->residenteId = $residenteId;
        $ocorrenciaDeContrato->datainicio = SAGU::getDateNow( SAGU::getParameter('BASIC', 'MASK_TIMESTAMP_PHP') );
        $ocorrenciaDeContrato->statusDaOcorrenciaDeContratoId = ResStatusDaOcorrenciaDeContrato::STATUS_ATIVO;
        $ocorrenciaDeContrato->save();

        return $result;
    }

    private function update()
    {
        $sql = "UPDATE res.residente
                   SET residenteid = ?";
        $args[] = $this->residenteId;
        
        if ( !is_null($this->enfaseId) )
        {
            $sql .= " ,enfaseId = ?";
            $args[] = $this->enfaseId;
        }
        if ( !is_null($this->nucleoProfissionalId) )
        {
            $sql .= " ,nucleoProfissionalId = ?";
            $args[] = $this->nucleoProfissionalId;
        }
        if ( !is_null($this->inicio) )
        {
            $sql .= " ,inicio = ?";
            $args[] = $this->inicio;
        }
        if ( !is_null($this->fimPrevisto) )
        {
            $sql .= " ,fimPrevisto = ?";
            $args[] = $this->fimPrevisto;
        }

        if ( !is_null($this->mediaPeriodo1) )
        {
            $sql .= " ,mediaPeriodo1 = ?";
            $args[] = $this->mediaPeriodo1;
        }
        if ( !is_null($this->parecerMediaPeriodo1) )
        {
            $sql .= " ,parecerMediaPeriodo1 = ?";
            $args[] = $this->parecerMediaPeriodo1;
        }

        if ( !is_null($this->mediaPeriodo2) )
        {
            $sql .= " ,mediaPeriodo2 = ?";
            $args[] = $this->mediaPeriodo2;
        }
        if ( !is_null($this->parecerMediaPeriodo2) )
        {
            $sql .= " ,parecerMediaPeriodo2 = ?";
            $args[] = $this->parecerMediaPeriodo2;
        }
        if ( !is_null($this->notaFinal) )
        {
            $sql .= " ,notaFinal = ?";
            $args[] = $this->notaFinal;
        }
        if ( !is_null($this->parecerFinal) )
        {
            $sql .= " ,parecerFinal = ?";
            $args[] = $this->parecerFinal;
        }
        if ( !is_null($this->personId) )
        {
            $sql .= " ,personId = ?";
            $args[] = $this->personId;
        }
        if ( !is_null($this->subscriptionId) )
        {
            $sql .= " ,subscriptionId = ?";
            $args[] = $this->subscriptionId;
        }
        if ( !is_null($this->descricao) )
        {
            $sql .= " ,descricao = ?";
            $args[] = $this->descricao;
        }

        if ( !is_null($this->mediaPeriodo3) )
        {
            $sql .= " ,mediaPeriodo3 = ?";
            $args[] = $this->mediaPeriodo3;
        }
        if ( !is_null($this->parecerMediaPeriodo3) )
        {
            $sql .= " ,parecerMediaPeriodo3 = ?";
            $args[] = $this->parecerMediaPeriodo3;
        }
        if ( !is_null($this->instituicaoFormadora) )
        {
            $sql .= " ,instituicaoFormadora = ?";
            $args[] = $this->instituicaoFormadora;
        }
        if ( !is_null($this->instituicaoExecutora) )
        {
            $sql .= " ,instituicaoexecutora = ?";
            $args[] = $this->instituicaoExecutora;
        }
        
        $sql .= " ,turmaId = ?";
        $args[] = strlen($this->turmaId) > 0 ? $this->turmaId : null;
        
        $sql .= " WHERE residenteid = ?";
        $args[] = $this->residenteId;
        
        return SDatabase::execute($sql, $args);
    }
    
    /**
     * Função que retorna um valor booleano se esta pessoa é residente.
     */
    public static function isResident($personId)
    {
        $sql = 'SELECT COUNT(*)
                  FROM res.residente
                 WHERE personId = ?';

        $params = array();
        $params[] = $personId;

        $result = SDatabase::query(SAGU::prepare($sql, $params));

        return ($result[0][0] > 0);
    }

    public function delete()
    {

        $this->__get('cargaHorariaComplementar');
        $this->__get('ocorrenciaDeContrato');
        
        if ( strlen($this->residenteId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        foreach ( $this->cargaHorariaComplementar as $row )
        {
            $row->delete();
        }
        
        foreach ( $this->ocorrenciaDeContrato as $ocorrencia )
        {
            $ocorrencia->delete();
        }

        $sql = 'DELETE FROM res.residente
                      WHERE residenteid = ?';
        $args = array($this->residenteId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->residenteId = null;
        }

        return $result;
    }


    /**
     * Retorna se ultimo estado da ocorrencia de contrato esta como concluido
     *
     * @param int $residenteId
     * @return boolean
     */
    public static function ultimoEstadoResidente($residenteId)
    {
        $sql = "SELECT statusDaOcorrenciaDeContratoId
                  FROM res.ocorrenciaDeContrato
                 WHERE ocorrenciaDeContratoId = res.ultimaOcorrenciaDeContratoId(?)";
        $args = array($residenteId);
        $result = SDatabase::query($sql, $args);

        return $result[0][0];
    }


    /**
     * Retorna lista de unidades onde residente nao possui carga horaria suficiente
     * Regra descrita no link: http://redmine.solis.coop.br:3000/issues/10059#note-13
     *
     * @return int
     */
    public static function unidadesCargaHorariaPendente($residenteId, $apenasMatriculados = false)
    {
        $sql = "SELECT A.unidadeTematicaId,
                       A.descricao AS unidadeTematica,
                       A.cargaHoraria,
                       ROUND((SELECT SUM(cargaHoraria)
				FROM res.encontro
			       WHERE ofertadeunidadetematicaid = OU.ofertadeunidadetematicaid)::numeric, 0) AS cargaHorariaRealizada
                  FROM res.ofertadeunidadetematica OU
            INNER JOIN res.unidadetematica A
                    ON A.unidadetematicaid = OU.unidadetematicaid
            INNER JOIN res.ofertadoresidente _OR
                    ON _OR.ofertadeunidadetematicaid = OU.ofertadeunidadetematicaid
                 WHERE EXISTS (SELECT 'x'
                                 FROM res.enfaseDaUnidadeTematica B
                                WHERE B.unidadeTematicaId = A.unidadeTematicaId
                                  AND B.enfaseId = (SELECT enfaseId
                                                      FROM res.residente
                                                     WHERE residenteId = ?))
                   AND EXISTS (SELECT 'x'
                                 FROM res.nucleoDaUnidadeTematica B
                                WHERE B.unidadeTematicaId = A.unidadeTematicaId
                                  AND B.nucleoProfissionalId = (SELECT nucleoProfissionalId
                                                                  FROM res.residente
                                                                 WHERE residenteId = ?))
                   AND A.frequenciaminima > (res.cargaHorariaTotal(?, A.unidadeTematicaId)*100)/A.cargahoraria
                   AND _OR.residenteid = ?";
                   
        $args = array($residenteId, $residenteId, $residenteId, $residenteId);

        //Busca apenas ofertas em que o status seja matriculado (ticket #34227)
        if ( $apenasMatriculados )
        {
            $sql .= "   AND _OR.ofertaDoResidenteId IN (SELECT A.ofertaDoResidenteId
                                 FROM res.ocorrenciaDeOferta A
                                WHERE A.ofertaDoResidenteId IN ( SELECT B.ofertaDoResidenteId
                                                                   FROM res.ofertaDoResidente B
                                                                  WHERE B.residenteId = ?)
                                  AND A.datainicio = (SELECT datainicio FROM res.ocorrenciaDeOferta WHERE ofertaDoResidenteId = A.ofertaDoResidenteId ORDER BY datainicio DESC LIMIT 1)
                                  AND A.status = '1')";

            $args[] = $residenteId;
        }
        
        $result = SDatabase::query($sql, $args);

        return (array) SAGU::resultToObject($result, array(
            'unidadeTematicaId',
            'unidadeTematica',
            'cargaHoraria',
            'cargaHorariaRealizada'
        ));
    }
    
    /**
     * Obtem a CONDICAO sql que retorna se residente esta ativo.
     * Ativo significa que o ultimo estado contratual é diferente de BLOQUEIA ou CONCLUIDO.
     * 
     * @param $tableAlias string Alias da tabela
     */
    public static function getSQLExpressionIsActive($tableAlias = 'A')
    {
        $sql = "(   NOT EXISTS(SELECT 1
                                 FROM res.statusDaOcorrenciaDeContrato S
                           INNER JOIN res.ocorrenciaDeContrato O
                                   ON S.statusdaocorrenciadecontratoid = O.statusdaocorrenciadecontratoid
                                WHERE O.ocorrenciaDeContratoId = res.ultimaocorrenciadecontratoid(%s.residenteId)
                                  AND (bloqueiaresidencia IS TRUE
                                    OR concluiresidencia IS TRUE
                                    OR O.datainicio > now()
                                    )) )";

        return sprintf($sql, $tableAlias);
    }
    
    /**
     * Obtém alunos não alocados em nenhuma turma
     * 
     * @param type $filters
     * @return type
     */
    public static function obtemAlunosNaoALocados($filters)
    {
        $sql = " SELECT A.residenteId,
                        B.name,
                        C.descricao as nucleoProfissional,
                        D.descricao as enfase,
                        COALESCE(B.email, B.emailalternative) as email,
                        COALESCE(B.cellphone, B.residentialphone) as telefone,
                        E.name
                   FROM res.residente A
        INNER JOIN ONLY basPhysicalPerson B 
                     ON (A.personId = B.personId)
             INNER JOIN res.nucleoProfissional C
                     ON (A.nucleoProfissionalId = C.nucleoProfissionalId)
             INNER JOIN res.enfase D
                     ON (A.enfaseId = D.enfaseId)
              LEFT JOIN basLegalPerson E 
                     ON (A.instituicaoformadora = E.personId) 
                  WHERE A.turmaId IS NULL 
                    AND CASE WHEN A.fimPrevisto IS NOT NULL
                             THEN
                                 A.fimPrevisto > now()::date
                             ELSE
                                 TRUE
                        END ";
        
        if ( strlen($filters->nucleoProfissionalId) > 0 )
        {
            $sql .= " AND A.nucleoProfissionalId = ? ";
            $args[] = $filters->nucleoProfissionalId;
        }
        
        if ( strlen($filters->enfaseId) > 0 )
        {
            $sql .= " AND A.enfaseId = ? ";
            $args[] = $filters->enfaseId;
        }
        
        $sql .= " ORDER BY B.name, C.descricao, D.descricao ";
        
        return SDatabase::query($sql, $args);
    }
    
    /**
     * Obtém alunos da turma
     * 
     * @param type $filters
     * @return type
     */
    public static function obtemAlunosDaTurma($filters)
    {
        $sql = " SELECT A.residenteId,
                        B.name,
                        C.descricao as nucleoProfissional,
                        D.descricao as enfase,
                        COALESCE(B.email, B.emailalternative) as email,
                        COALESCE(B.cellphone, B.residentialphone) as telefone,
                        E.name
                   FROM res.residente A
        INNER JOIN ONLY basPhysicalPerson B 
                     ON (A.personId = B.personId)
             INNER JOIN res.nucleoProfissional C
                     ON (A.nucleoProfissionalId = C.nucleoProfissionalId)
             INNER JOIN res.enfase D
                     ON (A.enfaseId = D.enfaseId)
              LEFT JOIN basLegalPerson E 
                     ON (A.instituicaoformadora = E.personId) 
                  WHERE A.turmaId = ? ";
        
        $args[] = $filters->turmaId;
        
        if ( strlen($filters->nucleoProfissionalId) > 0 )
        {
            $sql .= " AND A.nucleoProfissionalId = ? ";
            $args[] = $filters->nucleoProfissionalId;
        }
        
        if ( strlen($filters->enfaseId) > 0 )
        {
            $sql .= " AND A.enfaseId = ? ";
            $args[] = $filters->enfaseId;
        }
        
        $sql .= " ORDER BY B.name, C.descricao, D.descricao ";
        
        return SDatabase::query($sql, $args);
    }
    
    public static function obtemEmailDoResidente($residenteId)
    {
        $sql = " SELECT COALESCE(B.email, B.emailalternative) as email
                   FROM res.residente A
        INNER JOIN ONLY basPhysicalPerson B 
                     ON (A.personId = B.personId) 
                  WHERE A.residenteId = ? ";
        
        $args[] = $residenteId;
        
        $email = SDatabase::query($sql, $args);
        
        return $email[0][0];
    }
    
    /**
     * Obtem cod do residente ativo
     * 
     * @return int
     */
    public static function obterResidenteIdAtivo($personId)
    {
        $sql = "SELECT A.residenteid
                  FROM res.residente A
                 WHERE A.personId = ?
              ORDER BY A.inicio, A.fimPrevisto";
        
        $result = SDatabase::query($sql, array($personId));
        
        return $result[0][0];
    }
    
        /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (object): An object containing the search results
     **/
    public function getAtivPraticasAsObject($residenteId, $atividadePraticaId = null)
    {
        $fields = array( 'atividadepraticaid',
                         'inicioAtiv',
                         'fimAtiv',
                         'local',
                         'notaAtiv',
                         'cargahorariaAtiv');

        return SAGU::resultToObject($this->getAtivPraticas($residenteId,$atividadePraticaId), $fields);
    }
        /**
     * Obtem cod do residente ativo
     * 
     * @return int
     */
    public static function getAtivPraticas($residenteId, $atividadePraticaId= null)
    {
        $sql = 'SELECT A.atividadepraticaid,
                       TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(A.fim, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       A.local,
                       A.nota,
                       A.cargahoraria
                  FROM res.atividadepratica A
                 WHERE A.residenteid = ?';
                 
        
        $args[] = $residenteId;
        
        if ( strlen($atividadePraticaId)  >  0 )
        {
            $sql.=' AND A.atividadepraticaid = ?';
            $args[] = $atividadePraticaId;
        }
        
        $sql .= 'ORDER BY A.inicio';
        
        $result = SDatabase::query($sql, $args);        
        
        return $result;
    }
    
    // Insert atividades praticas
     public function insertAtiv($data)
    {
        $sql = 'INSERT INTO res.atividadePratica
            (
             atividadepraticaid,
             residenteId,
             inicio,        
             fim,
             local,
             nota,
             cargaHoraria)
             VALUES
             (?,
              ?,
              TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
              TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
              ?,
              ?,
              ?)';
        
        $sqlPK = "SELECT nextval('res.residente_residenteid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $atividadepraticaid = $result[0][0];
        
        $args = array(
            $atividadepraticaid,
            $data->residenteId,
            $data->inicioAtiv,
            $data->fimAtiv,
            $data->local,
            str_replace(',', '.', $data->notaAtiv),
            str_replace(',', '.', $data->cargahorariaAtiv)    
        );
        
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->atividadepraticaid = $atividadepraticaid;
        }
        return $result;
    }
    
        /**
     * Update data from a specific record
     *
     * @param $data (object): Data which will replace the old record data
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function updateAtiv($data)
    {
        $sql = 'UPDATE res.atividadepratica
                   SET residenteid = ?,
                       inicio = ?,
                       fim = ?,
                       local = ?,
                       nota = ?,
                       cargahoraria = ?
                 WHERE atividadepraticaid = ?';

        $args = array( $data->residenteId,
                       $data->inicioAtiv,
                       $data->fimAtiv,
                       $data->local,
                       str_replace(',', '.', $data->notaAtiv),
                       str_replace(',', '.', $data->cargahorariaAtiv),
                       $data->atividadepraticaid
            );

         $result = SDatabase::execute($sql, $args);

        return $result;
    }
        /**
     * Delete a record
     *
     * @param $conceptId (string): Primary key for deletion
     *
     * @return (boolean): True if succeed, otherwise False
     *
     **/
    public function deleteAtiv($atividadePraticaId)
    {
        $sql = 'DELETE FROM res.atividadepratica
                      WHERE atividadepraticaid = ?';
        
        $args = array($atividadePraticaId);

        $result = SDatabase::execute( $sql, $args );

        return $result;
    }
}
?>