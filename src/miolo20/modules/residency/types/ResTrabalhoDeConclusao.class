<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers: \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 19/07/2011
 *
 */
class ResTrabalhoDeConclusao extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $trabalhoDeConclusaoId;
    /**
     * @AttributeType integer
     * 
     */
    protected $orientadorId;
    /**
     * @AttributeType integer
     * 
     */
    protected $residenteId;
    /**
     * @AttributeType character varying
     * 
     */
    protected $titulo;
    /**
     * @AttributeType text
     * 
     */
    protected $tema;


    /**
     *
     * @var ResCoorientador
     */
    protected $coorientadores;

    /**
     *
     * @var ResMembroDaBanca
     */
    protected $membroDaBanca;

    /**
     *
     * @var apto boolean
     */
    protected $apto;

    const APTO = DB_TRUE;
    const INAPTO = DB_FALSE;
    const NOTA_MEDIA_APTO = 7;

    /**
     * 
     * 
     * @var nota float
     */
    protected $nota;

    protected $notaQualificacao1;
    protected $notaQualificacao2;
    protected $notaDefesa;

    protected $dataEnvio;
    
    public function __construct($trabalhoDeConclusaoId = NULL)
    {
        if ( (strlen($trabalhoDeConclusaoId)  >  0) )
        {
            $this->trabalhoDeConclusaoId = $trabalhoDeConclusaoId;
            $this->populate();
        }
    }

    public function  __get($name)
    {
        if ( strlen($this->trabalhoDeConclusaoId) > 0 )
        {
            if ( $name == 'coorientadores' && $this->needCheckPopulate($name) )
            {
                $filters = new stdClass();
                $filters->trabalhoDeConclusaoId = $this->trabalhoDeConclusaoId;
                $this->coorientadores = ResCoorientador::search($filters);
            }

            if ( $name == 'membroDaBanca' && $this->needCheckPopulate($name) )
            {
                $filters = new stdClass();
                $filters->trabalhoDeConclusaoId = $this->trabalhoDeConclusaoId;
                $this->membroDaBanca = ResMembroDaBanca::search($filters);
            }
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT A.trabalhodeconclusaoid
                  FROM res.trabalhodeconclusao A';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY A.trabalhodeconclusaoid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ResTrabalhoDeConclusao($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT A.trabalhodeconclusaoid,
                       A.orientadorid,
                       A.residenteid,
                       A.titulo,
                       A.tema
                  FROM res.trabalhodeconclusao A';
        $args = array();

        if ( strlen($filters->trabalhoDeConclusaoId)  >  0 )
        {
            $where.=' AND A.trabalhodeconclusaoid = ?';
            $args[] = $filters->trabalhoDeConclusaoId;
        }

        if ( strlen($filters->orientadorId)  >  0 )
        {
            $where.=' AND A.orientadorid = ?';
            $args[] = $filters->orientadorId;
        }

        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND A.residenteid = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->titulo)  >  0 )
        {
            $where.=' AND UNACCENT(A.titulo) ILIKE UNACCENT(?) ';
            $args[] = $filters->titulo.'%';
        }

        if ( strlen($filters->tema)  >  0 )
        {
            $where.=' AND UNACCENT(A.tema) ILIKE UNACCENT(?) ';
            $args[] = $filters->tema.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY A.trabalhodeconclusaoid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT A.username,
                       TO_CHAR(A.datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       A.ipaddress,
                       A.trabalhodeconclusaoid,
                       A.orientadorid,
                       A.residenteid,
                       A.titulo,
                       A.tema,
                       A.apto,
                       A.nota,
                       A.notaQualificacao1,
                       A.notaQualificacao2,
                       A.notaDefesa,
                       A.dataenvio
                  FROM res.trabalhodeconclusao A
                 WHERE A.trabalhodeconclusaoid = ?';
        $result = SDatabase::query($sql, array($this->trabalhoDeConclusaoId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName,
             $this->dateTime,
             $this->ipAddress,
             $this->trabalhoDeConclusaoId,
             $this->orientadorId,
             $this->residenteId,
             $this->titulo,
             $this->tema,
             $this->apto,
             $this->nota,
             $this->notaQualificacao1,
             $this->notaQualificacao2,
             $this->notaDefesa,
             $this->dataEnvio) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->trabalhoDeConclusaoId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        foreach ( (array) $this->coorientadores as $co )
        {
            $co->trabalhoDeConclusaoId = $this->trabalhoDeConclusaoId;
            $co->save();
        }
        foreach ( (array) $this->membroDaBanca as $mdb )
        {
            $mdb->trabalhoDeConclusaoId = $this->trabalhoDeConclusaoId;
            $mdb->save();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO res.trabalhodeconclusao 
                            (trabalhodeconclusaoid, orientadorid, residenteid, titulo, tema, dataenvio)
                     VALUES (?, ?, ?, ?, ?, ?)';
        $sqlPK = "SELECT nextval('res.trabalhodeconclusao_trabalhodeconclusaoid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $trabalhoDeConclusaoId = $result[0][0];
        $args = array($trabalhoDeConclusaoId, $this->orientadorId, $this->residenteId, $this->titulo, $this->tema, date('Y-m-d'));
        $result = SDatabase::execute($sql, $args);
        
        if ( $result )
        {
            $this->trabalhoDeConclusaoId = $trabalhoDeConclusaoId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE res.trabalhodeconclusao
                   SET orientadorid = ?,
                       residenteid = ?,
                       titulo = ?,
                       tema = ?,
                       apto = ?,
                       nota = ?,
                       notaQualificacao1 = ?,
                       notaQualificacao2 = ?,
                       notaDefesa = ?
                 WHERE trabalhodeconclusaoid = ?';
        $args = array(
            $this->orientadorId,
            $this->residenteId,
            $this->titulo,
            $this->tema,
            $this->getApto(),
            $this->getNotaFinal(),
            $this->notaQualificacao1,
            $this->notaQualificacao2,
            $this->notaDefesa,
            $this->trabalhoDeConclusaoId);
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->trabalhoDeConclusaoId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM res.trabalhodeconclusao
                      WHERE trabalhodeconclusaoid = ?';
        $args = array($this->trabalhoDeConclusaoId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->trabalhoDeConclusaoId = null;
        }

        return $result;
    }

    public function getApto()
    {
        if (!is_null($this->getNotaFinal())) {
            if ($this->getNotaFinal() >= ResTrabalhoDeConclusao::NOTA_MEDIA_APTO) {
                return ResTrabalhoDeConclusao::APTO;
            } else {
                return ResTrabalhoDeConclusao::INAPTO;
            }
        }

        return null;
    }

    public function getNotaFinal()
    {
        if (!is_null($this->notaQualificacao1) && !is_null($this->notaQualificacao2) && !is_null($this->notaDefesa)) {
            return ($this->notaQualificacao1 + $this->notaQualificacao2 + $this->notaDefesa) / 3;
        }

        return null;
    }

    public function retornaSituacao()
    {
        $situacoes = array(
            ResTrabalhoDeConclusao::APTO => 'APTO',
            ResTrabalhoDeConclusao::INAPTO => 'INAPTO'
        );

        return $situacoes[$this->apto];
    }
}


?>