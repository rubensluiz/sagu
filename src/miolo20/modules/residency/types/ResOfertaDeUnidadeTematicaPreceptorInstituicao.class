<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 15/07/2011
 */
class ResOfertaDeUnidadeTematicaPreceptorInstituicao extends SType
{
    /**
     * @AttributeType integer
     */
    protected $ofertaDeUnidadeTematicaId;
    protected $preceptorId;
    /**
     * @var ResPreceptoria
     */
    protected $preceptor;
    protected $preceptorIdDescription;
    protected $instituicaoExecutoraId;
    /**
     * @var BusinessBasicBusLegalPerson
     */
    protected $instituicaoExecutora;
    protected $instituicaoExecutoraIdDescription;


    /**
     * Instancia se necessário (Magic method)
     *
     * @param string $name
     * @return boolean
     */
    public function __get($name)
    {
        // Filter
        $filters = new stdClass();
        $filters->preceptorId = $this->preceptorId;

        if ( $name == 'preceptorIdDescription' )
        {
            if ( ($this->needCheckPopulate($name)) && (strlen($this->preceptorId) > 0) )
            {
                $preceptor = new ResPreceptoria($this->preceptorId);

                $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                $pre = $busPhysicalPerson->getPhysicalPerson($preceptor->personId);
                $this->preceptorIdDescription = $pre->name;
            }
        }

        if ( $name == 'preceptor' )
        {
            if ( ($this->needCheckPopulate($name)) && (strlen($this->preceptorId) > 0) )
            {
                $this->preceptor = new ResPreceptoria($this->preceptorId);
            }
        }

        if ( $name == 'instituicaoExecutoraIdDescription' )
        {
            if ( ($this->needCheckPopulate($name)) && (strlen($this->instituicaoExecutoraId) > 0) )
            {
                $instituicaoExecutora =  new BusinessBasicBusLegalPerson();
                $insti = $instituicaoExecutora->getLegalPerson($this->instituicaoExecutoraId);
                $this->instituicaoExecutoraIdDescription = $insti->name;
            }
        }

        if ( $name == 'instituicaoExecutora' )
        {
            if ( ($this->needCheckPopulate($name)) && (strlen($this->instituicaoExecutoraId) > 0) )
            {
                $instituicaoExecutora =  new BusinessBasicBusLegalPerson();
                $this->instituicaoExecutora = $instituicaoExecutora->getLegalPerson($this->instituicaoExecutoraId);
            }
        }

        return parent::__get($name);
    }

    /**
     * Contrutor
     *
     * @param integer $ofertaDeUnidadeTematicaId
     */
    public function __construct($ofertaDeUnidadeTematicaId = null, $preceptorId = null, $instituicaoExecutoraId =  null)
    {
        if ( (strlen($ofertaDeUnidadeTematicaId) > 0))
        {
            $this->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
            $this->preceptorId = $preceptorId;
            $this->instituicaoExecutoraId = $instituicaoExecutoraId;
            $this->populate();
        }
    }

    /**
     * Função de busca
     *
     * @param object $filters
     * @return UnidadeTematica
     */
    public static function search($filters)
    {
        $sql = 'SELECT ofertaDeUnidadeTematicaId, preceptorId, instituicaoexecutoraid
                  FROM res.ofertadeunidadetematicapreceptoresinstituicoes';

        $where = '';
        foreach ( (array)$filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY ofertadeunidadetematicaid ';
        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new ResOfertaDeUnidadeTematicaPreceptorInstituicao($result[$i][0], $result[$i][1], $result[$i][2]);
        }

        return $retVal;
    }

    /**
     * Popula essa classe
     */
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT ofertaDeUnidadeTematicaId,
                       preceptorid,
                       instituicaoexecutoraid
                  FROM res.ofertadeunidadetematicapreceptoresinstituicoes
                 WHERE ofertaDeUnidadeTematicaId = ?
                      AND preceptorId = ? 
                      AND instituicaoExecutoraId = ?';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaId;
        $params[] = $this->preceptorId;
        $params[] = $this->instituicaoExecutoraId;
        $result = SDatabase::query($sql, $params);

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->ofertaDeUnidadeTematicaId,
                $this->preceptorId,
                $this->instituicaoExecutoraId ) = $result[0];

        $this->__get('preceptorIdDescription');
    }

    /**
     * Salva os dados
     *
     * @return integer - Código do registro inserido/atualizado
     */
    public function save()
    {
        return $this->insert();
    }

    /**
     * Insere os dados na base
     *
     * @return boolean
     */
    private function insert()
    {
        $sql = 'INSERT INTO res.ofertadeunidadetematicapreceptoresinstituicoes
                            ( ofertaDeUnidadeTematicaId,
                              preceptorid,
                              instituicaoexecutoraid )
                     VALUES ( ?, ?, ? )';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaId;
        $params[] = $this->preceptorId;
        $params[] = $this->instituicaoExecutoraId;

        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    /**
     * Função que deleta o registro
     *
     * @return boolean
     */
    public function delete()
    {
        if ( (strlen($this->ofertaDeUnidadeTematicaId) == 0))
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM res.ofertadeunidadetematicapreceptoresinstituicoes
                      WHERE ofertaDeUnidadeTematicaId = ?';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaId;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->ofertaDeUnidadeTematicaId = null;
        }

        return $result;
    }
}
?>