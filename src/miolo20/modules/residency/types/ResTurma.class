<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel I. da Silva [nataniel@solis.com.br]
 *
 * @since
 * Class created on 03/11/2014
 *
 **/

class ResTurma extends SType
{
    const TCR_POR_NOTA = 'N';
    const TCR_POR_CONCEITO = 'C';
    
    protected $_utilizaNovoPadrao = true;    
    protected $_tableName = 'res.turma';    
    protected $gravarMaiusculo = true;
    
    /**
     * @var type integer
     */
    public $turmaId;
    
    /**
     * @var type varchar
     */
    public $codigoTurma;
        
    /**
     * @var type varchar
     */
    public $descricao;
    
    /**
     * @var type date
     */
    public $dataInicio;
    
    /**
     * @var type date
     */
    public $dataFim;
    
    /**
     * @var type integer
     */
    public $quantidadePeriodo;
    
    /**
     * @var type integer
     */
    public $vagas;
    
    /**
     * @var type char(1)
     */
    public $tipoAvaliacaoTCR;
    
    /**
     * @var type char(1)
     */
    public $modeloDeAvaliacao;

    /**
     * @var type integer
     */
    public $componenteid;


    public $valorBolsa;

    /**
     * Lista o tipo de períodos
     * 
     * @return type
     */
    public static function listPeriods()
    {
        $module = MIOLO::getCurrentModule();
        
        return array('2' => _M('2 anos', $module), '3' => _M('3 anos', $module));
    }
    
    /**
     * Lista o tipo de avaliação para o trabalho de conclusão do resisdente (TCR)
     * 
     * @return type
     */
    public static function listTipoAvaliacao()
    {
        $module = MIOLO::getCurrentModule();
        
        return array(ResTurma::TCR_POR_NOTA => _M('Nota', $module));
    }
    
    public function beforeFind(MSQL $sql)
    {
        $sql->setColumns( 'a.descricao as descricaocomponente, COALESCE((SELECT COUNT(*) FROM res.residente aa WHERE aa.turmaid = resturma.turmaid),0) as vagasocupada' );
        $sql->setColumns( ' datafim < now()::date as finalizada ');
        $sql->addLeftJoin('res.componente a', 'resturma.componenteid = a.componenteid');
        $sql->setOrderBy('resturma.descricao');
    }

    public static function obtemTurma($codigoTurma)
    {
        $resTurma = new ResTurma();
        $sql = $resTurma->msql();
        $sql->addEqualCondition('codigoTurma', $codigoTurma);
                 
        return $resTurma->findOne($sql);
    }

    public static function retornaTurmas()
    {
        $turmaObj = new ResTurma();
        $turmas = array();
        foreach ($turmaObj->findManyAsArray() as $turma) {
            $turmas[$turma['resturma.turmaid']] = $turma['resturma.descricao'] . ' - ' . $turma['descricaocomponente'];
        }

        return $turmas;
    }
}

