<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 28/08/2011
 */
class ResPreceptoria extends SType
{
    const SITUACAO_ATIVO = 'A';
    const SITUACAO_INATIVO = 'I';
    const SITUACAO_INDIFERENTE = 'IN';

    /**
     * SQL que filtra o periodo de vigencia do preceptor
     *
     * Obs: Utilizado tambem em: ResResidente.class
     */
    const SQL_VIGENCIA = "NOW()::date BETWEEN P.inicio AND COALESCE(P.fim, NOW()::date)";

    public $preceptorId;
    public $personId;
    public $nucleoProfissionalId;
    public $inicio;
    public $fim;
    public $responsavel;
    public $titulacao;
    public $chSemanal;
    public $chMensal;
    public $referencia;
    public $instituicaoExecutora;
    public $enfases;
    public $turmas;
    public $enfaseId;


    const VINCULO_SERVIDOR =  1;
    const VINCULO_CLT =  2;
    const VINCULO_CELETISTA =  3;
    const VINCULO_OUTRO =  4;
    public $vinculo; // 1 - servidor, 2 - clt, 3 - CELETISTA, 4 - OUTRO

    public $funcao;
    public $cargaHorariaMunicipio;
    public $cargaHorariaRIS;
    public $graduacao;
    public $posGraduacao;

    const TIPO_PRECEPTOR_CAMPO = 'C';
    const TIPO_PRECEPTOR_NUCLEO = 'N';
    const TIPO_PRECEPTOR_MISTO = 'M';
    public $tipoPreceptor; // C - campo, N - nucleo, M - campo/nucleo
    public $tempoExperienciaMeses;
    public $egresso;
    public $recebeValorizacaoFinanceira;


    public $modulosFuncoes = array();


    public static function retornaTiposPreceptores($tipo = null)
    {
        $tipos = array(
            self::TIPO_PRECEPTOR_CAMPO => 'Campo',
            self::TIPO_PRECEPTOR_NUCLEO      => 'Núcleo',
            self::TIPO_PRECEPTOR_MISTO => 'Campo/Núcleo'
        );

        if ($tipo) {
            return $tipos[$tipo];
        }

        return $tipos;
    }

    public static function retornaVinculos($vinculo = null)
    {
        $vinculos = array(
            self::VINCULO_SERVIDOR => 'Servidor',
            self::VINCULO_CLT      => 'CLT',
            self::VINCULO_CELETISTA => 'Celetista',
            self::VINCULO_OUTRO     => 'Outro'
        );

        if ($vinculo) {
            return $vinculos[$vinculo];
        }

        return $vinculos;
    }
    
    public function __construct($preceptorId = NULL)
    {
        if ( (strlen($preceptorId)  >  0) )
        {
            $this->preceptorId = $preceptorId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT preceptorId
                  FROM res.preceptoria';

        $where = '';
        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where .= " AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql .= ' WHERE '.substr($where, 5);
        }

        $sql .= ' ORDER BY inicio ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ResPreceptoria($result[$i][0]);
        }

        return $retVal;
    }
    
    public static function getSearchGridSQL($filters = null)
    {
        $sqlDataInicio = "(SELECT MIN(OUT.inicio) FROM res.ofertaDeUnidadeTematica OUT WHERE OUT.personId = PP.personId)";
        $sqlDataFim = "(SELECT MAX(OUT.fim) FROM res.ofertaDeUnidadeTematica OUT WHERE OUT.personId = PP.personId)";
        $sqlVigencia = self::SQL_VIGENCIA;

        $extraCols = '';
        
        // como nao sei as grids que estao utilizando este metodo, tentarei evitar impactos
        if ( MIOLO::getCurrentAction() == 'main:register:preceptoria' )
        {
            $extraCols =     'PP.personId, ';
        }
        
        $sql = "SELECT P.preceptorId,
                       {$extraCols}
                       PP.name AS nomeDoPreceptor,
                       (SELECT AA.personId || ' - ' || AA.name FROM basLegalPerson AA where AA.personId = P.instituicaoexecutora) AS instituicaoExecutora,
                       CPF.content AS CPF,
                       P.chmensal,
                       COALESCE(PP.email, PP.emailAlternative) AS email,
                       TO_CHAR(P.inicio, GETPARAMETER('BASIC', 'MASK_DATE')) AS inicio,
                       TO_CHAR(P.fim, GETPARAMETER('BASIC', 'MASK_DATE')) AS fim,
                       CASE WHEN {$sqlVigencia} THEN 'Ativo' ELSE 'Inativo' END AS situacao,
                       NP.descricao AS nucleoProfissional,
                       (SELECT string_agg(B.descricao, ', ') FROM res.preceptoriaenfases A INNER JOIN res.enfase B on A.enfaseid = B.enfaseid WHERE A.preceptorid = P.preceptorid) AS enfases,
                       p.responsavel,
                       P.referencia
                  FROM res.preceptoria P
       INNER JOIN ONLY basPhysicalPerson PP
                    ON P.personId = PP.personId
             LEFT JOIN res.nucleoProfissional NP
                    ON NP.nucleoprofissionalid = P.nucleoprofissionalid
             LEFT JOIN basDocument CP
                    ON PP.personId = CP.personId
                   AND CP.documentTypeId = " . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CARTAO_PONTO') . "
             LEFT JOIN basDocument CPF
                    ON PP.personId = CPF.personId
                   AND CPF.documentTypeId = " . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF');

        $where = '';
        $params = array();

        if ( strlen($filters->preceptorId)  >  0 )
        {
            $where .= ' AND P.preceptorId = ?';
            $params[] = $filters->preceptorId;
        }

        if ( strlen($filters->personName)  >  0 )
        {
            $where .= ' AND UNACCENT(PP.name) ILIKE UNACCENT(?)';
            $params[] = $filters->personName . '%';
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $where .= ' AND P.personId = ?';
            $params[] = $filters->personId;
        }



        if ( strlen($filters->nucleoProfissionalId)  >  0 )
        {
            $where .= ' AND P.nucleoProfissionalId = ?';
            $params[] = $filters->nucleoProfissionalId;
        }

        if ( strlen($filters->enfaseId)  >  0 )
        {
            $where .= ' AND P.preceptorid = (SELECT AA.preceptorid FROM res.preceptoriaenfases AA WHERE AA.enfaseid = ?)';
            $params[] = $filters->enfaseId;
        }

        if ( strlen($filters->responsavel)  >  0 )
        {
            $where .= ' AND P.responsavel = ?';
            $params[] = $filters->responsavel;
        }

        // Situacao do preceptor
        if ( $filters->situacao == self::SITUACAO_ATIVO )
        {
            $where .=  ' AND ' . $sqlVigencia;
        }
        else if ( $filters->situacao == self::SITUACAO_INATIVO )
        {
            $where .= " AND NOT ({$sqlVigencia}) ";
        }

        // Datas
        if ( (strlen($filters->inicio) > 0) && ( strlen($filters->fim) > 0 ) )
        {
            $passed = " TO_DATE(?, GETPARAMETER('BASIC', 'MASK_DATE')) ";
            $where .= " AND ( ({$passed} <= P.inicio) AND (P.fim IS NULL OR ({$passed} >= P.fim)) ) ";
            $params[] = $filters->inicio;
            $params[] = $filters->fim;
        }
        else if ( strlen($filters->inicio)  >  0 )
        {
            $where .= " AND P.inicio = TO_DATE(?, GETPARAMETER('BASIC', 'MASK_DATE'))";
            $params[] = $filters->inicio;
        }
        else if ( strlen($filters->fim)  >  0 )
        {
            $where .= " AND P.fim = TO_DATE(?, GETPARAMETER('BASIC', 'MASK_DATE'))";
            $params[] = $filters->fim;
        }

        else if ( strlen($filters->referencia) > 0 )
        {
            $where .= " AND P.referencia = ? ";
            $params[] = $filters->referencia;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }
        
        $sql .= ' ORDER BY P.inicio';

        return SAGU::prepare($sql, $params);
    }

    /**
     * Mantem codigo legado funcionando
     * 
     * @param stdClass $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = self::getSearchGridSQL($filters);
        
        return preg_match('/ WHERE /', $sql) ? SDatabase::query($sql) : array();
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT username,
                       TO_CHAR(datetime, '" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       ipaddress,
                       preceptorId,
                       personId,
                       nucleoProfissionalId,
                       TO_CHAR(inicio, GETPARAMETER('BASIC', 'MASK_DATE')),
                       TO_CHAR(fim, GETPARAMETER('BASIC', 'MASK_DATE')),
                       responsavel,
                       titulacao,
                       chSemanal,
                       chMensal,
                       referencia,
                       instituicaoExecutora,
                       funcao,
                       carga_horaria_municipio,
                       carga_horaria_ris,
                       graduacao,
                       pos_graduacao,
                       tipo_preceptor,
                       tempo_experiencia_meses,
                       egresso,
                       recebe_valorizacao_financeira,
                       vinculo
                  FROM res.preceptoria
                 WHERE preceptorId = ?";

        $result = SDatabase::query($sql, array($this->preceptorId));

        if ( !isset($result[0][1]) )
        {
            throw new Exception(_M('Registro inexistente. (@1)', $module, __CLASS__));
        }

        list( $this->userName,
              $this->dateTime,
              $this->ipAddress,
              $this->preceptorId,
              $this->personId,
              $this->nucleoProfissionalId,
              $this->inicio,
              $this->fim,
              $this->responsavel,
              $this->titulacao,
              $this->chSemanal,
              $this->chMensal,
              $this->referencia,
              $this->instituicaoExecutora,
              $this->funcao,
              $this->cargaHorariaMunicipio,
              $this->cargaHorariaRIS,
              $this->graduacao,
              $this->posGraduacao,
              $this->tipoPreceptor,
              $this->tempoExperienciaMeses,
              $this->egresso,
              $this->recebeValorizacaoFinanceira,
              $this->vinculo) = $result[0];
    }

    
    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->preceptorId)  ==  0 )
        {
            $retVal = $this->insert();
            if ( is_numeric(SAGU::getParameter('RESIDENCY', 'DEFAULT_GROUP_RESIDENCY_PRECEPTOR')) )
            {
                $this->insertGrupo($this->personId, SAGU::getParameter('RESIDENCY', 'DEFAULT_GROUP_RESIDENCY_PRECEPTOR'));
            }
        }
        else
        {
            $retVal = $this->update();
        }

        if ( $retVal )
        {

            foreach ( ResPreceptoriaTurmas::obterPorPreceptor($this->preceptorId) as $turm ) {
                $turm->delete();
            }
            foreach ($this->turmas as $turma )
            {
                $resPreceptoriaTurma = new ResPreceptoriaTurmas();
                $resPreceptoriaTurma->preceptorid = $this->preceptorId;
                $resPreceptoriaTurma->turmaId = $turma;
                $resPreceptoriaTurma->save();
            }

            foreach ( ResPreceptoriaEnfases::obterPorPreceptor($this->preceptorId) as $enf ) {
                $enf->delete();
            }
            foreach ($this->enfases as $enfase )
            {
                $resPreceptoriaEnfase = new ResPreceptoriaEnfases();
                $resPreceptoriaEnfase->preceptorid = $this->preceptorId;
                $resPreceptoriaEnfase->enfaseid = $enfase;
                $resPreceptoriaEnfase->save();
            }

            // salva dados da subdetail
            foreach ( (array) $this->modulosFuncoes as $reg )
            {
                // selecionou 'todos'
                if ($reg->moduloid == 0) {
                    $modulos = ResModulo::listarModulos();
                    foreach ($modulos as $id => $modulo) {
                        $obj = new ResPreceptoriaModuloFuncao();
                        $obj->preceptoriaid = $this->preceptorId;
                        $obj->preceptoriamodulofuncaoid = $reg->preceptoriamodulofuncaoid;
                        $obj->moduloid = $id;
                        $obj->funcao = $reg->funcao;

                        if ( $reg->removeData )
                        {
                            $obj->delete();
                        }
                        else
                        {
                            $obj->save();
                        }
                    }

                    break;
                } else {
                    $obj = new ResPreceptoriaModuloFuncao();
                    $obj->preceptoriaid = $this->preceptorId;
                    $obj->preceptoriamodulofuncaoid = $reg->preceptoriamodulofuncaoid;
                    $obj->moduloid = $reg->moduloid;
                    $obj->funcao = $reg->funcao;


                    if ($reg->removeData) {
                        $obj->delete();
                    } else {
                        $obj->save();
                    }
                }
            }
        }

        return $retVal;
    }
    
    public function insertGrupo($personId, $groupId)
    {
        $busPerson = new BusinessBasicBusPerson();
        $personData = $busPerson->getPerson($personId);
        $busUser = new BusinessAdminUser();
        $idUser = $busUser->getByLogin($personData->mioloLogin);

        $dataUser = new BusinessAdminGroupUser();
        $group = new BusinessAdminGroup();
        $existGroup = $group->getGroup($groupId);

        if($existGroup->idgroup)
        {
            
            $unit = sMultiUnidade::obterUnidadesDoUsuario($idUser);
            $multiUnidadeAtiva = sMultiUnidade::estaHabilitada();
            
            //Se tiver mais de uma unidade e multiunidade HABILITADO manda o codigo da unidade que esta logada
            if ( $multiUnidadeAtiva && sizeof($unit) > 1 )
            {
                $unitId = sMultiUnidade::obterUnidadeLogada();
            }
            //se for apenas multiunidade ativa
            elseif( $multiUnidadeAtiva )
            {
                foreach($unit as $cod => $descricao)
                {
                    $unitId = $cod;
                }
            }
            
            $filter = new stdClass();
            $filter->idUser = $idUser->idUser;
            $filter->idGroup = $groupId;
            $filter->unitId = $unitId;
            $existUser = $dataUser->search($filter);

            if ( count($existUser) == 0)
            {                
                $dataUser->setIdUser($idUser->idUser);
                $dataUser->setIdGroup($groupId);
                $dataUser->setUnitId($unitId);

                $dataUser->insertUserInGroups($dataUser);
            }
        }
    }
    
    private function insert()
    {
        $sqlPK = "SELECT nextval('res.preceptoria_preceptorid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $preceptorId = $result[0][0];

        $sql = "INSERT INTO res.preceptoria
                            (preceptorId,
                             personId,
                             nucleoProfissionalId,
                             inicio,
                             fim,
                             responsavel,
                             titulacao,
                             chSemanal,
                             chMensal,
                             referencia,
                             instituicaoExecutora,
                             funcao,
                             carga_horaria_municipio,
                             carga_horaria_ris,
                             graduacao,
                             pos_graduacao,
                             tipo_preceptor,
                             tempo_experiencia_meses,
                             egresso,
                             recebe_valorizacao_financeira,
                             vinculo)
                     VALUES (?,
                             ?,
                             ?,
                             TO_DATE(?, GETPARAMETER('BASIC', 'MASK_DATE')),
                             TO_DATE(?, GETPARAMETER('BASIC', 'MASK_DATE')),
                             ?,
                             ?,
                             ?,
                             ?,
                             COALESCE(?, false),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)";

        $params = array();
        $params[] = $preceptorId;
        $params[] = $this->personId;
        $params[] = $this->nucleoProfissionalId;
        $params[] = $this->inicio;
        $params[] = $this->fim;
        $params[] = $this->responsavel;
        $params[] = $this->titulacao;
        $params[] = $this->chSemanal;
        $params[] = $this->chMensal;
        $params[] = $this->referencia;
        $params[] = $this->instituicaoExecutora;
        $params[] = $this->funcao;
        $params[] = $this->cargaHorariaMunicipio;
        $params[] = $this->cargaHorariaRIS;
        $params[] = $this->graduacao;
        $params[] = $this->posGraduacao;
        $params[] = $this->tipoPreceptor;
        $params[] = $this->tempoExperienciaMeses;
        $params[] = $this->egresso;
        $params[] = $this->recebeValorizacaoFinanceira;
        $params[] = $this->vinculo;

        $result = SDatabase::execute($sql, $params,false);

        if ( $result )
        {
            $this->preceptorId = $preceptorId;
        }

        return $result;
    }
    

    private function update()
    {
        $sql = "UPDATE res.preceptoria
                   SET personId = ?,
                       nucleoProfissionalId = ?,
                       inicio = TO_DATE(?, GETPARAMETER('BASIC', 'MASK_DATE')),
                       fim = TO_DATE(?, GETPARAMETER('BASIC', 'MASK_DATE')),
                       responsavel = ?,
                       titulacao = ?,
                       chSemanal = ?,
                       chMensal = ?,
                       referencia = COALESCE(?, false),
                       instituicaoExecutora = ?,
                       funcao = ?,
                       carga_horaria_municipio = ?,
                       carga_horaria_ris = ?,
                       graduacao = ?,
                       pos_graduacao = ?,
                       tipo_preceptor = ?,
                       tempo_experiencia_meses = ?,
                       egresso = ?,
                       recebe_valorizacao_financeira = ?,
                       vinculo = ?
                 WHERE preceptorId = ?";

        $params = array();
        $params[] = $this->personId;
        $params[] = $this->nucleoProfissionalId;
        $params[] = $this->inicio;
        $params[] = $this->fim;
        $params[] = $this->responsavel;
        $params[] = $this->titulacao;
        $params[] = $this->chSemanal;
        $params[] = $this->chMensal;
        $params[] = $this->referencia;
        $params[] = $this->instituicaoExecutora;
        $params[] = $this->funcao;
        $params[] = $this->cargaHorariaMunicipio;
        $params[] = $this->cargaHorariaRIS;
        $params[] = $this->graduacao;
        $params[] = $this->posGraduacao;
        $params[] = $this->tipoPreceptor;
        $params[] = $this->tempoExperienciaMeses;
        $params[] = $this->egresso;
        $params[] = $this->recebeValorizacaoFinanceira;
        $params[] = $this->vinculo;
        $params[] = $this->preceptorId;
        
        return SDatabase::execute($sql, $params,false);
    }
    

    public function delete()
    {

        if ( strlen($this->preceptorId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }
        
        // deleta modulofuncao
        foreach ( ResPreceptoriaModuloFuncao::obterPorPreceptor($this->preceptorId) as $modfun )
        {
            $modfun->delete();
        }

        foreach ( ResPreceptoriaEnfases::obterPorPreceptor($this->preceptorId) as $enf ) {
            $enf->delete();
        }

        foreach ( ResPreceptoriaTurmas::obterPorPreceptor($this->preceptorId) as $turm ) {
            $turm->delete();
        }

        $sql = 'DELETE FROM res.preceptoria
                      WHERE preceptorId = ?';

        $params = array($this->preceptorId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->preceptorId = null;
        }

        return $result;
    }


    /**
     * Retorna se pessoa é responsavel por algum nucleo ou enfase
     *
     * @param int $personId
     * @return boolean
     */
    public static function responsavelNucleoEnfase($personId)
    {
        $sqlVigencia = self::SQL_VIGENCIA;
        $sql =   "SELECT COUNT(*) > 0
                    FROM res.preceptoria P
                    INNER JOIN res.preceptoriaenfases PE
                     ON P.preceptorid = PE.preceptorid
                   WHERE personId = ?
                     AND {$sqlVigencia}
                     AND nucleoProfissionalId IS NOT NULL
                     AND PE.enfaseId IS NOT NULL
                     AND P.responsavel IS TRUE";

        $result = SDatabase::query($sql, array($personId));

        return $result[0][0] == DB_TRUE;
    }
    
    /**
     * Retorna se enfase e o nucleo que a pessoa é responsável e se referencia a esfase 
     *
     * @param int $personId
     * @return array
     */
    public static function responsavelNucleoEnfaseReferencia($personId)
    {
        $sqlVigencia = self::SQL_VIGENCIA;
        $sql =   "SELECT P.preceptorid,
                         enfaseid,
                         nucleoprofissionalid,
                         referencia
                    FROM res.preceptoria P
                    INNER JOIN res.preceptoriaenfases PE
                     ON P.preceptorid = PE.preceptorid
                   WHERE personId = ?
                     AND {$sqlVigencia}
                     AND nucleoProfissionalId IS NOT NULL
                     AND PE.enfaseId IS NOT NULL";

        $result = SDatabase::query($sql, array($personId));

        return $result[0];
    }

    /**
     * Verifica se a pessoa informada é responsável pelo nucleo e enfase da oferecida infoRmada
     * 
     * @param int $personId, $oferecimentoUnidadeTematidaId
     * @return boolean
     */
    public static function responsavelNucleoEnfaseDaOferecida($personId, $oferecimentoUnidadeTematidaId)
    {
        $sql = "  SELECT count(AA.personid) >= 1 
                    FROM res.preceptoria AA
              INNER JOIN res.preceptoriaenfases PE
                     ON AA.preceptorid = PE.preceptorid
              INNER JOIN res.enfaseDaUnidadeTematica BB
                      ON PE.enfaseid = BB.enfaseid
              INNER JOIN res.nucleoDaUnidadeTematica CC
                      ON AA.nucleoprofissionalid = CC.nucleoprofissionalid
              INNER JOIN res.ofertadeunidadetematica DD
                      ON CC.unidadeTematicaId = DD.unidadeTematicaId 
                   WHERE AA.personid = ?
                     AND (AA.responsavel IS TRUE 
                     AND DD.ofertadeunidadetematicaid = ?) 
                      OR AA.referencia IS TRUE ";
        
        $result = SDatabase::query($sql, array($personId, $oferecimentoUnidadeTematidaId));

        return $result[0][0];
    }

    public function retornaTipoDePreceptorParaOModuloDaOferta($ofertaDeUnidadeTematicaId)
    {
        $oferta = new ResOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
        $oferta->unidadeTematica->moduloId;

        $preceptorModulosFuncoes = ResPreceptoriaModuloFuncao::obterPorPreceptor($this->preceptorId);

        foreach ($preceptorModulosFuncoes as $moduloFuncao) {
            if ($oferta->unidadeTematica->moduloId == $moduloFuncao->moduloId) {
                return $moduloFuncao->funcao;
            }
        }
    }

    public function retornaPreceptorLogado()
    {
        $MIOLO = MIOLO::getInstance();

        // Obtem pessoa
        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson = $MIOLO->getBusiness('basic', 'BusPerson');
        $personData = $busPerson->getPersonByMioloUserName($mioloUserName);

        $filters = new stdClass();
        $filters->personid = $personData->personId;
        $preceptor = ResPreceptoria::search($filters);
        return $preceptor[0];
    }
    
}
?>