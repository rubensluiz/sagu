<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers: \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class ResCargaHorariaComplementar extends SType
{
        /**
     * @AttributeType integer
     * 
     */
    protected $ocorrenciaDeContratoId;
    /**
     * @AttributeType integer
     * 
     */
    protected $cargaHorariaComplementarId;
    /**
     * @AttributeType integer
     * 
     */
    protected $tipoDeCargaHorariaComplementarId;
    /**
     * @AttributeType integer
     * 
     */
    protected $ofertaDeUnidadeTematicaId;
    /**
     * @AttributeType integer
     * 
     */
    protected $residenteId;
    /**
     * @AttributeType real
     * 
     */
    protected $cargaHoraria;
    /**
     * @AttributeType character varying
     * 
     */
    protected $justificativa;


    /**
     * Atributo externo
     *
     * @var string
     */
    protected $ofertaDeUnidadeTematicaIdDescription;

    /**
     * Total de carga horaria na unidade tematica
     *
     * @var int
     */
    protected $cargaHorariaNaOfertaDeUnidadeTematica;

    protected $tipoCargaHoraria;

    public function __construct($cargaHorariaComplementarId = NULL)
    {
        if ( (strlen($cargaHorariaComplementarId)  >  0) )
        {
            $this->cargaHorariaComplementarId = $cargaHorariaComplementarId;
            $this->populate();
        }
    }

    public function  __get($name)
    {
        if ( $name == 'ofertaDeUnidadeTematicaIdDescription' && strlen($this->ofertaDeUnidadeTematicaId) > 0 && !$this->ofertaDeUnidadeTematicaIdDescription )
        {
            $obj  = new ResOfertaDeUnidadeTematica($this->ofertaDeUnidadeTematicaId);
            $this->ofertaDeUnidadeTematicaIdDescription = $obj->nome;
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT A.cargahorariacomplementarid
                  FROM res.cargahorariacomplementar A';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE ' . substr($where, 5);
        }

        $sql.=' ORDER BY A.cargahorariacomplementarid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ResCargahorariacomplementar($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT A.cargahorariacomplementarid,
                       res.tipoDeCargaHorariaComplementarId,
                       res.ofertadeunidadetematicaid,
                       res.residenteid,
                       res.cargahoraria,
                       res.justificativa,
                       res.tipocargahoraria
                  FROM res.cargahorariacomplementar A';
        $args = array();

        if ( strlen($filters->cargaHorariaComplementarId)  >  0 )
        {
            $where.=' AND A.cargahorariacomplementarid = ?';
            $args[] = $filters->cargaHorariaComplementarId;
        }

        if ( strlen($filters->tipoDeCargaHorariaComplementarId)  >  0 )
        {
            $where.=' AND A.tipoDeCargaHorariaComplementarId = ?';
            $args[] = $filters->tipoDeCargaHorariaComplementarId;
        }

        if ( strlen($filters->ofertaDeUnidadeTematicaId)  >  0 )
        {
            $where.=' AND A.ofertaDeUnidadeTematicaId = ?';
            $args[] = $filters->ofertaDeUnidadeTematicaId;
        }

        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND A.residenteid = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->cargaHoraria)  >  0 )
        {
            $where.=' AND A.cargahoraria = ?';
            $args[] = $filters->cargaHoraria;
        }

        if ( strlen($filters->justificativa)  >  0 )
        {
            $where.=' AND UNACCENT(A.justificativa) ILIKE UNACCENT(?) ';
            $args[] = $filters->justificativa.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY A.cargahorariacomplementarid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }
    
        public static function searchGridOcorrencia($filters  =  null)
    {
        $sql = 'SELECT TO_CHAR(datahora, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') AS DATA,
                       TO_CHAR(datahora, \''.SAGU::getParameter('BASIC', 'MASK_TIME').'\') AS HORA,
                       b.descricao, 
                       a.observacoes, 
                       a.fileId
                  FROM res.ocorrenciadecontrato a 
            INNER JOIN res.statusdaocorrenciadecontrato b 
                 USING (statusdaocorrenciadecontratoid)';
        $args = array();
        
         if ( strlen($filters->data)  >  0 )
        {
            $where.=' AND datahora = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->data;
        }
        
         if ( strlen($filters->hora)  >  0 )
        {
            $where.=' AND datahora = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIME').'\')';
            $args[] = $filters->hora;
        }
        
         if ( strlen($filters->observacoes)  >  0 )
        {
            $where.=' AND UNACCENT(b.descricao) ILIKE UNACCENT(?) ';
            $args[] = $filters->descricao.'%';
        }

         if ( strlen($filters->observacoes)  >  0 )
        {
            $where.=' AND UNACCENT(a.observacoes) ILIKE UNACCENT(?) ';
            $args[] = $filters->observacoes.'%';
        }
        
        if ( strlen($filters->fileId)  >  0 )
        {
            $where.=' AND a.fileId = ?';
            $args[] = $filters->fileId;
        }
        
         if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND a.residenteId = ?';
            $args[] = $filters->residenteId;
        }
        
         if ( strlen($filters->ocorrenciaDeContratoId)  >  0 )
        {
            $where.=' AND b.ocorrenciaDeContratoId = ?';
            $args[] = $filters->ocorrenciaDeContratoId;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 7).'
                   ORDER BY b.descricao';
        }
        
        $result = SDatabase::query(SAGU::prepare($sql, $args));

        return $result;
                
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT A.username,
                       TO_CHAR(A.datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       A.ipaddress,
                       A.cargahorariacomplementarid,
                       A.tipoDeCargaHorariaComplementarId,
                       A.ofertadeunidadetematicaid,
                       A.residenteid,
                       A.cargahoraria,
                       A.justificativa,
                       res.obtemcargahorariadaofertasdeunidadetematica(A.residenteId, A.ofertadeunidadetematicaid, TRUE) AS cargaHorariaNaOfertaDeUnidadeTematica,
                       A.tipocargahoraria
                  FROM res.cargahorariacomplementar A
                 WHERE A.cargahorariacomplementarid = ?';
        $result = SDatabase::query($sql, array($this->cargaHorariaComplementarId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName,
                $this->dateTime,
                $this->ipAddress,
                $this->cargaHorariaComplementarId,
                $this->tipoDeCargaHorariaComplementarId,
                $this->ofertaDeUnidadeTematicaId,
                $this->residenteId,
                $this->cargaHoraria,
                $this->justificativa,
                $this->cargaHorariaNaOfertaDeUnidadeTematica,
                $this->tipoCargaHoraria) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->cargaHorariaComplementarId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO res.cargahorariacomplementar 
                            (cargahorariacomplementarid,
                             tipoDeCargaHorariaComplementarId,
                             ofertadeunidadetematicaid,
                             residenteid,
                             cargahoraria,
                             justificativa,
                             tipocargahoraria)
                     VALUES (?, ?, ?, ?, ?, ?, ?)';
        $sqlPK = "SELECT nextval('res.cargahorariacomplementar_cargahorariacomplementarid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $cargaHorariaComplementarId = $result[0][0];
        $args = array($cargaHorariaComplementarId, $this->tipoDeCargaHorariaComplementarId, $this->ofertaDeUnidadeTematicaId, $this->residenteId, $this->cargaHoraria, $this->justificativa, $this->tipoCargaHoraria);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->cargaHorariaComplementarId = $cargaHorariaComplementarId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE res.cargahorariacomplementar
                   SET tipoDeCargaHorariaComplementarId = ?,
                       ofertadeunidadetematicaid = ?,
                       residenteid = ?,
                       cargahoraria = ?,
                       justificativa = ?,
                       tipocargahoraria = ?
                 WHERE cargahorariacomplementarid = ?';
        $args = array(
            $this->tipoDeCargaHorariaComplementarId,
            $this->ofertaDeUnidadeTematicaId,
            $this->residenteId,
            $this->cargaHoraria,
            $this->justificativa,
            $this->tipoCargaHoraria,
            $this->cargaHorariaComplementarId,
        );
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->cargaHorariaComplementarId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM res.cargahorariacomplementar
                      WHERE cargahorariacomplementarid = ?';
        $args = array($this->cargaHorariaComplementarId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->cargaHorariaComplementarId = null;
        }

        return $result;
    }

}
?>