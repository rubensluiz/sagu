<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class ResParticipacaoEmAtividadeExtra extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $atividadeExtraId;
    /**
     * @AttributeType character varying
     * 
     */
    protected $residenteId;
    /**
     * @AttributeType real
     * 
     */
    protected $cargaHoraria;
    
    /**
     * @AttributeType real
     * 
     */
    protected $atividadeExtra;

    /**
     *
     * @var ResResidente
     */
    protected $residente;

    /**
     * Atalho para obter nome de residente e popular subdetail
     *
     * @var string
     */
    protected $residentName;
    
    public function __get($name)
    {
        if ( $name == 'atividadeExtra' && !(count($this->atividadeExtra) > 0) && (strlen($this->atividadeExtraId) > 0) )
        {
            // Atividade extra
            $this->atividadeExtra = new ResAtividadeExtra($this->atividadeExtraId);
        }

        if ( in_array($name, array('residente', 'residentName')) && ( strlen($this->residenteId) > 0 ) && $this->needCheckPopulate($name) )
        {
            $this->residente = new ResResidente($this->residenteId);
            $this->residentName = $this->residente->physicalPerson->name;
        }

        return parent::__get($name);
    }
    
    
    public function __construct($atividadeExtraId = NULL, $residenteId = NULL)
    {
        if ( (strlen($atividadeExtraId)  >  0) && (strlen($residenteId)  >  0) )
        {
            $this->atividadeExtraId = $atividadeExtraId;
            $this->residenteId = $residenteId;
            $this->populate();
        }
    }
    
    public static function search($filters)
    {
        $sql = 'SELECT atividadeextraid,
                       residenteid
                  FROM res.participacaoematividadeextra';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY atividadeextraid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ResParticipacaoEmAtividadeExtra($result[$i][0], $result[$i][1]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT atividadeextraid,
                       residenteid,
                       cargahoraria
                  FROM res.participacaoematividadeextra';
        $args = array();

        if ( strlen($filters->atividadeExtraId)  >  0 )
        {
            $where.=' AND atividadeextraid = ?';
            $args[] = $filters->atividadeExtraId;
        }
        
        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND residenteid = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->cargaHoraria)  >  0 )
        {
            $where.=' AND cargahoraria = ?';
            $args[] = $filters->cargaHoraria;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY atividadeextraid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       atividadeextraid,
                       residenteid,
                       cargahoraria
                  FROM res.participacaoematividadeextra
                 WHERE atividadeextraid = ? AND residenteid = ?';
        $result = SDatabase::query($sql, array($this->atividadeExtraId, $this->residenteId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName, $this->dateTime, $this->ipAddress, $this->atividadeExtraId, $this->residenteId, $this->cargaHoraria) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $filters = new stdClass();
        $filters->atividadeExtraId = $this->atividadeExtraId;
        $filters->residenteId = $this->residenteId;
        if ( count(self::search($filters)) > 0 )
        {
            $retVal = $this->update();
        }
        else
        {
            $retVal = $this->insert();
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO res.participacaoematividadeextra 
                            (atividadeextraid, residenteid, cargahoraria)
                     VALUES (?, ?, ?)';
        $args = array($this->atividadeExtraId, $this->residenteId, $this->cargaHoraria);
        $result = SDatabase::execute($sql, $args);        
        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE res.participacaoematividadeextra
                   SET cargahoraria = ?
                 WHERE atividadeextraid = ? AND residenteid = ?';
        $args = array($this->cargaHoraria, $this->atividadeExtraId, $this->residenteId);
        
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( ( strlen($this->atividadeExtraId)  ==  0 ) || ( strlen($this->residenteId)  ==  0 ) )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM res.participacaoematividadeextra
                      WHERE atividadeextraid = ? AND residenteid = ?';
        $args = array($this->atividadeExtraId, $this->residenteId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->atividadeExtraId = null;
            $this->residenteId = null;
        }

        return $result;
    }
}


?>