<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Joao Francisco Padilha Souza
 *
 * @since
 * Class created on 15/07/2011
 */
class ResEnfase extends SType
{
    /**
     * @AttributeType integer
     */
    protected $enfaseId;
    /**
     * @AttributeType character varying
     */
    protected $descricao;
    /**
     * @AttributeType integer
     */
    protected $componenteId;
    /**
     * @AttributeType character varying
     */
    protected $abreviatura;

    public function __construct($enfaseId = NULL)
    {
        if ( (strlen($enfaseId)  >  0) )
        {
            $this->enfaseId = $enfaseId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT a.enfaseId, a.descricao, a.abreviatura, b.descricao
                  FROM res.enfase a 
            LEFT JOIN res.componente b
                 USING (componenteId)';
        $where = '';
        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $key = trim($key);
                $value = trim($value);
                $where .= " AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql .= ' WHERE '.substr($where, 5);
        }

        $sql .= 'ORDER BY a.enfaseId ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ResEnfase($result[$i][0]);
        }

        return $retVal;
        
    }

    public static function getSearchGridSQL($filters  =  null)
    {
        $sql = 'SELECT a.enfaseId, a.descricao, a.abreviatura, b.descricao
                  FROM res.enfase a 
            LEFT JOIN res.componente b 
                 USING (componenteId)';

        $where = '';
        $params = array();
        if ( strlen($filters->enfaseId)  >  0 )
        {
            $where .= ' AND enfaseid = ?';
            $params[] = $filters->enfaseId;
        }

        if ( strlen($filters->descricao)  >  0 )
        {
            $where .= ' AND UNACCENT(a.descricao) ILIKE UNACCENT(?) ';
            $params[] = $filters->descricao.'%';
        }
        
        if ( strlen($filters->abreviatura)  >  0 )
        {
            $where .= ' AND UNACCENT(abreviatura) ILIKE UNACCENT(?) ';
            $params[] = $filters->abreviatura.'%';
        }
        
         if ( strlen($filters->componenteId)  >  0 )
        {
            $where .= ' AND componenteId = ?';
            $params[] = $filters->componenteId;
        }
        
        if ( strlen($where)  >  0 )
        {
           $sql .= ' WHERE '.substr($where, 4);
        }
        
        $sql .= ' ORDER BY a.enfaseId ';

        return SAGU::prepare($sql, $params);
    }

    /**
     * Mantem codigo legado funcionando
     * 
     * @param stdClass $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = self::getSearchGridSQL($filters);
        
        return preg_match('/ WHERE /', $sql) ? SDatabase::query($sql) : array();
    }
    
    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT username,
                       TO_CHAR(datetime, '" . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . "'),
                       ipaddress,
                       enfaseid,
                       descricao,
                       abreviatura,
                       componenteId
                  FROM res.enfase
                 WHERE enfaseid = ?";

        $result = SDatabase::query($sql, array($this->enfaseId));

        if ( !isset($result[0][1]) )
        {
            throw new Exception(_M('Registro inexistente. (@1)', $module, __CLASS__));
        }

        list( $this->userName,
              $this->dateTime,
              $this->ipAddress,
              $this->enfaseId,
              $this->descricao,
              $this->abreviatura,
              $this->componenteId) = $result[0];
       }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->enfaseId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        return $retVal;
    }

    private function insert()
    {
        $sqlPK = "SELECT nextval('res.enfase_enfaseid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $enfaseId = $result[0][0];

        $sql = 'INSERT INTO res.enfase
                            (enfaseid,
                             descricao,
                             componenteId,
                             abreviatura)
                     VALUES (?, ?, ?, ?)';

        $params = array();
        $params[] = $enfaseId;
        $params[] = $this->descricao;
        $params[] = $this->componenteId;
        $params[] = $this->abreviatura;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->enfaseId = $enfaseId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE res.enfase
                   SET descricao = ?,
                       abreviatura = ?,
                       componenteId = ?
                 WHERE enfaseid = ?';

        $params = array();
        $params[] = $this->descricao;
        $params[] = $this->abreviatura;
        $params[] = $this->componenteId;
        $params[] = $this->enfaseId;

        return SDatabase::execute($sql, $params);
    }

    public function delete()
    {
        if ( strlen($this->enfaseId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM res.enfase
                      WHERE enfaseid = ?';

        $params = array($this->enfaseId);
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->enfaseId = null;
        }

        return $result;
    }

    public static function listRecords()
    {
        $sql = "SELECT enfaseid,
                       B.descricao || ' - ' || A.descricao,
                       A.componenteId
                  FROM res.enfase A INNER JOIN res.componente B ON A.componenteid = B.componenteid
              ORDER BY enfaseId";

        $result = (array) SDatabase::query($sql);

        $list = array();
        foreach ( $result as $row )
        {
            $list[ $row[0] ] = $row[1];
        }

        return $list;
    }

    public static function retornaEnfasesPorComponente($componenteId)
    {
        $sql = "SELECT enfaseid,
                       descricao,
                       componenteId
                  FROM res.enfase
                  WHERE componenteId = " . $componenteId . "
              ORDER BY enfaseId";

        $result = (array) SDatabase::query($sql);

        $list = array();
        foreach ( $result as $row )
        {
            $list[ $row[0] ] = $row[1];
        }

        return $list;
    }
}
?>