<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 16/07/2011
 *
 */
class ResOfertaDeUnidadeTematica extends SType
{
    /**
     * @AttributeType integer
     *
     */
    protected $ofertaDeUnidadeTematicaId;

    /**
     * @AttributeType integer
     *
     */
    protected $turmaId;

    /**
     * @AttributeType integer
     *
     */
    protected $unidadeTematicaId;
    /**
     * @AttributeType date
     *
     */
    protected $inicio;
    /**
     * @AttributeType date
     *
     */
    protected $fim;

    /**
     * @AttributeType timestamp
     *
     */
    protected $encerramento;

    /**
     * @AttributeType int
     *
     */
    protected $encerradoPor;

    /**
     * @type ResUnidadeTematica
     */
    protected $unidadeTematica;

    /**
     * @type ResTurma
     */
    protected $turma;

    /**
     * @type ResOfertaDoResidente
     */
    protected $ofertaDoResidente;

    /**
     * @type object
     */
    protected $encontros = array();

    /**
     * @AssociationType ResTemaDaUnidadeTematica
     */
    protected $temas = null;

    /**
     * @AssociationType ResOfertaDeUnidadeTematicaDocente
     */
    protected $docentes = null;

    /**
     * @AssociationType ResOfertaDeUnidadeTematicaPreceptorInstituicao
     */
    protected $preceptoresInstituicoes = null;

    /**
     * @var string
     */
    protected $cargaHorariaCursada;

     /**
     *
     * @AssociatinType BasLegalPerson
     */
    protected $instituicaoFormadora;

        /**
     * @AttributeType integer
     *
     */
    protected $subStatusId;

    /**
     * @AttributeType integer
     *
     */
    protected $subStatusMotivoId;

    protected $nome;

    protected $semestre;

    /**
     * @AttributeType real
     */
    protected $cargaHoraria;

    /**
     * @AssociationType ResOfertaDeUnidadeTematicaTipos
     */
    protected $ofertaDeUnidadeTematicaTipos = null;

    protected $cargaHorariaComplementares = null;

    /**
     * @AttributeType integer
     */
    protected $ofertaDeUnidadeTematicaIdPai;

    protected $subOfertaDeUnidadeTematicas = null;


    protected $acompanhamentoEncontro;

    const ACOMPANHAMENTO_ENCONTRO_SIMPLES = 'S';
    const ACOMPANHAMENTO_ENCONTRO_DETALHADO = 'D';


    public function __construct($ofertaDeUnidadeTematicaId = NULL)
    {
        if ( (strlen($ofertaDeUnidadeTematicaId)  >  0) )
        {
            $this->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
            $this->populate();
        }
    }

    public function  __get($name)
    {
        $MIOLO = MIOLO::getInstance();
        if ( $name == 'unidadeTematica' && is_null($this->unidadeTematica) && strlen($this->unidadeTematicaId) > 0 )
        {
            $this->unidadeTematica = new ResUnidadeTematica($this->unidadeTematicaId);
        }

        if ( $name == 'turma' && is_null($this->turma) && strlen($this->turmaId) > 0 )
        {
            $this->turma = new ResTurma($this->turmaId);
        }

        if ( $name == 'ofertaDeUnidadeTematicaTipos' )
        {
            if ( (is_null($this->ofertaDeUnidadeTematicaTipos) > 0) && (strlen($this->ofertaDeUnidadeTematicaId) > 0) )
            {
                $filters = new stdClass();
                $filters->ofertaDeunidadeTematicaId = $this->ofertaDeUnidadeTematicaId;

                $this->ofertaDeUnidadeTematicaTipos = ResOfertaDeUnidadeTematicaTipos::search($filters);
            }
        }

        // Temas
        if ( $name == 'temas' )
        {
            if ( is_null($this->temas) && (strlen($this->ofertaDeUnidadeTematicaId) > 0) )
            {
                $filters = new stdClass();
                $filters->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
                $this->temas = ResTemaDaUnidadeTematica::search($filters);
            }
        }

        if ( $name == 'docentes' )
        {
            if ( is_null($this->docentes) && (strlen($this->ofertaDeUnidadeTematicaId) > 0) )
            {
                $filters = new stdClass();
                $filters->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
                $this->docentes = ResOfertaDeUnidadeTematicaDocente::search($filters);
            }
        }

        if ( $name == 'preceptoresInstituicoes' )
        {
            if ( is_null($this->preceptoresInstituicoes) && (strlen($this->ofertaDeUnidadeTematicaId) > 0) )
            {
                $filters = new stdClass();
                $filters->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
                $this->preceptoresInstituicoes = ResOfertaDeUnidadeTematicaPreceptorInstituicao::search($filters);
            }
        }

        if ( $name == 'ofertaDoResidente' && is_null($this->ofertaDoResidente) && strlen($this->ofertaDeUnidadeTematicaId) > 0 )
        {
            $filters = new stdClass();
            $filters->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
            $this->ofertaDoResidente = ResOfertaDoResidente::search($filters);
        }

        if ( $name == 'encontros' )
        {
            if ( (is_null($this->encontros) || !(count($this->encontros) > 0)) && strlen($this->ofertaDeUnidadeTematicaId) > 0 )
            {
                $filters = new stdClass();
                $filters->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
                $this->encontros = ResEncontro::search($filters);
            }
        }

        if ( $name == 'cargaHorariaComplementares' )
        {
            if ( (is_null($this->cargaHorariaComplementares)) && strlen($this->ofertaDeUnidadeTematicaId) > 0 )
            {
                $filters = new stdClass();
                $filters->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
                $this->cargaHorariaComplementares = ResCargaHorariaComplementar::search($filters);
            }
        }

        if ( $name == 'subOfertaDeUnidadeTematicas' )
        {
            if ( (!count($this->subOfertaDeUnidadeTematicas) > 0) && (strlen($this->ofertaDeUnidadeTematicaId) > 0) )
            {
                $filters = new stdClass();
                $filters->ofertadeunidadetematicaidpai = $this->ofertaDeUnidadeTematicaId;

                $this->subOfertaDeUnidadeTematicas = ResOfertaDeUnidadeTematica::search($filters);
            }
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT A.ofertadeunidadetematicaid
                  FROM res.ofertadeunidadetematica A';

        $where = '';
        foreach ( $filters  as  $key => $value )
        {
            if ( (($key == 'inicio')||($key == 'fim')) && (strlen($value) > 0) )
            {
                $where.=" AND A.{$key} = TO_DATE('{$value}', '" . SAGU::getParameter('BASIC', 'MASK_DATE')."')";
            }
            else if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY A.ofertadeunidadetematicaid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ResOfertaDeUnidadeTematica($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * CUIDADO: Esta funcao está sendo utilizada em mais de um lugar:
     * FrmUnidadesTematicasDoPreceptor
     * FrmOfertaDeUnidadeTematicaSearch
     * FrmConsultaDoResidente
     *
     * @param stdClass $filters
     * <br><b>orderByInicioDescricao</b> (boolean) Ordena por inicio e descricao
     */
    public static function getSearchGridSQL($filters  =  null)
    {
        $action = MIOLO::getCurrentAction();

        if ( $action == 'main:process:ofertaDeUnidadeTematica' || $action == 'main:process:matriculaEmLote' || $action == 'main:process:matriculaRetroativa' )
        {
            $columns = ' A.ofertadeunidadetematicaid, 
                        A.unidadetematicaid, 
                        D.tipo AS tipomodulo, 
                        (SELECT TT.descricao || \' / \' || (SELECT cc.descricao FROM res.componente CC WHERE CC.componenteid = TT.componenteid) FROM res.turma TT WHERE TT.turmaid = A.turmaid) AS turma,';
        }
        else
        {
            $columns = ' A.ofertadeunidadetematicaid, D.tipo AS tipomodulo, ';
        }

        $sql = 'SELECT DISTINCT ' . $columns . '
                   
                   D.nome AS modulo, 
                   B.descricao,
                   A.nome,
                   B.periodo,                     
                   --Núcleo profissional
                   (SELECT ARRAY_TO_STRING(ARRAY(
                        SELECT descricao
                          FROM res.nucleoDaUnidadeTematica NDUT
                    INNER JOIN res.nucleoProfissional NP
                            ON NDUT.nucleoProfissionalId = NP.nucleoProfissionalId
                         WHERE NDUT.unidadeTematicaId = B.unidadeTematicaId
                      ORDER BY NP.descricao), \', \')),
                   --Ênfase
                   (SELECT ARRAY_TO_STRING(ARRAY(
                        SELECT descricao
                          FROM res.enfaseDaUnidadeTematica EDUT
                    INNER JOIN res.enfase E
                            ON EDUT.enfaseId = E.enfaseId
                         WHERE EDUT.unidadeTematicaId = B.unidadeTematicaId
                      ORDER BY E.descricao), \', \')),

                   TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                   TO_CHAR(A.fim, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                   A.cargahoraria || \'h\',
                   TO_CHAR(A.encerramento, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\')
              FROM res.ofertadeunidadetematica A
        INNER JOIN res.unidadeTematica B
                ON A.unidadeTematicaId = B.unidadeTematicaId
        LEFT JOIN res.ofertadeunidadetematicapreceptoresinstituicoes C
                ON C.ofertadeunidadetematicaid = A.ofertadeunidadetematicaid
        INNER JOIN res.modulo D 
                ON B.moduloid = D.moduloid';
        $args = array();

        $where = null;

        if ( strlen($filters->instituicaoExecutora) > 0 )
        {
            $where .= ' AND C.instituicaoexecutoraid = ?';
            $args[] = $filters->instituicaoExecutora;
        }

        if ( strlen($filters->ofertaDeUnidadeTematicaId)  >  0 )
        {
            $where.=' AND A.ofertadeunidadetematicaid = ?';
            $args[] = $filters->ofertaDeUnidadeTematicaId;
        }

        if ( strlen($filters->unidadeTematicaId)  >  0 )
        {
            $where.=' AND A.unidadetematicaid = ?';
            $args[] = $filters->unidadeTematicaId;
        }

        if ( strlen($filters->apenasPrimeiroAno)  >  0 )
        {
            $where.=" AND A.inicio BETWEEN TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE')."') AND (TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE')."')+ interval '1 year') ";
            $where.=" AND A.fim BETWEEN TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE')."') AND (TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE')."')+ interval '1 year') ";

            $args[] = $filters->inicio;
            $args[] = $filters->inicio;
            $args[] = $filters->inicio;
            $args[] = $filters->inicio;
        }

        if ( strlen($filters->apenasSegundoAno)  >  0 )
        {
            $where.=" AND TO_CHAR(A.inicio, 'yyyy') >= ((SELECT EXTRACT('year' FROM (TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE')."')))) + '1'::NUMERIC)::TEXT ";

            $args[] = $filters->inicio;
        }

        if ( strlen($filters->apenasTerceiroAno)  >  0 )
        {
            $where.=" AND TO_CHAR(A.inicio, 'yyyy') >= ((SELECT EXTRACT('year' FROM (TO_DATE(?, '".SAGU::getParameter('BASIC', 'MASK_DATE')."')))) + '2'::NUMERIC)::TEXT ";

            $args[] = $filters->inicio;
        }

        if ( strlen($filters->apenasExtracurricular)  >  0 )
        {
            $where.=" AND NOT EXISTS (SELECT 1
                                       FROM res.nucleoDaUnidadeTematica NU
                                 INNER JOIN res.enfaseDaUnidadeTematica EU
                                         ON (NU.unidadeTematicaId = EU.unidadeTematicaId)
                                      WHERE NU.unidadeTematicaId = A.unidadeTematicaId
                                        AND nucleoProfissionalId = ?
                                        AND enfaseId = ?)";

            $args[] = $filters->nucleoProfissionalId;
            $args[] = $filters->enfaseId;
        }

        if ( strlen($filters->inicio)  >  0 )
        {
            $where.=' AND A.inicio >= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->inicio;
        }

        if ( strlen($filters->fim)  >  0 )
        {
            $where.=' AND A.fim <= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $args[] = $filters->fim;
        }

        if ( strlen($filters->descricao)  >  0 )
        {
            $where.=' AND UNACCENT(B.descricao) ILIKE UNACCENT(?)';
            $args[] = $filters->descricao . '%';
        }

        if ( strlen($filters->periodo)  >  0 )
        {
            $where.=' AND B.periodo = ?';
            $args[] = $filters->periodo;
        }

        if ( strlen($filters->turmaId)  >  0 )
        {
            $where.=' AND A.turmaid = ?';
            $args[] = $filters->turmaId;
        }

        if ( ( strlen($filters->betweenInicio) > 0 ) && ( strlen($filters->betweenFim) > 0 ) )
        {
            $where .= ' AND (
                        A.fim >= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')
                    AND A.inicio <= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\') ) ';
            $args[] = $filters->betweenInicio;
            $args[] = $filters->betweenFim;
        }

        // Caso TRUE, filtra apenas que ja foram encerradas, senao, apenas que nao foram encerradas
        if ( in_array($filters->encerradas, array(DB_TRUE, DB_FALSE)) )
        {
            $condition = $filters->encerradas == DB_TRUE ? 'NOT' : '';
            $where .= " AND A.encerramento IS {$condition} NULL";
        }

        if ( count($filters->nucleosProfissionais) > 0 )
        {
            $tmpWhere = '';
            foreach ( $filters->nucleosProfissionais as $nucleoProfissionalId )
            {
                $tmpWhere .= " OR EXISTS (SELECT 1
                                            FROM res.nucleoDaUnidadeTematica
                                           WHERE unidadeTematicaId = A.unidadeTematicaId
                                             AND nucleoProfissionalId = ?) ";

                $args[] = $nucleoProfissionalId;
            }

            $where .= " AND (1=0 {$tmpWhere})";
        }

        if ( count($filters->enfases) > 0 )
        {
            $tmpWhere = '';
            foreach ( $filters->enfases as $enfaseId )
            {
                $tmpWhere .= " OR EXISTS (SELECT 1
                                             FROM res.enfaseDaUnidadeTematica
                                            WHERE unidadeTematicaId = A.unidadeTematicaId
                                              AND enfaseId = ?) ";
                $args[] = $enfaseId;
            }

            $where .= " AND (1=0 {$tmpWhere})";
        }

        // instituicaoFormadora
        if ( strlen($filters->instituicaoFormadora) > 0 )
        {
            $where .= ' AND A.instituicaoFormadora = ?';
            $args[] = $filters->instituicaoFormadora;
        }

        if ( strlen($filters->ofertaDeUnidadeTematicaIdPai) > 0 )
        {
            $where .= ' AND A.ofertadeunidadetematicaidpai = ?';
            $args[] = $filters->ofertaDeUnidadeTematicaIdPai;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        // ordering
        $order = $filters->orderByInicioDescricao ? 'A.inicio DESC, B.descricao' : 'B.periodo, B.descricao, A.inicio';
        $sql .= ' ORDER BY ofertadeunidadetematicaid';

        if (count($args) > 0) {
            return SAGU::prepare($sql, $args);
        }
    }

    /**
     * Mantem codigo legado funcionando
     *
     * @param stdClass $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = self::getSearchGridSQL($filters);

        return preg_match('/ WHERE /', $sql) ? SDatabase::query($sql) : array();
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT A.username,
                       TO_CHAR(A.datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       A.ipaddress,
                       A.ofertadeunidadetematicaid,
                       A.unidadetematicaid,
                       TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(A.fim, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       TO_CHAR(A.encerramento, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') .'\'),
                       A.encerradoPor,
                       A.instituicaoFormadora,
                       A.nome,
                       A.semestre,
                       A.cargaHoraria,
                       A.ofertadeunidadetematicaidpai,
                       A.turmaid,
                       A.acompanhamentoencontro
                  FROM res.ofertadeunidadetematica A
            INNER JOIN res.unidadeTematica B ON A.unidadeTematicaId = B.unidadeTematicaId
                 WHERE A.ofertadeunidadetematicaid = ?';
        $result = SDatabase::query($sql, array($this->ofertaDeUnidadeTematicaId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName,
                $this->dateTime,
                $this->ipAddress,
                $this->ofertaDeUnidadeTematicaId,
                $this->unidadeTematicaId,
                $this->inicio,
                $this->fim,
                $this->encerramento,
                $this->encerradoPor,
                $this->instituicaoFormadora,
                $this->nome,
                $this->semestre,
                $this->cargaHoraria,
                $this->ofertaDeUnidadeTematicaIdPai,
                $this->turmaId,
                $this->acompanhamentoEncontro) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->ofertaDeUnidadeTematicaId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }

        // Salva os temas
        foreach ( (array)$this->temas as $tema )
        {
            $tema->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
            $ok = $tema->save();
            if ( !$ok )
            {
                $msg = _M('Erro ao salvar os temas', $module);
                throw new Exception($msg);
            }
        }

        foreach ( (array)$this->docentes as $docente )
        {
            $docente->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
            $ok = $docente->save();
            if ( !$ok )
            {
                $msg = _M('Erro ao salvar os docentes', $module);
                throw new Exception($msg);
            }
        }

        foreach ( (array)$this->preceptoresInstituicoes as $preceptorInsti )
        {
            $preceptorInsti->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
            $ok = $preceptorInsti->save();
            if ( !$ok )
            {
                $msg = _M('Erro ao salvar os preceptores e instituições', $module);
                throw new Exception($msg);
            }
        }

        foreach ((array) $this->ofertaDeUnidadeTematicaTipos as $ofertaDeUnidadeTipo) {
            $ofertaDeUnidadeTipo->ofertaDeunidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
            $ok = $ofertaDeUnidadeTipo->save();

            if ( !$ok )
            {
                $msg = _M('Erro ao salvar os tipos');
                throw new Exception($msg);
            }
        }

        // Salva os encontros e as frequências
        foreach ( (array)$this->encontros as $encontro )
        {
            $encontro->ofertaDeUnidadeTematicaId = $this->ofertaDeUnidadeTematicaId;
            $ok = $encontro->save();
            if ( !$ok ) {
                $msg = _M('Erro ao salvar os encontros', $module);
                throw new Exception($msg);
            }
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO res.ofertadeunidadetematica 
                            (ofertadeunidadetematicaid,
                             unidadetematicaid,
                             inicio,
                             fim,
                             encerramento,
                             encerradoPor,
                             instituicaoFormadora,
                             nome,
                             semestre,
                             cargaHoraria,
                             ofertadeunidadetematicaidpai,
                             turmaid,
                             acompanhamentoencontro)
                     VALUES (?,
                             ?,
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                             TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') .'\'),
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?,
                             ?)';

        $sqlPK = "SELECT nextval('res.ofertadeunidadetematica_ofertadeunidadetematicaid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);

        $ofertaDeUnidadeTematicaId = $result[0][0];
        $args = array(
            $ofertaDeUnidadeTematicaId,
            $this->unidadeTematicaId,
            $this->inicio,
            $this->fim,
            $this->encerramento,
            $this->encerradoPor,
            $this->instituicaoFormadora,
            $this->nome,
            $this->semestre,
            $this->cargaHoraria,
            $this->ofertaDeUnidadeTematicaIdPai,
            $this->turmaId,
            $this->acompanhamentoEncontro);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE res.ofertadeunidadetematica
                   SET unidadetematicaid = ?,
                       inicio = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       fim = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       encerramento = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') .'\'),
                       encerradoPor = ?,
                       instituicaoFormadora = ?,
                       nome = ?,
                       semestre = ?,
                       cargaHoraria = ?,
                       ofertadeunidadetematicaidpai = ?,
                       turmaid = ?,
                       acompanhamentoencontro = ?
                 WHERE ofertadeunidadetematicaid = ?';
        $args = array(
            $this->unidadeTematicaId,
            $this->inicio,
            $this->fim,
            $this->encerramento,
            $this->encerradoPor,
            $this->instituicaoFormadora,
            $this->nome,
            $this->semestre,
            $this->cargaHoraria,
            $this->ofertaDeUnidadeTematicaIdPai,
            $this->turmaId,
            $this->acompanhamentoEncontro,
            $this->ofertaDeUnidadeTematicaId,
        );

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        $this->__get('encontros');
        $this->__get('temas');
        $this->__get('docentes');
        $this->__get('preceptoresInstituicoes');
        $this->__get('ofertaDoResidente');
        $this->__get('ofertaDeUnidadeTematicaTipos');
        $this->__get('cargaHorariaComplementares');
        $this->__get('subOfertaDeUnidadeTematicas');

        if ( strlen($this->ofertaDeUnidadeTematicaId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }


        foreach ( (array)$this->ofertaDeUnidadeTematicaTipos as $ofertaDeUnidadeTematicaTipo )
        {
            $ok = $ofertaDeUnidadeTematicaTipo->delete();
            if ( !$ok )
            {
                $msg = _M('Erro ao excluir os tipos da carga horaria oferta');
                throw new Exception($msg);
            }
        }

        foreach ( $this->cargaHorariaComplementares as $cargaHorariaComplementar )
        {
            $cargaHorariaComplementar->delete();
        }

        foreach ( $this->ofertaDoResidente as $ofertaDoResidente )
        {
            $ofertaDoResidente->delete();
        }

        foreach ( $this->preceptoresInstituicoes as $preceptorInsti )
        {
            $preceptorInsti->delete();
        }

        // excluir os encontros
        foreach ( $this->encontros as $encontro )
        {
            $encontro->delete();
        }

        // Deleta os temas da unidade temática
        foreach ( (array)$this->temas as $tema )
        {
            $ok = $tema->delete();
            if ( !$ok )
            {
                $msg = _M('Erro ao excluir os temas da unidade temática', $module);
                throw new Exception($msg);
            }
        }

        foreach ( (array)$this->docentes as $docente )
        {
            $ok = $docente->delete();
            if ( !$ok )
            {
                $msg = _M('Erro ao excluir os docentes da unidade temática', $module);
                throw new Exception($msg);
            }
        }


        foreach ( (array)$this->subOfertaDeUnidadeTematicas as $subOfertaDeUnidade )
        {
            $ok = $subOfertaDeUnidade->delete();
            if ( !$ok )
            {
                $msg = _M('Erro ao excluir as oferta de ativididades específicas');
                throw new Exception($msg);
            }
        }

        $sql = 'DELETE FROM res.ofertadeunidadetematica
                      WHERE ofertadeunidadetematicaid = ?';

        $args = array($this->ofertaDeUnidadeTematicaId);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ofertaDeUnidadeTematicaId = null;
        }

        return $result;
    }

    /**
     * Verifica se personId é ou ja foi preceptor de unidade tematica
     *
     * @param int $personId
     * @return boolean
     */

    public static function isPreceptor($personId)
    {
        $sql = "SELECT (
                            SELECT COUNT(*) 
                            FROM res.ofertaDeUnidadeTematica A INNER JOIN res.ofertadeunidadetematicapreceptoresinstituicoes B 
                              ON A.ofertadeunidadetematicaid = B.ofertadeunidadetematicaid 
                              INNER JOIN res.preceptoria C ON B.preceptorid = C.preceptorid
                            WHERE C.personId = ?
                        )
                     + (SELECT COUNT(*) FROM res.preceptoria WHERE personId = ? AND NOW()::date BETWEEN inicio AND COALESCE(fim, NOW()::date))";

        $args[] = $personId;
        $args[] = $personId;
        $result = SDatabase::query($sql, $args);

        return $result[0][0] > 0;
    }


    /**
     * Obtém matriz com o cross table de frequência para cada encontro e residente da oferta.
     *
     * @param integer $ofertaDeUnidadeTematicaId
     * @param integer $encontroId
     * @return object
     * personId
     * name
     * photoId
     * residenteId
     * ofertaDoResidenteId
     *
     * Colunas dinamicas para cada encontro
     * encontroId
     * inicio
     * fim
     * presenca_encontro_$encontroId
     * justificativa_encontro_$encontroId
     */
    public static function obtemTabelaFrequencias($ofertaDeUnidadeTematicaId, $encontroId = null, $filterOnlyActive = false, $filtersParam = null)
    {
         // Busca encontros da unidade temática
        $filters = new stdClass();
        if ( strlen($encontroId) > 0 )
        {
            $filters->encontroId = $encontroId;
        }
        $filters->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;

        // Filtra apenas por ativos
        $filterActives = '';
        if ( $filterOnlyActive )
        {
            $filterActives = ' AND (' . ResResidente::getSQLExpressionIsActive('C') . ' IS TRUE)';
        }

        if (!is_null($filtersParam->instituicaoExecutoraId)) {
            $filterActives .= ' AND C.instituicaoexecutora = ' . $filtersParam->instituicaoExecutoraId;
        }

        if (!is_null($filtersParam->enfaseId)) {
            $filterActives .= ' AND C.enfaseId = ' . $filtersParam->enfaseId;
        }

        $sql = "SELECT D.personId,
                       D.name,
                       D.photoId,
                       C.residenteId,
                       B.ofertaDoResidenteId
                   FROM res.ofertadeunidadetematica A
             INNER JOIN res.ofertadoresidente B
                     ON (A.ofertadeunidadetematicaid = B.ofertadeunidadetematicaid)
             INNER JOIN res.residente C
                     ON (B.residenteid = C.residenteid)
        INNER JOIN ONLY basphysicalperson D
                     ON (C.personid = D.personid)
                  WHERE A.ofertaDeUnidadeTematicaId = ?
                        {$filterActives}
               ORDER BY D.name";

        $param[] = $ofertaDeUnidadeTematicaId;
        $result = SDatabase::query($sql, $param);




        $filtroEncontro = new stdClass();
        $encontros = array();
        if (!is_null($filtersParam->inicio)) {
            $filtroEncontro->inicio = $filtersParam->inicio;
            $filtroEncontro->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
            $encontros = ResEncontro::retornaEncontrosPorData($filtroEncontro);
        }


        if ($encontroId > 0) {
            $filters->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
            $encontros = ResEncontro::search($filters);
        }


        $i = 0;
        foreach ( (array)$result as $row )
        {
            $resultObject = new stdClass();
            list($resultObject->personId,
                $resultObject->name,
                $resultObject->photoId,
                $resultObject->residenteId,
                $resultObject->ofertaDoResidenteId) = $row;


            $frequencias = array();
            foreach ( $encontros as $encontro ) {

                $filtersFrequencia = new stdClass();
                $filtersFrequencia->encontroId = $encontro->encontroId;
                $filtersFrequencia->residenteId = $resultObject->residenteId;

                $frequenciasProsEncontros = ResFrequencia::search($filtersFrequencia);

                //if (count($frequenciasProsEncontros) > 0) {

                    $frequencia = new stdClass();
                    $frequencia->tipo = $encontro->tipo;
                    $frequencia->encontroId = $encontro->encontroId;
                    $frequencia->inicio = $encontro->inicio;
                    $frequencia->fim = $encontro->fim;
                    $frequencia->presenca = $frequenciasProsEncontros[0]->presenca;
                    $frequencia->justificativa = $frequenciasProsEncontros[0]->justificativa;
                    $frequencia->subtatusId = $frequenciasProsEncontros[0]->subStatusId;
                    $frequencia->substatusMotivoId = $frequenciasProsEncontros[0]->subStatusMotivoId;
                    $frequencia->presencaDescricao = null;
                    $frequencia->cargaHoraria = $encontro->cargaHoraria;
                    $frequencias[] = $frequencia;

                    $resultObject->encontros = $frequencias;
                //}
            }

            $return[] = $resultObject;
        }

        return $return;
    }


    /**
     * Verifica todas as unidades temáticas oferecidas, considerando se a pessoa é responsável
     *
     * @param stdClass $filters
     * @return array()
     */
    public static function searchGridConsultaPreceptor($filters  =  null)
    {
        $sql = ' SELECT A.ofertadeunidadetematicaid,
                        C.nome,
                        B.descricao || \'- (\' || A.nome || \')\',
                        B.periodo,
                        TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                        TO_CHAR(A.fim, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                        TO_CHAR(A.encerramento, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME') . '\'),
                        D.preceptorid
                   FROM res.ofertadeunidadetematica A
             INNER JOIN res.unidadeTematica B
                     ON A.unidadeTematicaId = B.unidadeTematicaId
             INNER JOIN res.nucleodaunidadetematica NU
                     ON (A.unidadeTematicaId = NU.unidadeTematicaId)
             INNER JOIN res.modulo C 
                     ON B.moduloid = C.moduloid
             LEFT JOIN res.ofertadeunidadetematicapreceptoresinstituicoes D
                     ON D.ofertadeunidadetematicaid = A.ofertadeunidadetematicaid';

        $args = array();

        $where = null;

        // filtro unidade tematica
        if ( strlen($filters->unidadeTematicaId) > 0 )
        {
            $where.=' AND B.unidadeTematicaId = ?';
            $args[] = $filters->unidadeTematicaId;
        }

        //Núcleo profissional
        if ( strlen($filters->nucleoProfissionalId) > 0 )
        {
            $where .= ' AND NU.nucleoProfissionalId = ? ';
            $args[] = $filters->nucleoProfissionalId;
        }

        // Caso TRUE, filtra apenas que ja foram encerradas, senao, apenas que nao foram encerradas
        if ( in_array($filters->encerradas, array(DB_TRUE, DB_FALSE)) )
        {
            $condition = $filters->encerradas == DB_TRUE ? 'NOT' : '';
            $where .= " AND A.encerramento IS {$condition} NULL";
        }

        if ( $filters->referencia == DB_TRUE )
        {
            $where.=' AND ( A.ofertadeunidadetematicaid IN (SELECT M.ofertadeunidadetematicaid 
                                                                                FROM res.ofertadeunidadetematica M
                                                                          INNER JOIN res.enfasedaunidadetematica N
                                                                                  ON M.unidadetematicaid = N.unidadetematicaid 
                                                                               WHERE N.enfaseid = ?
                                                                                 AND M.encerramento IS NULL) )';
            $args[] = $filters->enfase;
        } else {
            $where .= " AND D.preceptorid = ?";
            $args[] = $filters->preceptorId;
        }

        $where .= " AND C.tipo = ?";
        $args[] = ResModulo::MODULO_TIPO_TRANSVERSAL;

        $order = $filters->orderByInicioDescricao ? 'A.inicio ASC, B.descricao' : 'B.periodo, B.descricao, A.inicio';

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql .= ' ORDER BY ' . $order . ', A.ofertadeunidadetematicaid';
        $result = SDatabase::query(SAGU::prepare($sql, $args));

        //Vamos fazer o "DISTINCT" via PHP, para nao mudar a ordenacao do SQL
        $return = array();
        $verificacao = array();
        foreach ( $result as $r )
        {
            if ( !array_key_exists($r[0], $verificacao) )
            {
                $verificacao[$r[0]] = '';
                $return[] = $r;
            }
        }

        return $return;
    }

    public function getInicio()
    {
        return $this->inicio;
    }

    public function getFim()
    {
        return $this->fim;
    }

    public function setInicio($inicio)
    {
        $this->inicio = $inicio;
    }

    public function setFim($fim)
    {
        $this->fim = $fim;
    }

    /**
     * @return int
     */
    public static function obterUnidadeTematicaId($ofertaDeUnidadeTematicaId)
    {
        $sql = "SELECT unidadeTematicaId FROM res.ofertaDeUnidadeTematica WHERE ofertaDeUnidadeTematicaId = ?";
        $res = SDatabase::query($sql, array($ofertaDeUnidadeTematicaId));

        return $res[0][0];
    }

    public function retornaDetalhesDaLotacaoDosPreceptores($preceptorId = null)
    {
        $this->__get('preceptoresInstituicoes');

        if (!is_null($preceptorId)) {
            foreach ($this->preceptoresInstituicoes as $lotacao) {
                $lotacoes[$lotacao->preceptor->preceptorId][] = array(
                    $lotacao->preceptor->preceptorId . ' - ' . $lotacao->preceptorIdDescription,
                    $lotacao->instituicaoExecutora->name
                );
            }

            return $lotacoes[$preceptorId];
        }


        foreach ($this->preceptoresInstituicoes as $lotacao) {
            $lotacoes[] = array(
                $lotacao->preceptor->preceptorId . ' - ' . $lotacao->preceptorIdDescription,
                $lotacao->instituicaoExecutora->name
            );
        }

        return $lotacoes;
    }

    public static function semestres()
    {
        $semestres = array();
        for ($i = 1; $i <=5; $i++) {
            $semestres[$i] = $i . 'º semestre';
        }

        return $semestres;

    }

    public function retornaDetalhesDaCargaHorariaDaOfertaDaUnidade()
    {

        $this->__get('ofertaDeUnidadeTematicaTipos');
        foreach ($this->ofertaDeUnidadeTematicaTipos as $tipoOfertaUnidade) {

            $cargaHorariaProTipo = ResEncontro::retornaQuantidadeDeHorasJaDefinidaProTipoNaUnidadeTematica($this->ofertaDeUnidadeTematicaId, $tipoOfertaUnidade->tipo);

            $tipo = new ResTipoDeUnidadeTematica($tipoOfertaUnidade->tipo);
            $cargaHorariaPraAprovacao = (($tipoOfertaUnidade->cargaHoraria/100) * $tipo->frequenciaMinima);
            $tiposArray[] = array(
                $tipo->descricao,
                $tipoOfertaUnidade->cargaHoraria,
                $cargaHorariaProTipo,
                $tipo->frequenciaMinima,
                $cargaHorariaPraAprovacao,
                $tipoOfertaUnidade->cargaHoraria -  $cargaHorariaPraAprovacao
            );
        }

        return $tiposArray;
    }

    /**
     * @return bool
     * método respon?avel por validar a carga horária da oferta, a carga horaria de todas as ofertas da mesma atividade do módulo, não pode ser maior do que
     * a configurada no cadastro da mesma
     */
    public function cargaHorariaOfertaValida()
    {
        $filter = new stdClass();
        $filter->unidadeTematicaId = $this->unidadeTematicaId;
        $ofertas = ResOfertaDeUnidadeTematica::search($filter);

        $cargaHorariaJaDefinidaPraUnidadeTematica = 0;
        foreach ($ofertas as $oferta) {
            if ($this->ofertaDeUnidadeTematicaId != $oferta->ofertaDeUnidadeTematicaId) {
                $cargaHorariaJaDefinidaPraUnidadeTematica += $oferta->cargaHoraria;
            }
        }

        $cargaHorariaTotalRequerida = $cargaHorariaJaDefinidaPraUnidadeTematica + $this->cargaHoraria;

        if ($cargaHorariaTotalRequerida > $this->unidadeTematica->cargaHoraria) {
            return false;
        }

        return true;
    }

    public function retornaDatasDosEncontros()
    {
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT 
                       DISTINCT TO_CHAR(A.inicio, \'YYYY-MM-DD\') as inicio
                  FROM res.encontro A
                 WHERE A.ofertadeunidadetematicaid = ? ORDER BY inicio';
        $result = SDatabase::query($sql, array($this->ofertaDeUnidadeTematicaId));

        $datasDosEncontros = array();
        foreach ($result as $data) {
            $dataArray = explode('-', $data[0]);

            $datasDosEncontros[$data[0]] = $dataArray[2].'/'.$dataArray[1].'/'.$dataArray[0];
        }

        return $datasDosEncontros;
    }


    public static function listTipoAcompanhamento()
    {
        $module = MIOLO::getCurrentModule();

        return array(ResOfertaDeUnidadeTematica::ACOMPANHAMENTO_ENCONTRO_DETALHADO => _M('DETALHADO', $module), ResOfertaDeUnidadeTematica::ACOMPANHAMENTO_ENCONTRO_SIMPLES => _M('SIMPLES', $module));
    }


    /**
     * método responsável por atualizar todas as frequências dos residentes, por questão de performance
     * @return bool|mixed|void
     */
    public function sincronizaCargaHorariaDosResindentesNaOfertaDeModulo()
    {
        $this->__get('ofertaDoResidente');
        foreach ( $this->ofertaDoResidente as $ofertaDoResidente )
        {
            $ofertaDoResidente->sincronizaCargaHorariaConsolidada();
        }
    }
}
?>