<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Equipe SAGU [sagu@solis.coop.br]
 *
 * \b Maintainers: \n
 * Equipe SAGU [sagu@solis.coop.br]
 *
 * @since
 * Class created on 19/07/2011
 *
 */
class ResCoorientador extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $trabalhoDeConclusaoId;
    
    /**
     * @AttributeType integer
     * 
     */
    protected $personId;

    /**
     * Utilizado na subdetail
     */
    protected $personIdDescription;

    public function  __get($name)
    {
        if ( $name == 'personIdDescription' && (strlen($this->personId) > 0) && $this->needCheckPopulate($name) )
        {
            $MIOLO = MIOLO::getInstance();
            $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
            $this->personIdDescription = $busPhysicalPerson->getPhysicalPerson($this->personId)->name;
        }

        return parent::__get($name);
    }

    public function __construct($personId = NULL, $trabalhoDeConclusaoId = NULL)
    {
        if ( (strlen($personId)  >  0) && (strlen($trabalhoDeConclusaoId)  >  0) )
        {
            $this->personId = $personId;
            $this->trabalhoDeConclusaoId = $trabalhoDeConclusaoId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT A.personId,
                   A.trabalhoDeConclusaoId
                  FROM res.coorientador A';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY A.trabalhodeconclusaoid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ResCoorientador($result[$i][0], $result[$i][1]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT A.personId,
                   A.trabalhoDeConclusaoId
              FROM res.coorientador A';
        $args = array();

        if ( strlen($filters->trabalhoDeConclusaoId)  >  0 )
        {
            $where.=' AND A.trabalhodeconclusaoid = ?';
            $args[] = $filters->trabalhoDeConclusaoId;
        }

        if ( strlen($filters->personId)  >  0 )
        {
            $where.=' AND A.personId = ?';
            $args[] = $filters->personId;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY A.trabalhodeconclusaoid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT A.username,
                   TO_CHAR(A.datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                   A.ipaddress,
                   A.personId,
                   A.trabalhoDeConclusaoId
              FROM res.coorientador A
             WHERE A.personId = ?
               AND A.trabalhoDeConclusaoId = ?';
        $result = SDatabase::query($sql, array($this->personId, $this->trabalhoDeConclusaoId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName, $this->dateTime, $this->ipAddress, $this->personId, $this->trabalhoDeConclusaoId) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $retVal = $this->insert();

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO res.coorientador
                            (personId, trabalhodeconclusaoid)
                     VALUES (?, ?)';

        $args = array($this->personId, $this->trabalhoDeConclusaoId);
        $result = SDatabase::execute($sql, $args);

        return $result;
    }

    public function delete()
    {
        if ( strlen($this->trabalhoDeConclusaoId)  ==  0 || strlen($this->personId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        $sql = 'DELETE FROM res.coorientador
                  WHERE personId = ?
                    AND trabalhodeconclusaoid = ?';
        $args = array($this->personId, $this->trabalhoDeConclusaoId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->personId = null;
            $this->trabalhoDeConclusaoId = null;
        }

        return $result;
    }
}


?>