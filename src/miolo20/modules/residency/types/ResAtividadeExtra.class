<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class ResAtividadeExtra extends SType
{
    /**
     * @AttributeType integer
     * 
     */
    protected $atividadeExtraId;
    /**
     * @AttributeType character varying
     * 
     */
    protected $descricao;
    /**
     * @AttributeType text
     * 
     */
    protected $conteudo;
    /**
     * @AttributeType timestamp without time zone
     * 
     */
    protected $inicio;
    /**
     * @AttributeType timestamp without time zone
     * 
     */
    protected $fim;
    /**
     * @AttributeType real
     * 
     */
    protected $cargaHoraria;
    
    /**
     * @AttributeType Object ResParticipacaoEmAtividadeExtra
     * 
     */
    protected $participantes = array();
    
    public function __get($name)
    {
        if ( $name == 'participantes' && !(count($this->participantes) > 0) && (strlen($this->atividadeExtraId) > 0) )
        {
            // Atividade extra
            $std = new stdClass();
            $std->atividadeExtraId = $this->atividadeExtraId;
            $this->participantes = ResParticipacaoEmAtividadeExtra::search($std);
        }
        return parent::__get($name);
    }
    
    public function __construct($atividadeExtraId = NULL)
    {
        if ( (strlen($atividadeExtraId)  >  0) )
        {
            $this->atividadeExtraId = $atividadeExtraId;
            $this->populate();
        }
    }

    public static function search($filters)
    {
        $sql = 'SELECT atividadeextraid
                  FROM res.atividadeextra';
        $where = '';

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY atividadeextraid ';
        $result = SDatabase::query($sql);
        $retVal = array();

        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ResAtividadeExtra($result[$i][0]);
        }

        return $retVal;
    }

    public static function getSearchGridSQL($filters  =  null)
    {
        $sql = 'SELECT A.atividadeextraid,
                       A.descricao,
                       A.conteudo,
                       TO_CHAR(A.inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').' '.SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       TO_CHAR(A.fim, \''.SAGU::getParameter('BASIC', 'MASK_DATE').' '.SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       A.cargahoraria ||\'h\' AS cargahoraria
                  FROM res.atividadeextra A';
        $args = array();

        if ( strlen($filters->atividadeExtraId)  >  0 )
        {
            $where.=' AND A.atividadeextraid = ?';
            $args[] = $filters->atividadeExtraId;
        }

        if ( strlen($filters->descricao)  >  0 )
        {
            $where.=' AND UNACCENT(A.descricao) ILIKE UNACCENT(?) ';
            $args[] = $filters->descricao.'%';
        }

        if ( strlen($filters->conteudo)  >  0 )
        {
            $where.=' AND UNACCENT(A.conteudo) ILIKE UNACCENT(?) ';
            $args[] = $filters->conteudo.'%';
        }

        if ( strlen($filters->inicio)  >  0 )
        {
            $where.=' AND A.inicio >= TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\')';
            $args[] = $filters->inicio;
        }

        if ( strlen($filters->fim)  >  0 )
        {
            $where.=' AND A.fim <= TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\')';
            $args[] = $filters->fim;
        }

        if ( strlen($filters->cargaHoraria)  >  0 )
        {
            $where.=' AND A.cargahoraria = ?';
            $args[] = $filters->cargaHoraria;
        }
        
        if ( strlen($filters->residentId)  >  0 )
        {
            $where.=' AND EXISTS (
                    SELECT 1
                      FROM res.participacaoematividadeextra B
                     WHERE B.atividadeextraid = A.atividadeextraid
                       AND B.residenteid = ? )';
            $args[] = $filters->residentId;
        }

        if ( strlen($filters->residentName)  >  0 )
        {
            $where.=' AND EXISTS (
                    SELECT 1
                      FROM res.participacaoematividadeextra B
                INNER JOIN res.residente R
                        ON R.residenteId = B.residenteId
           INNER JOIN ONLY basPhysicalPerson PP
                        ON R.personId = PP.personId
                     WHERE B.atividadeextraid = A.atividadeextraid
                       AND UNACCENT(PP.name) ILIKE UNACCENT(?) )';
            $args[] = $filters->residentName . '%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4);
        }
        
        $sql .= ' ORDER BY A.descricao ';
        
        return SAGU::prepare($sql, $args);
    }
    
    /**
     * Mantem codigo legado funcionando
     * 
     * @param stdClass $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = self::getSearchGridSQL($filters);
        
        return preg_match('/ WHERE /', $sql) ? SDatabase::query($sql) : array();
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT username,
                       TO_CHAR(datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       ipaddress,
                       atividadeextraid,
                       descricao,
                       conteudo,
                       TO_CHAR(inicio, \''.SAGU::getParameter('BASIC', 'MASK_DATE').' '.SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       TO_CHAR(fim, \''.SAGU::getParameter('BASIC', 'MASK_DATE').' '.SAGU::getParameter('BASIC', 'MASK_TIME').'\'),
                       cargahoraria
                  FROM res.atividadeextra
                 WHERE atividadeextraid = ?';
        $result = SDatabase::query($sql, array($this->atividadeExtraId));

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list($this->userName, $this->dateTime, $this->ipAddress, $this->atividadeExtraId, $this->descricao, $this->conteudo, $this->inicio, $this->fim, $this->cargaHoraria) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->atividadeExtraId)  >  0 )
        {
            $retVal = $this->update();
        }
        else
        {
            $retVal = $this->insert();
        }
        
        if($retVal)
        {
            //Apagar todos participantes
            $filters = new stdClass();
            $filters->atividadeExtraId = $this->atividadeExtraId;
            $participacao = ResParticipacaoEmAtividadeExtra::search($filters);
            
            for($e=0; $e<count($participacao); $e++)
            {
                $participacao[$e]->delete();
            }
            
            //Salva cada participante da atividade
            for($i=0; $i<count($this->participantes); $i++)
            {
                $this->participantes[$i]->atividadeExtraId = $this->atividadeExtraId;
                $this->participantes[$i]->save();
            }
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO res.atividadeextra 
                            (atividadeextraid, descricao, conteudo, inicio, fim, cargahoraria)
                     VALUES (?, ?, ?, TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'), TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'), ?)';
        $sqlPK = "SELECT nextval('res.atividadeextra_atividadeextraid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $atividadeExtraId = $result[0][0];
        $args = array($atividadeExtraId, $this->descricao, $this->conteudo, $this->inicio, $this->fim, $this->cargaHoraria);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->atividadeExtraId = $atividadeExtraId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE res.atividadeextra
                   SET descricao = ?,
                       conteudo = ?,
                       inicio = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       fim = TO_TIMESTAMP(?, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\'),
                       cargahoraria = ?
                 WHERE atividadeextraid = ?';
        $args = array($this->descricao, $this->conteudo, $this->inicio, $this->fim, $this->cargaHoraria, $this->atividadeExtraId);
        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        if ( strlen($this->atividadeExtraId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }
        
        $filters = new stdClass();
        $filters->atividadeExtraId = $this->atividadeExtraId;                
        $participacoes = ResParticipacaoEmAtividadeExtra::search($filters);
        
        //Exclui as participações na atividade extracurricular
        for ( $i = 0; $i < count($participacoes); $i++ )
        {
            $participacoes[$i]->delete();
        }
        
        $sql = 'DELETE FROM res.atividadeextra
                      WHERE atividadeextraid = ?';
        $args = array($this->atividadeExtraId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->atividadeExtraId = null;
        }

        return $result;
    }
}


?>