<?php

class ResOfertaDeUnidadeTematicaDocente extends SType
{
    /**
     * @AttributeType integer
     */
    protected $ofertaDeUnidadeTematicaId;
    /**
     * @AttributeType integer
     */
    protected $docenteId;

    /**
     * @var string
     */
    protected $docenteIdDescription;

    protected $mostrarNomeCertificado;

    /**
     * Instancia se necessário (Magic method)
     *
     * @param string $name
     * @return boolean
     */
    public function __get($name)
    {
        // Filter
        $filters = new stdClass();
        $filters->docenteId = $this->docenteId;

        if ( $name == 'docenteIdDescription' )
        {
            if ( ($this->needCheckPopulate($name)) && (strlen($this->docenteId) > 0) )
            {
                $busPhysicalPerson = new BusinessBasicBusPhysicalPerson();
                $pre = $busPhysicalPerson->getPhysicalPerson($this->docenteId);
                $this->docenteIdDescription = $pre->name;
            }
        }

        return parent::__get($name);
    }

    /**
     * Contrutor
     *
     * @param integer $ofertaDeUnidadeTematicaId
     * @param integer $docenteId
     */
    public function __construct($ofertaDeUnidadeTematicaId = NULL, $docenteId = NULL)
    {
        if ( (strlen($ofertaDeUnidadeTematicaId) > 0) && (strlen($docenteId) > 0) )
        {
            $this->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
            $this->docenteId = $docenteId;
            $this->populate();
        }
    }

    /**
     * Função de busca
     *
     * @param object $filters
     */
    public static function search($filters)
    {
        $sql = 'SELECT ofertaDeUnidadeTematicaId,
                       docenteid
                  FROM res.ofertadeunidadetematicadocentes';

        $where = '';
        foreach ( (array)$filters as $key => $value )
        {
            if ( (is_scalar($value)) && (strlen($value) > 0) )
            {
                $where.=" AND {$key} = '{$value}'";
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY ofertaDeUnidadeTematicaId ';
        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i = 0; $i < count($result); $i++ )
        {
            $retVal[] = new ResOfertaDeUnidadeTematicaDocente($result[$i][0], $result[$i][1]);
        }

        return $retVal;
    }

    /**
     * Função de busca para a grid
     *
     * @param object $filters
     * @return array
     */
    public static function searchGrid($filters = null)
    {
        $sql = 'SELECT 
                  (SELECT DISTINCT(AA.name) FROM basPerson AA WHERE AA.personid = A.docenteid),
                  A.mostranomecertificado
                  FROM res.ofertadeunidadetematicadocentes A';

        $where = '';
        $params = array();
        if ( $filters->ofertaDeUnidadeTematicaId > 0 )
        {
            $where.=' AND A.ofertaDeUnidadeTematicaId = ?';
            $params[] = $filters->ofertaDeUnidadeTematicaId;
        }

        if ( $filters->docenteId > 0 )
        {
            $where.=' AND A.docenteid = ?';
            $params[] = $filters->docenteid;
        }

        if ( strlen($where) > 0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                 ORDER BY A.ofertaDeUnidadeTematicaId';

            $result = SDatabase::query(SAGU::prepare($sql, $params));
        }


        return $result;
    }

    /**
     * Popula essa classe
     */
    private function populate()
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT ofertaDeUnidadeTematicaId,
                       docenteid,
                       mostranomecertificado
                  FROM res.ofertadeunidadetematicadocentes
                 WHERE ofertaDeUnidadeTematicaId = ?
                   AND docenteid = ?';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaId;
        $params[] = $this->docenteId;
        $result = SDatabase::query($sql, $params);

        if ( !strlen($result[0][0]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list( $this->ofertaDeUnidadeTematicaId,
            $this->docenteId,
            $this->mostrarNomeCertificado) = $result[0];

        $this->__get('docenteIdDescription');
    }

    /**
     * Salva os dados
     *
     * @return integer - Código do registro inserido/atualizado
     */
    public function save()
    {
        return $this->insert();
    }

    /**
     * Insere os dados na base
     *
     * @return boolean
     */
    private function insert()
    {
        $sql = 'INSERT INTO res.ofertadeunidadetematicadocentes
                            ( ofertaDeUnidadeTematicaId,
                              docenteid,
                              mostranomecertificado)
                     VALUES ( ?, ?, ?)';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaId;
        $params[] = $this->docenteId;
        $params[] = $this->mostrarNomeCertificado;

        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    /**
     * Função que deleta o registro
     *
     * @return boolean
     */
    public function delete()
    {
        if ( (strlen($this->ofertaDeUnidadeTematicaId) == 0) || (strlen($this->docenteId) == 0) )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.'));
        }

        $sql = 'DELETE FROM res.ofertadeunidadetematicadocentes
                      WHERE ofertaDeUnidadeTematicaId = ?
                        AND docenteid = ?';

        $params = array();
        $params[] = $this->ofertaDeUnidadeTematicaId;
        $params[] = $this->docenteId;

        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->ofertaDeUnidadeTematicaId = null;
            $this->docenteId = null;
            $this->mostrarNomeCertificado = null;
        }

        return $result;
    }

    public static function opcoesMostrarDocenteNoCertificado()
    {
        return array(
            'f' => 'Não',
            't' => 'Sim'
        );
    }
}
?>