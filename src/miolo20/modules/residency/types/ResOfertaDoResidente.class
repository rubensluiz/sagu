<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * \b Maintainers: \n
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 */
class ResOfertaDoResidente extends SType
{
    /**
     * @AttributeType integer
     */
    protected $ofertaDoResidenteId;
    /**
     * @AttributeType integer
     */
    protected $residenteId;
    /**
     * @AttributeType integer
     */
    protected $ofertaDeUnidadeTematicaId;
    /**
     * @AttributeType integer
     */
    protected $ocorrenciasDeOferta =array();

    /**
     * @var ResResidente
     */
    protected $residente;

    /**
     * Atributo externo
     */
    protected $cargaHorariaNaOfertaDeUnidadeTematica;

    /**
     * Atributo externo
     */
    protected $atingiuFrequenciaMinima;

    /**
     * Atributo externo
     */
    protected $percentualCargaHorariaRealizada;

    /**
     * Atributo externo
     */
    protected $ofertaDeUnidadeTematica;

    protected $percentualCargaHorariaRealizadaSemCargaHorariaComplementar;


    protected $cargaHorariaPratica;
    protected $cargaHorariaTeoricoConceitual;
    protected $cargaHorariaTeoricoPratica;

    protected $notas;

    public function __construct($ofertaDoResidenteId = NULL)
    {
        if ( (strlen($ofertaDoResidenteId)  >  0) )
        {
            $this->ofertaDoResidenteId = $ofertaDoResidenteId;
            $this->populate();
        }
    }

    public function __get($name)
    {
        $MIOLO = MIOLO::getInstance();

        // Load on demand
        // ocorrencia de oferta
        if ( $name == 'ocorrenciasDeOferta' && !$this->ocorrenciasDeOferta && strlen($this->ofertaDoResidenteId) > 0 )
        {
            // Object ocorrencia de oferta
            $filters = new stdClass();
            $filters->ofertaDoResidenteId = $this->ofertaDoResidenteId;
            $this->ocorrenciasDeOferta = ResOcorrenciaDeOferta::search($filters);
        }

        if ( $name == 'residente' && (strlen($this->residenteId) > 0) && is_null($this->residente) )
        {
            $this->residente = new ResResidente($this->residenteId);
        }

        if( $name == 'ofertaDeUnidadeTematica' && (strlen($this->ofertaDeUnidadeTematicaId) > 0) && is_null($this->ofertaDeUnidadeTematica) )
        {
            $this->ofertaDeUnidadeTematica = new ResOfertaDeUnidadeTematica($this->ofertaDeUnidadeTematicaId);
        }

        if( $name == 'notas' && (strlen($this->ofertaDeUnidadeTematicaId) > 0) && is_null($this->ofertaDeUnidadeTematica) && (strlen($this->residenteId) > 0) && is_null($this->residente))
        {
            $this->notas = new ResOfertaDeUnidadeTematicaNotas($this->ofertaDeUnidadeTematicaId, $this->residenteId);
        }

        return parent::__get($name);
    }

    public static function search($filters)
    {
        $sql = 'SELECT DISTINCT A.ofertadoresidenteid, F.name
                  FROM res.ofertadoresidente A
            INNER JOIN res.ofertadeunidadetematica B
                    ON A.ofertadeunidadetematicaid = B.ofertadeunidadetematicaid
            INNER JOIN res.unidadetematica C
                    ON B.unidadetematicaid = C.unidadetematicaid
            INNER JOIN res.modulo D
                    ON C.moduloid = D.moduloid
            INNER JOIN res.residente E 
                    ON E.residenteid = A.residenteid
            INNER JOIN public.basphysicalperson F
                    ON E.personid = F.personid';

        $where = '';

        if ( $filters->encerradas )
        {
            $where .= " AND B.fim < NOW()::DATE ";
            unset($filters->encerradas);
        }

        if ( $filters->somenteModulosTransversal )
        {
            $where .= " AND D.tipo = '" . ResModulo::MODULO_TIPO_TRANSVERSAL . "' ";
            unset($filters->somenteModulosTransversal);
        }

        foreach ( $filters  as  $key => $value )
        {
            if ( (is_scalar($value))  &&  (strlen($value)  >  0) )
            {
                $where.=" AND A.{$key} = '{$value}'";
            }
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 5);
        }

        $sql.=' ORDER BY F.name';
        $result = SDatabase::query($sql);

        $retVal = array();
        for ( $i = 0;  $i  <  count($result);  $i++ )
        {
            $retVal[] = new ResOfertaDoResidente($result[$i][0]);
        }

        return $retVal;
    }

    public static function searchGrid($filters  =  null)
    {
        $sql = 'SELECT A.ofertadoresidenteid,
                       A.residenteid,
                       A.ofertadeunidadetematicaid
                  FROM res.ofertadoresidente A INNER JOIN res.residente B ON A.residenteid = B.residenteid';


        $args = array();
        if ( strlen($filters->ofertaDoResidenteId)  >  0 )
        {
            $where.=' AND A.ofertadoresidenteid = ?';
            $args[] = $filters->ofertaDoResidenteId;
        }

        if ( strlen($filters->residenteId)  >  0 )
        {
            $where.=' AND A.residenteid = ?';
            $args[] = $filters->residenteId;
        }

        if ( strlen($filters->ofertaDeUnidadeTematicaId)  >  0 )
        {
            $where.=' AND A.ofertadeunidadetematicaid = ?';
            $args[] = $filters->ofertaDeUnidadeTematicaId;
        }

        if ( strlen($filters->instituicaoExecutoraId)  >  0 )
        {
            $where.=' AND B.instituicaoExecutora = ?';
            $args[] = $filters->instituicaoExecutoraId;
        }

        if ( strlen($filters->enfaseId)  >  0 )
        {
            $where.=' AND B.enfaseid = ?';
            $args[] = $filters->enfaseId;
        }

        // Filtra apenas por ativos
        $filterActives = '';
        if ( strlen($filters->filterOnlyActive ) > 0 )
        {
            $where.=' AND (' . ResResidente::getSQLExpressionIsActive('A') . ' IS TRUE)';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=' WHERE '.substr($where, 4).'
                   ORDER BY A.ofertadoresidenteid';
            $result = SDatabase::query(SAGU::prepare($sql, $args));
        }

        return $result;
    }

    private function populate()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT JJ.username,
                       JJ.datetime,
                       JJ.ipaddress,
                       JJ.ofertadoresidenteid,
                       JJ.residenteid,
                       JJ.ofertadeunidadetematicaid,
                       JJ.cargaHorariaTotal,
                       ROUND(( ( JJ.cargaHorariaTotal / JJ.cargaHoraria ) * 100 )) AS percentualCargaHorariaRealizada,
                       ROUND(( ( JJ.cargaHorariaTotalSemCargaHorariaComplementar / JJ.cargaHoraria ) * 100 )) AS percentualCargaHorariaRealizadaSemCargaHorariaComplementar,
                       JJ.cargahoraria_pratica,
                       JJ.cargahoraria_teorico_conceitual,
                       JJ.cargahoraria_teorico_pratica
                FROM (
                     SELECT A.username,
                            TO_CHAR(A.datetime, \''.SAGU::getParameter('BASIC', 'MASK_TIMESTAMP').'\') as datetime,
                             A.ipaddress,
                             A.ofertadoresidenteid,
                             A.residenteid,
                             A.ofertadeunidadetematicaid,
                             A.cargahoraria_com_carga_horaria_complementar AS cargaHorariaTotal, -- cargahoraria total inclusive com carga horaria complementar
                             A.cargahoraria AS cargaHorariaTotalSemCargaHorariaComplementar, -- carga horaria sem carga horaria complementar
                             A.cargahoraria_pratica,
                             A.cargahoraria_teorico_conceitual,
                             A.cargahoraria_teorico_pratica,
                             B.cargaHoraria AS cargaHoraria, -- carga horaria da disciplina
                             B.unidadeTematicaId
                        FROM res.ofertadoresidente A
                  INNER JOIN res.ofertaDeUnidadeTematica B
                          ON A.ofertaDeUnidadeTematicaId = B.ofertaDeUnidadeTematicaId
                  INNER JOIN res.unidadeTematica UT
                          ON UT.unidadeTematicaId = B.unidadeTematicaId
                       WHERE A.ofertadoresidenteid = ? ) as JJ';


        $result = SDatabase::query($sql, array($this->ofertaDoResidenteId));

        if ( !strlen($result[0][1]) )
        {
            throw new Exception(_M('Registro inexistente.', $module));
        }

        list(
              $this->userName,
              $this->dateTime,
              $this->ipAddress,
              $this->ofertaDoResidenteId,
              $this->residenteId,
              $this->ofertaDeUnidadeTematicaId,
              $this->cargaHorariaNaOfertaDeUnidadeTematica,
              $this->percentualCargaHorariaRealizada,
              $this->percentualCargaHorariaRealizadaSemCargaHorariaComplementar,
              $this->cargaHorariaPratica,
              $this->cargaHorariaTeoricoConceitual,
              $this->cargaHorariaTeoricoPratica) = $result[0];
    }

    public function save()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        if ( strlen($this->ofertaDoResidenteId)  ==  0 )
        {
            $retVal = $this->insert();
        }
        else
        {
            $retVal = $this->update();
        }


        if ( strlen($this->ofertaDoResidenteId) > 0 )
        {
            // Salva ocorrencias
            if ( count($this->ocorrenciasDeOferta)>0 )
            {
                foreach ( $this->ocorrenciasDeOferta as $ocorrenciaDeOferta )
                {
                    $ocorrenciaDeOferta->ofertaDoResidenteId = $this->ofertaDoResidenteId;
                    $ocorrenciaDeOferta->save();
                }
            }
        }

        return $retVal;
    }

    private function insert()
    {
        $sql = 'INSERT INTO res.ofertadoresidente 
                            (ofertadoresidenteid, 
                             residenteid,
                             ofertadeunidadetematicaid)
                     VALUES (?, ?, ?)';

        $sqlPK = "SELECT nextval('res.ofertadoresidente_ofertadoresidenteid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);

        $ofertaDoResidenteId = $result[0][0];

        $args = array($ofertaDoResidenteId,
                      $this->residenteId,
                      $this->ofertaDeUnidadeTematicaId);

        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ofertaDoResidenteId = $ofertaDoResidenteId;
        }

        return $result;
    }

    private function update()
    {
        $sql = 'UPDATE res.ofertadoresidente
                   SET residenteid = ?,
                       ofertadeunidadetematicaid = ?
                 WHERE ofertadoresidenteid = ?';

        $args = array($this->residenteId,
                      $this->ofertaDeUnidadeTematicaId,
                      $ofertaDoResidenteId);

        return SDatabase::execute($sql, $args);
    }

    public function delete()
    {
        $this->__get('ocorrenciasDeOferta');

        if ( strlen($this->ofertaDoResidenteId)  ==  0 )
        {
            throw new Exception(_M('Não é possível excluir um registro que ainda não foi salvo.', $module));
        }

        // excluir ocorrencias de ofertas
        foreach ( $this->ocorrenciasDeOferta as $ocorrenciaDeOferta )
        {
            $ocorrenciaDeOferta->delete();
        }

        $sql = 'DELETE FROM res.ofertadoresidente
                      WHERE ofertadoresidenteid = ?';

        $args = array($this->ofertaDoResidenteId);
        $result = SDatabase::execute($sql, $args);

        if ( $result )
        {
            $this->ofertaDoResidenteId = null;
        }

        return $result;
    }

    /**
     * retorna carga horaria do residente
     * @param $filters
     * @return array
     */
    public function retornaCargaHorariaFrequenteDoResidenteNaOferta($retornaComCargaHorariaComplementar = false)
    {
        $this->__get('ofertaDeUnidadeTematica');
        $retornaComCargaHorariaComplementar =  $retornaComCargaHorariaComplementar ? 'true' : 'false';

        foreach ($this->ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaTipos as $tipo) {
              $sql = 'select res.obtemcargahorariadaofertasdeunidadetematicaportipo(' . $this->residenteId . ', ' . $this->ofertaDeUnidadeTematicaId . ', ' . $retornaComCargaHorariaComplementar . ', \'' . strtoupper($tipo->tipo) . '\')';
              $result = SDatabase::query($sql);
              $frequenciaDoResidente[$tipo->tipo] = $result[0][0];
        }

        return $frequenciaDoResidente;
    }


    /**
     * Método responsável por retornar a carga horaria detalhada do residente, para realizar a aprovação do residente
     * Existe 3 tipos de carga horaria Prática, Teórico conceitual, Teórico prática - cargahorariapratica = 100%, (Teórico conceitual + Teórico prática) = 85%
     * @return array
     */
    public function retornaDetalhesDaCargaHorariaOferta()
    {
        $this->__get('ofertaDeUnidadeTematica');

        $cargaHorariaDetalhadaDoResidenteNaOferta['P'] = $this->cargaHorariaPratica;
        $cargaHorariaDetalhadaDoResidenteNaOferta['C'] = $this->cargaHorariaTeoricoConceitual;
        $cargaHorariaDetalhadaDoResidenteNaOferta['T'] = $this->cargaHorariaTeoricoPratica;
        $cargaHorariaDetalhadaDoResidenteNaOferta['TT'] = $this->cargaHorariaTeoricoConceitual + $this->cargaHorariaTeoricoPratica;

        $cargaHorariaTeoricaDaUnidade = 0;

        // buscando apenas o tipo pratico
        foreach ($this->ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaTipos as $tipoUnidade) {

            if ($tipoUnidade->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_PRATICA) {

                $tipo = new ResTipoDeUnidadeTematica($tipoUnidade->tipo);
                $cargaHorariaPraAprovacao = (($tipoUnidade->cargaHoraria / 100) * $tipo->frequenciaMinima);

                $detalheCargaHoraria = new stdClass();
                $detalheCargaHoraria->tipo = $tipo->tipoDeUnidadeTematicaId;
                $detalheCargaHoraria->cargaHorariaDetalhadaDoResidenteNaOferta = $cargaHorariaDetalhadaDoResidenteNaOferta[$tipo->tipoDeUnidadeTematicaId];
                $detalheCargaHoraria->porcentagemFrequenciaMinima = $tipo->frequenciaMinima;
                $detalheCargaHoraria->cargaHorariaPraAprovacao = $cargaHorariaPraAprovacao;

                $detalhesCargaHoraria[] = $detalheCargaHoraria;

            }

            // somando a carga horaria das disciplinas do tipo teórico
            if ($tipoUnidade->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_CONCEITUAL ||
                $tipoUnidade->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_PRATICA) {
                $cargaHorariaTeoricaDaUnidade += $tipoUnidade->cargaHoraria;
            }
        }


        $cargaHorariaPraAprovacaoTeorica = (($cargaHorariaTeoricaDaUnidade / 100) * 85);
        $detalheCargaHorariaTeorica = new stdClass();
        $detalheCargaHorariaTeorica->tipo = 'TT';
        $detalheCargaHorariaTeorica->cargaHorariaDetalhadaDoResidenteNaOferta = $cargaHorariaDetalhadaDoResidenteNaOferta['TT'];
        $detalheCargaHorariaTeorica->porcentagemFrequenciaMinima = 85;
        $detalheCargaHorariaTeorica->cargaHorariaPraAprovacao = $cargaHorariaPraAprovacaoTeorica;


        array_push($detalhesCargaHoraria, $detalheCargaHorariaTeorica);

        return $detalhesCargaHoraria;
    }

    /**
     * verifica se residente atingiu a frequencia minima
     * @return bool
     */
    public function retornaVerificaSeEstaApto()
    {
        $this->__get('notas');

        $estaApto = true;
        $detalhesDaCargaHorariaOferta = $this->retornaDetalhesDaCargaHorariaOferta();

        foreach ($detalhesDaCargaHorariaOferta as $detalheCargaHoraria) {
            if ($detalheCargaHoraria->cargaHorariaDetalhadaDoResidenteNaOferta < $detalheCargaHoraria->cargaHorariaPraAprovacao) {
                return false;
            }
        }

        if ($this->notas->notageral < ResOfertaDeUnidadeTematicaNotas::NOTA_MEDIA) {
            return false;
        }

        return $estaApto;

    }

    public static function retornaResidentesMatriculadosDaOfertadeUnidadeTematica($filtersParam)
    {
        $filterActives = ' AND (' . ResResidente::getSQLExpressionIsActive('C') . ' IS TRUE)';


        if (!is_null($filtersParam->instituicaoExecutoraId)) {
            $filterActives .= ' AND C.instituicaoexecutora = ' . $filtersParam->instituicaoExecutoraId;
        }

        if (!is_null($filtersParam->enfaseId)) {
            $filterActives .= ' AND C.enfaseId = ' . $filtersParam->enfaseId;
        }

        $sql = "SELECT C.residenteId
                   FROM res.ofertadeunidadetematica A
             INNER JOIN res.ofertadoresidente B
                     ON (A.ofertadeunidadetematicaid = B.ofertadeunidadetematicaid)
             INNER JOIN res.residente C
                     ON (B.residenteid = C.residenteid)
        INNER JOIN ONLY basphysicalperson D
                     ON (C.personid = D.personid)
                  WHERE A.ofertaDeUnidadeTematicaId = ?
                        {$filterActives}
               ORDER BY D.name";

        return SDatabase::query($sql, array($filtersParam->ofertaDeUnidadeTematicaId));
    }

    public static function obtemFaltaDoResidenteNaOfertaDeUnidadeTematica($residenteId, $ofertaDeUnidadeTematicaId, $tipo)
    {
        $sql = " SELECT ofertadeunidadetematicafaltadoresidenteid,
                        residenteid,
                        ofertadeunidadetematicaid,
                        falta,
                        observacao,
                        tipo
                   FROM res.OfertaDeUnidadeTematicafaltaDoResidente 
                  WHERE residenteId = ? 
                    AND ofertaDeUnidadeTematicaId = ? AND tipo = ?";

        $args[] = $residenteId;
        $args[] = $ofertaDeUnidadeTematicaId;
        $args[] = $tipo;

        $result = SDatabase::query($sql, $args);

        $falta = array(
            'ofertadeunidadetematicafaltadoresidenteid' => $result[0][0],
            'residenteid' => $result[0][1],
            'ofertadeunidadetematicaid' => $result[0][2],
            'falta' => $result[0][3],
            'observacao' => $result[0][4],
            'tipo' => $result[0][5],
        );
        return $falta;

    }

    public static function salvaFaltaDoResidente($data)
    {
        $sqlBusca = " SELECT COUNT(*) > 0
                        FROM res.OfertaDeUnidadeTematicafaltaDoResidente
                       WHERE residenteId = ?
                         AND ofertaDeUnidadeTematicaId = ? AND tipo = ?";

        $argsBusca[] = $data->residenteId;
        $argsBusca[] = $data->ofertaDeUnidadeTematicaId;
        $argsBusca[] = $data->tipo;

        $resultBusca = SDatabase::query($sqlBusca, $argsBusca);

        if ( $resultBusca[0][0] == DB_TRUE )
        {
            // Atualiza a nota do residente
            $sql = " UPDATE res.OfertaDeUnidadeTematicafaltaDoResidente
                        SET falta = ?, observacao = ? 
                      WHERE residenteId = ? 
                        AND ofertaDeUnidadeTematicaId = ? AND tipo = ?";

            $args[] = $data->falta;
            $args[] = $data->observacao;
            $args[] = $data->residenteId;
            $args[] = $data->ofertaDeUnidadeTematicaId;
            $args[] = $data->tipo;

            $result = SDatabase::execute($sql, $args);
        }
        else
        {
            // Insere a nota para o residente
            $sql = " INSERT INTO res.OfertaDeUnidadeTematicafaltaDoResidente
                                 (residenteId,
                                 ofertaDeUnidadeTematicaId,
                                 falta,
                                 tipo,
                                 observacao)
                          VALUES (?, ?, ?, ?, ?) ";

            $args[] = $data->residenteId;
            $args[] = $data->ofertaDeUnidadeTematicaId;
            $args[] = $data->falta;
            $args[] = $data->tipo;
            $args[] = $data->observacao;

            $result = SDatabase::execute($sql, $args);
        }

        return $result;
    }

    /**
     * método responsável por atualizar todas as frequências dos residentes, por questão de performance
     * @return bool|mixed|void
     */
    public function sincronizaCargaHorariaConsolidada()
    {
        $sql = 'UPDATE res.ofertadoresidente
               SET cargahoraria = ?,
                   cargahoraria_com_carga_horaria_complementar = ?,
                   cargahoraria_pratica = ?,
                   cargahoraria_teorico_conceitual = ?,
                   cargahoraria_teorico_pratica = ?
             WHERE ofertadoresidenteid = ?';


        $cargaHoraria = $this->retornaCargaHorariaFrequenteDoResidenteNaOferta(true);
        $cargaHorariaSemComplementar = $this->retornaCargaHorariaFrequenteDoResidenteNaOferta(false);

        $args = array(
            array_sum($cargaHorariaSemComplementar),
            array_sum($cargaHoraria),
            $cargaHoraria['P'],
            $cargaHoraria['C'],
            $cargaHoraria['T'],
            $this->ofertaDoResidenteId
        );

        return SDatabase::execute($sql, $args);
    }

}
?>