<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers \n
 * Moises Heberle [moises@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 16/07/2011
 *
 */
class FrmOfertaDeUnidadeTematica extends FrmOfertaDeUnidadeTematicaPai
{
    public function __construct($steps = null)
    {
        $_SESSION['encontros'] = null;

        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('ui/controls/msubdetail.class');
        
        parent::__construct($steps, __CLASS__, new ResOfertaDeUnidadeTematica(), array('ofertaDeUnidadeTematicaId'));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $stepData = $this->getStepData();

        if ( $this->isFirstAccess() )
        {
            MSubDetail::clearData('_encontros');
        }

        if ( in_array($function,  array(SForm::FUNCTION_UPDATE,  SForm::FUNCTION_DELETE)) )
        {
            $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
            $fields[] = new SHiddenField('ofertaDeUnidadeTematicaId', $ofertaDeUnidadeTematicaId);
            $data = new ResOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
            $fields[] = new SHiddenField('ofertaDeUnidadeTematicaIdPai', $data->ofertaDeUnidadeTematicaIdPai);
        }

        if ( strlen(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId')) > 0 )
        {
            $filters = new stdClass();
            $filters->ofertaDeUnidadeTematicaId = $stepData->ofertaDeUnidadeTematicaId;
            $unidadeTematica = ResOfertaDeUnidadeTematica::searchGrid($filters);

            //Não permite edição caso a unidade temática esteja fechada
            if( strlen($unidadeTematica[0][13]) > 0 )
            {
                $fields[] = MMessage::getStaticMessage('msgInfo', _M("Esta oferta de atividade não pode ser editada/excluída pois já está fechada.", $module), MMessage::TYPE_WARNING);
                $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
                $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            }
        }


        $fields[] = $turma = new MSelection('turmaId', SAGU::NVL($stepData->turmaId, $data->turmaId), _M('Turma', $module), ResTurma::retornaTurmas());
        $turma->setIsRequired(true);
        $turma->setJsHint(_M('Informe a turma', $module));

        //Unidade tematica
        $options = array('required' => true, 'value' => SAGU::NVL($stepData->unidadeTematicaId, $data->unidadeTematicaId));

        $fields[] = new ResUnidadeTematicaLookup($options);
        $validators[] = new MIntegerValidator('unidadeTematicaId', _M('Unidade temática', $module), 'required');


        $fields[] = $nome = new MTextField('nome', $this->getFormValue('nome', $data->nome), _M('Nome da oferta', $module), SAGU::getParameter('BASIC','FIELD_DESCRIPTION_SIZE'));
        $nome->addAttribute('maxlength', '255');
        $nome->setJsHint(_M('Informe o nome', $module));


        $validators[] = new MRequiredValidator('nome');


        //Periodo de ocorrencia
        $fields[] = new SBeginEndPeriod(array(
            'baseGroup' => false,
            'begin' => array('dateId' => 'inicio', 'dateValue'=> SAGU::NVL($stepData->inicio, $data->inicio), 'label' => _M('Início previsto', $module)),
            'end' => array('dateId' => 'fim', 'dateValue' => SAGU::NVL($stepData->fim, $data->fim), 'label' => _M('Fim previsto', $module)),
            'required' => true,
        ));
        $validators[] = new MDateDMYValidator('inicio', _M('Início previsto', $module));
        $validators[] = new MDateDMYValidator('fim', _M('Fim previsto', $module));
        $validators[] = new MRequiredValidator('inicio', _M('Início previsto', $module), 'required');
        $validators[] = new MRequiredValidator('fim', _M('Fim previsto', $module), 'required');

        //Preceptor responsável
        $fields[] = new SHiddenField('filterOnlyPreceptor', DB_TRUE);
        $fields[] = new SHiddenField('disableInsertNew', DB_TRUE);

        $campoSemestre = new MSelection('semestre', SAGU::NVL(MIOLO::_REQUEST('semestre'), $data->semestre), _M('Semestre', $module), ResOfertaDeUnidadeTematica::semestres());
        $campoSemestre->setJsHint(_M('Informe o semestre', $module));
        $fields[] = $campoSemestre;
        $validators[] = new MRequiredValidator('semestre', _M('Semestre', $module));


        $fields[] = $acompanhamentoEncontro =  new MSelection('acompanhamentoencontro', $this->GetFormValue('acompanhamentoencontro', $data->acompanhamentoencontro), _M('Acompanhamento do encontro', $module), ResOfertaDeUnidadeTematica::listTipoAcompanhamento(), null);
        $acompanhamentoEncontro->setIsRequired(true);


        $campoCargaHorariaTotal = new MTextField('cargaHoraria', $data->cargaHoraria, _M('Carga horária', $module), SAGU::getParameter('basic', 'FIELD_ID_SIZE'), _M('horas', $module));
        $campoCargaHorariaTotal->setJsHint(_M('Informe a carga horária total(em horas). Ex.: 140', $module));
        $fields[] = $campoCargaHorariaTotal;
        $validators[] = new mFloatValidator('cargaHoraria', _M('Carga horária', $module), '.', null, 'required');

        foreach ($data->ofertaDeUnidadeTematicaTipos as $ofertaDeUnidadeTematicaTipo) {
            if ($ofertaDeUnidadeTematicaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_PRATICA) {
                $horasPraticaValor = $ofertaDeUnidadeTematicaTipo->cargahoraria;
            } else if ($ofertaDeUnidadeTematicaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_CONCEITUAL) {
                $horasTeoricoConceitualValor = $ofertaDeUnidadeTematicaTipo->cargahoraria;
            } else if ($ofertaDeUnidadeTematicaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_PRATICA) {
                $horasTeoricoPraticaValor = $ofertaDeUnidadeTematicaTipo->cargahoraria;
            }
        }

        $horasPratica = new MTextField('horas_P', $horasPraticaValor, _M('Prática', $module), SAGU::getParameter('basic', 'FIELD_ID_SIZE'), _M('horas', $module));
        $fields[] = $horasPratica;
        $validators[] = new mFloatValidator('horas_P', _M('Horas prática ', $module), '.', null, 'required');
        $horasPratica->addAttribute('onblur', SForm::getAjaxAction('calculaHorasDosTipos', 'divPorcentagem', false));


        $horasTeoricoConceitual = new MTextField('horas_TC', $horasTeoricoConceitualValor, _M('Teórico-conceitual (ead+presencial)', $module), SAGU::getParameter('basic', 'FIELD_ID_SIZE'), _M('horas', $module));
        $fields[] = $horasTeoricoConceitual;
        $validators[] = new mFloatValidator('horas_TC', _M('Teórico-conceitual (ead+presencial) ', $module), '.', null, 'required');
        $horasTeoricoConceitual->addAttribute('onblur', SForm::getAjaxAction('calculaHorasDosTipos', 'divPorcentagem', false));

        $horasTeoricoPratico = new MTextField('horas_TP', $horasTeoricoPraticaValor, _M('Teórico-prática (campo+núcleo)', $module), SAGU::getParameter('basic', 'FIELD_ID_SIZE'), _M('horas', $module));
        $fields[] = $horasTeoricoPratico;
        $validators[] = new mFloatValidator('horas_TP', _M('Teórico-prática (campo+núcleo)', $module), '.', null, 'required');
        $horasTeoricoPratico->addAttribute('onblur', SForm::getAjaxAction('calculaHorasDosTipos', 'divPorcentagem', false));


        $fields[] = new MDiv('divPorcentagem', null);

        $options = array (
            'id' => 'subUnidadeTematicaId',
            'value' => null,
            'label' => _M('Unidade temática', $module),
            'item' => 'UnidadeTematica',
            'module' => 'residency',
            'baseGroup' => false,
        );
        $subFields[] = new SHiddenField('ofertaDeUnidadetematicaidDetail');
        $subFields[] = new SLookupContainer('subUnidadeTematicaId', null, $options);
        $subFields[] = new MTextField('nomeDetail', null, _M('Nome', $module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'));

        $subValidators[] = new MRequiredValidator('nomeDetail', _M('Nome', $module));
        $subValidators[] = new MIntegerValidator('subUnidadeTematicaId', _M('Atividade do módulo', $module), 'required');

        $cols[] = new MGridColumn(_M('Código da oferta'), 'left', true, '', true, 'ofertaDeUnidadetematicaidDetail');
        $cols[] = new MGridColumn(_M('Código da atividade'), 'left', true, '', true, 'subUnidadeTematicaId');
        $cols[] = new MGridColumn(_M('Atividade do módulo'), 'left', true, '', true, 'subUnidadeTematicaIdDescription');
        $cols[] = new MGridColumn(_M('Nome'), 'left', true, '', true, 'nomeDetail');

        $subDetail = $fields[] = new MSubDetail('subAtividadesDoModulos', _M('Subatividade do módulo (Específico)'), $cols, $subFields);
        $subDetail->setValidators($subValidators);


        if ( $this->isSubDetailEditMode() && ( strlen($ofertaDeUnidadeTematicaId) > 0 ) )
        {

            $ofertaDeUnidadeTematica = new ResOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
            $dados = array();
            foreach ($ofertaDeUnidadeTematica->subOfertaDeUnidadeTematicas as $subOfertaDeUnidade) {
                $campos = new stdClass();
                $campos->ofertaDeUnidadetematicaidDetail = $subOfertaDeUnidade->ofertaDeUnidadeTematicaId;
                $campos->subUnidadeTematicaId = $subOfertaDeUnidade->unidadeTematica->unidadeTematicaId;
                $campos->subUnidadeTematicaIdDescription = $subOfertaDeUnidade->unidadeTematica->descricao;
                $campos->nomeDetail = $subOfertaDeUnidade->nome;
                $dados[] = $campos;
            }

            $lista = SAGU::convertSTypeToSubDetail($cols, $dados);

            $subDetail->setData( $lista );
        }
        else if ( $this->isInsertFunction() && !$this->estaEmUmEvento() )
        {
            $subDetail->clearData();
        }





        /*
         * MSubdetail
         */
        // Campo tema
        $options = array(
            'label' => _M("Tema<font style='color:#c61217' >*</font>", $module),
            'module' => $module,
            'item' => 'Tema',
            'filter' => array('temaId' => 'temaId'),
            'related' => 'temaIdDescription',
            'hint' => _M('Informe o código do tema', $module),
            'descriptionHint' => _M('Descrição do tema', $module) );
        $camposSubDetailTemas[] = new SLookupContainer('temaId', null, $options);
        $validadoresSubDetailTemas[] = new MIntegerValidator('temaId', _M('Tema', $module), 'required');
        $colunasSubDetailTemas[] = new sSubDetailColumn('temaId', array( 'label' => _M('Código', $module) ));
        $colunasSubDetailTemas[] = new sSubDetailColumn('temaIdDescription', array( 'label' => _M('Descrição', $module) ));

        $subDetailTemas = new MSubDetail('_temas', _M('Temas da unidade temática', $module), $colunasSubDetailTemas, $camposSubDetailTemas);
        $validadoresSubDetailTemas[] = new MSubDetailUniqueValidator('temaId', _M('Tema', $module));
        $subDetailTemas->setValidators($validadoresSubDetailTemas);

        // Popula a subDetail
        if ( $this->isFirstAccess() && !$this->estaEmUmEvento() )
        {
            MSubDetail::clearData('_temas');
            if ( count((array)$data->temas) > 0 )
            {
                $dadosDaSubDetail = SAGU::convertSTypeToSubDetail((array)$colunasSubDetailTemas, (array)$data->temas);
                $subDetailTemas->setData($dadosDaSubDetail);
            }
        }
        $fields[] = $subDetailTemas;


        $instExecLabel = new MLabel(_M("Instituição executora:", $module));
        $instExec = new MLookupTextField('instituicaoExecutoraId', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('instituicaoExecutoraIdDescription'), 'basic', 'legalPerson');
        $instExec->setJsHint(_M("Informe o código da instituição executora.", $module));
        $validadoresSubDetailPreceptorInstituicoes[] = new MIntegerValidator('instituicaoExecutoraId', _M('Instituição executora', $module), 'required');
        $instExecDesc = new MTextField('instituicaoExecutoraIdDescription', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $camposSubDetailPreceptorInstituicoes[] = new MHContainer('hctInstituicao', array($instExecLabel, $instExec, $instExecDesc));

        $opts = array(
            'label' => _M('Preceptor responsável', $module),
            'item' => 'Preceptor',
            'module' => 'residency',
            'filter' => array('preceptorId' => 'preceptorId'),
        );

        $camposSubDetailPreceptorInstituicoes[] = new SLookupContainer('preceptorId', null, $opts);
        $validadoresSubDetailPreceptorInstituicoes[] = new MIntegerValidator('preceptorId', _M('Preceptor', $module), 'required');

        $colunasSubDetailPreceptorInstituicoes[] = new sSubDetailColumn('instituicaoExecutoraId', array( 'label' => _M('Código instituição', $module), 'visible' => false  ));
        $colunasSubDetailPreceptorInstituicoes[] = new sSubDetailColumn('instituicaoExecutoraIdDescription', array( 'label' => _M('Instituição executora', $module) ));
        $colunasSubDetailPreceptorInstituicoes[] = new sSubDetailColumn('preceptorId', array( 'label' => _M('Código preceptor', $module), 'visible' => false ));
        $colunasSubDetailPreceptorInstituicoes[] = new sSubDetailColumn('preceptorIdDescription', array( 'label' => _M('Preceptor', $module) ));

        $subDetailPreceptorInstituicao = new MSubDetail('_preceptoresInstituicoes', _M('Supervisão de preceptores e instituições executoras', $module), $colunasSubDetailPreceptorInstituicoes, $camposSubDetailPreceptorInstituicoes);

        $validadoresSubDetailPreceptorInstituicoes[] = new MSubDetailUniqueValidator('preceptorId', _M('Preceptor', $module));
        $subDetailPreceptorInstituicao->setValidators($validadoresSubDetailPreceptorInstituicoes);

        // Popula a subDetail
        if ( !$this->estaEmUmEvento() )
        {
            MSubDetail::clearData('_preceptoresInstituicoes');
            if ( count((array)$data->preceptoresInstituicoes) > 0 )
            {
                $dadosDaSubDetail = SAGU::convertSTypeToSubDetail((array)$colunasSubDetailPreceptorInstituicoes, (array)$data->preceptoresInstituicoes);
                $subDetailPreceptorInstituicao->setData($dadosDaSubDetail);
            }
        }
        $fields[] = $subDetailPreceptorInstituicao;



        // Campo docentes
        $camposSubDetailDocentes[] = new SLookupContainer('docenteId', null, array(
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'label' => _M('Pessoa', $module),
            'related' => 'docenteIdDescription',
        ));
        $camposSubDetailDocentes[] = new MSelection('mostrarNomeCertificado', null, 'Mostra nome do certificado?' , ResOfertaDeUnidadeTematicaDocente::opcoesMostrarDocenteNoCertificado());

        $colunasSubDetailDocentes[] = new sSubDetailColumn('docenteId', array( 'label' => _M('Código', $module) ));
        $colunasSubDetailDocentes[] = new sSubDetailColumn('docenteIdDescription', array( 'label' => _M('Docente', $module) ));
        $colunasSubDetailDocentes[] = new sSubDetailColumn('mostrarNomeCertificado', array( 'label' => _M('Mostrar nome do certificado?', $module), 'replace' => ResOfertaDeUnidadeTematicaDocente::opcoesMostrarDocenteNoCertificado() ));

        $subDetailDocentes = new MSubDetail('_docentes', _M('Docentes', $module), $colunasSubDetailDocentes, $camposSubDetailDocentes);
        $validadoresSubDetailDocentes[] = new MSubDetailUniqueValidator('docenteId', _M('Docente', $module));
        $validadoresSubDetailDocentes[] = new MRequiredValidator('docenteIdDescription', _M('Docente', $module));
        $validadoresSubDetailDocentes[] = new MRequiredValidator('mostrarNomeCertificado', _M('Mostrar nome no certificado', $module));
        $subDetailDocentes->setValidators($validadoresSubDetailDocentes);

        // Popula a subDetail
        if ( $this->isFirstAccess() && !$this->estaEmUmEvento() )
        {
            MSubDetail::clearData('_docentes');
            if ( count((array)$data->docentes) > 0 )
            {
                $dadosDaSubDetail = SAGU::convertSTypeToSubDetail((array)$colunasSubDetailDocentes, (array)$data->docentes);
                $subDetailDocentes->setData($dadosDaSubDetail);
            }
        }
        $fields[] = $subDetailDocentes;


        if ( $this->isUpdateFunction() ) {

            $busUser = new BusinessAdminBusUser();
            $userData = $busUser->getUserByLogin($data->userName);
            $fields[] = new MTextLabel('lastModification', '[' . SAGU::NVL($userData->name, $data->userName) . ' - ' . SAGU::NVL($data->dateTime) . ']', _M('Última modificação', 'basic'));

        }

        $this->setFields($fields);
        $this->SetValidators($validators);
    }

    public function tbBtnDelete_confirm($sender = NULL, $success, $opts = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        
        try
        {
            $resOfertaDeUnidadeTematica = new ResOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
            $success = $resOfertaDeUnidadeTematica->delete();
        } 
        catch (Exception $ex) 
        {
            $goto = $MIOLO->GetActionURL($module, 'main:process:ofertaDeUnidadeTematica', null, array('ofertaDeUnidadeTematicaIdS' => $ofertaDeUnidadeTematicaId));
            $MIOLO->error($ex->getMessage(), $goto);
        }
        
        parent::tbBtnDelete_confirm($sender, $success, $opts);
    }


    public function calculaHorasDosTipos($args)
    {
        $MIOLO = MIOLO::getInstance();

        if ( ($args->horas_P + $args->horas_TC + $args->horas_TP ) > $args->cargaHoraria ) {
            $jsCode = " alert('Horas dos tipos ultrapassa a carga horária definida, verifique os valores');
                        document.getElementById('horas_P').value = '';
                        document.getElementById('horas_TC').value = '';
                        document.getElementById('horas_TP').value = '';";
        }

        if ( $args->phpFunction )
        {
            $MIOLO->page->addAJAXJsCode($jsCode);
        }
        else
        {
            $MIOLO->page->addJsCode($jsCode);
        }
    }
}
?>