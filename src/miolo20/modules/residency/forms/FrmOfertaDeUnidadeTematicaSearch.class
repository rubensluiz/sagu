<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 16/07/2011
 */
class FrmOfertaDeUnidadeTematicaSearch extends SSearchForm
{

    public function __construct($data)
    {
        parent::__construct(null, new ResOfertaDeUnidadeTematica(), array( 'ofertaDeUnidadeTematicaId' ));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();


        $fields[] = $turma = new MSelection('turmaIdS', $this->getFormValue('turmaIdS'), _M('Turma', $module), ResTurma::retornaTurmas());
        $turma->setJsHint(_M('Informe a turma', $module));

        // Código
        $fields[] = $codigo = new MTextField('ofertaDeUnidadeTematicaIdS', $this->getFormValue('ofertaDeUnidadeTematicaIdS'), _M('Código da oferta de unidade temática', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $codigo->setJsHint(_M('Informe o código da unidade temática', $module));

        $fields[] = $unidadeTematica = new MLookupTextField('unidadeTematicaIdS', $this->getFormValue('unidadeTematicaId'), _M('Código da unidade temática'), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'), '', null, 'descricaoS, limbo, limbo, limbo, limbo, limbo, limbo, limbo, periodoS, tipoS', $module, 'UnidadeTematica', '', array(), true);

        // Descrição
        $fields[] = $descricao = new MTextField('descricaoS', $this->getFormValue('descricaoS'), _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descricao->setJsHint(_M('Informe a descrição da unidade temática', $module));

        // Período
        $fields[] = $tipo = new MSelection('periodoS', $this->getFormValue('periodoS'), _M('Período', $module), ResUnidadeTematica::listPeriodos());
        $tipo->setJsHint(_M('Informe o período', $module));


        // Núcleos profissionais
        $fields[] = $nucleosProfissionais = new MMultiSelection('nucleosProfissionaisS', (array) $this->getFormValue('nucleosProfissionaisS'), _M('Núcleos profissionais'), ResNucleoProfissional::listRecords());
        $nucleosProfissionais->setJsHint(_M('Selecione os núcleos profissionais', $module));

        // Ênfases
        $fields[] = $enfases = new MMultiSelection('enfasesS', (array) $this->getFormValue('enfasesS'), _M('Ênfases'), ResEnfase::listRecords());
        $enfases->setJsHint(_M('Selecione as ênfases'));

        // Período de ocorrência
        $fields[] = new SBeginEndPeriod(array(
            'label' => _M('Período de ocorrência', $module),
            'baseGroup' => false,
            'disposition' => 'horizontal',
            'begin' => array(
                'label' => _M('entre', $module),
                'dateId' => 'betweenInicioS'
            ),
            'end' => array(
                'label' => _M('e', $module),
                'dateId' => 'betweenFimS'
            ),
        ));

        // Instituicao Executora
        $fields[] = new SHiddenField('filterOnlyinstituicaoExecutoraS', DB_TRUE);
        $fields[] = new SHiddenField('disableInsertNewS', DB_TRUE);
        $opts = array(
            'label' => _M('Instiuição Executora', $module),
            'item' => 'legalPerson',
            'module' => 'basic',
        );
        $fields[] = new SLookupContainer('instituicaoExecutoraS', $this->getFormValue('instituicaoExecutoraS'), $opts);
        $validators[] = new MIntegerValidator('instituicaoExecutoraIdS', _M('Instiuição Executora', $module), 'optional');

        // Instituicao Formadora
        $fields[] = new SHiddenField('filterOnlyinstituicaoFormadoraS', DB_TRUE);
        $fields[] = new SHiddenField('disableInsertNewS', DB_TRUE);
        $opts = array(
            'label' => _M('Instiuição Formadora', $module),
            'item' => 'legalPerson',
            'module' => 'basic',
        );
        $fields[] = new SLookupContainer('instituicaoFormadoraS', $this->getFormValue('instituicaoFormadoraS'), $opts);
        $validators[] = new MIntegerValidator('instituicaoFormadoraIdS', _M('Instiuição Formadora', $module), 'optional');

        parent::defineFields($fields, $module, 'GrdOfertaDeUnidadeTematicaSearch', $validators);
    }

    /**
     * Obtém os dados do form
     * @return type
     */
    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->descricao = $this->getRequestValue('descricaoS');
        $data->periodo = $this->getRequestValue('periodoS');
        $data->tipo = $this->getRequestValue('tipoS');
        $data->nucleosProfissionais = $this->getRequestValue('nucleosProfissionaisS');
        $data->inicio = $this->getRequestValue('betweenInicioS');
        $data->fim = $this->getRequestValue('betweenFimS');
        $data->enfases = $this->getRequestValue('enfasesS');
        $data->nucleosProfissionais = $this->getRequestValue('nucleosProfissionaisS');
        $data->instituicaoExecutora = $this->getRequestValue('instituicaoExecutoraS');

        return $data;
    }

    public function showInformation($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');

        $ofertaUnidadeTematica = new ResOfertaDeUnidadeTematica($this->getRequestValue('ofertaDeUnidadeTematicaId'));

        $periodos = ResUnidadeTematica::listPeriodos();
        $modulos = ResModulo::listarModulos();
        $turmas = ResTurma::retornaTurmas();
        $options = array(
            _M('Turma', $module) => $turmas[$ofertaUnidadeTematica->turmaId],
            _M('Módulo', $module) => $modulos[$ofertaUnidadeTematica->unidadeTematica->moduloId],
            _M('Unidade temática', $module) => $ofertaUnidadeTematica->unidadeTematica->descricao,
            _M('Nome da oferta', $module) => $ofertaUnidadeTematica->nome,
            _M('Período', $module) => $periodos[$ofertaUnidadeTematica->unidadeTematica->periodo],
            _M('Carga horária', $module) => $ofertaUnidadeTematica->cargahoraria . 'h',
            _M('Início', $module) => $ofertaUnidadeTematica->inicio,
            _M('Fim', $module) => $ofertaUnidadeTematica->fim
        );
        $fields[] = new SInformationField(array(
            'value' => $options,
            'columns' => 1,
        ));

        // Get grid
        $fields[] = new MSeparator();

        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');

        $cargaHorariaDosTiposDaUnidade = $ofertaUnidadeTematica->retornaDetalhesDaCargaHorariaDaOfertaDaUnidade();
        $grdData = new stdClass();
        $grdData->readOnly = true;
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdOfertaUnidadeTematicaTipos', $grdData);
        $grid->showExport  = false;
        $grid->actions = array();
        $grid->setData($cargaHorariaDosTiposDaUnidade);
        $divGrid = new MDiv('divGridModulos', $grid);
        $divGrid->addBoxStyle('width', '100%');
        $fields[] = new MBaseGroup('baseGroupModulos', _M('Detalhes da carga horária total da atividade (tipos)',$module), array($divGrid));

        $filtersPai = new stdClass();
        $filtersPai->ofertaDeUnidadeTematicaIdPai = $ofertaUnidadeTematica->ofertaDeUnidadeTematicaId;
        $subOfertasUnidades = ResOfertaDeUnidadeTematica::searchGrid($filtersPai);
        if (count($subOfertasUnidades) > 0) {
            $grdData = new stdClass();
            $grdData->readOnly = true;
            $grid = $MIOLO->getUI()->getGrid($module, 'GrdOfertaDeUnidadeTematicaSearch', $grdData);
            $grid->showExport = false;
            //$grid->actions = array();
            $grid->setData($subOfertasUnidades);
            $divGrid = new MDiv('divGridModulosEsp', $grid);
            $divGrid->addBoxStyle('width', '100%');
            $fields[] = new MBaseGroup('baseGroupModulos', _M('Atividades dos módulos ofertados (Específico)', $module), array($divGrid));
        }

        $grdData = new stdClass();
        $grdData->readOnly = true;
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdTemaSearch', $grdData);
        $grid->setData(ResTema::searchGrid($filters));
        $divGrid = new MDiv('divGridTemas', $grid);
        $divGrid->addBoxStyle('width', '100%');
        $fields[] = new MBaseGroup('baseGroupTemas', _M('Temas',$module), array($divGrid));

        $lotacaoDosPreceptores = $ofertaUnidadeTematica->retornaDetalhesDaLotacaoDosPreceptores();
        if (count($lotacaoDosPreceptores) > 0) {
            $grdData = new stdClass();
            $grdData->readOnly = true;
            $grid = $MIOLO->getUI()->getGrid($module, 'GrdOfertaDeUnidadeTematicaPreceptorInstituicao', $grdData);
            $grid->showExport  = false;
            $grid->actions = array();
            $grid->setData($lotacaoDosPreceptores);
            $divGrid = new MDiv('divGridLotacao', $grid);
            $divGrid->addBoxStyle('width', '100%');
            $fields[] = new MBaseGroup('baseGroupLotacao', _M('Lotação dos preceptores',$module), array($divGrid));
        }

       $nucleos = ResUnidadeTematica::obterNucleosPorUnidade($ofertaUnidadeTematica->unidadeTematica->unidadeTematicaId);
       $grdData = new stdClass();
       $grdData->readOnly = true;
       $grid = $MIOLO->getUI()->getGrid($module, 'GrdNucleoProfissionalSearch', $grdData);
       $grid->showExport  = false;
       $grid->actions = array();
       $grid->setData($nucleos);
       $divGrid = new MDiv('divGridNucleos', $grid);
       $divGrid->addBoxStyle('width', '100%');
       $fields[] = new MBaseGroup('baseGroupNucleos', _M('Núcleos profissionais',$module), array($divGrid));

       $enfases = ResUnidadeTematica::obterEnfasesComComponentePorUnidade($ofertaUnidadeTematica->unidadeTematica->unidadeTematicaId);
       $grdData = new stdClass();
       $grdData->readOnly = true;
       $grid = $MIOLO->getUI()->getGrid($module, 'GrdEnfaseSearch', $grdData);
       $grid->showExport  = false;
       $grid->actions = array();
       $grid->setData($enfases);
       $divGrid = new MDiv('divGridEnfases', $grid);
       $divGrid->addBoxStyle('width', '100%');
       $fields[] = new MBaseGroup('baseGroupEnfases', _M('Ênfases',$module), array($divGrid));

        $grdData = new stdClass();
        $grdData->readOnly = true;
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdOfertaDeUnidadeTematicaDocenteSearch', $grdData);
        $grid->setData(ResOfertaDeUnidadeTematicaDocente::searchGrid($filters));
        $divGrid = new MDiv('divGridOfertaDeUnidadeTematicaDocente', $grid);
        $divGrid->addBoxStyle('width', '100%');
        $fields[] = new MBaseGroup('baseGroupOfertaDeUnidadeTematicaDocente', _M('Docentes',$module), array($divGrid));

        MPopup::show('divPopup', $fields, _M('Mais informações', $module));
    }

}

?>