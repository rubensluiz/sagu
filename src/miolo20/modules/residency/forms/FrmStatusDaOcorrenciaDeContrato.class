<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Jonas Gualberto Diel  [jonas_diel@solis.coop.br]
 *
 * \b Maintainers \n
 * Jonas Gualberto Diel  [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 16/07/2011
 *
 */
class FrmStatusDaOcorrenciaDeContrato extends SManagementForm
{
    public function __construct()
    {
        parent::__construct(new ResStatusDaOcorrenciaDeContrato(), array('statusDaOcorrenciaDeContratoId'));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( in_array($function,  array(SForm::FUNCTION_UPDATE,  SForm::FUNCTION_DELETE)) )
        {
            $statusDaOcorrenciaDeContratoId = MIOLO::_REQUEST('statusDaOcorrenciaDeContratoId');
            $data = new $this->object($statusDaOcorrenciaDeContratoId);
            $fields[] = new MTextLabel('statusDaOcorrenciaDeContratoId', $statusDaOcorrenciaDeContratoId, _M('Código', $module));
            $fields[] = new MHiddenField('statusDaOcorrenciaDeContratoId', $statusDaOcorrenciaDeContratoId);     
        }

        //Descrição do status da ocorrência contratual
        $fields[] = $descricao = new MTextField('descricao', $this->getFormValue('descricao', $data->descricao), _M('Descrição', $module), SAGU::getParameter('BASIC','FIELD_DESCRIPTION_SIZE'));
        $descricao->addAttribute('maxlength', '255');
        $descricao->setJsHint(_M('Informe a descrição', $module));        

        //Bloqueia residência
        $fields[] = $bloqueiaResidencia = new MCheckBox('bloqueiaResidencia', DB_TRUE, _M('Bloqueia residência', $module), $this->getFormValue('bloqueiaResidencia', $data->bloqueiaResidencia) == DB_TRUE, null, _M('Este status impede que o residente continue cursando a residência', $module));
        $bloqueiaResidencia->setJsHint(_M('Informe se este status bloqueia a residência', $module));                

        //Conclui residência
        $fields[] = $concluiResidencia = new MCheckBox('concluiResidencia', DB_TRUE, _M('Conclui residência', $module), $this->getFormValue('concluiResidencia', $data->concluiResidencia) == DB_TRUE, null, _M('Este status indica que o residente concluiu a residência', $module));
        $concluiResidencia->setJsHint(_M('Informe se o residente concluiu a residência', $module));

          //Lookup de email
        $emailIdLabel = new MText('emailIdLabel', _M('E-mail', $module) . ':');
        $emailIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $emailId = new MLookupTextField('emailId', $this->getFormValue('emailId', $data->emailid), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'emailIdName', 'basic', 'email', null, array('emailId' => 'emailId'), true);
        $emailId->setJsHint(_M('Informe o código do e-mail.', $module));
        $emailIdName = new MTextField('emailIdName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $emailIdName->setJsHint(_M('Descrição do e-mail.', $module));
        $emailIdName->setReadOnly(true);
        $hctEmailId = new MHContainer('hctEmailId', array($emailIdLabel, $emailId, $emailIdName));
              
        $fields[] = $hctEmailId;
        
        $urlMail = $MIOLO->GetActionURL('basic', 'main:config:email', null, array('function' => 'insert', 'event' => 'tbBtnNew:click'));        
        
        $fields[] = $this->genericFields()->labelDica('Para o corpo do e-mail, as seguintes variáveis estão disponíveis:<br><br>  
        Código do residente: $CODIGORESIDENTE<br>
        Nome do residente: $NOMERESIDENTE<br>
        Data da ocorrência $DATA<br>
        Hora da ocorrência $HORA<br>
        Periodo da ocorrência: $PERIODO<br>
        Observação da ocorrência: $OBSERVACAO. <br><br><a href='.$urlMail.' target="_blank">Clique aqui para acessar o cadastro de e-mails e ajustar a mensagem.</a>');
        
        //Validadores
        $validators[] = new MRequiredValidator('descricao', _M('Descrição', $module));
        
        parent::defineFields($fields, $validators, $data);
    }
    
    public function getTypesData()
    {        
        $data = parent::getTypesData();

        $data->statusDaOcorrenciaDeContratoId = $this->getFormValue('statusDaOcorrenciaDeContratoId', MIOLO::_request('statusDaOcorrenciaDeContratoId') );
        $data->descricao = $this->getFormValue('descricao', MIOLO::_request('descricao') );
        $data->bloqueiaResidencia = ( strlen($this->getFormValue('bloqueiaResidencia', MIOLO::_REQUEST('bloqueiaResidencia') )) > 0 ? DB_TRUE : DB_FALSE );
        $data->concluiResidencia = ( strlen($this->getFormValue('concluiResidencia', MIOLO::_REQUEST('concluiResidencia') )) > 0 ? DB_TRUE : DB_FALSE );
        $data->emailid = $this->getRequestValue('emailId' );

        return $data;
    }
}
?>