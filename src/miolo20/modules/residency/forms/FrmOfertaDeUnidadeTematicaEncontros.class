<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * \b Maintainers \n
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 10/04/2015
 *
 */

class FrmOfertaDeUnidadeTematicaEncontros extends FrmOfertaDeUnidadeTematicaPai
{
    
    /**
     * Constantes do combo de repetição.
     */
    const REPETICAO_SEMANAL = 'S';
    const REPETICA_TODOS_OS_DIAS = 'T';
    
    /**
     * Constantes do da escolha de terminar.
     */
    const TERMINAR_ATE_OCORRENCIAS = 'O';
    const TERMINAR_FIM_OFERTA = 'F';
    
    /**
     * Construtor da classe.
     *
     * @param Array $steps
     */
    public function __construct($steps = null)
    {
        //Subdetail
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('ui/controls/msubdetail.class');
        
        parent::__construct($steps, __CLASS__, new ResOfertaDeUnidadeTematica(), array('ofertaDeUnidadeTematicaId'));
        
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
    }
    
    /**
     * Definir campos do form.
     */
    public function defineFields()
    {
       $MIOLO = MIOLO::getInstance();
       $module = $MIOLO->getCurrentModule();

       //Mensagem informativa
       $fields[] = MMessage::getStaticMessage('msgInfo', _M("Quaisquer encontros(novos, os já existentes não terão alteração) gerenciados através desta tela estarão salvando como PRESENTES todos os residentes matriculados na oferta da atividade do módulo na data do encontro.", $module), MMessage::TYPE_INFORMATION);

       //Gerar múltiplos encontros
       $labelGerar = new MLabel(_M('Gerar múltiplos encontros', $module) . ':');
       $labelGerar->setClass('m-caption');
       $labelGerar->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

       $gerarSimLabel = new MLabel(_M('Sim', $module));
       $gerarSim = new MRadioButton('gerar', DB_FALSE, null, false);
       $gerarSim->addAttribute('onChange', $this->getAjaxAction('obterCamposParaGerarEncontros', 'divGerarEncontros', false, array('gerarEncontros' => DB_TRUE)));

       $gerarNaoLabel = new MLabel(_M('Não', $module));
       $gerarNao = new MRadioButton('gerar', DB_TRUE, null, true);
       $gerarNao->addAttribute('onChange', $this->getAjaxAction('obterCamposParaGerarEncontros', 'divGerarEncontros', false, array('gerarEncontros' => DB_FALSE)));

       $fields[] = $hctRadios = new MHContainer('hctRadios', array($labelGerar, $gerarSim, $gerarSimLabel, $gerarNao, $gerarNaoLabel));

       //Campos de gerar encontros
       $fieldsEncontros = array();
       if ( MIOLO::_REQUEST('__EVENTTARGETVALUE') == 'btnGerarEncontros:click')
       {
           $args = new stdClass();
           $args->gerarEncontros = DB_TRUE;
           $fieldsEncontros = $this->obterCamposParaGerarEncontros($args);
       }

       $fields[] = $divGerarEncontros = new MDiv('divGerarEncontros', $fieldsEncontros);

       //Obtem os campos do basegroup de encontros
       $fields[] = $this->obterSubdetailEncontros();

       //Div para jogar valores nulos (limbo)
       $fields[] = $divResponse = new MDiv('divResponse', null);

       $this->setFields($fields);
    }
    
    /**
     * Obtem os campos da geração em lote de encontros.
     * 
     * @param stdClass $args
     * @return \MBaseGroup
     */
    public function obterCamposParaGerarEncontros($args = null)
    {
        if ( $args->gerarEncontros == DB_TRUE )
        {
            $stepData = $this->getStepData();

            $module = MIOLO::getCurrentModule();

            $oferta = new ResOfertaDeUnidadeTematica(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));

            //Ação de calcular as cargas horárias, já cria aqui em cima e vai usando abaixo
            $actionCalcular = array('calcularCargasHorarias', 'divResponse', false);

            //Mensagem informativa
            $fields[] = new MSeparator(null);
            $fields[] = MMessage::getStaticMessage('msgInfoGerar', _M("Os encontros gerados a partir deste recurso sempre começam a contar à partir da data de início da Oferta da Atividade do módulo.", $module), MMessage::TYPE_INFORMATION);

            $subDetailTemas = new MSubDetail('_temas');
            $temassubDetail = $subDetailTemas->getData();
            $listaTemas = array();
            foreach ($temassubDetail as $valor) {
                if ($valor->removeData != true) {
                    $listaTemas[] = array(
                        $valor->temaId,
                        $valor->temaIdDescription
                    );
                }
            }
            $temaLbl = new MLabel(_M("Tema", $module));
            $temaLbl->setClass('m-caption');
            $temaLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $tema = new MSelection('tema', $this->getFormValue('tema'), null, $listaTemas);
            $fields[] = new MHContainer('hctTema', array($temaLbl, $tema));


            $tipos = ResUnidadeTematica::listTipos();
            $tipoLbl = new MLabel(_M("Tipo", $module));
            $tipoLbl->setClass('m-caption m-caption-required');
            $tipoLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $tipo = new MSelection('tipo_', $this->getFormValue('tipo_'), null, $tipos);
            $fields[] = new MHContainer('hctTipo', array($tipoLbl, $tipo));

            $inicioLb = new MLabel(_M('Início da oferta', $module) . ':');
            $inicioLb->setClass('m-caption');
            $inicioLb->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $inicio = new MCalendarField('inicio', SAGU::NVL($stepData->inicio, $oferta->inicio), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $fields[] = new MHContainer('hctInicio', array($inicioLb, $inicio));

            //Fim da oferta
            $fields[] = new STextFieldAligned('fim', _M('Fim da oferta', $module) . ':', SAGU::NVL($stepData->fim, $oferta->fim), false, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, true);

            //Repetição
            $repeticaoLbl = new MLabel(_M("Repetição", $module));
            $repeticaoLbl->setClass('m-caption m-caption-required');
            $repeticaoLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $repeticao = new MSelection('repeticao', $this->getFormValue('repeticao'), null, $this->obterTiposDeRepeticao());
            $repeticao->addAttribute('onChange', SForm::getMultipleAjaxAction(array($actionCalcular, array('marcarDiasDaSemana', 'divResponse', false))));
            $fields[] = new MHContainer('hctRepeticao', array($repeticaoLbl, $repeticao));

            //Repete
            $repeteLbl = new MLabel(_M("Repete", $module) . ':');
            $repeteLbl->setClass('m-caption m-caption-required');
            $repeteLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $repete = new MCheckBoxGroup('repeteDias', null, SAGU::listarDiasDaSemana());
            $repete->addAttribute('onChange', SForm::getMultipleAjaxAction(array($actionCalcular)));
            $fields[] = new MHContainer('hctRepete', array($repeteLbl, $repete));

            //Termina
            $labelGerar = new MLabel(_M('Termina', $module) . ':');
            $labelGerar->setClass('m-caption m-caption-required');
            $labelGerar->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

            $gerarAposOcorrenciasLblA = new MLabel(_M('Após', $module));
            $gerarAposOcorrenciasTxt = new MTextField('quantOcorrencias', $this->GetFormValue('quantOcorrencias'));
            $gerarAposOcorrenciasTxt->setReadOnly(true);
            $gerarAposOcorrenciasTxt->addAttribute('onBlur', SForm::getMultipleAjaxAction(array($actionCalcular)));
            $gerarAposOcorrenciasLblB = new MLabel(_M(' ocorrências', $module));
            $gerarAposOcorrencias = new MRadioButton('gerarAteEm', null, null, false);
            $gerarAposOcorrencias->addAttribute('onChange', $this->getAjaxAction('ajustarCampoTermina', 'divResponse', false, array('gerarAte' => self::TERMINAR_ATE_OCORRENCIAS)));
            $hctAposOcorrencias = new MHContainer('hctAposOcorrencias', array($gerarAposOcorrencias, $gerarAposOcorrenciasLblA, $gerarAposOcorrenciasTxt, $gerarAposOcorrenciasLblB));

            $gerarAteOFimLbl = new MLabel(_M('Até a data de fim da oferta', $module));
            $gerarAteOFim = new MRadioButton('gerarAteEm', null, null, true);
            $gerarAteOFim->addAttribute('onChange', SForm::getMultipleAjaxAction(array($actionCalcular)));
            $gerarAteOFim->addAttribute('onChange', $this->getMultipleAjaxAction(array(1 => $actionCalcular, 0 => array('ajustarCampoTermina', 'divResponse', false, array('gerarAte' => self::TERMINAR_FIM_OFERTA)))));
            $hctAteOFim = new MHContainer('hctAteOFim', array($gerarAteOFim, $gerarAteOFimLbl));

            $vctRadios = new MVContainer('vctRadios', array($hctAposOcorrencias, $hctAteOFim));
            $fields[] = new MHContainer('hctTermina', array($labelGerar, $vctRadios));

            //Hora início
            $hrInicialLbl = new MLabel(_M('Hora de início', $module) . ':');
            $hrInicialLbl->setClass('m-caption m-caption-required');
            $hrInicialLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $hrInicial = new MTextField('horaInicial', $this->getFormValue('horaInicial'));
            $hrInicial->addAttribute('onBlur', SForm::getMultipleAjaxAction(array($actionCalcular)));
            $hrInicial->addAttribute('onkeyup', "
                            var validate = new objValidate(this, '99:99');
                            MIOLO_Apply_Mask(validate);
                        ");
            $fields[] = new MHContainer('hctHrInicial', array($hrInicialLbl, $hrInicial));

            //Hora fim
            $hrFimLbl = new MLabel(_M('Hora de fim', $module) . ':');
            $hrFimLbl->setClass('m-caption m-caption-required');
            $hrFimLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $hrFinal = new MTextField('horaFim', $this->getFormValue('horaFim'));
            $hrFinal->addAttribute('onBlur', SForm::getMultipleAjaxAction(array($actionCalcular)));
            $hrFinal->addAttribute('onkeyup', "
                            var validate = new objValidate(this, '99:99');
                            MIOLO_Apply_Mask(validate);
                        ");
            $fields[] = new MHContainer('hctHrFinal', array($hrFimLbl, $hrFinal));

            //Ministrante
            $ministranteLbl = new MLabel(_M('Ministrante', $module) . ':');
            $ministranteLbl->setClass('m-caption');
            $ministranteLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $ministrante = new MTextField('ministranteGerar', SAGU::NVL($this->getFormValue('ministranteGerar', $oferta->preceptor->name), $stepData->personIdDescription), NULL, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $fields[] = new MHContainer('hctMinistranteGerar', array($ministranteLbl, $ministrante));

            //Carga horária de cada encontro
            $chEncontroLbl = new MLabel(_M('Carga horária de cada encontro', $module) . ':');
            $chEncontroLbl->setClass('m-caption');
            $chEncontroLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $chEncontro = new MTextField('chEncontro', null);
            $chEncontro->setReadOnly(true);
            $fields[] = new MHContainer('hctChEncontro', array($chEncontroLbl, $chEncontro));

            //Carga horária total da oferta
            $chTotalLbl = new MLabel(_M('Carga horária total a ser gerada na oferta', $module) . ':');
            $chTotalLbl->setClass('m-caption');
            $chTotalLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $chTotal = new MTextField('chTotal', null);
            $chTotal->setReadOnly(true);
            $fields[] = new MHContainer('hctChTotal', array($chTotalLbl, $chTotal));

            //Gerar encontros
            $btnGerar = new MButton('btnGerarEncontros', _M("Gerar encontros", $module));
            $btnGerar->addBoxStyle('text-align', 'center');
            $fields[] = $btnGerar;

            //Ajusta margens dos campos
            foreach ( $fields as $campo )
            {
                $campo->addAttribute("style", "margin-top:5px");
            }

            //Hidden field para setar o tipo de geração (até o fim ou por ocorrências)
            //É populado ao clicar nos radioButtons
            $fields[] = new SHiddenField('vaiGerarEncontrosAte', self::TERMINAR_FIM_OFERTA);

            $bsg[] = new MBaseGroup('bsgMultiplosEncontros', _M('Gerar múltiplos encontros', $module), $fields, 'vertical');
        }
        
        return $bsg;
    }
    
    /**
     * Trata via ajax campos ao mudar a opção de "Termina" no formulário.
     * 
     * @param stdClass $args
     */
    public function ajustarCampoTermina($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        
        //Se for até o fim tem que ficar readOnly o campo de quantidade de ocorrências
        if ( $args->gerarAte == self::TERMINAR_FIM_OFERTA )
        {
            $jsCode = "document.getElementById('quantOcorrencias').readOnly=true;"
                    . "document.getElementById('quantOcorrencias').className='m-text-field m-readonly';"
                    . "document.getElementById('quantOcorrencias').value=null;";
        }
        elseif ( $args->gerarAte == self::TERMINAR_ATE_OCORRENCIAS )
        {
            $jsCode = "document.getElementById('quantOcorrencias').readOnly=false;";
        }
        
        //Seta qual será a geração no hiddenfield
        $jsCode .= "document.getElementById('vaiGerarEncontrosAte').value='{$args->gerarAte}';";
        
        $MIOLO->page->addAJAXJsCode($jsCode);
    }
    
    /**
     * Retorna os tipos de repetição disponíveis para opção.
     * 
     * @return array
     */
    public function obterTiposDeRepeticao()
    {
        $module = MIOLO::getCurrentModule();
        
        $options = array(
            self::REPETICAO_SEMANAL => _M("Semanal", $module),
            self::REPETICA_TODOS_OS_DIAS => _M("Todos os dias", $module)
        );
        
        return $options;
    }
    
    /**
     * Obtém a subdetail de encontros.
     * 
     * @return /MSubDetail
     */
    public function obterSubdetailEncontros()
    {
        $module = MIOLO::getCurrentModule();

        $tipos = ResUnidadeTematica::listTipos();

        //Colunas da subdetail
        $cols[] = new MGridColumn(_M("Código do encontro", $module), 'center', false, '1%', false, 'encontroId');
        $cols[] = new MGridColumn(_M("Data/hora de início", $module), 'center', false, '20%', true, 'hrInicio');
        $cols[] = new MGridColumn(_M("Data/hora de fim", $module), 'center', false, '20%', true, 'hrFim');
        $cols[] = new MGridColumn(_M("Ministrante", $module), 'left', false, '30%', true, 'ministrante');
        $cols[] = new MGridColumn(_M("Tema", $module), 'left', false, '30%', true, 'tema');
        $cols[] = new MGridColumn(_M("Tipo", $module), 'left', false, '30%', true, 'tipo', null, $tipos);


        $tipos = ResUnidadeTematica::listTipos();
        $tipoLbl = new MLabel(_M("Tipo", $module));
        $tipoLbl->setClass('m-caption m-caption-required');
        $tipoLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $tipo = new MSelection('tipo', $this->getFormValue('tipo'), null, $tipos);
        $fields[] = new MHContainer('hctTipo', array($tipoLbl, $tipo));


        //Campos da subdetail
        //Tema
        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        $temaLbl = new MLabel(_M("Tema", $module) . ":");
        $temaLbl->setClass('m-caption');
        $temaLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));

        $subDetailTemas = new MSubDetail('_temas', _M('Temas da unidade temática', $module));
        $temassubDetail = $subDetailTemas->getData();

        $listaTemas = array();
        foreach ($temassubDetail as $valor) {
            if ($valor->removeData != true) {
                $listaTemas[] = array(
                    $valor->temaId,
                    $valor->temaIdDescription
                );
            }
        }

        $tema = new MSelection('temaId', null, null, $listaTemas);
        $fields[] = new MHContainer('hctTema', array($temaLbl, $tema));
        
        //Início
        $inicioLbl = new MLabel(_M("Início", $module) . ":");
        $inicioLbl->setClass('m-caption m-caption-required');
        $inicioLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dtInicio = new MCalendarField('dtInicio');
        $hrInicio = new MTextField('hrInicio', null, null, SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), _M("hh:mm", $module));
        $hrInicio->addAttribute('onkeyup', "
            var validate = new objValidate(this, '99:99');
            MIOLO_Apply_Mask(validate);
        ");
        $fields[] = new MHContainer('hctInicio', array($inicioLbl, $dtInicio, $hrInicio));
        
        //Fim
        $fimLbl = new MLabel(_M("Fim", $module) . ":");
        $fimLbl->setClass('m-caption m-caption-required');
        $fimLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dtFim = new MCalendarField('dtFim');
        $hrFim = new MTextField('hrFim', null, null, SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), _M("hh:mm", $module));
        $hrFim->addAttribute('onkeyup', "
            var validate = new objValidate(this, '99:99');
            MIOLO_Apply_Mask(validate);
        ");
        $fields[] = new MHContainer('hctInicio', array($fimLbl, $dtFim, $hrFim));
        
        //Ministrante
        $ofertaUnidade = new ResOfertaDeUnidadeTematica(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));
        $ministranteLbl = new MLabel(_M("Ministrante", $module) . ":");
        $ministranteLbl->setClass('m-caption');
        $ministranteLbl->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $ministrante = new MTextField('ministrante', $ofertaUnidade->preceptor->name, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fields[] = new MHContainer('hctInicio', array($ministranteLbl, $ministrante));
        
        //Código do encontro e do tema
        $fields[] = new SHiddenField('encontroId', null);
        $fields[] = new SHiddenField('temaId', null);
        
        $subDetail = new MSubDetail('_encontros', _M("Encontros", $module), $cols, $fields);
        
        if ( $this->isUpdateOrDelete() )
        {
            //Setar dados da subdetail
            $encontros = ResEncontro::search($filters);

            foreach ( $encontros as $dados )
            {
                $tema = new ResTema($dados->temaId);

                $subDados[] = (object) array(
                    'encontroId' => $dados->encontroId,
                    'hrInicio' => $dados->inicio,
                    'hrFim' => $dados->fim,
                    'ministrante' => $dados->ministrante,
                    'tema' => $tema->descricao,
                    'temaId' => $dados->temaId,
                    'tipo' => $dados->tipo
                );
            }
            
            if ( $this->isFirstAccess() )
            {
                $subDetail->setData($subDados);
            }
        }

        //Sobrescrever funções da subdetail
        $subDetail->addActionEvent(MSubDetail::EVENT_ADD, 'subDetailEventAdd', __CLASS__);
        $subDetail->addActionEvent(MSubDetail::EVENT_EDIT, 'subDetailEventEdit', __CLASS__);
        
        //Validadores da subdetail
        $subValidators[] = new MRequiredValidator('tipo', _M('Tipo', $module));
        $subValidators[] = new MDATEDMYValidator('dtInicio', _M("Data de início", $module), 'required');
        $subValidators[] = new MDATEDMYValidator('dtFim', _M("Data de fim", $module), 'required');

        $subDetail->setValidators($subValidators);
        
        return $subDetail;
    }
    
    /**
     * Modifica os valores antes de passar pro subdetail.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public function subDetailEventAdd($args = null)
    {
        $args->hrInicio = $args->dtInicio . ' ' . $args->hrInicio;
        $args->hrFim = $args->dtFim . ' ' . $args->hrFim;

        if ( strlen($args->temaId) > 0 )
        {
            $tema = new ResTema($args->temaId);
            $args->tema = $tema->descricao;
        }

        return $args;
    }
    
    /**
     * Modifica os valores antes de passar para os campos da subdetail.
     * 
     * @param stdClass $args
     * 
     * @return stdClass $args
     */
    public function subDetailEventEdit($args = null)
    {
        $inicio = explode(" ", $args->hrInicio);
        $fim = explode(" ", $args->hrFim);

        $args->dtInicio = $inicio[0];
        $args->hrInicio =  $inicio[1];
        $args->dtFim = $fim[0];
        $args->hrFim =  $fim[1];

        return $args;
    }
    
    /**
     * Marca dias da semana conforme escolha, via javascript.
     * 
     * @param stdClass $args
     */
    public function marcarDiasDaSemana($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        
        $jsCode = "";
        for ( $i = 0; $i < 7; $i++ )
        {
            if ( strlen($args->repeticao) > 0 )
            {
                $jsCode .= "document.getElementById('repeteDias_{$i}').checked=true;";
            }
            else
            {
                $jsCode .= "document.getElementById('repeteDias_{$i}').checked=false;";
            }

            //Todos os dias bloqueia o desmarcar
            if ( $args->repeticao == self::REPETICA_TODOS_OS_DIAS )
            {
                $jsCode .= "document.getElementById('repeteDias_{$i}').disabled=true;";
            }
            else
            {
                $jsCode .= "document.getElementById('repeteDias_{$i}').disabled=false;";
            }
            
            $MIOLO->page->addAJAXJsCode($jsCode);
        }
    }
    
    /**
     * Obtem as cargas horárias e seta direto no valor dos campos.
     * 
     * @param stdClass $args
     */
    public function calcularCargasHorarias($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        //Obter quantidade de dias
        $quantDias = $this->obterQuantidadeDeDias($args);
        
        if ( ($args->horaInicial > 0 && $args->horaFim > 0 && $quantDias > 0) )
        {
            //Calcular carga do encontro
            $antes = new DateTime($args->horaInicial);
            $depois = new DateTime($args->horaFim);
            $diff = $antes->diff($depois);
            $chEncontro = round($diff->h + ($diff->i/60), 2);

            //Calcular carga total gerada
            $chTotal = $quantDias * $chEncontro;
        }
        
        if ( (strlen($chEncontro) && strlen($chTotal)) &&
             ($chEncontro > 0 && $chTotal > 0) )
        {
            $jsCode = "document.getElementById('chEncontro').value='{$chEncontro}';"
                    . "document.getElementById('chTotal').value='{$chTotal}';";
        }
        else
        {
            $jsCode = "document.getElementById('chEncontro').value=null;"
                    . "document.getElementById('chTotal').value=null;";
        }
        
        $MIOLO->page->addAJAXJsCode($jsCode);
    }
    
    /**
     * Retorna a quantidade de dias conforme configurações da tela.
     * 
     * @param stdClass $args

     * @return int
     */
    public function obterQuantidadeDeDias($args)
    {
        //Obtem os dias da semana selecionados e quantidade de vezes que repete
        $diasSemana = array();
        for ( $i = 0; $i < 7; $i++ )
        {
            $campo = 'repeteDias_' . $i;
            strlen($args->$campo) > 0 ? $diasSemana[$i] = null : null;
        }
        
        //Se for numérico é por quantidade de ocorrências
        $quantDias = 0;
        if ( $args->vaiGerarEncontrosAte == self::TERMINAR_FIM_OFERTA )
        {
            foreach ( $diasSemana as $dia => $item )
            {
                $quantDias = $quantDias + SAGU::obterDiasDaSemanaEmIntervalo($args->inicio, $args->fim, $dia, true);
            }
        }
        elseif ( strlen($args->quantOcorrencias) > 0 )
        {
            $quantDias = $quantDias + $args->quantOcorrencias;
        }
        
        return $quantDias;
    }
    
    public function btnGerarEncontros_click($args = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
       
        //Popula argumentos
        $args = new stdClass();
        $args->ministranteGerar = MIOLO::_REQUEST('ministranteGerar');
        $args->chTotal = MIOLO::_REQUEST('chTotal');
        $args->chEncontro = MIOLO::_REQUEST('chEncontro');
        $args->inicio = MIOLO::_REQUEST('inicio');
        $args->fim = MIOLO::_REQUEST('fim');
        $args->quantOcorrencias = MIOLO::_REQUEST('quantOcorrencias');
        $args->horaInicial = MIOLO::_REQUEST('horaInicial');
        $args->horaFim = MIOLO::_REQUEST('horaFim');
        $args->repeticao = MIOLO::_REQUEST('repeticao');
        $args->tema = MIOLO::_REQUEST('tema');
        $args->tipo = MIOLO::_REQUEST('tipo_');


        
        for ( $i = 0;  $i < 7; $i++ )
        {
            $campo = 'repeteDias_' . $i;
            $args->$campo = MIOLO::_REQUEST($campo);
        }
        
        //Validações
        if ( !(strlen($args->chTotal) > 0) ||
             !(strlen($args->chEncontro) > 0) ||
            !(strlen($args->tipo) > 0) )
        {
            $this->addError(_M("Por favor, para poder gerar os encontros em lote, é necessário informar todos os campos obrigatórios (marcados com <font color=\"red\"><strong>*</strong></font>).", $module));
            return false;
        }
        elseif ( $args->horaInicial > $args->horaFim )
        {
            $this->addError(_M("Por favor, digite horas de início e fim válidas.", $module));
            return false;
        }
        
        $datasGerar = $this->obterDatasParaGerarOsEncontros($args);

        //Não vai salvar agora, vai jogar para a subDetail e salvar no final
        try
        {
            foreach ( $datasGerar as $data )
            {
                //Valida data (não pode passar do fim da oferta)
                if ( SAGU::compareTimestamp($args->fim, '<' , $data) )
                {
                    throw new Exception(_M("Opa! Você está tentando gerar mais encontros do que o período da Oferta da Atividade do módulo.", $module));
                }

                $tema = new ResTema($args->tema);

                $_SESSION['encontros'][] = (object) array(
                    'encontroId' => null,
                    'hrInicio' => ($data . ' ' . $args->horaInicial),
                    'hrFim' => ($data . ' ' . $args->horaFim),
                    'ministrante' => $args->ministranteGerar,
                    'tema' => $tema->descricao,
                    'temaId' => $tema->temaId,
                    'tipo' => $args->tipo
                );
            }

            MSubDetail::addData($_SESSION['encontros'], '_encontros');
            
            $this->AddInfo(_M("Os encontros gerados foram adicionados à tabela de 'Encontros' abaixo, disponíveis para gerenciamento. Para salvá-los não se esqueça de <strong>Salvar</strong>.", $module));
        }
        catch (Exception $ex)
        {
            $this->addError($ex->getMessage());
        }
    }
    
    public function obterDatasParaGerarOsEncontros($args = null)
    {
        //Obtem os dias da semana selecionados
        $diasSemana = array();
        for ( $i = 0; $i < 7; $i++ )
        {
            if ( $args->repeticao == self::REPETICA_TODOS_OS_DIAS )
            {
                $diasSemana[$i] = null;
            }
            else
            {
                $campo = 'repeteDias_' . $i;
                strlen($args->$campo) > 0 ? $diasSemana[$i] = null : null;
            }
        }
        
        //Obtém as datas dos encontros que serão gerados
        $datasGerar = array();
        if ( strlen($args->quantOcorrencias) > 0 )
        {
            //Se for quant de ocorrências
            $cont = $args->quantOcorrencias;
            $chaveAtual = 0;
            
            //Faz a lógica pra pegar os dias certos ate fechar a quantidade de ocorrências
            while ( $cont > 0 )
            {
                foreach ( $diasSemana as $dia => $item )
                {
                    if ( $cont > 0 )
                    {
                        $datasDoDia = SAGU::obterDiasDaSemanaEmIntervalo($args->inicio, $args->fim, $dia);
                        
                        $datasGerar[] = $datasDoDia[$chaveAtual];
                        
                        $cont--;
                    }
                }
                $chaveAtual++;
            }
        }
        else
        {
            //Se for gerar até o fim, só vai acumulando as datas disponíveis
            foreach ( $diasSemana as $dia => $item )
            {
                //Obtém dias possíveis ao longo da oferta em que cai o dia da semana
                $datasDoDia = SAGU::obterDiasDaSemanaEmIntervalo($args->inicio, $args->fim, $dia);
                $datasGerar = array_merge($datasDoDia, $datasGerar);
            }
        }
        
        sort($datasGerar);
        $datasGerar = array_unique($datasGerar);
        
        return $datasGerar;
    }
}

?>