<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário para impressão da declaração de participação em banca
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 19/07/2011
 **/

class FrmRelatorioResidentesPorTurma extends SForm
{
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Residentes por turma', $module), null, null);

        //Desabilita os botões da toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'generateReport')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');


        // Lookup de turma
        $optsTurma = array(
            'label' => _M('Turma', $module),
            'item' => 'Turma',
            'module' => 'residency',
        );
        $turma = new SLookupContainer('codigoTurma', $this->getRequestValue('codigoTurma'), $optsTurma);
        $fields[] = $turma;
        $validators[] = new MRequiredValidator('codigoTurma', _M('Turma', $module));


        //Separator
        $fields[] = new MSeparator('');

        $this->setValidators($validators);
        $this->setFields($fields);
        
        parent::defineFields();
    }

    /**
     * Método para geração do Relatório
     *
     */
    public function generateReport($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();
        $options['module'] = $module;
        $options['reportName'] = 'residentes_na_turma_por_instituicao';

        if ( strlen($data->codigoTurma)>0 )
        {
            $options['parameters']['codigoTurma'] = $data->codigoTurma;
        }


        $sreport = new SReport($options);

        if ( !$sreport->generate() )
        {
            $this->addError(_M('Nenhum registro encontrado.', $module ));
        }
    }

    /**
     * Método que obtem os dados do formulário.
     *
     */
    public function getTypesData() 
    {
        $data = new stdClass();
        $data->codigoTurma = $this->GetFormValue('codigoTurma');

        return $data;
    }
}
?>
