<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * \b Maintainers \n
 *  Fabiano Tomasini [fabiano@solis.coop.br]
 *  Joao Francisco Padilha Souza
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class FrmFaltasDaOfertaDaUnidadeTematica extends SManagementForm
{

    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(null, array(  ), null, _M('Faltas', $module));

        //Desabilita botões toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);

        //Desabilita toolbar
        if( MIOLO::_REQUEST('return_to') == 'services' )
        {
            $this->disableToolbar();
        }
    }

    private function retornaInstituicaoExecutoraDoPreceptorLogado()
    {
        $instituicaoExecutoraId = null;
        $preceptorLogado = ResPreceptoria::retornaPreceptorLogado();
        if (count($preceptorLogado)) {
            $filters = new stdClass();
            $filters->preceptorId = $preceptorLogado->preceptorId;
            $filters->ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
            $preceptorInstituicao = ResOfertaDeUnidadeTematicaPreceptorInstituicao::search($filters);
            return $preceptorInstituicao[0]->instituicaoExecutoraId;
        }
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( MIOLO::_REQUEST('module') == 'services' )
        {
            //Caso a pessoa não veja o professor da oferecida e nem o responsável
            $check = $check = $this->verificaUsuario();
        }
        else
        {
            $check = DB_TRUE;
        }

        if ( MIOLO::_REQUEST('return_to') == 'services' )
        {
            $gfields = new sGenericFields();
            $fields[] = $gfields->labelDica( _M('Os dados só poderão ser alterados pelo preceptor responsável pela enfase e núcleo ou o preceptor do oferecimento da oferta da atividade do rodízio.'));
        }

        try
        {
            if ( !strlen($ofertaDeUnidadeTematicaId = $this->getFormValue('ofertaDeUnidadeTematicaId')) > 0 )
            {
                throw new Exception(_M('Oferta de unidade temática não informada', $module) . '.');
            }
            //Oferta de unidade tematica
            $ofertaDeUnidadeTematica = new ResOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
            //Lista de tipos de unidade temática
            $listTipoDeUnidadeTematica = ResUnidadeTematica::listTipos();
            //Lista de períodos de unidade temática
            $listPeriodoDaUnidadeTematica = ResUnidadeTematica::listPeriodos();
            //Retorno do botão voltar
            $returnTo = $this->getRequestValue('return_to');
            $fields[] = new SHiddenField('return_to', $returnTo);

            //Não habilita o botão salvar caso a unidade temática esteja fechada
            if( strlen($ofertaDeUnidadeTematica->encerramento) > 0 )
            {
                $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            }

        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }
        //Hidden field oferta de unidade temática
        $fields[] = new SHiddenField('ofertaDeUnidadeTematicaId', $this->getRequestValue('ofertaDeUnidadeTematicaId'));

        //Informações da unidade temática
        $options = array(
            'title' => _M('Dados da oferta da atividade do módulo', $module),
            'columns' => 1,
            'value' => array(
                _M('Descrição') => $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId . ' - ' . $ofertaDeUnidadeTematica->unidadeTematica->descricao,
                _M('CH lançada/prevista') => $ofertaDeUnidadeTematica->cargaHoraria,
                _M('Período') => $listPeriodoDaUnidadeTematica[$ofertaDeUnidadeTematica->unidadeTematica->periodo],
                _M('Início') => $ofertaDeUnidadeTematica->inicio,
                _M('Fim') => $ofertaDeUnidadeTematica->fim )
        );
        $fields[] = new SInformationField($options);
        $fields[] = new MSeparator();

        //Se evento nao for novo encontro adiciona botao para inserir novo
        if ( !in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro', 'tbBtnSave:click' )) )
        {
            //Desabilita botão deletar
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);

            //Botão novo encontro
            $fields[] = new MVContainer('tabelaEncontros', $this->obtemTabelaEncontros($ofertaDeUnidadeTematicaId));
        }

        //Verifica se a unidade tematica está fechada e impede editar a frequência
        if( strlen($ofertaDeUnidadeTematica->encerramento) > 0 )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        }



        $opts = array( 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId ,'return_to'=>$this->getRequestValue('return_to'));
        $href = $MIOLO->getActionURL('residency', 'main:register:faltasDaOfertaDaUnidadeTematica', null, $opts);
        $btns[] = new MButton('button_back', _M('<< Voltar', $module), $href);

        $fields[] = new MHContainer('cntButtons', $btns);

        parent::defineFields($fields, $validators, $data);

    }



    /**
     * Obtém a tabela de encontros e registros de frequência,
     * registros são somente leitura
     *
     * @param int $ofertaDeUnidadeTematicaId
     * @return array $fields
     */
    public function obtemTabelaEncontros($ofertaDeUnidadeTematicaId)
    {
        $MIOLO = MIOLO::getInstance();

        $ofertaDeUnidadeTematica = new ResOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);


        //Business file
        $busFile = $MIOLO->getBusiness('basic', 'BusFile');

        //Obtém residentes e registros de frequência e justificativa para cada encontro
        $instituicaoExecutoraId = null;
        $filters = new stdClass();
        $preceptorLogado = ResPreceptoria::retornaPreceptorLogado();
        if (count($preceptorLogado)) {
            $preceptor = $preceptorLogado;
            $tipoPreceptorLogadoParaOModulo = $preceptor->retornaTipoDePreceptorParaOModuloDaOferta(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));

            if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_PRECEPTOR) {
                $instituicaoExecutoraId = $this->retornaInstituicaoExecutoraDoPreceptorLogado();
                $filters->instituicaoExecutoraId = $instituicaoExecutoraId;
            } else if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_TUTOR) {
                $filters->enfaseId = $preceptor->enfaseId;
            }
        }

        $dataEncontro = MIOLO::_REQUEST('dataEncontro');

        if (!empty($dataEncontro)) {
            $filters->inicio = $dataEncontro;
        }

        $tabelaFrequencias = ResOfertaDeUnidadeTematica::obtemTabelaFrequencias($ofertaDeUnidadeTematicaId, null, false, $filters);




        //Deixa habilitado inserção e adição apenas para preceptor responsável
        $check = $this->verificaUsuario();

        //Array utilizado pela tabela
        $dataTable = array( );
        //Controla se ja tem cabeçalho
        $cabecalho = false;
        if ( count($tabelaFrequencias) > 0 )
        {
            //Colunas fixas
            $columns[] = _M('Foto', $module);
            $columns[] = _M('Residente', $module);



            foreach ($ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaTipos as $ofertaTipo) {
                if ($ofertaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_PRATICA) {
                    $columns[] = _M('Prática (' . $ofertaTipo->cargaHoraria . ' Horas)', $module);
                } else if ($ofertaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_CONCEITUAL) {
                    $columns[] = _M('Teórico-conceitual (ead+presencial) (' . $ofertaTipo->cargaHoraria . ' Horas)', $module);
                }else if ($ofertaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_PRATICA) {
                    $columns[] = _M('Teórico-prática (campo+núcleo) (' . $ofertaTipo->cargaHoraria . ' Horas)', $module);
                }
            }

            foreach ( $tabelaFrequencias as $key => $row )
            {

                //Contador colunas da tabela
                $coluna = 0;

                unset($personFile);

                if ( strlen($row->photoId) > 0 )
                {
                    $path = $busFile->getUrl($row->photoId, array( 'permission' => true ));
                    $personFile = new MImage('personFile_' . $row->photoId, NULL, $path, 'width="' . (int) SAGU::getParameter('BASIC', 'PHOTO_WIDTH') . '" height="' . (int) SAGU::getParameter('BASIC', 'PHOTO_HEIGHT') . '"');
                    $personFile->addBoxStyle('text-align', 'center');
                }


                //Imagem da pessoa
                $dataTable[$key][$coluna] = $personFile;
                $coluna++;

                //Nome da pessoa
                $notActiveAlert = '';

                $residente = new ResResidente($row->residenteId);
                if ( $residente->isActive == DB_FALSE )
                {
                    $alert = new MLabel(_M('Bloqueado pelo último estado contratual: @1', $module, $residente->ultimoStatusDaOcorrenciaDeContrato->descricao));
                    $alert->setColor('red');
                    $alert->setBold(true);

                    $notActiveAlert = '<br>' . $alert->generate();
                }


                /*
                $urlRelatorio = $MIOLO->GetActionURL($module, 'main:document:frequenciaIndividualDoResidenteAtividadeDoModulo', '', array('residenteid' => $row->residenteId, 'ofertaatividademodulo' => $ofertaDeUnidadeTematicaId));
                $relatorio = new MLink('relatorio', '(Relatório detalhado de frequência)', $urlRelatorio, null, '_blank');

                $dataTable[$key][$coluna] = $row->name . $notActiveAlert . ' - ' . $relatorio->generate();*/
                $dataTable[$key][$coluna] = $row->name . $notActiveAlert;
                $coluna++;


                foreach ($ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaTipos as $ofertaTipo) {





                    if ($ofertaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_PRATICA) {


                        $faltaObj = ResOfertaDoResidente::obtemFaltaDoResidenteNaOfertaDeUnidadeTematica($residente->residenteId, $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId,  $ofertaTipo->tipo);

                        $observacao = new MMultilineField('observacao_' . $ofertaTipo->tipo . '_' . $residente->residenteId, $faltaObj['observacao'], _M('Observação', $module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_COLS'));
                        $observacao->setAttribute('placeholder', 'Observação (opcional)');
                        $dataTable[$key][$coluna] = $observacao;

                        $falta = 0;
                        $faltaResidente = new MTextField('falta_' . $ofertaTipo->tipo . '_' . $residente->residenteId, $faltaObj['falta'] == null ? 0 : $faltaObj['falta'], '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                        $faltaResidente->setAttribute('placeholder', 'horas');
                        $faltaResidente->setAttribute('onchange', "javascript:verificaFalta('falta_{$ofertaTipo->tipo}_{$residente->residenteId}', '$ofertaTipo->cargaHoraria')");
                        $divFaltaResidente = new MDiv('divFaltaResidente', $faltaResidente);
                        $divFaltaResidente->addBoxStyle('text-align', 'center');
                        $dataTable[$key][$coluna] = $divFaltaResidente->generate() . $observacao->generate();
                        $coluna++;


                    } else if ($ofertaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_CONCEITUAL) {


                        $faltaObj = ResOfertaDoResidente::obtemFaltaDoResidenteNaOfertaDeUnidadeTematica($residente->residenteId, $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId,  $ofertaTipo->tipo);

                        $observacao = new MMultilineField('observacao_' . $ofertaTipo->tipo . '_' . $residente->residenteId, $faltaObj['observacao'], _M('Observação', $module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_COLS'));
                        $observacao->setAttribute('placeholder', 'Observação (opcional)');
                        $dataTable[$key][$coluna] = $observacao;

                        $falta = 0;
                        $faltaResidente = new MTextField('falta_' . $ofertaTipo->tipo . '_' . $residente->residenteId, $faltaObj['falta'] == null ? 0 : $faltaObj['falta'], '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                        $faltaResidente->setAttribute('placeholder', 'horas');
                        $faltaResidente->setAttribute('onchange', "javascript:verificaFalta('falta_{$ofertaTipo->tipo}_{$residente->residenteId}', '$ofertaTipo->cargaHoraria')");
                        $divFaltaResidente = new MDiv('divFaltaResidente', $faltaResidente);
                        $divFaltaResidente->addBoxStyle('text-align', 'center');
                        $dataTable[$key][$coluna] = $divFaltaResidente->generate() . $observacao->generate();
                        $coluna++;


                    } else if ($ofertaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_PRATICA) {


                        $faltaObj = ResOfertaDoResidente::obtemFaltaDoResidenteNaOfertaDeUnidadeTematica($residente->residenteId, $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId,  $ofertaTipo->tipo);

                        $observacao = new MMultilineField('observacao_' . $ofertaTipo->tipo . '_' . $residente->residenteId, $faltaObj['observacao'], _M('Observação', $module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_COLS'));
                        $observacao->setAttribute('placeholder', 'Observação (opcional)');
                        $dataTable[$key][$coluna] = $observacao;

                        $falta = 0;
                        $faltaResidente = new MTextField('falta_' . $ofertaTipo->tipo . '_' . $residente->residenteId, $faltaObj['falta'] == null ? 0 : $faltaObj['falta'], '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                        $faltaResidente->setAttribute('placeholder', 'horas');
                        $faltaResidente->setAttribute('onchange', "javascript:verificaFalta('falta_{$ofertaTipo->tipo}_{$residente->residenteId}', '$ofertaTipo->cargaHoraria')");
                        $divFaltaResidente = new MDiv('divFaltaResidente', $faltaResidente);
                        $divFaltaResidente->addBoxStyle('text-align', 'center');
                        $dataTable[$key][$coluna] = $divFaltaResidente->generate() . $observacao->generate();
                        $coluna++;

                    }
                }

                //Ja tem cabeçalho
                $cabecalho = true;
            }



            $jsCode = " function verificaFalta(faltaResidente, horasCargaHoraria) 
                    {                  
                    
                    
                        var horasCargaHoraria = parseInt(horasCargaHoraria);
                        var falta = document.getElementById(faltaResidente); 
                        
                          
                                   
                        // Verifica se é um número 
                        if ( isNaN(falta.value*1) )
                        {
                            document.getElementById(faltaResidente).value = '';
                            return;
                        }
                        
                        // Verifica se a nota informada é maior que a nota máxima configurada na unidade temática
                        if ( falta.value > horasCargaHoraria )
                        {                        
                            alert('A falta informada não pode ser superior a carga horaria configurada para o rodízio');
                            falta.value = '';
                            falta.focus();
                        }

                    } ";

            $this->AddJsCode($jsCode);

            $table = new MTableRaw(_M('Registro de faltas', $module), $dataTable, $columns);
            $table->SetAlternate(true);
            $fields[] = $tableEncontrosDiv = new MDiv('tableEncontrosDiv', $table, null, 'width=100%');

            // define alinhamentos a direita
            foreach ( $dataTable as $k => $row )
            {
                $table->setCellAttribute($k, 3, 'align', 'right');
                $table->setCellAttribute($k, 3, 'valign', 'top');
                $table->setCellAttribute($k, 4, 'align', 'right');
                $table->setCellAttribute($k, 4, 'valign', 'top');
            }
        }
        else
        {
            $info = _M('Nenhum residente matriculado nessa oferta de unidade temática') . '.';
            $this->AddInfo($info);
        }

        return $fields;
    }

    /**
     * Função que salva os dados
     *
     * @param $sender
     */
    public function tbBtnSave_click($sender = NULL)
    {

        $MIOLO = MIOLO::getInstance();

        $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');

        try
        {
            SDatabase::beginTransaction();

            $tabelaFrequencias = ResOfertaDeUnidadeTematica::obtemTabelaFrequencias($ofertaDeUnidadeTematicaId, null, false);

            foreach ( $tabelaFrequencias as $key => $row )
            {

                $residente = new ResResidente($row->residenteId);
                $ofertaDeUnidadeTematica = new ResOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);


                $ok = false;
                $falta= 0;

                foreach ($ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaTipos as $ofertaTipo) {


                    if ($ofertaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_PRATICA) {
                        $campoFalta = 'falta_P_' . $residente->residenteId;
                        $tipo = ResTipoDeUnidadeTematica::TIPO_UNIDADE_PRATICA;
                        $falta = $_REQUEST[$campoFalta];




                        $campoObservacao = 'observacao_P_' . $residente->residenteId;
                        $observacao = $_REQUEST[$campoObservacao];


                    } else if ($ofertaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_CONCEITUAL) {
                        $campoFalta = 'falta_C_' . $residente->residenteId;
                        $tipo = ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_CONCEITUAL;
                        $falta = $_REQUEST[$campoFalta];


                        $campoObservacao = 'observacao_C_' . $residente->residenteId;
                        $observacao = $_REQUEST[$campoObservacao];

                    } else if ($ofertaTipo->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_PRATICA) {
                        $campoFalta = 'falta_T_' . $residente->residenteId;
                        $tipo = ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_PRATICA;
                        $falta = $_REQUEST[$campoFalta];


                        $campoObservacao = 'observacao_T_' . $residente->residenteId;
                        $observacao = $_REQUEST[$campoObservacao];
                    }


                    $data = new stdClass();
                    $data->residenteId = $residente->residenteId;
                    $data->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
                    $data->falta = $falta;
                    $data->observacao = $observacao;
                    $data->tipo = $tipo;




                    if ($falta != null) {
                        $ok = ResOfertaDoResidente::salvaFaltaDoResidente($data);

                        if ( !$ok )
                        {
                            throw new Exception(_M("Não foi possível salvar a falta do residente {$residente->residenteId} - $residente->name."));
                        }
                    }
                }
            }


            SDatabase::commit();

            $this->AddInfo(_M('Faltas salvas com sucesso.'));

            // Chamado o define fields para carregar e exibir as notas salvas
            //$this->defineFields();
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();

            $this->Error($e->getMessage());
        }
    }

    /*
     * Verifica se usuário é professor ou responsável, se não bloqueia a edição
     */
    public function verificaUsuario()
    {
        $MIOLO = MIOLO::getInstance();

        // Obtem pessoa
        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson = $MIOLO->getBusiness('basic', 'BusPerson');
        $personData = $busPerson->getPersonByMioloUserName($mioloUserName);

        //Caso a pessoa não veja o professor da oferecida e nem o responsável
        $check = DB_TRUE;

        //Verfica se a pessoa logada é o professor da oferecida
        $oferta = new ResOfertaDeUnidadeTematica( MIOLO::_REQUEST('ofertaDeUnidadeTematicaId') );

        $preceptor = ResPreceptoria::responsavelNucleoEnfaseReferencia($personData->personId);

        //Verifica se é professor responsável
        $responsavel = MIOLO::_REQUEST('responsavel');

        //Caso o não seja o professor da oferecida, verfica se é um responsável, e referencia a enfase
        if ( ($personData->personId != $oferta->personId && $responsavel == DB_FALSE) || !count($preceptor) > 0 )
        {
            $check = DB_FALSE;
        }

        return $check;
    }
}
?>