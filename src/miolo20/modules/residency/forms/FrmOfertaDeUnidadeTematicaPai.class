<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * \b Maintainers \n
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 10/04/2015
 *
 */

class FrmOfertaDeUnidadeTematicaPai extends SStepByStepForm
{
    public function __construct($steps, $form, $object, $primaryKey)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('ui/controls/msubdetail.class');

        parent::__construct(null, $steps, $form, $object, $primaryKey);
    }
        
    public function getTypesData()
    {
        $stepData = $this->getStepData();

        if ( !(count((array) $stepData) > 0) )
        {
            $stepData = $this->getData();
        }
        elseif ( MIOLO::_REQUEST('origem') == 'GrdOfertas' && 
                 !(strlen($stepData->ofertaDeUnidadeTematicaId) > 0) )
        {
            $stepData = new ResOfertaDeUnidadeTematica(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));
        }

        $objeto = new ResOfertaDeUnidadeTematica();
        
        $objeto->ofertaDeUnidadeTematicaId = $stepData->ofertaDeUnidadeTematicaId;
        $objeto->turmaId = $stepData->turmaId;
        $objeto->ofertaDeUnidadeTematicaIdPai = $stepData->ofertaDeUnidadeTematicaIdPai;
        $objeto->personId = $stepData->personId;
        $objeto->unidadeTematicaId = $stepData->unidadeTematicaId;
        $objeto->inicio = $stepData->inicio;
        $objeto->fim = $stepData->fim;
        $objeto->instituicaoExecutora = $stepData->instituicaoExecutora;
        $objeto->instituicaoFormadora = $stepData->instituicaoFormadora;
        $objeto->nome = $stepData->nome;
        $objeto->semestre = $stepData->semestre;
        $objeto->cargaHoraria = $stepData->cargaHoraria;
        $objeto->horas_P = $stepData->horas_P;
        $objeto->horas_TC = $stepData->horas_TC;
        $objeto->horas_TP = $stepData->horas_TP;
        $objeto->acompanhamentoencontro = $stepData->acompanhamentoencontro;

        return $objeto;
    }
    
    public function finalizeButton_click($args)
    {
        parent::finalizeButton_click($args);

        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $data = $this->getTypesData();

        try
        {
            SDatabase::beginTransaction();

            $object = $this->getTypeObjectPopulated();

            foreach ( (array) $object->getObjectVars() as $key => $val )
            {
                if ( $key != 'temas' && $key != 'encontros' && $key != 'docentes'  )
                {
                    $object->$key = $data->$key;
                }
            }

            //valida carga horaria da oferta

            /*if (!$object->cargaHorariaOfertaValida()) {
                throw new Exception( _M('A carga horária digitada na oferta excede a carga horária pra atividade do módulo', $module) );
            }*/

            if ( SAGU::compareTimestamp($object->inicio, '>', $object->fim) )
            {
                throw new Exception( _M('A data de início não pode ser maior que a data de fim', $module) );
            }


            foreach ( (array)$object->ofertaDeUnidadeTematicaTipos as $ofertaDeUnidadeTematicaTipo )
            {
                $ok = $ofertaDeUnidadeTematicaTipo->delete();
                if ( !$ok )
                {
                    $msg = _M('Erro ao excluir os tipos da oferta', $module);
                    throw new Exception($msg);
                }
            }

            // Temas
            foreach ( (array)$object->temas as $tema )
            {
                $ok = $tema->delete();
                if ( !$ok )
                {
                    $msg = _M('Erro ao excluir os temas da atividade', $module);
                    throw new Exception($msg);
                }
            }

            foreach ( (array)$object->docentes as $docente )
            {
                $ok = $docente->delete();
                if ( !$ok )
                {
                    $msg = _M('Erro ao excluir os docentes da atividade', $module);
                    throw new Exception($msg);
                }
            }

            foreach ( (array)$object->preceptoresInstituicoes as $preceptorInsti )
            {
                $ok = $preceptorInsti->delete();
                if ( !$ok )
                {
                    $msg = _M('Erro ao excluir os preceptores e instituições da oferta', $module);
                    throw new Exception($msg);
                }
            }


            $tipos = ResUnidadeTematica::listTipos();
            $ofertaDeUnidadesTematicaTiposArray = array();
            foreach ($tipos as $idTipo => $tipo) {
                $resOfertaDeUnidadesTematicaTipo = new ResOfertaDeUnidadeTematicaTipos();
                $resOfertaDeUnidadesTematicaTipo->tipo = $idTipo;

                if ($idTipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_PRATICA) {
                    $resOfertaDeUnidadesTematicaTipo->cargaHoraria = round($data->horas_P);
                } else if ($idTipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_CONCEITUAL) {
                    $resOfertaDeUnidadesTematicaTipo->cargaHoraria = round($data->horas_TC);
                } else if ($idTipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_PRATICA) {
                    $resOfertaDeUnidadesTematicaTipo->cargaHoraria = round($data->horas_TP);
                }
                $ofertaDeUnidadesTematicaTiposArray[] = $resOfertaDeUnidadesTematicaTipo;
            }


            $object->ofertaDeUnidadeTematicaTipos = $ofertaDeUnidadesTematicaTiposArray;


            $temas = array();
            foreach ( (array)MSubDetail::getData('_temas') as $row )
            {
                if ( !$row->removeData )
                {
                    $tema = new ResTemaDaUnidadeTematica();
                    $tema->temaId = $row->temaId;
                    $tema->cargaHoraria = $row->cargaHorariaSubDetail;
                    $temas[] = $tema;
                }
            }
            $object->temas = $temas;


            $docentes = array();
            foreach ( (array)MSubDetail::getData('_docentes') as $row )
            {
                if ( !$row->removeData )
                {
                    $docente = new ResOfertaDeUnidadeTematicaDocente();
                    $docente->docenteId = $row->docenteId;
                    $docente->mostrarNomeCertificado = $row->mostrarNomeCertificado;
                    $docentes[] = $docente;
                }
            }
            $object->docentes = $docentes;

            $preceptoresInstituicoes = array();
            foreach ( (array)MSubDetail::getData('_preceptoresInstituicoes') as $row )
            {
                if ( !$row->removeData )
                {
                    $preceptorInstituicao = new ResOfertaDeUnidadeTematicaPreceptorInstituicao();
                    $preceptorInstituicao->preceptorId = $row->preceptorId;
                    $preceptorInstituicao->instituicaoExecutoraId = $row->instituicaoExecutoraId;
                    $preceptoresInstituicoes[] = $preceptorInstituicao;
                }
            }
            $object->preceptoresInstituicoes = $preceptoresInstituicoes;

            $this->validaCargaHoraria($ofertaDeUnidadesTematicaTiposArray);

            $encontros = array();
            foreach ( (array)MSubDetail::getData('_encontros') as $row )
            {
                $encontro = new ResEncontro();
                $encontro->encontroId = $row->encontroId;
                $encontro->temaId = $row->temaId;
                $encontro->inicio = $row->hrInicio;
                $encontro->fim = $row->hrFim;
                $encontro->ministrante = $row->ministrante;
                $encontro->tipo = $row->tipo;

                if ( !$row->removeData )
                {
                    $encontros[] = $encontro;
                }
                elseif ( strlen($encontro->encontroId) > 0 )
                {
                    $encontro->delete();
                }
            }
            $object->encontros = $encontros;

            $ok = $object->save();

            foreach ((array) MSubDetail::getData('subAtividadesDoModulos') as $sub) {
                if ($sub->removeData == true) {
                    $ofertaDeUnidadeTematica = new ResOfertaDeUnidadeTematica($sub->ofertaDeUnidadetematicaidDetail);
                    $ofertaDeUnidadeTematica->delete();
                } else {

                    $ofertaDeUnidadeTematica = new ResOfertaDeUnidadeTematica();

                    if ($sub->ofertaDeUnidadetematicaidDetail > 0) {
                        $ofertaId = $sub->ofertaDeUnidadetematicaidDetail;
                    } else {
                        $ofertaId = null;
                    }

                    $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId = $ofertaId;
                    $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaIdPai = $object->ofertaDeUnidadeTematicaId;
                    $ofertaDeUnidadeTematica->unidadeTematicaId = $sub->subUnidadeTematicaId;
                    $ofertaDeUnidadeTematica->inicio = $object->inicio;
                    $ofertaDeUnidadeTematica->fim = $object->fim;
                    $ofertaDeUnidadeTematica->nome = $sub->nomeDetail;
                    $ofertaDeUnidadeTematica->instituicaoFormadora = $object->instituicaoFormadora;
                    $ofertaDeUnidadeTematica->semestre = $object->semestre;
                    $ofertaDeUnidadeTematica->cargaHoraria = $object->cargaHoraria;
                    $ofertaDeUnidadeTematica->turmaId = $object->turmaId;


                    foreach ( (array)$ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaTipos as $ofertaDeUnidadeTematicaTipo )
                    {
                        $ok = $ofertaDeUnidadeTematicaTipo->delete();
                        if ( !$ok )
                        {
                            $msg = _M('Erro ao excluir os tipos da oferta', $module);
                            throw new Exception($msg);
                        }
                    }

                    $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaTipos = $ofertaDeUnidadesTematicaTiposArray;

                    $ofertaDeUnidadeTematica->save();
                }
            }

            SDatabase::commit();
            
            if ( $ok )
            {
                parent::tbBtnSave_click($sender, $ok, array('ofertaDeUnidadeTematicaIdS' => MIOLO::_REQUEST('ofertaDeUnidadeTematicaId')));
            }
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $this->AddError( $e->getMessage() );
        }
    }

    private function validaCargaHoraria($ofertaDeUnidadesTematicaTiposArray)
    {
        // guardando a carga horaria da atividade com os tipos
        $cargaHorariaTipos = array();
        foreach ( (array)MSubDetail::getData('_encontros') as $row ) {
            if (!$row->removeData) {
                $cargaHoraria = ResEncontro::retornaCargaHoraria($row->hrInicio, $row->hrFim);
                if (ResTipoDeUnidadeTematica::TIPO_UNIDADE_PRATICA == $row->tipo) {
                    $cargaHorariaTipos[ResTipoDeUnidadeTematica::TIPO_UNIDADE_PRATICA] += $cargaHoraria;
                } else if (ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_CONCEITUAL == $row->tipo) {
                    $cargaHorariaTipos[ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_CONCEITUAL] += $cargaHoraria;
                } else if (ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_PRATICA == $row->tipo) {
                    $cargaHorariaTipos[ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_PRATICA] += $cargaHoraria;
                }
            }
        }

        foreach ($ofertaDeUnidadesTematicaTiposArray as $tipo) {
            if ($cargaHorariaTipos[$tipo->tipo] > $tipo->cargaHoraria) {
                $tipoDeUnidadeTematica = new ResTipoDeUnidadeTematica();
                $listaTipos = $tipoDeUnidadeTematica::listTipos();
                throw new Exception( _M('O total de carga horária do tipo (@1) está excedendo a carga horária permitida pela atividade do módulo', $module, $listaTipos[$tipo->tipo]) );
            }
        }
    }
    
    public function  tbBtnSave_click($sender = NULL)
    {
        $this->finalizeButton_click($args);
    }
}
?>