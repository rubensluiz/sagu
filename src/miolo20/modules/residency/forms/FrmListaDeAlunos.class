<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel I. da Silva [nataniel@solis.com.br]
 *
 * @since
 * Class created on 05/11/2014
 *
 **/

class FrmListaDeAlunos extends SForm
{
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        
        parent::__construct(_M('Lista de alunos', $module));
        
        $this->disableToolbar();
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $turmaId = MIOLO::_REQUEST('turmaId');
        $event = MIOLO::_REQUEST('__EVENTTARGETVALUE');
        $eventDelete = MIOLO::_REQUEST('eventDelete');
        
        // Ação da grid de remover o aluno da turma
        if ( $eventDelete == 'removeAlunoDaTurma' )
        {
            $residenteId = MIOLO::_REQUEST('residenteId');
            
            $residente = new ResResidente($residenteId);
            $residente->turmaId = '';
            $residente->save();
            
            $url = $MIOLO->getActionURL($module, 'main:register:listaDeAlunos', null, array('turmaId' => $turmaId));
            $this->page->Redirect($url);
        }
        
        $infoTurma = new ResTurma($turmaId);
        
        // Adicionado os alunos selecionados a turma
        if ( $event == 'btnAdicionar:click' )
        {
            $alunosSelecionados = $MIOLO->_REQUEST('selectGrdListaDeAlunosNaoAlocados');
            
            if ( count($alunosSelecionados) > 0 )
            {
        
                if ( $infoTurma->vagas >= (count($alunosSelecionados) + $infoTurma->vagasocupada) )
                {
                    foreach ( $alunosSelecionados as $alunos )
                    {
                        $residente = new ResResidente($alunos);
                        $residente->turmaId = $turmaId;
                        $residente->save();
                    }
                    
                    $this->AddInfo("Residentes adicionados com sucesso.", $module);
                }
                else
                {
                    $vagas = $infoTurma->vagas - $infoTurma->vagasocupada;
                    $this->AddError("O número de residentes selecionados excederá o limite de vagas da turma. Vagas disponíveis: {$vagas}.", $module);
                }
            }
            else
            {
                $this->AddError("É necessário selecionar ao menos um residente para adicionar a turma.", $module);
            }
        }
                
        $options = array(
            'value' => array(
                _M('Código turma', $module) => $infoTurma->codigoTurma,
                _M('Nome da turma', $module) => $infoTurma->descricao,
                _M('Vagas', $module) => $infoTurma->vagas,
                _M('Período', $module) => $infoTurma->quantidadePeriodo . _M(' anos', $module),
                _M('Período letivo', $module) => $infoTurma->dataInicio . ' à ' . $infoTurma->dataFim
            ),
            'title' => _M("Informações da turma", $module),
            'columns' => '1',
            'textWidth' => '500px'
        );
        
        $informacoes = new SInformationField($options);
        $fields[] = $informacoes;
        
        if ( $infoTurma->finalizada == DB_TRUE )
        {
            $fields[] = MMessage::getStaticMessage('turmaFinalizada', _M('Turma finalizada em ', $module) . $infoTurma->dataFim . '.', MMessage::TYPE_INFORMATION);
        }
        else
        {
            /**
             *  Exibe grid de alunos não alocados
             */
            $filters = new stdClass();
            $filters->nucleoProfissionalId = $infoTurma->nucleoProfissionalId;
            $filters->enfaseId = $infoTurma->enfaseId;
            $naoAlocados = ResResidente::obtemAlunosNaoALocados($filters);

            $grdNaoAlocados = $MIOLO->getUI()->getGrid($module, 'GrdListaDeAlunosNaoAlocados');
            $grdNaoAlocados->setData($naoAlocados);    
            $grdNaoAlocados->addActionSelect();
            $divGrd = new MDiv('divGrd', $grdNaoAlocados);
            $divGrd->addBoxStyle('width', '100%');        

            $fields[] = new MBaseGroup('bgNaoAlocados', _M('Residentes ativos que não estão alocados em nenhuma turma', $module), array($divGrd), 'horizontal');

            $fields[] = $btnAdicionar = new MButton('btnAdicionar', _M('Adicionar', $module));
            $btnAdicionar->addBoxStyle('margin-left','46%');
        }
        
        $filters = new stdClass();
        $filters->turmaId = $infoTurma->turmaId;
        // Obtém alunos da turma
        $alunosDaTurma = ResResidente::obtemAlunosDaTurma($filters);
        
        $grdAlunosDaTurma = $MIOLO->getUI()->getGrid($module, 'GrdListaDeAlunos');
        $grdAlunosDaTurma->setData($alunosDaTurma);
                
        if ( $infoTurma->finalizada == DB_FALSE )
        {
            $href = SAGU::getActionURL($module, 'main:register:listaDeAlunos', array('eventDelete' => 'removeAlunoDaTurma', 'residenteId' => '%0%', 'turmaId' => $infoTurma->turmaId));
            $grdAlunosDaTurma->addActionDelete($href);    
        }
        
        $divGrdAlunos = new MDiv('divGrd', $grdAlunosDaTurma);
        $divGrdAlunos->addBoxStyle('width', '100%');    
        
        $fields[] = new MBaseGroup('bgAlunosDaTurma', _M('Residentes da turma', $module), array($divGrdAlunos), 'horizontal');
        
        // Volta para a tela de busca de residente pesquisando pelo residente atual
        $action = 'main:register:turma';
        $opts = array('turmaId' => $this->getRequestValue('turmaId'));
        $goto = $MIOLO->getActionURL($module, $action, null, $opts);
        $fields[] = new MButton('button_back', _M('<< Voltar', $module), $goto);

        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
    }
}

?>

