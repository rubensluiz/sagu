<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Class definition for database entities
 *
 * @author Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * \b Maintainers: \n
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 04/11/2014
 *
 */

class FrmPenalidadesResidente extends SManagementForm
{
    
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $MIOLO->uses('ui/controls/msubdetail.class');
        parent::__construct(null, null);

        $this->toolbar->disableButton( MToolBar::BUTTON_DELETE );
        $this->toolbar->disableButton( MToolBar::BUTTON_NEW );
        $this->toolbar->disableButton( MToolBar::BUTTON_SEARCH );
        
        $this->toolbar->setButtonURL(MToolBar::BUTTON_SAVE, SAGU::getActionURL($module, $action, array('event'=>'tbBtnSave:click')));
        
        if ( !SAGU::userHasAccess(__CLASS__, A_UPDATE) )
        {
            $this->toolbar->disableButton( MToolBar::BUTTON_SAVE );
        }
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $residenteId = $this->getRequestValue('residenteId');
        $resPenalidade = new ResPenalidade();
        $resResidente = new ResResidente($residenteId);
        $basPerson = new BusinessBasicBusPerson();
        $pessoa = $basPerson->getPerson($resResidente->personId);
        $resEnfase = new ResEnfase($resResidente->enfaseId);
        $resNucleo = new ResNucleoProfissional($resResidente->nucleoProfissionalId);
        $resTurma = new ResTurma($resResidente->turmaId);
        
        $fields[] = new SHiddenField('residenteId', $residenteId);
        
        if ( strlen($residenteId) <= 0 )
        {
            $MIOLO->error( _M('Deve ser informado um residente para acessar esta interface', $module) );
        }

        $resTipoPenalidade = new ResTipoDePenalidade();
        $sql = new MSQL('tipopenalidadeid, descricao', null, null, 'descricao');
        
        //Basegroup dos dados
        strlen ($resTurma->descricao) > 0 ? $duracao = $resTurma->quantidadePeriodo . _M(" anos", $module) : $duracao  = null;
        $options = array(
            'value' => array(
                _M('Nome', $module) => $pessoa->name,
                _M('Turma', $module) =>$resTurma->descricao,
                _M('Ênfase') =>$resEnfase->descricao,
                _M('Período de duração', $module) => $duracao,
                _M('Núcleo profissional') => $resNucleo->descricao,
                _M('Período letivo', $module) => $resResidente->inicio . _M(" a ", $module) . $resResidente->fimPrevisto
            ),
            'title' => _M("Dados do residente", $module),
            'columns' => '2',
            'textWidth' => '500px'
        );
        
        $informacoes = new SInformationField($options);
        $fields[] = $informacoes;
        
        //Data e hora
        $dataLabel = new MLabel(_M("Data da penalidade:", $module));
        $dataLabel->setClass('m-caption m-caption-required');
        $dataLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $data = new MCalendarField('data', null, null, SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $horaLabel = new MLabel(_M("Hora:", $module));
        $horaLabel->setClass('m-caption m-caption-required');
        $hora = new MTextField('hora', null, null, SAGU::getParameter('BASIC', 'FIELD_TIME_SIZE'), 'hh:mm');
        $hora->addAttribute('onkeyup', "
            var validate = new objValidate(this, '99:99');
            MIOLO_Apply_Mask(validate);
        ");
        
        $subFields[] = new MHContainer('hctDataHora', array($dataLabel, $data, $horaLabel, $hora));
    
        //Tipo de penalidade
        $tipoPenalidade = new MComboBox('tipoPenalidadeId', null, null, $resTipoPenalidade->findList($sql));
        $tipoPenalidadeLabel = new MLabel(_M("Tipo de penalidade:"));
        $tipoPenalidadeLabel->setClass('m-caption m-caption-required');
        $tipoPenalidadeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $subFields[] = new MHContainer('hctTipoPenalidade', array($tipoPenalidadeLabel, $tipoPenalidade));
        
        //Observacoes
        $observacoesLabel = new MLabel(_M("Observações:", $module));
        $observacoesLabel->setClass('m-caption');
        $observacoesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $observacoes = new MMultiLineField('observacoes', null, null, null, SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'));
        $subFields[] = new MHContainer('hctObservacoes', array($observacoesLabel, $observacoes));
        
        //Código da penalidade
        $penalidadeId = new SHiddenField('penalidadeId');
        $subFields[] = $penalidadeId;
        
//        //Notificado
//        $notificado = new SHiddenField('notificado');
//        $subFields[] = $notificado;

        $subValidators[] = new MRequiredValidator('data', _M("Data da penalidade", $module));
        $subValidators[] = new MDATEDMYValidator('data', _M("Data da penalidade", $module));
        $subValidators[] = new MRequiredValidator('hora', _M("Hora da penalidade", $module));
        $subValidators[] = new MTIMEValidator('hora', _M("Hora da penalidade", $module));
        $subValidators[] = new MRequiredValidator('tipoPenalidadeId', _M("Tipo de penalidade", $module));
        
        $cols[] = new MGridColumn(_M('Data da penalidade', $module), 'left', true, '', true, 'data');
        $cols[] = new MGridColumn(_M('Hora da penalidade', $module), 'left', true, '', true, 'hora');
        $cols[] = new MGridColumn(_M('Tipo de penalidade', $module), 'left', true, '', true, 'tipoPenalidadeId', null, ResTipoDePenalidade::listarTiposDePenalidade());
        $cols[] = new MGridColumn(_M('Observações', $module), 'left', true, '' , true, 'observacoes');
        $cols[] = new MGridColumn(_M('Notificado', $module), 'left', true, '', true, 'notificado');
        
        $subDetail = new MSubDetail('_penalidades', _M("Penalidades do residente", $module), $cols, $subFields);
        $subDetail->setValidators($subValidators);
        
        //Popular subdetail
        if ($this->isSubDetailEditMode())
        {
            $this->preencherSubDetail($residenteId);
        }
        
        //Adicionar eventos pro email
        $subDetail->addActionEvent(MSubDetail::EVENT_ADD, 'subDetailEventAdd', __CLASS__);
        $subDetail->addActionEvent(MSubDetail::EVENT_EDIT, 'subDetailEventEdit', __CLASS__);
        
        $fields[] = $subDetail;
        $fields[] = new MButton('btnBack', _M('Voltar', $module), $this->getPreviousURL());
        
        parent::defineFields($fields, $validators, $data);
    }
    
    public function tbBtnSave_click($sender = NULL)
    {
        $resPenalidade = new ResPenalidade();
        $data = MSubDetail::getData('_penalidades');
        
        foreach ($data as $penal)
        {
            if ( strlen ($penal->removeData) > 0 )
            {
                if (strlen ($penal->penalidadeId) > 0)
                {
                    $resPenalidade->penalidadeId = $penal->penalidadeId;
                    $resPenalidade->delete();
                }
            }
            else
            {
                $resPenalidade->penalidadeId = $penal->penalidadeId;
                $resPenalidade->data = $penal->data;
                $resPenalidade->hora = $penal->hora;
                $resPenalidade->residenteId = $penal->residenteId;
                $resPenalidade->observacoes = $penal->observacoes;
                $resPenalidade->tipoDePenalidadeId = $penal->tipoPenalidadeId;
                
                //notificado enviar email
                if ($penal->notificado == _M("Não se aplica"))
                {
                    $resPenalidade->notificado = ResPenalidade::NOTIFICADO_NAO_SE_APLICA;
                }
                elseif ($penal->notificado == _M("Não"))
                {
                    $resTipoPenalidade = new ResTipoDePenalidade($penal->tipoPenalidadeId);
                    
                    $retorno = $this->enviarEmail($resTipoPenalidade->emailId, MIOLO::_REQUEST('preceptorId'));
                    
                    if ($retorno)
                    {
                        $this->addInfo(_M("E-mail enviado com sucesso."));
                        $resPenalidade->notificado = ResPenalidade::NOTIFICADO_SIM;
                    }
                    else
                    {
                        $this->addError(_M("Erro ao enviar e-mail. Cheque se o servidor de e-mail está configurado corretamente. Depois clique em SALVAR novamente."));
                        $resPenalidade->notificado = ResPenalidade::NOTIFICADO_NAO;
                    }
                    
                }
                elseif ($penal->notificado == _M("Sim"))
                {
                    $resPenalidade->notificado = ResPenalidade::NOTIFICADO_SIM;
                }
                
                $resPenalidade->save();
            }
        }
        
        $this->preencherSubDetail(MIOLO::_REQUEST('residenteId'));
        
        $this->AddInfo(_M("Registro inserido/atualizado com sucesso."));
    }
    
    //Preenche subdetail
    public function preencherSubDetail($residenteId)
    {
        $resPenalidade = new ResPenalidade();
        $penals = $resPenalidade->searchResidente($residenteId);

        foreach ($penals as $item)
        {
            //Notificado
            if ($item[10] == ResPenalidade::NOTIFICADO_SIM)
            {
                $notificado = _M("Sim");
            }
            elseif ($item[10] == ResPenalidade::NOTIFICADO_NAO_SE_APLICA)
            {
                $notificado = _M("Não se aplica");
            }
            else
            {
                $notificado = _M("Não");
            }
            
            $dados[] = (object) array(
                    'data' => SAGU::dateToUser($item[7]),
                    'hora' => $item[8],
                    'tipoPenalidadeId' => $item[6],
                    'observacoes' => $item[9],
                    'penalidadeId' => $item[3],
                    'notificado' => $notificado
                );
        }
            
        MSubDetail::setData($dados, '_penalidades');
    }
    
    //Adiciona status de notificaçao por email ao adicionar
    public function subDetailEventAdd($args = null)
    {
        $resTipoPenalidade = new ResTipoDePenalidade($args->tipoPenalidadeId);
        
        if (strlen ($resTipoPenalidade->emailId) > 0 && strlen ($args->penalidadeId) == 0)
        {
            $args->notificado = _M("Não");
        }
        elseif ( strlen ($resTipoPenalidade->emailId) > 0 && strlen ($args->penalidadeId) > 0)
        {
            $args->notificado = _M("Sim");
        }
        else
        {
            $args->notificado = _M("Não se aplica");
        }
        
        return $args;
    }
    
    //Adiciona status de notificaçao por email ao editar
    public function subDetailEventEdit($args = null)
    {
        $args->notificado = $args->notificado;
        
        return $args;
    }
    
    //Enviar e-mail da penalidade
    public function enviarEmail($emailId, $residenteId)
    {
        //Email a ser enviado
        $basEmail = new BusinessBasicBusEmail();
        $email = $basEmail->getEmail($emailId);
        
        //Email que vai receber
        $resResidente = new ResResidente($residenteId);
        $basPerson = new BusinessBasicBusPerson();
        $pessoa = $basPerson->getPerson($resResidente->personId);
        
        //Enviar email
        $sendEmail = new sendEmail($email->from, '', $pessoa->email, $email->description, $email->body);
        $retorno = $sendEmail->sendEmail();
        
        return $retorno;
    }
}
?>