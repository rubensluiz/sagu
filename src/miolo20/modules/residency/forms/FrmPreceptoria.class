<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 15/07/2011
 *
 */
class FrmPreceptoria extends SManagementForm
{
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();   
        $MIOLO->uses('ui/controls/msubdetail.class');
        
        parent::__construct(new ResPreceptoria(), array('preceptorId'));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( !(strlen(SAGU::getParameter('RESIDENCY', 'DEFAULT_GROUP_RESIDENCY_PRECEPTOR')) > 0) || !is_numeric(SAGU::getParameter('RESIDENCY', 'DEFAULT_GROUP_RESIDENCY_PRECEPTOR')) )
        {
            $fields[] = MMessage::getStaticMessage('mensagem', "Configure o parâmetro 'DEFAULT_GROUP_RESIDENCY_PRECEPTOR' para que os preceptores sejam inseridos automaticamente no grupo dos preceptores.", MMessage::TYPE_WARNING);
        }
        if ( in_array($function,  array(SForm::FUNCTION_UPDATE,  SForm::FUNCTION_DELETE)) )
        {
            $preceptorId = MIOLO::_REQUEST('preceptorId');
            $data = new $this->object($preceptorId);
            $fields[] = new MTextLabel('preceptorId', $preceptorId, _M('Código', $module));
            $fields[] = new SHiddenField('preceptorId', $preceptorId);
        }

        // Pessoa
        $fields[] = $personId = new SLookupContainer('personId', $this->getRequestValue('personId', $data->personId), array(
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'label' => _M('Pessoa', $module),
            'required' => true,
        ));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module), 'required');
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $personId->setReadOnly(true);
        }
        $personId->addAttribute('onblur', SForm::getAjaxAction('validaPessoa', 'divPessoa', false));

        // instituicao executora
        $opts = array(
            'label' => _M('Instituição executora', $module),
            'item' => 'LegalPerson',
            'module' => 'basic',
            'required' => false,
        );
        $fields[] = new SLookupContainer('instituicaoExecutora', $this->getRequestValue('instituicaoExecutora', $data->instituicaoExecutora), $opts);
        $validators[] = new MIntegerValidator('instituicaoExecutora', _M('Instituição executora'));
        
        // Inicio
        $fields[] = $inicio = new MCalendarField('inicio', $this->getRequestValue('inicio', $data->inicio), _M('Início', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[] = new MDateDMYValidator('inicio', _M('Início', $module), 'required');

        // Fim
        $fields[] = $fim = new MCalendarField('fim', $this->getRequestValue('fim', $data->fim), _M('Fim', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $validators[] = new MDateDMYValidator('fim', _M('Fim', $module));

        // Responsavel
        $showResponsavel = $this->getRequestValue('responsavel', $data->responsavel) == DB_TRUE;
        $fields[] = new MCheckBox('responsavel', DB_TRUE, _M('Responsável por núcleo/ênfase'), $showResponsavel, NULL, _M('No portal do preceptor, permite lançamento de notas.', $module));
        
        // Referencia enfase
        $showReferencia = $this->getRequestValue('referencia', $data->referencia) == DB_TRUE;
        $fields[] = new MCheckBox('referencia', DB_TRUE, _M('Referência da ênfase'), $showReferencia, NULL, _M('Exibe no portal do preceptor todas as atividades do módulo da ênfase selecionada (somente visualização).'));

        //Nucleo profissional
        $en[] = $nucleoProfissional = new MSelection('nucleoProfissionalId', $this->getRequestValue('nucleoProfissionalId', $data->nucleoProfissionalId), _M('Núcleo profissional'), ResNucleoProfissional::listRecords());
        $nucleoProfissional->setJsHint(_M('Informe o núcleo profissional'));
        $validators[] = new MRequiredValidator('nucleoProfissionalId', _M('Núcleo profissional'));

        //Enfase
        $nfasesDoPreceptor = ResPreceptoriaEnfases::obterPorPreceptor($preceptorId);
        $enfases = array();
        foreach ($nfasesDoPreceptor as $enfaseDoPreceptor) {
            $enfases[] = $enfaseDoPreceptor->enfaseId;
        }
        $en[] = $enfase = new MMultiSelection('enfases', $enfases, _M('Ênfase'), ResEnfase::listRecords(), true, null, 12);
        $enfase->setAttribute('size', 15);
        $enfase->setJsHint(_M('Informe a ênfase'));
        $validators[] = new MRequiredValidator('enfaseId', _M('Ênfase'));

        //
        $fields[] = $vct = new MVContainer('nucleoEnfase', $en);
        $vct->setFormMode(MControl::FORM_MODE_SHOW_SIDE);

        // Titulacao
        $fields[] = new sMultiLineField('titulacao', array(
            'label' => _M('Titulação', $module),
            'value' => $this->getRequestValue('titulacao', $data->titulacao),
        ));
        
        //
        $fields[] = new MTextField('chSemanal', $this->getRequestValue('chSemanal', $data->chSemanal), _M('Carga horária semanal', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), 'h');
        $validators[] = new MFloatValidator('chSemanal', _M('Carga horária semanal', $module));
        
        //
        $fields[] = new MTextField('chMensal', $this->getRequestValue('chMensal', $data->chMensal), _M('Carga horária mensal', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), 'h');
        $validators[] = new MFloatValidator('chMensal', _M('Carga horária mensal', $module));
        
        //
        // subdetail
        //
        $subFields[] = new SHiddenField('preceptoriamodulofuncaoid');

        $modulos = ResModulo::listarModulos();
        $modulos[0] = 'TODOS';

        $subFields[] = new MSelection('moduloid', null, _M('Módulo'), $modulos);
        $subValidators[] = new MRequiredValidator('moduloid', _M('Módulo'));

        $subFields[] = new MSelection('funcao', null, _M('Função'), ResPreceptoriaModuloFuncao::listarFuncoes());
        $subValidators[] = new MRequiredValidator('funcao', _M('Função'));
        
        $cols[] = new MGridColumn(_M('Módulo'), 'left', true, '', false, 'preceptoriamodulofuncaoid');
        $cols[] = new MGridColumn(_M('Módulo'), 'left', true, '', true, 'moduloid', null, $modulos);
        $cols[] = new MGridColumn(_M('Função'), 'left', true, '', true, 'funcao', null, ResPreceptoriaModuloFuncao::listarFuncoes());
        
        $subDetail = $fields[] = new MSubDetail('moduloFuncao', _M('Módulo e função'), $cols, $subFields);
        $subDetail->setValidators($subValidators);
        
        //Popular subdetail
        if ( $this->isSubDetailEditMode() && ( strlen($preceptorId) > 0 ) )
        {
            $dados = ResPreceptoriaModuloFuncao::obterPorPreceptor($preceptorId);
            $lista = SAGU::convertSTypeToSubDetail($cols, $dados);

            $subDetail->setData( $lista );
        }
        else if ( $this->isInsertFunction() && !$this->estaEmUmEvento() )
        {
            $subDetail->clearData();
        }

        //turma
        $turmasDoPreceptor = ResPreceptoriaTurmas::obterPorPreceptor($preceptorId);
        $turmas = array();
        foreach ($turmasDoPreceptor as $turmaDoPreceptor) {
            $turmas[] = $turmaDoPreceptor->turmaId;
        }
        $turmaLabel = new MText('turmaLabel', _M('Turma(s)',$module) . ':');
        $turmaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $turmaLabel->setClass('m-caption m-caption-required');
        $turma = new MMultiSelection('turmas', $turmas, '', ResTurma::retornaTurmas(), false, _M('Para selecionar mais de um item, é necessário pressionar a tecla CTRL e clicar no item desejado.'), 8);
        $turma->setAttribute('size', 15);
        $turma->setJsHint(_M('Informe a(s) turma(s)'));
        $turma->setAttribute('required', true);
        $turmaCnt = new MHContainer('turmaCnt', array($turmaLabel, $turma));
        $validators[] = new MRequiredValidator('turmas', _M('Turma(s)',$module));


        $vinculoLabel = new MText('vinculoLabel', _M('Vínculo empregatício',$module) . ':');
        $vinculoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $vinculoLabel->setClass('m-caption m-caption-required');
        $vinculo = new MSelection('vinculo', $data->vinculo, '', ResPreceptoria::retornaVinculos(), false, '');
        $vinculo->setAttribute('required', true);
        $vinculoCnt = new MHContainer('vinculoCnt', array($vinculoLabel, $vinculo));
        $validators[] = new MRequiredValidator('vinculo', _M('Vínculo empregati?cio',$module));

        $funcaoLabel = new MLabel(_M('Função', $module) . ':');
        $funcaoLabel->setClass('m-caption m-caption-required');
        $funcaoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $funcao = new MTextField('funcaoP', $data->funcao, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $funcao->setAttribute('required', true);
        $funcaoCnt = new MHContainer('funcaoCnt', array($funcaoLabel, $funcao));
        $validators[] = new MRequiredValidator('funcaoP', _M('Função',$module));

        $cargaHorariaMunicipioLabel = new MLabel(_M('Carga Horária município (horas)', $module) . ':');
        $cargaHorariaMunicipioLabel->setClass('m-caption m-caption-required');
        $cargaHorariaMunicipioLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $cargaHorariaMunicipio = new MTextField('cargaHorariaMunicipio', $data->cargaHorariaMunicipio, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $cargaHorariaMunicipio->setAttribute('required', true);
        $cargaHorariaMunicipioCnt = new MHContainer('cargaHorariaMunicipioCnt', array($cargaHorariaMunicipioLabel, $cargaHorariaMunicipio));
        $validators[] = new mFloatValidator('cargaHorariaMunicipio', _M('Carga Horária município',$module));

        $cargaHorariaRISLabel = new MText('cargaHorariaRISLabel', _M('Carga Horária na RIS (horas)',$module) . ':');
        $cargaHorariaRISLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $cargaHorariaRISLabel->setClass('m-caption m-caption-required');
        $cargaHorariaRIS = new MSelection('cargaHorariaRIS', $data->cargaHorariaRIS, '', array(12, 24), false, '');
        $cargaHorariaRIS->setAttribute('required', true);
        $cargaHorariaRISCnt = new MHContainer('cargaHorariaRISCnt', array($cargaHorariaRISLabel, $cargaHorariaRIS));
        $validators[] = new MRequiredValidator('cargaHorariaRIS', _M('Carga Horária na RIS',$module));

        $graduacaoLabel = new MLabel(_M('Graduação', $module) . ':');
        $graduacaoLabel->setClass('m-caption m-caption-required');
        $graduacaoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $graduacao = new MTextField('graduacao', $data->graduacao, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $graduacao->setAttribute('required', true);
        $graduacaoCnt = new MHContainer('graduacaoCnt', array($graduacaoLabel, $graduacao));
        $validators[] = new MRequiredValidator('graduacao', _M('Graduação',$module));

        $posgraduacaoLabel = new MLabel(_M('Pós Graduação', $module) . ':');
        $posgraduacaoLabel->setClass('m-caption m-caption-required');
        $posgraduacaoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $posgraduacao = new MTextField('posGraduacao', $data->posGraduacao, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $posgraduacao->setAttribute('required', true);
        $posgraduacaoCnt = new MHContainer('posgraduacaoCnt', array($posgraduacaoLabel, $posgraduacao));
        $validators[] = new MRequiredValidator('posGraduacao', _M('Pós Graduação',$module));


        $tipoLabel = new MText('tipoLabel', _M('Tipo preceptor',$module) . ':');
        $tipoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $tipoLabel->setClass('m-caption m-caption-required');
        $tipoPreceptor = new MSelection('tipoPreceptor', $data->tipoPreceptor, '', ResPreceptoria::retornaTiposPreceptores(), false, '');
        $tipoPreceptor->setAttribute('required', true);
        $tipoPreceptorCnt = new MHContainer('tipoPreceptorCnt', array($tipoLabel, $tipoPreceptor));
        $validators[] = new MRequiredValidator('tipoPreceptor', _M('Tipo preceptor',$module));


        $tempoExeperienciaLabel = new MLabel(_M('Tempo de experiência no campo de atuação? (meses)', $module) . ':');
        $tempoExeperienciaLabel->setClass('m-caption m-caption-required');
        $tempoExeperienciaLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $tempoExperienciaMeses = new MTextField('tempoExperienciaMeses', $data->tempoExperienciaMeses, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $tempoExperienciaMeses->setAttribute('required', true);
        $tempoExperienciaMesesCnt = new MHContainer('tempoExperienciaMesesCnt', array($tempoExeperienciaLabel, $tempoExperienciaMeses));
        $validators[] = new mFloatValidator('tempoExperienciaMeses', _M('Tempo de experiência no campo de atuação',$module));


        $egressoLabel = new MText('egressoLabel', _M('Egresso da Residência Integrada/Residências Multiprofissional em Saúde?',$module) . ':');
        $egressoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $egressoLabel->setClass('m-caption m-caption-required');
        $egresso = new MSelection('egresso', $data->egresso, '', array('S' => 'Sim', 'N' => 'Não'), false, '');
        $egresso->setAttribute('required', true);
        $egressoCnt = new MHContainer('egressoCnt', array($egressoLabel, $egresso));
        $validators[] = new MRequiredValidator('egresso', _M('Egresso da Residência Integrada/Residências Multiprofissional em Saúde?',$module));


        $recebeValorizacaoFinanceiraLabel = new MLabel(_M('Recebe valorização social/financeira?', $module) . ':');
        $recebeValorizacaoFinanceiraLabel->setClass('m-caption m-caption-required');
        $recebeValorizacaoFinanceiraLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        //$recebeValorizacaoFinanceira = new MTextField('recebeValorizacaoFinanceira', $preceptor->recebeValorizacaoFinanceira, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $recebeValorizacaoFinanceira = new sMultiLineField('recebeValorizacaoFinanceira', array('value' => $data->recebeValorizacaoFinanceira));


        $recebeValorizacaoFinanceira->setAttribute('required', true);
        $recebeValorizacaoFinanceiraCnt = new MHContainer('recebeValorizacaoFinanceiraCnt', array($recebeValorizacaoFinanceiraLabel, $recebeValorizacaoFinanceira));
        $validators[] = new MRequiredValidator('recebeValorizacaoFinanceira', _M('Recebe valorização social/financeira?',$module));


        $fields[] = new MBaseGroup('bgrDadosProfissionais', _M('Dados profissionais', $module), array($turmaCnt, $funcaoCnt, $cargaHorariaMunicipioCnt, $cargaHorariaRISCnt, $graduacaoCnt, $posgraduacaoCnt, $tipoPreceptorCnt, $tempoExperienciaMesesCnt, $recebeValorizacaoFinanceiraCnt, $vinculoCnt, $egressoCnt), 'vertical');


        $fields[] = new MDiv('divPessoa');

        
        parent::defineFields($fields, $validators, $data);
    }

    public function validaPessoa($args)
    {
        $busPerson = new BusinessBasicBusPerson();
        $personData = $busPerson->getPerson($args->personId);    
        
        if(!$personData->mioloLogin)
        {
            $MIOLO = MIOLO::getInstance();
            $urlSim = $MIOLO->GetActionURL('basic', 'main:config:parametersTable', '', array('function' => 'update', 'moduleConfig' => 'RESIDENCY', 'parameter' => 'DEFAULT_GROUP_RESIDENCY_PRECEPTOR'));
            
            $postUrl = $MIOLO->getActionURL('basic', 'main:person:person:physicalPerson', null, array('function'=>'update', 'personId'=>$args->personId) );
            $this->AddInfo(_M("Para que seja adicionado automaticamente no grupo de preceptores é necessário registrar um login para a pessoa selecionada. ", $module)."<p><a href='{$postUrl}' target='_blank'>Clique aqui para registrar o login. </a>");
        }
    }
    /*
     * Limpa os argumentos da pesquisa
     */
    public function getSearchParams()
    {
        return array();
    }

    public function  tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        try
        {
            $responsavel = $this->getRequestValue('responsavel');

            if ( $responsavel == DB_TRUE )
            {
                if ( ( strlen( $this->getRequestValue('nucleoProfissionalId') ) <= 0 ) ||
                     ( count( $this->getRequestValue('enfases') ) <= 0 ) )
                {
                    throw new Exception( _M('O preceptor será um preceptor responsável portanto o núcleo profissional e a ênfase devem ser informados.') );
                }
            }
            if ( is_numeric(SAGU::getParameter('RESIDENCY', 'DEFAULT_GROUP_RESIDENCY_PRECEPTOR')) )
            {
                $group = new BusinessAdminGroup();
                $existGroup = $group->getGroup(SAGU::getParameter('RESIDENCY', 'DEFAULT_GROUP_RESIDENCY_PRECEPTOR'));
                
                if ( !$existGroup->idgroup )
                {
                   $MIOLO = MIOLO::getInstance();
                   $urlSim = $MIOLO->GetActionURL('basic', 'main:config:parametersTable', '', array('function' => 'update', 'moduleConfig' => 'RESIDENCY', 'parameter' => 'DEFAULT_GROUP_RESIDENCY_PRECEPTOR'));
                   $this->messageSuccess(_M('Registro cadastrado.').'<br>'._M('Não inserido no grupo de preceptor. Verifique se o código do grupo de preceptor neste parâmetro(DEFAULT_GROUP_RESIDENCY_PRECEPTOR) existe.', $module)."<p><a href='{$urlSim}' target='_blank'>Clique aqui para verificar o parâmetro.</a>");
                }
            }
            else
            {
                $MIOLO = MIOLO::getInstance();
                $urlSim = $MIOLO->GetActionURL('basic', 'main:config:parametersTable', '', array('function' => 'update', 'moduleConfig' => 'RESIDENCY', 'parameter' => 'DEFAULT_GROUP_RESIDENCY_PRECEPTOR'));
                $this->messageSuccess(_M('Registro cadastrado.').'<br>'._M('Não inserido no grupo de preceptor. Verifique se o código do grupo de preceptor neste parâmetro(DEFAULT_GROUP_RESIDENCY_PRECEPTOR) existe.', $module)."<p><a href='{$urlSim}' target='_blank'>Clique aqui para verificar o parâmetro.</a>");   
            }

            parent::tbBtnSave_click($sender);
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
    }
    
    /*
     * Obtém os filtros do form
     */
    public function  getTypesData()
    {
        $data = parent::getTypesData();
        $data->funcao = $this->getRequestValue('funcaoP');

        $responsavel = $this->getRequestValue('responsavel');
        if ( $responsavel != DB_TRUE )
        {
            $data->responsavel = DB_FALSE;
        }
        
        // subdetail data
        $data->modulosFuncoes = MSubDetail::getData('moduloFuncao');

        return $data;
    }
}
?>