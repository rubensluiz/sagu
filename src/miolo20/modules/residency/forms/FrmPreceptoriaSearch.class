<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 15/07/2011
 *
 */
class FrmPreceptoriaSearch extends SSearchForm
{
    public function __construct($data)
    {
        parent::__construct(null, new ResPreceptoria(), array('preceptorId'));
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Pessoa
        $fields[] = $personId = new SLookupContainer('personId', $this->getRequestValue('personId', $data->personId), array(
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'label' => _M('Pessoa', $module),
            'descriptionName' => 'personName',
            'descriptionReadOnly' => false,
        ));
        $validators[] = new MIntegerValidator('personId', _M('Pessoa', $module));

        // Periodo preceptoria
        $fields[] = $period = new SBeginEndPeriod(array(
            'title' => _M('Período de preceptoria', $module),
            'begin' => array('dateId' => 'inicioS'),
            'end' => array('dateId' => 'fimS'),
            'baseGroup' => false
        ));

        // Situacao
        $options = array(
            ResPreceptoria::SITUACAO_ATIVO => _M('Ativo', $module),
            ResPreceptoria::SITUACAO_INATIVO=> _M('Inativo', $module),
            ResPreceptoria::SITUACAO_INDIFERENTE => _M('Indiferente', $module),
        );
        $fields[] = $situacao = new MRadioButtonGroup('situacao', _M('Situação', $module), $options, null, null, 'horizontal');
        $fields[] = $responsavel = new MCheckBox('responsavelS', DB_TRUE, _M('Responsável por núcleo/ênfase'), $showResponsavel, NULL, _M('No portal do preceptor, permite controle de encontros das atividades do módulo dessa núcleo/ênfase, além de permitir lançamento de notas.'));

        // Referencia enfase
        $showReferencia = $this->getRequestValue('referenciaS') == DB_TRUE;
        $fields[] = new MCheckBox('referenciaS', DB_TRUE, _M('Referência da ênfase'), $showReferencia, NULL, _M('Exibe no portal do preceptor todas as atividades do módulo da ênfase selecionada (somente visualização).'));

        //Nucleo profissional
        $fields[] = $nucleoProfissional = new MSelection('nucleoProfissionalIdS', $this->getRequestValue('nucleoProfissionalIdS'), _M('Núcleo profissional'), ResNucleoProfissional::listRecords());
        $nucleoProfissional->setJsHint(_M('Informe o núcleo profissional'));

        //Enfase
        $fields[] = $enfase = new MSelection('enfaseIdS', $this->getRequestValue('enfaseIdS'), _M('Ênfase'), ResEnfase::listRecords());
        $enfase->setJsHint(_M('Informe a ênfase'));

        parent::defineFields($fields, $module, 'GrdPreceptoriaSearch', $validators);
    }


    public function searchObject($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $data = $this->getTypesData();

        $result = array();

        try
        {
            if ( ( strlen($data->inicio) > 0 ) && ( strlen($data->fim) <= 0 ) )
            {
                throw new Exception( _M('Deve ser informado a data de fim.', $module) );
            }
            if ( ( strlen($data->fim) > 0 ) && ( strlen($data->inicio) <= 0 ) )
            {
                throw new Exception( _M('Deve ser informado a data de início.', $module) );
            }

            $result = parent::searchObject($data);
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }

        return $result;
    }


    public function  getTypesData()
    {
        $data = parent::getTypesData();
        $data->personName = $this->getRequestValue('personName');
        $data->situacao = $this->getRequestValue('situacao');

        return $data;
    }
}
?>