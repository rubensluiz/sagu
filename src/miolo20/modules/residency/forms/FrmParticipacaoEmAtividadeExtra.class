<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class FrmParticipacaoEmAtividadeExtra extends SStepByStepForm
{
    public function __construct($steps)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('ui/controls/msubdetail.class');

        if (!$steps->disableConstruct)
        {
            parent::__construct( null, $steps, __CLASS__, new ResParticipacaoEmAtividadeExtra());
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            
        }
    }

    public function createFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if( $this->isFirstAccess() )
        {
            MSubdetail::clearData('participantes');
        }

        $stepData = $this->getStepData();

        // Dados da Atividade Extra
        $options = array(
            'value' => array(
                _M('Descrição', $module) => $stepData->descricao,
                _M('Início', $module) => $stepData->beginDateMin . ' ' . $stepData->beginTimeMin,
                _M('Fim', $module) => $stepData->beginDateMax . ' ' . $stepData->beginTimeMax,
                _M('Carga horária', $module) => $stepData->cargaHorariaAtividade . 'h',
            ),
            'title' => _M('Dados da atividade', $module),
            'columns' => 1,
        );
        $fields[] = new SInformationField($options);

        // Residente
        $options = array('item'=>'Residente', 'label'=>_M('Participante', $module), 'descriptionName'=>'residentName', 'required'=>true, 'subDetailRequired' => true);
        $flds[] = new SLookupContainer('residenteId', null, $options);
        
        // Carga horaria
        $flds[] = $cargaHoraria = new MTextField('cargaHoraria', $this->getFormValue('cargaHoraria', $data->cargaHoraria), _M('Carga horária', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('horas', $module));
        $cargaHoraria->setJsHint(_M('Informe a carga horária (em horas)', $module));

        // Colunas da subdetail
        $cols[] = new sSubDetailColumn('residenteId', array('label' => _M('Código do residente', $module)));
        $cols[] = new sSubDetailColumn('residentName', array('label' => _M('Nome', $module)));
        $cols[] = new sSubDetailColumn('cargaHoraria', array('label' => _M('Carga horária', $module)));

        $subValidators[] = new MSubDetailUniqueValidator('residenteId', _M('Residente', $module), 'required');
        $subValidators[] = new MFloatValidator('cargaHoraria', _M('Carga horária', $module), '.', null, 'required');

        $fields[] = $sub = new MSubDetail('participantes', _M('Participantes', $module), $cols, $flds);
        $sub->setValidators($subValidators);

        if ( in_array($function,  array(SForm::FUNCTION_UPDATE,  SForm::FUNCTION_DELETE)) && ($this->isFirstAccess()) )
        {
            if( strlen($stepData->atividadeExtraId) > 0 )
            {
                $atividadeExtra = new ResAtividadeExtra($stepData->atividadeExtraId);
                $sub->setData( SAGU::convertSTypeToSubdetail($cols, $atividadeExtra->participantes) );
            }
        }

        $this->setFields($fields);
        $this->setValidators(null);
    }

    public function finalizeButton_click($args)
    {
        SDatabase::beginTransaction();

        $data = $this->getStepData();
        $atividade = new ResAtividadeExtra($data->atividadeExtraId);
        $atividade->atividadeExtraId = $data->atividadeExtraId;
        $atividade->descricao = $data->descricao;
        $atividade->conteudo = $data->conteudo;
        $atividade->inicio = $data->beginDateMin.' '.$data->beginTimeMin;
        $atividade->fim = $data->beginDateMax.' '.$data->beginTimeMax;
        $atividade->cargaHoraria = $data->cargaHorariaAtividade;
        for ( $i = 0; $i < count($data->participantes); $i++ )
        {
           if( $data->participantes[$i]->removeData != 'true')
           {
               $participante = new ResParticipacaoEmAtividadeExtra();
               $participante->residenteId = $data->participantes[$i]->residenteId;
               $participante->cargaHoraria = $data->participantes[$i]->cargaHoraria;
               $participantes[] = $participante;
           }
        }
        $atividade->participantes = $participantes;

        $sucess = $atividade->save();

        SDatabase::commit();

        parent::finalizeButton_click($args);
        
        parent::tbBtnSave_click(null, $sucess);
    }
}
?>