<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel I. da Silva [nataniel@solis.com.br]
 *
 * @since
 * Class created on 05/11/2014
 *
 **/

class FrmEnvioDeEmail extends SForm
{
    
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        
        parent::__construct(_M('Envio de e-mail', $module));
        
        $this->disableToolbar();
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $event = MIOLO::_REQUEST('__EVENTTARGETVALUE');
        $turmaId = MIOLO::_REQUEST('turmaId');
        $infoTurma = new ResTurma($turmaId);
        
        $options = array(
            'value' => array(
                _M('Código turma', $module) => $infoTurma->codigoTurma,
                _M('Nome da turma', $module) => $infoTurma->descricao,
                _M('Vagas', $module) => $infoTurma->vagas,
                _M('Período', $module) => $infoTurma->quantidadePeriodo . _M(' anos', $module),
                _M('Período letivo', $module) => $infoTurma->dataInicio . ' à ' . $infoTurma->dataFim
            ),
            'title' => _M("Informações da turma", $module),
            'columns' => '1',
            'textWidth' => '500px'
        );
        
        $informacoes = new SInformationField($options);
        $fields[] = $informacoes;
        
        // Informações do e-mail
        
        $remetenteLabel = new MText('remetenteLabel', _M('De', $module) . ':');
        $remetenteLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $remetenteLabel->setClass('m-caption m-caption-required');
        $remetente = new MTextField('remetente', $this->GetFormValue('remetente'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fields[]= new MHContainer('hctRemetente', array($remetenteLabel, $remetente));
        $validators[] = new MEmailValidator('remetente', _M('De', $module), 'required');
        //$validators[] = new MRequiredValidator('remetente', _M('De', $module));
        
        $ccoLabel = new MText('ccoLabel', _M('Cco', $module) . ':');
        $ccoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        //$ccoLabel->setClass('m-caption m-caption-required');
        $cco = new MTextField('cco', $this->GetFormValue('cco'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fields[]= new MHContainer('hctCco', array($ccoLabel, $cco));
        //$validators[] = new MRequiredValidator('cco', _M('Cco', $module));
        
        $assuntoLabel = new MText('assuntoLabel', _M('Assunto', $module) . ':');
        $assuntoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $assuntoLabel->setClass('m-caption m-caption-required');
        $assunto = new MTextField('assunto', $this->GetFormValue('assunto'), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fields[]= new MHContainer('hctassunto', array($assuntoLabel, $assunto));
        $validators[] = new MRequiredValidator('assunto', _M('Assunto', $module));
        
        $mensagemLabel = new MText('mensagemLabel', _M('Mensagem', $module) . ':');
        $mensagemLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $mensagemLabel->setClass('m-caption m-caption-required');;
        $mensagem = new MEditor('mensagem', $this->GetFormValue('mensagem'));
        $mensagem->disableElementsPath();
        $mensagem->setWidth(SAGU::getParameter('BASIC', 'FIELD_EDITOR_SIZE'));
        $fields[] = new MHContainer('hctMensagem', array($mensagemLabel, $mensagem));
        $validators[] = new MRequiredValidator('mensagem', _M('Mensagem', $module));
        
        $fields[] = new MSeparator();
                
        $fields[] = new MDiv('divAnexo', $this->adicionaAnexo($args));
        
        $filters = new stdClass();
        $filters->turmaId = $infoTurma->turmaId;
        $filters->nucleoProfissionalId = $infoTurma->nucleoProfissionalId;
        $filters->enfaseId = $infoTurma->enfaseId;
        
        $filtrar = false;
        
        if ( !strlen($infoTurma->nucleoProfissionalId) > 0 )
        {
            $nucleo = new MText('nucleoProfissional', _M('Núcleo profissional') . ':');
            $nucleo->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $nucleoId = new MSelection('nucleoProfissionalId', $this->GetFormValue('nucleoProfissionalId'), '', ResNucleoProfissional::listRecords());
            $fld[] = new MHContainer('hctNucleo', array($nucleo, $nucleoId));
            
            $filtrar = true;
        }
        
        if ( !strlen($infoTurma->enfaseId) > 0 )
        {
            $enfase = new MText('enfase', _M('Ênfase') . ':');
            $enfase->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $enfaseId = new MSelection('enfaseId', $this->GetFormValue('enfaseId'), '', ResEnfase::listRecords());
            $fld[] = new MHContainer('hctEnfase', array($enfase, $enfaseId));
            
            $filtrar = true;
        }
        
        if ( $filtrar )
        {
            $fld[] = $button = new MButton('filtrarAlunos', _M('Filtrar alunos', $module), SForm::getAjaxAction('filtrarAlunos', 'divGrd', false));
            $button->addBoxStyle('margin-left', '46%');
            $divFiltrar = new MDiv('divFiltrar', $fld);
            $divFiltrar->addBoxStyle('width', '100%'); 
        }
        
        $dataEmail = ResResidente::obtemAlunosDaTurma($filters);
        
        $grdEmail = $this->obtemGridAlunos();
        $grdEmail->addActionSelect();
        $grdEmail->setData($dataEmail);
        
        $divGrdAlunos = new MDiv('divGrd', $grdEmail);
        $divGrdAlunos->addBoxStyle('width', '100%');    
        
        $fields[] = new MBaseGroup('bgAlunosDaTurma', _M('Enviar para', $module), array($divFiltrar, $divGrdAlunos), 'horizontal');
        
        // Volta para a tela de busca de residente pesquisando pelo residente atual
        $action = 'main:register:turma';
        $opts = array('turmaId' => $this->getRequestValue('turmaId'));
        $goto = $MIOLO->getActionURL($module, $action, null, $opts);
        $back = new MButton('buttonBack', _M('<< Voltar', $module), $goto);
        
        $send = new MButton('buttonSend', _M('Enviar e-mail', $module));

        $fields[] = new MDiv('divButtons', array($back, $send), null, 'align=center');
        
        $fields[] = new MDiv('divRemoveAnexo');
    
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));
    }
    
    public function adicionaAnexo($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $count = (1 + $args->countAnexo) - $args->countAnexoRemove;
        
        for ( $i = 0; $i < $count; $i++ )
        {
            $anexoLabel = new MText("anexoLabel_{$i}", _M("Anexo", $module) . ':');
            $anexoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
            $anexoLabel->addBoxStyle('width', '2.5%');
            $anexoLabel->addBoxStyle('margin-left', '6.4%');
            $anexo = new MFileField("anexo_{$i}", MIOLO::_REQUEST("anexo_{$i}"), null, 20);

            $maisAnexo = new MImage("maisAnexo_{$i}", 'Adicionar outro anexo', $MIOLO->getUI()->getImage('academic', 'add-on.png'));
            $maisAnexo->addattribute('onclick', SForm::getAjaxAction('adicionaAnexo', 'divAnexo', false));
            
            if ( $i != 0 )
            {
                $args->removeAnexo = $i;
                $removeAnexo = new MImage("removeAnexo_{$i}", 'Excluir anexo', $MIOLO->getUI()->getImage('academic', 'fault.png'));
                $removeAnexo->addattribute('onclick', SForm::getAjaxAction('removeAnexo', 'divRemoveAnexo', false, $args));
            }
                
            $htcAnexo = new MHContainer("hctAnexo_{$i}", array($anexoLabel, $anexo, $maisAnexo, $removeAnexo));
            
            $fields[] = $htcAnexo;
        }
        
        $countAnexo = $args->countAnexo + 1;
        $fields[] = new SHiddenField('countAnexo', $countAnexo);
        
        return $fields; 
    }
    
    public function removeAnexo($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $jsCode = " document.getElementById('anexoLabel_{$args->removeAnexo}').style.display = 'none'; 
                    document.getElementById('anexo_{$args->removeAnexo}').style.display = 'none';
                    document.getElementById('maisAnexo_{$args->removeAnexo}').style.display = 'none';
                    document.getElementById('removeAnexo_{$args->removeAnexo}').style.display = 'none';";
                    
        $MIOLO->page->addAJAXJsCode($jsCode);
        
        $count = $args->countAnexoRemove + 1;
        return new SHiddenField('countAnexoRemove', $count);
    }
    
    public function buttonSend_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $data = $this->getData();
        
        $residentes = MIOLO::_REQUEST('selectGrdEnvioDeEmail');
        
        if ( count($residentes) > 0 )
        {
            foreach ( $residentes as $residente )
            {
                $email = ResResidente::obtemEmailDoResidente($residente);
                $emails[] = $email;
            }

            $from = $data->remetente;
            $fromName = '';
            $subject = $data->assunto;
            $body = $data->mensagem;
            $bcc = $data->cco;
                        
            $sendEmail = new sendEmail($from, $fromName, $emails, $subject, $body, $bcc);
            
            if ( count($_FILES) > 0 )
            {
                foreach ( $_FILES as $anexo )
                {
                    $sendEmail->AddAttachment($anexo['tmp_name'], $anexo['name']);
                }
            }
            
            $return = $sendEmail->sendEmail();
            
            if ( $return != false )
            {
                $action = 'main:register:turma';
                $opts = array('turmaId' => $this->getRequestValue('turmaId'));
                $goto = $MIOLO->getActionURL($module, $action, null, $opts);
                
                $MIOLO->information(_M('E-mail enviado com sucesso.', $module), $goto);
            }
            else
            {
                $this->AddError(_M('Não foi possível enviar o e-mail.', $module));
            }
        }
        else
        {
            $this->AddError('É necessário selecionar ao menos um residente.', $module);
        }
    }
    
    public function filtrarAlunos($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $turmaId = MIOLO::_REQUEST('turmaId');
        
        $filters = new stdClass();
        $filters->turmaId = $turmaId;
        $filters->nucleoProfissionalId = $args->nucleoProfissionalId;
        $filters->enfaseId = $args->enfaseId;
        
        $dataEmail = ResResidente::obtemAlunosDaTurma($filters);
        
        $grdEmail = $this->obtemGridAlunos();
        $grdEmail->addActionSelect();
        $grdEmail->setData($dataEmail);
        
        return new MDiv('', $grdEmail);
    }
    
    public function obtemGridAlunos()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        return $MIOLO->getUI()->getGrid($module, 'GrdEnvioDeEmail');
    }
}

?>