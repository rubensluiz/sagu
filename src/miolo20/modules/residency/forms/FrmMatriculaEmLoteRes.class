<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Gera matrículas em lote
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 09/09/2013
 *
 **/
set_time_limit(0);

class FrmMatriculaEmLoteRes extends SForm
{
    /**
     * @var SGrid
     */
    private $grid;
    
    /**
     * @var Tipo de regime da disciplina
     */
    private $seriadoRigido = true;
    
    /**
     * $var Grid data
     */
    private $gridData;

    
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/ui/controls/msubdetail.class');
        
        parent::__construct(_M('Matrícula em lote'));

        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');

        // Lookup de turma
        $opts = array(
            'label' => _M('Turma', $module),
            'item' => 'Turma',
            'module' => 'residency',
            'required' => true,
        );
        $fields[] = $turmaId = new SLookupContainer('codigoTurma', $this->getRequestValue('codigoTurma', $codigoTurma->codigoTurma), $opts);
        $turmaId->addAttribute('onblur', SForm::getAjaxAction('obtemInformacaoTurma', 'divTurma', false));
        $validators[] = new MRequiredValidator('codigoTurma', _M('Turma'));
        
        //Nucleo profissional
        $fields[] = $nucleoProfissional = new MSelection('nucleoProfissionalId', $this->getRequestValue('nucleoProfissionalId', $data->nucleoProfissionalId), _M('Núcleo profissional'), ResNucleoProfissional::listRecords());
        $nucleoProfissional->setJsHint(_M('Informe o núcleo profissional'));
        
        if ( $MIOLO->page->isPostBack() )
        {
            $MIOLO->page->addJsCode("document.getElementById('nucleoProfissionalId').onmousedown = function(){alert('O valor deste campo não pode ser alterado'); return false};");
        }
        
        $validators[] = new MRequiredValidator('nucleoProfissionalId', _M('Núcleo profissional'));

        //Enfase
        $fields[] = $enfase = new MSelection('enfaseId', $this->getRequestValue('enfaseId', $data->enfaseId), _M('Ênfase'), ResEnfase::listRecords());
        $enfase->setJsHint(_M('Informe a ênfase'));
        $enfase->addAttribute('onChange', SForm::getAjaxAction('obtemInformacaoTurma', 'divTurma', false, array('isFromSelection' => 1)));
        
        if ( $MIOLO->page->isPostBack() )
        {
            $MIOLO->page->addJsCode("document.getElementById('enfaseId').onmousedown = function(){alert('O valor deste campo não pode ser alterado'); return false};");
        }
        
        $validators[] = new MRequiredValidator('enfaseId', _M('Ênfase'));

        // instituicao executora
        $opts = array(
            'label' => _M('Instituição executora', $module),
            'item' => 'LegalPerson',
            'module' => 'basic',
            'required' => true,
        );
        $fields[] = new SLookupContainer('instituicaoExecutora', $this->getRequestValue('instituicaoExecutora', $data->instituicaoExecutora), $opts);
        $validators[] = new MIntegerValidator('instituicaoExecutora', _M('Instituição executora'));
        
        $fields[] = new MSpacer();
        $fields[] = new MDiv('divTurma', null); // $this->obtemInformacaoTurma($data)
        
        // labels
        $xfields[] = $inicio = new MTextField('inicio', $this->getRequestValue('inicio'), _M('Início') . ':', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $inicio->setReadOnly(true);
        
        $xfields[] = $fim = new MTextField('fimPrevisto', $this->getRequestValue('fimPrevisto'), _M('Fim previsto') . ':', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $fim->setReadOnly(true);
        
        $fields[] = $bgr = new MBaseGroup('bgr', _M('Período letivo'), $xfields, 'horizontal');
        $bgr->setFormMode(MControl::FORM_MODE_SHOW_NBSP);
        
        $fields[] = new MButton('btnBuscar', _M('Buscar'));
        $fields[] = new MSeparator();

        $this->setFields($fields);
        $this->setValidators($validators);
        
        parent::defineFields(array('fields' => $fields, 'validators' => $validators));

        if ( SAGU::getEventName() == 'matricular:click' )
        {
            $this->filtrarDisc_click();
        }
    }
    
    public function btnBuscar_click($sender=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        //
        // grid residentes
        //
        $columns = array(
            new MGridColumn( _M('Cod. residente'), 'right', true, null, false, null, true ),
            new MGridColumn( _M('Código'), 'right', true, null, true, null, true ),
            new MGridColumn( _M('Residente'), 'left',  true, null, true, null, true ),
        );

        $residente = new ResResidente();

        $filters = new stdClass();
        $filters->enfaseId = MIOLO::_REQUEST('enfaseId');
        $filters->nucleoProfissionalId = MIOLO::_REQUEST('nucleoProfissionalId');
        $filters->turmaId = MIOLO::_REQUEST('codigoTurma');
        $filters->instituicaoExecutora = MIOLO::_REQUEST('instituicaoExecutora');
        
        $grid = new SGrid($filters, $columns, 'GrdResidentes');
        $grid->addActionSelect();
        $grid->disablePagination();
        $grid->disableColumnSorting();
        $grid->setData($residente->searchMatriculaEmLote($filters));
        
        $this->AddField(new MLabel('<b>' . _M('Selecione os residentes da Turma, Núcleo profissional e Ênfase selecionados a serem matriculados:') . '</b>'));
        $this->AddField($grid);
        
        //
        // grid ofertas
        //
        $columns = array();
        $columns[] = new MGridColumn(_M('Código oferta', $module), 'right', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('Código', $module), 'right', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Tipo Módulo', $module), 'left', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('Módulo', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Descrição', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Nome da oferta', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Período', $module), 'left', true, NULL, true, ResUnidadeTematica::listPeriodos(), true);
        $columns[] = new MGridColumn(_M('Núcleos profissionais'), 'left', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('Ênfases'), 'left', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('Início', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Fim', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Encerramento', $module), 'left', true, NULL, true, NULL, true);

        $oferta = new ResOfertaDeUnidadeTematica();
        
        $filters = new stdClass();
        $filters->enfases = array( MIOLO::_REQUEST('enfaseId') );
        $filters->nucleosProfissionais = array( MIOLO::_REQUEST('nucleoProfissionalId') );
        $filters->instituicaoExecutora = MIOLO::_REQUEST('instituicaoExecutora');
        $filters->inicio = MIOLO::_REQUEST('inicio');
        $filters->fim = MIOLO::_REQUEST('fimPrevisto');

        $grid = new SGrid($filters, $columns, 'GrdOfertas');
        $grid->addActionSelect();
        $grid->disablePagination();
        $grid->disableColumnSorting();
        $grid->setData($oferta->searchGrid($filters));
        
        $this->AddField(new MSeparator());
        $this->AddField(new MSeparator());
        $this->AddField(new MLabel('<b>' . _M('Selecione as ofertas das atividades dos módulos à matricular:') . '</b>'));
        $this->AddField($grid);
        
        // end
        $this->AddField(new MSeparator());
        $this->AddField(new MButton('btnSalvar', _M('Salvar matrícula')));
    }
    
    public function btnSalvar_click($sender=null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        SDatabase::beginTransaction();
        
        $residentes = MIOLO::_REQUEST('selectGrdResidentes');
        $ofertas = MIOLO::_REQUEST('selectGrdOfertas');
        
        try
        {
            if ( count($residentes) == 0 )
            {
                throw new Exception(_M('Nenhum residente foi selecionado'));
            }
            
            if ( count($ofertas) == 0 )
            {
                throw new Exception(_M('Nenhuma oferta foi selecionada'));
            }
            
            $total = 0;
            $jaMatriculados = array();
            
            // insere matriculas
            foreach ( (array) $residentes as $residenteId )
            {
                foreach ( (array) $ofertas as $ofertaDeUnidadeTematicaId )
                {
                    // verifica se residente ja esta matriculado
                    $filters = new stdClass();
                    $filters->residenteId = $residenteId;
                    $filters->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
                    
                    $ocorrencias = ResOcorrenciaDeOferta::searchGrid($filters);

                    if ( count($ocorrencias) > 0 )
                    {
                        $jaMatriculados = array_merge($jaMatriculados, $ocorrencias);
                    }
                    else
                    {
                        $filters = new stdClass();
                        $filters->residenteId = $residenteId;
                        $filters->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
                        $buscaOfertaResidente = ResOfertaDoResidente::search($filters);

                        // oferta
                        $ofertaDoResidente = new ResOfertaDoResidente();
                        $ofertaDoResidente->ofertaDoResidenteId = $buscaOfertaResidente[0]->ofertaDoResidenteId;
                        $ofertaDoResidente->residenteId = $residenteId;
                        $ofertaDoResidente->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;

                        // ocorrencia
                        $ocorrencia = new ResOcorrenciaDeOferta();
                        $ocorrencia->dataHora = SAGU::getDateNow(SAGU::getParameter('BASIC', 'MASK_DATE_PHP') . ' ' . SAGU::getParameter('BASIC', 'MASK_TIME_PHP'));
                        $ocorrencia->status = ResStatusDaOcorrenciaDeContrato::STATUS_ATIVO;
                        $ocorrencia->observacoes = _M('Inserido pela matrícula em lote');

                        $ofertaDoResidente->ocorrenciasDeOferta = array($ocorrencia);
                        $ofertaDoResidente->save();

                        $total ++;
                    }
                }
            }
            
            SDatabase::commit();

            // mensagem sucesso
            if ( $total > 0 )
            {
                $msg = _M('Matrículas realizadas com sucesso. Ao total foram relizadas @1 novas matrículas.', null, $total);
            }
            else
            {
                $msg = _M('Processo executado com sucesso, porém, nenhuma matrícula nova foi efetuada.');
            }

            $this->ClearFields();
            $this->AddInfo($msg);
            
            $btnBack = new MButton('btnBack', _M('Voltar'), $MIOLO->GetActionURL($module, $action));
            $div = new MDiv('divBack', array($btnBack));
            $div->addBoxStyle('text-align', 'center');
            $this->AddField($div);
            
            if ( count($jaMatriculados) > 0 )
            {
                $this->AddField(new MLabel('<b>' . _M('As seguintes matrículas já existiam, e se mantiveram com seu status inalterado:') . '</b>'));
                $this->AddField($this->gridJaMatriculados($jaMatriculados));
            }
        }
        catch (Exception $e)
        {
            SDatabase::rollback();

            $this->AddError($e->getMessage());
        }
    }
    
    public function obtemInformacaoTurma($args)
    {
        $MIOLO = MIOLO::getInstance();

        if ( strlen($args->codigoTurma) > 0 )
        {
            $infoTurma = ResTurma::obtemTurma($args->codigoTurma);
            
            $jsCode = " document.getElementById('inicio').value = '{$infoTurma->dataInicio}'; 
                        document.getElementById('fimPrevisto').value = '{$infoTurma->dataFim}'; 
                        document.getElementById('inicio').readOnly = true;
                        document.getElementById('fimPrevisto').readOnly = true;
                      ";

            if ( strlen($infoTurma->componenteid) > 0 ) {
                $enfases = ResEnfase::retornaEnfasesPorComponente($infoTurma->componenteid);
                $enfasesIdsArray = array_keys($enfases);
                $enfasesValoresArray = array_values($enfases);

                $enfasesIds = "[". implode(", ", $enfasesIdsArray) . "]";
                $enfasesValores = "['". implode("', '", $enfasesValoresArray) . "']";

                $jsCode .= "
                    var enfaseSelect = document.getElementById('enfaseId');
                    enfaseSelect.options.length = 1;

                    var optionsId = {$enfasesIds};
                    var optionsValores = {$enfasesValores};

                    for (var i = 0; i < optionsId.length; i++) {
                        var el = document.createElement('option');
                        el.textContent = optionsValores[i];
                        el.value = optionsId[i];
                        enfaseSelect.appendChild(el);
                    }
                ";
            }

            $enfase = !$args->phpFunction ? $args->enfaseId : '';

            if ( strlen($infoTurma->enfaseId) > 0 )
            {
                $jsCode .= " document.getElementById('enfaseId').value = '{$infoTurma->enfaseId}'; 
                             document.getElementById('enfaseId').onmousedown = function(){alert('O valor deste campo não pode ser alterado'); return false};
                           ";
            }
            else if ( !$args->isFromSelection )
            {
                $jsCode .= " document.getElementById('enfaseId').value = '';
                             document.getElementById('enfaseId').onmousedown = '';
                           ";
            }
            else
            {
                $jsCode .= " document.getElementById('enfaseId').value = '{$args->enfaseId}'; 
                             document.getElementById('enfaseId').onmousedown = '';
                           ";
            }

            if ( strlen($infoTurma->nucleoProfissionalId) > 0 )
            {
                $jsCode .= " document.getElementById('nucleoProfissionalId').value = '{$infoTurma->nucleoProfissionalId}';
                             document.getElementById('nucleoProfissionalId').onmousedown = function(){alert('O valor deste campo não pode ser alterado'); return false};
                           ";
            }
            else if ( !$args->isFromSelection )
            {
                $jsCode .= " document.getElementById('nucleoProfissionalId').value = '';
                             document.getElementById('nucleoProfissionalId').onmousedown = '';
                           ";
            }
            else
            {
                $jsCode .= " document.getElementById('nucleoProfissionalId').value = '{$args->nucleoProfissionalId}';
                             document.getElementById('nucleoProfissionalId').onmousedown = '';
                           ";
            }
        }
        else
        {
            $jsCode = " document.getElementById('inicio').value = '';
                        document.getElementById('fimPrevisto').value = ''; 
                        document.getElementById('nucleoProfissionalId').value = ''; 
                        document.getElementById('enfaseId').value = '';

                        document.getElementById('inicio').setAttribute('readonly', false);
                        document.getElementById('fimPrevisto').setAttribute('readonly', false);

                        document.getElementById('nucleoProfissionalId').setAttribute('readonly', false);
                        document.getElementById('enfaseId').setAttribute('readonly', false);

                        document.getElementById('nucleoProfissionalId').onmousedown = '';
                        document.getElementById('enfaseId').onmousedown = '';
                        ";
        }
        
        if ( $args->phpFunction )
        {
            $MIOLO->page->addAJAXJsCode($jsCode);
        }
        else
        {
            $MIOLO->page->addJsCode($jsCode);
        }
       
       return SAGU::alignFields($fields);
    }
    
    /**
     * Obtem a grid.
     * 
     * @return \SGrid
     */
    public function gridJaMatriculados($dados)
    {
        $columns = array();
        $columns[] = new MGridColumn(_M('NULL', $module), 'right', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('NULL', $module), 'right', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('NULL', $module), 'right', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('NULL', $module), 'right', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('NULL', $module), 'right', true, NULL, false, NULL, true);
        $columns[] = new MGridColumn(_M('Código', $module), 'right', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Nome', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Unidade temática', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Período', $module), 'left', true, NULL, true, ResUnidadeTematica::listPeriodos(), true);
        $columns[] = new MGridColumn(_M('Tipo', $module), 'left', true, NULL, true, ResUnidadeTematica::listTipos(), true);
        $columns[] = new MGridColumn(_M('Status atual', $module), 'left', true, NULL, true, ResOcorrenciaDeOferta::listStatus(), true);

        $grid = new SGrid($filters, $columns, 'GrdMatriculados');
        $grid->disablePagination();
        $grid->disableColumnSorting();
        $grid->setData($dados);
        
        return $grid;
    }
}
?>
