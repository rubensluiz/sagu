<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 17/07/2011
 */
class FrmResidenteSearch extends SSearchForm
{
    public function __construct($data)
    {
        parent::__construct(null, new ResResidente(), array('residenteId'));

        //Acessado pelo módulo de serviços
        if ( SAGU::userIsFromServices() )
        {
            // Desabilita a Toolbar
            $this->disableToolbar();
        }
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        // Código do residente
        $fields[] = new MIntegerField('residenteIdS', null, _M('Código do residente'), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));

        // Pessoa
        $opts = array(
            'label' => _M('Pessoa', $module),
            'item' => 'PhysicalPerson',
            'module' => 'basic',
            'descriptionReadOnly' => false,
            'descriptionName' => 'personName',
        );
        $fields[] = new SLookupContainer('personIdS', $data->personIdS, $opts);
        $validators[] = new MIntegerValidator('personIdS', _M('Pessoa', $module), 'optional');

        // Apenas exibir estes campos quando nao vier do SERVICES
        if ( ! SAGU::userIsFromServices() )
        {
            $fields[] = new SBeginEndPeriod(array(
                'label' => _M('Período de entrada', $module),
                'baseGroup' => false,
                'disposition' => 'horizontal',
                'begin' => array(
                    'label' => _M('entre', $module),
                    'dateId' => 'betweenInicioS'
                ),
                'end' => array(
                    'label' => _M('e', $module),
                    'dateId' => 'betweenFimS'
                ),
            ));

            // Lookup de turma
            $optsTurma = array(
                'label' => _M('Turma', $module),
                'item' => 'Turma',
                'module' => 'residency',
            );
            $fields[] = $turmaId = new SLookupContainer('codigoTurmaS', $this->getRequestValue('codigoTurmaS'), $optsTurma);
            $turmaId->addAttribute('onblur', SForm::getAjaxAction('obtemInformacaoTurma', 'divTurma', false));

            // Núcleos profissionais
            $fields[] = $nucleosProfissionais = new MMultiSelection('nucleosProfissionaisS', (array) $this->getFormValue('nucleosProfissionaisS'), _M('Núcleos profissionais'), ResNucleoProfissional::listRecords());
            $nucleosProfissionais->setJsHint(_M('Selecione os núcleos profissionais'));

            // Ênfases
            $fields[] = $enfases = new MMultiSelection('enfasesS', (array) $this->getFormValue('enfasesS'), _M('Ênfases'), ResEnfase::listRecords());
            $enfases->setJsHint(_M('Selecione as ênfases'));
        }

        // LegalPerson
        $optsInstituicao = array(
            'label' => _M('Instituição formadora', $module),
            'item' => 'LegalPerson',
            'module' => 'basic',
        );
        $fields[] = $turmaId = new SLookupContainer('instituicaoFormadoraS', $this->getRequestValue('instituicaoFormadoraS', $data->instituicaoFormadoraS), $optsInstituicao);

        // LegalPerson
        $optsInstituicao = array(
            'label' => _M('Instituição executora', $module),
            'item' => 'LegalPerson',
            'module' => 'basic',
        );
        $fields[] = $instituicao = new SLookupContainer('instituicaoExecutoraS', $this->getRequestValue('instituicaoExecutoraS', $data->instituicaoExecutoraS), $optsInstituicao);

        // Exibir foto
        $exibirFotoValue = $this->getRequestValue('exibirFotoS');
        $fields[] = $exibirFoto = new MCheckBox('exibirFotoS', DB_TRUE, _M('Exibir foto', $module), $exibirFotoValue == DB_TRUE, _M('Exibir foto do residente nos resultados.', $module));

        $data->codigoTurmaS = MIOLO::_REQUEST('codigoTurmaS');

        $fields[] = new MDiv('divTurma', $this->obtemInformacaoTurma($data));

        parent::defineFields($fields, $module, 'GrdResidenteSearch', $validators);

        if ( $_GET['residenteId'] )
        {
            //$_SESSION['residenteIdS'] = $_GET['residenteId'];
            $MIOLO->page->Redirect($MIOLO->GetActionURL($module, $action));
        }

        //Se for chamado pelo módulo de serviços exibe botão voltar
        if( SAGU::userIsFromServices() )
        {
            $this->AddField(new MButton('btnBack', _M('<< Voltar', $module), $this->getPreviousURL()));
        }

    }

    public function getTypesData()
    {
        $data = parent::getTypesData();
        $data->enfases = $this->getRequestValue('enfasesS');
        $data->nucleosProfissionais = $this->getRequestValue('nucleosProfissionaisS');
        $data->betweenInicio = $this->getRequestValue('betweenInicioS');
        $data->betweenFim = $this->getRequestValue('betweenFimS');
        $data->personName = $this->getRequestValue('personName');

        //Se vier do módulo services ja vem com dados na grid
        if(SAGU::userIsFromServices())
        {
            $data->personName = $this->getRequestValue('personName'). '%';
        }

        $data->codigoTurma = $this->getRequestValue('codigoTurmaS');

        return $data;
    }

    public function obtemInformacaoTurma($args)
    {
        $MIOLO = MIOLO::getInstance();

        if ( strlen($args->codigoTurmaS) > 0 )
        {
            $infoTurma = ResTurma::obtemTurma($args->codigoTurmaS);

            if ( strlen($infoTurma->enfaseId) > 0 )
            {
                $jsCode .= " document.getElementById('enfasesS').value = '{$infoTurma->enfaseId}'; 
                             document.getElementById('enfasesS').disabled = true; ";
            }
            else
            {
                $jsCode .= " document.getElementById('enfasesS').disabled = false; ";
            }

            if ( strlen($infoTurma->nucleoProfissionalId) > 0 )
            {
                $jsCode .= " document.getElementById('nucleosProfissionaisS').value = '{$infoTurma->nucleoProfissionalId}'; 
                             document.getElementById('nucleosProfissionaisS').disabled = true; ";
            }
            else
            {
                $jsCode .= " document.getElementById('nucleosProfissionaisS').disabled = false; ";
            }
        }
        else
        {
            if ( $args->phpFunction  )
            {
                $jsCode = " document.getElementById('nucleosProfissionaisS').value = ''; 
                            document.getElementById('enfasesS').value = '';

                            document.getElementById('nucleosProfissionaisS').disabled = false; 
                            document.getElementById('enfasesS').disabled = false;";
            }
        }

        if ( $args->phpFunction )
        {
            $MIOLO->page->addAJAXJsCode($jsCode);
        }
        else
        {
            $MIOLO->page->addJsCode($jsCode);
        }
    }
    /**
     * Metodo usado para gerar e processar os dados
     * do MPOPUP na tela
     * Chamado pelo action da grid
     * "Desbloquear digitacao de notas"
     *
     * @param type $args
     */
    public function showInformation($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $resDesbloqueio = new ResDesbloqueioDigitacaoNotas();

        $residenteId = $this->getRequestValue('residenteId');
        $fimPrevisto = $this->getRequestValue('fimprevisto');
        $personId = $this->getRequestValue('personId');
        $residenteName = $this->getRequestValue('name');

        $residenteIdSS = new MHiddenField('residenteId', $residenteId);
        $residenteNameSS = new MHiddenField('residenteName', $residenteName);
        $personIdSS = new MHiddenField('personId', $personId);
        $ctnHiden = new MHContainer('ctnHidden', array($residenteIdSS, $residenteNameSS, $personIdSS));

        $data = $resDesbloqueio->obterDadosDesbloqueio($residenteId);

        //Informacoes do residente
        $personIdLabel = new MText('personIdLabel', _M('Residente', $module) . ':');
        $personIdLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $residentName = new MText('residentName', $residenteName);
        $residentName->setReadOnly(true);
        $ctnResidente = new MHContainer('ctnResidente', array($personIdLabel, $residentName));

        //Data final prevista
        $dataDesbloqueioLabel = new MText('dataDesbloqueioLabel', _M('Data para o fim previsto', $module) . ':');
        $dataDesbloqueioLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $dataDesbloqueioLabel->setClass('m-caption m-caption-required');
        $dataDesbloqueio = new MCalendarField('dataDesbloqueio', $data->dataDesbloqueio, _M('Data de desbloqueio', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
         //foi necessario essa chamada para pode funcionar mascara do campo, pelo que
         //percebi MCalendar nao funciona bem em MPOPUP
        $dataDesbloqueio->setFieldForm($this);
        $validators[] = new MDateDMYValidator('dataDesbloqueio', _M('Data de desbloqueio', $module));

        /**
         * * Codigo abaixo foi necessario para corrigir a posicao do calendario na tela
         * problema percebido ao usar MCalendarField em MPOPUP
         *
         */
        $jsCorrigePosicaoCalendarioAoClicar = "
            setTimeout(function()
            {
                var botao = document.getElementById('btndataDesbloqueio');

                var onClickAntigo = botao.onclick;
                
                botao.onclick = function()
                {
                    onClickAntigo();
                    
                    var calendars = document.querySelectorAll('.calendar');
                    
                    for( var i = 0; i < calendars.length; i++)
                    {
                        calendars[i].style.position='fixed';
                    }
                }
            }, 1000);
        ";

        $MIOLO->page->addAJAXJsCode($jsCorrigePosicaoCalendarioAoClicar);

        $dataDesbloqueio->setJsHint(_M('Data para o fim previsto', $module));
        $ctnDate = new MHContainer('ctnDateImport', array($dataDesbloqueioLabel, $dataDesbloqueio));

        //Edicao da observacao
        $observacaoLabel = new MText('lbl', _M('Observação') . ':');
        $observacaoLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $observacaoLabel->setClass('m-caption m-caption-required');
        $observacao = new MEditor('observacao', $this->getFormValue('observacao', $data->observacao));
        $observacao->disableElementsPath();
        $observacao->setWidth(SAGU::getParameter('BASIC', 'FIELD_EDITOR_SIZE'));
        $observacao->setJsHint(_M('Informe observação.'));
        $ctnTexto = new MHContainer('ctnTexto', array($observacaoLabel, $observacao));

        //Botao salvar
        $btns = new MButton('salvarDesbloqueio', _M('Salvar', $module), $this->getAjaxAction('salvarDesbloqueio_click', 'divBlock', true));

        //Botao fechar
        $btnf = new MButton('fecharPopup', _M('Fechar', $module),$this->getAjaxAction('fecharPopup_click', 'divBlock2', true));
        $btnf->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );

        //container com os dois botoes
        $ctnBtns = new MHContainer('divBtns', array($btns, $btnf));

        $this->SetValidators($validators);
        //Div dos botoes que o ajax usa
        $blockDiv = new MDiv('divBlock');
        $blockDiv2 = new MDiv('divBlock2');

        //setar os fields
        $fields[] = new MBaseGroup('bsgBlock', null, array($blockDiv, $blockDiv2, $ctnResidente, $ctnDate, $ctnTexto, $ctnBtns), 'vertical');
        $fields[] = $ctnHiden;

        MPopup::show('divPopup', $fields, _M('Desbloquear disciplina para digitação de notas', $module));
        $this->generateAJAXValidators();// necessario para funcionar as validacoes
    }

    /**
     * Pega os dados vindo do MPOPUP por args,
     * processa e salva na base
     *
     * @param type $args
     * @return null
     */
    public function salvarDesbloqueio_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        $resDesbloqueio = new ResDesbloqueioDigitacaoNotas();
        $resResidente = new ResResidente($args->residenteId);

        //obtem as informacoes
        $resDesbloqueio->dataDesbloqueio = $args->dataDesbloqueio;
        $resDesbloqueio->residenteId = $args->residenteId;
        $resDesbloqueio->observacao = $args->observacao;
        $desbloqueioDigitacaoNotas = $resDesbloqueio->checkDesbloqueio($args->residenteId);
        $resDesbloqueio->desbloqueioDigitacaoNotasId = $desbloqueioDigitacaoNotas;

        //validacao: se o usuario informou data e observacao
        if ( strlen($args->dataDesbloqueio) > 0 && strlen($args->observacao) > 0 )
        {
            $ok = $resDesbloqueio->save();

            if ( $ok ) //se salvou corretamente retorna uma mensagem e encerra o MPOPUP
            {
                $this->addInfo(_M('Dados salvos com sucesso!'));
                MPopup::remove();
            }
            else
            {
                $this->addInfo(_M('Erro ao desbloquear notas deste residente!'));
                MPopup::remove();
            }
        }
        else
        {
            //Se a data estiver em branco
            if ( !strlen($args->dataDesbloqueio) > 0 )
            {
                $this->AddError(_M('A data para o fim previsto deve ser informada'));
            }

            //se a observacao estiver em branco
            if ( !strlen($args->observacao) > 0 )
            {
                $this->AddError(_M('A observação deve ser informada'));
            }

        }
        return null;
    }

    /**
     * Metodo chamado pelo ajax do botao fechar
     * para encerrar o MPOPUP
     *
     * @return type
     */
    public function fecharPopup_click()
    {
        return MPopup::remove();
    }


}
?>