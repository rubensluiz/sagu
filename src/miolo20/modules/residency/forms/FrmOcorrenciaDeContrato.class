<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * \b Maintainers \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Joao Francisco Padilha Souza [joao@solis.com.br]
 * 
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class FrmOcorrenciaDeContrato extends SManagementForm
{

    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        parent::__construct(new ResOcorrenciaDeContrato(), array( 'ocorrenciaDeContratoId' ));

        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);

        if ( !SAGU::userHasAccess(__CLASS__, A_UPDATE) )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');
        $event = MIOLO::_REQUEST('event');

        $residenteId = $this->getRequestValue('residenteId');
        $resResidente = new ResResidente($residenteId);
        $basPerson = new BusinessBasicBusPerson();
        $pessoa = $basPerson->getPerson($resResidente->personId);
        $resEnfase = new ResEnfase($resResidente->enfaseId);
        $resNucleo = new ResNucleoProfissional($resResidente->nucleoProfissionalId);
        $resTurma = new ResTurma($resResidente->turmaId);

        $ocorrenciaDeContratoId = MIOLO::_REQUEST('ocorrenciaDeContratoId');

        if ( strlen($ocorrenciaDeContratoId) > 0 )
        {
            $ocorrenciaDeContrato = new ResOcorrenciaDeContrato($ocorrenciaDeContratoId);
        }

        // Funcao DELETE
        if ( $function == SForm::FUNCTION_DELETE )
        {
            $ocorrenciaDeContrato = new ResOcorrenciaDeContrato($ocorrenciaDeContratoId);
            $ocorrenciaDeContrato->delete();

            $goto = $MIOLO->GetActionURL($module, $action, null, array( 'residenteId' => MIOLO::_REQUEST('residenteId') ));
            $this->messageSuccess(_M('Registro excluído com sucesso'), $goto);

            return;
        }
        if ( strlen($this->getRequestValue('residenteId')) == 0 )
        {
            $MIOLO->error(_M('Nenhum residente informado', $module));
        }
        //Basegroup Dados Iniciais
        strlen($resTurma->descricao) > 0 ? $duracao = $resTurma->quantidadePeriodo . _M(" anos", $module) : $duracao = null;
        $options = array(
            'value' => array(
                _M('Nome', $module) => $pessoa->name,
                _M('Turma', $module) => $resTurma->descricao,
                _M('Ênfase') => $resEnfase->descricao,
                _M('Período de duração', $module) => $duracao,
                _M('Núcleo profissional') => $resNucleo->descricao,
                _M('Período letivo', $module) => $resResidente->inicio . _M(" A ", $module) . $resResidente->fimPrevisto
            ),
            'title' => _M("Dados do residente", $module),
            'columns' => '2',
            'textWidth' => '500px'
        );

        $informacoes = new SInformationField($options);
        $fields[] = $informacoes;


        $mensagemOcorrenciaVigente =  MMessage::getStaticMessage('mensagemOcorrenciaVigente', '<b>Importante! A ultima ocorrência cadastrada pro residente, será a ocorrência vigente.</b>', MMessage::TYPE_WARNING);

        //Período de ocorrencia data e hora
        $dataInicioLabel = new MLabel(_M("Período da Ocorrência inicio:", $module));
        $dataInicioLabel->setClass('m-caption m-caption-required');
        $dataInicioLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dataInicio = new MCalendarField('dataInicio', $this->getRequestValue('dataInicio', $ocorrenciaDeContrato->dataInicio), _M('Data inicio'), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $dataInicio->setIsRequired(true);

        $dataFimLabel = new MLabel(_M("Período da Ocorrência fim:", $module));
        $dataFimLabel->setClass('m-caption');
        $dataFimLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dataFim = new MCalendarField('dataFim', $this->getRequestValue('dataFim', $ocorrenciaDeContrato->dataFim), _M('Data fim'), SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));

        //Container Período de ocorrencia
        $controls[] = new MHContainer('hctPeriodo', array( $dataInicioLabel, $dataInicio, $dataFimLabel, $dataFim ));

        //Ocorrencia
        $ocorrenciaLabel = new MLabel(_M("Ocorrência:", $module));
        $ocorrenciaLabel->setClass('m-caption m-caption-required');
        $ocorrenciaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $ocorrenciaData[] = $statusDaOcorrenciaDeContratoId = new MSelection('statusDaOcorrenciaDeContratoId', $ocorrenciaDeContrato->statusdaocorrenciadecontratoid, _M('Ocorrência', $module), ResStatusDaOcorrenciaDeContrato::listRecords());
        $statusDaOcorrenciaDeContratoId->setJsHint(_M('Informe o status da ocorrencia de contrato'));
        $validators[] = new MRequiredValidator('statusDaOcorrenciaDeContratoId', _M('Ocorrência'));
        //Container Ocorrencia
        $controls[] = new MHContainer('hctOcorrencia', array( $ocorrenciaLabel, $ocorrenciaData, $statusDaOcorrenciaDeContratoId ));

        //Observações
        $observacoesLabel = new MLabel(_M("Observações:"));
        $observacoesLabel->setClass('m-caption');
        $observacoesLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $observacoesData[] = $observacoes = new MMultiLineField('observacoes', $ocorrenciaDeContrato->observacoes, _M('Observações'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_COLS'), SAGU::getParameter('BASIC', 'FIELD_MULTILINE_NUM_ROWS'));
        //Container observacoes
        $controls[] = new MHContainer('hctOcorrencia', array( $observacoesLabel, $observacoesData, $observacoes ));

        // Anexador de arquivo
        $anexo = $controls[] = new SFileField('anexo', $this, array(
            'fieldLabel' => _M('Arquivo'),
            'fileId' => $ocorrenciaDeContrato->fileId,
        ));


        $emailLabel = new MLabel(_M("Envio de e-mail a CNRMS:", $module));
        $emailLabel->setClass('m-caption');
        $emailLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $email[] = $emailId = new MSelection('emailenviadocnrms', $ocorrenciaDeContrato->emailenviadocnrms, _M('Envio de e-mail a CNRMS:', $module), ResOcorrenciaDeContrato::listaOpcoesEnvioEmail());
        $validators[] = new MRequiredValidator('emailenviadocnrms', _M('Envio de e-mail a CNRMS'));
        $controls[] = new MHContainer('hctemailenviadocnrms', array( $emailLabel, $email, $emailId ));

        // Botoes Adicionar ou Atualizar caso esteja sendo editado
        if ( strlen($ocorrenciaDeContratoId) > 0 )
        {
            $buttons[] = new MButton('tbBtnSave', _M('Atualizar'));
            $buttons[] = new MButton('btnCancel', _M('Cancelar'));
        }
        else
        {
            $buttons[] = new MButton('tbBtnSave', _M('Adicionar e salvar'));
        }

        $controls[] = $divButtons = new MDIV('divButtons', $buttons);
        $divButtons->addBoxStyle('width', '100%');
        $divButtons->addBoxStyle('text-align', 'center');

        $filters = new stdClass();
        $filters->residenteId = $this->getRequestValue('residenteId');

        //Grid dos dados
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdOcorrenciaDeContratoSearch');
        $grid->setData(ResOcorrenciaDeContrato::searchGridOcorrencia($filters));
        $grid->disableColumnSorting();
        $grid->disableExports();
        $grid->disablePagination();

        $controls[] = new MSeparator();
        $controls[] = new MDiv('divGrd', $grid);

        $controls[] = new MDiv('divMensagem', $mensagemOcorrenciaVigente);

        //Basegroup ocorrencias
        $fields[] = $bgr = new sBaseGroup('bgrOcorr', _M('Ocorrências'), $controls);

        // Verifica permissoes de acesso (inserir, editar, excluir na subdetail)
        $subOptions = array();
        if ( SAGU::userHasAccessAny('FrmOcorrenciaDeContrato', array( A_ADMIN, A_UPDATE )) )
        {
            $subOptions[] = 'edit';
        }
        if ( SAGU::userHasAccessAny('FrmOcorrenciaDeContrato', array( A_ADMIN, A_DELETE )) )
        {
            $subOptions[] = 'remove';
        }
        if ( !SAGU::userHasAccessAny('FrmOcorrenciaDeContrato', array( A_ADMIN, A_INSERT )) )
        {
            $subOptions[] = 'hideButtonsOnAdd';
        }
        if ( !SAGU::userHasAccessAny('FrmOcorrenciaDeContrato', array( A_ADMIN, A_INSERT, A_UPDATE )) )
        {
            $fields = array();
        }

        $fields[] = new MButton('btnReturn', _M('Voltar', $module), SAGU::getActionURL($module, 'main:process:residente', array('residenteId' => $residenteId)));
        parent::defineFields($fields, $validators, $data);
    }

    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        try
        {
            $busFile = new BusinessBasicBusFile();

            $resOcorrenciaDeContrato = new ResOcorrenciaDeContrato();
            $data = (object) $_REQUEST;

            $residente = new ResResidente( MIOLO::_REQUEST('residenteId') );
            $last = current($residente->ocorrenciaDeContrato);
            
            // validacoes
            if ( $last->statusDaOcorrenciaDeContratoId == ResStatusDaOcorrenciaDeContrato::STATUS_CONCLUIDO )
            {
                // Verifica se esta apto
                if ( $residente->trabalhoDeConclusao->apto != DB_TRUE )
                {
                    throw new Exception(_M('O residente ainda não possui o trabalho de conclusão como APTO. Operação abortada.'));
                }
                
                // Verifica carga horaria valida (regra definida no ticket #10059)
                // Adicionada validacao de ofertas com status MATRICULADO (ticket #34227)
                $rows = ResResidente::unidadesCargaHorariaPendente($residente->residenteId, true);

                if ( count($rows) > 0 )
                {
                    $unidades = array();
                    foreach ( $rows as $row )
                    {
                        if ( $row->cargaHorariaRealizada < $row->cargaHoraria )
                        {
                            $unidades[] = sprintf('%s (%sh de %sh)', $row->unidadeTematica, $row->cargaHorariaRealizada, $row->cargaHoraria);
                        }
                    }

                    if ( count($unidades) > 0 )
                    {
                        $unidades = implode('<br />', $unidades);
                        throw new Exception(_M('O residente não atingiu a carga horária mínima nas seguintes unidades temáticas:<br />@1<br /><br />Operação abortada.', $module, $unidades));
                    }
                }
            }
            
            // envios de email
            if( strlen($data->ocorrenciaDeContratoId) == 0 )
            {
                 $busMail = new BusinessBasicBusEmail();
                 $ocorrencia = new ResStatusDaOcorrenciaDeContrato();
                 $residente = new ResResidente();
                 $basperson = new BusinessBasicBusPerson();
                 $busCompany = new BusinessBasicBusCompany();

                 $filtersResidente = new stdClass();
                 $filtersResidente->residenteId = $data->residenteId;
                 $resPerson = $residente->searchGrid($filtersResidente);
                 $emailPerson = $basperson->getPerson($resPerson[0][2]);

                 $filters = new stdClass();
                 $filters->statusDaOcorrenciaDeContratoId = $data->statusDaOcorrenciaDeContratoId;
                 $mailid = $ocorrencia->search($filters);
                 $mailid = $mailid[0];

                /*
                 if($mailid->emailid)
                 {
                     $email = $busMail->getEmail($mailid->emailid);      
                      $dataCompany = $busCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
                      // Parameters
                      $from = strtolower($email->from);
                      $fromName = $dataCompany->acronym;
                      $recipient[$resPerson[0][3]] = strtolower($emailPerson->email);
                      $subject = $email->subject;
                      $body = strtr($email->body, array('$CODIGORESIDENTE' => $resPerson[0][1] , '$NOMERESIDENTE' => $resPerson[0][3] , '$DATA' => MIOLO::_REQUEST('data'),'$HORA' => MIOLO::_REQUEST('hora'), '$PERIODO' => $mailid->descricao,'$OBSERVACAO' => MIOLO::_REQUEST('observacoes')));
                      $mail = new sendEmail($from, $fromName, $recipient, $subject, $body, array());
                      $mail->sendEmail();
                      $msgEmail = '<br>Obs: Foi enviado um e-mail para '.strtolower($emailPerson->email).' referente as alterações da ocorrência';
                 }  */
            }
            
            // salvar os dados
            $resOcorrenciaDeContrato->ocorrenciaDeContratoId = $data->ocorrenciaDeContratoId;
            $resOcorrenciaDeContrato->statusDaOcorrenciaDeContratoId = $data->statusDaOcorrenciaDeContratoId;
            $resOcorrenciaDeContrato->residenteId = $data->residenteId;
            $resOcorrenciaDeContrato->dataInicio = $data->dataInicio;
            $resOcorrenciaDeContrato->dataFim = $data->dataFim;
            $resOcorrenciaDeContrato->observacoes = $data->observacoes;
            $resOcorrenciaDeContrato->emailenviadocnrms = $data->emailenviadocnrms;

            // Upload do arquivo
            if ( strlen($_FILES['anexo']['name']) > 0 )
            {
                $resOcorrenciaDeContrato->fileId = $busFile->insertFileUpload($_FILES['anexo']);
            }
            else
            {
                $resOcorrenciaDeContrato->fileId = $data->anexoOld;
            }

            $resOcorrenciaDeContrato->save();
            
            $goto = $MIOLO->GetActionURL($module, $action, null, array( 'residenteId' => MIOLO::_REQUEST('residenteId') ));
            $this->messageSuccess(_M("Registro inserido/atualizado com sucesso." . $msgEmail), $goto);
            
        }
        catch (Exception $e)
        {
            $this->AddError($e->getMessage());
        }
    }
}

?>