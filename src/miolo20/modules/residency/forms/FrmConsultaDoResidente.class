<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário para consultar as residências feitas pelo aluno
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 21/07/2011
 */
class FrmConsultaDoResidente extends SForm
{
    /*
     * Armazena os dados da pessoa (do aluno logado)
     */
    public $personData;

    /**
     * Class constructor
     */
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(_M('Consulta do Residente', $module), null, null);

        //Acessado pelo módulo de serviços
        if ( SAGU::userIsFromServices() )
        {
            // Desabilita a Toolbar
            $this->disableToolbar();
        }
        else
        {
            // Desabilita alguns botões da toolbar
            $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        }
    }

    /**
     * Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        try
        {
            //Acessado pelo módulo de serviços
            if ( SAGU::userIsFromServices() )
            {
                // Instancia os bussines
                $busPerson = new BusinessBasicBusPerson();
                // Pega os dados do aluno logado
                $this->personData = $busPerson->getPersonByMioloUserName(trim($MIOLO->getLogin()->id));
                // Verifica se não encontrou uma pessoa
                if ( !is_object($this->personData) )
                {
                    throw new Exception(_M('O usuário logado não está relacionado a uma pessoa', $module) . '.');
                }

                $filters = new stdClass();
                $filters->personId = $this->personData->personId;

                // Se for o preceptor responsável precisa pegar o residenteId da URL
                if ( $this->personData->responsavelNucleoEnfase )
                {
                    $resResidente = new ResResidente(MIOLO::_REQUEST('residenteId'));
                    $personName = $busPerson->getPersonName($resResidente->personId);
                    $filters->personId = $resResidente->personId;
                }
            }
            //Acessado pelo módulo de residência
            else
            {
                if ( !strlen($residenteId = $this->getFormValue('residenteId')) > 0 )
                {
                    throw new Exception(_M('Residente não informado', $module) . '.');
                }
                //Residente
                $residente = new ResResidente($residenteId);
                //Pessoa
                $this->personData = $residente->physicalPerson;
                //Filtros da grid de residências
                $filters = new stdClass();
                $filters->personId = $residente->personId;
            }
        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }

        $fields[] = new MDiv('divPopup', null);

        //Acessado pelo módulo de serviços
        if ( SAGU::userIsFromServices() )
        {
            $fields[] = new MTextLabel('nomePessoa', SAGU::NVL($personName, $this->personData->name),  SAGU::userIsFromServices()?_M('Residências de',$module):_M('Residente',$module));

            //Se estiver visualizando como um preceptor, não mostra
            if ( !$this->personData->responsavelNucleoEnfase )
            {
                // Monta um array com os dados da grid
                $filters->residente = DB_TRUE;
                $gridData = ResResidente::searchGrid($filters);

                // Grid Consulta de Residências
                $fields[] = $grdResidencias = $MIOLO->getUI()->getGrid($module, 'GrdConsultaDeResidencias');
                $grdResidencias->setData($gridData);
            }
        }

        $residenteId = MIOLO::_REQUEST('residenteId');

        // Eventos diferentes, se for o residente
        $event = MIOLO::_REQUEST('event');

        $abrir = true;
        if ( $this->personData->isResident && $event != 'abrir' )
        {
            $abrir = false;
        }

        if ( strlen($residenteId) > 0 && $abrir )
        {
            $residente = new ResResidente($residenteId);

            $options = array(
                 SAGU::userIsFromServices()?_M('Residências de',$module):_M('Residente',$module) => SAGU::NVL($personName, $this->personData->name),
                _M('Ênfase') => $residente->enfase->descricao,
                _M('Núcleo') => $residente->nucleoProfissional->descricao,
                _M('Início', $module) => $residente->inicio,
                _M('Fim', $module) => $residente->fimPrevisto);

            $fields[] = new SInformationField(array('value' => $options,'columns' => 1));
            $fields[] = new MSeparator();
            //Cria a aba de frequências
            $filters2 = new stdClass();
            $filters2->residenteId = $residente->residenteId;
            $filters2->somenteModulosTransversal = true;
            $searchOfertaDoResidente = ResOfertaDoResidente::search($filters2);
            for ( $i = 0; $i < count($searchOfertaDoResidente); $i++ )
            {
                //Array de objetos das Unidades Temáticas da residência selecionada
                $ofertaDeUnidadeTematica = $searchOfertaDoResidente[$i]->ofertaDeUnidadeTematica;

                //Unidade temática
                $dataGridUnidade[$i][] = $searchOfertaDoResidente[$i]->ofertaDoResidenteId; //Código da oferta do residente na oferta da atividade
                $dataGridUnidade[$i][] = $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId; //Código da oferta de unidade temática
                $dataGridUnidade[$i][] = $ofertaDeUnidadeTematica->unidadeTematicaId; //Código da unidade temática
                $dataGridUnidade[$i][] = $ofertaDeUnidadeTematica->unidadeTematica->moduloId; //Módulo
                $dataGridUnidade[$i][] = $ofertaDeUnidadeTematica->unidadeTematica->descricao; //Descrição
                $dataGridUnidade[$i][] = $ofertaDeUnidadeTematica->unidadeTematica->periodo; //Período
                $dataGridUnidade[$i][] = $ofertaDeUnidadeTematica->inicio;
                $dataGridUnidade[$i][] = $ofertaDeUnidadeTematica->fim;
                $dataGridUnidade[$i][] = $ofertaDeUnidadeTematica->cargaHoraria .'h'; //Carga horária prevista
                $dataGridUnidade[$i][] = $searchOfertaDoResidente[$i]->cargaHorariaNaOfertaDeUnidadeTematica. 'h'; //Carga horária realizada
                $dataGridUnidade[$i][] = $searchOfertaDoResidente[$i]->percentualCargaHorariaRealizada . '%'; //Percentual carga horária realizada
            }

            //Cria grid de unidades temáticas
            $grdUnidadesTematicas = $MIOLO->getUI()->getGrid($module, 'GrdConsultaDeUnidadesTematicas');
            // Desabilita botão CSV
            $grdUnidadesTematicas->showExportAsCSV = false;
            // Desabilita paginação
            $grdUnidadesTematicas->pageLength = 0;

            $grdUnidadesTematicas->setData($dataGridUnidade);
            $tabFrequenciasFlds[] = new MDiv('divFrequencias', array($grdUnidadesTematicas));


            $resTurma = new ResTurma($residente->turmaId);
            $tabNotasFlds = $this->obterNotasPorModulo();

            $quantPeriodos = $resTurma->quantidadePeriodo;


            //Percorre periodos
            $baseGroups = array();
            for ($i = 1; $i <= $quantPeriodos; $i++) {
                $controls = array();

                $id = 'mediaPeriodo' . $i;

                $controls[] = $media = new MTextField($id, $residente->$id , _M('Média do @1º período', $module, $i));
                $media->_addStyle('text-align', 'center');
                $media->setReadOnly(true);

                $controls[] = new MSeparator();

                $baseGroups[] = $bgr = new sBaseGroup("bgrPeriodo{$i}", _M('Período @1', $module, 'R' . $i), $controls);
                $bgr->setWidth('48%');
            }

            $tabNotasFlds[] = $vct = new MHContainer('hctPeriodos', $baseGroups);
            $vct->setFormMode(MControl::FORM_MODE_SHOW_SIDE);

            // Media final
            $controls = array();
            $controls[] = $notaFinal = new MTextField('notaFinal', $residente->notafinal, _M('Média', $module));
            $notaFinal->_addStyle('text-align', 'center');
            $notaFinal->setReadOnly(true);

            $controls[] = new MSeparator();

            $bgrMediaFinal = new sBaseGroup("bgrMedFinal", _M('Média final', $module), $controls);
            $bgrMediaFinal->setWidth('48%');

            $controls = array();

            $controls[] = new MSeparator('<br><br>');

            $controls[] = new MSpacer();

            $tabNotasFlds[] = $vct = new MHContainer(rand(), array($bgrMediaFinal));
            $vct->setFormMode(MControl::FORM_MODE_SHOW_SIDE);

            if (!is_null($residente->trabalhoDeConclusao)) {

                $notaQualificacao1 = new MTextField('notaQualificacao1', $residente->trabalhoDeConclusao->notaQualificacao1, null, 10, null, null);
                $notaQualificacao1->setReadOnly(true);
                $notaQualificacao1->_addStyle('text-align', 'center');

                $notaQualificacao2 = new MTextField('notaQualificacao2', $residente->trabalhoDeConclusao->notaQualificacao2, null, 10, null, null);
                $notaQualificacao2->setReadOnly(true);
                $notaQualificacao2->_addStyle('text-align', 'center');

                $notaDefesa = new MTextField('notaDefesa', $residente->trabalhoDeConclusao->notaDefesa, null, 10, null, null);
                $notaDefesa->setReadOnly(true);
                $notaDefesa->_addStyle('text-align', 'center');

                $nota = new MTextField('nota', $residente->trabalhoDeConclusao->nota, null, 10, null, null);
                $nota->setReadOnly(true);
                $nota->_addStyle('text-align', 'center');

                $dataTable[] = array($notaQualificacao1->generate(), $notaQualificacao2->generate(), $notaDefesa->generate(), $nota->generate(), $residente->trabalhoDeConclusao->retornaSituacao());

                $colunas = array(
                    _M('Nota de qualificação 1', $module),
                    _M('Nota de qualificação 2', $module),
                    _M('Nota de defesa', $module),
                    _M('Nota final', $module),
                    _M('Situação', $module)
                );

                $table = new MTableRaw('<font style="font-size: 15px">' . _M('Notas do TCR', $module) . '</font>', $dataTable, $colunas);
                // alinhamento
                for ($b = 0; $b < count($dataTable); $b++) {
                    for ($c = 0; $c < 5; $c++) {
                        $table->setCellAttribute($b, $c, 'align', 'center');
                    }
                }
                $tabNotasFlds[] = $divTable = new MDiv('divTable', $table);
            }


            $tab = new MTabbedBaseGroup('tabResidencia');
            //Aba de frequencias
            $tab->createTab('tabFrequencias', _M('Frequências', $module), $tabFrequenciasFlds);
            //Aba de notas
            //$tab->createTab('tabNotas', _M('Notas', $module), $tabNotasFlds);
            $fields[] = $tab;
        }
        elseif ( strlen($residenteId) > 0 &&
             $event == 'penalidades' )
        {
            $fields[] = $this->obterTabelaPenalidades($residenteId);
        }

        //Botão voltar
        $goto = $this->getPreviousURL();
        if ( SAGU::userIsFromServices() )
        {
            $goto = $MIOLO->GetActionURL('services', 'main:residency');
        }

        $fields[] = new MButton('btnBack', _M('Voltar', $module), $goto);

        $this->SetValidators($validators);
        $this->SetFields($fields);
        parent::defineFields();
    }

    private function obterNotasPorModulo()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        $columns = array(
            _M('Módulo', $module),
            _M('Nota de Assiduidade', $module),
            _M('Nota atividade de produto', $module),
            _M('Nota de avaliação de desempenho', $module),
            _M('Nota geral', $module)
        );

        $resNotasModulo = new ResNotasModulo();
        $residenteId = MIOLO::_REQUEST('residenteId');

        $periodo = $resNotasModulo->periodoResidente($residenteId);
        //turmaid para tcc
        $turmaid = $periodo[2];

        $anoInicio = explode('-', $periodo[0]);
        $anoFim = explode('-', $periodo[1]);
        $cont = 0;
        if($anoInicio[1] >= $anoInicio[1] + 6)
        {
            $anoInicio[0]++;
            $cont++;
        }
        if($anoFim[1] >= $anoInicio[1] + 6)
        {
            $cont++;
            $anoFim[0]--;
        }
        $semestre = (($anoFim[0] - $anoInicio[0]) * 2) + $cont;
        for($a=0; $a < $semestre;$a++)
        {
            $modulos = $resNotasModulo->moduloSemestre($residenteId);
            $linha = 0;
            foreach ( $modulos as $ind => $modulo )
            {
                $data = explode('-',$modulo[0]);

                //logica para modulo ir para o semestre correto
                if($anoInicio[1] < $anoInicio[1] + 6)
                {
                    if($data[1] < $anoInicio[1] + 6)
                    {
                        $semestreDoModulo = ((2*($data[0] - $anoInicio[0])) + 1) * 1;
                    }
                    else
                    {
                        $semestreDoModulo = ($data[0] - $anoInicio[0] + 1) * 2;
                    }
                }
                else
                {
                    if($data[1] < $anoInicio[1] + 6)
                    {
                        $semestreDoModulo = ((2*($data[0] - $anoInicio[0])) + 1) * 1;
                    }
                    else
                    {
                        $semestreDoModulo = ($data[0] - $anoInicio[0] + 1) * 2;
                    }
                }

                if ($semestreDoModulo > 4) {
                    $semestreDoModulo = 4;
                }

                if($semestreDoModulo == ($a+1))
                {
                    $ofertaDoResidente = new ResOfertaDoResidente($modulo[4]);
                    $assiduidadeValue = $ofertaDoResidente->percentualCargaHorariaRealizadaSemCargaHorariaComplementar/10;

                    $filters = new stdClass();
                    $filters->moduloid = $modulo[5];
                    $filters->semestre = $semestreDoModulo;
                    $filters->residenteid = $residenteId;

                    $valoresModulo = $resNotasModulo->search($filters);

                    //Construindo valores
                    if(!$valoresModulo[0][4])
                    {
                        $valoresModulo[0][4] = 0;
                    }
                    if(!$valoresModulo[0][5])
                    {
                        $valoresModulo[0][5] = 0;
                    }
                    if(!$assiduidadeValue)
                    {
                        $assiduidadeValue = 0;
                    }
                    if(!$valoresModulo[0][7])
                    {
                        $valoresModulo[0][7] = SAGU::calcNumber(" ({$assiduidadeValue} * " . ResNotasModulo::PESO_NOTA_ASSIDUIDADE . ") + ({$valoresModulo[0][4]} * " . ResNotasModulo::PESO_NOTA_PRODUTO . ") + ({$valoresModulo[0][5]} * " . ResNotasModulo::PESO_NOTA_DESEMPENHO . ")", true);
                    }


                    if($valoresModulo)
                    {
                        $this->notasModuloId[$a][$linha] = $valoresModulo[0][6];
                    }
                    //moduloid para o save
                    $this->moduloid[$a][$linha] = $modulo[5];

                    $assiduidadeValue = str_replace(',', '.', $assiduidadeValue);
                    $notaAssiduidade = new MTextField('notaAssiduidade['.$a.']['.$linha.']', $assiduidadeValue <= 0 ? null : SAGU::calcNumber($assiduidadeValue,true), null, 10, null, null, true);
                    $notaAssiduidade->_addStyle('text-align', 'center');

                    $notaProduto = new MTextField('notaProduto['.$a.']['.$linha.']', $valoresModulo[0][4] <= 0 ? null : SAGU::calcNumber($valoresModulo[0][4],true), null, 10, null, null, true);
                    $notaProduto->_addStyle('text-align', 'center');

                    $notaDesempenho = new MTextField('notaDesempenho['.$a.']['.$linha.']', $valoresModulo[0][5] <= 0 ? null : SAGU::calcNumber($valoresModulo[0][5],true), null, 10, null, null, true);
                    $notaDesempenho->_addStyle('text-align', 'center');

                    $notaGeral = new MTextField('notaGeral['.$a.']['.$linha.']', $valoresModulo[0][7] <= 0 ? null : SAGU::calcNumber($valoresModulo[0][7],true), null, 10, null, null, true);
                    $notaGeral->_addStyle('text-align', 'center');

                    $linha++;
                    $dataTable[] = array($modulo[3], $notaAssiduidade->generate() ,$notaProduto->generate(), $notaDesempenho->generate(),$notaGeral->generate());




                }
            }

            if(count($dataTable) == 0)
            {
                $dataTable = array('<center>Nenhum módulo cadastrado neste semestre</center>');
                $table = new MTableRaw('<font style="font-size: 15px">' . _M('Semestre '.($a+1), $module) . '</font>', $dataTable);
            }
            else
            {
                $table = new MTableRaw('<font style="font-size: 15px">' ._M('Semestre '.($a+1), $module). '</font>', $dataTable, $columns);
            }

            // alinhamento
            for($b = 0;$b < count($dataTable); $b++)
            {
                for($c = 1;$c < 5;$c++)
                {
                    $table->setCellAttribute($b, $c-1, 'align', 'center');
                }
            }

            $fields[] = $divTable = new MDiv('divTable', $table);
            $dataTable = null;
            $fields[] = new MSeparator('<br><br>');
        }

        return $fields;
    }

    /**
     * Retorna MTableRaw das penalidades.
     *
     * @param type $residenteId
     */
    public function obterTabelaPenalidades($residenteId)
    {
        $module = MIOLO::getCurrentModule();

        $resPenalidade = new ResPenalidade();
        $penals = $resPenalidade->searchResidente($residenteId);

        foreach ($penals as $item)
        {
            $tipo = new ResTipoDePenalidade($item[6]);

            $dados[] = array(
                    0 => SAGU::dateToUser($item[7]),
                    1 => $item[8],
                    2 => $tipo->descricao,
                    3 => $item[9],
                );
        }

        if ( count($dados) > 0 )
        {
            $component = new MTableRaw(_M("Penalidades do residente", $module), $dados, array(0 => _M("Data da penalidade", $module), 1 => _M("Hora da penalidade", $module), 2 => _M("Tipo de penalidade", $module), 3 => _M("Observações", $module)));

            //Deixar campos alinhados
            foreach ( $dados as $i => $item )
            {
                $component->setCellAttribute($i, 0, 'style', 'text-align: center;');
                $component->setCellAttribute($i, 1, 'style', 'text-align: center;');
            }
        }
        else
        {
            $component = MMessage::getStaticMessage('msgInfo', _M("Sem registros de penalidades.", $module), MMessage::TYPE_INFORMATION);
        }

        return $component;
    }


    public function showInformation($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $filters = new stdClass();
        $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');

        $ofertaUnidadeTematica = new ResOfertaDeUnidadeTematica($this->getRequestValue('ofertaDeUnidadeTematicaId'));

        $periodos = ResUnidadeTematica::listPeriodos();
        $modulos = ResModulo::listarModulos();
        $options = array(
            _M('Módulo', $module) => $modulos[$ofertaUnidadeTematica->unidadeTematica->moduloId],
            _M('Unidade temática', $module) => $ofertaUnidadeTematica->unidadeTematica->descricao,
            _M('Nome da oferta', $module) => $ofertaUnidadeTematica->nome,
            _M('Período', $module) => $periodos[$ofertaUnidadeTematica->unidadeTematica->periodo],
            _M('Carga horária', $module) => $ofertaUnidadeTematica->cargahoraria . 'h',
            _M('Início', $module) => $ofertaUnidadeTematica->inicio,
            _M('Fim', $module) => $ofertaUnidadeTematica->fim
        );
        $fields[] = new SInformationField(array(
            'value' => $options,
            'columns' => 1,
        ));

        // Get grid
        $fields[] = new MSeparator();

        $filters = new stdClass();
        $filters->ofertaDoResidenteId = $this->getRequestValue('ofertaDoResidenteId');
        $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
        $filters->residenteId = $this->getRequestValue('residenteId');

        $ofertaDoResidente = new ResOfertaDoResidente($this->getRequestValue('ofertaDoResidenteId'));
        $cargaHorariaDosTiposDaUnidade = $ofertaDoResidente->retornaDetalhesDaCargaHorariaOferta();
        $grdData = new stdClass();
        $grdData->readOnly = true;
        $grid = $MIOLO->getUI()->getGrid($module, 'GrdResidenteCargaHoraria', $grdData);
        $grid->showExport  = false;
        $grid->actions = array();
        $grid->setData($cargaHorariaDosTiposDaUnidade);
        $divGrid = new MDiv('divGridModulos', $grid);
        $divGrid->addBoxStyle('width', '100%');
        $fields[] = new MBaseGroup('baseGroupModulos', _M('Detalhes da carga horária do residente na atividade do módulo',$module), array($divGrid));


        MPopup::show('divPopup', $fields, _M('Detalhes de carga horaria', $module));
    }
}
?>