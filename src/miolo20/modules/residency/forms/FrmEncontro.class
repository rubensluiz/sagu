<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * \b Maintainers \n
 *  Fabiano Tomasini [fabiano@solis.coop.br]
 *  Joao Francisco Padilha Souza
 *
 * @since
 * Class created on 17/07/2011
 *
 */
class FrmEncontro extends SManagementForm
{

    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        parent::__construct(new ResEncontro(), array( 'encontroId' ), null, _M('Encontros', $module));
        
        //Desabilita botões toolbar
        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
        
        //Desabilita toolbar
        if( MIOLO::_REQUEST('return_to') == 'services' )
        {
            $this->disableToolbar();
        }
    }

    private function retornaInstituicaoExecutoraDoPreceptorLogado()
    {
        $instituicaoExecutoraId = null;
        $preceptorLogado = ResPreceptoria::retornaPreceptorLogado();
        if (count($preceptorLogado)) {
            $filters = new stdClass();
            $filters->preceptorId = $preceptorLogado->preceptorId;
            $filters->ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
            $preceptorInstituicao = ResOfertaDeUnidadeTematicaPreceptorInstituicao::search($filters);
            return $preceptorInstituicao[0]->instituicaoExecutoraId;
        }
    }

    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_REQUEST('function');

        if ( MIOLO::_REQUEST('module') == 'services' )
        {
            //Caso a pessoa não veja o professor da oferecida e nem o responsável
            $check = $check = $this->verificaUsuario();
        }
        else
        {
            $check = DB_TRUE;
        }

        if ( MIOLO::_REQUEST('return_to') == 'services' )
        {
            $gfields = new sGenericFields();
            $fields[] = $gfields->labelDica( _M('Os dados só poderão ser alterados pelo preceptor responsável pela enfase e núcleo ou o preceptor do oferecimento da oferta da atividade do rodízio.'));
        }

        try
        {
            if ( !strlen($ofertaDeUnidadeTematicaId = $this->getFormValue('ofertaDeUnidadeTematicaId')) > 0 )
            {
                throw new Exception(_M('Oferta de unidade temática não informada', $module) . '.');
            }
            //Oferta de unidade tematica
            $ofertaDeUnidadeTematica = new ResOfertaDeUnidadeTematica($ofertaDeUnidadeTematicaId);
            //Lista de tipos de unidade temática
            $listTipoDeUnidadeTematica = ResUnidadeTematica::listTipos();
            //Lista de períodos de unidade temática
            $listPeriodoDaUnidadeTematica = ResUnidadeTematica::listPeriodos();
            //Retorno do botão voltar
            $returnTo = $this->getRequestValue('return_to');
            $fields[] = new SHiddenField('return_to', $returnTo);
            
            //Não habilita o botão salvar caso a unidade temática esteja fechada
            if( strlen($ofertaDeUnidadeTematica->encerramento) > 0 )
            {
                $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            }

        }
        catch ( Exception $e )
        {
            $MIOLO->error($e->getMessage());
        }
        //Hidden field oferta de unidade temática
        $fields[] = new SHiddenField('ofertaDeUnidadeTematicaId', $this->getRequestValue('ofertaDeUnidadeTematicaId'));

        //Informações da unidade temática
        $options = array(
            'title' => _M('Dados da oferta da atividade do módulo', $module),
            'columns' => 1,
            'value' => array(
                _M('Descrição') => $ofertaDeUnidadeTematica->ofertaDeUnidadeTematicaId . ' - ' . $ofertaDeUnidadeTematica->unidadeTematica->descricao,
                _M('CH lançada/prevista') => $ofertaDeUnidadeTematica->cargaHoraria,
                _M('Período') => $listPeriodoDaUnidadeTematica[$ofertaDeUnidadeTematica->unidadeTematica->periodo],
                _M('Início') => $ofertaDeUnidadeTematica->inicio,
                _M('Fim') => $ofertaDeUnidadeTematica->fim )
        );
        $fields[] = new SInformationField($options);
        $fields[] = new MSeparator();

        if ( !in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro')) )
        {
            $fields[] = new MSelection('dataEncontro', null, '<b style="font-size: 16px;">Data do encontro</b>', $ofertaDeUnidadeTematica->retornaDatasDosEncontros());


            $bt[] = $btnFiltrar = new MButton('btnFilter', _M('Filtrar', $module));
            $btnFiltrar->_AddStyle('float', 'right');

            if (MIOLO::_REQUEST('dataEncontro') != '') {
                $bt[] = $btnGerarEncontro =  new MButton('btnGerarFrequencia', _M('Gerar frequência', $module));
                $btnGerarEncontro->_AddStyle('blacground', 'right');
            }

            $fields[] = new MHContainer('cntButtons3', $bt);
        }

        //Se evento nao for novo encontro adiciona botao para inserir novo
        if ( !in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro', 'tbBtnSave:click' )) )
        {
            //Desabilita botão deletar
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);

            //Botão novo encontro
            $fields[] = new MVContainer('tabelaEncontros', $this->obtemTabelaEncontros($ofertaDeUnidadeTematicaId));
        }
        //Se evento for novo encontro mostra grid para inserção/edicao e campos do encontro
        elseif ( in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro', 'tbBtnSave:click' )) )
        {
            $encontroId = $this->getRequestValue('encontroId');
            $encontro = new ResEncontro($encontroId);

            $fields[] = new SHiddenField('encontroId', $encontroId);
            //Abilita botão salvar
            $this->toolbar->enableButton(MToolBar::BUTTON_SAVE);

            //Se for endição abilita botao deletar
            if( strlen($encontroId)>0 )
            {
                $this->toolbar->enableButton(MToolBar::BUTTON_DELETE);
                $this->toolbar->setButtonURL(MToolBar::BUTTON_DELETE, $MIOLO->getActionURL($module, 'main:register:encontro', null, array('event'=>'tbBtnDelete_click','ofertaDeUnidadeTematicaId'=>$this->getRequestValue('ofertaDeUnidadeTematicaId'), 'encontroId'=>$encontroId, 'return_to'=>$returnTo)));
            }
            else
            {
                $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
            }

            $bloqueiaEdicaoDoEncontro = false;
            if (count(ResPreceptoria::retornaPreceptorLogado())) {
                $bloqueiaEdicaoDoEncontro = true;
            }


            $tipo = SAGU::NVL(MIOLO::_REQUEST('tipo'), $encontro->tipo);
            $tipos = ResUnidadeTematica::listTipos();
            $campoTipo = new MSelection('tipo', $tipo, _M('Tipo', $module), $tipos);
            $campoTipo->setJsHint(_M('Informe o tipo', $module));
            $campoTipo->setReadOnly($bloqueiaEdicaoDoEncontro);
            $fields[] = $campoTipo;

            //Campo tema da unidade temática
            $filters = new stdClass();
            $filters->ofertaDeUnidadeTematicaId = $this->getRequestValue('ofertaDeUnidadeTematicaId');
            $campoTema = new MSelection('temaId', $this->getFormValue('temaId',$encontro->temaId), _M('Tema', $module), ResTema::listTema($filters));
            $campoTema->setReadOnly($bloqueiaEdicaoDoEncontro);
            $fields[] = $campoTema;

            //Data e hora do encontro caso tenha quebra timestamp em data e hora
            list($encontro->inicioData, $encontro->inicioHora) = explode(' ', $encontro->inicio);
            list($encontro->fimData, $encontro->fimHora) = explode(' ', $encontro->fim);

            //Valores para data e hora(caso edição peaga data e hora registrada, caso inserção data e hora atual)
            $dateValue = new stdClass();
            $dateValue->inicioData = strlen($this->getFormValue('inicioData',$encontro->inicioData)) > 0 ? $this->getFormValue('inicioData',$encontro->inicioData) : SAGU::getDateNow();
            $dateValue->fimData = strlen($this->getFormValue('fimData',$encontro->fimData)) > 0 ? $this->getFormValue('fimData',$encontro->fimData) : SAGU::getDateNow();
            $dateValue->inicioHora = strlen($this->getFormValue('inicioHora',$encontro->inicioHora)) > 0 ? $this->getFormValue('inicioHora',$encontro->inicioHora) : SAGU::getDateNow(SAGU::getParameter('BASIC', 'MASK_TIME_PHP_DEFAULT'));
            $dateValue->fimHora = strlen($this->getFormValue('fimHora',$encontro->fimHora)) > 0 ? $this->getFormValue('fimHora',$encontro->fimHora) : SAGU::getDateNow(SAGU::getParameter('BASIC', 'MASK_TIME_PHP_DEFAULT'));
            $fields[] = $obj = new SBeginEndPeriod(array(
                        'data' => $dateValue,
                        'required' => true,
                        'baseGroup' => false,
                        'type' => 'timestamp',
                        'begin' => array(
                            'dateId' => 'inicioData',
                            'timeId' => 'inicioHora',
                            'label' => _M('Início', $module),
                            'dateHint' => _M('Informe a data de início', $module),
                            'timeHint' => _M('Informe a hora de início. Formato: hh:mm', $module)
                        ),
                        'end' => array(
                            'dateId' => 'fimData',
                            'timeId' => 'fimHora',
                            'label' => _M('Fim', $module),
                            'dateHint' => _M('Informe a data de fim', $module),
                            'timeHint' => _M('Informe a hora de fim. Formato: hh:mm', $module)
                        )
                    ));

            //Evento quando tiver alguma alteração no período(calcula a carga horária)
            $obj->getField('inicioData')->addAttribute('onchange', $this->getAjaxAction('timestampDiff', 'divNull', false));
            $obj->getField('inicioHora')->addAttribute('onchange', $this->getAjaxAction('timestampDiff', 'divNull', false));
            $obj->getField('fimData')->addAttribute('onchange', $this->getAjaxAction('timestampDiff', 'divNull', false));
            $obj->getField('fimHora')->addAttribute('onchange', $this->getAjaxAction('timestampDiff', 'divNull', false));
            if ($bloqueiaEdicaoDoEncontro) {
                $obj->getField('inicioData')->addAttribute('readonly', $bloqueiaEdicaoDoEncontro);
                $obj->getField('inicioHora')->addAttribute('readonly', $bloqueiaEdicaoDoEncontro);
                $obj->getField('fimData')->addAttribute('readonly', $bloqueiaEdicaoDoEncontro);
                $obj->getField('fimHora')->addAttribute('readonly', $bloqueiaEdicaoDoEncontro);
            }

            $fields[] = new MDiv('divNull', null);
            // Campo carga horária
            if(strlen($this->getFormValue('cargaHoraria', $encontro->cargaHoraria))==0)
            {
                $this->page->onLoad($this->getAjaxAction('timestampDiff', 'divNull', false));
            }

            $campoCargaHoraria = new MTextField('cargaHoraria', $this->getFormValue('cargaHoraria', $encontro->cargaHoraria), _M('Carga horária', $module), SAGU::getParameter('basic', 'FIELD_ID_SIZE'), _M('horas', $module));
            $campoCargaHoraria->setJsHint(_M('Informe a carga horária(em horas). Ex.: 140', $module));
            $campoCargaHoraria->setReadOnly($bloqueiaEdicaoDoEncontro);
            $fields[] = $campoCargaHoraria;
            // Campo conteúdo ministrado
            $fields[] = $conteudoMinistrado = new MMultilineField('conteudoMinistrado', $this->getFormValue('conteudoMinistrado', $encontro->conteudoMinistrado), _M('Conteúdo ministrado', $module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_COLS'));
            $conteudoMinistrado->setReadOnly($bloqueiaEdicaoDoEncontro);
            $conteudoMinistrado->setJsHint(_M('Informe o conteúdo ministrado', $module));
            // Ministrante
            $ministranteValue = strlen($this->getFormValue('ministrante', $encontro->ministrante)) > 0 ? $this->getFormValue('ministrante', $encontro->ministrante) : $ofertaDeUnidadeTematica->preceptor->name;
            $fields[] = $ministrante = new MTextField('ministrante', $ministranteValue, _M('Ministrante', $module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'));
            $ministrante->setReadOnly($bloqueiaEdicaoDoEncontro);
            $ministrante->addAttribute('maxlength', '255');
            $ministrante->setJsHint(_M('Informe o ministrante', $module));
            $fields[] = new MSeparator();

            //Validadores
            $validators[] = new MRequiredValidator('tipo', _M('Tipo', $module));
            $validators[] = new MDATEDMYValidator('inicioData', _M('Início', $module), 'required');
            $validators[] = new MTIMEValidator('inicioHora', _M('Hora fim', $module), 'required');
            $validators[] = new MDATEDMYValidator('fimData', _M('Fim', $module), 'required');
            $validators[] = new MTIMEValidator('fimHora', _M('Hora fim', $module), 'required');
            $validators[] = new MFloatValidator('cargaHoraria', _M('Carga horária', $module), '.', null, 'required');

            $instituicaoExecutoraId = null;
            $filters = new stdClass();
            $preceptorLogado = ResPreceptoria::retornaPreceptorLogado();
            if (count($preceptorLogado)) {
                $preceptor = $preceptorLogado;
                $tipoPreceptorLogadoParaOModulo = $preceptor->retornaTipoDePreceptorParaOModuloDaOferta(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));

                if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_PRECEPTOR) {
                    $instituicaoExecutoraId = $this->retornaInstituicaoExecutoraDoPreceptorLogado();
                    $filters->instituicaoExecutoraId = $instituicaoExecutoraId;
                } else if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_TUTOR) {
                    $filters->enfaseId = $preceptor->enfaseId;
                }
            }

            $fields[] = new MHContainer('tabelaEdicaoEncontro', $this->obtemTabelaEdicaoEncontro($ofertaDeUnidadeTematicaId, $encontroId, $filters));
        }
        
        //Verifica se a unidade tematica está fechada e impede editar a frequência
        if( strlen($ofertaDeUnidadeTematica->encerramento) > 0 )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        }



        // gerar frequência
        if (MIOLO::_REQUEST('__EVENTTARGETVALUE') == 'btnGerarFrequencia:click' && MIOLO::_REQUEST('dataEncontro') != '') {


            $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
            $encontroData = MIOLO::_REQUEST('dataEncontro');

            $filtroEncontros = new stdClass();
            $filtroEncontros->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;
            $filtroEncontros->inicio = $encontroData;


            try {


                $instituicaoExecutoraId = null;
                $filtroResidentes = new stdClass();
                $preceptorLogado = ResPreceptoria::retornaPreceptorLogado();
                if (count($preceptorLogado)) {
                    $preceptor = $preceptorLogado;
                    $tipoPreceptorLogadoParaOModulo = $preceptor->retornaTipoDePreceptorParaOModuloDaOferta(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));

                    if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_PRECEPTOR) {
                        $filtroResidentes->instituicaoExecutoraId = $this->retornaInstituicaoExecutoraDoPreceptorLogado();
                    } else if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_TUTOR) {
                        $filtroResidentes->enfaseId = $preceptor->enfaseId;
                    }
                }
                $filtroResidentes->ofertaDeUnidadeTematicaId = $ofertaDeUnidadeTematicaId;

                $encontrosFrequencia = ResEncontro::retornaEncontrosPorData($filtroEncontros);
                foreach ($encontrosFrequencia as $encontrosFrequencia) {

                    foreach (ResOfertaDoResidente::retornaResidentesMatriculadosDaOfertadeUnidadeTematica($filtroResidentes) as $residenteId) {

                        $filters = new stdClass();
                        $filters->encontroId = $encontrosFrequencia->encontroId;
                        $filters->residenteId = $residenteId[0];

                        $frequencia = ResFrequencia::search($filters);

                        if (!(count($frequencia) > 0)) {
                            $novaFrequencia = new ResFrequencia();

                            $novaFrequencia->encontroId = $encontrosFrequencia->encontroId;
                            $novaFrequencia->residenteId = $residenteId[0];
                            $novaFrequencia->presenca = ResFrequencia::PRESENTE;

                            $novaFrequencia->save();
                        }
                    }
                }

                $dataFormatada = new DateTime($encontroData);
                $MIOLO->information('Frequências do dia ' . $dataFormatada->format('d/m/Y') . ' geradas com sucesso!');

            } catch (Exception $e) {
                $MIOLO->alert('Não foi possível gerar as frequências!');
            }


        }


        
        //Botão voltar
        if ( in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro', 'tbBtnSave:click' )) )
        {
            $opts = array( 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId ,'return_to'=>$this->getRequestValue('return_to'));
            $href = $MIOLO->getActionURL('residency', 'main:register:encontro', null, $opts);
            $btns[] = new MButton('button_back', _M('<< Voltar', $module), $href);
        }
        else
        {
            $href = $this->getRequestValue('return_to') == 'services' ? $MIOLO->getActionURL('services', 'main:unidadesTematicasDoPreceptor') : SAGU::getActionURL('residency', 'main:process:ofertaDeUnidadeTematica',null);
            $btns[] = new MButton('button_back', _M('<< Voltar', $module), $href);
        }
                
        //Não exibe botão de novo encontro depois que a unidade temática estiver fechada
        if( !strlen($ofertaDeUnidadeTematica->encerramento) > 0  )
        {
            if ( (MIOLO::_REQUEST('return_to') == 'services' && $check == DB_TRUE) || (MIOLO::_REQUEST('return_to') == 'residency' && $check == DB_TRUE) )
            {
                //Botao novo encontro (só é exibido quando tem residentes para essa oferta)
                $opts = array( 'event' => 'button_new_encontro', 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId ,'return_to'=>$this->getRequestValue('return_to'));
                $hrefNew = $MIOLO->getActionURL('residency', 'main:register:encontro', null, $opts);
                
                //Bocao NOVO ENCONTRO (so mostrar se não estiver em EDICAO ou em ADICAO)
                $preceptorLogado = ResPreceptoria::retornaPreceptorLogado();
                if ( MIOLO::_REQUEST('event') !=  'button_new_encontro' && MIOLO::_REQUEST('event') != 'button_edit_encontro' && !$preceptorLogado->preceptorId)
                {
                    $btns[] = new MButton('button_new_encontro', _M('Registrar novo encontro', $module), $hrefNew);
                }
            }
        }

        //Imagens
        $presence = $MIOLO->getActionUrl('residency', 'html:images:presence.png');
        $justfy = $MIOLO->getActionUrl('residency', 'html:images:justfy.png');
        $absence = $MIOLO->getActionUrl('residency', 'html:images:absence.png');

        //Javascrip troca de imagem
        $this->addJsCode("
                function setFrequency(ofertaDoResidenteId)
                {
                    var imagemFrequenciaElementId = 'imagemFrequencia_'+ofertaDoResidenteId;
                    var freqField = 'valorFrequencia['+ofertaDoResidenteId+']';
                    var freqValue = xGetElementById(freqField);
                    var divJustificatica = 'divJustificativa_'+ofertaDoResidenteId;
                    var divPresenca = 'divPresenca_'+ofertaDoResidenteId;
                    var divAusencia = 'divAusencia_'+ofertaDoResidenteId;
                    var justificativa = 'justificativa['+ofertaDoResidenteId+']';

                    switch ( freqValue.value )
                    {
                        case '" . ResFrequencia::PRESENTE . "':
                            xGetElementById(imagemFrequenciaElementId).src ='{$absence}';
                            xGetElementById(freqField).value = '" . ResFrequencia::AUSENTE . "';
                            xGetElementById(divJustificatica).style.display='none';
                            xGetElementById(divPresenca).style.display='none';
                            xGetElementById(divAusencia).style.display='block';
                            xGetElementById(justificativa).value = '';
                        break;
                        case '" . ResFrequencia::AUSENTE . "':
                            xGetElementById(imagemFrequenciaElementId).src ='{$justfy}';
                            xGetElementById(freqField).value = '" . ResFrequencia::JUSTIFICADA . "';
                            xGetElementById(divJustificatica).style.display='block';
                            xGetElementById(divPresenca).style.display='none';
                            xGetElementById(divAusencia).style.display='none';
                            xGetElementById(justificativa).value = '';
                        break;
                        case '" . ResFrequencia::JUSTIFICADA . "':
                            xGetElementById(imagemFrequenciaElementId).src ='{$presence}';
                            xGetElementById(freqField).value = '" . ResFrequencia::PRESENTE . "';
                            xGetElementById(divJustificatica).style.display='none';
                            xGetElementById(divPresenca).style.display='block';
                            xGetElementById(divAusencia).style.display='none';
                            xGetElementById(justificativa).value = '';
                        break;
                    }
                }");

        //Se for do módulo de serviços
        if( MIOLO::_REQUEST('return_to') == 'services' )
        {
            // Botão salvar
            if( (in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro', 'tbBtnSave:click' ))) && ($check == DB_TRUE) )
            {
                $btns[] = new MButton('tbBtnSave', _M('Salvar', $module));
            }
            $fields[] = new MHContainer('cntButtons', $btns);
        }
        else
        {
            $fields[] = $btns;
        }

        ;
        if ( $this->getRequestValue('event') == 'button_edit_encontro') {
            $busUser = new BusinessAdminBusUser();
            $userData = $busUser->getUserByLogin($encontro->userName);
            $fields[] = new MTextLabel('lastModification', '[' . SAGU::NVL($userData->name, $encontro->userName) . ' - ' . SAGU::NVL($encontro->dateTime) . ']', _M('Última modificação', 'basic'));
        }

        parent::defineFields($fields, $validators, $data);

        //Se evento não for novo encontro desabilita botao salvar
        if ( !in_array(MIOLO::_REQUEST('event'), array( 'button_new_encontro', 'button_edit_encontro', 'tbBtnSave:click' )) )
        {
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        }
    }

    /**
     * Obtém a diferença em horas de um timestemp e outro
     */
    public function timestampDiff($args)
    {
        $inicioData = $this->getFormValue('inicioData', $args->inicioData);
        $inicioHora = $this->getFormValue('inicioHora', $args->inicioHora);
        $fimData = $this->getFormValue('fimData', $args->fimData);
        $fimHora = $this->getFormValue('fimHora', $args->fimHora);

        if ( strlen($inicioData) > 0 && strlen($inicioData) > 0 && strlen($inicioData) > 0 && strlen($inicioData) > 0 )
        {
            $hours = ResEncontro::timestampDiff($inicioData . ' ' . $inicioHora, $fimData . ' ' . $fimHora);
            $this->page->addAJAXJsCode("xGetElementById('cargaHoraria').value = {$hours};");
        }

        return null;
    }

    /**
     * Obtém tabela para editar encontro solicitado, ou inserir um
     * novo encontro
     *
     * @param int $ofertaDeUnidadeTematicaId
     * @param int $encontroId
     * @return array
     */
    public function obtemTabelaEdicaoEncontro($ofertaDeUnidadeTematicaId, $encontroId, $filters)
    {
        $module = SAGU::getFileModule(__FILE__);
        $MIOLO = MIOLO::getInstance();

        //Imagens
        $presence = $MIOLO->getActionUrl('residency', 'html:images:presence.png');
        $justfy = $MIOLO->getActionUrl('residency', 'html:images:justfy.png');
        $absence = $MIOLO->getActionUrl('residency', 'html:images:absence.png');

        //Business file
        $busFile = $MIOLO->getBusiness('basic', 'BusFile');

        //Obtém residentes e registros de frequência e justificativa para cada encontro
        $tabelaFrequencias = ResOfertaDeUnidadeTematica::obtemTabelaFrequencias($ofertaDeUnidadeTematicaId, $encontroId, true, $filters);
        //Array utilizado pela tabela
        $dataTable = array( );
        //Controla se ja tem cabeçalho
        $cabecalho = false;
        if ( count($tabelaFrequencias) > 0 )
        {
            //Colunas fixas
            $columns[] = _M('Foto', $module);
            $columns[] = _M('Residente', $module);
            //$columns[] = _M('Status na oferta da atividade do módulo', $module);
            $columns[] = _M('Frequência', $module);
            $columns[] = _M('Status - motivo/Justificativa', $module);
            
            $fields[] = new MDiv('divResposta');
            $fields[] = new SHiddenField('valorPresenca');
            $fields[] = new SHiddenField('valorAusencia');
            $fields[] = new SHiddenField('linhaAtual');

            foreach ( $tabelaFrequencias as $key => $row )
            {
                $ofertaDoResidenteId = $row->ofertaDoResidenteId;
                //Contador colunas da tabela
                $coluna = 0;

                unset($personFile);
                if ( strlen($row->photoId) > 0 )
                {
                    $path = $busFile->getUrl($row->photoId, array( 'permission' => true ));
                    $personFile = new MImage('personFile_' . $row->photoId, NULL, $path, 'width="' . (int) SAGU::getParameter('BASIC', 'PHOTO_WIDTH') . '" height="' . (int) SAGU::getParameter('BASIC', 'PHOTO_HEIGHT') . '"');
                    $personFile->addBoxStyle('text-align', 'center');
                }

                if ( strlen($encontroId) > 0 )
                {
                    //Encontros
                    if ( is_array($row->encontros) )
                    {
                        foreach ( $row->encontros as $encontro )
                        {
                            //Frequência do residente no encontro
                            $hrefImage = null;
                            $imageFrequency = null;
                            if ( ResFrequencia::PRESENTE == $encontro->presenca )
                            {
                                $valorPresenca = ResFrequencia::PRESENTE;
                                $hrefImage = $presence;
                            }
                            if ( ResFrequencia::AUSENTE == $encontro->presenca )
                            {
                                $valorPresenca = ResFrequencia::AUSENTE;
                                $hrefImage = $absence;
                            }
                            if ( ResFrequencia::JUSTIFICADA == $encontro->presenca )
                            {
                                $valorPresenca = ResFrequencia::JUSTIFICADA;
                                $hrefImage = $justfy;
                                $valorJustificativa = $encontro->justificativa;
                            }
                            
                            $valorSubstatusId = $encontro->subtatusId;
                            $valorSubstatusMotivoId = $encontro->substatusMotivoId;
                            $valorEncontroId = $encontro->encontroId;

                            $valorAusenciaMotivo = $valorSubstatusId . '_' . $valorSubstatusMotivoId;
                        }
                    }
                }

                $presenca = strlen($valorPresenca) > 0 ? $valorPresenca : ResFrequencia::PRESENTE;
                $valorPresenca = $presenca;
                $imagem = strlen($hrefImage) > 0 ? $hrefImage : $presence;
                $justificativa = strlen($valorJustificativa) > 0 ? $valorJustificativa : null;
                $valorJustificativa = null;
                //Imagem da frequência do residente (default presenca)
                $buttonChangeFrequency = new MImage('imagemFrequencia_' . $ofertaDoResidenteId, NULL, $imagem, array( 'onclick' => "javascript:setFrequency({$ofertaDoResidenteId})", 'style' => 'cursor:pointer' ));
                $divFrequency = new MDiv('divFreq', $buttonChangeFrequency);
                $divFrequency->addBoxStyle('text-align', 'center');

                //Valor da frequência que será armazenado na base de dados
                $textField = new SHiddenField("valorFrequencia[$ofertaDoResidenteId]", $presenca);
                //Campo de justificativa da presenca justificada
                $fieldJustificativa = new MMultiLineField("justificativa[$ofertaDoResidenteId]", $justificativa, null, 10, 8, 40);
                $displayDiv = strlen($justificativa) > 0 ? 'display:block' : 'display:none';
                $divJustificativa = new MDiv("divJustificativa_$ofertaDoResidenteId", $fieldJustificativa, null, array( 'style' => $displayDiv, 'align' => 'center' ));
                //Status do residente na oferta
                //$listStatus = ResOcorrenciaDeOferta::listStatus();
                //$statusResidenteOferta = new MTextLabel('labelStatus_'.$ofertaDoResidenteId, $listStatus[$row->ocorrenciaStatus]);
                //$divStatusResidente = new MDiv('divStatusResidente', $statusResidenteOferta);
                //$divStatusResidente->addBoxStyle('text-align', 'center');
                
                //Div Ocultar presenca so mostrar se for P (presente) e se tiver substatus cadastrado na base
                if ( ResSubStatus::obterSubstatusAtivo())
                {
                    $lista = ResSubStatus::listarSubstatusPresenca();
                    $primeiro = current(array_keys($lista));
                    $valorSubstatusIdPre = SAGU::NVL($valorSubstatusId, $primeiro);

                     if ( !isset($lista[$valorSubstatusIdPre]) )
                    {
                        $valorSubstatusIdPre = current(array_keys($lista));
                    }

                    $filters = new stdClass();
                    $filters->subStatusId = $valorSubstatusIdPre;
                    $filters->subStatusMotivoId = $valorSubstatusMotivoId;
                    $filters->encontroId = $valorEncontroId;
                    $optionsSubStatus = ResSubStatus::listarMotivosPresenca($filters);

                    $presencas = ResSubStatus::listarMotivosPresenca();

                    $selectPresenca = new MSelection("selectPresenca_$ofertaDoResidenteId", $valorAusenciaMotivo, _M('Situação', $module), $presencas);

                    $displayDiv = ( $presenca == ResFrequencia::PRESENTE ) ? 'display:block' : 'display:none';

                    $divPresenca = new MDiv("divPresenca_$ofertaDoResidenteId", array($selectPresenca), null, array( 'style' => $displayDiv, 'align' => 'left' ));

                }
                else
                {
                    $divPresenca = new MDiv(rand());
                }

                //JavaScrip Presenca (faz o processamento so quando for clicado no status de presenca/ausencia/justificado
                $MIOLO->page->addJsCode("
                function alterarPresenca_{$ofertaDoResidenteId}_{$key}()
                {
                    var radios = document.getElementsByName('radioPresenca_{$ofertaDoResidenteId}');

                     for (var i=0; i < radios.length; i++)
                     {
                        if ( radios[i].checked )
                        {
                            document.getElementById('valorPresenca').value = radios[i].value;
                        }
                     }

                    document.getElementById('linhaAtual').value = {$key};

                    " . SForm::getAjaxAction('mudarPresenca', "divPresencaSelect_$ofertaDoResidenteId", false, array('ofertaDoResidenteId' => $ofertaDoResidenteId)) . "
                }
                ");

                //Div Ocultar ausencia só mostrar se for A (ausente) e se tiver substatus cadastrado na base                      
                if (ResSubStatus::obterSubstatusAtivo())
                {
                    $ausencias = ResSubStatus::listarMotivosAusencia();

                    $displayDiv = ( $presenca == ResFrequencia::AUSENTE) ? 'display:block' : 'display:none';

                    $selectAusencia = new MSelection("selectAusencia_$ofertaDoResidenteId", $valorAusenciaMotivo, _M('Situação', $module), $ausencias);

                    $divAusencia = new MDiv("divAusencia_$ofertaDoResidenteId", array($selectAusencia), null, array( 'style' => $displayDiv, 'align' => 'left' ));
               }     
                else
                {
                    //Limpar a Div pra não reprocessar a mesma coisa
                    $divAusencia = new MDiv(rand());
                }

                //Colunas da tabela
                $dataTable[$key][0] = $personFile;
                $dataTable[$key][1] = $row->name;
                //$dataTable[$key][2] = $divStatusResidente;
                $dataTable[$key][2] = $divFrequency->generate() . $textField->generate();
                $dataTable[$key][3] = new MDiv('div'.rand(), array($divJustificativa, $divPresenca, $divAusencia));
            }
            //Tabela de edicao de encontros
            $fields[] = $obj = new MTableRaw(_M('Encontro', $module), $dataTable, $columns);
            $obj->setAlternate(true);
        }
        else
        {
            // Desativa salvar e adiciona alerta
            $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
            
            $this->addAlert(_M('Nenhum residente ativo para adicionar este encontro.', $module));
        }

        return $fields;
    }


    /**
     * Obtém a tabela de encontros e registros de frequência,
     * registros são somente leitura
     *
     * @param int $ofertaDeUnidadeTematicaId
     * @return array $fields
     */
    public function obtemTabelaEncontros($ofertaDeUnidadeTematicaId)
    {
        $MIOLO = MIOLO::getInstance();

        //Imagens
        $presenceDisabled = $MIOLO->getActionUrl('residency', 'html:images:presence_disabled.png');
        $justfyDisabled = $MIOLO->getActionUrl('residency', 'html:images:justfy_disabled.png');
        $absenceDisabled = $MIOLO->getActionUrl('residency', 'html:images:absence_disabled.png');
        $presence = $MIOLO->GetActionURL('residency', 'html:images:presence.png');
        $justfy = $MIOLO->getActionUrl('residency', 'html:images:justfy.png');
        $absence = $MIOLO->getActionUrl('residency', 'html:images:absence.png');
        
        //Business file
        $busFile = $MIOLO->getBusiness('basic', 'BusFile');

        //Obtém residentes e registros de frequência e justificativa para cada encontro
        $instituicaoExecutoraId = null;
        $filters = new stdClass();
        $preceptorLogado = ResPreceptoria::retornaPreceptorLogado();
        if (count($preceptorLogado)) {
            $preceptor = $preceptorLogado;
            $tipoPreceptorLogadoParaOModulo = $preceptor->retornaTipoDePreceptorParaOModuloDaOferta(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));

            if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_PRECEPTOR) {
                $instituicaoExecutoraId = $this->retornaInstituicaoExecutoraDoPreceptorLogado();
                $filters->instituicaoExecutoraId = $instituicaoExecutoraId;
            } else if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_TUTOR) {
                $filters->enfaseId = $preceptor->enfaseId;
            }
        }

        $dataEncontro = MIOLO::_REQUEST('dataEncontro');

        if (!empty($dataEncontro)) {
            $filters->inicio = $dataEncontro;
        }

        $tabelaFrequencias = ResOfertaDeUnidadeTematica::obtemTabelaFrequencias($ofertaDeUnidadeTematicaId, null, false, $filters);


        //Deixa habilitado inserção e adição apenas para preceptor responsável
        $check = $this->verificaUsuario();

        //Array utilizado pela tabela
        $dataTable = array( );
        //Controla se ja tem cabeçalho
        $cabecalho = false;
        if ( count($tabelaFrequencias) > 0 )
        {
            //Colunas fixas
            $columns[] = _M('Foto', $module);
            $columns[] = _M('Residente', $module);
            //$columns[] = _M('Carga horária realizada', $module);
            //$columns[] = _M('Frequência atual', $module);

            foreach ( $tabelaFrequencias as $key => $row )
            {

                //Contador colunas da tabela
                $coluna = 0;

                unset($personFile);

                if ( strlen($row->photoId) > 0 )
                {
                    $path = $busFile->getUrl($row->photoId, array( 'permission' => true ));
                    $personFile = new MImage('personFile_' . $row->photoId, NULL, $path, 'width="' . (int) SAGU::getParameter('BASIC', 'PHOTO_WIDTH') . '" height="' . (int) SAGU::getParameter('BASIC', 'PHOTO_HEIGHT') . '"');
                    $personFile->addBoxStyle('text-align', 'center');
                }



                //Imagem da pessoa
                $dataTable[$key][$coluna] = $personFile;
                $coluna++;

                //Nome da pessoa
                $notActiveAlert = '';

                $residente = new ResResidente($row->residenteId);
                if ( $residente->isActive == DB_FALSE )
                {
                    $alert = new MLabel(_M('Bloqueado pelo último estado contratual: @1', $module, $residente->ultimoStatusDaOcorrenciaDeContrato->descricao));
                    $alert->setColor('red');
                    $alert->setBold(true);

                    $notActiveAlert = '<br>' . $alert->generate();
                }

                // Obtém a carga horária realizada e a frequência atual
                //$ofertaDoResidente = new ResOfertaDoResidente($row->ofertaDoResidenteId);
                /*
                $cargaHorariaRealizada = 0;

                foreach ( $row->encontros as $encontro )
                {
                    if ( strlen($encontro->presenca) > 0 )
                    {
                        $cargaHorariaRealizada = $encontro->cargaHoraria + $cargaHorariaRealizada;
                    }
                }*/

                $urlRelatorio = $MIOLO->GetActionURL($module, 'main:document:frequenciaIndividualDoResidenteAtividadeDoModulo', '', array('residenteid' => $row->residenteId, 'ofertaatividademodulo' => $ofertaDeUnidadeTematicaId));
                $relatorio = new MLink('relatorio', '(Relatório detalhado de frequência)', $urlRelatorio, null, '_blank');

                $dataTable[$key][$coluna] = $row->name . $notActiveAlert . ' - ' . $relatorio->generate();
                $coluna++;


                //$cargaHorariaRealizada = round($cargaHorariaRealizada, 0);

                // Carga horária realizada pelo aluno

                //$dataTable[$key][$coluna] = "{$cargaHorariaRealizada}h";
                //$coluna++;

                // Frequência atual do aluno
                //$dataTable[$key][$coluna] = "{$ofertaDoResidente->percentualCargaHorariaRealizadaSemCargaHorariaComplementar}%";
                //$coluna++;

                //Encontros
                if ( is_array($row->encontros) )
                {

                    foreach ( $row->encontros as $encontro )
                    {

                        $mostraEncontro = false;

                        if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_PRECEPTOR) {
                            if ($encontro->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_PRATICA || $encontro->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_PRATICA) {
                                $mostraEncontro = true;
                            }
                        } else if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_TUTOR) {
                            if ($encontro->tipo == ResTipoDeUnidadeTematica::TIPO_UNIDADE_TEORICO_CONCEITUAL) {
                                $mostraEncontro = true;
                            }
                        } else {
                            $mostraEncontro = true;
                        }

                        if ($mostraEncontro) {


                            $beginDate = SAGU::NVL(MIOLO::_REQUEST('beginDate'), $encontro->inicio);
                            $endDate = SAGU::NVL(MIOLO::_REQUEST('endDate'), $encontro->fim);

                            if ($beginDate && $endDate) {
                                $inicio = (substr($encontro->inicio, 0, 10));
                                $fim = (substr($encontro->fim, 0, 10));

                                $result1 = SAGU::dateDiff($beginDate, $inicio);
                                $result2 = SAGU::dateDiff($endDate, $fim);

                                if ($result1 <= 0 && $result2 >= 0) {


                                    $tiposEncontro = ResTipoDeUnidadeTematica::listTipos();

                                    //Se não tiver cabeçalho dos encontros
                                    if (!$cabecalho) {
                                        //Cabeçalho dinamico dos encontros(data e botao editar)
                                        $preceptorLogado = ResPreceptoria::retornaPreceptorLogado();
                                        $opts = array('event' => 'button_edit_encontro', 'encontroId' => $encontro->encontroId, 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId, 'return_to' => $this->getRequestValue('return_to'), 'preceptorId' => $preceptorLogado->preceptorId);
                                        $hrefEdit = $MIOLO->getActionURL('residency', 'main:register:encontro', null, $opts);
                                        $image = new MImageButton('encontro_' . $encontro->encontroId, _M('Editar', $module), $hrefEdit, $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'edit.png'));
                                        $header = '(' . $tiposEncontro[$encontro->tipo] . ') <br> ' . _M('Início', $module) . ' ' . $encontro->inicio . "<br>" . _M('Fim', $module) . ' ' . $encontro->fim . "<br>" . $image->generate();
                                        $divHeader = new MDiv('divHeader', $header, 'aling=left');
                                        $columns[] = $divHeader;
                                    }

                                    //Frequência do residente no encontro
                                    $hrefImage = null;
                                    $imageFrequency = null;
                                    if (ResFrequencia::PRESENTE == $encontro->presenca) {
                                        $hrefImage = $presence;
                                    }
                                    if (ResFrequencia::AUSENTE == $encontro->presenca) {
                                        $hrefImage = $absence;
                                    }
                                    if (ResFrequencia::JUSTIFICADA == $encontro->presenca) {
                                        $hrefImage = $justfy;
                                    }

                                    //Imagem da frequência
                                    if (strlen($hrefImage) > 0) {
                                        $imageFrequency = new MImage('imageFrequency_' . $encontro->encontroId . $row->residenteId, null, $hrefImage);
                                        $imageFrequency->setJsHint($encontro->justificativa);
                                        $imageFrequency->setJsHint($encontro->presencaDescricao);
                                    }

                                    $dataTable[$key][$coluna] = $divEnc = new MDiv('div_' . $encontro->encontroId . $row->residenteId, $imageFrequency);
                                    $divEnc->addBoxStyle('text-align', 'center');
                                    $coluna++;
                                }
                            } else {
                                //Se não tiver cabeçalho dos encontros
                                if (!$cabecalho) {
                                    //Cabeçalho dinamico dos encontros(data e botao editar)
                                    $opts = array('event' => 'button_edit_encontro', 'encontroId' => $encontro->encontroId, 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId, 'return_to' => $this->getRequestValue('return_to'));
                                    $hrefEdit = $MIOLO->getActionURL('residency', 'main:register:encontro', null, $opts);
                                    $image = new MImageButton('encontro_' . $encontro->encontroId, _M('Editar', $module), $hrefEdit, $MIOLO->getUI()->getImageTheme(SAGU::getCurrentTheme(), 'edit.png'));

                                    $gerarIcone = $check == DB_TRUE ? $image->generate() : null;

                                    $header = _M('Início', $module) . ' ' . $encontro->inicio . "<br>" . _M('Fim', $module) . ' ' . $encontro->fim . "<br>" . $gerarIcone;
                                    $divHeader = new MDiv('divHeader', $header, 'aling=left');
                                    $columns[] = $divHeader;
                                }

                                //Frequência do residente no encontro
                                $hrefImage = null;
                                $imageFrequency = null;
                                if (ResFrequencia::PRESENTE == $encontro->presenca) {
                                    $hrefImage = $presence;
                                }
                                if (ResFrequencia::AUSENTE == $encontro->presenca) {
                                    $hrefImage = $absence;
                                }
                                if (ResFrequencia::JUSTIFICADA == $encontro->presenca) {
                                    $hrefImage = $justfy;
                                }

                                //Imagem da frequência
                                if (strlen($hrefImage) > 0) {
                                    $imageFrequency = new MImage('imageFrequency_' . $encontro->encontroId . $row->residenteId, null, $hrefImage);
                                    $imageFrequency->setJsHint($encontro->justificativa);
                                    $imageFrequency->setJsHint($encontro->presencaDescricao);
                                }

                                $dataTable[$key][$coluna] = $divEnc = new MDiv('div_' . $encontro->encontroId . $row->residenteId, $imageFrequency);
                                $divEnc->addBoxStyle('text-align', 'center');
                                $coluna++;
                            }
                        }
                    }
                }
                //Ja tem cabeçalho
                $cabecalho = true;
            }

            $table = new MTableRaw(_M('Encontros', $module), $dataTable, $columns);
            $table->SetAlternate(true);
            $fields[] = $tableEncontrosDiv = new MDiv('tableEncontrosDiv', $table, null, 'width=100%');

            // define alinhamentos a direita
            foreach ( $dataTable as $k => $row )
            {
                $table->setCellAttribute($k, 3, 'align', 'right');
                $table->setCellAttribute($k, 3, 'valign', 'top');
                $table->setCellAttribute($k, 4, 'align', 'right');
                $table->setCellAttribute($k, 4, 'valign', 'top');
            }
        }
        else
        {
            $info = _M('Nenhum residente matriculado nessa oferta de unidade temática') . '.';
            $this->AddInfo($info);
        }

        return $fields;
    }

    /**
     * Ação do botão deletar
     * */
    public function tbBtnDelete_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $action = MIOLO::getCurrentAction();

        $encontroId = $args->encontroId ? $args->encontroId : MIOLO::_REQUEST('encontroId');
        $ofertaDeUnidadeTematicaId = $args->ofertaDeUnidadeTematicaId ? $args->ofertaDeUnidadeTematicaId : MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        $return_to = $args->return_to ? $args->return_to : MIOLO::_REQUEST('return_to');

        $gotoYes = $MIOLO->getActionURL($module, 'main:register:encontro', null, array( 'event' => 'btnDelete_confirm', 'encontroId' => $encontroId, 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId , 'return_to'=>$return_to));
        $gotoNo = $MIOLO->getActionURL($module, 'main:register:encontro', null, array( 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId ,'return_to'=>$return_to));
        $MIOLO->question(SAGU::getParameter('BASIC', 'MSG_CONFIRM_RECORD_DELETE'), $gotoYes, $gotoNo);
    }

    /**
     * Ação do botão confirmar deletar
     */
    public function btnDelete_confirm($args)
    {
        $MIOLO = MIOLO::getInstance();
        $encontroId = $args->encontroId ? $args->encontroId : MIOLO::_REQUEST('encontroId');
        $ofertaDeUnidadeTematicaId = $args->ofertaDeUnidadeTematicaId ? $args->ofertaDeUnidadeTematicaId : MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        $return_to = $args->return_to ? $args->return_to : MIOLO::_REQUEST('return_to');
        try
        {
            SDatabase::beginTransaction();
            //Deleta encontro
            $encontro = new ResEncontro($encontroId);
            $encontro->delete();

            SDatabase::commit();
            $MIOLO->information(SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED'), $MIOLO->getActionURL($module, 'main:register:encontro', null, array( 'ofertaDeUnidadeTematicaId' => $ofertaDeUnidadeTematicaId, 'return_to'=>$return_to)));
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $this->AddError($e->getMessage());
        }
    }

    public function getTypesData()
    {
        $data = new stdClass();
        $data->encontroId = $this->getFormValue('encontroId', MIOLO::_request('encontroId'));
        $data->temaId = $this->getFormValue('temaId', MIOLO::_request('temaId'));
        $data->ofertaDeUnidadeTematicaId = $this->getFormValue('ofertaDeUnidadeTematicaId', MIOLO::_request('ofertaDeUnidadeTematicaId'));
        $data->inicioData = $this->getFormValue('inicioData', MIOLO::_request('inicioData'));
        $data->inicioHora = $this->getFormValue('inicioHora', MIOLO::_request('inicioHora'));
        $data->fimData = $this->getFormValue('fimData', MIOLO::_request('fimData'));
        $data->fimHora = $this->getFormValue('fimHora', MIOLO::_request('fimHora'));
        $data->cargaHoraria = $this->getFormValue('cargaHoraria', MIOLO::_request('cargaHoraria'));
        $data->conteudoMinistrado = $this->getFormValue('conteudoMinistrado', MIOLO::_request('conteudoMinistrado'));
        $data->ministrante = $this->getFormValue('ministrante', MIOLO::_request('ministrante'));
        $data->tipo = $this->getFormValue('tipo', MIOLO::_request('tipo'));
        $data->return_to = $this->getFormValue('return_to', MIOLO::_request('return_to'));

        return $data;
    }

    /**
     * Função que salva os dados
     *
     * @param $sender
     */
    public function tbBtnSave_click($sender = NULL)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        // Obtém os dados do form
        $dataForm = $this->getTypesData();

        //Mensagem de retorno para o usuário
        $msgUpdate = _M('Encontro atualizado com sucesso', $module) . '.';
        $msgInsert = _M('Encontro inserido com sucesso', $module) . '.';
        $msg = strlen($dataForm->encontroId) > 0 ? $msgUpdate : $msgInsert;

        try
        {
            SDatabase::beginTransaction();

            //Verificar se o encontro nao está sendo cadastro fora da oferta da unidade
            $ofertaUnidade = new ResOfertaDeUnidadeTematica(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));
            
            //Se o encontro e as datas da oferta nao bateram, o encontro está errado
            if ( !SAGU::dateOverlaps($ofertaUnidade->getInicio(), SAGU::addIntervalInDate($ofertaUnidade->getFim(), 'd', '1', '+'), $dataForm->inicioData, $dataForm->fimData))
            {
                throw new Exception(_M("Você está tentando cadastrar um encontro fora do período da oferta de atividade."));
            }



            $ofertaDeUnidade = new ResOfertaDeUnidadeTematica($dataForm->ofertaDeUnidadeTematicaId);
            foreach ($ofertaDeUnidade->ofertaDeUnidadeTematicaTipos as $tipo) {

                if ($tipo->tipo == $dataForm->tipo) {
                    $quantidadeHorasJaDefinidaProTipo = ResEncontro::retornaQuantidadeDeHorasJaDefinidaProTipoNaUnidadeTematica($dataForm->ofertaDeUnidadeTematicaId, $tipo->tipo, $dataForm->encontroId);
                    $carga = $quantidadeHorasJaDefinidaProTipo + $dataForm->cargaHoraria;

                    if ($carga > $tipo->cargahoraria) {
                        throw new Exception(_M("Você está tentando cadastrar um encontro com carga horária maior que a carga horária definido para o tipo da oferta da atividade."));
                    }
                }
            }

            /**
             * Objeto encontro
             */
            $encontro = new ResEncontro();
            $encontro->encontroId = $dataForm->encontroId;
            $encontro->temaId = $dataForm->temaId;
            $encontro->ofertaDeUnidadeTematicaId = $dataForm->ofertaDeUnidadeTematicaId;
            $encontro->inicio = $dataForm->inicioData . " " . $dataForm->inicioHora;
            $encontro->fim = $dataForm->fimData . " " . $dataForm->fimHora;
            $encontro->cargaHoraria = $dataForm->cargaHoraria;
            $encontro->conteudoMinistrado = $dataForm->conteudoMinistrado;
            $encontro->ministrante = $dataForm->ministrante;
            $encontro->tipo = $dataForm->tipo;

            /**
             * Frequências
             */
            // Obtem valores frequencias
            $camposFrequencias = MIOLO::_REQUEST('valorFrequencia', 'POST');
            // Obtem valores justificativas
            $camposJustificativas = MIOLO::_REQUEST('justificativa', 'POST');

            //Busca os residentes da oferta
            $instituicaoExecutoraId = null;
            $filters = new stdClass();
            $preceptorLogado = ResPreceptoria::retornaPreceptorLogado();
            if (count($preceptorLogado)) {
                $preceptor = $preceptorLogado;
                $tipoPreceptorLogadoParaOModulo = $preceptor->retornaTipoDePreceptorParaOModuloDaOferta(MIOLO::_REQUEST('ofertaDeUnidadeTematicaId'));

                if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_PRECEPTOR) {
                    $instituicaoExecutoraId = $this->retornaInstituicaoExecutoraDoPreceptorLogado();
                    $filters->instituicaoExecutoraId = $instituicaoExecutoraId;
                } else if ($tipoPreceptorLogadoParaOModulo == ResPreceptoriaModuloFuncao::FUNCAO_TUTOR) {
                    $filters->enfaseId = $preceptor->enfaseId;
                }
            }

            $filters->ofertaDeUnidadeTematicaId = $dataForm->ofertaDeUnidadeTematicaId;
            $filters->filterOnlyActive = DB_TRUE;

            $dataOfertaDoResidente = ResOfertaDoResidente::searchGrid($filters); //FIXME Esta consulta está errada, está trazendo os alunos que cancelaram junto

            foreach ( (array) $dataOfertaDoResidente as $ofertaResidente )
            {
                $frequencia = new ResFrequencia();
                $frequencia->encontroId = $dataForm->encontroId;
                $frequencia->residenteId = $ofertaResidente[1];
                $frequencia->presenca = $camposFrequencias[$ofertaResidente[0]];
                $frequencia->justificativa = $camposJustificativas[$ofertaResidente[0]];

                if ( $frequencia->presenca == 'P' )
                {
                    $frequencia->subStatusId = MIOLO::_REQUEST("radioPresenca_{$ofertaResidente[0]}");

                    $selectPre = $_REQUEST["selectPresenca_{$ofertaResidente[0]}"];
                    $selectPresenca = explode('_', $selectPre);

                    $frequencia->subStatusId = $selectPresenca[0];
                    $frequencia->subStatusMotivoId = $selectPresenca[1];

                }
                else if ($frequencia->presenca == 'A')
                {
                    $selectAux = $_REQUEST["selectAusencia_{$ofertaResidente[0]}"];
                    $selectAusenciaEx = explode('_', $selectAux);

                    $frequencia->subStatusId = $selectAusenciaEx[0];
                    $frequencia->subStatusMotivoId = $selectAusenciaEx[1];
                }


                if ( $frequencia->presenca != null) {
                    $frequencias[] = $frequencia;
                }

            }

            //Adiciona as frequências dos residentes
            $encontro->frequencias = $frequencias;
            //Salva os dados
            $ok = $encontro->save();

            SDatabase::commit();
            if ( $ok )
            {
                $caption = _M('Informação', $module);
                $preceptorLogado = ResPreceptoria::retornaPreceptorLogado();
                if (count($preceptorLogado) > 0) {
                    SAGU::information($msg, $MIOLO->getActionURL('services', 'main:residencyEncontro', null, array('ofertaDeUnidadeTematicaId' => $dataForm->ofertaDeUnidadeTematicaId, 'return_to' => $this->getRequestValue('return_to'), 'preceptorId' => $preceptorLogado->preceptorId)));

                } else {
                    SAGU::information($msg, $MIOLO->getActionURL($module, 'main:register:encontro', null, array('ofertaDeUnidadeTematicaId' => $dataForm->ofertaDeUnidadeTematicaId, 'return_to' => $this->getRequestValue('return_to'))));
                }
            }
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $this->AddError($e->getMessage());
        }
    }
    
    /*
     * Verifica se usuário é professor ou responsável, se não bloqueia a edição
     */
    public function verificaUsuario()
    {
        $MIOLO = MIOLO::getInstance();
        
        // Obtem pessoa
        $mioloUserName = trim($MIOLO->getLogin()->id);
        $busPerson = $MIOLO->getBusiness('basic', 'BusPerson');
        $personData = $busPerson->getPersonByMioloUserName($mioloUserName);
        
        //Caso a pessoa não veja o professor da oferecida e nem o responsável
        $check = DB_TRUE;
        
        //Verfica se a pessoa logada é o professor da oferecida
        $oferta = new ResOfertaDeUnidadeTematica( MIOLO::_REQUEST('ofertaDeUnidadeTematicaId') );
        
        $preceptor = ResPreceptoria::responsavelNucleoEnfaseReferencia($personData->personId);
                     
        //Verifica se é professor responsável
        $responsavel = MIOLO::_REQUEST('responsavel');
        
        //Caso o não seja o professor da oferecida, verfica se é um responsável, e referencia a enfase
        if ( ($personData->personId != $oferta->personId && $responsavel == DB_FALSE) || !count($preceptor) > 0 )
        {
            $check = DB_FALSE;
        }
        
        return $check;
    }
}
?>