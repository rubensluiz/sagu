<?php

/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Nataniel I. da Silva [nataniel@solis.com.br]
 *
 * @since
 * Class created on 03/11/2014
 *
 **/

class FrmTurma extends SManagementForm
{
    
    public function __construct()
    {
        parent::__construct(new ResTurma(), array('turmaId'), null, _M('Cadastro de turma', MIOLO::getCurrentModule()));
    }
    
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_REQUEST('function');
        
        $data = array();
                
        $fields[] = $codigoTurma =  new MTextField('codigoTurma', $this->GetFormValue('codigoTurma'), _M('Código da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Conjunto de caracteres sem acentuação e espaço, com no máximo 50 caracteres.', $module)); 
        $validators[] = $regexp = new MRegExpValidator('codigoTurma', '', "^[^áàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ ]+$", 'required', _M('O campo "Turma" deve ser informado e não pode conter espaços e palavras acentuadas, quantidade máxima de 50 caracteres.', $module));
        $regexp->max = 50;
        
        $fields[] = $descricao =  new MTextField('descricao', $this->GetFormValue('descricao'), _M('Nome da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE')); 
        $descricao->setIsRequired(true);

        $fields[] = $componenteid =  new MSelection('componenteid', $this->GetFormValue('componenteid'), _M('Componente'), ResComponente::listRecords());

        //$fields[] = $nucleoProfissionalId =  new MSelection('nucleoProfissionalId', $this->GetFormValue('nucleoProfissionalId'), _M('Núcleo profissional'), ResNucleoProfissional::listRecords());
        
        //$fields[] = $enfaseId =  new MSelection('enfaseId', $this->GetFormValue('enfaseId'), _M('Ênfase'), ResEnfase::listRecords());

        $fields[] = $quantidadePeriodo =  new MSelection('quantidadePeriodo', $this->GetFormValue('quantidadePeriodo'), _M('Período de duração', $module), ResTurma::listPeriods()); 
        $quantidadePeriodo->setIsRequired(true); 
        
        $fields[] = new SBeginEndPeriod(array(
            'title' => _M('Período letivo', $module),
            'begin' => array('label' => _M('Data inicial', $module), 'dateId' => 'dataInicio', 'dateValue' => $this->getRequestValue('dataInicio', $data->dataInicio)),
            'end' => array('label' => _M('Data final', $module), 'dateId' => 'dataFim', 'dateValue' => $this->getRequestValue('dataFim', $data->dataFim)),
            'required' => true,
        ));
        
        $fields[] = $vagas =  new MIntegerField('vagas', $this->GetFormValue('vagas'), _M('Vagas', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE')); 
        $vagas->setIsRequired(true);

        $this->formataMoedaEmJavascript();
        $fields[] = $valorBolsa =  new MTextField('valorBolsa', $this->GetFormValue('valorBolsa'), _M('Valor da bolsa dos residentes (R$)', $module));
        $valorBolsa->addAttribute('onkeypress', "return formatar_moeda(this, '.', ',', event);");


        $fields[] = $tipoAvaliacaoTCR =  new MSelection('tipoAvaliacaoTCR', $this->GetFormValue('tipoAvaliacaoTCR'), _M('Avaliação TCR', $module), ResTurma::listTipoAvaliacao(), null, _M('Tipo de avaliação do trabalho de conclusão do residente.', $module));
        $tipoAvaliacaoTCR->setIsRequired(true);

        parent::defineFields($fields, $validators, $data);

        if ( $function == SForm::FUNCTION_UPDATE )
        {
            $this->addField(new MButton('btnVoltar', _M('<< Voltar', $module), $this->getPreviousURL()));
        }
    }
    
    public function tbBtnSave_click($sender = NULL)
    {
        $module = MIOLO::getCurrentModule();
        $data = $this->getRequestData();

        $periodo = $data->quantidadePeriodo * 12;
        
        // Intevalo em meses das datas de início e fim
        $intervalo = SAGU::dateDiffInMonth($data->dataInicio, $data->dataFim);
        
        if ( ($intervalo/12) >= ($data->quantidadePeriodo+1) )
        {
            $inferior = $data->quantidadePeriodo+1;
            $this->AddError(_M("O intervalo de datas do período letivo deve ser superior a {$data->quantidadePeriodo} anos e inferior a {$inferior} anos."));
            return;
        }
                
        if ( $data->function == SForm::FUNCTION_UPDATE )
        {
            $turma = ResTurma::obtemTurma($data->codigoTurma);
            
            $filters = new stdClass();
            $filters->turmaId =  $turma->turmaId;

            $alunos = ResResidente::obtemAlunosDaTurma($filters);
            $alunosDaTurma = count($alunos);
            
            if ( $alunosDaTurma > $data->vagas )
            {
                $this->AddError(_M("O número de vagas não pode ser inferior ao número de residentes já alocados nesta turma. <br> Residentes alocados nesta turma: {$alunosDaTurma}. "));
                return;
            }
        }
        
        parent::tbBtnSave_click($sender);
    }
        
    public function getRequestValues()
    {
        $data = parent::getRequestValues();
        
        // $data['nucleoProfissionalId'] = strlen($data['nucleoProfissionalId']) > 0 ? $data['nucleoProfissionalId'] : SType::NULL_VALUE;
        // $data['enfaseId'] = strlen($data['enfaseId']) > 0 ? $data['enfaseId'] : SType::NULL_VALUE;
        $data['componenteid'] = strlen($data['componenteid']) > 0 ? $data['componenteid'] : SType::NULL_VALUE;

        return $data;
    }



    private function formataMoedaEmJavascript() {
        $this->addJsCode('
            function formatar_moeda(campo, separador_milhar, separador_decimal, tecla) {
	var sep = 0;
	var key = \'\';
	var i = j = 0;
	var len = len2 = 0;
	var strCheck = \'0123456789\';
	var aux = aux2 = \'\';
	var whichCode = (window.Event) ? tecla.which : tecla.keyCode;

	if (whichCode == 13) return true; // Tecla Enter
	if (whichCode == 8) return true; // Tecla Delete
	key = String.fromCharCode(whichCode); // Pegando o valor digitado
	if (strCheck.indexOf(key) == -1) return false; // Valor inválido (não inteiro)
	len = campo.value.length;
	for(i = 0; i < len; i++)
	if ((campo.value.charAt(i) != \'0\') && (campo.value.charAt(i) != separador_decimal)) break;
	aux = \'\';
	for(; i < len; i++)
	if (strCheck.indexOf(campo.value.charAt(i))!=-1) aux += campo.value.charAt(i);
	aux += key;
	len = aux.length;
	if (len == 0) campo.value = \'\';
	if (len == 1) campo.value = \'0\'+ separador_decimal + \'0\' + aux;
	if (len == 2) campo.value = \'0\'+ separador_decimal + aux;

	if (len > 2) {
		aux2 = \'\';

		for (j = 0, i = len - 3; i >= 0; i--) {
			if (j == 3) {
				aux2 += separador_milhar;
				j = 0;
			}
			aux2 += aux.charAt(i);
			j++;
		}

		campo.value = \'\';
		len2 = aux2.length;
		for (i = len2 - 1; i >= 0; i--)
		campo.value += aux2.charAt(i);
		campo.value += separador_decimal + aux.substr(len - 2, len);
	}

	return false;
}
        
        ');
    }
}

