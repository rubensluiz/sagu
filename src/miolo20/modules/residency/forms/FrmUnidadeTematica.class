<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Formulário de cadastro/edição/exclusão de unidade temática (FrmPai)
 *
 * @author Arthur Lehdermann [arthur@solis.coop.br]
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 *
 * @since
 * Class created on 16/07/2011
 */
class FrmUnidadeTematica extends SManagementForm
{

    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('ui/controls/msubdetail.class');

        parent::__construct(new ResUnidadeTematica(), array('unidadeTematicaId'));
    }

    /**
     * Monta o formulário do passo 1
     */
    public function CreateFieldsPasso1($data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        if ( $function == SForm::FUNCTION_UPDATE )
        {
            // Código da unidade temática
            $unidadeTematicaId = MIOLO::_REQUEST('unidadeTematicaId');
            $fields[] = new MTextLabel('unidadeTematicaIdLabel', $unidadeTematicaId, _M('Código da unidade temática', $module));
            $fields[] = new SHiddenField('unidadeTematicaId', $unidadeTematicaId);
        }

        // Campo descrição
        $data->descricao = MIOLO::_REQUEST('descricao') ? MIOLO::_REQUEST('descricao') : $data->descricao;
        $campoDescricao = new MTextField('descricao', $data->descricao, _M('Descrição', $module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'));
        $campoDescricao->setJsHint(_M('Informe a descrição', $module));
        $fields[] = $campoDescricao;
        $validators[] = new MRequiredValidator('descricao', _M('Descrição', $module));

        // modulo
        $fields[] = new MSelection('moduloId', SAGU::NVL(MIOLO::_REQUEST('moduloId'), $data->moduloId), _M('Módulo', $module), ResModulo::listarModulos());
        $validators[] = new MRequiredValidator('moduloId', _M('Módulo', $module));

        // Campo período
        $periodos = ResUnidadeTematica::listPeriodos();
        $campoPeriodo = new MSelection('periodo', SAGU::NVL(MIOLO::_REQUEST('periodo'), $data->periodo), _M('Período', $module), $periodos);
        $campoPeriodo->setJsHint(_M('Informe o período', $module));
        $fields[] = $campoPeriodo;
        $validators[] = new MRequiredValidator('periodo', _M('Período', $module));

        // Campo súmula
        $campoSumula= new MMultilineField('sumula', SAGU::NVL(MIOLO::_REQUEST('sumula'), $data->sumula), _M('Súmula', $module), SAGU::getParameter('basic', 'FIELD_DESCRIPTION_SIZE'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('basic', 'FIELD_MULTILINE_NUM_COLS'));
        $campoSumula->setJsHint(_M('Informe a súmula', $module));
        $fields[] = $campoSumula;
        //$validators[] = new MRequiredValidator('sumula', _M('Súmula', $module));

        $campoCargaHoraria = new MTextField('cargaHoraria', $data->cargaHoraria, _M('Carga horária', $module), SAGU::getParameter('basic', 'FIELD_ID_SIZE'));
        $campoCargaHoraria->setJsHint(_M('Informe a carga horária(em horas). Ex.: 240', $module));
        $fields[] = $campoCargaHoraria;

            // Separador
        $fields[] = new MSeparator();


        // Objeto de retorno com os campos/validadores
        $return = new stdClass();
        $return->camposDoFormulario = $fields;
        $return->validadoresDoFormulario = $validators;

        return $return;
    }

    /**
     * Monta o formulário do passo 2
     */
    public static function CreateFieldsPasso2($data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        // Dados da etapa anterior
        $periodos = ResUnidadeTematica::listPeriodos();
        $options = array(
            'title' => _M('Dados da atividade do módulo', $module),
            'columns' => 1,
            'value' => array(
                _M('Descrição') => $data->descricao,
                _M('Período') => $periodos[$data->periodo]
            )
        );
        $fields[] = new SInformationField($options);

        // Separador
        $fields[] = new MSeparator();

        // Grid núcleos profissionais
        $filters = new stdClass();
        $grdNPUT = $MIOLO->getUI()->getGrid($module, 'GrdNucleosProfissionaisDaUnidadeTematica', $filters);
        $gridData = ResUnidadeTematica::obterNucleos($data->unidadeTematicaId);
        $grdNPUT->setData($gridData);
        // Marca os selecionados
        $selecteds = array();
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            foreach ( $gridData as $k => $row )
            {
                if ( strlen($row[2]) > 0 )
                {
                    $selecteds[] = $k;
                }
            }
        }
        else
        {
            $selecteds = array_keys((array)$data->nucleosProfissionais);
        }
        $grdNPUT->selecteds = $selecteds;
        $grdNPUT->setClose(null);
        $grdNPUT->setTitle(_M('Núcleos profissionais'));
        $divNPUT = new MDiv('divNPUT', $grdNPUT);
        $divNPUT->addBoxStyle('width', '100%');
        $fields[] = new MBaseGroup('baseGroupNPUT', null, array($divNPUT));

        // Objeto de retorno com os campos/validadores
        $return = new stdClass();
        $return->camposDoFormulario = $fields;
        $return->validadoresDoFormulario = $validators;

        return $return;
    }

    /**
     * Monta o formulário do passo 3
     */
    public static function CreateFieldsPasso3($data = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        // Dados da etapa anterior
        $periodos = ResUnidadeTematica::listPeriodos();
        $options = array(
            'title' => _M('Dados da atividade do módulo', $module),
            'columns' => 1,
            'value' => array(
                _M('Descrição') => $data->descricao,
                _M('Período') => $periodos[$data->periodo]
            )
        );
        $fields[] = new SInformationField($options);

        // Separador
        $fields[] = new MSeparator();

        // Grid ênfases
        $grdEUT = $MIOLO->getUI()->getGrid($module, 'GrdEnfasesDaUnidadeTematica', $filters);
        $gridData = ResUnidadeTematica::obterEnfases($data->unidadeTematicaId);
        $grdEUT->setData($gridData);
        // Marca os selecionados
        $selecteds = array();
        if ( $function == SForm::FUNCTION_UPDATE )
        {
            foreach ( $gridData as $k => $row )
            {
                if ( strlen($row[2]) > 0 )
                {
                    $selecteds[] = $k;
                }
            }
        }
        else
        {
            $selecteds = array_keys((array)$data->enfases);
        }
        $grdEUT->selecteds = $selecteds;
        $grdEUT->setClose(null);
        $grdEUT->setTitle(_M('Ênfases'));
        $divEUT = new MDiv('divEUT', $grdEUT);
        $divEUT->addBoxStyle('width', '100%');
        $fields[] = new MBaseGroup('baseGroupEUT', null, array($divEUT));

        // Objeto de retorno com os campos/validadores
        $return = new stdClass();
        $return->camposDoFormulario = $fields;
        $return->validadoresDoFormulario = $validators;

        return $return;
    }
    

    /**
     * Função que salva os dados
     *
     * @param type $args
     */
    public function saveButton_click($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $function = MIOLO::_REQUEST('function');

        // Obtém os dados
        $data->nucleosProfissionais = (array)$MIOLO->session->get('nucleosProfissionais');
        $data->enfases = (array)$MIOLO->session->get('enfases');


        try
        {
            // Organiza os dados
            $resUnidadeTematica = new ResUnidadeTematica();
            $resUnidadeTematica->unidadeTematicaId = $data->unidadeTematicaId;
            $resUnidadeTematica->periodo = $data->periodo;
            $resUnidadeTematica->descricao = $data->descricao;
            $resUnidadeTematica->sumula = $data->sumula;
            $resUnidadeTematica->moduloId = $data->moduloId;
            $resUnidadeTematica->cargaHoraria = $data->cargaHoraria;


            // Núcleos profissionais
            $nucleosProfissionais = array();
            foreach ( (array)$data->nucleosProfissionais as $row )
            {
                $nucleoProfissional = new ResNucleoDaUnidadeTematica();
                $nucleoProfissional->nucleoProfissionalId = $row;
                $nucleosProfissionais[] = $nucleoProfissional;
            }
            $resUnidadeTematica->nucleosProfissionais = $nucleosProfissionais;

            // Ênfases
            $enfases = array();
            foreach ( (array)$data->enfases as $row )
            {
                $enfase = new ResEnfaseDaUnidadeTematica();
                $enfase->enfaseId = $row;
                $enfases[] = $enfase;
            }
            $resUnidadeTematica->enfases = $enfases;

            // Se for edição, instancia e apaga os núcleos e ênfases
            if ( strlen($data->unidadeTematicaId) > 0 )
            {
                $unidadeTematica = new ResUnidadeTematica($data->unidadeTematicaId);

                // Deleta os núcleos profissionais da unidade temática
                foreach ( (array)$unidadeTematica->nucleosProfissionais as $nucleoProfissional )
                {
                    $ok = $nucleoProfissional->delete();
                    if ( !$ok )
                    {
                        $msg = _M('Erro ao excluir os núcleos profissionais da atividade do módulo');
                        throw new Exception($msg);
                    }
                }

                // Deleta as ênfases da unidade temática
                foreach ( (array)$unidadeTematica->enfases as $enfase )
                {
                    $ok = $enfase->delete();
                    if ( !$ok )
                    {
                        $msg = _M('Erro ao excluir as ênfases da atividade do módulo');
                        throw new Exception($msg);
                    }
                }
            }

            // Cadastrando os dados das subatividades
            SDatabase::beginTransaction();
            $resUnidadeTematica->save();

            SDatabase::commit();

            // Mensagem de sucesso
            $msg = ($function == SForm::FUNCTION_UPDATE) ? SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED') : SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED_INFO');
            SAGU::information($msg, $MIOLO->getActionURL($module, $action, null, array('function'=>'search')));
        }
        catch ( Exception $e )
        {
            SDatabase::rollback();
            $msg = _M('Houve um problema ao inserir os dados', $module) . '<br /><br />' . $e->getMessage();
            SAGU::error($msg);
        }
    }
}
?>