<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 16/07/2011
 */
class BusinessresidencyLookup
{
    /**
     * Autocomplete ofertaDeUnidadeTematica
     *
     * @param type $context
     */
    public function autoCompleteofertaDeUnidadeTematica(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT a.ofertaDeUnidadeTematicaId,
                       b.descricao
                  FROM res.ofertadeunidadeTematica a
            INNER JOIN res.unidadetematica b
                    ON a.unidadetematicaid = b.unidadetematicaid
                 WHERE a.ofertadeunidadeTematicaId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup ofertaDeUnidadeTematica
     *
     * @global type $MIOLO
     * @param type $lookup
     */
    public function lookupofertaDeUnidadeTematica(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');
        $MIOLO->uses('classes/sagu.class', 'basic');

        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.userName.focus()");

        // Obtém os filtros:
        $ofertaDeUnidadeTematicaId = MIOLO::_REQUEST('ofertaDeUnidadeTematicaId');
        $unidadeTematicaId = MIOLO::_REQUEST('unidadeTematicaId');
        $personId = MIOLO::_REQUEST('personId');
        $inicio = MIOLO::_REQUEST('inicio');
        $fim = MIOLO::_REQUEST('fim');

        $fields = array();
        // Campo ofera de unidade temática
        $ofertaDeUnidadeTematicaIdField = new MTextField('ofertaDeUnidadeTematicaId', '', _M('Código da oferta de unidade temática', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'));
        $ofertaDeUnidadeTematicaIdField->setJsHint(_M('Informe o código da oferta de unidade temática', $module));
        $fields[] = $ofertaDeUnidadeTematicaIdField;

        // Campo código da unidade temática
        $opts = array( 'label' => _M('Código unidade temática', $module),
            'item' => 'Unidadetematica',
            'module' => 'residency',
            'related' => array('unidadeTematicaIdDescription') );
        $fields[] = new SLookupContainer('unidadeTematicaId', $unidadeTematicaId, $opts);

        // Campo início
        $inicioField = new MCalendarField('inicio', $inicio, _M('Início', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_LOOKUP_SIZE'));
        $inicioField->setJsHint(_M('Informe o inicio', $module));
        $fields[] = $inicioField;

        // Campo fim
        $fimField = new MCalendarField('fim', $fim, _M('Fim', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_LOOKUP_SIZE'));
        $fimField->setJsHint(_M('Informe o fim', $module));
        $fields[] = $fimField;

        foreach ( $fields as $field )
        {
            $lookup->addFilterField($field);
        }

        $columns = array();
        $columns[] = new MDataGridColumn('ofertaDeUnidadeTematicaId', _M('Código da oferta de unidade temática', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('descricao', _M('Descrição', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('unidadeTematicaId', _M('Código da unidade temática', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('inicio', _M('Início', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('fim', _M('Fim', $module), 'left', true, null, true);

        $sql = "SELECT a.ofertaDeUnidadeTematicaId,
                       b.descricao,
                       b.unidadetematicaid,
                       TO_CHAR(inicio, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "'),
                       TO_CHAR(fim, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "')
                  FROM res.ofertaDeUnidadeTematica a
            INNER JOIN res.unidadeTematica b
                    ON a.unidadetematicaid = b.unidadetematicaid";

        $where = '';
        $params = array();
        if ( strlen($ofertaDeUnidadeTematicaId) > 0 )
        {
            $where .= ' AND a.ofertaDeUnidadeTematicaId = ?';
            $params[] = $ofertaDeUnidadeTematicaId;
        }


        if ( strlen($unidadeTematicaId) > 0 )
        {
            $where .= ' AND a.unidadeTematicaId = ?';
            $params[] = $unidadeTematicaId;
        }

        if ( strlen($inicio) > 0 )
        {
            $where .= " AND a.inicio = TO_DATE(?, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "')";
            $params[] = $inicio;
        }

        if ( strlen($fim) > 0 )
        {
            $where .=  "AND a.fim = TO_DATE(?, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "')";
            $params[] = $fim;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
        }

        $sql.= ' ORDER BY a.ofertaDeUnidadeTematicaId';

        if ( strlen($where) ==  0 )
        {
            $sql.= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $params));

        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Autocomplete UnidadeTematica
     *
     * @param type $context
     */
    public function autoCompleteUnidadeTematica(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);
        $residenteId = MIOLO::_REQUEST('residenteId');
        $unidadeTematicaId = MIOLO::_REQUEST('unidadeTematicaId');

        $sql = "SELECT A.descricao,
                   (SELECT descricao FROM res.periodoUnidadeTematica WHERE periodoId = A.periodo) AS periodo,
                   ARRAY_TO_STRING(ARRAY(
                       SELECT descricao
                         FROM res.nucleoDaUnidadeTematica NDUT
                   INNER JOIN res.nucleoProfissional NP
                           ON NP.nucleoprofissionalid = NDUT.nucleoprofissionalid
                        WHERE NDUT.unidadetematicaid = A.unidadeTematicaId), ', ') AS nucleos,
                   ARRAY_TO_STRING(ARRAY(
                       SELECT descricao
                         FROM res.enfaseDaUnidadeTematica EDUT
                   INNER JOIN res.enfase E
                           ON E.enfaseId = EDUT.enfaseId
                        WHERE EDUT.unidadeTematicaId = A.unidadeTematicaId), ', ') AS enfases,";


        $sql .= " (SELECT nome FROM res.Modulo WHERE moduloId = A.moduloId) ";

        $sql .= "
             FROM res.unidadeTematica A
            WHERE A.unidadeTematicaId = ?";

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup UnidadeTematica
     *
     * @global type $MIOLO
     * @param type $lookup
     */
    public function lookupUnidadeTematica(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');
        $residenteId = MIOLO::_REQUEST('residenteId');
        $unidadeTematicaId = MIOLO::_REQUEST('unidadeTematicaId');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.descricao.focus()");

        $fields[] = $residenteField = new MTextField('residenteId', $residenteId);
        $residenteField->addAttribute('style', 'display:none');

        // Campo código da unidade temática
        $fields[] = $unidadeTematicaId = new MTextField('unidadeTematicaId', '', _M('Código da unidade temática', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'));
        $unidadeTematicaId->setJsHint(_M('Informe o código da unidade temática', $module));

        //Campo módulo
        $fields[] = $modulo = new MTextField('modulo', '', _M("Código do módulo", $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'));
        $modulo->setJsHint(_M("Informe o código do módulo", $module));

        // Campo período
        $fields[] = $periodo = new MTextField('periodo', '', _M('Período', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $periodo->addAttribute('maxlength', '10');
        $periodo->setJsHint(_M('Informe o período', $module));

        // Campo descrição
        $fields[] = $descricao = new MTextField('descricao', '', _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $descricao->addAttribute('maxlength', '255');
        $descricao->setJsHint(_M('Informe a descrição', $module));


        foreach ( $fields as $field )
        {
            $lookup->addFilterField($field);
            extract(array($field->name => $lookup->getFilterValue($field->name)));
        }

        $columns = array();
        $columns[] = new MDataGridColumn('unidadeTematicaId', _M('Código', $module), 'right', true, null, true);
        $columns[] = new MDataGridColumn('periodo', _M('Período', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('modulo', _M('Módulo'), 'left', true, null, true);
        $columns[] = new MDataGridColumn('descricao', _M('Descrição', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('nucleos', _M('Núcleos'), 'left', true, null, true);
        $columns[] = new MDataGridColumn('enfases', _M('Ênfases'), 'left', true, null, true);

        $sql = "SELECT A.unidadeTematicaId,
                   A.descricao,
                   (SELECT descricao FROM res.periodoUnidadeTematica WHERE periodoId = A.periodo) AS periodo,
                   ARRAY_TO_STRING(ARRAY(
                       SELECT descricao
                         FROM res.nucleoDaUnidadeTematica NDUT
                   INNER JOIN res.nucleoProfissional NP
                           ON NP.nucleoprofissionalid = NDUT.nucleoprofissionalid
                        WHERE NDUT.unidadetematicaid = A.unidadeTematicaId), ', ') AS nucleos,

                   ARRAY_TO_STRING(ARRAY(
                       SELECT descricao
                         FROM res.enfaseDaUnidadeTematica EDUT
                   INNER JOIN res.enfase E
                           ON E.enfaseId = EDUT.enfaseId
                        WHERE EDUT.unidadeTematicaId = A.unidadeTematicaId), ', ') AS enfases,";

        $sql .= " (SELECT nome FROM res.Modulo where moduloId = A.moduloId) AS modulo";

        $sql .= " FROM res.unidadeTematica A ";

        $where = '';
        $params = array();
        if ( strlen($unidadeTematicaId) > 0 )
        {
            $where .= ' AND unidadeTematicaId = ?';
            $params[] = $unidadeTematicaId;
        }

        if ( strlen($periodo) > 0 )
        {
            $where .= ' AND UNACCENT(periodo) ILIKE UNACCENT(?) ';
            $params[] = $período . '%';
        }

        $descricao = $descricao == '' ? '%' : $descricao;
        if ( strlen($descricao) > 0 )
        {
            $where .= ' AND UNACCENT(descricao) ILIKE UNACCENT(?) ';
            $params[] = $descricao . '%';
        }

        if ( strlen($modulo) > 0 )
        {
            $where .= ' AND moduloId = ? ';
            $params[] = $modulo;
        }

        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4);
        }

        $sql .= ' ORDER BY unidadeTematicaId';

        if ( strlen($where)  ==  0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $params));

        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Autocomplete Tema
     *
     * @param type $context
     */
    public function autoCompleteTema(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = 'SELECT descricao
                  FROM res.tema
                 WHERE temaId = ?';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup Tema
     *
     * @global type $MIOLO
     * @param type $lookup
     */
    public function lookupTema(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.username.focus()");

        // Obtém os filtros:
        $temaId = MIOLO::_REQUEST('temaId');
        $descricao = MIOLO::_REQUEST('descricao');

        $fields = array();
        // Campo código do tema
        $temaIdField = new MTextField('temaId', $temaId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'));
        $temaIdField->setJsHint(_M('Informe o código do tema', $module));
        $fields[] = $temaIdField;

        // Campo descrição
        $descricaoField = new MTextField('descricao', $descricao, _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $descricaoField->addAttribute('maxlength', '255');
        $descricaoField->setJsHint(_M('Informe a descrição', $module));
        $fields[] = $descricaoField;

        foreach ( $fields as $field )
        {
            $lookup->addFilterField($field);
        }

        $columns = array();
        $columns[] = new MDataGridColumn('temaId', _M('Código', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('descricao', _M('Descrição', $module), 'left', true, NULL, true);

        $sql = 'SELECT temaId,
                       descricao
                  FROM res.tema';

        if ( strlen($temaId) > 0 )
        {
            $where .= ' AND temaId = ?';
            $params[] = $temaId;
        }

        if ( strlen($descricao) > 0 )
        {
            $where .= ' AND UNACCENT(descricao) ILIKE UNACCENT(?) ';
            $params[] = $descricao . '%';
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
        }

        $sql .= ' ORDER BY temaId';

        if ( strlen($where)  ==  0 )
        {
            $sql .= ' LIMIT 100';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $params));

        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();

        $args = array();
        $args['function'] = 'insert';
        //$lookup->grid->header[] = '<b><center><a href="' . $MIOLO->getActionURL('residency', 'main:register:tema', '') . '">' . _M('Inserir novo', 'basic') . '</a></center></b><br>';
    }

    /**
     * Auto complete Residente
     *
     * @param type $context
     */
    public function autoCompleteResidente(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);

        $sql = "SELECT PP.name AS residenteName,
                       R.enfaseId,
                       R.nucleoProfissionalId,
                       TO_CHAR(R.inicio, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS inicio,
                       TO_CHAR(R.fimPrevisto, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS fimPrevisto
                  FROM res.residente R
       INNER JOIN ONLY basPhysicalPerson PP
                    ON R.personId = PP.personId
                 WHERE R.residenteId = ?";

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup Residente
     *
     * @global type $MIOLO
     * @param type $lookup
     */
    public function lookupResidente(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.username.focus()");

        // Obtém os filtros:
        $residenteId = MIOLO::_REQUEST('residenteId');
        $residenteName = MIOLO::_REQUEST('residenteName') == '' ? '%' : MIOLO::_REQUEST('residenteName');
        $enfaseId = MIOLO::_REQUEST('enfaseId');
        $nucleoProfissionalId = MIOLO::_REQUEST('nucleoProfissionalId');
        $inicio = MIOLO::_REQUEST('inicio');
        $fimPrevisto = MIOLO::_REQUEST('fimPrevisto');

        $fields = array();
        // Campo código do residente
        $residenteIdField = new MTextField('residenteId', $residenteId, _M('Código do residente', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'));
        $residenteIdField->setJsHint(_M('Informe o residenteId', $module));
        $fields[] = $residenteIdField;

        // Campo nome do residente
        $residenteNameField = new MTextField('residenteName', $residenteName, _M('Nome do residente', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $residenteNameField->setJsHint(_M('Informe o nome do residenteId', $module));
        $fields[] = $residenteNameField;

        // Campo ênfase
        $enfaseIdField = new MSelection('enfaseId', $enfaseId, _M('Ênfase'), ResEnfase::listRecords());
        $enfaseIdField->setJsHint(_M('Informe a ênfase'));
        $fields[] = $enfaseIdField;

        // Campo núcleo profissional
        $nucleoProfissionalIdField = new MSelection('nucleoProfissionalId', $nucleoProfissionalId, _M('Núcleo profissional'), ResNucleoProfissional::listRecords());
        $nucleoProfissionalIdField->setJsHint(_M('Informe o núcleo profissional'));
        $fields[] = $nucleoProfissionalIdField;

        // Campo início
        $inicioField = new MCalendarField('inicio', $inicio, _M('Início', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_LOOKUP_SIZE'));
        $inicioField->setJsHint(_M('Informe o início', $module));
        $fields[] = $inicioField;

        // Campo fim previsto
        $fimPrevistoField = new MCalendarField('fimPrevisto', $fimPrevisto, _M('Fim previsto', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_LOOKUP_SIZE'));
        $fimPrevistoField->setJsHint(_M('Informe o fimPrevisto', $module));
        $fields[] = $fimPrevistoField;

        foreach ( $fields as $field )
        {
            $lookup->addFilterField($field);
        }

        $columns = array();
        $columns[] = new MDataGridColumn('residenteId', _M('Código do residente', $module), 'right', true, NULL, true);
        $columns[] = new MDataGridColumn('residenteName', _M('Nome do residente', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('enfaseId', _M('Ênfase'), 'left', true, NULL, true, ResEnfase::listRecords());
        $columns[] = new MDataGridColumn('nucleoProfissionalId', _M('Núcleo profissional'), 'left', true, NULL, true, ResNucleoProfissional::listRecords());
        $columns[] = new MDataGridColumn('inicio', _M('Início', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('fimPrevisto', _M('Fim previsto', $module), 'left', true, NULL, true);

        $sql = "SELECT R.residenteId,
                       PP.name AS residenteName,
                       R.enfaseId,
                       R.nucleoProfissionalId,
                       TO_CHAR(R.inicio, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS inicio,
                       TO_CHAR(R.fimPrevisto, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS fimPrevisto
                  FROM res.residente R
       INNER JOIN ONLY basPhysicalPerson PP
                    ON R.personId = PP.personId";

        $where = '';
        $params = array();
        if ( strlen($residenteId) > 0 )
        {
            $where .= ' AND R.residenteId = ?';
            $params[] = $residenteId;
        }

        if ( strlen($residenteName) > 0 )
        {
            $where .= ' AND PP.name ILIKE ?';
            $params[] = $residenteName . '%';
        }

        if ( strlen($enfaseId) > 0 )
        {
            $where .= ' AND R.enfaseId = ?';
            $params[] = $enfaseId;
        }

        if ( strlen($nucleoProfissionalId) > 0 )
        {
            $where .= ' AND R.nucleoProfissionalId = ?';
            $params[] = $nucleoProfissionalId;
        }

        if ( strlen($inicio) > 0 )
        {
            $where .= ' AND R.inicio = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $inicio;
        }

        if ( strlen($fimPrevisto) > 0 )
        {
            $where .= ' AND R.fimPrevisto = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $fimPrevisto;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
        }

        $sql .= ' ORDER BY residenteId';

        if ( strlen($where)  ==  0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $params));

        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }



    public function lookupResidenteDesligado(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.username.focus()");

        // Obtém os filtros:
        $residenteId = MIOLO::_REQUEST('residenteId');
        $residenteName = MIOLO::_REQUEST('residenteName') == '' ? '%' : MIOLO::_REQUEST('residenteName');
        $enfaseId = MIOLO::_REQUEST('enfaseId');
        $nucleoProfissionalId = MIOLO::_REQUEST('nucleoProfissionalId');
        $inicio = MIOLO::_REQUEST('inicio');
        $fimPrevisto = MIOLO::_REQUEST('fimPrevisto');

        $fields = array();
        // Campo código do residente
        $residenteIdField = new MTextField('residenteId', $residenteId, _M('Código do residente', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'));
        $residenteIdField->setJsHint(_M('Informe o residenteId', $module));
        $fields[] = $residenteIdField;

        // Campo nome do residente
        $residenteNameField = new MTextField('residenteName', $residenteName, _M('Nome do residente', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $residenteNameField->setJsHint(_M('Informe o nome do residenteId', $module));
        $fields[] = $residenteNameField;

        // Campo ênfase
        $enfaseIdField = new MSelection('enfaseId', $enfaseId, _M('Ênfase'), ResEnfase::listRecords());
        $enfaseIdField->setJsHint(_M('Informe a ênfase'));
        $fields[] = $enfaseIdField;

        // Campo núcleo profissional
        $nucleoProfissionalIdField = new MSelection('nucleoProfissionalId', $nucleoProfissionalId, _M('Núcleo profissional'), ResNucleoProfissional::listRecords());
        $nucleoProfissionalIdField->setJsHint(_M('Informe o núcleo profissional'));
        $fields[] = $nucleoProfissionalIdField;

        // Campo início
        $inicioField = new MCalendarField('inicio', $inicio, _M('Início', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_LOOKUP_SIZE'));
        $inicioField->setJsHint(_M('Informe o início', $module));
        $fields[] = $inicioField;

        // Campo fim previsto
        $fimPrevistoField = new MCalendarField('fimPrevisto', $fimPrevisto, _M('Fim previsto', $module), SAGU::getParameter('BASIC', 'FIELD_DATE_LOOKUP_SIZE'));
        $fimPrevistoField->setJsHint(_M('Informe o fimPrevisto', $module));
        $fields[] = $fimPrevistoField;

        foreach ( $fields as $field )
        {
            $lookup->addFilterField($field);
        }

        $columns = array();
        $columns[] = new MDataGridColumn('residenteId', _M('Código do residente', $module), 'right', true, NULL, true);
        $columns[] = new MDataGridColumn('residenteName', _M('Nome do residente', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('enfaseId', _M('Ênfase'), 'left', true, NULL, true, ResEnfase::listRecords());
        $columns[] = new MDataGridColumn('nucleoProfissionalId', _M('Núcleo profissional'), 'left', true, NULL, true, ResNucleoProfissional::listRecords());
        $columns[] = new MDataGridColumn('inicio', _M('Início', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('fimPrevisto', _M('Fim previsto', $module), 'left', true, NULL, true);

        $sql = "    
       SELECT R.residenteId,
	       PP.name AS residenteName,
	       R.enfaseId,
	       R.nucleoProfissionalId,
	       TO_CHAR(R.inicio, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS inicio,
	       TO_CHAR(R.fimPrevisto, '" . SAGU::getParameter('BASIC', 'MASK_DATE') . "') AS fimPrevisto
	  FROM res.residente R
	INNER JOIN ONLY basPhysicalPerson PP
	    ON R.personId = PP.personId 
	    LEFT JOIN res.ocorrenciadecontrato F
                    ON F.ocorrenciadecontratoid = res.ultimaOcorrenciaDeContratoId(R.residenteid)
             LEFT JOIN res.statusdaocorrenciadecontrato G
                    ON G.statusdaocorrenciadecontratoid = F.statusdaocorrenciadecontratoid
                  
                    ";

        $where = '';
        $params = array();
        if ( strlen($residenteId) > 0 )
        {
            $where .= ' AND R.residenteId = ?';
            $params[] = $residenteId;
        }

        if ( strlen($residenteName) > 0 )
        {
            $where .= ' AND PP.name ILIKE ?';
            $params[] = $residenteName . '%';
        }

        if ( strlen($enfaseId) > 0 )
        {
            $where .= ' AND R.enfaseId = ?';
            $params[] = $enfaseId;
        }

        if ( strlen($nucleoProfissionalId) > 0 )
        {
            $where .= ' AND R.nucleoProfissionalId = ?';
            $params[] = $nucleoProfissionalId;
        }

        $where .= ' AND G.statusdaocorrenciadecontratoid = ?';
        $params[] = ResStatusDaOcorrenciaDeContrato::STATUS_DESLIGADO;

        if ( strlen($inicio) > 0 )
        {
            $where .= ' AND R.inicio = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $inicio;
        }

        if ( strlen($fimPrevisto) > 0 )
        {
            $where .= ' AND R.fimPrevisto = TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $fimPrevisto;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 4);
        }

        $sql .= ' ORDER BY residenteId';

        if ( strlen($where)  ==  0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $params));

        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteCargahorariacomplementarresidency(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT res.cargahorariacomplementarid,
                       res.tipodecargahorariacomplementarid,
                       res.unidadetematicaid,
                       res.residenteid,
                       res.cargahoraria,
                       res.justificativa
                  FROM res.cargahorariacomplementar
                 WHERE res.cargahorariacomplementarid = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupCargahorariacomplementarresidency(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');
        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.userName.focus()");
        $fields[] = $cargaHorariaComplementarId = new MTextField('cargaHorariaComplementarId', '', _M('cargaHorariaComplementarId', $module), SAGU::getParameter('FIELD_ID_LOOKUP_SIZE'));
        $cargaHorariaComplementarId->setJsHint(_M('Informe o cargaHorariaComplementarId', $module));
        $opts = array('label'=>_M('tipoDeCargahorariacomplementarid', $module), 'item'=>'Tipodecargahorariacomplementar', 'module'=>'residency', 'related'=>array('tipoDeCargahorariacomplementaridDescription'), );
        $fields[] = new SLookupContainer('tipoDeCargahorariacomplementarid', $data->tipoDeCargahorariacomplementarid, $opts);
        $opts = array('label'=>_M('unidadeTematicaId', $module), 'item'=>'Unidadetematica', 'module'=>'residency', 'related'=>array('unidadeTematicaIdDescription'), );
        $fields[] = new SLookupContainer('unidadeTematicaId', $data->unidadeTematicaId, $opts);
        $opts = array('label'=>_M('residenteId', $module), 'item'=>'Residente', 'module'=>'residency', 'related'=>array('residenteIdDescription'), );
        $fields[] = new SLookupContainer('residenteId', $data->residenteId, $opts);
        $fields[] = $cargaHoraria = new MTextField('cargaHoraria', '', _M('cargaHoraria', $module), SAGU::getParameter('FIELD_MONETARY_SIZE'));
        $cargaHoraria->setJsHint(_M('Informe o cargaHoraria', $module));
        $fields[] = $justificativa = new MTextField('justificativa', '', _M('justificativa', $module), SAGU::getParameter('FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $justificativa->addAttribute('maxlength', '255');
        $justificativa->setJsHint(_M('Informe o justificativa', $module));

        foreach ( $fields  as  $field )
        {
            $lookup->addFilterField($field);
        }

        $columns[] = new MDataGridColumn('userName', _M('userName', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('dateTime', _M('dateTime', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('ipAddress', _M('ipAddress', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('cargaHorariaComplementarId', _M('cargaHorariaComplementarId', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('tipoDeCargahorariacomplementarid', _M('tipoDeCargahorariacomplementarid', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('unidadeTematicaId', _M('unidadeTematicaId', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('residenteId', _M('residenteId', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('cargaHoraria', _M('cargaHoraria', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('justificativa', _M('justificativa', $module), 'left', true, NULL, true);
        $sql = 'SELECT res.cargahorariacomplementarid,
                       res.tipodecargahorariacomplementarid,
                       res.unidadetematicaid,
                       res.residenteid,
                       res.cargahoraria,
                       res.justificativa
                  FROM res.cargahorariacomplementar';

        if ( strlen($cargaHorariaComplementarId)  >  0 )
        {
            $where.=' AND res.cargahorariacomplementarid = ?';
            $args[] = $cargaHorariaComplementarId;
        }

        if ( strlen($tipoDeCargahorariacomplementarid)  >  0 )
        {
            $where.=' AND res.tipodecargahorariacomplementarid = ?';
            $args[] = $tipoDeCargahorariacomplementarid;
        }

        if ( strlen($unidadeTematicaId)  >  0 )
        {
            $where.=' AND res.unidadetematicaid = ?';
            $args[] = $unidadeTematicaId;
        }

        if ( strlen($residenteId)  >  0 )
        {
            $where.=' AND res.residenteid = ?';
            $args[] = $residenteId;
        }

        if ( strlen($cargaHoraria)  >  0 )
        {
            $where.=' AND res.cargahoraria = ?';
            $args[] = $cargaHoraria;
        }

        if ( strlen($justificativa)  >  0 )
        {
            $where.=' AND UNACCENT(res.justificativa) ILIKE UNACCENT(?) ';
            $args[] = $justificativa.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=$where;
        }

        $sql.=' ORDER BY res.cargahorariacomplementarid';

        if ( strlen($where)  ==  0 )
        {
            $sql.=' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function autoCompleteOfertaDoResidenteresidency(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT res.ofertadoresidenteid,
                       res.residenteid,
                       res.ofertadeunidadetematicaid
                  FROM res.ofertadoresidente
                 WHERE res.ofertadoresidenteid = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupOfertaDoResidenteresidency(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');
        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.userName.focus()");
        $fields[] = $ofertaDoResidenteId = new MTextField('ofertaDoResidenteId', '', _M('ofertaDoResidenteId', $module), SAGU::getParameter('FIELD_ID_LOOKUP_SIZE'));
        $ofertaDoResidenteId->setJsHint(_M('Informe o ofertaDoResidenteId', $module));
        $opts = array('label'=>_M('residenteId', $module), 'item'=>'Residente', 'module'=>'residency', 'related'=>array('residenteIdDescription'), );
        $fields[] = new SLookupContainer('residenteId', $data->residenteId, $opts);
        $opts = array('label'=>_M('ofertaDeUnidadeTematicaId', $module), 'item'=>'Ofertadeunidadetematica', 'module'=>'residency', 'related'=>array('ofertaDeUnidadeTematicaIdDescription'), );
        $fields[] = new SLookupContainer('ofertaDeUnidadeTematicaId', $data->ofertaDeUnidadeTematicaId, $opts);

        foreach ( $fields  as  $field )
        {
            $lookup->addFilterField($field);
        }

        $columns[] = new MDataGridColumn('userName', _M('userName', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('dateTime', _M('dateTime', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('ipAddress', _M('ipAddress', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('ofertaDoResidenteId', _M('ofertaDoResidenteId', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('residenteId', _M('residenteId', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('ofertaDeUnidadeTematicaId', _M('ofertaDeUnidadeTematicaId', $module), 'left', true, NULL, true);
        $sql = 'SELECT res.ofertadoresidenteid,
                       res.residenteid,
                       res.ofertadeunidadetematicaid
                  FROM res.ofertadoresidente';

        if ( strlen($ofertaDoResidenteId)  >  0 )
        {
            $where.=' AND res.ofertadoresidenteid = ?';
            $args[] = $ofertaDoResidenteId;
        }

        if ( strlen($residenteId)  >  0 )
        {
            $where.=' AND res.residenteid = ?';
            $args[] = $residenteId;
        }

        if ( strlen($ofertaDeUnidadeTematicaId)  >  0 )
        {
            $where.=' AND res.ofertadeunidadetematicaid = ?';
            $args[] = $ofertaDeUnidadeTematicaId;
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=$where;
        }

        $sql.=' ORDER BY res.ofertadoresidenteid';

        if ( strlen($where)  ==  0 )
        {
            $sql.=' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }


    public function autoCompleteTrabalhoDeConclusaoresidency(&$context)
    {
        $module = SAGU::getFileModule(__FILE__);
        $sql = 'SELECT res.trabalhodeconclusaoid,
                       res.orientadorid,
                       res.residenteid,
                       res.titulo,
                       res.tema
                  FROM res.trabalhodeconclusao
                 WHERE res.trabalhodeconclusaoid = ?';
        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupTrabalhoDeConclusaoresidency(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');
        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.userName.focus()");
        $fields[] = $trabalhoDeConclusaoId = new MTextField('trabalhoDeConclusaoId', '', _M('trabalhoDeConclusaoId', $module), SAGU::getParameter('FIELD_ID_LOOKUP_SIZE'));
        $trabalhoDeConclusaoId->setJsHint(_M('Informe o trabalhoDeConclusaoId', $module));
        $opts = array('label'=>_M('orientadorId', $module), 'item'=>'Physicalperson', 'module'=>'basic', 'related'=>array('orientadorIdDescription'), );
        $fields[] = new SLookupContainer('orientadorId', $data->orientadorId, $opts);
        $opts = array('label'=>_M('residenteId', $module), 'item'=>'Residente', 'module'=>'residency', 'related'=>array('residenteIdDescription'), );
        $fields[] = new SLookupContainer('residenteId', $data->residenteId, $opts);
        $fields[] = $titulo = new MTextField('titulo', '', _M('titulo', $module), SAGU::getParameter('FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $titulo->addAttribute('maxlength', '255');
        $titulo->setJsHint(_M('Informe o titulo', $module));
        $fields[] = $tema = new MMultilineField('tema', '', _M('tema', $module), SAGU::getParameter('FIELD_DESCRIPTION_LOOKUP_SIZE'), SAGU::getParameter('FIELD_MULTILINE_NUM_ROWS'), SAGU::getParameter('FIELD_MULTILINE_NUM_COLS'));
        $tema->setJsHint(_M('Informe o tema', $module));

        foreach ( $fields  as  $field )
        {
            $lookup->addFilterField($field);
        }

        $columns[] = new MDataGridColumn('userName', _M('userName', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('dateTime', _M('dateTime', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('ipAddress', _M('ipAddress', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('trabalhoDeConclusaoId', _M('trabalhoDeConclusaoId', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('orientadorId', _M('orientadorId', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('residenteId', _M('residenteId', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('titulo', _M('titulo', $module), 'left', true, NULL, true);
        $columns[] = new MDataGridColumn('tema', _M('tema', $module), 'left', true, NULL, true);
        $sql = 'SELECT res.trabalhodeconclusaoid,
                       res.orientadorid,
                       res.residenteid,
                       res.titulo,
                       res.tema
                  FROM res.trabalhodeconclusao';

        if ( strlen($trabalhoDeConclusaoId)  >  0 )
        {
            $where.=' AND res.trabalhodeconclusaoid = ?';
            $args[] = $trabalhoDeConclusaoId;
        }

        if ( strlen($orientadorId)  >  0 )
        {
            $where.=' AND res.orientadorid = ?';
            $args[] = $orientadorId;
        }

        if ( strlen($residenteId)  >  0 )
        {
            $where.=' AND res.residenteid = ?';
            $args[] = $residenteId;
        }

        if ( strlen($titulo)  >  0 )
        {
            $where.=' AND UNACCENT(res.titulo) ILIKE UNACCENT(?) ';
            $args[] = $titulo.'%';
        }

        if ( strlen($tema)  >  0 )
        {
            $where.=' AND UNACCENT(res.tema) ILIKE UNACCENT(?) ';
            $args[] = $tema.'%';
        }

        if ( strlen($where)  >  0 )
        {
            $sql.=$where;
        }

        $sql.=' ORDER BY res.trabalhodeconclusaoid';

        if ( strlen($where)  ==  0 )
        {
            $sql.=' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    /**
     * Auto complete for preceptor
     *
     * @param $context (object): MIOLO Context object
     * @return (object): MIOLO Gives the action evaluating the code by setContext call
     */
    public function autoCompletePreceptor(&$context)
    {
        $sql = 'SELECT A.name AS personName,
                       H.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       A.cityId,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       D.externalCourseIdHs,
                       E.name,
                       D.institutionIdHs,
                       F.name,
                       D.cityIdHs,
                       G.name,
                       D.yearHs,
                       D.isInsured,
                       D.passive,
                       I.content AS CPF,
                       A.personId
             FROM ONLY basPhysicalPerson A
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basPhysicalPersonStudent D
                    ON ( D.personId = A.personId )
             LEFT JOIN acdExternalCourse E
                    ON (E.externalCourseId = D.externalCourseIdHs)
             LEFT JOIN basLegalPerson F
                    ON (F.personId = D.institutionIdHs)
             LEFT JOIN basCity G
                    ON (G.cityId = D.cityIdHs)
             LEFT JOIN basLocationType H
                    ON (A.locationTypeId = H.locationTypeId)
             LEFT JOIN basDocument I
                    ON (I.personId = A.personId
                        AND I.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') . ') 
                 WHERE EXISTS(SELECT 1
                                FROM res.ofertaDeUnidadeTematica
                               WHERE A.personId = ?)';

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    /**
     * Lookup for physical person
     *
     * @param $lookup: Lookup Object used by MIOLO
     * @return MIOLO Lookup function as actions evaluated by MIOLO
     */
    public function lookupPreceptor(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->conf->loadConf($module);

        $personId = $lookup->getFilterValue('personId');
        $personName = $lookup->getFilterValue('personName');
        $personLastName = $lookup->getFilterValue('personLastName');
        $instituicaoExecutoraId = $lookup->getFilterValue('instituicaoExecutoraId_');

        $lookup->addFilterField(new MTextField('personId', $personId, _M('Código', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personName', $personName, _M('Nome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('personLastName', $personLastName, _M('Sobrenome', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        $instExecLabel = new MLabel(_M("Instituição executora:", $module));
        $instExec = new MLookupTextField('instituicaoExecutoraId_', null, null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('instituicaoExecutoraIdDescription'), 'basic', 'legalPerson');
        $instExec->setJsHint(_M("Informe o código da instituição executora.", $module));
        $instExecDesc = new MTextField('instituicaoExecutoraIdDescription', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $instExec = new MHContainer('hctInstituicao', array($instExecLabel, $instExec, $instExecDesc));

        $lookup->addFilterField($instExec);

        global $page;
        $page->onLoad('document.' . $page->name . '.personName.focus()');
        $page->onLoad("document.getElementById('instituicaoExecutoraId_').value = opener.document.getElementById('instituicaoExecutoraId').value;");

        if (empty($personId) && empty($personName) && empty($instituicaoExecutoraId)) {
            $page->onLoad("document.forms[0].submit();");
        }

        $columns[] = new MDataGridColumn('preceptorid', _M('Código', $module), 'right', true, null, true);
        $columns[] = new MDataGridColumn('personName', _M('Nome', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('nucleoProfissional', _M('Núcleo profissional', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('enfase', _M('Ênfases', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('location', _M('Logradouro', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('complement', _M('Complemento', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('neighborhood', _M('Bairro', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cityName', _M('Nome da cidade', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('stateId', _M('Estado', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('countryId', _M('Código do país', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('countryName', _M('País', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('externalCourseIdHs', _M('Código do curso de ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('externalCourseNameHs', _M('Nome do curso de ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('institutionIdHs', _M('Código da instituição do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('institutionNameHs', _M('Nome da instituição do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cityIdHs', _M('Código da cidade do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cityNameHs', _M('Nome da cidade do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('yearHs', _M('Ano do ensino médio', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('isInsured', _M('Está segurado', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('passive', _M('Passivo', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('cpf', _M('CPF', $module), 'left', true, null, true);

        $sql = 'SELECT DISTINCT PP.preceptorid,
                       A.name AS personName,
                       (SELECT NP.descricao FROM res.nucleoprofissional NP WHERE NP.nucleoprofissionalid = PP.nucleoprofissionalid) AS nucleoProfissional,
                       (SELECT string_agg(BB.descricao, \', \') FROM res.preceptoriaenfases AA INNER JOIN res.enfase BB ON AA.enfaseid = BB.enfaseid WHERE AA.preceptorid = PP.preceptorid) AS enfase,
                       H.name || \' \' || A.location AS location,
                       A.complement,
                       A.neighborhood,
                       B.name AS cityName,
                       B.stateId,
                       B.countryId,
                       C.name AS countryName,
                       D.externalCourseIdHs,
                       E.name,
                       D.institutionIdHs,
                       F.name,
                       D.cityIdHs,
                       G.name,
                       D.yearHs,
                       D.isInsured,
                       D.passive,
                       I.content AS CPF
             FROM basPhysicalPerson A
             INNER JOIN res.preceptoria PP ON A.personid = PP.personid
             LEFT JOIN basCity B
                    ON ( B.cityId = A.cityId )
             LEFT JOIN basCountry C
                    ON ( C.countryId = B.countryId )
             LEFT JOIN basPhysicalPersonStudent D
                    ON ( D.personId = A.personId )
             LEFT JOIN acdExternalCourse E
                    ON (E.externalCourseId = D.externalCourseIdHs)
             LEFT JOIN basLegalPerson F
                    ON (F.personId = D.institutionIdHs)
             LEFT JOIN basCity G
                    ON (G.cityId = D.cityIdHs)
             LEFT JOIN basLocationType H
                    ON (A.locationTypeId = H.locationTypeId)
             LEFT JOIN basDocument I
                    ON (I.personId = A.personId
                        AND I.documentTypeId = ' . SAGU::getParameter('BASIC', 'DEFAULT_DOCUMENT_TYPE_ID_CPF') . ')';

        if ( strlen($personId) > 0 )
        {
            $where .= ' AND A.personId = ?';
            $args[] = $personId;
        }

        if ( strlen($personName) > 0 )
        {
            $where .= ' AND UNACCENT(A.name) ILIKE UNACCENT(?)';
            $args[] = $personName . '%';
        }

        if ( strlen($instituicaoExecutoraId) > 0 )
        {
            $where .= ' AND PP.instituicaoExecutora = ?';
            $args[] = $instituicaoExecutoraId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql,$args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Localizar preceptor',$module), 15, 0);
        $lookup->grid->setIsScrollable();
        //$lookup->grid->header[] = '<b><center><a href="' . $MIOLO->getActionURL('basic', 'preceptorLookup', '', $_GET) . '">' . _M('Inserir novo', 'basic') . '</a></center></b><br>';
    }

    public function autoCompleteTurma(&$context)
    {
        $sql = " SELECT A.descricao as nomeTurma
                   FROM res.turma A
                  WHERE A.codigoTurma = ? ";

        $context->setContext(SDatabase::getDefaultDb(), $sql);
    }

    public function lookupTurma(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_request('lmodule');

        $MIOLO->conf->loadConf($module);

        $codigoTurma = $lookup->getFilterValue('codigoTurma');
        $nomeTurma = $lookup->getFilterValue('nomeTurma');
        // $nucleoProfissional = $lookup->getFilterValue('nucleoProfissional');
        // $enfase = $lookup->getFilterValue('enfase');
        $componente = $lookup->getFilterValue('componente');
        $quantidaDePeriodo = $lookup->getFilterValue('quantidaDePeriodo');
        $dataInicio = $lookup->getFilterValue('datainicio');
        $dataFim = $lookup->getFilterValue('datafim');
        $vagas = $lookup->getFilterValue('vagas');

        $lookup->addFilterField(new MTextField('codigoTurma', $codigoTurma, _M('Código da turma', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('nomeTurma', $nomeTurma, _M('Nome da turma', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        // $lookup->addFilterField(new MSelection('nucleoProfissional', $nucleoProfissional, _M('Núcleo profissional'), ResNucleoProfissional::listRecords()));
        // $lookup->addFilterField(new MSelection('enfase', $enfase, _M('Ênfase'), ResEnfase::listRecords()));
        $lookup->addFilterField(new MSelection('componente', $componente, _M('Componente'), ResComponente::listRecords()));
        $lookup->addFilterField(new MTextField('quantidaDePeriodo', $quantidaDePeriodo, _M('Período de duração', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('datainicio', $dataInicio, _M('Data inicial', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('datafim', $dataFim, _M('Data final', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));
        $lookup->addFilterField(new MTextField('vagas', $vagas, _M('Vagas', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE')));

        global $page;
        $page->onLoad('document.' . $page->name . '.codigoTurma.focus()');

        $columns[] = new MDataGridColumn('codigoTurma', _M('Código da turma', $module), 'right', true, null, true);
        $columns[] = new MDataGridColumn('nomeTurma', _M('Nome da turma', $module), 'left', true, null, true);
        // $columns[] = new MDataGridColumn('nucleoProfissional', _M('Núcleo profissional'), 'left', true, null, true);
        // $columns[] = new MDataGridColumn('enfase', _M('Ênfase'), 'left', true, null, false);
        $columns[] = new MDataGridColumn('componente', _M('Componente'), 'left', true, null, true);
        $columns[] = new MDataGridColumn('quantidaDePeriodo', _M('Perído de duração', $module), 'left', true, null, false);
        $columns[] = new MDataGridColumn('datainicio', _M('Data inicial', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('datafim', _M('Data final', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('vagas', _M('Vagas', $module), 'left', true, null, true);

        $sql = " SELECT A.codigoTurma,
                        A.descricao as nomeTurma,
                        B.descricao as componente,
                        A.quantidaDePeriodo,
                        datetouser(A.dataInicio) as datainicio,
                        datetouser(A.dataFim) as datafim,
                        vagas
                   FROM res.turma A
                   LEFT JOIN res.componente B
                        ON (A.componenteid = B.componenteid)";

        if ( strlen($codigoTurma) > 0 )
        {
            $where .= ' AND A.codigoTurma ILIKE ? ';
            $args[] = $codigoTurma;
        }

        if ( strlen($nomeTurma) > 0 )
        {
            $where .= ' AND A.descricao ILIKE ? ';
            $args[] = '%' . $nomeTurma . '%';
        }

        if ( strlen($componente) > 0 )
        {
            $where .= ' AND B.componenteid = ? ';
            $args[] = $componente;
        }

        if ( strlen($quantidaDePeriodo) > 0 )
        {
            $where .= ' AND A.quantidaDePeriodo = ? ';
            $args[] = $quantidaDePeriodo;
        }

        if ( strlen($dataInicio) > 0 )
        {
            $where .= ' AND A.datainicio = datetodb(?) ';
            $args[] = $dataInicio;
        }

        if ( strlen($dataFim) > 0 )
        {
            $where .= ' AND A.datainicio = datetodb(?) ';
            $args[] = $dataFim;
        }

        if ( strlen($vagas) > 0 )
        {
            $where .= ' AND A.vagas = ? ';
            $args[] = $vagas;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $sql .= ' ORDER BY A.codigoTurma DESC ';

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $args));
        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }

    public function lookupOfertaDeUnidadeTematicaCarga(&$lookup)
    {
        global $MIOLO;
        $module = MIOLO::_REQUEST('lmodule');
        $residenteId = MIOLO::_REQUEST('residenteId');
        $ofertaDeunidadeTematicaId = MIOLO::_REQUEST('ofertaDeunidadeTematicaId');

        $MIOLO->uses('classes/sagu.class', 'basic');
        $MIOLO->conf->loadConf($module);
        $MIOLO->page->onLoad("document.{$MIOLO->page->name}.descricao.focus()");

        $fields[] = $residenteField = new MTextField('residenteId', $residenteId);
        $residenteField->addAttribute('style', 'display:none');

        // Campo código da unidade temática
        $fields[] = $ofertaDeunidadeTematicaId = new MTextField('ofertaDeunidadeTematicaId', '', _M('Código da oferta', $module), SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'));
        $ofertaDeunidadeTematicaId->setJsHint(_M('Informe o código da oferta', $module));

        // Campo descrição
        $fields[] = $descricao = new MTextField('descricao', '', _M('Descrição', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_LOOKUP_SIZE'));
        $descricao->addAttribute('maxlength', '255');
        $descricao->setJsHint(_M('Informe a descrição', $module));

        // Campo carga horária
        $fields[] = $cargaHoraria = new MTextField('cargaHoraria', '', _M('Carga horária', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
        $cargaHoraria->setJsHint(_M('Informe a carga horária', $module));


        foreach ( $fields as $field )
        {
            $lookup->addFilterField($field);
            extract(array($field->name => $lookup->getFilterValue($field->name)));
        }

        $columns = array();
        $columns[] = new MDataGridColumn('ofertadeunidadetematicaid', _M('Código', $module), 'right', true, null, true);
        $columns[] = new MDataGridColumn('periodo', _M('Período', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('modulo', _M('Módulo'), 'left', true, null, true);
        $columns[] = new MDataGridColumn('nome', _M('Descrição', $module), 'left', true, null, true);
        $columns[] = new MDataGridColumn('cargaHoraria', _M('Carga horária', $module), 'right', true, null, true);
        $columns[] = new MDataGridColumn('nucleos', _M('Núcleos'), 'left', true, null, true);
        $columns[] = new MDataGridColumn('enfases', _M('Ênfases'), 'left', true, null, true);

        $sql = "SELECT B.ofertadeunidadetematicaid,
                   B.nome,
                   (SELECT descricao FROM res.periodoUnidadeTematica WHERE periodoId = A.periodo) AS periodo,
                   B.cargaHoraria,
                   ARRAY_TO_STRING(ARRAY(
                       SELECT descricao
                         FROM res.nucleoDaUnidadeTematica NDUT
                   INNER JOIN res.nucleoProfissional NP
                           ON NP.nucleoprofissionalid = NDUT.nucleoprofissionalid
                        WHERE NDUT.unidadetematicaid = A.unidadeTematicaId), ', ') AS nucleos,

                   ARRAY_TO_STRING(ARRAY(
                       SELECT descricao
                         FROM res.enfaseDaUnidadeTematica EDUT
                   INNER JOIN res.enfase E
                           ON E.enfaseId = EDUT.enfaseId
                        WHERE EDUT.unidadeTematicaId = A.unidadeTematicaId), ', ') AS enfases";

        //Obtem a carga horaria cursada pelo residente (caso seja passado como filtro)

        $sql .= ", res.obtemcargahorariadaofertasdeunidadetematica('{$residenteId}', B.ofertaDeunidadeTematicaId, TRUE) AS cargaHorariaCursada";
        $sql .= ", ( B.cargaHoraria - res.obtemcargahorariadaofertasdeunidadetematica('{$residenteId}', B.ofertaDeunidadeTematicaId, TRUE)) AS cargaHorariaPendente,";


        $sql .= " (SELECT nome FROM res.Modulo where moduloId = A.moduloId) AS modulo";

        $sql .= " FROM res.unidadeTematica A INNER JOIN res.ofertaDeunidadeTematica B  
                    ON A.unidadetematicaid = B.unidadetematicaid 
                  INNER JOIN res.modulo C 
                    ON A.moduloid = C.moduloid
                  INNER JOIN res.ofertadoresidente D 
                    ON D.ofertadeunidadetematicaid = B.ofertadeunidadetematicaid";

        $where = '';
        $params = array();
        if ( strlen($ofertaDeunidadeTematicaId) > 0 )
        {
            $where .= ' AND B.ofertaDeunidadeTematicaId = ?';
            $params[] = $ofertaDeunidadeTematicaId;
        }

        $descricao = $descricao == '' ? '%' : $descricao;
        if ( strlen($descricao) > 0 )
        {
            $where .= ' AND UNACCENT(descricao) ILIKE UNACCENT(?) ';
            $params[] = $descricao . '%';
        }

        if ( strlen($cargaHoraria) > 0 )
        {
            $where .= ' AND cargaHoraria = ?';
            $params[] = $cargaHoraria;
        }

        $where .= ' AND C.tipo = ? ';
        $params[] = 'T';


        $where .= ' AND D.residenteid = ? ';
        $params[] = $residenteId;


        if ( strlen($where) > 0 )
        {
            $sql.= ' WHERE ' . substr($where, 4);
        }

        $sql .= ' ORDER BY A.unidadeTematicaId';

        if ( strlen($where)  ==  0 )
        {
            $sql .= ' LIMIT 0';
        }

        $sqlObject = new sql();
        $sqlObject->createFrom(SAGU::prepare($sql, $params));

        $lookup->setFilterColumns(SAGU::getParameter('BASIC', 'LOOKUP_FILTER_COLUMNS'));
        $lookup->setLookupGrid(SDatabase::getDefaultDb(), $sqlObject, $columns, _M('Pesquisar', $module), 15, 0);
        $lookup->grid->setIsScrollable();
    }
}
?>