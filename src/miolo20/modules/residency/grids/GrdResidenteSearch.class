<?php
/**
 * <--- Copyright 2005-2011 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * @author Moises Heberle [moises@solis.coop.br]
 *
 * \b Maintainers \n
 * Arthur Lehdermann [arthur@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Jonas G. Diel [jonas_diel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * Luís Felipe Wermann [luis_felipe@solis.com.br]
 *
 * @since
 * Class created on 17/07/2011
 */
class GrdResidenteSearch extends SGrid
{
    private $busPerson;

    private $posPhotoId;
    private $posPersonId;
    private $posResidenteId;
    private $posTrancadoOuCancelado;
    private $notaId;

    private $posActionCertificadoConclusao;
    private $posActionMatricular;
    private $posFimPrevisto;

    // Se deve ou nao exibir foto, de acordo com checkbox marcado na pesquisa
    private $exibirFoto;

    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $this->busPerson = new BusinessBasicBusPerson();
        $this->exibirFoto = MIOLO::_REQUEST('exibirFotoS') == DB_TRUE;

        $columns = array();
        $this->posPhotoId = count($columns);
        $columns[] = new MGridColumn(_M('Foto', $module), 'center', true, NULL, $this->exibirFoto, NULL, true);
        $this->posResidenteId = count($columns);
        $columns[] = new MGridColumn(_M('Código', $module), 'right', true, NULL, false, NULL, true);
        $this->posPersonId = count($columns);

        $columns[] = new MGridColumn(_M('Pessoa', $module), 'right', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Nome', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Instituição executora', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Início do período letivo', $module), 'center', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Fim do período letivo', $module), 'center', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Núcleo'), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Ênfase'), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('Status', $module), 'left', true, NULL, false, NULL, true);

        $this->posTrancadoOuCancelado = count($columns);
        $columns[] = new MGridColumn(_M('Trancado/cancelado', $module), 'left', true, NULL, false, NULL, true);

        $columns[] = new MGridColumn(_M('Turma', $module), 'left', true, NULL, true, NULL, true);
        $columns[] = new MGridColumn(_M('resturma.modeloavaliacao', $module), 'left', true, NULL, false, NULL, true);
        $this->posPersonId = count($columns);

        $primaryKeys = array('residenteId' => '%1%', );
        parent::__construct($filters, $columns, __CLASS__, $primaryKeys);

        $args = array('residenteId' => '%1%');
        $this->clearActions();

        //Desabilita acoes editar/excluir quando vier do portal
        if ( SAGU::userIsFromServices() )
        {
            $this->clearActions();
        }
        else
        {
            if ( SAGU::userHasAccess('FrmResidente', A_UPDATE) || SAGU::userHasAccess('FrmResidente', A_DELETE) )
            {
                $href = SAGU::getActionURL($module, 'main:process:residente', array('residenteId' => '%1%', 'function' => 'update'));
                $this->addActionIcon(_M('Editar', $module), 'button_edit.png', $href);

                $href = SAGU::getActionURL($module, 'main:process:residente', array('residenteId' => '%1%', 'event' => 'tbBtnDelete_click', 'function' => 'delete'));
                $this->addActionIcon(_M('Excluir', $module), 'button_drop.png', $href);
            }

            if ( SAGU::userHasAccess('FrmOcorrenciaDeContrato', A_ACCESS) )
            {
                $href = SAGU::getActionURL($module, 'main:register:ocorrenciaDeContrato', $args);
                $this->addActionIcon(_M('Ocorrência de contrato', $module), 'contrato-16x16.png', $href);
            }

            if ( SAGU::userHasAccess('FrmTrabalhoDeConclusao', A_ACCESS) )
            {
                $href = SAGU::getActionURL($module, 'main:register:trabalhoDeConclusao', $args);
                $this->addActionIcon(_M('Trabalho de conclusão de residência', $module), 'academic-16x16.png', $href);
            }
        }

        if ( SAGU::userHasAccess('FrmCargaHorariaComplementar', A_ACCESS) )
        {
            $href = SAGU::getActionURL($module, 'main:register:cargaHorariaComplementar', $args);
            $this->addActionIcon(_M('Carga horária complementar', $module), 'cargaHoraria-16x16.png', $href);
        }

        if ( SAGU::userHasAccess('FrmNotasDoResidente', A_ACCESS) )
        {
                $this->notaId = count($this->actions);
                $hrefResidency = SAGU::getActionURL($module, 'main:register:notasDoResidente', $args);
                $hrefServices = SAGU::getActionURL('services', 'main:residency:notasDoResidente', $args);
                $href = SAGU::userIsFromServices() ? $hrefServices : $hrefResidency;
                $this->addActionIcon(_M('Notas', $module), 'notas-16x16.png', $href);


                $hrefResidency = SAGU::getActionURL($module, 'main:document:relatorioNotasIndividualDoResidente', $args);
                $this->addActionIcon(_M('Relatório de notas', $module), 'viewEvaluations.png', $hrefResidency);

            $hrefResidency = SAGU::getActionURL($module, 'main:document:relatorioFrequenciaIndividualDoResidente', $args);
            $this->addActionIcon(_M('Relatório individual de frequência', $module), 'trainingHistory.png', $hrefResidency);
        }

        // Penalidades
        if ( SAGU::userHasAccess('FrmPenalidadesResidente', A_ACCESS))
        {
            $href = SAGU::getActionURL($module, 'main:register:penalidadesResidente', $args);
            $this->addActionIcon(_M('Penalidades do residente', $module), 'penalidade-16x16.png', $href);
        }

        if (!SAGU::userIsFromServices())
        {
            // Matricular
            if ( SAGU::userHasAccess('FrmOfertaDoResidente', A_ACCESS) )
            {
                $this->posActionMatricular = count($this->actions);
                $href = SAGU::getActionURL($module, 'main:register:ofertaDoResidente', $args);
                $this->addActionIcon(_M('Matricular', $module), 'matricular-16x16.png', $href);
            }
        }

        $this->setRowMethod($this, 'myRowMethod');
    }

    public function myRowMethod($i, $row, $actions, $columns)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        $residenteId = $this->data[$i][$this->posResidenteId];
        $fimPrevisto = $this->data[$i][5];
        $trancadoOuCancelado = $this->data[$i][$this->posTrancadoOuCancelado] == DB_TRUE;
        $hoje = SAGU::getDateNow();

        // Exibe foto
        if ( $this->exibirFoto )
        {
            $fileId = $this->data[$i][$this->posPhotoId];
            $photoContent = '-';
            if ( strlen($fileId) > 0 )
            {
                $personPhoto = new SPersonPhotoDisplayField(array('baseGroup' => false, 'fileId' => $fileId));
                $photoContent = $personPhoto->generate();
            }

            $columns[$this->posPhotoId]->control[$i]->setValue( $photoContent );
        }

        // Ativa a acao de Certificado de conclusao apenas de ultimo status for como concluido
        if ( strlen($this->posActionCertificadoConclusao) > 0 )
        {
            $isConcluido = ResResidente::ultimoEstadoResidente($residenteId) == ResStatusDaOcorrenciaDeContrato::STATUS_CONCLUIDO;
            $actions[$this->posActionCertificadoConclusao]->setEnabled( $isConcluido );
            $actions[$this->posActionCertificadoConclusao]->value = $isConcluido ? 'certificado-16x16.png':'certificado-disabled-16x16.png';
            $actions[$this->posActionCertificadoConclusao]->alt = $isConcluido ? _M('Certificado de conclusão', $module) : _M('Certificado de conclusão (não pode ser emitido pois o residente não concluiu o programa)', $module);
        }

        // Desabilita acao de matricular caso residente esteja trancado ou cancelado
        if ( strlen($this->posActionMatricular) > 0 )
        {
            $actions[$this->posActionMatricular]->setEnabled( !$trancadoOuCancelado );
            $actions[$this->posActionMatricular]->alt = $trancadoOuCancelado ? _M('Matrícula bloqueada devido residente estar trancado ou cancelado.', $module) : _M('Matricular', $module);
            $actions[$this->posActionMatricular]->value = $trancadoOuCancelado ? 'matricular-disabled-16x16.png' : 'matricular-16x16.png';
        }

        $urlFechar = $MIOLO->GetActionURL($module, 'main:register:ofertaDeUnidadeTematicaNotas', '', array('residenteId' => '%1%'));
        $actions[$this->notaId]->href = $urlFechar;

        //Altera acao desbloqueio de digitação de notas
        $qtdDias = SAGU::dateDiff($fimPrevisto, $hoje);
        $desbloquear = false;
        if ( $qtdDias > 1 )
        {
            $desbloquear = true;
        }

        // Desabilita Habilita acao desbloquear digitacao de notas
        if ( strlen($this->posFimPrevisto) > 0 )
        {
            $actions[$this->posFimPrevisto]->setEnabled( !$desbloquear );
            $actions[$this->posFimPrevisto]->alt = $desbloquear ? _M('Não é possivel desbloquear digitação de notas (verifique a data de fim previsto).', $module) : _M('Desbloquear digitação de notas.', $module);
            $actions[$this->posFimPrevisto]->value = 'block-16x16.png';
        }
    }
}
?>