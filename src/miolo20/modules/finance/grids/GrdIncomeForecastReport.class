<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file generate the incomeForecast information on the screen
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * @maintainer: William Prigol Lopes [william@solis.coop.br]
 * @last modification: Put colors on lines, adjust the positions, add actions, review search query and correct some bugs
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 15/09/2005
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdIncomeForecastReport extends MGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO   = MIOLO::getInstance();
        $home    = 'main:report:incomeForecast';
        $module  = MIOLO::_request('module');
        $columns = array(
                         new MGridColumn('', 'left', false, 0, false),
                         new MGridColumn( '&nbsp;',                       'center', true, null, true, null, false ),
                         new MGridColumn( '&nbsp;',                       'center', true, null, true, null, false ),
                         new MGridColumn( _M('Operação',       $module), 'left',   true, null, true, null, false ),
                         new MGridColumn( _M('Tipo de operação',        $module), 'center', true, null, true, null, false ),
                         new MGridColumn( '&nbsp;',                       'center', true, null, true, null, false ),
                         new MGridColumn('', 'left', false, 0, false),   
                         new MGridColumn( _M('Data de geração', $module), 'center', true, null, true, null, false ),
                         new MGridColumn( _M('Data de vencimento',   $module), 'center', true, null, true, null, false ),
                         new MGridColumn( _M('Valor',           $module), 'right',  true, null, true, null, false ),
                         new MGridColumn('&nbsp;',                        'center', true, null, true, null, false ),
                         new MGridColumn('&nbsp;',                        'center', true, null, true, null, false )
                        );
                        
        $opts_ = array('event'=>'btnSearch_click',
                       'learningPeriodIdS'=>$filters->learningPeriodId,
                       'contractIdS'=>$filters->contractId,
                       'periodIdS'=>$filters->periodId);
        $goto = $MIOLO->getActionURL($module, $home, null, $opts_);                       
                       
        $opts = array('function'=>'update',
                      'event'=>'update_click',
                      'incomeForecastId'=>'%0%',
                      'contractId'=>$filters->contractId,
                      'learningPeriodId'=>$filters->learningPeriodId,
                      'goto'=>urlencode($goto));
        $hrefEdit = $MIOLO->getActionURL( $module, 'main:register:incomeForecast', null, $opts );

        $opts = array('contractId'=>$filters->contractId,
                      'personId'=>$filters->personId,
                      'maturityDate'=>'%8%',
                      'event'=>'submit_button_click',
                      'goto'=>urlencode($goto));
        $hrefGenerate = $MIOLO->getActionURL($module, 'main:process:receivableInvoiceGenerationPupil', null, $opts );

        $opts = array('function'=>'delete',
                      'event'=>'tbBtnDelete_click',
                      'incomeForecastId'=>'%0%',
                      'learningPeriodId'=>$filters->learningPeriodId,
                      'goto'=>urlencode($goto));
        $hrefDelete = $MIOLO->getActionURL($module, 'main:register:incomeForecast', null, $opts);
        
        $url = $MIOLO->getActionURL($module, "$home:search");
        parent::__construct(null, $columns, $url, 0, 0, 'GrdIncomeForecastReport');

        $this->setRowMethod($this, 'myRowMethod');
        $this->setIsScrollable();

        $this->addActionUpdate($hrefEdit);
        $this->addActionIcon(_M('Gerar título', $module), 'close', $hrefGenerate);
        $this->addActionDelete($hrefDelete);

        $this->eventHandler();
    }
    
    /**
     * Execute this method for each row of the grid, before it gets generated by MIOLO.
     * 
     * @param $i Indicates the number of the line being generated.
     * @param $row Array with all data contained within the current line.
     * @param $actions Array of grid actions.
     * @param $columns Contains all grid controls, as they get rendered after a call to MGridColumn->generate(). 
     */
    public function myRowMethod( $i, $row, $actions, $columns )
    {   
    	$MIOLO = MIOLO::getInstance();
    	$module = MIOLO::getCurrentModule();

        // Converte o texto relativo ao curso em imagem com hint
        $str = $row[1];
        $path = $MIOLO->getActionURL($module, 'html:images:info.png');
        $columns[1]->control[$i] = new MImage('imgCourse' . $i, $str, $path);
        
        // Converte os comentários da previsão em imagem com hint
        $str = strlen($row[2]) > 0 ? $row[2] : _M('Sem comentários', $module);
        $path = $MIOLO->getActionURL($module, 'html:images:obs.png');
        $columns[2]->control[$i] = new MImage('imgComments' . $i, $str, $path);

        // Converte o texto relativo a unidade em imagem com hint
        $str = ($row[5] == SAGU::getParameter('BASIC', 'DEFAULT_UNIT_ID')) ? _M('Na unidade padrão - @1', $module, $row[6]) : _M('Fora da unidade padrão - @1', $module, $row[6]);
        $path = $MIOLO->getActionURL($module, ($row[5] == SAGU::getParameter('BASIC', 'DEFAULT_UNIT_ID')) ? 'html:images:checkOn.png' : 'html:images:checkOff.png');
        $columns[5]->control[$i] = new MImage('imgUnit' . $i, $str, $path);

        // Se foi processado
        //      redBall = Não pode modificar
        //      greenBall = Pode modificar
        if ( $row[10] == DB_TRUE )
        {
            $imgType = 'redBall';
            $str = _M('Previsão de lançamento já processada. Não é possível alterar valor.', $module);
        }
        else
        {
            $imgType = 'greenBall';
            $str = _M('Previsão de lançamento não processada. Valor pode ser alterado.', $module);
        }
        
        $path        = $MIOLO->getActionURL($module, 'html:images:' . $imgType . '.png');
        $string      = new MImage('imgStatus' . $i, $str, $path);
        $columns[10]->control[$i] = new MImage('imgStatus' . $i, $str, $path);        
        
        // Se previsão foi gerada pelo sistema
        //    redBall = Gerada pelo sistema
        //    redSquare = Gerada manualmente 
        if ($row[11] == DB_TRUE)
        {
            $imgType = 'redBall';
            $str = _M('Previsão de lançamento gerada pelo sistema.', $module);
        }
        else
        {
        	$imgType = 'redSquare';
            $str = _M('Previsão de lançamento gerada pelo usuário.', $module);
        }
        
        $path        = $MIOLO->getActionURL($module, 'html:images:' . $imgType . '.png');
        $string      = new MImage('imgStatus' . $i, $str, $path);
        $columns[11]->control[$i] = new MImage('imgStatus' . $i, $str, $path);        
        
        // Se suprimido
        if ( $row[12] == DB_TRUE )
        {
        	// Colocar texto em cinza (desabilitar linha)
        	for ($x=1; $x<count($columns); $x++)
            {
                $columns[$x]->control[$i]->setColor('#505050');
            }
        }
        else
        {
            // Se previsão é do tipo Débito, colocar linha em vermelho. Senão, em azul
        	$color = ($row[4] == 'D') ? 'red' : 'blue';
            // Colocar texto em vermelho
            for ($x=1; $x<count($columns); $x++)
            {
                $columns[$x]->control[$i]->setColor($color);
            }
        }
        
        // Habilita ações da grid somente se a previsão não estiver processada e não estiver suprimida
        for ( $x=0; $x<count($actions); $x++ )
        {
            $enable = ($row[10] != DB_TRUE) && ($row[12] != DB_TRUE);
        	$actions[$x]->enabled = $enable;
        	if ( ! $enable )
        	{
        		$actions[$x]->alt = _M('Previsão de lançamento está processada ou suprimida e não pode sofrer alterações.', $module);
        	}
        }
    }
}

?>
