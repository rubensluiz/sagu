<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finDefaulterReportDegree table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 02/01/2006
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdDefaulterReportDegree extends MGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        
        $home   = 'main:report:defaulter:defaulterDegree';
        $module = MIOLO::_request('module');

        $href = $MIOLO->getActionURL($module, 'main', null, array('personId'=>$personId, 'personId'=>'#0#', 'event'=>'btnSearch_click'));
        $href2 = $MIOLO->getActionURL($module, 'main:report:receivableInvoiceConsult', null, array('invoiceId'=>$invoiceId, 'invoiceId'=>'#5#'));

        /*
         * MGridColumn constructor parameters:
         *    $title = ''
         *    $align = 'left'
         *    $nowrap = false
         *    $width = 0
         *    $visible = true
         *    $options = null
         *    $order = false
         *    $filter = false
         */
        $columns = array( new MGridColumn('', 'left', false, 0, false), 
                          new MGridHyperlink( _M('Pessoa', $module),           $href, '', true),
                          new MGridColumn( _M('Telefone residencial', $module),   'right', true, null, true, null, true ), 
                          new MGridColumn( _M('Telefone celular', $module),          'right', true, null, true, null, true ),
                          new MGridColumn( _M('Telefone de trabalho', $module),          'right', true, null, true, null, true ),
                          new MGridHyperlink( _M('Código do título', $module),       $href2, '', true),
                          new MGridColumn( _M('Valor inadimplente', $module),     'right',  true, null, true, null, true ),
                          new MGridColumn( _M('Data de vencimento', $module),       'right',  true, null, true, null, true ),
                          new MGridColumn( _M('É assegurado', $module),          'right',  true, null, true, array( DB_TRUE => _M('Sim',$module), DB_FALSE => _M('Não',$module) ), true ),
                          new MGridColumn( _M('Tipo', $module),    'right',  true, null, true, null, true ),
                        );


        $opts = array('function'=>'update',
                      'closeCounterId'=>'%0%');

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset($opts);

        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
        $url = $MIOLO->getActionURL($module,"$home",null,$opts);
        parent::__construct( null, $columns, $url, 0, 0, 'gridDefaulterReportDegree' );
        $this->setRowMethod('GrdDefaulterReportDegree', 'myRowMethod');
        
        $this->setIsScrollable();

        $this->eventHandler();

    }

    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {

        $MIOLO = MIOLO::getInstance();

        if ($row[7]  == DB_FALSE )
        {
            $actions[0]->enabled = true;
        }
        else
        {
            $actions[0]->enabled = false;
        }
    }


}

?>
