<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finBank table
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 22/12/2005
 *
 **/
class GrdCloseAllInvoices extends MGrid
{
    

    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $valueField = new MTextField('valueField[]',  null, '', '15');
        $selRights  = new MTextLabel('selRights', '', '' );

        $columns = array( new MGridColumn( _M('Código do título',   $module), 'right',  true, null, true, null, false ),
                          new MGridColumn( _M('Código do período',    $module), 'right',  true, null, true, null, false ),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn( _M('Data de emissão', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Data de vencimento', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Valor do título', $module), 'right', true, null, true, null, false ),
                          new MGridColumn( _M('Valor em aberto',    $module), 'right', true, null, true, null, false ),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn( _M('Valor atualizado', $module), 'right', true, null, true, null, false ),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridControl( $valueField, _M('Valor de fechamento', $module), 'right', false, '15%' ),
                          new MGridColumn('', 'left', false, 0, false)
                        );


       // this foreach is necessary until the getActionURL function is
       // able to handle an object parameter
       unset($opts);
       if (is_array($filters))
       {
           foreach ( $filters as $k => $v )
           {
               $opts[$k] = $v;
           }
       }

       $url = $MIOLO->getActionURL($module, $action, null, $opts);
       parent::__construct(null, $columns, $url, 0, 0, 'GrdCloseAllInvoices');
       $this->setRowMethod('GrdCloseAllInvoices', 'myRowMethod');

       $this->addActionSelect();

       $ctlArray = array( new MButton( 'btnCloseSelectedInvoices', _M('Fechar títulos selecionados', $module) ) );

       // set the controls in the grid
        $this->setControls( $ctlArray );

        $this->eventHandler();
    }
   
    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        $columns[10]->control[$i]->_addStyle('color', 'red');
        $columns[12]->control[$i]->value = $columns[13]->control[$i]->value;
    }

   /**
     *
     */
    public function btnCloseSelectedInvoices_click()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        // Pega valores da grid select = invoiceId, $valueField = valor declarado do título. 
        $select = $this->page->request( 'select' . $this->name );
        $valueField   = $this->page->request( 'valueField' );

        // número das linhas selecionadas
        $allSelecteds = $this->allSelecteds;

        // Pega dados do Formulário.
        $data->personId     = MForm::getFormValue('personId',$this->personId->value);
        $data->personName   = MForm::getFormValue('personName',$this->personName->value);
        $data->date         = MForm::getFormValue('date',$this->date->value);
        $data->operationId  = MForm::getFormValue('operationId',$this->operationId->value);
        $data->datePardon   = MForm::getFormValue('datePardon',$this->datePardon->value);
        $data->comments     = MForm::getFormValue('comments',$this->comments->value);



        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        $dataValues = $businessReceivableInvoice->listInvoicesForPersonDefaulter($data->personId, $data->datePardon);

        if(is_array($select) == false)
        {
            $msg  = _M('Erro, selecione ao menos um título para fechar',$module);
            $vars['personId']   = $data->personId; 
            $vars['personName'] = $data->personName;
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }

        $businessEntry = new BusinessFinanceBusEntry();


        for( $id = 0 ; $id < count($valueField) ; $id++ )
        {

            if($select[$id] != null)
            {
                
                $dataEntry = $businessEntry->getCostCenterEntry($select[$id]);

                if($dataValues[$id][0] == $select[$id] AND $valueField[$id] == $dataValues[$id][10])
                {
                    $insert->closeType = 'I';
                }
                elseif($dataValues[$id][0] == $select[$id] AND $valueField[$id] != $dataValues[$id][10])
                {
                    $insert->closeType = 'P';
                }

                $insert->invoiceId       = $select[$id];
                $insert->operationId     = $data->operationId;
                $insert->entryDate       = $data->date;
                $insert->value           = $valueField[$id];
                $insert->costCenterId    = $dataEntry->costCenterId;
                $insert->comments        = $data->comments;
                $insert->bankReturnCode  = '';
                $insert->isAccounted     = 'f';
                $insert->creationType    = 'M';
                $insert->datePardon      = $data->datePardon;

                $business = new BusinessFinanceBusReceivableInvoice();
                $ok = $business->closeInvoiceWithDate($insert);
                if($ok != true)
                {
                    $msg  = _M('Erro executando a operação solicitada.',$module);
                    $vars['personId'] = $data->personId; 
                    $vars['personName'] = $data->personName;
                    $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
                    $caption = _M('Erro',$module);
                    $MIOLO->error( $msg, $goto, $caption );
                }
            }
        }


        if($ok == true)
        {
            $vars['execute'] = true;
        }
        $vars['event'] = 'btnSave_click';

        $postAction = substr($action,0,strrpos($action,':')) . ':closeAllInvoices';
        $this->page->redirect($MIOLO->getActionURL($module, $postAction, null, $vars));
    }
}

?>
