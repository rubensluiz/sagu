<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file handles the connection and actions for finCounterMovement table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * Luís Augusto Weber Mercado [luis_augusto@solis.com.br]
 * 
 * @since
 * Class created on 03/01/2006
 *
 **/

/**
 * Grid utilizada para mostrar as informações de movimentações
 * 
 */
class GrdCounterMovementMovimentacao extends SGrid
{

    /**
     * Construtor da classe
     * 
     */
    public function __construct($filters)
    {
        $module = MIOLO::getCurrentModule();
        $business = new BusinessFinanceBusOperation();
        $messagesType = $business->listOperationTypeId(0);
        
        $columns[] = new MGridColumn(_M('Código', $module), 'right', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Data da movimentação', $module), 'center', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Pessoa/Fornecedor', $module), 'left', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Data de vencimento', $module), 'center', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Descrição da espécie', $module), 'center', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Valor', $module), 'right', true, null, true, null, false, null, true);
        $columns[] = new MGridColumn(_M('Tipo de operação', $module), 'left', true, null, true, $messagesType, false);
        $columns[] = new MGridColumn(_M('Operação', $module), 'left', true, null, true, null, false);
        // Não mostra a coluna, pois ela só serve para uso no teste se é ou não
        // uma movimentação provinda do CAP
        $columns[] = new MGridColumn(_M('EhCAP', $module), 'left', true, null, false, null, false);
        
        $primaryKey = array('%0%');
        
        parent::__construct($filters, $columns, 'GrdCounterMovementMovimentacao', $primaryKey);                
        
        $this->setRowMethod($this, "verificaRow");
        
    }
    
    /**
     * Adiciona a ação de imprimir comprovantes
     * 
     */
    public function addActionPrintVoucher()
    {
        $gotoPrint = SForm::getAjaxAction('printCounterMovementVoucher', 'divPrintResponse', false, array('printCounterMovementId' => '%0%'), false, false);
        $this->addActionIcon(_M('Imprimir comprovante', $this->module), 'print', $gotoPrint);        
    }
    
    /**
     * Adiciona a ação de imprimir comprovantes
     * 
     */
    public function addActionEstornoDeMovimentacao()
    {
        $gotoPrint = SForm::getAjaxAction('estornarMovimentacao', 'divEstorno', false, array('estornoCounterMovementId' => '%0%'), false, false);
        $this->addActionIcon(_M('Estornar movimentação', $this->module), 'reverse_icon.png', $gotoPrint);        
    }
    
    /**
     * Seta as ações default da grid
     * 
     */
    public function setDefaultGridActions($primaryKey = array())
    {
        $MIOLO = MIOLO::getInstance();
        
        if ( is_array($primaryKey) )
        {
            $optsEditFunction['function'] = SForm::FUNCTION_UPDATE;
            $optsEdit = array_merge($optsEditFunction, $primaryKey);
        }
        
        $hrefEdit = $MIOLO->getActionURL($this->module, $this->action, null, $optsEdit);
        $this->addActionUpdate($hrefEdit);
        
    }
    
    /**
     * Método que é chamado na criação de todos os rows da grid, referenciado
     * e no método MGrid::setRowMethod() que é chamado no construtor da classe atual
     * 
     * @param Integer $i Número da linha do row atual. <b>Não utilizado neste método</b>
     * @param Array $row Row atual de dados
     * @param Array $actions Array com os objetos que contém as ações
     * @param Array $columns Array com os objetos que contém as informações das
     * colunas da grid. <b>Não utilizado neste método</b>
     * 
     * @see MGrid::setRowMethod()
     */
    public function verificaRow($i, $row, $actions, $columns)
    {
        // Caso seja um dos dados do CAP e este esteja instalado
        $actions[0]->enabled = !($row[count($row) - 1] === DB_TRUE && SAGU::getParameter("basic", "MODULE_CONTASPAGAR_INSTALLED") === "YES");
        
        // Caso não seja uma movimentação ou o valor da movimentação seja menor que zero(movimentação oriunda de um estorno), desabilita estorno
        if ( $row[9] == DB_TRUE || $row[10] == DB_TRUE )
        {
            $actions[1]->enabled = false;
            $actions[1]->value = 'reverse_disable_icon.png';
            
            if ( $row[5] < 0 )
            {
                $alt = _M('Movimentação oriunda de um estorno não pode ser estornada', $this->module);
            }
            else if ( $row[10] == DB_TRUE )
            {
                $alt = _M('Movimentação de transferência de caixa não pode ser estornada', $this->module);
            }
            else if ( !strlen($row[0]) > 0 )
            {
                $alt = _M('Movimentaçao de abertura do caixa não pode ser estornada', $this->module);
            }
            else
            {
                $alt = _M('Movimentaçao estornada', $this->module);
            }
            
            $actions[1]->alt = $alt;
        }
        else
        {
            $actions[1]->alt = _M('Estornar movimentação', $this->module);
            $actions[1]->enabled = true;
            $actions[1]->value = 'reverse_icon.png';
        }
    }
    
}
?>
