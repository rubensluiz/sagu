<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Grid responsável por mostrar e definir as ações das contas disponíveis para
 * pagamento
 *
 * @author Luís Augusto Weber Mercado [luis_augusto@solis.com.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Luís Augusto Weber Mercado [luis_augusto@solis.com.br]
 *
 * @since
 * Class created on 04/05/2015
 *
 **/

/**
 * Grid utilizada no caixa para mostrar as contas que podem ser pagas
 *
 */
class GrdCounterMovementContas extends SGrid
{
    
    /**
     * Saldo atual do caixa
     * Utilizado na comparação do valor atual da conta
     * 
     * @var Double $saldo
     */
    private $saldo;
    
    /**
     * Construtor da classe
     * 
     */
    public function __construct($filters)
    {
        $module = MIOLO::getCurrentModule();
        
        $columns = array(
                new MGridColumn( _M('Título', $module), 'right',  true, null, true, null, false ),
                new MGridColumn( _M('Data de vencimento', $module), 'center', true, null, true, null, false ),
                new MGridColumn( _M('Dados da compra', $module), 'left',  true, null, true, null, false ),
                new MGridColumn( _M('Fornecedor', $module), 'left',  true, null, false, null, false ),
                new MGridColumn( _M('Número da nota fiscal', $module), 'right',  true, null, true, null, false ),
                new MGridColumn( _M('Valor', $module), 'right',  true, null, true, null, false, null, true ),
                new MGridColumn( _M('Valor em aberto', $module), 'right',  true, null, true, null, false, null, true )
                
            );
        
        $primaryKey = array("%0%");
        
        parent::__construct($filters, $columns, 'GrdCounterMovementContas', $primaryKey);        
        
        $this->setRowMethod($this, "verificaValorAlto");
        
    }
    
    /**
     * Adiciona a ação de pagar conta à grid
     * 
     */
    public function addAcaoPagarConta()
    {
        $MIOLO = MIOLO::getInstance();
        $goto = SForm::getAjaxAction("evtCarregaTelaPagamentoConta", "divCamposOperacoes", false, array("tituloid" => "%0%"), false, false);
        $this->addActionIcon(_M("Pagar conta", MIOLO::getCurrentModule()), $MIOLO->getUI()->getImage(MIOLO::getCurrentModule(), 'finance-16x16.png'), $goto);
        
    }
    
    /**
     * Método que é chamado na criação de todos os rows da grid, referenciado
     * e no método MGrid::setRowMethod() que é chamado no construtor da classe atual
     * 
     * @param Integer $i Número da linha do row atual. <b>Não utilizado neste método</b>
     * @param Array $row Row atual de dados
     * @param Array $actions Array com os objetos que contém as ações
     * @param Array $columns Array com os objetos que contém as informações das
     * colunas da grid. <b>Não utilizado neste método</b>
     * 
     * @see MGrid::setRowMethod()
     */
    public function verificaValorAlto($i, $row, $actions, $columns)
    {
        // Se o valor em aberto for maior que o saldo 
        if ( !(floatval($row[4]) <= $this->saldo) )
        {
            $actions[0]->enabled = false;
            $actions[0]->alt = _M("Sem saldo em caixa/banco suficiente para realizar o pagamento", MIOLO::getCurrentModule());
        }
    }
    
    /**
     * Muda o valor do saldo
     * 
     * @param Double $valor Valor do saldo
     */
    public function setSaldo($valor)
    {
        $this->saldo = $valor;
        
    }
    
}
?>