<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finPayableInvoice table
 *
 * @author William Prigoç Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * 
 * @since
 * Class created on 14/12/2005
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdInvoiceReport extends MGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $columns = array( 
                          new MGridColumn( _M('Código do título', $module),  'right', true, null, true, null, true ),
                          new MGridColumn('', 'left', false, 0, false),
                          new MGridColumn( _M('Código da pessoa', $module),   'right', true, null, true, null, true ),
                          new MGridColumn( _M('Nome da pessoa', $module), 'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Valor', $module),       'right', true, null, true, null, true ),
                          new MGridColumn( _M('Valor em aberto', $module),  'right', true, null, true, null, true ),
                          $filters->onlyOpenInvoices == 't' 
                            ? new MGridColumn( _M('Telefones', $module), 'left', true, null, true, null, true)
                            : new MGridColumn('', 'left', false, 0, false)
                         );
        $opts = array('event'=>'generate_click'); 
        $url = $MIOLO->getActionURL( $module, $home, null, $opts );
        parent::__construct(null, $columns, $url, SAGU::getParameter('BASIC', 'LISTING_NREGS'), 0, 'gridInvoiceReport');
        $this->setRowMethod('GrdInvoiceReport', 'myRowMethod');
        $this->setTitle(_M('Relatório do título por data de vencimento no período de @1 a @2', $module, $filters->beginMaturityDate, $filters->endMaturityDate));
        
        unset($opts);
        foreach ( $filters as $k => $v )
        {
            $opts[$k] = $v;
        }
       
        $_opts = array('event'=>'generate_click', 'beginMaturityDate'=>$filters->beginMaturityDate, 'endMaturityDate'=>$filters->endMaturityDate, 'emissionDate'=>$filters->emissionDate, 'onlyOpenInvoices'=>$filters->onlyOpenInvoices);
        $opts = array('invoiceId'=>'%1%', 'go_back'=>urlencode($MIOLO->getActionURL($module, 'main:report:invoiceReport', null, $_opts)), 'goto'=>urlencode($MIOLO->getActionURL($module, $action, null, $_opts)));
        $hrefCloseInvoice = $MIOLO->getActionURL($module, "main:process:closeInvoice", null, $opts);
        
        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        $this->addActionIcon(_M('Baixar título', $module), 'close', $hrefCloseInvoice);
        
        $this->setIsScrollable();
        $this->eventHandler();
    }
    
    /**
     * Function to handle the before each row creation
     */
    public function myRowMethod($i, $row, $actions, $columns )
    {
        if ($row[5] == SAGU::formatNumber(0))
        {
            $actions[0]->enabled = false;
        }
        else
        {
            $actions[0]->enabled = true;
        }
    }
}
?>
