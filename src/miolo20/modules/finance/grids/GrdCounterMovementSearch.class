<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finCounterMovement table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 * 
 * @since
 * Class created on 03/01/2006
 *
 **/

class GrdCounterMovementSearch extends SGrid
{

    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $business = new BusinessFinanceBusOperation();
        $messagesType = $business->listOperationTypeId(0);
        
        $columns[] = new MGridColumn(_M('Código', $module), 'right', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Data de movimentação', $module), 'center', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Código da espécie', $module), 'right', true, null, false, null, false);
        $columns[] = new MGridColumn(_M('Descrição da espécie', $module), 'center', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Valor', $module), 'right', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Operação', $module), 'left', true, null, true, $messagesType, false);
        $columns[] = new MGridColumn(_M('Observação', $module), 'left', true, null, false, null, false);
        $columns[] = new MGridColumn(_M('Caixa', $module), 'left', true, null, false, null, false);
        $columns[] = new MGridColumn(_M('Título', $module), 'left', true, null, false, null, false);
        $columns[] = new MGridColumn(_M('Código da operação', $module), 'right', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Descrição da operação', $module), 'left', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Centro de custo', $module), 'right', true, null, true, null, false);
        $columns[] = new MGridColumn(_M('Descrição do centro de custo', $module), 'left', true, null, true, null, false);

        $primaryKey = array('counterMovementId' => '%0%');
        
        parent::__construct($filters, $columns, 'GrdSpcSearch', $primaryKey);                
    }
    
    
    public function addActionPrintVoucher()
    {
        $MIOLO = MIOLO::getInstance();
        $gotoPrint = SForm::getAjaxAction('printCounterMovementVoucher', 'divPrintResponse', false, array('printCounterMovementId' => '%0%'), false, false);
        $this->addActionIcon(_M('Imprimir comprovante', $this->module), 'print', $gotoPrint);        
    }
    
    /*
     * Set default grid actions
     */
    public function setDefaultGridActions($primaryKey = array())
    {
        $MIOLO = MIOLO::getInstance();
        
        if ( is_array($primaryKey) )
        {
            $optsEditFunction['function'] = SForm::FUNCTION_UPDATE;
            $optsEdit = array_merge($optsEditFunction, $primaryKey);
        }
        
        $hrefEdit = $MIOLO->getActionURL($this->module, $this->action, null, $optsEdit);
        $this->addActionUpdate($hrefEdit);
    }
}
?>
