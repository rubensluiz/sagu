<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * This file generate the main grids for diverse consultation invoice view
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdDiverseConsultationPerson extends SGrid
{
    public $pendingInvoices;

    const COL_INVOICE = 0;
    const COL_CHECKBOX = 1;
    const COL_COLLECTION_TYPE = 2;
    const COL_REMESSA = 3;
    const COL_AGREEMENT = 4;
    const COL_INCOME_SOURCE = 5;
    const COL_EMISSION = 6;
    const COL_MATURITY = 7;
    const COL_VALUE = 8;
    const COL_OPEN = 9;
    const COL_DATE_UPDATED = 10;
    const COL_VALUE_UPDATED = 11;

    // Actions
    const ACT_CONSULT = 0;
    const ACT_UPDATE = 1;
    const ACT_DELETE = 2;
    const ACT_PRINT = 3;
    const ACT_INTERNAL_PRINT = 4;
    const ACT_CLOSE = 5;    
    const ACT_REVERSE_INVOICE = 6;

    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $cb = new MCheckBox('cbAllTitles');
        $cb->addAttribute('onclick', "checkOrUncheckAll(this, 'cbTitle')");
        
        // Sobreescrito método checkOrUncheckAll para não marcar os checkbox que estão desabilitados
        $jscode = " function checkOrUncheckAll(obj, className)
                    {
                       var elements = document.getElementsByTagName('input');
                       for (i=0; i < elements.length; i++)
                       {
                           if (elements[i].className == className && elements[i].disabled != true)
                           {
                               elements[i].checked = obj.checked;
                           }
                       }
                    } ";
        
        $MIOLO->page->AddJsCode($jscode);

        $columns[] = new MGridColumn( _M('Título', $module ), 'right', true, null, true, null, false );
        $columns[] = new MGridColumn( $cb, 'center', true, null, true, null, false );
        $columns[] = new MGridColumn( _M('Tipo de cobrança', $module ), 'center', true, null, true, null, false );
        $columns[] = new MGridColumn( _M('Remetido ao banco', $module ), 'center', true, null, true, null, false );
        $columns[] = new MGridColumn( ' ', 'center', true, null, true, null, false );
        $columns[] = new MGridColumn('', 'left', false, 0, false);
        $columns[] = new MGridColumn( _M('Parcela', $module ), 'center', true, null, true, null, false );
        $columns[] = new MGridColumn( _M('Emissão', $module ), 'center', true, null, true, null, false );
        $columns[] = new MGridColumn( _M('Vencimento', $module ), 'center', true, null, true, null, false );
        $columns[] = new MGridColumn( _M('Valor', $module ), 'right', true, null, true, null, false );
        $columns[] = new MGridColumn( _M('Aberto', $module ), 'right', true, null, true, null, false );
        $columns[] = new MGridColumn( _M('Data atualizada', $module ), 'right', true, null, true, null, false );
        $columns[] = new MGridColumn( _M('Valor atualizado', $module ), 'right', true, null, true, null, false );
        $columns[] = new MGridColumn('', 'left', false, null, false);
        $columns[] = new MGridColumn('', 'left', false, null, false);

        if ( SAGU::getParameter('FINANCE', 'SHOW_CLASS_IN_DIVERSE_CONSULTATION') == 'YES' )
        {
            $columns[] = new MGridColumn( _M('Valor pago', $module ), 'right', true, null, true, null, false );
            $columns[] = new MGridColumn( _M('Pagamento', $module ), 'center', true, null, true, null, false );
            $columns[] = new MGridColumn( _M('Turma', $module ), 'left', true, null, true, null, false );
        }
        // Item 1 - Receivable invoice consult
        $opts = array( 'invoiceId' => '%0%' );
        $hrefConsult = $MIOLO->getActionURL( $module, "main:receivableInvoiceConsult", null, $opts );

        // Item 2 - Update receivable invoice
        $_opts = array( 'event' => 'btnSearch_click', 'personId' => $filters->personId );
        $opts = array( 'function' => 'update', 'invoiceId' => '%0%', 'goto' => urlencode( $MIOLO->getActionURL( $module, $action, null, $_opts ) ) );
        $hrefUpdate = $MIOLO->getActionURL( $module, "main:register:invoice:receivableInvoice", null, $opts );

        // Item 3 - Delete receivable invoice
        $_opts = array( 'event' => 'btnSearch_click', 'personId' => $filters->personId );
        $opts = array( 'event' => 'tbBtnDelete_click', 'function' => 'delete', 'invoiceId' => '%0%', 'goto' => urlencode( $MIOLO->getActionURL( $module, $action, null, $_opts ) ) );
        $hrefDelete = $MIOLO->getActionURL( $module, "main:register:invoice:receivableInvoice", null, $opts );

        // Item 4 - Print receivable invoice (internally)
        $opts = array( 'invoiceId' => '%0%', 'personId' => $filters->personId, 'event' => 'btnPrintInvoice_click');
        //$hrefInternalPrint = $MIOLO->getActionURL( $module, "main:process:closeInvoice", null, $opts );
        $hrefInternalPrint = $action = $MIOLO->getActionUrl('finance', 'main', null, array('invoices' => '%0%', 'event' => 'generateCarnetByInvoicesPassedByURL'));
        // Item 5 - Print invoice
        $_opts = array( 'event' => 'btnSearch_click', 'personId' => $filters->personId );
        $opts = array( '_invoiceId' => '%0%', 'event' => 'submit_button_click', 'goto' => urlencode( $MIOLO->getActionURL( $module, $action, null, $_opts ) ) );
        $hrefPrint = $MIOLO->getActionURL( $module, "main:process:printInvoice", null, $opts );

        // Item 6 - Close invoice
        $_opts = array( 'event' => 'btnSearch_click', 'personId' => $filters->personId );
        $opts = array( 'invoiceId' => '%0%', 'goto' => urlencode( $MIOLO->getActionURL( $module, $action, null, $_opts ) ) );
        $hrefCloseInvoice = $MIOLO->getActionURL( $module, SAGU::getParameter('FINANCE', 'CLOSE_INVOICE_HANDLER'), null, $opts );
        
        // Reverse invoice - extornar cobranca
        $_opts = array( 'event' => 'btnSearch_click', 'personId' => $filters->personId );
        $opts = array( 'function' => 'reverse', 'invoiceId' => '%0%', 'goto' => urlencode( $MIOLO->getActionURL( $module, $action, null, $_opts ) ) );
        $hrefReverseInvoice = $MIOLO->getActionURL( $module, "main:register:invoice:reverseInvoice", null, $opts );

        // this foreach is necessary until the getActionURL function is
        // able to handle an object parameter
        unset( $opts );
        if (is_array( $filters ))
        {
            foreach ( $filters as $k => $v )
            {
                $opts[$k] = $v;
            }
        }
        
        $url = $MIOLO->getActionURL( $module, $action, null, $opts );
        parent::__construct( $data, $columns, 'gridDiverseConsultationPerson', array( 'invoiceId' => '%0%' )); //, 0, 0, 'gridDiverseConsultationPerson' );
        $this->setLinkType('hyperlink');
        $this->setRowMethod( 'GrdDiverseConsultationPerson', 'myRowMethod' );
        
        $this->clearActions();

        $this->addActionIcon( _M('Consulta', $module ), 'find', $hrefConsult );
        $this->addActionUpdate( $hrefUpdate );
        $this->addActionDelete( $hrefDelete );
        $this->addActionIcon( _M('Imprimir', $module ), 'print', $hrefPrint );        
        // Abre a ação em nova janela
        $action = array_pop($this->actions);
        $action->setTarget('_new');
        array_push($this->actions, $action);

        $this->addActionIcon( _M('Impressão interna', $module ), 'internalPrint', $hrefInternalPrint );
        $this->addActionIcon( _M('Baixar título', $module ), 'close', $hrefCloseInvoice );
        
        $this->addActionIcon( _M('Estornar pagamento', $module ), $MIOLO->getUI()->getImage($module, 'reverse_icon.png'), $hrefReverseInvoice );
        
        // Desabilita a exportação default das grids, pois esta possui dados com qual a exportação não lida
        $this->disableExports();
        
        // Para reemissão do título
        if ( SAGU::getParameter('FINANCE', 'GERAR_TITULO_COM_VALOR_ATUALIZADO') == DB_TRUE )
        {
            $opts = array( 'invoiceId' => '%0%', 'event' => 'btnReemitirTituloVencido_click', 'personId' => $filters->personId );
            $hrefReemitir = $MIOLO->getActionURL( $module, "main:process:closeInvoice", null, $opts );
            $this->addActionIcon( _M('Reemitir título', $module ), 'print_2.png', $hrefReemitir );
        }
        
        $this->eventHandler();
    }

    public function setData($data)
    {
        $this->pendingInvoices = array();
        foreach($data as $cod=>$linha)
        {
            if( $linha[self::COL_OPEN] != SAGU::formatNumber('0') )
            {
                $this->pendingInvoices[] = $linha[self::COL_INVOICE];
            }
        }
        parent::setData($data);
    }

    /*
     * Event to execute for each row of grid
     */
    public function myRowMethod($i, $row, $actions, $columns)
    {
        $module = MIOLO::getCurrentModule();
        $MIOLO = MIOLO::getInstance();
        $businessInvoice = new BusinessFinanceBusInvoice();
        $busEntry = new BusinessFinanceBusEntry();

        //Create checkbox
        if ( $row[self::COL_OPEN] != SAGU::formatNumber('0') ) //Check if invoice is OPEN
        {
            $cb = new MCheckBox('checkTitle[' . $row[self::COL_INVOICE] . ']');
            $cb->addAttribute('class', 'cbTitle');

            if ( SAGU::getParameter('BASIC', 'CHECKED_BUTTONS') == 'TRUE' )
            {
                $cb->setChecked(TRUE);
            }

            if ( is_numeric($row[self::COL_INVOICE]) )
            {
                if ( $businessInvoice->getInvoiceBalance($row[self::COL_INVOICE]) == '0.00' )
                {
                    $cb->addAttribute('disabled', 'false');
                    $cb->setChecked(false);
                }
            }
            
            $columns[self::COL_CHECKBOX]->control[$i]->value = $cb->generate();
        }

        if( $row[self::COL_COLLECTION_TYPE] == SAGU::getParameter('FINANCE', 'COLLECTION_TYPE_SIMPLE') )
        {
            $str = _M('SIMPLES', $module );
            $string = new MText('textCollectionTypeSimple', $str);
            $columns[self::COL_COLLECTION_TYPE]->control[$i]->value = $string->generate();
        }
        elseif ( $row[self::COL_COLLECTION_TYPE] == SAGU::getParameter('FINANCE', 'COLLECTION_TYPE_REGISTERED') )
        {
            $str = _M('REGISTRADO', $module );
            $string = new MText('textCollectionTypeRegistered', $str);
            $columns[self::COL_COLLECTION_TYPE]->control[$i]->value = $string->generate();
        }
        else
        {
            $columns[self::COL_COLLECTION_TYPE]->control[$i]->value = ' - ';
        }

        if ( $row[self::COL_INCOME_SOURCE] > 0 )
        {
            $str2 = _M('Tem operação(ões) de acordo', $module );
            $path2 = $MIOLO->getActionUrl( $module, 'html:images:red.png' );
            $string2 = new MImage( 'imgAgreement' . self::COL_INVOICE, $str2, $path2 );
            $columns[self::COL_AGREEMENT]->control[$i]->value = $string2->generate();
        }
        else
        {
            $str2 = _M('Não há operações de acordo', $module );
            $path2 = $MIOLO->getActionUrl( $module, 'html:images:green.png' );
            $string2 = new MImage( 'imgAgreement' . self::COL_INVOICE, $str2, $path2 );
            $columns[self::COL_AGREEMENT]->control[$i]->value = $string2->generate();
        }
        
        if ( SAGU::getParameter('FINANCE', 'GERAR_TITULO_COM_VALOR_ATUALIZADO') == DB_TRUE )
        {
            if ( $row[self::COL_DATE_UPDATED] != '(x)' )
            {
                if ( (int)$row[self::COL_DATE_UPDATED] > 0 )
                {
                    $actions[7]->enabled = true;
                }
                else
                {
                    $actions[7]->enabled = false;
                }
            }
            else
            {
                $actions[7]->enabled = false;
            }
        }

        for($x = 0; $x < count( $columns ); $x ++)
        {            
            $columns[$x]->control[$i]->_addStyle( 'color', (($x == self::COL_OPEN) && ($row[self::COL_OPEN] != '(x)')) ? 'red' : 'blue' );
        }

        if (self::COL_OPEN == SAGU::formatNumber( '0' ))
        {
            $actions[self::COL_MATURITY]->enabled = false;
        }
        else
        {
            $actions[self::COL_MATURITY]->enabled = true;
        }
        if (self::COL_OPEN < SAGU::formatNumber( SAGU::getParameter('BASIC', 'MINIMAL_VALUE_TO_PRINT_INVOICE') ))
        {
            $actions[self::ACT_PRINT]->enabled = false;
        }
        else
        {
            $actions[self::ACT_PRINT]->enabled = true;
        }

        if ($businessInvoice->verifyAccountedEntriesForInvoice( $row[0] ))
        {
            $actions[self::COL_AGREEMENT]->enabled = false;
        }
        else
        {
            $actions[self::COL_AGREEMENT]->enabled = true;
        }           
        
        // Verifica se existe lançamentos de cobrança que não estejam extornados
        if ( $busEntry->verificaLancamentosEstornados($row[0]) == DB_FALSE )
        {  
            $actions[self::ACT_REVERSE_INVOICE]->enabled = false;
            $actions[self::ACT_REVERSE_INVOICE]->value = str_replace('reverse_icon.png', 'reverse_disable_icon.png', $actions[self::ACT_REVERSE_INVOICE]->value);
        }
        else
        {
            $actions[self::ACT_REVERSE_INVOICE]->enabled = true;
            $actions[self::ACT_REVERSE_INVOICE]->value = str_replace('reverse_disable_icon.png', 'reverse_icon.png', $actions[self::ACT_REVERSE_INVOICE]->value);
        }

        if ( $businessInvoice->isClosed($row[self::COL_INVOICE]) )
        {
            $actions[self::ACT_UPDATE]->enabled = false;
            $actions[self::ACT_DELETE]->enabled = false;
            $actions[self::ACT_CLOSE]->enabled = false;
        }
        else
        {
            $actions[self::ACT_UPDATE]->enabled = true;
            $actions[self::ACT_DELETE]->enabled = true;
            
            if ( $row[self::COL_OPEN] ==  SAGU::formatNumber('0') )
            {
                $actions[self::ACT_CLOSE]->enabled = false;
            }
            else
            {
                $actions[self::ACT_CLOSE]->enabled = true;
            }
        }
        
        if( (SAGU::getParameter('FINANCE', 'DIA_PARA_DISPONIBILIZAR_IMPRESSAO_DE_TITULOS') != 0) && ($this->verificaGrupoDoUsuario() == DB_FALSE) )
        {   
            $dia = SAGU::getParameter('FINANCE', 'DIA_PARA_DISPONIBILIZAR_IMPRESSAO_DE_TITULOS');                
            $dataHoje = SAGU::getDateNow();

            $data = explode('/', $dataHoje);

            $dataLiberacao = $dia.'/'.$data[1].'/'.$data[2];
                        
            if( $dataHoje < $dataLiberacao)
            {
                $actions[self::ACT_PRINT]->enabled = false;
            }
        }
        
        //Mudando nome do ícone - #36016
        $actions[self::ACT_DELETE]->alt = _M("Cancelar", $module);
    }
    
    /*
     *  Verifica se o usuário logado, está no grupo adim.
     */
    public function verificaGrupoDoUsuario()
    {
        $MIOLO = MIOLO::getInstance();
        
        return ($MIOLO->checkAccess('FrmDiverseConsultationFinance', A_ADMIN, true, true));

    }
}
?>