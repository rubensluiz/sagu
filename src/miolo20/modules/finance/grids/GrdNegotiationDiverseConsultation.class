<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Equipe Sagu [sagu@solis.coop.br]
 *
 * @since
 * Class created on 21/05/2014
 *
 **/

/**
 * Grid used by form to display search results
 **/
class GrdNegotiationDiverseConsultation extends SGrid
{
    /**
     * Class constructor
     **/
    public function __construct($filters)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $columns = array(
                          new MGridColumn( _M('Código', $module), 'right', true, null, true, null, true ),
                          new MGridColumn( _M('Observações', $module), 'center', true, null, true, null, true ),
                          new MGridColumn( _M('Data', $module), 'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Usuário que efetou', $module), 'left',  true, null, true, null, true ),
                          new MGridColumn( _M('Tipo de negociação', $module), 'left',  true, null, false, null, true ),
                        );

        $primaryKey = array('negotiationId' => '%0%', 'recordType' => '%4%');

        parent::__construct($filters, $columns, 'GrdNegotiationDiverseConsultation', $primaryKey);
        
        $this->setRowMethod( __CLASS__, 'myRowMethod' );
        $this->disableExports();        
        $this->clearActions(); 
        $this->disableColumnSorting();
        $this->disablePagination();
        
        $hrefDetalhes = SForm::getAjaxAction('popupDetalhes', 'divDetalhes', false, $primaryKey, false, false);
        $this->addActionIcon( _M('Detalhes', $module ), $MIOLO->getUI()->getImage($module, 'visualizar.png'), $hrefDetalhes );

        //Desfazer negociação
        $action = 'main:process:negotiation';
        $optsUndo = array( 'negotiationId' => '%0%' , 'function'=>'update', 'event'=>'undoNegotiation' );
        $hrefUndo = $MIOLO->getActionURL( $module, $action, null, $optsUndo );
        $this->addActionIcon( _M('Desfazer', $module ), $MIOLO->getUI()->getImage($module, 'reverse_icon.png'), $hrefUndo );
        
        // Imprimir relatório de confissão
        $optsReport = array('negotiationId' => '%0%', 'event' => 'gerarRelatorioDeNegociacao');
        $hrefReport = $MIOLO->getActionURL('finance', 'main:diverseConsultation', null, $optsReport);
        $this->addActionIcon( _M('Imprimir contrato de negociação', $module), $MIOLO->getUI()->getImage($module, 'report-16x16.png'), $hrefReport);
    }
    
    
    public function myRowMethod($i, $row, $actions, $columns)
    {
        $module = MIOLO::getCurrentModule();
        $MIOLO = MIOLO::getInstance();
        
        $businessInvoice = new BusinessFinanceBusInvoice();
        $busEntry = new BusinessFinanceBusEntry();

        $filtro = new stdClass();
        $filtro->negotiationId = $row[0];
        $filtro->generated = DB_TRUE;
                
        $data = FinNegotiationGeneratedEntries::searchGrid($filtro);
        
        if( count($data) > 0 )
        {
            $entry = $busEntry->getEntry($data[0][1]);
            if(!count($busEntry->getPaymentsEntry($entry->invoiceId))==0 && (!$businessInvoice->getInvoiceBalance($entry->invoiceId)>0))
            {   
                $actions[0]->enabled = false;
                $actions[0]->value = str_replace('reverse_icon.png','reverse_disable_icon.png',$actions[0]->value);
            }
        }
    }
    
}
?>
