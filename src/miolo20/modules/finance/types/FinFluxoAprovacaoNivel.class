<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of FinFluxoAprovacaoNivel
 *
 * @author augusto
 */
class FinFluxoAprovacaoNivel extends SType
{
    protected $gravarMaiusculo = false;
    
    /**
     *
     * @var int 
     */
    public $fluxoAprovacaoNivelId;
    
    /**
     *
     * @var int
     */
    public $fluxoAprovacaoConfiguracaoId;
    
    /**
     *
     * @var int
     */
    public $nivel;
    
    /**
     *
     * @var int
     */
    public $idUser;
    
    /**
     *
     * @var int
     */
    public $idgroup;
    
    /**
     *
     * @var AdmFluxoAprovacaoConfiguracao
     */
    public $fluxoAprovacaoConfiguracao;
    
    /**
     *
     * @var AdmUser 
     */
    public $miolo_user;
    
    /**
     *
     * @var AdmGroup
     */
    public $miolo_group;
    
    /**
     * Associações
     * 
     * @var array
     */
    protected $_associations = array(
        'fluxoAprovacaoConfiguracao' => array(
            'mode' => 'one',
            'typeClass' => 'FinFluxoAprovacaoConfiguracao',
            'joinColumn' => 'fluxoAprovacaoConfiguracaoId',
        ),
        'miolo_user' => array(
            'mode' => 'one',
            'typeClass' => 'AdmUser',
            'joinColumn' => 'idUser',
        ),
        'miolo_group' => array(
            'mode' => 'one',
            'typeClass' => 'AdmGroup',
            'joinColumn' => 'idgroup',
        )
    );
    
    /**
     * Popula subdetail de níveis da configuração de fluxo.
     * 
     * @param int $configuracaoId
     * @param boolean $returnAsObject
     * @return array
     */
    public function buscarNiveisPelaConfiguracao($configuracaoId, $returnAsObject = false, $eVisualizacao = false)
    {
        $columns = ($eVisualizacao) ? ", C.login" : "";
        
        $msql = new MSQL();
        $msql->setColumns("
            A.fluxoaprovacaonivelid, 
            A.nivel, 
            ( CASE WHEN A.idgroup IS NOT NULL
                   THEN
                        'Grupo'
                   ELSE
                        'Usuário'
              END ) AS quem,
            ( CASE WHEN A.idgroup IS NOT NULL
                   THEN
                        A.idgroup
                   ELSE
                        A.iduser
              END ) AS code,
            ( CASE WHEN A.idgroup IS NOT NULL
                   THEN
                        D.m_group
                   ELSE
                        C.name
              END ) AS nome
            {$columns}
        ");
        
        $msql->setTables("finfluxoaprovacaonivel A
               INNER JOIN finfluxoaprovacaoConfiguracao B
                       ON B.fluxoaprovacaoconfiguracaoid = A.fluxoaprovacaoconfiguracaoid
                LEFT JOIN miolo_user C
                       ON C.iduser = A.iduser
                LEFT JOIN miolo_group D
                       ON D.idgroup = A.idgroup
        ");
        
        $msql->setWhereAnd("A.fluxoaprovacaoconfiguracaoid = ?");
        $msql->setOrderBy("A.nivel");
        $sql = $msql->select(array($configuracaoId));
        
        $cols = array(
            'fluxoAprovacaoNivelId',
            'nivel',
            'quem',
            'code',
            'nome'
        );
        
        if ( $eVisualizacao )
        {
            $cols[] = 'login';
        }
        
        $result = SDatabase::query($sql);
        
        return $returnAsObject ? SAGU::resultToObject($result, $cols) : $result;
    }
    
    /**
     * Verifica se o avaliador do nível é o usuário logado.
     * 
     * @return boolean
     */
    public function verificaSeENivelDoAvaliadorLogado()
    {
        $MIOLO     = MIOLO::getInstance();
        $loginUser = $MIOLO->getLogin();
        
        $groupUser = new BusinessAdminUser();        
        $grupos = $groupUser->listGroupsByUser($loginUser->idkey);
        
        $eNivelDoAvaliadorLogado = false;
        
        // Verifica se o nível é avaliado por usuário ou por um grupo de usuários.
        if ( strlen($this->idUser) > 0 )
        {
            $eNivelDoAvaliadorLogado = ($this->idUser == $loginUser->idkey);
        }
        else
        {
            foreach ( $grupos as $grupo )
            {
                // Se o usuário logado pertence ao grupo que avalia o nível.
                if ( $this->idgroup == $grupo[0] )
                {
                    $eNivelDoAvaliadorLogado = true;
                    break;
                }
            }
        }
        
        return $eNivelDoAvaliadorLogado;
    }
    
    /**
     * Retorna quantos níveis o processo possui configurado.
     * 
     * @param int $fluxoAprovacaoProcessoId
     * @return int
     */
    public static function obtemQuantidadeDeNiveisDoProcesso($fluxoAprovacaoProcessoId)
    {
        $msql = new MSQL();
        $msql->setColumns('COUNT(A.*)')
             ->setTables('finfluxoaprovacaonivel A
               INNER JOIN finfluxoaprovacaoconfiguracao B
                       ON B.fluxoaprovacaoconfiguracaoid = A.fluxoaprovacaoconfiguracaoid')
             ->setWhereAnd('B.fluxoaprovacaoprocessoid = ?');
        
        $result = SDatabase::query($msql->select(), array($fluxoAprovacaoProcessoId));
        
        return $result[0][0];
    }
}

?>
