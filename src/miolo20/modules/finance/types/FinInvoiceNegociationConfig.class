<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela fin.invoiceNegociationConfig
 * Configuração da Negociação de títulos
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 16/09/2011
 */

class FinInvoiceNegociationConfig extends SType
{
    /**
     * Table fields
     */
    /**
     * Identificador do banco.
     */
    protected $financeInformationId;
    /**
     * Conta bancária
     */
    protected $bankAccountId;
    /**
     * Operação
     */
    protected $operationId;
    /**
     * Centro de custo
     */
    protected $costCenterId;
    /**
     * Política
     */
    protected $policyId;
    /**
     * Número de parcelas
     */
    protected $parcelsNumber;
    /**
     * Valor mínimo para permitir liberação de juros e multas
     */
    protected $minValueForFinesAndInterestRelease;
    /**
     * Valor máximo negociável por usuário não administrador
     */
    protected $maxValueForNonAdmins;
    /**
     * Taxa de negociação
     */
    protected $negotiationFee;
    /**
     * Dias para vencimento
     */
    protected $maturityDays;
    
    /**
     * Tipo de operacao (negociacao, antecipacao)
     * 
     * @var string
     */
    protected $operation;
    
    /**
     * @var string
     */
    protected $percentValueEntry;
    

    /**
     * Construtor da classe ao instanciar a classe popula com o primeiro (único) registro da tabela
     */
    public function __construct($operation = null)
    {
        $filters = new stdClass();
        
        if ( strlen($operation) > 0 )
        {
            $filters->operation = $operation;
        }
        
        $search = $this->searchGrid($filters);
        $this->operation = $search[0][0];
        if( strlen($this->operation) > 0 )
        {
            $this->populate();
        }        
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        // busca por registros que possuam as chaves primarias definidas, se existir edita, caso nao insere 
        $filters = new stdClass();
        $filters->operation = $this->operation;
        $search = $this->searchGrid($filters);
        if( count($search) > 0 )
        {
            $retVal = $this->update();
        }
        else
        {
            $retVal = $this->insert();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM fin.invoicenegociationconfig
                      WHERE operation = ?';

        $params = array();
        $params[] = $this->operation;
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->operation = null;
        }

        return $result;
    }

    public function duplicate()
    {
        //Não Utilizado
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT financeInformationId
                  FROM fin.invoicenegociationconfig';

        $params = array();
        foreach ( (array)$filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ?';
            $params[] = $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new FinInvoiceNegociationConfig($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchGrid($filters, $asObj = false)
    {
        $sql = 'SELECT  operation,
                        financeinformationid,
                        bankaccountid,
                        operationid,
                        costcenterid,
                        policyid,
                        parcelsnumber,
                        minValueForFinesAndInterestRelease,
                        maxValueForNonAdmins,
                        negotiationFee,
                        maturityDays,
                        percentValueEntry
                  FROM fin.invoicenegociationconfig';
        
        $params = array();
        
        if ( $filters->operation )
        {
            $where .= ' AND operation = ?';
            $params[] = strtoupper($filters->operation);
        }
        if ( $filters->financeInformationId )
        {
            $where .= ' AND financeInformationId = ?';
            $params[] = $filters->financeInformationId;
        }
        if ( $filters->bankAccountId )
        {
            $where .= ' AND bankAccountId = ?';
            $params[] = $filters->bankAccountId;
        }
        if ( $filters->operationid )
        {
            $where .= ' AND operationid = ?';
            $params[] = $filters->operationid;
        }
        if ( $filters->costCenterId )
        {
            $where .= ' AND costCenterId = ?';
            $params[] = $filters->costCenterId;
        }
        if ( $filters->policyId )
        {
            $where .= ' AND policyId = ?';
            $params[] = $filters->policyId;
        }
        if ( $filters->parcelsNumber )
        {
            $where .= ' AND parcelsNumber = ?';
            $params[] = $filters->parcelsNumber;
        }
        if ( $filters->minValueForFinesAndInterestRelease )
        {
            $where .= ' AND minValueForFinesAndInterestRelease = ?';
            $params[] = $filters->minValueForFinesAndInterestRelease;
        }
        if ( $filters->maxValueForNonAdmins )
        {
            $where .= ' AND maxValueForNonAdmins = ?';
            $params[] = $filters->maxValueForNonAdmins;
        }
        if ( $filters->negotiationFee )
        {
            $where .= ' AND negotiationFee = ?';
            $params[] = $filters->negotiationFee;
        }
        if ( $filters->maturityDays )
        {
            $where .= ' AND maturityDays = ?';
            $params[] = $filters->maturityDays;
        }
        if ( $filters->percentValueEntry )
        {
            $where .= ' AND percentValueEntry = ?';
            $params[] = $filters->percentValueEntry;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY 1,2';
        }

        $result = SDatabase::query($sql, $params);
        
        $cols = array(
            "operation",
            "financeinformationid",
            "bankaccountid",
            "operationid",
            "costcenterid",
            "policyid",
            "parcelsnumber",
            "minValueForFinesAndInterestRelease",
            "maxValueForNonAdmins",
            "negotiationFee",
            "maturityDays",
            "percentValueEntry"
        );
        
        return $asObj ? SAGU::resultToObject($result, $cols) : $result;
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT  operation,
                        financeinformationid,
                        bankaccountid,
                        operationid,
                        costcenterid,
                        policyid,
                        parcelsnumber,
                        minValueForFinesAndInterestRelease,
                        maxValueForNonAdmins,
                        negotiationFee,
                        maturityDays,
                        percentValueEntry
                  FROM fin.invoicenegociationconfig
                 WHERE operation = ?';

        $params = array();
        $params[] = $this->operation;

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Nenhum registro encontrado com o código @1.', $module, $this->financeInformationId));
        }

        list (  $this->operation,
                $this->financeInformationId,
                $this->bankAccountId,
                $this->operationId,
                $this->costCenterId,
                $this->policyId,
                $this->parcelsNumber,
                $this->minValueForFinesAndInterestRelease,
                $this->maxValueForNonAdmins,
                $this->negotiationFee,
                $this->maturityDays,
                $this->percentValueEntry) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'INSERT INTO fin.invoicenegociationconfig
                           (bankaccountid,
                            operationid,
                            costcenterid,
                            policyid,
                            parcelsnumber,
                            minValueForFinesAndInterestRelease,
                            maxValueForNonAdmins,
                            negotiationFee,
                            maturityDays,
                            operation,
                            percentValueEntry)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';

        $params = array();
        $params[] = $this->bankAccountId;
        $params[] = $this->operationId;
        $params[] = $this->costCenterId;
        $params[] = $this->policyId;
        $params[] = $this->parcelsNumber;
        $params[] = $this->minValueForFinesAndInterestRelease;
        $params[] = $this->maxValueForNonAdmins;
        $params[] = $this->negotiationFee;
        $params[] = $this->maturityDays;
        $params[] = $this->operation;
        $params[] = $this->percentValueEntry;

        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE fin.invoicenegociationconfig
                   SET bankaccountid = ?,
                        operationid = ?,
                        costcenterid = ?,
                        policyid = ?,
                        parcelsnumber = ?,
                        minValueForFinesAndInterestRelease = ?,
                        maxValueForNonAdmins = ?,
                        negotiationFee = ?,
                        maturityDays = ?,
                        financeInformationId = ?,
                        percentValueEntry = ?
                  WHERE operation = ?';

        $params = array();
        $params[] = $this->bankAccountId;
        $params[] = $this->operationId;
        $params[] = $this->costCenterId;
        $params[] = $this->policyId;
        $params[] = $this->parcelsNumber;
        $params[] = $this->minValueForFinesAndInterestRelease;
        $params[] = $this->maxValueForNonAdmins;
        $params[] = $this->negotiationFee;
        $params[] = $this->maturityDays;
        $params[] = $this->financeInformationId;
        $params[] = $this->percentValueEntry;
        $params[] = $this->operation;

        return SDatabase::execute($sql, $params);
    }
    
    /**
     * Obtem instancia de classe de configuracao
     *
     * @param string $operation
     * @return FinInvoiceNegociationConfig
     */
    public static function getInstanceByOperation($operation = null)
    {
        $operation = strtoupper($operation);
        $operation = SAGU::NVL($operation, 'A');
        
        $object = $operation == FinNegotiation::ANTECIPACAO ? new FinInvoiceNegociationConfigAntecipation() : new FinInvoiceNegociationConfigNegotiation();
        return $object;
    }
}
?>