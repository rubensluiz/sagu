<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of AdmFluxoAprovacaoProcesso
 *
 * @author augusto
 */
class FinFluxoAprovacaoProcesso extends SType
{
    protected $gravarMaiusculo = false;
    
    /**
     * Constantes equivalentes aos processos.
     */
    const ADIAMENTO_DE_TITULOS    = 1;
    const LANCAMENTOS_DE_TITULOS  = 2;
    const BAIXA_DE_TITULOS        = 3;
    const CONCESSAO_DE_CONVENIOS  = 4;
    const CONCESSAO_DE_INCENTIVOS = 5;
    const REEMISSAO_DE_TITULOS    = 6;
    const EDICAO_DE_CHEQUES       = 7;
    
    /**
     * Constantes de estilos para os diffs.
     */
    const STYLE_REGISTRO_ATUAL  = 'background:#98FB98; padding:2px;';
    const STYLE_REGISTRO_FUTURO = 'background:#87CEEB; padding:2px;';
    const STYLE_TAG_VAI_PARA    = 'color:blue';
    
    /**
     *
     * @var int 
     */
    public $fluxoAprovacaoProcessoId;
    
    /**
     *
     * @var String 
     */
    public $nomedoprocesso;
    
    /**
     *
     * @var String
     */
    public $descricao;
    
    /**
     *
     * @var String
     */
    public $nomeDaTabela;
    
    /**
     *
     * @var String 
     */
    public $nomeDaColunaChavePrimaria;
    
    /**
     *
     * @var String
     */
    public $metodoDosFiltros;
    
    /**
     *
     * @var String
     */
    public $idModuleLink;
    
    /**
     *
     * @var String
     */
    public $actionLink;
    
    /**
     *
     * @var String
     */
    public $functionLink;
    
    /**
     *
     * @var String
     */
    public $metodoDoDiff;
    
    /**
     * Retorna os filtros referentes ao processo.
     * 
     * @param int $finFluxoaprovacaoProcessoId
     * @param String $codigoDoRegistro
     * @return \MVContainer
     */
    public static function obterFiltrosOuDiffDoProcesso($finFluxoaprovacaoProcessoId, $codigoDoRegistro = null, $obterDiff = false, $fluxoSolicitacaoId = null)
    {        
        $finFluxoaprovacaoProcesso = new FinFluxoAprovacaoProcesso($finFluxoaprovacaoProcessoId);
        $return = '';
        
        if ( $obterDiff )
        {
            eval('$return = ' . $finFluxoaprovacaoProcesso->metodoDoDiff . ';');
        }
        else
        {
            eval('$return = ' . $finFluxoaprovacaoProcesso->metodoDosFiltros . ';');
        }
        
        return $return;
    }
    
    /**
     * Retorna os filtros necessários para o processo referentes a títulos.
     * 
     * @param String $codigoDoRegistro
     * @return \MVContainer
     */
    private static function obterFiltrosParaSelecionarUmTitulo($codigoDoRegistro = null)
    {   
        // Título a receber
        $tituloLabel = new MText('tituloLabel', _M('Título') . ':');
        $tituloLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $tituloLabel->setClass('m-caption m-caption-required');
        $tituloLabel->addAttribute('style', 'float:right');
        
        // Se for uma multipla baixa
        if ( strripos($codigoDoRegistro, ',') )
        {
            $codigoDoRegistro = str_replace(',', ', ', $codigoDoRegistro);
            $titulo = new MText('exibe_codigoDoRegistro', $codigoDoRegistro);
            $hctTitulo = new MHContainer('hctTitulo', array($tituloLabel, $titulo, new SHiddenField('codigoDoRegistro', $codigoDoRegistro)));
            $hctTitulo->addAttribute('style', 'margin-top:5px');
            
            $filtros = new MVContainer('mvContainer', array($hctTitulo));
        }
        else
        {
            // Caso venha um código de registro, deve bloquear a lookup, para isso adicionado na array de related um valor para "buga-la".
            $related = (is_null($codigoDoRegistro)) ? array('invoiceId' => 'codigoDoRegistro') : array('invoiceId' => 'codigoDoRegistro', $codigoDoRegistro);
            $titulo = new MLookupTextField('codigoDoRegistro', $codigoDoRegistro, '', SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'), null, null, 'personId, personName', 'finance', 'ReceivableInvoice', null, $related, true);
            $titulo->addAttribute('style', 'width:56px!important');
            if ( strlen($codigoDoRegistro) > 0 )
            {
                $titulo->setReadOnly(true);
            }
            $hint = new MText('hint', _M('Selecione o registro que deseja processar'), '#287eb0');
            $hint->setClass('m-hint');
            $hint->addAttribute('style', 'margin-top:5px;');
            $hctTitulo = new MHContainer('hctTitulo', array($tituloLabel, $titulo, $hint));
            $hctTitulo->addAttribute('style', 'margin-top:5px');
            $filtros = new MVContainer('mvContainer', array($hctTitulo, self::obterFiltrosParaSelecionarUmaPessoa(false, $codigoDoRegistro)));
        }
        
        return $filtros;
    }
    
    /**
     * Retorna os filtros necessários para o processo referentes a Pessoas.
     * 
     * @param boolean $ePrincipalRegistro
     * @param String $codigoDoRegistro
     * @return \MVContainer
     */
    private static function obterFiltrosParaSelecionarUmaPessoa($ePrincipalRegistro = true, $codigoDoRegistro = null)
    {
        // Pessoa
        $id    = 'personId';
        $value = null;
        $class = 'm-caption';
        $hint  = new SHiddenField('hint');        
        
        if ( $ePrincipalRegistro )
        {
            $id    = 'codigoDoRegistro';
            $value = $codigoDoRegistro;
            $class = 'm-caption m-caption-required';
            $hint = new MText('hint', _M('Selecione o registro que deseja processar'), '#287eb0');
            $hint->setClass('m-hint');
            $hint->addAttribute('style', 'margin-top:5px;');
        }        
        
        $related = (is_null($codigoDoRegistro)) ? array('personId' => $id) : array('personId' => $id, $codigoDoRegistro);
        $pessoaLabel = new MText('pessoaLabel', _M('Pessoa') . ':');
        $pessoaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $pessoaLabel->setClass($class);
        $pessoaLabel->addAttribute('style', 'float:right');
        $pessoa = new MLookupTextField($id, $value, '', SAGU::getParameter('BASIC', 'FIELD_ID_LOOKUP_SIZE'), null, null, 'personName', 'basic', 'Person', null, $related, true);
        $pessoa->addAttribute('style', 'width:56px!important');
        if ( strlen($codigoDoRegistro) > 0 )
        {
            $pessoa->setReadOnly(true);
        }
        $pessoaNome = new MTextField('personName');
        $pessoaNome->setReadOnly(true);
        $pessoaNome->addAttribute('style', 'width:200px');
        $hctPessoa = new MHContainer('hctPessoa', array($pessoaLabel, $pessoa, $pessoaNome, $hint));
        $hctPessoa->addAttribute('style', 'margin-top:5px');
        
        return $hctPessoa;
    }
    
    /**
     * Retorna os filtros necessários para o processo referentes a Contratos.
     * 
     * @param String $codigoDoRegistro
     * @return \MVContainer
     */
    private static function obterFiltrosParaSelecionarUmContrato($codigoDoRegistro = null)
    {   
        $related = (is_null($codigoDoRegistro)) ? array('personId' => 'contractPersonId') : array('personId' => 'contractPersonId', $codigoDoRegistro);
        
        // Pessoa
        $contractPersonLabel = new MText('contractPersonLabel', _M('Pessoa') . ':');
        $contractPersonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractPersonLabel->setClass('m-caption');
        $contractPersonLabel->addAttribute('style', 'float:right');
        $contractPersonId = new MLookupTextField('contractPersonId', null, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('codigoDoRegistro', 'contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), 'academic', 'ActivePersonContract', null, $related, true);
        $contractPersonId->setJsHint(_M('Informe o código da pessoa'));
        if ( is_null($codigoDoRegistro) )
        {
            $contractPersonId->setReadOnly(true);
        }
        $contractPersonName = new MTextField('contractPersonName', null, '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $contractPersonName->setReadOnly(true);
        $contractPersonName->setJsHint(_M('Nome da pessoa'));        
        $hctPerson = new MHContainer('hctContract', array($contractPersonLabel, $contractPersonId, $contractPersonName));
        $hctPerson->setShowLabel(false);
        $hctPerson->addAttribute('style', 'margin-top:5px');

        // Contrato
        $contractCourseLabel = new MText('contractCourseLabel', _M('Contrato') . ':');
        $contractCourseLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $contractCourseLabel->setClass('m-caption m-caption-required');
        $contractCourseLabel->addAttribute('style', 'float:right');
        $contractId = new MLookupTextField('codigoDoRegistro', $codigoDoRegistro, '', SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('contractPersonId', 'contractPersonName', 'contractCourseId', 'contractCourseName', 'contractCourseVersion'), 'academic', 'ActiveContract', null, $related, true);
        $contractId->setJsHint(_M('Informe o código do contrato'));
        $contractId->addAttribute('style', 'width:56px!important');
        if ( is_null($codigoDoRegistro) )
        {
            $contractId->setReadOnly(true);
        }
        $contractCourseId = new MTextField('contractCourseId', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseId->setReadOnly(true);
        $contractCourseId->setJsHint(_M('Código do curso'));
        $contractCourseVersion = new MTextField('contractCourseVersion', null, '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $contractCourseVersion->setReadOnly(true);
        $contractCourseVersion->setJsHint(_M('Versão do curso'));
        $contractCourseName = new MTextField('contractCourseName', null, '', 30);
        $contractCourseName->setReadOnly(true);
        $contractCourseName->setJsHint(_M('Nome do curso'));
        $hint = new MText('hint', _M('Selecione o registro que deseja processar'), '#287eb0');
        $hint->setClass('m-hint');
        $hint->addAttribute('style', 'margin-top:5px;');
        $hctContractCourse = new MHContainer('hctContractCourse', array($contractCourseLabel, $contractId, $contractCourseId, $contractCourseVersion, $contractCourseName, $hint));
        $hctContractCourse->setShowLabel(false);
        $hctContractCourse->addAttribute('style', 'margin-top:5px');
        
        return new MVContainer('mvContainer', array($hctPerson, $hctContractCourse));
    }
    
    /**
     * Retorna diff do registro de adiamento do título, para visualização de quem avalia.
     * 
     * @param int $fluxoSolicitacaoRegistroId
     * @param String $codigoDoRegistro
     * @return \MHContainer
     */
    public static function obterDiffDeAdiamentoDoTitulo($fluxoSolicitacaoId, $codigoDoRegistro)
    {
        $fields[] = new SHiddenField();
        
        $finFluxoSolicitacaoRegistro = new FinFluxoSolicitacaoRegistro();
        $finFluxoSolicitacaoRegistro->fluxosolicitacaoid = $fluxoSolicitacaoId;
        
        if ( $finFluxoSolicitacaoRegistro->popularPeloCodigoDaSolicitacao() )
        {
            $dadosDoRegistroFuturo = json_decode($finFluxoSolicitacaoRegistro->registrodados);
            $dadosDoRegistroAtual  = new FinReceivableInvoice($codigoDoRegistro);
            
            // Título
            $registroLabel = new MText('registroLabel', _M('Título:'));
            $registroLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $registroLabel->setClass('m-caption');
            $registro = new MText('registro', $codigoDoRegistro);
            $registro->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $fields[] = new MHContainer('registroHc', array($registroLabel, $registro));
            
            // Data de vencimento.
            $vencimentoLabel = new MText('vencimentoLabel', _M('Data de vencimento:'));
            $vencimentoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $vencimentoLabel->setClass('m-caption');
            $vencimento = new MText('vendimento', $dadosDoRegistroAtual->maturityDate);
            $vencimento->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
            $tagVaiPara = new MText('vaiPara', '>>>');
            $tagVaiPara->addAttribute('style', self::STYLE_TAG_VAI_PARA);
            $novoVencimento = new MText('vendimento', $dadosDoRegistroFuturo->maturityDate);
            $novoVencimento->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $fields[] = new MHContainer('registro', array($vencimentoLabel, $vencimento, $tagVaiPara, $novoVencimento));
        }
        
        return new MVContainer('mvContainerDados', $fields);
    }
    
    /**
     * Retorna diff do registro de lancamento efetuado no título, para visualização de quem avalia.
     * 
     * @param int $fluxoSolicitacaoRegistroId
     * @param String $codigoDoRegistro
     * @return \MHContainer
     */
    public static function obterDiffDeLancamentoNoTitulo($fluxoSolicitacaoId, $codigoDoRegistro)
    {
        $fields[] = new SHiddenField();
        
        $finFluxoSolicitacaoRegistro = new FinFluxoSolicitacaoRegistro();
        $finFluxoSolicitacaoRegistro->fluxosolicitacaoid = $fluxoSolicitacaoId;
        
        if ( $finFluxoSolicitacaoRegistro->popularPeloCodigoDaSolicitacao() )
        {
            $dadosDoRegistroFuturo = json_decode($finFluxoSolicitacaoRegistro->registrodados);
            
            $tagVaiPara = new MText('vaiPara', '>>>');
            $tagVaiPara->addAttribute('style', self::STYLE_TAG_VAI_PARA);
            
            $registroLabel = new MText('registroLabel', _M('Título:'));
            $registroLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $registroLabel->setClass('m-caption');
            $registro = new MText('registro', $codigoDoRegistro);
            $registro->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $fields[] = new MHContainer('registroHc', array($registroLabel, $registro));
            
            // Lançamento
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $busEntry = new BusinessFinanceBusEntry();
                $dadosDoRegistroAtual  = $busEntry->getEntry($dadosDoRegistroFuturo->entryId);
                $lancamentoLabel = new MText('lancamentoLabel', _M('Lançamento:'));
                $lancamentoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $lancamentoLabel->setClass('m-caption');
                $lancamento = new MText('lancamento', $dadosDoRegistroAtual->entryId);
                $lancamento->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
                $fields[] = new MHContainer('lancamentoHc', array($lancamentoLabel, $lancamento));
            }
            
            // Operação do lançamento
            $operacaoLabel = new MText('operacaoLabel', _M('Operação:'));
            $operacaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $operacaoLabel->setClass('m-caption');
            $operacaoHC[] = $operacaoLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $finOperation = new FinOperation($dadosDoRegistroAtual->operationId);
                $operacaoAtual = new MText('operacaoAtual', $dadosDoRegistroAtual->operationId . ' - ' . $finOperation->description);
                $operacaoAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $operacaoHC[] = $operacaoAtual;
                $operacaoHC[] = $tagVaiPara;
            }
            $finOperation = new FinOperation($dadosDoRegistroFuturo->operationId);
            $operacao = new MText('operacao', $dadosDoRegistroFuturo->operationId . ' - ' . $finOperation->description);
            $operacao->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $operacaoHC[] = $operacao;
            $fields[] = new MHContainer('operacaoHc', $operacaoHC);
            
            // Tipo de movimentação.
            $movimentacaoLabel = new MText('movimentacaoLabel', _M('Tipo de movimentação:'));
            $movimentacaoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $movimentacaoLabel->setClass('m-caption');
            $movimentacaoHC[] = $movimentacaoLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $value = ($dadosDoRegistroAtual->movement != 'none') ? ( ($dadosDoRegistroAtual->movement == 'counter') ? 'DE CAIXA' : 'BANCÁRIA' ) : 'NENHUMA';
                $movimentacaoAtual = new MText('movimentacaoAtual', $value);
                $movimentacaoAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $movimentacaoHC[] = $movimentacaoAtual;
                $movimentacaoHC[] = $tagVaiPara;
            }
            $value = ($dadosDoRegistroFuturo->movement != 'none') ? ( ($dadosDoRegistroFuturo->movement == 'counter') ? 'DE CAIXA' : 'BANCÁRIA' ) : 'NENHUMA';
            $movimentacao = new MText('movimentacao', $value);
            $movimentacao->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $movimentacaoHC[] = $movimentacao;
            $fields[] = new MHContainer('movimentacaoHc', $movimentacaoHC);
            
            // Comentários.
            $comentarioLabel = new MText('comentarioLabel', _M('Comentários:'));
            $comentarioLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $comentarioLabel->setClass('m-caption');
            $comentarioHC[] = $comentarioLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $comentarioAtual = new MText('comentarioAtual', $dadosDoRegistroAtual->comments);
                $comentarioAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $comentarioHC[] = $comentarioAtual;
                $comentarioHC[] = $tagVaiPara;
            }
            $comentario = new MText('comentario', $dadosDoRegistroFuturo->comments);
            $comentario->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $comentarioHC[] = $comentario;
            $fields[] = new MHContainer('comentarioHc', $comentarioHC);
            
            // Data do lançamento.
            $dateLabel = new MText('dateLabel', _M('Data do lançamento:'));
            $dateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $dateLabel->setClass('m-caption');
            $dataHC[] = $dateLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $dataAtual = new MText('dataAtual', $dadosDoRegistroAtual->entryDate);
                $dataAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $dataHC[] = $dataAtual;
                $dataHC[] = $tagVaiPara;
            }
            $date = new MText('date', $dadosDoRegistroFuturo->entryDate);
            $date->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $dataHC[] = $date;
            $fields[] = new MHContainer('dateHc', $dataHC);
            
            // Valor do lançamento.
            $valorLabel = new MText('valorLabel', _M('Valor:'));
            $valorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $valorLabel->setClass('m-caption');
            $valorHC[] = $valorLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $valorAtual = new MText('valorAtual', $dadosDoRegistroAtual->value);
                $valorAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $valorHC[] = $valorAtual;
                $valorHC[] = $tagVaiPara;
            }
            $valor = new MText('valor', $dadosDoRegistroFuturo->value);
            $valor->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $valorHC[] = $valor;
            $fields[] = new MHContainer('valorHc', $valorHC);
            
            // Centro de custos
            $custoLabel = new MText('custoLabel', _M('Centro de custo:'));
            $custoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $custoLabel->setClass('m-caption');
            $custoHC[] = $custoLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $businessCostCenter = new BusinessAccountancyBusCostCenter();
                $dataCostCenter     = $businessCostCenter->getCostCenter($dadosDoRegistroAtual->costCenterId);
                $custoAtual = new MText('custoAtual', $dadosDoRegistroAtual->costCenterId . ' - ' . $dataCostCenter->description);
                $custoAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $custoHC[] = $custoAtual;
                $custoHC[] = $tagVaiPara;
            }
            $businessCostCenter = new BusinessAccountancyBusCostCenter();
            $dataCostCenter     = $businessCostCenter->getCostCenter($dadosDoRegistroFuturo->costCenterId);
            $custo = new MText('custo', $dadosDoRegistroFuturo->costCenterId . ' - ' . $dataCostCenter->description);
            $custo->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $custoHC[] = $custo;
            $fields[] = new MHContainer('custoHc', $custoHC);
        }
        
        return new MVContainer('mvContainerDados', $fields);
    }
    
    /**
     * Retorna diff do registro de baixa do título, para visualização de quem avalia.
     * 
     * @param int $fluxoSolicitacaoRegistroId
     * @param String $codigoDoRegistro
     * @return \MHContainer
     */
    public static function obterDiffDeBaixaDoTitulo($fluxoSolicitacaoId, $codigoDoRegistro)
    {
        $fields[] = new SHiddenField();
        
        $finFluxoSolicitacaoRegistro = new FinFluxoSolicitacaoRegistro();
        $finFluxoSolicitacaoRegistro->fluxosolicitacaoid = $fluxoSolicitacaoId;
        
        if ( $finFluxoSolicitacaoRegistro->popularPeloCodigoDaSolicitacao() )
        {
            $titulos = explode(', ', $codigoDoRegistro);
            
            foreach ( $titulos as $titulo )
            {
                $dadosDoRegistroFuturo = json_decode($finFluxoSolicitacaoRegistro->registrodados);
                
                // Título
                $dadosDoRegistroAtual  = new FinReceivableInvoice($titulo);
                $registroLabel = new MText('registroLabel', _M('Título:'));
                $registroLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $registroLabel->setClass('m-caption');
                $registro = new MText('registro', $titulo);
                $registro->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
                
                // Valor
                $valorLabel = new MText('valorLabel', _M('Valor:'));
                $valorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $valorLabel->setClass('m-caption');
                $valor = new MText('valor', $dadosDoRegistroAtual->balance);
                $valor->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $tagVaiPara = new MText('vaiPara', '>>>');
                $tagVaiPara->addAttribute('style', self::STYLE_TAG_VAI_PARA);
                $valorF = new MText('valorF', '0.00');
                $valorF->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
                
                $fields[] = new MHContainer('registroHc', array($registroLabel, $registro, $valorLabel, $valor, $tagVaiPara, $valorF));
            }
        }
        
        return new MVContainer('mvContainerDados', $fields);
    }
    
    /**
     * Retorna diff do registro de concessão de convênio, para visualização de quem avalia.
     * 
     * @param int $fluxoSolicitacaoRegistroId
     * @param String $codigoDoRegistro
     * @return \MHContainer
     */
    public static function obterDiffDeConcessaoDeConvenio($fluxoSolicitacaoId, $codigoDoRegistro)
    {
        $fields[] = new SHiddenField();
        
        $finFluxoSolicitacaoRegistro = new FinFluxoSolicitacaoRegistro();
        $finFluxoSolicitacaoRegistro->fluxosolicitacaoid = $fluxoSolicitacaoId;
        
        if ( $finFluxoSolicitacaoRegistro->popularPeloCodigoDaSolicitacao() )
        {
            $dadosDoRegistroFuturo = json_decode($finFluxoSolicitacaoRegistro->registrodados);
            
            // Convênio da pessoa.
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $tagVaiPara = new MText('vaiPara', '>>>');
                $tagVaiPara->addAttribute('style', self::STYLE_TAG_VAI_PARA);
                $busConvenantPerson = new BusinessFinanceBusConvenantPerson();
                $dadosDoRegistroAtual = $busConvenantPerson->getConvenantPerson($dadosDoRegistroFuturo->convenantPersonId);
                $convLabel = new MText('convLabel', _M('Convênio da pessoa:'));
                $convLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $convLabel->setClass('m-caption');
                $conv = new MText('conv', $dadosDoRegistroAtual->convenantPersonId);
                $conv->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
                $fields[] = new MHContainer('convHc', array($convLabel, $conv));
            }
            
            // Convênio.
            $convenantLabel = new MText('convenantLabel', _M('Convênio:'));
            $convenantLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $convenantLabel->setClass('m-caption');
            $convenantHC[] = $convenantLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $busConvenant = new BusinessFinanceBusConvenant();
                $convenantData = $busConvenant->getConvenant($dadosDoRegistroAtual->convenantId);
                $convenantAtual = new MText('convenantAtual', $dadosDoRegistroAtual->convenantId . ' - ' . $convenantData->description);
                $convenantAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $convenantHC[] = $convenantAtual;
                $convenantHC[] = $tagVaiPara;
            }
            $busConvenant = new BusinessFinanceBusConvenant();
            $convenantData = $busConvenant->getConvenant($dadosDoRegistroFuturo->convenantId);
            $convenant = new MText('convenant', $dadosDoRegistroFuturo->convenantId . ' - ' . $convenantData->description);
            $convenant->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $convenantHC[] = $convenant;
            $fields[] = new MHContainer('convenantHc', $convenantHC);
            
            // Pessoa.
            $pessoaLabel = new MText('pessoaLabel', _M('Pessoa:'));
            $pessoaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $pessoaLabel->setClass('m-caption');
            $pessoaHC[] = $pessoaLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $busPerson = new BusinessBasicBusPerson();
                $pessoaData = $busPerson->getPerson($dadosDoRegistroAtual->personId);
                $pessoaAtual = new MText('pessoaAtual', $dadosDoRegistroAtual->personId . ' - ' . $pessoaData->name);
                $pessoaAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $pessoaHC[] = $pessoaAtual;
                $pessoaHC[] = $tagVaiPara;
            }
            $busPerson = new BusinessBasicBusPerson();
            $pessoaData = $busPerson->getPerson($dadosDoRegistroFuturo->personId);
            $pessoa = new MText('pessoa', $dadosDoRegistroFuturo->personId . ' - ' . $pessoaData->name);
            $pessoa->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $pessoaHC[] = $pessoa;
            $fields[] = new MHContainer('pessoatHc', $pessoaHC);
            
            // Contrato.
            $contratoLabel = new MText('contratoLabel', _M('Contrato:'));
            $contratoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contratoLabel->setClass('m-caption');
            $contratoHC[] = $contratoLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $contratoAtual = new MText('contratoAtual', $dadosDoRegistroAtual->contractId);
                $contratoAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $contratoHC[] = $contratoAtual;
                $contratoHC[] = $tagVaiPara;
            }
            $contrato = new MText('contrato', $dadosDoRegistroFuturo->contractId);
            $contrato->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $contratoHC[] = $contrato;
            $fields[] = new MHContainer('contratoHc', $contratoHC);
            
            // Data inicial.
            $beginDateLabel = new MText('beginDateLabel', _M('Data inicial:'));
            $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $beginDateLabel->setClass('m-caption');
            $beginDateHC[] = $beginDateLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $beginDateAtual = new MText('beginDateAtual', $dadosDoRegistroAtual->beginDate);
                $beginDateAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $beginDateHC[] = $beginDateAtual;
                $beginDateHC[] = $tagVaiPara;
            }
            $beginDate = new MText('beginDate', $dadosDoRegistroFuturo->beginDate);
            $beginDate->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $beginDateHC[] = $beginDate;
            $fields[] = new MHContainer('beginDateHc', $beginDateHC);
            
            // Data final.
            $endDateLabel = new MText('endDateLabel', _M('Data final:'));
            $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $endDateLabel->setClass('m-caption');
            $endDateHC[] = $endDateLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $endDateAtual = new MText('endDateAtual', $dadosDoRegistroAtual->endDate);
                $endDateAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $endDateHC[] = $endDateAtual;
                $endDateHC[] = $tagVaiPara;
            }
            $endDate = new MText('endDate', $dadosDoRegistroFuturo->endDate);
            $endDate->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $endDateHC[] = $endDate;
            $fields[] = new MHContainer('endDateHc', $endDateHC);
        }
        
        return new MVContainer('mvContainerDados', $fields);
    }
    
    /**
     * Retorna diff do registro de concessão de incentívo, para visualização de quem avalia.
     * 
     * @param int $fluxoSolicitacaoRegistroId
     * @param String $codigoDoRegistro
     * @return \MHContainer
     */
    public static function obterDiffDeConcessaoDeIncentivo($fluxoSolicitacaoId, $codigoDoRegistro)
    {
        $fields[] = new SHiddenField();
        
        $finFluxoSolicitacaoRegistro = new FinFluxoSolicitacaoRegistro();
        $finFluxoSolicitacaoRegistro->fluxosolicitacaoid = $fluxoSolicitacaoId;
        
        if ( $finFluxoSolicitacaoRegistro->popularPeloCodigoDaSolicitacao() )
        {
            $dadosDoRegistroFuturo = json_decode($finFluxoSolicitacaoRegistro->registrodados);
            
            // Incentivo da pessoa.
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $tagVaiPara = new MText('vaiPara', '>>>');
                $tagVaiPara->addAttribute('style', self::STYLE_TAG_VAI_PARA);
                $busIncentive = new BusinessFinanceBusIncentive();
                $dadosDoRegistroAtual = $busIncentive->getIncentive($dadosDoRegistroFuturo->incentiveId);
                $incentLabel = new MText('incentLabel', _M('Incentivo da pessoa:'));
                $incentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $incentLabel->setClass('m-caption');
                $incent = new MText('incent', $dadosDoRegistroAtual->incentiveId);
                $incent->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
                $fields[] = new MHContainer('convHc', array($incentLabel, $incent));
            }
            
            // Contrato.
            $contratoLabel = new MText('contratoLabel', _M('Contrato:'));
            $contratoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $contratoLabel->setClass('m-caption');
            $contratoHC[] = $contratoLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $busContract = new BusinessAcademicBusContract();
                $contratoData = $busContract->getContract($dadosDoRegistroAtual->contractId);
                $busPerson = new BusinessBasicBusPerson();
                $pessoaData = $busPerson->getPerson($contratoData->personId);
                $contratoAtual = new MText('contratoAtual', $dadosDoRegistroAtual->contractId . ' - ' . $pessoaData->name);
                $contratoAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $contratoHC[] = $contratoAtual;
                $contratoHC[] = $tagVaiPara;
            }
            $busContract = new BusinessAcademicBusContract();
            $contratoData = $busContract->getContract($dadosDoRegistroFuturo->contractId);
            $busPerson = new BusinessBasicBusPerson();
            $pessoaData = $busPerson->getPerson($contratoData->personId);
            $contrato = new MText('contrato', $dadosDoRegistroFuturo->contractId . ' - ' . $pessoaData->name);
            $contrato->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $contratoHC[] = $contrato;
            $fields[] = new MHContainer('contratoHc', $contratoHC);
            
            // Tipo de incentivo
            $tipoIncentLabel = new MText('tipoIncentLabel', _M('Tipo de incentivo:'));
            $tipoIncentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $tipoIncentLabel->setClass('m-caption');
            $tipoIncentHC[] = $tipoIncentLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $busIncentiveType = new BusinessFinanceBusIncentiveType();
                $tipoIncentData = $busIncentiveType->getIncentiveType($dadosDoRegistroAtual->incentiveTypeId);
                $tipoIncentAtual = new MText('tipoIncentAtual', $dadosDoRegistroAtual->incentiveTypeId . ' - ' . $tipoIncentData->description);
                $tipoIncentAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $tipoIncentHC[] = $tipoIncentAtual;
                $tipoIncentHC[] = $tagVaiPara;
            }
            $busIncentiveType = new BusinessFinanceBusIncentiveType();
            $tipoIncentData = $busIncentiveType->getIncentiveType($dadosDoRegistroFuturo->incentiveTypeId);
            $tipoIncent = new MText('tipoIncent', $dadosDoRegistroFuturo->incentiveTypeId . ' - ' . $tipoIncentData->description);
            $tipoIncent->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $tipoIncentHC[] = $tipoIncent;
            $fields[] = new MHContainer('tipoIncentHc', $tipoIncentHC);
            
            // Patrocinador
            $patroLabel = new MText('patroLabel', _M('Patrocinador:'));
            $patroLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $patroLabel->setClass('m-caption');
            $patroHC[] = $patroLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $busPerson = new BusinessBasicBusPerson();
                $patroData = $busPerson->getPerson($dadosDoRegistroAtual->supporterId);
                $patroAtual = new MText('patroAtual', $dadosDoRegistroAtual->supporterId ? $dadosDoRegistroAtual->supporterIdId . ' - ' . $patroData->name : null);
                $patroAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $patroHC[] = $patroAtual;
                $patroHC[] = $tagVaiPara;
            }
            $busPerson = new BusinessBasicBusPerson();
            $patroData = $busPerson->getPerson($dadosDoRegistroFuturo->supporterId);
            $patro = new MText('patro', $dadosDoRegistroFuturo->supporterId ? $dadosDoRegistroFuturo->supporterId . ' - ' . $pessoaData->name : null);
            $patro->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $patroHC[] = $patro;
            $fields[] = new MHContainer('patroHc', $patroHC);
            
            // Data inicial.
            $startDateLabel = new MText('startDateLabel', _M('Data inicial:'));
            $startDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $startDateLabel->setClass('m-caption');
            $startDateHC[] = $startDateLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $startDateAtual = new MText('startDateAtual', $dadosDoRegistroAtual->startDate);
                $startDateAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $startDateHC[] = $startDateAtual;
                $startDateHC[] = $tagVaiPara;
            }
            $startDate = new MText('startDate', $dadosDoRegistroFuturo->startDate);
            $startDate->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $startDateHC[] = $startDate;
            $fields[] = new MHContainer('startDateHc', $startDateHC);
            
            // Data final.
            $endDateLabel = new MText('endDateLabel', _M('Data final:'));
            $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $endDateLabel->setClass('m-caption');
            $endDateHC[] = $endDateLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $endDateAtual = new MText('endDateAtual', $dadosDoRegistroAtual->endDate);
                $endDateAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $endDateHC[] = $endDateAtual;
                $endDateHC[] = $tagVaiPara;
            }
            $endDate = new MText('endDate', $dadosDoRegistroFuturo->endDate);
            $endDate->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $endDateHC[] = $endDate;
            $fields[] = new MHContainer('endDateHc', $endDateHC);
            
            // Valor é percentual.
            $valorPercLabel = new MText('valorPercLabel', _M('Valor é percentual:'));
            $valorPercLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $valorPercLabel->setClass('m-caption');
            $valorPercHC[] = $valorPercLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $valorPercAtual = new MText('valorPercAtual', ($dadosDoRegistroAtual->valueIsPercent == DB_TRUE) ? 'SIM' : 'NÃO');
                $valorPercAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $valorPercHC[] = $valorPercAtual;
                $valorPercHC[] = $tagVaiPara;
            }
            $valorPerc = new MText('valorPerc', ($dadosDoRegistroFuturo->valueIsPercent == DB_TRUE) ? 'SIM' : 'NÃO');
            $valorPerc->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $valorPercHC[] = $valorPerc;
            $fields[] = new MHContainer('valorPercHc', $valorPercHC);
            
            // Valor.
            $valorLabel = new MText('valorLabel', _M('Valor:'));
            $valorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $valorLabel->setClass('m-caption');
            $valorHC[] = $valorLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $valorAtual = new MText('valorAtual', $dadosDoRegistroAtual->value);
                $valorAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $valorHC[] = $valorAtual;
                $valorHC[] = $tagVaiPara;
            }
            $valor = new MText('valor', $dadosDoRegistroFuturo->value);
            $valor->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $valorHC[] = $valor;
            $fields[] = new MHContainer('valorHc', $valorHC);
            
            // Aglutinar.
            $aglutinarLabel = new MText('aglutinarLabel', _M('Aglutinar:'));
            $aglutinarLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $aglutinarLabel->setClass('m-caption');
            $aglutinarHC[] = $aglutinarLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $aglutinarAtual = new MText('aglutinarAtual', ($dadosDoRegistroAtual->agglutinate == DB_TRUE) ? 'SIM' : 'NÃO');
                $aglutinarAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $aglutinarHC[] = $aglutinarAtual;
                $aglutinarHC[] = $tagVaiPara;
            }
            $aglutinar = new MText('aglutinar', ($dadosDoRegistroFuturo->agglutinate == DB_TRUE) ? 'SIM' : 'NÃO');
            $aglutinar->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $aglutinarHC[] = $aglutinar;
            $fields[] = new MHContainer('aglutinarHc', $aglutinarHC);
            
            // Centro de custos
            $custoLabel = new MText('custoLabel', _M('Centro de custo:'));
            $custoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $custoLabel->setClass('m-caption');
            $custoHC[] = $custoLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $businessCostCenter = new BusinessAccountancyBusCostCenter();
                $dataCostCenter     = $businessCostCenter->getCostCenter($dadosDoRegistroAtual->costCenterId);
                $custoAtual = new MText('custoAtual', $dadosDoRegistroAtual->costCenterId . ' - ' . $dataCostCenter->description);
                $custoAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $custoHC[] = $custoAtual;
                $custoHC[] = $tagVaiPara;
            }
            $businessCostCenter = new BusinessAccountancyBusCostCenter();
            $dataCostCenter     = $businessCostCenter->getCostCenter($dadosDoRegistroFuturo->costCenterId);
            $custo = new MText('custo', $dadosDoRegistroFuturo->costCenterId . ' - ' . $dataCostCenter->description);
            $custo->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $custoHC[] = $custo;
            $fields[] = new MHContainer('custoHc', $custoHC);
            
            // Data de cancelamento.
            $cancelDateLabel = new MText('cancelDateLabel', _M('Data de cancelamento:'));
            $cancelDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $cancelDateLabel->setClass('m-caption');
            $cancelDateHC[] = $cancelDateLabel;
            if ( $dadosDoRegistroFuturo->registroFunction == SForm::FUNCTION_UPDATE )
            {
                $cancelDateAtual = new MText('cancelDateAtual', $dadosDoRegistroAtual->cancellationDate);
                $cancelDateAtual->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
                $cancelDateHC[] = $cancelDateAtual;
                $cancelDateHC[] = $tagVaiPara;
            }
            $cancelDate = new MText('cancelDate', $dadosDoRegistroFuturo->cancellationDate);
            $cancelDate->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $cancelDateHC[] = $cancelDate;
            $fields[] = new MHContainer('cancelDateHc', $cancelDateHC);
        }
        
        return new MVContainer('mvContainerDados', $fields);
    }
    
    /**
     * Retorna diff do registro reemissão de títulos, para visualização de quem avalia.
     * 
     * @param int $fluxoSolicitacaoId
     * @param String $codigoDoRegistro
     * @return \MHContainer
     */
    public static function obterDiffDeReemissaoDeTitulo($fluxoSolicitacaoId, $codigoDoRegistro)
    {        
        $fields[] = new SHiddenField();
        
        $finFluxoSolicitacaoRegistro = new FinFluxoSolicitacaoRegistro();
        $finFluxoSolicitacaoRegistro->fluxosolicitacaoid = $fluxoSolicitacaoId;
        
        if ( $finFluxoSolicitacaoRegistro->popularPeloCodigoDaSolicitacao() )
        {
            // Título
            $registroLabel = new MText('registroLabel', _M('Título:'));
            $registroLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $registroLabel->setClass('m-caption');
            $registro = new MText('registro', $codigoDoRegistro);
            $registro->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $fields[] = new MHContainer('registroHc', array($registroLabel, $registro));
            
            // Info
            $infoLabel = new MText('infoLabel', _M('Informação:'));
            $infoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $infoLabel->setClass('m-caption');
            $infoMessage .= "Este título será fechado por um lançamento cuja operação é de transferência de saldo.<br>Será criado um novo título que receberá um lançamento de operação de reemissão de títulos,<br>recebendo o valor do título fechado junto de outro lançamento contendo os juros e multas.";
            $info = new MText('info', $infoMessage);
            $info->addAttribute('style', self::STYLE_REGISTRO_FUTURO . 'text-align:left!important;');
            $fields[] = new MHContainer('infoHc', array($infoLabel, $info));
        }
        
        return new MVContainer('mvContainerDados', $fields);
    }
    
    /**
     * Lista os processos para popular combobox.
     * 
     * @return array
     */
    public function listarProcessos($todos = false, $somenteComConfiguracao = false)
    {
        $subselect = new MSQL();
        $subselect->setColumns("DISTINCT fluxoaprovacaoprocessoid")
                  ->setTables("finfluxoaprovacaoconfiguracao");
        
        $msql = new MSQL();
        $msql->setColumns("fluxoaprovacaoprocessoid, nomedoprocesso || ' - ' || descricao");
        
        if ( !$todos )
        {
            if ( !$somenteComConfiguracao )
            {
                $msql->setWhere("fluxoaprovacaoprocessoid NOT IN ({$subselect->select()})");
            }
            else
            {
                $msql->setWhere("fluxoaprovacaoprocessoid IN ({$subselect->select()})");
            }
        }
        
        $msql->setOrderBy('nomedoprocesso');
        
        return $this->findList($msql);
    }
    
    /**
     * Retorna o link do registro conforme configurado no registro do processo. 
     * 
     * @param int $fluxoAprovacaoProcessoId
     * @param String $codigoDoRegistroString
     * @return String
     */
    public function gerarLinkDoRegistro($codigoDoRegistroString)
    {
        $MIOLO   = MIOLO::getInstance();
        $codigos = explode(', ', $codigoDoRegistroString);
        
        foreach ( $codigos as $codigoDoRegistro )
        {            
            $args = array(
                'function' => $this->functionLink,
                $this->nomeDaColunaChavePrimaria => $codigoDoRegistro
            );
            $href = $MIOLO->getActionURL($this->idModuleLink, $this->actionLink, null, $args);

            $linkDoRegistro = new MLink('linkDoRegistro_' . $codigoDoRegistro, $codigoDoRegistro, $href, null, '_blank');
            $link .= $linkDoRegistro->generate() . ', ';
        }
        
        return substr($link, 0, -2);
    }
    
    public static function obterFiltrosParaSelecionarUmCheque($codigoDoRegistro)
    {
        $finCheque = new FinCheque($codigoDoRegistro);
        
        // Título a receber
        $tituloLabel = new MText('tituloLabel', _M('Cód. Cheque / Nº do cheque') . ':');
        $tituloLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $tituloLabel->setClass('m-caption m-caption-required');
        $tituloLabel->addAttribute('style', 'float:right');
        
        $cheque = new MText('exibe_codigoDoRegistro', $finCheque->chequeId . ' / ' . $finCheque->numeroCheque);
        $hctCheque = new MHContainer('hctTitulo', array($tituloLabel, $cheque, new SHiddenField('codigoDoRegistro', $codigoDoRegistro)));
        $hctCheque->addAttribute('style', 'margin-top:5px');

        $filtros = new MVContainer('mvContainer', array($hctCheque));
        
        return $filtros;
    }
    
    public static function obterDiffDeEdicaoDeCheque($fluxoSolicitacaoId, $codigoDoRegistro)
    {
        $fields[] = new SHiddenField();
        
        $finFluxoSolicitacaoRegistro = new FinFluxoSolicitacaoRegistro();
        $finFluxoSolicitacaoRegistro->fluxosolicitacaoid = $fluxoSolicitacaoId;
        
        if ( $finFluxoSolicitacaoRegistro->popularPeloCodigoDaSolicitacao() )
        {
            $dadosDoRegistroFuturo = json_decode($finFluxoSolicitacaoRegistro->registrodados);
            $dadosDoRegistroAtual  = new FinCheque($codigoDoRegistro);
            $finMovimentacoes = new FinMovimentacaoCheque();
            $finMovimentacoes->chequeId = $dadosDoRegistroAtual->chequeId;
            $movimentacoesAtuais = $finMovimentacoes->findMany();
            
            // Cheque
            $registroLabel = new MText('registroLabel', _M('Cód. cheque:'));
            $registroLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $registroLabel->setClass('m-caption');
            $registro = new MText('registro', $codigoDoRegistro);
            $registro->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $fields[] = new MHContainer('registroHc', array($registroLabel, $registro));
            
            // Numero cheque
            $registroLabel = new MText('registroLabel', _M('Num. cheque:'));
            $registroLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $registroLabel->setClass('m-caption');
            $registro = new MText('registro', $dadosDoRegistroFuturo->numeroCheque);
            $registro->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $fields[] = new MHContainer('registroHc', array($registroLabel, $registro));
            
            // Data do cheque.
            $dataChequeLabel = new MText('dataChequeLabel', _M('Data do cheque:'));
            $dataChequeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $dataChequeLabel->setClass('m-caption');
            $dataCheque = new MText('dataCheque', $dadosDoRegistroAtual->data);
            $dataCheque->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
            $tagVaiPara = new MText('vaiPara', '>>>');
            $tagVaiPara->addAttribute('style', self::STYLE_TAG_VAI_PARA);
            $novaData = new MText('dataCheque', $dadosDoRegistroFuturo->data);
            $novaData->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $fields[] = new MHContainer('registro', array($dataChequeLabel, $dataCheque, $tagVaiPara, $novaData));
            
            // Banco.
            $bancoLabel = new MText('bancoLabel', _M('Banco:'));
            $bancoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $bancoLabel->setClass('m-caption');
            $finBank = new FinBank($dadosDoRegistroAtual->bankId);
            $banco = new MText('banco', $dadosDoRegistroAtual->bankId . ' - ' . $finBank->description);
            $banco->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
            $tagVaiPara = new MText('vaiPara', '>>>');
            $tagVaiPara->addAttribute('style', self::STYLE_TAG_VAI_PARA);
            $finBank = new FinBank($dadosDoRegistroFuturo->bankId);
            $novoBanco = new MText('banco', $dadosDoRegistroFuturo->bankId . ' - ' . $finBank->description);
            $novoBanco->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $fields[] = new MHContainer('registro', array($bancoLabel, $banco, $tagVaiPara, $novoBanco));
            
            // Agencia.
            $agenciaLabel = new MText('agenciaLabel', _M('Agência:'));
            $agenciaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $agenciaLabel->setClass('m-caption');
            $agencia = new MText('agencia', $dadosDoRegistroAtual->agencia);
            $agencia->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
            $tagVaiPara = new MText('vaiPara', '>>>');
            $tagVaiPara->addAttribute('style', self::STYLE_TAG_VAI_PARA);
            $novoAgencia = new MText('agencia', $dadosDoRegistroFuturo->agencia);
            $novoAgencia->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $fields[] = new MHContainer('registro', array($agenciaLabel, $agencia, $tagVaiPara, $novoAgencia));
            
            // Valor.
            $valorLabel = new MText('valorLabel', _M('Valor do cheque:'));
            $valorLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $valorLabel->setClass('m-caption');
            $valor = new MText('valor', SAGU::formatNumber($dadosDoRegistroAtual->valorCheque, 2));
            $valor->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
            $tagVaiPara = new MText('vaiPara', '>>>');
            $tagVaiPara->addAttribute('style', self::STYLE_TAG_VAI_PARA);
            $novoValor = new MText('valor', SAGU::formatNumber($dadosDoRegistroFuturo->valorCheque, 2));
            $novoValor->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $fields[] = new MHContainer('registro', array($valorLabel, $valor, $tagVaiPara, $novoValor));
            
            // Tipo.
            $tipos = $dadosDoRegistroAtual->listTiposCheque();
            $tipoLabel = new MText('tipoLabel', _M('Tipo:'));
            $tipoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $tipoLabel->setClass('m-caption');            
            $tipo = new MText('tipo', $dadosDoRegistroAtual->tipo . ' - ' . $tipos[$dadosDoRegistroAtual->tipo]);
            $tipo->addAttribute('style', self::STYLE_REGISTRO_ATUAL);
            $tagVaiPara = new MText('vaiPara', '>>>');
            $tagVaiPara->addAttribute('style', self::STYLE_TAG_VAI_PARA);
            $novoTipo = new MText('tipo', $dadosDoRegistroFuturo->tipo . ' - ' . $tipos[$dadosDoRegistroFuturo->tipo]);
            $novoTipo->addAttribute('style', self::STYLE_REGISTRO_FUTURO);
            $fields[] = new MHContainer('registro', array($tipoLabel, $tipo, $tagVaiPara, $novoTipo));
            
            $fields[] = new MDiv();
            
            // Movimentação atual
            $rowsAtual = array();
            foreach ( $movimentacoesAtuais as $movAtual )
            {
                if ( !MUtil::getBooleanValue($movAtual->foiExcluido) )
                {
                    $finStatus = new FinStatusCheque($movAtual->statusChequeId);
                    $rowsAtual[] = array($finStatus->descricao, $movAtual->data, $movAtual->observacao);
                    
                }
            }
            $tableAtual = new MTableRaw(_M('Movimentação atual'), $rowsAtual, array('Status', 'Data', 'Obs'));
            $fields[] = new MHContainer('mov_' . rand(), array($tableAtual));
            
            $rowsFutura = array();
            foreach ( $dadosDoRegistroFuturo->movimentacoesCheque as $movFutura )
            {
                if ( !MUtil::getBooleanValue($movFutura->removeData) )
                {
                    $finStatus = new FinStatusCheque($movFutura->statuschequeid);
                    $rowsFutura[] = array($finStatus->descricao, $movFutura->datastatus, $movFutura->observacao);
                }
            }
            $tableFutura = new MTableRaw(_M('Movimentação futura'), $rowsFutura, array('Status', 'Data', 'Obs'));
            $fields[] = new MHContainer('mov_' . rand(), array($tableFutura));
        }
        
        return new MVContainer('mvContainerDados', $fields);
    }
}

?>
