<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela fin.bankMovement
 * Relaciona um log de arquivos de retorno
 *
 * @author Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 *
 * @since
 * Class created on 05/10/2011
 */

class FinBankMovement extends SType
{
    /**
     * Table fields
     */
    
    /**
     * Identificador da tabela
     * @var type int
     */
    protected $bankMovementId;

    /**
     * Código do título enviado no arquivo
     * @var type int
     */
    protected $invoiceId;

    /**
     * Nosso número
     * @var type varchar
     */
    protected $ourNumber;

    /**
     * Valor nominal do título
     * @var type numeric
     */
    protected $value;

    /**
     * Valor pago
     * @var type numeric
     */
    protected $valuePaid;

    /**
     * Agência bancária
     * @var type varchar
     */
    protected $branch;
    
    /**
     * Conta bancária
     * @var type varchar
     */
    protected $branchNumber;

    /**
     * Código da carteira
     * @var type varchar
     */
    protected $wallet;

    /**
     * Data do pagamento
     * @var type varchar
     */
    protected $occurrenceDate;

    /**
     * Código do arquivo
     * @var type int
     */
    protected $fileId;
    
    /**
     * Valor de desconto obtido do arquivo
     * @var type float
     */
    protected $fileDiscount = 0;
    
    /**
     * Valor de desconto calculado pelo Sagu
     * @var type float
     */
    protected $saguDiscount = 0;
    
    /**
     * Desconto do convênio calculado pelo sagu
     * @var type array
     */
    protected $saguConvenant = array();
    
    /**
     * Valor de juros/multa obtido do arquivo
     * @var type float
     */
    protected $fileInterestFine = 0;
    
    /**
     * Valor de juros/multa calculado pelo Sagu
     * @var type float
     */
    protected $saguInterestFine = 0;
    
    /**
     * Saldo do título no momento do processamento do arquivo de retorno
     * @var type float
     */
    protected $balance;
    
    /**
     * Saldo do título com políticas aplicadas na data dos lançamentos do arquivo.
     * @var type float
     */
    protected $balanceWithPolicies;
    
    /**
     * Data do crédito do pagamento no banco.
     * @var type date
     */
    protected $creditDate;
    
    /**
     * Data de vencimento do título no arquivo.
     * @var type date
     */
    protected $fileMaturityDate;
    
    /**
     * Data de vencimento do título no Sagu no momento do processamento do arquivo.
     * @var type date
     */
    protected $saguMaturityDate;
    
    /**
     * Linha completa do arquivo referente ao título.
     * @var type text
     */
    protected $fileLine;

    /**
     * Outros descontos concedidos pelo banco.
     * @var type float
     */
    protected $otherDiscounts = 0;

    /**
     * Outros acréscimos aplicados pelo banco.
     * @var type float
     */
    protected $otherAdditions = 0;

    /**
     * Taxa de serviço cobrada pelo banco.
     * @var type float
     */
    protected $expenditure = 0;

    /**
     * Código do banco.
     * @var type varchar
     */
    protected $bankId;
    
    /**
     * Estado do registro.
     * @var type integer
     */
    protected $bankMovementStatusId;
    
    /**
     * Ocorrencia do retorno.
     * @var type varchar
     */    
    protected $occurrence;


    /**
     * Atributo do tipo FinFile (BusFile)
     *
     * @var FinFile
     */
    private $file;
    
    /**
     *
     * @var int
     */
    public $bankReturnId;
    
    /**
     * @var int
     */
    public $tituloid;
    
    /**
     * @var int 
     */
    public $bankAccountId;
    
    /**
     * @deprecated Remover estas constantes daqui, e utilizar as do FinBankMovementStatus
     * 
     * Constantes com os valores possíveis
     * para bankMovementStatusId
     */
    const STATUS_CLOSED = 1;
    const STATUS_PARCIAL_CLOSED = 2;
    const STATUS_DIFF_CLOSED = 3;
    const STATUS_NOT_FOUND = 4;
    const STATUS_ALREADY_CLOSED = 5;
    
    /**
     * Construtor da classe
     */
    public function __construct($bankMovementId = null)
    {
        if ( !is_null($bankMovementId) )
        {
            $this->bankMovementId = $bankMovementId;
            $this->populate();
        }
    }

    /**
     * Common methods
     */

    /**
     * Salva ou atualiza registro
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save($withBankMovementId=false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);

        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        
        if ( strlen($this->bankMovementId)  >  0 )
        {
            $retVal = $this->update();
        }
        else
        {
            $retVal = $this->insert($withBankMovementId);
        }
        
        // Insere lancamentos
        if ( !in_array($this->bankMovementStatusId, array(FinBankMovementStatus::STATUS_NOT_FOUND, FinBankMovementStatus::STATUS_ALREADY_CLOSED, FinBankMovementStatus::STATUS_OCCURENCE_NOT_RECOGNIZED)) )
        {
            $this->insertEntries(true);
            
            // Salva as informações sobre a importação na tabela finReceivableInvoice
            $dataRI = $busReceivableInvoice->getReceivableInvoice($this->invoiceId);
            $dataRI->returnDate = SAGU::getDateNow();
            $dataRI->returnFileId = $this->fileId;
            $busReceivableInvoice->updateReceivableInvoice($dataRI);
        }
        
        return $retVal;
    }    
    
    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM fin.bankMovement
                      WHERE bankMovementId = ?';

        $params = array();
        $params[] = $this->bankMovementId;
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->bankMovementId = null;
        }

        return $result;
    }

    public function duplicate()
    {
        //Não Utilizado
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function search($filters)
    {
        $sql = 'SELECT A.bankMovementId
                  FROM fin.bankMovement A';

        $params = array();
        foreach ( (array)$filters as $key => $value )
        {
            if ( $key == 'bankReturnId' )
            {
                $where .= ' AND EXISTS(
                                   SELECT 1
                                     FROM finFile FF
                                    WHERE FF.fileId = A.fileId
                                      AND FF.bankReturnId = ? ) ';
                $params[] = $value;
            }
            else
            {
                $where .= ' AND A.' . $key . ' = ?';
                $params[] = $value;
            }
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new FinBankMovement($result[$i][0]);
        }

        return $retVal;
    }
    
    /**
     * Do a search on the database table handled by the class
     *
     * @param $filters (object): Search filters
     *
     * @return (array): An array containing the search results
     **/
    public function searchBankMovement($data)
    {
        $sql = 'SELECT A.bankId,
                       A.bankmovementid,
                       A.invoiceId,
                       A.ourNumber,
                       A.value,
                       A.valuePaid,
                       A.branch,
                       A.branchNumber,
                       A.wallet,
                       A.occurrenceDate,
                       A.fileId,
                       A.fileDiscount,
                       A.saguDiscount,
                       A.fileInterestFine,
                       A.saguInterestFine,
                       A.balance,
                       A.balanceWithPolicies,
                       A.creditDate,
                       A.fileMaturityDate,
                       A.saguMaturityDate,
                       A.fileLine,
                       A.otherDiscounts,
                       A.otherAdditions,
                       A.expenditure,
                       A.bankMovementStatusId,
                       B.bankaccountid
                  FROM fin.bankMovement A 
        LEFT JOIN ONLY fininvoice B
                    ON (A.invoiceid = B.invoiceid)';

        $where = '';
        unset($args);
        
        if ( strlen($data->invoiceId) > 0 )
        {
            $where .= '    AND   A.invoiceId = ?';
            $args[] = $data->invoiceId;
        }
        
        if ( strlen($data->valuePaid) > 0 )
        {
            $where .= '    AND   A.valuePaid = ?';
            $args[] = $data->valuePaid;
        }
        
        if ( strlen($data->occurrenceDate) > 0 )
        {
            $where .= '    AND   A.occurrenceDate::date = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $data->occurrenceDate;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 8) . ' ORDER BY A.occurrenceDate DESC ';
            $result = SDatabase::query($sql, $args);
        }

        return $result;
    }
    
    
    /**
     * Retorna um array para popular grid
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchGrid($filters)
    {
        $sql = "SELECT BM.bankMovementId,
                       BM.ourNumber,
                       COALESCE(BM.invoiceId||'', '-'),
                       COALESCE(TO_CHAR(BM.fileMaturityDate, GETPARAMETER('BASIC', 'MASK_DATE')),TO_CHAR(BM.saguMaturityDate, GETPARAMETER('BASIC', 'MASK_DATE'))),
                       TO_CHAR(BM.occurrenceDate, GETPARAMETER('BASIC', 'MASK_DATE')),
                       BM.value,
                       BM.fileDiscount,
                       BM.fileInterestFine,
                       BM.expenditure,
                       BM.otherDiscounts,
                       BM.otherAdditions,
                       COALESCE( BM.balanceWithPolicies::text, '-') AS esperado,
                       COALESCE( BM.valuePaid::text, '-') AS recebido,
                       ROUND(( BM.valuePaid - BM.balanceWithPolicies )::numeric, GETPARAMETER('BASIC', 'REAL_ROUND_VALUE')::int) AS diferenca,
                       BMS.description AS status
                  FROM fin.bankMovement BM
             LEFT JOIN fin.bankMovementStatus BMS
                    ON BMS.bankMovementStatusId = BM.bankMovementStatusId";

        $params = array();
        $where = '1=1';

        if ( is_array($filters->bankMovementIds) && count($filters->bankMovementIds)>0 )
        {
            $where .= ' AND BM.bankMovementId IN (' . implode(', ', $filters->bankMovementIds) . ') ';
        }

        $sql .= ' WHERE ' . $where . ' ORDER BY BM.ourNumber';

        $result = SDatabase::query($sql, $params);
        
        return (array) $result;
    }


    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        
        $sql = 'SELECT bankMovementId,
                       bankId,
                       invoiceId,
                       ourNumber,
                       value,
                       valuePaid,
                       branch,
                       branchNumber,
                       wallet,
                       TO_CHAR(occurrenceDate, \'' . $maskDate . '\'),
                       fileId,
                       fileDiscount,
                       saguDiscount,
                       fileInterestFine,
                       saguInterestFine,
                       balance,
                       balanceWithPolicies,
                       TO_CHAR(creditDate, \'' . $maskDate . '\'),
                       TO_CHAR(fileMaturityDate, \'' . $maskDate . '\'),
                       TO_CHAR(saguMaturityDate, \'' . $maskDate . '\'),
                       fileLine,
                       otherDiscounts,
                       otherAdditions,
                       expenditure,
                       bankMovementStatusId,
                       username
                  FROM fin.bankMovement
                 WHERE bankMovementId = ?';

        $params = array();
        $params[] = $this->bankMovementId;

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Nenhum registro encontrado com o código @1.', $module, $this->bankMovementId));
        }

        list ( $this->bankMovementId,
               $this->bankId,
               $this->invoiceId,
               $this->ourNumber,
               $this->value,
               $this->valuePaid,
               $this->branch,
               $this->branchNumber,
               $this->wallet,
               $this->occurrenceDate,
               $this->fileId,
               $this->fileDiscount,
               $this->saguDiscount,
               $this->fileInterestFine,
               $this->saguInterestFine,
               $this->balance,
               $this->balanceWithPolicies,
               $this->creditDate,
               $this->fileMaturityDate,
               $this->saguMaturityDate,
               $this->fileLine,
               $this->otherDiscounts,
               $this->otherAdditions,
               $this->expenditure,
               $this->bankMovementStatusId,
               $this->userName) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    public function insert($withBankMovementId=false)
    {
        $result = SDatabase::getInstance()->execute($this->getInsertSql($withBankMovementId));
        
        return $result;
    }
    
    public function getInsertSql($withBankMovementId=false)
    {
        $result = SDatabase::query('SELECT nextval(\'fin.bankmovement_bankmovementid_seq\')');
        $bankMovementId = $this->bankMovementId = $result[0][0];
        
        $collBankMovement  = ( $withBankMovementId ) ? "bankMovementId, " : "";
        $valueBankMovement = ( $withBankMovementId ) ? "?, " : "";
        
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $sql = "INSERT INTO fin.bankMovement
                            ({$collBankMovement}
                             bankId,
                             invoiceId,
                             ourNumber,
                             value,
                             valuePaid,
                             branch,
                             branchNumber,
                             wallet,
                             occurrenceDate,
                             fileId,
                             fileDiscount,
                             saguDiscount,
                             fileInterestFine,
                             saguInterestFine,
                             balance,
                             balanceWithPolicies,
                             creditDate,
                             fileMaturityDate,
                             saguMaturityDate,
                             fileLine,
                             otherDiscounts,
                             otherAdditions,
                             expenditure,
                             bankMovementStatusId,
                             occurrence,
                             tituloid,
                             bankAccountId)
                      VALUES ({$valueBankMovement} ?, ?, ?, ?, ?, ?, ?, ?,
                              TO_DATE(?, '{$maskDate}'),
                              ?, ?, ?, ?, ?, ?, ?,
                              TO_DATE(?, '{$maskDate}'),
                              TO_DATE(?, '{$maskDate}'),
                              TO_DATE(?, '{$maskDate}'),
                              ?, ?, ?, ?, ?, ?, ?, ?)";

        $params = array();
        
        if ( $withBankMovementId )
        {
            $params[] = $bankMovementId;
        }
        
        $params[] = $this->bankId;
        $params[] = $this->invoiceId;
        $params[] = $this->ourNumber;
        $params[] = str_replace(',', '.', $this->value);
        $params[] = str_replace(',', '.', $this->valuePaid);
        $params[] = $this->branch;
        $params[] = $this->branchNumber;
        $params[] = $this->wallet;
        $params[] = $this->occurrenceDate;
        $params[] = $this->fileId;
        $params[] = $this->fileDiscount;
        $params[] = $this->saguDiscount;
        $params[] = $this->fileInterestFine;
        $params[] = $this->saguInterestFine;
        $params[] = $this->balance;
        $params[] = $this->balanceWithPolicies;
        $params[] = $this->creditDate;
        $params[] = $this->fileMaturityDate;
        $params[] = $this->saguMaturityDate;
        $params[] = $this->fileLine;
        $params[] = $this->otherDiscounts;
        $params[] = $this->otherAdditions;
        $params[] = $this->expenditure;
        $params[] = $this->bankMovementStatusId;
        $params[] = $this->occurrence;
        $params[] = $this->tituloid;
        $params[] = $this->bankAccountId;
        
        return SAGU::prepare($sql, $params);
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    public function update()
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        $sql = 'UPDATE fin.bankMovement
                   SET invoiceId = ?,
                       bankId = ?,
                       ourNumber = ?,
                       value = ?,
                       valuePaid = ?,
                       branch = ?,
                       branchNumber = ?,
                       wallet = ?,
                       occurrenceDate = TO_DATE(?, \''.$maskDate.'\'),
                       fileId = ?,
                       fileDiscount = ?,
                       saguDiscount = ?,
                       fileInterestFine = ?,
                       saguInterestFine = ?,
                       balance = ?,
                       balanceWithPolicies = ?,
                       creditDate = TO_DATE(?, \''.$maskDate.'\'),
                       fileMaturityDate = TO_DATE(?, \''.$maskDate.'\'),
                       saguMaturityDate = TO_DATE(?, \''.$maskDate.'\'),
                       fileLine = ?,
                       otherDiscounts = ?,
                       otherAdditions = ?,
                       expenditure = ?,
                       bankMovementStatusId = ?,
                       occurrence = ?,
                       bankAccountId = ?
                 WHERE bankMovementId = ?';

        $params = array();
        $params[] = $this->invoiceId;
        $params[] = $this->bankId;
        $params[] = $this->ourNumber;
        $params[] = $this->value;
        $params[] = $this->valuePaid;
        $params[] = $this->branch;
        $params[] = $this->branchNumber;
        $params[] = $this->wallet;
        $params[] = $this->occurrenceDate;
        $params[] = $this->fileId;
        $params[] = $this->fileDiscount;
        $params[] = $this->saguDiscount;
        $params[] = $this->fileInterestFine;
        $params[] = $this->saguInterestFine;
        $params[] = $this->balance;
        $params[] = $this->balanceWithPolicies;
        $params[] = $this->creditDate;
        $params[] = $this->fileMaturityDate;
        $params[] = $this->saguMaturityDate;
        $params[] = $this->fileLine;
        $params[] = $this->otherDiscounts;
        $params[] = $this->otherAdditions;
        $params[] = $this->expenditure;
        $params[] = $this->bankMovementStatusId;
        $params[] = $this->occurrence;
        $params[] = $this->bankAccountId;
        $params[] = $this->bankMovementId;

        return SDatabase::execute($sql, $params);
    }
    
    /**
     * Obtem objeto arquivo
     *
     * @return FinFile
     */
    public function getFile()
    {
        $obj = null;
        
        if ( strlen($this->fileId) > 0 )
        {
            $MIOLO = MIOLO::getInstance();
            $busFile = new BusinessFinanceBusFinFile();

            $obj = $busFile->getFile($this->fileId);
        }
        
        return $obj;
    }
    
    /**
     * Insere as entradas para o título atual
     * 
     * @param $insertDiffEntry Boolean que indica se deve inserir o ultimo lancamento, que quita o titulo
     * 
     * @return array Id com as entradas inseridas
     */
    private function insertEntries($insertDiffEntry = false)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $busEntry = new BusinessFinanceBusEntry();
        $busDefaultOperations = new BusinessFinanceBusDefaultOperations();
        $busInvoice = new BusinessFinanceBusInvoice();
        
        $inserted = array();
        $invoiceData = $busInvoice->getInvoice($this->invoiceId);
        $defaultOperations = $busDefaultOperations->getDefaultOperations();

        // Prepara dados globais para lancamentos
        $entryData = new StdClass();
        $entryData->invoiceId = $invoiceData->invoiceId;
        $entryData->costCenterId = $invoiceData->costCenterId;
        $entryData->comments = _M('ARQUIVO DE RETORNO IMPORTADO EM @1', $module, SAGU::getDateNow() );
        $entryData->bankReturnCode = $this->getFile()->bankReturnId;
        $entryData->isAccounted = DB_FALSE;
        $entryData->creationType = 'A';
        $entryData->entryDate = $this->occurrenceDate ? $this->occurrenceDate : SAGU::getDateNow();
        
        // Insere lancamento de pagamento
        $entryData->operationId = $defaultOperations->paymentOperation;
        $entryData->value = $this->valuePaid;
        $inserted[] = $paymentEntryId = $busEntry->insertEntry($entryData);

        // Insere os outros lancamentos
        // Array no formato '$this->campo' => 'tipo_de_operacao'
        $entries = array(
            'fileDiscount' => 'otherDiscountsOperation',
            'fileInterestFine' => 'interestOperation',
            'otherAdditions' => 'otherAdditionsOperation'
        );

        // Percorre lancamentos 
        foreach ( $entries as $fieldId => $operationField )
        {
            // Insere lancamento
            if ( SAGU::calcNumber("{$this->$fieldId} > 0") == DB_TRUE )
            {
                $entryData->operationId = $defaultOperations->$operationField;
                $entryData->value = $this->$fieldId;
                $inserted[] = $busEntry->insertEntry($entryData);
            }
        }
        
        //Insere os Convênios
        if( SAGU::getParameter($module, 'FORCE_RETURN_CONVENANT_DISCOUNTS') == 'YES' )
        {
            if( count($this->saguConvenant) > 0 )
            {
                foreach($this->saguConvenant as $cod=>$convenant)
                {
                    $entryData->operationId = $convenant->operationId;
                    $entryData->value = $convenant->value;                    
                    $inserted[] = $busEntry->insertEntry($entryData);
                }
            }
        }

        if ( SAGU::getParameter('FINANCE', 'ENABLED_EXPLENDITURE_SEPARATION') == DB_TRUE )
        {
            /*
             * Caso a taxa bancária já esteja incluida no valor pago do título é
             * descontado a taxa do lançamento de pagamento.  
             */
            $invoiceBalance = $this->getCurrentBalance();
            $recalculatedValue = $this->valuePaid;
            if ( SAGU::calcNumber(" {$invoiceBalance} = 0 ") == DB_TRUE )
            {
                // Atualiza lancamento de pagamento
                $_entryData = $entryData;
                $_entryData->operationId = $defaultOperations->paymentOperation;
                $_entryData->entryId = $paymentEntryId;
                $_entryData->value = SAGU::calcNumber("{$this->valuePaid} - {$this->expenditure}");
                $inserted[] = $busEntry->updateEntry($_entryData);
            }

            // Insere entrada de taxa
            if ( SAGU::calcNumber("{$this->expenditure} > 0") == DB_TRUE )
            {
                $entryData->operationId = $defaultOperations->bankTaxOperation;
                $entryData->value = $this->expenditure;
                $inserted[] = $busEntry->insertEntry($entryData);
            }
        }        
        
        // Se após efetuar todos os lançamentos o saldo do título for menor que zero,
        //   significa que o valor arrecadado é maior que o devido.
        // Então um novo lançamento com a diferença deve ser inserido com a operação de outros acréscimos.
        if ( $insertDiffEntry )
        {
            $invoiceBalance = $this->getCurrentBalance();
            if ( SAGU::calcNumber(" {$invoiceBalance} < 0 ") == DB_TRUE )
            {
                $entryData->operationId = $defaultOperations->otherAdditionsOperation;
                $entryData->value = SAGU::calcNumber("{$invoiceBalance} * -1");
                $inserted[] = $busEntry->insertEntry($entryData);
            }
        }
        return $inserted;
    }

    
    /**
     * Retorna o balance atual
     *
     * @return float
     */
    private function getCurrentBalance()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        $busInvoice = new BusinessFinanceBusInvoice();
        
        return $busInvoice->getInvoiceBalance($this->invoiceId);
    }
    
    /**
     * Insere registro obtido do arquivo de retorno para a tabela temporária criada.
     * 
     * @param stdClass $args
     * @return boolean
     */
    public static function insereRegistroObtidoDoArquivoNaTabelaTemporaria($args)
    {
        $busInvoice = new BusinessFinanceBusInvoice();
        
        if ( strlen($args->invoiceId) > 0 && $busInvoice->verifyInvoice((int)$args->invoiceId) )
        {
            $invoiceId = $args->invoiceId;
        }
        else
        {
            $invoiceId = self::obtemCodigoDoTituloPelosDadosDoAquivo($args->ourNumber, $args->bankId, $args->branch, $args->branchNumber);
        }
        
        $sql = "INSERT INTO temp_bank_movement
                            ( tempbankmovementid, invoiceId, fileDiscount, fileInterestFine, otherDiscounts, otherAdditions, expenditure, value, valuePaid, ourNumber, branch,
                              branchNumber, wallet, occurrenceDate, creditDate, fileMaturityDate, bankId, fileId, occurrence, bankReturnId ) 
                     VALUES ( ( SELECT nextval('fin.bankmovement_bankmovementid_seq') ), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
        
        $params = array(
            $invoiceId, $args->fileDiscount, $args->fileInterestFine, $args->otherDiscounts, $args->otherAdditions, $args->expenditure, $args->value, $args->valuePaid, $args->ourNumber, $args->branch,
            $args->branchNumber, $args->wallet, $args->occurrenceDate, $args->creditDate, $args->fileMaturityDate, $args->bankId, $args->fileId, $args->occurrence, $args->bankReturnId
        );
        
        return SDatabase::execute($sql, $params);
    }
    
    /**
     * Efetua todos os processos, validações e atribuições de status para
     * as movimentações bancárias referentes aos registros recebidos no 
     * arquivo de retorno.
     */
    public static function processarOsRegistrosDeRetornoBancario()
    {
        self::validaAsInformacoesRequeridas();
        self::atualizaStatusDosRegistrosNaoProcessados041();
        self::atualizaStatusDosRegistrosNaoProcessados237();
        self::atualizaStatusDosRegistrosCasoOsTitulosNaoForamEncontrados();
        self::atualizaStatusDosRegistrosDeTitulosJaBaixados();
        self::finalizaAtribuicoesDeStatusParaAsMovimentacoesTemporarias();
        self::populaValoresDeConvenioIncentivoJurosEMultas();
        self::lancaValorDeDescontoEConvenioCasoNaoRecebidoNoArquivo();
        self::limparRegistrosTemporariosNaoProcessados041();
        self::insereOsLancamentosDosRegistrosNaTabelaTemporaria();
        self::verificaDiferencaEAtualizaStatus();
    }
    
    /**
     * Retorna o código do título 'invoiceid' pelos dados recebidos no arquivo de retorno.
     * 
     * @param String $ourNumber
     * @param int $bankId
     * @param String $branch
     * @param String $branchNumber
     * @return int
     */
    public static function obtemCodigoDoTituloPelosDadosDoAquivo($ourNumber, $bankId, $branch, $branchNumber)
    {
        $filters = new stdClass();
        $filters->ourNumber = $ourNumber;
        $filters->bankId = $bankId;
        $filters->branchNumber = $branch;
        $filters->accountNumber = $branchNumber;

        $busBankInvoiceInfo = new BusinessFinanceBusBankInvoiceInfo();
        $bankInvoiceInfo    = $busBankInvoiceInfo->searchBankInvoiceInfo($filters);

        return $bankInvoiceInfo[0][0];
    }
    
    /**
     * Valida se todos os registros requeridos foram informados.
     * 
     * @throws Exception
     */
    public static function validaAsInformacoesRequeridas()
    {
        $sql = "SELECT ( COUNT(*) > 0 )
                  FROM temp_bank_movement
                 WHERE fileDiscount IS NULL
                    OR otherDiscounts IS NULL
                    OR otherAdditions IS NULL
                    OR expenditure IS NULL
                    OR valuePaid IS NULL
                    OR value IS NULL
                    OR ourNumber IS NULL";
        
        $result = SDatabase::query($sql);
        
        if ( $result[0][0] == DB_TRUE )
        {
            throw new Exception("Campos requeridos não foram preenchidos no arquivo.");
        }
    }
    
    /**
     * Atualiza o status dos registros na tabela temporária para
     * não processados, caso sejam encontrados na consulta para o banco 041.
     */
    public static function atualizaStatusDosRegistrosNaoProcessados041()
    {
        $sql = "UPDATE temp_bank_movement
                   SET statusId = " . FinBankMovementStatus::STATUS_OCCURENCE_NOT_RECOGNIZED . "
                 WHERE EXISTS ( SELECT A.invoiceId
                                  FROM temp_bank_movement A
                                 WHERE A.bankid = '041'
                                   AND A.occurrence NOT IN ('06', '07', '15') 
                                   AND A.invoiceId = temp_bank_movement.invoiceId
                                   AND A.occurrence = temp_bank_movement.occurrence )";
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
    
    public static function limparRegistrosTemporariosNaoProcessados041()
    {
        $sql = "DELETE FROM temp_bank_movement
                 WHERE EXISTS ( SELECT A.invoiceId
                                  FROM temp_bank_movement A
                                 WHERE A.bankid = '041'
                                   AND A.occurrence NOT IN ('06', '07', '15') 
                                   AND A.invoiceId = temp_bank_movement.invoiceId
                                   AND A.occurrence = temp_bank_movement.occurrence )";
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
    
    /**
     * Atualiza o status dos registros na tabela temporária para
     * não processados, caso sejam encontrados na consulta para o banco 237.
     */
    public static function atualizaStatusDosRegistrosNaoProcessados237()
    {
        $sql = "UPDATE temp_bank_movement
                   SET statusId = " . FinBankMovementStatus::STATUS_OCCURENCE_NOT_RECOGNIZED . "
                 WHERE EXISTS ( SELECT A.invoiceId 
                                  FROM temp_bank_movement A
                                 WHERE A.bankid = '237'
                                   AND A.occurrence NOT IN ('06', '17', '15')
                                   AND A.invoiceId = temp_bank_movement.invoiceId
                                   AND A.occurrence = temp_bank_movement.occurrence )";
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
    
    /**
     * Se os títulos referentes aos registros não foram encontrados,
     * seta status como não encontrado.
     */
    public static function atualizaStatusDosRegistrosCasoOsTitulosNaoForamEncontrados()
    {
        $sql = "UPDATE temp_bank_movement
                   SET statusId = " . FinBankMovementStatus::STATUS_NOT_FOUND . "
                 WHERE invoiceId IS NULL";
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
    
    /**
     * Atualiza o status dos registros que os títulos referentes 
     * já estão baixados e fechados.
     */
    public static function atualizaStatusDosRegistrosDeTitulosJaBaixados()
    {
        $sql = "UPDATE temp_bank_movement
                   SET statusId = " . FinBankMovementStatus::STATUS_ALREADY_CLOSED . "
                 WHERE invoiceId IN ( SELECT A.invoiceId 
                                        FROM temp_bank_movement A
                             INNER JOIN ONLY finInvoice B
                                          ON B.invoiceId = A.invoiceId
                                  INNER JOIN fin.bankMovement C
                                          ON C.invoiceId = A.invoiceId
                                       WHERE B.balance <= 0 )";
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
    
    /**
     * Percorre todos os registros que ainda não foramn atribuidos status,
     * e atualiza os valores referentes a convênios, incentivos, juros e multas.
     */
    public static function populaValoresDeConvenioIncentivoJurosEMultas()
    {
        $maskDate       = SAGU::getParameter('BASIC', 'MASK_DATE');
        $realRoundValue = SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE');
        
        $sql = "UPDATE temp_bank_movement
                   SET discountValue = ( ROUND(getInvoiceDiscountValue(invoiceId, TO_DATE(occurrenceDate, '{$maskDate}') ), '{$realRoundValue}') ),
                       convenantValue = ( ROUND(getInvoiceConvenantValue(invoiceId, TO_DATE(occurrenceDate, '{$maskDate}')), '{$realRoundValue}') ),
                       interestValue = ( ROUND(getInvoiceInterestValue(invoiceId, TO_DATE(occurrenceDate, '{$maskDate}')), '{$realRoundValue}') ),
                       fineValue = ( ROUND(getInvoiceFineValue(invoiceId, TO_DATE(occurrenceDate, '{$maskDate}')), '{$realRoundValue}') ),
                       balance = ( ROUND(balance(invoiceId), '{$realRoundValue}') ),
                       balanceWithPolicies = ( ROUND(balanceWithPoliciesDated(invoiceId, TO_DATE(occurrenceDate, '{$maskDate}')), '{$realRoundValue}') )
                 WHERE statusId IS NOT NULL 
                   AND statusId NOT IN (" . FinBankMovementStatus::STATUS_OCCURENCE_NOT_RECOGNIZED . ", " . FinBankMovementStatus::STATUS_NOT_FOUND . ", " . FinBankMovementStatus::STATUS_ALREADY_CLOSED . ")";
                       
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }    
    
    /**
     * Caso o parâmetro FORCE_RETURN_REMITTANCE_DISCOUNTS estiver habilitado Quando habilitado sempre que 
     * o arquivo de retorno não receber o valor de desconto o sistema verifica se o valor foi concedido ou não e lança.
     * 
     * Caso o parâmetro FORCE_RETURN_CONVENANT_DISCOUNTS estiver habilitado verifica se o título possui um convenio,
     * caso possua calcula baseando-se no desconto bancário e divide este em 2 lançamentos, referente ao desconto
     * da política e ao desconto do convênio.
     */
    public static function lancaValorDeDescontoEConvenioCasoNaoRecebidoNoArquivo()
    {
        $module = MIOLO::getCurrentModule();
        
        //Caso valor de desconto não foi passado ao boleto calcula e lança
        if ( SAGU::getParameter($module, 'FORCE_RETURN_REMITTANCE_DISCOUNTS') == 'YES' )
        {
            self::lancaValorDeDescontoCasoNaoRecebidoNoArquivo();
            self::lancaValorDeConvenioCasoNaoRecebidoNoArquivo();   
        }
    }
    
    /**
     * Lança o valor de desconto caso não tenha sido recebido no arquivo.
     */
    private static function lancaValorDeDescontoCasoNaoRecebidoNoArquivo()
    {
        $sql = "UPDATE temp_bank_movement
                   SET fileDiscount = discountValue
                 WHERE fileDiscount <= 0
                   AND discountValue > 0
                   AND valuePaid >= balanceWithPolicies
                   AND (statusId IS NULL OR statusId = '" . FinBankMovement::STATUS_CLOSED . "')";
            
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
    
    /**
     * Lança o valor de convênio caso não tenha sido recebido no arquivo.
     */
    private static function lancaValorDeConvenioCasoNaoRecebidoNoArquivo()
    {
        $module = MIOLO::getCurrentModule();
        
        if ( SAGU::getParameter($module, 'FORCE_RETURN_CONVENANT_DISCOUNTS') == 'YES' )
        {
            $sql = "UPDATE temp_bank_movement
                       SET fileDiscount = ( fileDiscount + convenantValue )
                     WHERE (fileDiscount <= 0 OR (fileDiscount - discountValue) <= 0)
                       AND convenantValue > 0
                       AND valuePaid >= balanceWithPolicies
                       AND (statusId IS NULL OR statusId = '" . FinBankMovement::STATUS_CLOSED . "')";

            $sDataBase = SDatabase::getInstance();
            $sDataBase->execute($sql);
        }
    }
        
    /**
     * Insere na tabela temporaria de lançamentos, os lançamentos referentes 
     * dos registros do arquivo de retorno.
     */
    public static function insereOsLancamentosDosRegistrosNaTabelaTemporaria()
    {
        $module = MIOLO::getCurrentModule();
        
        // Insere lançamentos de pagamento
        self::insereLancamentoTemporario('paymentOperation', 'T.valuePaid');
        
        // Insere lançamentos de descontos, juros e multas.
        self::insereLancamentoTemporario('otherDiscountsOperation', 'T.fileDiscount', true);
        self::insereLancamentoTemporario('interestOperation', 'T.fileInterestFine', true);
        self::insereLancamentoTemporario('otherAdditionsOperation', 'T.otherAdditions', true);
        
        self::insereLancamentosTemporariosReferenteAsMultasEJuros();
        
        if ( SAGU::getParameter($module, 'FORCE_RETURN_CONVENANT_DISCOUNTS') == 'YES' )
        {
            // Insere lançamentos referente aos convênios
            self::insereLancamentosTemporariosReferenteAosConvenios();
        }
        
        if ( SAGU::getParameter('FINANCE', 'ENABLED_EXPLENDITURE_SEPARATION') == DB_TRUE )
        {
            // Desconta taxa bancária dos lançamentos de pagamento.
            self::descontarTaxaBancariaDosLancamentosDePagamento();
        }
        else
        {
            // Soma taxa bancária nos lançamentos de pagamento.
            self::somarTaxaBancariaNosLancamentosDePagamento();
        }
        
        // Caso o valor pago recebido seja maior que o esperado, insere um lançamento referente a esta diferença.
        self::insereLancamentoTemporario('otherAdditionsOperation', '(balanceTemporarioDoRetornoBancario(T.invoiceId) * -1)', false, '< 0');
        
        $value = SAGU::getParameter('FINANCE', 'DEFAULT_IMPORT_VALUE_DISCARTED');
        
        if ( strlen($value) > 0 && $value != 0 )
        {
            $value = str_replace(',', '.', $value);
            
            // Caso o valor pago recebido seja menor que o esperado e esteja dentro do valor configurado no parâmetro DEFAULT_IMPORT_VALUE_DISCARTED
            // insere um lançamento de desconto referente a esta diferença.
            self::insereLancamentoTemporario('otherDiscountsOperation', '(balanceTemporarioDoRetornoBancario(T.invoiceId))', false, "<= {$value} AND balanceTemporarioDoRetornoBancario(T.invoiceId) > 0 ");
        }
    }
    
    /**
     * Insere lançamentos de juros/multa quando no dia em que o título foi pago
     * ainda existiam juros/multa que não foram liquidados. - Ticket #36915
     */
    public static function insereLancamentosTemporariosReferenteAsMultasEJuros()
    {
        $dataHoje = SAGU::getDateNow();
        
        $sql = "INSERT INTO temp_bank_movement_entries
                            ( invoiceId,
                              costCenterId,
                              comments,
                              bankReturnCode,
                              entryDate,
                              operationId,
                              value,
                              tempbankmovementid,
                              accountSchemeId )
                      SELECT T.invoiceId,
                             ( SELECT I.costCenterId
		            FROM ONLY finInvoice I
			        WHERE I.invoiceId = T.invoiceId ),
                             'JUROS/MULTA LANÇADOS PELO RETORNO (IMPORTADO NO DIA ' || dateToUser(NOW()::DATE) || ' NÃO FECHARAM COM O JUROS/MULTA REAIS CALCULADOS PELO SAGU NO DIA DO PAGAMENTO EFETUADO EM ' || dateToUser(occurrenceDate::DATE) || '. 
                              VALOR DE JUROS CALCULADO PELO SISTEMA: ' || ROUND(getInvoiceInterestValue(T.invoiceId, T.occurrenceDate::DATE), 2) ||
                              '. VALOR DE MULTA CALCULADO PELO SISTEMA: ' || ROUND(getInvoiceFineValue(T.invoiceId, T.occurrenceDate::DATE),2) || 
                              '. TOTAL CALCULADO PELO SISTEMA: ' || ROUND((getInvoiceInterestValue(T.invoiceId, T.occurrenceDate::DATE) +
                              getInvoiceFineValue(T.invoiceId, T.occurrenceDate::DATE)), 2) || ' VALOR DE MULTA/JUROS IMPORTADO PELO RETORNO: ' || ROUND(T.fileInterestFine, 2),
                             T.bankReturnId,
                             COALESCE(TO_DATE(T.occurrenceDate::VARCHAR, 'dd/mm/yyyy'), NOW()::DATE),
                             ( SELECT interestOperation FROM finDefaultOperations ) AS operationId,
                             ROUND(((getInvoiceInterestValue(T.invoiceId, T.occurrenceDate::DATE) +
                              getInvoiceFineValue(T.invoiceId, T.occurrenceDate::DATE)) - COALESCE(T.fileInterestFine, 0)), 2) AS value,
                             T.tempbankmovementid,
                             obtemPlanoDeContasRetornoDeTitulos(T.branch, T.branchNumber, ( SELECT interestOperation FROM finDefaultOperations )::int)
                        FROM temp_bank_movement T
                       WHERE T.invoiceId IS NOT NULL
                         AND (ROUND((getInvoiceInterestValue(T.invoiceId, T.occurrenceDate::DATE) +
                                     getInvoiceFineValue(T.invoiceId, T.occurrenceDate::DATE)), 2) > T.fileInterestFine)
                         AND T.statusid <> " . FinBankMovementStatus::STATUS_OCCURENCE_NOT_RECOGNIZED . "";
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
    
    /**
     * Insere lançamento na tabela temporária conforme filtros.
     * 
     * @param String $fieldDefaultOperation
     * @param String $fieldValue
     */
    private static function insereLancamentoTemporario($columnDefaultOperation, $value, $verificarSeColumnValuePossuiValor = false, $quandoBalanceFor = null)
    {
        $dataHoje = SAGU::getDateNow();
        
        $sql = "INSERT INTO temp_bank_movement_entries
                            ( invoiceId,
                              costCenterId,
                              comments,
                              bankReturnCode,
                              entryDate,
                              operationId,
                              value,
                              tempbankmovementid,
                              accountSchemeId )
                     SELECT T.invoiceId,
                            ( SELECT I.costCenterId
		           FROM ONLY finInvoice I
			       WHERE I.invoiceId = T.invoiceId ),
                            'ARQUIVO DE RETORNO IMPORTADO EM ' || '{$dataHoje}.',
                            T.bankReturnId,
                            COALESCE(TO_DATE(T.occurrenceDate::VARCHAR, 'dd/mm/yyyy'), '{$dataHoje}'),
                            ( SELECT {$columnDefaultOperation} FROM finDefaultOperations ) AS operationId,
                            {$value},
                            T.tempbankmovementid,
                            obtemPlanoDeContasRetornoDeTitulos(T.branch, T.branchNumber, ( SELECT {$columnDefaultOperation} FROM finDefaultOperations )::int)
                       FROM temp_bank_movement T
                  LEFT JOIN finEntry E
                         ON E.invoiceId = T.invoiceId
                        AND ( E.bankreturncode = T.bankReturnId::varchar OR E.bankreturncode IS NULL )
                        AND ROUND(E.value, getParameter('BASIC', 'REAL_ROUND_VALUE')::int) = {$value}
                        AND E.operationId = ( SELECT {$columnDefaultOperation} FROM finDefaultOperations LIMIT 1 )::int
                      WHERE E.entryId IS NULL
                        AND T.invoiceId IS NOT NULL 
                        AND T.statusid <> " . FinBankMovementStatus::STATUS_OCCURENCE_NOT_RECOGNIZED . "";
        
        if ( $verificarSeColumnValuePossuiValor )
        {
            $sql .= " AND {$value} > 0";
        }
        
        if ( strlen($quandoBalanceFor) > 0 )
        {
            $sql .= " AND balanceTemporarioDoRetornoBancario(T.invoiceId) {$quandoBalanceFor}";
        }
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
    
    /**
     * Insere todos os lançamentos referentes aos convênios, 
     * somente dos registros que possírem convênios.
     */
    private static function insereLancamentosTemporariosReferenteAosConvenios()
    {
        $sql = "SELECT insereLancamentosTemporariosReferenteAosConvenios()";
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
    
    /**
     * Caso a taxa bancária já esteja incluida no valor pago do título é
     * descontado a taxa do lançamento de pagamento.
     */
    private static function descontarTaxaBancariaDosLancamentosDePagamento()
    {   
        // Atualiza lancamento de pagamento
        $sql = "UPDATE temp_bank_movement_entries
                   SET value = ( X.valuePaid - X.expenditure )
                  FROM ( SELECT DISTINCT A.tempEntryId,
                                         B.valuePaid,
                                         B.expenditure
                                    FROM temp_bank_movement_entries A
                              INNER JOIN temp_bank_movement B
                                      ON B.invoiceId = A.invoiceId
                                   WHERE A.operationId = ( SELECT paymentOperation
                                                             FROM finDefaultOperations )
                                     AND ( SELECT balanceTemporarioDoRetornoBancario(A.invoiceId) ) = 0 ) X
                 WHERE temp_bank_movement_entries.tempEntryId = X.tempEntryId";
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
        
        // Insere entrada de taxa
        self::insereLancamentoTemporario('bankTaxOperation', 'T.expenditure', true);
    }
    
    /**
     * Caso a taxa bancária não esteja incluida no valor pago do título é
     * somada ao lançamento de pagamento.
     */
    private static function somarTaxaBancariaNosLancamentosDePagamento()
    {        
        // Atualiza lancamento de pagamento
        $sql = "UPDATE temp_bank_movement_entries
                   SET value = ( X.valuePaid + X.expenditure )
                  FROM ( SELECT DISTINCT A.tempEntryId,
                                         B.valuePaid,
                                         B.expenditure
                                    FROM temp_bank_movement_entries A
                              INNER JOIN temp_bank_movement B
                                      ON B.invoiceId = A.invoiceId
                                   WHERE A.operationId = ( SELECT paymentOperation
                                                             FROM finDefaultOperations ) ) X
                 WHERE temp_bank_movement_entries.tempEntryId = X.tempEntryId";
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
    
    /**
     * Finaliza as atribuições de status para as movimentações 
     * bancárias temporárias.
     */
    public static function finalizaAtribuicoesDeStatusParaAsMovimentacoesTemporarias()
    {
        $sql = "UPDATE temp_bank_movement
                   SET statusId = ( CASE 
                                         WHEN ( balanceTemporarioDoRetornoBancario(invoiceId) > 0 )
                                           OR ( (balanceWithPoliciesDated(invoiceId, dateToDb(occurrenceDate)) - valuepaid) > 0 )
				         THEN
                                              " . FinBankMovementStatus::STATUS_PARCIAL_CLOSED . "::int
                                         ELSE
                                              ( CASE 
                                                     WHEN ( otherAdditions > 0 )
                                                       OR ( otherDiscounts > 0 )
                                                       OR ( value <> balance )
                                                       OR ( fileDiscount <> ( discountValue + convenantValue ) )
                                                       OR ( fileInterestFine <> ( interestValue + fineValue ) )
                                                     THEN
                                                          " . FinBankMovementStatus::STATUS_DIFF_CLOSED . "
                                                     ELSE
                                                          " . FinBankMovementStatus::STATUS_CLOSED . "
                                                END )::int
                                    END )
                 WHERE statusId IS NULL";
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
    
    /**
     * Retorna as movimentações bancárias temporárias que serão aplicadas.
     * 
     * @return array
     */
    public static function obterMovimentacoesBancariasTemporariasParaGrid()
    {
        $maskDate       = SAGU::getParameter('BASIC', 'MASK_DATE');
        $realRoundValue = SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE');
        
        $sql = "SELECT BM.tempBankMovementId,
                       BM.ourNumber,
                       COALESCE(BM.invoiceId||'', '-'),
                       COALESCE(BM.fileMaturityDate, TO_CHAR(FIN.maturityDate, '{$maskDate}')),
                       BM.occurrenceDate,
                       BM.value,
                       BM.fileDiscount,
                       BM.fileInterestFine,
                       BM.expenditure,
                       BM.otherDiscounts,
                       BM.otherAdditions,
                       COALESCE( BM.balanceWithPolicies::text, '-') AS esperado,
                       COALESCE( BM.valuePaid::text, '-') AS recebido,
                       ROUND(( BM.valuePaid - BM.balanceWithPolicies )::numeric, {$realRoundValue}) AS diferenca,
                       BMS.description AS status,
                       MU.name AS usuario
                  FROM temp_bank_movement BM
             LEFT JOIN fin.bankMovementStatus BMS
                    ON BMS.bankMovementStatusId = BM.statusId
        LEFT JOIN ONLY finInvoice FIN
                    ON FIN.invoiceId = BM.invoiceId
             LEFT JOIN miolo_user MU 
                    ON MU.login = BM.username
              ORDER BY BM.ourNumber";

        $result = SDatabase::query($sql);
        
        return (array) $result;
    }
    
    /**
     * Salvas as movimentações bancárias em definitivo, obtidas da tabela
     * temporária de movimentações bancárias 'temp_bank_movement'.
     * 
     * @return boolean
     */
    public function salvaAsMovimentacoesBancariasDaTabelaTemporaria()
    {
        $maskDate = SAGU::getParameter('BASIC', 'MASK_DATE');
        
        $sql = "INSERT INTO fin.bankMovement
                           (bankmovementid,
                            invoiceId, 
                            fileDiscount, 
                            fileInterestFine, 
                            otherDiscounts, 
                            otherAdditions, 
                            expenditure, 
                            value, 
                            valuePaid, 
                            ourNumber, 
                            branch,
                            branchNumber, 
                            wallet, 
                            occurrenceDate, 
                            creditDate, 
                            fileMaturityDate, 
                            bankId, 
                            fileId, 
                            occurrence, 
                            bankMovementStatusId, 
                            balance, 
                            balancewithpolicies)
                     SELECT tempbankmovementid, 
                            invoiceId, 
                            fileDiscount, 
                            fileInterestFine, 
                            otherDiscounts, 
                            otherAdditions, 
                            expenditure, 
                            value, 
                            valuePaid, 
                            ourNumber, 
                            branch,
                            branchNumber, 
                            wallet, 
                            TO_DATE(occurrenceDate::VARCHAR, '{$maskDate}') as occurrenceDate, 
                            TO_DATE(creditDate::VARCHAR, '{$maskDate}') AS creditDate, 
                            TO_DATE(fileMaturityDate::VARCHAR, '{$maskDate}') AS fileMaturityDate, 
                            bankId, 
                            fileId, 
                            occurrence, 
                            statusId, 
                            balance, 
                            balancewithpolicies
                       FROM temp_bank_movement
                      WHERE EXISTS (SELECT 1 FROM ONLY finInvoice II WHERE II.invoiceId = temp_bank_movement.invoiceId)";
               
        $sDataBase = SDatabase::getInstance();
        return $sDataBase->execute($sql);
    }
    
     /**
      * @return boolean
      */
    public function insereNossoNumerosInexistentes()
    {
        $sql = "INSERT INTO finBankInvoiceInfo
                            ( invoiceid, ournumber, bankaccountid )
                     SELECT invoiceid,
                            ournumber,
                            ( SELECT bankaccountid FROM ONLY fininvoice I WHERE I.invoiceId = BM.invoiceId )
                        FROM temp_bank_movement BM
                       WHERE BM.invoiceId IS NOT NULL
                        AND NOT EXISTS (SELECT 1 FROM finBankInvoiceInfo BII WHERE BM.invoiceId = BII.invoiceId)
                        AND EXISTS (SELECT 1 FROM ONLY finInvoice II WHERE II.invoiceId = BM.invoiceId)";
        
        $sDataBase = SDatabase::getInstance();
        return $sDataBase->execute($sql);
        }
        
    /**
     * Salvas os lançamentos em definitivo referentes aos registros de movimentação bancária, 
     * obtidos da tabela temporária de lançamentos 'tem_bank_movement_entries'.
     * 
     * @return boolean
     */
    public function salvaOsLancamentosDosRegistrosDaTabelaTemporaria()
    {
        $sql = "INSERT INTO finEntry
                            ( invoiceId, costCenterId, comments, bankReturnCode, entryDate, operationId, value, bankmovementid, accountSchemeId )
            SELECT DISTINCT A.invoiceId, A.costCenterId, A.comments, A.bankReturnCode, A.entryDate, A.operationId, A.value, A.tempbankmovementid, A.accountSchemeId
                       FROM temp_bank_movement_entries A
                 INNER JOIN temp_bank_movement B
			 ON B.invoiceId = A.invoiceId
		      WHERE B.statusId NOT IN ( " . FinBankMovementStatus::STATUS_NOT_FOUND . ", " . FinBankMovementStatus::STATUS_ALREADY_CLOSED . ", " . FinBankMovementStatus::STATUS_OCCURENCE_NOT_RECOGNIZED . " )";
        
        $sDataBase = SDatabase::getInstance();
        return $sDataBase->execute($sql);
    }
    
    /**
     * Verifica se os títulos referentes aos registros de movimentação bancária estão cancelados (iscanceled = true)
     * e altera para false os que estiverem nesta situação. Ticket #34373.
     * 
     * @return boolean
     */
    public function verificaTitulosCanceladosDosRegistrosDaTabelaTemporaria()
    {
        $sql = " UPDATE fininvoice
                    SET iscanceled = false
                  WHERE invoiceid IN (SELECT invoiceid 
                                        FROM temp_bank_movement
                                       WHERE CASE bankId WHEN '041'
                                                         THEN occurrence IN ('06', '07', '15')
                                                         WHEN '237'
                                                         THEN occurrence IN ('06', '17', '15')
                                              END ) "; 
                                        
        $sDataBase = SDatabase::getInstance();
        return $sDataBase->execute($sql);    
    }
    
    /**
     * Verifica se algum dos títulos baixados deve alterar os estados contratuais
     * dos alunos referentes de matriculado para pré-matriculado.
     * 
     */
    public function verificaBaixaDaPrimeiraParcelaParaPreMatricula()
    {
        $busInvoice = new BusinessFinanceBusInvoice();
        $invoiceIds = SDatabase::query("SELECT DISTINCT invoiceId FROM temp_bank_movement_entries");
        
        foreach ( $invoiceIds as $invoiceId )
        {
            $invoice = $busInvoice->getInvoice($invoiceId[0]);
            $busInvoice->primeiraParcelaPreMatricula($invoice);
        }
    }
    
    /**
     * Salva as movimentações bancárias dos títulos que não foram encontrados,
     * para consultas prosperitas.
     * 
     * @return boolean
     */
    public function salvaAsMovimentacoesBancariasDeTitulosNaoEncontrados()
    {
        $sql = "INSERT INTO finBankMovementNotFound
                            ( fileDiscount, fileInterestFine, otherDiscounts, otherAdditions, expenditure, value, valuePaid, ourNumber, branch,
                              branchNumber, wallet, occurrenceDate, creditDate, fileMaturityDate, bankId, fileId, occurrence, statusId, balance, balancewithpolicies )
                     SELECT fileDiscount, fileInterestFine, otherDiscounts, otherAdditions, expenditure, value, valuePaid, ourNumber, branch,
                            branchNumber, wallet, occurrenceDate, creditDate, fileMaturityDate, bankId::int, fileId, occurrence, statusId, balance, balancewithpolicies
                       FROM temp_bank_movement
                      WHERE statusId = " . FinBankMovementStatus::STATUS_NOT_FOUND;
               
        $sDataBase = SDatabase::getInstance();
        return $sDataBase->execute($sql);
    }
    
    /**
     * Exclui todos os registros inseridos e reseta os sequenciais nas tabelas 
     * 'temp_bank_movement' e 'temp_bank_movement_entries'.
     */
    public static function resetarTabelasTemporariasDeMovimentacoesELancamentos()
    {
        if ( SDatabase::execute("DELETE FROM temp_bank_movement_entries") )
        {
            SDatabase::execute("ALTER SEQUENCE temp_bank_movement_entries_tempentryid_seq RESTART WITH 1");
            
            if ( SDatabase::execute("DELETE FROM temp_bank_movement") )
            {
                SDatabase::execute("ALTER SEQUENCE temp_bank_movement_tempbankmovementid_seq RESTART WITH 1");
            }
        }
    }
    
    public function getLastInsertId()
    {
        $sql = " SELECT CURRVAL('fin.bankmovement_bankmovementid_seq') ";
        
        $return = SDatabase::query($sql);
        
        return $return[0][0];
    }
    
    /**
     * Lista o saldos dos bancos
     * 
     */
    public static function getSaldosBancos()
    {
        $sql = "
            SELECT conta,
                   ROUND(SUM(saldo)::numeric, 2)
              FROM (SELECT conta.accountnumber as contaid,
                           conta.description as conta,
                           SUM(movimentacao.valuepaid) as saldo
                      FROM fin.bankmovement movimentacao
                 LEFT JOIN finbankinvoiceinfo invoiceinfo
                        ON invoiceinfo.invoiceid = movimentacao.invoiceid
                INNER JOIN finbankaccount conta
                        ON conta.bankaccountid = invoiceinfo.bankaccountid
                     WHERE movimentacao.occurrence IN ('06','07', '15') -- Filtros
                  GROUP BY conta.accountnumber, conta.description
                 UNION ALL
                    SELECT conta.accountnumber as contaid,
                           conta.description as conta,
                           SUM(CASE WHEN operacao.operationtypeid = 'D' THEN movimentacao.valuepaid * -1 ELSE movimentacao.valuepaid END) as saldo
                      FROM fin.bankmovement movimentacao
                INNER JOIN finlancamentosemvinculo lancamentosem
                        ON lancamentosem.bankmovementid = movimentacao.bankmovementid
                 LEFT JOIN finoperation operacao
                        ON operacao.operationid = lancamentosem.operationid
                 LEFT JOIN finbankaccount conta
                        ON conta.bankaccountid = lancamentosem.bankaccountid
                  GROUP BY conta.accountnumber, conta.description
                   ) AS QUERY
          GROUP BY conta
          ORDER BY conta";

        return SDatabase::query($sql);
        
    }
    
    /**
     * Seta o valor da mov. bancária.
     * 
     * @param double $value
     */
    public function setValue($value)
    {
        $this->value = $value;
    }
    
    /**
     * Seta o valor pago da mov. bancária.
     * 
     * @param double $valuePaid
     */
    public function setValuePaid($valuePaid)
    {
        $this->valuePaid = $valuePaid;
    }
    
    /**
     * Seta o valor da mov. bancária.
     * 
     * @param date $occurrenceDate
     */
    public function setOccurrenceDate($occurrenceDate)
    {
        $this->occurrenceDate = $occurrenceDate;
    }

    /**
     * Verifica se o título foi baixado com diferença, e atualiza corretamente o status do mesmo
     * 
     */
    public function verificaDiferencaEAtualizaStatus()
    {
        $sql = "UPDATE temp_bank_movement
                   SET statusId = ( CASE 
                                         WHEN ( ROUND(( valuePaid - balanceWithPolicies )::numeric, GETPARAMETER('BASIC', 'REAL_ROUND_VALUE')::int) <> 0 )
                                         THEN
                                              " . FinBankMovementStatus::STATUS_DIFF_CLOSED . "::int
                                         ELSE
                                              " . FinBankMovementStatus::STATUS_CLOSED . "::int
                                    END )
                 WHERE statusId IN ( " . FinBankMovementStatus::STATUS_PARCIAL_CLOSED . "::int, " . FinBankMovementStatus::STATUS_DIFF_CLOSED . "::int, " . FinBankMovementStatus::STATUS_CLOSED . "::int )";
        
        $sDataBase = SDatabase::getInstance();
        $sDataBase->execute($sql);
    }
}
?>