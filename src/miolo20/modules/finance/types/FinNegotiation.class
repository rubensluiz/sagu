<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela fin.negociation
 * Armazena as negociações efetuadas para poder desfaze-las, se necessário.
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 21/09/2011
 */

class FinNegotiation extends SType
{
    
    const ANTECIPACAO = 'A';
    const NEGOCIACAO = 'N';
    
    /**
     * Necessário para dividir entre as parcelas o valor da taxa de negociação, caso exista.
     * 
     * @var int
     */
    public $parcelsNumber = 1;

    private $inseriuTituloEntrada = false;

    /**
     * Table fields
     */
    /**
     * Identificador da negociação
     * @var type integer
     */
    public $negotiationId;
    /**
     * Identificador da política
     * @var type integer
     */
    public $policyId;    
    /**
     * Usuário administrador que autorizou a negociação
     * @var type integer
     */
    public $adminUser;
    /**
     * Indica se houve liberação da taxa administrativa cobrada para negociação.
     * @var type boolean
     */
    public $feeRelease;
    /**
     * Número da parcela, caso seja gerado mais que uma.
     * @var type int
     */
    public $parcelNumber;
    /**
     * Valor do desconto dado na negociação.
     * @var type float
     */
    public $discount;
    
    /**
     * Se é desconto por valor (caso contrario, é por percentual)
     * 
     * @var boolean
     */
    public $discountByValue;
    
    /**
     * Alguma observação necessária sobre a negociação.
     * Na tela alternativa é a descrição.
     * @var type text
     */
    public $observation;
    
    /**
     * Lançamentos gerados na negociação
     * @var type array FinNegotiationGeneretedentrys
     */
    public $negotiationGeneratedentry;
    
    /**
     * Array de títulos da participação
     * @var type int Array de títulos
     */
    public $invoices = array();
    
    /**
     * Código da pessoa que será gerada a negociação
     * @var type int Código da pessoa
     */
    public $personId;
    
    /**
     * Data de Vencimento da negociação
     * @var type date
     */
    public $maturityDate;
    
    /**
     * Código do título gerado
     * @var type int
     */
    public $invoiceId;
    
    /**
     * Valor da negociação
     * @var type float
     */
    public $value;
    
    /**
     * Tipo de negociação
     * @var type Char
     */
    public $recordType;

    /**
     * Utilizado caso a operação for de NEGOCIAÇÃO
     *  1 - Criar um novo título e fechar os demais (Fluxo normal)
     *  2 - Dividir entre as parcelas de mensalidade restantes.
     * @var type Int
     */
    public $negotiationOption = 1;
    
    /**
     *
     * @var boolean
     */
    public $fineRelease;
    
    /**
     *
     * @var boolean
     */
    public $interestRelease;
    
    /**
     *
     * @var float
     */
    public $entryValue;
    
    /**
     * Data de competência do título
     * @var date 
     */
    public $competencyDate;
    
    /**
     * Novos Títulos a serem gerados
     * @var array 
     */
    public $generatedInvoices;
    
    /**
     * Dia de vencimento programado para cada uma das parcelas geradas
     * @var int
     */
    public $diaVencimento;
    
    /**
     * Valor de juros adicionais cobrados na negociação é percentual (true), se for numérico (false).
     * @var boolean
     */
    public $jurosAdicionalIsPercent;
    
    /**
     * Valor de juros adicionais cobrados na negociação.
     * @var float
     */
    public $jurosAdicional;
    
    /**
     * Número de parcelas geradas na negociação.
     * @var int
     */
    public $numeroParcelas;
    
    /**
     * Valor da taxa cobrada sobre a negociação é percentual (true), se for numérico (false).
     * @var boolean
     */
    public $feeValueIsPercent;
    
    /**
     * Valor da taxa cobrada sobre a negociação.
     * @var float
     */
    public $feeValue;
    
    /**
     * Valor de entrada é percentual (true), se for numérico (false).
     * @var boolean
     */
    public $entryValueIsPercent;
    
    /**
     * Código da conta bancária
     * @var int
     */
    public $bankAccountId;
    
    /**
     * Código da operação
     * @var int
     */
    public $operationId;
    
    /**
     * Código do centro de custo
     * @var int
     */
    public $costCenterId;
    
    /**
     * Construtor da classe
     */
    public function __construct($negotiationId = null)
    {
        if ( !is_null($negotiationId) )
        {
            $this->negotiationId = $negotiationId;
            $this->populate();
        }
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save($isEntry = false)
    {
        // busca por registros que possuam as chaves primarias definidas, se existir edita, caso nao insere 
        $filters = new stdClass();
        $filters->negotiationId = $this->negotiationId;
        $search = $this->searchGrid($filters);
        
        if( count($search) > 0 )
        {
            $retVal = $this->update();
        }
        else
        {
            $retVal = $this->insert($isEntry);
        }

        return $retVal;
    }

    /**
     * Desfaz a negociação e retonar seus títulos ao estado anterior
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        // Não pode excluir a negociação caso algum título gerado já esteja pago - ticket #36810
        foreach ( $this->negotiationGeneratedEntries as $lancamento )
        {
            if ( $lancamento->generated == DB_TRUE )
            {
                $sqlAux = "SELECT (RI.balance > 0),
                                  RI.invoiceId
                             FROM finEntry ET
                  INNER JOIN ONLY finReceivableInvoice RI
                               ON (RI.invoiceId = ET.invoiceId)
                            WHERE ET.entryId = ?";
                
                $pago = SDatabase::query($sqlAux, array($lancamento->entryId));
                
                if ( $pago[0][0] == DB_FALSE )
                {
                    $MIOLO->error(_M("O título {$pago[0][1]} gerado pela negociação já está pago. A negociação não pode ser desfeita."));
                }
            }
        }
        
        if( count($this->negotiationGeneratedEntries) > 0 )
        {
            $busEntry = new BusinessFinanceBusEntry();
            $busInvoice = new BusinessFinanceBusReceivableInvoice();
            
            foreach($this->negotiationGeneratedEntries as $cod=>$entry)
            {
                if( $entry->generated == DB_TRUE )
                {
                    //Cancela o título
                    $dataEntry = $busEntry->getEntry($entry->entryId);                                        
                    $busInvoice->deleteInvoice($dataEntry->invoiceId);
                }
                
                //Remove os lancamentos
                $entryId = $entry->entryId;
                $entry->delete();
                $busEntry->deleteEntry($entryId);
            }
        }
        $sql = 'DELETE FROM fin.negotiation
                      WHERE negotiationId = ?';

        $params = array();
        $params[] = $this->negotiationId;
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->negotiationId = null;
        }

        return $result;
    }

    public function duplicate()
    {
        //Não Utilizado
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT negotiationId                       
                  FROM fin.negotiation';

        $params = array();
        foreach ( (array)$filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ?';
            $params[] = $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new FinNegotiation($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Obtém dados para a grid de negocição consultas diversas financeiro
     * 
     * @param type $filters
     * @return type
     */
    public static function searchGridDiverseConsultation($filters)
    {
        $sql = 'SELECT A.negotiationId,
		       A.observation,
                       TO_CHAR(dateTime, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       A.username,
                       A.recordType
		  FROM fin.negotiation A
                 WHERE EXISTS (SELECT G.negotiationId 
                                 FROM fin.negotiationGeneratedEntries G 
                           INNER JOIN finentry E 
                                   ON E.entryId=G.entryId
                                INNER JOIN fininvoice I
                                   ON I.invoiceId=E.invoiceId
                                WHERE G.negotiationId=A.negotiationId';
        
        $params = array();
        
        if ( $filters->personId )
        {
            $where .= ' AND I.personid = ?';
            $params[] = $filters->personId;
        }
        
        $sql .=  $where . ')';
        unset($where);
        
        if ( $filters->recordType )
        {
            $where .= ' AND A.recordType = ?';
            $params[] = $filters->recordType;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .=  $where;
            $sql .= ' ORDER BY 1,2';
        }
        
        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }
    
    /**
     * Obtém dados para grid com informação da negociação
     * 
     * @param type $filters
     * @return type array()
     */
    public function searchGridDetails($filters)
    {
        $sql = 'SELECT F.invoiceid as titulo,
		       F.entryid,
		       F.operationid,
		       E.operationtypeid || \': \' || E.description,
		       TO_CHAR(F.entrydate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
		       F.creationtype,
		       ROUND(F.value, \'' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '\'),
                       TO_CHAR(D.maturityDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
		  FROM fin.negotiation A
	    INNER JOIN fin.negotiationgeneratedentries B
	            ON A.negotiationid = B.negotiationid
	    INNER JOIN finentry C
	            ON B.entryid = C.entryid
	    INNER JOIN finreceivableinvoice D
	            ON C.invoiceid = D.invoiceid
             LEFT JOIN finentry F
                    ON F.invoiceid = D.invoiceid
            INNER JOIN finoperation E
	            ON F.operationid = E.operationid
	         WHERE A.negotiationid = ? ';
        
        $params[] = $filters->negotiationId;
        
        if ( $filters->generated == DB_TRUE )
        {
            $sql .= " AND B.generated IS TRUE ";
        }
        else
        {
            $sql .= " AND B.generated IS FALSE ";
        }
        
        $sql .= " GROUP BY 1,2,3,4,5,6,7,8 ORDER BY titulo ASC ";
        
        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }
    
    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchGrid($filters)
    {   
        // SQL que leva até o boleto, para pegar informações da pessoa
        $sqlBoleto = " FROM fin.Negotiation NG
                             INNER JOIN fin.NegotiationGeneratedEntries NGE
                                     ON (NGE.negotiationId = NG.negotiationId)
                             INNER JOIN finEntry EN
                                     ON (EN.entryId = NGE.entryId)
                        INNER JOIN ONLY finReceivableInvoice RI
                                     ON (EN.invoiceId = RI.invoiceId)
                                  WHERE NG.negotiationId = A.negotiationId) ";
        
        $sql = 'SELECT A.negotiationId,
                       (SELECT DISTINCT RI.personId
                                   ' . $sqlBoleto . ' AS codigo_pessoa,
                       (SELECT DISTINCT getPersonName(RI.personId)
                                   ' . $sqlBoleto . ' AS nome_pessoa,
                       TO_CHAR(A.dateTime::DATE, getParameter(\'BASIC\', \'MASK_DATE\')) AS dataNegociacao,
		       A.policyId,
		       B.description as policydescription,
		       COALESCE(A.adminUser::VARCHAR, A.username::VARCHAR),
                       A.interestRelease  AS liberarJuros,
                       A.fineRelease AS liberarMulta,
                       A.feeRelease AS liberarTaxa,
		       A.discount,
		       A.observation,
                       A.recordType
		  FROM fin.negotiation A
		  INNER JOIN finpolicy B
			ON A.policyid=B.policyid
			WHERE EXISTS
			(SELECT G.negotiationId FROM fin.negotiationGeneratedEntries G 
                                          INNER JOIN finentry E 
                                                  ON E.entryId=G.entryId
                                          INNER JOIN fininvoice I
                                                  ON I.invoiceId=E.invoiceId
                                               WHERE G.negotiationId=A.negotiationId';
        $params = array();
        
        if ( $filters->invoiceId )
        {
            $where .= ' AND I.invoiceId = ?';
            $params[] = $filters->invoiceId;
        }
        if ( $filters->personId )
        {
            $where .= ' AND I.personid = ?';
            $params[] = $filters->personId;
        }
        
        $sql .=  $where . ')';
        unset($where);
        
        if ( $filters->negotiationId )
        {
            $where .= ' AND A.negotiationId = ?';
            $params[] = $filters->negotiationId;
        }
        if ( $filters->beginDate )
        {
            $where .= ' AND A.dateTime >= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->beginDate;
        }
        if ( $filters->endDate )
        {
            $where .= ' AND A.dateTime <= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\')';
            $params[] = $filters->endDate;
        }
        if ( $filters->policyId )
        {
            $where .= ' AND A.policyId = ?';
            $params[] = $filters->policyId;
        }
        if ( $filters->adminUser )
        {
            $where .= ' AND A.adminUser = ?';
            $params[] = $filters->adminUser;
        }
        if ( $filters->discount )
        {
            $where .= ' AND A.discount = ?';
            $params[] = $filters->discount;
        }
        if ( $filters->observation )
        {
            $where .= ' AND A.observation = ?';
            $params[] = $filters->observation;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .=  $where;
            $sql .= ' ORDER BY 1,2';
        }
        
        
        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT negotiationId,
                       policyId,
                       adminUser,
                       fineRelease,
                       interestRelease,
                       feeRelease,
                       discount,
                       discountByValue,
                       observation,
                       recordType,
                       userName,
                       ipAddress,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM fin.negotiation
                 WHERE negotiationId = ?';

        $params = array();
        $params[] = $this->negotiationId;

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Não foi encontrada nenhuma negociação com o código @1.', $module, $this->negotiationId));
        }

        list ( $this->negotiationId,
               $this->policyId,
               $this->adminUser,
               $this->fineRelease,
               $this->interestRelease,
               $this->feeRelease,
               $this->discount,
               $this->discountByValue,
               $this->observation,
               $this->recordType,
               $this->userName,
               $this->ipAddress,
               $this->dateTime) = $result[0];
        
        $filters = new stdClass();
        $filters->negotiationId = $this->negotiationId;
        $this->negotiationGeneratedEntries = FinNegotiationGeneratedEntries::search($filters);
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert($isEntry = false)
    {                
        $sql = 'INSERT INTO fin.negotiation            
                            (negotiationId,
                             policyId,
                             adminUser,
                             fineRelease,
                             interestRelease,
                             feeRelease,
                             discount,
                             discountByValue,
                             recordType,
                             observation,
                             diaVencimento,
                             jurosAdicionalIsPercent,
                             jurosAdicional,
                             numeroParcelas,
                             feeValueIsPercent,
                             feeValue,
                             entryValueIsPercent,
                             bankAccountId,
                             operationId,
                             costCenterId,
                             entryValue)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';

        $sqlPK = "SELECT nextval('fin.negotiation_negotiationid_seq'::regclass)";
        $result = SDatabase::query($sqlPK);
        $negotiationId = $result[0][0];
        
        $params = array();
        $params[] = $negotiationId;
        $params[] = $this->policyId;
        $params[] = $this->adminUser;
        $params[] = $this->fineRelease;
        $params[] = $this->interestRelease;
        $params[] = $this->feeRelease;
        $params[] = $this->discount;
        $params[] = $this->discountByValue;
        $params[] = $this->recordType;
        $params[] = $this->observation;      
        $params[] = $this->diaVencimento;
        $params[] = $this->jurosAdicionalIsPercent;
        $params[] = $this->jurosAdicional;
        $params[] = $this->numeroParcelas;
        $params[] = $this->feeValueIsPercent;
        $params[] = $this->feeValue;
        $params[] = $this->entryValueIsPercent;
        $params[] = $this->bankAccountId;
        $params[] = $this->operationId;
        $params[] = $this->costCenterId;
        $params[] = $this->entryValue;

        SDatabase::execute($sql, $params);
        
        return $negotiationId;
    }
    
    /**
     * Insere os títulos de negociação.
     * 
     * @param int $negotiationId
     * @return type
     */
    public function insertInvoicesNegotiation()
    {      
        $MIOLO = MIOLO::getInstance();
        
        $invoiceNegociationConfig = FinInvoiceNegociationConfig::getInstanceByOperation($this->recordType);
        
        $busInvoice = new BusinessFinanceBusReceivableInvoice();
        $busEntry = new BusinessFinanceBusEntry();
        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();

        $busDefaultOperations = new BusinessFinanceBusDefaultOperations();
        $agreementoperation = $busDefaultOperations->getDefaultOperation('agreementoperation');

        $MIOLO->uses('types.class', 'finance');
        
        $insertInvoice = true;
        if( strlen($this->discount) == 0 )
        {
            $discount = '0';
        }
        else
        {
            $discount = $this->discount;
        }
        $invoiceValue = SAGU::calcNumber($this->value.'-'.$discount, true);

        if( count($this->invoices) > 0 )
        {
            foreach( $this->invoices as $invoiceId )
            {
                //$invoiceData = $busInvoice->getInvoice($invoiceId);                                        
                $value = $busInvoice->getInvoiceBalance($invoiceId);

                //Fecha os titulos da negociação
                unset($entryData);
                $entryData = new StdClass();
                $entryData->invoiceId = $invoiceId;
                $entryData->costCenterId = $invoiceNegociationConfig->costCenterId;
                $entryData->comments = ''; //FIXME Comments
                $entryData->bankReturnCode = '';
                $entryData->isAccounted = SAGU::getParameter('BASIC', 'DB_FALSE');
                $entryData->creationType = 'A'; // Tickets #28353
                $entryData->entryDate = date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));

                $entryData->operationId = $agreementoperation;//Operação de fechamento - Default operatioon de credito de acordo

                $entryData->value = number_format($value, SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), '');

                $entrys[] = array($busEntry->insertEntry($entryData),DB_FALSE);
            }
                 
            /**
             * negotiationOption = 2 - Dividir entre as parcelas de mensalidade restantes.
             * Buscar os titulos de operação MENSALIDADE mesmo ainda nao vencidos da pessoa
             * e dividir o valor entre as parcelas ainda não pagas.
             */            
            if( $this->negotiationOption == '2' )
            {
                $insertInvoice = false;
                $filters = new stdClass();                    
                $filters->personId = $this->personId;
                $filters->onlyOpen = DB_TRUE;
                $filters->isCanceled = DB_FALSE;
                $filters->isClosed = DB_FALSE;                    
                $filters->isExpired = DB_FALSE; //Traz os titulos de antecipação  
                $filters->isEnrollOperations = DB_TRUE; //Operações de mensalidade
                
                $negotiationInvoices = $busInvoice->searchReceivableInvoice($filters);
                if( count($negotiationInvoices) > 0 )
                {
                    // Calcula o valor de cada lancamento a ser adicionado nos titulos em aberto
                    $parcelValue = SAGU::calcNumber($invoiceValue.'/'.count($negotiationInvoices));
                    $releaseOk = false;
                    
                    //Percorre e divide o valor da negociação entre os titulos em aberto
                    foreach($negotiationInvoices as $nCod=>$nInvoice)
                    {
                        // Insere o lancamento referente a negociação
                        $entry = new FinEntry();
                        $entry->invoiceId = $nInvoice[0];
                        $entry->isAccounted = DB_FALSE;
                        $entry->creationType = 'A'; // gerado automaticamente pelo sistema
                        $entry->costCenterId = $invoiceNegociationConfig->costCenterId;
                        $entry->entryDate = SAGU::getDateNow();
                        $entry->operationId = $invoiceNegociationConfig->operationId;                        
                        $entry->value = $parcelValue; //Valor de cada parcela
                        $entry->comments = SAGU::getParameter('FINANCE', 'ENTRY_NEGOTIATION_COMMENT');
                        $entrys[] = array($busEntry->insertEntry($entry), DB_FALSE);

                        //Taxa de negociação
                        if( $this->feeRelease == DB_FALSE && $invoiceNegociationConfig->negotiationFee > 0 )
                        {
                            if( !$releaseOk ) //Somente insere na primeira parcela
                            {
                                // Insere o lancamento referente a taxa de negociação
                                $entry = new FinEntry();
                                $entry->invoiceId = $nInvoice[0];
                                $entry->isAccounted = DB_FALSE;
                                $entry->creationType = 'A'; // gerado automaticamente pelo sistema
                                $entry->costCenterId = $invoiceNegociationConfig->costCenterId;
                                $entry->entryDate = SAGU::getDateNow();
                                $entry->operationId = $invoiceNegociationConfig->operationId; //FIXME Verificar operação da taxa de negociação
                                $entry->value = $invoiceNegociationConfig->negotiationFee; //Valor da taxa de negociação
                                $entry->comments = "Taxa de negociação";
                                $entrys[] = array($busEntry->insertEntry($entry), DB_FALSE);
                                
                                $releaseOk = true;
                            }
                        }

                        //Atualiza o valor do titulo
                        $busInvoice->updateInvoiceBalance($nInvoice[0]);
                    }
                }
                else
                {
                    //Caso não houver nenhum titulo em aberto a ser pago insere um novo referente a negociação
                    $insertInvoice = true;                    
                }
            }
            else if ( $this->negotiationOption == '3' )
            {
                $insertInvoice = false;
            }
            
            if( $insertInvoice == true )
            {
                // Insere o titulo referente a negociação
                $invoice = new FinReceivableInvoice();
                $invoice->personId = $this->personId;
                $invoice->costCenterId = $invoiceNegociationConfig->costCenterId;
                $invoice->parcelNumber = 1; //Sempre vai criar a primeira parcela (e única) aqui
                $invoice->emissionDate = SAGU::getDateNow();
                $invoice->policyId = $invoiceNegociationConfig->policyId;
                $invoice->bankAccountId = $invoiceNegociationConfig->bankAccountId;
                $invoice->isCanceled = DB_FALSE;
                $invoice->isImported = DB_FALSE;
                $invoice->incomeSourceId = SAGU::getParameter('FINANCE', 'ACCORD_INCOME_SOURCE_ID');
                $invoice->emissionTypeId = SAGU::getParameter('BASIC', 'DEFAULT_EMISSION_TYPE_ID');
                $invoice->maturityDate = $this->maturityDate; //Data de vencimento
                $invoice->referenceMaturityDate = $this->maturityDate;
                $invoice->value = $invoiceValue; //valor nominal do titluo
                $invoice->competencyDate = $this->competencyDate;
                $this->invoiceId = $busReceivableInvoice->insertReceivableInvoice($invoice);

                // Insere o lancamento referente a negociação
                $entry = new FinEntry();
                $entry->invoiceId = $this->invoiceId;
                $entry->isAccounted = DB_FALSE;
                $entry->creationType = 'A'; // gerado automaticamente pelo sistema
                $entry->costCenterId = $invoiceNegociationConfig->costCenterId;
                $entry->entryDate = SAGU::getDateNow();
                $entry->operationId = $invoiceNegociationConfig->operationId;
                $entry->value = $invoiceValue;
                $entrys[] = array($busEntry->insertEntry($entry), DB_TRUE);
                
                //Insere o lançamento referente à taxa de negociação
                if( $this->feeRelease == DB_FALSE && $invoiceNegociationConfig->negotiationFee > 0 && $invoiceNegociationConfig->operation == 'N' )
                {
                    // Insere o lancamento referente a taxa de negociação
                    $entry = new FinEntry();
                    $entry->invoiceId = $this->invoiceId;
                    $entry->isAccounted = DB_FALSE;
                    $entry->creationType = 'A'; // gerado automaticamente pelo sistema
                    $entry->costCenterId = $invoiceNegociationConfig->costCenterId;
                    $entry->entryDate = SAGU::getDateNow();
                    $entry->operationId = $invoiceNegociationConfig->operationId; //FIXME Verificar operação da taxa de negociação
                    $entry->value = $invoiceNegociationConfig->negotiationFee; //Valor da taxa de negociação
                    $entry->comments = "Taxa de negociação";
                    $entrys[] = array($busEntry->insertEntry($entry), DB_TRUE);
                }
                //Atualiza o valor do titulo
                $busInvoice->updateInvoiceBalance($this->invoiceId);
            }
        }
        
        if ( $this->negotiationOption == '3' )
        {
            foreach( $this->generatedInvoices as $cod=>$generatedInvoice )
            {
                $invoice = new FinReceivableInvoice();
                $invoice->personId = $this->personId;
                $invoice->costCenterId = $invoiceNegociationConfig->costCenterId;
                $invoice->parcelNumber = $generatedInvoice->parcelNumber;
                $invoice->emissionDate = SAGU::getDateNow();
                $invoice->policyId = $invoiceNegociationConfig->policyId;
                $invoice->bankAccountId = $invoiceNegociationConfig->bankAccountId;
                $invoice->isCanceled = DB_FALSE;
                $invoice->isImported = DB_FALSE;
                $invoice->incomeSourceId = SAGU::getParameter('FINANCE', 'ACCORD_INCOME_SOURCE_ID');
                $invoice->emissionTypeId = SAGU::getParameter('BASIC', 'DEFAULT_EMISSION_TYPE_ID');
                $invoice->maturityDate = $generatedInvoice->maturityDate; //Data de vencimento
                $invoice->referenceMaturityDate = $generatedInvoice->maturityDate;
                $invoice->value = $generatedInvoice->value; //valor nominal do titluo
                $invoice->competencyDate = $this->competencyDate;

                $this->invoiceId = $busReceivableInvoice->insertReceivableInvoice($invoice);

                // Insere o lancamento referente a negociação
                $entry = new FinEntry();
                $entry->invoiceId = $this->invoiceId;
                $entry->isAccounted = DB_FALSE;
                $entry->creationType = 'A'; // gerado automaticamente pelo sistema
                $entry->costCenterId = $invoiceNegociationConfig->costCenterId;
                $entry->entryDate = SAGU::getDateNow();
                $entry->operationId = $invoiceNegociationConfig->operationId;
                $entry->value = $generatedInvoice->value;
                $entrys[] = array($busEntry->insertEntry($entry), DB_TRUE);

                //Insere o lançamento referente à taxa de negociação
                if( $this->feeRelease == DB_FALSE && $invoiceNegociationConfig->negotiationFee > 0 && $invoiceNegociationConfig->operation == 'N' )
                {
                    // Insere o lancamento referente a taxa de negociação
                    $entry = new FinEntry();
                    $entry->invoiceId = $this->invoiceId;
                    $entry->isAccounted = DB_FALSE;
                    $entry->creationType = 'A'; // gerado automaticamente pelo sistema
                    $entry->costCenterId = $invoiceNegociationConfig->costCenterId;
                    $entry->entryDate = SAGU::getDateNow();
                    $entry->operationId = $invoiceNegociationConfig->operationId; //FIXME Verificar operação da taxa de negociação
                    $entry->value = SAGU::calcNumber("{$invoiceNegociationConfig->negotiationFee} / {$this->parcelsNumber}"); //Valor da taxa de negociação
                    $entry->comments = "Taxa de negociação";
                    $entrys[] = array($busEntry->insertEntry($entry), DB_TRUE);
                }            
                //Atualiza o valor do titulo
                $busInvoice->updateInvoiceBalance($this->invoiceId);
            }
        }

        foreach($entrys as $entry)
        {
            if( strlen($entry[0]) > 0 )
            {
               $this->insertNegotiationInvoicesGenerated($entry, $this->negotiationId);
            }
        }
        
        return true;
    }
    
    /**
     * Inere a negociação dos titulos gerados
     * 
     * @param array $entry
     * @param int $negotiationId
     */
    private function insertNegotiationInvoicesGenerated($entry, $negotiationId)
    {
        $this->negotiationGeneratedentry = new FinnegotiationGeneratedEntries();
        $this->negotiationGeneratedentry->negotiationId = $negotiationId;
        $this->negotiationGeneratedentry->entryId = $entry[0];
        $this->negotiationGeneratedentry->generated = $entry[1];
        $this->negotiationGeneratedentry->save();
    }
    
    /**
     * @return array
     */
    public function insereTituloDeEntrada()
    {
        $invoiceNegociationConfig = FinInvoiceNegociationConfig::getInstanceByOperation($this->recordType);
        
        $busEntry = new BusinessFinanceBusEntry();                
        $busReceivableInvoice = new BusinessFinanceBusReceivableInvoice();

        // Insere o titulo referente a negociação
        $invoice = new FinReceivableInvoice();
        $invoice->personId = $this->personId;
        $invoice->costCenterId = $invoiceNegociationConfig->costCenterId;
        $invoice->parcelNumber = $this->parcelNumber;
        $invoice->emissionDate = SAGU::getDateNow();
        $invoice->policyId = $invoiceNegociationConfig->policyId;
        $invoice->bankAccountId = $invoiceNegociationConfig->bankAccountId;
        $invoice->isCanceled = DB_FALSE;
        $invoice->isImported = DB_FALSE;
        $invoice->incomeSourceId = SAGU::getParameter('FINANCE', 'ACCORD_INCOME_SOURCE_ID');
        $invoice->emissionTypeId = SAGU::getParameter('BASIC', 'DEFAULT_EMISSION_TYPE_ID');
        $invoice->maturityDate = $this->maturityDate; //Data de vencimento
        $invoice->referenceMaturityDate = $this->maturityDate;
        $invoice->value = $this->entryValue; //valor nominal do titluo
        $invoice->competencyDate = $this->competencyDate;
        $this->invoiceId = $busReceivableInvoice->insertReceivableInvoice($invoice);

        // Insere o lancamento referente a negociação
        $entry = new FinEntry();
        $entry->invoiceId = $this->invoiceId;
        $entry->isAccounted = DB_FALSE;
        $entry->creationType = 'A'; // gerado automaticamente pelo sistema
        $entry->costCenterId = $invoiceNegociationConfig->costCenterId;
        $entry->entryDate = SAGU::getDateNow();
        $entry->operationId = $invoiceNegociationConfig->operationId;
        $entry->value = $this->entryValue;

        $arrayEntry = array($busEntry->insertEntry($entry), DB_TRUE);
        $this->insertNegotiationInvoicesGenerated($arrayEntry, $this->negotiationId);

        return $arrayEntry;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE fin.negotiation
                   SET policyId = ?,
                       adminUser = ?,
                       fineRelease = ?,
                       interestRelease = ?,
                       feeRelease = ?,
                       discount = ?,
                       discountByValue = ?,
                       recordType = ?,
                       observation = ?,
                       diaVencimento = ?,
                       jurosAdicionalIsPercent = ?,
                       jurosAdicional = ?,
                       numeroParcelas = ?,
                       feeValueIsPercent = ?,
                       feeValue = ?,
                       entryValueIsPercent = ?,
                       bankAccountId = ?,
                       operationId = ?,
                       costCenterId = ?,
                       entryValue = ?
                 WHERE negotiationId = ?';

        $params = array();
        $params[] = $this->policyId;
        $params[] = $this->adminUser;
        $params[] = $this->fineRelease;
        $params[] = $this->interestRelease;
        $params[] = $this->feeRelease;
        $params[] = $this->discount;
        $params[] = $this->discountByValue;
        $params[] = $this->recordType;
        $params[] = $this->observation;
        $params[] = $this->diaVencimento;
        $params[] = $this->jurosAdicionalIsPercent;
        $params[] = $this->jurosAdicional;
        $params[] = $this->numeroParcelas;
        $params[] = $this->feeValueIsPercent;
        $params[] = $this->feeValue;
        $params[] = $this->entryValueIsPercent;
        $params[] = $this->bankAccountId;
        $params[] = $this->operationId;
        $params[] = $this->costCenterId;
        $params[] = $this->entryValue;

        $params[] = $this->negotiationId;

        return SDatabase::execute($sql, $params);
    }
    
    public static function listRecordType()
    {
        $module = SAGU::getFileModule(__FILE__);
        
        return array(
            self::ANTECIPACAO => _M('Antecipação', $module),
            self::NEGOCIACAO => _M('Negociação', $module)
        );
    }
    
    /**
     * Faz calculo do valor levando em conta o percentual configurado
     * 
     * @return string
     */
    public static function calculaValorEntrada($valorNegociacao, $percentual)
    {
        $valor = null;
        
        if ( strlen($valorNegociacao) > 0 && strlen($percentual) > 0 )
        {
            $valor = SAGU::calcNumber("{$valorNegociacao} * 0.{$percentual}", true);
        }
        
        return $valor;
    }
    
    public function getInseriuTituloEntrada()
    {
        return $this->inseriuTituloEntrada;
    }

    public function setInseriuTituloEntrada($inseriuTituloEntrada)
    {
        $this->inseriuTituloEntrada = $inseriuTituloEntrada;
    }
}
?>