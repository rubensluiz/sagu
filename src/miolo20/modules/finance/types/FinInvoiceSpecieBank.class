<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela fin.invoiceSpecieBank
 * Relaciona as espécies dos títulos do SAGU com respectiva espécie de um banco.
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 31/08/2011
 */

class FinInvoiceSpecieBank extends SType
{
    /**
     * Table fields
     */
    /**
     * Identificador do banco.
     */
    protected $bankId;
    /**
     * Identificador da espécie do título
     */
    protected $invoiceSpecieId;
    /**
     * Respectivo valor utilizado pelo banco
     */
    protected $invoiceSpecieBankValue;

    /**
     * Construtor da classe
     */
    public function __construct($bankId = null, $invoiceSpecieId = null)
    {
        if ( !is_null($bankId) && !is_null($invoiceSpecieId) )
        {
            $this->bankId = $bankId;
            $this->invoiceSpecieId = $invoiceSpecieId;
            $this->populate();
        }
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        // busca por registros que possuam as chaves primarias definidas, se existir edita, caso nao insere 
        $filters = new stdClass();
        $filters->bankId = $this->bankId;
        $filters->invoiceSpecieId = $this->invoiceSpecieId;
        $search = $this->searchGrid($filters);
        if( count($search) > 0 )
        {
            $retVal = $this->update();
        }
        else
        {
            $retVal = $this->insert();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM fin.invoiceSpecieBank
                      WHERE bankId = ? AND invoiceSpecieId = ?';

        $params = array();
        $params[] = $this->bankId;
        $params[] = $this->invoiceSpecieId;
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->bankId = null;
            $this->invoiceSpecieId = null;
        }

        return $result;
    }

    public function duplicate()
    {
        //Não Utilizado
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT bankId,
                       invoiceSpecieId
                  FROM fin.invoiceSpecieBank';

        $params = array();
        foreach ( (array)$filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ?';
            $params[] = $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new FinInvoiceSpecieBank($result[$i][0]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchGrid($filters)
    {
        $sql = 'SELECT bankId,
                       invoiceSpecieId,
                       invoiceSpecieBankValue
                  FROM fin.invoiceSpecieBank';

        $params = array();
        if ( $filters->bankId )
        {
            $where .= ' AND bankId = ?';
            $params[] = $filters->bankId;
        }
        if ( $filters->invoiceSpecieId )
        {
            $where .= ' AND invoiceSpecieId = ?';
            $params[] = $filters->invoiceSpecieId;
        }
        if ( $filters->invoiceSpecieBankValue )
        {
            $where .= ' AND invoiceSpecieBankValue = ?';
            $params[] = $filters->invoiceSpecieBankValue;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY 1,2';
        }

        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT bankId,
                       invoiceSpecieId,
                       invoiceSpecieBankValue,
                       userName,
                       ipAddress,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM fin.invoiceSpecieBank
                 WHERE bankId = ? AND invoiceSpecieId = ?';

        $params = array();
        $params[] = $this->bankId;
        $params[] = $this->invoiceSpecieId;

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Não foram encontrados espécies relacionadas ao banco @1 e espécie @2.', $module, $this->bankId, $this->invoiceSpecieId));
        }

        list ( $this->bankId,
               $this->invoiceSpecieId,
               $this->invoiceSpecieBankValue,
               $this->userName,
               $this->ipAddress,
               $this->dateTime ) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'INSERT INTO fin.invoiceSpecieBank            
                            (bankId,
                             invoiceSpecieId,
                             invoiceSpecieBankValue)
                     VALUES (?, ?, ?)';

        $params = array();
        $params[] = $this->bankId;
        $params[] = $this->invoiceSpecieId;
        $params[] = $this->invoiceSpecieBankValue;

        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE fin.invoiceSpecieBank
                   SET invoiceSpecieBankValue = ?
                 WHERE bankId = ? AND invoiceSpecieId = ?';

        $params = array();
        $params[] = $this->invoiceSpecieBankValue;
        $params[] = $this->bankId;
        $params[] = $this->invoiceSpecieId;

        return SDatabase::execute($sql, $params);
    }
}
?>