<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types cobranca bancaria
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 24/06/2013
 */

class FinCobrancaBancaria extends SType
{
    protected $_utilizaNovoPadrao = true;
    
    const LAYOUT_CNAB240 = 'CNAB240';
    const LAYOUT_CNAB400 = 'CNAB400';
    
    const DATA_DDMMAA = 'ddmmyy';
    const DATA_DDMMAAAA = 'ddmmyyyy';
    
    const ENVIO_BANCO = 'B';
    const ENVIO_EMPRESA = 'E';
    
    public $cobrancabancariaid;
    public $descricao;
    public $leiaute;
    public $envio;
    public $formatodata;
    public $codcedente;
    public $carteira;
    public $especie;
    public $bankaccountid;
    
    /**
     *
     * @var FinConfiguracaoRemessa
     */
    private $configuracaoRemessa;
    
    /**
     * @return FinBankAccount
     */
    public function obterContaBancaria()
    {
        return new FinBankAccount($this->bankaccountid);
    }
    
    /**
     * @return array
     */
    public static function listarCobrancas()
    {
        $cob = new FinCobrancaBancaria();
        
        return $cob->findList();
    }
    
    public function obterFormatoData()
    {
        return SAGU::NVL($this->formatodata, self::DATA_DDMMAAAA);
    }

    /**
     * @return FinConfiguracaoRemessa
     */
    public function obterConfiguracaoRemessa()
    {
        if ( !$this->configuracaoRemessa )
        {
            $confRemessa = new FinConfiguracaoRemessa();
            $this->configuracaoRemessa = $confRemessa->findOne( $this->msql()->addEqualCondition('FinConfiguracaoRemessa.cobrancabancariaid', $this->cobrancabancariaid) );
            
            // Cria uma configuracao caso nao exista
            if ( ! ( $this->configuracaoRemessa instanceof FinConfiguracaoRemessa ) )
            {
                $this->configuracaoRemessa = new FinConfiguracaoRemessa();
                $this->configuracaoRemessa->cobrancabancariaid = $this->cobrancabancariaid;
                $this->configuracaoRemessa->nomearquivo = 'REMESSA.REM';
                $this->configuracaoRemessa->sequencia = 1;
                $this->configuracaoRemessa->save();
            }
        }
        
        return $this->configuracaoRemessa;
    }
    
    /**
     * @return array
     */
    public static function obterFormatoDatas()
    {
        return array(
            self::DATA_DDMMAA => _M('DDMMAA'),
            self::LAYOUT_CNAB400 => _M('DDMMAAAA')
        );
    }
    
    /**
     * @return array
     */
    public static function obterLeiautes()
    {
        return array(
            self::LAYOUT_CNAB240 => _M('CNAB 240'),
            self::LAYOUT_CNAB400 => _M('CNAB 400')
        );
    }
    
    /**
     * @return array
     */
    public static function obterEnvioTipo()
    {
        return array(
            self::ENVIO_BANCO => _M('Banco'),
            self::ENVIO_EMPRESA => _M('Empresa')
        );
    }
    
    public function validarDados()
    {
        $configuracao = $this->obterConfiguracaoRemessa();
        
        if ( !$configuracao )
        {
            throw new Exception('Configuração da remessa não encontrada.');
        }
        
        if ( !$configuracao->obterCamposRemessa() )
        {
            throw new Exception('Nenhum campo configurado foi encontrado para esta remessa.');
        }
    }
    
    public function delete()
    {
        $conf = $this->obterConfiguracaoRemessa();
        $conf->delete();
        
        return parent::delete();
    }
    
    /**
     * Funcao criada exclusivamente para testes de desenvolvimento. 
     */
    public static function gerarArquivoBradesco($filtros)
    {   
        $bankAcc = new FinBankAccount();
        
        // Cobranca
        $cob = new FinCobrancaBancaria();
        $cob->descricao = 'Teste bradesco';
        $cob->leiaute = FinCobrancaBancaria::LAYOUT_CNAB400;
//        $cob->bankaccountid = $bankAcc->findOne()->bankaccountid;
        $cob->bankaccountid = 2;
        $cob->envio = FinCobrancaBancaria::ENVIO_BANCO;
        $cob->formatodata = FinCobrancaBancaria::DATA_DDMMAA;
        $cob->codcedente = 1111;
        $cob->carteira = '09';
        $cob->especie = 3333;
        $cob->save();

        // Configuracao
        $conf = new FinConfiguracaoRemessa();
        $conf->cobrancabancariaid = $cob->getLastInsertId();
        $conf->nomearquivo = 'REMESSA.REM';
        $conf->sequencia = 1;
        $conf->quebralinha = FinConfiguracaoRemessa::QUEBRA_LINHA_RN;
        $conf->save();
        
        // BRADESCO 400 POSICOES
        //
        // HEADER
        //
        $campos = array();
        $campos[] = array('completar' => 'Z', 'posicoes' => '001 001', 'valor' => '0');
        $campos[] = array('completar' => 'Z', 'posicoes' => '002 002', 'valor' => '1');
        $campos[] = array('completar' => 'B', 'posicoes' => '003 009', 'valor' => 'REMESSA');
        $campos[] = array('completar' => 'Z', 'posicoes' => '010 011', 'valor' => '01');
        $campos[] = array('completar' => 'B', 'posicoes' => '012 026', 'valor' => 'COBRANCA');
        
        // @TODO Ver muca, este numero deve ser dinamico
        $campos[] = array('completar' => 'Z', 'posicoes' => '027 046', 'valor' => '4565052'); // CODIGO DA EMPRESA. Será fornecido pelo Bradesco, quando do Cadastramento Vide Obs. Pág. 19
        
        
        $campos[] = array('completar' => 'B', 'posicoes' => '047 076', 'valor' => 'BRADESCO S/A'); // Razão Social 
        $campos[] = array('completar' => 'Z', 'posicoes' => '077 079', 'valor' => '237'); // Número do Bradesco na Câmara de Compensação 
        $campos[] = array('completar' => 'B', 'posicoes' => '080 094', 'valor' => 'Bradesco'); // Nome do banco por extenso
        $campos[] = array('completar' => 'Z', 'posicoes' => '095 100', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::DATA_DE_GERACAO); // Data gravacao do arquivo
        $campos[] = array('completar' => 'B', 'posicoes' => '101 108', 'valor' => ''); // brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '109 110', 'valor' => 'MX'); // Identificação do Sistema 
        $campos[] = array('completar' => 'Z', 'posicoes' => '111 117', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_DA_REMESSA); // N. Sequencial de remessa
        $campos[] = array('completar' => 'B', 'posicoes' => '118 394', 'valor' => ''); // brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '395 400', 'valor' => '000001', 'alinhamento' => 'D'); // No Seqüencial do Registro de Um em Um
        
        self::insereCampos($campos, $conf->getLastInsertId(), FinCampoRemessa::REG_HEADER_ARQUIVO);
                        
        //
        // DETALHE
        //
        // Lay-out do Arquivo-Remessa - Registro de Transação - Tipo 1
        $campos = array();
        $campos[] = array('completar' => 'Z', 'posicoes' => '001 001', 'valor' => '1'); // identificacao do registro
        $campos[] = array('completar' => 'Z', 'posicoes' => '002 006', 'valor' => '0'); // codigo da agencia do sacado exclusivo para debito em conta
        $campos[] = array('completar' => 'B', 'posicoes' => '007 007', 'valor' => '0'); // debito da agencia do sacado
        $campos[] = array('completar' => 'Z', 'posicoes' => '008 012', 'valor' => '0'); // razao da conta do sacado
        $campos[] = array('completar' => 'Z', 'posicoes' => '013 019', 'valor' => '0'); // conta corrente do sacado
        $campos[] = array('completar' => 'B', 'posicoes' => '020 020', 'valor' => '0'); // digito da conta corrente do sacado
        
        $campos[] = array('completar' => 'Z', 'posicoes' => '021 021', 'valor' => '0');
        $campos[] = array('completar' => 'Z', 'posicoes' => '022 024', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CODIGO_DA_CARTEIRA);
        $campos[] = array('completar' => 'Z', 'posicoes' => '025 029', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CODIGO_DO_BANCO);
        $campos[] = array('completar' => 'Z', 'posicoes' => '030 036', 'valor' => '109877'); //'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CONTA_CORRENTE
        $campos[] = array('completar' => 'Z', 'posicoes' => '037 037', 'valor' => '2'); //'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::DIGITO_DA_CONTA
        
        // @TODO muca vai descobrir o que é
        $campos[] = array('completar' => 'B', 'posicoes' => '038 062', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CODIGO_DO_TITULO); // numero controle do participante
        
        $campos[] = array('completar' => 'Z', 'posicoes' => '063 065', 'valor' => '237'); // numero do banco
        $campos[] = array('completar' => 'Z', 'posicoes' => '066 066', 'valor' => '2'); // Campo de Multa , Se campo 66 = 2, considerar percentual de multa.
        $campos[] = array('completar' => 'Z', 'posicoes' => '067 070', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::PERCENTUAL_DA_MULTA); // percentual de multa a ser considerado (2 inteiros e 2 decimais)
        $campos[] = array('completar' => 'Z', 'posicoes' => '071 081', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO); // identificacao do titulo no banco. Nosso Número Para Cobrança com e sem Registro
        $campos[] = array('completar' => 'B', 'posicoes' => '082 082', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO, 'tipovalor' => FinCampoRemessa::TIPO_VALOR_MODULO10); // digito de auto conferencia do Nosso numero (manual Pag. 21)
        $campos[] = array('completar' => 'Z', 'posicoes' => '083 092', 'valor' => ''); // valor desconto bonificacao por dia
        $campos[] = array('completar' => 'Z', 'posicoes' => '093 093', 'valor' => '2', ); // 1=banco emite e processa o registro, 2=cliente emite e o banco somente processa o registro
        $campos[] = array('completar' => 'B', 'posicoes' => '094 094', 'valor' => 'N', ); // identificacao se emite papeleta para debito automatico. N=Nao registra na cobranca e Diferente de N registra e emite Papeleta
        $campos[] = array('completar' => 'B', 'posicoes' => '095 104'); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '105 105', 'valor' => ''); //indicador rateio credito. Somente devera ser preenchido com a letra R, se a empresa participa da rotina de rateio de credito, caso nao participe, informar Branco.
        $campos[] = array('completar' => 'Z', 'posicoes' => '106 106', 'valor' => '2'); //enderecamento para aviso do debito automatico em conta corrente. 1=emite aviso, e assume o endereco do sacado constante do arquivo-remessa, 2=nao emite aviso; diferente de 1 ou 2=emite e assume o endereco do cliente debitado, constante do nosso cadastro
        $campos[] = array('completar' => 'B', 'posicoes' => '107 108', 'valor' => ''); // brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '109 110', 'valor' => '01'); // identificacao ocorrencia [01=REMESSA, 02=PEDIDO DE BAIXA, 04=CONCESSAO DE ABATIMENTO...]
        $campos[] = array('completar' => 'B', 'posicoes' => '111 120', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO); // Numero do documento
        $campos[] = array('completar' => 'Z', 'posicoes' => '121 126', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::DATA_DE_VENCIMENTO); // data do vencimento do titulo
        $campos[] = array('completar' => 'Z', 'posicoes' => '127 139', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::VALOR_DO_TITULO); // valor do titulo (REMOVER VIRGULAS E ZEROS)
        $campos[] = array('completar' => 'Z', 'posicoes' => '140 142', 'valor' => '0'); // numero do banco na camara de compensacao
        $campos[] = array('completar' => 'Z', 'posicoes' => '143 147', 'valor' => '1999'); // codigo da agencia depositaria
        $campos[] = array('completar' => 'B', 'posicoes' => '148 149', 'valor' => '04'); // especie do titulo [01=DUPLICATA, 02=NOTA PROMISSORIA, 03=NOTA DE SEGURO, 04=COBRANCA SERIADA, 05=RECIBO, 10=LETRAS DE CAMBIO, 11=NOTAS DE DEBITO, 12=DUPLICATA DE SERV, 99=OUTROS]
        $campos[] = array('completar' => 'B', 'posicoes' => '150 150', 'valor' => 'A'); // identificacao [A=ACEITO, N=NAO ACEITO]
        $campos[] = array('completar' => 'Z', 'posicoes' => '151 156', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::DATA_DE_EMISSAO);

        
//157 a 160 - 1a / 2a
//Instrução
//Campo destinado para pré-determinar o protesto do Título ou a baixa por decurso
//de prazo, quando do registro.
//Não havendo interesse, preencher com Zeros.
//Porém, caso a Empresa deseje se utilizar da instrução automática de protesto
//ou da baixa por decurso de prazo, informamos abaixo os procedimentos:
//- posição 157 a 158 = Indicar o código ?06? - (Protesto) ou código ?18? -
//(decurso de prazo).
//- posição 159 a 160 = Indicar o número de dias a protestar (mínimo 5 dias) ou
//indicar o número de dias para Decurso de prazo (sem mínimo de dias).
//Nota: A posição 157 a 158, também poderá ser utilizada para definir as
//seguintes mensagens, a serem impressas nas papeletas de cobrança, emitidas pelo
//Banco:
//08
//09
//10
//11
//12
//13
//14
//15
//Não cobrar juros de mora
//Não receber após o vencimento
//Multa de 10% após o 4o dia do Vencimento.
//Não receber após o 8o dia do vencimento.
//Cobrar encargos após o 5o dia do vencimento.
//Cobrar encargos após o 10o dia do vencimento.
//Cobrar encargos após o 15o dia do vencimento
//Conceder desconto mesmo se pago após o vencimento.
//Atenção: Essas instruções deverão ser enviadas no Arquivo-Remessa, quando da
//entrada, desde que o código de ocorrência na posição 109
//a 110 do
//registro de transação, seja ?01?, para as instruções de protesto, o CNPJ
/// CPF e o endereço do Sacado deverão ser informados corretamente.
        
        $campos[] = array('completar' => 'Z', 'posicoes' => '157 158', 'valor' => ''); // primeira instrucao
        $campos[] = array('completar' => 'Z', 'posicoes' => '159 160', 'valor' => ''); // segunda instrucao

        
        
//161 a 173 - Valor a ser Cobrado por dia de atraso
//Campo destinado para o Cedente informar o valor da mora dia a ser cobrado do
//Sacado, no caso de pagamento com atraso (somente valor).
//Porém, caso o Cedente não queira informar o valor da mora dia, no Arquivo
//Remessa, poderemos calculá-lo e imprimi-lo, contudo torna-se necessário
//informar o valor de sua taxa de juros mensal, através de carta, a qual deverá
//ser encaminhada para a nossa Agência, para o efetivo cadastramento.

        $campos[] = array('completar' => 'Z', 'posicoes' => '161 173', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::PERCENTUAL_DE_JUROS);
        
        
        $campos[] = array('completar' => 'Z', 'posicoes' => '174 179', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::DATA_DE_DESCONTO); // data limite p/ concessao de desconto
        $campos[] = array('completar' => 'Z', 'posicoes' => '180 192', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::VALOR_DE_DESCONTO);
        
        
        
//193 a 205 - Valor do IOF
//Este campo somente deverá ser preenchido pelas Empresas Cedentes, cujo ramo de
//atividade seja Administradora de Seguros.

        $campos[] = array('completar' => 'Z', 'posicoes' => '193 205', 'valor' => '');
        
        
        // valor do abatimento a ser concedido ou cancelado
        $campos[] = array('completar' => 'Z', 'posicoes' => '206 218', 'valor' => '');
        
        // identificacao do tipo de inscricao do sacado
        // 01=CPF
        // 02=CNPJ
        // 03=PIS/PASEP
        // 98=NAO TEM
        // 99=OUTROS
        $campos[] = array('completar' => 'Z', 'posicoes' => '219 220', 'valor' => '01');
        
        
        
//221 a 234 - Número da Inscrição do Sacado
//Quando se tratar de CNPJ, adotar o
//esquerda, utilizando:
//2 posições para o controle
//4 posições para a filial
//8 posições para o CNPJ
//critério de preenchimento da direita para a
//Quando se tratar de CPF, adotar o mesmo critério da direita para a esquerda,
//utilizando:
//2 posições para o controle
//9 posições para o CPF
//3 posições a esquerda zeradas
        $campos[] = array('completar' => 'Z', 'posicoes' => '221 234', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CPF_DO_SACADO);
        
        
        
        $campos[] = array('completar' => 'B', 'posicoes' => '235 274', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::NOME_DO_SACADO); // nome do sacado
        $campos[] = array('completar' => 'B', 'posicoes' => '275 314', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::ENDERECO_DO_SACADO); // endereco completo
        
        
//315 a 326 - 1a Mensagem
//Campo livre para uso da Empresa. A mensagem enviada nesse campo será impressa
//somente no boleto e não será confirmada no Arquivo Retorno.
        $campos[] = array('completar' => 'B', 'posicoes' => '315 326', 'valor' => '');
        
        // CEP
        $campos[] = array('completar' => 'Z', 'posicoes' => '327 331', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CEP_DO_SACADO);

        // SUFIXO DO CEP
        $campos[] = array('completar' => 'Z', 'posicoes' => '332 334', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SUFIXO_DO_CEP_DO_SACADO);
        
        
        
        
        
//335 a 394 - 2a
//Mensagem/Sacador Avalista - Decomposição do Campo
//
//Este campo poderá ser utilizado para informar:
//? Somente Sacador/Avalista, ou Somente Mensagem.
//? Não utilizar as expressões ?taxa bancária? ou ?tarifa bancária? nos bloquetos de cobrança, pois essa tarifa refere-se à negociada pelo banco com seu cliente cedente. Orientação da FEBRABAN (Comunicado FB-170/2005).
//Obs.: A Empresa Cedente ao ser cadastrada na Cobrança Escritural, será automaticamente autorizada a enviar mensagens, porém, para informar Sacador/Avalista, deverá ser previamente cadastrada:
//
//( Pag 25 do manual)
        $campos[] = array('completar' => 'B', 'posicoes' => '335 394', 'valor' => '');
        
        
        $campos[] = array('completar' => 'Z', 'posicoes' => '395 400', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_DO_REGISTRO);
        
        
        self::insereCampos($campos, $conf->getLastInsertId(), FinCampoRemessa::REG_TRANSACAO_DETALHE);
        
        
        //
        // TRAILERS
        //
        $campos = array();
        $campos[] = array('completar' => 'Z', 'posicoes' => '001 001', 'valor' => '9'); // identificacao do registro
        $campos[] = array('completar' => 'B', 'posicoes' => '002 394', 'valor' => ''); // brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '395 400', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_DO_REGISTRO); // numero sequencial do ultimo registro

        self::insereCampos($campos, $conf->getLastInsertId(), FinCampoRemessa::REG_TRAILER_ARQUIVO);
        
        $remessa = new FinRemessa();
        $txt = $remessa->gerarTXT( $cob->getLastInsertId(), $filtros );
        
        echo $txt;
    }
    
    

    /**
     * Funcao criada exclusivamente para testes de desenvolvimento. 
     */
    public static function gerarArquivoBanrisul($filtros)
    {
        $cbanc = new FinCobrancaBancaria();
        $rows = $cbanc->findMany( $cbanc->msql()->addEqualCondition('descricao', 'Remessa Banrisul') );
        
        foreach ( $rows as $row )
        {
            $row instanceof FinCobrancaBancaria;
            
            if ( $row->getPkeyValue() )
            {
                $row->delete();
            }
        }
        
        $bank = new FinBank();
        
//        $bankRow = $bank->findOne( $bank->msql()->addIlikeCondition('finbank.description', 'BANRISUL') );
//        $bankRow instanceof FinBank;
//        
//        $bankAcc = new FinBankAccount();
//        $bankAccRow = $bankAcc->findOne( $bankAcc->msql()->addEqualCondition('finbankaccount.bankid', $bankRow->bankId) );
//        $bankAccRow instanceof FinBankAccount;
        
        // Cobranca
        $cob = new FinCobrancaBancaria();
        $cob->descricao = 'Remessa Banrisul';
        $cob->leiaute = FinCobrancaBancaria::LAYOUT_CNAB400;
        $cob->bankaccountid = 2;
        $cob->envio = FinCobrancaBancaria::ENVIO_BANCO;
        $cob->formatodata = FinCobrancaBancaria::DATA_DDMMAA;
        $cob->codcedente = '8574840';
        $cob->carteira = '05';
        $cob->especie = 3333;
        $cob->save();

        // Configuracao
        $conf = new FinConfiguracaoRemessa();
        $conf->cobrancabancariaid = $cob->getLastInsertId();
        $conf->nomearquivo = 'BANRISUL.REM';
        $conf->sequencia = 1;
        $conf->quebralinha = FinConfiguracaoRemessa::QUEBRA_LINHA_RN;
        $conf->save();

        //
        // HEADER
        //
        $campos = array();
        $campos[] = array('completar' => 'B', 'posicoes' => '001 009', 'valor' => '01REMESSA');
        $campos[] = array('completar' => 'B', 'posicoes' => '010 026', 'valor' => ''); //brancos

        $campos[] = array('completar' => 'Z', 'posicoes' => '027 039', 'valor' => '0120857484032');
        
//        $campos[] = array('completar' => 'Z', 'posicoes' => '027 029', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CODIGO_DA_AGENCIA);
//        $campos[] = array('completar' => 'Z', 'posicoes' => '030 037', 'valor' => '0120857484032');
//        $campos[] = array('completar' => 'Z', 'posicoes' => '038 039', 'valor' => '32');
        
//        $campos[] = array('completar' => 'Z', 'posicoes' => '027 031', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CODIGO_DA_AGENCIA);
//        $campos[] = array('completar' => 'Z', 'posicoes' => '032 039', 'valor' => '0120857484032');
        
        // @TODO ver muca
//        $campos[] = array('completar' => 'Z', 'posicoes' => '027 039', 'valor' => '0120857484032'_DIGITO); 
        
        $campos[] = array('completar' => 'B', 'posicoes' => '040 046', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '047 076', 'valor' => 'FUNDACAO ATTILA TABORDA'); // Nome da empresa
        $campos[] = array('completar' => 'B', 'posicoes' => '077 087', 'valor' => '041BANRISUL');
        $campos[] = array('completar' => 'B', 'posicoes' => '088 094', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '095 100', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::DATA_DE_GERACAO); // Data gravacao do arquivo
        $campos[] = array('completar' => 'B', 'posicoes' => '101 109', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '110 113', 'valor' => ''); //codigo do servico
        $campos[] = array('completar' => 'B', 'posicoes' => '114 114', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '115 115', 'valor' => ''); //tipo de processamento
        $campos[] = array('completar' => 'B', 'posicoes' => '116 116', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '117 126', 'valor' => ''); //codigo do cliente no office banking
        $campos[] = array('completar' => 'B', 'posicoes' => '127 394', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '395 400', 'valor' => '000001'); //constante
        self::insereCampos($campos, $conf->getLastInsertId(), FinCampoRemessa::REG_HEADER_ARQUIVO);
                        
        //
        // DETALHE
        //
        // Lay-out do Arquivo-Remessa - Registro de Transação - Tipo 1
        $campos = array();
        $campos[] = array('completar' => 'Z', 'posicoes' => '001 001', 'valor' => '1'); // constante
        $campos[] = array('completar' => 'B', 'posicoes' => '002 017', 'valor' => ''); //brancos
        
        // Mesma informacao das posicoes 27-39 do HEADER
        $campos[] = array('completar' => 'Z', 'posicoes' => '018 030', 'valor' => '0120857484032');
//        $campos[] = array('completar' => 'Z', 'posicoes' => '018 021', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CODIGO_DA_AGENCIA);
//        $campos[] = array('completar' => 'Z', 'posicoes' => '022 028', 'valor' => '0120857484032');
//        $campos[] = array('completar' => 'Z', 'posicoes' => '029 030', 'valor' => '32');
//        $campos[] = array('completar' => 'Z', 'posicoes' => '018 030', 'valor' => '0120857484032'); //codigo do cedente. Numero fornecido pela agencia
        
        $campos[] = array('completar' => 'B', 'posicoes' => '031 037', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '038 062', 'valor' => ''); //identificacao do titulo para o cedente (opcional)
        $campos[] = array('completar' => 'Z', 'posicoes' => '063 070', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO); //nosso numero
        $campos[] = array('completar' => 'Z', 'posicoes' => '071 072', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO, 'tipovalor' => FinCampoRemessa::TIPO_VALOR_NC_BANRISUL);
//        $campos[] = array('completar' => 'Z', 'posicoes' => '071 071', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO, 'tipovalor' => FinCampoRemessa::TIPO_VALOR_MODULO10_BANRISUL);
//        $campos[] = array('completar' => 'Z', 'posicoes' => '072 072', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO, 'tipovalor' => FinCampoRemessa::TIPO_VALOR_MODULO11_BANRISUL); //seu número (= NOSSO NUMERO) - digito verificador
        $campos[] = array('completar' => 'B', 'posicoes' => '073 104'); //mensagem no bloqueto (opcional)
        $campos[] = array('completar' => 'B', 'posicoes' => '105 107', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '108 108', 'valor' => '1'); //tipo de carteira (1-COBRANCA SIMPLES, 2-BANCOS CORRESPONDENTES, 3-COBRANCA CAUCIONADA, 4-COBRANCA EM IGPM, 5-COBRANCA CUCIONADA CGB ESPECIAL, 6-COBRANCA SIMPLES SEGURADORA...)
        $campos[] = array('completar' => 'B', 'posicoes' => '109 110', 'valor' => '01'); //codigo de ocorrencia (01-REMESSA, 02-PEDIDO DE BAIXA, 04-CONCESSAO DE ABATIMENTO...)
        
        // Seu numero
        $campos[] = array('completar' => 'Z', 'posicoes' => '111 118', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO); //seu número (= NOSSO NUMERO)
        $campos[] = array('completar' => 'Z', 'posicoes' => '119 120', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO, 'tipovalor' => FinCampoRemessa::TIPO_VALOR_NC_BANRISUL);
//        $campos[] = array('completar' => 'Z', 'posicoes' => '120 120', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO, 'tipovalor' => FinCampoRemessa::TIPO_VALOR_MODULO11_BANRISUL); //seu número (= NOSSO NUMERO) - digito verificador
        
        $campos[] = array('completar' => 'Z', 'posicoes' => '121 126', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::DATA_DE_VENCIMENTO); // data do vencimento do titulo
        $campos[] = array('completar' => 'Z', 'posicoes' => '127 139', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::VALOR_DO_TITULO); // valor do titulo
        $campos[] = array('completar' => 'B', 'posicoes' => '140 142', 'valor' => '041'); //banco cobrador (constante)
        $campos[] = array('completar' => 'B', 'posicoes' => '143 147', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '148 149', 'valor' => '06'); //tipo de documento
        $campos[] = array('completar' => 'B', 'posicoes' => '150 150', 'valor' => 'N'); //codigo de aceite (A=ACEITO, N=NAO ACEITO)
        $campos[] = array('completar' => 'Z', 'posicoes' => '151 156', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::DATA_DE_EMISSAO); // data de emissao do titulo
        $campos[] = array('completar' => 'Z', 'posicoes' => '157 158', 'valor' => '18'); //codigo da 1° instrucao
        $campos[] = array('completar' => 'Z', 'posicoes' => '159 160', 'valor' => '23'); //codigo da 2° instrucao
        $campos[] = array('completar' => 'Z', 'posicoes' => '161 161', 'valor' => '1'); //codigo de mora (0=VALOR DIARIO, 1=TAXA MENSAL)
        $campos[] = array('completar' => 'Z', 'posicoes' => '162 171', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::PERCENTUAL_DE_JUROS);  
        $campos[] = array('completar' => 'Z', 'posicoes' => '172 173', 'valor' => ''); //percentual de juros
        $campos[] = array('completar' => 'Z', 'posicoes' => '174 179', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::DATA_DE_DESCONTO); // data limite p/ concessao de desconto
        $campos[] = array('completar' => 'Z', 'posicoes' => '180 192', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::VALOR_DE_DESCONTO);
        $campos[] = array('completar' => 'Z', 'posicoes' => '193 205', 'valor' => ''); // VALORES IOF
        $campos[] = array('completar' => 'Z', 'posicoes' => '206 218', 'valor' => ''); //valor do abatimento
        $campos[] = array('completar' => 'Z', 'posicoes' => '219 220', 'valor' => '01'); // tipo de inscricao do sacado
        $campos[] = array('completar' => 'Z', 'posicoes' => '221 234', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CPF_DO_SACADO);
        $campos[] = array('completar' => 'B', 'posicoes' => '235 269', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::NOME_DO_SACADO); // nome do sacado
        $campos[] = array('completar' => 'B', 'posicoes' => '270 274', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '275 314', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::ENDERECO_DO_SACADO); // endereco completo
        $campos[] = array('completar' => 'B', 'posicoes' => '315 321', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '322 323', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::PERCENTUAL_DA_MULTA); //taxa para multa apos o vencimento
        $campos[] = array('completar' => 'Z', 'posicoes' => '324 324', 'valor' => ''); //taxa para multa apos o vencimento
        $campos[] = array('completar' => 'Z', 'posicoes' => '325 326', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::DATA_PARA_MULTA); //taxa para multa apos o vencimento
        $campos[] = array('completar' => 'Z', 'posicoes' => '327 334', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CEP_DO_SACADO);
        $campos[] = array('completar' => 'B', 'posicoes' => '335 349', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CIDADE_DO_SACADO);
        $campos[] = array('completar' => 'Z', 'posicoes' => '350 351', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::UF_DO_SACADO);
        $campos[] = array('completar' => 'Z', 'posicoes' => '352 355', 'valor' => ''); //taxa ao dia para pagamento antecipado
        $campos[] = array('completar' => 'B', 'posicoes' => '356 356', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '357 369', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::PERCENTUAL_DE_DESCONTO);
        $campos[] = array('completar' => 'B', 'posicoes' => '370 371', 'valor' => ''); //numero de dias para protesto ou devolucao automatica
        $campos[] = array('completar' => 'B', 'posicoes' => '372 394', 'valor' => ''); //brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '395 400', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_DO_REGISTRO);
        self::insereCampos($campos, $conf->getLastInsertId(), FinCampoRemessa::REG_TRANSACAO_DETALHE);
        
        //
        // DETALHE - TIPO 2
        //
        $campos = array();
        $campos[] = array('completar' => 'Z', 'posicoes' => '001 001', 'linha' => 2, 'valor' => '1');
        $campos[] = array('completar' => 'Z', 'posicoes' => '002 003', 'linha' => 2, 'valor' => '02');
        $campos[] = array('completar' => 'Z', 'posicoes' => '004 017', 'linha' => 2, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CNPJ_EMPRESA);
        $campos[] = array('completar' => 'Z', 'posicoes' => '018 030', 'linha' => 2, 'valor' => '0120857484032');
//        $campos[] = array('completar' => 'Z', 'posicoes' => '018 021', 'linha' => 2, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CODIGO_DA_AGENCIA);
//        $campos[] = array('completar' => 'Z', 'posicoes' => '022 028', 'linha' => 2, 'valor' => '0120857484032');
//        $campos[] = array('completar' => 'Z', 'posicoes' => '029 030', 'linha' => 2, 'valor' => '32');
        $campos[] = array('completar' => 'B', 'posicoes' => '031 037', 'linha' => 2, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '038 062', 'linha' => 2, 'valor' => ''); //identificacao do titulo para o cedente
        $campos[] = array('completar' => 'Z', 'posicoes' => '063 070', 'linha' => 2, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO); //nosso numero
        $campos[] = array('completar' => 'Z', 'posicoes' => '071 072', 'linha' => 2, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO, 'tipovalor' => FinCampoRemessa::TIPO_VALOR_NC_BANRISUL);
        $campos[] = array('completar' => 'B', 'posicoes' => '073 107', 'linha' => 2, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '108 108', 'linha' => 2, 'valor' => '1'); //cod. da carteira
        $campos[] = array('completar' => 'B', 'posicoes' => '109 110', 'linha' => 2, 'valor' => '98'); //cod. da ocorrencia
        $campos[] = array('completar' => 'B', 'posicoes' => '111 111', 'linha' => 2, 'valor' => '1'); //controle de canal
        $campos[] = array('completar' => 'B', 'posicoes' => '112 201', 'linha' => 2, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::MENSAGEM_1); //mensagem
        $campos[] = array('completar' => 'B', 'posicoes' => '202 202', 'linha' => 2, 'valor' => '0'); //controle de canal
        $campos[] = array('completar' => 'B', 'posicoes' => '203 292', 'linha' => 2, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::MENSAGEM_2); //mensagem
        $campos[] = array('completar' => 'B', 'posicoes' => '293 293', 'linha' => 2, 'valor' => '0'); //controle de canal
//        $campos[] = array('completar' => 'B', 'posicoes' => '294 383', 'linha' => 2, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '294 383', 'linha' => 2, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::MENSAGEM_RATEIO_BANRISUL); //mensagem
        $campos[] = array('completar' => 'B', 'posicoes' => '384 394', 'linha' => 2, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '395 400', 'linha' => 2, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_DO_REGISTRO);
        self::insereCampos($campos, $conf->getLastInsertId(), FinCampoRemessa::REG_TRANSACAO_DETALHE);


        //
        // DETALHE - LINHA 3 - RATEIO
        //
        $campos = array();
        $campos[] = array('completar' => 'Z', 'posicoes' => '001 001', 'linha' => 3, 'valor' => '3'); // fixo 3
        $campos[] = array('completar' => 'Z', 'posicoes' => '002 014', 'linha' => 3, 'valor' => '0120857484032');
//        $campos[] = array('completar' => 'Z', 'posicoes' => '002 005', 'linha' => 3, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CODIGO_DA_AGENCIA);
//        $campos[] = array('completar' => 'Z', 'posicoes' => '006 014', 'linha' => 3, 'valor' => '0120857484032');
        $campos[] = array('completar' => 'Z', 'posicoes' => '015 015', 'linha' => 3, 'valor' => '1'); //emissao do bloqueto de cobranca (1=BANCO EMITE BLOQUETO DE COBRANCA E PROCESSA O REGISTRO, 2=CLIENTE EMITE BLOQUETO DE COBRANCA E BANCO SOMENTE PROCESSA O REGISTRO)
        $campos[] = array('completar' => 'B', 'posicoes' => '016 017', 'linha' => 3, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '018 025', 'linha' => 3, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO); //nosso numero
        $campos[] = array('completar' => 'Z', 'posicoes' => '026 027', 'linha' => 3, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_NOSSO_NUMERO, 'tipovalor' => FinCampoRemessa::TIPO_VALOR_NC_BANRISUL);
        $campos[] = array('completar' => 'B', 'posicoes' => '028 029', 'linha' => 3, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '030 030', 'linha' => 3, 'valor' => '2'); //codigo de calculo de rateio
        $campos[] = array('completar' => 'Z', 'posicoes' => '031 031', 'linha' => 3, 'valor' => '1'); //tipo de valor informado
        $campos[] = array('completar' => 'B', 'posicoes' => '032 043', 'linha' => 3, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '044 056', 'linha' => 3, 'valor' => '0120857484032'); //cod cedente primeiro beneficiario
        $campos[] = array('completar' => 'B', 'posicoes' => '057 065', 'linha' => 3, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '066 080', 'linha' => 3, 'valor' => '92000'); //valor ou percentual para rateio do primeiro beneficiario
        $campos[] = array('completar' => 'B', 'posicoes' => '081 120', 'linha' => 3, 'valor' => 'FUNDACAO ATTILA TABORDA'); //nome do 1° beneficiario (razao social da outra conta bancaria (acima) - ATILA TABORDA)
        $campos[] = array('completar' => 'B', 'posicoes' => '121 151', 'linha' => 3, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '152 157', 'linha' => 3, 'valor' => ''); //identificacao da parcela
        $campos[] = array('completar' => 'B', 'posicoes' => '158 160', 'linha' => 3, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '161 173', 'linha' => 3, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::CODIGO_CEDENTE_1_BENEFICIARIO); //cod. do cedente do 2° beneficiario
        $campos[] = array('completar' => 'B', 'posicoes' => '174 182', 'linha' => 3, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '183 197', 'linha' => 3, 'valor' => '8000'); //valor ou percentual para rateio do 2° beneficiario
        $campos[] = array('completar' => 'B', 'posicoes' => '198 237', 'linha' => 3, 'valor' => 'FUNDACAO ATTILA TABORDA'); //nome do 2° beneficiario
        $campos[] = array('completar' => 'B', 'posicoes' => '238 268', 'linha' => 3, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '269 274', 'linha' => 3, 'valor' => ''); //identificacao da parcela
        $campos[] = array('completar' => 'B', 'posicoes' => '275 287', 'linha' => 3, 'valor' => ''); //cod. do cedente do 3° beneficiario
        $campos[] = array('completar' => 'B', 'posicoes' => '288 299', 'linha' => 3, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '300 314', 'linha' => 3, 'valor' => ''); //valor ou percentual para rateio do 3° beneficiario
        $campos[] = array('completar' => 'B', 'posicoes' => '315 354', 'linha' => 3, 'valor' => ''); //nome do 3° beneficiario
        $campos[] = array('completar' => 'B', 'posicoes' => '355 385', 'linha' => 3, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'B', 'posicoes' => '386 391', 'linha' => 3, 'valor' => ''); //parcela
        $campos[] = array('completar' => 'B', 'posicoes' => '392 394', 'linha' => 3, 'valor' => ''); //brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '395 400', 'linha' => 3, 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_DO_REGISTRO);
        self::insereCampos($campos, $conf->getLastInsertId(), FinCampoRemessa::REG_TRANSACAO_DETALHE);
        
        //
        // TRAILERS
        //
        $campos = array();
        $campos[] = array('completar' => 'Z', 'posicoes' => '001 001', 'valor' => '9'); // constante 9
        $campos[] = array('completar' => 'B', 'posicoes' => '002 027', 'valor' => ''); // brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '028 040', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SOMATORIO_VALOR_TITULOS); // Total Geral ou somatório dos valores dos títulos
        $campos[] = array('completar' => 'B', 'posicoes' => '041 394', 'valor' => ''); // brancos
        $campos[] = array('completar' => 'Z', 'posicoes' => '395 400', 'valor' => '', 'tipovalorvariavelremessaid' => FinTipoValorVariavelRemessa::SEQUENCIA_DO_REGISTRO); // numero sequencial do ultimo registro
        self::insereCampos($campos, $conf->getLastInsertId(), FinCampoRemessa::REG_TRAILER_ARQUIVO);

        
        $remessa = new FinRemessa();
        $txt = $remessa->gerarTXT( $cob->getLastInsertId(), $filtros );

        echo $txt;
    }
    
    public static function insereCampos($campos = array(), $confId, $tiporeg)
    {
        static $position = 1;
        
        foreach ( $campos as $confs )
        {
            // Campo da remessa
            $campo = new FinCampoRemessa();
            $campo->configuracaoremessaid = $confId;
            $campo->tiporegistro = $tiporeg;
            $campo->alinhamento = FinCampoRemessa::ALINHAMENTO_ESQ;
            $campo->completar = FinCampoRemessa::COMPLETAR_BRANCOS;
            $campo->tipovalor = FinCampoRemessa::TIPO_VALOR_VARIAVEL;
            $campo->posicao = $position ++;
            $campo->linha = 1;
            
            foreach ( $confs as $attr => $val )
            {
                $campo->{$attr} = $val;
            }
            
            if ( $confs['completar'] == FinCampoRemessa::COMPLETAR_ZEROS )
            {
                $campo->alinhamento = FinCampoRemessa::ALINHAMENTO_DIR;
            }
            
            list($posA, $posB) = explode(' ', $confs['posicoes']);
            $campo->tamanho = SAGU::calcNumber("$posB - $posA + 1");

            if ( strlen($campo->valor) > 0 )
            {
                $campo->tipovalor = FinCampoRemessa::TIPO_VALOR_FIXO;
            }

            $campo->save();
        }
    }
}
?>