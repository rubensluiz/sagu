<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types cobranca bancaria
 *
 * @author Moises Heberle [moises@solis.com.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Moises Heberle [moises@solis.com.br]
 *
 * @since
 * Class created on 24/06/2013
 */

class FinCampoRemessa extends SType
{
    protected $_utilizaNovoPadrao = true;
    
    const ALINHAMENTO_ESQ = 'E';
    const ALINHAMENTO_DIR = 'D';
    
    const TIPO_VALOR_FIXO = 'F';
    const TIPO_VALOR_VARIAVEL = 'V';
    const TIPO_VALOR_MODULO10 = '2';
    const TIPO_VALOR_MODULO11 = '3';
    const TIPO_VALOR_MODULO10_BANRISUL = '5';
    const TIPO_VALOR_MODULO11_BANRISUL = '4';
    const TIPO_VALOR_MODULO11_BRADESCO = '7';
    const TIPO_VALOR_NC_BANRISUL = '6';
    
    const COMPLETAR_ZEROS = 'Z';
    const COMPLETAR_BRANCOS = 'B';
    
    const REG_HEADER_ARQUIVO = 'HA';
    const REG_HEADER_LOTE = 'HL';
    const REG_TRANSACAO_DETALHE = 'TD';
    const REG_TRAILER_LOTE = 'TL';
    const REG_TRAILER_ARQUIVO = 'TA';
    
//    const FUNC_MODULO10 = 'modulo10';
//    const FUNC_MODULO11 = 'modulo11';
    
    public $camporemessaid;
    public $tipovalorvariavelremessaid;
    public $configuracaoremessaid;
    public $tiporegistro;
    public $linha;
    public $posicao;
    public $tamanho;
    public $alinhamento;
    public $completar;
    public $tipovalor;
    public $valor;
    
    public $cobrancabancariaid;
    
    protected $_defaultOrder = 'FinCampoRemessa.tiporegistro, FinCampoRemessa.posicao';

    protected $_associations = array(
        'configuracaobancaria' => array(
            'mode' => 'one',
            'typeClass' => 'FinConfiguracaoRemessa',
            'joinColumn' => 'configuracaoremessaid',
        )
    );
    
    protected $_virtualColumns = array(
        '_posicaoreal' => '
            LPAD((COALESCE(( SELECT SUM(AA.tamanho::int) FROM fincamporemessa AA WHERE fincamporemessa.configuracaoremessaid = AA.configuracaoremessaid AND fincamporemessa.linha = AA.linha AND fincamporemessa.tiporegistro = AA.tiporegistro AND AA.posicao < fincamporemessa.posicao), 0) + 1)::varchar, 3, \'0\')
            || \' - \' ||
            LPAD((COALESCE(( SELECT SUM(AA.tamanho::int) FROM fincamporemessa AA WHERE fincamporemessa.configuracaoremessaid = AA.configuracaoremessaid AND fincamporemessa.linha = AA.linha AND fincamporemessa.tiporegistro = AA.tiporegistro AND AA.posicao < fincamporemessa.posicao ), 0)::int + fincamporemessa.tamanho::int)::varchar, 3, \'0\')
            '
    );
    
    /**
     * @return \FinConfiguracaoRemessa 
     */
    public function obterConfiguracao()
    {
        return new FinConfiguracaoRemessa($this->configuracaoremessaid);
    }
    
    public function beforeFind(MSQL $sql)
    {
        if ( strlen($this->cobrancabancariaid) > 0 )
        {
            $sql->addEqualCondition('configuracaobancaria.cobrancabancariaid', $this->cobrancabancariaid);
        }
        
        parent::beforeFind($sql);
    }
    
    /**
     * @return array
     */
    public static function listarAlinhamentos()
    {
        return array(
            self::ALINHAMENTO_ESQ => _M('Esquerdo'),
            self::ALINHAMENTO_DIR => _M('Direito'),
        );
    }
    
    /**
     * @return array
     */
    public static function listarTiposDeValor()
    {
        return array(
            self::TIPO_VALOR_FIXO => _M('Fixo'),
            self::TIPO_VALOR_VARIAVEL => _M('Variável'),
            self::TIPO_VALOR_MODULO10 => _M('Módulo 10'),
            self::TIPO_VALOR_MODULO11 => _M('Módulo 11'),
            self::TIPO_VALOR_MODULO11_BRADESCO => _M('Módulo 11 (BRADESCO)'),
            self::TIPO_VALOR_NC_BANRISUL => _M('Número de controle (NC) BANRISUL'),
//            self::TIPO_VALOR_MODULO10_BANRISUL => _M('Módulo 10 (BANRISUL)'),
//            self::TIPO_VALOR_MODULO11_BANRISUL => _M('Módulo 11 (BANRISUL)'),
        );
    }
    
    /**
     * @return array
     */
    public static function listarCompletarCom()
    {
        return array(
            self::COMPLETAR_ZEROS => _M('Zeros'),
            self::COMPLETAR_BRANCOS => _M('Branco'),
        );
    }

    /**
     * @return array
     */
    public static function listarTiposDeRegistro()
    {
        return array(
            self::REG_HEADER_ARQUIVO => _M('Header de arquivo'),
            self::REG_HEADER_LOTE => _M('Header de lote'),
            self::REG_TRANSACAO_DETALHE => _M('Transação/Detalhe'),
            self::REG_TRAILER_LOTE => _M('Trailler de lote'),
            self::REG_TRAILER_ARQUIVO => _M('Trailler de arquivo'),
        );
    }
    
    /**
     * @return array
     */
//    public static function listarFuncoes()
//    {
//        return array(
//            self::FUNC_MODULO10 => _M('Modulo 10'),
//            self::FUNC_MODULO11 => _M('Modulo 11'),
//        );
//    }
    

   /**
    * Calculate the modulo10
    * 
    * @param integer $num Number to generate the modulo10
    * @return integer The number for modulo 10
    */
    public static function modulo10($num, $factor = 2)
    {
        $numTotal10 = 0;
        for ($i = strlen($num); $i > 0; $i--) 
        {
            $numbers[$i] = substr($num,$i-1,1);
            $partial10[$i] = $numbers[$i] * $factor;
            $numTotal10 .= $partial10[$i];
            if ($factor == 2) 
            {
                $factor = 1;
            }
            else 
            {
                $factor = 2; 
            }
        }
        $sum = 0;
        for ($i = strlen($numTotal10); $i > 0; $i--) 
        {
            $numbers[$i] = substr($numTotal10,$i-1,1);
            $sum += $numbers[$i]; 
        }
        $reminder = $sum % 10;
        if ( ($reminder >= 10) || ($reminder == 0) )
        {
            return 0;
        }
        else
        {
            return 10 - $reminder;
        }
    }
    
   /**
    * Calculate the modulo10
    * 
    * @param integer $num Number to generate the modulo10
    * @return integer The number for modulo 10
    */
    public static function modulo10Banrisul($num, $factor = 2, $max=false)
    {
        $numTotal10 = 0;
        for ($i = strlen($num); $i > 0; $i--) 
        {
            $numbers[$i] = substr($num,$i-1,1);
            $partial10[$i] = $numbers[$i] * $factor;
            
            if ($partial10[$i] > 9 && $max)
            {
                $partial10[$i] = $partial10[$i] - 9;
            }
            
            $numTotal10 .= $partial10[$i];
            if ($factor == 2) 
            {
                $factor = 1;
            }
            else 
            {
                $factor = 2; 
            }
        }
        $sum = 0;
        for ($i = strlen($numTotal10); $i > 0; $i--) 
        {
            $numbers[$i] = substr($numTotal10,$i-1,1);
            $sum += $numbers[$i]; 
        }
        $reminder = $sum % 10;
        if ( ($reminder >= 10) || ($reminder == 0) )
        {
            return 0;
        }
        else
        {
            return 10 - $reminder;
        }
    }
    
    /**
     * Retorna dois digitos de acordo com modulo 10 e modulo 11
     */
    public static function numeroControleBanrisul($nossoNumero)
    {
        $constant3 = FinCampoRemessa::modulo10Banrisul($nossoNumero, 2, true);
        $constant4 = FinCampoRemessa::modulo11Banrisul($nossoNumero . $constant3, 2, 7);

        while( MIOLO::getInstance()->getConf('temp.mod') == 1 )
        {
            $constant3 = $constant3+1;
            
            if( $constant3 == 10 )
            {
                $constant3 = 0;
            }
            
            $constant4 = FinCampoRemessa::modulo11Banrisul($nossoNumero . $constant3, 2, 7);
        }

        return $constant3 . $constant4;
    }

   /** 
    * Generate a module 11 for a 6 number value
    * 
    * @param $data (int): Data to generate the module11
    *
    * @return: Return the bank account information
    *
    */
    public function modulo11($data)
    {
        $dataSize = 6;
        $data     = DefaultFormat::formatField($data, 'N', $dataSize);

        $index    = 7;
        $sum      = 0;

        for ($x = 0; $x<$dataSize; $x++)
        {
            $sum += substr($data, $x, 1) * $index--;
        }
        $rest = $sum % 11;

        switch ($rest)
        {
            case 1:
                return 0;
                break;
            case 0:
                return 1;
                break;
            default:
                return 11 - $rest;
                break;
        }
    }
    
    public static function modulo11Banrisul($num, $factor = 2, $factorMax = 9)
    {         
        $totalX  = 0;
        $value   = array();
        $factor_ = $factor;
        for ( $x = strlen($num); $x > 0; $x-- )
        {
            $pos       = substr($num, $x-1, 1);
            $value[$x] = $pos*$factor;
            if ( $factor == $factorMax )
            {
                $factor = $factor_;
            }
            else
            {
                $factor++;
            }
        }
        $totalX = array_sum($value);

        if ( $totalX < 11 )
        {
            $mod = $totalX;
        }
        else
        {
            $mod = $totalX % 11;
        }
        
        MIOLO::getInstance()->setConf('temp.mod', $mod);

        if ( $mod == 0 )
        {
            return $mod;
        }
        else
        {
           return 11 - $mod;
        }
    }
    
    public static function digitoVerificadorModulo11BRADESCO($num, $factor = 2, $factorMax = 7)
    {   
        $totalX  = 0;
        $value   = array();
        $factor_ = $factor;
        for ( $x = strlen($num); $x > 0; $x-- )
        {
            $pos       = substr($num, $x-1, 1);
            $value[$x] = $pos*$factor;
            if ( $factor == $factorMax )
            {
                $factor = $factor_;
            }
            else
            {
                $factor++;
            }
        }    
        $totalX = array_sum($value);
        $mod    = $totalX % 11;
               
        if ( $mod == 1 )
        {
            return 'P';
        }
        else if ( in_array($mod, array(0, 11)) )
        {
            return 0;        
        }
        else
        {
           return 11 - $mod;
        }
    }
}
?>