<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela fin.negotiationGeneratedEntries
 * Armazena os lançamentos gerados a partir da negociação. Para retornar ao estado anterior, estes lançamentos devem ser excluídos.
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 21/09/2011
 */

class FinNegotiationGeneratedEntries extends SType
{
    /**
     * Table fields
     */
    /**
     * Identificador da negociação
     * @var type integer
     */
    protected $negotiationId;
    /**
     * Identificador do lançamento
     * @var type integer
     */
    protected $entryId;
    
    /**
     * Identifica se o lançamento foi feito pela negociação
     * @var type integer
     */
    protected $generated;

    /**
     * Construtor da classe
     */
    public function __construct($negotiationId = null, $entryId = null)
    {
        if ( !is_null($negotiationId) && !is_null($entryId) )
        {
            $this->negotiationId = $negotiationId;
            $this->entryId = $entryId;
            $this->populate();
        }
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        // busca por registros que possuam as chaves primarias definidas, se existir edita, caso nao insere
        $filters = new stdClass();
        $filters->negotiationId = $this->negotiationId;
        $filters->entryId = $this->entryId;
        $search = $this->searchGrid($filters);
        if( count($search) > 0 )
        {
            $retVal = $this->update();
        }
        else
        {
            $retVal = $this->insert();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM fin.negotiationGeneratedEntries
                      WHERE negotiationId = ? AND entryId = ?';

        $params = array();
        $params[] = $this->negotiationId;
        $params[] = $this->entryId;
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->negotiationId = null;
            $this->entryId = null;
        }

        return $result;
    }

    public function duplicate()
    {
        //Não Utilizado
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT negotiationId,
                       entryId
                  FROM fin.negotiationGeneratedEntries';

        $params = array();
        foreach ( (array)$filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ?';
            $params[] = $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new FinNegotiationGeneratedEntries($result[$i][0], $result[$i][1]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchGrid($filters)
    {
        $sql = 'SELECT negotiationId,
                       entryId,
                       generated
                  FROM fin.negotiationGeneratedEntries';

        $params = array();
        if ( $filters->negotiationId )
        {
            $where .= ' AND negotiationId = ?';
            $params[] = $filters->negotiationId;
        }
        if ( $filters->entryId )
        {
            $where .= ' AND entryId = ?';
            $params[] = $filters->entryId;
        }
        if ( $filters->generated )
        {
            $where .= ' AND generated = ?';
            $params[] = $filters->generated;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY 1,2';
        }

        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT negotiationId,
                       entryId,
                       userName,
                       generated,
                       ipAddress,
                       TO_CHAR(dateTime,\'' . SAGU::getParameter('BASIC', 'MASK_TIMESTAMP') . '\')
                  FROM fin.negotiationGeneratedEntries
                 WHERE negotiationId = ? AND entryId=?';

        $params = array();
        $params[] = $this->negotiationId;
        $params[] = $this->entryId;

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Não foi encontrada nenhuma lançamento com o código @1 gerado para a negociação @1.', $module, $this->negotiationId, $this->entryId));
        }

        list ( $this->negotiationId,
               $this->entryId,
               $this->userName,
               $this->generated,
               $this->ipAddress,
               $this->dateTime) = $result[0];
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'INSERT INTO fin.negotiationGeneratedEntries
                            (negotiationId,
                             entryId,
                             generated)
                     VALUES (?, ?, ?)';

        $params = array();
        $params[] = $this->negotiationId;
        $params[] = $this->entryId;
        $params[] = $this->generated;
        
        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        //Not Implemented
    }
    
    /**
     * Retorna os titulos a serem carregados, a variavel 'tipo' define se 
     * os títulos buscados sao atrasados ou nao.
     * 
     * @param int $personId
     * @param String $tipo
     * @param boolean $negociados
     * @return array
     */
    public static function obterTitulosParaNegociacao($personId, $tipo = 'atrasados', $negociados = false)
    {
        $finReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        
        //Caso esteja buscando títulos atrasados        
        if ( $tipo == 'atrasados' )
        {
            $filters = new stdClass();
            $filters->vencido = DB_TRUE;
            $filters->personId = $personId;
            $filters->isCanceled = DB_FALSE;
        
            $titulos = $finReceivableInvoice->searchReceivableInvoice($filters);
        }
        elseif ( $tipo == 'não atrasados')
        {
            $filters = new stdClass();
            $filters->personId = $personId;
            $filters->naoPagos = DB_TRUE;
            
            $titulos = $finReceivableInvoice->searchReceivableInvoice($filters);
        }
        
        //Elimina negociados caso usuario nao possua permissao de renegociacao
        $titulosNegociados = self::obterTitulosNegociados($personId);
        if ( $negociados == false )
        {
            foreach ( $titulos as $n => $titulo )
            {
                foreach ( $titulosNegociados as $negociado )
                {
                    if ( $negociado[0] == $titulo[0] )
                    {
                        unset($titulos[$n]);
                    }
                }
            }
        }
        
        return $titulos;
    }
    
    /**
     * Retorna os títulos negociados da pessoa.
     * 
     * @param int $personId
     * @return array
     */
    public static function obterTitulosNegociados($personId)
    {
        //Tem que ter generated 't' - pois sao os lancamentos gerados na negociacao
        $sql = ' SELECT C.invoiceId  
                   FROM fin.negotiationGeneratedEntries A
             INNER JOIN finEntry B
                     ON (A.entryId = B.entryId)
             INNER JOIN finReceivableInvoice C
                     ON (C.invoiceId = B.invoiceId)
                  WHERE A.generated
                    AND C.personId = ?';
        
        $result = SDatabase::query($sql, array($personId));
        
        return $result;
    }
    
    public function getNegotiationId()
    {
        return $this->negotiationId;
    }

    public function getEntryId()
    {
        return $this->entryId;
    }

    public function getGenerated()
    {
        return $this->generated;
    }

    public function setNegotiationId($negotiationId)
    {
        $this->negotiationId = $negotiationId;
    }

    public function setEntryId($entryId)
    {
        $this->entryId = $entryId;
    }

    public function setGenerated($generated)
    {
        $this->generated = $generated;
    }

}
?>