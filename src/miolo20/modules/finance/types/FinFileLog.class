<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types da tabela fin.fileLog
 * Relaciona um log de arquivos de remessa gerados no SAGU
 *
 * @author Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Jonas Gualberto Diel [jonas_diel@solis.coop.br]
 *
 * @since
 * Class created on 13/09/2011
 */

class FinFileLog extends SType
{
    /**
     * Table fields
     */
    /**
     * Identificador do banco
     * @var type int
     */
    protected $fileLogId;
    
    /**
     * Código do arquivo
     * @var type int
     */
    protected $fileId;
    
    /**
     * Código do título enviado no arquivo
     * @var type int
     */
    protected $invoiceId;
    
    /**
     * Código da conta bancária
     * @var type varchar
     */
    protected $accountNumber;
    
    /**
     * Valor total no arquivo de remessa
     * @var type float
     */
    protected $balance;
    
    /**
     * Valor referente a descontos ou abatimentos
     * @var type float
     */
    protected $discountValue;
        
    /**
     * Indica a operação realizada
     * @var type varchar
     */
    protected $operation;
    
    /**
     * Indica se um título foi cancelado ou nao.
     * @var type boolean
     */
    protected $isCanceled;
    
    /**
     * Valor nominal do título
     * @var type numeric
     */
    protected $value;
    
    /**
     * Data de vencimento
     * @var type date
     */
    protected $maturityDate;
    
    /**
     * Código da conta bancária
     * @var type int
     */
    protected $bankAccountId;
    
    /**
     * @var type int
     */
    protected $monthlyInterestPercent;
    
    /**
     * Código da carteira
     * @var type varchar 
     */
    protected $wallet;
    
    /**
     * Código da 
     * @var type varchar
     */
    protected $branchNumber;
    
    /**
     * Nosso número
     * @var type varchar
     */
    protected $ourNumber;
    
    /**
     * Data de vencimento referente
     * @var type date
     */
    protected $referenceMaturityDate;
    
    /**
     * Numero de dias para multar
     * @var type int
     */
    protected $daysToFine;
    
    /**
     * Numero de dias para protestar
     * @var type int
     */
    protected $daysToProtest;

    /**
     * Construtor da classe
     */
    public function __construct($fileLogId = null)
    {
        if ( !is_null($fileLogId) )
        {
            $this->fileLogId = $fileLogId;
            $this->populate();
        }
    }

    /**
     * Common methods
     */

    /**
     * Detecta se o salvar deve inserir um novo (no caso de chave primária não definida)
     * ou se deve apenas atualizar um registro já existente (no caso de chave primária já definida)
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function save()
    {
        // busca por registros que possuam as chaves primarias definidas, se existir edita, caso nao insere 
        $filters = new stdClass();
        $filters->fileLogId = $this->fileLogId;        
        $search = $this->searchGrid($filters);
        if( count($search) > 0 )
        {
            $retVal = $this->update();
        }
        else
        {
            $retVal = $this->insert();
        }

        return $retVal;
    }

    /**
     * Exclui da base de dados o objeto atual
     *
     * @return TRUE no caso de sucesso. Caso contrário, FALSE.
     */
    public function delete()
    {
        $sql = 'DELETE FROM fin.filelog
                      WHERE fileLogId = ?';

        $params = array();
        $params[] = $this->fileLogId;
        $result = SDatabase::execute($sql, $params);

        if ( $result )
        {
            $this->fileLogId = null;
        }

        return $result;
    }

    public function duplicate()
    {
        //Não Utilizado
    }

    /**
     * Retorna uma lista de objetos do tipo desta classe com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public function search($filters)
    {
        $sql = 'SELECT fileLogId
                  FROM fin.fileLog';

        $params = array();
        foreach ( (array)$filters as $key => $value )
        {
            $where .= ' AND ' . $key . ' = ?';
            $params[] = $value;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        $result = SDatabase::query($sql, $params);

        $retVal = array();
        for ( $i=0; $i<count($result); $i++ )
        {
            $retVal[] = new FinFileLog($result[$i][0]);
        }

        return $retVal;
    }
    
    public function getLast($filters)
    {
        $sql = 'SELECT fileLogId
                  FROM fin.fileLog';

        $params = array();
        if ( $filters->fileLogId )
        {
            $where .= ' AND fileLogId = ?';
            $params[] = $filters->fileLogId;
        }
        if ( $filters->fileId )
        {
            $where .= ' AND fileId = ?';
            $params[] = $filters->fileId;
        }
        if ( $filters->invoiceId )
        {
            $where .= ' AND invoiceId = ?';
            $params[] = $filters->invoiceId;
        }

        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
            $sql .= ' ORDER BY datetime DESC LIMIT 1';
        }
        
        $result = SDatabase::query($sql, $params);
                
        if( count($result) > 0 )
        {
            $retVal = new FinFileLog($result[0][0]);
        }

        return $retVal;
    }

    /**
     * Retorna um array com os resultados da busca.
     *
     * @param (stdClass) $filters Objeto contendo todos os campos pesquisáveis do objeto atual
     */
    public static function searchGrid($filters)
    {
        $sql = 'SELECT fileLogId,
                       fileId,
                       invoiceId,
                       accountNumber,
                       balance,
                       discountValue
                       operation,
                       isCanceled,
                       value,
                       TO_CHAR(maturityDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       bankAccountId,
                       monthlyInterestPercent,
                       wallet,
                       branchNumber,
                       ourNumber,
                       TO_CHAR(referenceMaturityDate, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       daysToFine,
                       daysToProtest
                  FROM fin.fileLog';

        $params = array();
        if ( $filters->fileLogId )
        {
            $where .= ' AND fileLogId = ?';
            $params[] = $filters->fileLogId;
        }
        if ( $filters->fileId )
        {
            $where .= ' AND fileId = ?';
            $params[] = $filters->fileId;
        }
        if ( $filters->invoiceId )
        {
            $where .= ' AND invoiceId = ?';
            $params[] = $filters->invoiceId;
        }
        if ( $filters->accountNumber )
        {
            $where .= ' AND accountNumber = ?';
            $params[] = $filters->accountNumber;
        }
        if ( $filters->balance )
        {
            $where .= ' AND balance = ?';
            $params[] = $filters->balance;
        }if ( $filters->discountValue )
        {
            $where .= ' AND discountValue = ?';
            $params[] = $filters->discountValue;
        }
        if ( $filters->operation )
        {
            $where .= ' AND operation = ?';
            $params[] = $filters->operation;
        }
        
        if ( strlen($where) > 0 )
        {
            $sql .= ' WHERE ' . substr($where, 5);
        }

        return count($params) > 0 ? SDatabase::query($sql, $params) : array();
    }

    /**
     * Private methods
     */

    /**
     * Chamado pelo construtor, quando este recebe os dados de chave primária
     */
    private function populate()
    {
        $sql = 'SELECT fileLogId,
                       fileId,
                       invoiceId,
                       accountNumber,
                       balance,
                       discountValue,
                       operation,
                       isCanceled,
                       value,
                       TO_CHAR(maturityDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       bankAccountId,
                       monthlyInterestPercent,
                       wallet,
                       branchNumber,
                       ourNumber,
                       TO_CHAR(referenceMaturityDate, \'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                       daysToFine,
                       daysToProtest
                  FROM fin.fileLog
                 WHERE fileLogId = ?';

        $params = array();
        $params[] = $this->fileLogId;

        $result = SDatabase::query($sql, $params);

        if ( strlen($result[0][0]) <= 0 )
        {
            $module = SAGU::getFileModule(__FILE__);
            throw new Exception(_M('Nenhum registro encontrado com o código @1.', $module, $this->fileLogId));
        }

        list ( $this->fileLogId,
               $this->fileId,
               $this->invoiceId,
               $this->accountNumber,
               $this->balance,
               $this->discountValue,
               $this->operation,
               $this->isCanceled,
               $this->value,
               $this->maturityDate,
               $this->bankAccountId,
               $this->monthlyInterestPercent,
               $this->wallet,
               $this->branchNumber,
               $this->ourNumber,
               $this->referenceMaturityDate,
               $this->daysToFine,
               $this->daysToProtest ) = $result[0];                
    }

    /**
     * Insere um novo registro com base nas informações da classe
     */
    private function insert()
    {
        $sql = 'INSERT INTO fin.fileLog            
                            (  fileId,
                               invoiceId,
                               accountNumber,
                               balance,
                               discountValue,
                               operation,
                               isCanceled,
                               value,
                               maturityDate,
                               bankAccountId,
                               monthlyInterestPercent,
                               wallet,
                               branchNumber,
                               ourNumber,
                               referenceMaturityDate,
                               daysToFine,
                               daysToProtest)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, 
                     TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                     ?, ?, ?, ?, ?, 
                     TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                     ?, ?)';

        $params = array();
        $params[] = $this->fileId;
        $params[] = $this->invoiceId;
        $params[] = $this->accountNumber;
        $params[] = $this->balance;
        $params[] = $this->discountValue;
        $params[] = $this->operation;
        $params[] = $this->isCanceled;
        $params[] = $this->value;
        $params[] = $this->maturityDate;
        $params[] = $this->bankAccountId;
        $params[] = $this->monthlyInterestPercent;
        $params[] = $this->wallet;
        $params[] = $this->branchNumber;
        $params[] = $this->ourNumber;
        $params[] = $this->referenceMaturityDate;
        $params[] = $this->daysToFine;
        $params[] = $this->daysToProtest;

        $result = SDatabase::execute($sql, $params);

        return $result;
    }

    /**
     * Atualiza um registro existente com base nas informações da classe
     */
    private function update()
    {
        $sql = 'UPDATE fin.fileLog
                   SET fileId= ?,
                       invoiceId= ?,
                       accountNumber= ?,
                       balance= ?,
                       discountValue= ?,
                       operation= ?,
                       isCanceled= ?,
                       value= ?,
                       maturityDate= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       bankAccountId= ?,
                       monthlyInterestPercent= ?,
                       wallet= ?,
                       branchNumber= ?,
                       ourNumber= ?,
                       referenceMaturityDate= TO_DATE(?, \''.SAGU::getParameter('BASIC', 'MASK_DATE').'\'),
                       daysToFine= ?,
                       daysToProtest = ?
                 WHERE fileLogId = ?';

        $params = array();
        $params[] = $this->fileId;
        $params[] = $this->invoiceId;
        $params[] = $this->accountNumber;
        $params[] = $this->balance;
        $params[] = $this->discountValue;
        $params[] = $this->operation;
        $params[] = $this->isCanceled;
        $params[] = $this->value;
        $params[] = $this->maturityDate;
        $params[] = $this->bankAccountId;
        $params[] = $this->monthlyInterestPercent;
        $params[] = $this->wallet;
        $params[] = $this->branchNumber;
        $params[] = $this->ourNumber;
        $params[] = $this->referenceMaturityDate;
        $params[] = $this->daysToFine;
        $params[] = $this->daysToProtest;
        $params[] = $this->fileLogId;

        return SDatabase::execute($sql, $params);
    }
}
?>