<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Finance entry handler.
 * Contains the menus to access entry registers
 *
 * @author Nataniel I. da Silva [nataniel@solis.coop.br]
 *
 * @version $Id$
 *
 * @since
 * Class created on 25/07/2014
 *
 **/

class FinLancamentoSemVinculo extends SType
{
    public $lancamentoSemVinculoId;
    public $operationId;
    public $accountSchemeId; 
    public $tipoDeMovimentacao;
    public $openCounterId;
    public $bankAccountId;
    public $specieId;
    public $valor;
    public $costCenterId;
    public $contraPartidaId;
    public $dataDeCompetencia;
    public $dataDeCaixa;
    public $obs;
    public $bankMovementId;
    public $counterMovementId;
    
    public $valorFormatado;
    
    protected $_utilizaNovoPadrao = true;
    
    const TIPO_DE_MOVIMENTACAO_DE_CAIXA = 'C'; 
    const TIPO_DE_MOVIMENTACAO_BANCARIA = 'B'; 
    
    protected $_virtualColumns = array(
        'valorformatado' => ' ROUND( finlancamentosemvinculo.valor, 2 ) ',
    );
    
    public function beforeFind(MSQL $sql)
    {
        $busca = MIOLO::_REQUEST('buscaS');
        $sql->setColumns( 'b.description as descricaooperacao, c.description as descricaoplanocontas,
                           f.description as descricaoespecie, e.description as descricaocontrapartida, d.description as descricaocentrodecusto,
                           CASE 
                               WHEN finlancamentosemvinculo.tipoDeMovimentacao = \'C\' THEN
                                   \'CAIXA\' 
                               WHEN finlancamentosemvinculo.tipoDeMovimentacao = \'B\' THEN
                                   \'BANCÁRIA\'
                           END as tipomovimentacao' );
        $sql->addInnerJoin('finoperation b', 'finlancamentosemvinculo.operationid = b.operationid');
        $sql->addInnerJoin('accaccountScheme c', 'finlancamentosemvinculo.accountSchemeid = c.accountschemeid');
        $sql->addInnerJoin('finspecies f', 'finlancamentosemvinculo.specieid = f.speciesid');
        $sql->addInnerJoin('accaccountscheme e', 'finlancamentosemvinculo.contrapartidaid = e.accountschemeid');
        $sql->addInnerJoin('acccostcenter d', 'finlancamentosemvinculo.costcenterid = d.costcenterid');
        
        if ( $busca )
        {
            $sql->setWhereOr(" b.description ILIKE UNACCENT('%$busca%') ");
            $sql->setWhereOr(" c.description ILIKE UNACCENT('%$busca%') ");
            $sql->setWhereOr(" f.description ILIKE UNACCENT('%$busca%') ");
            $sql->setWhereOr(" d.description ILIKE UNACCENT('%$busca%') ");
            $sql->setWhereOr(" e.description ILIKE UNACCENT('%$busca%') ");
            $sql->setWhereOr(" CASE 
                               WHEN finlancamentosemvinculo.tipoDeMovimentacao = 'C' THEN
                                   'CAIXA' ILIKE UNACCENT('%$busca%')
                               WHEN finlancamentosemvinculo.tipoDeMovimentacao = 'B' THEN
                                   'BANCARIA' ILIKE UNACCENT('%$busca%')
                               END ");
            if ( is_numeric($number = str_replace(',', '.', str_replace('.', '', $busca)))  )
            {
                $sql->setWhereOr(" ROUND(finlancamentosemvinculo.valor, 2) = $number ");
            }
        }
    }
    
    public function findManyAsArray(\MSQL $sql = null)
    {
        $rows = parent::findManyAsArray($sql);
        
        return $rows;
    }
    
    public function search($filters)
    {
        $sql = ' SELECT A.lancamentoSemVinculoId,
                        A.operationId,
                        B.description,
                        A.accountSchemeId,
                        C.description,
                        CASE 
                            WHEN A.tipoDeMovimentacao = \'C\' THEN
                                \'CAIXA\' 
                            WHEN A.tipoDeMovimentacao = \'B\' THEN
                                \'BANCÁRIA\'
                        END as movimentacao,
                        A.specieId,
                        F.description,
                        ROUND(A.valor, \'' . SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE') . '\') AS valor,
                        A.costcenterId,
                        D.description,
                        A.contraPartidaId,
                        E.description,
                        TO_CHAR(A.dataDeCompetencia,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\'),
                        TO_CHAR(A.dataDeCaixa,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')
                   FROM finLancamentoSemVinculo A
             INNER JOIN finOperation B
                     ON (A.operationId = B.operationId)
             INNER JOIN accAccountScheme C
                     ON (A.accountSchemeId = C.accountSchemeId) 
             INNER JOIN accCostCenter D
                     ON (A.costcenterid = D.costcenterid)
             INNER JOIN accAccountScheme E
                     ON (A.contraPartidaId = E.accountSchemeId)
             INNER JOIN finSpecies F
                     ON (A.specieId = F.speciesid) 
                  WHERE A.lancamentoSemVinculoId IS NOT NULL ';
        
        $args = array();
        
        if ( strlen($filters->lancamentoSemVinculoId) > 0 )
        {
            $sql .= ' AND A.lancamentoSemVinculoId = ? ';
            $args[] = $filters->lancamentoSemVinculoId; 
        }
        
        if ( strlen($filters->operationId) > 0 )
        {
            $sql .= ' AND A.operationId = ? ';
            $args[] = $filters->operationId;
        }
        
        if ( strlen($filters->tipodemovimentacao) > 0 )
        {
            if ( $filters->tipodemovimentacao == MOVIMENTACAO_DE_CAIXA )
            {
                $sql .= " AND A.tipodemovimentacao = 'C' ";    
            }
            else if ( $filters->tipodemovimentacao == MOVIMENTACAO_BANCARIA )
            {
                $sql .= " AND A.tipodemovimentacao = 'B' ";
            }
        }
        
        if ( strlen($filters->speciedId) > 0 )
        {
            $sql .= ' AND A.speciedId = ? ';
            $args[] = $filters->speciedId;
        }
        
        if ( strlen($filters->valor) > 0 )
        {
            $sql .= ' AND A.valor = ? ';
            $args[] = $filters->valor;
        }
        
        if ( strlen($filters->costcenterId) > 0 )
        {
            $sql .= ' AND A.costcenterId = ? ';
            $args[] = $filters->costcenterId;
        }
        
        if ( strlen($filters->contraPartidaId) > 0 )
        {
            $sql .= ' AND A.contraPartidaId = ? ';
            $args[] = $filters->contraPartidaId;
        }
        
        if ( strlen($filters->dataDeCompetencia) > 0 )
        {
            $sql .= ' AND A.dataDeCompetencia = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->dataDeCompetencia;
        }
        
        if ( strlen($filters->dataDeCaixa) > 0 )
        {
            $sql .= ' AND A.dataDeCaixa = TO_DATE(?,\'' . SAGU::getParameter('BASIC', 'MASK_DATE') . '\')';
            $args[] = $filters->dataDeCaixa;
        }
                       
        $result = SDatabase::query($sql, $args);
        
        return $result;
    }
}

