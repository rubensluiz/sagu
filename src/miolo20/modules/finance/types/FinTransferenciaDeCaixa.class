<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 *
 * Este arquivo é parte do programa Sagu.
 *
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 *
 * Types Cheques
 *
 * @author Nataniel I. da Silva [nataniel@solis.com.br]
 *
 * @version $Id$
 *
 * @since
 * Class created on 27/06/2013
 */

class FinTransferenciaDeCaixa extends SType
{
    public $transferenciaDeCaixaId;
    public $caixaAbertoDeOrigem;
    public $caixaDeDestino;
    public $valorTransferido;
    public $transferido;
    
    
    /*
     * Retorna o valor total a ser recebido por um caixa
     */
    public function valorTotalTransferencia($caixaDeDestino)
    {
        $sql = "SELECT sum(valorTransferido)
                  FROM finTransferenciaDeCaixa
                 WHERE caixaDeDestino = ?
                   AND transferido = 'f'";
                   
        
        $result = SDatabase::query($sql, array($caixaDeDestino));
        
        return $result[0][0];
    }
    
    public function obtemTransferenciaById($transferenciaDeCaixaId)
    {
        $sql = "SELECT transferenciaDeCaixaId, 
                       caixaDeDestino, 
                       valorTransferido,
                       caixaAbertoDeOrigem
                  FROM finTransferenciaDeCaixa
                 WHERE transferenciaDeCaixaId = ?
                   AND transferido = 'f'";
                   
        
        $result = SDatabase::query($sql, array($transferenciaDeCaixaId));
        
        return $result;
    }
    
    /*
     * Obtem transferencias
     */
    public function obtemTransferencias($caixaDeDestino)
    {
        $sql = "SELECT transferenciaDeCaixaId, 
                       caixaDeDestino, 
                       valorTransferido,
                       caixaabertodeorigem
                  FROM finTransferenciaDeCaixa
                 WHERE caixaDeDestino = ?
                   AND transferido = 'f'";
                   
        
        $results = SDatabase::query($sql, array($caixaDeDestino));
        
        foreach($results as $k => $result)
        list ($TransferenciaDeCaixa[$k]->transferenciaDeCaixaId,
              $TransferenciaDeCaixa[$k]->caixaDeDestino,
              $TransferenciaDeCaixa[$k]->valorTransferido,
              $TransferenciaDeCaixa[$k]->caixaAbertoDeOrigem) = $result;
        
        return $TransferenciaDeCaixa;
    }
    
    /*
     * Obtém um objeto com os valores transferidos de um caixa aberto
     */
    public function obtemValoresTransferidos($caixaDeOrigem)
    {
        $sql = "SELECT transferenciaDeCaixaId, 
                       caixaDeDestino, 
                       valorTransferido, 
                       transferido 
                  FROM finTransferenciaDeCaixa
                 WHERE caixaAbertoDeOrigem = ?";
        
        $result = SDatabase::query($sql, array($caixaDeOrigem));
        
        $TransferenciaDeCaixa = new FinTransferenciaDeCaixa();
        list ($TransferenciaDeCaixa->transferenciaDeCaixaId,
              $TransferenciaDeCaixa->caixaDeDestino,
              $TransferenciaDeCaixa->valorTransferido,
              $TransferenciaDeCaixa->transferido ) = $result[0];
        
        return $result;
    }
    
    /**
     * Verifica se existe transferencia a ser recebida de um caixa e retorna a mensagem de confirmação
     * 
     * @param type $counterId
     * @param type $user
     * @return \Prompt
     * 
     */
    public function verificaSePossuiPendenciasDeTransferencia($counterId, $user)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $busCounterMovement = new BusinessFinanceBusCounterMovement(); 
        $busCounter = new BusinessFinanceBusCounter; 
        $busOpenCounter = new BusinessFinanceBusOpenCounter; 
        $finTransferenciaDeCaixa = new FinTransferenciaDeCaixa();

        $transferencias = $finTransferenciaDeCaixa->obtemTransferencias($counterId);
        $totalTransferencias = count($transferencias);
        
        $fields= array();
                
        if( is_array($transferencias) && !is_null($transferencias) )
        {               
             foreach( $transferencias as $transferencia )
             {    
                $caixa = $busOpenCounter->getOpenCounter($transferencia->caixaAbertoDeOrigem);
                $msg = _M("O caixa ". strtoupper($caixa->counterDescription) . " transferiu R$" . $transferencia->valorTransferido . " para o seu caixa.");
                $msg .= _M('<br> Se você já recebeu este valor, clique em recebido.', $module);
                
                $args['transferenciaId'] = $transferencia->transferenciaDeCaixaId;
                $args['caixa'] = $transferencia->caixaDeDestino;
                $args['valor'] = $transferencia->valorTransferido;
                $args['usuario'] = $user;

                $goto = $MIOLO->GetActionURL($module, $action, null, $args);
                $event = 'confirmacaoDeRecebimentoDeCaixa';

                if ( SAGU::isMiolo2() == true )
                {   
                    $prompt = new Prompt(_M('Information'), $msg);
                    $prompt->SetType('information');
                    $prompt->AddButton(_M('Recebido', $module), $goto, $event);
                }
                else
                {
                    $_SESSION['transferenciaId'] = $transferencia->transferenciaDeCaixaId;
                    $_SESSION['caixa'] = $transferencia->caixaDeDestino;
                    $_SESSION['valor'] = $transferencia->valorTransferido;
                    $_SESSION['usuario'] = $user;
                    
                    $prompt = new Prompt(utf8_encode(_M("Transferências a serem aceitas: 1 de $totalTransferencias", $module)), utf8_encode($msg));
                    $prompt->SetType('information');
                    $prompt->AddButton(_M('Recebido', $module), '', $event);
                }
                
                $fields[] = $campos = new MDiv('divCampos', $prompt);
                $campos->addBoxStyle('width', '100%');

                $caixa = null;
                
                // Se for módulo 26, exibe apenas uma transferência por vez para aceitação
                if ( SAGU::isMiolo2() == false )
                {
                    break;
                }
            }
        }
        
        return $fields;
    }
    
    /**
     * Confirma uma transferencia de caixa
     * 
     * @param type $openCounterId
     * @throws Exception
     */
    public function confirmacaoDeRecebimentoDeCaixa($openCounterId)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        if ( SAGU::isMiolo2() == true )
        {
            $counterId = MIOLO::_REQUEST('caixa');
            $value = MIOLO::_REQUEST('valor');
            $transferenciaDeCaixaId = MIOLO::_REQUEST('transferenciaId');
            $user = MIOLO::_REQUEST('usuario');
        }
        else
        {
            $transferenciaDeCaixaId = $_SESSION['transferenciaId'];
            $counterId = $_SESSION['caixa'];
            $value = $_SESSION['valor'];
            $user = $_SESSION['usuario'];
        }
                 
        try
        {
            $businessDefaultOperations = new BusinessFinanceBusDefaultOperations(); 
            $dataDefaultOperations = $businessDefaultOperations->getDefaultOperations();

            $busCounterMovement = new BusinessFinanceBusCounterMovement(); 
            $finTransferenciaDeCaixa = new FinTransferenciaDeCaixa();
            
            $finTransferenciaDeCaixa->transferenciaDeCaixaId = $transferenciaDeCaixaId;
            $finTransferenciaDeCaixa->transferido = 't';
            
            $verifica = $finTransferenciaDeCaixa->obtemTransferenciaById($transferenciaDeCaixaId);
            
            if( count($verifica) > 0 )
            {
                $finTransferenciaDeCaixa->save();

                //Insere uma movimentacao de recebimento de transferência
                $insertData = new stdClass();
                $insertData->openCounterId = $openCounterId;
                $insertData->value = $value;
                $insertData->operation = 'C';
                $insertData->speciesId = 1;            
                $insertData->observation = _M('RECEBIMENTO DE VALOR DE CAIXA', $module);

                $insertData->operationId = $dataDefaultOperations->recebimentoDeValorDeCaixa; 
                $insertData->responsibleuser = $user;
                $insertData->transferenciaDeCaixaId = $transferenciaDeCaixaId;

                $busCounterMovement->insertCounterMovement($insertData);
            }
        }
        catch (Exception $e)
        {                
            throw new Exception($e->getMessage());    
        }
        
        $_SESSION['transferenciaId'] = null;
        $_SESSION['caixa'] = null;
        $_SESSION['valor'] = null;
        $_SESSION['usuario'] = null;
        
        if ( SAGU::isMiolo2() == true )
        {
            $url = $MIOLO->GetActionURL($module, $action);
            $MIOLO->page->redirect($url);
        }
        else
        {
            $MIOLO->page->onload("window.location.reload(false);");
        }
    }
    
    
    
    
}
