<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Payment place form
 *
 * @author Rudi Uhrig Neto [rudi@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/

class FrmBank extends SManagementForm
{

    /**
     * Class constructor
     **/
    public function __construct()
    {
        parent::__construct(new FinBank(), array('bankId'), 'BusBank');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, SForm::FUNCTION_DELETE)) )
        {
            $pk = $this->getObjectPk();

            $bankIdField = new MTextLabel('bankIdField', $this->getFormValue('bankId', $pk->bankId), '');
            $bankIdHidden = new MHiddenField('bankId', $this->getFormValue('bankId', $pk->bankId));
            $data = $this->busObject->getBank($pk->bankId);
            $flds = array($bankIdField, $bankIdHidden);
        }
        else
        {
            $bankIdField = new MTextField('bankId', $this->getFormValue('bankId', $data->bankId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            $bankIdField->setJsHint(_M('Informe o código do banco', $module));
            $validators[] = new MRangeValidator('bankId', _M('Código', $module), '0', '999', 'i', 'required');
            $flds = array($bankIdField);
        }
        
        $flds[] = new MText('bankIdVdLabel', '-');
        
        $bankIdVd = new MTextField('bankIdVd', $this->getFormValue('bankIdVd', $data->bankIdVd), '', 1);
        $bankIdVd->setJsHint(_M('Informe o dígito verificador do banco', $module));
        $flds[] = $bankIdVd;
        
        $bankIdLabel = new MText('bankIdLabel', _M('Código', $module) . ':');
        $bankIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $bankIdLabel->setClass('m-caption m-caption-required');
        $flds2 = array($bankIdLabel);
        $hctBankId = new MHContainer('hctBankId', array_merge($flds2, $flds));
        
        $descriptionLabel = new MText('descriptionLabel', _M('Descrição', $module) . ':');
        $descriptionLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $descriptionLabel->setClass('m-caption m-caption-required');
        $description = new MTextField('description', $this->getFormValue('description', $data->description), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $description->setJsHint(_M('Informe a descrição do banco', $module));
        $hctDescription = new MHContainer('hctDescription', array($descriptionLabel, $description));
        $validators[] = new MRequiredValidator('description', _M('Descrição', $module));
        
        $fields[] = new MBaseGroup('bgBank', _M('Banco', $module), array(new MSeparator(), $hctBankId, new MSeparator(),$hctDescription));
        
        $tamanhoCampoAgenciaLabel = new MText('tamanhoCampoAgenciaLabel', _M('Tamanho do campo agência', $module) . ':');
        $tamanhoCampoAgenciaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $tamanhoCampoAgenciaLabel->setClass('m-caption m-caption');
        $tamanhoCampoAgencia = new MTextField('tamanhoCampoAgencia', $this->getFormValue('tamanhoCampoAgencia', $data->tamanhoCampoAgencia), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $tamanhoCampoAgencia->setJsHint(_M('Informe o tamanho do campo da agência', $module));
        $tamanhoCampoAgencia->addAttribute('onChange', SForm::getAjaxAction('mascaraAgenciaFunction', 'divMascaraAgencia', false));
        $hctTamanhoCampoAgencia = new MHContainer('hctTamanhoCampoAgencia', array($tamanhoCampoAgenciaLabel, $tamanhoCampoAgencia));
        $validators[] = new IntegerValidator('tamanhoCampoAgencia', _M('Tamanho do campo agência', $module));
        
        $tamanhoDvAgenciaLabel = new MText('tamanhoDvAgenciaLabel', _M('Tamanho DV da agência', $module) . ':');
        $tamanhoDvAgenciaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $tamanhoDvAgenciaLabel->setClass('m-caption m-caption');
        $tamanhoDvAgencia = new MTextField('tamanhoDvAgencia', $this->getFormValue('tamanhoDvAgencia', $data->tamanhoDvAgencia), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $tamanhoDvAgencia->setJsHint(_M('Informe o tamanho do dígito verificador da agência', $module));
        $hctTamanhoDvAgencia = new MHContainer('hctTamanhoDvAgencia', array($tamanhoDvAgenciaLabel, $tamanhoDvAgencia));
        $validators[] = new IntegerValidator('tamanhoDvAgencia', _M('Tamanho DV da agência', $module));
        
        $mascaraAgenciaLabel = new MText('mascaraAgenciaLabel', _M('Máscara da agência', $module) . ':');
        $mascaraAgenciaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $mascaraAgenciaLabel->setClass('m-caption m-caption');
        $mascaraAgencia = new MTextField('mascaraAgencia', $this->getFormValue('mascaraAgencia', $data->mascaraAgencia), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('*Utilize apenas o 9 como coringa. Ex.: 999.99-99'));
        $mascaraAgencia->setJsHint(_M('Informe a máscara da agência', $module));
        $hctMascaraAgencia = new MHContainer('hctMascaraAgencia', array($mascaraAgenciaLabel, $mascaraAgencia));
        
        $fields[] = new MBaseGroup('bgAgencia', _M('Agência', $module), array(new MSeparator(), $hctTamanhoCampoAgencia, new MSeparator(), $hctTamanhoDvAgencia, new MSeparator(), $hctMascaraAgencia));
        
        $tamanhoCampoContaLabel = new MText('tamanhoCampoContaLabel', _M('Tamanho do campo conta', $module) . ':');
        $tamanhoCampoContaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $tamanhoCampoContaLabel->setClass('m-caption m-caption');
        $tamanhoCampoConta = new MTextField('tamanhoCampoConta', $this->getFormValue('tamanhoCampoConta', $data->tamanhoCampoConta), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $tamanhoCampoConta->setJsHint(_M('Informe o tamanho do campo da conta', $module));
        $tamanhoCampoConta->addAttribute('onChange', SForm::getAjaxAction('mascaraContaFunction', 'divMascaraConta', false));
        $hctTamanhoCampoConta = new MHContainer('hctTamanhoCampoConta', array($tamanhoCampoContaLabel, $tamanhoCampoConta));
        $validators[] = new IntegerValidator('tamanhoCampoConta', _M('Tamanho do campo conta', $module));
        
        $tamanhoDvContaLabel = new MText('tamanhoDvAgenciaLabel', _M('Tamanho DV da conta', $module) . ':');
        $tamanhoDvContaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $tamanhoDvContaLabel->setClass('m-caption m-caption');
        $tamanhoDvConta = new MTextField('tamanhoDvConta', $this->getFormValue('tamanhoDvConta', $data->tamanhoDvConta), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $tamanhoDvConta->setJsHint(_M('Informe o tamanho do dígito verificador da conta', $module));
        $hctTamanhoDvConta = new MHContainer('hctTamanhoDvConta', array($tamanhoDvContaLabel, $tamanhoDvConta));
        $validators[] = new IntegerValidator('tamanhoDvConta', _M('Tamanho DV da conta', $module));
        
        $mascaraContaLabel = new MText('mascaraContaLabel', _M('Máscara da conta', $module) . ':');
        $mascaraContaLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $mascaraContaLabel->setClass('m-caption m-caption');
        $mascaraConta = new MTextField('mascaraConta', $this->getFormValue('mascaraConta', $data->mascaraConta), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('*Utilize apenas o 9 como coringa. Ex.: 999.99-99'));
        $mascaraConta->setJsHint(_M('Informe a máscara da conta', $module));
        $hctMascaraConta = new MHContainer('hctMascaraConta', array($mascaraContaLabel, $mascaraConta));
        
        $fields[] = new MBaseGroup('bgConta', _M('Conta', $module), array(new MSeparator(), $hctTamanhoCampoConta, new MSeparator(), $hctTamanhoDvConta, new MSeparator(), $hctMascaraConta));
        
        $fields[] = new MDiv('divMascaraConta');
        $fields[] = new MDiv('divMascaraAgencia');
        
        parent::defineFields($fields, $validators, $data);
    }
    
    public function tbBtnDelete_click($sender = NULL) 
    {
        $MIOLO = MIOLO::getInstance();
        
        $bankId = MIOLO::_REQUEST('bankId');
        
        $busDadosBancariosDaPessoa = new BusinessFinanceBusDadosBancariosDaPessoa();
        $vinculo = $busDadosBancariosDaPessoa->verificaVinculoBancoPessoa($bankId);
        
        if( $vinculo == DB_FALSE )
        {
            parent::tbBtnDelete_click($sender);
        }
        else
        {
            $this->addError(_M('O banco selecionado não pode ser excluído, pois possuí dependências(dados bancários que referenciam este banco).'));
        }
    }
    
    public function mascaraAgenciaFunction($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $max = $args->tamanhoCampoAgencia;
        
        $validatorsMascaraAgencia = new MRequiredValidator('mascaraAgencia', _M('Máscara da agência'), $max, _M('A mascara da agência deve conter ').$max.' caracteres.');
        $validatorsMascaraAgencia->type = 'optional';
        $validatorsMascaraAgencia->min = $max;
        
        $validators[] = $validatorsMascaraAgencia;
                
        $this->setValidators($validators);
        
        return '';
    }
    
    public function mascaraContaFunction($args)
    {
        $MIOLO = MIOLO::getInstance();
        
        $max = $args->tamanhoCampoConta;
        
        $validatorsMascaraConta = new MRequiredValidator('mascaraConta', _M('Tamanho do campo conta'), $max, _M('A mascara da conta deve conter ').$max.' caracteres.');
        $validatorsMascaraConta->type = 'optional';
        $validatorsMascaraConta->min = $max;
        
        $this->setValidators(array($validatorsMascaraConta));
        
        return '';
    }
    
}

?>
