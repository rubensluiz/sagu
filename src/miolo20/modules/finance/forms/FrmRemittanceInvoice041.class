<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Receivable invoice remittance to bank 041 (Banrisul)
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 07/12/2005
 *
 **/

/**
 * Form to control income forecast generation
 **/
class FrmRemittanceInvoice041 extends SForm
{
    private $home;
 // public $history;

    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $module     = MIOLO::getCurrentModule();
        $this->home = $data->home;

        parent::__construct( _M('Banrisul', $module), null, null );
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO   = MIOLO::getInstance();
        $module  = MIOLO::getCurrentModule();
        $action  = MIOLO::getCurrentAction();

        // Bank account info
        $businessBankAccount = new BusinessFinanceBusBankAccount();
        $data->bankAccountId = $this->getFormValue('bankAccountId', $data->bankAccountId);
        $data->bankId        = '041';
        $dataBankAccount     = $businessBankAccount->listBankAccount($data);

        // Verify if the specific bank account is registered
        if ( is_array($dataBankAccount[0]) )
        {
            $field        = new MSelection('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId), _M('Código da conta bancária', $module), $dataBankAccount);
            $field->setAutoSubmit(true);
            $fields[]     = $field;
            $validators[] = new MRequiredValidator('bankAccountId', _M('Código da conta bancária', $module));
        }
        else
        {
            $fields[] = new Separator(_M('Não há contas bancárias registradas. Por favor, registre uma conta bancária e retorne a este processo para continuar.', $module));
            $fields[] = new MHiddenField('bankAccountId', $this->getFormValue('bankAccountId', $data->bankAccountId));
        }

        $bankAccountId = $this->getFormValue('bankAccountId', $data->bankAccountId);
        $bankId = $businessBankAccount->getBankIdByBankAccountId($bankAccountId);
        // Obtain bank accounts, if have one selected generate the complete form
        if ( strlen($bankId)>0 )
        {
            // Verify if the bank remittance exists
            $MIOLO->getClass($module, 'RemittanceInvoice');
            if ( RemittanceInvoice::remittanceExists($bankId) )
            {
                //Get sequence of a determined bank
                $bankRemittanceSequence = $businessBankAccount->getBankAccount($bankAccountId);
                if ( strlen($bankRemittanceSequence->bankRemittanceSequence) > 0 )
                {
                    $dataSequence = $bankRemittanceSequence->bankRemittanceSequence;
                    $dataSequence++;

                }
                else
                {
                    $dataSequence = 1;
                }
                
                // Field for sequence file - Show the name
                $sequenceFile = $dataSequence ? $dataSequence : $this->getFormValue('sequenceFile', $data->sequenceFile);
                $field        = new MTextField('sequenceFile', $sequenceFile, _M('Arquivo de sequência', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
                $fields[]     = $field;

                // List all companies and show the specific company
                $businessCompany = new BusinessBasicBusCompany();
                $dataCompany     = $businessCompany->listCompany();

                if ( is_array($dataCompany[0]) )
                {
                    $fields[] = new MSelection('companyId', $this->getFormValue('companyId', $data->companyId) ? $this->getFormValue('companyId', $data->companyId) : SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'), _M('Empresa', $module), $dataCompany);
                }
                else
                {
                    $fields[] = new Separator(_M('Sem empresa registrada. Por favor, registre uma empresa para retornar a este processo e continuar.', $module), $dataCompany);
                    $fields[] = new MHiddenField('companyId', $this->getFormValue('companyId', $data->companyId));
                }
               
                // Income source mode - JAVASCRIPT utilization
                $MIOLO->page->addScript(SAGU::ABSOLUTE_URL_JS_FILES . 'sagu.js');

                $incomeSourceMode = array( array(_M('Origem única', $module), 'true'),
                                           array(_M('Todas as origens', $module), 'false') );

                $incomeSourceModeText = new MText('incomeSourceLabel', _M('Tipo de origem', $module).':');
                $incomeSourceModeText->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                
                $data->rbgIncomeSourceMode = is_null($this->getFormValue('rbgIncomeSourceMode', $data->rbgIncomeSourceMode)) ? 'true' : $this->getFormValue('rbgIncomeSourceMode', $data->rbgIncomeSourceMode);
                
                $rbgIncomeSourceMode = new MRadioButtonGroup('rbgIncomeSourceMode', '', $incomeSourceMode, $data->rbgIncomeSourceMode, null, 'horizontal');

                $rbgIncomeSourceMode->setShowLabel(false);
                $rbgIncomeSourceMode->addAttribute('onClick', 'showElements(\''.$rbgIncomeSourceMode->name.'\',\'hctIncomeSource\')');

                $fields[] = new MHContainer('hctIncomeSourceLabel', array($incomeSourceModeText, $rbgIncomeSourceMode));

                $incomeSourceName = new MText('incomeSourceName', _M('Código da origem', $module).':');
                $incomeSourceName->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $incomeSource     = new MLookupTextField('incomeSourceId', $this->getFormValue('incomeSourceId', $data->incomeSourceId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('incomeSourceName'), 'finance', 'IncomeSource', null, true);
                $incomeSourceText = new MTextField('incomeSourceName', $this->getFormValue('incomeSourceName', $data->incomeSourceName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
                $fields[]         = new MHContainer('hctIncomeSource', array($incomeSourceName, $incomeSource, $incomeSourceText));

                // Dates group 1
                $beginMaturityDateLabel = new MText('beginMaturityDateLabel', _M('Data de vencimento inicial', $module).':');
                $beginMaturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $beginMaturityDateLabel->setClass('m-caption m-caption-required');
                $beginMaturityDate      = new MCalendarField('beginMaturityDate', $this->getFormValue('beginMaturityDate', $data->beginMaturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
                $validators[]           = new MDATEDMYValidator('beginMaturityDate', _M('Data de vencimento inicial', $module), 'required');
                $fields[]               = new MHContainer('hctInitMaturityDate', array($beginMaturityDateLabel, $beginMaturityDate ) );

                $endMaturityDateLabel = new MText('endMaturityDateLabel', _M('Data de vencimento final', $module).':');
                $endMaturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $endMaturityDateLabel->setClass('m-caption m-caption-required');
                $endMaturityDate      = new MCalendarField('endMaturityDate', $this->getFormValue('endMaturityDate', $data->endMaturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
                $validators[]         = new MDATEDMYValidator('endMaturityDate', _M('Data de vencimento final', $module), 'required');
                
                $fields[] = new MHContainer('hctFimMaturityDate', array( $endMaturityDateLabel, $endMaturityDate));
                // Dates group 2
                $beginEmissionDateLabel = new MText('beginEmissionDateLabel', _M('Data de emissão inicial', $module) . ':');
                $beginEmissionDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $beginEmissionDateLabel->setClass('m-caption m-caption-required');
                $beginEmissionDate      = new MCalendarField('beginEmissionDate', $this->getFormValue('beginEmissionDate', $data->beginEmissionDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
                $validators[]           = new MDATEDMYValidator('beginEmissionDate', _M('Data de emissão inicial', $module), 'required');
               
                $fields[] = new MHContainer('hctBeginEmissionDate', array($beginEmissionDateLabel, $beginEmissionDate));

               // Dates group 2
                $endEmissionDateLabel = new MText('andEmissionDateLabel', _M('Data de emissão final', $module) . ':');
                $endEmissionDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $endEmissionDateLabel->setClass('m-caption m-caption-required');
                $endEmissionDate      = new MCalendarField('endEmissionDate', $this->getFormValue('endEmissionDate', $data->endEmissionDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
                $validators[]         = new MDATEDMYValidator('endEmissionDate', _M('Data de emissão final', $module), 'required');
               
                $fields[] = new MHContainer('hctEndEmissionDate', array($endEmissionDateLabel, $endEmissionDate));

                $businessPolicy = new BusinessFinanceBusPolicy();
                $dataPolicy     = $businessPolicy->listPolicy();

                $instructions = array( array(_M('Remessa',   $module), 1),
                                       array(_M('Pedido de pagamento', $module), 2) );
                $instructionsFieldLabel = new MText('instructionsFieldLabel', _M('Instrução', $module).':');
                $instructionsFieldLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
                $instructionsField      = new MRadioButtonGroup('instruction', '', $instructions, is_null($this->getFormValue('instructions', $data->instructions)) ? 1 : $this->getFormValue('instructions', $data->instructions) , null, 'horizontal');
                $instructionsField->setShowLabel(false);
                $fields[]               = new MHContainer('hctInstructionsField', array($instructionsFieldLabel, $instructionsField));

                $fields[] = new MTextField('invoiceMessage', $this->getFormValue('invoiceMessage', $data->invoiceMessage), _M('Mensagem do título', $module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));

                $businessMessage = MIOLO::getInstance()->getBusiness($module, 'BusInvoiceMessage');
                $fields[] = new MSelection('firstInstruction', $this->getFormValue('firstInstruction', $data->firstInstruction), _M('Primeira instrução', $module), $businessMessage->listMessageCode($bankId));
                $fields[] = new MSelection('secondInstruction', $this->getFormValue('secondInstruction', $data->secondInstruction), _M('Segunda instrução', $module), $businessMessage->listMessageCode($bankId));
                $fields[] = new MTextField('daysToProtest', $this->getFormValue('daysToProtest', $data->daysToProtest), _M('Dias para protesto', $module), SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
            }
            else
            {
                $fields[] = new MSeparator(_M('Desculpe, este banco não tem suporte para geração de remessas. Por favor, selecione outro banco.', $module));
            }
        }
        else
        {
            $fields[] = new MSeparator(_M('Por favor, registre um banco para esta conta corrente para continuar este processo.', $module));
        }
        
        parent::defineFields( array( 'fields' => $fields, 'validators' => $validators ) );

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->disableButton(MToolBar::BUTTON_PRINT);
    }

    /**
     * Event triggered when user set new from the toolbar
     */
    public function submit_button_Click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $data   = $this->getTypesData();
        $MIOLO->getClass($module, 'RemittanceInvoice041'); 
        unset($fields);
        $bankRemittance = new RemittanceInvoice041($data);

        
        //$dataGrid = $bankRemittance->getGridInformation();
                //          $fields[] = new MButton('getFile_button_click', _M('Obter arquivo', $module), $url);

        if ( is_array($bankRemittance->history[0]) )
        {
    //        $buttonGetFile = new MButton('btnGetFile', _M('Obter arquivo', $module));
    //        $fields[] = new MHContainer('hctButton', array($buttonGetFile));
            $this->setShowPostButton(false);
            
            $colNames = array( _M('Código do título', $module), 
                               _M('Código da pessoa', $module), 
                               _M('Nome', $module), 
                               _M('Valor', $module) );
            $fields[] = new MTableRaw(_M('Detalhes para remessa bancária @1', $module, '041'), $bankRemittance->history, $colNames, true);
            $this->addField($fields);
            $this->addField(new MHiddenField('fileId', $this->getFormValue('fileId', $bankRemittance->fileData->fileId)));
            if ( strlen($bankRemittance->fileData->file) )
            {
                $this->addField(new MHiddenField('hiddenFile', urlencode($bankRemittance->fileData->file)));
                $this->addField(new MHiddenField('hiddenFileName', urlencode($bankRemittance->fileData->fileName)));
                $this->addField(new MSeparator('<hr>'));
                $this->addField(new MButton('btnGetFile', _M('Obter arquivo', $module)));
                $this->addField(new MSeparator(''));
            }
        }
    }

   /**
    * Handle a action when button 'btnFile' is clicked
    *
    * @param: No parameters needed
    *
    * @return: No return
    */
    public function btnGetFile_click()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $fileContent = urldecode(stripslashes($this->getFormValue('hiddenFile')));
        SAGU::returnAsFile($this->getFormValue('hiddenFileName'), $fileContent, 'text/remittance-748');
    }

    /**
     * Get the data from form and returns as a object
     */
    public function getTypesData()
    {
        $data->bankAccountId       = $this->getFormValue('bankAccountId');
        $data->sequenceFile        = $this->getFormValue('sequenceFile');
        $data->companyId           = $this->getFormValue('companyId');
        $data->rbgIncomeSourceMode = $this->getFormValue('incomeSourceMode');
        
        if ( $data->rbgIncomeSourceMode == '0' )
        {
            $data->incomeSourceId = $this->getFormValue('incomeSourceId');
        }
        $data->beginMaturityDate   = $this->getFormValue('beginMaturityDate');
        $data->endMaturityDate     = $this->getFormValue('endMaturityDate');
        $data->beginEmissionDate   = $this->getFormValue('beginEmissionDate');
        $data->endEmissionDate     = $this->getFormValue('endEmissionDate');
        $data->instruction         = $this->getFormValue('instruction');
        $data->invoiceMessage      = $this->getFormValue('invoiceMessage');
        $data->firstInstruction    = $this->getFormValue('firstInstruction');
        $data->secondInstruction   = $this->getFormValue('secondInstruction');
        $data->daysToProtest       = $this->getFormValue('daysToProtest');
        return $data;
    }
}
?>
