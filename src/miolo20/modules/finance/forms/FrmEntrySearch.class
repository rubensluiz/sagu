<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for finEntry table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 * 
 * @since
 * Class created on 05/01/2006
 *
 **/

/**
 * Form to search the finEntry table
 */
class FrmEntrySearch extends SSearchForm
{
    /**
     * Class constructor
     */
    public function __construct($data)
    {
        parent::__construct(_M('Localizar',$module), new FinEntry(), array('entryId'), 'BusEntry');
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        //Field entry
        $entryLabel = new MText('entryLabel', _M('Código', $module).':');
        $entryLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $entryId = new MTextField('entryIdS', $this->getFormValue('entryIdS', $data->entryId), null, SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $entryId->setJsHint(_M('Informe o código de lançamento', $module));
        $hctEntry = new MHContainer('hctEntry', array($entryLabel, $entryId));
        $fields[] = $hctEntry;
        
        // Invoice information
        $invoiceIdLabel = new MText('invoiceIdLabel', _M('Título', $module).':');
        $invoiceIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $invoiceIdS = new MLookupTextField('invoiceIdS', $this->getFormValue('invoiceIdS', $data->invoiceIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personIdS, personNameS', $module, 'Invoice', null, array('personIdS' => 'personIdS'), true);
        $invoiceIdS->setJsHint(_M('Informe o código do título',$module));
        $validators[] =  new MIntegerValidator('invoiceIdS', _M('Título', $module));
        $fields[]     = new MHContainer('hctInvoiceIdS', array($invoiceIdLabel, $invoiceIdS));

        // person 
        $personLabel = new MText('personIdLabel', _M('Pessoa', $module).':');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $personIdS = new MLookupTextField('personIdS', $this->getFormValue('personIdS',$data->personIdS), null,SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'personNameS', 'basic', 'Person', null, null, true);
        $personIdS->setJsHint(_M('Informe o código da pessoa', $module));
        $validators[] = new MIntegerValidator('personIdS', _M('Pessoa', $module));
        $personNameS = new MTextField('personNameS', $this->getFormValue('personNameS',$data->personNameS), null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personNameS->setReadOnly(true);
        $personNameS->setJsHint(_M('Nome da pessoa', $module));        
        $hctPersonS = new MHContainer('hctPersonS', array($personLabel, $personIdS, $personNameS));
        $hctPersonS->setShowLabel(true);
        $fields[]   = $hctPersonS;

        // Operation information
        $operationIdLabel = new MText('operationIdLabel', _M('Operação', $module).':');
        $operationIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $operationIdS = new MLookupTextField('operationIdS', $this->getFormValue('operationIdS',$data->operationIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescriptionS', $module, 'Operation', null, null, true);
        $operationIdS->setJsHint(_M('Informe o código da operação', $module));
        $validators[] =  new MIntegerValidator('operationIdS', _M('Operação', $module));
        $operationDescriptionS = new MTextField('operationDescriptionS', $this->getFormValue('operationDescriptionS',$data->operationDescriptionS),'', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescriptionS->setReadOnly(true);
        $operationDescriptionS->setJsHint(_M('Descrição da operação', $module));
        $hctOperationS = new MHContainer('hctOperationS', array($operationIdLabel, $operationIdS, $operationDescriptionS));
        $hctOperationS->setShowLabel(true);
        $fields[]  = $hctOperationS;

        // Entry date
        $entryDateLabel = new MText('entryDateLabel', _M('Data de lançamento', $module).':');
        $entryDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $entryDateS = new MCalendarField('entryDateS', $this->getFormValue('entryDateS', $data->entryDateS), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $entryDateS->setJsHint(_M('Informe a data do lançamento', $module));
        $validators[]  = new MDATEDMYValidator('entryDateS', '', 'optional');
        $fields[]      = new MHContainer('hctEntryDate', array($entryDateLabel, $entryDateS));
        $hctEntryDateS = new MHContainer('hctEntryDateS', $flds);
        $fields[]      = $hctEntryDateS;
      
        // Value
        $valueS       = new MTextField('valueS', $this->getFormValue('valueS', $data->valueS), _M('Valor', $module), SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
        $valueS->setJsHint(_M('Informe o valor',$module));
        $validators[] = new MFloatValidator('valueS', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'));
        $fields[]     = $valueS;
        
        // cost center
        $costCenterLabel = new MText('costCenterLabel', _M('Centro de custo', $module).':');
        $costCenterLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $costCenterIdS   = new MLookupTextField('costCenterIdS', $this->getFormValue('costCenterIdS',$data->costCenterIdS), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'costCenterDescriptionS', 'accountancy', 'CostCenter', null, null, true);
        $validators[]    =  new MRegExpValidator('costCenterIdS', _M('Centro de custo', $module), '^[0-9]+(\.[0-9]+)*$');
        $costCenterIdS->setJsHint(_M('Informe o código do centro de custos', $module));
        $costCenterDescriptionS = new MTextField('costCenterDescriptionS', $this->getFormValue('costCenterDescriptionS',$data->costCenterDescriptionS), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $costCenterDescriptionS->setReadOnly(true);
        $costCenterDescriptionS->setJsHint(_M('Descrição do centro de custo', $module));
        $fields[]  = new MHContainer('hctCostCenter', array($costCenterLabel, $costCenterIdS, $costCenterDescriptionS));
    
        // Bankreturncode
        $bankReturnCodeLabel = new MText('bankReturnCodeLabel', _M('Retorno do banco', $module).':');
        $bankReturnCodeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $bankReturnCodeS     = new MTextField('bankReturnCodeS', $this->getFormValue('bankReturnCodeS', $data->bankReturnCodeS), '', 18);
        $bankReturnCodeS->setJsHint(_M('Informe o código do retorno do banco', $module));
        $fields[] = new MHContainer('hctBankReturnCodeS', array($bankReturnCodeLabel, $bankReturnCodeS));

        // get Yes and No for Radio Button
        $messagesTypeS =  SAGU::listYesNo('1');
        //isAccounted
        $isAccountedLabelS = new MText('isAccountedLabelS', _M('Está contabilizado',$module).':');
        $isAccountedLabelS->setWidth(SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE'));
        $isAccountedS = $this->GetFormValue('isAccountedS',$data->isAccountedS);
        $isAccountedS = new MRadioButtonGroup('isAccountedS', '', $messagesTypeS, $isAccountedS, null, 'horizontal');
        $isAccountedS->SetShowLabel(false);
        $hctIsAccountedS = new MHContainer('hctIsAccountedS', array($isAccountedLabelS, $isAccountedS));
        $fields[]  = $hctIsAccountedS;

        parent::defineFields($fields, $module, 'GrdEntrySearch');
    }
}

?>
