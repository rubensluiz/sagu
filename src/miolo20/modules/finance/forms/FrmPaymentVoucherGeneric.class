<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Payroll discount documents form
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Samuel Koch [samuel@solis.coop.br]
 *
 * @since
 * Class created on 22/07/2006
 *
 **/

/**
 * Form 
 **/
class FrmPaymentVoucherGeneric extends SForm
{
    /**
     * Class constructor
     **/
    public function __construct($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        parent::__construct(_M('Comprovante de pagamento genérico', $module), null, null);

        $this->toolbar->disableButton(MToolBar::BUTTON_NEW);
        $this->toolbar->disableButton(MToolBar::BUTTON_DELETE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SAVE);
        $this->toolbar->disableButton(MToolBar::BUTTON_SEARCH);
        $this->toolbar->setButtonURL(MToolBar::BUTTON_PRINT, $MIOLO->getActionURL($module, $action, null, array('event'=>'tbBtnPrint_click')));
        $this->toolbar->setIsPost(MToolBar::BUTTON_PRINT, true);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $function = MIOLO::_request('function');
        
        // Begin date
        $beginDateLabel = new MText('beginDateLabel', _M('Data inicial',$module).':');
        $beginDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $beginDateLabel->setClass('m-caption m-caption-required');
        $beginDate = new MCalendarField('beginDate', $this->getFormValue('beginDate', $data->beginDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $beginDate->setJsHint(_M('Informe a data inicial',$module));
        $validators[] = new MDATEDMYValidator('beginDate', _M('Data inicial',$module), 'required');
        $hctBeginDate = new MHContainer('hctBeginDate', array($beginDateLabel, $beginDate));
        $hctBeginDate->setShowLabel(true);
        $field1[] = $hctBeginDate;

        // End date
        $endDateLabel = new MText('endDateLabel', _M('Data final',$module).':');
        $endDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $endDateLabel->setClass('m-caption m-caption-required');
        $endDate = new MCalendarField('endDate', $this->getFormValue('endDate', $data->endDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $endDate->setJsHint(_M('Informe a data de término',$module));
        $validators[] = new MDATEDMYValidator('endDate',_M('Data final',$module), 'required');
        $hctEndDate = new MHContainer('hctEndDate', array($endDateLabel, $endDate));
        $hctEndDate->setShowLabel(true);
        $field1[] = $hctEndDate;

        // Person id
        $personIdLabel = new MText('personIdLabel', _M('Pessoa', $module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personId      = new MLookupTextField('personId', $this->getFormValue('personId', $data->personId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, array('personName', 'limbo', 'limbo', 'limbo', 'limbo'), 'basic', 'Person', null, null, true);
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setReadOnly(true);
        $personName->setJsHint(_M('Nome da pessoa', $module));
        $hctPerson = new MHContainer('hctPerson', array($personIdLabel, $personId, $personName));
        $hctPerson->setShowLabel(true);
        $field1[]   = $hctPerson;
 
        // Operation id
        $operationIdLabel = new MText('operationIdLabel', _M('Operação', $module).':');
        $operationIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operationIdLabel->setClass('m-caption m-caption-required');
        $operationId = new MLookupTextField('operationId', $this->getFormValue('operationId', $data->operationId), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription,limbo,titleDocument,messageText', $module, 'OperationVoucher', null, null, true);
        if ( $function == 'update' )
        {
            $operationId->setReadOnly(true);
        }
        $operationId->setJsHint(_M('Informe o código da operação', $module));
        $validators[] = new MIntegerValidator('operationId', _M('Operação', $module), 'required');
        $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription',$data->operationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescription->setReadOnly(true);
        $operationDescription->setJsHint(_M('Descrição da operação', $module));
        $validators[] = new MRequiredValidator('operationDescription', _M('Descrição da operação', $module), 'required');
        $field1[] = new MHContainer('hctOperation', array($operationIdLabel, $operationId, $operationDescription));

        // Another operation
        $anotherHistoryLabel = new MText('anotherHistoryLabel', _M('Outra operação',$module).':');
        $anotherHistoryLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $anotherHistoryLabel->setClass('m-caption m-caption-required');
        $anotherHistory = new MTextField('anotherHistory', $this->getFormValue('anotherHistory', $data->anotherHistory), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'));
        $anotherHistory->setJsHint(_M('Entre com os outros códigos de operações, separando os valores por vírgula',$module));
        $validators[] = new MIntegerValidator('anotherHistory', _M('Outra operação', $module));
        $hctAnotherHistory = new MHContainer('hctAnotherhistory', array($anotherHistoryLabel, $anotherHistory));
        $hctAnotherHistory->setShowLabel(true);
        $field1[] = $hctAnotherHistory;

        // Title
        $titleDocumentLabel = new MText('titleLabel', _M('Documento do título',$module).':');
        $titleDocumentLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $titleDocumentLabel->setClass('m-caption m-caption-required');
        $titleDocument = new MTextField('titleDocument', $this->getFormValue('titleDocument', $data->titleDocument), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $titleDocument->setJsHint(_M('Entre com o título do documento',$module));
        $validators[] = new MRequiredValidator('titleDocument', _M('Documento do título', $module));
        $hctTitleDocument = new MHContainer('hctTitleDocument', array($titleDocumentLabel, $titleDocument));
        $hctTitleDocument->setShowLabel(true);
        $field1[] = $hctTitleDocument;

        // Message text
        $messageTextLabel = new MText('messegeTextLabel', _M('Texto da mensagem', $module). ':');
        $messageTextLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $messageTextLabel->setClass('m-caption m-caption-required');
        $messageText = new MMultiLineField('messageText', $this->getFormValue('messageText',$data->messageText), '', 38, 3, 38);
        $messageText->setJsHint(_M('Informe o texto da mensagem',$module));
        $validators[] = new MRequiredValidator('messageText', _M('Texto da mensagem', $module));
        $cntMessageText = new MHContainer('cntMessageText', array($messageTextLabel, $messageText ));
        $field1[] = $cntMessageText;

        // Generate option
        $opts[] = new MOption('optPdf', 'pdf', _M('Arquivo PDF (não editável)', $module), true);
        $opts[] = new MOption('optSxw', 'sxw', _M('Documento do OpenOffice.org Writer (editável)', $module), false);
        
        $radFileTypeLabel = new MText('radFileTypeLabel', _M('Tipo de arquivo',$module) . ':');
        $radFileTypeLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $generateOption = $this->GetFormValue('generateOption', $data->generateOption) ? $this->GetFormValue('generateOption', $data->generateOption) : DB_TRUE;
        $generateOption = new MRadioButtonGroup('generateOption', '', $opts, $generateOption, null, 'horizontal');
        $generateOption->SetShowLabel(false);
        $hctGenerateOption = new MHContainer('hctGenerateOption', array($radFileTypeLabel, $generateOption));
        $field1[]  = $hctGenerateOption;
        $field1[]  = new MHiddenField('limbo', $this->getFormValue('limbo', $data->limbo));
        $fields[]  = new MVContainer('container1', $field1);

        $this->setFields($fields);
        $this->setValidators($validators);
        parent::defineFields();
    }

    /**
     * Event triggered when button search is clicked 
     */
     public function tbBtnPrint_click($sender = null)
     {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();

        $data->personId       = $this->getFormValue('personId');
        $data->beginDate      = $this->getFormValue('beginDate');
        $data->endDate        = $this->getFormValue('endDate');
        $data->generateOption = $this->getFormValue('generateOption');
        $data->anotherHistory = $this->getFormValue('anotherHistory');
        $data->title          = $this->getFormValue('titleDocument');
        $data->message        = $this->getFormValue('messageText');
        $data->operationId    = $this->getFormValue('operationId');

        $business   = new BusinessFinanceBusPaymentVoucherGeneric();
        $returnData = $business->getPaymentVoucherGeneric($data);

        if ( $returnData == NULL )
        {
            $this->addError(_M('Nenhum registro encontrado', $module));
        }
        else
        {
            $returnNumber = count($returnData) ;

            $index = 0;
            for( $option = 0 ; $option < $returnNumber; $option++) 
            {
                $y = $x ? $x : 0;
                $ay = $ax ? $ax : 0;
                $by = $bx ? $bx : 0;
        
                $x = $returnData[$option][0];
                $ax = $returnData[$option][12];
                $bx = $returnData[$option][11];
        
                if ( ( $x == $y ) AND ( $ax == $ay ) AND ( $bx == $by ) )
                {
                    // Calcula itens.
                    if($returnData[$option][5] == 'C')
                    {
                        $arrayTotal[$index][0] = SAGU::calcNumber($arrayTotal[$index][0] . ' + ' . $returnData[$option][2]);
                    }
                    else
                    {
                        $arrayTotal[$index][0] = SAGU::calcNumber($arrayTotal[$index][0] . ' - ' . $returnData[$option][2]);
                    }

                    // incrementa outras linhas da tabela
                    $arrayS[0][$index][] = array($returnData[$option][4],$returnData[$option][5], $returnData[$option][2] );
                }
                else
                {
                    $index++;   
        
                    // Calcula itens.
                    if($returnData[$option][5] == 'C')
                    {
                        $arrayTotal[$index][0] =  $returnData[$option][2];
                    }
                    else
                    {
                        $arrayTotal[$index][0] = SAGU::calcNumber($arrayTotal[$index][0] . ' - ' . $returnData[$option][2]);
                    }
        
                    $array[$index] = array($returnData[$option][0],
                                           $returnData[$option][1],
                                           $returnData[$option][7],
                                           $returnData[$option][8],
                                           $returnData[$option][9],
                                           $returnData[$option][9],
                                           $data->title,
                                           $data->message );
        
                    $arrayS[0][$index][] = array($returnData[$option][4],$returnData[$option][5], $returnData[$option][2] );
                }
        
            }
        
            $totalArray =  count($array) + 1 ;
            for( $x = 1; $x < $totalArray ; $x++)
            {
    
                $array[$x][count($array[$x])] = $arrayTotal[$x][0] ;
            }
    
            $MIOLO->uses('/core/AgataAPI.class');
            $api = new AgataAPI;
            $api->setLanguage($MIOLO->getConf('i18n.language'));
            $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/paymentVoucherGeneric.sxw');
            $api->setDataArray($array);
            $api->setSubDataArray($arrayS);
            set_time_limit(0);
            $ok = $api->parseOpenOffice($MIOLO->getModulePath('basic', '/documents/paymentVoucherGeneric.sxw'));
    
            if( $ok && $data->generateOption == DB_FALSE)
            {
    
                $api->setOutputPath(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/paymentVoucherGeneric.pdf');
                $ok = $api->openOffice2pdf(SAGU::getParameter('BASIC', 'TEMP_DIR') . '/paymentVoucherGeneric.sxw');
    
            }

            //se não conseguiu gerar o arquivo
            if ( !$ok )
            {
                $lblAgataError        = new MText('lblMsg1', $api->getError());
                $lblAgataError->color = 'red';
                $sep1                 = new Separator('');
                $cntErrors            = new MVContainer('cntErrors', array($lblAgataError,$sep));
                $this->divError->addControl($cntErrors);
            }
            else
            {
                $api->fileDialog();
            }
        }
     }
}
?>
