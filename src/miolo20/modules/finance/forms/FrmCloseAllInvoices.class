<?php
/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Person agreements
 *
 * @author Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * @maintainer William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 *
 * @since
 * Class created on 17/08/2005
 *
 **/

/**
 * Form to show the agreements
 **/
class FrmCloseAllInvoices extends MForm
{
    public $dataValues;

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(_M('Fechar todos os títulos', $module));
        $this->setHelp(get_class($this), MIOLO::getCurrentModule(), MIOLO::getCurrentAction());

        $this->eventHandler();
    }

    /**
     * Default method to define fields
     **/
    public function createFields()
    {
        $MIOLO    = MIOLO::getInstance();
        $module   = MIOLO::getCurrentModule();
        $action   = MIOLO::getCurrentAction();
        $data->personId    = MIOLO::_request('personId')    ? MIOLO::_request('personId')    : MIOLO::_request('personId', 'GET');
        $data->personName  = MIOLO::_request('personName')  ? MIOLO::_request('personName')  : MIOLO::_request('personName', 'GET');
        $data->entryDate   = MIOLO::_request('entryDate')   ? MIOLO::_request('entryDate')   : MIOLO::_request('entryDate', 'GET');
        $data->datePardon  = MIOLO::_request('datePardon')  ? MIOLO::_request('datePardon')  : MIOLO::_request('datePardon', 'GET');
        $data->operationId = MIOLO::_request('operationId') ? MIOLO::_request('operationId') : MIOLO::_request('operationId', 'GET');
        $data->comments    = MIOLO::_request('comments')    ? MIOLO::_request('comments')    : MIOLO::_request('comments', 'GET');

        if( strlen($data->datePardon) == 0)
        {

            $data->datePardon = strlen( $this->getFormValue('datePardon', $this->datePardon->value) ) > 0 ? $this->getFormValue('datePardon', $this->datePardon->value) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP'));
        }

        $MIOLO->page->addScript(SAGU::ABSOLUTE_URL_JS_FILES . 'sagu.js');

        $fields1[] = new MHiddenField('status', $data->status);

        // Person id
        $personIdLabel = new MText('personIdLabel', _M('Código da pessoa', $module).':');
        $personIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $personIdLabel->setClass('m-caption m-caption-required');
        $personId      = new MText('personIdT', strlen( $data->personId ) > 0 ? $data->personId : $this->getFormValue('personId', $this->personId->value));
        $personIdH     = new MHiddenField('personId', strlen( $data->personId ) > 0 ? $data->personId : $this->getFormValue('personId', $this->personId->value));
        $fields1[]      = $personIdH;
        $personId->setReadOnly(true);
        $trace         = new MText('trace', '-');
        $personName    = new MText('personNameT', strlen($data->personName) ? $data->personName : $this->getFormValue('personName',$data->personName));
        $personNameH   = new MHiddenField('personName', strlen($data->personName) ? $data->personName : $this->getFormValue('personName',$data->personName));
        $personName->setReadOnly(true);
        $fields1[]      = new MHContainer('hctPersonName', array($personIdLabel, $personId, $trace, $personName));

        // Begin date
        $dateLabel    = new MText('dateLabel', _M('Data de lançamento',$module).':');
        $dateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $dateLabel->setClass('m-caption m-caption-required');
        $date         = new MCalendarField('date', strlen($this->getFormValue('date', $data->date)) > 0 ? $this->getFormValue('date', $this->date->value) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')) , '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $date->setJsHint(_M('Data de entrada',$module));
        $validators[] = new MDATEDMYValidator('date', _M('Data de lançamento', $module), 'required');
        $hctDate      = new MHContainer('hctDate', array($dateLabel, $date));
        $hctDate->setShowLabel(true);
        $fields1[]     = $hctDate;

        // Operation id
        $operationIdLabel     = new MText('operationIdLabel', _M('Código da operação', $module).':');
        $operationIdLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $operationIdLabel->setClass('m-caption m-caption-required');
        $operationId          = new MLookupTextField('operationId', $this->getFormValue('operationId', $data->operationId) ? $this->getFormValue('operationId', $data->operationId) : SAGU::getParameter('FINANCE', 'DEFAULT_OPERATIONID_FROM_CLOSE_ALL_INVOICES') , '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), null, null, 'operationDescription', $module, 'Operation', null, null, true);
        $operationId->setJsHint(_M('Informe o código da operação', $module));
        $validators[]         = new MIntegerValidator('operationId', _M('Código da operação', $module), 'required');
        $operationDescription = new MTextField('operationDescription', $this->getFormValue('operationDescription',$data->operationDescription), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $operationDescription->setReadOnly(true);
        $validators[]         = new MRequiredValidator('operationDescription', _M('Descrição da operação', $module));
        $fields1[]            = new MHContainer('hctOperation', array($operationIdLabel, $operationId, $operationDescription));
 
        // comments 
        $commentsLabel = new MText('commentsLabel', _M('Comentários', $module).':');
        $commentsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $commentsData = stripslashes(strlen($this->getFormValue('comments', $data->comments) ) > 0 ? $this->getFormValue('comments', $data->comments) : _M('Lançamento gerado pelo processo de fechamento de títulos nas consultas diversas.', $module ));
        $comments      = new MMultiLineField('comments', $commentsData, '', 80, 4, 80);
        $fields1[]      = new MHContainer('hctComments', array($commentsLabel, $comments));

        $fields[] = new MBaseGroup('bgMainInfo', _M('Informações principais', $module), array(new MVContainer('vctMain', $fields1)));

        $fields[] = new MText('textPardon', _M('Entre com a data de perdão caso você precise calcular o valor do juros até esta data', $module). '.');

        //  Date of the pardon
        $datePardonLabel  = new MText('datePardonLabel', _M('Data de perdão',$module).':');
        $datePardonLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $datePardonLabel->setClass('m-caption m-caption-required');
        $datePardon       = new MCalendarField('datePardon', strlen( $this->getFormValue('datePardon', $this->datePardon->value) ) > 0 ? $this->getFormValue('datePardon', $this->datePardon->value) : date(SAGU::getParameter('BASIC', 'MASK_DATE_PHP')) , '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
        $datePardon->setJsHint(_M('Informe a data de perdão',$module));
        $validators[]     = new MDATEDMYValidator('datePardon', _M('Data de perdão', $module), 'required');
        
        $fields[] = new MHContainer('hctPardon', array($datePardonLabel, $datePardon));

        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();

        // Total open value
        $totalOpenValueData = SAGU::formatNumber($businessReceivableInvoice->calculateTotalPersonOpenValueDated($data->personId, $data->datePardon));
        $totalValueData     = $totalOpenValueData;

        $fields[] = new MHiddenField('totalOpenValue', $this->getFormValue('totalOpenValue', $totalOpenValueData));

        // Total value for payments
        $totalValueData = $this->getFormValue('totalValue', $totalValueData);
        if (strlen($totalValueData)==0)
        {
            $totalValueData = $totalOpenValueData;
        }
        $totalValueLabel = new MText('totalValueLabel', _M('Valor total', $module).':');
        $totalValueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $totalValueLabel->setClass('m-caption m-caption-required');
        $totalValue      = new MTextField('totalValue', SAGU::formatNumber($totalValueData), '', SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'));
        $totalValue->setJsHint(_M('Entre com o valor total para ser distribuído entre os títulos', $module));
        $validators[]    = new MFloatValidator('totalValue', _M('Valor total', $module));

        $datePardonButton = new MButton('datePardonUpdate', _M('Atualizar valores', $module));

        if ($totalValueData>$totalOpenValueData)        
        {
            $totalValueWarning = new MLabel('<b>'._M('ALERTA: O valor total é maior que o valor aberto', $module).'<b>', 'red');
        }    
        
        $fields[] = new MHContainer('hctPardon', array($totalValueLabel, $totalValue, new MSpan('spanPardonButton', array($datePardonButton, $totalValueWarning))));

        $sep1 = new MSeparator('<hr>');
        $sep1->setWidth('99%');
        $fields[] = $sep1;
        
        $fieldPerson = new MText('personName', _M('Fechar todos os títulos para @1', $module, $data->personName));
        $field       = new MDiv('divOptions', $fieldPerson, null, 'align="center"');
        $field->setWidth('100%');
        $fields[]    = $field;

        $dataGrid                  = $businessReceivableInvoice->listInvoicesForPersonDefaulter($data->personId, $data->datePardon, $totalValueData, $totalOpenValueData);
        $this->dataValues          = $dataGrid;
        $grdCloseAllInvoices = $MIOLO->getUI()->getGrid($module, 'GrdCloseAllInvoices', $filters);
        $grdCloseAllInvoices->setData($dataGrid);
        
        $footer1 = new MText('footer1', _M('Valor total', $module).':');
        $footer1->setWidth(150);
        $footer2 = new MText('footer2', _M('Total de registros', $module).':');
        $footer2->setWidth(150);

        if ($data->total->registers > 0)
        {
            $footer[] = $footer1;
            $footer[] = new MText('footerTotal1', $data->total->value);
            $footer[] = new MSeparator('');
            $footer[] = $footer2;
            $footer[] = new MText('footerTotal2', $data->total->registers);
            $hctFooter = new MHContainer('hctFooter', $footer);
            $grdCloseAllInvoices->setFooter($hctFooter);
        }

        if ($validators)
        {
            $this->setValidators($validators);
        }
       
        $fields[] = $grdCloseAllInvoices;
        $buttonClose = new MButton('btnCloseAllInvoicesClosePositionDown', _M('Fechar janela', $module), 'javascript:closeAndReload()');
        $fields[] = new MDiv('closeDown', array($buttonClose), null, 'align="center"');
        $fields[] = new MSeparator('');
        $this->setFields($fields);
        $this->setShowPostButton(false);
    }


    /**
     * Event triggered when user chooses Generate from the toolbar
     **/
    public function btnSave_click($sender=NULL)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $execute = MIOLO::_request('execute');

        if($execute == true)
        {
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
            unset($fields);
            $fields[] = new MText('InformationLabel', $msg);
            $fields[] = new MLabel('');
            $fields[] = new MButton('btnPersonIformationSaved', _M('Fechar janela', $module), 'javascript:closeAndReload()');
            $this->setFields($fields);
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.',$module);
            $vars['personId'] = $data->personId; 
            $vars['personName'] = $data->personName;
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action, '', $vars);
            $caption = _M('Erro',$module);
            $MIOLO->error( $msg, $goto, $caption );
        }
    }
}

?>
