<?php

MIOLO::Import( 'extensions::cpaint.inc.php', 'cpaint' );

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Diverse consultation form
 *
 * @author William Prigol Lopes [william@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Fabiano Tomasini [fabiano@solis.coop.br]
 *
 * @since
 * Class created on 22/12/2005
 *
 **/
class FrmDiverseConsultation extends SForm
{
    public function __construct()
    {
        $module = SAGU::getFileModule(__FILE__);
        parent::__construct(_M('Consultas diversas', $module), null, null);
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $function = MIOLO::_request( 'function' );
        $event = MIOLO::_request('event');

        //FIXME: Find a better way to do this
        if ( $event == 'gerarRelatorioDeNegociacao' )
        {
            $this->gerarRelatorioDeNegociacao();
        }
        
        if (MIOLO::_REQUEST('__EVENTTARGETVALUE') == 'btnGenerateCarnet:click')
        {
            $url = $MIOLO->getActionURL($module, 'main', null, array('invoices' => MIOLO::_REQUEST('invoices'), 'checkTitle'=> serialize($_REQUEST['checkTitle']), 'event'=>'btnGenerateCarnet'));
            $url = str_replace('&amp;', '&', $url);
            $this->page->onload("window.open('{$url}','_blank');");
        }

        if (MIOLO::_REQUEST('__EVENTTARGETVALUE') == 'btnCloseMultipleInvoice:click')
        {
            $url = $MIOLO->getActionURL($module, 'main', null, array('personId' => MIOLO::_REQUEST('personId'), 'invoices' => MIOLO::_REQUEST('invoices'), 'checkTitle'=> base64_encode(serialize($_REQUEST['checkTitle'])), 'event'=>'btnCloseMultipleInvoice'));
            $url = str_replace('&amp;', '&', $url);
            $this->page->onload("GotoURL('{$url}');");
        }

        $fields[] = new MHiddenField('limbo', $this->getFormValue( 'limbo', $data->limbo ));
        $fields[] = new MHiddenField( 'currentUrl', str_replace( '&amp;', '&', $MIOLO->getCurrentURL() ) );

        //Field cpf        
        $lkpFields = array (
            'personId',
            'personName'
        );
        $txtCpf  = new MLookupTextField('txtCpf', $this->getFormValue('txtCpf', $this->txtCpf->value), _M('CPF',$module), 16, null, null, $lkpFields, 'basic', 'PhysicalPersonCPF', null, array('cpf' => 'txtCpf'), true);
        $txtCpf->setJsHint(_M('Informe o CPF', $module));
        $validators[] = new MCPFValidator('txtCpf', _M('CPF',$module), 'optional');
        $cntCPF = new MHContainer('cntCPF', array($txtCpf), MContainer::FORM_MODE_SHOW_SIDE);
        $fields[] = $cntCPF;

        //field person
        $personLabel  = new MText('personLabel', _M('Pessoa', $module) . ':');
        $personLabel->setClass('m-caption m-caption-required');
        $personLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $lkpFields = array (
            'personName',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'limbo',
            'txtCpf'
        );
        $personIdValue = $this->getFormValue('personId', $this->personId->value);
        $personId     = new MLookupTextField('personId', $personIdValue, null, SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, $lkpFields, 'basic', 'PersonFinanceConsultation', null, array('personId' => 'personId', 'cpf' => 'txtCpf'), true);
        $personId->addAttribute('onkeyDown', 'if (event.keyCode == 13) { this.onExit(); }');
        $personId->setJsHint(_M('Informe o código da pessoa', $module));
        $personName   = new MTextField('personName', $this->getFormValue('personName', $data->personName), _M('Nome da pessoa',$module), SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $personName->setJsHint        //MIOLO::uses('/ui/controls/mtabbedbasegroup.class');
(_M('Nome da pessoa', $module));
        $personName->setReadOnly(true);
        $hctPerson    = new MHContainer('hctPerson', array($personLabel, $personId, $personName));
        $hctPerson->setShowLabel(false);
        $fields[]     = $hctPerson;
        
        $btnSearch = new MButton( 'btnSearch', _M('Localizar', $module) );
        $btnSearch->event = 'btnSearch';
        $fields[] = $btnSearch;
        
        $fields[] = new MSeparator( '' );
        $this->setShowPostButton( false );

        $validators[] = new MRequiredValidator('personName');
        $validators[] = new MRequiredValidator('personId');

        $fields[] = new MDiv('divPopupDiverseTax');

        $divContent = '';
        if( strlen($personIdValue) > 0 )
        {
            $args = new stdClass();
            $args->personId = $personIdValue;
            $divContent = $this->changePerson($args);
        }
        $fields[] = new MDiv('divFinanceData', $divContent);

        $this->setFields( $fields );
        // Make the cursor focus at the first field (sagu.js)
        $this->page->onLoad('setInitialFocus(document.' . $this->name . ');');
        
        $this->setLabelWidth( SAGU::getParameter('BASIC', 'FIELD_LABEL_SIZE') );
        $this->setValidators( $validators );
        $this->setShowPostButton(false);        
        $this->setClose( $MIOLO->getActionURL( $module, substr( $action, 0, strrpos( $action, ':' ) ) ) );
        $MIOLO->getRequiredJS4Ajax();
        $this->addStyleFile( 'm_grids.css' );
        $MIOLO->page->addScript('m_tabbedbasegroup.js');

        parent::defineFields(array('toolbar' => false));
        
        if ( strlen($this->getFormValue('personId', $this->personId->value)) > 0 )
        {
            $this->getAjaxAction('changePerson', 'divFinanceData', true, array('personId'=>$this->getFormValue('personId', $this->personId->value)));
        }
    }

    /*
     * Função responsável por montar as tabs relacionadas com os dados da pessoa selecionada.
     */
    public function changePerson($args)
    {
        $MIOLO = MIOLO::getInstance();

        if ( (strlen($args->personId)>0 ) )
        {

            $fields[] = $tab = new MTabbedBaseGroup('generalData');
            $tab->createTab('tabTitulos', _M('Títulos', $module), array($this->buildInvoiceFields($args)));
            $tab->createTab('tabAcordos', _M('Antecipações/Negociações', $module), array($this->buildAgreementFields($args)));
            $tab->createTab('tabPagamentos', _M('Pagamentos', $module), array($this->buildPaymentFields($args)));
            $tab->createTab('tabIncentivos', _M('Incentivos', $module), array($this->buildIncentiveFields($args)));
            $tab->createTab('tabConvenios', _M('Convênios', $module), array($this->buildConvenantPersonFields($args)));

            if ( SAGU::getParameter('basic', 'MODULE_GNUTECA_INSTALLED') == 'YES' )
            {
                $tab->createTab('tabGnuteca', _M('Gnuteca', $module), array($this->buildGnutecaFields($args)));
            }
            if ( SAGU::getParameter('basic', 'MODULE_PROTOCOL_INSTALLED') == 'YES' )
            {
                $tab->createTab('tabProtocol', _M('Protocolo', $module), array($this->buildProtocolFields($args)));
            }
            
            $tab->createTab('tabCheques', _M('Cheques', $module), array($this->listarCheques($args)));
        }

        return $fields;
    }

    
    private function buildInvoiceFields($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        
        $dataGrid = $businessReceivableInvoice->listInvoicesForPerson($data, null, true);
        
        // Totalizations
        $businessPerson = new BusinessBasicBusPerson();
        $dataPerson = $businessPerson->getPersonName( SAGU::NVL( $data->personId, $this->getFormValue('personId') ) );
        $data->personName = $dataPerson;

        $docs = $this->documentosPendentes($data->personId);
        
        if ( is_array($dataGrid) )
        {
            // Totalizations
            $dataTotal = $businessReceivableInvoice->totalizationInvoicesForPerson($data->personId);
            if ( is_array($dataTotal) )
            {
                foreach ( $dataTotal as $dt )
                {
                    $dt1[] = SAGU::NVL($dt[1], 0);
                    $dt2[] = SAGU::NVL($dt[2], 0);
                    $dt3[] = SAGU::NVL($dt[3], 0);
                }
                
                $dataTotal[] = array (
                    '<b>' . _M('Total', $module) . '</b>', 
                    SAGU::calcNumber(implode(' + ', $dt1), true), 
                    SAGU::calcNumber(implode(' + ', $dt2), true), 
                    SAGU::calcNumber(implode(' + ', $dt3), true)
                );
                
                $col1 = new MDiv('col1', _M('Tipo de cobrança', $module), null, 'align="center"');
                $col2 = new MDiv('col2', _M('Valor nominal', $module), null, 'align="center"');
                $col3 = new MDiv('col3', _M('Valor em aberto', $module), null, 'align="center"');
                $col4 = new MDiv('col4', _M('Valor atualizado', $module), null, 'align="center"');
                
                $cols = array (
                    $col1->generate(), 
                    $col2->generate(), 
                    $col3->generate(), 
                    $col4->generate()
                );
                
                foreach ( $dataTotal as $key => $dT )
                {
                    for ( $x = 1; $x <= 3; $x++ )
                    {
                        $dTx = new MDiv('value' . $key . $x, $dT[$x], null, 'align="right"');
                        $dTx->addAttribute('align', 'right');
                        $dataTotal[$key][$x] = $dTx->generate();
                    }
                }
                $fieldCollection = new MTableRaw('', $dataTotal, $cols);
                $fieldCollection->setAlternate(true);
                $divCollection = new MDiv('divCollection', array($fieldCollection));
                $divCollection->setWidth('99%');
                $fields[] = $divCollection;
                $fields[] = new MSeparator('');
                $fields[] = new MSeparator('');
            }
            // End totalizations
            if ( is_array($dataGrid) )
            {
                // Generate the grid
                $grid = $MIOLO->getUI()->getGrid($module, 'GrdDiverseConsultationPerson', $data);
                $grid->setClose(null);
                $grid->setTitle(_M('Títulos para', $module) . ':</b> ' . $data->personId . ' - ' . $data->personName);
                $grid->setData($dataGrid);
                $grid->setTableName('FinReceivableInvoice');
                $fields[] = $grid;
                $fields[] = new MHiddenField('invoices', implode(',', $grid->pendingInvoices));

                if( SAGU::getParameter('finance', 'ENABLE_DIVERSE_TAX') == 'TRUE' )
                {
                    $buttons[] = new MButton('btnInsertDiverseTax', _M('Inserir taxa', $module), SForm::getAjaxAction('popupDiverseTaxFields', 'divPopupDiverseTax', false, null, true, false));
                }
                
                $buttons[] = new MButton('btnGenerateCarnet', _M('Gerar carnê', $module));
                $buttons[] = new MButton('btnCloseMultipleInvoice', _M('Baixar títulos selecionados', $module));
                //Negociacao de títulos difere pelo parametro
                SAGU::getParameter('FINANCE', 'NEGOCIACAO_FORM') == 'FrmNegotiation' ? $btnTitle = 'Negociar títulos selecionados' : $btnTitle = 'Negociar títulos';
                $buttons[] = new MButton('btnNegotiateMultipleInvoices', _M($btnTitle, $module));
                 
                $businessContract = new BusinessAcademicBusContract();
                $verificaContract = $businessContract->obterContratoPessoa($MIOLO->_REQUEST('personId'));
                $businessContractMatricula = new BusinessAcademicBusContract();
                $ResumoMatricula = $businessContractMatricula->obterResumoMatricula($verificaContract[0][0]);

                if ( count($ResumoMatricula) >= 1 )
                {
                     $buttons[] = new MButton('btnReportMatricula', _M('Emitir relatório de resumo da matrícula', $module));
                }
                $hctButtons = new MDiv('divButtons', $buttons, null, 'align="center"');
                
                $fields[] = $hctButtons;
            }
        }
        else
        {
            $fields[] = $label = new MTextLabel('txtNotFound', _M('Não foram encontrados títulos.', $module), null, 'blue');
            $label->setBold(true);
            $fields[] = new MSeparator();
            
            if( SAGU::getParameter('finance', 'ENABLE_DIVERSE_TAX') == 'TRUE' )
            {
                $buttons[] = new MButton('btnInsertDiverseTax', _M('Inserir taxa', $module), SForm::getAjaxAction('popupDiverseTaxFields', 'divPopupDiverseTax', false, null, true, false));
                $hctButtons = new MDiv('divButtons', $buttons, null, 'align="center"');                
                $fields[] = $hctButtons;
            }
        }

        return new MDiv('divInvoices', array($docs, $fields), null, 'align="center"');
    }
    
     /**
     * Verifica e retorna se a pessoa tem documentos pendentes de entrega - FINANCEIRO
     * @param type $args
     * @return \MDiv
     */
    public function documentosPendentes($args)
    {
        $personId = $args;
        $gfields = new sGenericFields();           

        $busDocument = new BusinessBasicBusDocument();
        $listDoc = $busDocument->checkDocumentosPendentes($personId);

        if ( count($listDoc) > 0)
        {
            
            $msg = _M('O(s) seguinte(s) documento(s) do aluno(a) esta(ão) pendente(s) de entrega:');
            
            foreach ( $listDoc as $value)
            {
                $msg.= "<br>".$value[0];
            }
            
            $flds[] = $gfields->labelDica($msg);
        }
        
        $controls = new MDiv('divDocs', $flds, null, 'align="left"');
        
        return $controls;
    }
    
    private function buildGnutecaFields($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $businessGnuteca = new BusinessGnutecaBusGnutecaToSagu2();

        $dataFines = $businessGnuteca->searchPersonOpenFines($data->personId);
        if ( count($dataFines)>0 )
        {
            $grdGnuteca = $MIOLO->getUI()->getGrid($module, 'GrdGnutecaFines');
            $grdGnuteca->setData($dataFines);
            $grdGnuteca->setTitle(_M('Multas para', $module) . ': ' . $data->personId . ' - ' . $data->personName);
            $grdGnuteca->setClose(null);
            $fields[] = $grdGnuteca;
        }
       else
        {
            $fields[] = $label = new MText('gnutecaText', _M('Nunhuma multa encontrada', $module), 'blue');
            $label->setBold(true);
        }
        $fields[] = new MSeparator('');
        return new MDiv('divMessage', $fields, null, 'align="center"');
    }
    
    private function buildProtocolFields($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $businessRequest = new BusinessProtocolBusRequestPtc();

        $dataFees = $businessRequest->searchOpenedRequests($data->personId);
        
        if ( count($dataFees)>0 )
        {
            $grdProtocol = $MIOLO->getUI()->getGrid($module, 'GrdProtocolFee');
            $grdProtocol->setData($dataFees);
            $grdProtocol->setTitle(_M('Taxas para', $module) . ': ' . $data->personId . ' - ' . $data->personName);
            $grdProtocol->setClose(null);
            $fields[] = $grdProtocol;
        }
        else
        {
            $fields[] = $label = new MText('protocolText', _M('Nenhuma taxa encontrada', $module), 'blue');
            $label->setBold(true);
        }
        $fields[] = new MSeparator('');

        return new MDiv('divMessage', $fields, null, 'align="center"');
    }
    
    /**
     * Cria a popup com os campos para inserir uma nova taxa diversa
     * @param type $args
     * @return MTextLabel 
     */
    public function popupDiverseTaxFields($args)
    {
        $module = SAGU::getFileModule(__FILE__);
        
        /**
         * Verifica se todos parâmetros necessários foram definidos
         */
        $divereTaxOperation = SAGU::getParameter($module, 'DIVERSE_TAX_OPERATION');        
        if( !strlen($divereTaxOperation) > 0 )
        {
            $msg[] = _M('Operação de taxas diversas não definido, verifique o parâmetro DIVERSE_TAX_OPERATION', $module);            
        }
        $divereTaxCostCenter = SAGU::getParameter($module, 'DIVERSE_TAX_COST_CENTER');
        if( !strlen($divereTaxCostCenter) > 0 )
        {
            $msg[] = _M('Centro de custo para taxas diversas não definido, verifique o parâmetro DIVERSE_TAX_COST_CENTER', $module);
        }
        $divereTaxPolicyId = SAGU::getParameter($module, 'DIVERSE_TAX_POLICY_ID');
        if( !strlen($divereTaxPolicyId) > 0 )
        {
            $msg[] = _M('Política para taxas diversas não definido, verifique o parâmetro DIVERSE_TAX_POLICY_ID', $module);
        }
        $divereTaxIncomeSourceId = SAGU::getParameter($module, 'DIVERSE_TAX_INCOME_SOURCE_ID');
        if( !strlen($divereTaxIncomeSourceId) > 0 )
        {
            $msg[] = _M('Origem para taxas diversas não definido, verifique o parâmetro DIVERSE_TAX_INCOME_SOURCE_ID', $module);
        }                
        $bankAccountId = SAGU::getParameter('BASIC', 'DEFAULT_BANK_ACCOUNT_ID');
        if( !strlen($bankAccountId) > 0 )
        {
            $msg[] = _M('Conta bancária padrão não definida, verifique o parâmetro DEFAULT_BANK_ACCOUNT_ID', $module);
        }
        
        //Caso algum parâmetro não foi configurado exibe a mensagem de erro
        if( count($msg) > 0 )
        {
            $this->addError($msg);
        }
        else
        {
            $flds[] = new MTextLabel('lblPersonDiverseTax', $args->personId.' - '.$args->personName, _M('Pessoa', $module));

            //Field maturity date
            $maturityDateLabel = new MText('maturityDateLabel', _M('Data de vencimento',$module).':');
            $maturityDateLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $maturityDateLabel->setClass('m-caption m-caption-required');
            $maturityDate = new MCalendarField('maturityDate', $this->getFormValue('maturityDate',$data->maturityDate), '', SAGU::getParameter('BASIC', 'FIELD_DATE_SIZE'));
            $maturityDate->setJsHint(_M('Informe a data de vencimento',$module));
            $validators[] = new MDATEDMYValidator('maturityDate', _M('Data de vencimento',$module), 'required');
            $hctMaturityDate = new MHContainer('hctMaturityDate', array($maturityDateLabel, $maturityDate));
            $hctMaturityDate->setShowLabel(true);
            $flds[]   = $hctMaturityDate;
            
            //Field valor 
            $valueLabel   = new MText('valueLabel', _M('Valor',$module).':');
            $valueLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $valueLabel->setClass('m-caption m-caption-required');
            $value        = new MTextField('value', SAGU::formatNumber($this->getFormValue('value',$data->value)), '', SAGU::getParameter('BASIC', 'FIELD_MONETARY_SIZE'), _M('Ex.: 1.00', $module));
            $value->setJsHint(_M('Informe o valor',$module));
            $validators[] =   new MFloatValidator('value', _M('Valor', $module), SAGU::getParameter('BASIC', 'FLOAT_SEPARATOR'), SAGU::getParameter('BASIC', 'REAL_ROUND_VALUE'), 'required');
            $hctValue     = new MHContainer('hctValue', array($valueLabel, $value));
            $flds[]     = $hctValue;
            
            //Field comments        
            $commentsLabel = new MText('commentsLabel', _M('Comentários',$module).':');
            $commentsLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $comments = new MMultiLineField('comments', $this->getFormValue('comments',$data->comments), '', 40, 4, 80);
            $comments->setJsHint(_M('Comentários',$module));
            $hctComments = new MHContainer('hctComments', array($commentsLabel, $comments));
            $flds[]   = $hctComments;
            
            //Seta Validadores
            $this->setValidators($validators);
            
            //Cria botões inferiores cancelar e salvar
            $htcFlds[] = new MButton('btnCancel', _M('Cancelar', $module), 'javascript:mpopup.remove(); delete window.MIOLO_validators.maturityDate; delete window.MIOLO_validators.value;'); //Fecha a popup e remove os validadores ajax
            $htcFlds[] = new MButton('btnSaveDiverseTax', _M('Salvar', $module), SForm::getAjaxAction('saveDiverseTax', 'divPopupDiverseTax', true, null, true, false));
            $flds[] = new MHContainer('ctnBtnSave', $htcFlds);
            
            $this->setFields($flds);
            $this->generateValidators($this->layout);
            
            MPopup::show('popupInsertDiverseTax', $flds, _M('Inserir taxas diversas', $module), false);

            $this->generateAJAXValidators();
        }
    }
    
    /**
     * Evento chamado para salvar as taxas diversas.
     * Cria um novo lançamento e título
     * @param type $args 
     */
    public function saveDiverseTax($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = SAGU::getFileModule(__FILE__);
        
        SDatabase::beginTransaction();
        
        $busInvoice = new BusinessFinanceBusReceivableInvoice();
        $busEntry = new BusinessFinanceBusEntry();
        
        try 
        {    
            //Cria o novo titulo
            $invoice = new stdClass();        
            $invoice->personId = $args->personId;
            $invoice->costCenterId = SAGU::getParameter($module, 'DIVERSE_TAX_COST_CENTER');
            $invoice->policyId = SAGU::getParameter($module, 'DIVERSE_TAX_POLICY_ID');
            $invoice->incomeSourceId = SAGU::getParameter($module, 'DIVERSE_TAX_INCOME_SOURCE_ID');
            $invoice->bankAccountId = SAGU::getParameter('BASIC', 'DEFAULT_BANK_ACCOUNT_ID');            
            $invoice->parcelNumber = 1;
            $invoice->maturityDate = $args->maturityDate;
            $invoice->referenceMaturityDate = $args->maturityDate;
            $invoice->value = $args->value;
            $invoice->comments = $args->comments;

            $invoiceId = $busInvoice->insertReceivableInvoice($invoice);
            
            //Cria o lançamento
            $entry = new stdClass();
            $entry->invoiceId = $invoiceId;
            $entry->operationId = SAGU::getParameter($module, 'DIVERSE_TAX_OPERATION');
            $entry->entryDate = SAGU::getDateNow();
            $entry->value = $args->value;
            $entry->costCenterId = SAGU::getParameter($module, 'DIVERSE_TAX_COST_CENTER');
            $entry->creationType = 'A';
            $entry->comments = $args->comments;
        
            $entryId = $busEntry->insertEntry($entry);
            
            SDatabase::commit(); //Salva as alterações
        }
        catch(Exception $e)
        {
            SDatabase::rollback();
            $MIOLO->error($e->getMessage());
        }                
        //Remove os validadores ajax
        $MIOLO->page->onLoad("delete window.MIOLO_validators.maturityDate; delete window.MIOLO_validators.value;");
        
        $MIOLO->information(_M('Taxa inserida com sucesso!', $module));
    }
    
    /**
     * Gera aba de negociações e antecipações.
     * 
     * @param type $data
     * @return \MDiv
     */
    private function buildAgreementFields($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
                
        $finNegotiation = new FinNegotiation();        
        $filters->personId = $data->personId;
        
        //Grid de antecipações
        $filters->recordType = 'A';
        $dadosAntecipacoes = $finNegotiation->searchGridDiverseConsultation($filters);
        
        $grdAntecipacoes = $MIOLO->getUI()->getGrid($module, 'GrdNegotiationDiverseConsultation');
        $grdAntecipacoes->setData($dadosAntecipacoes);
        $grdAntecipacoes->setTitle(_M('Antecipações', $module));
        $grdAntecipacoes->setClose(null);
        $fields[] = $grdAntecipacoes;
                       
        $fields[] = new MDiv('space');
        
        //Grid de negociações
        $filters->recordType = 'N';
        $dadosNegociacoes = $finNegotiation->searchGridDiverseConsultation($filters);
        
        $grdNegociacoes = $MIOLO->getUI()->getGrid($module, 'GrdNegotiationDiverseConsultation');
        $grdNegociacoes->setData($dadosNegociacoes);
        $grdNegociacoes->setTitle(_M('Negociações', $module));
        $grdNegociacoes->setClose(null);
        $fields[] = $grdNegociacoes;
        
        $fields[] = new MDiv('divDetalhes');
        
        return new MDiv('divMessage', $fields, null, 'align="center"');
        
    }
    
    /**
     * Gerar campo da popup de detalhes da negociação/antecipação
     * 
     * @param type $args
     */
    public static function obterDetalhes($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();        
        $recordType = $args->recordType == 'A' ? 'antecipação' : 'negociação';
        
        $finNegotiation = new FinNegotiation(); 
        $filters->negotiationId = $args->negotiationId;
        
        //Obtém dados para a grid com titulos atualizados
        $filters->generated = DB_TRUE;
        $registrosAtualizados = $finNegotiation->searchGridDetails($filters);
        
        if ( count($registrosAtualizados) > 0 )
        {
            //Agrupa os dados da grid pelo invoiceid
            $bkTitulo = null;
            foreach ( $registrosAtualizados as $key => $value )
            {
                if ( $value[0] != $bkTitulo )
                {
                    $grdTitulosAtualizados[$value[0]][] = $value;
                }
                else
                {
                    $grdTitulosAtualizados[$bkTitulo][] = $value;
                }            
                $bkTitulo = $value[0];
            }
            
            //Monta a grid para cada invoiceid
            foreach ( $grdTitulosAtualizados as $titulo  => $values)
            {
                $grdDetail = $MIOLO->getUI()->getGrid($module, 'GrdNegotiationDetails');
                $grdDetail->setData($values);
                $grdDetail->setTitle(_M('Lançamentos para o título ', $module) . $titulo . " (Vencimento {$values[0][7]})");
                $grdDetail->setClose(null); 
                $grdDetail->setFooter(self::setFooterGridNegotiation($titulo));
                
                $divGrid = new MDiv('divGrid', $grdDetail);
                $divGrid->addStyle("width", "100%");
                $flds[] = $divGrid;        
                $flds[] = new MDiv('space');
                $flds[] = new MSeparator();
            }
            
            $fields[] = new MBaseGroup('baselabel', _M('Título(s) gerado(s) ou modificado(s) a partir da ' . $recordType), $flds);
        }
        
        unset($key, $value, $value, $titulo, $values, $bkTitulo, $flds);
        
        //Obtém dados para a grid com titulos novos
        $filters->generated = DB_FALSE;
        $registrosNovos = $finNegotiation->searchGridDetails($filters);
        
        if ( count($registrosNovos) > 0 )
        {
            //Agrupa os dados da grid pelo invoiceid
            $bkTitulo = null;
            foreach ( $registrosNovos as $key => $value )
            {
                if ( $value[0] != $bkTitulo )
                {
                    $grdTitulosNovos[$value[0]][] = $value;
                }
                else
                {
                    $grdTitulosNovos[$bkTitulo][] = $value;
                }            
                $bkTitulo = $value[0];
            }
            
            //Monta a grid para cada invoiceid
            foreach ( $grdTitulosNovos as $titulo  => $values)
            {
                $grdDetailNew = $MIOLO->getUI()->getGrid($module, 'GrdNegotiationDetails');
                $grdDetailNew->setData($values);
                $grdDetailNew->setTitle(_M('Lançamentos para o título ', $module) . $titulo . " (Vencimento {$values[0][7]})");
                $grdDetailNew->setClose(null);
                $grdDetailNew->setFooter(self::setFooterGridNegotiation($titulo));

                $divGridNew = new MDiv('divGridNew', $grdDetailNew);   
                $divGridNew->addStyle("width", "100%");
                $flds[] = $divGridNew;
                $flds[] = new MDiv('spacer');
            }
            
            $fields[] = new MBaseGroup('baselabel', _M('Título(s) fechado(s) a partir da '.  $recordType), $flds);
        }
                        
        $button = new MButton('btnCloseNegotiationDetails', _M('Fechar', $module), 'mpopup.remove()');
        $divClose = new MDiv('divClose', $button);
        $divClose->addBoxStyle("margin-left",  "48%");
        $fields[] = $divClose;       
        
        return $fields;
    }
    
    /**
     * Mostra a popup de detalhes.
     * 
     * @param type $args
     */
    public function popupDetalhes($args)
    {
        $recordType = $args->recordType == 'A' ? 'antecipação' : 'negociação';
        
        MPopup::show('popupDetalhes', self::obterDetalhes($args), _M('Detalhes ' . $recordType . ' ' . $args->negotiationId, $module));
    }
    
    /**
     * Obtém o valor aberto e o valor atualizado do título para utilizar no footer da grid de negotiationdetails
     * 
     * @param type $invoiceId
     * @return \MHContainer
     */
    public static function setFooterGridNegotiation($invoiceId)
    {   
        $businessInvoice = new BusinessFinanceBusInvoice(); 
        $valorAberto = $businessInvoice->getInvoiceBalance($invoiceId);
        $valorAtualizado = $businessInvoice->getInvoiceBalanceWithPolicies($invoiceId);
        
        $saldoAbertoLabel = new MText('saldoAbertoLabel', _M('Saldo em aberto: ', $module));
        $saldoAberto = new MText('saldoAberto', $valorAberto);
        $fld[] = new MContainer('teste', array($saldoAbertoLabel, $saldoAberto));
        
        $saldoAtualizadoLabel = new MText('saldoAtualizadoLabel', _M('Saldo atualizado: ', $module));
        $saldoAtualizado = new MText('saldoAtualizado', $valorAtualizado);
        $fld[] = new MContainer('teste', array($saldoAtualizadoLabel, $saldoAtualizado));
        
        $hctFooter = new MHContainer('hctFooter', $fld);
        $hctFooter->setDisposition('vertical');
        
        return $hctFooter;
    }
    
    private function buildPaymentFields($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        
        $businessEntry = new BusinessFinanceBusEntry();
        $dataGrid = $businessEntry->listPayments($data->personId);
        $dataGridTotal = $businessEntry->getTotalPayments($data->personId);
        
        if ( is_array($dataGrid[0]) )
        {
            $grdPayments = $MIOLO->getUI()->getGrid($module, 'GrdPayments');
            $grdPayments->setData($dataGrid);
            $grdPayments->setTitle(_M('Pagamentos para', $module) . ': ' . $data->personId . ' - ' . $data->personName);
            $grdPayments->setClose(null);
            $footer1 = new MText('footer1', '<b>' . _M('Total', $module) . ': </b>');
            $footer[] = $footer1;
            $footer[] = new MText('footerTotal', $dataGridTotal);
            $hctFooter = new MHContainer('hctFooter', $footer);
            $grdPayments->setFooter($hctFooter);
            $fields[] = $grdPayments;
        }
        else
        {
            $fields[] = $label = new MText('agreementsText', _M('Não foram encontrados pagamentos.', $module), 'blue');
            $label->setBold(true);
        }
        return new MDiv('divAgreements', $fields, null, 'align="center"');
        
    }
    
    private function buildIncentiveFields($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        
        // Special incentives
        $businessIncentive = new BusinessFinanceBusIncentive();
        $checkDetails = $businessIncentive->getSpecialIncentive($data->personId);
        if ( is_array($checkDetails[0]) )
        {
            $incentiveInfo = $MIOLO->getUI()->getGrid($module, 'GrdSpecialIncentive');
            $incentiveInfo->setData($checkDetails);
            $incentiveInfo->setClose(null);
            $incentiveInfo->setTitle(_M('Incentivos especiais para', $module) . ': ' . $data->personId . ' - ' . $data->personName);
            $fields[] = $incentiveInfo;
            
            $field = new MDiv('divSeparator1', '<hr>', null, 'align="center"');
            $field->setWidth('99%');
            $fields[] = $field;
        }
        else
        {
            $fields[] = $label = new MLabel(_M('Não foram encontrados incentivos especiais.', $module), 'blue');
            $label->setBold(true);
        }
        $fields[] = new MSeparator('');
        
        // Normal incentives
        $dataIncentive = $businessIncentive->searchIncentivesForPerson($data->personId);
        if ( is_array($dataIncentive[0]) )
        {
            $incentiveInfo = $MIOLO->getUI()->getGrid($module, 'GrdIncentive', $data);
            $incentiveInfo->setData($dataIncentive);
            $incentiveInfo->setTitle(_M('Incentivos para', $module) . ': ' . $data->personId . ' - ' . $data->personName);
            $incentiveInfo->setClose(null);
            $fields[] = $incentiveInfo;
        }
        else
        {
            $fields[] = $label = new MLabel(_M('Não foram encontrados incentivos.', $module), 'blue');
            $label->setBold(true);
        }
        return new MDiv('incentivesDiv', $fields, null, 'align="center"');
        
    }
    
    private function buildConvenantPersonFields($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $businessReceivableInvoice = new BusinessFinanceBusReceivableInvoice();
        
        // Convênios
        $busConvenantPerson = new BusinessFinanceBusConvenantPerson();
        $filters = new stdClass();
        $filters->personId = $data->personId;
        $dataConvenant = $busConvenantPerson->searchConvenantPerson($filters);
                
        if ( is_array($dataConvenant[0]) )
        {
            $convenantInfo = $MIOLO->getUI()->getGrid($module, 'GrdConvenantPersonSearch', $data);
            $convenantInfo->setData($dataConvenant);
            $convenantInfo->setTitle(_M('Convênios para', $module) . ': ' . $data->personId . ' - ' . $data->personName);
            $convenantInfo->setClose(null);
            $fields[] = $convenantInfo;
        }
        else
        {
            $fields[] = $label = new MLabel(_M('Não foram encontrados convênios.', $module), 'blue');
            $label->setBold(true);
        }
        return new MDiv('convenantDiv', $fields, null, 'align="center"');
    }
    
    /**
     * Lista todos os cheques referentes aos títulos da pessoa.
     * 
     * @param type $data
     * @return \MDiv
     */
    private function listarCheques($data)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        $finCheques = new FinCheque();
        $cheques = $finCheques->obterChequesParaConsultasDiversas($data->personId);
        
        if ( count($cheques) > 0 )
        {
            $gridCheques = $MIOLO->getUI()->getGrid($module, 'GrdControleCheques');
            $gridCheques->setData($cheques);
            $gridCheques->setClose(null);
            $gridCheques->setTitle(_M('Cheques referentes para', $module) . ' ' . $data->personId . ' - ' . $data->personName);            
            $fields[] = $gridCheques;
            
            $field = new MDiv('divSeparator1', '<hr>', null, 'align="center"');
            $field->setWidth('99%');
            $fields[] = $field;
        }
        else
        {
            $fields[] = $label = new MLabel(_M('Não foram encontrados cheques referentes a esta pessoa.', $module), 'blue');
            $label->setBold(true);
        }
        
        return new MDiv('chequesDiv', $fields, null, 'align="center"');
    }

    /**
     * Event triggered when user chooses returnBankCodeConsultation from form
     */
    public function returnBankCodeConsultation($sender = null)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data = $this->getTypesData();
    }

    public function getMoreOptions($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        // Invoice
        $invoiceIdLabel = new MText( 'invoiceIdLabel', _M('Código do título', $module ) . ':' );
        $invoiceIdLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $field2[] = $invoiceIdLabel;
        $field2[] = new MTextField( 'invoiceId', $this->getFormValue( 'invoiceId', $data->invoiceId ), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE') );
        $fields2_[] = new MHContainer( 'container21', $field2 );
        $validators[] = new MIntegerValidator( 'invoiceId', _M('Código do título', $module ) );
        
        // Return bank code
        $returnBankCodeLabel = new MText( 'returnBankCodeLabel', _M('Código de retorno do banco', $module ) . ':' );
        $returnBankCodeLabel->setWidth( SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE') );
        $field3[] = $returnBankCodeLabel;
        $field3[] = new MTextField( 'returnBankCode', $this->getFormValue( 'returnBankCode', $data->returnBankCode ), '', 20 );
        $validators[] = new MIntegerValidator( 'returnBankCode', _M('Código de retorno do banco', $module ) );
        $fields2_[] = new MHContainer( 'container3', $field3 );
        $fields2_[] = new MSeparator( '' );
        $fields2[] = new MVContainer( 'mvcFilters', $fields2_ );
        
        $fields[] = new MBaseGroup( 'mbgFilterByCodes', _M('Filtrar um título pelo código do Sagu ou pelo código de retorno do banco', $module ), $fields2 );
        $this->manager->getTheme()->setContent( $fields );
        $this->setShowPostButton( false );
    }
    
    /*
     * Method to generate the carnet 
     */
    public function btnGenerateCarnet()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $invoices = explode(',', MIOLO::_REQUEST('invoices'));
        $checkTitle = unserialize( str_replace('\"', '"', MIOLO::_REQUEST('checkTitle')) );

        //Filter checked invoices on grid
        $selectedInvoices = array();
        if (count($checkTitle) > 0)
        {
            foreach ($invoices as $i => $inv)
            {
                if (in_array($inv, array_keys($checkTitle)))
                {
                    $selectedInvoices[] = $inv;
                }
            }
        }

        if( count($selectedInvoices) > 0 )
        {
           self::generateCarnet($selectedInvoices);
        }
        else
        {
            $msg  = _M('Não foi encontrado/selecionado nenhum título para gerar.',$module);
            $goto = SAGU::getStackBackUrl();
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            $caption = _M('Informação',$module);
            $MIOLO->information($msg, $goto);
        }
    }
    
    
    /*
     * Method static to create the carnet of open invoices
     */
    
    public static function generateCarnet($invoices) //array with invoiceids to generate the canet
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        
        if( is_array($invoices) )
        {
            $businessCompany = new BusinessBasicBusCompany();
            $company = $businessCompany->getCompany(SAGU::getParameter('BASIC', 'DEFAULT_COMPANY_CONF'));
            $businessLegalPerson = new BusinessBasicBusLegalPerson();
            $legalPerson = $businessLegalPerson->getLegalPerson($company->personId); //campany data
            $businessCity = new BusinessBasicBusCity();
            $city = $businessCity->getCity($legalPerson->cityId); //company city data
            $busPerson = new BusinessBasicBusPerson();
            $busDocument = new BusinessBasicBusDocument();
            $busContract = new BusinessAcademicBusContract();
            $busTurn = new BusinessBasicBusTurn();
            $busUnit = new BusinessBasicBusUnit();
            $busClassPupil = new BusinessAcademicBusClassPupil();
            
            $businessInvoice = new BusinessFinanceBusInvoice();
            $businessEntry = new BusinessFinanceBusEntry();
            
            $parameters['companyId'] = (int)$company->companyId;
            $parameters['companyName'] = $company->name;
            $parameters['cnpj'] = $legalPerson->cnpj;
            $parameters['phone'] = $company->phone;
            $parameters['companyCity'] = $city->name;
            $parameters['companyStateId'] = $city->stateId;
            $parameters['companyZipCode'] = $city->zipCode;
            $parameters['companyLocation'] = $legalPerson->location;
            $parameters['companyNumber'] = $legalPerson->number;
            $parameters['inscEstadual'] = $legalPerson->stateRegistration;
            
            foreach($invoices as $cod=>$invoiceId)
            {
                $varInvoices = (strlen($varInvoices) > 0 ? $varInvoices.','.$invoiceId : $invoiceId);
            }
            $parameters['invoices'] = $varInvoices;
            
            $report = new SReport();
            $report->setReportName('carne');
            $report->setFileType(SReport::FILETYPE_PDF);
            $report->setParameters($parameters);
            if ( !$report->generate() )
            {
                $MIOLO->error(_M('Não foi possível gerar o carnê', $module ));
            }
        }
        else
        {
            return false;
        }
    }

    /**
     * Generate carnets by getting invoices from a URL variable called invoices.
     */
    public function generateCarnetByInvoicesPassedByURL()
    {
        $invoices = MIOLO::_request('invoices');

        if ( strlen($invoices) > 0 )
        {
            $invoices = explode(',', $invoices);
            self::generateCarnet($invoices);
        }
    }

    /**
     * Method to close all selected invoices
     */
    public function btnCloseMultipleInvoice()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $args = array('invoices'=>$MIOLO->_request('invoices'), 'checkTitle'=>$MIOLO->_request('checkTitle'), 'personId'=>$MIOLO->_request('personId'));
        $url = $MIOLO->getActionURL($module, 'main:process:closeMultipleInvoice', null, $args);

        $MIOLO->page->redirect($url);
    }
    
    /**
     * Método para negociar múltiplos títulos
     */
    public function btnReportMatricula_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $businessLearning = new BusinessAcademicBusLearningPeriod();
        $businessContract = new BusinessAcademicBusContract();
        $verificaContract = $businessContract->obterContratoPessoa($MIOLO->_REQUEST('personId'));
        
         if ( count($verificaContract) == 1 )
         {
              $businessContract = $businessContract->getContract($verificaContract[0][0]);
              // procurar pelo período letivo referente no current_periodId                  
              $dados = new stdClass();
              $dados->courseId = $businessContract->courseId;
              $dados->courseVersion = $businessContract->courseVersion;
              $dados->turnId = $businessContract->turnId;
              $dados->unitId = $businessContract->unitId;
              $dados->periodId = SAGU::getParameter('BASIC', 'CURRENT_PERIOD_ID');

              $periodoLetivo = $businessLearning->searchLearningPeriod($dados, true);
                 
              $args = array('report'=>'resumomatricula', 'str_contractid'=> $verificaContract[0][0], 'str_learningperiodid' => $periodoLetivo[0]->learningPeriodId);              
         }
         $businessContractMatricula = new BusinessAcademicBusContract();
         $ResumoMatricula = $businessContractMatricula->obterResumoMatricula($verificaContract[0][0]);

         if ( count($ResumoMatricula) == 1 )
         {
              $args = array('report'=>'resumomatricula', 'str_contractid'=> $ResumoMatricula[0][0], 'str_learningperiodid' => $ResumoMatricula[0][1]);              
         }
         else if(count($verificaContract)  > 1)
         {
              $args = array('report'=>'resumomatricula');              
         }
         $url = $MIOLO->getActionURL('academic', 'main:document:generateReport', null, $args);

         $MIOLO->page->redirect($url); 
    }
    
    /**
     * Método para negociar múltiplos títulos
     */
    public function btnNegotiateMultipleInvoices_click($args)
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $select = MIOLO::_REQUEST('checkTitle');
        $busInvoice = new BusinessFinanceBusReceivableInvoice();
        
        //Caso FrmNegotiationAlt, só manda para a tela de negociacao
        if ( SAGU::getParameter('FINANCE', 'NEGOCIACAO_FORM') == 'FrmNegotiation')
        {
            if( count($select) > 0 )
            {
                $negociacao = false;
                $antecipacao = false;
                foreach($select as $invoice=>$line)
                {
                    $dataInvoice = $busInvoice->getReceivableInvoice($invoice);
                    if( SAGU::dateDiff($dataInvoice->maturityDate, SAGU::getDateNow()) >= 0 )
                    {
                        $antecipacao = true; //Antecipacao
                    }
                    else
                    {
                        $negociacao = true; //Negociacao
                    }
                    $invoices[] = $invoice;
                }

                if( $negociacao && $antecipacao )
                {
                    $this->addError(_M('Devem ser selecionados apenas títulos para negociação ou para antecipação, verifique as datas de vencimento dos títulos selecionados', $module));
                }
                else
                {
                    $args = array('checkTitle'=> implode(',', $invoices), 'personId'=>$MIOLO->_request('personId'), 'operationId' => ($negociacao ? 'n' : 'a'), 'function'=>'insert');
                    $url = $MIOLO->getActionURL($module, 'main:process:negotiation', null, $args);

                    $MIOLO->page->redirect($url);    
                }
            }
            else
            {
                $this->addError(_M('Nenhum título selecionado', $module));
            }
        }
        elseif ( SAGU::getParameter('FINANCE', 'NEGOCIACAO_FORM') == 'FrmNegotiationAlt')
        {
            $invoiceIds = implode(',', array_keys($select));
            
            $args = array('personId'=>$MIOLO->_request('personId'), 'function'=>'insert', 'invoiceIds' => $invoiceIds);
            $url = $MIOLO->getActionURL($module, 'main:process:negotiation', null, $args);

            $MIOLO->page->redirect($url);   
        }
        
    }

    /**
     * Get the data from form and put on a object
     **/
    public function getTypesData($sender = null)
    {
        $data = new stdClass();
        $data->personId = $this->getFormValue( 'personId' );
        $data->personName = $this->getFormValue( 'personName' );
        $data->invoiceId = $this->getFormValue( 'invoiceId' );
        $data->returnBankCode = $this->getFormValue( 'returnBankCode' );
        return $data;
    }
    
    public function aditarIncentivoEvento()
    {
        $MIOLO = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        
        $data = $this->getTypesData();
        
        $incentiveId = MIOLO::_REQUEST('incentiveId');
        
        try
        {
            $busIncentive = new BusinessFinanceBusIncentive();
            $incentive    = $busIncentive->getIncentive($incentiveId);
            
            // Se o incentivo já estiver aditado, desbloqueia.
            if ( $incentive->incentivoAditado == DB_TRUE )
            {
                $ok = $busIncentive->aditaIncentivo($incentiveId, true);
                $msg = _M("Aditamento do incentivo {$incentiveId} revertido com sucesso.");
            }
            else
            {
                $ok = $busIncentive->aditaIncentivo($incentiveId);
                $msg = _M("Incentivo {$incentiveId} aditado com sucesso.");
            }
            
            $args = array('personId' => $data->personId);
            $goto = $MIOLO->GetActionURL(MIOLO::getCurrentModule(), MIOLO::getCurrentAction(), null, $args);
            $MIOLO->information($msg, $goto);
        }
        catch(Exception $e)
        {
            $this->AddError($e);
        }
        
    }
    
    /**
     * Gera e mostra na tela o relatório da negociação (clicado na aba de Negociações/Antecipações).
     */
    public function gerarRelatorioDeNegociacao()
    {
        $module = MIOLO::getCurrentModule();
        
        //Parameters of the report
        $parameters['negociacaoid'] = MIOLO::_REQUEST('negotiationId');
        
        $report = new SReport();
        $report->setReportName('confissao_negociacao');
        $report->setFileType( SReport::FILETYPE_PDF );
        $report->setParameters($parameters);
        $result = $report->generate();
        
        if ( !strlen($result) > 0 )
        {
            $this->addError(_M('Não foi possível encontrar dados com os filtros informados.', $module));
        }
    }
}
?>