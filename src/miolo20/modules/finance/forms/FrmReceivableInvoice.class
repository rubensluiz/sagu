<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 *
 * This file handles the connection and actions for fiReceivableInvoice table
 *
 * @author Armando Taffarel Neto [taffarel@solis.coop.br]
 *
 * $version: $Id$
 *
 * \b Maintainers \n
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Eduardo Beal Miglioransa [eduardo@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * 
 * @since
 * Class created on 13/12/2005
 *
 **/
 
$MIOLO  = MIOLO::getInstance();
$MIOLO->uses('forms/FrmInvoice.class', 'finance');
/**
 * Form to search the finInvoice table
 */
class FrmReceivableInvoice extends FrmInvoice
{

    /**
     * Class constructor
     */
    public function __construct()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $function = MIOLO::_request('function');
        $this->module = $module;

        parent::__construct();
    }

    /**
     *  Default method to define fields
     */
    public function defineFields()
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $this->module;
        $function = MIOLO::_request('function');
        
        // Para o fluxo de aprovações
        if ( !strlen($MIOLO->_REQUEST('fluxosolicitacaoid')) > 0 )
        {
            if ( in_array($function, array('update', 'delete')) )
            {
                $invoiceId = strlen(MIOLO::_request('invoiceId', 'GET'))>0 ? MIOLO::_request('invoiceId', 'GET') : MIOLO::_request('invoiceId');
                $business = new BusinessFinanceBusReceivableInvoice();
                $data = $business->getReceivableInvoice($invoiceId);

                // busca academico
                $contractId = $business->getInvoiceContractId($invoiceId);
                
                if ( strlen($contractId) > 0 )
                {
                    $fields[] = new SInformationField(array(
                        'value' => array(_M('Código do contrato') => $contractId),
                    ));
                }
                
                // busca pedagogico
                $inscricaoId = PrcTituloInscricao::obterCodInscricao($invoiceId);
                
                if ( strlen($inscricaoId) > 0 )
                {
                    $fields[] = new SInformationField(array(
                        'title' => _M('Informações do módulo Pedagógico'),
                        'value' => array(_M('Código da inscrição') => $inscricaoId),
                    ));
                }
            }

            $fields[] = new MHiddenField('goto', MIOLO::_request('goto') ? MIOLO::_request('goto') : $this->getFormValue('goto', $goto));

            if ($function == 'update')
            {
                $fields[] = new MTextLabel('lastModification', '['.$data->userName.' - '.$data->dateTime.']', _M('Última modificação', $module));
            }
            
            $fields[] = new MSeparator();
            
            parent::defineFields($data, $fields);
        }
    }
   

    /**
     * Event triggered when user chooses New from the toolbar
     **/
    public function tbBtnNew_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        $data = $this->getTypesData();
        $vars = get_object_vars($data);
    }
    
    /**
     * Event triggered when user chooses Delete from the toolbar
     **/
    public function tbBtnDelete_click($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();
        $invoiceId = MIOLO::_request('invoiceId') ? MIOLO::_request('invoiceId') : MIOLO::_request('invoiceId', 'GET');
        $goto   = MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET');
        
        $data   = $this->getTypesData();
        $opts   = array('event'     => 'tbBtnDelete_confirm',
                        'function'  => 'delete',
                        'invoiceId' => $invoiceId,
                        'goto'      => urlencode(strlen($goto)>0 ? $goto : SAGU::getStackBackUrl())
                       );
            

        $gotoYes = $MIOLO->getActionURL( $module, $action, null, $opts );
        $gotoNo = $goto;
        
        if (!strlen($gotoNo)>0)
        {
            $goto    = SAGU::getStackBackUrl();
            $gotoNo  = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
        }
        $msg     = _M("Tem certeza de que deseja cancelar o título?", $module);
        $caption = _M('Questão', $module);
        $MIOLO->question($msg, $gotoYes, $gotoNo);
    }
    
    /**
     * Event triggered when user chooses Yes from the Delete prompt dialog
     **/
    public function tbBtnDelete_confirm($sender = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $action = MIOLO::getCurrentAction();

        try
        {
            $business = new BusinessFinanceBusReceivableInvoice();
            $business->getDatabase()->execute( 'BEGIN TRANSACTION' );

            $ok = $business->deleteReceivableInvoice(MIOLO::_request('invoiceId'));

            if ( $ok )
            {
                $business->getDatabase()->execute( 'COMMIT' );
                $msg  = SAGU::getParameter('BASIC', 'MSG_RECORD_DELETED');
                $goto = $this->getFormValue('goto', MIOLO::_request('goto') ? MIOLO::_request('goto') : MIOLO::_request('goto', 'GET'));
                if (!strlen($goto)>0)
                {
                    $goto = SAGU::getStackBackUrl();
                }
                $goto = strlen($goto)>0 ? $MIOLO->getActionURL($module, 'main') : $MIOLO->getActionURL($module, $action);
                $caption = _M('Informação',$module);
                $MIOLO->information($msg, $goto);
            }
            else
            {
                $business->getDatabase()->execute( 'ROLLBACK' );
                $msg  = _M('Erro executando a operação solicitada.',$module);
                $goto = MIOLO::_request('goto', 'GET');
                if (!strlen($goto)>0)
                {
                    $goto = SAGU::getStackBackUrl();
                }
                $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
                $caption = _M('Erro', $module);
                $MIOLO->error( $msg, $goto, $caption );
            }
        }
        catch ( Exception $e )
        {
            $business->getDatabase()->execute( 'ROLLBACK' );
            $MIOLO->error($e->getMessage(), $this->getPreviousURL());

        }
    }
   
    /**
     * Event triggered when user chooses Save from the toolbar
     **/
    public function tbBtnSave_click($sender = null)
    {
        $MIOLO     = MIOLO::getInstance();
        $module    = MIOLO::getCurrentModule();
        $action    = MIOLO::getCurrentAction();
        $function  = MIOLO::_request('function');

        $data     = $this->getTypesData();        
        $business = new BusinessFinanceBusReceivableInvoice();    
        
        //Verifica se a data de referência é menor que a data de vencimento e seta um erro caso seja.
        $diferencaDeDias = SAGU::dateDiff($data->maturityDate,  $data->referenceMaturityDate);
            
        if( $diferencaDeDias > 0 )
        {
            $msg = _M('A data de referência não pode ser menor que a data de vencimento.', $module);
            
            $goto = $MIOLO->getActionURL($module, $action);
            $goto .= '&&function='.$function.'&invoiceId='.$data->invoiceId;
            
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
                
        if ( $function == 'update' )
        {
            $finReceivableInvoice = new FinReceivableInvoice($data->invoiceId);
        
            if ( SAGU::compareTimestamp($data->maturityDate, '>', $finReceivableInvoice->maturityDate) )
            {   
                // Verifica se o processo possui fluxo de aprovações.
                FinFluxoAprovacaoConfiguracao::checarAcessoDoUsuarioAoProcesso(FinFluxoAprovacaoProcesso::ADIAMENTO_DE_TITULOS, $data->invoiceId, $data);
            }
            
            $ok  = $business->updateReceivableInvoice($data);
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_UPDATED');
        }
        else
        {
            $ok  = $business->insertReceivableInvoice($data);
            $data->invoiceId = $ok;
            if( strlen($ok) > 0 )
            {
                $business = new BusinessFinanceBusEntry();
                $data->comments = $data->entryComments;
                $ok       = (strlen($business->insertEntry($data))>0);
         
            }
            $msg = SAGU::getParameter('BASIC', 'MSG_RECORD_INSERTED');
        }

        if ( $ok )
        {
            $opts = array('invoiceIdS'=>$data->invoiceId);
            $goto = $this->getFormValue('goto');
            if (!(strlen($goto)>0))
            {
                $goto = SAGU::getStackBackUrl();
            }
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL( $module, $action, null, $opts);

            if ( $function == 'update' )
            {
                $caption = _M('Informação', $module);
                $MIOLO->information($msg, $goto);
            }
            else
            {

                $optsYes = array('event'   =>'tbBtnNew_click',
                                 'function'=>'insert');

                $gotoYes = $MIOLO->getActionURL($module, $action, null, $optsYes);
                
                $optsNo  = array('event'     =>'tbBtnSearch_click',
                                 'function'  =>'search',
                                 'invoiceIdS'=>$data->invoiceId);

                $gotoNo   = SAGU::getStackBackUrl();
                $gotoNo   = strlen($gotoNo)>0 ? $gotoNo : $MIOLO->getActionURL($module, $action, null, $optsNo);

                $MIOLO->question($msg, $gotoYes, $gotoNo);
            }
        }
        else
        {
            $msg  = _M('Erro executando a operação solicitada.', $module);
            
            $goto = $this->getFormValue('goto');
            if (!(strlen($goto)>0))
            {
                $goto = SAGU::getStackBackUrl();
            }
            $goto = strlen($goto)>0 ? $goto : $MIOLO->getActionURL($module, $action);
            
            $caption = _M('Erro', $module);
            $MIOLO->error($msg, $goto, $caption);
        }
    }
    
    
    public function getTypesData()
    {
        $MIOLO = MIOLO::getInstance();
        
        $data = new FinReceivableInvoice();
        $vars = get_object_vars($data);
        foreach ( $vars as $var => $value )
        {
            if ( $this->$var && $var != 'description' )
            {
                $data->$var = $this->$var->value;
            }
        }
        
        $data->operationId    = $this->operationId->value;
        $data->entryDate      = $this->entryDate1->value;
        $data->entryComments  = $this->entryComments->value;
        $data->bankReturnCode = $this->bankReturnCode->value;
        $data->creationType   = SAGU::getParameter('FINANCE', 'MANUAL_ENTRY_CREATION_TYPE');
        
        // Para o fluxo de aprovações
        $data = FinFluxoSolicitacaoRegistro::obterDadosDoRegistro($data); 

        return $data;
    }
}
?>