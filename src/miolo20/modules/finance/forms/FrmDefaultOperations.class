<?php

/**
 * <--- Copyright 2005-2010 de Solis - Cooperativa de Soluções Livres Ltda.
 * 
 * Este arquivo é parte do programa Sagu.
 * 
 * O Sagu é um software livre; você pode redistribuí-lo e/ou modificá-lo
 * dentro dos termos da Licença Pública Geral GNU como publicada pela Fundação
 * do Software Livre (FSF); na versão 2 da Licença.
 * 
 * Este programa é distribuído na esperança que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU/GPL em
 * português para maiores detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título
 * "LICENCA.txt", junto com este programa, se não, acesse o Portal do Software
 * Público Brasileiro no endereço www.softwarepublico.gov.br ou escreva para a
 * Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301, USA --->
 * 
 * Default operations form
 *
 * @author Rafael Luís Spengler [rafael@solis.coop.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 * Daniel Afonso Heisler [daniel@solis.coop.br]
 * Jamiel Spezia [jamiel@solis.coop.br]
 * William Prigol Lopes [william@solis.coop.br]
 * Rafael Luís Spengler [rafael@solis.coop.br]
 * Samuel Koch [samuel@solis.coop.br]
 * Armando Taffarel Neto [taffarel@solis.coop.br]
 * Moises Heberle [moises@solis.coop.br]
 *
 * @since
 * Class created on 03/01/2006
 *
 **/

/**
 * Form to manipulate a voucher messages
 **/
class FrmDefaultOperations extends SManagementForm
{
    private $validators = array();
    private $_data;

    /**
     * Class constructor
     **/
    public function __construct()
    {
        $module = MIOLO::getCurrentModule();
        parent::__construct(new FinDefaultOperations(), array(), 'BusDefaultOperations', _M('Operações padrão', $module));
        $this->toolbar->disableButton('tbBtnDelete');
        $this->toolbar->disableButton('tbBtnPrint');
        $this->toolbar->disableButton('tbBtnNew');
        $this->toolbar->disableButton('tbBtnSearch');
    }

    /**
     * Default method to define fields
     **/
    public function defineFields()
    {
        $function = MIOLO::_request('function');
        $fields = array();
        
        if ( in_array($function, array(SForm::FUNCTION_UPDATE, '')) )
        {
            $business = new BusinessFinanceBusDefaultOperations();
            $data = $this->_data = $business->getDefaultOperations();    
            if ( is_object($data) )
            {
                $function = SForm::FUNCTION_UPDATE;
                $fields[] = new MHiddenField('function', $function );
            }
        }
        
        $camposReceber = $this->getCamposReceber();
        $camposPagar = $this->getCamposPagar();
        
        $tbg = new MTabbedBaseGroup("tbgOperacoesPadrao");
        $tbg->createTab("tabReceber", "Contas a receber", $camposReceber);
        
        // Mostrar apenas se módulo CAP estiver habilitado
        if( SAGU::getParameter("basic", "MODULE_CONTASPAGAR_INSTALLED") === "YES" )
        {
            $tbg->createTab("tabPagar", "Contas a pagar", $camposPagar);
            
        }
                
        $fields[] = $tbg;
        
        parent::defineFields($fields, $this->validators, $data);
    }
    
    public function standardField($key, $label, $hint, $operationType)
    {
        $module = MIOLO::getCurrentModule();
        $descriptionId = $key.'Description';
        $data = $this->_data;
                
        $typeDescription = array('D' => _M('Débito', $module), 'C' => _M('Crédito', $module));
        
        $labelField = new MText($key.'Label', $label . ':');
        $labelField->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $labelField->setClass('m-caption m-caption-required');
        
        $lkpField  = new MLookupTextField($key, $this->getFormValue($key, $data->$key), '', SAGU::getParameter('BASIC', 'FIELD_ID_SIZE'), $typeDescription[$operationType], null, $descriptionId, $module, 'Operation', null, array('operationTypeId' => $key.'_operationTypeId'), true);
        $lkpField->setJsHint($hint);
        $this->validators[] = new MIntegerValidator($key, $label, 'required');
        
        $descField = new MTextField($descriptionId, $this->getFormValue($descriptionId, $data->$descriptionId), '', SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
        $descField->setReadOnly(true);
        $descField->setJsHint($hint);
        
        $operationTypeFld = new MHiddenField($key.'_operationTypeId', $operationType);
        
        return new MHContainer('hct'.$key, array($labelField, $lkpField, $descField, $operationTypeFld));
        
    }
    
    /**
     * Cria e retorna um array com os campos do contas a receber
     * 
     * @return Array Array com os campos referentes as operações do contas a receber
     */
    private function getCamposReceber()
    {
        $module   = MIOLO::getCurrentModule();
        
        $fields = array();
        
        $fields[] = $this->standardField('agreementOperation', _M('Acordo', $module), _M('Informe o código da operação de acordo', $module), 'C');
        $fields[] = $this->standardField('otherAdditionsOperation', _M('Acrécimos bancários', $module), _M('Informe o código de acréscimos bancários', $module),'D');
        $fields[] = $this->standardField('addCurricularComponentOperation', _M('Acréscimo de disciplina', $module), _M('Informe a operação de acréscimo de disciplina', $module),'D');
        $fields[] = $this->standardField('cancelCurricularComponentOperation', _M('Cancelamento de disciplina', $module), _M('Informe a operação de cancelamento de disciplina', $module), 'C');
        $fields[] = $this->standardField('discountOperation', _M('Desconto', $module), _M('Informe o código da operação de desconto', $module), 'C');
        $fields[] = $this->standardField('otherDiscountsOperation', _M('Descontos bancários', $module), _M('Informe o código de descontos bancários', $module), 'C');
        $fields[] = $this->standardField('closeIncomeForecastOperation', _M('Fechamento de previsão de lançamento', $module), _M('Informe o código da operação de fechamento da previsão de lançamento', $module), 'C');
        $fields[] = $this->standardField('bankClosingTaxOperation', _M('Fechamento para taxa bancária', $module), _M('Informe o código da operação de fechamento da taxa bancária', $module), 'C');
        $fields[] = $this->standardField('interestOperation', _M('Juros', $module), _M('Informe o código da operação de juros', $module), 'D');
        $fields[] = $this->standardField('enrollOperation', _M('Matrícula', $module), _M('Informe o código da operação de matrícula', $module),'D');
        $fields[] = $this->standardField('monthlyFeeOperation', _M('Mensalidade', $module), _M('Informe o código da operação padrão de mensalidade', $module), 'D');        
        $fields[] = $this->standardField('courseTransferOperation', _M('Mudança de curso/turno', $module), _M('Informe o código da operação para mudança de curso/turno', $module), 'D');        
        $fields[] = $this->standardField('libraryFineOperation', _M('Multa biblioteca', $module), _M('Informe o código da operação de multa da biblioteca', $module), 'D');        
        $fields[] = $this->standardField('paymentOperation', _M('Pagamento', $module), _M('Informe o código da operação de pagamento', $module), 'C');
        $fields[] = $this->standardField('protocolOperation', _M('Protocolo', $module), _M('Informe o código da operação de protocolo', $module), 'D');
        $fields[] = $this->standardField('repaymentCurricularComponentOperation', _M('Reembolso de disciplina', $module), _M('Informe o código da operação de reembolso de disciplina', $module), 'C');
        $fields[] = $this->standardField('reentryOperation', _M('Reingressos', $module), _M('Informe o código da operação para reingressos', $module), 'D');
        $fields[] = $this->standardField('renewalOperation', _M('Renovação de matrícula', $module), _M('Informe o código da operação de renovação', $module), 'D');
        $fields[] = $this->standardField('withdrawOperation', _M('Retirada de caixa', $module), _M('Informe o código da operação padrão de retirada de caixa', $module), 'C');
        $fields[] = $this->standardField('bankTaxOperation', _M('Taxa bancária', $module), _M('Entre com o código da operação de taxa bancária', $module), 'C');
        $fields[] = $this->standardField('transferOperation', _M('Transferidos', $module), _M('Informe o código da operação para transferidos', $module), 'D');
        $fields[] = $this->standardField('payrollDiscountOperation', _M('Desconto em folha', $module), _M('Informe o código da operação para desconto em folha', $module), 'C');
        $fields[] = $this->standardField('transferenciaDeSaldoOperation', _M('Transferência de saldo', $module), _M('Informe o código da operação para transferência de saldo', $module), 'C');
        $fields[] = $this->standardField('reemissaoDeTituloOperation', _M('Reemissão de título', $module), _M('Informe o código da operação para reemissão de título', $module), 'D');
        $fields[] = $this->standardField('recebimentoDeValorDeCaixa', _M('Recebimento de valor de caixa', $module), _M('Informe o código da operação para recebimento de valor de caixa', $module), 'C');
        $fields[] = $this->standardField('transferenciaDeValorDeCaixa', _M('Transferência de valor de caixa', $module), _M('Informe o código da operação para transferência de valor de caixa', $module), 'D');
        $fields[] = $this->standardField('operacaoDevolucao', _M('Devolução de incentivos', $module), _M('Informe o código da operação utilizado para representar os valores concedidos pela instituição na forma de incentivos e que devem ser devolvidos pelo aluno', $module), 'D');
        
        return $fields;
        
    }
    
    /**
     * Cria e retorna um array com os campos do CAP
     * 
     * @return Array Array com os campos referentes as operações do CAP
     */
    private function getCamposPagar()
    {
        $module   = MIOLO::getCurrentModule();
        
        $fields = array();
        
        $fields[] = $this->standardField('capoperacaopagamentoid', _M('Pagamento', $module), _M('Informe o código da operação de acordo', $module), 'D');
        $fields[] = $this->standardField('capoperacaocobrancaid', _M('Cobrança', $module), _M('Informe o código da operação de acordo', $module), 'C');
        $fields[] = $this->standardField('capoperacaodescontoid', _M('Desconto', $module), _M('Informe o código da operação de acordo', $module), 'D');
        $fields[] = $this->standardField('capoperacaojurosid', _M('Juros', $module), _M('Informe o código da operação de acordo', $module), 'C');
        
        return $fields;
        
    }
}
?>
