<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of FrmFluxoAprovacaoConfiguracao
 *
 * @author augusto
 */
class FrmFluxoAprovacaoConfiguracao extends SManagementForm
{
    public static $nivel = 1;
    
    public function __construct()
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->uses('/ui/controls/msubdetail.class');
        
        parent::__construct(new FinFluxoAprovacaoConfiguracao(), array('fluxoaprovacaoconfiguracaoid'), null, _M('Configuração de fluxo de aprovação'));
    }
    
    public function defineFields() 
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        $configuracaoId = $MIOLO->_REQUEST('fluxoaprovacaoconfiguracaoid');
        $fields[] = new SHiddenField('fluxoaprovacaoconfiguracaoid', $configuracaoId);
        
        $finFluxoAprovacaoConfiguracao = new FinFluxoAprovacaoConfiguracao($configuracaoId);
        
        $fluxoAprovacaoProcesso = new FinFluxoAprovacaoProcesso();
        $processos = $fluxoAprovacaoProcesso->listarProcessos();        
        $processoLabel = new MText('processoLabel', _M('Selecione o processo') . ':');
        $processoLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $processoLabel->setClass('m-caption m-caption-required');
        
        if ( strlen($configuracaoId) > 0 )
        {
            $finFluxoProcesso = new FinFluxoAprovacaoProcesso($finFluxoAprovacaoConfiguracao->fluxoAprovacaoProcessoId);
            $processo = new MText('descri', $finFluxoProcesso->nomedoprocesso . ' - ' . $finFluxoProcesso->descricao);
            $processo->addAttribute('style', 'font-weight:bold;');
            $fields[] = new SHiddenField('processoId', $finFluxoProcesso->fluxoAprovacaoProcessoId);
        }
        else
        {
            $processo = new MSelection('processoId', $finFluxoAprovacaoConfiguracao->fluxoAprovacaoProcessoId, null, $processos);
        }
        
        $fields[] = new MHContainer('processoHC', array($processoLabel, $processo));
        $validators[] = new MRequiredValidator('processoId', _M('Seleção de processo'));
        
        $fields[] = $this->obterSubdetailDeNiveis($configuracaoId);
        
        $button = new MButton('excluirNiveis', _M("Excluir todos os níveis registrados."));
        $hint = new MText('info', _M('Necessário salvar para confirmar.'), '#287eb0');
        $hint->setClass('m-hint');
        $hint->addAttribute('style', 'margin-top:5px;');
        $fields[] = $container = new MHContainer('clearContainer', array($button, $hint));
        $container->setShowLabel(false);
        
        parent::defineFields($fields, $validators);
    }
    
    /**
     * Retorna subdetail de níveis do processo.
     * 
     * @param int $configuracaoId
     * @return \MSubDetail
     */
    private function obterSubdetailDeNiveis($configuracaoId = null)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = MIOLO::getCurrentModule();
        $event  = $MIOLO->_REQUEST('event');
        
        if ( $event != 'tbBtnSave:click' )
        {
            MSubDetail::clearData('fluxoAprovacaoNiveis');
        }
        
        $flds[] = new MDiv('divError', '');
        
        $flds[] = new SHiddenField('fluxoAprovacaoNivelId');
        $flds[] = new SHiddenField('configuracaoId', $configuracaoId);
        $flds[] = new SHiddenField('avaliador', 1);
        $valids[] = new MIntegerValidator('avaliador', _M('Avaliador'));
        
        $quemLabel = new MText('quemLabel', _M('Quem aprova') . '?:');
        $quemLabel->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
        $quemLabel->setClass('m-caption m-caption-required');
        $quemUser = new MRadioButton('quem', 'user', '', true, "Usuário");
        $quemUser->addAttribute('onChange', $this->getAjaxAction('exibirFiltrosQuem', 'divFiltrosQuem', false, array('radio' => 'user')));
        $quemGroup = new MRadioButton('quem', 'group', '', false, "Grupo");
        $quemGroup->addAttribute('onChange', $this->getAjaxAction('exibirFiltrosQuem', 'divFiltrosQuem', false, array('radio' => 'group')));
        $flds[] = new MHContainer('quemHC', array($quemLabel, $quemUser, $quemGroup));
        $valids[] = new MRequiredValidator('quem', 'Quem aprova');
        $flds[] = new MSeparator();
        
        $filtros = new stdClass();
        $filtros->radio = 'user';
        $flds[] = new MDiv('divFiltrosQuem', $this->exibirFiltrosQuem($filtros));
        $valids[] = new MRequiredValidator('code', _M('Avaliador'));
        
        $flds[] = new MSeparator("<br>");
        
        $cols[] = new MGridColumn(_M('Código do nível', $module), 'right', true, '', false, 'fluxoAprovacaoNivelId');
        $cols[] = new MGridColumn(_M('Nível', $module), 'right', true, '', true, 'nivel');
        $cols[] = new MGridColumn(_M('Quem aprova?', $module), 'center', true, '', true, 'quem');
        $cols[] = new MGridColumn(_M('Código', $module), 'right', true, '', true, 'code');
        $cols[] = new MGridColumn(_M('Nome', $module), 'left', true, '', true, 'nome');
        $cols[] = new MGridColumn(_M('Avaliador', $module), 'left', true, '', false, 'avaliador');
        
        $sub = new MSubDetail('fluxoAprovacaoNiveis', _M('Níveis de aprovação'), $cols, $flds, false);
        $sub->setValidators($valids); 
        $sub->addActionEvent('add', 'aoAdicionarNivel', __CLASS__);
        
        if ( strlen($configuracaoId) > 0 && $event != 'tbBtnSave:click' )
        {
            $finFluxoAprovacaoNivel = new FinFluxoAprovacaoNivel();
            $niveis = $finFluxoAprovacaoNivel->buscarNiveisPelaConfiguracao($configuracaoId, true);
            
            if ( count($niveis) > 0 )
            {
                $sub->setData($niveis, 'fluxoAprovacaoNiveis');
            }
        }
        
        return $sub;
    }
    
    /**
     * Carrega os filtros para buscar os avaliadores.
     * 
     * @param stdClass $args
     * @return \MHContainer
     */
    public function exibirFiltrosQuem($args)
    {
        $MIOLO  = MIOLO::getInstance();
        $module = $MIOLO->getCurrentModule();
        
        if ( $args->radio == 'group' )
        {
            $label = new MText('groupLabel', _M('Selecione o grupo') . ':');
            $label->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $label->setClass('m-caption m-caption-required');
            $code = new MLookupTextField('code', null, _M('Grupo', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, 'code, nome', 'admin', 'Group', null, array('idgroup' => 'code'), true);
            $nome = new MTextField('nome', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'), _M('Seleção do avaliador'));
            $login = new SHiddenField('user_name');
        }
        else
        {
            $label = new MText('userLabel', _M('Selecione o usuário') . ':');
            $label->setWidth(SAGU::getParameter('BASIC', 'FIELD_CONTAINER_SIZE'));
            $label->setClass('m-caption m-caption-required');
            $code = new MLookupTextField('code', null, _M('Usuário', $module), SAGU::getParameter('BASIC', 'FIELD_LOOKUPFIELD_SIZE'), null, null, array('user_name', 'limbo', 'nome'), 'admin', 'User', null, array('idUser' => 'code'), true);
            $nome = new MTextField('nome', null, null, SAGU::getParameter('BASIC', 'FIELD_DESCRIPTION_SIZE'));
            $login = new MTextField('user_name', null, null, 10, _M('Seleção do avaliador'));
            $login->addAttribute('style', 'width:100px!important');
        }
        
        $container = new MHContainer('containerQuem', array($label, $code, $nome, $login));
        $container->setShowLabel(false);
        
        return $container;
    }
    
    /**
     * Ação executada ao inserir um registro na subdetail de níveis.
     * 
     * @param stdClass $args
     * @return stdClass
     */
    public function aoAdicionarNivel($args)
    {
        $MIOLO = MIOLO::getInstance();
        $MIOLO->page->addAjaxJsCode("
            saguDoAjax('exibirFiltrosQuem', 'divFiltrosQuem', false, '&radio=user');
            document.getElementById('quem').checked = true;
        ");
        
        $args->quem = ($args->quem == 'user') ? 'Usuário' : 'Grupo';
        
        // Obter nível do fluxo adicionado.
        $dataSub = MSubDetail::getData('fluxoAprovacaoNiveis');
        
        // Valida se o avaliador já está registrado.
        foreach ( $dataSub as $sub )
        {
            if ( $sub->quem == $args->quem )
            {
                if ( $sub->code == $args->code )
                {
                    $args->avaliador = 'error';
                }
            }
        }
        
        if ( is_null($dataSub) )
        {
            $args->nivel = 1;
        }
        else
        {            
            $args->nivel = count($dataSub) + 1;
        }
        
        return $args;
    }
    
    /**
     * Limpa a subdetail.
     * 
     * @param type $args
     */
    public function excluirNiveis_click($args=null)
    {
        $subData = MSubDetail::getData('fluxoAprovacaoNiveis');
        $error   = false;
        
        foreach ( $subData as $data )
        {
            if ( strlen($data->fluxoAprovacaoNivelId) > 0 )
            {
                $finFluxoSolicitacao = new FinFluxoSolicitacao();
                $finFluxoSolicitacao->fluxoAprovacaoProcessoId = $this->getFormValue('processoId');
                $busca = $finFluxoSolicitacao->busca();
                
                if ( count($busca) > 0 )
                {
                    $this->addError(_M("Impossível excluir os níveis pois já existe histórico de solicitações para o processo."));
                    $error = true;
                    
                    break;
                }
            }
            
            $data->removeData = true;
            $removeData[] = $data;
        }
        
        if ( !$error && !is_null($subData) )
        {
            MSubDetail::setData('fluxoAprovacaoNiveis', $removeData);
        }
    }
    
    /**
     * Método que registra a configuração com seus respectivos níveis.
     * 
     * @param stdClass $sender
     */
    public function tbBtnSave_click($sender = NULL) 
    {
        try
        {
            $MIOLO = MIOLO::getInstance();
            $configuracaoId = $this->getFormValue('fluxoaprovacaoconfiguracaoid');
            $processoId = $this->getFormValue('processoId');

            $finFluxoaprovacaoConfiguracao = new FinFluxoAprovacaoConfiguracao($configuracaoId);
            $finFluxoaprovacaoConfiguracao->fluxoAprovacaoProcessoId = $processoId;
            
            SDatabase::beginTransaction();

            if ( $finFluxoaprovacaoConfiguracao->save() )
            {
                $subData = MSubDetail::getData('fluxoAprovacaoNiveis');

                foreach ( $subData as $data )
                {
                    $finFluxoAprovacaoNivel = new FinFluxoAprovacaoNivel($data->fluxoAprovacaoNivelId);
                    $finFluxoAprovacaoNivel->fluxoAprovacaoConfiguracaoId = $finFluxoaprovacaoConfiguracao->fluxoAprovacaoConfiguracaoId;
                    $finFluxoAprovacaoNivel->nivel = $data->nivel;

                    if ( $data->quem == 'Grupo' )
                    {
                        $finFluxoAprovacaoNivel->idgroup = $data->code;
                    }
                    else
                    {
                        $finFluxoAprovacaoNivel->idUser = $data->code;
                    }                

                    if ( $data->removeData && strlen($finFluxoAprovacaoNivel->fluxoAprovacaoNivelId) > 0 )
                    {
                        $finFluxoAprovacaoNivel->delete();
                    }
                    else if ( !$data->removeData )
                    {
                        $finFluxoAprovacaoNivel->save();
                    }
                }
            }
            
            SDataBase::commit();
            
            $goto = $MIOLO->getActionURL('finance', 'main:config:fluxoAprovacaoConfiguracao');
            $MIOLO->information("Registro inserido com sucesso!", $goto);
        }
        catch ( Exception $err )
        {
            SDatabase::rollback();
            
            $MIOLO->error($err->getMessage());
        }
    }
    
    /**
     * Valida se os níveis já foram excluidos para a configuração ser exluida.
     * 
     * @param stdClass $sender
     */
    public function tbBtnDelete_confirm($sender = NULL) 
    {
        $MIOLO = MIOLO::getInstance();
        $fluxoaprovacaoconfiguracaoid = $MIOLO->_REQUEST('fluxoaprovacaoconfiguracaoid');
        
        $finFluxoAprovacaoNivel = new FinFluxoAprovacaoNivel();
        $niveis = $finFluxoAprovacaoNivel->buscarNiveisPelaConfiguracao($fluxoaprovacaoconfiguracaoid);
        
        if ( count($niveis) > 0 )
        {
            $goto = $MIOLO->getActionURL('finance', 'main:config:fluxoAprovacaoConfiguracao');
            $MIOLO->error(_M("Ops! Você precisa excluir os níveis antes da configuração!"), $goto);
        }
        else
        {
            parent::tbBtnDelete_confirm($sender);
        }
    }
}

?>
